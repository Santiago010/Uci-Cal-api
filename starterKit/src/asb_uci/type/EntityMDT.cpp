/** @file EntityMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EntityMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityAgainstType.h"
#include "../../../include/asb_uci/type/ActivityByType.h"
#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/DateTimeSigmaType.h"
#include "../../../include/asb_uci/type/EnduranceType.h"
#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/EntityIdentityType.h"
#include "../../../include/asb_uci/type/EntityRemoveInfoType.h"
#include "../../../include/asb_uci/type/EntitySignalSummaryType.h"
#include "../../../include/asb_uci/type/EntitySourceType.h"
#include "../../../include/asb_uci/type/EntityStatusEnum.h"
#include "../../../include/asb_uci/type/ID_Type.h"
#include "../../../include/asb_uci/type/KinematicsType.h"
#include "../../../include/asb_uci/type/MeasurementID_Type.h"
#include "../../../include/asb_uci/type/MobilityEnum.h"
#include "../../../include/asb_uci/type/OB_OperationalStatusEnum.h"
#include "../../../include/asb_uci/type/OrbitalKinematicsChoiceType.h"
#include "../../../include/asb_uci/type/OrbitalSingleVectorParametersType.h"
#include "../../../include/asb_uci/type/PlatformStatusType.h"
#include "../../../include/asb_uci/type/Point2D_Type.h"
#include "../../../include/asb_uci/type/PulseDataID_Type.h"
#include "../../../include/asb_uci/type/StrengthType.h"
#include "../../../include/asb_uci/type/VoiceControlType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityAgainstType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityByType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeSigmaType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EnduranceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityIdentityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityRemoveInfoType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntitySignalSummaryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntitySourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityStatusEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/KinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MeasurementID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MobilityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OB_OperationalStatusEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalKinematicsChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSingleVectorParametersType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlatformStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point2D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PulseDataID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StrengthType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VoiceControlType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityMDT::EntityMDT()
  : entityID_Accessor{boost::make_unique<EntityID_Type>()},
    creationTimestamp_Accessor{boost::make_unique<DateTimeSigmaType>()},
    source_Accessor{boost::make_unique<EntitySourceType>()},
    entityStatus_Accessor{boost::make_unique<EntityStatusEnum>()},
    identity_Accessor{boost::make_unique<EntityIdentityType>()},
    siteEntityID_Accessor{boost::make_unique<SiteEntityID>(0, SIZE_MAX)},
    signalSummary_Accessor{boost::make_unique<SignalSummary>(0, SIZE_MAX)},
    pulseDataID_Accessor{boost::make_unique<PulseDataID>(0, SIZE_MAX)},
    measurementID_Accessor{boost::make_unique<MeasurementID>(0, SIZE_MAX)},
    activityAgainst_Accessor{boost::make_unique<ActivityAgainst>(0, SIZE_MAX)},
    activityBy_Accessor{boost::make_unique<ActivityBy>(0, SIZE_MAX)},
    associatedID_Accessor{boost::make_unique<AssociatedID>(0, SIZE_MAX)},
    capabilityID_Accessor{boost::make_unique<CapabilityID>(0, SIZE_MAX)} {
}

EntityMDT::~EntityMDT() = default;

void EntityMDT::copy(const uci::type::EntityMDT& accessor) {
  copyImpl(accessor, false);
}

void EntityMDT::copyImpl(const uci::type::EntityMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityMDT&>(accessor);
    setEntityID(*(accessorImpl.entityID_Accessor));
    setCreationTimestamp(*(accessorImpl.creationTimestamp_Accessor));
    setSource(*(accessorImpl.source_Accessor));
    setEntityStatus(*(accessorImpl.entityStatus_Accessor));
    if (accessorImpl.operationalStatus_Accessor) {
      setOperationalStatus(*(accessorImpl.operationalStatus_Accessor));
    } else {
      operationalStatus_Accessor.reset();
    }
    setIdentity(*(accessorImpl.identity_Accessor));
    setSiteEntityID(*(accessorImpl.siteEntityID_Accessor));
    if (accessorImpl.mobility_Accessor) {
      setMobility(*(accessorImpl.mobility_Accessor));
    } else {
      mobility_Accessor.reset();
    }
    if (accessorImpl.kinematics_Accessor) {
      setKinematics(*(accessorImpl.kinematics_Accessor));
    } else {
      kinematics_Accessor.reset();
    }
    if (accessorImpl.estimatedKinematics_Accessor) {
      setEstimatedKinematics(*(accessorImpl.estimatedKinematics_Accessor));
    } else {
      estimatedKinematics_Accessor.reset();
    }
    if (accessorImpl.downLocation_Accessor) {
      setDownLocation(*(accessorImpl.downLocation_Accessor));
    } else {
      downLocation_Accessor.reset();
    }
    if (accessorImpl.platformStatus_Accessor) {
      setPlatformStatus(*(accessorImpl.platformStatus_Accessor));
    } else {
      platformStatus_Accessor.reset();
    }
    setSignalSummary(*(accessorImpl.signalSummary_Accessor));
    setPulseDataID(*(accessorImpl.pulseDataID_Accessor));
    setMeasurementID(*(accessorImpl.measurementID_Accessor));
    if (accessorImpl.strength_Accessor) {
      setStrength(*(accessorImpl.strength_Accessor));
    } else {
      strength_Accessor.reset();
    }
    setActivityAgainst(*(accessorImpl.activityAgainst_Accessor));
    setActivityBy(*(accessorImpl.activityBy_Accessor));
    if (accessorImpl.endurance_Accessor) {
      setEndurance(*(accessorImpl.endurance_Accessor));
    } else {
      endurance_Accessor.reset();
    }
    if (accessorImpl.voiceControl_Accessor) {
      setVoiceControl(*(accessorImpl.voiceControl_Accessor));
    } else {
      voiceControl_Accessor.reset();
    }
    setAssociatedID(*(accessorImpl.associatedID_Accessor));
    if (accessorImpl.removeInfo_Accessor) {
      setRemoveInfo(*(accessorImpl.removeInfo_Accessor));
    } else {
      removeInfo_Accessor.reset();
    }
    setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    if (accessorImpl.orbitalKinematics_Accessor) {
      setOrbitalKinematics(*(accessorImpl.orbitalKinematics_Accessor));
    } else {
      orbitalKinematics_Accessor.reset();
    }
    if (accessorImpl.orbitalKinematicsParameters_Accessor) {
      setOrbitalKinematicsParameters(*(accessorImpl.orbitalKinematicsParameters_Accessor));
    } else {
      orbitalKinematicsParameters_Accessor.reset();
    }
    if (accessorImpl.estimatedOrbitalKinematics_Accessor) {
      setEstimatedOrbitalKinematics(*(accessorImpl.estimatedOrbitalKinematics_Accessor));
    } else {
      estimatedOrbitalKinematics_Accessor.reset();
    }
  }
}

void EntityMDT::reset() noexcept {
  if (entityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    entityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    entityID_Accessor->reset();
  }
  creationTimestamp_Accessor->reset();
  source_Accessor->reset();
  entityStatus_Accessor->reset();
  operationalStatus_Accessor.reset();
  identity_Accessor->reset();
  siteEntityID_Accessor->reset();
  mobility_Accessor.reset();
  kinematics_Accessor.reset();
  estimatedKinematics_Accessor.reset();
  downLocation_Accessor.reset();
  platformStatus_Accessor.reset();
  signalSummary_Accessor->reset();
  pulseDataID_Accessor->reset();
  measurementID_Accessor->reset();
  strength_Accessor.reset();
  activityAgainst_Accessor->reset();
  activityBy_Accessor->reset();
  endurance_Accessor.reset();
  voiceControl_Accessor.reset();
  associatedID_Accessor->reset();
  removeInfo_Accessor.reset();
  capabilityID_Accessor->reset();
  orbitalKinematics_Accessor.reset();
  orbitalKinematicsParameters_Accessor.reset();
  estimatedOrbitalKinematics_Accessor.reset();
}

const uci::type::EntityID_Type& EntityMDT::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityID_Type& EntityMDT::getEntityID() {
  return *entityID_Accessor;
}

uci::type::EntityMDT& EntityMDT::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& EntityMDT::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

const uci::type::DateTimeSigmaType& EntityMDT::getCreationTimestamp() const {
  return *creationTimestamp_Accessor;
}

uci::type::DateTimeSigmaType& EntityMDT::getCreationTimestamp() {
  return *creationTimestamp_Accessor;
}

uci::type::EntityMDT& EntityMDT::setCreationTimestamp(const uci::type::DateTimeSigmaType& accessor) {
  if (&accessor != creationTimestamp_Accessor.get()) {
    creationTimestamp_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntitySourceType& EntityMDT::getSource() const {
  return *source_Accessor;
}

uci::type::EntitySourceType& EntityMDT::getSource() {
  return *source_Accessor;
}

uci::type::EntityMDT& EntityMDT::setSource(const uci::type::EntitySourceType& accessor) {
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityStatusEnum& EntityMDT::getEntityStatus() const {
  return *entityStatus_Accessor;
}

uci::type::EntityStatusEnum& EntityMDT::getEntityStatus() {
  return *entityStatus_Accessor;
}

uci::type::EntityMDT& EntityMDT::setEntityStatus(const uci::type::EntityStatusEnum& accessor) {
  if (&accessor != entityStatus_Accessor.get()) {
    entityStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityMDT& EntityMDT::setEntityStatus(uci::type::EntityStatusEnum::EnumerationItem value) {
  entityStatus_Accessor->setValue(value);
  return *this;
}


uci::type::OB_OperationalStatusEnum& EntityMDT::getOperationalStatus_() const {
  if (operationalStatus_Accessor) {
    return *operationalStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getOperationalStatus(): An attempt was made to get an optional field that was not enabled, call hasOperationalStatus() to determine if it is safe to call getOperationalStatus()");
}

const uci::type::OB_OperationalStatusEnum& EntityMDT::getOperationalStatus() const {
  return getOperationalStatus_();
}

uci::type::OB_OperationalStatusEnum& EntityMDT::getOperationalStatus() {
  return getOperationalStatus_();
}

uci::type::EntityMDT& EntityMDT::setOperationalStatus(const uci::type::OB_OperationalStatusEnum& accessor) {
  enableOperationalStatus();
  if (&accessor != operationalStatus_Accessor.get()) {
    operationalStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityMDT& EntityMDT::setOperationalStatus(const uci::type::OB_OperationalStatusEnum::EnumerationItem value) {
  enableOperationalStatus().setValue(value);
  return *this;
}

bool EntityMDT::hasOperationalStatus() const noexcept {
  return static_cast<bool>(operationalStatus_Accessor);
}

uci::type::OB_OperationalStatusEnum& EntityMDT::enableOperationalStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::oB_OperationalStatusEnum : type};
  if ((!operationalStatus_Accessor) || (operationalStatus_Accessor->getAccessorType() != requestedType)) {
    operationalStatus_Accessor = OB_OperationalStatusEnum::create(requestedType);
    if (!operationalStatus_Accessor) {
      throw uci::base::UCIException("Error in enableOperationalStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *operationalStatus_Accessor;
}

uci::type::EntityMDT& EntityMDT::clearOperationalStatus() noexcept {
  operationalStatus_Accessor.reset();
  return *this;
}

const uci::type::EntityIdentityType& EntityMDT::getIdentity() const {
  return *identity_Accessor;
}

uci::type::EntityIdentityType& EntityMDT::getIdentity() {
  return *identity_Accessor;
}

uci::type::EntityMDT& EntityMDT::setIdentity(const uci::type::EntityIdentityType& accessor) {
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityMDT::SiteEntityID& EntityMDT::getSiteEntityID() const {
  return *siteEntityID_Accessor;
}

uci::type::EntityMDT::SiteEntityID& EntityMDT::getSiteEntityID() {
  return *siteEntityID_Accessor;
}

uci::type::EntityMDT& EntityMDT::setSiteEntityID(const uci::type::EntityMDT::SiteEntityID& accessor) {
  if (&accessor != siteEntityID_Accessor.get()) {
    siteEntityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MobilityEnum& EntityMDT::getMobility_() const {
  if (mobility_Accessor) {
    return *mobility_Accessor;
  }
  throw uci::base::UCIException("Error in getMobility(): An attempt was made to get an optional field that was not enabled, call hasMobility() to determine if it is safe to call getMobility()");
}

const uci::type::MobilityEnum& EntityMDT::getMobility() const {
  return getMobility_();
}

uci::type::MobilityEnum& EntityMDT::getMobility() {
  return getMobility_();
}

uci::type::EntityMDT& EntityMDT::setMobility(const uci::type::MobilityEnum& accessor) {
  enableMobility();
  if (&accessor != mobility_Accessor.get()) {
    mobility_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityMDT& EntityMDT::setMobility(const uci::type::MobilityEnum::EnumerationItem value) {
  enableMobility().setValue(value);
  return *this;
}

bool EntityMDT::hasMobility() const noexcept {
  return static_cast<bool>(mobility_Accessor);
}

uci::type::MobilityEnum& EntityMDT::enableMobility(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mobilityEnum : type};
  if ((!mobility_Accessor) || (mobility_Accessor->getAccessorType() != requestedType)) {
    mobility_Accessor = MobilityEnum::create(requestedType);
    if (!mobility_Accessor) {
      throw uci::base::UCIException("Error in enableMobility(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mobility_Accessor;
}

uci::type::EntityMDT& EntityMDT::clearMobility() noexcept {
  mobility_Accessor.reset();
  return *this;
}

uci::type::KinematicsType& EntityMDT::getKinematics_() const {
  if (kinematics_Accessor) {
    return *kinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getKinematics(): An attempt was made to get an optional field that was not enabled, call hasKinematics() to determine if it is safe to call getKinematics()");
}

const uci::type::KinematicsType& EntityMDT::getKinematics() const {
  return getKinematics_();
}

uci::type::KinematicsType& EntityMDT::getKinematics() {
  return getKinematics_();
}

uci::type::EntityMDT& EntityMDT::setKinematics(const uci::type::KinematicsType& accessor) {
  enableKinematics();
  if (&accessor != kinematics_Accessor.get()) {
    kinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityMDT::hasKinematics() const noexcept {
  return static_cast<bool>(kinematics_Accessor);
}

uci::type::KinematicsType& EntityMDT::enableKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::kinematicsType : type};
  if ((!kinematics_Accessor) || (kinematics_Accessor->getAccessorType() != requestedType)) {
    kinematics_Accessor = KinematicsType::create(requestedType);
    if (!kinematics_Accessor) {
      throw uci::base::UCIException("Error in enableKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *kinematics_Accessor;
}

uci::type::EntityMDT& EntityMDT::clearKinematics() noexcept {
  kinematics_Accessor.reset();
  return *this;
}

uci::type::KinematicsType& EntityMDT::getEstimatedKinematics_() const {
  if (estimatedKinematics_Accessor) {
    return *estimatedKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedKinematics(): An attempt was made to get an optional field that was not enabled, call hasEstimatedKinematics() to determine if it is safe to call getEstimatedKinematics()");
}

const uci::type::KinematicsType& EntityMDT::getEstimatedKinematics() const {
  return getEstimatedKinematics_();
}

uci::type::KinematicsType& EntityMDT::getEstimatedKinematics() {
  return getEstimatedKinematics_();
}

uci::type::EntityMDT& EntityMDT::setEstimatedKinematics(const uci::type::KinematicsType& accessor) {
  enableEstimatedKinematics();
  if (&accessor != estimatedKinematics_Accessor.get()) {
    estimatedKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityMDT::hasEstimatedKinematics() const noexcept {
  return static_cast<bool>(estimatedKinematics_Accessor);
}

uci::type::KinematicsType& EntityMDT::enableEstimatedKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::kinematicsType : type};
  if ((!estimatedKinematics_Accessor) || (estimatedKinematics_Accessor->getAccessorType() != requestedType)) {
    estimatedKinematics_Accessor = KinematicsType::create(requestedType);
    if (!estimatedKinematics_Accessor) {
      throw uci::base::UCIException("Error in enableEstimatedKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *estimatedKinematics_Accessor;
}

uci::type::EntityMDT& EntityMDT::clearEstimatedKinematics() noexcept {
  estimatedKinematics_Accessor.reset();
  return *this;
}

uci::type::Point2D_Type& EntityMDT::getDownLocation_() const {
  if (downLocation_Accessor) {
    return *downLocation_Accessor;
  }
  throw uci::base::UCIException("Error in getDownLocation(): An attempt was made to get an optional field that was not enabled, call hasDownLocation() to determine if it is safe to call getDownLocation()");
}

const uci::type::Point2D_Type& EntityMDT::getDownLocation() const {
  return getDownLocation_();
}

uci::type::Point2D_Type& EntityMDT::getDownLocation() {
  return getDownLocation_();
}

uci::type::EntityMDT& EntityMDT::setDownLocation(const uci::type::Point2D_Type& accessor) {
  enableDownLocation(accessor.getAccessorType());
  if (&accessor != downLocation_Accessor.get()) {
    downLocation_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EntityMDT::hasDownLocation() const noexcept {
  return static_cast<bool>(downLocation_Accessor);
}

uci::type::Point2D_Type& EntityMDT::enableDownLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!downLocation_Accessor) || (downLocation_Accessor->getAccessorType() != requestedType)) {
    downLocation_Accessor = Point2D_Type::create(requestedType);
    if (!downLocation_Accessor) {
      throw uci::base::UCIException("Error in enableDownLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *downLocation_Accessor;
}

uci::type::EntityMDT& EntityMDT::clearDownLocation() noexcept {
  downLocation_Accessor.reset();
  return *this;
}

uci::type::PlatformStatusType& EntityMDT::getPlatformStatus_() const {
  if (platformStatus_Accessor) {
    return *platformStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getPlatformStatus(): An attempt was made to get an optional field that was not enabled, call hasPlatformStatus() to determine if it is safe to call getPlatformStatus()");
}

const uci::type::PlatformStatusType& EntityMDT::getPlatformStatus() const {
  return getPlatformStatus_();
}

uci::type::PlatformStatusType& EntityMDT::getPlatformStatus() {
  return getPlatformStatus_();
}

uci::type::EntityMDT& EntityMDT::setPlatformStatus(const uci::type::PlatformStatusType& accessor) {
  enablePlatformStatus();
  if (&accessor != platformStatus_Accessor.get()) {
    platformStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityMDT::hasPlatformStatus() const noexcept {
  return static_cast<bool>(platformStatus_Accessor);
}

uci::type::PlatformStatusType& EntityMDT::enablePlatformStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::platformStatusType : type};
  if ((!platformStatus_Accessor) || (platformStatus_Accessor->getAccessorType() != requestedType)) {
    platformStatus_Accessor = PlatformStatusType::create(requestedType);
    if (!platformStatus_Accessor) {
      throw uci::base::UCIException("Error in enablePlatformStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *platformStatus_Accessor;
}

uci::type::EntityMDT& EntityMDT::clearPlatformStatus() noexcept {
  platformStatus_Accessor.reset();
  return *this;
}

const uci::type::EntityMDT::SignalSummary& EntityMDT::getSignalSummary() const {
  return *signalSummary_Accessor;
}

uci::type::EntityMDT::SignalSummary& EntityMDT::getSignalSummary() {
  return *signalSummary_Accessor;
}

uci::type::EntityMDT& EntityMDT::setSignalSummary(const uci::type::EntityMDT::SignalSummary& accessor) {
  if (&accessor != signalSummary_Accessor.get()) {
    signalSummary_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityMDT::PulseDataID& EntityMDT::getPulseDataID() const {
  return *pulseDataID_Accessor;
}

uci::type::EntityMDT::PulseDataID& EntityMDT::getPulseDataID() {
  return *pulseDataID_Accessor;
}

uci::type::EntityMDT& EntityMDT::setPulseDataID(const uci::type::EntityMDT::PulseDataID& accessor) {
  if (&accessor != pulseDataID_Accessor.get()) {
    pulseDataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityMDT::MeasurementID& EntityMDT::getMeasurementID() const {
  return *measurementID_Accessor;
}

uci::type::EntityMDT::MeasurementID& EntityMDT::getMeasurementID() {
  return *measurementID_Accessor;
}

uci::type::EntityMDT& EntityMDT::setMeasurementID(const uci::type::EntityMDT::MeasurementID& accessor) {
  if (&accessor != measurementID_Accessor.get()) {
    measurementID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::StrengthType& EntityMDT::getStrength_() const {
  if (strength_Accessor) {
    return *strength_Accessor;
  }
  throw uci::base::UCIException("Error in getStrength(): An attempt was made to get an optional field that was not enabled, call hasStrength() to determine if it is safe to call getStrength()");
}

const uci::type::StrengthType& EntityMDT::getStrength() const {
  return getStrength_();
}

uci::type::StrengthType& EntityMDT::getStrength() {
  return getStrength_();
}

uci::type::EntityMDT& EntityMDT::setStrength(const uci::type::StrengthType& accessor) {
  enableStrength();
  if (&accessor != strength_Accessor.get()) {
    strength_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityMDT::hasStrength() const noexcept {
  return static_cast<bool>(strength_Accessor);
}

uci::type::StrengthType& EntityMDT::enableStrength(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strengthType : type};
  if ((!strength_Accessor) || (strength_Accessor->getAccessorType() != requestedType)) {
    strength_Accessor = StrengthType::create(requestedType);
    if (!strength_Accessor) {
      throw uci::base::UCIException("Error in enableStrength(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *strength_Accessor;
}

uci::type::EntityMDT& EntityMDT::clearStrength() noexcept {
  strength_Accessor.reset();
  return *this;
}

const uci::type::EntityMDT::ActivityAgainst& EntityMDT::getActivityAgainst() const {
  return *activityAgainst_Accessor;
}

uci::type::EntityMDT::ActivityAgainst& EntityMDT::getActivityAgainst() {
  return *activityAgainst_Accessor;
}

uci::type::EntityMDT& EntityMDT::setActivityAgainst(const uci::type::EntityMDT::ActivityAgainst& accessor) {
  if (&accessor != activityAgainst_Accessor.get()) {
    activityAgainst_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityMDT::ActivityBy& EntityMDT::getActivityBy() const {
  return *activityBy_Accessor;
}

uci::type::EntityMDT::ActivityBy& EntityMDT::getActivityBy() {
  return *activityBy_Accessor;
}

uci::type::EntityMDT& EntityMDT::setActivityBy(const uci::type::EntityMDT::ActivityBy& accessor) {
  if (&accessor != activityBy_Accessor.get()) {
    activityBy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EnduranceType& EntityMDT::getEndurance_() const {
  if (endurance_Accessor) {
    return *endurance_Accessor;
  }
  throw uci::base::UCIException("Error in getEndurance(): An attempt was made to get an optional field that was not enabled, call hasEndurance() to determine if it is safe to call getEndurance()");
}

const uci::type::EnduranceType& EntityMDT::getEndurance() const {
  return getEndurance_();
}

uci::type::EnduranceType& EntityMDT::getEndurance() {
  return getEndurance_();
}

uci::type::EntityMDT& EntityMDT::setEndurance(const uci::type::EnduranceType& accessor) {
  enableEndurance();
  if (&accessor != endurance_Accessor.get()) {
    endurance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityMDT::hasEndurance() const noexcept {
  return static_cast<bool>(endurance_Accessor);
}

uci::type::EnduranceType& EntityMDT::enableEndurance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::enduranceType : type};
  if ((!endurance_Accessor) || (endurance_Accessor->getAccessorType() != requestedType)) {
    endurance_Accessor = EnduranceType::create(requestedType);
    if (!endurance_Accessor) {
      throw uci::base::UCIException("Error in enableEndurance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *endurance_Accessor;
}

uci::type::EntityMDT& EntityMDT::clearEndurance() noexcept {
  endurance_Accessor.reset();
  return *this;
}

uci::type::VoiceControlType& EntityMDT::getVoiceControl_() const {
  if (voiceControl_Accessor) {
    return *voiceControl_Accessor;
  }
  throw uci::base::UCIException("Error in getVoiceControl(): An attempt was made to get an optional field that was not enabled, call hasVoiceControl() to determine if it is safe to call getVoiceControl()");
}

const uci::type::VoiceControlType& EntityMDT::getVoiceControl() const {
  return getVoiceControl_();
}

uci::type::VoiceControlType& EntityMDT::getVoiceControl() {
  return getVoiceControl_();
}

uci::type::EntityMDT& EntityMDT::setVoiceControl(const uci::type::VoiceControlType& accessor) {
  enableVoiceControl();
  if (&accessor != voiceControl_Accessor.get()) {
    voiceControl_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityMDT::hasVoiceControl() const noexcept {
  return static_cast<bool>(voiceControl_Accessor);
}

uci::type::VoiceControlType& EntityMDT::enableVoiceControl(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::voiceControlType : type};
  if ((!voiceControl_Accessor) || (voiceControl_Accessor->getAccessorType() != requestedType)) {
    voiceControl_Accessor = VoiceControlType::create(requestedType);
    if (!voiceControl_Accessor) {
      throw uci::base::UCIException("Error in enableVoiceControl(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *voiceControl_Accessor;
}

uci::type::EntityMDT& EntityMDT::clearVoiceControl() noexcept {
  voiceControl_Accessor.reset();
  return *this;
}

const uci::type::EntityMDT::AssociatedID& EntityMDT::getAssociatedID() const {
  return *associatedID_Accessor;
}

uci::type::EntityMDT::AssociatedID& EntityMDT::getAssociatedID() {
  return *associatedID_Accessor;
}

uci::type::EntityMDT& EntityMDT::setAssociatedID(const uci::type::EntityMDT::AssociatedID& accessor) {
  if (&accessor != associatedID_Accessor.get()) {
    associatedID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityRemoveInfoType& EntityMDT::getRemoveInfo_() const {
  if (removeInfo_Accessor) {
    return *removeInfo_Accessor;
  }
  throw uci::base::UCIException("Error in getRemoveInfo(): An attempt was made to get an optional field that was not enabled, call hasRemoveInfo() to determine if it is safe to call getRemoveInfo()");
}

const uci::type::EntityRemoveInfoType& EntityMDT::getRemoveInfo() const {
  return getRemoveInfo_();
}

uci::type::EntityRemoveInfoType& EntityMDT::getRemoveInfo() {
  return getRemoveInfo_();
}

uci::type::EntityMDT& EntityMDT::setRemoveInfo(const uci::type::EntityRemoveInfoType& accessor) {
  enableRemoveInfo();
  if (&accessor != removeInfo_Accessor.get()) {
    removeInfo_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityMDT::hasRemoveInfo() const noexcept {
  return static_cast<bool>(removeInfo_Accessor);
}

uci::type::EntityRemoveInfoType& EntityMDT::enableRemoveInfo(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityRemoveInfoType : type};
  if ((!removeInfo_Accessor) || (removeInfo_Accessor->getAccessorType() != requestedType)) {
    removeInfo_Accessor = EntityRemoveInfoType::create(requestedType);
    if (!removeInfo_Accessor) {
      throw uci::base::UCIException("Error in enableRemoveInfo(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *removeInfo_Accessor;
}

uci::type::EntityMDT& EntityMDT::clearRemoveInfo() noexcept {
  removeInfo_Accessor.reset();
  return *this;
}

const uci::type::EntityMDT::CapabilityID& EntityMDT::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::EntityMDT::CapabilityID& EntityMDT::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::EntityMDT& EntityMDT::setCapabilityID(const uci::type::EntityMDT::CapabilityID& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitalKinematicsChoiceType& EntityMDT::getOrbitalKinematics_() const {
  if (orbitalKinematics_Accessor) {
    return *orbitalKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalKinematics(): An attempt was made to get an optional field that was not enabled, call hasOrbitalKinematics() to determine if it is safe to call getOrbitalKinematics()");
}

const uci::type::OrbitalKinematicsChoiceType& EntityMDT::getOrbitalKinematics() const {
  return getOrbitalKinematics_();
}

uci::type::OrbitalKinematicsChoiceType& EntityMDT::getOrbitalKinematics() {
  return getOrbitalKinematics_();
}

uci::type::EntityMDT& EntityMDT::setOrbitalKinematics(const uci::type::OrbitalKinematicsChoiceType& accessor) {
  enableOrbitalKinematics();
  if (&accessor != orbitalKinematics_Accessor.get()) {
    orbitalKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityMDT::hasOrbitalKinematics() const noexcept {
  return static_cast<bool>(orbitalKinematics_Accessor);
}

uci::type::OrbitalKinematicsChoiceType& EntityMDT::enableOrbitalKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsChoiceType : type};
  if ((!orbitalKinematics_Accessor) || (orbitalKinematics_Accessor->getAccessorType() != requestedType)) {
    orbitalKinematics_Accessor = OrbitalKinematicsChoiceType::create(requestedType);
    if (!orbitalKinematics_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitalKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalKinematics_Accessor;
}

uci::type::EntityMDT& EntityMDT::clearOrbitalKinematics() noexcept {
  orbitalKinematics_Accessor.reset();
  return *this;
}

uci::type::OrbitalSingleVectorParametersType& EntityMDT::getOrbitalKinematicsParameters_() const {
  if (orbitalKinematicsParameters_Accessor) {
    return *orbitalKinematicsParameters_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalKinematicsParameters(): An attempt was made to get an optional field that was not enabled, call hasOrbitalKinematicsParameters() to determine if it is safe to call getOrbitalKinematicsParameters()");
}

const uci::type::OrbitalSingleVectorParametersType& EntityMDT::getOrbitalKinematicsParameters() const {
  return getOrbitalKinematicsParameters_();
}

uci::type::OrbitalSingleVectorParametersType& EntityMDT::getOrbitalKinematicsParameters() {
  return getOrbitalKinematicsParameters_();
}

uci::type::EntityMDT& EntityMDT::setOrbitalKinematicsParameters(const uci::type::OrbitalSingleVectorParametersType& accessor) {
  enableOrbitalKinematicsParameters();
  if (&accessor != orbitalKinematicsParameters_Accessor.get()) {
    orbitalKinematicsParameters_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityMDT::hasOrbitalKinematicsParameters() const noexcept {
  return static_cast<bool>(orbitalKinematicsParameters_Accessor);
}

uci::type::OrbitalSingleVectorParametersType& EntityMDT::enableOrbitalKinematicsParameters(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSingleVectorParametersType : type};
  if ((!orbitalKinematicsParameters_Accessor) || (orbitalKinematicsParameters_Accessor->getAccessorType() != requestedType)) {
    orbitalKinematicsParameters_Accessor = OrbitalSingleVectorParametersType::create(requestedType);
    if (!orbitalKinematicsParameters_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitalKinematicsParameters(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalKinematicsParameters_Accessor;
}

uci::type::EntityMDT& EntityMDT::clearOrbitalKinematicsParameters() noexcept {
  orbitalKinematicsParameters_Accessor.reset();
  return *this;
}

uci::type::OrbitalKinematicsChoiceType& EntityMDT::getEstimatedOrbitalKinematics_() const {
  if (estimatedOrbitalKinematics_Accessor) {
    return *estimatedOrbitalKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedOrbitalKinematics(): An attempt was made to get an optional field that was not enabled, call hasEstimatedOrbitalKinematics() to determine if it is safe to call getEstimatedOrbitalKinematics()");
}

const uci::type::OrbitalKinematicsChoiceType& EntityMDT::getEstimatedOrbitalKinematics() const {
  return getEstimatedOrbitalKinematics_();
}

uci::type::OrbitalKinematicsChoiceType& EntityMDT::getEstimatedOrbitalKinematics() {
  return getEstimatedOrbitalKinematics_();
}

uci::type::EntityMDT& EntityMDT::setEstimatedOrbitalKinematics(const uci::type::OrbitalKinematicsChoiceType& accessor) {
  enableEstimatedOrbitalKinematics();
  if (&accessor != estimatedOrbitalKinematics_Accessor.get()) {
    estimatedOrbitalKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityMDT::hasEstimatedOrbitalKinematics() const noexcept {
  return static_cast<bool>(estimatedOrbitalKinematics_Accessor);
}

uci::type::OrbitalKinematicsChoiceType& EntityMDT::enableEstimatedOrbitalKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsChoiceType : type};
  if ((!estimatedOrbitalKinematics_Accessor) || (estimatedOrbitalKinematics_Accessor->getAccessorType() != requestedType)) {
    estimatedOrbitalKinematics_Accessor = OrbitalKinematicsChoiceType::create(requestedType);
    if (!estimatedOrbitalKinematics_Accessor) {
      throw uci::base::UCIException("Error in enableEstimatedOrbitalKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *estimatedOrbitalKinematics_Accessor;
}

uci::type::EntityMDT& EntityMDT::clearEstimatedOrbitalKinematics() noexcept {
  estimatedOrbitalKinematics_Accessor.reset();
  return *this;
}

std::unique_ptr<EntityMDT> EntityMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityMDT : type};
  return (requestedType == uci::type::accessorType::entityMDT) ? boost::make_unique<EntityMDT>() : nullptr;
}

/**  */
namespace EntityMDT_Names {

constexpr const char* Extern_Type_Name{"EntityMDT"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* CreationTimestamp_Name{"CreationTimestamp"};
constexpr const char* Source_Name{"Source"};
constexpr const char* EntityStatus_Name{"EntityStatus"};
constexpr const char* OperationalStatus_Name{"OperationalStatus"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* SiteEntityID_Name{"SiteEntityID"};
constexpr const char* Mobility_Name{"Mobility"};
constexpr const char* Kinematics_Name{"Kinematics"};
constexpr const char* EstimatedKinematics_Name{"EstimatedKinematics"};
constexpr const char* DownLocation_Name{"DownLocation"};
constexpr const char* PlatformStatus_Name{"PlatformStatus"};
constexpr const char* SignalSummary_Name{"SignalSummary"};
constexpr const char* PulseDataID_Name{"PulseDataID"};
constexpr const char* MeasurementID_Name{"MeasurementID"};
constexpr const char* Strength_Name{"Strength"};
constexpr const char* ActivityAgainst_Name{"ActivityAgainst"};
constexpr const char* ActivityBy_Name{"ActivityBy"};
constexpr const char* Endurance_Name{"Endurance"};
constexpr const char* VoiceControl_Name{"VoiceControl"};
constexpr const char* AssociatedID_Name{"AssociatedID"};
constexpr const char* RemoveInfo_Name{"RemoveInfo"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* OrbitalKinematics_Name{"OrbitalKinematics"};
constexpr const char* OrbitalKinematicsParameters_Name{"OrbitalKinematicsParameters"};
constexpr const char* EstimatedOrbitalKinematics_Name{"EstimatedOrbitalKinematics"};

} // namespace EntityMDT_Names

void EntityMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityMDT_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::CreationTimestamp_Name) {
      DateTimeSigmaType::deserialize(valueType.second, accessor.getCreationTimestamp(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::Source_Name) {
      EntitySourceType::deserialize(valueType.second, accessor.getSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::EntityStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEntityStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::OperationalStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableOperationalStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::Identity_Name) {
      EntityIdentityType::deserialize(valueType.second, accessor.getIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::SiteEntityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::SiteEntityID& boundedList = accessor.getSiteEntityID();
        const uci::type::EntityMDT::SiteEntityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::Mobility_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMobility().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::Kinematics_Name) {
      KinematicsType::deserialize(valueType.second, accessor.enableKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::EstimatedKinematics_Name) {
      KinematicsType::deserialize(valueType.second, accessor.enableEstimatedKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::DownLocation_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDownLocation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::PlatformStatus_Name) {
      PlatformStatusType::deserialize(valueType.second, accessor.enablePlatformStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::SignalSummary_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::SignalSummary& boundedList = accessor.getSignalSummary();
        const uci::type::EntityMDT::SignalSummary::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EntitySignalSummaryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::PulseDataID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::PulseDataID& boundedList = accessor.getPulseDataID();
        const uci::type::EntityMDT::PulseDataID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PulseDataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::MeasurementID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::MeasurementID& boundedList = accessor.getMeasurementID();
        const uci::type::EntityMDT::MeasurementID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MeasurementID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::Strength_Name) {
      StrengthType::deserialize(valueType.second, accessor.enableStrength(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::ActivityAgainst_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::ActivityAgainst& boundedList = accessor.getActivityAgainst();
        const uci::type::EntityMDT::ActivityAgainst::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ActivityAgainstType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::ActivityBy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::ActivityBy& boundedList = accessor.getActivityBy();
        const uci::type::EntityMDT::ActivityBy::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ActivityByType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::Endurance_Name) {
      EnduranceType::deserialize(valueType.second, accessor.enableEndurance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::VoiceControl_Name) {
      VoiceControlType::deserialize(valueType.second, accessor.enableVoiceControl(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::AssociatedID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::AssociatedID& boundedList = accessor.getAssociatedID();
        const uci::type::EntityMDT::AssociatedID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::RemoveInfo_Name) {
      EntityRemoveInfoType::deserialize(valueType.second, accessor.enableRemoveInfo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::CapabilityID& boundedList = accessor.getCapabilityID();
        const uci::type::EntityMDT::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::OrbitalKinematics_Name) {
      OrbitalKinematicsChoiceType::deserialize(valueType.second, accessor.enableOrbitalKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::OrbitalKinematicsParameters_Name) {
      OrbitalSingleVectorParametersType::deserialize(valueType.second, accessor.enableOrbitalKinematicsParameters(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::EstimatedOrbitalKinematics_Name) {
      OrbitalKinematicsChoiceType::deserialize(valueType.second, accessor.enableEstimatedOrbitalKinematics(), nodeName, nsPrefix);
    }
  }
}

std::string EntityMDT::serialize(const uci::type::EntityMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityMDT_Names::Extern_Type_Name);
  }
  EntityID_Type::serialize(accessor.getEntityID(), node, EntityMDT_Names::EntityID_Name);
  DateTimeSigmaType::serialize(accessor.getCreationTimestamp(), node, EntityMDT_Names::CreationTimestamp_Name);
  EntitySourceType::serialize(accessor.getSource(), node, EntityMDT_Names::Source_Name);
  EntityStatusEnum::serialize(accessor.getEntityStatus(), node, EntityMDT_Names::EntityStatus_Name, false);
  if (accessor.hasOperationalStatus()) {
    OB_OperationalStatusEnum::serialize(accessor.getOperationalStatus(), node, EntityMDT_Names::OperationalStatus_Name, false);
  }
  EntityIdentityType::serialize(accessor.getIdentity(), node, EntityMDT_Names::Identity_Name);
  {
    const uci::type::EntityMDT::SiteEntityID& boundedList = accessor.getSiteEntityID();
    for (uci::type::EntityMDT::SiteEntityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EntityID_Type::serialize(boundedList.at(i), node, EntityMDT_Names::SiteEntityID_Name);
    }
  }
  if (accessor.hasMobility()) {
    MobilityEnum::serialize(accessor.getMobility(), node, EntityMDT_Names::Mobility_Name, false);
  }
  if (accessor.hasKinematics()) {
    KinematicsType::serialize(accessor.getKinematics(), node, EntityMDT_Names::Kinematics_Name);
  }
  if (accessor.hasEstimatedKinematics()) {
    KinematicsType::serialize(accessor.getEstimatedKinematics(), node, EntityMDT_Names::EstimatedKinematics_Name);
  }
  if (accessor.hasDownLocation()) {
    Point2D_Type::serialize(accessor.getDownLocation(), node, EntityMDT_Names::DownLocation_Name);
  }
  if (accessor.hasPlatformStatus()) {
    PlatformStatusType::serialize(accessor.getPlatformStatus(), node, EntityMDT_Names::PlatformStatus_Name);
  }
  {
    const uci::type::EntityMDT::SignalSummary& boundedList = accessor.getSignalSummary();
    for (uci::type::EntityMDT::SignalSummary::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EntitySignalSummaryType::serialize(boundedList.at(i), node, EntityMDT_Names::SignalSummary_Name);
    }
  }
  {
    const uci::type::EntityMDT::PulseDataID& boundedList = accessor.getPulseDataID();
    for (uci::type::EntityMDT::PulseDataID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PulseDataID_Type::serialize(boundedList.at(i), node, EntityMDT_Names::PulseDataID_Name);
    }
  }
  {
    const uci::type::EntityMDT::MeasurementID& boundedList = accessor.getMeasurementID();
    for (uci::type::EntityMDT::MeasurementID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MeasurementID_Type::serialize(boundedList.at(i), node, EntityMDT_Names::MeasurementID_Name);
    }
  }
  if (accessor.hasStrength()) {
    StrengthType::serialize(accessor.getStrength(), node, EntityMDT_Names::Strength_Name);
  }
  {
    const uci::type::EntityMDT::ActivityAgainst& boundedList = accessor.getActivityAgainst();
    for (uci::type::EntityMDT::ActivityAgainst::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ActivityAgainstType::serialize(boundedList.at(i), node, EntityMDT_Names::ActivityAgainst_Name);
    }
  }
  {
    const uci::type::EntityMDT::ActivityBy& boundedList = accessor.getActivityBy();
    for (uci::type::EntityMDT::ActivityBy::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ActivityByType::serialize(boundedList.at(i), node, EntityMDT_Names::ActivityBy_Name);
    }
  }
  if (accessor.hasEndurance()) {
    EnduranceType::serialize(accessor.getEndurance(), node, EntityMDT_Names::Endurance_Name);
  }
  if (accessor.hasVoiceControl()) {
    VoiceControlType::serialize(accessor.getVoiceControl(), node, EntityMDT_Names::VoiceControl_Name);
  }
  {
    const uci::type::EntityMDT::AssociatedID& boundedList = accessor.getAssociatedID();
    for (uci::type::EntityMDT::AssociatedID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ID_Type::serialize(boundedList.at(i), node, EntityMDT_Names::AssociatedID_Name);
    }
  }
  if (accessor.hasRemoveInfo()) {
    EntityRemoveInfoType::serialize(accessor.getRemoveInfo(), node, EntityMDT_Names::RemoveInfo_Name);
  }
  {
    const uci::type::EntityMDT::CapabilityID& boundedList = accessor.getCapabilityID();
    for (uci::type::EntityMDT::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityID_Type::serialize(boundedList.at(i), node, EntityMDT_Names::CapabilityID_Name);
    }
  }
  if (accessor.hasOrbitalKinematics()) {
    OrbitalKinematicsChoiceType::serialize(accessor.getOrbitalKinematics(), node, EntityMDT_Names::OrbitalKinematics_Name);
  }
  if (accessor.hasOrbitalKinematicsParameters()) {
    OrbitalSingleVectorParametersType::serialize(accessor.getOrbitalKinematicsParameters(), node, EntityMDT_Names::OrbitalKinematicsParameters_Name);
  }
  if (accessor.hasEstimatedOrbitalKinematics()) {
    OrbitalKinematicsChoiceType::serialize(accessor.getEstimatedOrbitalKinematics(), node, EntityMDT_Names::EstimatedOrbitalKinematics_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityMDT& EntityMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityMDT>().release());
}

uci::type::EntityMDT& EntityMDT::create(const uci::type::EntityMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityMDT> newAccessor{boost::make_unique<asb_uci::type::EntityMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityMDT::destroy(uci::type::EntityMDT& accessor) {
  delete dynamic_cast<asb_uci::type::EntityMDT*>(&accessor);
}

} // namespace type

} // namespace uci

