/** @file ValidatorType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ValidatorType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OperatorID_Type.h"
#include "../../../include/asb_uci/type/SystemServiceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemServiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ValidatorType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ValidatorType::ValidatorType() = default;

ValidatorType::~ValidatorType() = default;

void ValidatorType::copy(const uci::type::ValidatorType& accessor) {
  copyImpl(accessor, false);
}

void ValidatorType::copyImpl(const uci::type::ValidatorType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ValidatorType&>(accessor);
    if (accessorImpl.operatorID_Accessor) {
      setOperatorID(*(accessorImpl.operatorID_Accessor));
    } else {
      operatorID_Accessor.reset();
    }
    if (accessorImpl.nonOperatorIdentifier_Accessor) {
      setNonOperatorIdentifier(*(accessorImpl.nonOperatorIdentifier_Accessor));
    } else {
      nonOperatorIdentifier_Accessor.reset();
    }
  }
}

void ValidatorType::reset() noexcept {
  operatorID_Accessor.reset();
  nonOperatorIdentifier_Accessor.reset();
}

uci::type::ValidatorType::ValidatorTypeChoice ValidatorType::getValidatorTypeChoiceOrdinal() const noexcept {
  if (operatorID_Accessor) {
    return VALIDATORTYPE_CHOICE_OPERATORID;
  }
  if (nonOperatorIdentifier_Accessor) {
    return VALIDATORTYPE_CHOICE_NONOPERATORIDENTIFIER;
  }
  return VALIDATORTYPE_CHOICE_NONE;
}

uci::type::ValidatorType& ValidatorType::setValidatorTypeChoiceOrdinal(uci::type::ValidatorType::ValidatorTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case VALIDATORTYPE_CHOICE_OPERATORID:
      chooseOperatorID("setValidatorTypeChoiceOrdinal", type);
      break;
    case VALIDATORTYPE_CHOICE_NONOPERATORIDENTIFIER:
      chooseNonOperatorIdentifier("setValidatorTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setValidatorTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OperatorID_Type& ValidatorType::getOperatorID_() const {
  if (operatorID_Accessor) {
    return *operatorID_Accessor;
  }
  throw uci::base::UCIException("Error in getOperatorID(): Unable to get OperatorID, field not selected");
}

const uci::type::OperatorID_Type& ValidatorType::getOperatorID() const {
  return getOperatorID_();
}

uci::type::OperatorID_Type& ValidatorType::getOperatorID() {
  return getOperatorID_();
}

uci::type::ValidatorType& ValidatorType::setOperatorID(const uci::type::OperatorID_Type& accessor) {
  chooseOperatorID();
  if (&accessor != operatorID_Accessor.get()) {
    operatorID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ValidatorType::isOperatorID() const noexcept {
  return static_cast<bool>(operatorID_Accessor);
}

uci::type::OperatorID_Type& ValidatorType::chooseOperatorID(const std::string& method, uci::base::accessorType::AccessorType type) {
  nonOperatorIdentifier_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorID_Type : type};
  if ((!operatorID_Accessor) || (operatorID_Accessor->getAccessorType() != requestedType)) {
    operatorID_Accessor = OperatorID_Type::create(type);
    if (!operatorID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *operatorID_Accessor;
}

uci::type::OperatorID_Type& ValidatorType::chooseOperatorID(uci::base::accessorType::AccessorType type) {
  return chooseOperatorID("chooseOperatorID", type);
}

uci::type::SystemServiceType& ValidatorType::getNonOperatorIdentifier_() const {
  if (nonOperatorIdentifier_Accessor) {
    return *nonOperatorIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getNonOperatorIdentifier(): Unable to get NonOperatorIdentifier, field not selected");
}

const uci::type::SystemServiceType& ValidatorType::getNonOperatorIdentifier() const {
  return getNonOperatorIdentifier_();
}

uci::type::SystemServiceType& ValidatorType::getNonOperatorIdentifier() {
  return getNonOperatorIdentifier_();
}

uci::type::ValidatorType& ValidatorType::setNonOperatorIdentifier(const uci::type::SystemServiceType& accessor) {
  chooseNonOperatorIdentifier();
  if (&accessor != nonOperatorIdentifier_Accessor.get()) {
    nonOperatorIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ValidatorType::isNonOperatorIdentifier() const noexcept {
  return static_cast<bool>(nonOperatorIdentifier_Accessor);
}

uci::type::SystemServiceType& ValidatorType::chooseNonOperatorIdentifier(const std::string& method, uci::base::accessorType::AccessorType type) {
  operatorID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemServiceType : type};
  if ((!nonOperatorIdentifier_Accessor) || (nonOperatorIdentifier_Accessor->getAccessorType() != requestedType)) {
    nonOperatorIdentifier_Accessor = SystemServiceType::create(type);
    if (!nonOperatorIdentifier_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nonOperatorIdentifier_Accessor;
}

uci::type::SystemServiceType& ValidatorType::chooseNonOperatorIdentifier(uci::base::accessorType::AccessorType type) {
  return chooseNonOperatorIdentifier("chooseNonOperatorIdentifier", type);
}

std::unique_ptr<ValidatorType> ValidatorType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::validatorType : type};
  return (requestedType == uci::type::accessorType::validatorType) ? boost::make_unique<ValidatorType>() : nullptr;
}

/**  */
namespace ValidatorType_Names {

constexpr const char* Extern_Type_Name{"ValidatorType"};
constexpr const char* OperatorID_Name{"OperatorID"};
constexpr const char* NonOperatorIdentifier_Name{"NonOperatorIdentifier"};

} // namespace ValidatorType_Names

void ValidatorType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ValidatorType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ValidatorType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ValidatorType_Names::OperatorID_Name) {
      OperatorID_Type::deserialize(valueType.second, accessor.chooseOperatorID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ValidatorType_Names::NonOperatorIdentifier_Name) {
      SystemServiceType::deserialize(valueType.second, accessor.chooseNonOperatorIdentifier(), nodeName, nsPrefix);
    }
  }
}

std::string ValidatorType::serialize(const uci::type::ValidatorType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ValidatorType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ValidatorType_Names::Extern_Type_Name);
  }
  if (accessor.isOperatorID()) {
    OperatorID_Type::serialize(accessor.getOperatorID(), node, ValidatorType_Names::OperatorID_Name);
  } else if (accessor.isNonOperatorIdentifier()) {
    SystemServiceType::serialize(accessor.getNonOperatorIdentifier(), node, ValidatorType_Names::NonOperatorIdentifier_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ValidatorType& ValidatorType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ValidatorType>().release());
}

uci::type::ValidatorType& ValidatorType::create(const uci::type::ValidatorType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ValidatorType> newAccessor{boost::make_unique<asb_uci::type::ValidatorType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ValidatorType::destroy(uci::type::ValidatorType& accessor) {
  delete dynamic_cast<asb_uci::type::ValidatorType*>(&accessor);
}

} // namespace type

} // namespace uci

