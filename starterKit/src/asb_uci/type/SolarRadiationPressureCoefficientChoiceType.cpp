/** @file SolarRadiationPressureCoefficientChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SolarRadiationPressureCoefficientChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/SolarRadiationPressureCoefficientChoiceType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SolarRadiationPressureCoefficientChoiceType::SolarRadiationPressureCoefficientChoiceType() = default;

SolarRadiationPressureCoefficientChoiceType::~SolarRadiationPressureCoefficientChoiceType() = default;

void SolarRadiationPressureCoefficientChoiceType::copy(const uci::type::SolarRadiationPressureCoefficientChoiceType& accessor) {
  copyImpl(accessor, false);
}

void SolarRadiationPressureCoefficientChoiceType::copyImpl(const uci::type::SolarRadiationPressureCoefficientChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SolarRadiationPressureCoefficientChoiceType&>(accessor);
    vCM_SolarRadiationPressureCoefficient_Accessor = (accessorImpl.vCM_SolarRadiationPressureCoefficient_Accessor ? accessorImpl.vCM_SolarRadiationPressureCoefficient_Accessor : boost::none);
    reflectivityCoefficient_Accessor = (accessorImpl.reflectivityCoefficient_Accessor ? accessorImpl.reflectivityCoefficient_Accessor : boost::none);
  }
}

void SolarRadiationPressureCoefficientChoiceType::reset() noexcept {
  vCM_SolarRadiationPressureCoefficient_Accessor.reset();
  reflectivityCoefficient_Accessor.reset();
}

uci::type::SolarRadiationPressureCoefficientChoiceType::SolarRadiationPressureCoefficientChoiceTypeChoice SolarRadiationPressureCoefficientChoiceType::getSolarRadiationPressureCoefficientChoiceTypeChoiceOrdinal() const noexcept {
  if (vCM_SolarRadiationPressureCoefficient_Accessor) {
    return SOLARRADIATIONPRESSURECOEFFICIENTCHOICETYPE_CHOICE_VCM_SOLARRADIATIONPRESSURECOEFFICIENT;
  }
  if (reflectivityCoefficient_Accessor) {
    return SOLARRADIATIONPRESSURECOEFFICIENTCHOICETYPE_CHOICE_REFLECTIVITYCOEFFICIENT;
  }
  return SOLARRADIATIONPRESSURECOEFFICIENTCHOICETYPE_CHOICE_NONE;
}

uci::type::SolarRadiationPressureCoefficientChoiceType& SolarRadiationPressureCoefficientChoiceType::setSolarRadiationPressureCoefficientChoiceTypeChoiceOrdinal(uci::type::SolarRadiationPressureCoefficientChoiceType::SolarRadiationPressureCoefficientChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case SOLARRADIATIONPRESSURECOEFFICIENTCHOICETYPE_CHOICE_VCM_SOLARRADIATIONPRESSURECOEFFICIENT:
      chooseVCM_SolarRadiationPressureCoefficient();
      break;
    case SOLARRADIATIONPRESSURECOEFFICIENTCHOICETYPE_CHOICE_REFLECTIVITYCOEFFICIENT:
      chooseReflectivityCoefficient();
      break;
    default:
      throw uci::base::UCIException("Error in setSolarRadiationPressureCoefficientChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

xs::Double SolarRadiationPressureCoefficientChoiceType::getVCM_SolarRadiationPressureCoefficient() const {
  if (vCM_SolarRadiationPressureCoefficient_Accessor) {
    return *vCM_SolarRadiationPressureCoefficient_Accessor;
  }
  throw uci::base::UCIException("Error in getVCM_SolarRadiationPressureCoefficient(): Unable to get VCM_SolarRadiationPressureCoefficient, field not selected");
}

uci::type::SolarRadiationPressureCoefficientChoiceType& SolarRadiationPressureCoefficientChoiceType::setVCM_SolarRadiationPressureCoefficient(xs::Double value) {
  chooseVCM_SolarRadiationPressureCoefficient();
  vCM_SolarRadiationPressureCoefficient_Accessor = value;
  return *this;
}

bool SolarRadiationPressureCoefficientChoiceType::isVCM_SolarRadiationPressureCoefficient() const noexcept {
  return static_cast<bool>(vCM_SolarRadiationPressureCoefficient_Accessor);
}

void SolarRadiationPressureCoefficientChoiceType::chooseVCM_SolarRadiationPressureCoefficient() {
  reflectivityCoefficient_Accessor.reset();
  if (!vCM_SolarRadiationPressureCoefficient_Accessor) {
    vCM_SolarRadiationPressureCoefficient_Accessor = boost::optional<asb_xs::Double>();
  }
}

xs::Double SolarRadiationPressureCoefficientChoiceType::getReflectivityCoefficient() const {
  if (reflectivityCoefficient_Accessor) {
    return *reflectivityCoefficient_Accessor;
  }
  throw uci::base::UCIException("Error in getReflectivityCoefficient(): Unable to get ReflectivityCoefficient, field not selected");
}

uci::type::SolarRadiationPressureCoefficientChoiceType& SolarRadiationPressureCoefficientChoiceType::setReflectivityCoefficient(xs::Double value) {
  chooseReflectivityCoefficient();
  reflectivityCoefficient_Accessor = value;
  return *this;
}

bool SolarRadiationPressureCoefficientChoiceType::isReflectivityCoefficient() const noexcept {
  return static_cast<bool>(reflectivityCoefficient_Accessor);
}

void SolarRadiationPressureCoefficientChoiceType::chooseReflectivityCoefficient() {
  vCM_SolarRadiationPressureCoefficient_Accessor.reset();
  if (!reflectivityCoefficient_Accessor) {
    reflectivityCoefficient_Accessor = boost::optional<asb_xs::Double>();
  }
}

std::unique_ptr<SolarRadiationPressureCoefficientChoiceType> SolarRadiationPressureCoefficientChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::solarRadiationPressureCoefficientChoiceType : type};
  return (requestedType == uci::type::accessorType::solarRadiationPressureCoefficientChoiceType) ? boost::make_unique<SolarRadiationPressureCoefficientChoiceType>() : nullptr;
}

/**  */
namespace SolarRadiationPressureCoefficientChoiceType_Names {

constexpr const char* Extern_Type_Name{"SolarRadiationPressureCoefficientChoiceType"};
constexpr const char* VCM_SolarRadiationPressureCoefficient_Name{"VCM_SolarRadiationPressureCoefficient"};
constexpr const char* ReflectivityCoefficient_Name{"ReflectivityCoefficient"};

} // namespace SolarRadiationPressureCoefficientChoiceType_Names

void SolarRadiationPressureCoefficientChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SolarRadiationPressureCoefficientChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SolarRadiationPressureCoefficientChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SolarRadiationPressureCoefficientChoiceType_Names::VCM_SolarRadiationPressureCoefficient_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVCM_SolarRadiationPressureCoefficient(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SolarRadiationPressureCoefficientChoiceType_Names::ReflectivityCoefficient_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReflectivityCoefficient(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string SolarRadiationPressureCoefficientChoiceType::serialize(const uci::type::SolarRadiationPressureCoefficientChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SolarRadiationPressureCoefficientChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SolarRadiationPressureCoefficientChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isVCM_SolarRadiationPressureCoefficient()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVCM_SolarRadiationPressureCoefficient(), node, SolarRadiationPressureCoefficientChoiceType_Names::VCM_SolarRadiationPressureCoefficient_Name);
  } else if (accessor.isReflectivityCoefficient()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getReflectivityCoefficient(), node, SolarRadiationPressureCoefficientChoiceType_Names::ReflectivityCoefficient_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SolarRadiationPressureCoefficientChoiceType& SolarRadiationPressureCoefficientChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SolarRadiationPressureCoefficientChoiceType>().release());
}

uci::type::SolarRadiationPressureCoefficientChoiceType& SolarRadiationPressureCoefficientChoiceType::create(const uci::type::SolarRadiationPressureCoefficientChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SolarRadiationPressureCoefficientChoiceType> newAccessor{boost::make_unique<asb_uci::type::SolarRadiationPressureCoefficientChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SolarRadiationPressureCoefficientChoiceType::destroy(uci::type::SolarRadiationPressureCoefficientChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::SolarRadiationPressureCoefficientChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

