/** @file PO_AirVolumeSensorReferencedType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_AirVolumeSensorReferencedType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AltitudeRangePairType.h"
#include "asb_uci/type/ElevationScanStabilizationEnum.h"
#include "asb_uci/type/LOS_ReferenceEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AltitudeRangePairType.h"
#include "uci/type/AngleHalfType.h"
#include "uci/type/AnglePositiveType.h"
#include "uci/type/AngleType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/ElevationScanStabilizationEnum.h"
#include "uci/type/LOS_ReferenceEnum.h"
#include "uci/type/PO_AirVolumeSensorReferencedType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_AirVolumeSensorReferencedType::PO_AirVolumeSensorReferencedType()
  : azimuthScanStabilization_Accessor{boost::make_unique<LOS_ReferenceEnum>()},
    elevationScanStabilization_Accessor{boost::make_unique<ElevationScanStabilizationEnum>()} {
}

PO_AirVolumeSensorReferencedType::~PO_AirVolumeSensorReferencedType() = default;

void PO_AirVolumeSensorReferencedType::copy(const uci::type::PO_AirVolumeSensorReferencedType& accessor) {
  copyImpl(accessor, false);
}

void PO_AirVolumeSensorReferencedType::copyImpl(const uci::type::PO_AirVolumeSensorReferencedType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_AirVolumeSensorReferencedType&>(accessor);
    setAzimuthScanWidth(accessorImpl.azimuthScanWidth_Accessor);
    setAzimuthScanCenter(accessorImpl.azimuthScanCenter_Accessor);
    setElevationScanWidth(accessorImpl.elevationScanWidth_Accessor);
    setElevationScanCenter(accessorImpl.elevationScanCenter_Accessor);
    setMaxRangeOfInterest(accessorImpl.maxRangeOfInterest_Accessor);
    setMinRangeOfInterest(accessorImpl.minRangeOfInterest_Accessor);
    setAzimuthScanStabilization(*(accessorImpl.azimuthScanStabilization_Accessor));
    setElevationScanStabilization(*(accessorImpl.elevationScanStabilization_Accessor));
    if (accessorImpl.elevationScanCenterAltitudeRangePair_Accessor) {
      setElevationScanCenterAltitudeRangePair(*(accessorImpl.elevationScanCenterAltitudeRangePair_Accessor));
    } else {
      elevationScanCenterAltitudeRangePair_Accessor.reset();
    }
    setRollStabilized(accessorImpl.rollStabilized_Accessor);
  }
}

void PO_AirVolumeSensorReferencedType::reset() noexcept {
  azimuthScanWidth_Accessor = 0.0;
  azimuthScanCenter_Accessor = 0.0;
  elevationScanWidth_Accessor = 0.0;
  elevationScanCenter_Accessor = 0.0;
  maxRangeOfInterest_Accessor = 0.0;
  minRangeOfInterest_Accessor = 0.0;
  azimuthScanStabilization_Accessor->reset();
  elevationScanStabilization_Accessor->reset();
  elevationScanCenterAltitudeRangePair_Accessor.reset();
  rollStabilized_Accessor = false;
}

uci::type::AnglePositiveTypeValue PO_AirVolumeSensorReferencedType::getAzimuthScanWidth() const {
  return azimuthScanWidth_Accessor;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::setAzimuthScanWidth(uci::type::AnglePositiveTypeValue value) {
  azimuthScanWidth_Accessor = value;
  return *this;
}


uci::type::AngleTypeValue PO_AirVolumeSensorReferencedType::getAzimuthScanCenter() const {
  return azimuthScanCenter_Accessor;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::setAzimuthScanCenter(uci::type::AngleTypeValue value) {
  azimuthScanCenter_Accessor = value;
  return *this;
}


uci::type::AngleHalfTypeValue PO_AirVolumeSensorReferencedType::getElevationScanWidth() const {
  return elevationScanWidth_Accessor;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::setElevationScanWidth(uci::type::AngleHalfTypeValue value) {
  elevationScanWidth_Accessor = value;
  return *this;
}


uci::type::AngleHalfTypeValue PO_AirVolumeSensorReferencedType::getElevationScanCenter() const {
  return elevationScanCenter_Accessor;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::setElevationScanCenter(uci::type::AngleHalfTypeValue value) {
  elevationScanCenter_Accessor = value;
  return *this;
}


uci::type::DistanceTypeValue PO_AirVolumeSensorReferencedType::getMaxRangeOfInterest() const {
  return maxRangeOfInterest_Accessor;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::setMaxRangeOfInterest(uci::type::DistanceTypeValue value) {
  maxRangeOfInterest_Accessor = value;
  return *this;
}


uci::type::DistanceTypeValue PO_AirVolumeSensorReferencedType::getMinRangeOfInterest() const {
  return minRangeOfInterest_Accessor;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::setMinRangeOfInterest(uci::type::DistanceTypeValue value) {
  minRangeOfInterest_Accessor = value;
  return *this;
}


const uci::type::LOS_ReferenceEnum& PO_AirVolumeSensorReferencedType::getAzimuthScanStabilization() const {
  return *azimuthScanStabilization_Accessor;
}

uci::type::LOS_ReferenceEnum& PO_AirVolumeSensorReferencedType::getAzimuthScanStabilization() {
  return *azimuthScanStabilization_Accessor;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::setAzimuthScanStabilization(const uci::type::LOS_ReferenceEnum& accessor) {
  if (&accessor != azimuthScanStabilization_Accessor.get()) {
    azimuthScanStabilization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::setAzimuthScanStabilization(uci::type::LOS_ReferenceEnum::EnumerationItem value) {
  azimuthScanStabilization_Accessor->setValue(value);
  return *this;
}


const uci::type::ElevationScanStabilizationEnum& PO_AirVolumeSensorReferencedType::getElevationScanStabilization() const {
  return *elevationScanStabilization_Accessor;
}

uci::type::ElevationScanStabilizationEnum& PO_AirVolumeSensorReferencedType::getElevationScanStabilization() {
  return *elevationScanStabilization_Accessor;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::setElevationScanStabilization(const uci::type::ElevationScanStabilizationEnum& accessor) {
  if (&accessor != elevationScanStabilization_Accessor.get()) {
    elevationScanStabilization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::setElevationScanStabilization(uci::type::ElevationScanStabilizationEnum::EnumerationItem value) {
  elevationScanStabilization_Accessor->setValue(value);
  return *this;
}


uci::type::AltitudeRangePairType& PO_AirVolumeSensorReferencedType::getElevationScanCenterAltitudeRangePair_() const {
  if (elevationScanCenterAltitudeRangePair_Accessor) {
    return *elevationScanCenterAltitudeRangePair_Accessor;
  }
  throw uci::base::UCIException("Error in getElevationScanCenterAltitudeRangePair(): An attempt was made to get an optional field that was not enabled, call hasElevationScanCenterAltitudeRangePair() to determine if it is safe to call getElevationScanCenterAltitudeRangePair()");
}

const uci::type::AltitudeRangePairType& PO_AirVolumeSensorReferencedType::getElevationScanCenterAltitudeRangePair() const {
  return getElevationScanCenterAltitudeRangePair_();
}

uci::type::AltitudeRangePairType& PO_AirVolumeSensorReferencedType::getElevationScanCenterAltitudeRangePair() {
  return getElevationScanCenterAltitudeRangePair_();
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::setElevationScanCenterAltitudeRangePair(const uci::type::AltitudeRangePairType& accessor) {
  enableElevationScanCenterAltitudeRangePair();
  if (&accessor != elevationScanCenterAltitudeRangePair_Accessor.get()) {
    elevationScanCenterAltitudeRangePair_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_AirVolumeSensorReferencedType::hasElevationScanCenterAltitudeRangePair() const noexcept {
  return static_cast<bool>(elevationScanCenterAltitudeRangePair_Accessor);
}

uci::type::AltitudeRangePairType& PO_AirVolumeSensorReferencedType::enableElevationScanCenterAltitudeRangePair(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::altitudeRangePairType : type};
  if ((!elevationScanCenterAltitudeRangePair_Accessor) || (elevationScanCenterAltitudeRangePair_Accessor->getAccessorType() != requestedType)) {
    elevationScanCenterAltitudeRangePair_Accessor = AltitudeRangePairType::create(requestedType);
    if (!elevationScanCenterAltitudeRangePair_Accessor) {
      throw uci::base::UCIException("Error in enableElevationScanCenterAltitudeRangePair(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *elevationScanCenterAltitudeRangePair_Accessor;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::clearElevationScanCenterAltitudeRangePair() noexcept {
  elevationScanCenterAltitudeRangePair_Accessor.reset();
  return *this;
}

xs::Boolean PO_AirVolumeSensorReferencedType::getRollStabilized() const {
  return rollStabilized_Accessor;
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::setRollStabilized(xs::Boolean value) {
  rollStabilized_Accessor = value;
  return *this;
}


std::unique_ptr<PO_AirVolumeSensorReferencedType> PO_AirVolumeSensorReferencedType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AirVolumeSensorReferencedType : type};
  return (requestedType == uci::type::accessorType::pO_AirVolumeSensorReferencedType) ? boost::make_unique<PO_AirVolumeSensorReferencedType>() : nullptr;
}

/**  */
namespace PO_AirVolumeSensorReferencedType_Names {

constexpr const char* Extern_Type_Name{"PO_AirVolumeSensorReferencedType"};
constexpr const char* AzimuthScanWidth_Name{"AzimuthScanWidth"};
constexpr const char* AzimuthScanCenter_Name{"AzimuthScanCenter"};
constexpr const char* ElevationScanWidth_Name{"ElevationScanWidth"};
constexpr const char* ElevationScanCenter_Name{"ElevationScanCenter"};
constexpr const char* MaxRangeOfInterest_Name{"MaxRangeOfInterest"};
constexpr const char* MinRangeOfInterest_Name{"MinRangeOfInterest"};
constexpr const char* AzimuthScanStabilization_Name{"AzimuthScanStabilization"};
constexpr const char* ElevationScanStabilization_Name{"ElevationScanStabilization"};
constexpr const char* ElevationScanCenterAltitudeRangePair_Name{"ElevationScanCenterAltitudeRangePair"};
constexpr const char* RollStabilized_Name{"RollStabilized"};

} // namespace PO_AirVolumeSensorReferencedType_Names

void PO_AirVolumeSensorReferencedType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_AirVolumeSensorReferencedType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_AirVolumeSensorReferencedType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_AirVolumeSensorReferencedType_Names::AzimuthScanWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzimuthScanWidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PO_AirVolumeSensorReferencedType_Names::AzimuthScanCenter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzimuthScanCenter(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PO_AirVolumeSensorReferencedType_Names::ElevationScanWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setElevationScanWidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PO_AirVolumeSensorReferencedType_Names::ElevationScanCenter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setElevationScanCenter(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PO_AirVolumeSensorReferencedType_Names::MaxRangeOfInterest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxRangeOfInterest(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PO_AirVolumeSensorReferencedType_Names::MinRangeOfInterest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinRangeOfInterest(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PO_AirVolumeSensorReferencedType_Names::AzimuthScanStabilization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAzimuthScanStabilization().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_AirVolumeSensorReferencedType_Names::ElevationScanStabilization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getElevationScanStabilization().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_AirVolumeSensorReferencedType_Names::ElevationScanCenterAltitudeRangePair_Name) {
      AltitudeRangePairType::deserialize(valueType.second, accessor.enableElevationScanCenterAltitudeRangePair(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_AirVolumeSensorReferencedType_Names::RollStabilized_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRollStabilized(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string PO_AirVolumeSensorReferencedType::serialize(const uci::type::PO_AirVolumeSensorReferencedType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_AirVolumeSensorReferencedType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_AirVolumeSensorReferencedType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAzimuthScanWidth(), node, PO_AirVolumeSensorReferencedType_Names::AzimuthScanWidth_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAzimuthScanCenter(), node, PO_AirVolumeSensorReferencedType_Names::AzimuthScanCenter_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getElevationScanWidth(), node, PO_AirVolumeSensorReferencedType_Names::ElevationScanWidth_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getElevationScanCenter(), node, PO_AirVolumeSensorReferencedType_Names::ElevationScanCenter_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaxRangeOfInterest(), node, PO_AirVolumeSensorReferencedType_Names::MaxRangeOfInterest_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinRangeOfInterest(), node, PO_AirVolumeSensorReferencedType_Names::MinRangeOfInterest_Name);
  LOS_ReferenceEnum::serialize(accessor.getAzimuthScanStabilization(), node, PO_AirVolumeSensorReferencedType_Names::AzimuthScanStabilization_Name, false);
  ElevationScanStabilizationEnum::serialize(accessor.getElevationScanStabilization(), node, PO_AirVolumeSensorReferencedType_Names::ElevationScanStabilization_Name, false);
  if (accessor.hasElevationScanCenterAltitudeRangePair()) {
    AltitudeRangePairType::serialize(accessor.getElevationScanCenterAltitudeRangePair(), node, PO_AirVolumeSensorReferencedType_Names::ElevationScanCenterAltitudeRangePair_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getRollStabilized(), node, PO_AirVolumeSensorReferencedType_Names::RollStabilized_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_AirVolumeSensorReferencedType>().release());
}

uci::type::PO_AirVolumeSensorReferencedType& PO_AirVolumeSensorReferencedType::create(const uci::type::PO_AirVolumeSensorReferencedType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_AirVolumeSensorReferencedType> newAccessor{boost::make_unique<asb_uci::type::PO_AirVolumeSensorReferencedType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_AirVolumeSensorReferencedType::destroy(uci::type::PO_AirVolumeSensorReferencedType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_AirVolumeSensorReferencedType*>(&accessor);
}

} // namespace type

} // namespace uci

