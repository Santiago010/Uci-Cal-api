/** @file RFD_GainSettingType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RFD_GainSettingType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/GainRangeType.h"
#include "asb_uci/type/VisibleString32Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/GainRangeType.h"
#include "uci/type/RFD_GainSettingType.h"
#include "uci/type/VisibleString32Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RFD_GainSettingType::RFD_GainSettingType() = default;

RFD_GainSettingType::~RFD_GainSettingType() = default;

void RFD_GainSettingType::copy(const uci::type::RFD_GainSettingType& accessor) {
  copyImpl(accessor, false);
}

void RFD_GainSettingType::copyImpl(const uci::type::RFD_GainSettingType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RFD_GainSettingType&>(accessor);
    if (accessorImpl.gainRange_Accessor) {
      setGainRange(*(accessorImpl.gainRange_Accessor));
    } else {
      gainRange_Accessor.reset();
    }
    if (accessorImpl.validGainSettings_Accessor) {
      setValidGainSettings(*(accessorImpl.validGainSettings_Accessor));
    } else {
      validGainSettings_Accessor.reset();
    }
  }
}

void RFD_GainSettingType::reset() noexcept {
  gainRange_Accessor.reset();
  validGainSettings_Accessor.reset();
}

uci::type::RFD_GainSettingType::RFD_GainSettingTypeChoice RFD_GainSettingType::getRFD_GainSettingTypeChoiceOrdinal() const noexcept {
  if (gainRange_Accessor) {
    return RFD_GAINSETTINGTYPE_CHOICE_GAINRANGE;
  }
  if (validGainSettings_Accessor) {
    return RFD_GAINSETTINGTYPE_CHOICE_VALIDGAINSETTINGS;
  }
  return RFD_GAINSETTINGTYPE_CHOICE_NONE;
}

uci::type::RFD_GainSettingType& RFD_GainSettingType::setRFD_GainSettingTypeChoiceOrdinal(uci::type::RFD_GainSettingType::RFD_GainSettingTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case RFD_GAINSETTINGTYPE_CHOICE_GAINRANGE:
      chooseGainRange("setRFD_GainSettingTypeChoiceOrdinal", type);
      break;
    case RFD_GAINSETTINGTYPE_CHOICE_VALIDGAINSETTINGS:
      chooseValidGainSettings();
      break;
    default:
      throw uci::base::UCIException("Error in setRFD_GainSettingTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::GainRangeType& RFD_GainSettingType::getGainRange_() const {
  if (gainRange_Accessor) {
    return *gainRange_Accessor;
  }
  throw uci::base::UCIException("Error in getGainRange(): Unable to get GainRange, field not selected");
}

const uci::type::GainRangeType& RFD_GainSettingType::getGainRange() const {
  return getGainRange_();
}

uci::type::GainRangeType& RFD_GainSettingType::getGainRange() {
  return getGainRange_();
}

uci::type::RFD_GainSettingType& RFD_GainSettingType::setGainRange(const uci::type::GainRangeType& accessor) {
  chooseGainRange();
  if (&accessor != gainRange_Accessor.get()) {
    gainRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RFD_GainSettingType::isGainRange() const noexcept {
  return static_cast<bool>(gainRange_Accessor);
}

uci::type::GainRangeType& RFD_GainSettingType::chooseGainRange(const std::string& method, uci::base::accessorType::AccessorType type) {
  validGainSettings_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gainRangeType : type};
  if ((!gainRange_Accessor) || (gainRange_Accessor->getAccessorType() != requestedType)) {
    gainRange_Accessor = GainRangeType::create(type);
    if (!gainRange_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *gainRange_Accessor;
}

uci::type::GainRangeType& RFD_GainSettingType::chooseGainRange(uci::base::accessorType::AccessorType type) {
  return chooseGainRange("chooseGainRange", type);
}

uci::type::RFD_GainSettingType::ValidGainSettings& RFD_GainSettingType::getValidGainSettings_() const {
  if (validGainSettings_Accessor) {
    return *validGainSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getValidGainSettings(): Unable to get ValidGainSettings, field not selected");
}

const uci::type::RFD_GainSettingType::ValidGainSettings& RFD_GainSettingType::getValidGainSettings() const {
  return getValidGainSettings_();
}

uci::type::RFD_GainSettingType::ValidGainSettings& RFD_GainSettingType::getValidGainSettings() {
  return getValidGainSettings_();
}

uci::type::RFD_GainSettingType& RFD_GainSettingType::setValidGainSettings(const uci::type::RFD_GainSettingType::ValidGainSettings& accessor) {
  chooseValidGainSettings();
  if (&accessor != validGainSettings_Accessor.get()) {
    validGainSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RFD_GainSettingType::isValidGainSettings() const noexcept {
  return static_cast<bool>(validGainSettings_Accessor);
}

uci::type::RFD_GainSettingType::ValidGainSettings& RFD_GainSettingType::chooseValidGainSettings() {
  gainRange_Accessor.reset();
  if (!validGainSettings_Accessor) {
    validGainSettings_Accessor = boost::make_unique<ValidGainSettings>(1, SIZE_MAX);
  }
  return *validGainSettings_Accessor;
}

std::unique_ptr<RFD_GainSettingType> RFD_GainSettingType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rFD_GainSettingType : type};
  return (requestedType == uci::type::accessorType::rFD_GainSettingType) ? boost::make_unique<RFD_GainSettingType>() : nullptr;
}

/**  */
namespace RFD_GainSettingType_Names {

constexpr const char* Extern_Type_Name{"RFD_GainSettingType"};
constexpr const char* GainRange_Name{"GainRange"};
constexpr const char* ValidGainSettings_Name{"ValidGainSettings"};

} // namespace RFD_GainSettingType_Names

void RFD_GainSettingType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RFD_GainSettingType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RFD_GainSettingType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RFD_GainSettingType_Names::GainRange_Name) {
      GainRangeType::deserialize(valueType.second, accessor.chooseGainRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RFD_GainSettingType_Names::ValidGainSettings_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RFD_GainSettingType::ValidGainSettings& boundedList = accessor.chooseValidGainSettings();
        const uci::type::RFD_GainSettingType::ValidGainSettings::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    }
  }
}

std::string RFD_GainSettingType::serialize(const uci::type::RFD_GainSettingType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RFD_GainSettingType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RFD_GainSettingType_Names::Extern_Type_Name);
  }
  if (accessor.isGainRange()) {
    GainRangeType::serialize(accessor.getGainRange(), node, RFD_GainSettingType_Names::GainRange_Name);
  } else if (accessor.isValidGainSettings()) {
    {
      const uci::type::RFD_GainSettingType::ValidGainSettings& boundedList = accessor.getValidGainSettings();
      for (uci::type::RFD_GainSettingType::ValidGainSettings::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, RFD_GainSettingType_Names::ValidGainSettings_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RFD_GainSettingType& RFD_GainSettingType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RFD_GainSettingType>().release());
}

uci::type::RFD_GainSettingType& RFD_GainSettingType::create(const uci::type::RFD_GainSettingType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RFD_GainSettingType> newAccessor{boost::make_unique<asb_uci::type::RFD_GainSettingType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RFD_GainSettingType::destroy(uci::type::RFD_GainSettingType& accessor) {
  delete dynamic_cast<asb_uci::type::RFD_GainSettingType*>(&accessor);
}

} // namespace type

} // namespace uci

