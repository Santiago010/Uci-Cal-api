/** @file EphemerisPropagatorChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EphemerisPropagatorChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EphemerisOrbitalModelType.h"
#include "../../../include/asb_uci/type/PropagatorSettingsChoiceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EphemerisOrbitalModelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EphemerisPropagatorChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PropagatorSettingsChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EphemerisPropagatorChoiceType::EphemerisPropagatorChoiceType() = default;

EphemerisPropagatorChoiceType::~EphemerisPropagatorChoiceType() = default;

void EphemerisPropagatorChoiceType::copy(const uci::type::EphemerisPropagatorChoiceType& accessor) {
  copyImpl(accessor, false);
}

void EphemerisPropagatorChoiceType::copyImpl(const uci::type::EphemerisPropagatorChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EphemerisPropagatorChoiceType&>(accessor);
    if (accessorImpl.orbitalModelPropagator_Accessor) {
      setOrbitalModelPropagator(*(accessorImpl.orbitalModelPropagator_Accessor));
    } else {
      orbitalModelPropagator_Accessor.reset();
    }
    if (accessorImpl.propagatorSettings_Accessor) {
      setPropagatorSettings(*(accessorImpl.propagatorSettings_Accessor));
    } else {
      propagatorSettings_Accessor.reset();
    }
  }
}

void EphemerisPropagatorChoiceType::reset() noexcept {
  orbitalModelPropagator_Accessor.reset();
  propagatorSettings_Accessor.reset();
}

uci::type::EphemerisPropagatorChoiceType::EphemerisPropagatorChoiceTypeChoice EphemerisPropagatorChoiceType::getEphemerisPropagatorChoiceTypeChoiceOrdinal() const noexcept {
  if (orbitalModelPropagator_Accessor) {
    return EPHEMERISPROPAGATORCHOICETYPE_CHOICE_ORBITALMODELPROPAGATOR;
  }
  if (propagatorSettings_Accessor) {
    return EPHEMERISPROPAGATORCHOICETYPE_CHOICE_PROPAGATORSETTINGS;
  }
  return EPHEMERISPROPAGATORCHOICETYPE_CHOICE_NONE;
}

uci::type::EphemerisPropagatorChoiceType& EphemerisPropagatorChoiceType::setEphemerisPropagatorChoiceTypeChoiceOrdinal(uci::type::EphemerisPropagatorChoiceType::EphemerisPropagatorChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EPHEMERISPROPAGATORCHOICETYPE_CHOICE_ORBITALMODELPROPAGATOR:
      chooseOrbitalModelPropagator("setEphemerisPropagatorChoiceTypeChoiceOrdinal", type);
      break;
    case EPHEMERISPROPAGATORCHOICETYPE_CHOICE_PROPAGATORSETTINGS:
      choosePropagatorSettings("setEphemerisPropagatorChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEphemerisPropagatorChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EphemerisOrbitalModelType& EphemerisPropagatorChoiceType::getOrbitalModelPropagator_() const {
  if (orbitalModelPropagator_Accessor) {
    return *orbitalModelPropagator_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalModelPropagator(): Unable to get OrbitalModelPropagator, field not selected");
}

const uci::type::EphemerisOrbitalModelType& EphemerisPropagatorChoiceType::getOrbitalModelPropagator() const {
  return getOrbitalModelPropagator_();
}

uci::type::EphemerisOrbitalModelType& EphemerisPropagatorChoiceType::getOrbitalModelPropagator() {
  return getOrbitalModelPropagator_();
}

uci::type::EphemerisPropagatorChoiceType& EphemerisPropagatorChoiceType::setOrbitalModelPropagator(const uci::type::EphemerisOrbitalModelType& accessor) {
  chooseOrbitalModelPropagator();
  if (&accessor != orbitalModelPropagator_Accessor.get()) {
    orbitalModelPropagator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EphemerisPropagatorChoiceType::isOrbitalModelPropagator() const noexcept {
  return static_cast<bool>(orbitalModelPropagator_Accessor);
}

uci::type::EphemerisOrbitalModelType& EphemerisPropagatorChoiceType::chooseOrbitalModelPropagator(const std::string& method, uci::base::accessorType::AccessorType type) {
  propagatorSettings_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ephemerisOrbitalModelType : type};
  if ((!orbitalModelPropagator_Accessor) || (orbitalModelPropagator_Accessor->getAccessorType() != requestedType)) {
    orbitalModelPropagator_Accessor = EphemerisOrbitalModelType::create(type);
    if (!orbitalModelPropagator_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalModelPropagator_Accessor;
}

uci::type::EphemerisOrbitalModelType& EphemerisPropagatorChoiceType::chooseOrbitalModelPropagator(uci::base::accessorType::AccessorType type) {
  return chooseOrbitalModelPropagator("chooseOrbitalModelPropagator", type);
}

uci::type::PropagatorSettingsChoiceType& EphemerisPropagatorChoiceType::getPropagatorSettings_() const {
  if (propagatorSettings_Accessor) {
    return *propagatorSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getPropagatorSettings(): Unable to get PropagatorSettings, field not selected");
}

const uci::type::PropagatorSettingsChoiceType& EphemerisPropagatorChoiceType::getPropagatorSettings() const {
  return getPropagatorSettings_();
}

uci::type::PropagatorSettingsChoiceType& EphemerisPropagatorChoiceType::getPropagatorSettings() {
  return getPropagatorSettings_();
}

uci::type::EphemerisPropagatorChoiceType& EphemerisPropagatorChoiceType::setPropagatorSettings(const uci::type::PropagatorSettingsChoiceType& accessor) {
  choosePropagatorSettings(accessor.getAccessorType());
  if (&accessor != propagatorSettings_Accessor.get()) {
    propagatorSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EphemerisPropagatorChoiceType::isPropagatorSettings() const noexcept {
  return static_cast<bool>(propagatorSettings_Accessor);
}

uci::type::PropagatorSettingsChoiceType& EphemerisPropagatorChoiceType::choosePropagatorSettings(const std::string& method, uci::base::accessorType::AccessorType type) {
  orbitalModelPropagator_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::propagatorSettingsChoiceType : type};
  if ((!propagatorSettings_Accessor) || (propagatorSettings_Accessor->getAccessorType() != requestedType)) {
    propagatorSettings_Accessor = PropagatorSettingsChoiceType::create(type);
    if (!propagatorSettings_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *propagatorSettings_Accessor;
}

uci::type::PropagatorSettingsChoiceType& EphemerisPropagatorChoiceType::choosePropagatorSettings(uci::base::accessorType::AccessorType type) {
  return choosePropagatorSettings("choosePropagatorSettings", type);
}

std::unique_ptr<EphemerisPropagatorChoiceType> EphemerisPropagatorChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ephemerisPropagatorChoiceType : type};
  return (requestedType == uci::type::accessorType::ephemerisPropagatorChoiceType) ? boost::make_unique<EphemerisPropagatorChoiceType>() : nullptr;
}

/**  */
namespace EphemerisPropagatorChoiceType_Names {

constexpr const char* Extern_Type_Name{"EphemerisPropagatorChoiceType"};
constexpr const char* OrbitalModelPropagator_Name{"OrbitalModelPropagator"};
constexpr const char* PropagatorSettings_Name{"PropagatorSettings"};

} // namespace EphemerisPropagatorChoiceType_Names

void EphemerisPropagatorChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EphemerisPropagatorChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EphemerisPropagatorChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EphemerisPropagatorChoiceType_Names::OrbitalModelPropagator_Name) {
      EphemerisOrbitalModelType::deserialize(valueType.second, accessor.chooseOrbitalModelPropagator(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EphemerisPropagatorChoiceType_Names::PropagatorSettings_Name) {
      PropagatorSettingsChoiceType::deserialize(valueType.second, accessor.choosePropagatorSettings(), nodeName, nsPrefix);
    }
  }
}

std::string EphemerisPropagatorChoiceType::serialize(const uci::type::EphemerisPropagatorChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EphemerisPropagatorChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EphemerisPropagatorChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isOrbitalModelPropagator()) {
    EphemerisOrbitalModelType::serialize(accessor.getOrbitalModelPropagator(), node, EphemerisPropagatorChoiceType_Names::OrbitalModelPropagator_Name);
  } else if (accessor.isPropagatorSettings()) {
    PropagatorSettingsChoiceType::serialize(accessor.getPropagatorSettings(), node, EphemerisPropagatorChoiceType_Names::PropagatorSettings_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EphemerisPropagatorChoiceType& EphemerisPropagatorChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EphemerisPropagatorChoiceType>().release());
}

uci::type::EphemerisPropagatorChoiceType& EphemerisPropagatorChoiceType::create(const uci::type::EphemerisPropagatorChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EphemerisPropagatorChoiceType> newAccessor{boost::make_unique<asb_uci::type::EphemerisPropagatorChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EphemerisPropagatorChoiceType::destroy(uci::type::EphemerisPropagatorChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::EphemerisPropagatorChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

