/** @file PO_ComponentF_StopVariableType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_ComponentF_StopVariableType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ComponentControllabilityA_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ComponentControllabilityA_Type.h"
#include "uci/type/PO_ComponentF_StopVariableType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentF_StopVariableType::PO_ComponentF_StopVariableType() = default;

PO_ComponentF_StopVariableType::~PO_ComponentF_StopVariableType() = default;

void PO_ComponentF_StopVariableType::copy(const uci::type::PO_ComponentF_StopVariableType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentF_StopVariableType::copyImpl(const uci::type::PO_ComponentF_StopVariableType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentF_StopVariableType&>(accessor);
    setMin(accessorImpl.min_Accessor);
    setMax(accessorImpl.max_Accessor);
    if (accessorImpl.controllability_Accessor) {
      setControllability(*(accessorImpl.controllability_Accessor));
    } else {
      controllability_Accessor.reset();
    }
  }
}

void PO_ComponentF_StopVariableType::reset() noexcept {
  min_Accessor = 0.0;
  max_Accessor = 0.0;
  controllability_Accessor.reset();
}

xs::Float PO_ComponentF_StopVariableType::getMin() const {
  return min_Accessor;
}

uci::type::PO_ComponentF_StopVariableType& PO_ComponentF_StopVariableType::setMin(xs::Float value) {
  min_Accessor = value;
  return *this;
}


xs::Float PO_ComponentF_StopVariableType::getMax() const {
  return max_Accessor;
}

uci::type::PO_ComponentF_StopVariableType& PO_ComponentF_StopVariableType::setMax(xs::Float value) {
  max_Accessor = value;
  return *this;
}


uci::type::ComponentControllabilityA_Type& PO_ComponentF_StopVariableType::getControllability_() const {
  if (controllability_Accessor) {
    return *controllability_Accessor;
  }
  throw uci::base::UCIException("Error in getControllability(): An attempt was made to get an optional field that was not enabled, call hasControllability() to determine if it is safe to call getControllability()");
}

const uci::type::ComponentControllabilityA_Type& PO_ComponentF_StopVariableType::getControllability() const {
  return getControllability_();
}

uci::type::ComponentControllabilityA_Type& PO_ComponentF_StopVariableType::getControllability() {
  return getControllability_();
}

uci::type::PO_ComponentF_StopVariableType& PO_ComponentF_StopVariableType::setControllability(const uci::type::ComponentControllabilityA_Type& accessor) {
  enableControllability();
  if (&accessor != controllability_Accessor.get()) {
    controllability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentF_StopVariableType::hasControllability() const noexcept {
  return static_cast<bool>(controllability_Accessor);
}

uci::type::ComponentControllabilityA_Type& PO_ComponentF_StopVariableType::enableControllability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControllabilityA_Type : type};
  if ((!controllability_Accessor) || (controllability_Accessor->getAccessorType() != requestedType)) {
    controllability_Accessor = ComponentControllabilityA_Type::create(requestedType);
    if (!controllability_Accessor) {
      throw uci::base::UCIException("Error in enableControllability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *controllability_Accessor;
}

uci::type::PO_ComponentF_StopVariableType& PO_ComponentF_StopVariableType::clearControllability() noexcept {
  controllability_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ComponentF_StopVariableType> PO_ComponentF_StopVariableType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentF_StopVariableType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentF_StopVariableType) ? boost::make_unique<PO_ComponentF_StopVariableType>() : nullptr;
}

/**  */
namespace PO_ComponentF_StopVariableType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentF_StopVariableType"};
constexpr const char* Min_Name{"Min"};
constexpr const char* Max_Name{"Max"};
constexpr const char* Controllability_Name{"Controllability"};

} // namespace PO_ComponentF_StopVariableType_Names

void PO_ComponentF_StopVariableType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentF_StopVariableType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentF_StopVariableType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentF_StopVariableType_Names::Min_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMin(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentF_StopVariableType_Names::Max_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMax(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentF_StopVariableType_Names::Controllability_Name) {
      ComponentControllabilityA_Type::deserialize(valueType.second, accessor.enableControllability(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentF_StopVariableType::serialize(const uci::type::PO_ComponentF_StopVariableType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentF_StopVariableType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentF_StopVariableType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeFloat(accessor.getMin(), node, PO_ComponentF_StopVariableType_Names::Min_Name);
  asb_uci::util::SerializationHelpers::serializeFloat(accessor.getMax(), node, PO_ComponentF_StopVariableType_Names::Max_Name);
  if (accessor.hasControllability()) {
    ComponentControllabilityA_Type::serialize(accessor.getControllability(), node, PO_ComponentF_StopVariableType_Names::Controllability_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentF_StopVariableType& PO_ComponentF_StopVariableType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentF_StopVariableType>().release());
}

uci::type::PO_ComponentF_StopVariableType& PO_ComponentF_StopVariableType::create(const uci::type::PO_ComponentF_StopVariableType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentF_StopVariableType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentF_StopVariableType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentF_StopVariableType::destroy(uci::type::PO_ComponentF_StopVariableType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentF_StopVariableType*>(&accessor);
}

} // namespace type

} // namespace uci

