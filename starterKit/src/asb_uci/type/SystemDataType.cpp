/** @file SystemDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SystemDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/NavigationReportMDT.h"
#include "asb_uci/type/PositionReportMDT.h"
#include "asb_uci/type/SystemMetadataMDT.h"
#include "asb_uci/type/SystemStatusMDT.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/NavigationReportMDT.h"
#include "uci/type/PositionReportMDT.h"
#include "uci/type/SystemDataType.h"
#include "uci/type/SystemMetadataMDT.h"
#include "uci/type/SystemStatusMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SystemDataType::SystemDataType()
  : systemStatus_Accessor{boost::make_unique<SystemStatusMDT>()} {
}

SystemDataType::~SystemDataType() = default;

void SystemDataType::copy(const uci::type::SystemDataType& accessor) {
  copyImpl(accessor, false);
}

void SystemDataType::copyImpl(const uci::type::SystemDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SystemDataType&>(accessor);
    setSystemStatus(*(accessorImpl.systemStatus_Accessor));
    if (accessorImpl.position_Accessor) {
      setPosition(*(accessorImpl.position_Accessor));
    } else {
      position_Accessor.reset();
    }
    if (accessorImpl.navigation_Accessor) {
      setNavigation(*(accessorImpl.navigation_Accessor));
    } else {
      navigation_Accessor.reset();
    }
    if (accessorImpl.metadata_Accessor) {
      setMetadata(*(accessorImpl.metadata_Accessor));
    } else {
      metadata_Accessor.reset();
    }
  }
}

void SystemDataType::reset() noexcept {
  systemStatus_Accessor->reset();
  position_Accessor.reset();
  navigation_Accessor.reset();
  metadata_Accessor.reset();
}

const uci::type::SystemStatusMDT& SystemDataType::getSystemStatus() const {
  return *systemStatus_Accessor;
}

uci::type::SystemStatusMDT& SystemDataType::getSystemStatus() {
  return *systemStatus_Accessor;
}

uci::type::SystemDataType& SystemDataType::setSystemStatus(const uci::type::SystemStatusMDT& accessor) {
  if (&accessor != systemStatus_Accessor.get()) {
    systemStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PositionReportMDT& SystemDataType::getPosition_() const {
  if (position_Accessor) {
    return *position_Accessor;
  }
  throw uci::base::UCIException("Error in getPosition(): An attempt was made to get an optional field that was not enabled, call hasPosition() to determine if it is safe to call getPosition()");
}

const uci::type::PositionReportMDT& SystemDataType::getPosition() const {
  return getPosition_();
}

uci::type::PositionReportMDT& SystemDataType::getPosition() {
  return getPosition_();
}

uci::type::SystemDataType& SystemDataType::setPosition(const uci::type::PositionReportMDT& accessor) {
  enablePosition();
  if (&accessor != position_Accessor.get()) {
    position_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SystemDataType::hasPosition() const noexcept {
  return static_cast<bool>(position_Accessor);
}

uci::type::PositionReportMDT& SystemDataType::enablePosition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionReportMDT : type};
  if ((!position_Accessor) || (position_Accessor->getAccessorType() != requestedType)) {
    position_Accessor = PositionReportMDT::create(requestedType);
    if (!position_Accessor) {
      throw uci::base::UCIException("Error in enablePosition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *position_Accessor;
}

uci::type::SystemDataType& SystemDataType::clearPosition() noexcept {
  position_Accessor.reset();
  return *this;
}

uci::type::NavigationReportMDT& SystemDataType::getNavigation_() const {
  if (navigation_Accessor) {
    return *navigation_Accessor;
  }
  throw uci::base::UCIException("Error in getNavigation(): An attempt was made to get an optional field that was not enabled, call hasNavigation() to determine if it is safe to call getNavigation()");
}

const uci::type::NavigationReportMDT& SystemDataType::getNavigation() const {
  return getNavigation_();
}

uci::type::NavigationReportMDT& SystemDataType::getNavigation() {
  return getNavigation_();
}

uci::type::SystemDataType& SystemDataType::setNavigation(const uci::type::NavigationReportMDT& accessor) {
  enableNavigation();
  if (&accessor != navigation_Accessor.get()) {
    navigation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SystemDataType::hasNavigation() const noexcept {
  return static_cast<bool>(navigation_Accessor);
}

uci::type::NavigationReportMDT& SystemDataType::enableNavigation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::navigationReportMDT : type};
  if ((!navigation_Accessor) || (navigation_Accessor->getAccessorType() != requestedType)) {
    navigation_Accessor = NavigationReportMDT::create(requestedType);
    if (!navigation_Accessor) {
      throw uci::base::UCIException("Error in enableNavigation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *navigation_Accessor;
}

uci::type::SystemDataType& SystemDataType::clearNavigation() noexcept {
  navigation_Accessor.reset();
  return *this;
}

uci::type::SystemMetadataMDT& SystemDataType::getMetadata_() const {
  if (metadata_Accessor) {
    return *metadata_Accessor;
  }
  throw uci::base::UCIException("Error in getMetadata(): An attempt was made to get an optional field that was not enabled, call hasMetadata() to determine if it is safe to call getMetadata()");
}

const uci::type::SystemMetadataMDT& SystemDataType::getMetadata() const {
  return getMetadata_();
}

uci::type::SystemMetadataMDT& SystemDataType::getMetadata() {
  return getMetadata_();
}

uci::type::SystemDataType& SystemDataType::setMetadata(const uci::type::SystemMetadataMDT& accessor) {
  enableMetadata();
  if (&accessor != metadata_Accessor.get()) {
    metadata_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SystemDataType::hasMetadata() const noexcept {
  return static_cast<bool>(metadata_Accessor);
}

uci::type::SystemMetadataMDT& SystemDataType::enableMetadata(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemMetadataMDT : type};
  if ((!metadata_Accessor) || (metadata_Accessor->getAccessorType() != requestedType)) {
    metadata_Accessor = SystemMetadataMDT::create(requestedType);
    if (!metadata_Accessor) {
      throw uci::base::UCIException("Error in enableMetadata(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *metadata_Accessor;
}

uci::type::SystemDataType& SystemDataType::clearMetadata() noexcept {
  metadata_Accessor.reset();
  return *this;
}

std::unique_ptr<SystemDataType> SystemDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemDataType : type};
  return (requestedType == uci::type::accessorType::systemDataType) ? boost::make_unique<SystemDataType>() : nullptr;
}

/**  */
namespace SystemDataType_Names {

constexpr const char* Extern_Type_Name{"SystemDataType"};
constexpr const char* SystemStatus_Name{"SystemStatus"};
constexpr const char* Position_Name{"Position"};
constexpr const char* Navigation_Name{"Navigation"};
constexpr const char* Metadata_Name{"Metadata"};

} // namespace SystemDataType_Names

void SystemDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SystemDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SystemDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SystemDataType_Names::SystemStatus_Name) {
      SystemStatusMDT::deserialize(valueType.second, accessor.getSystemStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemDataType_Names::Position_Name) {
      PositionReportMDT::deserialize(valueType.second, accessor.enablePosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemDataType_Names::Navigation_Name) {
      NavigationReportMDT::deserialize(valueType.second, accessor.enableNavigation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemDataType_Names::Metadata_Name) {
      SystemMetadataMDT::deserialize(valueType.second, accessor.enableMetadata(), nodeName, nsPrefix);
    }
  }
}

std::string SystemDataType::serialize(const uci::type::SystemDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SystemDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SystemDataType_Names::Extern_Type_Name);
  }
  SystemStatusMDT::serialize(accessor.getSystemStatus(), node, SystemDataType_Names::SystemStatus_Name);
  if (accessor.hasPosition()) {
    PositionReportMDT::serialize(accessor.getPosition(), node, SystemDataType_Names::Position_Name);
  }
  if (accessor.hasNavigation()) {
    NavigationReportMDT::serialize(accessor.getNavigation(), node, SystemDataType_Names::Navigation_Name);
  }
  if (accessor.hasMetadata()) {
    SystemMetadataMDT::serialize(accessor.getMetadata(), node, SystemDataType_Names::Metadata_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SystemDataType& SystemDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SystemDataType>().release());
}

uci::type::SystemDataType& SystemDataType::create(const uci::type::SystemDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SystemDataType> newAccessor{boost::make_unique<asb_uci::type::SystemDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SystemDataType::destroy(uci::type::SystemDataType& accessor) {
  delete dynamic_cast<asb_uci::type::SystemDataType*>(&accessor);
}

} // namespace type

} // namespace uci

