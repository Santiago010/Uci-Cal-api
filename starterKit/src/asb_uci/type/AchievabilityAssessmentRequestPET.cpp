/** @file AchievabilityAssessmentRequestPET.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AchievabilityAssessmentRequestPET.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/RoutePlanReferencesType.h"
#include "asb_uci/type/TimingConstraintsType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AchievabilityAssessmentRequestPET.h"
#include "uci/type/DurationType.h"
#include "uci/type/RoutePlanReferencesType.h"
#include "uci/type/TimingConstraintsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AchievabilityAssessmentRequestPET::AchievabilityAssessmentRequestPET()
  : routePlanReference_Accessor{boost::make_unique<RoutePlanReference>(0, SIZE_MAX)} {
}

AchievabilityAssessmentRequestPET::~AchievabilityAssessmentRequestPET() = default;

void AchievabilityAssessmentRequestPET::copy(const uci::type::AchievabilityAssessmentRequestPET& accessor) {
  copyImpl(accessor, false);
}

void AchievabilityAssessmentRequestPET::copyImpl(const uci::type::AchievabilityAssessmentRequestPET& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::achievabilityAssessmentRequestPET)) {
      const auto& accessorImpl = dynamic_cast<const AchievabilityAssessmentRequestPET&>(accessor);
      setRoutePlanReference(*(accessorImpl.routePlanReference_Accessor));
      if (accessorImpl.timingConstraints_Accessor) {
        setTimingConstraints(*(accessorImpl.timingConstraints_Accessor));
      } else {
        timingConstraints_Accessor.reset();
      }
      if (accessorImpl.hasRequestFrequencyPeriod()) {
        setRequestFrequencyPeriod(accessorImpl.getRequestFrequencyPeriod());
      } else {
        clearRequestFrequencyPeriod();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void AchievabilityAssessmentRequestPET::reset() noexcept {
  routePlanReference_Accessor->reset();
  timingConstraints_Accessor.reset();
  clearRequestFrequencyPeriod();
}

const uci::type::AchievabilityAssessmentRequestPET::RoutePlanReference& AchievabilityAssessmentRequestPET::getRoutePlanReference() const {
  return *routePlanReference_Accessor;
}

uci::type::AchievabilityAssessmentRequestPET::RoutePlanReference& AchievabilityAssessmentRequestPET::getRoutePlanReference() {
  return *routePlanReference_Accessor;
}

uci::type::AchievabilityAssessmentRequestPET& AchievabilityAssessmentRequestPET::setRoutePlanReference(const uci::type::AchievabilityAssessmentRequestPET::RoutePlanReference& accessor) {
  if (&accessor != routePlanReference_Accessor.get()) {
    routePlanReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TimingConstraintsType& AchievabilityAssessmentRequestPET::getTimingConstraints_() const {
  if (timingConstraints_Accessor) {
    return *timingConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getTimingConstraints(): An attempt was made to get an optional field that was not enabled, call hasTimingConstraints() to determine if it is safe to call getTimingConstraints()");
}

const uci::type::TimingConstraintsType& AchievabilityAssessmentRequestPET::getTimingConstraints() const {
  return getTimingConstraints_();
}

uci::type::TimingConstraintsType& AchievabilityAssessmentRequestPET::getTimingConstraints() {
  return getTimingConstraints_();
}

uci::type::AchievabilityAssessmentRequestPET& AchievabilityAssessmentRequestPET::setTimingConstraints(const uci::type::TimingConstraintsType& accessor) {
  enableTimingConstraints();
  if (&accessor != timingConstraints_Accessor.get()) {
    timingConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AchievabilityAssessmentRequestPET::hasTimingConstraints() const noexcept {
  return static_cast<bool>(timingConstraints_Accessor);
}

uci::type::TimingConstraintsType& AchievabilityAssessmentRequestPET::enableTimingConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::timingConstraintsType : type};
  if ((!timingConstraints_Accessor) || (timingConstraints_Accessor->getAccessorType() != requestedType)) {
    timingConstraints_Accessor = TimingConstraintsType::create(requestedType);
    if (!timingConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableTimingConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timingConstraints_Accessor;
}

uci::type::AchievabilityAssessmentRequestPET& AchievabilityAssessmentRequestPET::clearTimingConstraints() noexcept {
  timingConstraints_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue AchievabilityAssessmentRequestPET::getRequestFrequencyPeriod() const {
  if (requestFrequencyPeriod_Accessor) {
    return *requestFrequencyPeriod_Accessor;
  }
  throw uci::base::UCIException("Error in getRequestFrequencyPeriod(): An attempt was made to get an optional field that was not enabled, call hasRequestFrequencyPeriod() to determine if it is safe to call getRequestFrequencyPeriod()");
}

uci::type::AchievabilityAssessmentRequestPET& AchievabilityAssessmentRequestPET::setRequestFrequencyPeriod(uci::type::DurationTypeValue value) {
  requestFrequencyPeriod_Accessor = value;
  return *this;
}

bool AchievabilityAssessmentRequestPET::hasRequestFrequencyPeriod() const noexcept {
  return requestFrequencyPeriod_Accessor.has_value();
}

uci::type::AchievabilityAssessmentRequestPET& AchievabilityAssessmentRequestPET::clearRequestFrequencyPeriod() noexcept {
  requestFrequencyPeriod_Accessor.reset();
  return *this;
}

std::unique_ptr<AchievabilityAssessmentRequestPET> AchievabilityAssessmentRequestPET::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::achievabilityAssessmentRequestPET : type};
  return std::unique_ptr<AchievabilityAssessmentRequestPET>(dynamic_cast<AchievabilityAssessmentRequestPET*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace AchievabilityAssessmentRequestPET_Names {

constexpr const char* Extern_Type_Name{"AchievabilityAssessmentRequestPET"};
constexpr const char* RoutePlanReference_Name{"RoutePlanReference"};
constexpr const char* TimingConstraints_Name{"TimingConstraints"};
constexpr const char* RequestFrequencyPeriod_Name{"RequestFrequencyPeriod"};

} // namespace AchievabilityAssessmentRequestPET_Names

void AchievabilityAssessmentRequestPET::deserialize(const boost::property_tree::ptree& propTree, uci::type::AchievabilityAssessmentRequestPET& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AchievabilityAssessmentRequestPET_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AchievabilityAssessmentRequestPET_Names::RoutePlanReference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AchievabilityAssessmentRequestPET::RoutePlanReference& boundedList = accessor.getRoutePlanReference();
        const uci::type::AchievabilityAssessmentRequestPET::RoutePlanReference::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RoutePlanReferencesType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + AchievabilityAssessmentRequestPET_Names::TimingConstraints_Name) {
      TimingConstraintsType::deserialize(valueType.second, accessor.enableTimingConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AchievabilityAssessmentRequestPET_Names::RequestFrequencyPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRequestFrequencyPeriod(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string AchievabilityAssessmentRequestPET::serialize(const uci::type::AchievabilityAssessmentRequestPET& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AchievabilityAssessmentRequestPET_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::achievabilityAssessmentRequestPET)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, AchievabilityAssessmentRequestPET_Names::Extern_Type_Name);
    }
    {
      const uci::type::AchievabilityAssessmentRequestPET::RoutePlanReference& boundedList = accessor.getRoutePlanReference();
      for (uci::type::AchievabilityAssessmentRequestPET::RoutePlanReference::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::RoutePlanReferencesType::serialize(boundedList.at(i), node, AchievabilityAssessmentRequestPET_Names::RoutePlanReference_Name);
      }
    }
    if (accessor.hasTimingConstraints()) {
      TimingConstraintsType::serialize(accessor.getTimingConstraints(), node, AchievabilityAssessmentRequestPET_Names::TimingConstraints_Name);
    }
    if (accessor.hasRequestFrequencyPeriod()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getRequestFrequencyPeriod(), node, AchievabilityAssessmentRequestPET_Names::RequestFrequencyPeriod_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

