/** @file StrikeTaskMetricsTargetingType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/StrikeTaskMetricsTargetingType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EllipseType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EllipseType.h"
#include "uci/type/StrikeTaskMetricsTargetingType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StrikeTaskMetricsTargetingType::StrikeTaskMetricsTargetingType() = default;

StrikeTaskMetricsTargetingType::~StrikeTaskMetricsTargetingType() = default;

void StrikeTaskMetricsTargetingType::copy(const uci::type::StrikeTaskMetricsTargetingType& accessor) {
  copyImpl(accessor, false);
}

void StrikeTaskMetricsTargetingType::copyImpl(const uci::type::StrikeTaskMetricsTargetingType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const StrikeTaskMetricsTargetingType&>(accessor);
    quality_Accessor = (accessorImpl.quality_Accessor ? accessorImpl.quality_Accessor : boost::none);
    if (accessorImpl.uncertaintyEllipse_Accessor) {
      setUncertaintyEllipse(*(accessorImpl.uncertaintyEllipse_Accessor));
    } else {
      uncertaintyEllipse_Accessor.reset();
    }
  }
}

void StrikeTaskMetricsTargetingType::reset() noexcept {
  quality_Accessor.reset();
  uncertaintyEllipse_Accessor.reset();
}

uci::type::StrikeTaskMetricsTargetingType::StrikeTaskMetricsTargetingTypeChoice StrikeTaskMetricsTargetingType::getStrikeTaskMetricsTargetingTypeChoiceOrdinal() const noexcept {
  if (quality_Accessor) {
    return STRIKETASKMETRICSTARGETINGTYPE_CHOICE_QUALITY;
  }
  if (uncertaintyEllipse_Accessor) {
    return STRIKETASKMETRICSTARGETINGTYPE_CHOICE_UNCERTAINTYELLIPSE;
  }
  return STRIKETASKMETRICSTARGETINGTYPE_CHOICE_NONE;
}

uci::type::StrikeTaskMetricsTargetingType& StrikeTaskMetricsTargetingType::setStrikeTaskMetricsTargetingTypeChoiceOrdinal(uci::type::StrikeTaskMetricsTargetingType::StrikeTaskMetricsTargetingTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case STRIKETASKMETRICSTARGETINGTYPE_CHOICE_QUALITY:
      chooseQuality();
      break;
    case STRIKETASKMETRICSTARGETINGTYPE_CHOICE_UNCERTAINTYELLIPSE:
      chooseUncertaintyEllipse("setStrikeTaskMetricsTargetingTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setStrikeTaskMetricsTargetingTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

xs::Float StrikeTaskMetricsTargetingType::getQuality() const {
  if (quality_Accessor) {
    return *quality_Accessor;
  }
  throw uci::base::UCIException("Error in getQuality(): Unable to get Quality, field not selected");
}

uci::type::StrikeTaskMetricsTargetingType& StrikeTaskMetricsTargetingType::setQuality(xs::Float value) {
  chooseQuality();
  quality_Accessor = value;
  return *this;
}

bool StrikeTaskMetricsTargetingType::isQuality() const noexcept {
  return static_cast<bool>(quality_Accessor);
}

void StrikeTaskMetricsTargetingType::chooseQuality() {
  uncertaintyEllipse_Accessor.reset();
  if (!quality_Accessor) {
    quality_Accessor = boost::optional<asb_xs::Float>();
  }
}

uci::type::EllipseType& StrikeTaskMetricsTargetingType::getUncertaintyEllipse_() const {
  if (uncertaintyEllipse_Accessor) {
    return *uncertaintyEllipse_Accessor;
  }
  throw uci::base::UCIException("Error in getUncertaintyEllipse(): Unable to get UncertaintyEllipse, field not selected");
}

const uci::type::EllipseType& StrikeTaskMetricsTargetingType::getUncertaintyEllipse() const {
  return getUncertaintyEllipse_();
}

uci::type::EllipseType& StrikeTaskMetricsTargetingType::getUncertaintyEllipse() {
  return getUncertaintyEllipse_();
}

uci::type::StrikeTaskMetricsTargetingType& StrikeTaskMetricsTargetingType::setUncertaintyEllipse(const uci::type::EllipseType& accessor) {
  chooseUncertaintyEllipse("setUncertaintyEllipse", accessor.getAccessorType());
  if (&accessor != uncertaintyEllipse_Accessor.get()) {
    uncertaintyEllipse_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool StrikeTaskMetricsTargetingType::isUncertaintyEllipse() const noexcept {
  return static_cast<bool>(uncertaintyEllipse_Accessor);
}

uci::type::EllipseType& StrikeTaskMetricsTargetingType::chooseUncertaintyEllipse(const std::string& method, uci::base::accessorType::AccessorType type) {
  quality_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ellipseType : type};
  if ((!uncertaintyEllipse_Accessor) || (uncertaintyEllipse_Accessor->getAccessorType() != requestedType)) {
    uncertaintyEllipse_Accessor = EllipseType::create(type);
    if (!uncertaintyEllipse_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *uncertaintyEllipse_Accessor;
}

uci::type::EllipseType& StrikeTaskMetricsTargetingType::chooseUncertaintyEllipse(uci::base::accessorType::AccessorType type) {
  return chooseUncertaintyEllipse("chooseUncertaintyEllipse", type);
}

std::unique_ptr<StrikeTaskMetricsTargetingType> StrikeTaskMetricsTargetingType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeTaskMetricsTargetingType : type};
  return (requestedType == uci::type::accessorType::strikeTaskMetricsTargetingType) ? boost::make_unique<StrikeTaskMetricsTargetingType>() : nullptr;
}

/**  */
namespace StrikeTaskMetricsTargetingType_Names {

constexpr const char* Extern_Type_Name{"StrikeTaskMetricsTargetingType"};
constexpr const char* Quality_Name{"Quality"};
constexpr const char* UncertaintyEllipse_Name{"UncertaintyEllipse"};

} // namespace StrikeTaskMetricsTargetingType_Names

void StrikeTaskMetricsTargetingType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StrikeTaskMetricsTargetingType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StrikeTaskMetricsTargetingType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StrikeTaskMetricsTargetingType_Names::Quality_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setQuality(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeTaskMetricsTargetingType_Names::UncertaintyEllipse_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseUncertaintyEllipse(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string StrikeTaskMetricsTargetingType::serialize(const uci::type::StrikeTaskMetricsTargetingType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StrikeTaskMetricsTargetingType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StrikeTaskMetricsTargetingType_Names::Extern_Type_Name);
  }
  if (accessor.isQuality()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getQuality(), node, StrikeTaskMetricsTargetingType_Names::Quality_Name);
  } else if (accessor.isUncertaintyEllipse()) {
    EllipseType::serialize(accessor.getUncertaintyEllipse(), node, StrikeTaskMetricsTargetingType_Names::UncertaintyEllipse_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StrikeTaskMetricsTargetingType& StrikeTaskMetricsTargetingType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StrikeTaskMetricsTargetingType>().release());
}

uci::type::StrikeTaskMetricsTargetingType& StrikeTaskMetricsTargetingType::create(const uci::type::StrikeTaskMetricsTargetingType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StrikeTaskMetricsTargetingType> newAccessor{boost::make_unique<asb_uci::type::StrikeTaskMetricsTargetingType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StrikeTaskMetricsTargetingType::destroy(uci::type::StrikeTaskMetricsTargetingType& accessor) {
  delete dynamic_cast<asb_uci::type::StrikeTaskMetricsTargetingType*>(&accessor);
}

} // namespace type

} // namespace uci

