/** @file OrbitalDebrisEstimateRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalDebrisEstimateRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitBreakupEventDetailsType.h"
#include "asb_uci/type/OrbitalBreakupEnum.h"
#include "asb_uci/type/OrbitalDebrisEstimateEnum.h"
#include "asb_uci/type/RequestBaseType.h"
#include "asb_uci/type/TimeWindowType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/OrbitBreakupEventDetailsType.h"
#include "uci/type/OrbitalBreakupEnum.h"
#include "uci/type/OrbitalDebrisEstimateEnum.h"
#include "uci/type/OrbitalDebrisEstimateRequestMDT.h"
#include "uci/type/TimeWindowType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalDebrisEstimateRequestMDT::OrbitalDebrisEstimateRequestMDT()
  : estimateType_Accessor{boost::make_unique<OrbitalBreakupEnum>()},
    estimateResults_Accessor{boost::make_unique<OrbitalDebrisEstimateEnum>()},
    causalEvent_Accessor{boost::make_unique<OrbitBreakupEventDetailsType>()} {
}

OrbitalDebrisEstimateRequestMDT::~OrbitalDebrisEstimateRequestMDT() = default;

void OrbitalDebrisEstimateRequestMDT::copy(const uci::type::OrbitalDebrisEstimateRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void OrbitalDebrisEstimateRequestMDT::copyImpl(const uci::type::OrbitalDebrisEstimateRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const OrbitalDebrisEstimateRequestMDT&>(accessor);
    setEstimateType(*(accessorImpl.estimateType_Accessor));
    setEstimateResults(*(accessorImpl.estimateResults_Accessor));
    setCausalEvent(*(accessorImpl.causalEvent_Accessor));
    if (accessorImpl.hasRespondBy()) {
      setRespondBy(accessorImpl.getRespondBy());
    } else {
      clearRespondBy();
    }
    if (accessorImpl.analysisWindow_Accessor) {
      setAnalysisWindow(*(accessorImpl.analysisWindow_Accessor));
    } else {
      analysisWindow_Accessor.reset();
    }
  }
}

void OrbitalDebrisEstimateRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  estimateType_Accessor->reset();
  estimateResults_Accessor->reset();
  causalEvent_Accessor->reset();
  clearRespondBy();
  analysisWindow_Accessor.reset();
}

const uci::type::OrbitalBreakupEnum& OrbitalDebrisEstimateRequestMDT::getEstimateType() const {
  return *estimateType_Accessor;
}

uci::type::OrbitalBreakupEnum& OrbitalDebrisEstimateRequestMDT::getEstimateType() {
  return *estimateType_Accessor;
}

uci::type::OrbitalDebrisEstimateRequestMDT& OrbitalDebrisEstimateRequestMDT::setEstimateType(const uci::type::OrbitalBreakupEnum& accessor) {
  if (&accessor != estimateType_Accessor.get()) {
    estimateType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitalDebrisEstimateRequestMDT& OrbitalDebrisEstimateRequestMDT::setEstimateType(uci::type::OrbitalBreakupEnum::EnumerationItem value) {
  estimateType_Accessor->setValue(value);
  return *this;
}


const uci::type::OrbitalDebrisEstimateEnum& OrbitalDebrisEstimateRequestMDT::getEstimateResults() const {
  return *estimateResults_Accessor;
}

uci::type::OrbitalDebrisEstimateEnum& OrbitalDebrisEstimateRequestMDT::getEstimateResults() {
  return *estimateResults_Accessor;
}

uci::type::OrbitalDebrisEstimateRequestMDT& OrbitalDebrisEstimateRequestMDT::setEstimateResults(const uci::type::OrbitalDebrisEstimateEnum& accessor) {
  if (&accessor != estimateResults_Accessor.get()) {
    estimateResults_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitalDebrisEstimateRequestMDT& OrbitalDebrisEstimateRequestMDT::setEstimateResults(uci::type::OrbitalDebrisEstimateEnum::EnumerationItem value) {
  estimateResults_Accessor->setValue(value);
  return *this;
}


const uci::type::OrbitBreakupEventDetailsType& OrbitalDebrisEstimateRequestMDT::getCausalEvent() const {
  return *causalEvent_Accessor;
}

uci::type::OrbitBreakupEventDetailsType& OrbitalDebrisEstimateRequestMDT::getCausalEvent() {
  return *causalEvent_Accessor;
}

uci::type::OrbitalDebrisEstimateRequestMDT& OrbitalDebrisEstimateRequestMDT::setCausalEvent(const uci::type::OrbitBreakupEventDetailsType& accessor) {
  if (&accessor != causalEvent_Accessor.get()) {
    causalEvent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue OrbitalDebrisEstimateRequestMDT::getRespondBy() const {
  if (respondBy_Accessor) {
    return *respondBy_Accessor;
  }
  throw uci::base::UCIException("Error in getRespondBy(): An attempt was made to get an optional field that was not enabled, call hasRespondBy() to determine if it is safe to call getRespondBy()");
}

uci::type::OrbitalDebrisEstimateRequestMDT& OrbitalDebrisEstimateRequestMDT::setRespondBy(uci::type::DateTimeTypeValue value) {
  respondBy_Accessor = value;
  return *this;
}

bool OrbitalDebrisEstimateRequestMDT::hasRespondBy() const noexcept {
  return respondBy_Accessor.has_value();
}

uci::type::OrbitalDebrisEstimateRequestMDT& OrbitalDebrisEstimateRequestMDT::clearRespondBy() noexcept {
  respondBy_Accessor.reset();
  return *this;
}

uci::type::TimeWindowType& OrbitalDebrisEstimateRequestMDT::getAnalysisWindow_() const {
  if (analysisWindow_Accessor) {
    return *analysisWindow_Accessor;
  }
  throw uci::base::UCIException("Error in getAnalysisWindow(): An attempt was made to get an optional field that was not enabled, call hasAnalysisWindow() to determine if it is safe to call getAnalysisWindow()");
}

const uci::type::TimeWindowType& OrbitalDebrisEstimateRequestMDT::getAnalysisWindow() const {
  return getAnalysisWindow_();
}

uci::type::TimeWindowType& OrbitalDebrisEstimateRequestMDT::getAnalysisWindow() {
  return getAnalysisWindow_();
}

uci::type::OrbitalDebrisEstimateRequestMDT& OrbitalDebrisEstimateRequestMDT::setAnalysisWindow(const uci::type::TimeWindowType& accessor) {
  enableAnalysisWindow();
  if (&accessor != analysisWindow_Accessor.get()) {
    analysisWindow_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalDebrisEstimateRequestMDT::hasAnalysisWindow() const noexcept {
  return static_cast<bool>(analysisWindow_Accessor);
}

uci::type::TimeWindowType& OrbitalDebrisEstimateRequestMDT::enableAnalysisWindow(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::timeWindowType : type};
  if ((!analysisWindow_Accessor) || (analysisWindow_Accessor->getAccessorType() != requestedType)) {
    analysisWindow_Accessor = TimeWindowType::create(requestedType);
    if (!analysisWindow_Accessor) {
      throw uci::base::UCIException("Error in enableAnalysisWindow(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *analysisWindow_Accessor;
}

uci::type::OrbitalDebrisEstimateRequestMDT& OrbitalDebrisEstimateRequestMDT::clearAnalysisWindow() noexcept {
  analysisWindow_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalDebrisEstimateRequestMDT> OrbitalDebrisEstimateRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalDebrisEstimateRequestMDT : type};
  return (requestedType == uci::type::accessorType::orbitalDebrisEstimateRequestMDT) ? boost::make_unique<OrbitalDebrisEstimateRequestMDT>() : nullptr;
}

/**  */
namespace OrbitalDebrisEstimateRequestMDT_Names {

constexpr const char* Extern_Type_Name{"OrbitalDebrisEstimateRequestMDT"};
constexpr const char* EstimateType_Name{"EstimateType"};
constexpr const char* EstimateResults_Name{"EstimateResults"};
constexpr const char* CausalEvent_Name{"CausalEvent"};
constexpr const char* RespondBy_Name{"RespondBy"};
constexpr const char* AnalysisWindow_Name{"AnalysisWindow"};

} // namespace OrbitalDebrisEstimateRequestMDT_Names

void OrbitalDebrisEstimateRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalDebrisEstimateRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalDebrisEstimateRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalDebrisEstimateRequestMDT_Names::EstimateType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEstimateType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OrbitalDebrisEstimateRequestMDT_Names::EstimateResults_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEstimateResults().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OrbitalDebrisEstimateRequestMDT_Names::CausalEvent_Name) {
      OrbitBreakupEventDetailsType::deserialize(valueType.second, accessor.getCausalEvent(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalDebrisEstimateRequestMDT_Names::RespondBy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRespondBy(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalDebrisEstimateRequestMDT_Names::AnalysisWindow_Name) {
      TimeWindowType::deserialize(valueType.second, accessor.enableAnalysisWindow(), nodeName, nsPrefix);
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string OrbitalDebrisEstimateRequestMDT::serialize(const uci::type::OrbitalDebrisEstimateRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalDebrisEstimateRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalDebrisEstimateRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  OrbitalBreakupEnum::serialize(accessor.getEstimateType(), node, OrbitalDebrisEstimateRequestMDT_Names::EstimateType_Name, false);
  OrbitalDebrisEstimateEnum::serialize(accessor.getEstimateResults(), node, OrbitalDebrisEstimateRequestMDT_Names::EstimateResults_Name, false);
  OrbitBreakupEventDetailsType::serialize(accessor.getCausalEvent(), node, OrbitalDebrisEstimateRequestMDT_Names::CausalEvent_Name);
  if (accessor.hasRespondBy()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getRespondBy(), node, OrbitalDebrisEstimateRequestMDT_Names::RespondBy_Name);
  }
  if (accessor.hasAnalysisWindow()) {
    TimeWindowType::serialize(accessor.getAnalysisWindow(), node, OrbitalDebrisEstimateRequestMDT_Names::AnalysisWindow_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalDebrisEstimateRequestMDT& OrbitalDebrisEstimateRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalDebrisEstimateRequestMDT>().release());
}

uci::type::OrbitalDebrisEstimateRequestMDT& OrbitalDebrisEstimateRequestMDT::create(const uci::type::OrbitalDebrisEstimateRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalDebrisEstimateRequestMDT> newAccessor{boost::make_unique<asb_uci::type::OrbitalDebrisEstimateRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalDebrisEstimateRequestMDT::destroy(uci::type::OrbitalDebrisEstimateRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalDebrisEstimateRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

