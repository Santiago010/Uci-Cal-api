/** @file OpPointCategoriesType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OpPointCategoriesType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OpPointEmergencyEnum.h"
#include "../../../include/asb_uci/type/OpPointGeneralEnum.h"
#include "../../../include/asb_uci/type/OpPointHazardEnum.h"
#include "../../../include/asb_uci/type/OpPointReferenceEnum.h"
#include "../../../include/asb_uci/type/OpPointStationEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointCategoriesType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointEmergencyEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointGeneralEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointHazardEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointReferenceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointStationEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpPointCategoriesType::OpPointCategoriesType() = default;

OpPointCategoriesType::~OpPointCategoriesType() = default;

void OpPointCategoriesType::copy(const uci::type::OpPointCategoriesType& accessor) {
  copyImpl(accessor, false);
}

void OpPointCategoriesType::copyImpl(const uci::type::OpPointCategoriesType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OpPointCategoriesType&>(accessor);
    if (accessorImpl.general_Accessor) {
      setGeneral(*(accessorImpl.general_Accessor));
    } else {
      general_Accessor.reset();
    }
    if (accessorImpl.hazard_Accessor) {
      setHazard(*(accessorImpl.hazard_Accessor));
    } else {
      hazard_Accessor.reset();
    }
    if (accessorImpl.reference_Accessor) {
      setReference(*(accessorImpl.reference_Accessor));
    } else {
      reference_Accessor.reset();
    }
    if (accessorImpl.station_Accessor) {
      setStation(*(accessorImpl.station_Accessor));
    } else {
      station_Accessor.reset();
    }
    if (accessorImpl.emergency_Accessor) {
      setEmergency(*(accessorImpl.emergency_Accessor));
    } else {
      emergency_Accessor.reset();
    }
  }
}

void OpPointCategoriesType::reset() noexcept {
  general_Accessor.reset();
  hazard_Accessor.reset();
  reference_Accessor.reset();
  station_Accessor.reset();
  emergency_Accessor.reset();
}

uci::type::OpPointCategoriesType::OpPointCategoriesTypeChoice OpPointCategoriesType::getOpPointCategoriesTypeChoiceOrdinal() const noexcept {
  if (general_Accessor) {
    return OPPOINTCATEGORIESTYPE_CHOICE_GENERAL;
  }
  if (hazard_Accessor) {
    return OPPOINTCATEGORIESTYPE_CHOICE_HAZARD;
  }
  if (reference_Accessor) {
    return OPPOINTCATEGORIESTYPE_CHOICE_REFERENCE;
  }
  if (station_Accessor) {
    return OPPOINTCATEGORIESTYPE_CHOICE_STATION;
  }
  if (emergency_Accessor) {
    return OPPOINTCATEGORIESTYPE_CHOICE_EMERGENCY;
  }
  return OPPOINTCATEGORIESTYPE_CHOICE_NONE;
}

uci::type::OpPointCategoriesType& OpPointCategoriesType::setOpPointCategoriesTypeChoiceOrdinal(uci::type::OpPointCategoriesType::OpPointCategoriesTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case OPPOINTCATEGORIESTYPE_CHOICE_GENERAL:
      chooseGeneral("setOpPointCategoriesTypeChoiceOrdinal", type);
      break;
    case OPPOINTCATEGORIESTYPE_CHOICE_HAZARD:
      chooseHazard("setOpPointCategoriesTypeChoiceOrdinal", type);
      break;
    case OPPOINTCATEGORIESTYPE_CHOICE_REFERENCE:
      chooseReference("setOpPointCategoriesTypeChoiceOrdinal", type);
      break;
    case OPPOINTCATEGORIESTYPE_CHOICE_STATION:
      chooseStation("setOpPointCategoriesTypeChoiceOrdinal", type);
      break;
    case OPPOINTCATEGORIESTYPE_CHOICE_EMERGENCY:
      chooseEmergency("setOpPointCategoriesTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOpPointCategoriesTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OpPointGeneralEnum& OpPointCategoriesType::getGeneral_() const {
  if (general_Accessor) {
    return *general_Accessor;
  }
  throw uci::base::UCIException("Error in getGeneral(): Unable to get General, field not selected");
}

const uci::type::OpPointGeneralEnum& OpPointCategoriesType::getGeneral() const {
  return getGeneral_();
}

uci::type::OpPointGeneralEnum& OpPointCategoriesType::getGeneral() {
  return getGeneral_();
}

uci::type::OpPointCategoriesType& OpPointCategoriesType::setGeneral(const uci::type::OpPointGeneralEnum& accessor) {
  chooseGeneral();
  if (&accessor != general_Accessor.get()) {
    general_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpPointCategoriesType& OpPointCategoriesType::setGeneral(uci::type::OpPointGeneralEnum::EnumerationItem value) {
  chooseGeneral().setValue(value);
  return *this;
}

bool OpPointCategoriesType::isGeneral() const noexcept {
  return static_cast<bool>(general_Accessor);
}

uci::type::OpPointGeneralEnum& OpPointCategoriesType::chooseGeneral(const std::string& method, uci::base::accessorType::AccessorType type) {
  hazard_Accessor.reset();
  reference_Accessor.reset();
  station_Accessor.reset();
  emergency_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointGeneralEnum : type};
  if ((!general_Accessor) || (general_Accessor->getAccessorType() != requestedType)) {
    general_Accessor = OpPointGeneralEnum::create(type);
    if (!general_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *general_Accessor;
}

uci::type::OpPointGeneralEnum& OpPointCategoriesType::chooseGeneral(uci::base::accessorType::AccessorType type) {
  return chooseGeneral("chooseGeneral", type);
}

uci::type::OpPointHazardEnum& OpPointCategoriesType::getHazard_() const {
  if (hazard_Accessor) {
    return *hazard_Accessor;
  }
  throw uci::base::UCIException("Error in getHazard(): Unable to get Hazard, field not selected");
}

const uci::type::OpPointHazardEnum& OpPointCategoriesType::getHazard() const {
  return getHazard_();
}

uci::type::OpPointHazardEnum& OpPointCategoriesType::getHazard() {
  return getHazard_();
}

uci::type::OpPointCategoriesType& OpPointCategoriesType::setHazard(const uci::type::OpPointHazardEnum& accessor) {
  chooseHazard();
  if (&accessor != hazard_Accessor.get()) {
    hazard_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpPointCategoriesType& OpPointCategoriesType::setHazard(uci::type::OpPointHazardEnum::EnumerationItem value) {
  chooseHazard().setValue(value);
  return *this;
}

bool OpPointCategoriesType::isHazard() const noexcept {
  return static_cast<bool>(hazard_Accessor);
}

uci::type::OpPointHazardEnum& OpPointCategoriesType::chooseHazard(const std::string& method, uci::base::accessorType::AccessorType type) {
  general_Accessor.reset();
  reference_Accessor.reset();
  station_Accessor.reset();
  emergency_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointHazardEnum : type};
  if ((!hazard_Accessor) || (hazard_Accessor->getAccessorType() != requestedType)) {
    hazard_Accessor = OpPointHazardEnum::create(type);
    if (!hazard_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *hazard_Accessor;
}

uci::type::OpPointHazardEnum& OpPointCategoriesType::chooseHazard(uci::base::accessorType::AccessorType type) {
  return chooseHazard("chooseHazard", type);
}

uci::type::OpPointReferenceEnum& OpPointCategoriesType::getReference_() const {
  if (reference_Accessor) {
    return *reference_Accessor;
  }
  throw uci::base::UCIException("Error in getReference(): Unable to get Reference, field not selected");
}

const uci::type::OpPointReferenceEnum& OpPointCategoriesType::getReference() const {
  return getReference_();
}

uci::type::OpPointReferenceEnum& OpPointCategoriesType::getReference() {
  return getReference_();
}

uci::type::OpPointCategoriesType& OpPointCategoriesType::setReference(const uci::type::OpPointReferenceEnum& accessor) {
  chooseReference();
  if (&accessor != reference_Accessor.get()) {
    reference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpPointCategoriesType& OpPointCategoriesType::setReference(uci::type::OpPointReferenceEnum::EnumerationItem value) {
  chooseReference().setValue(value);
  return *this;
}

bool OpPointCategoriesType::isReference() const noexcept {
  return static_cast<bool>(reference_Accessor);
}

uci::type::OpPointReferenceEnum& OpPointCategoriesType::chooseReference(const std::string& method, uci::base::accessorType::AccessorType type) {
  general_Accessor.reset();
  hazard_Accessor.reset();
  station_Accessor.reset();
  emergency_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointReferenceEnum : type};
  if ((!reference_Accessor) || (reference_Accessor->getAccessorType() != requestedType)) {
    reference_Accessor = OpPointReferenceEnum::create(type);
    if (!reference_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *reference_Accessor;
}

uci::type::OpPointReferenceEnum& OpPointCategoriesType::chooseReference(uci::base::accessorType::AccessorType type) {
  return chooseReference("chooseReference", type);
}

uci::type::OpPointStationEnum& OpPointCategoriesType::getStation_() const {
  if (station_Accessor) {
    return *station_Accessor;
  }
  throw uci::base::UCIException("Error in getStation(): Unable to get Station, field not selected");
}

const uci::type::OpPointStationEnum& OpPointCategoriesType::getStation() const {
  return getStation_();
}

uci::type::OpPointStationEnum& OpPointCategoriesType::getStation() {
  return getStation_();
}

uci::type::OpPointCategoriesType& OpPointCategoriesType::setStation(const uci::type::OpPointStationEnum& accessor) {
  chooseStation();
  if (&accessor != station_Accessor.get()) {
    station_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpPointCategoriesType& OpPointCategoriesType::setStation(uci::type::OpPointStationEnum::EnumerationItem value) {
  chooseStation().setValue(value);
  return *this;
}

bool OpPointCategoriesType::isStation() const noexcept {
  return static_cast<bool>(station_Accessor);
}

uci::type::OpPointStationEnum& OpPointCategoriesType::chooseStation(const std::string& method, uci::base::accessorType::AccessorType type) {
  general_Accessor.reset();
  hazard_Accessor.reset();
  reference_Accessor.reset();
  emergency_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointStationEnum : type};
  if ((!station_Accessor) || (station_Accessor->getAccessorType() != requestedType)) {
    station_Accessor = OpPointStationEnum::create(type);
    if (!station_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *station_Accessor;
}

uci::type::OpPointStationEnum& OpPointCategoriesType::chooseStation(uci::base::accessorType::AccessorType type) {
  return chooseStation("chooseStation", type);
}

uci::type::OpPointEmergencyEnum& OpPointCategoriesType::getEmergency_() const {
  if (emergency_Accessor) {
    return *emergency_Accessor;
  }
  throw uci::base::UCIException("Error in getEmergency(): Unable to get Emergency, field not selected");
}

const uci::type::OpPointEmergencyEnum& OpPointCategoriesType::getEmergency() const {
  return getEmergency_();
}

uci::type::OpPointEmergencyEnum& OpPointCategoriesType::getEmergency() {
  return getEmergency_();
}

uci::type::OpPointCategoriesType& OpPointCategoriesType::setEmergency(const uci::type::OpPointEmergencyEnum& accessor) {
  chooseEmergency();
  if (&accessor != emergency_Accessor.get()) {
    emergency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpPointCategoriesType& OpPointCategoriesType::setEmergency(uci::type::OpPointEmergencyEnum::EnumerationItem value) {
  chooseEmergency().setValue(value);
  return *this;
}

bool OpPointCategoriesType::isEmergency() const noexcept {
  return static_cast<bool>(emergency_Accessor);
}

uci::type::OpPointEmergencyEnum& OpPointCategoriesType::chooseEmergency(const std::string& method, uci::base::accessorType::AccessorType type) {
  general_Accessor.reset();
  hazard_Accessor.reset();
  reference_Accessor.reset();
  station_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointEmergencyEnum : type};
  if ((!emergency_Accessor) || (emergency_Accessor->getAccessorType() != requestedType)) {
    emergency_Accessor = OpPointEmergencyEnum::create(type);
    if (!emergency_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emergency_Accessor;
}

uci::type::OpPointEmergencyEnum& OpPointCategoriesType::chooseEmergency(uci::base::accessorType::AccessorType type) {
  return chooseEmergency("chooseEmergency", type);
}

std::unique_ptr<OpPointCategoriesType> OpPointCategoriesType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointCategoriesType : type};
  return (requestedType == uci::type::accessorType::opPointCategoriesType) ? boost::make_unique<OpPointCategoriesType>() : nullptr;
}

/**  */
namespace OpPointCategoriesType_Names {

constexpr const char* Extern_Type_Name{"OpPointCategoriesType"};
constexpr const char* General_Name{"General"};
constexpr const char* Hazard_Name{"Hazard"};
constexpr const char* Reference_Name{"Reference"};
constexpr const char* Station_Name{"Station"};
constexpr const char* Emergency_Name{"Emergency"};

} // namespace OpPointCategoriesType_Names

void OpPointCategoriesType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpPointCategoriesType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpPointCategoriesType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpPointCategoriesType_Names::General_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseGeneral().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OpPointCategoriesType_Names::Hazard_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseHazard().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OpPointCategoriesType_Names::Reference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseReference().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OpPointCategoriesType_Names::Station_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseStation().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OpPointCategoriesType_Names::Emergency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseEmergency().setValueFromName(*value);
      }
    }
  }
}

std::string OpPointCategoriesType::serialize(const uci::type::OpPointCategoriesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpPointCategoriesType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpPointCategoriesType_Names::Extern_Type_Name);
  }
  if (accessor.isGeneral()) {
    OpPointGeneralEnum::serialize(accessor.getGeneral(), node, OpPointCategoriesType_Names::General_Name, false);
  } else if (accessor.isHazard()) {
    OpPointHazardEnum::serialize(accessor.getHazard(), node, OpPointCategoriesType_Names::Hazard_Name, false);
  } else if (accessor.isReference()) {
    OpPointReferenceEnum::serialize(accessor.getReference(), node, OpPointCategoriesType_Names::Reference_Name, false);
  } else if (accessor.isStation()) {
    OpPointStationEnum::serialize(accessor.getStation(), node, OpPointCategoriesType_Names::Station_Name, false);
  } else if (accessor.isEmergency()) {
    OpPointEmergencyEnum::serialize(accessor.getEmergency(), node, OpPointCategoriesType_Names::Emergency_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OpPointCategoriesType& OpPointCategoriesType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OpPointCategoriesType>().release());
}

uci::type::OpPointCategoriesType& OpPointCategoriesType::create(const uci::type::OpPointCategoriesType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OpPointCategoriesType> newAccessor{boost::make_unique<asb_uci::type::OpPointCategoriesType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OpPointCategoriesType::destroy(uci::type::OpPointCategoriesType& accessor) {
  delete dynamic_cast<asb_uci::type::OpPointCategoriesType*>(&accessor);
}

} // namespace type

} // namespace uci

