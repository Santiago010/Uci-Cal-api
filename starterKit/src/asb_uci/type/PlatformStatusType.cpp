/** @file PlatformStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlatformStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DatalinkControlType.h"
#include "asb_uci/type/PlatformFunctionStatusType.h"
#include "asb_uci/type/PlatformStatusSAM_Type.h"
#include "asb_uci/type/SurfaceRecoveryType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DatalinkControlType.h"
#include "uci/type/PlatformFunctionStatusType.h"
#include "uci/type/PlatformStatusSAM_Type.h"
#include "uci/type/PlatformStatusType.h"
#include "uci/type/SurfaceRecoveryType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlatformStatusType::PlatformStatusType()
  : functionStatus_Accessor{boost::make_unique<FunctionStatus>(0, SIZE_MAX)},
    datalinkControlStatus_Accessor{boost::make_unique<DatalinkControlStatus>(0, SIZE_MAX)} {
}

PlatformStatusType::~PlatformStatusType() = default;

void PlatformStatusType::copy(const uci::type::PlatformStatusType& accessor) {
  copyImpl(accessor, false);
}

void PlatformStatusType::copyImpl(const uci::type::PlatformStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlatformStatusType&>(accessor);
    if (accessorImpl.hasBailoutIndicator()) {
      setBailoutIndicator(accessorImpl.getBailoutIndicator());
    } else {
      clearBailoutIndicator();
    }
    if (accessorImpl.hasCommandAndControlIndicator()) {
      setCommandAndControlIndicator(accessorImpl.getCommandAndControlIndicator());
    } else {
      clearCommandAndControlIndicator();
    }
    if (accessorImpl.hasEmergencyIndicator()) {
      setEmergencyIndicator(accessorImpl.getEmergencyIndicator());
    } else {
      clearEmergencyIndicator();
    }
    setFunctionStatus(*(accessorImpl.functionStatus_Accessor));
    if (accessorImpl.sAM_Status_Accessor) {
      setSAM_Status(*(accessorImpl.sAM_Status_Accessor));
    } else {
      sAM_Status_Accessor.reset();
    }
    if (accessorImpl.surfaceRecovery_Accessor) {
      setSurfaceRecovery(*(accessorImpl.surfaceRecovery_Accessor));
    } else {
      surfaceRecovery_Accessor.reset();
    }
    if (accessorImpl.surfaceStatus_Accessor) {
      setSurfaceStatus(*(accessorImpl.surfaceStatus_Accessor));
    } else {
      surfaceStatus_Accessor.reset();
    }
    setDatalinkControlStatus(*(accessorImpl.datalinkControlStatus_Accessor));
  }
}

void PlatformStatusType::reset() noexcept {
  clearBailoutIndicator();
  clearCommandAndControlIndicator();
  clearEmergencyIndicator();
  functionStatus_Accessor->reset();
  sAM_Status_Accessor.reset();
  surfaceRecovery_Accessor.reset();
  surfaceStatus_Accessor.reset();
  datalinkControlStatus_Accessor->reset();
}

xs::Boolean PlatformStatusType::getBailoutIndicator() const {
  if (bailoutIndicator_Accessor) {
    return *bailoutIndicator_Accessor;
  }
  throw uci::base::UCIException("Error in getBailoutIndicator(): An attempt was made to get an optional field that was not enabled, call hasBailoutIndicator() to determine if it is safe to call getBailoutIndicator()");
}

uci::type::PlatformStatusType& PlatformStatusType::setBailoutIndicator(xs::Boolean value) {
  bailoutIndicator_Accessor = value;
  return *this;
}

bool PlatformStatusType::hasBailoutIndicator() const noexcept {
  return bailoutIndicator_Accessor.has_value();
}

uci::type::PlatformStatusType& PlatformStatusType::clearBailoutIndicator() noexcept {
  bailoutIndicator_Accessor.reset();
  return *this;
}

xs::Boolean PlatformStatusType::getCommandAndControlIndicator() const {
  if (commandAndControlIndicator_Accessor) {
    return *commandAndControlIndicator_Accessor;
  }
  throw uci::base::UCIException("Error in getCommandAndControlIndicator(): An attempt was made to get an optional field that was not enabled, call hasCommandAndControlIndicator() to determine if it is safe to call getCommandAndControlIndicator()");
}

uci::type::PlatformStatusType& PlatformStatusType::setCommandAndControlIndicator(xs::Boolean value) {
  commandAndControlIndicator_Accessor = value;
  return *this;
}

bool PlatformStatusType::hasCommandAndControlIndicator() const noexcept {
  return commandAndControlIndicator_Accessor.has_value();
}

uci::type::PlatformStatusType& PlatformStatusType::clearCommandAndControlIndicator() noexcept {
  commandAndControlIndicator_Accessor.reset();
  return *this;
}

xs::Boolean PlatformStatusType::getEmergencyIndicator() const {
  if (emergencyIndicator_Accessor) {
    return *emergencyIndicator_Accessor;
  }
  throw uci::base::UCIException("Error in getEmergencyIndicator(): An attempt was made to get an optional field that was not enabled, call hasEmergencyIndicator() to determine if it is safe to call getEmergencyIndicator()");
}

uci::type::PlatformStatusType& PlatformStatusType::setEmergencyIndicator(xs::Boolean value) {
  emergencyIndicator_Accessor = value;
  return *this;
}

bool PlatformStatusType::hasEmergencyIndicator() const noexcept {
  return emergencyIndicator_Accessor.has_value();
}

uci::type::PlatformStatusType& PlatformStatusType::clearEmergencyIndicator() noexcept {
  emergencyIndicator_Accessor.reset();
  return *this;
}

const uci::type::PlatformStatusType::FunctionStatus& PlatformStatusType::getFunctionStatus() const {
  return *functionStatus_Accessor;
}

uci::type::PlatformStatusType::FunctionStatus& PlatformStatusType::getFunctionStatus() {
  return *functionStatus_Accessor;
}

uci::type::PlatformStatusType& PlatformStatusType::setFunctionStatus(const uci::type::PlatformStatusType::FunctionStatus& accessor) {
  if (&accessor != functionStatus_Accessor.get()) {
    functionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformStatusSAM_Type& PlatformStatusType::getSAM_Status_() const {
  if (sAM_Status_Accessor) {
    return *sAM_Status_Accessor;
  }
  throw uci::base::UCIException("Error in getSAM_Status(): An attempt was made to get an optional field that was not enabled, call hasSAM_Status() to determine if it is safe to call getSAM_Status()");
}

const uci::type::PlatformStatusSAM_Type& PlatformStatusType::getSAM_Status() const {
  return getSAM_Status_();
}

uci::type::PlatformStatusSAM_Type& PlatformStatusType::getSAM_Status() {
  return getSAM_Status_();
}

uci::type::PlatformStatusType& PlatformStatusType::setSAM_Status(const uci::type::PlatformStatusSAM_Type& accessor) {
  enableSAM_Status();
  if (&accessor != sAM_Status_Accessor.get()) {
    sAM_Status_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlatformStatusType::hasSAM_Status() const noexcept {
  return static_cast<bool>(sAM_Status_Accessor);
}

uci::type::PlatformStatusSAM_Type& PlatformStatusType::enableSAM_Status(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::platformStatusSAM_Type : type};
  if ((!sAM_Status_Accessor) || (sAM_Status_Accessor->getAccessorType() != requestedType)) {
    sAM_Status_Accessor = PlatformStatusSAM_Type::create(requestedType);
    if (!sAM_Status_Accessor) {
      throw uci::base::UCIException("Error in enableSAM_Status(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sAM_Status_Accessor;
}

uci::type::PlatformStatusType& PlatformStatusType::clearSAM_Status() noexcept {
  sAM_Status_Accessor.reset();
  return *this;
}

uci::type::SurfaceRecoveryType& PlatformStatusType::getSurfaceRecovery_() const {
  if (surfaceRecovery_Accessor) {
    return *surfaceRecovery_Accessor;
  }
  throw uci::base::UCIException("Error in getSurfaceRecovery(): An attempt was made to get an optional field that was not enabled, call hasSurfaceRecovery() to determine if it is safe to call getSurfaceRecovery()");
}

const uci::type::SurfaceRecoveryType& PlatformStatusType::getSurfaceRecovery() const {
  return getSurfaceRecovery_();
}

uci::type::SurfaceRecoveryType& PlatformStatusType::getSurfaceRecovery() {
  return getSurfaceRecovery_();
}

uci::type::PlatformStatusType& PlatformStatusType::setSurfaceRecovery(const uci::type::SurfaceRecoveryType& accessor) {
  enableSurfaceRecovery();
  if (&accessor != surfaceRecovery_Accessor.get()) {
    surfaceRecovery_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlatformStatusType::hasSurfaceRecovery() const noexcept {
  return static_cast<bool>(surfaceRecovery_Accessor);
}

uci::type::SurfaceRecoveryType& PlatformStatusType::enableSurfaceRecovery(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::surfaceRecoveryType : type};
  if ((!surfaceRecovery_Accessor) || (surfaceRecovery_Accessor->getAccessorType() != requestedType)) {
    surfaceRecovery_Accessor = SurfaceRecoveryType::create(requestedType);
    if (!surfaceRecovery_Accessor) {
      throw uci::base::UCIException("Error in enableSurfaceRecovery(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *surfaceRecovery_Accessor;
}

uci::type::PlatformStatusType& PlatformStatusType::clearSurfaceRecovery() noexcept {
  surfaceRecovery_Accessor.reset();
  return *this;
}

uci::type::SurfaceRecoveryType& PlatformStatusType::getSurfaceStatus_() const {
  if (surfaceStatus_Accessor) {
    return *surfaceStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getSurfaceStatus(): An attempt was made to get an optional field that was not enabled, call hasSurfaceStatus() to determine if it is safe to call getSurfaceStatus()");
}

const uci::type::SurfaceRecoveryType& PlatformStatusType::getSurfaceStatus() const {
  return getSurfaceStatus_();
}

uci::type::SurfaceRecoveryType& PlatformStatusType::getSurfaceStatus() {
  return getSurfaceStatus_();
}

uci::type::PlatformStatusType& PlatformStatusType::setSurfaceStatus(const uci::type::SurfaceRecoveryType& accessor) {
  enableSurfaceStatus();
  if (&accessor != surfaceStatus_Accessor.get()) {
    surfaceStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlatformStatusType::hasSurfaceStatus() const noexcept {
  return static_cast<bool>(surfaceStatus_Accessor);
}

uci::type::SurfaceRecoveryType& PlatformStatusType::enableSurfaceStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::surfaceRecoveryType : type};
  if ((!surfaceStatus_Accessor) || (surfaceStatus_Accessor->getAccessorType() != requestedType)) {
    surfaceStatus_Accessor = SurfaceRecoveryType::create(requestedType);
    if (!surfaceStatus_Accessor) {
      throw uci::base::UCIException("Error in enableSurfaceStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *surfaceStatus_Accessor;
}

uci::type::PlatformStatusType& PlatformStatusType::clearSurfaceStatus() noexcept {
  surfaceStatus_Accessor.reset();
  return *this;
}

const uci::type::PlatformStatusType::DatalinkControlStatus& PlatformStatusType::getDatalinkControlStatus() const {
  return *datalinkControlStatus_Accessor;
}

uci::type::PlatformStatusType::DatalinkControlStatus& PlatformStatusType::getDatalinkControlStatus() {
  return *datalinkControlStatus_Accessor;
}

uci::type::PlatformStatusType& PlatformStatusType::setDatalinkControlStatus(const uci::type::PlatformStatusType::DatalinkControlStatus& accessor) {
  if (&accessor != datalinkControlStatus_Accessor.get()) {
    datalinkControlStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PlatformStatusType> PlatformStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::platformStatusType : type};
  return (requestedType == uci::type::accessorType::platformStatusType) ? boost::make_unique<PlatformStatusType>() : nullptr;
}

/**  */
namespace PlatformStatusType_Names {

constexpr const char* Extern_Type_Name{"PlatformStatusType"};
constexpr const char* BailoutIndicator_Name{"BailoutIndicator"};
constexpr const char* CommandAndControlIndicator_Name{"CommandAndControlIndicator"};
constexpr const char* EmergencyIndicator_Name{"EmergencyIndicator"};
constexpr const char* FunctionStatus_Name{"FunctionStatus"};
constexpr const char* SAM_Status_Name{"SAM_Status"};
constexpr const char* SurfaceRecovery_Name{"SurfaceRecovery"};
constexpr const char* SurfaceStatus_Name{"SurfaceStatus"};
constexpr const char* DatalinkControlStatus_Name{"DatalinkControlStatus"};

} // namespace PlatformStatusType_Names

void PlatformStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlatformStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlatformStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::BailoutIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBailoutIndicator(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::CommandAndControlIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCommandAndControlIndicator(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::EmergencyIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEmergencyIndicator(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::FunctionStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlatformStatusType::FunctionStatus& boundedList = accessor.getFunctionStatus();
        const uci::type::PlatformStatusType::FunctionStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PlatformFunctionStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::SAM_Status_Name) {
      PlatformStatusSAM_Type::deserialize(valueType.second, accessor.enableSAM_Status(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::SurfaceRecovery_Name) {
      SurfaceRecoveryType::deserialize(valueType.second, accessor.enableSurfaceRecovery(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::SurfaceStatus_Name) {
      SurfaceRecoveryType::deserialize(valueType.second, accessor.enableSurfaceStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::DatalinkControlStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlatformStatusType::DatalinkControlStatus& boundedList = accessor.getDatalinkControlStatus();
        const uci::type::PlatformStatusType::DatalinkControlStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DatalinkControlType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PlatformStatusType::serialize(const uci::type::PlatformStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlatformStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlatformStatusType_Names::Extern_Type_Name);
  }
  if (accessor.hasBailoutIndicator()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getBailoutIndicator(), node, PlatformStatusType_Names::BailoutIndicator_Name);
  }
  if (accessor.hasCommandAndControlIndicator()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getCommandAndControlIndicator(), node, PlatformStatusType_Names::CommandAndControlIndicator_Name);
  }
  if (accessor.hasEmergencyIndicator()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getEmergencyIndicator(), node, PlatformStatusType_Names::EmergencyIndicator_Name);
  }
  {
    const uci::type::PlatformStatusType::FunctionStatus& boundedList = accessor.getFunctionStatus();
    for (uci::type::PlatformStatusType::FunctionStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PlatformFunctionStatusType::serialize(boundedList.at(i), node, PlatformStatusType_Names::FunctionStatus_Name);
    }
  }
  if (accessor.hasSAM_Status()) {
    PlatformStatusSAM_Type::serialize(accessor.getSAM_Status(), node, PlatformStatusType_Names::SAM_Status_Name);
  }
  if (accessor.hasSurfaceRecovery()) {
    SurfaceRecoveryType::serialize(accessor.getSurfaceRecovery(), node, PlatformStatusType_Names::SurfaceRecovery_Name);
  }
  if (accessor.hasSurfaceStatus()) {
    SurfaceRecoveryType::serialize(accessor.getSurfaceStatus(), node, PlatformStatusType_Names::SurfaceStatus_Name);
  }
  {
    const uci::type::PlatformStatusType::DatalinkControlStatus& boundedList = accessor.getDatalinkControlStatus();
    for (uci::type::PlatformStatusType::DatalinkControlStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DatalinkControlType::serialize(boundedList.at(i), node, PlatformStatusType_Names::DatalinkControlStatus_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlatformStatusType& PlatformStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlatformStatusType>().release());
}

uci::type::PlatformStatusType& PlatformStatusType::create(const uci::type::PlatformStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlatformStatusType> newAccessor{boost::make_unique<asb_uci::type::PlatformStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlatformStatusType::destroy(uci::type::PlatformStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::PlatformStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

