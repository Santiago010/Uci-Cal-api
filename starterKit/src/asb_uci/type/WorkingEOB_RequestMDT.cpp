/** @file WorkingEOB_RequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/WorkingEOB_RequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/QueryMessageType.h"
#include "../../../include/asb_uci/type/RequestBaseType.h"
#include "../../../include/asb_uci/type/WorkingEOB_SourceID_ChoiceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QueryMessageType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WorkingEOB_RequestMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WorkingEOB_SourceID_ChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WorkingEOB_RequestMDT::WorkingEOB_RequestMDT()
  : source_Accessor{boost::make_unique<WorkingEOB_SourceID_ChoiceType>()} {
}

WorkingEOB_RequestMDT::~WorkingEOB_RequestMDT() = default;

void WorkingEOB_RequestMDT::copy(const uci::type::WorkingEOB_RequestMDT& accessor) {
  copyImpl(accessor, false);
}

void WorkingEOB_RequestMDT::copyImpl(const uci::type::WorkingEOB_RequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const WorkingEOB_RequestMDT&>(accessor);
    setSource(*(accessorImpl.source_Accessor));
    if (accessorImpl.siteFilter_Accessor) {
      setSiteFilter(*(accessorImpl.siteFilter_Accessor));
    } else {
      siteFilter_Accessor.reset();
    }
    setTemporary(accessorImpl.temporary_Accessor);
  }
}

void WorkingEOB_RequestMDT::reset() noexcept {
  RequestBaseType::reset();
  source_Accessor->reset();
  siteFilter_Accessor.reset();
  temporary_Accessor = false;
}

const uci::type::WorkingEOB_SourceID_ChoiceType& WorkingEOB_RequestMDT::getSource() const {
  return *source_Accessor;
}

uci::type::WorkingEOB_SourceID_ChoiceType& WorkingEOB_RequestMDT::getSource() {
  return *source_Accessor;
}

uci::type::WorkingEOB_RequestMDT& WorkingEOB_RequestMDT::setSource(const uci::type::WorkingEOB_SourceID_ChoiceType& accessor) {
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::QueryMessageType& WorkingEOB_RequestMDT::getSiteFilter_() const {
  if (siteFilter_Accessor) {
    return *siteFilter_Accessor;
  }
  throw uci::base::UCIException("Error in getSiteFilter(): An attempt was made to get an optional field that was not enabled, call hasSiteFilter() to determine if it is safe to call getSiteFilter()");
}

const uci::type::QueryMessageType& WorkingEOB_RequestMDT::getSiteFilter() const {
  return getSiteFilter_();
}

uci::type::QueryMessageType& WorkingEOB_RequestMDT::getSiteFilter() {
  return getSiteFilter_();
}

uci::type::WorkingEOB_RequestMDT& WorkingEOB_RequestMDT::setSiteFilter(const uci::type::QueryMessageType& accessor) {
  enableSiteFilter();
  if (&accessor != siteFilter_Accessor.get()) {
    siteFilter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WorkingEOB_RequestMDT::hasSiteFilter() const noexcept {
  return static_cast<bool>(siteFilter_Accessor);
}

uci::type::QueryMessageType& WorkingEOB_RequestMDT::enableSiteFilter(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryMessageType : type};
  if ((!siteFilter_Accessor) || (siteFilter_Accessor->getAccessorType() != requestedType)) {
    siteFilter_Accessor = QueryMessageType::create(requestedType);
    if (!siteFilter_Accessor) {
      throw uci::base::UCIException("Error in enableSiteFilter(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *siteFilter_Accessor;
}

uci::type::WorkingEOB_RequestMDT& WorkingEOB_RequestMDT::clearSiteFilter() noexcept {
  siteFilter_Accessor.reset();
  return *this;
}

xs::Boolean WorkingEOB_RequestMDT::getTemporary() const {
  return temporary_Accessor;
}

uci::type::WorkingEOB_RequestMDT& WorkingEOB_RequestMDT::setTemporary(xs::Boolean value) {
  temporary_Accessor = value;
  return *this;
}


std::unique_ptr<WorkingEOB_RequestMDT> WorkingEOB_RequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::workingEOB_RequestMDT : type};
  return (requestedType == uci::type::accessorType::workingEOB_RequestMDT) ? boost::make_unique<WorkingEOB_RequestMDT>() : nullptr;
}

/**  */
namespace WorkingEOB_RequestMDT_Names {

constexpr const char* Extern_Type_Name{"WorkingEOB_RequestMDT"};
constexpr const char* Source_Name{"Source"};
constexpr const char* SiteFilter_Name{"SiteFilter"};
constexpr const char* Temporary_Name{"Temporary"};

} // namespace WorkingEOB_RequestMDT_Names

void WorkingEOB_RequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::WorkingEOB_RequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WorkingEOB_RequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WorkingEOB_RequestMDT_Names::Source_Name) {
      WorkingEOB_SourceID_ChoiceType::deserialize(valueType.second, accessor.getSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WorkingEOB_RequestMDT_Names::SiteFilter_Name) {
      QueryMessageType::deserialize(valueType.second, accessor.enableSiteFilter(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WorkingEOB_RequestMDT_Names::Temporary_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTemporary(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string WorkingEOB_RequestMDT::serialize(const uci::type::WorkingEOB_RequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WorkingEOB_RequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WorkingEOB_RequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  WorkingEOB_SourceID_ChoiceType::serialize(accessor.getSource(), node, WorkingEOB_RequestMDT_Names::Source_Name);
  if (accessor.hasSiteFilter()) {
    QueryMessageType::serialize(accessor.getSiteFilter(), node, WorkingEOB_RequestMDT_Names::SiteFilter_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getTemporary(), node, WorkingEOB_RequestMDT_Names::Temporary_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WorkingEOB_RequestMDT& WorkingEOB_RequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WorkingEOB_RequestMDT>().release());
}

uci::type::WorkingEOB_RequestMDT& WorkingEOB_RequestMDT::create(const uci::type::WorkingEOB_RequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WorkingEOB_RequestMDT> newAccessor{boost::make_unique<asb_uci::type::WorkingEOB_RequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WorkingEOB_RequestMDT::destroy(uci::type::WorkingEOB_RequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::WorkingEOB_RequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

