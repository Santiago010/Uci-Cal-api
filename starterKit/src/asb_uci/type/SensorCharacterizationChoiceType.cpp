/** @file SensorCharacterizationChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SensorCharacterizationChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CharacterizationChoiceType.h"
#include "../../../include/asb_uci/type/IdentificationVerificationCharacterizationType.h"
#include "../../../include/asb_uci/type/SatelliteOperationsChangesCharacterizationType.h"
#include "../../../include/asb_uci/type/StabilityCharacterizationType.h"
#include "../../../include/asb_uci/type/StructureAssessmentCharacterizationType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CharacterizationChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IdentificationVerificationCharacterizationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SatelliteOperationsChangesCharacterizationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorCharacterizationChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StabilityCharacterizationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StructureAssessmentCharacterizationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SensorCharacterizationChoiceType::SensorCharacterizationChoiceType() = default;

SensorCharacterizationChoiceType::~SensorCharacterizationChoiceType() = default;

void SensorCharacterizationChoiceType::copy(const uci::type::SensorCharacterizationChoiceType& accessor) {
  copyImpl(accessor, false);
}

void SensorCharacterizationChoiceType::copyImpl(const uci::type::SensorCharacterizationChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SensorCharacterizationChoiceType&>(accessor);
    if (accessorImpl.phemonemologySpecific_Accessor) {
      setPhemonemologySpecific(*(accessorImpl.phemonemologySpecific_Accessor));
    } else {
      phemonemologySpecific_Accessor.reset();
    }
    if (accessorImpl.stabilityAndOrientationAssessment_Accessor) {
      setStabilityAndOrientationAssessment(*(accessorImpl.stabilityAndOrientationAssessment_Accessor));
    } else {
      stabilityAndOrientationAssessment_Accessor.reset();
    }
    if (accessorImpl.structureAssessment_Accessor) {
      setStructureAssessment(*(accessorImpl.structureAssessment_Accessor));
    } else {
      structureAssessment_Accessor.reset();
    }
    if (accessorImpl.identificationVerification_Accessor) {
      setIdentificationVerification(*(accessorImpl.identificationVerification_Accessor));
    } else {
      identificationVerification_Accessor.reset();
    }
    if (accessorImpl.operationsChanges_Accessor) {
      setOperationsChanges(*(accessorImpl.operationsChanges_Accessor));
    } else {
      operationsChanges_Accessor.reset();
    }
  }
}

void SensorCharacterizationChoiceType::reset() noexcept {
  phemonemologySpecific_Accessor.reset();
  stabilityAndOrientationAssessment_Accessor.reset();
  structureAssessment_Accessor.reset();
  identificationVerification_Accessor.reset();
  operationsChanges_Accessor.reset();
}

uci::type::SensorCharacterizationChoiceType::SensorCharacterizationChoiceTypeChoice SensorCharacterizationChoiceType::getSensorCharacterizationChoiceTypeChoiceOrdinal() const noexcept {
  if (phemonemologySpecific_Accessor) {
    return SENSORCHARACTERIZATIONCHOICETYPE_CHOICE_PHEMONEMOLOGYSPECIFIC;
  }
  if (stabilityAndOrientationAssessment_Accessor) {
    return SENSORCHARACTERIZATIONCHOICETYPE_CHOICE_STABILITYANDORIENTATIONASSESSMENT;
  }
  if (structureAssessment_Accessor) {
    return SENSORCHARACTERIZATIONCHOICETYPE_CHOICE_STRUCTUREASSESSMENT;
  }
  if (identificationVerification_Accessor) {
    return SENSORCHARACTERIZATIONCHOICETYPE_CHOICE_IDENTIFICATIONVERIFICATION;
  }
  if (operationsChanges_Accessor) {
    return SENSORCHARACTERIZATIONCHOICETYPE_CHOICE_OPERATIONSCHANGES;
  }
  return SENSORCHARACTERIZATIONCHOICETYPE_CHOICE_NONE;
}

uci::type::SensorCharacterizationChoiceType& SensorCharacterizationChoiceType::setSensorCharacterizationChoiceTypeChoiceOrdinal(uci::type::SensorCharacterizationChoiceType::SensorCharacterizationChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case SENSORCHARACTERIZATIONCHOICETYPE_CHOICE_PHEMONEMOLOGYSPECIFIC:
      choosePhemonemologySpecific("setSensorCharacterizationChoiceTypeChoiceOrdinal", type);
      break;
    case SENSORCHARACTERIZATIONCHOICETYPE_CHOICE_STABILITYANDORIENTATIONASSESSMENT:
      chooseStabilityAndOrientationAssessment("setSensorCharacterizationChoiceTypeChoiceOrdinal", type);
      break;
    case SENSORCHARACTERIZATIONCHOICETYPE_CHOICE_STRUCTUREASSESSMENT:
      chooseStructureAssessment("setSensorCharacterizationChoiceTypeChoiceOrdinal", type);
      break;
    case SENSORCHARACTERIZATIONCHOICETYPE_CHOICE_IDENTIFICATIONVERIFICATION:
      chooseIdentificationVerification("setSensorCharacterizationChoiceTypeChoiceOrdinal", type);
      break;
    case SENSORCHARACTERIZATIONCHOICETYPE_CHOICE_OPERATIONSCHANGES:
      chooseOperationsChanges("setSensorCharacterizationChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setSensorCharacterizationChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::CharacterizationChoiceType& SensorCharacterizationChoiceType::getPhemonemologySpecific_() const {
  if (phemonemologySpecific_Accessor) {
    return *phemonemologySpecific_Accessor;
  }
  throw uci::base::UCIException("Error in getPhemonemologySpecific(): Unable to get PhemonemologySpecific, field not selected");
}

const uci::type::CharacterizationChoiceType& SensorCharacterizationChoiceType::getPhemonemologySpecific() const {
  return getPhemonemologySpecific_();
}

uci::type::CharacterizationChoiceType& SensorCharacterizationChoiceType::getPhemonemologySpecific() {
  return getPhemonemologySpecific_();
}

uci::type::SensorCharacterizationChoiceType& SensorCharacterizationChoiceType::setPhemonemologySpecific(const uci::type::CharacterizationChoiceType& accessor) {
  choosePhemonemologySpecific(accessor.getAccessorType());
  if (&accessor != phemonemologySpecific_Accessor.get()) {
    phemonemologySpecific_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorCharacterizationChoiceType::isPhemonemologySpecific() const noexcept {
  return static_cast<bool>(phemonemologySpecific_Accessor);
}

uci::type::CharacterizationChoiceType& SensorCharacterizationChoiceType::choosePhemonemologySpecific(const std::string& method, uci::base::accessorType::AccessorType type) {
  stabilityAndOrientationAssessment_Accessor.reset();
  structureAssessment_Accessor.reset();
  identificationVerification_Accessor.reset();
  operationsChanges_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::characterizationChoiceType : type};
  if ((!phemonemologySpecific_Accessor) || (phemonemologySpecific_Accessor->getAccessorType() != requestedType)) {
    phemonemologySpecific_Accessor = CharacterizationChoiceType::create(type);
    if (!phemonemologySpecific_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *phemonemologySpecific_Accessor;
}

uci::type::CharacterizationChoiceType& SensorCharacterizationChoiceType::choosePhemonemologySpecific(uci::base::accessorType::AccessorType type) {
  return choosePhemonemologySpecific("choosePhemonemologySpecific", type);
}

uci::type::StabilityCharacterizationType& SensorCharacterizationChoiceType::getStabilityAndOrientationAssessment_() const {
  if (stabilityAndOrientationAssessment_Accessor) {
    return *stabilityAndOrientationAssessment_Accessor;
  }
  throw uci::base::UCIException("Error in getStabilityAndOrientationAssessment(): Unable to get StabilityAndOrientationAssessment, field not selected");
}

const uci::type::StabilityCharacterizationType& SensorCharacterizationChoiceType::getStabilityAndOrientationAssessment() const {
  return getStabilityAndOrientationAssessment_();
}

uci::type::StabilityCharacterizationType& SensorCharacterizationChoiceType::getStabilityAndOrientationAssessment() {
  return getStabilityAndOrientationAssessment_();
}

uci::type::SensorCharacterizationChoiceType& SensorCharacterizationChoiceType::setStabilityAndOrientationAssessment(const uci::type::StabilityCharacterizationType& accessor) {
  chooseStabilityAndOrientationAssessment();
  if (&accessor != stabilityAndOrientationAssessment_Accessor.get()) {
    stabilityAndOrientationAssessment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorCharacterizationChoiceType::isStabilityAndOrientationAssessment() const noexcept {
  return static_cast<bool>(stabilityAndOrientationAssessment_Accessor);
}

uci::type::StabilityCharacterizationType& SensorCharacterizationChoiceType::chooseStabilityAndOrientationAssessment(const std::string& method, uci::base::accessorType::AccessorType type) {
  phemonemologySpecific_Accessor.reset();
  structureAssessment_Accessor.reset();
  identificationVerification_Accessor.reset();
  operationsChanges_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::stabilityCharacterizationType : type};
  if ((!stabilityAndOrientationAssessment_Accessor) || (stabilityAndOrientationAssessment_Accessor->getAccessorType() != requestedType)) {
    stabilityAndOrientationAssessment_Accessor = StabilityCharacterizationType::create(type);
    if (!stabilityAndOrientationAssessment_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *stabilityAndOrientationAssessment_Accessor;
}

uci::type::StabilityCharacterizationType& SensorCharacterizationChoiceType::chooseStabilityAndOrientationAssessment(uci::base::accessorType::AccessorType type) {
  return chooseStabilityAndOrientationAssessment("chooseStabilityAndOrientationAssessment", type);
}

uci::type::StructureAssessmentCharacterizationType& SensorCharacterizationChoiceType::getStructureAssessment_() const {
  if (structureAssessment_Accessor) {
    return *structureAssessment_Accessor;
  }
  throw uci::base::UCIException("Error in getStructureAssessment(): Unable to get StructureAssessment, field not selected");
}

const uci::type::StructureAssessmentCharacterizationType& SensorCharacterizationChoiceType::getStructureAssessment() const {
  return getStructureAssessment_();
}

uci::type::StructureAssessmentCharacterizationType& SensorCharacterizationChoiceType::getStructureAssessment() {
  return getStructureAssessment_();
}

uci::type::SensorCharacterizationChoiceType& SensorCharacterizationChoiceType::setStructureAssessment(const uci::type::StructureAssessmentCharacterizationType& accessor) {
  chooseStructureAssessment();
  if (&accessor != structureAssessment_Accessor.get()) {
    structureAssessment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorCharacterizationChoiceType::isStructureAssessment() const noexcept {
  return static_cast<bool>(structureAssessment_Accessor);
}

uci::type::StructureAssessmentCharacterizationType& SensorCharacterizationChoiceType::chooseStructureAssessment(const std::string& method, uci::base::accessorType::AccessorType type) {
  phemonemologySpecific_Accessor.reset();
  stabilityAndOrientationAssessment_Accessor.reset();
  identificationVerification_Accessor.reset();
  operationsChanges_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::structureAssessmentCharacterizationType : type};
  if ((!structureAssessment_Accessor) || (structureAssessment_Accessor->getAccessorType() != requestedType)) {
    structureAssessment_Accessor = StructureAssessmentCharacterizationType::create(type);
    if (!structureAssessment_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *structureAssessment_Accessor;
}

uci::type::StructureAssessmentCharacterizationType& SensorCharacterizationChoiceType::chooseStructureAssessment(uci::base::accessorType::AccessorType type) {
  return chooseStructureAssessment("chooseStructureAssessment", type);
}

uci::type::IdentificationVerificationCharacterizationType& SensorCharacterizationChoiceType::getIdentificationVerification_() const {
  if (identificationVerification_Accessor) {
    return *identificationVerification_Accessor;
  }
  throw uci::base::UCIException("Error in getIdentificationVerification(): Unable to get IdentificationVerification, field not selected");
}

const uci::type::IdentificationVerificationCharacterizationType& SensorCharacterizationChoiceType::getIdentificationVerification() const {
  return getIdentificationVerification_();
}

uci::type::IdentificationVerificationCharacterizationType& SensorCharacterizationChoiceType::getIdentificationVerification() {
  return getIdentificationVerification_();
}

uci::type::SensorCharacterizationChoiceType& SensorCharacterizationChoiceType::setIdentificationVerification(const uci::type::IdentificationVerificationCharacterizationType& accessor) {
  chooseIdentificationVerification();
  if (&accessor != identificationVerification_Accessor.get()) {
    identificationVerification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorCharacterizationChoiceType::isIdentificationVerification() const noexcept {
  return static_cast<bool>(identificationVerification_Accessor);
}

uci::type::IdentificationVerificationCharacterizationType& SensorCharacterizationChoiceType::chooseIdentificationVerification(const std::string& method, uci::base::accessorType::AccessorType type) {
  phemonemologySpecific_Accessor.reset();
  stabilityAndOrientationAssessment_Accessor.reset();
  structureAssessment_Accessor.reset();
  operationsChanges_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::identificationVerificationCharacterizationType : type};
  if ((!identificationVerification_Accessor) || (identificationVerification_Accessor->getAccessorType() != requestedType)) {
    identificationVerification_Accessor = IdentificationVerificationCharacterizationType::create(type);
    if (!identificationVerification_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *identificationVerification_Accessor;
}

uci::type::IdentificationVerificationCharacterizationType& SensorCharacterizationChoiceType::chooseIdentificationVerification(uci::base::accessorType::AccessorType type) {
  return chooseIdentificationVerification("chooseIdentificationVerification", type);
}

uci::type::SatelliteOperationsChangesCharacterizationType& SensorCharacterizationChoiceType::getOperationsChanges_() const {
  if (operationsChanges_Accessor) {
    return *operationsChanges_Accessor;
  }
  throw uci::base::UCIException("Error in getOperationsChanges(): Unable to get OperationsChanges, field not selected");
}

const uci::type::SatelliteOperationsChangesCharacterizationType& SensorCharacterizationChoiceType::getOperationsChanges() const {
  return getOperationsChanges_();
}

uci::type::SatelliteOperationsChangesCharacterizationType& SensorCharacterizationChoiceType::getOperationsChanges() {
  return getOperationsChanges_();
}

uci::type::SensorCharacterizationChoiceType& SensorCharacterizationChoiceType::setOperationsChanges(const uci::type::SatelliteOperationsChangesCharacterizationType& accessor) {
  chooseOperationsChanges();
  if (&accessor != operationsChanges_Accessor.get()) {
    operationsChanges_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorCharacterizationChoiceType::isOperationsChanges() const noexcept {
  return static_cast<bool>(operationsChanges_Accessor);
}

uci::type::SatelliteOperationsChangesCharacterizationType& SensorCharacterizationChoiceType::chooseOperationsChanges(const std::string& method, uci::base::accessorType::AccessorType type) {
  phemonemologySpecific_Accessor.reset();
  stabilityAndOrientationAssessment_Accessor.reset();
  structureAssessment_Accessor.reset();
  identificationVerification_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteOperationsChangesCharacterizationType : type};
  if ((!operationsChanges_Accessor) || (operationsChanges_Accessor->getAccessorType() != requestedType)) {
    operationsChanges_Accessor = SatelliteOperationsChangesCharacterizationType::create(type);
    if (!operationsChanges_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *operationsChanges_Accessor;
}

uci::type::SatelliteOperationsChangesCharacterizationType& SensorCharacterizationChoiceType::chooseOperationsChanges(uci::base::accessorType::AccessorType type) {
  return chooseOperationsChanges("chooseOperationsChanges", type);
}

std::unique_ptr<SensorCharacterizationChoiceType> SensorCharacterizationChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorCharacterizationChoiceType : type};
  return (requestedType == uci::type::accessorType::sensorCharacterizationChoiceType) ? boost::make_unique<SensorCharacterizationChoiceType>() : nullptr;
}

/**  */
namespace SensorCharacterizationChoiceType_Names {

constexpr const char* Extern_Type_Name{"SensorCharacterizationChoiceType"};
constexpr const char* PhemonemologySpecific_Name{"PhemonemologySpecific"};
constexpr const char* StabilityAndOrientationAssessment_Name{"StabilityAndOrientationAssessment"};
constexpr const char* StructureAssessment_Name{"StructureAssessment"};
constexpr const char* IdentificationVerification_Name{"IdentificationVerification"};
constexpr const char* OperationsChanges_Name{"OperationsChanges"};

} // namespace SensorCharacterizationChoiceType_Names

void SensorCharacterizationChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SensorCharacterizationChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SensorCharacterizationChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SensorCharacterizationChoiceType_Names::PhemonemologySpecific_Name) {
      CharacterizationChoiceType::deserialize(valueType.second, accessor.choosePhemonemologySpecific(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SensorCharacterizationChoiceType_Names::StabilityAndOrientationAssessment_Name) {
      StabilityCharacterizationType::deserialize(valueType.second, accessor.chooseStabilityAndOrientationAssessment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SensorCharacterizationChoiceType_Names::StructureAssessment_Name) {
      StructureAssessmentCharacterizationType::deserialize(valueType.second, accessor.chooseStructureAssessment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SensorCharacterizationChoiceType_Names::IdentificationVerification_Name) {
      IdentificationVerificationCharacterizationType::deserialize(valueType.second, accessor.chooseIdentificationVerification(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SensorCharacterizationChoiceType_Names::OperationsChanges_Name) {
      SatelliteOperationsChangesCharacterizationType::deserialize(valueType.second, accessor.chooseOperationsChanges(), nodeName, nsPrefix);
    }
  }
}

std::string SensorCharacterizationChoiceType::serialize(const uci::type::SensorCharacterizationChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SensorCharacterizationChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SensorCharacterizationChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isPhemonemologySpecific()) {
    CharacterizationChoiceType::serialize(accessor.getPhemonemologySpecific(), node, SensorCharacterizationChoiceType_Names::PhemonemologySpecific_Name);
  } else if (accessor.isStabilityAndOrientationAssessment()) {
    StabilityCharacterizationType::serialize(accessor.getStabilityAndOrientationAssessment(), node, SensorCharacterizationChoiceType_Names::StabilityAndOrientationAssessment_Name);
  } else if (accessor.isStructureAssessment()) {
    StructureAssessmentCharacterizationType::serialize(accessor.getStructureAssessment(), node, SensorCharacterizationChoiceType_Names::StructureAssessment_Name);
  } else if (accessor.isIdentificationVerification()) {
    IdentificationVerificationCharacterizationType::serialize(accessor.getIdentificationVerification(), node, SensorCharacterizationChoiceType_Names::IdentificationVerification_Name);
  } else if (accessor.isOperationsChanges()) {
    SatelliteOperationsChangesCharacterizationType::serialize(accessor.getOperationsChanges(), node, SensorCharacterizationChoiceType_Names::OperationsChanges_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SensorCharacterizationChoiceType& SensorCharacterizationChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SensorCharacterizationChoiceType>().release());
}

uci::type::SensorCharacterizationChoiceType& SensorCharacterizationChoiceType::create(const uci::type::SensorCharacterizationChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SensorCharacterizationChoiceType> newAccessor{boost::make_unique<asb_uci::type::SensorCharacterizationChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SensorCharacterizationChoiceType::destroy(uci::type::SensorCharacterizationChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::SensorCharacterizationChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

