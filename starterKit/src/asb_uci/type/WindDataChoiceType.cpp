/** @file WindDataChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/WindDataChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/Velocity2D_Type.h"
#include "asb_uci/type/WindMagnitudeType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/Velocity2D_Type.h"
#include "uci/type/WindDataChoiceType.h"
#include "uci/type/WindMagnitudeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WindDataChoiceType::WindDataChoiceType() = default;

WindDataChoiceType::~WindDataChoiceType() = default;

void WindDataChoiceType::copy(const uci::type::WindDataChoiceType& accessor) {
  copyImpl(accessor, false);
}

void WindDataChoiceType::copyImpl(const uci::type::WindDataChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const WindDataChoiceType&>(accessor);
    if (accessorImpl.windVelocity_Accessor) {
      setWindVelocity(*(accessorImpl.windVelocity_Accessor));
    } else {
      windVelocity_Accessor.reset();
    }
    if (accessorImpl.windMagnitude_Accessor) {
      setWindMagnitude(*(accessorImpl.windMagnitude_Accessor));
    } else {
      windMagnitude_Accessor.reset();
    }
  }
}

void WindDataChoiceType::reset() noexcept {
  windVelocity_Accessor.reset();
  windMagnitude_Accessor.reset();
}

uci::type::WindDataChoiceType::WindDataChoiceTypeChoice WindDataChoiceType::getWindDataChoiceTypeChoiceOrdinal() const noexcept {
  if (windVelocity_Accessor) {
    return WINDDATACHOICETYPE_CHOICE_WINDVELOCITY;
  }
  if (windMagnitude_Accessor) {
    return WINDDATACHOICETYPE_CHOICE_WINDMAGNITUDE;
  }
  return WINDDATACHOICETYPE_CHOICE_NONE;
}

uci::type::WindDataChoiceType& WindDataChoiceType::setWindDataChoiceTypeChoiceOrdinal(uci::type::WindDataChoiceType::WindDataChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case WINDDATACHOICETYPE_CHOICE_WINDVELOCITY:
      chooseWindVelocity("setWindDataChoiceTypeChoiceOrdinal", type);
      break;
    case WINDDATACHOICETYPE_CHOICE_WINDMAGNITUDE:
      chooseWindMagnitude("setWindDataChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setWindDataChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::Velocity2D_Type& WindDataChoiceType::getWindVelocity_() const {
  if (windVelocity_Accessor) {
    return *windVelocity_Accessor;
  }
  throw uci::base::UCIException("Error in getWindVelocity(): Unable to get WindVelocity, field not selected");
}

const uci::type::Velocity2D_Type& WindDataChoiceType::getWindVelocity() const {
  return getWindVelocity_();
}

uci::type::Velocity2D_Type& WindDataChoiceType::getWindVelocity() {
  return getWindVelocity_();
}

uci::type::WindDataChoiceType& WindDataChoiceType::setWindVelocity(const uci::type::Velocity2D_Type& accessor) {
  chooseWindVelocity("setWindVelocity", accessor.getAccessorType());
  if (&accessor != windVelocity_Accessor.get()) {
    windVelocity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool WindDataChoiceType::isWindVelocity() const noexcept {
  return static_cast<bool>(windVelocity_Accessor);
}

uci::type::Velocity2D_Type& WindDataChoiceType::chooseWindVelocity(const std::string& method, uci::base::accessorType::AccessorType type) {
  windMagnitude_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::velocity2D_Type : type};
  if ((!windVelocity_Accessor) || (windVelocity_Accessor->getAccessorType() != requestedType)) {
    windVelocity_Accessor = Velocity2D_Type::create(type);
    if (!windVelocity_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *windVelocity_Accessor;
}

uci::type::Velocity2D_Type& WindDataChoiceType::chooseWindVelocity(uci::base::accessorType::AccessorType type) {
  return chooseWindVelocity("chooseWindVelocity", type);
}

uci::type::WindMagnitudeType& WindDataChoiceType::getWindMagnitude_() const {
  if (windMagnitude_Accessor) {
    return *windMagnitude_Accessor;
  }
  throw uci::base::UCIException("Error in getWindMagnitude(): Unable to get WindMagnitude, field not selected");
}

const uci::type::WindMagnitudeType& WindDataChoiceType::getWindMagnitude() const {
  return getWindMagnitude_();
}

uci::type::WindMagnitudeType& WindDataChoiceType::getWindMagnitude() {
  return getWindMagnitude_();
}

uci::type::WindDataChoiceType& WindDataChoiceType::setWindMagnitude(const uci::type::WindMagnitudeType& accessor) {
  chooseWindMagnitude();
  if (&accessor != windMagnitude_Accessor.get()) {
    windMagnitude_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WindDataChoiceType::isWindMagnitude() const noexcept {
  return static_cast<bool>(windMagnitude_Accessor);
}

uci::type::WindMagnitudeType& WindDataChoiceType::chooseWindMagnitude(const std::string& method, uci::base::accessorType::AccessorType type) {
  windVelocity_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::windMagnitudeType : type};
  if ((!windMagnitude_Accessor) || (windMagnitude_Accessor->getAccessorType() != requestedType)) {
    windMagnitude_Accessor = WindMagnitudeType::create(type);
    if (!windMagnitude_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *windMagnitude_Accessor;
}

uci::type::WindMagnitudeType& WindDataChoiceType::chooseWindMagnitude(uci::base::accessorType::AccessorType type) {
  return chooseWindMagnitude("chooseWindMagnitude", type);
}

std::unique_ptr<WindDataChoiceType> WindDataChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::windDataChoiceType : type};
  return (requestedType == uci::type::accessorType::windDataChoiceType) ? boost::make_unique<WindDataChoiceType>() : nullptr;
}

/**  */
namespace WindDataChoiceType_Names {

constexpr const char* Extern_Type_Name{"WindDataChoiceType"};
constexpr const char* WindVelocity_Name{"WindVelocity"};
constexpr const char* WindMagnitude_Name{"WindMagnitude"};

} // namespace WindDataChoiceType_Names

void WindDataChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::WindDataChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WindDataChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WindDataChoiceType_Names::WindVelocity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseWindVelocity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WindDataChoiceType_Names::WindMagnitude_Name) {
      WindMagnitudeType::deserialize(valueType.second, accessor.chooseWindMagnitude(), nodeName, nsPrefix);
    }
  }
}

std::string WindDataChoiceType::serialize(const uci::type::WindDataChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WindDataChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WindDataChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isWindVelocity()) {
    Velocity2D_Type::serialize(accessor.getWindVelocity(), node, WindDataChoiceType_Names::WindVelocity_Name);
  } else if (accessor.isWindMagnitude()) {
    WindMagnitudeType::serialize(accessor.getWindMagnitude(), node, WindDataChoiceType_Names::WindMagnitude_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WindDataChoiceType& WindDataChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WindDataChoiceType>().release());
}

uci::type::WindDataChoiceType& WindDataChoiceType::create(const uci::type::WindDataChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WindDataChoiceType> newAccessor{boost::make_unique<asb_uci::type::WindDataChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WindDataChoiceType::destroy(uci::type::WindDataChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::WindDataChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

