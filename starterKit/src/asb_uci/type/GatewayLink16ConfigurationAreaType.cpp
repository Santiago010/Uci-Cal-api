/** @file GatewayLink16ConfigurationAreaType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/GatewayLink16ConfigurationAreaType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/GatewayLink16ConfigurationAnnulusType.h"
#include "../../../include/asb_uci/type/GatewayLink16ConfigurationCircleType.h"
#include "../../../include/asb_uci/type/GatewayLink16ConfigurationCircularSectorType.h"
#include "../../../include/asb_uci/type/GatewayLink16ConfigurationLineType.h"
#include "../../../include/asb_uci/type/GatewayLink16ConfigurationRectangleType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayLink16ConfigurationAnnulusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayLink16ConfigurationAreaType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayLink16ConfigurationCircleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayLink16ConfigurationCircularSectorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayLink16ConfigurationLineType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayLink16ConfigurationRectangleType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

GatewayLink16ConfigurationAreaType::GatewayLink16ConfigurationAreaType() = default;

GatewayLink16ConfigurationAreaType::~GatewayLink16ConfigurationAreaType() = default;

void GatewayLink16ConfigurationAreaType::copy(const uci::type::GatewayLink16ConfigurationAreaType& accessor) {
  copyImpl(accessor, false);
}

void GatewayLink16ConfigurationAreaType::copyImpl(const uci::type::GatewayLink16ConfigurationAreaType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const GatewayLink16ConfigurationAreaType&>(accessor);
    if (accessorImpl.circle_Accessor) {
      setCircle(*(accessorImpl.circle_Accessor));
    } else {
      circle_Accessor.reset();
    }
    if (accessorImpl.annulus_Accessor) {
      setAnnulus(*(accessorImpl.annulus_Accessor));
    } else {
      annulus_Accessor.reset();
    }
    if (accessorImpl.circularSector_Accessor) {
      setCircularSector(*(accessorImpl.circularSector_Accessor));
    } else {
      circularSector_Accessor.reset();
    }
    if (accessorImpl.rectangle_Accessor) {
      setRectangle(*(accessorImpl.rectangle_Accessor));
    } else {
      rectangle_Accessor.reset();
    }
    if (accessorImpl.line_Accessor) {
      setLine(*(accessorImpl.line_Accessor));
    } else {
      line_Accessor.reset();
    }
  }
}

void GatewayLink16ConfigurationAreaType::reset() noexcept {
  circle_Accessor.reset();
  annulus_Accessor.reset();
  circularSector_Accessor.reset();
  rectangle_Accessor.reset();
  line_Accessor.reset();
}

uci::type::GatewayLink16ConfigurationAreaType::GatewayLink16ConfigurationAreaTypeChoice GatewayLink16ConfigurationAreaType::getGatewayLink16ConfigurationAreaTypeChoiceOrdinal() const noexcept {
  if (circle_Accessor) {
    return GATEWAYLINK16CONFIGURATIONAREATYPE_CHOICE_CIRCLE;
  }
  if (annulus_Accessor) {
    return GATEWAYLINK16CONFIGURATIONAREATYPE_CHOICE_ANNULUS;
  }
  if (circularSector_Accessor) {
    return GATEWAYLINK16CONFIGURATIONAREATYPE_CHOICE_CIRCULARSECTOR;
  }
  if (rectangle_Accessor) {
    return GATEWAYLINK16CONFIGURATIONAREATYPE_CHOICE_RECTANGLE;
  }
  if (line_Accessor) {
    return GATEWAYLINK16CONFIGURATIONAREATYPE_CHOICE_LINE;
  }
  return GATEWAYLINK16CONFIGURATIONAREATYPE_CHOICE_NONE;
}

uci::type::GatewayLink16ConfigurationAreaType& GatewayLink16ConfigurationAreaType::setGatewayLink16ConfigurationAreaTypeChoiceOrdinal(uci::type::GatewayLink16ConfigurationAreaType::GatewayLink16ConfigurationAreaTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case GATEWAYLINK16CONFIGURATIONAREATYPE_CHOICE_CIRCLE:
      chooseCircle("setGatewayLink16ConfigurationAreaTypeChoiceOrdinal", type);
      break;
    case GATEWAYLINK16CONFIGURATIONAREATYPE_CHOICE_ANNULUS:
      chooseAnnulus("setGatewayLink16ConfigurationAreaTypeChoiceOrdinal", type);
      break;
    case GATEWAYLINK16CONFIGURATIONAREATYPE_CHOICE_CIRCULARSECTOR:
      chooseCircularSector("setGatewayLink16ConfigurationAreaTypeChoiceOrdinal", type);
      break;
    case GATEWAYLINK16CONFIGURATIONAREATYPE_CHOICE_RECTANGLE:
      chooseRectangle("setGatewayLink16ConfigurationAreaTypeChoiceOrdinal", type);
      break;
    case GATEWAYLINK16CONFIGURATIONAREATYPE_CHOICE_LINE:
      chooseLine("setGatewayLink16ConfigurationAreaTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setGatewayLink16ConfigurationAreaTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::GatewayLink16ConfigurationCircleType& GatewayLink16ConfigurationAreaType::getCircle_() const {
  if (circle_Accessor) {
    return *circle_Accessor;
  }
  throw uci::base::UCIException("Error in getCircle(): Unable to get Circle, field not selected");
}

const uci::type::GatewayLink16ConfigurationCircleType& GatewayLink16ConfigurationAreaType::getCircle() const {
  return getCircle_();
}

uci::type::GatewayLink16ConfigurationCircleType& GatewayLink16ConfigurationAreaType::getCircle() {
  return getCircle_();
}

uci::type::GatewayLink16ConfigurationAreaType& GatewayLink16ConfigurationAreaType::setCircle(const uci::type::GatewayLink16ConfigurationCircleType& accessor) {
  chooseCircle();
  if (&accessor != circle_Accessor.get()) {
    circle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLink16ConfigurationAreaType::isCircle() const noexcept {
  return static_cast<bool>(circle_Accessor);
}

uci::type::GatewayLink16ConfigurationCircleType& GatewayLink16ConfigurationAreaType::chooseCircle(const std::string& method, uci::base::accessorType::AccessorType type) {
  annulus_Accessor.reset();
  circularSector_Accessor.reset();
  rectangle_Accessor.reset();
  line_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationCircleType : type};
  if ((!circle_Accessor) || (circle_Accessor->getAccessorType() != requestedType)) {
    circle_Accessor = GatewayLink16ConfigurationCircleType::create(type);
    if (!circle_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *circle_Accessor;
}

uci::type::GatewayLink16ConfigurationCircleType& GatewayLink16ConfigurationAreaType::chooseCircle(uci::base::accessorType::AccessorType type) {
  return chooseCircle("chooseCircle", type);
}

uci::type::GatewayLink16ConfigurationAnnulusType& GatewayLink16ConfigurationAreaType::getAnnulus_() const {
  if (annulus_Accessor) {
    return *annulus_Accessor;
  }
  throw uci::base::UCIException("Error in getAnnulus(): Unable to get Annulus, field not selected");
}

const uci::type::GatewayLink16ConfigurationAnnulusType& GatewayLink16ConfigurationAreaType::getAnnulus() const {
  return getAnnulus_();
}

uci::type::GatewayLink16ConfigurationAnnulusType& GatewayLink16ConfigurationAreaType::getAnnulus() {
  return getAnnulus_();
}

uci::type::GatewayLink16ConfigurationAreaType& GatewayLink16ConfigurationAreaType::setAnnulus(const uci::type::GatewayLink16ConfigurationAnnulusType& accessor) {
  chooseAnnulus();
  if (&accessor != annulus_Accessor.get()) {
    annulus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLink16ConfigurationAreaType::isAnnulus() const noexcept {
  return static_cast<bool>(annulus_Accessor);
}

uci::type::GatewayLink16ConfigurationAnnulusType& GatewayLink16ConfigurationAreaType::chooseAnnulus(const std::string& method, uci::base::accessorType::AccessorType type) {
  circle_Accessor.reset();
  circularSector_Accessor.reset();
  rectangle_Accessor.reset();
  line_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationAnnulusType : type};
  if ((!annulus_Accessor) || (annulus_Accessor->getAccessorType() != requestedType)) {
    annulus_Accessor = GatewayLink16ConfigurationAnnulusType::create(type);
    if (!annulus_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *annulus_Accessor;
}

uci::type::GatewayLink16ConfigurationAnnulusType& GatewayLink16ConfigurationAreaType::chooseAnnulus(uci::base::accessorType::AccessorType type) {
  return chooseAnnulus("chooseAnnulus", type);
}

uci::type::GatewayLink16ConfigurationCircularSectorType& GatewayLink16ConfigurationAreaType::getCircularSector_() const {
  if (circularSector_Accessor) {
    return *circularSector_Accessor;
  }
  throw uci::base::UCIException("Error in getCircularSector(): Unable to get CircularSector, field not selected");
}

const uci::type::GatewayLink16ConfigurationCircularSectorType& GatewayLink16ConfigurationAreaType::getCircularSector() const {
  return getCircularSector_();
}

uci::type::GatewayLink16ConfigurationCircularSectorType& GatewayLink16ConfigurationAreaType::getCircularSector() {
  return getCircularSector_();
}

uci::type::GatewayLink16ConfigurationAreaType& GatewayLink16ConfigurationAreaType::setCircularSector(const uci::type::GatewayLink16ConfigurationCircularSectorType& accessor) {
  chooseCircularSector();
  if (&accessor != circularSector_Accessor.get()) {
    circularSector_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLink16ConfigurationAreaType::isCircularSector() const noexcept {
  return static_cast<bool>(circularSector_Accessor);
}

uci::type::GatewayLink16ConfigurationCircularSectorType& GatewayLink16ConfigurationAreaType::chooseCircularSector(const std::string& method, uci::base::accessorType::AccessorType type) {
  circle_Accessor.reset();
  annulus_Accessor.reset();
  rectangle_Accessor.reset();
  line_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationCircularSectorType : type};
  if ((!circularSector_Accessor) || (circularSector_Accessor->getAccessorType() != requestedType)) {
    circularSector_Accessor = GatewayLink16ConfigurationCircularSectorType::create(type);
    if (!circularSector_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *circularSector_Accessor;
}

uci::type::GatewayLink16ConfigurationCircularSectorType& GatewayLink16ConfigurationAreaType::chooseCircularSector(uci::base::accessorType::AccessorType type) {
  return chooseCircularSector("chooseCircularSector", type);
}

uci::type::GatewayLink16ConfigurationRectangleType& GatewayLink16ConfigurationAreaType::getRectangle_() const {
  if (rectangle_Accessor) {
    return *rectangle_Accessor;
  }
  throw uci::base::UCIException("Error in getRectangle(): Unable to get Rectangle, field not selected");
}

const uci::type::GatewayLink16ConfigurationRectangleType& GatewayLink16ConfigurationAreaType::getRectangle() const {
  return getRectangle_();
}

uci::type::GatewayLink16ConfigurationRectangleType& GatewayLink16ConfigurationAreaType::getRectangle() {
  return getRectangle_();
}

uci::type::GatewayLink16ConfigurationAreaType& GatewayLink16ConfigurationAreaType::setRectangle(const uci::type::GatewayLink16ConfigurationRectangleType& accessor) {
  chooseRectangle();
  if (&accessor != rectangle_Accessor.get()) {
    rectangle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLink16ConfigurationAreaType::isRectangle() const noexcept {
  return static_cast<bool>(rectangle_Accessor);
}

uci::type::GatewayLink16ConfigurationRectangleType& GatewayLink16ConfigurationAreaType::chooseRectangle(const std::string& method, uci::base::accessorType::AccessorType type) {
  circle_Accessor.reset();
  annulus_Accessor.reset();
  circularSector_Accessor.reset();
  line_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationRectangleType : type};
  if ((!rectangle_Accessor) || (rectangle_Accessor->getAccessorType() != requestedType)) {
    rectangle_Accessor = GatewayLink16ConfigurationRectangleType::create(type);
    if (!rectangle_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rectangle_Accessor;
}

uci::type::GatewayLink16ConfigurationRectangleType& GatewayLink16ConfigurationAreaType::chooseRectangle(uci::base::accessorType::AccessorType type) {
  return chooseRectangle("chooseRectangle", type);
}

uci::type::GatewayLink16ConfigurationLineType& GatewayLink16ConfigurationAreaType::getLine_() const {
  if (line_Accessor) {
    return *line_Accessor;
  }
  throw uci::base::UCIException("Error in getLine(): Unable to get Line, field not selected");
}

const uci::type::GatewayLink16ConfigurationLineType& GatewayLink16ConfigurationAreaType::getLine() const {
  return getLine_();
}

uci::type::GatewayLink16ConfigurationLineType& GatewayLink16ConfigurationAreaType::getLine() {
  return getLine_();
}

uci::type::GatewayLink16ConfigurationAreaType& GatewayLink16ConfigurationAreaType::setLine(const uci::type::GatewayLink16ConfigurationLineType& accessor) {
  chooseLine();
  if (&accessor != line_Accessor.get()) {
    line_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLink16ConfigurationAreaType::isLine() const noexcept {
  return static_cast<bool>(line_Accessor);
}

uci::type::GatewayLink16ConfigurationLineType& GatewayLink16ConfigurationAreaType::chooseLine(const std::string& method, uci::base::accessorType::AccessorType type) {
  circle_Accessor.reset();
  annulus_Accessor.reset();
  circularSector_Accessor.reset();
  rectangle_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationLineType : type};
  if ((!line_Accessor) || (line_Accessor->getAccessorType() != requestedType)) {
    line_Accessor = GatewayLink16ConfigurationLineType::create(type);
    if (!line_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *line_Accessor;
}

uci::type::GatewayLink16ConfigurationLineType& GatewayLink16ConfigurationAreaType::chooseLine(uci::base::accessorType::AccessorType type) {
  return chooseLine("chooseLine", type);
}

std::unique_ptr<GatewayLink16ConfigurationAreaType> GatewayLink16ConfigurationAreaType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationAreaType : type};
  return (requestedType == uci::type::accessorType::gatewayLink16ConfigurationAreaType) ? boost::make_unique<GatewayLink16ConfigurationAreaType>() : nullptr;
}

/**  */
namespace GatewayLink16ConfigurationAreaType_Names {

constexpr const char* Extern_Type_Name{"GatewayLink16ConfigurationAreaType"};
constexpr const char* Circle_Name{"Circle"};
constexpr const char* Annulus_Name{"Annulus"};
constexpr const char* CircularSector_Name{"CircularSector"};
constexpr const char* Rectangle_Name{"Rectangle"};
constexpr const char* Line_Name{"Line"};

} // namespace GatewayLink16ConfigurationAreaType_Names

void GatewayLink16ConfigurationAreaType::deserialize(const boost::property_tree::ptree& propTree, uci::type::GatewayLink16ConfigurationAreaType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = GatewayLink16ConfigurationAreaType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationAreaType_Names::Circle_Name) {
      GatewayLink16ConfigurationCircleType::deserialize(valueType.second, accessor.chooseCircle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationAreaType_Names::Annulus_Name) {
      GatewayLink16ConfigurationAnnulusType::deserialize(valueType.second, accessor.chooseAnnulus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationAreaType_Names::CircularSector_Name) {
      GatewayLink16ConfigurationCircularSectorType::deserialize(valueType.second, accessor.chooseCircularSector(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationAreaType_Names::Rectangle_Name) {
      GatewayLink16ConfigurationRectangleType::deserialize(valueType.second, accessor.chooseRectangle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationAreaType_Names::Line_Name) {
      GatewayLink16ConfigurationLineType::deserialize(valueType.second, accessor.chooseLine(), nodeName, nsPrefix);
    }
  }
}

std::string GatewayLink16ConfigurationAreaType::serialize(const uci::type::GatewayLink16ConfigurationAreaType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? GatewayLink16ConfigurationAreaType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, GatewayLink16ConfigurationAreaType_Names::Extern_Type_Name);
  }
  if (accessor.isCircle()) {
    GatewayLink16ConfigurationCircleType::serialize(accessor.getCircle(), node, GatewayLink16ConfigurationAreaType_Names::Circle_Name);
  } else if (accessor.isAnnulus()) {
    GatewayLink16ConfigurationAnnulusType::serialize(accessor.getAnnulus(), node, GatewayLink16ConfigurationAreaType_Names::Annulus_Name);
  } else if (accessor.isCircularSector()) {
    GatewayLink16ConfigurationCircularSectorType::serialize(accessor.getCircularSector(), node, GatewayLink16ConfigurationAreaType_Names::CircularSector_Name);
  } else if (accessor.isRectangle()) {
    GatewayLink16ConfigurationRectangleType::serialize(accessor.getRectangle(), node, GatewayLink16ConfigurationAreaType_Names::Rectangle_Name);
  } else if (accessor.isLine()) {
    GatewayLink16ConfigurationLineType::serialize(accessor.getLine(), node, GatewayLink16ConfigurationAreaType_Names::Line_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::GatewayLink16ConfigurationAreaType& GatewayLink16ConfigurationAreaType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::GatewayLink16ConfigurationAreaType>().release());
}

uci::type::GatewayLink16ConfigurationAreaType& GatewayLink16ConfigurationAreaType::create(const uci::type::GatewayLink16ConfigurationAreaType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::GatewayLink16ConfigurationAreaType> newAccessor{boost::make_unique<asb_uci::type::GatewayLink16ConfigurationAreaType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void GatewayLink16ConfigurationAreaType::destroy(uci::type::GatewayLink16ConfigurationAreaType& accessor) {
  delete dynamic_cast<asb_uci::type::GatewayLink16ConfigurationAreaType*>(&accessor);
}

} // namespace type

} // namespace uci

