/** @file PMOP_SequenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PMOP_SequenceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PMOP_SequenceEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PMOP_SequenceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PMOP_SequenceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PMOP_SequenceType::PMOP_SequenceType() = default;

PMOP_SequenceType::~PMOP_SequenceType() = default;

void PMOP_SequenceType::copy(const uci::type::PMOP_SequenceType& accessor) {
  copyImpl(accessor, false);
}

void PMOP_SequenceType::copyImpl(const uci::type::PMOP_SequenceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PMOP_SequenceType&>(accessor);
    if (accessorImpl.pMOP_SequencePhase_Accessor) {
      setPMOP_SequencePhase(*(accessorImpl.pMOP_SequencePhase_Accessor));
    } else {
      pMOP_SequencePhase_Accessor.reset();
    }
    pMOP_SequenceLength_Accessor = (accessorImpl.pMOP_SequenceLength_Accessor ? accessorImpl.pMOP_SequenceLength_Accessor : boost::none);
  }
}

void PMOP_SequenceType::reset() noexcept {
  pMOP_SequencePhase_Accessor.reset();
  pMOP_SequenceLength_Accessor.reset();
}

uci::type::PMOP_SequenceType::PMOP_SequenceTypeChoice PMOP_SequenceType::getPMOP_SequenceTypeChoiceOrdinal() const noexcept {
  if (pMOP_SequencePhase_Accessor) {
    return PMOP_SEQUENCETYPE_CHOICE_PMOP_SEQUENCEPHASE;
  }
  if (pMOP_SequenceLength_Accessor) {
    return PMOP_SEQUENCETYPE_CHOICE_PMOP_SEQUENCELENGTH;
  }
  return PMOP_SEQUENCETYPE_CHOICE_NONE;
}

uci::type::PMOP_SequenceType& PMOP_SequenceType::setPMOP_SequenceTypeChoiceOrdinal(uci::type::PMOP_SequenceType::PMOP_SequenceTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case PMOP_SEQUENCETYPE_CHOICE_PMOP_SEQUENCEPHASE:
      choosePMOP_SequencePhase();
      break;
    case PMOP_SEQUENCETYPE_CHOICE_PMOP_SEQUENCELENGTH:
      choosePMOP_SequenceLength();
      break;
    default:
      throw uci::base::UCIException("Error in setPMOP_SequenceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PMOP_SequenceType::PMOP_SequencePhase& PMOP_SequenceType::getPMOP_SequencePhase_() const {
  if (pMOP_SequencePhase_Accessor) {
    return *pMOP_SequencePhase_Accessor;
  }
  throw uci::base::UCIException("Error in getPMOP_SequencePhase(): Unable to get PMOP_SequencePhase, field not selected");
}

const uci::type::PMOP_SequenceType::PMOP_SequencePhase& PMOP_SequenceType::getPMOP_SequencePhase() const {
  return getPMOP_SequencePhase_();
}

uci::type::PMOP_SequenceType::PMOP_SequencePhase& PMOP_SequenceType::getPMOP_SequencePhase() {
  return getPMOP_SequencePhase_();
}

uci::type::PMOP_SequenceType& PMOP_SequenceType::setPMOP_SequencePhase(const uci::type::PMOP_SequenceType::PMOP_SequencePhase& accessor) {
  choosePMOP_SequencePhase();
  if (&accessor != pMOP_SequencePhase_Accessor.get()) {
    pMOP_SequencePhase_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PMOP_SequenceType::isPMOP_SequencePhase() const noexcept {
  return static_cast<bool>(pMOP_SequencePhase_Accessor);
}

uci::type::PMOP_SequenceType::PMOP_SequencePhase& PMOP_SequenceType::choosePMOP_SequencePhase() {
  pMOP_SequenceLength_Accessor.reset();
  if (!pMOP_SequencePhase_Accessor) {
    pMOP_SequencePhase_Accessor = boost::make_unique<PMOP_SequencePhase>(1, SIZE_MAX);
  }
  return *pMOP_SequencePhase_Accessor;
}

xs::UnsignedInt PMOP_SequenceType::getPMOP_SequenceLength() const {
  if (pMOP_SequenceLength_Accessor) {
    return *pMOP_SequenceLength_Accessor;
  }
  throw uci::base::UCIException("Error in getPMOP_SequenceLength(): Unable to get PMOP_SequenceLength, field not selected");
}

uci::type::PMOP_SequenceType& PMOP_SequenceType::setPMOP_SequenceLength(xs::UnsignedInt value) {
  choosePMOP_SequenceLength();
  pMOP_SequenceLength_Accessor = value;
  return *this;
}

bool PMOP_SequenceType::isPMOP_SequenceLength() const noexcept {
  return static_cast<bool>(pMOP_SequenceLength_Accessor);
}

void PMOP_SequenceType::choosePMOP_SequenceLength() {
  pMOP_SequencePhase_Accessor.reset();
  if (!pMOP_SequenceLength_Accessor) {
    pMOP_SequenceLength_Accessor = boost::optional<asb_xs::UnsignedInt>();
  }
}

std::unique_ptr<PMOP_SequenceType> PMOP_SequenceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pMOP_SequenceType : type};
  return (requestedType == uci::type::accessorType::pMOP_SequenceType) ? boost::make_unique<PMOP_SequenceType>() : nullptr;
}

/**  */
namespace PMOP_SequenceType_Names {

constexpr const char* Extern_Type_Name{"PMOP_SequenceType"};
constexpr const char* PMOP_SequencePhase_Name{"PMOP_SequencePhase"};
constexpr const char* PMOP_SequenceLength_Name{"PMOP_SequenceLength"};

} // namespace PMOP_SequenceType_Names

void PMOP_SequenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PMOP_SequenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PMOP_SequenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PMOP_SequenceType_Names::PMOP_SequencePhase_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PMOP_SequenceType::PMOP_SequencePhase& boundedList = accessor.choosePMOP_SequencePhase();
        const uci::type::PMOP_SequenceType::PMOP_SequencePhase::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PMOP_SequenceType_Names::PMOP_SequenceLength_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPMOP_SequenceLength(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string PMOP_SequenceType::serialize(const uci::type::PMOP_SequenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PMOP_SequenceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PMOP_SequenceType_Names::Extern_Type_Name);
  }
  if (accessor.isPMOP_SequencePhase()) {
    {
      const uci::type::PMOP_SequenceType::PMOP_SequencePhase& boundedList = accessor.getPMOP_SequencePhase();
      for (uci::type::PMOP_SequenceType::PMOP_SequencePhase::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        PMOP_SequenceEnum::serialize(boundedList.at(i), node, PMOP_SequenceType_Names::PMOP_SequencePhase_Name, false);
      }
    }
  } else if (accessor.isPMOP_SequenceLength()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getPMOP_SequenceLength(), node, PMOP_SequenceType_Names::PMOP_SequenceLength_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PMOP_SequenceType& PMOP_SequenceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PMOP_SequenceType>().release());
}

uci::type::PMOP_SequenceType& PMOP_SequenceType::create(const uci::type::PMOP_SequenceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PMOP_SequenceType> newAccessor{boost::make_unique<asb_uci::type::PMOP_SequenceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PMOP_SequenceType::destroy(uci::type::PMOP_SequenceType& accessor) {
  delete dynamic_cast<asb_uci::type::PMOP_SequenceType*>(&accessor);
}

} // namespace type

} // namespace uci

