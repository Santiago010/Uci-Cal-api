/** @file FocalPlaneArrayNonUniformityCorrectionReferenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/FocalPlaneArrayNonUniformityCorrectionReferenceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FocalPlaneArrayNonUniformityCorrectionOffsetEnum.h"
#include "../../../include/asb_uci/type/FocalPlaneArrayNonUniformityCorrectionReferenceEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FocalPlaneArrayNonUniformityCorrectionOffsetEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FocalPlaneArrayNonUniformityCorrectionReferenceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FocalPlaneArrayNonUniformityCorrectionReferenceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FocalPlaneArrayNonUniformityCorrectionReferenceType::FocalPlaneArrayNonUniformityCorrectionReferenceType() = default;

FocalPlaneArrayNonUniformityCorrectionReferenceType::~FocalPlaneArrayNonUniformityCorrectionReferenceType() = default;

void FocalPlaneArrayNonUniformityCorrectionReferenceType::copy(const uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& accessor) {
  copyImpl(accessor, false);
}

void FocalPlaneArrayNonUniformityCorrectionReferenceType::copyImpl(const uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const FocalPlaneArrayNonUniformityCorrectionReferenceType&>(accessor);
    if (accessorImpl.nUC_Reference_Accessor) {
      setNUC_Reference(*(accessorImpl.nUC_Reference_Accessor));
    } else {
      nUC_Reference_Accessor.reset();
    }
    if (accessorImpl.nUC_Offset_Accessor) {
      setNUC_Offset(*(accessorImpl.nUC_Offset_Accessor));
    } else {
      nUC_Offset_Accessor.reset();
    }
  }
}

void FocalPlaneArrayNonUniformityCorrectionReferenceType::reset() noexcept {
  nUC_Reference_Accessor.reset();
  nUC_Offset_Accessor.reset();
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceEnum& FocalPlaneArrayNonUniformityCorrectionReferenceType::getNUC_Reference_() const {
  if (nUC_Reference_Accessor) {
    return *nUC_Reference_Accessor;
  }
  throw uci::base::UCIException("Error in getNUC_Reference(): An attempt was made to get an optional field that was not enabled, call hasNUC_Reference() to determine if it is safe to call getNUC_Reference()");
}

const uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceEnum& FocalPlaneArrayNonUniformityCorrectionReferenceType::getNUC_Reference() const {
  return getNUC_Reference_();
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceEnum& FocalPlaneArrayNonUniformityCorrectionReferenceType::getNUC_Reference() {
  return getNUC_Reference_();
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& FocalPlaneArrayNonUniformityCorrectionReferenceType::setNUC_Reference(const uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceEnum& accessor) {
  enableNUC_Reference();
  if (&accessor != nUC_Reference_Accessor.get()) {
    nUC_Reference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& FocalPlaneArrayNonUniformityCorrectionReferenceType::setNUC_Reference(const uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceEnum::EnumerationItem value) {
  enableNUC_Reference().setValue(value);
  return *this;
}

bool FocalPlaneArrayNonUniformityCorrectionReferenceType::hasNUC_Reference() const noexcept {
  return static_cast<bool>(nUC_Reference_Accessor);
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceEnum& FocalPlaneArrayNonUniformityCorrectionReferenceType::enableNUC_Reference(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::focalPlaneArrayNonUniformityCorrectionReferenceEnum : type};
  if ((!nUC_Reference_Accessor) || (nUC_Reference_Accessor->getAccessorType() != requestedType)) {
    nUC_Reference_Accessor = FocalPlaneArrayNonUniformityCorrectionReferenceEnum::create(requestedType);
    if (!nUC_Reference_Accessor) {
      throw uci::base::UCIException("Error in enableNUC_Reference(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nUC_Reference_Accessor;
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& FocalPlaneArrayNonUniformityCorrectionReferenceType::clearNUC_Reference() noexcept {
  nUC_Reference_Accessor.reset();
  return *this;
}

uci::type::FocalPlaneArrayNonUniformityCorrectionOffsetEnum& FocalPlaneArrayNonUniformityCorrectionReferenceType::getNUC_Offset_() const {
  if (nUC_Offset_Accessor) {
    return *nUC_Offset_Accessor;
  }
  throw uci::base::UCIException("Error in getNUC_Offset(): An attempt was made to get an optional field that was not enabled, call hasNUC_Offset() to determine if it is safe to call getNUC_Offset()");
}

const uci::type::FocalPlaneArrayNonUniformityCorrectionOffsetEnum& FocalPlaneArrayNonUniformityCorrectionReferenceType::getNUC_Offset() const {
  return getNUC_Offset_();
}

uci::type::FocalPlaneArrayNonUniformityCorrectionOffsetEnum& FocalPlaneArrayNonUniformityCorrectionReferenceType::getNUC_Offset() {
  return getNUC_Offset_();
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& FocalPlaneArrayNonUniformityCorrectionReferenceType::setNUC_Offset(const uci::type::FocalPlaneArrayNonUniformityCorrectionOffsetEnum& accessor) {
  enableNUC_Offset();
  if (&accessor != nUC_Offset_Accessor.get()) {
    nUC_Offset_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& FocalPlaneArrayNonUniformityCorrectionReferenceType::setNUC_Offset(const uci::type::FocalPlaneArrayNonUniformityCorrectionOffsetEnum::EnumerationItem value) {
  enableNUC_Offset().setValue(value);
  return *this;
}

bool FocalPlaneArrayNonUniformityCorrectionReferenceType::hasNUC_Offset() const noexcept {
  return static_cast<bool>(nUC_Offset_Accessor);
}

uci::type::FocalPlaneArrayNonUniformityCorrectionOffsetEnum& FocalPlaneArrayNonUniformityCorrectionReferenceType::enableNUC_Offset(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::focalPlaneArrayNonUniformityCorrectionOffsetEnum : type};
  if ((!nUC_Offset_Accessor) || (nUC_Offset_Accessor->getAccessorType() != requestedType)) {
    nUC_Offset_Accessor = FocalPlaneArrayNonUniformityCorrectionOffsetEnum::create(requestedType);
    if (!nUC_Offset_Accessor) {
      throw uci::base::UCIException("Error in enableNUC_Offset(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nUC_Offset_Accessor;
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& FocalPlaneArrayNonUniformityCorrectionReferenceType::clearNUC_Offset() noexcept {
  nUC_Offset_Accessor.reset();
  return *this;
}

std::unique_ptr<FocalPlaneArrayNonUniformityCorrectionReferenceType> FocalPlaneArrayNonUniformityCorrectionReferenceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::focalPlaneArrayNonUniformityCorrectionReferenceType : type};
  return (requestedType == uci::type::accessorType::focalPlaneArrayNonUniformityCorrectionReferenceType) ? boost::make_unique<FocalPlaneArrayNonUniformityCorrectionReferenceType>() : nullptr;
}

/**  */
namespace FocalPlaneArrayNonUniformityCorrectionReferenceType_Names {

constexpr const char* Extern_Type_Name{"FocalPlaneArrayNonUniformityCorrectionReferenceType"};
constexpr const char* NUC_Reference_Name{"NUC_Reference"};
constexpr const char* NUC_Offset_Name{"NUC_Offset"};

} // namespace FocalPlaneArrayNonUniformityCorrectionReferenceType_Names

void FocalPlaneArrayNonUniformityCorrectionReferenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FocalPlaneArrayNonUniformityCorrectionReferenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FocalPlaneArrayNonUniformityCorrectionReferenceType_Names::NUC_Reference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableNUC_Reference().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FocalPlaneArrayNonUniformityCorrectionReferenceType_Names::NUC_Offset_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableNUC_Offset().setValueFromName(*value);
      }
    }
  }
}

std::string FocalPlaneArrayNonUniformityCorrectionReferenceType::serialize(const uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FocalPlaneArrayNonUniformityCorrectionReferenceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FocalPlaneArrayNonUniformityCorrectionReferenceType_Names::Extern_Type_Name);
  }
  if (accessor.hasNUC_Reference()) {
    FocalPlaneArrayNonUniformityCorrectionReferenceEnum::serialize(accessor.getNUC_Reference(), node, FocalPlaneArrayNonUniformityCorrectionReferenceType_Names::NUC_Reference_Name, false);
  }
  if (accessor.hasNUC_Offset()) {
    FocalPlaneArrayNonUniformityCorrectionOffsetEnum::serialize(accessor.getNUC_Offset(), node, FocalPlaneArrayNonUniformityCorrectionReferenceType_Names::NUC_Offset_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& FocalPlaneArrayNonUniformityCorrectionReferenceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType>().release());
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& FocalPlaneArrayNonUniformityCorrectionReferenceType::create(const uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType> newAccessor{boost::make_unique<asb_uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FocalPlaneArrayNonUniformityCorrectionReferenceType::destroy(uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& accessor) {
  delete dynamic_cast<asb_uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType*>(&accessor);
}

} // namespace type

} // namespace uci

