/** @file CommOutageType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommOutageType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommCoverageDataType.h"
#include "../../../include/asb_uci/type/VisibleString1024Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommOutageType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString1024Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommOutageType::CommOutageType() = default;

CommOutageType::~CommOutageType() = default;

void CommOutageType::copy(const uci::type::CommOutageType& accessor) {
  copyImpl(accessor, false);
}

void CommOutageType::copyImpl(const uci::type::CommOutageType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CommCoverageDataType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CommOutageType&>(accessor);
    if (accessorImpl.hasOutageCode()) {
      setOutageCode(accessorImpl.getOutageCode());
    } else {
      clearOutageCode();
    }
    if (accessorImpl.outageDetails_Accessor) {
      setOutageDetails(*(accessorImpl.outageDetails_Accessor));
    } else {
      outageDetails_Accessor.reset();
    }
  }
}

void CommOutageType::reset() noexcept {
  CommCoverageDataType::reset();
  clearOutageCode();
  outageDetails_Accessor.reset();
}

xs::Int CommOutageType::getOutageCode() const {
  if (outageCode_Accessor) {
    return *outageCode_Accessor;
  }
  throw uci::base::UCIException("Error in getOutageCode(): An attempt was made to get an optional field that was not enabled, call hasOutageCode() to determine if it is safe to call getOutageCode()");
}

uci::type::CommOutageType& CommOutageType::setOutageCode(xs::Int value) {
  outageCode_Accessor = value;
  return *this;
}

bool CommOutageType::hasOutageCode() const noexcept {
  return outageCode_Accessor.has_value();
}

uci::type::CommOutageType& CommOutageType::clearOutageCode() noexcept {
  outageCode_Accessor.reset();
  return *this;
}

uci::type::VisibleString1024Type& CommOutageType::getOutageDetails_() const {
  if (outageDetails_Accessor) {
    return *outageDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getOutageDetails(): An attempt was made to get an optional field that was not enabled, call hasOutageDetails() to determine if it is safe to call getOutageDetails()");
}

const uci::type::VisibleString1024Type& CommOutageType::getOutageDetails() const {
  return getOutageDetails_();
}

uci::type::VisibleString1024Type& CommOutageType::getOutageDetails() {
  return getOutageDetails_();
}

uci::type::CommOutageType& CommOutageType::setOutageDetails(const uci::type::VisibleString1024Type& value) {
  return setOutageDetails(value.c_str());
}

uci::type::CommOutageType& CommOutageType::setOutageDetails(const std::string& value) {
  return setOutageDetails(value.c_str());
}

uci::type::CommOutageType& CommOutageType::setOutageDetails(const char* value) {
  enableOutageDetails().setStringValue(value);
  return *this;
}

bool CommOutageType::hasOutageDetails() const noexcept {
  return static_cast<bool>(outageDetails_Accessor);
}

uci::type::VisibleString1024Type& CommOutageType::enableOutageDetails(uci::base::accessorType::AccessorType type) {
  if (!outageDetails_Accessor) {
    outageDetails_Accessor = VisibleString1024Type::create(type);
  }
  return *outageDetails_Accessor;
}

uci::type::CommOutageType& CommOutageType::clearOutageDetails() noexcept {
  outageDetails_Accessor.reset();
  return *this;
}

std::unique_ptr<CommOutageType> CommOutageType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commOutageType : type};
  return (requestedType == uci::type::accessorType::commOutageType) ? boost::make_unique<CommOutageType>() : nullptr;
}

/**  */
namespace CommOutageType_Names {

constexpr const char* Extern_Type_Name{"CommOutageType"};
constexpr const char* OutageCode_Name{"OutageCode"};
constexpr const char* OutageDetails_Name{"OutageDetails"};

} // namespace CommOutageType_Names

void CommOutageType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommOutageType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommOutageType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommOutageType_Names::OutageCode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOutageCode(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + CommOutageType_Names::OutageDetails_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOutageDetails(*value);
      }
    }
  }
  CommCoverageDataType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CommOutageType::serialize(const uci::type::CommOutageType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommOutageType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommOutageType_Names::Extern_Type_Name);
  }
  CommCoverageDataType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasOutageCode()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getOutageCode(), node, CommOutageType_Names::OutageCode_Name);
  }
  if (accessor.hasOutageDetails()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getOutageDetails(), node, CommOutageType_Names::OutageDetails_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommOutageType& CommOutageType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommOutageType>().release());
}

uci::type::CommOutageType& CommOutageType::create(const uci::type::CommOutageType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommOutageType> newAccessor{boost::make_unique<asb_uci::type::CommOutageType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommOutageType::destroy(uci::type::CommOutageType& accessor) {
  delete dynamic_cast<asb_uci::type::CommOutageType*>(&accessor);
}

} // namespace type

} // namespace uci

