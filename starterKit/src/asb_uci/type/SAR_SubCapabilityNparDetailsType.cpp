/** @file SAR_SubCapabilityNparDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SAR_SubCapabilityNparDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/SAR_ImagingPlaneEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/SAR_ImagingPlaneEnum.h"
#include "uci/type/SAR_SubCapabilityNparDetailsType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SAR_SubCapabilityNparDetailsType::SAR_SubCapabilityNparDetailsType() = default;

SAR_SubCapabilityNparDetailsType::~SAR_SubCapabilityNparDetailsType() = default;

void SAR_SubCapabilityNparDetailsType::copy(const uci::type::SAR_SubCapabilityNparDetailsType& accessor) {
  copyImpl(accessor, false);
}

void SAR_SubCapabilityNparDetailsType::copyImpl(const uci::type::SAR_SubCapabilityNparDetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SAR_SubCapabilityNparDetailsType&>(accessor);
    if (accessorImpl.hasNPAR_ProcessApodization()) {
      setNPAR_ProcessApodization(accessorImpl.getNPAR_ProcessApodization());
    } else {
      clearNPAR_ProcessApodization();
    }
    if (accessorImpl.hasNPAR_ProcessNoiseSubtraction()) {
      setNPAR_ProcessNoiseSubtraction(accessorImpl.getNPAR_ProcessNoiseSubtraction());
    } else {
      clearNPAR_ProcessNoiseSubtraction();
    }
    if (accessorImpl.hasNPAR_ProcessSpectralShaping()) {
      setNPAR_ProcessSpectralShaping(accessorImpl.getNPAR_ProcessSpectralShaping());
    } else {
      clearNPAR_ProcessSpectralShaping();
    }
    if (accessorImpl.hasNPAR_ProcessRemap()) {
      setNPAR_ProcessRemap(accessorImpl.getNPAR_ProcessRemap());
    } else {
      clearNPAR_ProcessRemap();
    }
    if (accessorImpl.nPAR_OutputPlaneProjection_Accessor) {
      setNPAR_OutputPlaneProjection(*(accessorImpl.nPAR_OutputPlaneProjection_Accessor));
    } else {
      nPAR_OutputPlaneProjection_Accessor.reset();
    }
  }
}

void SAR_SubCapabilityNparDetailsType::reset() noexcept {
  clearNPAR_ProcessApodization();
  clearNPAR_ProcessNoiseSubtraction();
  clearNPAR_ProcessSpectralShaping();
  clearNPAR_ProcessRemap();
  nPAR_OutputPlaneProjection_Accessor.reset();
}

xs::Boolean SAR_SubCapabilityNparDetailsType::getNPAR_ProcessApodization() const {
  if (nPAR_ProcessApodization_Accessor) {
    return *nPAR_ProcessApodization_Accessor;
  }
  throw uci::base::UCIException("Error in getNPAR_ProcessApodization(): An attempt was made to get an optional field that was not enabled, call hasNPAR_ProcessApodization() to determine if it is safe to call getNPAR_ProcessApodization()");
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityNparDetailsType::setNPAR_ProcessApodization(xs::Boolean value) {
  nPAR_ProcessApodization_Accessor = value;
  return *this;
}

bool SAR_SubCapabilityNparDetailsType::hasNPAR_ProcessApodization() const noexcept {
  return nPAR_ProcessApodization_Accessor.has_value();
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityNparDetailsType::clearNPAR_ProcessApodization() noexcept {
  nPAR_ProcessApodization_Accessor.reset();
  return *this;
}

xs::Boolean SAR_SubCapabilityNparDetailsType::getNPAR_ProcessNoiseSubtraction() const {
  if (nPAR_ProcessNoiseSubtraction_Accessor) {
    return *nPAR_ProcessNoiseSubtraction_Accessor;
  }
  throw uci::base::UCIException("Error in getNPAR_ProcessNoiseSubtraction(): An attempt was made to get an optional field that was not enabled, call hasNPAR_ProcessNoiseSubtraction() to determine if it is safe to call getNPAR_ProcessNoiseSubtraction()");
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityNparDetailsType::setNPAR_ProcessNoiseSubtraction(xs::Boolean value) {
  nPAR_ProcessNoiseSubtraction_Accessor = value;
  return *this;
}

bool SAR_SubCapabilityNparDetailsType::hasNPAR_ProcessNoiseSubtraction() const noexcept {
  return nPAR_ProcessNoiseSubtraction_Accessor.has_value();
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityNparDetailsType::clearNPAR_ProcessNoiseSubtraction() noexcept {
  nPAR_ProcessNoiseSubtraction_Accessor.reset();
  return *this;
}

xs::Boolean SAR_SubCapabilityNparDetailsType::getNPAR_ProcessSpectralShaping() const {
  if (nPAR_ProcessSpectralShaping_Accessor) {
    return *nPAR_ProcessSpectralShaping_Accessor;
  }
  throw uci::base::UCIException("Error in getNPAR_ProcessSpectralShaping(): An attempt was made to get an optional field that was not enabled, call hasNPAR_ProcessSpectralShaping() to determine if it is safe to call getNPAR_ProcessSpectralShaping()");
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityNparDetailsType::setNPAR_ProcessSpectralShaping(xs::Boolean value) {
  nPAR_ProcessSpectralShaping_Accessor = value;
  return *this;
}

bool SAR_SubCapabilityNparDetailsType::hasNPAR_ProcessSpectralShaping() const noexcept {
  return nPAR_ProcessSpectralShaping_Accessor.has_value();
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityNparDetailsType::clearNPAR_ProcessSpectralShaping() noexcept {
  nPAR_ProcessSpectralShaping_Accessor.reset();
  return *this;
}

xs::Boolean SAR_SubCapabilityNparDetailsType::getNPAR_ProcessRemap() const {
  if (nPAR_ProcessRemap_Accessor) {
    return *nPAR_ProcessRemap_Accessor;
  }
  throw uci::base::UCIException("Error in getNPAR_ProcessRemap(): An attempt was made to get an optional field that was not enabled, call hasNPAR_ProcessRemap() to determine if it is safe to call getNPAR_ProcessRemap()");
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityNparDetailsType::setNPAR_ProcessRemap(xs::Boolean value) {
  nPAR_ProcessRemap_Accessor = value;
  return *this;
}

bool SAR_SubCapabilityNparDetailsType::hasNPAR_ProcessRemap() const noexcept {
  return nPAR_ProcessRemap_Accessor.has_value();
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityNparDetailsType::clearNPAR_ProcessRemap() noexcept {
  nPAR_ProcessRemap_Accessor.reset();
  return *this;
}

uci::type::SAR_ImagingPlaneEnum& SAR_SubCapabilityNparDetailsType::getNPAR_OutputPlaneProjection_() const {
  if (nPAR_OutputPlaneProjection_Accessor) {
    return *nPAR_OutputPlaneProjection_Accessor;
  }
  throw uci::base::UCIException("Error in getNPAR_OutputPlaneProjection(): An attempt was made to get an optional field that was not enabled, call hasNPAR_OutputPlaneProjection() to determine if it is safe to call getNPAR_OutputPlaneProjection()");
}

const uci::type::SAR_ImagingPlaneEnum& SAR_SubCapabilityNparDetailsType::getNPAR_OutputPlaneProjection() const {
  return getNPAR_OutputPlaneProjection_();
}

uci::type::SAR_ImagingPlaneEnum& SAR_SubCapabilityNparDetailsType::getNPAR_OutputPlaneProjection() {
  return getNPAR_OutputPlaneProjection_();
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityNparDetailsType::setNPAR_OutputPlaneProjection(const uci::type::SAR_ImagingPlaneEnum& accessor) {
  enableNPAR_OutputPlaneProjection();
  if (&accessor != nPAR_OutputPlaneProjection_Accessor.get()) {
    nPAR_OutputPlaneProjection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityNparDetailsType::setNPAR_OutputPlaneProjection(const uci::type::SAR_ImagingPlaneEnum::EnumerationItem value) {
  enableNPAR_OutputPlaneProjection().setValue(value);
  return *this;
}

bool SAR_SubCapabilityNparDetailsType::hasNPAR_OutputPlaneProjection() const noexcept {
  return static_cast<bool>(nPAR_OutputPlaneProjection_Accessor);
}

uci::type::SAR_ImagingPlaneEnum& SAR_SubCapabilityNparDetailsType::enableNPAR_OutputPlaneProjection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_ImagingPlaneEnum : type};
  if ((!nPAR_OutputPlaneProjection_Accessor) || (nPAR_OutputPlaneProjection_Accessor->getAccessorType() != requestedType)) {
    nPAR_OutputPlaneProjection_Accessor = SAR_ImagingPlaneEnum::create(requestedType);
    if (!nPAR_OutputPlaneProjection_Accessor) {
      throw uci::base::UCIException("Error in enableNPAR_OutputPlaneProjection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nPAR_OutputPlaneProjection_Accessor;
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityNparDetailsType::clearNPAR_OutputPlaneProjection() noexcept {
  nPAR_OutputPlaneProjection_Accessor.reset();
  return *this;
}

std::unique_ptr<SAR_SubCapabilityNparDetailsType> SAR_SubCapabilityNparDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_SubCapabilityNparDetailsType : type};
  return (requestedType == uci::type::accessorType::sAR_SubCapabilityNparDetailsType) ? boost::make_unique<SAR_SubCapabilityNparDetailsType>() : nullptr;
}

/**  */
namespace SAR_SubCapabilityNparDetailsType_Names {

constexpr const char* Extern_Type_Name{"SAR_SubCapabilityNparDetailsType"};
constexpr const char* NPAR_ProcessApodization_Name{"NPAR_ProcessApodization"};
constexpr const char* NPAR_ProcessNoiseSubtraction_Name{"NPAR_ProcessNoiseSubtraction"};
constexpr const char* NPAR_ProcessSpectralShaping_Name{"NPAR_ProcessSpectralShaping"};
constexpr const char* NPAR_ProcessRemap_Name{"NPAR_ProcessRemap"};
constexpr const char* NPAR_OutputPlaneProjection_Name{"NPAR_OutputPlaneProjection"};

} // namespace SAR_SubCapabilityNparDetailsType_Names

void SAR_SubCapabilityNparDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_SubCapabilityNparDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SAR_SubCapabilityNparDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SAR_SubCapabilityNparDetailsType_Names::NPAR_ProcessApodization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNPAR_ProcessApodization(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_SubCapabilityNparDetailsType_Names::NPAR_ProcessNoiseSubtraction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNPAR_ProcessNoiseSubtraction(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_SubCapabilityNparDetailsType_Names::NPAR_ProcessSpectralShaping_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNPAR_ProcessSpectralShaping(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_SubCapabilityNparDetailsType_Names::NPAR_ProcessRemap_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNPAR_ProcessRemap(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_SubCapabilityNparDetailsType_Names::NPAR_OutputPlaneProjection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableNPAR_OutputPlaneProjection().setValueFromName(*value);
      }
    }
  }
}

std::string SAR_SubCapabilityNparDetailsType::serialize(const uci::type::SAR_SubCapabilityNparDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SAR_SubCapabilityNparDetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SAR_SubCapabilityNparDetailsType_Names::Extern_Type_Name);
  }
  if (accessor.hasNPAR_ProcessApodization()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getNPAR_ProcessApodization(), node, SAR_SubCapabilityNparDetailsType_Names::NPAR_ProcessApodization_Name);
  }
  if (accessor.hasNPAR_ProcessNoiseSubtraction()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getNPAR_ProcessNoiseSubtraction(), node, SAR_SubCapabilityNparDetailsType_Names::NPAR_ProcessNoiseSubtraction_Name);
  }
  if (accessor.hasNPAR_ProcessSpectralShaping()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getNPAR_ProcessSpectralShaping(), node, SAR_SubCapabilityNparDetailsType_Names::NPAR_ProcessSpectralShaping_Name);
  }
  if (accessor.hasNPAR_ProcessRemap()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getNPAR_ProcessRemap(), node, SAR_SubCapabilityNparDetailsType_Names::NPAR_ProcessRemap_Name);
  }
  if (accessor.hasNPAR_OutputPlaneProjection()) {
    SAR_ImagingPlaneEnum::serialize(accessor.getNPAR_OutputPlaneProjection(), node, SAR_SubCapabilityNparDetailsType_Names::NPAR_OutputPlaneProjection_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityNparDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SAR_SubCapabilityNparDetailsType>().release());
}

uci::type::SAR_SubCapabilityNparDetailsType& SAR_SubCapabilityNparDetailsType::create(const uci::type::SAR_SubCapabilityNparDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SAR_SubCapabilityNparDetailsType> newAccessor{boost::make_unique<asb_uci::type::SAR_SubCapabilityNparDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SAR_SubCapabilityNparDetailsType::destroy(uci::type::SAR_SubCapabilityNparDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::SAR_SubCapabilityNparDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

