/** @file OrbitalSurveillanceSensorMinimumSizeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitalSurveillanceSensorMinimumSizeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PercentileRCSType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AreaType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceSensorMinimumSizeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentileRCSType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisualMagnitudeType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalSurveillanceSensorMinimumSizeType::OrbitalSurveillanceSensorMinimumSizeType() = default;

OrbitalSurveillanceSensorMinimumSizeType::~OrbitalSurveillanceSensorMinimumSizeType() = default;

void OrbitalSurveillanceSensorMinimumSizeType::copy(const uci::type::OrbitalSurveillanceSensorMinimumSizeType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalSurveillanceSensorMinimumSizeType::copyImpl(const uci::type::OrbitalSurveillanceSensorMinimumSizeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalSurveillanceSensorMinimumSizeType&>(accessor);
    if (accessorImpl.radarCrossSection_Accessor) {
      setRadarCrossSection(*(accessorImpl.radarCrossSection_Accessor));
    } else {
      radarCrossSection_Accessor.reset();
    }
    visualMagnitude_Accessor = (accessorImpl.visualMagnitude_Accessor ? accessorImpl.visualMagnitude_Accessor : boost::none);
    area_Accessor = (accessorImpl.area_Accessor ? accessorImpl.area_Accessor : boost::none);
    intensity_Accessor = (accessorImpl.intensity_Accessor ? accessorImpl.intensity_Accessor : boost::none);
  }
}

void OrbitalSurveillanceSensorMinimumSizeType::reset() noexcept {
  radarCrossSection_Accessor.reset();
  visualMagnitude_Accessor.reset();
  area_Accessor.reset();
  intensity_Accessor.reset();
}

uci::type::OrbitalSurveillanceSensorMinimumSizeType::OrbitalSurveillanceSensorMinimumSizeTypeChoice OrbitalSurveillanceSensorMinimumSizeType::getOrbitalSurveillanceSensorMinimumSizeTypeChoiceOrdinal() const noexcept {
  if (radarCrossSection_Accessor) {
    return ORBITALSURVEILLANCESENSORMINIMUMSIZETYPE_CHOICE_RADARCROSSSECTION;
  }
  if (visualMagnitude_Accessor) {
    return ORBITALSURVEILLANCESENSORMINIMUMSIZETYPE_CHOICE_VISUALMAGNITUDE;
  }
  if (area_Accessor) {
    return ORBITALSURVEILLANCESENSORMINIMUMSIZETYPE_CHOICE_AREA;
  }
  if (intensity_Accessor) {
    return ORBITALSURVEILLANCESENSORMINIMUMSIZETYPE_CHOICE_INTENSITY;
  }
  return ORBITALSURVEILLANCESENSORMINIMUMSIZETYPE_CHOICE_NONE;
}

uci::type::OrbitalSurveillanceSensorMinimumSizeType& OrbitalSurveillanceSensorMinimumSizeType::setOrbitalSurveillanceSensorMinimumSizeTypeChoiceOrdinal(uci::type::OrbitalSurveillanceSensorMinimumSizeType::OrbitalSurveillanceSensorMinimumSizeTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITALSURVEILLANCESENSORMINIMUMSIZETYPE_CHOICE_RADARCROSSSECTION:
      chooseRadarCrossSection("setOrbitalSurveillanceSensorMinimumSizeTypeChoiceOrdinal", type);
      break;
    case ORBITALSURVEILLANCESENSORMINIMUMSIZETYPE_CHOICE_VISUALMAGNITUDE:
      chooseVisualMagnitude();
      break;
    case ORBITALSURVEILLANCESENSORMINIMUMSIZETYPE_CHOICE_AREA:
      chooseArea();
      break;
    case ORBITALSURVEILLANCESENSORMINIMUMSIZETYPE_CHOICE_INTENSITY:
      chooseIntensity();
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitalSurveillanceSensorMinimumSizeTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PercentileRCSType& OrbitalSurveillanceSensorMinimumSizeType::getRadarCrossSection_() const {
  if (radarCrossSection_Accessor) {
    return *radarCrossSection_Accessor;
  }
  throw uci::base::UCIException("Error in getRadarCrossSection(): Unable to get RadarCrossSection, field not selected");
}

const uci::type::PercentileRCSType& OrbitalSurveillanceSensorMinimumSizeType::getRadarCrossSection() const {
  return getRadarCrossSection_();
}

uci::type::PercentileRCSType& OrbitalSurveillanceSensorMinimumSizeType::getRadarCrossSection() {
  return getRadarCrossSection_();
}

uci::type::OrbitalSurveillanceSensorMinimumSizeType& OrbitalSurveillanceSensorMinimumSizeType::setRadarCrossSection(const uci::type::PercentileRCSType& accessor) {
  chooseRadarCrossSection();
  if (&accessor != radarCrossSection_Accessor.get()) {
    radarCrossSection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceSensorMinimumSizeType::isRadarCrossSection() const noexcept {
  return static_cast<bool>(radarCrossSection_Accessor);
}

uci::type::PercentileRCSType& OrbitalSurveillanceSensorMinimumSizeType::chooseRadarCrossSection(const std::string& method, uci::base::accessorType::AccessorType type) {
  visualMagnitude_Accessor.reset();
  area_Accessor.reset();
  intensity_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::percentileRCSType : type};
  if ((!radarCrossSection_Accessor) || (radarCrossSection_Accessor->getAccessorType() != requestedType)) {
    radarCrossSection_Accessor = PercentileRCSType::create(type);
    if (!radarCrossSection_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *radarCrossSection_Accessor;
}

uci::type::PercentileRCSType& OrbitalSurveillanceSensorMinimumSizeType::chooseRadarCrossSection(uci::base::accessorType::AccessorType type) {
  return chooseRadarCrossSection("chooseRadarCrossSection", type);
}

uci::type::VisualMagnitudeTypeValue OrbitalSurveillanceSensorMinimumSizeType::getVisualMagnitude() const {
  if (visualMagnitude_Accessor) {
    return *visualMagnitude_Accessor;
  }
  throw uci::base::UCIException("Error in getVisualMagnitude(): Unable to get VisualMagnitude, field not selected");
}

uci::type::OrbitalSurveillanceSensorMinimumSizeType& OrbitalSurveillanceSensorMinimumSizeType::setVisualMagnitude(uci::type::VisualMagnitudeTypeValue value) {
  chooseVisualMagnitude();
  visualMagnitude_Accessor = value;
  return *this;
}

bool OrbitalSurveillanceSensorMinimumSizeType::isVisualMagnitude() const noexcept {
  return static_cast<bool>(visualMagnitude_Accessor);
}

void OrbitalSurveillanceSensorMinimumSizeType::chooseVisualMagnitude() {
  radarCrossSection_Accessor.reset();
  area_Accessor.reset();
  intensity_Accessor.reset();
  if (!visualMagnitude_Accessor) {
    visualMagnitude_Accessor = boost::optional<asb_xs::Double>();
  }
}

uci::type::AreaTypeValue OrbitalSurveillanceSensorMinimumSizeType::getArea() const {
  if (area_Accessor) {
    return *area_Accessor;
  }
  throw uci::base::UCIException("Error in getArea(): Unable to get Area, field not selected");
}

uci::type::OrbitalSurveillanceSensorMinimumSizeType& OrbitalSurveillanceSensorMinimumSizeType::setArea(uci::type::AreaTypeValue value) {
  chooseArea();
  area_Accessor = value;
  return *this;
}

bool OrbitalSurveillanceSensorMinimumSizeType::isArea() const noexcept {
  return static_cast<bool>(area_Accessor);
}

void OrbitalSurveillanceSensorMinimumSizeType::chooseArea() {
  radarCrossSection_Accessor.reset();
  visualMagnitude_Accessor.reset();
  intensity_Accessor.reset();
  if (!area_Accessor) {
    area_Accessor = boost::optional<asb_xs::Double>();
  }
}

xs::Double OrbitalSurveillanceSensorMinimumSizeType::getIntensity() const {
  if (intensity_Accessor) {
    return *intensity_Accessor;
  }
  throw uci::base::UCIException("Error in getIntensity(): Unable to get Intensity, field not selected");
}

uci::type::OrbitalSurveillanceSensorMinimumSizeType& OrbitalSurveillanceSensorMinimumSizeType::setIntensity(xs::Double value) {
  chooseIntensity();
  intensity_Accessor = value;
  return *this;
}

bool OrbitalSurveillanceSensorMinimumSizeType::isIntensity() const noexcept {
  return static_cast<bool>(intensity_Accessor);
}

void OrbitalSurveillanceSensorMinimumSizeType::chooseIntensity() {
  radarCrossSection_Accessor.reset();
  visualMagnitude_Accessor.reset();
  area_Accessor.reset();
  if (!intensity_Accessor) {
    intensity_Accessor = boost::optional<asb_xs::Double>();
  }
}

std::unique_ptr<OrbitalSurveillanceSensorMinimumSizeType> OrbitalSurveillanceSensorMinimumSizeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceSensorMinimumSizeType : type};
  return (requestedType == uci::type::accessorType::orbitalSurveillanceSensorMinimumSizeType) ? boost::make_unique<OrbitalSurveillanceSensorMinimumSizeType>() : nullptr;
}

/**  */
namespace OrbitalSurveillanceSensorMinimumSizeType_Names {

constexpr const char* Extern_Type_Name{"OrbitalSurveillanceSensorMinimumSizeType"};
constexpr const char* RadarCrossSection_Name{"RadarCrossSection"};
constexpr const char* VisualMagnitude_Name{"VisualMagnitude"};
constexpr const char* Area_Name{"Area"};
constexpr const char* Intensity_Name{"Intensity"};

} // namespace OrbitalSurveillanceSensorMinimumSizeType_Names

void OrbitalSurveillanceSensorMinimumSizeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalSurveillanceSensorMinimumSizeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalSurveillanceSensorMinimumSizeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceSensorMinimumSizeType_Names::RadarCrossSection_Name) {
      PercentileRCSType::deserialize(valueType.second, accessor.chooseRadarCrossSection(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceSensorMinimumSizeType_Names::VisualMagnitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVisualMagnitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceSensorMinimumSizeType_Names::Area_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setArea(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceSensorMinimumSizeType_Names::Intensity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIntensity(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string OrbitalSurveillanceSensorMinimumSizeType::serialize(const uci::type::OrbitalSurveillanceSensorMinimumSizeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalSurveillanceSensorMinimumSizeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalSurveillanceSensorMinimumSizeType_Names::Extern_Type_Name);
  }
  if (accessor.isRadarCrossSection()) {
    PercentileRCSType::serialize(accessor.getRadarCrossSection(), node, OrbitalSurveillanceSensorMinimumSizeType_Names::RadarCrossSection_Name);
  } else if (accessor.isVisualMagnitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVisualMagnitude(), node, OrbitalSurveillanceSensorMinimumSizeType_Names::VisualMagnitude_Name);
  } else if (accessor.isArea()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getArea(), node, OrbitalSurveillanceSensorMinimumSizeType_Names::Area_Name);
  } else if (accessor.isIntensity()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getIntensity(), node, OrbitalSurveillanceSensorMinimumSizeType_Names::Intensity_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalSurveillanceSensorMinimumSizeType& OrbitalSurveillanceSensorMinimumSizeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalSurveillanceSensorMinimumSizeType>().release());
}

uci::type::OrbitalSurveillanceSensorMinimumSizeType& OrbitalSurveillanceSensorMinimumSizeType::create(const uci::type::OrbitalSurveillanceSensorMinimumSizeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalSurveillanceSensorMinimumSizeType> newAccessor{boost::make_unique<asb_uci::type::OrbitalSurveillanceSensorMinimumSizeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalSurveillanceSensorMinimumSizeType::destroy(uci::type::OrbitalSurveillanceSensorMinimumSizeType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalSurveillanceSensorMinimumSizeType*>(&accessor);
}

} // namespace type

} // namespace uci

