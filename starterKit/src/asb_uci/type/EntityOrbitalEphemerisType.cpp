/** @file EntityOrbitalEphemerisType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EntityOrbitalEphemerisType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/EntityOrbitalEphemerisID_Type.h"
#include "../../../include/asb_uci/type/OrbitalEphemerisParametersType.h"
#include "../../../include/asb_uci/type/OrbitalEphemerisType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityOrbitalEphemerisID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityOrbitalEphemerisType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalEphemerisParametersType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalEphemerisType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityOrbitalEphemerisType::EntityOrbitalEphemerisType()
  : ephemerisID_Accessor{boost::make_unique<EntityOrbitalEphemerisID_Type>()},
    entityID_Accessor{boost::make_unique<EntityID_Type>()},
    parameters_Accessor{boost::make_unique<OrbitalEphemerisParametersType>()},
    ephemeris_Accessor{boost::make_unique<OrbitalEphemerisType>()} {
}

EntityOrbitalEphemerisType::~EntityOrbitalEphemerisType() = default;

void EntityOrbitalEphemerisType::copy(const uci::type::EntityOrbitalEphemerisType& accessor) {
  copyImpl(accessor, false);
}

void EntityOrbitalEphemerisType::copyImpl(const uci::type::EntityOrbitalEphemerisType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::entityOrbitalEphemerisType)) {
      const auto& accessorImpl = dynamic_cast<const EntityOrbitalEphemerisType&>(accessor);
      setEphemerisID(*(accessorImpl.ephemerisID_Accessor));
      setEntityID(*(accessorImpl.entityID_Accessor));
      setParameters(*(accessorImpl.parameters_Accessor));
      setEphemeris(*(accessorImpl.ephemeris_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void EntityOrbitalEphemerisType::reset() noexcept {
  ephemerisID_Accessor->reset();
  if (entityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    entityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    entityID_Accessor->reset();
  }
  parameters_Accessor->reset();
  ephemeris_Accessor->reset();
}

const uci::type::EntityOrbitalEphemerisID_Type& EntityOrbitalEphemerisType::getEphemerisID() const {
  return *ephemerisID_Accessor;
}

uci::type::EntityOrbitalEphemerisID_Type& EntityOrbitalEphemerisType::getEphemerisID() {
  return *ephemerisID_Accessor;
}

uci::type::EntityOrbitalEphemerisType& EntityOrbitalEphemerisType::setEphemerisID(const uci::type::EntityOrbitalEphemerisID_Type& accessor) {
  if (&accessor != ephemerisID_Accessor.get()) {
    ephemerisID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityID_Type& EntityOrbitalEphemerisType::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityID_Type& EntityOrbitalEphemerisType::getEntityID() {
  return *entityID_Accessor;
}

uci::type::EntityOrbitalEphemerisType& EntityOrbitalEphemerisType::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& EntityOrbitalEphemerisType::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

const uci::type::OrbitalEphemerisParametersType& EntityOrbitalEphemerisType::getParameters() const {
  return *parameters_Accessor;
}

uci::type::OrbitalEphemerisParametersType& EntityOrbitalEphemerisType::getParameters() {
  return *parameters_Accessor;
}

uci::type::EntityOrbitalEphemerisType& EntityOrbitalEphemerisType::setParameters(const uci::type::OrbitalEphemerisParametersType& accessor) {
  if (&accessor != parameters_Accessor.get()) {
    parameters_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitalEphemerisType& EntityOrbitalEphemerisType::getEphemeris() const {
  return *ephemeris_Accessor;
}

uci::type::OrbitalEphemerisType& EntityOrbitalEphemerisType::getEphemeris() {
  return *ephemeris_Accessor;
}

uci::type::EntityOrbitalEphemerisType& EntityOrbitalEphemerisType::setEphemeris(const uci::type::OrbitalEphemerisType& accessor) {
  if (&accessor != ephemeris_Accessor.get()) {
    ephemeris_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<EntityOrbitalEphemerisType> EntityOrbitalEphemerisType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityOrbitalEphemerisType : type};
  return std::unique_ptr<EntityOrbitalEphemerisType>(dynamic_cast<EntityOrbitalEphemerisType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace EntityOrbitalEphemerisType_Names {

constexpr const char* Extern_Type_Name{"EntityOrbitalEphemerisType"};
constexpr const char* EphemerisID_Name{"EphemerisID"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* Parameters_Name{"Parameters"};
constexpr const char* Ephemeris_Name{"Ephemeris"};

} // namespace EntityOrbitalEphemerisType_Names

void EntityOrbitalEphemerisType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityOrbitalEphemerisType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityOrbitalEphemerisType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityOrbitalEphemerisType_Names::EphemerisID_Name) {
      EntityOrbitalEphemerisID_Type::deserialize(valueType.second, accessor.getEphemerisID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalEphemerisType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalEphemerisType_Names::Parameters_Name) {
      OrbitalEphemerisParametersType::deserialize(valueType.second, accessor.getParameters(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalEphemerisType_Names::Ephemeris_Name) {
      OrbitalEphemerisType::deserialize(valueType.second, accessor.getEphemeris(), nodeName, nsPrefix);
    }
  }
}

std::string EntityOrbitalEphemerisType::serialize(const uci::type::EntityOrbitalEphemerisType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityOrbitalEphemerisType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::entityOrbitalEphemerisType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityOrbitalEphemerisType_Names::Extern_Type_Name);
    }
    EntityOrbitalEphemerisID_Type::serialize(accessor.getEphemerisID(), node, EntityOrbitalEphemerisType_Names::EphemerisID_Name);
    EntityID_Type::serialize(accessor.getEntityID(), node, EntityOrbitalEphemerisType_Names::EntityID_Name);
    OrbitalEphemerisParametersType::serialize(accessor.getParameters(), node, EntityOrbitalEphemerisType_Names::Parameters_Name);
    OrbitalEphemerisType::serialize(accessor.getEphemeris(), node, EntityOrbitalEphemerisType_Names::Ephemeris_Name);
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityOrbitalEphemerisType& EntityOrbitalEphemerisType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityOrbitalEphemerisType>().release());
}

uci::type::EntityOrbitalEphemerisType& EntityOrbitalEphemerisType::create(const uci::type::EntityOrbitalEphemerisType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityOrbitalEphemerisType> newAccessor{boost::make_unique<asb_uci::type::EntityOrbitalEphemerisType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityOrbitalEphemerisType::destroy(uci::type::EntityOrbitalEphemerisType& accessor) {
  delete dynamic_cast<asb_uci::type::EntityOrbitalEphemerisType*>(&accessor);
}

} // namespace type

} // namespace uci

