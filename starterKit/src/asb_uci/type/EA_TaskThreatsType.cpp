/** @file EA_TaskThreatsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EA_TaskThreatsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EA_TaskSuppressionConstraintsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EA_TaskSuppressionConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EA_TaskThreatsType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EA_TaskThreatsType::EA_TaskThreatsType() = default;

EA_TaskThreatsType::~EA_TaskThreatsType() = default;

void EA_TaskThreatsType::copy(const uci::type::EA_TaskThreatsType& accessor) {
  copyImpl(accessor, false);
}

void EA_TaskThreatsType::copyImpl(const uci::type::EA_TaskThreatsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EA_TaskThreatsType&>(accessor);
    suppressAll_Accessor = (accessorImpl.suppressAll_Accessor ? accessorImpl.suppressAll_Accessor : boost::none);
    if (accessorImpl.suppressionConstraints_Accessor) {
      setSuppressionConstraints(*(accessorImpl.suppressionConstraints_Accessor));
    } else {
      suppressionConstraints_Accessor.reset();
    }
  }
}

void EA_TaskThreatsType::reset() noexcept {
  suppressAll_Accessor.reset();
  suppressionConstraints_Accessor.reset();
}

uci::type::EA_TaskThreatsType::EA_TaskThreatsTypeChoice EA_TaskThreatsType::getEA_TaskThreatsTypeChoiceOrdinal() const noexcept {
  if (suppressAll_Accessor) {
    return EA_TASKTHREATSTYPE_CHOICE_SUPPRESSALL;
  }
  if (suppressionConstraints_Accessor) {
    return EA_TASKTHREATSTYPE_CHOICE_SUPPRESSIONCONSTRAINTS;
  }
  return EA_TASKTHREATSTYPE_CHOICE_NONE;
}

uci::type::EA_TaskThreatsType& EA_TaskThreatsType::setEA_TaskThreatsTypeChoiceOrdinal(uci::type::EA_TaskThreatsType::EA_TaskThreatsTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case EA_TASKTHREATSTYPE_CHOICE_SUPPRESSALL:
      chooseSuppressAll();
      break;
    case EA_TASKTHREATSTYPE_CHOICE_SUPPRESSIONCONSTRAINTS:
      chooseSuppressionConstraints();
      break;
    default:
      throw uci::base::UCIException("Error in setEA_TaskThreatsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

xs::Boolean EA_TaskThreatsType::getSuppressAll() const {
  if (suppressAll_Accessor) {
    return *suppressAll_Accessor;
  }
  throw uci::base::UCIException("Error in getSuppressAll(): Unable to get SuppressAll, field not selected");
}

uci::type::EA_TaskThreatsType& EA_TaskThreatsType::setSuppressAll(xs::Boolean value) {
  chooseSuppressAll();
  suppressAll_Accessor = value;
  return *this;
}

bool EA_TaskThreatsType::isSuppressAll() const noexcept {
  return static_cast<bool>(suppressAll_Accessor);
}

void EA_TaskThreatsType::chooseSuppressAll() {
  suppressionConstraints_Accessor.reset();
  if (!suppressAll_Accessor) {
    suppressAll_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

uci::type::EA_TaskThreatsType::SuppressionConstraints& EA_TaskThreatsType::getSuppressionConstraints_() const {
  if (suppressionConstraints_Accessor) {
    return *suppressionConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getSuppressionConstraints(): Unable to get SuppressionConstraints, field not selected");
}

const uci::type::EA_TaskThreatsType::SuppressionConstraints& EA_TaskThreatsType::getSuppressionConstraints() const {
  return getSuppressionConstraints_();
}

uci::type::EA_TaskThreatsType::SuppressionConstraints& EA_TaskThreatsType::getSuppressionConstraints() {
  return getSuppressionConstraints_();
}

uci::type::EA_TaskThreatsType& EA_TaskThreatsType::setSuppressionConstraints(const uci::type::EA_TaskThreatsType::SuppressionConstraints& accessor) {
  chooseSuppressionConstraints();
  if (&accessor != suppressionConstraints_Accessor.get()) {
    suppressionConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_TaskThreatsType::isSuppressionConstraints() const noexcept {
  return static_cast<bool>(suppressionConstraints_Accessor);
}

uci::type::EA_TaskThreatsType::SuppressionConstraints& EA_TaskThreatsType::chooseSuppressionConstraints() {
  suppressAll_Accessor.reset();
  if (!suppressionConstraints_Accessor) {
    suppressionConstraints_Accessor = boost::make_unique<SuppressionConstraints>(1, SIZE_MAX);
  }
  return *suppressionConstraints_Accessor;
}

std::unique_ptr<EA_TaskThreatsType> EA_TaskThreatsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_TaskThreatsType : type};
  return (requestedType == uci::type::accessorType::eA_TaskThreatsType) ? boost::make_unique<EA_TaskThreatsType>() : nullptr;
}

/**  */
namespace EA_TaskThreatsType_Names {

constexpr const char* Extern_Type_Name{"EA_TaskThreatsType"};
constexpr const char* SuppressAll_Name{"SuppressAll"};
constexpr const char* SuppressionConstraints_Name{"SuppressionConstraints"};

} // namespace EA_TaskThreatsType_Names

void EA_TaskThreatsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_TaskThreatsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EA_TaskThreatsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EA_TaskThreatsType_Names::SuppressAll_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSuppressAll(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + EA_TaskThreatsType_Names::SuppressionConstraints_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EA_TaskThreatsType::SuppressionConstraints& boundedList = accessor.chooseSuppressionConstraints();
        const uci::type::EA_TaskThreatsType::SuppressionConstraints::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EA_TaskSuppressionConstraintsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string EA_TaskThreatsType::serialize(const uci::type::EA_TaskThreatsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EA_TaskThreatsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EA_TaskThreatsType_Names::Extern_Type_Name);
  }
  if (accessor.isSuppressAll()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSuppressAll(), node, EA_TaskThreatsType_Names::SuppressAll_Name);
  } else if (accessor.isSuppressionConstraints()) {
    {
      const uci::type::EA_TaskThreatsType::SuppressionConstraints& boundedList = accessor.getSuppressionConstraints();
      for (uci::type::EA_TaskThreatsType::SuppressionConstraints::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::EA_TaskSuppressionConstraintsType::serialize(boundedList.at(i), node, EA_TaskThreatsType_Names::SuppressionConstraints_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EA_TaskThreatsType& EA_TaskThreatsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EA_TaskThreatsType>().release());
}

uci::type::EA_TaskThreatsType& EA_TaskThreatsType::create(const uci::type::EA_TaskThreatsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EA_TaskThreatsType> newAccessor{boost::make_unique<asb_uci::type::EA_TaskThreatsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EA_TaskThreatsType::destroy(uci::type::EA_TaskThreatsType& accessor) {
  delete dynamic_cast<asb_uci::type::EA_TaskThreatsType*>(&accessor);
}

} // namespace type

} // namespace uci

