/** @file SAR_CapabilityCommandSubCapabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SAR_CapabilityCommandSubCapabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ISAR_SubCapabilityType.h"
#include "../../../include/asb_uci/type/SAR_SubCapabilityType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ISAR_SubCapabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SAR_CapabilityCommandSubCapabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SAR_SubCapabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SAR_CapabilityCommandSubCapabilityType::SAR_CapabilityCommandSubCapabilityType() = default;

SAR_CapabilityCommandSubCapabilityType::~SAR_CapabilityCommandSubCapabilityType() = default;

void SAR_CapabilityCommandSubCapabilityType::copy(const uci::type::SAR_CapabilityCommandSubCapabilityType& accessor) {
  copyImpl(accessor, false);
}

void SAR_CapabilityCommandSubCapabilityType::copyImpl(const uci::type::SAR_CapabilityCommandSubCapabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SAR_CapabilityCommandSubCapabilityType&>(accessor);
    if (accessorImpl.sAR_Accessor) {
      setSAR(*(accessorImpl.sAR_Accessor));
    } else {
      sAR_Accessor.reset();
    }
    if (accessorImpl.iSAR_Accessor) {
      setISAR(*(accessorImpl.iSAR_Accessor));
    } else {
      iSAR_Accessor.reset();
    }
  }
}

void SAR_CapabilityCommandSubCapabilityType::reset() noexcept {
  sAR_Accessor.reset();
  iSAR_Accessor.reset();
}

uci::type::SAR_CapabilityCommandSubCapabilityType::SAR_CapabilityCommandSubCapabilityTypeChoice SAR_CapabilityCommandSubCapabilityType::getSAR_CapabilityCommandSubCapabilityTypeChoiceOrdinal() const noexcept {
  if (sAR_Accessor) {
    return SAR_CAPABILITYCOMMANDSUBCAPABILITYTYPE_CHOICE_SAR;
  }
  if (iSAR_Accessor) {
    return SAR_CAPABILITYCOMMANDSUBCAPABILITYTYPE_CHOICE_ISAR;
  }
  return SAR_CAPABILITYCOMMANDSUBCAPABILITYTYPE_CHOICE_NONE;
}

uci::type::SAR_CapabilityCommandSubCapabilityType& SAR_CapabilityCommandSubCapabilityType::setSAR_CapabilityCommandSubCapabilityTypeChoiceOrdinal(uci::type::SAR_CapabilityCommandSubCapabilityType::SAR_CapabilityCommandSubCapabilityTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case SAR_CAPABILITYCOMMANDSUBCAPABILITYTYPE_CHOICE_SAR:
      chooseSAR("setSAR_CapabilityCommandSubCapabilityTypeChoiceOrdinal", type);
      break;
    case SAR_CAPABILITYCOMMANDSUBCAPABILITYTYPE_CHOICE_ISAR:
      chooseISAR("setSAR_CapabilityCommandSubCapabilityTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setSAR_CapabilityCommandSubCapabilityTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SAR_SubCapabilityType& SAR_CapabilityCommandSubCapabilityType::getSAR_() const {
  if (sAR_Accessor) {
    return *sAR_Accessor;
  }
  throw uci::base::UCIException("Error in getSAR(): Unable to get SAR, field not selected");
}

const uci::type::SAR_SubCapabilityType& SAR_CapabilityCommandSubCapabilityType::getSAR() const {
  return getSAR_();
}

uci::type::SAR_SubCapabilityType& SAR_CapabilityCommandSubCapabilityType::getSAR() {
  return getSAR_();
}

uci::type::SAR_CapabilityCommandSubCapabilityType& SAR_CapabilityCommandSubCapabilityType::setSAR(const uci::type::SAR_SubCapabilityType& accessor) {
  chooseSAR();
  if (&accessor != sAR_Accessor.get()) {
    sAR_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CapabilityCommandSubCapabilityType::isSAR() const noexcept {
  return static_cast<bool>(sAR_Accessor);
}

uci::type::SAR_SubCapabilityType& SAR_CapabilityCommandSubCapabilityType::chooseSAR(const std::string& method, uci::base::accessorType::AccessorType type) {
  iSAR_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_SubCapabilityType : type};
  if ((!sAR_Accessor) || (sAR_Accessor->getAccessorType() != requestedType)) {
    sAR_Accessor = SAR_SubCapabilityType::create(type);
    if (!sAR_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sAR_Accessor;
}

uci::type::SAR_SubCapabilityType& SAR_CapabilityCommandSubCapabilityType::chooseSAR(uci::base::accessorType::AccessorType type) {
  return chooseSAR("chooseSAR", type);
}

uci::type::ISAR_SubCapabilityType& SAR_CapabilityCommandSubCapabilityType::getISAR_() const {
  if (iSAR_Accessor) {
    return *iSAR_Accessor;
  }
  throw uci::base::UCIException("Error in getISAR(): Unable to get ISAR, field not selected");
}

const uci::type::ISAR_SubCapabilityType& SAR_CapabilityCommandSubCapabilityType::getISAR() const {
  return getISAR_();
}

uci::type::ISAR_SubCapabilityType& SAR_CapabilityCommandSubCapabilityType::getISAR() {
  return getISAR_();
}

uci::type::SAR_CapabilityCommandSubCapabilityType& SAR_CapabilityCommandSubCapabilityType::setISAR(const uci::type::ISAR_SubCapabilityType& accessor) {
  chooseISAR();
  if (&accessor != iSAR_Accessor.get()) {
    iSAR_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CapabilityCommandSubCapabilityType::isISAR() const noexcept {
  return static_cast<bool>(iSAR_Accessor);
}

uci::type::ISAR_SubCapabilityType& SAR_CapabilityCommandSubCapabilityType::chooseISAR(const std::string& method, uci::base::accessorType::AccessorType type) {
  sAR_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iSAR_SubCapabilityType : type};
  if ((!iSAR_Accessor) || (iSAR_Accessor->getAccessorType() != requestedType)) {
    iSAR_Accessor = ISAR_SubCapabilityType::create(type);
    if (!iSAR_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *iSAR_Accessor;
}

uci::type::ISAR_SubCapabilityType& SAR_CapabilityCommandSubCapabilityType::chooseISAR(uci::base::accessorType::AccessorType type) {
  return chooseISAR("chooseISAR", type);
}

std::unique_ptr<SAR_CapabilityCommandSubCapabilityType> SAR_CapabilityCommandSubCapabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_CapabilityCommandSubCapabilityType : type};
  return (requestedType == uci::type::accessorType::sAR_CapabilityCommandSubCapabilityType) ? boost::make_unique<SAR_CapabilityCommandSubCapabilityType>() : nullptr;
}

/**  */
namespace SAR_CapabilityCommandSubCapabilityType_Names {

constexpr const char* Extern_Type_Name{"SAR_CapabilityCommandSubCapabilityType"};
constexpr const char* SAR_Name{"SAR"};
constexpr const char* ISAR_Name{"ISAR"};

} // namespace SAR_CapabilityCommandSubCapabilityType_Names

void SAR_CapabilityCommandSubCapabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_CapabilityCommandSubCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SAR_CapabilityCommandSubCapabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandSubCapabilityType_Names::SAR_Name) {
      SAR_SubCapabilityType::deserialize(valueType.second, accessor.chooseSAR(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandSubCapabilityType_Names::ISAR_Name) {
      ISAR_SubCapabilityType::deserialize(valueType.second, accessor.chooseISAR(), nodeName, nsPrefix);
    }
  }
}

std::string SAR_CapabilityCommandSubCapabilityType::serialize(const uci::type::SAR_CapabilityCommandSubCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SAR_CapabilityCommandSubCapabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SAR_CapabilityCommandSubCapabilityType_Names::Extern_Type_Name);
  }
  if (accessor.isSAR()) {
    SAR_SubCapabilityType::serialize(accessor.getSAR(), node, SAR_CapabilityCommandSubCapabilityType_Names::SAR_Name);
  } else if (accessor.isISAR()) {
    ISAR_SubCapabilityType::serialize(accessor.getISAR(), node, SAR_CapabilityCommandSubCapabilityType_Names::ISAR_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SAR_CapabilityCommandSubCapabilityType& SAR_CapabilityCommandSubCapabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SAR_CapabilityCommandSubCapabilityType>().release());
}

uci::type::SAR_CapabilityCommandSubCapabilityType& SAR_CapabilityCommandSubCapabilityType::create(const uci::type::SAR_CapabilityCommandSubCapabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SAR_CapabilityCommandSubCapabilityType> newAccessor{boost::make_unique<asb_uci::type::SAR_CapabilityCommandSubCapabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SAR_CapabilityCommandSubCapabilityType::destroy(uci::type::SAR_CapabilityCommandSubCapabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::SAR_CapabilityCommandSubCapabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

