/** @file SpaceWeatherKpApChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SpaceWeatherKpApChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GeomagneticApIndexType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GeomagneticKpIndexType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpaceWeatherKpApChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SpaceWeatherKpApChoiceType::SpaceWeatherKpApChoiceType() = default;

SpaceWeatherKpApChoiceType::~SpaceWeatherKpApChoiceType() = default;

void SpaceWeatherKpApChoiceType::copy(const uci::type::SpaceWeatherKpApChoiceType& accessor) {
  copyImpl(accessor, false);
}

void SpaceWeatherKpApChoiceType::copyImpl(const uci::type::SpaceWeatherKpApChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SpaceWeatherKpApChoiceType&>(accessor);
    kp_Accessor = (accessorImpl.kp_Accessor ? accessorImpl.kp_Accessor : boost::none);
    ap_Accessor = (accessorImpl.ap_Accessor ? accessorImpl.ap_Accessor : boost::none);
  }
}

void SpaceWeatherKpApChoiceType::reset() noexcept {
  kp_Accessor.reset();
  ap_Accessor.reset();
}

uci::type::SpaceWeatherKpApChoiceType::SpaceWeatherKpApChoiceTypeChoice SpaceWeatherKpApChoiceType::getSpaceWeatherKpApChoiceTypeChoiceOrdinal() const noexcept {
  if (kp_Accessor) {
    return SPACEWEATHERKPAPCHOICETYPE_CHOICE_KP;
  }
  if (ap_Accessor) {
    return SPACEWEATHERKPAPCHOICETYPE_CHOICE_AP;
  }
  return SPACEWEATHERKPAPCHOICETYPE_CHOICE_NONE;
}

uci::type::SpaceWeatherKpApChoiceType& SpaceWeatherKpApChoiceType::setSpaceWeatherKpApChoiceTypeChoiceOrdinal(uci::type::SpaceWeatherKpApChoiceType::SpaceWeatherKpApChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case SPACEWEATHERKPAPCHOICETYPE_CHOICE_KP:
      chooseKp();
      break;
    case SPACEWEATHERKPAPCHOICETYPE_CHOICE_AP:
      chooseAp();
      break;
    default:
      throw uci::base::UCIException("Error in setSpaceWeatherKpApChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::GeomagneticKpIndexTypeValue SpaceWeatherKpApChoiceType::getKp() const {
  if (kp_Accessor) {
    return *kp_Accessor;
  }
  throw uci::base::UCIException("Error in getKp(): Unable to get Kp, field not selected");
}

uci::type::SpaceWeatherKpApChoiceType& SpaceWeatherKpApChoiceType::setKp(uci::type::GeomagneticKpIndexTypeValue value) {
  chooseKp();
  kp_Accessor = value;
  return *this;
}

bool SpaceWeatherKpApChoiceType::isKp() const noexcept {
  return static_cast<bool>(kp_Accessor);
}

void SpaceWeatherKpApChoiceType::chooseKp() {
  ap_Accessor.reset();
  if (!kp_Accessor) {
    kp_Accessor = boost::optional<asb_xs::Double>();
  }
}

uci::type::GeomagneticApIndexTypeValue SpaceWeatherKpApChoiceType::getAp() const {
  if (ap_Accessor) {
    return *ap_Accessor;
  }
  throw uci::base::UCIException("Error in getAp(): Unable to get Ap, field not selected");
}

uci::type::SpaceWeatherKpApChoiceType& SpaceWeatherKpApChoiceType::setAp(uci::type::GeomagneticApIndexTypeValue value) {
  chooseAp();
  ap_Accessor = value;
  return *this;
}

bool SpaceWeatherKpApChoiceType::isAp() const noexcept {
  return static_cast<bool>(ap_Accessor);
}

void SpaceWeatherKpApChoiceType::chooseAp() {
  kp_Accessor.reset();
  if (!ap_Accessor) {
    ap_Accessor = boost::optional<asb_xs::Double>();
  }
}

std::unique_ptr<SpaceWeatherKpApChoiceType> SpaceWeatherKpApChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::spaceWeatherKpApChoiceType : type};
  return (requestedType == uci::type::accessorType::spaceWeatherKpApChoiceType) ? boost::make_unique<SpaceWeatherKpApChoiceType>() : nullptr;
}

/**  */
namespace SpaceWeatherKpApChoiceType_Names {

constexpr const char* Extern_Type_Name{"SpaceWeatherKpApChoiceType"};
constexpr const char* Kp_Name{"Kp"};
constexpr const char* Ap_Name{"Ap"};

} // namespace SpaceWeatherKpApChoiceType_Names

void SpaceWeatherKpApChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SpaceWeatherKpApChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SpaceWeatherKpApChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SpaceWeatherKpApChoiceType_Names::Kp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setKp(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SpaceWeatherKpApChoiceType_Names::Ap_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAp(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string SpaceWeatherKpApChoiceType::serialize(const uci::type::SpaceWeatherKpApChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SpaceWeatherKpApChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SpaceWeatherKpApChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isKp()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getKp(), node, SpaceWeatherKpApChoiceType_Names::Kp_Name);
  } else if (accessor.isAp()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAp(), node, SpaceWeatherKpApChoiceType_Names::Ap_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SpaceWeatherKpApChoiceType& SpaceWeatherKpApChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SpaceWeatherKpApChoiceType>().release());
}

uci::type::SpaceWeatherKpApChoiceType& SpaceWeatherKpApChoiceType::create(const uci::type::SpaceWeatherKpApChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SpaceWeatherKpApChoiceType> newAccessor{boost::make_unique<asb_uci::type::SpaceWeatherKpApChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SpaceWeatherKpApChoiceType::destroy(uci::type::SpaceWeatherKpApChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::SpaceWeatherKpApChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

