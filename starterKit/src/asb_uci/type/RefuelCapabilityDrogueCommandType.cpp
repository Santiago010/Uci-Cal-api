/** @file RefuelCapabilityDrogueCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RefuelCapabilityDrogueCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/HoseCutCommandEnum.h"
#include "asb_uci/type/RefuelCapabilityDrogueCommonType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/HoseCutCommandEnum.h"
#include "uci/type/RefuelCapabilityDrogueCommandType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RefuelCapabilityDrogueCommandType::RefuelCapabilityDrogueCommandType() = default;

RefuelCapabilityDrogueCommandType::~RefuelCapabilityDrogueCommandType() = default;

void RefuelCapabilityDrogueCommandType::copy(const uci::type::RefuelCapabilityDrogueCommandType& accessor) {
  copyImpl(accessor, false);
}

void RefuelCapabilityDrogueCommandType::copyImpl(const uci::type::RefuelCapabilityDrogueCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RefuelCapabilityDrogueCommonType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const RefuelCapabilityDrogueCommandType&>(accessor);
    if (accessorImpl.hasResetReferencePressure()) {
      setResetReferencePressure(accessorImpl.getResetReferencePressure());
    } else {
      clearResetReferencePressure();
    }
    if (accessorImpl.hasResetDeliveredFuel()) {
      setResetDeliveredFuel(accessorImpl.getResetDeliveredFuel());
    } else {
      clearResetDeliveredFuel();
    }
    if (accessorImpl.hasResetMissionFuel()) {
      setResetMissionFuel(accessorImpl.getResetMissionFuel());
    } else {
      clearResetMissionFuel();
    }
    if (accessorImpl.hoseCut_Accessor) {
      setHoseCut(*(accessorImpl.hoseCut_Accessor));
    } else {
      hoseCut_Accessor.reset();
    }
  }
}

void RefuelCapabilityDrogueCommandType::reset() noexcept {
  RefuelCapabilityDrogueCommonType::reset();
  clearResetReferencePressure();
  clearResetDeliveredFuel();
  clearResetMissionFuel();
  hoseCut_Accessor.reset();
}

xs::Boolean RefuelCapabilityDrogueCommandType::getResetReferencePressure() const {
  if (resetReferencePressure_Accessor) {
    return *resetReferencePressure_Accessor;
  }
  throw uci::base::UCIException("Error in getResetReferencePressure(): An attempt was made to get an optional field that was not enabled, call hasResetReferencePressure() to determine if it is safe to call getResetReferencePressure()");
}

uci::type::RefuelCapabilityDrogueCommandType& RefuelCapabilityDrogueCommandType::setResetReferencePressure(xs::Boolean value) {
  resetReferencePressure_Accessor = value;
  return *this;
}

bool RefuelCapabilityDrogueCommandType::hasResetReferencePressure() const noexcept {
  return resetReferencePressure_Accessor.has_value();
}

uci::type::RefuelCapabilityDrogueCommandType& RefuelCapabilityDrogueCommandType::clearResetReferencePressure() noexcept {
  resetReferencePressure_Accessor.reset();
  return *this;
}

xs::Boolean RefuelCapabilityDrogueCommandType::getResetDeliveredFuel() const {
  if (resetDeliveredFuel_Accessor) {
    return *resetDeliveredFuel_Accessor;
  }
  throw uci::base::UCIException("Error in getResetDeliveredFuel(): An attempt was made to get an optional field that was not enabled, call hasResetDeliveredFuel() to determine if it is safe to call getResetDeliveredFuel()");
}

uci::type::RefuelCapabilityDrogueCommandType& RefuelCapabilityDrogueCommandType::setResetDeliveredFuel(xs::Boolean value) {
  resetDeliveredFuel_Accessor = value;
  return *this;
}

bool RefuelCapabilityDrogueCommandType::hasResetDeliveredFuel() const noexcept {
  return resetDeliveredFuel_Accessor.has_value();
}

uci::type::RefuelCapabilityDrogueCommandType& RefuelCapabilityDrogueCommandType::clearResetDeliveredFuel() noexcept {
  resetDeliveredFuel_Accessor.reset();
  return *this;
}

xs::Boolean RefuelCapabilityDrogueCommandType::getResetMissionFuel() const {
  if (resetMissionFuel_Accessor) {
    return *resetMissionFuel_Accessor;
  }
  throw uci::base::UCIException("Error in getResetMissionFuel(): An attempt was made to get an optional field that was not enabled, call hasResetMissionFuel() to determine if it is safe to call getResetMissionFuel()");
}

uci::type::RefuelCapabilityDrogueCommandType& RefuelCapabilityDrogueCommandType::setResetMissionFuel(xs::Boolean value) {
  resetMissionFuel_Accessor = value;
  return *this;
}

bool RefuelCapabilityDrogueCommandType::hasResetMissionFuel() const noexcept {
  return resetMissionFuel_Accessor.has_value();
}

uci::type::RefuelCapabilityDrogueCommandType& RefuelCapabilityDrogueCommandType::clearResetMissionFuel() noexcept {
  resetMissionFuel_Accessor.reset();
  return *this;
}

uci::type::HoseCutCommandEnum& RefuelCapabilityDrogueCommandType::getHoseCut_() const {
  if (hoseCut_Accessor) {
    return *hoseCut_Accessor;
  }
  throw uci::base::UCIException("Error in getHoseCut(): An attempt was made to get an optional field that was not enabled, call hasHoseCut() to determine if it is safe to call getHoseCut()");
}

const uci::type::HoseCutCommandEnum& RefuelCapabilityDrogueCommandType::getHoseCut() const {
  return getHoseCut_();
}

uci::type::HoseCutCommandEnum& RefuelCapabilityDrogueCommandType::getHoseCut() {
  return getHoseCut_();
}

uci::type::RefuelCapabilityDrogueCommandType& RefuelCapabilityDrogueCommandType::setHoseCut(const uci::type::HoseCutCommandEnum& accessor) {
  enableHoseCut();
  if (&accessor != hoseCut_Accessor.get()) {
    hoseCut_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RefuelCapabilityDrogueCommandType& RefuelCapabilityDrogueCommandType::setHoseCut(const uci::type::HoseCutCommandEnum::EnumerationItem value) {
  enableHoseCut().setValue(value);
  return *this;
}

bool RefuelCapabilityDrogueCommandType::hasHoseCut() const noexcept {
  return static_cast<bool>(hoseCut_Accessor);
}

uci::type::HoseCutCommandEnum& RefuelCapabilityDrogueCommandType::enableHoseCut(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::hoseCutCommandEnum : type};
  if ((!hoseCut_Accessor) || (hoseCut_Accessor->getAccessorType() != requestedType)) {
    hoseCut_Accessor = HoseCutCommandEnum::create(requestedType);
    if (!hoseCut_Accessor) {
      throw uci::base::UCIException("Error in enableHoseCut(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *hoseCut_Accessor;
}

uci::type::RefuelCapabilityDrogueCommandType& RefuelCapabilityDrogueCommandType::clearHoseCut() noexcept {
  hoseCut_Accessor.reset();
  return *this;
}

std::unique_ptr<RefuelCapabilityDrogueCommandType> RefuelCapabilityDrogueCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelCapabilityDrogueCommandType : type};
  return (requestedType == uci::type::accessorType::refuelCapabilityDrogueCommandType) ? boost::make_unique<RefuelCapabilityDrogueCommandType>() : nullptr;
}

/**  */
namespace RefuelCapabilityDrogueCommandType_Names {

constexpr const char* Extern_Type_Name{"RefuelCapabilityDrogueCommandType"};
constexpr const char* ResetReferencePressure_Name{"ResetReferencePressure"};
constexpr const char* ResetDeliveredFuel_Name{"ResetDeliveredFuel"};
constexpr const char* ResetMissionFuel_Name{"ResetMissionFuel"};
constexpr const char* HoseCut_Name{"HoseCut"};

} // namespace RefuelCapabilityDrogueCommandType_Names

void RefuelCapabilityDrogueCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RefuelCapabilityDrogueCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RefuelCapabilityDrogueCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RefuelCapabilityDrogueCommandType_Names::ResetReferencePressure_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResetReferencePressure(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RefuelCapabilityDrogueCommandType_Names::ResetDeliveredFuel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResetDeliveredFuel(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RefuelCapabilityDrogueCommandType_Names::ResetMissionFuel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResetMissionFuel(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RefuelCapabilityDrogueCommandType_Names::HoseCut_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableHoseCut().setValueFromName(*value);
      }
    }
  }
  RefuelCapabilityDrogueCommonType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string RefuelCapabilityDrogueCommandType::serialize(const uci::type::RefuelCapabilityDrogueCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RefuelCapabilityDrogueCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RefuelCapabilityDrogueCommandType_Names::Extern_Type_Name);
  }
  RefuelCapabilityDrogueCommonType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasResetReferencePressure()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getResetReferencePressure(), node, RefuelCapabilityDrogueCommandType_Names::ResetReferencePressure_Name);
  }
  if (accessor.hasResetDeliveredFuel()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getResetDeliveredFuel(), node, RefuelCapabilityDrogueCommandType_Names::ResetDeliveredFuel_Name);
  }
  if (accessor.hasResetMissionFuel()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getResetMissionFuel(), node, RefuelCapabilityDrogueCommandType_Names::ResetMissionFuel_Name);
  }
  if (accessor.hasHoseCut()) {
    HoseCutCommandEnum::serialize(accessor.getHoseCut(), node, RefuelCapabilityDrogueCommandType_Names::HoseCut_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RefuelCapabilityDrogueCommandType& RefuelCapabilityDrogueCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RefuelCapabilityDrogueCommandType>().release());
}

uci::type::RefuelCapabilityDrogueCommandType& RefuelCapabilityDrogueCommandType::create(const uci::type::RefuelCapabilityDrogueCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RefuelCapabilityDrogueCommandType> newAccessor{boost::make_unique<asb_uci::type::RefuelCapabilityDrogueCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RefuelCapabilityDrogueCommandType::destroy(uci::type::RefuelCapabilityDrogueCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::RefuelCapabilityDrogueCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

