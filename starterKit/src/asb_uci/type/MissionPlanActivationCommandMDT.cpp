/** @file MissionPlanActivationCommandMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MissionPlanActivationCommandMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommandID_Type.h"
#include "../../../include/asb_uci/type/CommandStateEnum.h"
#include "../../../include/asb_uci/type/MissionPlanActivationCommandID_Type.h"
#include "../../../include/asb_uci/type/MissionPlanActivationCommandType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommandID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommandStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanActivationCommandID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanActivationCommandMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanActivationCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MissionPlanActivationCommandMDT::MissionPlanActivationCommandMDT()
  : commandID_Accessor{boost::make_unique<MissionPlanActivationCommandID_Type>()},
    approvalManagementCommandID_Accessor{boost::make_unique<ApprovalManagementCommandID>(0, SIZE_MAX)},
    commandState_Accessor{boost::make_unique<CommandStateEnum>()},
    command_Accessor{boost::make_unique<Command>(1, SIZE_MAX)} {
}

MissionPlanActivationCommandMDT::~MissionPlanActivationCommandMDT() = default;

void MissionPlanActivationCommandMDT::copy(const uci::type::MissionPlanActivationCommandMDT& accessor) {
  copyImpl(accessor, false);
}

void MissionPlanActivationCommandMDT::copyImpl(const uci::type::MissionPlanActivationCommandMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MissionPlanActivationCommandMDT&>(accessor);
    setCommandID(*(accessorImpl.commandID_Accessor));
    setApprovalManagementCommandID(*(accessorImpl.approvalManagementCommandID_Accessor));
    setCommandState(*(accessorImpl.commandState_Accessor));
    setCommand(*(accessorImpl.command_Accessor));
  }
}

void MissionPlanActivationCommandMDT::reset() noexcept {
  commandID_Accessor->reset();
  approvalManagementCommandID_Accessor->reset();
  commandState_Accessor->reset();
  command_Accessor->reset();
}

const uci::type::MissionPlanActivationCommandID_Type& MissionPlanActivationCommandMDT::getCommandID() const {
  return *commandID_Accessor;
}

uci::type::MissionPlanActivationCommandID_Type& MissionPlanActivationCommandMDT::getCommandID() {
  return *commandID_Accessor;
}

uci::type::MissionPlanActivationCommandMDT& MissionPlanActivationCommandMDT::setCommandID(const uci::type::MissionPlanActivationCommandID_Type& accessor) {
  if (&accessor != commandID_Accessor.get()) {
    commandID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanActivationCommandMDT::ApprovalManagementCommandID& MissionPlanActivationCommandMDT::getApprovalManagementCommandID() const {
  return *approvalManagementCommandID_Accessor;
}

uci::type::MissionPlanActivationCommandMDT::ApprovalManagementCommandID& MissionPlanActivationCommandMDT::getApprovalManagementCommandID() {
  return *approvalManagementCommandID_Accessor;
}

uci::type::MissionPlanActivationCommandMDT& MissionPlanActivationCommandMDT::setApprovalManagementCommandID(const uci::type::MissionPlanActivationCommandMDT::ApprovalManagementCommandID& accessor) {
  if (&accessor != approvalManagementCommandID_Accessor.get()) {
    approvalManagementCommandID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommandStateEnum& MissionPlanActivationCommandMDT::getCommandState() const {
  return *commandState_Accessor;
}

uci::type::CommandStateEnum& MissionPlanActivationCommandMDT::getCommandState() {
  return *commandState_Accessor;
}

uci::type::MissionPlanActivationCommandMDT& MissionPlanActivationCommandMDT::setCommandState(const uci::type::CommandStateEnum& accessor) {
  if (&accessor != commandState_Accessor.get()) {
    commandState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MissionPlanActivationCommandMDT& MissionPlanActivationCommandMDT::setCommandState(uci::type::CommandStateEnum::EnumerationItem value) {
  commandState_Accessor->setValue(value);
  return *this;
}


const uci::type::MissionPlanActivationCommandMDT::Command& MissionPlanActivationCommandMDT::getCommand() const {
  return *command_Accessor;
}

uci::type::MissionPlanActivationCommandMDT::Command& MissionPlanActivationCommandMDT::getCommand() {
  return *command_Accessor;
}

uci::type::MissionPlanActivationCommandMDT& MissionPlanActivationCommandMDT::setCommand(const uci::type::MissionPlanActivationCommandMDT::Command& accessor) {
  if (&accessor != command_Accessor.get()) {
    command_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<MissionPlanActivationCommandMDT> MissionPlanActivationCommandMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanActivationCommandMDT : type};
  return (requestedType == uci::type::accessorType::missionPlanActivationCommandMDT) ? boost::make_unique<MissionPlanActivationCommandMDT>() : nullptr;
}

/**  */
namespace MissionPlanActivationCommandMDT_Names {

constexpr const char* Extern_Type_Name{"MissionPlanActivationCommandMDT"};
constexpr const char* CommandID_Name{"CommandID"};
constexpr const char* ApprovalManagementCommandID_Name{"ApprovalManagementCommandID"};
constexpr const char* CommandState_Name{"CommandState"};
constexpr const char* Command_Name{"Command"};

} // namespace MissionPlanActivationCommandMDT_Names

void MissionPlanActivationCommandMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionPlanActivationCommandMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionPlanActivationCommandMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MissionPlanActivationCommandMDT_Names::CommandID_Name) {
      MissionPlanActivationCommandID_Type::deserialize(valueType.second, accessor.getCommandID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanActivationCommandMDT_Names::ApprovalManagementCommandID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanActivationCommandMDT::ApprovalManagementCommandID& boundedList = accessor.getApprovalManagementCommandID();
        const uci::type::MissionPlanActivationCommandMDT::ApprovalManagementCommandID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommandID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanActivationCommandMDT_Names::CommandState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCommandState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MissionPlanActivationCommandMDT_Names::Command_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanActivationCommandMDT::Command& boundedList = accessor.getCommand();
        const uci::type::MissionPlanActivationCommandMDT::Command::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MissionPlanActivationCommandType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string MissionPlanActivationCommandMDT::serialize(const uci::type::MissionPlanActivationCommandMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MissionPlanActivationCommandMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MissionPlanActivationCommandMDT_Names::Extern_Type_Name);
  }
  MissionPlanActivationCommandID_Type::serialize(accessor.getCommandID(), node, MissionPlanActivationCommandMDT_Names::CommandID_Name);
  {
    const uci::type::MissionPlanActivationCommandMDT::ApprovalManagementCommandID& boundedList = accessor.getApprovalManagementCommandID();
    for (uci::type::MissionPlanActivationCommandMDT::ApprovalManagementCommandID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommandID_Type::serialize(boundedList.at(i), node, MissionPlanActivationCommandMDT_Names::ApprovalManagementCommandID_Name);
    }
  }
  CommandStateEnum::serialize(accessor.getCommandState(), node, MissionPlanActivationCommandMDT_Names::CommandState_Name, false);
  {
    const uci::type::MissionPlanActivationCommandMDT::Command& boundedList = accessor.getCommand();
    for (uci::type::MissionPlanActivationCommandMDT::Command::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MissionPlanActivationCommandType::serialize(boundedList.at(i), node, MissionPlanActivationCommandMDT_Names::Command_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MissionPlanActivationCommandMDT& MissionPlanActivationCommandMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MissionPlanActivationCommandMDT>().release());
}

uci::type::MissionPlanActivationCommandMDT& MissionPlanActivationCommandMDT::create(const uci::type::MissionPlanActivationCommandMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MissionPlanActivationCommandMDT> newAccessor{boost::make_unique<asb_uci::type::MissionPlanActivationCommandMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MissionPlanActivationCommandMDT::destroy(uci::type::MissionPlanActivationCommandMDT& accessor) {
  delete dynamic_cast<asb_uci::type::MissionPlanActivationCommandMDT*>(&accessor);
}

} // namespace type

} // namespace uci

