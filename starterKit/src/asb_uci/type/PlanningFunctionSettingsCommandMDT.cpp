/** @file PlanningFunctionSettingsCommandMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlanningFunctionSettingsCommandMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommandBaseType.h"
#include "asb_uci/type/ContingencyPathAutonomyType.h"
#include "asb_uci/type/MissionPlanningAutonomySettingType.h"
#include "asb_uci/type/PlanActivationAutonomyType.h"
#include "asb_uci/type/PlanInterfaceCommandType.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ContingencyPathAutonomyType.h"
#include "uci/type/MissionPlanningAutonomySettingType.h"
#include "uci/type/PlanActivationAutonomyType.h"
#include "uci/type/PlanInterfaceCommandType.h"
#include "uci/type/PlanningFunctionSettingsCommandMDT.h"
#include "uci/type/SystemID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanningFunctionSettingsCommandMDT::PlanningFunctionSettingsCommandMDT()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()},
    planningInterface_Accessor{boost::make_unique<PlanningInterface>(0, 10)},
    missionPlanningAutonomy_Accessor{boost::make_unique<MissionPlanningAutonomy>(0, SIZE_MAX)},
    routePlanningContingencyPath_Accessor{boost::make_unique<RoutePlanningContingencyPath>(0, 12)} {
}

PlanningFunctionSettingsCommandMDT::~PlanningFunctionSettingsCommandMDT() = default;

void PlanningFunctionSettingsCommandMDT::copy(const uci::type::PlanningFunctionSettingsCommandMDT& accessor) {
  copyImpl(accessor, false);
}

void PlanningFunctionSettingsCommandMDT::copyImpl(const uci::type::PlanningFunctionSettingsCommandMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const PlanningFunctionSettingsCommandMDT&>(accessor);
    setSystemID(*(accessorImpl.systemID_Accessor));
    setTransitionDroppedToFailed(accessorImpl.transitionDroppedToFailed_Accessor);
    setPlanningInterface(*(accessorImpl.planningInterface_Accessor));
    setMissionPlanningAutonomy(*(accessorImpl.missionPlanningAutonomy_Accessor));
    if (accessorImpl.planActivationAutonomy_Accessor) {
      setPlanActivationAutonomy(*(accessorImpl.planActivationAutonomy_Accessor));
    } else {
      planActivationAutonomy_Accessor.reset();
    }
    setRoutePlanningContingencyPath(*(accessorImpl.routePlanningContingencyPath_Accessor));
  }
}

void PlanningFunctionSettingsCommandMDT::reset() noexcept {
  CommandBaseType::reset();
  systemID_Accessor->reset();
  transitionDroppedToFailed_Accessor = false;
  planningInterface_Accessor->reset();
  missionPlanningAutonomy_Accessor->reset();
  planActivationAutonomy_Accessor.reset();
  routePlanningContingencyPath_Accessor->reset();
}

const uci::type::SystemID_Type& PlanningFunctionSettingsCommandMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& PlanningFunctionSettingsCommandMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::PlanningFunctionSettingsCommandMDT& PlanningFunctionSettingsCommandMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean PlanningFunctionSettingsCommandMDT::getTransitionDroppedToFailed() const {
  return transitionDroppedToFailed_Accessor;
}

uci::type::PlanningFunctionSettingsCommandMDT& PlanningFunctionSettingsCommandMDT::setTransitionDroppedToFailed(xs::Boolean value) {
  transitionDroppedToFailed_Accessor = value;
  return *this;
}


const uci::type::PlanningFunctionSettingsCommandMDT::PlanningInterface& PlanningFunctionSettingsCommandMDT::getPlanningInterface() const {
  return *planningInterface_Accessor;
}

uci::type::PlanningFunctionSettingsCommandMDT::PlanningInterface& PlanningFunctionSettingsCommandMDT::getPlanningInterface() {
  return *planningInterface_Accessor;
}

uci::type::PlanningFunctionSettingsCommandMDT& PlanningFunctionSettingsCommandMDT::setPlanningInterface(const uci::type::PlanningFunctionSettingsCommandMDT::PlanningInterface& accessor) {
  if (&accessor != planningInterface_Accessor.get()) {
    planningInterface_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlanningFunctionSettingsCommandMDT::MissionPlanningAutonomy& PlanningFunctionSettingsCommandMDT::getMissionPlanningAutonomy() const {
  return *missionPlanningAutonomy_Accessor;
}

uci::type::PlanningFunctionSettingsCommandMDT::MissionPlanningAutonomy& PlanningFunctionSettingsCommandMDT::getMissionPlanningAutonomy() {
  return *missionPlanningAutonomy_Accessor;
}

uci::type::PlanningFunctionSettingsCommandMDT& PlanningFunctionSettingsCommandMDT::setMissionPlanningAutonomy(const uci::type::PlanningFunctionSettingsCommandMDT::MissionPlanningAutonomy& accessor) {
  if (&accessor != missionPlanningAutonomy_Accessor.get()) {
    missionPlanningAutonomy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanActivationAutonomyType& PlanningFunctionSettingsCommandMDT::getPlanActivationAutonomy_() const {
  if (planActivationAutonomy_Accessor) {
    return *planActivationAutonomy_Accessor;
  }
  throw uci::base::UCIException("Error in getPlanActivationAutonomy(): An attempt was made to get an optional field that was not enabled, call hasPlanActivationAutonomy() to determine if it is safe to call getPlanActivationAutonomy()");
}

const uci::type::PlanActivationAutonomyType& PlanningFunctionSettingsCommandMDT::getPlanActivationAutonomy() const {
  return getPlanActivationAutonomy_();
}

uci::type::PlanActivationAutonomyType& PlanningFunctionSettingsCommandMDT::getPlanActivationAutonomy() {
  return getPlanActivationAutonomy_();
}

uci::type::PlanningFunctionSettingsCommandMDT& PlanningFunctionSettingsCommandMDT::setPlanActivationAutonomy(const uci::type::PlanActivationAutonomyType& accessor) {
  enablePlanActivationAutonomy();
  if (&accessor != planActivationAutonomy_Accessor.get()) {
    planActivationAutonomy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningFunctionSettingsCommandMDT::hasPlanActivationAutonomy() const noexcept {
  return static_cast<bool>(planActivationAutonomy_Accessor);
}

uci::type::PlanActivationAutonomyType& PlanningFunctionSettingsCommandMDT::enablePlanActivationAutonomy(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planActivationAutonomyType : type};
  if ((!planActivationAutonomy_Accessor) || (planActivationAutonomy_Accessor->getAccessorType() != requestedType)) {
    planActivationAutonomy_Accessor = PlanActivationAutonomyType::create(requestedType);
    if (!planActivationAutonomy_Accessor) {
      throw uci::base::UCIException("Error in enablePlanActivationAutonomy(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *planActivationAutonomy_Accessor;
}

uci::type::PlanningFunctionSettingsCommandMDT& PlanningFunctionSettingsCommandMDT::clearPlanActivationAutonomy() noexcept {
  planActivationAutonomy_Accessor.reset();
  return *this;
}

const uci::type::PlanningFunctionSettingsCommandMDT::RoutePlanningContingencyPath& PlanningFunctionSettingsCommandMDT::getRoutePlanningContingencyPath() const {
  return *routePlanningContingencyPath_Accessor;
}

uci::type::PlanningFunctionSettingsCommandMDT::RoutePlanningContingencyPath& PlanningFunctionSettingsCommandMDT::getRoutePlanningContingencyPath() {
  return *routePlanningContingencyPath_Accessor;
}

uci::type::PlanningFunctionSettingsCommandMDT& PlanningFunctionSettingsCommandMDT::setRoutePlanningContingencyPath(const uci::type::PlanningFunctionSettingsCommandMDT::RoutePlanningContingencyPath& accessor) {
  if (&accessor != routePlanningContingencyPath_Accessor.get()) {
    routePlanningContingencyPath_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PlanningFunctionSettingsCommandMDT> PlanningFunctionSettingsCommandMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planningFunctionSettingsCommandMDT : type};
  return (requestedType == uci::type::accessorType::planningFunctionSettingsCommandMDT) ? boost::make_unique<PlanningFunctionSettingsCommandMDT>() : nullptr;
}

/**  */
namespace PlanningFunctionSettingsCommandMDT_Names {

constexpr const char* Extern_Type_Name{"PlanningFunctionSettingsCommandMDT"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* TransitionDroppedToFailed_Name{"TransitionDroppedToFailed"};
constexpr const char* PlanningInterface_Name{"PlanningInterface"};
constexpr const char* MissionPlanningAutonomy_Name{"MissionPlanningAutonomy"};
constexpr const char* PlanActivationAutonomy_Name{"PlanActivationAutonomy"};
constexpr const char* RoutePlanningContingencyPath_Name{"RoutePlanningContingencyPath"};

} // namespace PlanningFunctionSettingsCommandMDT_Names

void PlanningFunctionSettingsCommandMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanningFunctionSettingsCommandMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanningFunctionSettingsCommandMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanningFunctionSettingsCommandMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningFunctionSettingsCommandMDT_Names::TransitionDroppedToFailed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTransitionDroppedToFailed(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PlanningFunctionSettingsCommandMDT_Names::PlanningInterface_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanningFunctionSettingsCommandMDT::PlanningInterface& boundedList = accessor.getPlanningInterface();
        const uci::type::PlanningFunctionSettingsCommandMDT::PlanningInterface::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PlanInterfaceCommandType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanningFunctionSettingsCommandMDT_Names::MissionPlanningAutonomy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanningFunctionSettingsCommandMDT::MissionPlanningAutonomy& boundedList = accessor.getMissionPlanningAutonomy();
        const uci::type::PlanningFunctionSettingsCommandMDT::MissionPlanningAutonomy::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MissionPlanningAutonomySettingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanningFunctionSettingsCommandMDT_Names::PlanActivationAutonomy_Name) {
      PlanActivationAutonomyType::deserialize(valueType.second, accessor.enablePlanActivationAutonomy(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningFunctionSettingsCommandMDT_Names::RoutePlanningContingencyPath_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanningFunctionSettingsCommandMDT::RoutePlanningContingencyPath& boundedList = accessor.getRoutePlanningContingencyPath();
        const uci::type::PlanningFunctionSettingsCommandMDT::RoutePlanningContingencyPath::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ContingencyPathAutonomyType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  CommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string PlanningFunctionSettingsCommandMDT::serialize(const uci::type::PlanningFunctionSettingsCommandMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanningFunctionSettingsCommandMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanningFunctionSettingsCommandMDT_Names::Extern_Type_Name);
  }
  CommandBaseType::serialize(accessor, node, "", false, false, false);
  SystemID_Type::serialize(accessor.getSystemID(), node, PlanningFunctionSettingsCommandMDT_Names::SystemID_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getTransitionDroppedToFailed(), node, PlanningFunctionSettingsCommandMDT_Names::TransitionDroppedToFailed_Name);
  {
    const uci::type::PlanningFunctionSettingsCommandMDT::PlanningInterface& boundedList = accessor.getPlanningInterface();
    for (uci::type::PlanningFunctionSettingsCommandMDT::PlanningInterface::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PlanInterfaceCommandType::serialize(boundedList.at(i), node, PlanningFunctionSettingsCommandMDT_Names::PlanningInterface_Name);
    }
  }
  {
    const uci::type::PlanningFunctionSettingsCommandMDT::MissionPlanningAutonomy& boundedList = accessor.getMissionPlanningAutonomy();
    for (uci::type::PlanningFunctionSettingsCommandMDT::MissionPlanningAutonomy::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MissionPlanningAutonomySettingType::serialize(boundedList.at(i), node, PlanningFunctionSettingsCommandMDT_Names::MissionPlanningAutonomy_Name);
    }
  }
  if (accessor.hasPlanActivationAutonomy()) {
    PlanActivationAutonomyType::serialize(accessor.getPlanActivationAutonomy(), node, PlanningFunctionSettingsCommandMDT_Names::PlanActivationAutonomy_Name);
  }
  {
    const uci::type::PlanningFunctionSettingsCommandMDT::RoutePlanningContingencyPath& boundedList = accessor.getRoutePlanningContingencyPath();
    for (uci::type::PlanningFunctionSettingsCommandMDT::RoutePlanningContingencyPath::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ContingencyPathAutonomyType::serialize(boundedList.at(i), node, PlanningFunctionSettingsCommandMDT_Names::RoutePlanningContingencyPath_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanningFunctionSettingsCommandMDT& PlanningFunctionSettingsCommandMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanningFunctionSettingsCommandMDT>().release());
}

uci::type::PlanningFunctionSettingsCommandMDT& PlanningFunctionSettingsCommandMDT::create(const uci::type::PlanningFunctionSettingsCommandMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanningFunctionSettingsCommandMDT> newAccessor{boost::make_unique<asb_uci::type::PlanningFunctionSettingsCommandMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanningFunctionSettingsCommandMDT::destroy(uci::type::PlanningFunctionSettingsCommandMDT& accessor) {
  delete dynamic_cast<asb_uci::type::PlanningFunctionSettingsCommandMDT*>(&accessor);
}

} // namespace type

} // namespace uci

