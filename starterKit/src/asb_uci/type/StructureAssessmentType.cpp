/** @file StructureAssessmentType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/StructureAssessmentType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ResolvedCharacterizationType.h"
#include "../../../include/asb_uci/type/SizeEstimationType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResolvedCharacterizationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SizeEstimationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StructureAssessmentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StructureAssessmentType::StructureAssessmentType() = default;

StructureAssessmentType::~StructureAssessmentType() = default;

void StructureAssessmentType::copy(const uci::type::StructureAssessmentType& accessor) {
  copyImpl(accessor, false);
}

void StructureAssessmentType::copyImpl(const uci::type::StructureAssessmentType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const StructureAssessmentType&>(accessor);
    if (accessorImpl.sizeEstimation_Accessor) {
      setSizeEstimation(*(accessorImpl.sizeEstimation_Accessor));
    } else {
      sizeEstimation_Accessor.reset();
    }
    if (accessorImpl.resolved_Accessor) {
      setResolved(*(accessorImpl.resolved_Accessor));
    } else {
      resolved_Accessor.reset();
    }
  }
}

void StructureAssessmentType::reset() noexcept {
  sizeEstimation_Accessor.reset();
  resolved_Accessor.reset();
}

uci::type::StructureAssessmentType::StructureAssessmentTypeChoice StructureAssessmentType::getStructureAssessmentTypeChoiceOrdinal() const noexcept {
  if (sizeEstimation_Accessor) {
    return STRUCTUREASSESSMENTTYPE_CHOICE_SIZEESTIMATION;
  }
  if (resolved_Accessor) {
    return STRUCTUREASSESSMENTTYPE_CHOICE_RESOLVED;
  }
  return STRUCTUREASSESSMENTTYPE_CHOICE_NONE;
}

uci::type::StructureAssessmentType& StructureAssessmentType::setStructureAssessmentTypeChoiceOrdinal(uci::type::StructureAssessmentType::StructureAssessmentTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case STRUCTUREASSESSMENTTYPE_CHOICE_SIZEESTIMATION:
      chooseSizeEstimation("setStructureAssessmentTypeChoiceOrdinal", type);
      break;
    case STRUCTUREASSESSMENTTYPE_CHOICE_RESOLVED:
      chooseResolved("setStructureAssessmentTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setStructureAssessmentTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SizeEstimationType& StructureAssessmentType::getSizeEstimation_() const {
  if (sizeEstimation_Accessor) {
    return *sizeEstimation_Accessor;
  }
  throw uci::base::UCIException("Error in getSizeEstimation(): Unable to get SizeEstimation, field not selected");
}

const uci::type::SizeEstimationType& StructureAssessmentType::getSizeEstimation() const {
  return getSizeEstimation_();
}

uci::type::SizeEstimationType& StructureAssessmentType::getSizeEstimation() {
  return getSizeEstimation_();
}

uci::type::StructureAssessmentType& StructureAssessmentType::setSizeEstimation(const uci::type::SizeEstimationType& accessor) {
  chooseSizeEstimation();
  if (&accessor != sizeEstimation_Accessor.get()) {
    sizeEstimation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StructureAssessmentType::isSizeEstimation() const noexcept {
  return static_cast<bool>(sizeEstimation_Accessor);
}

uci::type::SizeEstimationType& StructureAssessmentType::chooseSizeEstimation(const std::string& method, uci::base::accessorType::AccessorType type) {
  resolved_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sizeEstimationType : type};
  if ((!sizeEstimation_Accessor) || (sizeEstimation_Accessor->getAccessorType() != requestedType)) {
    sizeEstimation_Accessor = SizeEstimationType::create(type);
    if (!sizeEstimation_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sizeEstimation_Accessor;
}

uci::type::SizeEstimationType& StructureAssessmentType::chooseSizeEstimation(uci::base::accessorType::AccessorType type) {
  return chooseSizeEstimation("chooseSizeEstimation", type);
}

uci::type::ResolvedCharacterizationType& StructureAssessmentType::getResolved_() const {
  if (resolved_Accessor) {
    return *resolved_Accessor;
  }
  throw uci::base::UCIException("Error in getResolved(): Unable to get Resolved, field not selected");
}

const uci::type::ResolvedCharacterizationType& StructureAssessmentType::getResolved() const {
  return getResolved_();
}

uci::type::ResolvedCharacterizationType& StructureAssessmentType::getResolved() {
  return getResolved_();
}

uci::type::StructureAssessmentType& StructureAssessmentType::setResolved(const uci::type::ResolvedCharacterizationType& accessor) {
  chooseResolved();
  if (&accessor != resolved_Accessor.get()) {
    resolved_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StructureAssessmentType::isResolved() const noexcept {
  return static_cast<bool>(resolved_Accessor);
}

uci::type::ResolvedCharacterizationType& StructureAssessmentType::chooseResolved(const std::string& method, uci::base::accessorType::AccessorType type) {
  sizeEstimation_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resolvedCharacterizationType : type};
  if ((!resolved_Accessor) || (resolved_Accessor->getAccessorType() != requestedType)) {
    resolved_Accessor = ResolvedCharacterizationType::create(type);
    if (!resolved_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *resolved_Accessor;
}

uci::type::ResolvedCharacterizationType& StructureAssessmentType::chooseResolved(uci::base::accessorType::AccessorType type) {
  return chooseResolved("chooseResolved", type);
}

std::unique_ptr<StructureAssessmentType> StructureAssessmentType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::structureAssessmentType : type};
  return (requestedType == uci::type::accessorType::structureAssessmentType) ? boost::make_unique<StructureAssessmentType>() : nullptr;
}

/**  */
namespace StructureAssessmentType_Names {

constexpr const char* Extern_Type_Name{"StructureAssessmentType"};
constexpr const char* SizeEstimation_Name{"SizeEstimation"};
constexpr const char* Resolved_Name{"Resolved"};

} // namespace StructureAssessmentType_Names

void StructureAssessmentType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StructureAssessmentType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StructureAssessmentType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StructureAssessmentType_Names::SizeEstimation_Name) {
      SizeEstimationType::deserialize(valueType.second, accessor.chooseSizeEstimation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StructureAssessmentType_Names::Resolved_Name) {
      ResolvedCharacterizationType::deserialize(valueType.second, accessor.chooseResolved(), nodeName, nsPrefix);
    }
  }
}

std::string StructureAssessmentType::serialize(const uci::type::StructureAssessmentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StructureAssessmentType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StructureAssessmentType_Names::Extern_Type_Name);
  }
  if (accessor.isSizeEstimation()) {
    SizeEstimationType::serialize(accessor.getSizeEstimation(), node, StructureAssessmentType_Names::SizeEstimation_Name);
  } else if (accessor.isResolved()) {
    ResolvedCharacterizationType::serialize(accessor.getResolved(), node, StructureAssessmentType_Names::Resolved_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StructureAssessmentType& StructureAssessmentType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StructureAssessmentType>().release());
}

uci::type::StructureAssessmentType& StructureAssessmentType::create(const uci::type::StructureAssessmentType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StructureAssessmentType> newAccessor{boost::make_unique<asb_uci::type::StructureAssessmentType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StructureAssessmentType::destroy(uci::type::StructureAssessmentType& accessor) {
  delete dynamic_cast<asb_uci::type::StructureAssessmentType*>(&accessor);
}

} // namespace type

} // namespace uci

