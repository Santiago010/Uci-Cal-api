/** @file ResolvedCharacterizationAspectCoverageType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ResolvedCharacterizationAspectCoverageType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/BodyReferenceEnum.h"
#include "asb_uci/type/QuaternionType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AngleType.h"
#include "uci/type/BodyReferenceEnum.h"
#include "uci/type/QuaternionType.h"
#include "uci/type/ResolvedCharacterizationAspectCoverageType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResolvedCharacterizationAspectCoverageType::ResolvedCharacterizationAspectCoverageType() = default;

ResolvedCharacterizationAspectCoverageType::~ResolvedCharacterizationAspectCoverageType() = default;

void ResolvedCharacterizationAspectCoverageType::copy(const uci::type::ResolvedCharacterizationAspectCoverageType& accessor) {
  copyImpl(accessor, false);
}

void ResolvedCharacterizationAspectCoverageType::copyImpl(const uci::type::ResolvedCharacterizationAspectCoverageType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResolvedCharacterizationAspectCoverageType&>(accessor);
    if (accessorImpl.bodyReference_Accessor) {
      setBodyReference(*(accessorImpl.bodyReference_Accessor));
    } else {
      bodyReference_Accessor.reset();
    }
    if (accessorImpl.attitude_Accessor) {
      setAttitude(*(accessorImpl.attitude_Accessor));
    } else {
      attitude_Accessor.reset();
    }
    aspectSpan_Accessor = (accessorImpl.aspectSpan_Accessor ? accessorImpl.aspectSpan_Accessor : boost::none);
  }
}

void ResolvedCharacterizationAspectCoverageType::reset() noexcept {
  bodyReference_Accessor.reset();
  attitude_Accessor.reset();
  aspectSpan_Accessor.reset();
}

uci::type::ResolvedCharacterizationAspectCoverageType::ResolvedCharacterizationAspectCoverageTypeChoice ResolvedCharacterizationAspectCoverageType::getResolvedCharacterizationAspectCoverageTypeChoiceOrdinal() const noexcept {
  if (bodyReference_Accessor) {
    return RESOLVEDCHARACTERIZATIONASPECTCOVERAGETYPE_CHOICE_BODYREFERENCE;
  }
  if (attitude_Accessor) {
    return RESOLVEDCHARACTERIZATIONASPECTCOVERAGETYPE_CHOICE_ATTITUDE;
  }
  if (aspectSpan_Accessor) {
    return RESOLVEDCHARACTERIZATIONASPECTCOVERAGETYPE_CHOICE_ASPECTSPAN;
  }
  return RESOLVEDCHARACTERIZATIONASPECTCOVERAGETYPE_CHOICE_NONE;
}

uci::type::ResolvedCharacterizationAspectCoverageType& ResolvedCharacterizationAspectCoverageType::setResolvedCharacterizationAspectCoverageTypeChoiceOrdinal(uci::type::ResolvedCharacterizationAspectCoverageType::ResolvedCharacterizationAspectCoverageTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case RESOLVEDCHARACTERIZATIONASPECTCOVERAGETYPE_CHOICE_BODYREFERENCE:
      chooseBodyReference();
      break;
    case RESOLVEDCHARACTERIZATIONASPECTCOVERAGETYPE_CHOICE_ATTITUDE:
      chooseAttitude("setResolvedCharacterizationAspectCoverageTypeChoiceOrdinal", type);
      break;
    case RESOLVEDCHARACTERIZATIONASPECTCOVERAGETYPE_CHOICE_ASPECTSPAN:
      chooseAspectSpan();
      break;
    default:
      throw uci::base::UCIException("Error in setResolvedCharacterizationAspectCoverageTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ResolvedCharacterizationAspectCoverageType::BodyReference& ResolvedCharacterizationAspectCoverageType::getBodyReference_() const {
  if (bodyReference_Accessor) {
    return *bodyReference_Accessor;
  }
  throw uci::base::UCIException("Error in getBodyReference(): Unable to get BodyReference, field not selected");
}

const uci::type::ResolvedCharacterizationAspectCoverageType::BodyReference& ResolvedCharacterizationAspectCoverageType::getBodyReference() const {
  return getBodyReference_();
}

uci::type::ResolvedCharacterizationAspectCoverageType::BodyReference& ResolvedCharacterizationAspectCoverageType::getBodyReference() {
  return getBodyReference_();
}

uci::type::ResolvedCharacterizationAspectCoverageType& ResolvedCharacterizationAspectCoverageType::setBodyReference(const uci::type::ResolvedCharacterizationAspectCoverageType::BodyReference& accessor) {
  chooseBodyReference();
  if (&accessor != bodyReference_Accessor.get()) {
    bodyReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResolvedCharacterizationAspectCoverageType::isBodyReference() const noexcept {
  return static_cast<bool>(bodyReference_Accessor);
}

uci::type::ResolvedCharacterizationAspectCoverageType::BodyReference& ResolvedCharacterizationAspectCoverageType::chooseBodyReference() {
  attitude_Accessor.reset();
  aspectSpan_Accessor.reset();
  if (!bodyReference_Accessor) {
    bodyReference_Accessor = boost::make_unique<BodyReference>(1, 8);
  }
  return *bodyReference_Accessor;
}

uci::type::QuaternionType& ResolvedCharacterizationAspectCoverageType::getAttitude_() const {
  if (attitude_Accessor) {
    return *attitude_Accessor;
  }
  throw uci::base::UCIException("Error in getAttitude(): Unable to get Attitude, field not selected");
}

const uci::type::QuaternionType& ResolvedCharacterizationAspectCoverageType::getAttitude() const {
  return getAttitude_();
}

uci::type::QuaternionType& ResolvedCharacterizationAspectCoverageType::getAttitude() {
  return getAttitude_();
}

uci::type::ResolvedCharacterizationAspectCoverageType& ResolvedCharacterizationAspectCoverageType::setAttitude(const uci::type::QuaternionType& accessor) {
  chooseAttitude();
  if (&accessor != attitude_Accessor.get()) {
    attitude_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResolvedCharacterizationAspectCoverageType::isAttitude() const noexcept {
  return static_cast<bool>(attitude_Accessor);
}

uci::type::QuaternionType& ResolvedCharacterizationAspectCoverageType::chooseAttitude(const std::string& method, uci::base::accessorType::AccessorType type) {
  bodyReference_Accessor.reset();
  aspectSpan_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::quaternionType : type};
  if ((!attitude_Accessor) || (attitude_Accessor->getAccessorType() != requestedType)) {
    attitude_Accessor = QuaternionType::create(type);
    if (!attitude_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *attitude_Accessor;
}

uci::type::QuaternionType& ResolvedCharacterizationAspectCoverageType::chooseAttitude(uci::base::accessorType::AccessorType type) {
  return chooseAttitude("chooseAttitude", type);
}

uci::type::AngleTypeValue ResolvedCharacterizationAspectCoverageType::getAspectSpan() const {
  if (aspectSpan_Accessor) {
    return *aspectSpan_Accessor;
  }
  throw uci::base::UCIException("Error in getAspectSpan(): Unable to get AspectSpan, field not selected");
}

uci::type::ResolvedCharacterizationAspectCoverageType& ResolvedCharacterizationAspectCoverageType::setAspectSpan(uci::type::AngleTypeValue value) {
  chooseAspectSpan();
  aspectSpan_Accessor = value;
  return *this;
}

bool ResolvedCharacterizationAspectCoverageType::isAspectSpan() const noexcept {
  return static_cast<bool>(aspectSpan_Accessor);
}

void ResolvedCharacterizationAspectCoverageType::chooseAspectSpan() {
  bodyReference_Accessor.reset();
  attitude_Accessor.reset();
  if (!aspectSpan_Accessor) {
    aspectSpan_Accessor = boost::optional<asb_xs::Double>();
  }
}

std::unique_ptr<ResolvedCharacterizationAspectCoverageType> ResolvedCharacterizationAspectCoverageType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resolvedCharacterizationAspectCoverageType : type};
  return (requestedType == uci::type::accessorType::resolvedCharacterizationAspectCoverageType) ? boost::make_unique<ResolvedCharacterizationAspectCoverageType>() : nullptr;
}

/**  */
namespace ResolvedCharacterizationAspectCoverageType_Names {

constexpr const char* Extern_Type_Name{"ResolvedCharacterizationAspectCoverageType"};
constexpr const char* BodyReference_Name{"BodyReference"};
constexpr const char* Attitude_Name{"Attitude"};
constexpr const char* AspectSpan_Name{"AspectSpan"};

} // namespace ResolvedCharacterizationAspectCoverageType_Names

void ResolvedCharacterizationAspectCoverageType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResolvedCharacterizationAspectCoverageType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResolvedCharacterizationAspectCoverageType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResolvedCharacterizationAspectCoverageType_Names::BodyReference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResolvedCharacterizationAspectCoverageType::BodyReference& boundedList = accessor.chooseBodyReference();
        const uci::type::ResolvedCharacterizationAspectCoverageType::BodyReference::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ResolvedCharacterizationAspectCoverageType_Names::Attitude_Name) {
      QuaternionType::deserialize(valueType.second, accessor.chooseAttitude(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResolvedCharacterizationAspectCoverageType_Names::AspectSpan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAspectSpan(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string ResolvedCharacterizationAspectCoverageType::serialize(const uci::type::ResolvedCharacterizationAspectCoverageType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResolvedCharacterizationAspectCoverageType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResolvedCharacterizationAspectCoverageType_Names::Extern_Type_Name);
  }
  if (accessor.isBodyReference()) {
    {
      const uci::type::ResolvedCharacterizationAspectCoverageType::BodyReference& boundedList = accessor.getBodyReference();
      for (uci::type::ResolvedCharacterizationAspectCoverageType::BodyReference::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        BodyReferenceEnum::serialize(boundedList.at(i), node, ResolvedCharacterizationAspectCoverageType_Names::BodyReference_Name, false);
      }
    }
  } else if (accessor.isAttitude()) {
    QuaternionType::serialize(accessor.getAttitude(), node, ResolvedCharacterizationAspectCoverageType_Names::Attitude_Name);
  } else if (accessor.isAspectSpan()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAspectSpan(), node, ResolvedCharacterizationAspectCoverageType_Names::AspectSpan_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResolvedCharacterizationAspectCoverageType& ResolvedCharacterizationAspectCoverageType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResolvedCharacterizationAspectCoverageType>().release());
}

uci::type::ResolvedCharacterizationAspectCoverageType& ResolvedCharacterizationAspectCoverageType::create(const uci::type::ResolvedCharacterizationAspectCoverageType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResolvedCharacterizationAspectCoverageType> newAccessor{boost::make_unique<asb_uci::type::ResolvedCharacterizationAspectCoverageType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResolvedCharacterizationAspectCoverageType::destroy(uci::type::ResolvedCharacterizationAspectCoverageType& accessor) {
  delete dynamic_cast<asb_uci::type::ResolvedCharacterizationAspectCoverageType*>(&accessor);
}

} // namespace type

} // namespace uci

