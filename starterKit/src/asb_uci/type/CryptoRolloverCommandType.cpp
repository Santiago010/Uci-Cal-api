/** @file CryptoRolloverCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CryptoRolloverCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CryptoLocationType.h"
#include "../../../include/asb_uci/type/CryptoRolloverActionEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CryptoLocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CryptoRolloverActionEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CryptoRolloverCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CryptoRolloverCommandType::CryptoRolloverCommandType()
  : cryptoRolloverTarget_Accessor{boost::make_unique<CryptoLocationType>()},
    cryptoRolloverAction_Accessor{boost::make_unique<CryptoRolloverActionEnum>()} {
}

CryptoRolloverCommandType::~CryptoRolloverCommandType() = default;

void CryptoRolloverCommandType::copy(const uci::type::CryptoRolloverCommandType& accessor) {
  copyImpl(accessor, false);
}

void CryptoRolloverCommandType::copyImpl(const uci::type::CryptoRolloverCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CryptoRolloverCommandType&>(accessor);
    setCryptoRolloverTarget(*(accessorImpl.cryptoRolloverTarget_Accessor));
    setCryptoRolloverAction(*(accessorImpl.cryptoRolloverAction_Accessor));
    if (accessorImpl.hasRolloverScheduleTime()) {
      setRolloverScheduleTime(accessorImpl.getRolloverScheduleTime());
    } else {
      clearRolloverScheduleTime();
    }
    if (accessorImpl.hasZeroizePreviousSlot()) {
      setZeroizePreviousSlot(accessorImpl.getZeroizePreviousSlot());
    } else {
      clearZeroizePreviousSlot();
    }
  }
}

void CryptoRolloverCommandType::reset() noexcept {
  cryptoRolloverTarget_Accessor->reset();
  cryptoRolloverAction_Accessor->reset();
  clearRolloverScheduleTime();
  clearZeroizePreviousSlot();
}

const uci::type::CryptoLocationType& CryptoRolloverCommandType::getCryptoRolloverTarget() const {
  return *cryptoRolloverTarget_Accessor;
}

uci::type::CryptoLocationType& CryptoRolloverCommandType::getCryptoRolloverTarget() {
  return *cryptoRolloverTarget_Accessor;
}

uci::type::CryptoRolloverCommandType& CryptoRolloverCommandType::setCryptoRolloverTarget(const uci::type::CryptoLocationType& accessor) {
  if (&accessor != cryptoRolloverTarget_Accessor.get()) {
    cryptoRolloverTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CryptoRolloverActionEnum& CryptoRolloverCommandType::getCryptoRolloverAction() const {
  return *cryptoRolloverAction_Accessor;
}

uci::type::CryptoRolloverActionEnum& CryptoRolloverCommandType::getCryptoRolloverAction() {
  return *cryptoRolloverAction_Accessor;
}

uci::type::CryptoRolloverCommandType& CryptoRolloverCommandType::setCryptoRolloverAction(const uci::type::CryptoRolloverActionEnum& accessor) {
  if (&accessor != cryptoRolloverAction_Accessor.get()) {
    cryptoRolloverAction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CryptoRolloverCommandType& CryptoRolloverCommandType::setCryptoRolloverAction(uci::type::CryptoRolloverActionEnum::EnumerationItem value) {
  cryptoRolloverAction_Accessor->setValue(value);
  return *this;
}


uci::type::DateTimeTypeValue CryptoRolloverCommandType::getRolloverScheduleTime() const {
  if (rolloverScheduleTime_Accessor) {
    return *rolloverScheduleTime_Accessor;
  }
  throw uci::base::UCIException("Error in getRolloverScheduleTime(): An attempt was made to get an optional field that was not enabled, call hasRolloverScheduleTime() to determine if it is safe to call getRolloverScheduleTime()");
}

uci::type::CryptoRolloverCommandType& CryptoRolloverCommandType::setRolloverScheduleTime(uci::type::DateTimeTypeValue value) {
  rolloverScheduleTime_Accessor = value;
  return *this;
}

bool CryptoRolloverCommandType::hasRolloverScheduleTime() const noexcept {
  return rolloverScheduleTime_Accessor.has_value();
}

uci::type::CryptoRolloverCommandType& CryptoRolloverCommandType::clearRolloverScheduleTime() noexcept {
  rolloverScheduleTime_Accessor.reset();
  return *this;
}

xs::Boolean CryptoRolloverCommandType::getZeroizePreviousSlot() const {
  if (zeroizePreviousSlot_Accessor) {
    return *zeroizePreviousSlot_Accessor;
  }
  throw uci::base::UCIException("Error in getZeroizePreviousSlot(): An attempt was made to get an optional field that was not enabled, call hasZeroizePreviousSlot() to determine if it is safe to call getZeroizePreviousSlot()");
}

uci::type::CryptoRolloverCommandType& CryptoRolloverCommandType::setZeroizePreviousSlot(xs::Boolean value) {
  zeroizePreviousSlot_Accessor = value;
  return *this;
}

bool CryptoRolloverCommandType::hasZeroizePreviousSlot() const noexcept {
  return zeroizePreviousSlot_Accessor.has_value();
}

uci::type::CryptoRolloverCommandType& CryptoRolloverCommandType::clearZeroizePreviousSlot() noexcept {
  zeroizePreviousSlot_Accessor.reset();
  return *this;
}

std::unique_ptr<CryptoRolloverCommandType> CryptoRolloverCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cryptoRolloverCommandType : type};
  return (requestedType == uci::type::accessorType::cryptoRolloverCommandType) ? boost::make_unique<CryptoRolloverCommandType>() : nullptr;
}

/**  */
namespace CryptoRolloverCommandType_Names {

constexpr const char* Extern_Type_Name{"CryptoRolloverCommandType"};
constexpr const char* CryptoRolloverTarget_Name{"CryptoRolloverTarget"};
constexpr const char* CryptoRolloverAction_Name{"CryptoRolloverAction"};
constexpr const char* RolloverScheduleTime_Name{"RolloverScheduleTime"};
constexpr const char* ZeroizePreviousSlot_Name{"ZeroizePreviousSlot"};

} // namespace CryptoRolloverCommandType_Names

void CryptoRolloverCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CryptoRolloverCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CryptoRolloverCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CryptoRolloverCommandType_Names::CryptoRolloverTarget_Name) {
      CryptoLocationType::deserialize(valueType.second, accessor.getCryptoRolloverTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CryptoRolloverCommandType_Names::CryptoRolloverAction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCryptoRolloverAction().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CryptoRolloverCommandType_Names::RolloverScheduleTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRolloverScheduleTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + CryptoRolloverCommandType_Names::ZeroizePreviousSlot_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setZeroizePreviousSlot(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string CryptoRolloverCommandType::serialize(const uci::type::CryptoRolloverCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CryptoRolloverCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CryptoRolloverCommandType_Names::Extern_Type_Name);
  }
  CryptoLocationType::serialize(accessor.getCryptoRolloverTarget(), node, CryptoRolloverCommandType_Names::CryptoRolloverTarget_Name);
  CryptoRolloverActionEnum::serialize(accessor.getCryptoRolloverAction(), node, CryptoRolloverCommandType_Names::CryptoRolloverAction_Name, false);
  if (accessor.hasRolloverScheduleTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getRolloverScheduleTime(), node, CryptoRolloverCommandType_Names::RolloverScheduleTime_Name);
  }
  if (accessor.hasZeroizePreviousSlot()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getZeroizePreviousSlot(), node, CryptoRolloverCommandType_Names::ZeroizePreviousSlot_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CryptoRolloverCommandType& CryptoRolloverCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CryptoRolloverCommandType>().release());
}

uci::type::CryptoRolloverCommandType& CryptoRolloverCommandType::create(const uci::type::CryptoRolloverCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CryptoRolloverCommandType> newAccessor{boost::make_unique<asb_uci::type::CryptoRolloverCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CryptoRolloverCommandType::destroy(uci::type::CryptoRolloverCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::CryptoRolloverCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

