/** @file ObservationCountsByHourType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ObservationCountsByHourType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ObservationCountsByHourType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ObservationCountsByHourType::ObservationCountsByHourType() = default;

ObservationCountsByHourType::~ObservationCountsByHourType() = default;

void ObservationCountsByHourType::copy(const uci::type::ObservationCountsByHourType& accessor) {
  copyImpl(accessor, false);
}

void ObservationCountsByHourType::copyImpl(const uci::type::ObservationCountsByHourType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ObservationCountsByHourType&>(accessor);
    setHour00Count(accessorImpl.hour00Count_Accessor);
    setHour01Count(accessorImpl.hour01Count_Accessor);
    setHour02Count(accessorImpl.hour02Count_Accessor);
    setHour03Count(accessorImpl.hour03Count_Accessor);
    setHour04Count(accessorImpl.hour04Count_Accessor);
    setHour05Count(accessorImpl.hour05Count_Accessor);
    setHour06Count(accessorImpl.hour06Count_Accessor);
    setHour07Count(accessorImpl.hour07Count_Accessor);
    setHour08Count(accessorImpl.hour08Count_Accessor);
    setHour09Count(accessorImpl.hour09Count_Accessor);
    setHour10Count(accessorImpl.hour10Count_Accessor);
    setHour11Count(accessorImpl.hour11Count_Accessor);
    setHour12Count(accessorImpl.hour12Count_Accessor);
    setHour13Count(accessorImpl.hour13Count_Accessor);
    setHour14Count(accessorImpl.hour14Count_Accessor);
    setHour15Count(accessorImpl.hour15Count_Accessor);
    setHour16Count(accessorImpl.hour16Count_Accessor);
    setHour17Count(accessorImpl.hour17Count_Accessor);
    setHour18Count(accessorImpl.hour18Count_Accessor);
    setHour19Count(accessorImpl.hour19Count_Accessor);
    setHour20Count(accessorImpl.hour20Count_Accessor);
    setHour21Count(accessorImpl.hour21Count_Accessor);
    setHour22Count(accessorImpl.hour22Count_Accessor);
    setHour23Count(accessorImpl.hour23Count_Accessor);
  }
}

void ObservationCountsByHourType::reset() noexcept {
  hour00Count_Accessor = 0;
  hour01Count_Accessor = 0;
  hour02Count_Accessor = 0;
  hour03Count_Accessor = 0;
  hour04Count_Accessor = 0;
  hour05Count_Accessor = 0;
  hour06Count_Accessor = 0;
  hour07Count_Accessor = 0;
  hour08Count_Accessor = 0;
  hour09Count_Accessor = 0;
  hour10Count_Accessor = 0;
  hour11Count_Accessor = 0;
  hour12Count_Accessor = 0;
  hour13Count_Accessor = 0;
  hour14Count_Accessor = 0;
  hour15Count_Accessor = 0;
  hour16Count_Accessor = 0;
  hour17Count_Accessor = 0;
  hour18Count_Accessor = 0;
  hour19Count_Accessor = 0;
  hour20Count_Accessor = 0;
  hour21Count_Accessor = 0;
  hour22Count_Accessor = 0;
  hour23Count_Accessor = 0;
}

xs::UnsignedInt ObservationCountsByHourType::getHour00Count() const {
  return hour00Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour00Count(xs::UnsignedInt value) {
  hour00Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour01Count() const {
  return hour01Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour01Count(xs::UnsignedInt value) {
  hour01Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour02Count() const {
  return hour02Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour02Count(xs::UnsignedInt value) {
  hour02Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour03Count() const {
  return hour03Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour03Count(xs::UnsignedInt value) {
  hour03Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour04Count() const {
  return hour04Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour04Count(xs::UnsignedInt value) {
  hour04Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour05Count() const {
  return hour05Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour05Count(xs::UnsignedInt value) {
  hour05Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour06Count() const {
  return hour06Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour06Count(xs::UnsignedInt value) {
  hour06Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour07Count() const {
  return hour07Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour07Count(xs::UnsignedInt value) {
  hour07Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour08Count() const {
  return hour08Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour08Count(xs::UnsignedInt value) {
  hour08Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour09Count() const {
  return hour09Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour09Count(xs::UnsignedInt value) {
  hour09Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour10Count() const {
  return hour10Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour10Count(xs::UnsignedInt value) {
  hour10Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour11Count() const {
  return hour11Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour11Count(xs::UnsignedInt value) {
  hour11Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour12Count() const {
  return hour12Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour12Count(xs::UnsignedInt value) {
  hour12Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour13Count() const {
  return hour13Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour13Count(xs::UnsignedInt value) {
  hour13Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour14Count() const {
  return hour14Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour14Count(xs::UnsignedInt value) {
  hour14Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour15Count() const {
  return hour15Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour15Count(xs::UnsignedInt value) {
  hour15Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour16Count() const {
  return hour16Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour16Count(xs::UnsignedInt value) {
  hour16Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour17Count() const {
  return hour17Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour17Count(xs::UnsignedInt value) {
  hour17Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour18Count() const {
  return hour18Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour18Count(xs::UnsignedInt value) {
  hour18Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour19Count() const {
  return hour19Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour19Count(xs::UnsignedInt value) {
  hour19Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour20Count() const {
  return hour20Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour20Count(xs::UnsignedInt value) {
  hour20Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour21Count() const {
  return hour21Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour21Count(xs::UnsignedInt value) {
  hour21Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour22Count() const {
  return hour22Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour22Count(xs::UnsignedInt value) {
  hour22Count_Accessor = value;
  return *this;
}


xs::UnsignedInt ObservationCountsByHourType::getHour23Count() const {
  return hour23Count_Accessor;
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::setHour23Count(xs::UnsignedInt value) {
  hour23Count_Accessor = value;
  return *this;
}


std::unique_ptr<ObservationCountsByHourType> ObservationCountsByHourType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::observationCountsByHourType : type};
  return (requestedType == uci::type::accessorType::observationCountsByHourType) ? boost::make_unique<ObservationCountsByHourType>() : nullptr;
}

/**  */
namespace ObservationCountsByHourType_Names {

constexpr const char* Extern_Type_Name{"ObservationCountsByHourType"};
constexpr const char* Hour00Count_Name{"Hour00Count"};
constexpr const char* Hour01Count_Name{"Hour01Count"};
constexpr const char* Hour02Count_Name{"Hour02Count"};
constexpr const char* Hour03Count_Name{"Hour03Count"};
constexpr const char* Hour04Count_Name{"Hour04Count"};
constexpr const char* Hour05Count_Name{"Hour05Count"};
constexpr const char* Hour06Count_Name{"Hour06Count"};
constexpr const char* Hour07Count_Name{"Hour07Count"};
constexpr const char* Hour08Count_Name{"Hour08Count"};
constexpr const char* Hour09Count_Name{"Hour09Count"};
constexpr const char* Hour10Count_Name{"Hour10Count"};
constexpr const char* Hour11Count_Name{"Hour11Count"};
constexpr const char* Hour12Count_Name{"Hour12Count"};
constexpr const char* Hour13Count_Name{"Hour13Count"};
constexpr const char* Hour14Count_Name{"Hour14Count"};
constexpr const char* Hour15Count_Name{"Hour15Count"};
constexpr const char* Hour16Count_Name{"Hour16Count"};
constexpr const char* Hour17Count_Name{"Hour17Count"};
constexpr const char* Hour18Count_Name{"Hour18Count"};
constexpr const char* Hour19Count_Name{"Hour19Count"};
constexpr const char* Hour20Count_Name{"Hour20Count"};
constexpr const char* Hour21Count_Name{"Hour21Count"};
constexpr const char* Hour22Count_Name{"Hour22Count"};
constexpr const char* Hour23Count_Name{"Hour23Count"};

} // namespace ObservationCountsByHourType_Names

void ObservationCountsByHourType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ObservationCountsByHourType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ObservationCountsByHourType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour00Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour00Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour01Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour01Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour02Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour02Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour03Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour03Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour04Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour04Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour05Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour05Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour06Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour06Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour07Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour07Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour08Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour08Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour09Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour09Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour10Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour10Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour11Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour11Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour12Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour12Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour13Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour13Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour14Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour14Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour15Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour15Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour16Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour16Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour17Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour17Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour18Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour18Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour19Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour19Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour20Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour20Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour21Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour21Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour22Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour22Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationCountsByHourType_Names::Hour23Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHour23Count(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string ObservationCountsByHourType::serialize(const uci::type::ObservationCountsByHourType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ObservationCountsByHourType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ObservationCountsByHourType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour00Count(), node, ObservationCountsByHourType_Names::Hour00Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour01Count(), node, ObservationCountsByHourType_Names::Hour01Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour02Count(), node, ObservationCountsByHourType_Names::Hour02Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour03Count(), node, ObservationCountsByHourType_Names::Hour03Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour04Count(), node, ObservationCountsByHourType_Names::Hour04Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour05Count(), node, ObservationCountsByHourType_Names::Hour05Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour06Count(), node, ObservationCountsByHourType_Names::Hour06Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour07Count(), node, ObservationCountsByHourType_Names::Hour07Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour08Count(), node, ObservationCountsByHourType_Names::Hour08Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour09Count(), node, ObservationCountsByHourType_Names::Hour09Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour10Count(), node, ObservationCountsByHourType_Names::Hour10Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour11Count(), node, ObservationCountsByHourType_Names::Hour11Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour12Count(), node, ObservationCountsByHourType_Names::Hour12Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour13Count(), node, ObservationCountsByHourType_Names::Hour13Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour14Count(), node, ObservationCountsByHourType_Names::Hour14Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour15Count(), node, ObservationCountsByHourType_Names::Hour15Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour16Count(), node, ObservationCountsByHourType_Names::Hour16Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour17Count(), node, ObservationCountsByHourType_Names::Hour17Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour18Count(), node, ObservationCountsByHourType_Names::Hour18Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour19Count(), node, ObservationCountsByHourType_Names::Hour19Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour20Count(), node, ObservationCountsByHourType_Names::Hour20Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour21Count(), node, ObservationCountsByHourType_Names::Hour21Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour22Count(), node, ObservationCountsByHourType_Names::Hour22Count_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHour23Count(), node, ObservationCountsByHourType_Names::Hour23Count_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ObservationCountsByHourType>().release());
}

uci::type::ObservationCountsByHourType& ObservationCountsByHourType::create(const uci::type::ObservationCountsByHourType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ObservationCountsByHourType> newAccessor{boost::make_unique<asb_uci::type::ObservationCountsByHourType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ObservationCountsByHourType::destroy(uci::type::ObservationCountsByHourType& accessor) {
  delete dynamic_cast<asb_uci::type::ObservationCountsByHourType*>(&accessor);
}

} // namespace type

} // namespace uci

