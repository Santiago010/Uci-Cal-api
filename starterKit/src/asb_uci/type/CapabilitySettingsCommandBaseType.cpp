/** @file CapabilitySettingsCommandBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CapabilitySettingsCommandBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityPrecedenceType.h"
#include "asb_uci/type/CapabilityStateType.h"
#include "asb_uci/type/CommandBaseType.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/MDF_CommandType.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityPrecedenceType.h"
#include "uci/type/CapabilitySettingsCommandBaseType.h"
#include "uci/type/CapabilityStateType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/MDF_CommandType.h"
#include "uci/type/SubsystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CapabilitySettingsCommandBaseType::CapabilitySettingsCommandBaseType()
  : subsystemID_Accessor{boost::make_unique<SubsystemID_Type>()},
    activateMDF_Accessor{boost::make_unique<ActivateMDF>(0, SIZE_MAX)},
    capabilityPrecedence_Accessor{boost::make_unique<CapabilityPrecedence>(0, SIZE_MAX)},
    capabilityState_Accessor{boost::make_unique<CapabilityState>(0, SIZE_MAX)} {
}

CapabilitySettingsCommandBaseType::~CapabilitySettingsCommandBaseType() = default;

void CapabilitySettingsCommandBaseType::copy(const uci::type::CapabilitySettingsCommandBaseType& accessor) {
  copyImpl(accessor, false);
}

void CapabilitySettingsCommandBaseType::copyImpl(const uci::type::CapabilitySettingsCommandBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::capabilitySettingsCommandBaseType)) {
      CommandBaseType::copyImpl(accessor, false);
      const auto& accessorImpl = dynamic_cast<const CapabilitySettingsCommandBaseType&>(accessor);
      setSubsystemID(*(accessorImpl.subsystemID_Accessor));
      setActivateMDF(*(accessorImpl.activateMDF_Accessor));
      setCapabilityPrecedence(*(accessorImpl.capabilityPrecedence_Accessor));
      setCapabilityState(*(accessorImpl.capabilityState_Accessor));
      if (accessorImpl.representationKey_Accessor) {
        setRepresentationKey(*(accessorImpl.representationKey_Accessor));
      } else {
        representationKey_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void CapabilitySettingsCommandBaseType::reset() noexcept {
  CommandBaseType::reset();
  subsystemID_Accessor->reset();
  activateMDF_Accessor->reset();
  capabilityPrecedence_Accessor->reset();
  capabilityState_Accessor->reset();
  representationKey_Accessor.reset();
}

const uci::type::SubsystemID_Type& CapabilitySettingsCommandBaseType::getSubsystemID() const {
  return *subsystemID_Accessor;
}

uci::type::SubsystemID_Type& CapabilitySettingsCommandBaseType::getSubsystemID() {
  return *subsystemID_Accessor;
}

uci::type::CapabilitySettingsCommandBaseType& CapabilitySettingsCommandBaseType::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilitySettingsCommandBaseType::ActivateMDF& CapabilitySettingsCommandBaseType::getActivateMDF() const {
  return *activateMDF_Accessor;
}

uci::type::CapabilitySettingsCommandBaseType::ActivateMDF& CapabilitySettingsCommandBaseType::getActivateMDF() {
  return *activateMDF_Accessor;
}

uci::type::CapabilitySettingsCommandBaseType& CapabilitySettingsCommandBaseType::setActivateMDF(const uci::type::CapabilitySettingsCommandBaseType::ActivateMDF& accessor) {
  if (&accessor != activateMDF_Accessor.get()) {
    activateMDF_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilitySettingsCommandBaseType::CapabilityPrecedence& CapabilitySettingsCommandBaseType::getCapabilityPrecedence() const {
  return *capabilityPrecedence_Accessor;
}

uci::type::CapabilitySettingsCommandBaseType::CapabilityPrecedence& CapabilitySettingsCommandBaseType::getCapabilityPrecedence() {
  return *capabilityPrecedence_Accessor;
}

uci::type::CapabilitySettingsCommandBaseType& CapabilitySettingsCommandBaseType::setCapabilityPrecedence(const uci::type::CapabilitySettingsCommandBaseType::CapabilityPrecedence& accessor) {
  if (&accessor != capabilityPrecedence_Accessor.get()) {
    capabilityPrecedence_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilitySettingsCommandBaseType::CapabilityState& CapabilitySettingsCommandBaseType::getCapabilityState() const {
  return *capabilityState_Accessor;
}

uci::type::CapabilitySettingsCommandBaseType::CapabilityState& CapabilitySettingsCommandBaseType::getCapabilityState() {
  return *capabilityState_Accessor;
}

uci::type::CapabilitySettingsCommandBaseType& CapabilitySettingsCommandBaseType::setCapabilityState(const uci::type::CapabilitySettingsCommandBaseType::CapabilityState& accessor) {
  if (&accessor != capabilityState_Accessor.get()) {
    capabilityState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ForeignKeyType& CapabilitySettingsCommandBaseType::getRepresentationKey_() const {
  if (representationKey_Accessor) {
    return *representationKey_Accessor;
  }
  throw uci::base::UCIException("Error in getRepresentationKey(): An attempt was made to get an optional field that was not enabled, call hasRepresentationKey() to determine if it is safe to call getRepresentationKey()");
}

const uci::type::ForeignKeyType& CapabilitySettingsCommandBaseType::getRepresentationKey() const {
  return getRepresentationKey_();
}

uci::type::ForeignKeyType& CapabilitySettingsCommandBaseType::getRepresentationKey() {
  return getRepresentationKey_();
}

uci::type::CapabilitySettingsCommandBaseType& CapabilitySettingsCommandBaseType::setRepresentationKey(const uci::type::ForeignKeyType& accessor) {
  enableRepresentationKey(accessor.getAccessorType());
  if (&accessor != representationKey_Accessor.get()) {
    representationKey_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CapabilitySettingsCommandBaseType::hasRepresentationKey() const noexcept {
  return static_cast<bool>(representationKey_Accessor);
}

uci::type::ForeignKeyType& CapabilitySettingsCommandBaseType::enableRepresentationKey(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!representationKey_Accessor) || (representationKey_Accessor->getAccessorType() != requestedType)) {
    representationKey_Accessor = ForeignKeyType::create(requestedType);
    if (!representationKey_Accessor) {
      throw uci::base::UCIException("Error in enableRepresentationKey(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *representationKey_Accessor;
}

uci::type::CapabilitySettingsCommandBaseType& CapabilitySettingsCommandBaseType::clearRepresentationKey() noexcept {
  representationKey_Accessor.reset();
  return *this;
}

std::unique_ptr<CapabilitySettingsCommandBaseType> CapabilitySettingsCommandBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilitySettingsCommandBaseType : type};
  return std::unique_ptr<CapabilitySettingsCommandBaseType>(dynamic_cast<CapabilitySettingsCommandBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace CapabilitySettingsCommandBaseType_Names {

constexpr const char* Extern_Type_Name{"CapabilitySettingsCommandBaseType"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* ActivateMDF_Name{"ActivateMDF"};
constexpr const char* CapabilityPrecedence_Name{"CapabilityPrecedence"};
constexpr const char* CapabilityState_Name{"CapabilityState"};
constexpr const char* RepresentationKey_Name{"RepresentationKey"};

} // namespace CapabilitySettingsCommandBaseType_Names

void CapabilitySettingsCommandBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilitySettingsCommandBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilitySettingsCommandBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilitySettingsCommandBaseType_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.getSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilitySettingsCommandBaseType_Names::ActivateMDF_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilitySettingsCommandBaseType::ActivateMDF& boundedList = accessor.getActivateMDF();
        const uci::type::CapabilitySettingsCommandBaseType::ActivateMDF::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MDF_CommandType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilitySettingsCommandBaseType_Names::CapabilityPrecedence_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilitySettingsCommandBaseType::CapabilityPrecedence& boundedList = accessor.getCapabilityPrecedence();
        const uci::type::CapabilitySettingsCommandBaseType::CapabilityPrecedence::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityPrecedenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilitySettingsCommandBaseType_Names::CapabilityState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilitySettingsCommandBaseType::CapabilityState& boundedList = accessor.getCapabilityState();
        const uci::type::CapabilitySettingsCommandBaseType::CapabilityState::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityStateType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilitySettingsCommandBaseType_Names::RepresentationKey_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRepresentationKey(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  CommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CapabilitySettingsCommandBaseType::serialize(const uci::type::CapabilitySettingsCommandBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CapabilitySettingsCommandBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::capabilitySettingsCommandBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilitySettingsCommandBaseType_Names::Extern_Type_Name);
    }
    CommandBaseType::serialize(accessor, node, "", false, false, false);
    SubsystemID_Type::serialize(accessor.getSubsystemID(), node, CapabilitySettingsCommandBaseType_Names::SubsystemID_Name);
    {
      const uci::type::CapabilitySettingsCommandBaseType::ActivateMDF& boundedList = accessor.getActivateMDF();
      for (uci::type::CapabilitySettingsCommandBaseType::ActivateMDF::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::MDF_CommandType::serialize(boundedList.at(i), node, CapabilitySettingsCommandBaseType_Names::ActivateMDF_Name);
      }
    }
    {
      const uci::type::CapabilitySettingsCommandBaseType::CapabilityPrecedence& boundedList = accessor.getCapabilityPrecedence();
      for (uci::type::CapabilitySettingsCommandBaseType::CapabilityPrecedence::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::CapabilityPrecedenceType::serialize(boundedList.at(i), node, CapabilitySettingsCommandBaseType_Names::CapabilityPrecedence_Name);
      }
    }
    {
      const uci::type::CapabilitySettingsCommandBaseType::CapabilityState& boundedList = accessor.getCapabilityState();
      for (uci::type::CapabilitySettingsCommandBaseType::CapabilityState::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::CapabilityStateType::serialize(boundedList.at(i), node, CapabilitySettingsCommandBaseType_Names::CapabilityState_Name);
      }
    }
    if (accessor.hasRepresentationKey()) {
      ForeignKeyType::serialize(accessor.getRepresentationKey(), node, CapabilitySettingsCommandBaseType_Names::RepresentationKey_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CapabilitySettingsCommandBaseType& CapabilitySettingsCommandBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CapabilitySettingsCommandBaseType>().release());
}

uci::type::CapabilitySettingsCommandBaseType& CapabilitySettingsCommandBaseType::create(const uci::type::CapabilitySettingsCommandBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CapabilitySettingsCommandBaseType> newAccessor{boost::make_unique<asb_uci::type::CapabilitySettingsCommandBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CapabilitySettingsCommandBaseType::destroy(uci::type::CapabilitySettingsCommandBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::CapabilitySettingsCommandBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

