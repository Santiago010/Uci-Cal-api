/** @file AO_ActivityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AO_ActivityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AO_ComponentSettingsType.h"
#include "../../../include/asb_uci/type/ActivityCommandBaseType.h"
#include "../../../include/asb_uci/type/TargetType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AO_ActivityCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AO_ComponentSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TargetType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AO_ActivityCommandType::AO_ActivityCommandType() = default;

AO_ActivityCommandType::~AO_ActivityCommandType() = default;

void AO_ActivityCommandType::copy(const uci::type::AO_ActivityCommandType& accessor) {
  copyImpl(accessor, false);
}

void AO_ActivityCommandType::copyImpl(const uci::type::AO_ActivityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ActivityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const AO_ActivityCommandType&>(accessor);
    if (accessorImpl.changeComponentSettings_Accessor) {
      setChangeComponentSettings(*(accessorImpl.changeComponentSettings_Accessor));
    } else {
      changeComponentSettings_Accessor.reset();
    }
    if (accessorImpl.changeTarget_Accessor) {
      setChangeTarget(*(accessorImpl.changeTarget_Accessor));
    } else {
      changeTarget_Accessor.reset();
    }
  }
}

void AO_ActivityCommandType::reset() noexcept {
  ActivityCommandBaseType::reset();
  changeComponentSettings_Accessor.reset();
  changeTarget_Accessor.reset();
}

uci::type::AO_ComponentSettingsType& AO_ActivityCommandType::getChangeComponentSettings_() const {
  if (changeComponentSettings_Accessor) {
    return *changeComponentSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeComponentSettings(): An attempt was made to get an optional field that was not enabled, call hasChangeComponentSettings() to determine if it is safe to call getChangeComponentSettings()");
}

const uci::type::AO_ComponentSettingsType& AO_ActivityCommandType::getChangeComponentSettings() const {
  return getChangeComponentSettings_();
}

uci::type::AO_ComponentSettingsType& AO_ActivityCommandType::getChangeComponentSettings() {
  return getChangeComponentSettings_();
}

uci::type::AO_ActivityCommandType& AO_ActivityCommandType::setChangeComponentSettings(const uci::type::AO_ComponentSettingsType& accessor) {
  enableChangeComponentSettings();
  if (&accessor != changeComponentSettings_Accessor.get()) {
    changeComponentSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AO_ActivityCommandType::hasChangeComponentSettings() const noexcept {
  return static_cast<bool>(changeComponentSettings_Accessor);
}

uci::type::AO_ComponentSettingsType& AO_ActivityCommandType::enableChangeComponentSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_ComponentSettingsType : type};
  if ((!changeComponentSettings_Accessor) || (changeComponentSettings_Accessor->getAccessorType() != requestedType)) {
    changeComponentSettings_Accessor = AO_ComponentSettingsType::create(requestedType);
    if (!changeComponentSettings_Accessor) {
      throw uci::base::UCIException("Error in enableChangeComponentSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeComponentSettings_Accessor;
}

uci::type::AO_ActivityCommandType& AO_ActivityCommandType::clearChangeComponentSettings() noexcept {
  changeComponentSettings_Accessor.reset();
  return *this;
}

uci::type::TargetType& AO_ActivityCommandType::getChangeTarget_() const {
  if (changeTarget_Accessor) {
    return *changeTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeTarget(): An attempt was made to get an optional field that was not enabled, call hasChangeTarget() to determine if it is safe to call getChangeTarget()");
}

const uci::type::TargetType& AO_ActivityCommandType::getChangeTarget() const {
  return getChangeTarget_();
}

uci::type::TargetType& AO_ActivityCommandType::getChangeTarget() {
  return getChangeTarget_();
}

uci::type::AO_ActivityCommandType& AO_ActivityCommandType::setChangeTarget(const uci::type::TargetType& accessor) {
  enableChangeTarget();
  if (&accessor != changeTarget_Accessor.get()) {
    changeTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AO_ActivityCommandType::hasChangeTarget() const noexcept {
  return static_cast<bool>(changeTarget_Accessor);
}

uci::type::TargetType& AO_ActivityCommandType::enableChangeTarget(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::targetType : type};
  if ((!changeTarget_Accessor) || (changeTarget_Accessor->getAccessorType() != requestedType)) {
    changeTarget_Accessor = TargetType::create(requestedType);
    if (!changeTarget_Accessor) {
      throw uci::base::UCIException("Error in enableChangeTarget(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeTarget_Accessor;
}

uci::type::AO_ActivityCommandType& AO_ActivityCommandType::clearChangeTarget() noexcept {
  changeTarget_Accessor.reset();
  return *this;
}

std::unique_ptr<AO_ActivityCommandType> AO_ActivityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_ActivityCommandType : type};
  return (requestedType == uci::type::accessorType::aO_ActivityCommandType) ? boost::make_unique<AO_ActivityCommandType>() : nullptr;
}

/**  */
namespace AO_ActivityCommandType_Names {

constexpr const char* Extern_Type_Name{"AO_ActivityCommandType"};
constexpr const char* ChangeComponentSettings_Name{"ChangeComponentSettings"};
constexpr const char* ChangeTarget_Name{"ChangeTarget"};

} // namespace AO_ActivityCommandType_Names

void AO_ActivityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AO_ActivityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AO_ActivityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AO_ActivityCommandType_Names::ChangeComponentSettings_Name) {
      AO_ComponentSettingsType::deserialize(valueType.second, accessor.enableChangeComponentSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AO_ActivityCommandType_Names::ChangeTarget_Name) {
      TargetType::deserialize(valueType.second, accessor.enableChangeTarget(), nodeName, nsPrefix);
    }
  }
  ActivityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string AO_ActivityCommandType::serialize(const uci::type::AO_ActivityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AO_ActivityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AO_ActivityCommandType_Names::Extern_Type_Name);
  }
  ActivityCommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasChangeComponentSettings()) {
    AO_ComponentSettingsType::serialize(accessor.getChangeComponentSettings(), node, AO_ActivityCommandType_Names::ChangeComponentSettings_Name);
  }
  if (accessor.hasChangeTarget()) {
    TargetType::serialize(accessor.getChangeTarget(), node, AO_ActivityCommandType_Names::ChangeTarget_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AO_ActivityCommandType& AO_ActivityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AO_ActivityCommandType>().release());
}

uci::type::AO_ActivityCommandType& AO_ActivityCommandType::create(const uci::type::AO_ActivityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AO_ActivityCommandType> newAccessor{boost::make_unique<asb_uci::type::AO_ActivityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AO_ActivityCommandType::destroy(uci::type::AO_ActivityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::AO_ActivityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

