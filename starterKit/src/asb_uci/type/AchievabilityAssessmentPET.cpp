/** @file AchievabilityAssessmentPET.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AchievabilityAssessmentPET.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AchievabilityEnum.h"
#include "asb_uci/type/AssessmentStatusType.h"
#include "asb_uci/type/CannotComplyType.h"
#include "asb_uci/type/RoutePlanReferencesType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AchievabilityAssessmentPET.h"
#include "uci/type/AchievabilityEnum.h"
#include "uci/type/CannotComplyType.h"
#include "uci/type/RoutePlanReferencesType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AchievabilityAssessmentPET::AchievabilityAssessmentPET()
  : achievability_Accessor{boost::make_unique<AchievabilityEnum>()} {
}

AchievabilityAssessmentPET::~AchievabilityAssessmentPET() = default;

void AchievabilityAssessmentPET::copy(const uci::type::AchievabilityAssessmentPET& accessor) {
  copyImpl(accessor, false);
}

void AchievabilityAssessmentPET::copyImpl(const uci::type::AchievabilityAssessmentPET& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::achievabilityAssessmentPET)) {
      AssessmentStatusType::copyImpl(accessor, false);
      const auto& accessorImpl = dynamic_cast<const AchievabilityAssessmentPET&>(accessor);
      if (accessorImpl.routePlanReference_Accessor) {
        setRoutePlanReference(*(accessorImpl.routePlanReference_Accessor));
      } else {
        routePlanReference_Accessor.reset();
      }
      setAchievability(*(accessorImpl.achievability_Accessor));
      if (accessorImpl.notAchievableReason_Accessor) {
        setNotAchievableReason(*(accessorImpl.notAchievableReason_Accessor));
      } else {
        notAchievableReason_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void AchievabilityAssessmentPET::reset() noexcept {
  AssessmentStatusType::reset();
  routePlanReference_Accessor.reset();
  achievability_Accessor->reset();
  notAchievableReason_Accessor.reset();
}

uci::type::RoutePlanReferencesType& AchievabilityAssessmentPET::getRoutePlanReference_() const {
  if (routePlanReference_Accessor) {
    return *routePlanReference_Accessor;
  }
  throw uci::base::UCIException("Error in getRoutePlanReference(): An attempt was made to get an optional field that was not enabled, call hasRoutePlanReference() to determine if it is safe to call getRoutePlanReference()");
}

const uci::type::RoutePlanReferencesType& AchievabilityAssessmentPET::getRoutePlanReference() const {
  return getRoutePlanReference_();
}

uci::type::RoutePlanReferencesType& AchievabilityAssessmentPET::getRoutePlanReference() {
  return getRoutePlanReference_();
}

uci::type::AchievabilityAssessmentPET& AchievabilityAssessmentPET::setRoutePlanReference(const uci::type::RoutePlanReferencesType& accessor) {
  enableRoutePlanReference();
  if (&accessor != routePlanReference_Accessor.get()) {
    routePlanReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AchievabilityAssessmentPET::hasRoutePlanReference() const noexcept {
  return static_cast<bool>(routePlanReference_Accessor);
}

uci::type::RoutePlanReferencesType& AchievabilityAssessmentPET::enableRoutePlanReference(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePlanReferencesType : type};
  if ((!routePlanReference_Accessor) || (routePlanReference_Accessor->getAccessorType() != requestedType)) {
    routePlanReference_Accessor = RoutePlanReferencesType::create(requestedType);
    if (!routePlanReference_Accessor) {
      throw uci::base::UCIException("Error in enableRoutePlanReference(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routePlanReference_Accessor;
}

uci::type::AchievabilityAssessmentPET& AchievabilityAssessmentPET::clearRoutePlanReference() noexcept {
  routePlanReference_Accessor.reset();
  return *this;
}

const uci::type::AchievabilityEnum& AchievabilityAssessmentPET::getAchievability() const {
  return *achievability_Accessor;
}

uci::type::AchievabilityEnum& AchievabilityAssessmentPET::getAchievability() {
  return *achievability_Accessor;
}

uci::type::AchievabilityAssessmentPET& AchievabilityAssessmentPET::setAchievability(const uci::type::AchievabilityEnum& accessor) {
  if (&accessor != achievability_Accessor.get()) {
    achievability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AchievabilityAssessmentPET& AchievabilityAssessmentPET::setAchievability(uci::type::AchievabilityEnum::EnumerationItem value) {
  achievability_Accessor->setValue(value);
  return *this;
}


uci::type::CannotComplyType& AchievabilityAssessmentPET::getNotAchievableReason_() const {
  if (notAchievableReason_Accessor) {
    return *notAchievableReason_Accessor;
  }
  throw uci::base::UCIException("Error in getNotAchievableReason(): An attempt was made to get an optional field that was not enabled, call hasNotAchievableReason() to determine if it is safe to call getNotAchievableReason()");
}

const uci::type::CannotComplyType& AchievabilityAssessmentPET::getNotAchievableReason() const {
  return getNotAchievableReason_();
}

uci::type::CannotComplyType& AchievabilityAssessmentPET::getNotAchievableReason() {
  return getNotAchievableReason_();
}

uci::type::AchievabilityAssessmentPET& AchievabilityAssessmentPET::setNotAchievableReason(const uci::type::CannotComplyType& accessor) {
  enableNotAchievableReason(accessor.getAccessorType());
  if (&accessor != notAchievableReason_Accessor.get()) {
    notAchievableReason_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AchievabilityAssessmentPET::hasNotAchievableReason() const noexcept {
  return static_cast<bool>(notAchievableReason_Accessor);
}

uci::type::CannotComplyType& AchievabilityAssessmentPET::enableNotAchievableReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!notAchievableReason_Accessor) || (notAchievableReason_Accessor->getAccessorType() != requestedType)) {
    notAchievableReason_Accessor = CannotComplyType::create(requestedType);
    if (!notAchievableReason_Accessor) {
      throw uci::base::UCIException("Error in enableNotAchievableReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *notAchievableReason_Accessor;
}

uci::type::AchievabilityAssessmentPET& AchievabilityAssessmentPET::clearNotAchievableReason() noexcept {
  notAchievableReason_Accessor.reset();
  return *this;
}

std::unique_ptr<AchievabilityAssessmentPET> AchievabilityAssessmentPET::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::achievabilityAssessmentPET : type};
  return std::unique_ptr<AchievabilityAssessmentPET>(dynamic_cast<AchievabilityAssessmentPET*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace AchievabilityAssessmentPET_Names {

constexpr const char* Extern_Type_Name{"AchievabilityAssessmentPET"};
constexpr const char* RoutePlanReference_Name{"RoutePlanReference"};
constexpr const char* Achievability_Name{"Achievability"};
constexpr const char* NotAchievableReason_Name{"NotAchievableReason"};

} // namespace AchievabilityAssessmentPET_Names

void AchievabilityAssessmentPET::deserialize(const boost::property_tree::ptree& propTree, uci::type::AchievabilityAssessmentPET& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AchievabilityAssessmentPET_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AchievabilityAssessmentPET_Names::RoutePlanReference_Name) {
      RoutePlanReferencesType::deserialize(valueType.second, accessor.enableRoutePlanReference(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AchievabilityAssessmentPET_Names::Achievability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAchievability().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AchievabilityAssessmentPET_Names::NotAchievableReason_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableNotAchievableReason(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  AssessmentStatusType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string AchievabilityAssessmentPET::serialize(const uci::type::AchievabilityAssessmentPET& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AchievabilityAssessmentPET_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::achievabilityAssessmentPET)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, AchievabilityAssessmentPET_Names::Extern_Type_Name);
    }
    AssessmentStatusType::serialize(accessor, node, "", false, false, false);
    if (accessor.hasRoutePlanReference()) {
      RoutePlanReferencesType::serialize(accessor.getRoutePlanReference(), node, AchievabilityAssessmentPET_Names::RoutePlanReference_Name);
    }
    AchievabilityEnum::serialize(accessor.getAchievability(), node, AchievabilityAssessmentPET_Names::Achievability_Name, false);
    if (accessor.hasNotAchievableReason()) {
      CannotComplyType::serialize(accessor.getNotAchievableReason(), node, AchievabilityAssessmentPET_Names::NotAchievableReason_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

