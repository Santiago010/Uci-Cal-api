/** @file LOS_MeasurementUncertaintyErrorSourcesType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/LOS_MeasurementUncertaintyErrorSourcesType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/LOS_MeasurementUncertaintyType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LOS_MeasurementUncertaintyErrorSourcesType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LOS_MeasurementUncertaintyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LOS_MeasurementUncertaintyErrorSourcesType::LOS_MeasurementUncertaintyErrorSourcesType() = default;

LOS_MeasurementUncertaintyErrorSourcesType::~LOS_MeasurementUncertaintyErrorSourcesType() = default;

void LOS_MeasurementUncertaintyErrorSourcesType::copy(const uci::type::LOS_MeasurementUncertaintyErrorSourcesType& accessor) {
  copyImpl(accessor, false);
}

void LOS_MeasurementUncertaintyErrorSourcesType::copyImpl(const uci::type::LOS_MeasurementUncertaintyErrorSourcesType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LOS_MeasurementUncertaintyErrorSourcesType&>(accessor);
    if (accessorImpl.rootMeanSquare_Accessor) {
      setRootMeanSquare(*(accessorImpl.rootMeanSquare_Accessor));
    } else {
      rootMeanSquare_Accessor.reset();
    }
    if (accessorImpl.bias_Accessor) {
      setBias(*(accessorImpl.bias_Accessor));
    } else {
      bias_Accessor.reset();
    }
    if (accessorImpl.random_Accessor) {
      setRandom(*(accessorImpl.random_Accessor));
    } else {
      random_Accessor.reset();
    }
  }
}

void LOS_MeasurementUncertaintyErrorSourcesType::reset() noexcept {
  rootMeanSquare_Accessor.reset();
  bias_Accessor.reset();
  random_Accessor.reset();
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyErrorSourcesType::getRootMeanSquare_() const {
  if (rootMeanSquare_Accessor) {
    return *rootMeanSquare_Accessor;
  }
  throw uci::base::UCIException("Error in getRootMeanSquare(): An attempt was made to get an optional field that was not enabled, call hasRootMeanSquare() to determine if it is safe to call getRootMeanSquare()");
}

const uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyErrorSourcesType::getRootMeanSquare() const {
  return getRootMeanSquare_();
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyErrorSourcesType::getRootMeanSquare() {
  return getRootMeanSquare_();
}

uci::type::LOS_MeasurementUncertaintyErrorSourcesType& LOS_MeasurementUncertaintyErrorSourcesType::setRootMeanSquare(const uci::type::LOS_MeasurementUncertaintyType& accessor) {
  enableRootMeanSquare();
  if (&accessor != rootMeanSquare_Accessor.get()) {
    rootMeanSquare_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementUncertaintyErrorSourcesType::hasRootMeanSquare() const noexcept {
  return static_cast<bool>(rootMeanSquare_Accessor);
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyErrorSourcesType::enableRootMeanSquare(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_MeasurementUncertaintyType : type};
  if ((!rootMeanSquare_Accessor) || (rootMeanSquare_Accessor->getAccessorType() != requestedType)) {
    rootMeanSquare_Accessor = LOS_MeasurementUncertaintyType::create(requestedType);
    if (!rootMeanSquare_Accessor) {
      throw uci::base::UCIException("Error in enableRootMeanSquare(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rootMeanSquare_Accessor;
}

uci::type::LOS_MeasurementUncertaintyErrorSourcesType& LOS_MeasurementUncertaintyErrorSourcesType::clearRootMeanSquare() noexcept {
  rootMeanSquare_Accessor.reset();
  return *this;
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyErrorSourcesType::getBias_() const {
  if (bias_Accessor) {
    return *bias_Accessor;
  }
  throw uci::base::UCIException("Error in getBias(): An attempt was made to get an optional field that was not enabled, call hasBias() to determine if it is safe to call getBias()");
}

const uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyErrorSourcesType::getBias() const {
  return getBias_();
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyErrorSourcesType::getBias() {
  return getBias_();
}

uci::type::LOS_MeasurementUncertaintyErrorSourcesType& LOS_MeasurementUncertaintyErrorSourcesType::setBias(const uci::type::LOS_MeasurementUncertaintyType& accessor) {
  enableBias();
  if (&accessor != bias_Accessor.get()) {
    bias_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementUncertaintyErrorSourcesType::hasBias() const noexcept {
  return static_cast<bool>(bias_Accessor);
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyErrorSourcesType::enableBias(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_MeasurementUncertaintyType : type};
  if ((!bias_Accessor) || (bias_Accessor->getAccessorType() != requestedType)) {
    bias_Accessor = LOS_MeasurementUncertaintyType::create(requestedType);
    if (!bias_Accessor) {
      throw uci::base::UCIException("Error in enableBias(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *bias_Accessor;
}

uci::type::LOS_MeasurementUncertaintyErrorSourcesType& LOS_MeasurementUncertaintyErrorSourcesType::clearBias() noexcept {
  bias_Accessor.reset();
  return *this;
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyErrorSourcesType::getRandom_() const {
  if (random_Accessor) {
    return *random_Accessor;
  }
  throw uci::base::UCIException("Error in getRandom(): An attempt was made to get an optional field that was not enabled, call hasRandom() to determine if it is safe to call getRandom()");
}

const uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyErrorSourcesType::getRandom() const {
  return getRandom_();
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyErrorSourcesType::getRandom() {
  return getRandom_();
}

uci::type::LOS_MeasurementUncertaintyErrorSourcesType& LOS_MeasurementUncertaintyErrorSourcesType::setRandom(const uci::type::LOS_MeasurementUncertaintyType& accessor) {
  enableRandom();
  if (&accessor != random_Accessor.get()) {
    random_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementUncertaintyErrorSourcesType::hasRandom() const noexcept {
  return static_cast<bool>(random_Accessor);
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyErrorSourcesType::enableRandom(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_MeasurementUncertaintyType : type};
  if ((!random_Accessor) || (random_Accessor->getAccessorType() != requestedType)) {
    random_Accessor = LOS_MeasurementUncertaintyType::create(requestedType);
    if (!random_Accessor) {
      throw uci::base::UCIException("Error in enableRandom(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *random_Accessor;
}

uci::type::LOS_MeasurementUncertaintyErrorSourcesType& LOS_MeasurementUncertaintyErrorSourcesType::clearRandom() noexcept {
  random_Accessor.reset();
  return *this;
}

std::unique_ptr<LOS_MeasurementUncertaintyErrorSourcesType> LOS_MeasurementUncertaintyErrorSourcesType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_MeasurementUncertaintyErrorSourcesType : type};
  return (requestedType == uci::type::accessorType::lOS_MeasurementUncertaintyErrorSourcesType) ? boost::make_unique<LOS_MeasurementUncertaintyErrorSourcesType>() : nullptr;
}

/**  */
namespace LOS_MeasurementUncertaintyErrorSourcesType_Names {

constexpr const char* Extern_Type_Name{"LOS_MeasurementUncertaintyErrorSourcesType"};
constexpr const char* RootMeanSquare_Name{"RootMeanSquare"};
constexpr const char* Bias_Name{"Bias"};
constexpr const char* Random_Name{"Random"};

} // namespace LOS_MeasurementUncertaintyErrorSourcesType_Names

void LOS_MeasurementUncertaintyErrorSourcesType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LOS_MeasurementUncertaintyErrorSourcesType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LOS_MeasurementUncertaintyErrorSourcesType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyErrorSourcesType_Names::RootMeanSquare_Name) {
      LOS_MeasurementUncertaintyType::deserialize(valueType.second, accessor.enableRootMeanSquare(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyErrorSourcesType_Names::Bias_Name) {
      LOS_MeasurementUncertaintyType::deserialize(valueType.second, accessor.enableBias(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyErrorSourcesType_Names::Random_Name) {
      LOS_MeasurementUncertaintyType::deserialize(valueType.second, accessor.enableRandom(), nodeName, nsPrefix);
    }
  }
}

std::string LOS_MeasurementUncertaintyErrorSourcesType::serialize(const uci::type::LOS_MeasurementUncertaintyErrorSourcesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LOS_MeasurementUncertaintyErrorSourcesType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LOS_MeasurementUncertaintyErrorSourcesType_Names::Extern_Type_Name);
  }
  if (accessor.hasRootMeanSquare()) {
    LOS_MeasurementUncertaintyType::serialize(accessor.getRootMeanSquare(), node, LOS_MeasurementUncertaintyErrorSourcesType_Names::RootMeanSquare_Name);
  }
  if (accessor.hasBias()) {
    LOS_MeasurementUncertaintyType::serialize(accessor.getBias(), node, LOS_MeasurementUncertaintyErrorSourcesType_Names::Bias_Name);
  }
  if (accessor.hasRandom()) {
    LOS_MeasurementUncertaintyType::serialize(accessor.getRandom(), node, LOS_MeasurementUncertaintyErrorSourcesType_Names::Random_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LOS_MeasurementUncertaintyErrorSourcesType& LOS_MeasurementUncertaintyErrorSourcesType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LOS_MeasurementUncertaintyErrorSourcesType>().release());
}

uci::type::LOS_MeasurementUncertaintyErrorSourcesType& LOS_MeasurementUncertaintyErrorSourcesType::create(const uci::type::LOS_MeasurementUncertaintyErrorSourcesType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LOS_MeasurementUncertaintyErrorSourcesType> newAccessor{boost::make_unique<asb_uci::type::LOS_MeasurementUncertaintyErrorSourcesType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LOS_MeasurementUncertaintyErrorSourcesType::destroy(uci::type::LOS_MeasurementUncertaintyErrorSourcesType& accessor) {
  delete dynamic_cast<asb_uci::type::LOS_MeasurementUncertaintyErrorSourcesType*>(&accessor);
}

} // namespace type

} // namespace uci

