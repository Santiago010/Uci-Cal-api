/** @file SystemOrbitalPositionReportMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SystemOrbitalPositionReportMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EnvironmentEnum.h"
#include "../../../include/asb_uci/type/OrbitalKinematicsChoiceType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/SystemSourceEnum.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EnvironmentEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalKinematicsChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemOrbitalPositionReportMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemSourceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SystemOrbitalPositionReportMDT::SystemOrbitalPositionReportMDT()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()},
    source_Accessor{boost::make_unique<SystemSourceEnum>()},
    currentOperatingDomain_Accessor{boost::make_unique<EnvironmentEnum>()},
    kinematics_Accessor{boost::make_unique<OrbitalKinematicsChoiceType>()} {
}

SystemOrbitalPositionReportMDT::~SystemOrbitalPositionReportMDT() = default;

void SystemOrbitalPositionReportMDT::copy(const uci::type::SystemOrbitalPositionReportMDT& accessor) {
  copyImpl(accessor, false);
}

void SystemOrbitalPositionReportMDT::copyImpl(const uci::type::SystemOrbitalPositionReportMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SystemOrbitalPositionReportMDT&>(accessor);
    setSystemID(*(accessorImpl.systemID_Accessor));
    if (accessorImpl.displayName_Accessor) {
      setDisplayName(*(accessorImpl.displayName_Accessor));
    } else {
      displayName_Accessor.reset();
    }
    setSource(*(accessorImpl.source_Accessor));
    setCurrentOperatingDomain(*(accessorImpl.currentOperatingDomain_Accessor));
    setKinematics(*(accessorImpl.kinematics_Accessor));
  }
}

void SystemOrbitalPositionReportMDT::reset() noexcept {
  systemID_Accessor->reset();
  displayName_Accessor.reset();
  source_Accessor->reset();
  currentOperatingDomain_Accessor->reset();
  kinematics_Accessor->reset();
}

const uci::type::SystemID_Type& SystemOrbitalPositionReportMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& SystemOrbitalPositionReportMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::SystemOrbitalPositionReportMDT& SystemOrbitalPositionReportMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VisibleString256Type& SystemOrbitalPositionReportMDT::getDisplayName_() const {
  if (displayName_Accessor) {
    return *displayName_Accessor;
  }
  throw uci::base::UCIException("Error in getDisplayName(): An attempt was made to get an optional field that was not enabled, call hasDisplayName() to determine if it is safe to call getDisplayName()");
}

const uci::type::VisibleString256Type& SystemOrbitalPositionReportMDT::getDisplayName() const {
  return getDisplayName_();
}

uci::type::VisibleString256Type& SystemOrbitalPositionReportMDT::getDisplayName() {
  return getDisplayName_();
}

uci::type::SystemOrbitalPositionReportMDT& SystemOrbitalPositionReportMDT::setDisplayName(const uci::type::VisibleString256Type& value) {
  return setDisplayName(value.c_str());
}

uci::type::SystemOrbitalPositionReportMDT& SystemOrbitalPositionReportMDT::setDisplayName(const std::string& value) {
  return setDisplayName(value.c_str());
}

uci::type::SystemOrbitalPositionReportMDT& SystemOrbitalPositionReportMDT::setDisplayName(const char* value) {
  enableDisplayName().setStringValue(value);
  return *this;
}

bool SystemOrbitalPositionReportMDT::hasDisplayName() const noexcept {
  return static_cast<bool>(displayName_Accessor);
}

uci::type::VisibleString256Type& SystemOrbitalPositionReportMDT::enableDisplayName(uci::base::accessorType::AccessorType type) {
  if (!displayName_Accessor) {
    displayName_Accessor = boost::make_unique<std::string>("");
  }
  return *displayName_Accessor;
}

uci::type::SystemOrbitalPositionReportMDT& SystemOrbitalPositionReportMDT::clearDisplayName() noexcept {
  displayName_Accessor.reset();
  return *this;
}

const uci::type::SystemSourceEnum& SystemOrbitalPositionReportMDT::getSource() const {
  return *source_Accessor;
}

uci::type::SystemSourceEnum& SystemOrbitalPositionReportMDT::getSource() {
  return *source_Accessor;
}

uci::type::SystemOrbitalPositionReportMDT& SystemOrbitalPositionReportMDT::setSource(const uci::type::SystemSourceEnum& accessor) {
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemOrbitalPositionReportMDT& SystemOrbitalPositionReportMDT::setSource(uci::type::SystemSourceEnum::EnumerationItem value) {
  source_Accessor->setValue(value);
  return *this;
}


const uci::type::EnvironmentEnum& SystemOrbitalPositionReportMDT::getCurrentOperatingDomain() const {
  return *currentOperatingDomain_Accessor;
}

uci::type::EnvironmentEnum& SystemOrbitalPositionReportMDT::getCurrentOperatingDomain() {
  return *currentOperatingDomain_Accessor;
}

uci::type::SystemOrbitalPositionReportMDT& SystemOrbitalPositionReportMDT::setCurrentOperatingDomain(const uci::type::EnvironmentEnum& accessor) {
  if (&accessor != currentOperatingDomain_Accessor.get()) {
    currentOperatingDomain_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemOrbitalPositionReportMDT& SystemOrbitalPositionReportMDT::setCurrentOperatingDomain(uci::type::EnvironmentEnum::EnumerationItem value) {
  currentOperatingDomain_Accessor->setValue(value);
  return *this;
}


const uci::type::OrbitalKinematicsChoiceType& SystemOrbitalPositionReportMDT::getKinematics() const {
  return *kinematics_Accessor;
}

uci::type::OrbitalKinematicsChoiceType& SystemOrbitalPositionReportMDT::getKinematics() {
  return *kinematics_Accessor;
}

uci::type::SystemOrbitalPositionReportMDT& SystemOrbitalPositionReportMDT::setKinematics(const uci::type::OrbitalKinematicsChoiceType& accessor) {
  if (&accessor != kinematics_Accessor.get()) {
    kinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<SystemOrbitalPositionReportMDT> SystemOrbitalPositionReportMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemOrbitalPositionReportMDT : type};
  return (requestedType == uci::type::accessorType::systemOrbitalPositionReportMDT) ? boost::make_unique<SystemOrbitalPositionReportMDT>() : nullptr;
}

/**  */
namespace SystemOrbitalPositionReportMDT_Names {

constexpr const char* Extern_Type_Name{"SystemOrbitalPositionReportMDT"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* DisplayName_Name{"DisplayName"};
constexpr const char* Source_Name{"Source"};
constexpr const char* CurrentOperatingDomain_Name{"CurrentOperatingDomain"};
constexpr const char* Kinematics_Name{"Kinematics"};

} // namespace SystemOrbitalPositionReportMDT_Names

void SystemOrbitalPositionReportMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::SystemOrbitalPositionReportMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SystemOrbitalPositionReportMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SystemOrbitalPositionReportMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemOrbitalPositionReportMDT_Names::DisplayName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDisplayName(*value);
      }
    } else if (valueType.first == nsPrefix + SystemOrbitalPositionReportMDT_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SystemOrbitalPositionReportMDT_Names::CurrentOperatingDomain_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCurrentOperatingDomain().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SystemOrbitalPositionReportMDT_Names::Kinematics_Name) {
      OrbitalKinematicsChoiceType::deserialize(valueType.second, accessor.getKinematics(), nodeName, nsPrefix);
    }
  }
}

std::string SystemOrbitalPositionReportMDT::serialize(const uci::type::SystemOrbitalPositionReportMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SystemOrbitalPositionReportMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SystemOrbitalPositionReportMDT_Names::Extern_Type_Name);
  }
  SystemID_Type::serialize(accessor.getSystemID(), node, SystemOrbitalPositionReportMDT_Names::SystemID_Name);
  if (accessor.hasDisplayName()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDisplayName(), node, SystemOrbitalPositionReportMDT_Names::DisplayName_Name);
  }
  SystemSourceEnum::serialize(accessor.getSource(), node, SystemOrbitalPositionReportMDT_Names::Source_Name, false);
  EnvironmentEnum::serialize(accessor.getCurrentOperatingDomain(), node, SystemOrbitalPositionReportMDT_Names::CurrentOperatingDomain_Name, false);
  OrbitalKinematicsChoiceType::serialize(accessor.getKinematics(), node, SystemOrbitalPositionReportMDT_Names::Kinematics_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SystemOrbitalPositionReportMDT& SystemOrbitalPositionReportMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SystemOrbitalPositionReportMDT>().release());
}

uci::type::SystemOrbitalPositionReportMDT& SystemOrbitalPositionReportMDT::create(const uci::type::SystemOrbitalPositionReportMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SystemOrbitalPositionReportMDT> newAccessor{boost::make_unique<asb_uci::type::SystemOrbitalPositionReportMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SystemOrbitalPositionReportMDT::destroy(uci::type::SystemOrbitalPositionReportMDT& accessor) {
  delete dynamic_cast<asb_uci::type::SystemOrbitalPositionReportMDT*>(&accessor);
}

} // namespace type

} // namespace uci

