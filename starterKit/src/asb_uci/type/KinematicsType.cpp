/** @file KinematicsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/KinematicsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/Acceleration3D_Type.h"
#include "asb_uci/type/EntityPositionType.h"
#include "asb_uci/type/OrientationCovarianceType.h"
#include "asb_uci/type/OrientationType.h"
#include "asb_uci/type/StateCovarianceNED_Type.h"
#include "asb_uci/type/Velocity2D_UncertaintyType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/Acceleration3D_Type.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/EntityPositionType.h"
#include "uci/type/KinematicsType.h"
#include "uci/type/OrientationCovarianceType.h"
#include "uci/type/OrientationType.h"
#include "uci/type/StateCovarianceNED_Type.h"
#include "uci/type/Velocity2D_UncertaintyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

KinematicsType::KinematicsType()
  : position_Accessor{boost::make_unique<EntityPositionType>()} {
}

KinematicsType::~KinematicsType() = default;

void KinematicsType::copy(const uci::type::KinematicsType& accessor) {
  copyImpl(accessor, false);
}

void KinematicsType::copyImpl(const uci::type::KinematicsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const KinematicsType&>(accessor);
    if (accessorImpl.hasKinematicsTimeStamp()) {
      setKinematicsTimeStamp(accessorImpl.getKinematicsTimeStamp());
    } else {
      clearKinematicsTimeStamp();
    }
    setPosition(*(accessorImpl.position_Accessor));
    if (accessorImpl.velocity_Accessor) {
      setVelocity(*(accessorImpl.velocity_Accessor));
    } else {
      velocity_Accessor.reset();
    }
    if (accessorImpl.acceleration_Accessor) {
      setAcceleration(*(accessorImpl.acceleration_Accessor));
    } else {
      acceleration_Accessor.reset();
    }
    if (accessorImpl.stateCovariance_Accessor) {
      setStateCovariance(*(accessorImpl.stateCovariance_Accessor));
    } else {
      stateCovariance_Accessor.reset();
    }
    if (accessorImpl.orientation_Accessor) {
      setOrientation(*(accessorImpl.orientation_Accessor));
    } else {
      orientation_Accessor.reset();
    }
    if (accessorImpl.orientationCovariance_Accessor) {
      setOrientationCovariance(*(accessorImpl.orientationCovariance_Accessor));
    } else {
      orientationCovariance_Accessor.reset();
    }
  }
}

void KinematicsType::reset() noexcept {
  clearKinematicsTimeStamp();
  position_Accessor->reset();
  velocity_Accessor.reset();
  acceleration_Accessor.reset();
  stateCovariance_Accessor.reset();
  orientation_Accessor.reset();
  orientationCovariance_Accessor.reset();
}

uci::type::DateTimeTypeValue KinematicsType::getKinematicsTimeStamp() const {
  if (kinematicsTimeStamp_Accessor) {
    return *kinematicsTimeStamp_Accessor;
  }
  throw uci::base::UCIException("Error in getKinematicsTimeStamp(): An attempt was made to get an optional field that was not enabled, call hasKinematicsTimeStamp() to determine if it is safe to call getKinematicsTimeStamp()");
}

uci::type::KinematicsType& KinematicsType::setKinematicsTimeStamp(uci::type::DateTimeTypeValue value) {
  kinematicsTimeStamp_Accessor = value;
  return *this;
}

bool KinematicsType::hasKinematicsTimeStamp() const noexcept {
  return kinematicsTimeStamp_Accessor.has_value();
}

uci::type::KinematicsType& KinematicsType::clearKinematicsTimeStamp() noexcept {
  kinematicsTimeStamp_Accessor.reset();
  return *this;
}

const uci::type::EntityPositionType& KinematicsType::getPosition() const {
  return *position_Accessor;
}

uci::type::EntityPositionType& KinematicsType::getPosition() {
  return *position_Accessor;
}

uci::type::KinematicsType& KinematicsType::setPosition(const uci::type::EntityPositionType& accessor) {
  if (&accessor != position_Accessor.get()) {
    position_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::Velocity2D_UncertaintyType& KinematicsType::getVelocity_() const {
  if (velocity_Accessor) {
    return *velocity_Accessor;
  }
  throw uci::base::UCIException("Error in getVelocity(): An attempt was made to get an optional field that was not enabled, call hasVelocity() to determine if it is safe to call getVelocity()");
}

const uci::type::Velocity2D_UncertaintyType& KinematicsType::getVelocity() const {
  return getVelocity_();
}

uci::type::Velocity2D_UncertaintyType& KinematicsType::getVelocity() {
  return getVelocity_();
}

uci::type::KinematicsType& KinematicsType::setVelocity(const uci::type::Velocity2D_UncertaintyType& accessor) {
  enableVelocity();
  if (&accessor != velocity_Accessor.get()) {
    velocity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool KinematicsType::hasVelocity() const noexcept {
  return static_cast<bool>(velocity_Accessor);
}

uci::type::Velocity2D_UncertaintyType& KinematicsType::enableVelocity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::velocity2D_UncertaintyType : type};
  if ((!velocity_Accessor) || (velocity_Accessor->getAccessorType() != requestedType)) {
    velocity_Accessor = Velocity2D_UncertaintyType::create(requestedType);
    if (!velocity_Accessor) {
      throw uci::base::UCIException("Error in enableVelocity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *velocity_Accessor;
}

uci::type::KinematicsType& KinematicsType::clearVelocity() noexcept {
  velocity_Accessor.reset();
  return *this;
}

uci::type::Acceleration3D_Type& KinematicsType::getAcceleration_() const {
  if (acceleration_Accessor) {
    return *acceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getAcceleration(): An attempt was made to get an optional field that was not enabled, call hasAcceleration() to determine if it is safe to call getAcceleration()");
}

const uci::type::Acceleration3D_Type& KinematicsType::getAcceleration() const {
  return getAcceleration_();
}

uci::type::Acceleration3D_Type& KinematicsType::getAcceleration() {
  return getAcceleration_();
}

uci::type::KinematicsType& KinematicsType::setAcceleration(const uci::type::Acceleration3D_Type& accessor) {
  enableAcceleration();
  if (&accessor != acceleration_Accessor.get()) {
    acceleration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool KinematicsType::hasAcceleration() const noexcept {
  return static_cast<bool>(acceleration_Accessor);
}

uci::type::Acceleration3D_Type& KinematicsType::enableAcceleration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::acceleration3D_Type : type};
  if ((!acceleration_Accessor) || (acceleration_Accessor->getAccessorType() != requestedType)) {
    acceleration_Accessor = Acceleration3D_Type::create(requestedType);
    if (!acceleration_Accessor) {
      throw uci::base::UCIException("Error in enableAcceleration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *acceleration_Accessor;
}

uci::type::KinematicsType& KinematicsType::clearAcceleration() noexcept {
  acceleration_Accessor.reset();
  return *this;
}

uci::type::StateCovarianceNED_Type& KinematicsType::getStateCovariance_() const {
  if (stateCovariance_Accessor) {
    return *stateCovariance_Accessor;
  }
  throw uci::base::UCIException("Error in getStateCovariance(): An attempt was made to get an optional field that was not enabled, call hasStateCovariance() to determine if it is safe to call getStateCovariance()");
}

const uci::type::StateCovarianceNED_Type& KinematicsType::getStateCovariance() const {
  return getStateCovariance_();
}

uci::type::StateCovarianceNED_Type& KinematicsType::getStateCovariance() {
  return getStateCovariance_();
}

uci::type::KinematicsType& KinematicsType::setStateCovariance(const uci::type::StateCovarianceNED_Type& accessor) {
  enableStateCovariance();
  if (&accessor != stateCovariance_Accessor.get()) {
    stateCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool KinematicsType::hasStateCovariance() const noexcept {
  return static_cast<bool>(stateCovariance_Accessor);
}

uci::type::StateCovarianceNED_Type& KinematicsType::enableStateCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::stateCovarianceNED_Type : type};
  if ((!stateCovariance_Accessor) || (stateCovariance_Accessor->getAccessorType() != requestedType)) {
    stateCovariance_Accessor = StateCovarianceNED_Type::create(requestedType);
    if (!stateCovariance_Accessor) {
      throw uci::base::UCIException("Error in enableStateCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *stateCovariance_Accessor;
}

uci::type::KinematicsType& KinematicsType::clearStateCovariance() noexcept {
  stateCovariance_Accessor.reset();
  return *this;
}

uci::type::OrientationType& KinematicsType::getOrientation_() const {
  if (orientation_Accessor) {
    return *orientation_Accessor;
  }
  throw uci::base::UCIException("Error in getOrientation(): An attempt was made to get an optional field that was not enabled, call hasOrientation() to determine if it is safe to call getOrientation()");
}

const uci::type::OrientationType& KinematicsType::getOrientation() const {
  return getOrientation_();
}

uci::type::OrientationType& KinematicsType::getOrientation() {
  return getOrientation_();
}

uci::type::KinematicsType& KinematicsType::setOrientation(const uci::type::OrientationType& accessor) {
  enableOrientation();
  if (&accessor != orientation_Accessor.get()) {
    orientation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool KinematicsType::hasOrientation() const noexcept {
  return static_cast<bool>(orientation_Accessor);
}

uci::type::OrientationType& KinematicsType::enableOrientation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orientationType : type};
  if ((!orientation_Accessor) || (orientation_Accessor->getAccessorType() != requestedType)) {
    orientation_Accessor = OrientationType::create(requestedType);
    if (!orientation_Accessor) {
      throw uci::base::UCIException("Error in enableOrientation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orientation_Accessor;
}

uci::type::KinematicsType& KinematicsType::clearOrientation() noexcept {
  orientation_Accessor.reset();
  return *this;
}

uci::type::OrientationCovarianceType& KinematicsType::getOrientationCovariance_() const {
  if (orientationCovariance_Accessor) {
    return *orientationCovariance_Accessor;
  }
  throw uci::base::UCIException("Error in getOrientationCovariance(): An attempt was made to get an optional field that was not enabled, call hasOrientationCovariance() to determine if it is safe to call getOrientationCovariance()");
}

const uci::type::OrientationCovarianceType& KinematicsType::getOrientationCovariance() const {
  return getOrientationCovariance_();
}

uci::type::OrientationCovarianceType& KinematicsType::getOrientationCovariance() {
  return getOrientationCovariance_();
}

uci::type::KinematicsType& KinematicsType::setOrientationCovariance(const uci::type::OrientationCovarianceType& accessor) {
  enableOrientationCovariance();
  if (&accessor != orientationCovariance_Accessor.get()) {
    orientationCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool KinematicsType::hasOrientationCovariance() const noexcept {
  return static_cast<bool>(orientationCovariance_Accessor);
}

uci::type::OrientationCovarianceType& KinematicsType::enableOrientationCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orientationCovarianceType : type};
  if ((!orientationCovariance_Accessor) || (orientationCovariance_Accessor->getAccessorType() != requestedType)) {
    orientationCovariance_Accessor = OrientationCovarianceType::create(requestedType);
    if (!orientationCovariance_Accessor) {
      throw uci::base::UCIException("Error in enableOrientationCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orientationCovariance_Accessor;
}

uci::type::KinematicsType& KinematicsType::clearOrientationCovariance() noexcept {
  orientationCovariance_Accessor.reset();
  return *this;
}

std::unique_ptr<KinematicsType> KinematicsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::kinematicsType : type};
  return (requestedType == uci::type::accessorType::kinematicsType) ? boost::make_unique<KinematicsType>() : nullptr;
}

/**  */
namespace KinematicsType_Names {

constexpr const char* Extern_Type_Name{"KinematicsType"};
constexpr const char* KinematicsTimeStamp_Name{"KinematicsTimeStamp"};
constexpr const char* Position_Name{"Position"};
constexpr const char* Velocity_Name{"Velocity"};
constexpr const char* Acceleration_Name{"Acceleration"};
constexpr const char* StateCovariance_Name{"StateCovariance"};
constexpr const char* Orientation_Name{"Orientation"};
constexpr const char* OrientationCovariance_Name{"OrientationCovariance"};

} // namespace KinematicsType_Names

void KinematicsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::KinematicsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = KinematicsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + KinematicsType_Names::KinematicsTimeStamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setKinematicsTimeStamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + KinematicsType_Names::Position_Name) {
      EntityPositionType::deserialize(valueType.second, accessor.getPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + KinematicsType_Names::Velocity_Name) {
      Velocity2D_UncertaintyType::deserialize(valueType.second, accessor.enableVelocity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + KinematicsType_Names::Acceleration_Name) {
      Acceleration3D_Type::deserialize(valueType.second, accessor.enableAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + KinematicsType_Names::StateCovariance_Name) {
      StateCovarianceNED_Type::deserialize(valueType.second, accessor.enableStateCovariance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + KinematicsType_Names::Orientation_Name) {
      OrientationType::deserialize(valueType.second, accessor.enableOrientation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + KinematicsType_Names::OrientationCovariance_Name) {
      OrientationCovarianceType::deserialize(valueType.second, accessor.enableOrientationCovariance(), nodeName, nsPrefix);
    }
  }
}

std::string KinematicsType::serialize(const uci::type::KinematicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? KinematicsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, KinematicsType_Names::Extern_Type_Name);
  }
  if (accessor.hasKinematicsTimeStamp()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getKinematicsTimeStamp(), node, KinematicsType_Names::KinematicsTimeStamp_Name);
  }
  EntityPositionType::serialize(accessor.getPosition(), node, KinematicsType_Names::Position_Name);
  if (accessor.hasVelocity()) {
    Velocity2D_UncertaintyType::serialize(accessor.getVelocity(), node, KinematicsType_Names::Velocity_Name);
  }
  if (accessor.hasAcceleration()) {
    Acceleration3D_Type::serialize(accessor.getAcceleration(), node, KinematicsType_Names::Acceleration_Name);
  }
  if (accessor.hasStateCovariance()) {
    StateCovarianceNED_Type::serialize(accessor.getStateCovariance(), node, KinematicsType_Names::StateCovariance_Name);
  }
  if (accessor.hasOrientation()) {
    OrientationType::serialize(accessor.getOrientation(), node, KinematicsType_Names::Orientation_Name);
  }
  if (accessor.hasOrientationCovariance()) {
    OrientationCovarianceType::serialize(accessor.getOrientationCovariance(), node, KinematicsType_Names::OrientationCovariance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::KinematicsType& KinematicsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::KinematicsType>().release());
}

uci::type::KinematicsType& KinematicsType::create(const uci::type::KinematicsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::KinematicsType> newAccessor{boost::make_unique<asb_uci::type::KinematicsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void KinematicsType::destroy(uci::type::KinematicsType& accessor) {
  delete dynamic_cast<asb_uci::type::KinematicsType*>(&accessor);
}

} // namespace type

} // namespace uci

