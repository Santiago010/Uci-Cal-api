/** @file EOB_EmitterModeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EOB_EmitterModeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DataRateDataType.h"
#include "../../../include/asb_uci/type/EOB_EmitterModeID_Type.h"
#include "../../../include/asb_uci/type/EOB_SignalType.h"
#include "../../../include/asb_uci/type/ModRateDataType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataRateDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_EmitterModeID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_EmitterModeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ModRateDataType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EOB_EmitterModeType::EOB_EmitterModeType()
  : emitterModeID_Accessor{boost::make_unique<EOB_EmitterModeID_Type>()} {
}

EOB_EmitterModeType::~EOB_EmitterModeType() = default;

void EOB_EmitterModeType::copy(const uci::type::EOB_EmitterModeType& accessor) {
  copyImpl(accessor, false);
}

void EOB_EmitterModeType::copyImpl(const uci::type::EOB_EmitterModeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    EOB_SignalType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const EOB_EmitterModeType&>(accessor);
    setEmitterModeID(*(accessorImpl.emitterModeID_Accessor));
    if (accessorImpl.hasInterceptCount()) {
      setInterceptCount(accessorImpl.getInterceptCount());
    } else {
      clearInterceptCount();
    }
    if (accessorImpl.dataRate_Accessor) {
      setDataRate(*(accessorImpl.dataRate_Accessor));
    } else {
      dataRate_Accessor.reset();
    }
    if (accessorImpl.modulationRate_Accessor) {
      setModulationRate(*(accessorImpl.modulationRate_Accessor));
    } else {
      modulationRate_Accessor.reset();
    }
  }
}

void EOB_EmitterModeType::reset() noexcept {
  EOB_SignalType::reset();
  emitterModeID_Accessor->reset();
  clearInterceptCount();
  dataRate_Accessor.reset();
  modulationRate_Accessor.reset();
}

const uci::type::EOB_EmitterModeID_Type& EOB_EmitterModeType::getEmitterModeID() const {
  return *emitterModeID_Accessor;
}

uci::type::EOB_EmitterModeID_Type& EOB_EmitterModeType::getEmitterModeID() {
  return *emitterModeID_Accessor;
}

uci::type::EOB_EmitterModeType& EOB_EmitterModeType::setEmitterModeID(const uci::type::EOB_EmitterModeID_Type& accessor) {
  if (&accessor != emitterModeID_Accessor.get()) {
    emitterModeID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt EOB_EmitterModeType::getInterceptCount() const {
  if (interceptCount_Accessor) {
    return *interceptCount_Accessor;
  }
  throw uci::base::UCIException("Error in getInterceptCount(): An attempt was made to get an optional field that was not enabled, call hasInterceptCount() to determine if it is safe to call getInterceptCount()");
}

uci::type::EOB_EmitterModeType& EOB_EmitterModeType::setInterceptCount(xs::UnsignedInt value) {
  interceptCount_Accessor = value;
  return *this;
}

bool EOB_EmitterModeType::hasInterceptCount() const noexcept {
  return interceptCount_Accessor.has_value();
}

uci::type::EOB_EmitterModeType& EOB_EmitterModeType::clearInterceptCount() noexcept {
  interceptCount_Accessor.reset();
  return *this;
}

uci::type::DataRateDataType& EOB_EmitterModeType::getDataRate_() const {
  if (dataRate_Accessor) {
    return *dataRate_Accessor;
  }
  throw uci::base::UCIException("Error in getDataRate(): An attempt was made to get an optional field that was not enabled, call hasDataRate() to determine if it is safe to call getDataRate()");
}

const uci::type::DataRateDataType& EOB_EmitterModeType::getDataRate() const {
  return getDataRate_();
}

uci::type::DataRateDataType& EOB_EmitterModeType::getDataRate() {
  return getDataRate_();
}

uci::type::EOB_EmitterModeType& EOB_EmitterModeType::setDataRate(const uci::type::DataRateDataType& accessor) {
  enableDataRate(accessor.getAccessorType());
  if (&accessor != dataRate_Accessor.get()) {
    dataRate_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EOB_EmitterModeType::hasDataRate() const noexcept {
  return static_cast<bool>(dataRate_Accessor);
}

uci::type::DataRateDataType& EOB_EmitterModeType::enableDataRate(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataRateDataType : type};
  if ((!dataRate_Accessor) || (dataRate_Accessor->getAccessorType() != requestedType)) {
    dataRate_Accessor = DataRateDataType::create(requestedType);
    if (!dataRate_Accessor) {
      throw uci::base::UCIException("Error in enableDataRate(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dataRate_Accessor;
}

uci::type::EOB_EmitterModeType& EOB_EmitterModeType::clearDataRate() noexcept {
  dataRate_Accessor.reset();
  return *this;
}

uci::type::ModRateDataType& EOB_EmitterModeType::getModulationRate_() const {
  if (modulationRate_Accessor) {
    return *modulationRate_Accessor;
  }
  throw uci::base::UCIException("Error in getModulationRate(): An attempt was made to get an optional field that was not enabled, call hasModulationRate() to determine if it is safe to call getModulationRate()");
}

const uci::type::ModRateDataType& EOB_EmitterModeType::getModulationRate() const {
  return getModulationRate_();
}

uci::type::ModRateDataType& EOB_EmitterModeType::getModulationRate() {
  return getModulationRate_();
}

uci::type::EOB_EmitterModeType& EOB_EmitterModeType::setModulationRate(const uci::type::ModRateDataType& accessor) {
  enableModulationRate();
  if (&accessor != modulationRate_Accessor.get()) {
    modulationRate_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EOB_EmitterModeType::hasModulationRate() const noexcept {
  return static_cast<bool>(modulationRate_Accessor);
}

uci::type::ModRateDataType& EOB_EmitterModeType::enableModulationRate(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::modRateDataType : type};
  if ((!modulationRate_Accessor) || (modulationRate_Accessor->getAccessorType() != requestedType)) {
    modulationRate_Accessor = ModRateDataType::create(requestedType);
    if (!modulationRate_Accessor) {
      throw uci::base::UCIException("Error in enableModulationRate(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modulationRate_Accessor;
}

uci::type::EOB_EmitterModeType& EOB_EmitterModeType::clearModulationRate() noexcept {
  modulationRate_Accessor.reset();
  return *this;
}

std::unique_ptr<EOB_EmitterModeType> EOB_EmitterModeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_EmitterModeType : type};
  return (requestedType == uci::type::accessorType::eOB_EmitterModeType) ? boost::make_unique<EOB_EmitterModeType>() : nullptr;
}

/**  */
namespace EOB_EmitterModeType_Names {

constexpr const char* Extern_Type_Name{"EOB_EmitterModeType"};
constexpr const char* EmitterModeID_Name{"EmitterModeID"};
constexpr const char* InterceptCount_Name{"InterceptCount"};
constexpr const char* DataRate_Name{"DataRate"};
constexpr const char* ModulationRate_Name{"ModulationRate"};

} // namespace EOB_EmitterModeType_Names

void EOB_EmitterModeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EOB_EmitterModeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EOB_EmitterModeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EOB_EmitterModeType_Names::EmitterModeID_Name) {
      EOB_EmitterModeID_Type::deserialize(valueType.second, accessor.getEmitterModeID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_EmitterModeType_Names::InterceptCount_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInterceptCount(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + EOB_EmitterModeType_Names::DataRate_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDataRate(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_EmitterModeType_Names::ModulationRate_Name) {
      ModRateDataType::deserialize(valueType.second, accessor.enableModulationRate(), nodeName, nsPrefix);
    }
  }
  EOB_SignalType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string EOB_EmitterModeType::serialize(const uci::type::EOB_EmitterModeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EOB_EmitterModeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EOB_EmitterModeType_Names::Extern_Type_Name);
  }
  EOB_SignalType::serialize(accessor, node, "", false, false, false);
  EOB_EmitterModeID_Type::serialize(accessor.getEmitterModeID(), node, EOB_EmitterModeType_Names::EmitterModeID_Name);
  if (accessor.hasInterceptCount()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getInterceptCount(), node, EOB_EmitterModeType_Names::InterceptCount_Name);
  }
  if (accessor.hasDataRate()) {
    DataRateDataType::serialize(accessor.getDataRate(), node, EOB_EmitterModeType_Names::DataRate_Name);
  }
  if (accessor.hasModulationRate()) {
    ModRateDataType::serialize(accessor.getModulationRate(), node, EOB_EmitterModeType_Names::ModulationRate_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EOB_EmitterModeType& EOB_EmitterModeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EOB_EmitterModeType>().release());
}

uci::type::EOB_EmitterModeType& EOB_EmitterModeType::create(const uci::type::EOB_EmitterModeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EOB_EmitterModeType> newAccessor{boost::make_unique<asb_uci::type::EOB_EmitterModeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EOB_EmitterModeType::destroy(uci::type::EOB_EmitterModeType& accessor) {
  delete dynamic_cast<asb_uci::type::EOB_EmitterModeType*>(&accessor);
}

} // namespace type

} // namespace uci

