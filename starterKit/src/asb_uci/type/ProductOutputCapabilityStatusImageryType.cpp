/** @file ProductOutputCapabilityStatusImageryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ProductOutputCapabilityStatusImageryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "asb_uci/type/ProductResolutionType.h"
#include "asb_uci/type/VideoOutputSettingsType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "uci/type/ProductOutputCapabilityStatusImageryType.h"
#include "uci/type/ProductResolutionType.h"
#include "uci/type/VideoOutputSettingsType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductOutputCapabilityStatusImageryType::ProductOutputCapabilityStatusImageryType()
  : productOutputGeneratorID_Accessor{boost::make_unique<PO_ProductGeneratorOutputID_Type>()},
    videoOutput_Accessor{boost::make_unique<VideoOutput>(0, SIZE_MAX)} {
}

ProductOutputCapabilityStatusImageryType::~ProductOutputCapabilityStatusImageryType() = default;

void ProductOutputCapabilityStatusImageryType::copy(const uci::type::ProductOutputCapabilityStatusImageryType& accessor) {
  copyImpl(accessor, false);
}

void ProductOutputCapabilityStatusImageryType::copyImpl(const uci::type::ProductOutputCapabilityStatusImageryType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::productOutputCapabilityStatusImageryType)) {
      const auto& accessorImpl = dynamic_cast<const ProductOutputCapabilityStatusImageryType&>(accessor);
      setProductOutputGeneratorID(*(accessorImpl.productOutputGeneratorID_Accessor));
      if (accessorImpl.hasCompressionRatio()) {
        setCompressionRatio(accessorImpl.getCompressionRatio());
      } else {
        clearCompressionRatio();
      }
      if (accessorImpl.hasProductRate()) {
        setProductRate(accessorImpl.getProductRate());
      } else {
        clearProductRate();
      }
      if (accessorImpl.hasInterlaced()) {
        setInterlaced(accessorImpl.getInterlaced());
      } else {
        clearInterlaced();
      }
      if (accessorImpl.hasProductSize()) {
        setProductSize(accessorImpl.getProductSize());
      } else {
        clearProductSize();
      }
      if (accessorImpl.productResolution_Accessor) {
        setProductResolution(*(accessorImpl.productResolution_Accessor));
      } else {
        productResolution_Accessor.reset();
      }
      setVideoOutput(*(accessorImpl.videoOutput_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void ProductOutputCapabilityStatusImageryType::reset() noexcept {
  productOutputGeneratorID_Accessor->reset();
  clearCompressionRatio();
  clearProductRate();
  clearInterlaced();
  clearProductSize();
  productResolution_Accessor.reset();
  videoOutput_Accessor->reset();
}

const uci::type::PO_ProductGeneratorOutputID_Type& ProductOutputCapabilityStatusImageryType::getProductOutputGeneratorID() const {
  return *productOutputGeneratorID_Accessor;
}

uci::type::PO_ProductGeneratorOutputID_Type& ProductOutputCapabilityStatusImageryType::getProductOutputGeneratorID() {
  return *productOutputGeneratorID_Accessor;
}

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::setProductOutputGeneratorID(const uci::type::PO_ProductGeneratorOutputID_Type& accessor) {
  if (&accessor != productOutputGeneratorID_Accessor.get()) {
    productOutputGeneratorID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Float ProductOutputCapabilityStatusImageryType::getCompressionRatio() const {
  if (compressionRatio_Accessor) {
    return *compressionRatio_Accessor;
  }
  throw uci::base::UCIException("Error in getCompressionRatio(): An attempt was made to get an optional field that was not enabled, call hasCompressionRatio() to determine if it is safe to call getCompressionRatio()");
}

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::setCompressionRatio(xs::Float value) {
  compressionRatio_Accessor = value;
  return *this;
}

bool ProductOutputCapabilityStatusImageryType::hasCompressionRatio() const noexcept {
  return compressionRatio_Accessor.has_value();
}

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::clearCompressionRatio() noexcept {
  compressionRatio_Accessor.reset();
  return *this;
}

xs::UnsignedInt ProductOutputCapabilityStatusImageryType::getProductRate() const {
  if (productRate_Accessor) {
    return *productRate_Accessor;
  }
  throw uci::base::UCIException("Error in getProductRate(): An attempt was made to get an optional field that was not enabled, call hasProductRate() to determine if it is safe to call getProductRate()");
}

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::setProductRate(xs::UnsignedInt value) {
  productRate_Accessor = value;
  return *this;
}

bool ProductOutputCapabilityStatusImageryType::hasProductRate() const noexcept {
  return productRate_Accessor.has_value();
}

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::clearProductRate() noexcept {
  productRate_Accessor.reset();
  return *this;
}

xs::Boolean ProductOutputCapabilityStatusImageryType::getInterlaced() const {
  if (interlaced_Accessor) {
    return *interlaced_Accessor;
  }
  throw uci::base::UCIException("Error in getInterlaced(): An attempt was made to get an optional field that was not enabled, call hasInterlaced() to determine if it is safe to call getInterlaced()");
}

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::setInterlaced(xs::Boolean value) {
  interlaced_Accessor = value;
  return *this;
}

bool ProductOutputCapabilityStatusImageryType::hasInterlaced() const noexcept {
  return interlaced_Accessor.has_value();
}

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::clearInterlaced() noexcept {
  interlaced_Accessor.reset();
  return *this;
}

xs::UnsignedInt ProductOutputCapabilityStatusImageryType::getProductSize() const {
  if (productSize_Accessor) {
    return *productSize_Accessor;
  }
  throw uci::base::UCIException("Error in getProductSize(): An attempt was made to get an optional field that was not enabled, call hasProductSize() to determine if it is safe to call getProductSize()");
}

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::setProductSize(xs::UnsignedInt value) {
  productSize_Accessor = value;
  return *this;
}

bool ProductOutputCapabilityStatusImageryType::hasProductSize() const noexcept {
  return productSize_Accessor.has_value();
}

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::clearProductSize() noexcept {
  productSize_Accessor.reset();
  return *this;
}

uci::type::ProductResolutionType& ProductOutputCapabilityStatusImageryType::getProductResolution_() const {
  if (productResolution_Accessor) {
    return *productResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getProductResolution(): An attempt was made to get an optional field that was not enabled, call hasProductResolution() to determine if it is safe to call getProductResolution()");
}

const uci::type::ProductResolutionType& ProductOutputCapabilityStatusImageryType::getProductResolution() const {
  return getProductResolution_();
}

uci::type::ProductResolutionType& ProductOutputCapabilityStatusImageryType::getProductResolution() {
  return getProductResolution_();
}

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::setProductResolution(const uci::type::ProductResolutionType& accessor) {
  enableProductResolution();
  if (&accessor != productResolution_Accessor.get()) {
    productResolution_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductOutputCapabilityStatusImageryType::hasProductResolution() const noexcept {
  return static_cast<bool>(productResolution_Accessor);
}

uci::type::ProductResolutionType& ProductOutputCapabilityStatusImageryType::enableProductResolution(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productResolutionType : type};
  if ((!productResolution_Accessor) || (productResolution_Accessor->getAccessorType() != requestedType)) {
    productResolution_Accessor = ProductResolutionType::create(requestedType);
    if (!productResolution_Accessor) {
      throw uci::base::UCIException("Error in enableProductResolution(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productResolution_Accessor;
}

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::clearProductResolution() noexcept {
  productResolution_Accessor.reset();
  return *this;
}

const uci::type::ProductOutputCapabilityStatusImageryType::VideoOutput& ProductOutputCapabilityStatusImageryType::getVideoOutput() const {
  return *videoOutput_Accessor;
}

uci::type::ProductOutputCapabilityStatusImageryType::VideoOutput& ProductOutputCapabilityStatusImageryType::getVideoOutput() {
  return *videoOutput_Accessor;
}

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::setVideoOutput(const uci::type::ProductOutputCapabilityStatusImageryType::VideoOutput& accessor) {
  if (&accessor != videoOutput_Accessor.get()) {
    videoOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ProductOutputCapabilityStatusImageryType> ProductOutputCapabilityStatusImageryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productOutputCapabilityStatusImageryType : type};
  return std::unique_ptr<ProductOutputCapabilityStatusImageryType>(dynamic_cast<ProductOutputCapabilityStatusImageryType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace ProductOutputCapabilityStatusImageryType_Names {

constexpr const char* Extern_Type_Name{"ProductOutputCapabilityStatusImageryType"};
constexpr const char* ProductOutputGeneratorID_Name{"ProductOutputGeneratorID"};
constexpr const char* CompressionRatio_Name{"CompressionRatio"};
constexpr const char* ProductRate_Name{"ProductRate"};
constexpr const char* Interlaced_Name{"Interlaced"};
constexpr const char* ProductSize_Name{"ProductSize"};
constexpr const char* ProductResolution_Name{"ProductResolution"};
constexpr const char* VideoOutput_Name{"VideoOutput"};

} // namespace ProductOutputCapabilityStatusImageryType_Names

void ProductOutputCapabilityStatusImageryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductOutputCapabilityStatusImageryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductOutputCapabilityStatusImageryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::ProductOutputGeneratorID_Name) {
      PO_ProductGeneratorOutputID_Type::deserialize(valueType.second, accessor.getProductOutputGeneratorID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::CompressionRatio_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCompressionRatio(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::ProductRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProductRate(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::Interlaced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInterlaced(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::ProductSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProductSize(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::ProductResolution_Name) {
      ProductResolutionType::deserialize(valueType.second, accessor.enableProductResolution(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::VideoOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductOutputCapabilityStatusImageryType::VideoOutput& boundedList = accessor.getVideoOutput();
        const uci::type::ProductOutputCapabilityStatusImageryType::VideoOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::VideoOutputSettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ProductOutputCapabilityStatusImageryType::serialize(const uci::type::ProductOutputCapabilityStatusImageryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductOutputCapabilityStatusImageryType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::productOutputCapabilityStatusImageryType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductOutputCapabilityStatusImageryType_Names::Extern_Type_Name);
    }
    PO_ProductGeneratorOutputID_Type::serialize(accessor.getProductOutputGeneratorID(), node, ProductOutputCapabilityStatusImageryType_Names::ProductOutputGeneratorID_Name);
    if (accessor.hasCompressionRatio()) {
      asb_uci::util::SerializationHelpers::serializeFloat(accessor.getCompressionRatio(), node, ProductOutputCapabilityStatusImageryType_Names::CompressionRatio_Name);
    }
    if (accessor.hasProductRate()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getProductRate(), node, ProductOutputCapabilityStatusImageryType_Names::ProductRate_Name);
    }
    if (accessor.hasInterlaced()) {
      asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInterlaced(), node, ProductOutputCapabilityStatusImageryType_Names::Interlaced_Name);
    }
    if (accessor.hasProductSize()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getProductSize(), node, ProductOutputCapabilityStatusImageryType_Names::ProductSize_Name);
    }
    if (accessor.hasProductResolution()) {
      ProductResolutionType::serialize(accessor.getProductResolution(), node, ProductOutputCapabilityStatusImageryType_Names::ProductResolution_Name);
    }
    {
      const uci::type::ProductOutputCapabilityStatusImageryType::VideoOutput& boundedList = accessor.getVideoOutput();
      for (uci::type::ProductOutputCapabilityStatusImageryType::VideoOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::VideoOutputSettingsType::serialize(boundedList.at(i), node, ProductOutputCapabilityStatusImageryType_Names::VideoOutput_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductOutputCapabilityStatusImageryType>().release());
}

uci::type::ProductOutputCapabilityStatusImageryType& ProductOutputCapabilityStatusImageryType::create(const uci::type::ProductOutputCapabilityStatusImageryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductOutputCapabilityStatusImageryType> newAccessor{boost::make_unique<asb_uci::type::ProductOutputCapabilityStatusImageryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductOutputCapabilityStatusImageryType::destroy(uci::type::ProductOutputCapabilityStatusImageryType& accessor) {
  delete dynamic_cast<asb_uci::type::ProductOutputCapabilityStatusImageryType*>(&accessor);
}

} // namespace type

} // namespace uci

