/** @file EntityOrbitalManeuverMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EntityOrbitalManeuverMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/ConfidenceLevelEnum.h"
#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/ManeuverSummaryType.h"
#include "asb_uci/type/NotificationSourceType.h"
#include "asb_uci/type/ObservationMeasurementReportID_Type.h"
#include "asb_uci/type/OrbitalManeuverID_Type.h"
#include "asb_uci/type/OrbitalManeuverStateEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/ConfidenceLevelEnum.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/EntityOrbitalManeuverMDT.h"
#include "uci/type/ManeuverSummaryType.h"
#include "uci/type/NotificationSourceType.h"
#include "uci/type/ObservationMeasurementReportID_Type.h"
#include "uci/type/OrbitalManeuverID_Type.h"
#include "uci/type/OrbitalManeuverStateEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityOrbitalManeuverMDT::EntityOrbitalManeuverMDT()
  : maneuverID_Accessor{boost::make_unique<OrbitalManeuverID_Type>()},
    maneuverState_Accessor{boost::make_unique<OrbitalManeuverStateEnum>()},
    entityID_Accessor{boost::make_unique<EntityID_Type>()},
    observationMeasurementReportID_Accessor{boost::make_unique<ObservationMeasurementReportID>(0, SIZE_MAX)} {
}

EntityOrbitalManeuverMDT::~EntityOrbitalManeuverMDT() = default;

void EntityOrbitalManeuverMDT::copy(const uci::type::EntityOrbitalManeuverMDT& accessor) {
  copyImpl(accessor, false);
}

void EntityOrbitalManeuverMDT::copyImpl(const uci::type::EntityOrbitalManeuverMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityOrbitalManeuverMDT&>(accessor);
    setManeuverID(*(accessorImpl.maneuverID_Accessor));
    setManeuverState(*(accessorImpl.maneuverState_Accessor));
    if (accessorImpl.maneuverStateConfidence_Accessor) {
      setManeuverStateConfidence(*(accessorImpl.maneuverStateConfidence_Accessor));
    } else {
      maneuverStateConfidence_Accessor.reset();
    }
    setEntityID(*(accessorImpl.entityID_Accessor));
    if (accessorImpl.source_Accessor) {
      setSource(*(accessorImpl.source_Accessor));
    } else {
      source_Accessor.reset();
    }
    if (accessorImpl.maneuver_Accessor) {
      setManeuver(*(accessorImpl.maneuver_Accessor));
    } else {
      maneuver_Accessor.reset();
    }
    if (accessorImpl.detectionTime_Accessor) {
      setDetectionTime(*(accessorImpl.detectionTime_Accessor));
    } else {
      detectionTime_Accessor.reset();
    }
    if (accessorImpl.hasStateObservations()) {
      setStateObservations(accessorImpl.getStateObservations());
    } else {
      clearStateObservations();
    }
    setObservationMeasurementReportID(*(accessorImpl.observationMeasurementReportID_Accessor));
    if (accessorImpl.detectorCapabilityID_Accessor) {
      setDetectorCapabilityID(*(accessorImpl.detectorCapabilityID_Accessor));
    } else {
      detectorCapabilityID_Accessor.reset();
    }
    if (accessorImpl.hasManeuverSolutionIteration()) {
      setManeuverSolutionIteration(accessorImpl.getManeuverSolutionIteration());
    } else {
      clearManeuverSolutionIteration();
    }
  }
}

void EntityOrbitalManeuverMDT::reset() noexcept {
  maneuverID_Accessor->reset();
  maneuverState_Accessor->reset();
  maneuverStateConfidence_Accessor.reset();
  if (entityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    entityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    entityID_Accessor->reset();
  }
  source_Accessor.reset();
  maneuver_Accessor.reset();
  detectionTime_Accessor.reset();
  clearStateObservations();
  observationMeasurementReportID_Accessor->reset();
  detectorCapabilityID_Accessor.reset();
  clearManeuverSolutionIteration();
}

const uci::type::OrbitalManeuverID_Type& EntityOrbitalManeuverMDT::getManeuverID() const {
  return *maneuverID_Accessor;
}

uci::type::OrbitalManeuverID_Type& EntityOrbitalManeuverMDT::getManeuverID() {
  return *maneuverID_Accessor;
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::setManeuverID(const uci::type::OrbitalManeuverID_Type& accessor) {
  if (&accessor != maneuverID_Accessor.get()) {
    maneuverID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitalManeuverStateEnum& EntityOrbitalManeuverMDT::getManeuverState() const {
  return *maneuverState_Accessor;
}

uci::type::OrbitalManeuverStateEnum& EntityOrbitalManeuverMDT::getManeuverState() {
  return *maneuverState_Accessor;
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::setManeuverState(const uci::type::OrbitalManeuverStateEnum& accessor) {
  if (&accessor != maneuverState_Accessor.get()) {
    maneuverState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::setManeuverState(uci::type::OrbitalManeuverStateEnum::EnumerationItem value) {
  maneuverState_Accessor->setValue(value);
  return *this;
}


uci::type::ConfidenceLevelEnum& EntityOrbitalManeuverMDT::getManeuverStateConfidence_() const {
  if (maneuverStateConfidence_Accessor) {
    return *maneuverStateConfidence_Accessor;
  }
  throw uci::base::UCIException("Error in getManeuverStateConfidence(): An attempt was made to get an optional field that was not enabled, call hasManeuverStateConfidence() to determine if it is safe to call getManeuverStateConfidence()");
}

const uci::type::ConfidenceLevelEnum& EntityOrbitalManeuverMDT::getManeuverStateConfidence() const {
  return getManeuverStateConfidence_();
}

uci::type::ConfidenceLevelEnum& EntityOrbitalManeuverMDT::getManeuverStateConfidence() {
  return getManeuverStateConfidence_();
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::setManeuverStateConfidence(const uci::type::ConfidenceLevelEnum& accessor) {
  enableManeuverStateConfidence();
  if (&accessor != maneuverStateConfidence_Accessor.get()) {
    maneuverStateConfidence_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::setManeuverStateConfidence(const uci::type::ConfidenceLevelEnum::EnumerationItem value) {
  enableManeuverStateConfidence().setValue(value);
  return *this;
}

bool EntityOrbitalManeuverMDT::hasManeuverStateConfidence() const noexcept {
  return static_cast<bool>(maneuverStateConfidence_Accessor);
}

uci::type::ConfidenceLevelEnum& EntityOrbitalManeuverMDT::enableManeuverStateConfidence(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::confidenceLevelEnum : type};
  if ((!maneuverStateConfidence_Accessor) || (maneuverStateConfidence_Accessor->getAccessorType() != requestedType)) {
    maneuverStateConfidence_Accessor = ConfidenceLevelEnum::create(requestedType);
    if (!maneuverStateConfidence_Accessor) {
      throw uci::base::UCIException("Error in enableManeuverStateConfidence(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *maneuverStateConfidence_Accessor;
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::clearManeuverStateConfidence() noexcept {
  maneuverStateConfidence_Accessor.reset();
  return *this;
}

const uci::type::EntityID_Type& EntityOrbitalManeuverMDT::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityID_Type& EntityOrbitalManeuverMDT::getEntityID() {
  return *entityID_Accessor;
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& EntityOrbitalManeuverMDT::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::NotificationSourceType& EntityOrbitalManeuverMDT::getSource_() const {
  if (source_Accessor) {
    return *source_Accessor;
  }
  throw uci::base::UCIException("Error in getSource(): An attempt was made to get an optional field that was not enabled, call hasSource() to determine if it is safe to call getSource()");
}

const uci::type::NotificationSourceType& EntityOrbitalManeuverMDT::getSource() const {
  return getSource_();
}

uci::type::NotificationSourceType& EntityOrbitalManeuverMDT::getSource() {
  return getSource_();
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::setSource(const uci::type::NotificationSourceType& accessor) {
  enableSource();
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityOrbitalManeuverMDT::hasSource() const noexcept {
  return static_cast<bool>(source_Accessor);
}

uci::type::NotificationSourceType& EntityOrbitalManeuverMDT::enableSource(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::notificationSourceType : type};
  if ((!source_Accessor) || (source_Accessor->getAccessorType() != requestedType)) {
    source_Accessor = NotificationSourceType::create(requestedType);
    if (!source_Accessor) {
      throw uci::base::UCIException("Error in enableSource(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *source_Accessor;
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::clearSource() noexcept {
  source_Accessor.reset();
  return *this;
}

uci::type::ManeuverSummaryType& EntityOrbitalManeuverMDT::getManeuver_() const {
  if (maneuver_Accessor) {
    return *maneuver_Accessor;
  }
  throw uci::base::UCIException("Error in getManeuver(): An attempt was made to get an optional field that was not enabled, call hasManeuver() to determine if it is safe to call getManeuver()");
}

const uci::type::ManeuverSummaryType& EntityOrbitalManeuverMDT::getManeuver() const {
  return getManeuver_();
}

uci::type::ManeuverSummaryType& EntityOrbitalManeuverMDT::getManeuver() {
  return getManeuver_();
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::setManeuver(const uci::type::ManeuverSummaryType& accessor) {
  enableManeuver();
  if (&accessor != maneuver_Accessor.get()) {
    maneuver_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityOrbitalManeuverMDT::hasManeuver() const noexcept {
  return static_cast<bool>(maneuver_Accessor);
}

uci::type::ManeuverSummaryType& EntityOrbitalManeuverMDT::enableManeuver(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::maneuverSummaryType : type};
  if ((!maneuver_Accessor) || (maneuver_Accessor->getAccessorType() != requestedType)) {
    maneuver_Accessor = ManeuverSummaryType::create(requestedType);
    if (!maneuver_Accessor) {
      throw uci::base::UCIException("Error in enableManeuver(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *maneuver_Accessor;
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::clearManeuver() noexcept {
  maneuver_Accessor.reset();
  return *this;
}

uci::type::DateTimeRangeType& EntityOrbitalManeuverMDT::getDetectionTime_() const {
  if (detectionTime_Accessor) {
    return *detectionTime_Accessor;
  }
  throw uci::base::UCIException("Error in getDetectionTime(): An attempt was made to get an optional field that was not enabled, call hasDetectionTime() to determine if it is safe to call getDetectionTime()");
}

const uci::type::DateTimeRangeType& EntityOrbitalManeuverMDT::getDetectionTime() const {
  return getDetectionTime_();
}

uci::type::DateTimeRangeType& EntityOrbitalManeuverMDT::getDetectionTime() {
  return getDetectionTime_();
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::setDetectionTime(const uci::type::DateTimeRangeType& accessor) {
  enableDetectionTime();
  if (&accessor != detectionTime_Accessor.get()) {
    detectionTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityOrbitalManeuverMDT::hasDetectionTime() const noexcept {
  return static_cast<bool>(detectionTime_Accessor);
}

uci::type::DateTimeRangeType& EntityOrbitalManeuverMDT::enableDetectionTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!detectionTime_Accessor) || (detectionTime_Accessor->getAccessorType() != requestedType)) {
    detectionTime_Accessor = DateTimeRangeType::create(requestedType);
    if (!detectionTime_Accessor) {
      throw uci::base::UCIException("Error in enableDetectionTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *detectionTime_Accessor;
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::clearDetectionTime() noexcept {
  detectionTime_Accessor.reset();
  return *this;
}

xs::UnsignedInt EntityOrbitalManeuverMDT::getStateObservations() const {
  if (stateObservations_Accessor) {
    return *stateObservations_Accessor;
  }
  throw uci::base::UCIException("Error in getStateObservations(): An attempt was made to get an optional field that was not enabled, call hasStateObservations() to determine if it is safe to call getStateObservations()");
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::setStateObservations(xs::UnsignedInt value) {
  stateObservations_Accessor = value;
  return *this;
}

bool EntityOrbitalManeuverMDT::hasStateObservations() const noexcept {
  return stateObservations_Accessor.has_value();
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::clearStateObservations() noexcept {
  stateObservations_Accessor.reset();
  return *this;
}

const uci::type::EntityOrbitalManeuverMDT::ObservationMeasurementReportID& EntityOrbitalManeuverMDT::getObservationMeasurementReportID() const {
  return *observationMeasurementReportID_Accessor;
}

uci::type::EntityOrbitalManeuverMDT::ObservationMeasurementReportID& EntityOrbitalManeuverMDT::getObservationMeasurementReportID() {
  return *observationMeasurementReportID_Accessor;
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::setObservationMeasurementReportID(const uci::type::EntityOrbitalManeuverMDT::ObservationMeasurementReportID& accessor) {
  if (&accessor != observationMeasurementReportID_Accessor.get()) {
    observationMeasurementReportID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CapabilityID_Type& EntityOrbitalManeuverMDT::getDetectorCapabilityID_() const {
  if (detectorCapabilityID_Accessor) {
    return *detectorCapabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getDetectorCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasDetectorCapabilityID() to determine if it is safe to call getDetectorCapabilityID()");
}

const uci::type::CapabilityID_Type& EntityOrbitalManeuverMDT::getDetectorCapabilityID() const {
  return getDetectorCapabilityID_();
}

uci::type::CapabilityID_Type& EntityOrbitalManeuverMDT::getDetectorCapabilityID() {
  return getDetectorCapabilityID_();
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::setDetectorCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableDetectorCapabilityID();
  if (&accessor != detectorCapabilityID_Accessor.get()) {
    detectorCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityOrbitalManeuverMDT::hasDetectorCapabilityID() const noexcept {
  return static_cast<bool>(detectorCapabilityID_Accessor);
}

uci::type::CapabilityID_Type& EntityOrbitalManeuverMDT::enableDetectorCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!detectorCapabilityID_Accessor) || (detectorCapabilityID_Accessor->getAccessorType() != requestedType)) {
    detectorCapabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!detectorCapabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableDetectorCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *detectorCapabilityID_Accessor;
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::clearDetectorCapabilityID() noexcept {
  detectorCapabilityID_Accessor.reset();
  return *this;
}

xs::UnsignedInt EntityOrbitalManeuverMDT::getManeuverSolutionIteration() const {
  if (maneuverSolutionIteration_Accessor) {
    return *maneuverSolutionIteration_Accessor;
  }
  throw uci::base::UCIException("Error in getManeuverSolutionIteration(): An attempt was made to get an optional field that was not enabled, call hasManeuverSolutionIteration() to determine if it is safe to call getManeuverSolutionIteration()");
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::setManeuverSolutionIteration(xs::UnsignedInt value) {
  maneuverSolutionIteration_Accessor = value;
  return *this;
}

bool EntityOrbitalManeuverMDT::hasManeuverSolutionIteration() const noexcept {
  return maneuverSolutionIteration_Accessor.has_value();
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::clearManeuverSolutionIteration() noexcept {
  maneuverSolutionIteration_Accessor.reset();
  return *this;
}

std::unique_ptr<EntityOrbitalManeuverMDT> EntityOrbitalManeuverMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityOrbitalManeuverMDT : type};
  return (requestedType == uci::type::accessorType::entityOrbitalManeuverMDT) ? boost::make_unique<EntityOrbitalManeuverMDT>() : nullptr;
}

/**  */
namespace EntityOrbitalManeuverMDT_Names {

constexpr const char* Extern_Type_Name{"EntityOrbitalManeuverMDT"};
constexpr const char* ManeuverID_Name{"ManeuverID"};
constexpr const char* ManeuverState_Name{"ManeuverState"};
constexpr const char* ManeuverStateConfidence_Name{"ManeuverStateConfidence"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* Source_Name{"Source"};
constexpr const char* Maneuver_Name{"Maneuver"};
constexpr const char* DetectionTime_Name{"DetectionTime"};
constexpr const char* StateObservations_Name{"StateObservations"};
constexpr const char* ObservationMeasurementReportID_Name{"ObservationMeasurementReportID"};
constexpr const char* DetectorCapabilityID_Name{"DetectorCapabilityID"};
constexpr const char* ManeuverSolutionIteration_Name{"ManeuverSolutionIteration"};

} // namespace EntityOrbitalManeuverMDT_Names

void EntityOrbitalManeuverMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityOrbitalManeuverMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityOrbitalManeuverMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::ManeuverID_Name) {
      OrbitalManeuverID_Type::deserialize(valueType.second, accessor.getManeuverID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::ManeuverState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getManeuverState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::ManeuverStateConfidence_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableManeuverStateConfidence().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::Source_Name) {
      NotificationSourceType::deserialize(valueType.second, accessor.enableSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::Maneuver_Name) {
      ManeuverSummaryType::deserialize(valueType.second, accessor.enableManeuver(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::DetectionTime_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableDetectionTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::StateObservations_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStateObservations(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::ObservationMeasurementReportID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityOrbitalManeuverMDT::ObservationMeasurementReportID& boundedList = accessor.getObservationMeasurementReportID();
        const uci::type::EntityOrbitalManeuverMDT::ObservationMeasurementReportID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ObservationMeasurementReportID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::DetectorCapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableDetectorCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::ManeuverSolutionIteration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setManeuverSolutionIteration(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string EntityOrbitalManeuverMDT::serialize(const uci::type::EntityOrbitalManeuverMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityOrbitalManeuverMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityOrbitalManeuverMDT_Names::Extern_Type_Name);
  }
  OrbitalManeuverID_Type::serialize(accessor.getManeuverID(), node, EntityOrbitalManeuverMDT_Names::ManeuverID_Name);
  OrbitalManeuverStateEnum::serialize(accessor.getManeuverState(), node, EntityOrbitalManeuverMDT_Names::ManeuverState_Name, false);
  if (accessor.hasManeuverStateConfidence()) {
    ConfidenceLevelEnum::serialize(accessor.getManeuverStateConfidence(), node, EntityOrbitalManeuverMDT_Names::ManeuverStateConfidence_Name, false);
  }
  EntityID_Type::serialize(accessor.getEntityID(), node, EntityOrbitalManeuverMDT_Names::EntityID_Name);
  if (accessor.hasSource()) {
    NotificationSourceType::serialize(accessor.getSource(), node, EntityOrbitalManeuverMDT_Names::Source_Name);
  }
  if (accessor.hasManeuver()) {
    ManeuverSummaryType::serialize(accessor.getManeuver(), node, EntityOrbitalManeuverMDT_Names::Maneuver_Name);
  }
  if (accessor.hasDetectionTime()) {
    DateTimeRangeType::serialize(accessor.getDetectionTime(), node, EntityOrbitalManeuverMDT_Names::DetectionTime_Name);
  }
  if (accessor.hasStateObservations()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getStateObservations(), node, EntityOrbitalManeuverMDT_Names::StateObservations_Name);
  }
  {
    const uci::type::EntityOrbitalManeuverMDT::ObservationMeasurementReportID& boundedList = accessor.getObservationMeasurementReportID();
    for (uci::type::EntityOrbitalManeuverMDT::ObservationMeasurementReportID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ObservationMeasurementReportID_Type::serialize(boundedList.at(i), node, EntityOrbitalManeuverMDT_Names::ObservationMeasurementReportID_Name);
    }
  }
  if (accessor.hasDetectorCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getDetectorCapabilityID(), node, EntityOrbitalManeuverMDT_Names::DetectorCapabilityID_Name);
  }
  if (accessor.hasManeuverSolutionIteration()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getManeuverSolutionIteration(), node, EntityOrbitalManeuverMDT_Names::ManeuverSolutionIteration_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityOrbitalManeuverMDT>().release());
}

uci::type::EntityOrbitalManeuverMDT& EntityOrbitalManeuverMDT::create(const uci::type::EntityOrbitalManeuverMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityOrbitalManeuverMDT> newAccessor{boost::make_unique<asb_uci::type::EntityOrbitalManeuverMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityOrbitalManeuverMDT::destroy(uci::type::EntityOrbitalManeuverMDT& accessor) {
  delete dynamic_cast<asb_uci::type::EntityOrbitalManeuverMDT*>(&accessor);
}

} // namespace type

} // namespace uci

