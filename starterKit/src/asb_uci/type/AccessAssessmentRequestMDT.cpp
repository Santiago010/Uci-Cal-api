/** @file AccessAssessmentRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AccessAssessmentRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AccessEffortEnum.h"
#include "../../../include/asb_uci/type/CapabilityTaxonomyUniversalType.h"
#include "../../../include/asb_uci/type/DateTimeRangeType.h"
#include "../../../include/asb_uci/type/IdentityKindAssetType.h"
#include "../../../include/asb_uci/type/RepeatEnum.h"
#include "../../../include/asb_uci/type/RequestBaseType.h"
#include "../../../include/asb_uci/type/VisibleString32Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AccessAssessmentRequestMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AccessEffortEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityTaxonomyUniversalType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IdentityKindAssetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RepeatEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString32Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AccessAssessmentRequestMDT::AccessAssessmentRequestMDT()
  : requestFrequency_Accessor{boost::make_unique<RepeatEnum>()},
    subjectObject_Accessor{boost::make_unique<SubjectObject>(1, SIZE_MAX)},
    objectToAssess_Accessor{boost::make_unique<ObjectToAssess>(1, SIZE_MAX)},
    effortToAssess_Accessor{boost::make_unique<EffortToAssess>(0, 5)} {
}

AccessAssessmentRequestMDT::~AccessAssessmentRequestMDT() = default;

void AccessAssessmentRequestMDT::copy(const uci::type::AccessAssessmentRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void AccessAssessmentRequestMDT::copyImpl(const uci::type::AccessAssessmentRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const AccessAssessmentRequestMDT&>(accessor);
    setRequestFrequency(*(accessorImpl.requestFrequency_Accessor));
    if (accessorImpl.assessmentPeriod_Accessor) {
      setAssessmentPeriod(*(accessorImpl.assessmentPeriod_Accessor));
    } else {
      assessmentPeriod_Accessor.reset();
    }
    if (accessorImpl.hasAssessmentInterval()) {
      setAssessmentInterval(accessorImpl.getAssessmentInterval());
    } else {
      clearAssessmentInterval();
    }
    setSubjectObject(*(accessorImpl.subjectObject_Accessor));
    setObjectToAssess(*(accessorImpl.objectToAssess_Accessor));
    setEffortToAssess(*(accessorImpl.effortToAssess_Accessor));
    if (accessorImpl.capabilitiesToAssess_Accessor) {
      setCapabilitiesToAssess(*(accessorImpl.capabilitiesToAssess_Accessor));
    } else {
      capabilitiesToAssess_Accessor.reset();
    }
    if (accessorImpl.assessmentName_Accessor) {
      setAssessmentName(*(accessorImpl.assessmentName_Accessor));
    } else {
      assessmentName_Accessor.reset();
    }
    setResultsInAccessAssessmentMessage(accessorImpl.resultsInAccessAssessmentMessage_Accessor);
  }
}

void AccessAssessmentRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  requestFrequency_Accessor->reset();
  assessmentPeriod_Accessor.reset();
  clearAssessmentInterval();
  subjectObject_Accessor->reset();
  objectToAssess_Accessor->reset();
  effortToAssess_Accessor->reset();
  capabilitiesToAssess_Accessor.reset();
  assessmentName_Accessor.reset();
  resultsInAccessAssessmentMessage_Accessor = false;
}

const uci::type::RepeatEnum& AccessAssessmentRequestMDT::getRequestFrequency() const {
  return *requestFrequency_Accessor;
}

uci::type::RepeatEnum& AccessAssessmentRequestMDT::getRequestFrequency() {
  return *requestFrequency_Accessor;
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::setRequestFrequency(const uci::type::RepeatEnum& accessor) {
  if (&accessor != requestFrequency_Accessor.get()) {
    requestFrequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::setRequestFrequency(uci::type::RepeatEnum::EnumerationItem value) {
  requestFrequency_Accessor->setValue(value);
  return *this;
}


uci::type::DateTimeRangeType& AccessAssessmentRequestMDT::getAssessmentPeriod_() const {
  if (assessmentPeriod_Accessor) {
    return *assessmentPeriod_Accessor;
  }
  throw uci::base::UCIException("Error in getAssessmentPeriod(): An attempt was made to get an optional field that was not enabled, call hasAssessmentPeriod() to determine if it is safe to call getAssessmentPeriod()");
}

const uci::type::DateTimeRangeType& AccessAssessmentRequestMDT::getAssessmentPeriod() const {
  return getAssessmentPeriod_();
}

uci::type::DateTimeRangeType& AccessAssessmentRequestMDT::getAssessmentPeriod() {
  return getAssessmentPeriod_();
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::setAssessmentPeriod(const uci::type::DateTimeRangeType& accessor) {
  enableAssessmentPeriod();
  if (&accessor != assessmentPeriod_Accessor.get()) {
    assessmentPeriod_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AccessAssessmentRequestMDT::hasAssessmentPeriod() const noexcept {
  return static_cast<bool>(assessmentPeriod_Accessor);
}

uci::type::DateTimeRangeType& AccessAssessmentRequestMDT::enableAssessmentPeriod(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!assessmentPeriod_Accessor) || (assessmentPeriod_Accessor->getAccessorType() != requestedType)) {
    assessmentPeriod_Accessor = DateTimeRangeType::create(requestedType);
    if (!assessmentPeriod_Accessor) {
      throw uci::base::UCIException("Error in enableAssessmentPeriod(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *assessmentPeriod_Accessor;
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::clearAssessmentPeriod() noexcept {
  assessmentPeriod_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue AccessAssessmentRequestMDT::getAssessmentInterval() const {
  if (assessmentInterval_Accessor) {
    return *assessmentInterval_Accessor;
  }
  throw uci::base::UCIException("Error in getAssessmentInterval(): An attempt was made to get an optional field that was not enabled, call hasAssessmentInterval() to determine if it is safe to call getAssessmentInterval()");
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::setAssessmentInterval(uci::type::DurationTypeValue value) {
  assessmentInterval_Accessor = value;
  return *this;
}

bool AccessAssessmentRequestMDT::hasAssessmentInterval() const noexcept {
  return assessmentInterval_Accessor.has_value();
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::clearAssessmentInterval() noexcept {
  assessmentInterval_Accessor.reset();
  return *this;
}

const uci::type::AccessAssessmentRequestMDT::SubjectObject& AccessAssessmentRequestMDT::getSubjectObject() const {
  return *subjectObject_Accessor;
}

uci::type::AccessAssessmentRequestMDT::SubjectObject& AccessAssessmentRequestMDT::getSubjectObject() {
  return *subjectObject_Accessor;
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::setSubjectObject(const uci::type::AccessAssessmentRequestMDT::SubjectObject& accessor) {
  if (&accessor != subjectObject_Accessor.get()) {
    subjectObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AccessAssessmentRequestMDT::ObjectToAssess& AccessAssessmentRequestMDT::getObjectToAssess() const {
  return *objectToAssess_Accessor;
}

uci::type::AccessAssessmentRequestMDT::ObjectToAssess& AccessAssessmentRequestMDT::getObjectToAssess() {
  return *objectToAssess_Accessor;
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::setObjectToAssess(const uci::type::AccessAssessmentRequestMDT::ObjectToAssess& accessor) {
  if (&accessor != objectToAssess_Accessor.get()) {
    objectToAssess_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AccessAssessmentRequestMDT::EffortToAssess& AccessAssessmentRequestMDT::getEffortToAssess() const {
  return *effortToAssess_Accessor;
}

uci::type::AccessAssessmentRequestMDT::EffortToAssess& AccessAssessmentRequestMDT::getEffortToAssess() {
  return *effortToAssess_Accessor;
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::setEffortToAssess(const uci::type::AccessAssessmentRequestMDT::EffortToAssess& accessor) {
  if (&accessor != effortToAssess_Accessor.get()) {
    effortToAssess_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CapabilityTaxonomyUniversalType& AccessAssessmentRequestMDT::getCapabilitiesToAssess_() const {
  if (capabilitiesToAssess_Accessor) {
    return *capabilitiesToAssess_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilitiesToAssess(): An attempt was made to get an optional field that was not enabled, call hasCapabilitiesToAssess() to determine if it is safe to call getCapabilitiesToAssess()");
}

const uci::type::CapabilityTaxonomyUniversalType& AccessAssessmentRequestMDT::getCapabilitiesToAssess() const {
  return getCapabilitiesToAssess_();
}

uci::type::CapabilityTaxonomyUniversalType& AccessAssessmentRequestMDT::getCapabilitiesToAssess() {
  return getCapabilitiesToAssess_();
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::setCapabilitiesToAssess(const uci::type::CapabilityTaxonomyUniversalType& accessor) {
  enableCapabilitiesToAssess();
  if (&accessor != capabilitiesToAssess_Accessor.get()) {
    capabilitiesToAssess_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AccessAssessmentRequestMDT::hasCapabilitiesToAssess() const noexcept {
  return static_cast<bool>(capabilitiesToAssess_Accessor);
}

uci::type::CapabilityTaxonomyUniversalType& AccessAssessmentRequestMDT::enableCapabilitiesToAssess(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityTaxonomyUniversalType : type};
  if ((!capabilitiesToAssess_Accessor) || (capabilitiesToAssess_Accessor->getAccessorType() != requestedType)) {
    capabilitiesToAssess_Accessor = CapabilityTaxonomyUniversalType::create(requestedType);
    if (!capabilitiesToAssess_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilitiesToAssess(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilitiesToAssess_Accessor;
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::clearCapabilitiesToAssess() noexcept {
  capabilitiesToAssess_Accessor.reset();
  return *this;
}

uci::type::VisibleString32Type& AccessAssessmentRequestMDT::getAssessmentName_() const {
  if (assessmentName_Accessor) {
    return *assessmentName_Accessor;
  }
  throw uci::base::UCIException("Error in getAssessmentName(): An attempt was made to get an optional field that was not enabled, call hasAssessmentName() to determine if it is safe to call getAssessmentName()");
}

const uci::type::VisibleString32Type& AccessAssessmentRequestMDT::getAssessmentName() const {
  return getAssessmentName_();
}

uci::type::VisibleString32Type& AccessAssessmentRequestMDT::getAssessmentName() {
  return getAssessmentName_();
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::setAssessmentName(const uci::type::VisibleString32Type& value) {
  return setAssessmentName(value.c_str());
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::setAssessmentName(const std::string& value) {
  return setAssessmentName(value.c_str());
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::setAssessmentName(const char* value) {
  enableAssessmentName().setStringValue(value);
  return *this;
}

bool AccessAssessmentRequestMDT::hasAssessmentName() const noexcept {
  return static_cast<bool>(assessmentName_Accessor);
}

uci::type::VisibleString32Type& AccessAssessmentRequestMDT::enableAssessmentName(uci::base::accessorType::AccessorType type) {
  if (!assessmentName_Accessor) {
    assessmentName_Accessor = VisibleString32Type::create(type);
  }
  return *assessmentName_Accessor;
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::clearAssessmentName() noexcept {
  assessmentName_Accessor.reset();
  return *this;
}

xs::Boolean AccessAssessmentRequestMDT::getResultsInAccessAssessmentMessage() const {
  return resultsInAccessAssessmentMessage_Accessor;
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::setResultsInAccessAssessmentMessage(xs::Boolean value) {
  resultsInAccessAssessmentMessage_Accessor = value;
  return *this;
}


std::unique_ptr<AccessAssessmentRequestMDT> AccessAssessmentRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::accessAssessmentRequestMDT : type};
  return (requestedType == uci::type::accessorType::accessAssessmentRequestMDT) ? boost::make_unique<AccessAssessmentRequestMDT>() : nullptr;
}

/**  */
namespace AccessAssessmentRequestMDT_Names {

constexpr const char* Extern_Type_Name{"AccessAssessmentRequestMDT"};
constexpr const char* RequestFrequency_Name{"RequestFrequency"};
constexpr const char* AssessmentPeriod_Name{"AssessmentPeriod"};
constexpr const char* AssessmentInterval_Name{"AssessmentInterval"};
constexpr const char* SubjectObject_Name{"SubjectObject"};
constexpr const char* ObjectToAssess_Name{"ObjectToAssess"};
constexpr const char* EffortToAssess_Name{"EffortToAssess"};
constexpr const char* CapabilitiesToAssess_Name{"CapabilitiesToAssess"};
constexpr const char* AssessmentName_Name{"AssessmentName"};
constexpr const char* ResultsInAccessAssessmentMessage_Name{"ResultsInAccessAssessmentMessage"};

} // namespace AccessAssessmentRequestMDT_Names

void AccessAssessmentRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::AccessAssessmentRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AccessAssessmentRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AccessAssessmentRequestMDT_Names::RequestFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRequestFrequency().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AccessAssessmentRequestMDT_Names::AssessmentPeriod_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableAssessmentPeriod(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AccessAssessmentRequestMDT_Names::AssessmentInterval_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAssessmentInterval(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + AccessAssessmentRequestMDT_Names::SubjectObject_Name) {
      uci::type::AccessAssessmentRequestMDT::SubjectObject& boundedList = accessor.getSubjectObject();
      const uci::type::AccessAssessmentRequestMDT::SubjectObject::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::IdentityKindAssetType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AccessAssessmentRequestMDT_Names::ObjectToAssess_Name) {
      uci::type::AccessAssessmentRequestMDT::ObjectToAssess& boundedList = accessor.getObjectToAssess();
      const uci::type::AccessAssessmentRequestMDT::ObjectToAssess::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::IdentityKindAssetType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AccessAssessmentRequestMDT_Names::EffortToAssess_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AccessAssessmentRequestMDT::EffortToAssess& boundedList = accessor.getEffortToAssess();
        const uci::type::AccessAssessmentRequestMDT::EffortToAssess::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AccessAssessmentRequestMDT_Names::CapabilitiesToAssess_Name) {
      CapabilityTaxonomyUniversalType::deserialize(valueType.second, accessor.enableCapabilitiesToAssess(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AccessAssessmentRequestMDT_Names::AssessmentName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAssessmentName(*value);
      }
    } else if (valueType.first == nsPrefix + AccessAssessmentRequestMDT_Names::ResultsInAccessAssessmentMessage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResultsInAccessAssessmentMessage(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string AccessAssessmentRequestMDT::serialize(const uci::type::AccessAssessmentRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AccessAssessmentRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AccessAssessmentRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  RepeatEnum::serialize(accessor.getRequestFrequency(), node, AccessAssessmentRequestMDT_Names::RequestFrequency_Name, false);
  if (accessor.hasAssessmentPeriod()) {
    DateTimeRangeType::serialize(accessor.getAssessmentPeriod(), node, AccessAssessmentRequestMDT_Names::AssessmentPeriod_Name);
  }
  if (accessor.hasAssessmentInterval()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getAssessmentInterval(), node, AccessAssessmentRequestMDT_Names::AssessmentInterval_Name);
  }
  {
    const uci::type::AccessAssessmentRequestMDT::SubjectObject& boundedList = accessor.getSubjectObject();
    for (uci::type::AccessAssessmentRequestMDT::SubjectObject::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::IdentityKindAssetType::serialize(boundedList.at(i), node, AccessAssessmentRequestMDT_Names::SubjectObject_Name);
    }
  }
  {
    const uci::type::AccessAssessmentRequestMDT::ObjectToAssess& boundedList = accessor.getObjectToAssess();
    for (uci::type::AccessAssessmentRequestMDT::ObjectToAssess::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::IdentityKindAssetType::serialize(boundedList.at(i), node, AccessAssessmentRequestMDT_Names::ObjectToAssess_Name);
    }
  }
  {
    const uci::type::AccessAssessmentRequestMDT::EffortToAssess& boundedList = accessor.getEffortToAssess();
    for (uci::type::AccessAssessmentRequestMDT::EffortToAssess::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      AccessEffortEnum::serialize(boundedList.at(i), node, AccessAssessmentRequestMDT_Names::EffortToAssess_Name, false);
    }
  }
  if (accessor.hasCapabilitiesToAssess()) {
    CapabilityTaxonomyUniversalType::serialize(accessor.getCapabilitiesToAssess(), node, AccessAssessmentRequestMDT_Names::CapabilitiesToAssess_Name);
  }
  if (accessor.hasAssessmentName()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getAssessmentName(), node, AccessAssessmentRequestMDT_Names::AssessmentName_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getResultsInAccessAssessmentMessage(), node, AccessAssessmentRequestMDT_Names::ResultsInAccessAssessmentMessage_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AccessAssessmentRequestMDT>().release());
}

uci::type::AccessAssessmentRequestMDT& AccessAssessmentRequestMDT::create(const uci::type::AccessAssessmentRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AccessAssessmentRequestMDT> newAccessor{boost::make_unique<asb_uci::type::AccessAssessmentRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AccessAssessmentRequestMDT::destroy(uci::type::AccessAssessmentRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::AccessAssessmentRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

