/** @file DamageEstimateTargetType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DamageEstimateTargetType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/TargetType.h"
#include "asb_uci/type/TaskID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DamageEstimateTargetType.h"
#include "uci/type/TargetType.h"
#include "uci/type/TaskID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DamageEstimateTargetType::DamageEstimateTargetType() = default;

DamageEstimateTargetType::~DamageEstimateTargetType() = default;

void DamageEstimateTargetType::copy(const uci::type::DamageEstimateTargetType& accessor) {
  copyImpl(accessor, false);
}

void DamageEstimateTargetType::copyImpl(const uci::type::DamageEstimateTargetType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DamageEstimateTargetType&>(accessor);
    if (accessorImpl.taskID_Accessor) {
      setTaskID(*(accessorImpl.taskID_Accessor));
    } else {
      taskID_Accessor.reset();
    }
    if (accessorImpl.target_Accessor) {
      setTarget(*(accessorImpl.target_Accessor));
    } else {
      target_Accessor.reset();
    }
  }
}

void DamageEstimateTargetType::reset() noexcept {
  taskID_Accessor.reset();
  target_Accessor.reset();
}

uci::type::DamageEstimateTargetType::DamageEstimateTargetTypeChoice DamageEstimateTargetType::getDamageEstimateTargetTypeChoiceOrdinal() const noexcept {
  if (taskID_Accessor) {
    return DAMAGEESTIMATETARGETTYPE_CHOICE_TASKID;
  }
  if (target_Accessor) {
    return DAMAGEESTIMATETARGETTYPE_CHOICE_TARGET;
  }
  return DAMAGEESTIMATETARGETTYPE_CHOICE_NONE;
}

uci::type::DamageEstimateTargetType& DamageEstimateTargetType::setDamageEstimateTargetTypeChoiceOrdinal(uci::type::DamageEstimateTargetType::DamageEstimateTargetTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case DAMAGEESTIMATETARGETTYPE_CHOICE_TASKID:
      chooseTaskID("setDamageEstimateTargetTypeChoiceOrdinal", type);
      break;
    case DAMAGEESTIMATETARGETTYPE_CHOICE_TARGET:
      chooseTarget("setDamageEstimateTargetTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setDamageEstimateTargetTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::TaskID_Type& DamageEstimateTargetType::getTaskID_() const {
  if (taskID_Accessor) {
    return *taskID_Accessor;
  }
  throw uci::base::UCIException("Error in getTaskID(): Unable to get TaskID, field not selected");
}

const uci::type::TaskID_Type& DamageEstimateTargetType::getTaskID() const {
  return getTaskID_();
}

uci::type::TaskID_Type& DamageEstimateTargetType::getTaskID() {
  return getTaskID_();
}

uci::type::DamageEstimateTargetType& DamageEstimateTargetType::setTaskID(const uci::type::TaskID_Type& accessor) {
  chooseTaskID();
  if (&accessor != taskID_Accessor.get()) {
    taskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageEstimateTargetType::isTaskID() const noexcept {
  return static_cast<bool>(taskID_Accessor);
}

uci::type::TaskID_Type& DamageEstimateTargetType::chooseTaskID(const std::string& method, uci::base::accessorType::AccessorType type) {
  target_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskID_Type : type};
  if ((!taskID_Accessor) || (taskID_Accessor->getAccessorType() != requestedType)) {
    taskID_Accessor = TaskID_Type::create(type);
    if (!taskID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taskID_Accessor;
}

uci::type::TaskID_Type& DamageEstimateTargetType::chooseTaskID(uci::base::accessorType::AccessorType type) {
  return chooseTaskID("chooseTaskID", type);
}

uci::type::TargetType& DamageEstimateTargetType::getTarget_() const {
  if (target_Accessor) {
    return *target_Accessor;
  }
  throw uci::base::UCIException("Error in getTarget(): Unable to get Target, field not selected");
}

const uci::type::TargetType& DamageEstimateTargetType::getTarget() const {
  return getTarget_();
}

uci::type::TargetType& DamageEstimateTargetType::getTarget() {
  return getTarget_();
}

uci::type::DamageEstimateTargetType& DamageEstimateTargetType::setTarget(const uci::type::TargetType& accessor) {
  chooseTarget(accessor.getAccessorType());
  if (&accessor != target_Accessor.get()) {
    target_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageEstimateTargetType::isTarget() const noexcept {
  return static_cast<bool>(target_Accessor);
}

uci::type::TargetType& DamageEstimateTargetType::chooseTarget(const std::string& method, uci::base::accessorType::AccessorType type) {
  taskID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::targetType : type};
  if ((!target_Accessor) || (target_Accessor->getAccessorType() != requestedType)) {
    target_Accessor = TargetType::create(type);
    if (!target_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *target_Accessor;
}

uci::type::TargetType& DamageEstimateTargetType::chooseTarget(uci::base::accessorType::AccessorType type) {
  return chooseTarget("chooseTarget", type);
}

std::unique_ptr<DamageEstimateTargetType> DamageEstimateTargetType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageEstimateTargetType : type};
  return (requestedType == uci::type::accessorType::damageEstimateTargetType) ? boost::make_unique<DamageEstimateTargetType>() : nullptr;
}

/**  */
namespace DamageEstimateTargetType_Names {

constexpr const char* Extern_Type_Name{"DamageEstimateTargetType"};
constexpr const char* TaskID_Name{"TaskID"};
constexpr const char* Target_Name{"Target"};

} // namespace DamageEstimateTargetType_Names

void DamageEstimateTargetType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageEstimateTargetType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamageEstimateTargetType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamageEstimateTargetType_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.chooseTaskID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateTargetType_Names::Target_Name) {
      TargetType::deserialize(valueType.second, accessor.chooseTarget(), nodeName, nsPrefix);
    }
  }
}

std::string DamageEstimateTargetType::serialize(const uci::type::DamageEstimateTargetType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DamageEstimateTargetType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DamageEstimateTargetType_Names::Extern_Type_Name);
  }
  if (accessor.isTaskID()) {
    TaskID_Type::serialize(accessor.getTaskID(), node, DamageEstimateTargetType_Names::TaskID_Name);
  } else if (accessor.isTarget()) {
    TargetType::serialize(accessor.getTarget(), node, DamageEstimateTargetType_Names::Target_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DamageEstimateTargetType& DamageEstimateTargetType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DamageEstimateTargetType>().release());
}

uci::type::DamageEstimateTargetType& DamageEstimateTargetType::create(const uci::type::DamageEstimateTargetType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DamageEstimateTargetType> newAccessor{boost::make_unique<asb_uci::type::DamageEstimateTargetType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DamageEstimateTargetType::destroy(uci::type::DamageEstimateTargetType& accessor) {
  delete dynamic_cast<asb_uci::type::DamageEstimateTargetType*>(&accessor);
}

} // namespace type

} // namespace uci

