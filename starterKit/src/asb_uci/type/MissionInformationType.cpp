/** @file MissionInformationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MissionInformationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/VisibleString128Type.h"
#include "asb_uci/type/VisibleString32Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/MissionInformationType.h"
#include "uci/type/VisibleString128Type.h"
#include "uci/type/VisibleString32Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MissionInformationType::MissionInformationType()
  : missionName_Accessor{boost::make_unique<VisibleString32Type>()} {
}

MissionInformationType::~MissionInformationType() = default;

void MissionInformationType::copy(const uci::type::MissionInformationType& accessor) {
  copyImpl(accessor, false);
}

void MissionInformationType::copyImpl(const uci::type::MissionInformationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MissionInformationType&>(accessor);
    setMissionName(*(accessorImpl.missionName_Accessor));
    if (accessorImpl.missionDescription_Accessor) {
      setMissionDescription(*(accessorImpl.missionDescription_Accessor));
    } else {
      missionDescription_Accessor.reset();
    }
  }
}

void MissionInformationType::reset() noexcept {
  missionName_Accessor->reset();
  missionDescription_Accessor.reset();
}

const uci::type::VisibleString32Type& MissionInformationType::getMissionName() const noexcept {
  return *missionName_Accessor;
}

uci::type::VisibleString32Type& MissionInformationType::getMissionName() noexcept {
  return *missionName_Accessor;
}

uci::type::MissionInformationType& MissionInformationType::setMissionName(const uci::type::VisibleString32Type& value) {
  return setMissionName(value.c_str());
}

uci::type::MissionInformationType& MissionInformationType::setMissionName(const std::string& value) {
  return setMissionName(value.c_str());
}

uci::type::MissionInformationType& MissionInformationType::setMissionName(const char* value) {
  missionName_Accessor->setStringValue(value);
  return *this;
}

uci::type::VisibleString128Type& MissionInformationType::getMissionDescription_() const {
  if (missionDescription_Accessor) {
    return *missionDescription_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionDescription(): An attempt was made to get an optional field that was not enabled, call hasMissionDescription() to determine if it is safe to call getMissionDescription()");
}

const uci::type::VisibleString128Type& MissionInformationType::getMissionDescription() const {
  return getMissionDescription_();
}

uci::type::VisibleString128Type& MissionInformationType::getMissionDescription() {
  return getMissionDescription_();
}

uci::type::MissionInformationType& MissionInformationType::setMissionDescription(const uci::type::VisibleString128Type& value) {
  return setMissionDescription(value.c_str());
}

uci::type::MissionInformationType& MissionInformationType::setMissionDescription(const std::string& value) {
  return setMissionDescription(value.c_str());
}

uci::type::MissionInformationType& MissionInformationType::setMissionDescription(const char* value) {
  enableMissionDescription().setStringValue(value);
  return *this;
}

bool MissionInformationType::hasMissionDescription() const noexcept {
  return static_cast<bool>(missionDescription_Accessor);
}

uci::type::VisibleString128Type& MissionInformationType::enableMissionDescription(uci::base::accessorType::AccessorType type) {
  if (!missionDescription_Accessor) {
    missionDescription_Accessor = VisibleString128Type::create(type);
  }
  return *missionDescription_Accessor;
}

uci::type::MissionInformationType& MissionInformationType::clearMissionDescription() noexcept {
  missionDescription_Accessor.reset();
  return *this;
}

std::unique_ptr<MissionInformationType> MissionInformationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionInformationType : type};
  return (requestedType == uci::type::accessorType::missionInformationType) ? boost::make_unique<MissionInformationType>() : nullptr;
}

/**  */
namespace MissionInformationType_Names {

constexpr const char* Extern_Type_Name{"MissionInformationType"};
constexpr const char* MissionName_Name{"MissionName"};
constexpr const char* MissionDescription_Name{"MissionDescription"};

} // namespace MissionInformationType_Names

void MissionInformationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionInformationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionInformationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MissionInformationType_Names::MissionName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionName(*value);
      }
    } else if (valueType.first == nsPrefix + MissionInformationType_Names::MissionDescription_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionDescription(*value);
      }
    }
  }
}

std::string MissionInformationType::serialize(const uci::type::MissionInformationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MissionInformationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MissionInformationType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeString(accessor.getMissionName(), node, MissionInformationType_Names::MissionName_Name);
  if (accessor.hasMissionDescription()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMissionDescription(), node, MissionInformationType_Names::MissionDescription_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MissionInformationType& MissionInformationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MissionInformationType>().release());
}

uci::type::MissionInformationType& MissionInformationType::create(const uci::type::MissionInformationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MissionInformationType> newAccessor{boost::make_unique<asb_uci::type::MissionInformationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MissionInformationType::destroy(uci::type::MissionInformationType& accessor) {
  delete dynamic_cast<asb_uci::type::MissionInformationType*>(&accessor);
}

} // namespace type

} // namespace uci

