/** @file VehicleUniqueIdentifierType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/VehicleUniqueIdentifierType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AIS_Type.h"
#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString20Type.h"
#include "asb_uci/type/SatelliteIdentifierType.h"
#include "asb_uci/type/TailNumberType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AIS_Type.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString20Type.h"
#include "uci/type/SatelliteIdentifierType.h"
#include "uci/type/TailNumberType.h"
#include "uci/type/VehicleUniqueIdentifierType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VehicleUniqueIdentifierType::VehicleUniqueIdentifierType() = default;

VehicleUniqueIdentifierType::~VehicleUniqueIdentifierType() = default;

void VehicleUniqueIdentifierType::copy(const uci::type::VehicleUniqueIdentifierType& accessor) {
  copyImpl(accessor, false);
}

void VehicleUniqueIdentifierType::copyImpl(const uci::type::VehicleUniqueIdentifierType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VehicleUniqueIdentifierType&>(accessor);
    if (accessorImpl.aIS_Accessor) {
      setAIS(*(accessorImpl.aIS_Accessor));
    } else {
      aIS_Accessor.reset();
    }
    if (accessorImpl.tailNumber_Accessor) {
      setTailNumber(*(accessorImpl.tailNumber_Accessor));
    } else {
      tailNumber_Accessor.reset();
    }
    if (accessorImpl.satellite_Accessor) {
      setSatellite(*(accessorImpl.satellite_Accessor));
    } else {
      satellite_Accessor.reset();
    }
    if (accessorImpl.alternateIdentifier_Accessor) {
      setAlternateIdentifier(*(accessorImpl.alternateIdentifier_Accessor));
    } else {
      alternateIdentifier_Accessor.reset();
    }
  }
}

void VehicleUniqueIdentifierType::reset() noexcept {
  aIS_Accessor.reset();
  tailNumber_Accessor.reset();
  satellite_Accessor.reset();
  alternateIdentifier_Accessor.reset();
}

uci::type::VehicleUniqueIdentifierType::VehicleUniqueIdentifierTypeChoice VehicleUniqueIdentifierType::getVehicleUniqueIdentifierTypeChoiceOrdinal() const noexcept {
  if (aIS_Accessor) {
    return VEHICLEUNIQUEIDENTIFIERTYPE_CHOICE_AIS;
  }
  if (tailNumber_Accessor) {
    return VEHICLEUNIQUEIDENTIFIERTYPE_CHOICE_TAILNUMBER;
  }
  if (satellite_Accessor) {
    return VEHICLEUNIQUEIDENTIFIERTYPE_CHOICE_SATELLITE;
  }
  if (alternateIdentifier_Accessor) {
    return VEHICLEUNIQUEIDENTIFIERTYPE_CHOICE_ALTERNATEIDENTIFIER;
  }
  return VEHICLEUNIQUEIDENTIFIERTYPE_CHOICE_NONE;
}

uci::type::VehicleUniqueIdentifierType& VehicleUniqueIdentifierType::setVehicleUniqueIdentifierTypeChoiceOrdinal(uci::type::VehicleUniqueIdentifierType::VehicleUniqueIdentifierTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case VEHICLEUNIQUEIDENTIFIERTYPE_CHOICE_AIS:
      chooseAIS("setVehicleUniqueIdentifierTypeChoiceOrdinal", type);
      break;
    case VEHICLEUNIQUEIDENTIFIERTYPE_CHOICE_TAILNUMBER:
      chooseTailNumber("setVehicleUniqueIdentifierTypeChoiceOrdinal", type);
      break;
    case VEHICLEUNIQUEIDENTIFIERTYPE_CHOICE_SATELLITE:
      chooseSatellite("setVehicleUniqueIdentifierTypeChoiceOrdinal", type);
      break;
    case VEHICLEUNIQUEIDENTIFIERTYPE_CHOICE_ALTERNATEIDENTIFIER:
      chooseAlternateIdentifier("setVehicleUniqueIdentifierTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setVehicleUniqueIdentifierTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AIS_Type& VehicleUniqueIdentifierType::getAIS_() const {
  if (aIS_Accessor) {
    return *aIS_Accessor;
  }
  throw uci::base::UCIException("Error in getAIS(): Unable to get AIS, field not selected");
}

const uci::type::AIS_Type& VehicleUniqueIdentifierType::getAIS() const {
  return getAIS_();
}

uci::type::AIS_Type& VehicleUniqueIdentifierType::getAIS() {
  return getAIS_();
}

uci::type::VehicleUniqueIdentifierType& VehicleUniqueIdentifierType::setAIS(const uci::type::AIS_Type& accessor) {
  chooseAIS();
  if (&accessor != aIS_Accessor.get()) {
    aIS_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VehicleUniqueIdentifierType::isAIS() const noexcept {
  return static_cast<bool>(aIS_Accessor);
}

uci::type::AIS_Type& VehicleUniqueIdentifierType::chooseAIS(const std::string& method, uci::base::accessorType::AccessorType type) {
  tailNumber_Accessor.reset();
  satellite_Accessor.reset();
  alternateIdentifier_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aIS_Type : type};
  if ((!aIS_Accessor) || (aIS_Accessor->getAccessorType() != requestedType)) {
    aIS_Accessor = AIS_Type::create(type);
    if (!aIS_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aIS_Accessor;
}

uci::type::AIS_Type& VehicleUniqueIdentifierType::chooseAIS(uci::base::accessorType::AccessorType type) {
  return chooseAIS("chooseAIS", type);
}

uci::type::TailNumberType& VehicleUniqueIdentifierType::getTailNumber_() const {
  if (tailNumber_Accessor) {
    return *tailNumber_Accessor;
  }
  throw uci::base::UCIException("Error in getTailNumber(): An attempt was made to get an optional field that was not enabled, call hasTailNumber() to determine if it is safe to call getTailNumber()");
}

const uci::type::TailNumberType& VehicleUniqueIdentifierType::getTailNumber() const {
  return getTailNumber_();
}

uci::type::TailNumberType& VehicleUniqueIdentifierType::getTailNumber() {
  return getTailNumber_();
}

uci::type::VehicleUniqueIdentifierType& VehicleUniqueIdentifierType::setTailNumber(const uci::type::TailNumberType& value) {
  return setTailNumber(value.c_str());
}

uci::type::VehicleUniqueIdentifierType& VehicleUniqueIdentifierType::setTailNumber(const std::string& value) {
  return setTailNumber(value.c_str());
}

uci::type::VehicleUniqueIdentifierType& VehicleUniqueIdentifierType::setTailNumber(const char * value) {
  chooseTailNumber().setStringValue(value);
  return *this;
}

bool VehicleUniqueIdentifierType::isTailNumber() const noexcept {
  return static_cast<bool>(tailNumber_Accessor);
}

uci::type::TailNumberType& VehicleUniqueIdentifierType::chooseTailNumber(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  aIS_Accessor.reset();
  satellite_Accessor.reset();
  alternateIdentifier_Accessor.reset();
  if (!tailNumber_Accessor) {
    tailNumber_Accessor = TailNumberType::create(type);
  }
  return *tailNumber_Accessor;
}

uci::type::TailNumberType& VehicleUniqueIdentifierType::chooseTailNumber(uci::base::accessorType::AccessorType type) {
  return chooseTailNumber("chooseTailNumber", type);
}

uci::type::SatelliteIdentifierType& VehicleUniqueIdentifierType::getSatellite_() const {
  if (satellite_Accessor) {
    return *satellite_Accessor;
  }
  throw uci::base::UCIException("Error in getSatellite(): Unable to get Satellite, field not selected");
}

const uci::type::SatelliteIdentifierType& VehicleUniqueIdentifierType::getSatellite() const {
  return getSatellite_();
}

uci::type::SatelliteIdentifierType& VehicleUniqueIdentifierType::getSatellite() {
  return getSatellite_();
}

uci::type::VehicleUniqueIdentifierType& VehicleUniqueIdentifierType::setSatellite(const uci::type::SatelliteIdentifierType& accessor) {
  chooseSatellite();
  if (&accessor != satellite_Accessor.get()) {
    satellite_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VehicleUniqueIdentifierType::isSatellite() const noexcept {
  return static_cast<bool>(satellite_Accessor);
}

uci::type::SatelliteIdentifierType& VehicleUniqueIdentifierType::chooseSatellite(const std::string& method, uci::base::accessorType::AccessorType type) {
  aIS_Accessor.reset();
  tailNumber_Accessor.reset();
  alternateIdentifier_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteIdentifierType : type};
  if ((!satellite_Accessor) || (satellite_Accessor->getAccessorType() != requestedType)) {
    satellite_Accessor = SatelliteIdentifierType::create(type);
    if (!satellite_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *satellite_Accessor;
}

uci::type::SatelliteIdentifierType& VehicleUniqueIdentifierType::chooseSatellite(uci::base::accessorType::AccessorType type) {
  return chooseSatellite("chooseSatellite", type);
}

uci::type::AlphanumericDashSpaceUnderscoreString20Type& VehicleUniqueIdentifierType::getAlternateIdentifier_() const {
  if (alternateIdentifier_Accessor) {
    return *alternateIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getAlternateIdentifier(): An attempt was made to get an optional field that was not enabled, call hasAlternateIdentifier() to determine if it is safe to call getAlternateIdentifier()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString20Type& VehicleUniqueIdentifierType::getAlternateIdentifier() const {
  return getAlternateIdentifier_();
}

uci::type::AlphanumericDashSpaceUnderscoreString20Type& VehicleUniqueIdentifierType::getAlternateIdentifier() {
  return getAlternateIdentifier_();
}

uci::type::VehicleUniqueIdentifierType& VehicleUniqueIdentifierType::setAlternateIdentifier(const uci::type::AlphanumericDashSpaceUnderscoreString20Type& value) {
  return setAlternateIdentifier(value.c_str());
}

uci::type::VehicleUniqueIdentifierType& VehicleUniqueIdentifierType::setAlternateIdentifier(const std::string& value) {
  return setAlternateIdentifier(value.c_str());
}

uci::type::VehicleUniqueIdentifierType& VehicleUniqueIdentifierType::setAlternateIdentifier(const char * value) {
  chooseAlternateIdentifier().setStringValue(value);
  return *this;
}

bool VehicleUniqueIdentifierType::isAlternateIdentifier() const noexcept {
  return static_cast<bool>(alternateIdentifier_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString20Type& VehicleUniqueIdentifierType::chooseAlternateIdentifier(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  aIS_Accessor.reset();
  tailNumber_Accessor.reset();
  satellite_Accessor.reset();
  if (!alternateIdentifier_Accessor) {
    alternateIdentifier_Accessor = AlphanumericDashSpaceUnderscoreString20Type::create(type);
  }
  return *alternateIdentifier_Accessor;
}

uci::type::AlphanumericDashSpaceUnderscoreString20Type& VehicleUniqueIdentifierType::chooseAlternateIdentifier(uci::base::accessorType::AccessorType type) {
  return chooseAlternateIdentifier("chooseAlternateIdentifier", type);
}

std::unique_ptr<VehicleUniqueIdentifierType> VehicleUniqueIdentifierType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleUniqueIdentifierType : type};
  return (requestedType == uci::type::accessorType::vehicleUniqueIdentifierType) ? boost::make_unique<VehicleUniqueIdentifierType>() : nullptr;
}

/**  */
namespace VehicleUniqueIdentifierType_Names {

constexpr const char* Extern_Type_Name{"VehicleUniqueIdentifierType"};
constexpr const char* AIS_Name{"AIS"};
constexpr const char* TailNumber_Name{"TailNumber"};
constexpr const char* Satellite_Name{"Satellite"};
constexpr const char* AlternateIdentifier_Name{"AlternateIdentifier"};

} // namespace VehicleUniqueIdentifierType_Names

void VehicleUniqueIdentifierType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VehicleUniqueIdentifierType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VehicleUniqueIdentifierType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VehicleUniqueIdentifierType_Names::AIS_Name) {
      AIS_Type::deserialize(valueType.second, accessor.chooseAIS(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VehicleUniqueIdentifierType_Names::TailNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseTailNumber().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + VehicleUniqueIdentifierType_Names::Satellite_Name) {
      SatelliteIdentifierType::deserialize(valueType.second, accessor.chooseSatellite(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VehicleUniqueIdentifierType_Names::AlternateIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseAlternateIdentifier().setStringValue(*value);
      }
    }
  }
}

std::string VehicleUniqueIdentifierType::serialize(const uci::type::VehicleUniqueIdentifierType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VehicleUniqueIdentifierType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VehicleUniqueIdentifierType_Names::Extern_Type_Name);
  }
  if (accessor.isAIS()) {
    AIS_Type::serialize(accessor.getAIS(), node, VehicleUniqueIdentifierType_Names::AIS_Name);
  } else if (accessor.isTailNumber()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getTailNumber(), node, VehicleUniqueIdentifierType_Names::TailNumber_Name);
  } else if (accessor.isSatellite()) {
    SatelliteIdentifierType::serialize(accessor.getSatellite(), node, VehicleUniqueIdentifierType_Names::Satellite_Name);
  } else if (accessor.isAlternateIdentifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getAlternateIdentifier(), node, VehicleUniqueIdentifierType_Names::AlternateIdentifier_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VehicleUniqueIdentifierType& VehicleUniqueIdentifierType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VehicleUniqueIdentifierType>().release());
}

uci::type::VehicleUniqueIdentifierType& VehicleUniqueIdentifierType::create(const uci::type::VehicleUniqueIdentifierType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VehicleUniqueIdentifierType> newAccessor{boost::make_unique<asb_uci::type::VehicleUniqueIdentifierType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VehicleUniqueIdentifierType::destroy(uci::type::VehicleUniqueIdentifierType& accessor) {
  delete dynamic_cast<asb_uci::type::VehicleUniqueIdentifierType*>(&accessor);
}

} // namespace type

} // namespace uci

