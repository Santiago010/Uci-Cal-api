/** @file FuelCenterOfGravityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/FuelCenterOfGravityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CenterOfGravityAeroType.h"
#include "asb_uci/type/LateralCenterOfGravityTrendEnum.h"
#include "asb_uci/type/LongitudinalCenterOfGravityTrendEnum.h"
#include "asb_uci/type/VerticalCenterOfGravityTrendEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CenterOfGravityAeroType.h"
#include "uci/type/FuelCenterOfGravityType.h"
#include "uci/type/LateralCenterOfGravityTrendEnum.h"
#include "uci/type/LongitudinalCenterOfGravityTrendEnum.h"
#include "uci/type/VerticalCenterOfGravityTrendEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FuelCenterOfGravityType::FuelCenterOfGravityType()
  : actualCoG_Accessor{boost::make_unique<CenterOfGravityAeroType>()} {
}

FuelCenterOfGravityType::~FuelCenterOfGravityType() = default;

void FuelCenterOfGravityType::copy(const uci::type::FuelCenterOfGravityType& accessor) {
  copyImpl(accessor, false);
}

void FuelCenterOfGravityType::copyImpl(const uci::type::FuelCenterOfGravityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const FuelCenterOfGravityType&>(accessor);
    setActualCoG(*(accessorImpl.actualCoG_Accessor));
    if (accessorImpl.desiredCoG_Accessor) {
      setDesiredCoG(*(accessorImpl.desiredCoG_Accessor));
    } else {
      desiredCoG_Accessor.reset();
    }
    if (accessorImpl.lateralCenterOfGravityTrendEnum_Accessor) {
      setLateralCenterOfGravityTrendEnum(*(accessorImpl.lateralCenterOfGravityTrendEnum_Accessor));
    } else {
      lateralCenterOfGravityTrendEnum_Accessor.reset();
    }
    if (accessorImpl.longitudinalCenterOfGravityTrendEnum_Accessor) {
      setLongitudinalCenterOfGravityTrendEnum(*(accessorImpl.longitudinalCenterOfGravityTrendEnum_Accessor));
    } else {
      longitudinalCenterOfGravityTrendEnum_Accessor.reset();
    }
    if (accessorImpl.verticalCenterOfGravityTrendEnum_Accessor) {
      setVerticalCenterOfGravityTrendEnum(*(accessorImpl.verticalCenterOfGravityTrendEnum_Accessor));
    } else {
      verticalCenterOfGravityTrendEnum_Accessor.reset();
    }
  }
}

void FuelCenterOfGravityType::reset() noexcept {
  actualCoG_Accessor->reset();
  desiredCoG_Accessor.reset();
  lateralCenterOfGravityTrendEnum_Accessor.reset();
  longitudinalCenterOfGravityTrendEnum_Accessor.reset();
  verticalCenterOfGravityTrendEnum_Accessor.reset();
}

const uci::type::CenterOfGravityAeroType& FuelCenterOfGravityType::getActualCoG() const {
  return *actualCoG_Accessor;
}

uci::type::CenterOfGravityAeroType& FuelCenterOfGravityType::getActualCoG() {
  return *actualCoG_Accessor;
}

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::setActualCoG(const uci::type::CenterOfGravityAeroType& accessor) {
  if (&accessor != actualCoG_Accessor.get()) {
    actualCoG_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CenterOfGravityAeroType& FuelCenterOfGravityType::getDesiredCoG_() const {
  if (desiredCoG_Accessor) {
    return *desiredCoG_Accessor;
  }
  throw uci::base::UCIException("Error in getDesiredCoG(): An attempt was made to get an optional field that was not enabled, call hasDesiredCoG() to determine if it is safe to call getDesiredCoG()");
}

const uci::type::CenterOfGravityAeroType& FuelCenterOfGravityType::getDesiredCoG() const {
  return getDesiredCoG_();
}

uci::type::CenterOfGravityAeroType& FuelCenterOfGravityType::getDesiredCoG() {
  return getDesiredCoG_();
}

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::setDesiredCoG(const uci::type::CenterOfGravityAeroType& accessor) {
  enableDesiredCoG();
  if (&accessor != desiredCoG_Accessor.get()) {
    desiredCoG_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FuelCenterOfGravityType::hasDesiredCoG() const noexcept {
  return static_cast<bool>(desiredCoG_Accessor);
}

uci::type::CenterOfGravityAeroType& FuelCenterOfGravityType::enableDesiredCoG(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::centerOfGravityAeroType : type};
  if ((!desiredCoG_Accessor) || (desiredCoG_Accessor->getAccessorType() != requestedType)) {
    desiredCoG_Accessor = CenterOfGravityAeroType::create(requestedType);
    if (!desiredCoG_Accessor) {
      throw uci::base::UCIException("Error in enableDesiredCoG(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *desiredCoG_Accessor;
}

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::clearDesiredCoG() noexcept {
  desiredCoG_Accessor.reset();
  return *this;
}

uci::type::LateralCenterOfGravityTrendEnum& FuelCenterOfGravityType::getLateralCenterOfGravityTrendEnum_() const {
  if (lateralCenterOfGravityTrendEnum_Accessor) {
    return *lateralCenterOfGravityTrendEnum_Accessor;
  }
  throw uci::base::UCIException("Error in getLateralCenterOfGravityTrendEnum(): An attempt was made to get an optional field that was not enabled, call hasLateralCenterOfGravityTrendEnum() to determine if it is safe to call getLateralCenterOfGravityTrendEnum()");
}

const uci::type::LateralCenterOfGravityTrendEnum& FuelCenterOfGravityType::getLateralCenterOfGravityTrendEnum() const {
  return getLateralCenterOfGravityTrendEnum_();
}

uci::type::LateralCenterOfGravityTrendEnum& FuelCenterOfGravityType::getLateralCenterOfGravityTrendEnum() {
  return getLateralCenterOfGravityTrendEnum_();
}

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::setLateralCenterOfGravityTrendEnum(const uci::type::LateralCenterOfGravityTrendEnum& accessor) {
  enableLateralCenterOfGravityTrendEnum();
  if (&accessor != lateralCenterOfGravityTrendEnum_Accessor.get()) {
    lateralCenterOfGravityTrendEnum_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::setLateralCenterOfGravityTrendEnum(const uci::type::LateralCenterOfGravityTrendEnum::EnumerationItem value) {
  enableLateralCenterOfGravityTrendEnum().setValue(value);
  return *this;
}

bool FuelCenterOfGravityType::hasLateralCenterOfGravityTrendEnum() const noexcept {
  return static_cast<bool>(lateralCenterOfGravityTrendEnum_Accessor);
}

uci::type::LateralCenterOfGravityTrendEnum& FuelCenterOfGravityType::enableLateralCenterOfGravityTrendEnum(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lateralCenterOfGravityTrendEnum : type};
  if ((!lateralCenterOfGravityTrendEnum_Accessor) || (lateralCenterOfGravityTrendEnum_Accessor->getAccessorType() != requestedType)) {
    lateralCenterOfGravityTrendEnum_Accessor = LateralCenterOfGravityTrendEnum::create(requestedType);
    if (!lateralCenterOfGravityTrendEnum_Accessor) {
      throw uci::base::UCIException("Error in enableLateralCenterOfGravityTrendEnum(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lateralCenterOfGravityTrendEnum_Accessor;
}

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::clearLateralCenterOfGravityTrendEnum() noexcept {
  lateralCenterOfGravityTrendEnum_Accessor.reset();
  return *this;
}

uci::type::LongitudinalCenterOfGravityTrendEnum& FuelCenterOfGravityType::getLongitudinalCenterOfGravityTrendEnum_() const {
  if (longitudinalCenterOfGravityTrendEnum_Accessor) {
    return *longitudinalCenterOfGravityTrendEnum_Accessor;
  }
  throw uci::base::UCIException("Error in getLongitudinalCenterOfGravityTrendEnum(): An attempt was made to get an optional field that was not enabled, call hasLongitudinalCenterOfGravityTrendEnum() to determine if it is safe to call getLongitudinalCenterOfGravityTrendEnum()");
}

const uci::type::LongitudinalCenterOfGravityTrendEnum& FuelCenterOfGravityType::getLongitudinalCenterOfGravityTrendEnum() const {
  return getLongitudinalCenterOfGravityTrendEnum_();
}

uci::type::LongitudinalCenterOfGravityTrendEnum& FuelCenterOfGravityType::getLongitudinalCenterOfGravityTrendEnum() {
  return getLongitudinalCenterOfGravityTrendEnum_();
}

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::setLongitudinalCenterOfGravityTrendEnum(const uci::type::LongitudinalCenterOfGravityTrendEnum& accessor) {
  enableLongitudinalCenterOfGravityTrendEnum();
  if (&accessor != longitudinalCenterOfGravityTrendEnum_Accessor.get()) {
    longitudinalCenterOfGravityTrendEnum_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::setLongitudinalCenterOfGravityTrendEnum(const uci::type::LongitudinalCenterOfGravityTrendEnum::EnumerationItem value) {
  enableLongitudinalCenterOfGravityTrendEnum().setValue(value);
  return *this;
}

bool FuelCenterOfGravityType::hasLongitudinalCenterOfGravityTrendEnum() const noexcept {
  return static_cast<bool>(longitudinalCenterOfGravityTrendEnum_Accessor);
}

uci::type::LongitudinalCenterOfGravityTrendEnum& FuelCenterOfGravityType::enableLongitudinalCenterOfGravityTrendEnum(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::longitudinalCenterOfGravityTrendEnum : type};
  if ((!longitudinalCenterOfGravityTrendEnum_Accessor) || (longitudinalCenterOfGravityTrendEnum_Accessor->getAccessorType() != requestedType)) {
    longitudinalCenterOfGravityTrendEnum_Accessor = LongitudinalCenterOfGravityTrendEnum::create(requestedType);
    if (!longitudinalCenterOfGravityTrendEnum_Accessor) {
      throw uci::base::UCIException("Error in enableLongitudinalCenterOfGravityTrendEnum(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *longitudinalCenterOfGravityTrendEnum_Accessor;
}

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::clearLongitudinalCenterOfGravityTrendEnum() noexcept {
  longitudinalCenterOfGravityTrendEnum_Accessor.reset();
  return *this;
}

uci::type::VerticalCenterOfGravityTrendEnum& FuelCenterOfGravityType::getVerticalCenterOfGravityTrendEnum_() const {
  if (verticalCenterOfGravityTrendEnum_Accessor) {
    return *verticalCenterOfGravityTrendEnum_Accessor;
  }
  throw uci::base::UCIException("Error in getVerticalCenterOfGravityTrendEnum(): An attempt was made to get an optional field that was not enabled, call hasVerticalCenterOfGravityTrendEnum() to determine if it is safe to call getVerticalCenterOfGravityTrendEnum()");
}

const uci::type::VerticalCenterOfGravityTrendEnum& FuelCenterOfGravityType::getVerticalCenterOfGravityTrendEnum() const {
  return getVerticalCenterOfGravityTrendEnum_();
}

uci::type::VerticalCenterOfGravityTrendEnum& FuelCenterOfGravityType::getVerticalCenterOfGravityTrendEnum() {
  return getVerticalCenterOfGravityTrendEnum_();
}

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::setVerticalCenterOfGravityTrendEnum(const uci::type::VerticalCenterOfGravityTrendEnum& accessor) {
  enableVerticalCenterOfGravityTrendEnum();
  if (&accessor != verticalCenterOfGravityTrendEnum_Accessor.get()) {
    verticalCenterOfGravityTrendEnum_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::setVerticalCenterOfGravityTrendEnum(const uci::type::VerticalCenterOfGravityTrendEnum::EnumerationItem value) {
  enableVerticalCenterOfGravityTrendEnum().setValue(value);
  return *this;
}

bool FuelCenterOfGravityType::hasVerticalCenterOfGravityTrendEnum() const noexcept {
  return static_cast<bool>(verticalCenterOfGravityTrendEnum_Accessor);
}

uci::type::VerticalCenterOfGravityTrendEnum& FuelCenterOfGravityType::enableVerticalCenterOfGravityTrendEnum(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::verticalCenterOfGravityTrendEnum : type};
  if ((!verticalCenterOfGravityTrendEnum_Accessor) || (verticalCenterOfGravityTrendEnum_Accessor->getAccessorType() != requestedType)) {
    verticalCenterOfGravityTrendEnum_Accessor = VerticalCenterOfGravityTrendEnum::create(requestedType);
    if (!verticalCenterOfGravityTrendEnum_Accessor) {
      throw uci::base::UCIException("Error in enableVerticalCenterOfGravityTrendEnum(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *verticalCenterOfGravityTrendEnum_Accessor;
}

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::clearVerticalCenterOfGravityTrendEnum() noexcept {
  verticalCenterOfGravityTrendEnum_Accessor.reset();
  return *this;
}

std::unique_ptr<FuelCenterOfGravityType> FuelCenterOfGravityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fuelCenterOfGravityType : type};
  return (requestedType == uci::type::accessorType::fuelCenterOfGravityType) ? boost::make_unique<FuelCenterOfGravityType>() : nullptr;
}

/**  */
namespace FuelCenterOfGravityType_Names {

constexpr const char* Extern_Type_Name{"FuelCenterOfGravityType"};
constexpr const char* ActualCoG_Name{"ActualCoG"};
constexpr const char* DesiredCoG_Name{"DesiredCoG"};
constexpr const char* LateralCenterOfGravityTrendEnum_Name{"LateralCenterOfGravityTrendEnum"};
constexpr const char* LongitudinalCenterOfGravityTrendEnum_Name{"LongitudinalCenterOfGravityTrendEnum"};
constexpr const char* VerticalCenterOfGravityTrendEnum_Name{"VerticalCenterOfGravityTrendEnum"};

} // namespace FuelCenterOfGravityType_Names

void FuelCenterOfGravityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FuelCenterOfGravityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FuelCenterOfGravityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FuelCenterOfGravityType_Names::ActualCoG_Name) {
      CenterOfGravityAeroType::deserialize(valueType.second, accessor.getActualCoG(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FuelCenterOfGravityType_Names::DesiredCoG_Name) {
      CenterOfGravityAeroType::deserialize(valueType.second, accessor.enableDesiredCoG(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FuelCenterOfGravityType_Names::LateralCenterOfGravityTrendEnum_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableLateralCenterOfGravityTrendEnum().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FuelCenterOfGravityType_Names::LongitudinalCenterOfGravityTrendEnum_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableLongitudinalCenterOfGravityTrendEnum().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FuelCenterOfGravityType_Names::VerticalCenterOfGravityTrendEnum_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableVerticalCenterOfGravityTrendEnum().setValueFromName(*value);
      }
    }
  }
}

std::string FuelCenterOfGravityType::serialize(const uci::type::FuelCenterOfGravityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FuelCenterOfGravityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FuelCenterOfGravityType_Names::Extern_Type_Name);
  }
  CenterOfGravityAeroType::serialize(accessor.getActualCoG(), node, FuelCenterOfGravityType_Names::ActualCoG_Name);
  if (accessor.hasDesiredCoG()) {
    CenterOfGravityAeroType::serialize(accessor.getDesiredCoG(), node, FuelCenterOfGravityType_Names::DesiredCoG_Name);
  }
  if (accessor.hasLateralCenterOfGravityTrendEnum()) {
    LateralCenterOfGravityTrendEnum::serialize(accessor.getLateralCenterOfGravityTrendEnum(), node, FuelCenterOfGravityType_Names::LateralCenterOfGravityTrendEnum_Name, false);
  }
  if (accessor.hasLongitudinalCenterOfGravityTrendEnum()) {
    LongitudinalCenterOfGravityTrendEnum::serialize(accessor.getLongitudinalCenterOfGravityTrendEnum(), node, FuelCenterOfGravityType_Names::LongitudinalCenterOfGravityTrendEnum_Name, false);
  }
  if (accessor.hasVerticalCenterOfGravityTrendEnum()) {
    VerticalCenterOfGravityTrendEnum::serialize(accessor.getVerticalCenterOfGravityTrendEnum(), node, FuelCenterOfGravityType_Names::VerticalCenterOfGravityTrendEnum_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FuelCenterOfGravityType>().release());
}

uci::type::FuelCenterOfGravityType& FuelCenterOfGravityType::create(const uci::type::FuelCenterOfGravityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FuelCenterOfGravityType> newAccessor{boost::make_unique<asb_uci::type::FuelCenterOfGravityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FuelCenterOfGravityType::destroy(uci::type::FuelCenterOfGravityType& accessor) {
  delete dynamic_cast<asb_uci::type::FuelCenterOfGravityType*>(&accessor);
}

} // namespace type

} // namespace uci

