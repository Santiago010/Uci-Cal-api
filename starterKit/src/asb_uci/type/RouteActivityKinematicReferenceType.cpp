/** @file RouteActivityKinematicReferenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RouteActivityKinematicReferenceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PathID_Type.h"
#include "../../../include/asb_uci/type/SegmentID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PathID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RouteActivityKinematicReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SegmentID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RouteActivityKinematicReferenceType::RouteActivityKinematicReferenceType() = default;

RouteActivityKinematicReferenceType::~RouteActivityKinematicReferenceType() = default;

void RouteActivityKinematicReferenceType::copy(const uci::type::RouteActivityKinematicReferenceType& accessor) {
  copyImpl(accessor, false);
}

void RouteActivityKinematicReferenceType::copyImpl(const uci::type::RouteActivityKinematicReferenceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RouteActivityKinematicReferenceType&>(accessor);
    if (accessorImpl.pathID_Accessor) {
      setPathID(*(accessorImpl.pathID_Accessor));
    } else {
      pathID_Accessor.reset();
    }
    if (accessorImpl.pathSegmentID_Accessor) {
      setPathSegmentID(*(accessorImpl.pathSegmentID_Accessor));
    } else {
      pathSegmentID_Accessor.reset();
    }
  }
}

void RouteActivityKinematicReferenceType::reset() noexcept {
  pathID_Accessor.reset();
  pathSegmentID_Accessor.reset();
}

uci::type::PathID_Type& RouteActivityKinematicReferenceType::getPathID_() const {
  if (pathID_Accessor) {
    return *pathID_Accessor;
  }
  throw uci::base::UCIException("Error in getPathID(): An attempt was made to get an optional field that was not enabled, call hasPathID() to determine if it is safe to call getPathID()");
}

const uci::type::PathID_Type& RouteActivityKinematicReferenceType::getPathID() const {
  return getPathID_();
}

uci::type::PathID_Type& RouteActivityKinematicReferenceType::getPathID() {
  return getPathID_();
}

uci::type::RouteActivityKinematicReferenceType& RouteActivityKinematicReferenceType::setPathID(const uci::type::PathID_Type& accessor) {
  enablePathID();
  if (&accessor != pathID_Accessor.get()) {
    pathID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RouteActivityKinematicReferenceType::hasPathID() const noexcept {
  return static_cast<bool>(pathID_Accessor);
}

uci::type::PathID_Type& RouteActivityKinematicReferenceType::enablePathID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pathID_Type : type};
  if ((!pathID_Accessor) || (pathID_Accessor->getAccessorType() != requestedType)) {
    pathID_Accessor = PathID_Type::create(requestedType);
    if (!pathID_Accessor) {
      throw uci::base::UCIException("Error in enablePathID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pathID_Accessor;
}

uci::type::RouteActivityKinematicReferenceType& RouteActivityKinematicReferenceType::clearPathID() noexcept {
  pathID_Accessor.reset();
  return *this;
}

uci::type::SegmentID_Type& RouteActivityKinematicReferenceType::getPathSegmentID_() const {
  if (pathSegmentID_Accessor) {
    return *pathSegmentID_Accessor;
  }
  throw uci::base::UCIException("Error in getPathSegmentID(): An attempt was made to get an optional field that was not enabled, call hasPathSegmentID() to determine if it is safe to call getPathSegmentID()");
}

const uci::type::SegmentID_Type& RouteActivityKinematicReferenceType::getPathSegmentID() const {
  return getPathSegmentID_();
}

uci::type::SegmentID_Type& RouteActivityKinematicReferenceType::getPathSegmentID() {
  return getPathSegmentID_();
}

uci::type::RouteActivityKinematicReferenceType& RouteActivityKinematicReferenceType::setPathSegmentID(const uci::type::SegmentID_Type& accessor) {
  enablePathSegmentID();
  if (&accessor != pathSegmentID_Accessor.get()) {
    pathSegmentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RouteActivityKinematicReferenceType::hasPathSegmentID() const noexcept {
  return static_cast<bool>(pathSegmentID_Accessor);
}

uci::type::SegmentID_Type& RouteActivityKinematicReferenceType::enablePathSegmentID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::segmentID_Type : type};
  if ((!pathSegmentID_Accessor) || (pathSegmentID_Accessor->getAccessorType() != requestedType)) {
    pathSegmentID_Accessor = SegmentID_Type::create(requestedType);
    if (!pathSegmentID_Accessor) {
      throw uci::base::UCIException("Error in enablePathSegmentID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pathSegmentID_Accessor;
}

uci::type::RouteActivityKinematicReferenceType& RouteActivityKinematicReferenceType::clearPathSegmentID() noexcept {
  pathSegmentID_Accessor.reset();
  return *this;
}

std::unique_ptr<RouteActivityKinematicReferenceType> RouteActivityKinematicReferenceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeActivityKinematicReferenceType : type};
  return (requestedType == uci::type::accessorType::routeActivityKinematicReferenceType) ? boost::make_unique<RouteActivityKinematicReferenceType>() : nullptr;
}

/**  */
namespace RouteActivityKinematicReferenceType_Names {

constexpr const char* Extern_Type_Name{"RouteActivityKinematicReferenceType"};
constexpr const char* PathID_Name{"PathID"};
constexpr const char* PathSegmentID_Name{"PathSegmentID"};

} // namespace RouteActivityKinematicReferenceType_Names

void RouteActivityKinematicReferenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RouteActivityKinematicReferenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RouteActivityKinematicReferenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RouteActivityKinematicReferenceType_Names::PathID_Name) {
      PathID_Type::deserialize(valueType.second, accessor.enablePathID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteActivityKinematicReferenceType_Names::PathSegmentID_Name) {
      SegmentID_Type::deserialize(valueType.second, accessor.enablePathSegmentID(), nodeName, nsPrefix);
    }
  }
}

std::string RouteActivityKinematicReferenceType::serialize(const uci::type::RouteActivityKinematicReferenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RouteActivityKinematicReferenceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RouteActivityKinematicReferenceType_Names::Extern_Type_Name);
  }
  if (accessor.hasPathID()) {
    PathID_Type::serialize(accessor.getPathID(), node, RouteActivityKinematicReferenceType_Names::PathID_Name);
  }
  if (accessor.hasPathSegmentID()) {
    SegmentID_Type::serialize(accessor.getPathSegmentID(), node, RouteActivityKinematicReferenceType_Names::PathSegmentID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RouteActivityKinematicReferenceType& RouteActivityKinematicReferenceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RouteActivityKinematicReferenceType>().release());
}

uci::type::RouteActivityKinematicReferenceType& RouteActivityKinematicReferenceType::create(const uci::type::RouteActivityKinematicReferenceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RouteActivityKinematicReferenceType> newAccessor{boost::make_unique<asb_uci::type::RouteActivityKinematicReferenceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RouteActivityKinematicReferenceType::destroy(uci::type::RouteActivityKinematicReferenceType& accessor) {
  delete dynamic_cast<asb_uci::type::RouteActivityKinematicReferenceType*>(&accessor);
}

} // namespace type

} // namespace uci

