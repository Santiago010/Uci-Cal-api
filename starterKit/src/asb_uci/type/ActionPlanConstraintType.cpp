/** @file ActionPlanConstraintType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ActionPlanConstraintType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActionPlanID_Type.h"
#include "asb_uci/type/ActionTypeEnum.h"
#include "asb_uci/type/PlanChangeableConstraintsEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActionPlanConstraintType.h"
#include "uci/type/ActionPlanID_Type.h"
#include "uci/type/ActionTypeEnum.h"
#include "uci/type/PlanChangeableConstraintsEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ActionPlanConstraintType::ActionPlanConstraintType()
  : changeableAllocations_Accessor{boost::make_unique<PlanChangeableConstraintsEnum>()},
    actionType_Accessor{boost::make_unique<ActionType>(0, 84)} {
}

ActionPlanConstraintType::~ActionPlanConstraintType() = default;

void ActionPlanConstraintType::copy(const uci::type::ActionPlanConstraintType& accessor) {
  copyImpl(accessor, false);
}

void ActionPlanConstraintType::copyImpl(const uci::type::ActionPlanConstraintType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ActionPlanConstraintType&>(accessor);
    if (accessorImpl.actionPlanID_Accessor) {
      setActionPlanID(*(accessorImpl.actionPlanID_Accessor));
    } else {
      actionPlanID_Accessor.reset();
    }
    setChangeableAllocations(*(accessorImpl.changeableAllocations_Accessor));
    setActionType(*(accessorImpl.actionType_Accessor));
  }
}

void ActionPlanConstraintType::reset() noexcept {
  actionPlanID_Accessor.reset();
  changeableAllocations_Accessor->reset();
  actionType_Accessor->reset();
}

uci::type::ActionPlanID_Type& ActionPlanConstraintType::getActionPlanID_() const {
  if (actionPlanID_Accessor) {
    return *actionPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getActionPlanID(): An attempt was made to get an optional field that was not enabled, call hasActionPlanID() to determine if it is safe to call getActionPlanID()");
}

const uci::type::ActionPlanID_Type& ActionPlanConstraintType::getActionPlanID() const {
  return getActionPlanID_();
}

uci::type::ActionPlanID_Type& ActionPlanConstraintType::getActionPlanID() {
  return getActionPlanID_();
}

uci::type::ActionPlanConstraintType& ActionPlanConstraintType::setActionPlanID(const uci::type::ActionPlanID_Type& accessor) {
  enableActionPlanID();
  if (&accessor != actionPlanID_Accessor.get()) {
    actionPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActionPlanConstraintType::hasActionPlanID() const noexcept {
  return static_cast<bool>(actionPlanID_Accessor);
}

uci::type::ActionPlanID_Type& ActionPlanConstraintType::enableActionPlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionPlanID_Type : type};
  if ((!actionPlanID_Accessor) || (actionPlanID_Accessor->getAccessorType() != requestedType)) {
    actionPlanID_Accessor = ActionPlanID_Type::create(requestedType);
    if (!actionPlanID_Accessor) {
      throw uci::base::UCIException("Error in enableActionPlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *actionPlanID_Accessor;
}

uci::type::ActionPlanConstraintType& ActionPlanConstraintType::clearActionPlanID() noexcept {
  actionPlanID_Accessor.reset();
  return *this;
}

const uci::type::PlanChangeableConstraintsEnum& ActionPlanConstraintType::getChangeableAllocations() const {
  return *changeableAllocations_Accessor;
}

uci::type::PlanChangeableConstraintsEnum& ActionPlanConstraintType::getChangeableAllocations() {
  return *changeableAllocations_Accessor;
}

uci::type::ActionPlanConstraintType& ActionPlanConstraintType::setChangeableAllocations(const uci::type::PlanChangeableConstraintsEnum& accessor) {
  if (&accessor != changeableAllocations_Accessor.get()) {
    changeableAllocations_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ActionPlanConstraintType& ActionPlanConstraintType::setChangeableAllocations(uci::type::PlanChangeableConstraintsEnum::EnumerationItem value) {
  changeableAllocations_Accessor->setValue(value);
  return *this;
}


const uci::type::ActionPlanConstraintType::ActionType& ActionPlanConstraintType::getActionType() const {
  return *actionType_Accessor;
}

uci::type::ActionPlanConstraintType::ActionType& ActionPlanConstraintType::getActionType() {
  return *actionType_Accessor;
}

uci::type::ActionPlanConstraintType& ActionPlanConstraintType::setActionType(const uci::type::ActionPlanConstraintType::ActionType& accessor) {
  if (&accessor != actionType_Accessor.get()) {
    actionType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ActionPlanConstraintType> ActionPlanConstraintType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionPlanConstraintType : type};
  return (requestedType == uci::type::accessorType::actionPlanConstraintType) ? boost::make_unique<ActionPlanConstraintType>() : nullptr;
}

/**  */
namespace ActionPlanConstraintType_Names {

constexpr const char* Extern_Type_Name{"ActionPlanConstraintType"};
constexpr const char* ActionPlanID_Name{"ActionPlanID"};
constexpr const char* ChangeableAllocations_Name{"ChangeableAllocations"};
constexpr const char* ActionType_Name{"ActionType"};

} // namespace ActionPlanConstraintType_Names

void ActionPlanConstraintType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActionPlanConstraintType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActionPlanConstraintType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ActionPlanConstraintType_Names::ActionPlanID_Name) {
      ActionPlanID_Type::deserialize(valueType.second, accessor.enableActionPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActionPlanConstraintType_Names::ChangeableAllocations_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getChangeableAllocations().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ActionPlanConstraintType_Names::ActionType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ActionPlanConstraintType::ActionType& boundedList = accessor.getActionType();
        const uci::type::ActionPlanConstraintType::ActionType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    }
  }
}

std::string ActionPlanConstraintType::serialize(const uci::type::ActionPlanConstraintType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ActionPlanConstraintType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ActionPlanConstraintType_Names::Extern_Type_Name);
  }
  if (accessor.hasActionPlanID()) {
    ActionPlanID_Type::serialize(accessor.getActionPlanID(), node, ActionPlanConstraintType_Names::ActionPlanID_Name);
  }
  PlanChangeableConstraintsEnum::serialize(accessor.getChangeableAllocations(), node, ActionPlanConstraintType_Names::ChangeableAllocations_Name, false);
  {
    const uci::type::ActionPlanConstraintType::ActionType& boundedList = accessor.getActionType();
    for (uci::type::ActionPlanConstraintType::ActionType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ActionTypeEnum::serialize(boundedList.at(i), node, ActionPlanConstraintType_Names::ActionType_Name, false);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ActionPlanConstraintType& ActionPlanConstraintType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ActionPlanConstraintType>().release());
}

uci::type::ActionPlanConstraintType& ActionPlanConstraintType::create(const uci::type::ActionPlanConstraintType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ActionPlanConstraintType> newAccessor{boost::make_unique<asb_uci::type::ActionPlanConstraintType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ActionPlanConstraintType::destroy(uci::type::ActionPlanConstraintType& accessor) {
  delete dynamic_cast<asb_uci::type::ActionPlanConstraintType*>(&accessor);
}

} // namespace type

} // namespace uci

