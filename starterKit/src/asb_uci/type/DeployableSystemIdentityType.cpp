/** @file DeployableSystemIdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DeployableSystemIdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PlatformIdentityType.h"
#include "asb_uci/type/SpecificIdentityType.h"
#include "asb_uci/type/StoreType.h"
#include "asb_uci/type/VehicleIdentificationType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DeployableSystemIdentityType.h"
#include "uci/type/PlatformIdentityType.h"
#include "uci/type/SpecificIdentityType.h"
#include "uci/type/StoreType.h"
#include "uci/type/VehicleIdentificationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DeployableSystemIdentityType::DeployableSystemIdentityType() = default;

DeployableSystemIdentityType::~DeployableSystemIdentityType() = default;

void DeployableSystemIdentityType::copy(const uci::type::DeployableSystemIdentityType& accessor) {
  copyImpl(accessor, false);
}

void DeployableSystemIdentityType::copyImpl(const uci::type::DeployableSystemIdentityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DeployableSystemIdentityType&>(accessor);
    if (accessorImpl.platform_Accessor) {
      setPlatform(*(accessorImpl.platform_Accessor));
    } else {
      platform_Accessor.reset();
    }
    if (accessorImpl.specific_Accessor) {
      setSpecific(*(accessorImpl.specific_Accessor));
    } else {
      specific_Accessor.reset();
    }
    if (accessorImpl.specificVehicle_Accessor) {
      setSpecificVehicle(*(accessorImpl.specificVehicle_Accessor));
    } else {
      specificVehicle_Accessor.reset();
    }
    if (accessorImpl.weapon_Accessor) {
      setWeapon(*(accessorImpl.weapon_Accessor));
    } else {
      weapon_Accessor.reset();
    }
  }
}

void DeployableSystemIdentityType::reset() noexcept {
  platform_Accessor.reset();
  specific_Accessor.reset();
  specificVehicle_Accessor.reset();
  weapon_Accessor.reset();
}

uci::type::PlatformIdentityType& DeployableSystemIdentityType::getPlatform_() const {
  if (platform_Accessor) {
    return *platform_Accessor;
  }
  throw uci::base::UCIException("Error in getPlatform(): An attempt was made to get an optional field that was not enabled, call hasPlatform() to determine if it is safe to call getPlatform()");
}

const uci::type::PlatformIdentityType& DeployableSystemIdentityType::getPlatform() const {
  return getPlatform_();
}

uci::type::PlatformIdentityType& DeployableSystemIdentityType::getPlatform() {
  return getPlatform_();
}

uci::type::DeployableSystemIdentityType& DeployableSystemIdentityType::setPlatform(const uci::type::PlatformIdentityType& accessor) {
  enablePlatform(accessor.getAccessorType());
  if (&accessor != platform_Accessor.get()) {
    platform_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DeployableSystemIdentityType::hasPlatform() const noexcept {
  return static_cast<bool>(platform_Accessor);
}

uci::type::PlatformIdentityType& DeployableSystemIdentityType::enablePlatform(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::platformIdentityType : type};
  if ((!platform_Accessor) || (platform_Accessor->getAccessorType() != requestedType)) {
    platform_Accessor = PlatformIdentityType::create(requestedType);
    if (!platform_Accessor) {
      throw uci::base::UCIException("Error in enablePlatform(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *platform_Accessor;
}

uci::type::DeployableSystemIdentityType& DeployableSystemIdentityType::clearPlatform() noexcept {
  platform_Accessor.reset();
  return *this;
}

uci::type::SpecificIdentityType& DeployableSystemIdentityType::getSpecific_() const {
  if (specific_Accessor) {
    return *specific_Accessor;
  }
  throw uci::base::UCIException("Error in getSpecific(): An attempt was made to get an optional field that was not enabled, call hasSpecific() to determine if it is safe to call getSpecific()");
}

const uci::type::SpecificIdentityType& DeployableSystemIdentityType::getSpecific() const {
  return getSpecific_();
}

uci::type::SpecificIdentityType& DeployableSystemIdentityType::getSpecific() {
  return getSpecific_();
}

uci::type::DeployableSystemIdentityType& DeployableSystemIdentityType::setSpecific(const uci::type::SpecificIdentityType& accessor) {
  enableSpecific(accessor.getAccessorType());
  if (&accessor != specific_Accessor.get()) {
    specific_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DeployableSystemIdentityType::hasSpecific() const noexcept {
  return static_cast<bool>(specific_Accessor);
}

uci::type::SpecificIdentityType& DeployableSystemIdentityType::enableSpecific(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::specificIdentityType : type};
  if ((!specific_Accessor) || (specific_Accessor->getAccessorType() != requestedType)) {
    specific_Accessor = SpecificIdentityType::create(requestedType);
    if (!specific_Accessor) {
      throw uci::base::UCIException("Error in enableSpecific(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *specific_Accessor;
}

uci::type::DeployableSystemIdentityType& DeployableSystemIdentityType::clearSpecific() noexcept {
  specific_Accessor.reset();
  return *this;
}

uci::type::VehicleIdentificationType& DeployableSystemIdentityType::getSpecificVehicle_() const {
  if (specificVehicle_Accessor) {
    return *specificVehicle_Accessor;
  }
  throw uci::base::UCIException("Error in getSpecificVehicle(): An attempt was made to get an optional field that was not enabled, call hasSpecificVehicle() to determine if it is safe to call getSpecificVehicle()");
}

const uci::type::VehicleIdentificationType& DeployableSystemIdentityType::getSpecificVehicle() const {
  return getSpecificVehicle_();
}

uci::type::VehicleIdentificationType& DeployableSystemIdentityType::getSpecificVehicle() {
  return getSpecificVehicle_();
}

uci::type::DeployableSystemIdentityType& DeployableSystemIdentityType::setSpecificVehicle(const uci::type::VehicleIdentificationType& accessor) {
  enableSpecificVehicle(accessor.getAccessorType());
  if (&accessor != specificVehicle_Accessor.get()) {
    specificVehicle_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DeployableSystemIdentityType::hasSpecificVehicle() const noexcept {
  return static_cast<bool>(specificVehicle_Accessor);
}

uci::type::VehicleIdentificationType& DeployableSystemIdentityType::enableSpecificVehicle(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleIdentificationType : type};
  if ((!specificVehicle_Accessor) || (specificVehicle_Accessor->getAccessorType() != requestedType)) {
    specificVehicle_Accessor = VehicleIdentificationType::create(requestedType);
    if (!specificVehicle_Accessor) {
      throw uci::base::UCIException("Error in enableSpecificVehicle(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *specificVehicle_Accessor;
}

uci::type::DeployableSystemIdentityType& DeployableSystemIdentityType::clearSpecificVehicle() noexcept {
  specificVehicle_Accessor.reset();
  return *this;
}

uci::type::StoreType& DeployableSystemIdentityType::getWeapon_() const {
  if (weapon_Accessor) {
    return *weapon_Accessor;
  }
  throw uci::base::UCIException("Error in getWeapon(): An attempt was made to get an optional field that was not enabled, call hasWeapon() to determine if it is safe to call getWeapon()");
}

const uci::type::StoreType& DeployableSystemIdentityType::getWeapon() const {
  return getWeapon_();
}

uci::type::StoreType& DeployableSystemIdentityType::getWeapon() {
  return getWeapon_();
}

uci::type::DeployableSystemIdentityType& DeployableSystemIdentityType::setWeapon(const uci::type::StoreType& accessor) {
  enableWeapon(accessor.getAccessorType());
  if (&accessor != weapon_Accessor.get()) {
    weapon_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DeployableSystemIdentityType::hasWeapon() const noexcept {
  return static_cast<bool>(weapon_Accessor);
}

uci::type::StoreType& DeployableSystemIdentityType::enableWeapon(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeType : type};
  if ((!weapon_Accessor) || (weapon_Accessor->getAccessorType() != requestedType)) {
    weapon_Accessor = StoreType::create(requestedType);
    if (!weapon_Accessor) {
      throw uci::base::UCIException("Error in enableWeapon(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weapon_Accessor;
}

uci::type::DeployableSystemIdentityType& DeployableSystemIdentityType::clearWeapon() noexcept {
  weapon_Accessor.reset();
  return *this;
}

std::unique_ptr<DeployableSystemIdentityType> DeployableSystemIdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::deployableSystemIdentityType : type};
  return (requestedType == uci::type::accessorType::deployableSystemIdentityType) ? boost::make_unique<DeployableSystemIdentityType>() : nullptr;
}

/**  */
namespace DeployableSystemIdentityType_Names {

constexpr const char* Extern_Type_Name{"DeployableSystemIdentityType"};
constexpr const char* Platform_Name{"Platform"};
constexpr const char* Specific_Name{"Specific"};
constexpr const char* SpecificVehicle_Name{"SpecificVehicle"};
constexpr const char* Weapon_Name{"Weapon"};

} // namespace DeployableSystemIdentityType_Names

void DeployableSystemIdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DeployableSystemIdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DeployableSystemIdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DeployableSystemIdentityType_Names::Platform_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePlatform(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DeployableSystemIdentityType_Names::Specific_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSpecific(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DeployableSystemIdentityType_Names::SpecificVehicle_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSpecificVehicle(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DeployableSystemIdentityType_Names::Weapon_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableWeapon(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string DeployableSystemIdentityType::serialize(const uci::type::DeployableSystemIdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DeployableSystemIdentityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DeployableSystemIdentityType_Names::Extern_Type_Name);
  }
  if (accessor.hasPlatform()) {
    PlatformIdentityType::serialize(accessor.getPlatform(), node, DeployableSystemIdentityType_Names::Platform_Name);
  }
  if (accessor.hasSpecific()) {
    SpecificIdentityType::serialize(accessor.getSpecific(), node, DeployableSystemIdentityType_Names::Specific_Name);
  }
  if (accessor.hasSpecificVehicle()) {
    VehicleIdentificationType::serialize(accessor.getSpecificVehicle(), node, DeployableSystemIdentityType_Names::SpecificVehicle_Name);
  }
  if (accessor.hasWeapon()) {
    StoreType::serialize(accessor.getWeapon(), node, DeployableSystemIdentityType_Names::Weapon_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DeployableSystemIdentityType& DeployableSystemIdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DeployableSystemIdentityType>().release());
}

uci::type::DeployableSystemIdentityType& DeployableSystemIdentityType::create(const uci::type::DeployableSystemIdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DeployableSystemIdentityType> newAccessor{boost::make_unique<asb_uci::type::DeployableSystemIdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DeployableSystemIdentityType::destroy(uci::type::DeployableSystemIdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::DeployableSystemIdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

