/** @file DamagedHumanType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DamagedHumanType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DamagedHumanType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DamagedHumanType::DamagedHumanType() = default;

DamagedHumanType::~DamagedHumanType() = default;

void DamagedHumanType::copy(const uci::type::DamagedHumanType& accessor) {
  copyImpl(accessor, false);
}

void DamagedHumanType::copyImpl(const uci::type::DamagedHumanType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DamagedHumanType&>(accessor);
    if (accessorImpl.hasCivilianCasualties()) {
      setCivilianCasualties(accessorImpl.getCivilianCasualties());
    } else {
      clearCivilianCasualties();
    }
    if (accessorImpl.hasCivilianInjuries()) {
      setCivilianInjuries(accessorImpl.getCivilianInjuries());
    } else {
      clearCivilianInjuries();
    }
    if (accessorImpl.hasMilitaryCasualties()) {
      setMilitaryCasualties(accessorImpl.getMilitaryCasualties());
    } else {
      clearMilitaryCasualties();
    }
    if (accessorImpl.hasMilitaryInjuries()) {
      setMilitaryInjuries(accessorImpl.getMilitaryInjuries());
    } else {
      clearMilitaryInjuries();
    }
  }
}

void DamagedHumanType::reset() noexcept {
  clearCivilianCasualties();
  clearCivilianInjuries();
  clearMilitaryCasualties();
  clearMilitaryInjuries();
}

xs::UnsignedInt DamagedHumanType::getCivilianCasualties() const {
  if (civilianCasualties_Accessor) {
    return *civilianCasualties_Accessor;
  }
  throw uci::base::UCIException("Error in getCivilianCasualties(): An attempt was made to get an optional field that was not enabled, call hasCivilianCasualties() to determine if it is safe to call getCivilianCasualties()");
}

uci::type::DamagedHumanType& DamagedHumanType::setCivilianCasualties(xs::UnsignedInt value) {
  civilianCasualties_Accessor = value;
  return *this;
}

bool DamagedHumanType::hasCivilianCasualties() const noexcept {
  return civilianCasualties_Accessor.has_value();
}

uci::type::DamagedHumanType& DamagedHumanType::clearCivilianCasualties() noexcept {
  civilianCasualties_Accessor.reset();
  return *this;
}

xs::UnsignedInt DamagedHumanType::getCivilianInjuries() const {
  if (civilianInjuries_Accessor) {
    return *civilianInjuries_Accessor;
  }
  throw uci::base::UCIException("Error in getCivilianInjuries(): An attempt was made to get an optional field that was not enabled, call hasCivilianInjuries() to determine if it is safe to call getCivilianInjuries()");
}

uci::type::DamagedHumanType& DamagedHumanType::setCivilianInjuries(xs::UnsignedInt value) {
  civilianInjuries_Accessor = value;
  return *this;
}

bool DamagedHumanType::hasCivilianInjuries() const noexcept {
  return civilianInjuries_Accessor.has_value();
}

uci::type::DamagedHumanType& DamagedHumanType::clearCivilianInjuries() noexcept {
  civilianInjuries_Accessor.reset();
  return *this;
}

xs::UnsignedInt DamagedHumanType::getMilitaryCasualties() const {
  if (militaryCasualties_Accessor) {
    return *militaryCasualties_Accessor;
  }
  throw uci::base::UCIException("Error in getMilitaryCasualties(): An attempt was made to get an optional field that was not enabled, call hasMilitaryCasualties() to determine if it is safe to call getMilitaryCasualties()");
}

uci::type::DamagedHumanType& DamagedHumanType::setMilitaryCasualties(xs::UnsignedInt value) {
  militaryCasualties_Accessor = value;
  return *this;
}

bool DamagedHumanType::hasMilitaryCasualties() const noexcept {
  return militaryCasualties_Accessor.has_value();
}

uci::type::DamagedHumanType& DamagedHumanType::clearMilitaryCasualties() noexcept {
  militaryCasualties_Accessor.reset();
  return *this;
}

xs::UnsignedInt DamagedHumanType::getMilitaryInjuries() const {
  if (militaryInjuries_Accessor) {
    return *militaryInjuries_Accessor;
  }
  throw uci::base::UCIException("Error in getMilitaryInjuries(): An attempt was made to get an optional field that was not enabled, call hasMilitaryInjuries() to determine if it is safe to call getMilitaryInjuries()");
}

uci::type::DamagedHumanType& DamagedHumanType::setMilitaryInjuries(xs::UnsignedInt value) {
  militaryInjuries_Accessor = value;
  return *this;
}

bool DamagedHumanType::hasMilitaryInjuries() const noexcept {
  return militaryInjuries_Accessor.has_value();
}

uci::type::DamagedHumanType& DamagedHumanType::clearMilitaryInjuries() noexcept {
  militaryInjuries_Accessor.reset();
  return *this;
}

std::unique_ptr<DamagedHumanType> DamagedHumanType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damagedHumanType : type};
  return (requestedType == uci::type::accessorType::damagedHumanType) ? boost::make_unique<DamagedHumanType>() : nullptr;
}

/**  */
namespace DamagedHumanType_Names {

constexpr const char* Extern_Type_Name{"DamagedHumanType"};
constexpr const char* CivilianCasualties_Name{"CivilianCasualties"};
constexpr const char* CivilianInjuries_Name{"CivilianInjuries"};
constexpr const char* MilitaryCasualties_Name{"MilitaryCasualties"};
constexpr const char* MilitaryInjuries_Name{"MilitaryInjuries"};

} // namespace DamagedHumanType_Names

void DamagedHumanType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamagedHumanType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamagedHumanType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamagedHumanType_Names::CivilianCasualties_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCivilianCasualties(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + DamagedHumanType_Names::CivilianInjuries_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCivilianInjuries(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + DamagedHumanType_Names::MilitaryCasualties_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMilitaryCasualties(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + DamagedHumanType_Names::MilitaryInjuries_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMilitaryInjuries(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string DamagedHumanType::serialize(const uci::type::DamagedHumanType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DamagedHumanType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DamagedHumanType_Names::Extern_Type_Name);
  }
  if (accessor.hasCivilianCasualties()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getCivilianCasualties(), node, DamagedHumanType_Names::CivilianCasualties_Name);
  }
  if (accessor.hasCivilianInjuries()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getCivilianInjuries(), node, DamagedHumanType_Names::CivilianInjuries_Name);
  }
  if (accessor.hasMilitaryCasualties()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getMilitaryCasualties(), node, DamagedHumanType_Names::MilitaryCasualties_Name);
  }
  if (accessor.hasMilitaryInjuries()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getMilitaryInjuries(), node, DamagedHumanType_Names::MilitaryInjuries_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DamagedHumanType& DamagedHumanType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DamagedHumanType>().release());
}

uci::type::DamagedHumanType& DamagedHumanType::create(const uci::type::DamagedHumanType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DamagedHumanType> newAccessor{boost::make_unique<asb_uci::type::DamagedHumanType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DamagedHumanType::destroy(uci::type::DamagedHumanType& accessor) {
  delete dynamic_cast<asb_uci::type::DamagedHumanType*>(&accessor);
}

} // namespace type

} // namespace uci

