/** @file AO_CodeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AO_CodeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AO_PIM_CodeType.h"
#include "asb_uci/type/AO_PRF_CodeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AO_CodeType.h"
#include "uci/type/AO_PIM_CodeType.h"
#include "uci/type/AO_PRF_CodeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AO_CodeType::AO_CodeType() = default;

AO_CodeType::~AO_CodeType() = default;

void AO_CodeType::copy(const uci::type::AO_CodeType& accessor) {
  copyImpl(accessor, false);
}

void AO_CodeType::copyImpl(const uci::type::AO_CodeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AO_CodeType&>(accessor);
    if (accessorImpl.pRF_Code_Accessor) {
      setPRF_Code(*(accessorImpl.pRF_Code_Accessor));
    } else {
      pRF_Code_Accessor.reset();
    }
    if (accessorImpl.pIM_Code_Accessor) {
      setPIM_Code(*(accessorImpl.pIM_Code_Accessor));
    } else {
      pIM_Code_Accessor.reset();
    }
  }
}

void AO_CodeType::reset() noexcept {
  pRF_Code_Accessor.reset();
  pIM_Code_Accessor.reset();
}

uci::type::AO_PRF_CodeType& AO_CodeType::getPRF_Code_() const {
  if (pRF_Code_Accessor) {
    return *pRF_Code_Accessor;
  }
  throw uci::base::UCIException("Error in getPRF_Code(): An attempt was made to get an optional field that was not enabled, call hasPRF_Code() to determine if it is safe to call getPRF_Code()");
}

const uci::type::AO_PRF_CodeType& AO_CodeType::getPRF_Code() const {
  return getPRF_Code_();
}

uci::type::AO_PRF_CodeType& AO_CodeType::getPRF_Code() {
  return getPRF_Code_();
}

uci::type::AO_CodeType& AO_CodeType::setPRF_Code(const uci::type::AO_PRF_CodeType& value) {
  return setPRF_Code(value.c_str());
}

uci::type::AO_CodeType& AO_CodeType::setPRF_Code(const std::string& value) {
  return setPRF_Code(value.c_str());
}

uci::type::AO_CodeType& AO_CodeType::setPRF_Code(const char* value) {
  enablePRF_Code().setStringValue(value);
  return *this;
}

bool AO_CodeType::hasPRF_Code() const noexcept {
  return static_cast<bool>(pRF_Code_Accessor);
}

uci::type::AO_PRF_CodeType& AO_CodeType::enablePRF_Code(uci::base::accessorType::AccessorType type) {
  if (!pRF_Code_Accessor) {
    pRF_Code_Accessor = AO_PRF_CodeType::create(type);
  }
  return *pRF_Code_Accessor;
}

uci::type::AO_CodeType& AO_CodeType::clearPRF_Code() noexcept {
  pRF_Code_Accessor.reset();
  return *this;
}

uci::type::AO_PIM_CodeType& AO_CodeType::getPIM_Code_() const {
  if (pIM_Code_Accessor) {
    return *pIM_Code_Accessor;
  }
  throw uci::base::UCIException("Error in getPIM_Code(): An attempt was made to get an optional field that was not enabled, call hasPIM_Code() to determine if it is safe to call getPIM_Code()");
}

const uci::type::AO_PIM_CodeType& AO_CodeType::getPIM_Code() const {
  return getPIM_Code_();
}

uci::type::AO_PIM_CodeType& AO_CodeType::getPIM_Code() {
  return getPIM_Code_();
}

uci::type::AO_CodeType& AO_CodeType::setPIM_Code(const uci::type::AO_PIM_CodeType& value) {
  return setPIM_Code(value.c_str());
}

uci::type::AO_CodeType& AO_CodeType::setPIM_Code(const std::string& value) {
  return setPIM_Code(value.c_str());
}

uci::type::AO_CodeType& AO_CodeType::setPIM_Code(const char* value) {
  enablePIM_Code().setStringValue(value);
  return *this;
}

bool AO_CodeType::hasPIM_Code() const noexcept {
  return static_cast<bool>(pIM_Code_Accessor);
}

uci::type::AO_PIM_CodeType& AO_CodeType::enablePIM_Code(uci::base::accessorType::AccessorType type) {
  if (!pIM_Code_Accessor) {
    pIM_Code_Accessor = AO_PIM_CodeType::create(type);
  }
  return *pIM_Code_Accessor;
}

uci::type::AO_CodeType& AO_CodeType::clearPIM_Code() noexcept {
  pIM_Code_Accessor.reset();
  return *this;
}

std::unique_ptr<AO_CodeType> AO_CodeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_CodeType : type};
  return (requestedType == uci::type::accessorType::aO_CodeType) ? boost::make_unique<AO_CodeType>() : nullptr;
}

/**  */
namespace AO_CodeType_Names {

constexpr const char* Extern_Type_Name{"AO_CodeType"};
constexpr const char* PRF_Code_Name{"PRF_Code"};
constexpr const char* PIM_Code_Name{"PIM_Code"};

} // namespace AO_CodeType_Names

void AO_CodeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AO_CodeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AO_CodeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AO_CodeType_Names::PRF_Code_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRF_Code(*value);
      }
    } else if (valueType.first == nsPrefix + AO_CodeType_Names::PIM_Code_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPIM_Code(*value);
      }
    }
  }
}

std::string AO_CodeType::serialize(const uci::type::AO_CodeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AO_CodeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AO_CodeType_Names::Extern_Type_Name);
  }
  if (accessor.hasPRF_Code()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getPRF_Code(), node, AO_CodeType_Names::PRF_Code_Name);
  }
  if (accessor.hasPIM_Code()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getPIM_Code(), node, AO_CodeType_Names::PIM_Code_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AO_CodeType& AO_CodeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AO_CodeType>().release());
}

uci::type::AO_CodeType& AO_CodeType::create(const uci::type::AO_CodeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AO_CodeType> newAccessor{boost::make_unique<asb_uci::type::AO_CodeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AO_CodeType::destroy(uci::type::AO_CodeType& accessor) {
  delete dynamic_cast<asb_uci::type::AO_CodeType*>(&accessor);
}

} // namespace type

} // namespace uci

