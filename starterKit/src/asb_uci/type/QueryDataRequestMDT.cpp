/** @file QueryDataRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/QueryDataRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EmptyType.h"
#include "asb_uci/type/QueryMessageType.h"
#include "asb_uci/type/QueryTopicPairType.h"
#include "asb_uci/type/RequestBaseType.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EmptyType.h"
#include "uci/type/IntPositiveType.h"
#include "uci/type/QueryDataRequestMDT.h"
#include "uci/type/QueryMessageType.h"
#include "uci/type/QueryTopicPairType.h"
#include "uci/type/ShortPositiveType.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

QueryDataRequestMDT::QueryDataRequestMDT()
  : resultsInNative_Accessor{boost::make_unique<ResultsInNative>(0, SIZE_MAX)},
    queryMessage_Accessor{boost::make_unique<QueryMessageType>()} {
}

QueryDataRequestMDT::~QueryDataRequestMDT() = default;

void QueryDataRequestMDT::copy(const uci::type::QueryDataRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void QueryDataRequestMDT::copyImpl(const uci::type::QueryDataRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const QueryDataRequestMDT&>(accessor);
    setResultsInNative(*(accessorImpl.resultsInNative_Accessor));
    if (accessorImpl.hasQueryResultLimit()) {
      setQueryResultLimit(accessorImpl.getQueryResultLimit());
    } else {
      clearQueryResultLimit();
    }
    if (accessorImpl.hasResultsPerPage()) {
      setResultsPerPage(accessorImpl.getResultsPerPage());
    } else {
      clearResultsPerPage();
    }
    if (accessorImpl.mostRecentMessagesOnly_Accessor) {
      setMostRecentMessagesOnly(*(accessorImpl.mostRecentMessagesOnly_Accessor));
    } else {
      mostRecentMessagesOnly_Accessor.reset();
    }
    if (accessorImpl.queryIdentifiersOnly_Accessor) {
      setQueryIdentifiersOnly(*(accessorImpl.queryIdentifiersOnly_Accessor));
    } else {
      queryIdentifiersOnly_Accessor.reset();
    }
    setQueryMessage(*(accessorImpl.queryMessage_Accessor));
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
  }
}

void QueryDataRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  resultsInNative_Accessor->reset();
  clearQueryResultLimit();
  clearResultsPerPage();
  mostRecentMessagesOnly_Accessor.reset();
  queryIdentifiersOnly_Accessor.reset();
  queryMessage_Accessor->reset();
  systemID_Accessor.reset();
}

const uci::type::QueryDataRequestMDT::ResultsInNative& QueryDataRequestMDT::getResultsInNative() const {
  return *resultsInNative_Accessor;
}

uci::type::QueryDataRequestMDT::ResultsInNative& QueryDataRequestMDT::getResultsInNative() {
  return *resultsInNative_Accessor;
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::setResultsInNative(const uci::type::QueryDataRequestMDT::ResultsInNative& accessor) {
  if (&accessor != resultsInNative_Accessor.get()) {
    resultsInNative_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IntPositiveTypeValue QueryDataRequestMDT::getQueryResultLimit() const {
  if (queryResultLimit_Accessor) {
    return *queryResultLimit_Accessor;
  }
  throw uci::base::UCIException("Error in getQueryResultLimit(): An attempt was made to get an optional field that was not enabled, call hasQueryResultLimit() to determine if it is safe to call getQueryResultLimit()");
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::setQueryResultLimit(uci::type::IntPositiveTypeValue value) {
  queryResultLimit_Accessor = value;
  return *this;
}

bool QueryDataRequestMDT::hasQueryResultLimit() const noexcept {
  return queryResultLimit_Accessor.has_value();
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::clearQueryResultLimit() noexcept {
  queryResultLimit_Accessor.reset();
  return *this;
}

uci::type::ShortPositiveTypeValue QueryDataRequestMDT::getResultsPerPage() const {
  if (resultsPerPage_Accessor) {
    return *resultsPerPage_Accessor;
  }
  throw uci::base::UCIException("Error in getResultsPerPage(): An attempt was made to get an optional field that was not enabled, call hasResultsPerPage() to determine if it is safe to call getResultsPerPage()");
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::setResultsPerPage(uci::type::ShortPositiveTypeValue value) {
  resultsPerPage_Accessor = value;
  return *this;
}

bool QueryDataRequestMDT::hasResultsPerPage() const noexcept {
  return resultsPerPage_Accessor.has_value();
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::clearResultsPerPage() noexcept {
  resultsPerPage_Accessor.reset();
  return *this;
}

uci::type::EmptyType& QueryDataRequestMDT::getMostRecentMessagesOnly_() const {
  if (mostRecentMessagesOnly_Accessor) {
    return *mostRecentMessagesOnly_Accessor;
  }
  throw uci::base::UCIException("Error in getMostRecentMessagesOnly(): An attempt was made to get an optional field that was not enabled, call hasMostRecentMessagesOnly() to determine if it is safe to call getMostRecentMessagesOnly()");
}

const uci::type::EmptyType& QueryDataRequestMDT::getMostRecentMessagesOnly() const {
  return getMostRecentMessagesOnly_();
}

uci::type::EmptyType& QueryDataRequestMDT::getMostRecentMessagesOnly() {
  return getMostRecentMessagesOnly_();
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::setMostRecentMessagesOnly(const uci::type::EmptyType& value) {
  return setMostRecentMessagesOnly(value.c_str());
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::setMostRecentMessagesOnly(const std::string& value) {
  return setMostRecentMessagesOnly(value.c_str());
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::setMostRecentMessagesOnly(const char* value) {
  enableMostRecentMessagesOnly().setStringValue(value);
  return *this;
}

bool QueryDataRequestMDT::hasMostRecentMessagesOnly() const noexcept {
  return static_cast<bool>(mostRecentMessagesOnly_Accessor);
}

uci::type::EmptyType& QueryDataRequestMDT::enableMostRecentMessagesOnly(uci::base::accessorType::AccessorType type) {
  if (!mostRecentMessagesOnly_Accessor) {
    mostRecentMessagesOnly_Accessor = EmptyType::create(type);
  }
  return *mostRecentMessagesOnly_Accessor;
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::clearMostRecentMessagesOnly() noexcept {
  mostRecentMessagesOnly_Accessor.reset();
  return *this;
}

uci::type::EmptyType& QueryDataRequestMDT::getQueryIdentifiersOnly_() const {
  if (queryIdentifiersOnly_Accessor) {
    return *queryIdentifiersOnly_Accessor;
  }
  throw uci::base::UCIException("Error in getQueryIdentifiersOnly(): An attempt was made to get an optional field that was not enabled, call hasQueryIdentifiersOnly() to determine if it is safe to call getQueryIdentifiersOnly()");
}

const uci::type::EmptyType& QueryDataRequestMDT::getQueryIdentifiersOnly() const {
  return getQueryIdentifiersOnly_();
}

uci::type::EmptyType& QueryDataRequestMDT::getQueryIdentifiersOnly() {
  return getQueryIdentifiersOnly_();
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::setQueryIdentifiersOnly(const uci::type::EmptyType& value) {
  return setQueryIdentifiersOnly(value.c_str());
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::setQueryIdentifiersOnly(const std::string& value) {
  return setQueryIdentifiersOnly(value.c_str());
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::setQueryIdentifiersOnly(const char* value) {
  enableQueryIdentifiersOnly().setStringValue(value);
  return *this;
}

bool QueryDataRequestMDT::hasQueryIdentifiersOnly() const noexcept {
  return static_cast<bool>(queryIdentifiersOnly_Accessor);
}

uci::type::EmptyType& QueryDataRequestMDT::enableQueryIdentifiersOnly(uci::base::accessorType::AccessorType type) {
  if (!queryIdentifiersOnly_Accessor) {
    queryIdentifiersOnly_Accessor = EmptyType::create(type);
  }
  return *queryIdentifiersOnly_Accessor;
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::clearQueryIdentifiersOnly() noexcept {
  queryIdentifiersOnly_Accessor.reset();
  return *this;
}

const uci::type::QueryMessageType& QueryDataRequestMDT::getQueryMessage() const {
  return *queryMessage_Accessor;
}

uci::type::QueryMessageType& QueryDataRequestMDT::getQueryMessage() {
  return *queryMessage_Accessor;
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::setQueryMessage(const uci::type::QueryMessageType& accessor) {
  if (&accessor != queryMessage_Accessor.get()) {
    queryMessage_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemID_Type& QueryDataRequestMDT::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): An attempt was made to get an optional field that was not enabled, call hasSystemID() to determine if it is safe to call getSystemID()");
}

const uci::type::SystemID_Type& QueryDataRequestMDT::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& QueryDataRequestMDT::getSystemID() {
  return getSystemID_();
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  enableSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryDataRequestMDT::hasSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& QueryDataRequestMDT::enableSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(requestedType);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::clearSystemID() noexcept {
  systemID_Accessor.reset();
  return *this;
}

std::unique_ptr<QueryDataRequestMDT> QueryDataRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryDataRequestMDT : type};
  return (requestedType == uci::type::accessorType::queryDataRequestMDT) ? boost::make_unique<QueryDataRequestMDT>() : nullptr;
}

/**  */
namespace QueryDataRequestMDT_Names {

constexpr const char* Extern_Type_Name{"QueryDataRequestMDT"};
constexpr const char* ResultsInNative_Name{"ResultsInNative"};
constexpr const char* QueryResultLimit_Name{"QueryResultLimit"};
constexpr const char* ResultsPerPage_Name{"ResultsPerPage"};
constexpr const char* MostRecentMessagesOnly_Name{"MostRecentMessagesOnly"};
constexpr const char* QueryIdentifiersOnly_Name{"QueryIdentifiersOnly"};
constexpr const char* QueryMessage_Name{"QueryMessage"};
constexpr const char* SystemID_Name{"SystemID"};

} // namespace QueryDataRequestMDT_Names

void QueryDataRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::QueryDataRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = QueryDataRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + QueryDataRequestMDT_Names::ResultsInNative_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::QueryDataRequestMDT::ResultsInNative& boundedList = accessor.getResultsInNative();
        const uci::type::QueryDataRequestMDT::ResultsInNative::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::QueryTopicPairType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + QueryDataRequestMDT_Names::QueryResultLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setQueryResultLimit(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + QueryDataRequestMDT_Names::ResultsPerPage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResultsPerPage(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + QueryDataRequestMDT_Names::MostRecentMessagesOnly_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMostRecentMessagesOnly(*value);
      }
    } else if (valueType.first == nsPrefix + QueryDataRequestMDT_Names::QueryIdentifiersOnly_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setQueryIdentifiersOnly(*value);
      }
    } else if (valueType.first == nsPrefix + QueryDataRequestMDT_Names::QueryMessage_Name) {
      QueryMessageType::deserialize(valueType.second, accessor.getQueryMessage(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryDataRequestMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSystemID(), nodeName, nsPrefix);
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string QueryDataRequestMDT::serialize(const uci::type::QueryDataRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? QueryDataRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, QueryDataRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::QueryDataRequestMDT::ResultsInNative& boundedList = accessor.getResultsInNative();
    for (uci::type::QueryDataRequestMDT::ResultsInNative::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::QueryTopicPairType::serialize(boundedList.at(i), node, QueryDataRequestMDT_Names::ResultsInNative_Name);
    }
  }
  if (accessor.hasQueryResultLimit()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getQueryResultLimit(), node, QueryDataRequestMDT_Names::QueryResultLimit_Name);
  }
  if (accessor.hasResultsPerPage()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getResultsPerPage(), node, QueryDataRequestMDT_Names::ResultsPerPage_Name);
  }
  if (accessor.hasMostRecentMessagesOnly()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMostRecentMessagesOnly(), node, QueryDataRequestMDT_Names::MostRecentMessagesOnly_Name);
  }
  if (accessor.hasQueryIdentifiersOnly()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getQueryIdentifiersOnly(), node, QueryDataRequestMDT_Names::QueryIdentifiersOnly_Name);
  }
  QueryMessageType::serialize(accessor.getQueryMessage(), node, QueryDataRequestMDT_Names::QueryMessage_Name);
  if (accessor.hasSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, QueryDataRequestMDT_Names::SystemID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::QueryDataRequestMDT>().release());
}

uci::type::QueryDataRequestMDT& QueryDataRequestMDT::create(const uci::type::QueryDataRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::QueryDataRequestMDT> newAccessor{boost::make_unique<asb_uci::type::QueryDataRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void QueryDataRequestMDT::destroy(uci::type::QueryDataRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::QueryDataRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

