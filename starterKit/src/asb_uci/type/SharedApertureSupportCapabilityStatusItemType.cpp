/** @file SharedApertureSupportCapabilityStatusItemType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SharedApertureSupportCapabilityStatusItemType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AntennaStatusType.h"
#include "../../../include/asb_uci/type/RFDC_StatusType.h"
#include "../../../include/asb_uci/type/ResourceAllocatorStatusType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AntennaStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RFDC_StatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceAllocatorStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SharedApertureSupportCapabilityStatusItemType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SharedApertureSupportCapabilityStatusItemType::SharedApertureSupportCapabilityStatusItemType() = default;

SharedApertureSupportCapabilityStatusItemType::~SharedApertureSupportCapabilityStatusItemType() = default;

void SharedApertureSupportCapabilityStatusItemType::copy(const uci::type::SharedApertureSupportCapabilityStatusItemType& accessor) {
  copyImpl(accessor, false);
}

void SharedApertureSupportCapabilityStatusItemType::copyImpl(const uci::type::SharedApertureSupportCapabilityStatusItemType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SharedApertureSupportCapabilityStatusItemType&>(accessor);
    if (accessorImpl.antennaStatus_Accessor) {
      setAntennaStatus(*(accessorImpl.antennaStatus_Accessor));
    } else {
      antennaStatus_Accessor.reset();
    }
    if (accessorImpl.resourceAllocatorStatus_Accessor) {
      setResourceAllocatorStatus(*(accessorImpl.resourceAllocatorStatus_Accessor));
    } else {
      resourceAllocatorStatus_Accessor.reset();
    }
    if (accessorImpl.rFDC_Status_Accessor) {
      setRFDC_Status(*(accessorImpl.rFDC_Status_Accessor));
    } else {
      rFDC_Status_Accessor.reset();
    }
  }
}

void SharedApertureSupportCapabilityStatusItemType::reset() noexcept {
  antennaStatus_Accessor.reset();
  resourceAllocatorStatus_Accessor.reset();
  rFDC_Status_Accessor.reset();
}

uci::type::SharedApertureSupportCapabilityStatusItemType::SharedApertureSupportCapabilityStatusItemTypeChoice SharedApertureSupportCapabilityStatusItemType::getSharedApertureSupportCapabilityStatusItemTypeChoiceOrdinal() const noexcept {
  if (antennaStatus_Accessor) {
    return SHAREDAPERTURESUPPORTCAPABILITYSTATUSITEMTYPE_CHOICE_ANTENNASTATUS;
  }
  if (resourceAllocatorStatus_Accessor) {
    return SHAREDAPERTURESUPPORTCAPABILITYSTATUSITEMTYPE_CHOICE_RESOURCEALLOCATORSTATUS;
  }
  if (rFDC_Status_Accessor) {
    return SHAREDAPERTURESUPPORTCAPABILITYSTATUSITEMTYPE_CHOICE_RFDC_STATUS;
  }
  return SHAREDAPERTURESUPPORTCAPABILITYSTATUSITEMTYPE_CHOICE_NONE;
}

uci::type::SharedApertureSupportCapabilityStatusItemType& SharedApertureSupportCapabilityStatusItemType::setSharedApertureSupportCapabilityStatusItemTypeChoiceOrdinal(uci::type::SharedApertureSupportCapabilityStatusItemType::SharedApertureSupportCapabilityStatusItemTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case SHAREDAPERTURESUPPORTCAPABILITYSTATUSITEMTYPE_CHOICE_ANTENNASTATUS:
      chooseAntennaStatus("setSharedApertureSupportCapabilityStatusItemTypeChoiceOrdinal", type);
      break;
    case SHAREDAPERTURESUPPORTCAPABILITYSTATUSITEMTYPE_CHOICE_RESOURCEALLOCATORSTATUS:
      chooseResourceAllocatorStatus("setSharedApertureSupportCapabilityStatusItemTypeChoiceOrdinal", type);
      break;
    case SHAREDAPERTURESUPPORTCAPABILITYSTATUSITEMTYPE_CHOICE_RFDC_STATUS:
      chooseRFDC_Status("setSharedApertureSupportCapabilityStatusItemTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setSharedApertureSupportCapabilityStatusItemTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AntennaStatusType& SharedApertureSupportCapabilityStatusItemType::getAntennaStatus_() const {
  if (antennaStatus_Accessor) {
    return *antennaStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getAntennaStatus(): Unable to get AntennaStatus, field not selected");
}

const uci::type::AntennaStatusType& SharedApertureSupportCapabilityStatusItemType::getAntennaStatus() const {
  return getAntennaStatus_();
}

uci::type::AntennaStatusType& SharedApertureSupportCapabilityStatusItemType::getAntennaStatus() {
  return getAntennaStatus_();
}

uci::type::SharedApertureSupportCapabilityStatusItemType& SharedApertureSupportCapabilityStatusItemType::setAntennaStatus(const uci::type::AntennaStatusType& accessor) {
  chooseAntennaStatus();
  if (&accessor != antennaStatus_Accessor.get()) {
    antennaStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SharedApertureSupportCapabilityStatusItemType::isAntennaStatus() const noexcept {
  return static_cast<bool>(antennaStatus_Accessor);
}

uci::type::AntennaStatusType& SharedApertureSupportCapabilityStatusItemType::chooseAntennaStatus(const std::string& method, uci::base::accessorType::AccessorType type) {
  resourceAllocatorStatus_Accessor.reset();
  rFDC_Status_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::antennaStatusType : type};
  if ((!antennaStatus_Accessor) || (antennaStatus_Accessor->getAccessorType() != requestedType)) {
    antennaStatus_Accessor = AntennaStatusType::create(type);
    if (!antennaStatus_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *antennaStatus_Accessor;
}

uci::type::AntennaStatusType& SharedApertureSupportCapabilityStatusItemType::chooseAntennaStatus(uci::base::accessorType::AccessorType type) {
  return chooseAntennaStatus("chooseAntennaStatus", type);
}

uci::type::ResourceAllocatorStatusType& SharedApertureSupportCapabilityStatusItemType::getResourceAllocatorStatus_() const {
  if (resourceAllocatorStatus_Accessor) {
    return *resourceAllocatorStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getResourceAllocatorStatus(): Unable to get ResourceAllocatorStatus, field not selected");
}

const uci::type::ResourceAllocatorStatusType& SharedApertureSupportCapabilityStatusItemType::getResourceAllocatorStatus() const {
  return getResourceAllocatorStatus_();
}

uci::type::ResourceAllocatorStatusType& SharedApertureSupportCapabilityStatusItemType::getResourceAllocatorStatus() {
  return getResourceAllocatorStatus_();
}

uci::type::SharedApertureSupportCapabilityStatusItemType& SharedApertureSupportCapabilityStatusItemType::setResourceAllocatorStatus(const uci::type::ResourceAllocatorStatusType& accessor) {
  chooseResourceAllocatorStatus();
  if (&accessor != resourceAllocatorStatus_Accessor.get()) {
    resourceAllocatorStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SharedApertureSupportCapabilityStatusItemType::isResourceAllocatorStatus() const noexcept {
  return static_cast<bool>(resourceAllocatorStatus_Accessor);
}

uci::type::ResourceAllocatorStatusType& SharedApertureSupportCapabilityStatusItemType::chooseResourceAllocatorStatus(const std::string& method, uci::base::accessorType::AccessorType type) {
  antennaStatus_Accessor.reset();
  rFDC_Status_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceAllocatorStatusType : type};
  if ((!resourceAllocatorStatus_Accessor) || (resourceAllocatorStatus_Accessor->getAccessorType() != requestedType)) {
    resourceAllocatorStatus_Accessor = ResourceAllocatorStatusType::create(type);
    if (!resourceAllocatorStatus_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *resourceAllocatorStatus_Accessor;
}

uci::type::ResourceAllocatorStatusType& SharedApertureSupportCapabilityStatusItemType::chooseResourceAllocatorStatus(uci::base::accessorType::AccessorType type) {
  return chooseResourceAllocatorStatus("chooseResourceAllocatorStatus", type);
}

uci::type::RFDC_StatusType& SharedApertureSupportCapabilityStatusItemType::getRFDC_Status_() const {
  if (rFDC_Status_Accessor) {
    return *rFDC_Status_Accessor;
  }
  throw uci::base::UCIException("Error in getRFDC_Status(): Unable to get RFDC_Status, field not selected");
}

const uci::type::RFDC_StatusType& SharedApertureSupportCapabilityStatusItemType::getRFDC_Status() const {
  return getRFDC_Status_();
}

uci::type::RFDC_StatusType& SharedApertureSupportCapabilityStatusItemType::getRFDC_Status() {
  return getRFDC_Status_();
}

uci::type::SharedApertureSupportCapabilityStatusItemType& SharedApertureSupportCapabilityStatusItemType::setRFDC_Status(const uci::type::RFDC_StatusType& accessor) {
  chooseRFDC_Status();
  if (&accessor != rFDC_Status_Accessor.get()) {
    rFDC_Status_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SharedApertureSupportCapabilityStatusItemType::isRFDC_Status() const noexcept {
  return static_cast<bool>(rFDC_Status_Accessor);
}

uci::type::RFDC_StatusType& SharedApertureSupportCapabilityStatusItemType::chooseRFDC_Status(const std::string& method, uci::base::accessorType::AccessorType type) {
  antennaStatus_Accessor.reset();
  resourceAllocatorStatus_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rFDC_StatusType : type};
  if ((!rFDC_Status_Accessor) || (rFDC_Status_Accessor->getAccessorType() != requestedType)) {
    rFDC_Status_Accessor = RFDC_StatusType::create(type);
    if (!rFDC_Status_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rFDC_Status_Accessor;
}

uci::type::RFDC_StatusType& SharedApertureSupportCapabilityStatusItemType::chooseRFDC_Status(uci::base::accessorType::AccessorType type) {
  return chooseRFDC_Status("chooseRFDC_Status", type);
}

std::unique_ptr<SharedApertureSupportCapabilityStatusItemType> SharedApertureSupportCapabilityStatusItemType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sharedApertureSupportCapabilityStatusItemType : type};
  return (requestedType == uci::type::accessorType::sharedApertureSupportCapabilityStatusItemType) ? boost::make_unique<SharedApertureSupportCapabilityStatusItemType>() : nullptr;
}

/**  */
namespace SharedApertureSupportCapabilityStatusItemType_Names {

constexpr const char* Extern_Type_Name{"SharedApertureSupportCapabilityStatusItemType"};
constexpr const char* AntennaStatus_Name{"AntennaStatus"};
constexpr const char* ResourceAllocatorStatus_Name{"ResourceAllocatorStatus"};
constexpr const char* RFDC_Status_Name{"RFDC_Status"};

} // namespace SharedApertureSupportCapabilityStatusItemType_Names

void SharedApertureSupportCapabilityStatusItemType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SharedApertureSupportCapabilityStatusItemType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SharedApertureSupportCapabilityStatusItemType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SharedApertureSupportCapabilityStatusItemType_Names::AntennaStatus_Name) {
      AntennaStatusType::deserialize(valueType.second, accessor.chooseAntennaStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SharedApertureSupportCapabilityStatusItemType_Names::ResourceAllocatorStatus_Name) {
      ResourceAllocatorStatusType::deserialize(valueType.second, accessor.chooseResourceAllocatorStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SharedApertureSupportCapabilityStatusItemType_Names::RFDC_Status_Name) {
      RFDC_StatusType::deserialize(valueType.second, accessor.chooseRFDC_Status(), nodeName, nsPrefix);
    }
  }
}

std::string SharedApertureSupportCapabilityStatusItemType::serialize(const uci::type::SharedApertureSupportCapabilityStatusItemType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SharedApertureSupportCapabilityStatusItemType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SharedApertureSupportCapabilityStatusItemType_Names::Extern_Type_Name);
  }
  if (accessor.isAntennaStatus()) {
    AntennaStatusType::serialize(accessor.getAntennaStatus(), node, SharedApertureSupportCapabilityStatusItemType_Names::AntennaStatus_Name);
  } else if (accessor.isResourceAllocatorStatus()) {
    ResourceAllocatorStatusType::serialize(accessor.getResourceAllocatorStatus(), node, SharedApertureSupportCapabilityStatusItemType_Names::ResourceAllocatorStatus_Name);
  } else if (accessor.isRFDC_Status()) {
    RFDC_StatusType::serialize(accessor.getRFDC_Status(), node, SharedApertureSupportCapabilityStatusItemType_Names::RFDC_Status_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SharedApertureSupportCapabilityStatusItemType& SharedApertureSupportCapabilityStatusItemType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SharedApertureSupportCapabilityStatusItemType>().release());
}

uci::type::SharedApertureSupportCapabilityStatusItemType& SharedApertureSupportCapabilityStatusItemType::create(const uci::type::SharedApertureSupportCapabilityStatusItemType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SharedApertureSupportCapabilityStatusItemType> newAccessor{boost::make_unique<asb_uci::type::SharedApertureSupportCapabilityStatusItemType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SharedApertureSupportCapabilityStatusItemType::destroy(uci::type::SharedApertureSupportCapabilityStatusItemType& accessor) {
  delete dynamic_cast<asb_uci::type::SharedApertureSupportCapabilityStatusItemType*>(&accessor);
}

} // namespace type

} // namespace uci

