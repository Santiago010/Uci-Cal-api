/** @file LaunchObjectType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/LaunchObjectType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/FlightStageEnum.h"
#include "../../../include/asb_uci/type/LaunchObjectID_Type.h"
#include "../../../include/asb_uci/type/LaunchStageConfidenceType.h"
#include "../../../include/asb_uci/type/ObservationMeasurementReportID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FlightStageEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LaunchObjectID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LaunchObjectType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LaunchStageConfidenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ObservationMeasurementReportID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LaunchObjectType::LaunchObjectType()
  : launchObjectID_Accessor{boost::make_unique<LaunchObjectID_Type>()} {
}

LaunchObjectType::~LaunchObjectType() = default;

void LaunchObjectType::copy(const uci::type::LaunchObjectType& accessor) {
  copyImpl(accessor, false);
}

void LaunchObjectType::copyImpl(const uci::type::LaunchObjectType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LaunchObjectType&>(accessor);
    setLaunchObjectID(*(accessorImpl.launchObjectID_Accessor));
    if (accessorImpl.associatedLaunchStage_Accessor) {
      setAssociatedLaunchStage(*(accessorImpl.associatedLaunchStage_Accessor));
    } else {
      associatedLaunchStage_Accessor.reset();
    }
    if (accessorImpl.entityID_Accessor) {
      setEntityID(*(accessorImpl.entityID_Accessor));
    } else {
      entityID_Accessor.reset();
    }
    if (accessorImpl.observationMeasurementReportID_Accessor) {
      setObservationMeasurementReportID(*(accessorImpl.observationMeasurementReportID_Accessor));
    } else {
      observationMeasurementReportID_Accessor.reset();
    }
    if (accessorImpl.flightStage_Accessor) {
      setFlightStage(*(accessorImpl.flightStage_Accessor));
    } else {
      flightStage_Accessor.reset();
    }
  }
}

void LaunchObjectType::reset() noexcept {
  launchObjectID_Accessor->reset();
  associatedLaunchStage_Accessor.reset();
  entityID_Accessor.reset();
  observationMeasurementReportID_Accessor.reset();
  flightStage_Accessor.reset();
}

const uci::type::LaunchObjectID_Type& LaunchObjectType::getLaunchObjectID() const {
  return *launchObjectID_Accessor;
}

uci::type::LaunchObjectID_Type& LaunchObjectType::getLaunchObjectID() {
  return *launchObjectID_Accessor;
}

uci::type::LaunchObjectType& LaunchObjectType::setLaunchObjectID(const uci::type::LaunchObjectID_Type& accessor) {
  if (&accessor != launchObjectID_Accessor.get()) {
    launchObjectID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::LaunchStageConfidenceType& LaunchObjectType::getAssociatedLaunchStage_() const {
  if (associatedLaunchStage_Accessor) {
    return *associatedLaunchStage_Accessor;
  }
  throw uci::base::UCIException("Error in getAssociatedLaunchStage(): An attempt was made to get an optional field that was not enabled, call hasAssociatedLaunchStage() to determine if it is safe to call getAssociatedLaunchStage()");
}

const uci::type::LaunchStageConfidenceType& LaunchObjectType::getAssociatedLaunchStage() const {
  return getAssociatedLaunchStage_();
}

uci::type::LaunchStageConfidenceType& LaunchObjectType::getAssociatedLaunchStage() {
  return getAssociatedLaunchStage_();
}

uci::type::LaunchObjectType& LaunchObjectType::setAssociatedLaunchStage(const uci::type::LaunchStageConfidenceType& accessor) {
  enableAssociatedLaunchStage();
  if (&accessor != associatedLaunchStage_Accessor.get()) {
    associatedLaunchStage_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LaunchObjectType::hasAssociatedLaunchStage() const noexcept {
  return static_cast<bool>(associatedLaunchStage_Accessor);
}

uci::type::LaunchStageConfidenceType& LaunchObjectType::enableAssociatedLaunchStage(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::launchStageConfidenceType : type};
  if ((!associatedLaunchStage_Accessor) || (associatedLaunchStage_Accessor->getAccessorType() != requestedType)) {
    associatedLaunchStage_Accessor = LaunchStageConfidenceType::create(requestedType);
    if (!associatedLaunchStage_Accessor) {
      throw uci::base::UCIException("Error in enableAssociatedLaunchStage(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *associatedLaunchStage_Accessor;
}

uci::type::LaunchObjectType& LaunchObjectType::clearAssociatedLaunchStage() noexcept {
  associatedLaunchStage_Accessor.reset();
  return *this;
}

uci::type::EntityID_Type& LaunchObjectType::getEntityID_() const {
  if (entityID_Accessor) {
    return *entityID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityID(): An attempt was made to get an optional field that was not enabled, call hasEntityID() to determine if it is safe to call getEntityID()");
}

const uci::type::EntityID_Type& LaunchObjectType::getEntityID() const {
  return getEntityID_();
}

uci::type::EntityID_Type& LaunchObjectType::getEntityID() {
  return getEntityID_();
}

uci::type::LaunchObjectType& LaunchObjectType::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool LaunchObjectType::hasEntityID() const noexcept {
  return static_cast<bool>(entityID_Accessor);
}

uci::type::EntityID_Type& LaunchObjectType::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::LaunchObjectType& LaunchObjectType::clearEntityID() noexcept {
  entityID_Accessor.reset();
  return *this;
}

uci::type::ObservationMeasurementReportID_Type& LaunchObjectType::getObservationMeasurementReportID_() const {
  if (observationMeasurementReportID_Accessor) {
    return *observationMeasurementReportID_Accessor;
  }
  throw uci::base::UCIException("Error in getObservationMeasurementReportID(): An attempt was made to get an optional field that was not enabled, call hasObservationMeasurementReportID() to determine if it is safe to call getObservationMeasurementReportID()");
}

const uci::type::ObservationMeasurementReportID_Type& LaunchObjectType::getObservationMeasurementReportID() const {
  return getObservationMeasurementReportID_();
}

uci::type::ObservationMeasurementReportID_Type& LaunchObjectType::getObservationMeasurementReportID() {
  return getObservationMeasurementReportID_();
}

uci::type::LaunchObjectType& LaunchObjectType::setObservationMeasurementReportID(const uci::type::ObservationMeasurementReportID_Type& accessor) {
  enableObservationMeasurementReportID();
  if (&accessor != observationMeasurementReportID_Accessor.get()) {
    observationMeasurementReportID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LaunchObjectType::hasObservationMeasurementReportID() const noexcept {
  return static_cast<bool>(observationMeasurementReportID_Accessor);
}

uci::type::ObservationMeasurementReportID_Type& LaunchObjectType::enableObservationMeasurementReportID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::observationMeasurementReportID_Type : type};
  if ((!observationMeasurementReportID_Accessor) || (observationMeasurementReportID_Accessor->getAccessorType() != requestedType)) {
    observationMeasurementReportID_Accessor = ObservationMeasurementReportID_Type::create(requestedType);
    if (!observationMeasurementReportID_Accessor) {
      throw uci::base::UCIException("Error in enableObservationMeasurementReportID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *observationMeasurementReportID_Accessor;
}

uci::type::LaunchObjectType& LaunchObjectType::clearObservationMeasurementReportID() noexcept {
  observationMeasurementReportID_Accessor.reset();
  return *this;
}

uci::type::FlightStageEnum& LaunchObjectType::getFlightStage_() const {
  if (flightStage_Accessor) {
    return *flightStage_Accessor;
  }
  throw uci::base::UCIException("Error in getFlightStage(): An attempt was made to get an optional field that was not enabled, call hasFlightStage() to determine if it is safe to call getFlightStage()");
}

const uci::type::FlightStageEnum& LaunchObjectType::getFlightStage() const {
  return getFlightStage_();
}

uci::type::FlightStageEnum& LaunchObjectType::getFlightStage() {
  return getFlightStage_();
}

uci::type::LaunchObjectType& LaunchObjectType::setFlightStage(const uci::type::FlightStageEnum& accessor) {
  enableFlightStage();
  if (&accessor != flightStage_Accessor.get()) {
    flightStage_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::LaunchObjectType& LaunchObjectType::setFlightStage(const uci::type::FlightStageEnum::EnumerationItem value) {
  enableFlightStage().setValue(value);
  return *this;
}

bool LaunchObjectType::hasFlightStage() const noexcept {
  return static_cast<bool>(flightStage_Accessor);
}

uci::type::FlightStageEnum& LaunchObjectType::enableFlightStage(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::flightStageEnum : type};
  if ((!flightStage_Accessor) || (flightStage_Accessor->getAccessorType() != requestedType)) {
    flightStage_Accessor = FlightStageEnum::create(requestedType);
    if (!flightStage_Accessor) {
      throw uci::base::UCIException("Error in enableFlightStage(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *flightStage_Accessor;
}

uci::type::LaunchObjectType& LaunchObjectType::clearFlightStage() noexcept {
  flightStage_Accessor.reset();
  return *this;
}

std::unique_ptr<LaunchObjectType> LaunchObjectType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::launchObjectType : type};
  return (requestedType == uci::type::accessorType::launchObjectType) ? boost::make_unique<LaunchObjectType>() : nullptr;
}

/**  */
namespace LaunchObjectType_Names {

constexpr const char* Extern_Type_Name{"LaunchObjectType"};
constexpr const char* LaunchObjectID_Name{"LaunchObjectID"};
constexpr const char* AssociatedLaunchStage_Name{"AssociatedLaunchStage"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* ObservationMeasurementReportID_Name{"ObservationMeasurementReportID"};
constexpr const char* FlightStage_Name{"FlightStage"};

} // namespace LaunchObjectType_Names

void LaunchObjectType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LaunchObjectType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LaunchObjectType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LaunchObjectType_Names::LaunchObjectID_Name) {
      LaunchObjectID_Type::deserialize(valueType.second, accessor.getLaunchObjectID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LaunchObjectType_Names::AssociatedLaunchStage_Name) {
      LaunchStageConfidenceType::deserialize(valueType.second, accessor.enableAssociatedLaunchStage(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LaunchObjectType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LaunchObjectType_Names::ObservationMeasurementReportID_Name) {
      ObservationMeasurementReportID_Type::deserialize(valueType.second, accessor.enableObservationMeasurementReportID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LaunchObjectType_Names::FlightStage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFlightStage().setValueFromName(*value);
      }
    }
  }
}

std::string LaunchObjectType::serialize(const uci::type::LaunchObjectType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LaunchObjectType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LaunchObjectType_Names::Extern_Type_Name);
  }
  LaunchObjectID_Type::serialize(accessor.getLaunchObjectID(), node, LaunchObjectType_Names::LaunchObjectID_Name);
  if (accessor.hasAssociatedLaunchStage()) {
    LaunchStageConfidenceType::serialize(accessor.getAssociatedLaunchStage(), node, LaunchObjectType_Names::AssociatedLaunchStage_Name);
  }
  if (accessor.hasEntityID()) {
    EntityID_Type::serialize(accessor.getEntityID(), node, LaunchObjectType_Names::EntityID_Name);
  }
  if (accessor.hasObservationMeasurementReportID()) {
    ObservationMeasurementReportID_Type::serialize(accessor.getObservationMeasurementReportID(), node, LaunchObjectType_Names::ObservationMeasurementReportID_Name);
  }
  if (accessor.hasFlightStage()) {
    FlightStageEnum::serialize(accessor.getFlightStage(), node, LaunchObjectType_Names::FlightStage_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LaunchObjectType& LaunchObjectType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LaunchObjectType>().release());
}

uci::type::LaunchObjectType& LaunchObjectType::create(const uci::type::LaunchObjectType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LaunchObjectType> newAccessor{boost::make_unique<asb_uci::type::LaunchObjectType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LaunchObjectType::destroy(uci::type::LaunchObjectType& accessor) {
  delete dynamic_cast<asb_uci::type::LaunchObjectType*>(&accessor);
}

} // namespace type

} // namespace uci

