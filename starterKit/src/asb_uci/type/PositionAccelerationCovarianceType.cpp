/** @file PositionAccelerationCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PositionAccelerationCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PositionAccelerationCovarianceType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PositionAccelerationCovarianceType::PositionAccelerationCovarianceType() = default;

PositionAccelerationCovarianceType::~PositionAccelerationCovarianceType() = default;

void PositionAccelerationCovarianceType::copy(const uci::type::PositionAccelerationCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void PositionAccelerationCovarianceType::copyImpl(const uci::type::PositionAccelerationCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PositionAccelerationCovarianceType&>(accessor);
    setPnAn(accessorImpl.pnAn_Accessor);
    setPnAe(accessorImpl.pnAe_Accessor);
    if (accessorImpl.hasPnAd()) {
      setPnAd(accessorImpl.getPnAd());
    } else {
      clearPnAd();
    }
    setPeAn(accessorImpl.peAn_Accessor);
    setPeAe(accessorImpl.peAe_Accessor);
    if (accessorImpl.hasPeAd()) {
      setPeAd(accessorImpl.getPeAd());
    } else {
      clearPeAd();
    }
    if (accessorImpl.hasPdAn()) {
      setPdAn(accessorImpl.getPdAn());
    } else {
      clearPdAn();
    }
    if (accessorImpl.hasPdAe()) {
      setPdAe(accessorImpl.getPdAe());
    } else {
      clearPdAe();
    }
    if (accessorImpl.hasPdAd()) {
      setPdAd(accessorImpl.getPdAd());
    } else {
      clearPdAd();
    }
  }
}

void PositionAccelerationCovarianceType::reset() noexcept {
  pnAn_Accessor = 0.0;
  pnAe_Accessor = 0.0;
  clearPnAd();
  peAn_Accessor = 0.0;
  peAe_Accessor = 0.0;
  clearPeAd();
  clearPdAn();
  clearPdAe();
  clearPdAd();
}

xs::Double PositionAccelerationCovarianceType::getPnAn() const {
  return pnAn_Accessor;
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::setPnAn(xs::Double value) {
  pnAn_Accessor = value;
  return *this;
}


xs::Double PositionAccelerationCovarianceType::getPnAe() const {
  return pnAe_Accessor;
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::setPnAe(xs::Double value) {
  pnAe_Accessor = value;
  return *this;
}


xs::Double PositionAccelerationCovarianceType::getPnAd() const {
  if (pnAd_Accessor) {
    return *pnAd_Accessor;
  }
  throw uci::base::UCIException("Error in getPnAd(): An attempt was made to get an optional field that was not enabled, call hasPnAd() to determine if it is safe to call getPnAd()");
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::setPnAd(xs::Double value) {
  pnAd_Accessor = value;
  return *this;
}

bool PositionAccelerationCovarianceType::hasPnAd() const noexcept {
  return pnAd_Accessor.has_value();
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::clearPnAd() noexcept {
  pnAd_Accessor.reset();
  return *this;
}

xs::Double PositionAccelerationCovarianceType::getPeAn() const {
  return peAn_Accessor;
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::setPeAn(xs::Double value) {
  peAn_Accessor = value;
  return *this;
}


xs::Double PositionAccelerationCovarianceType::getPeAe() const {
  return peAe_Accessor;
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::setPeAe(xs::Double value) {
  peAe_Accessor = value;
  return *this;
}


xs::Double PositionAccelerationCovarianceType::getPeAd() const {
  if (peAd_Accessor) {
    return *peAd_Accessor;
  }
  throw uci::base::UCIException("Error in getPeAd(): An attempt was made to get an optional field that was not enabled, call hasPeAd() to determine if it is safe to call getPeAd()");
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::setPeAd(xs::Double value) {
  peAd_Accessor = value;
  return *this;
}

bool PositionAccelerationCovarianceType::hasPeAd() const noexcept {
  return peAd_Accessor.has_value();
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::clearPeAd() noexcept {
  peAd_Accessor.reset();
  return *this;
}

xs::Double PositionAccelerationCovarianceType::getPdAn() const {
  if (pdAn_Accessor) {
    return *pdAn_Accessor;
  }
  throw uci::base::UCIException("Error in getPdAn(): An attempt was made to get an optional field that was not enabled, call hasPdAn() to determine if it is safe to call getPdAn()");
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::setPdAn(xs::Double value) {
  pdAn_Accessor = value;
  return *this;
}

bool PositionAccelerationCovarianceType::hasPdAn() const noexcept {
  return pdAn_Accessor.has_value();
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::clearPdAn() noexcept {
  pdAn_Accessor.reset();
  return *this;
}

xs::Double PositionAccelerationCovarianceType::getPdAe() const {
  if (pdAe_Accessor) {
    return *pdAe_Accessor;
  }
  throw uci::base::UCIException("Error in getPdAe(): An attempt was made to get an optional field that was not enabled, call hasPdAe() to determine if it is safe to call getPdAe()");
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::setPdAe(xs::Double value) {
  pdAe_Accessor = value;
  return *this;
}

bool PositionAccelerationCovarianceType::hasPdAe() const noexcept {
  return pdAe_Accessor.has_value();
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::clearPdAe() noexcept {
  pdAe_Accessor.reset();
  return *this;
}

xs::Double PositionAccelerationCovarianceType::getPdAd() const {
  if (pdAd_Accessor) {
    return *pdAd_Accessor;
  }
  throw uci::base::UCIException("Error in getPdAd(): An attempt was made to get an optional field that was not enabled, call hasPdAd() to determine if it is safe to call getPdAd()");
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::setPdAd(xs::Double value) {
  pdAd_Accessor = value;
  return *this;
}

bool PositionAccelerationCovarianceType::hasPdAd() const noexcept {
  return pdAd_Accessor.has_value();
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::clearPdAd() noexcept {
  pdAd_Accessor.reset();
  return *this;
}

std::unique_ptr<PositionAccelerationCovarianceType> PositionAccelerationCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionAccelerationCovarianceType : type};
  return (requestedType == uci::type::accessorType::positionAccelerationCovarianceType) ? boost::make_unique<PositionAccelerationCovarianceType>() : nullptr;
}

/**  */
namespace PositionAccelerationCovarianceType_Names {

constexpr const char* Extern_Type_Name{"PositionAccelerationCovarianceType"};
constexpr const char* PnAn_Name{"PnAn"};
constexpr const char* PnAe_Name{"PnAe"};
constexpr const char* PnAd_Name{"PnAd"};
constexpr const char* PeAn_Name{"PeAn"};
constexpr const char* PeAe_Name{"PeAe"};
constexpr const char* PeAd_Name{"PeAd"};
constexpr const char* PdAn_Name{"PdAn"};
constexpr const char* PdAe_Name{"PdAe"};
constexpr const char* PdAd_Name{"PdAd"};

} // namespace PositionAccelerationCovarianceType_Names

void PositionAccelerationCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PositionAccelerationCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PositionAccelerationCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PositionAccelerationCovarianceType_Names::PnAn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPnAn(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionAccelerationCovarianceType_Names::PnAe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPnAe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionAccelerationCovarianceType_Names::PnAd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPnAd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionAccelerationCovarianceType_Names::PeAn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeAn(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionAccelerationCovarianceType_Names::PeAe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeAe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionAccelerationCovarianceType_Names::PeAd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeAd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionAccelerationCovarianceType_Names::PdAn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPdAn(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionAccelerationCovarianceType_Names::PdAe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPdAe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionAccelerationCovarianceType_Names::PdAd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPdAd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string PositionAccelerationCovarianceType::serialize(const uci::type::PositionAccelerationCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PositionAccelerationCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PositionAccelerationCovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPnAn(), node, PositionAccelerationCovarianceType_Names::PnAn_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPnAe(), node, PositionAccelerationCovarianceType_Names::PnAe_Name);
  if (accessor.hasPnAd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPnAd(), node, PositionAccelerationCovarianceType_Names::PnAd_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPeAn(), node, PositionAccelerationCovarianceType_Names::PeAn_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPeAe(), node, PositionAccelerationCovarianceType_Names::PeAe_Name);
  if (accessor.hasPeAd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPeAd(), node, PositionAccelerationCovarianceType_Names::PeAd_Name);
  }
  if (accessor.hasPdAn()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPdAn(), node, PositionAccelerationCovarianceType_Names::PdAn_Name);
  }
  if (accessor.hasPdAe()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPdAe(), node, PositionAccelerationCovarianceType_Names::PdAe_Name);
  }
  if (accessor.hasPdAd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPdAd(), node, PositionAccelerationCovarianceType_Names::PdAd_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PositionAccelerationCovarianceType>().release());
}

uci::type::PositionAccelerationCovarianceType& PositionAccelerationCovarianceType::create(const uci::type::PositionAccelerationCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PositionAccelerationCovarianceType> newAccessor{boost::make_unique<asb_uci::type::PositionAccelerationCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PositionAccelerationCovarianceType::destroy(uci::type::PositionAccelerationCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::PositionAccelerationCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

