/** @file FGI_SourceOpenChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/FGI_SourceOpenChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FGI_SourceOpenEnum.h"
#include "../../../include/asb_uci/type/NATO_SpecialWordsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FGI_SourceOpenChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FGI_SourceOpenEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NATO_SpecialWordsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FGI_SourceOpenChoiceType::FGI_SourceOpenChoiceType() = default;

FGI_SourceOpenChoiceType::~FGI_SourceOpenChoiceType() = default;

void FGI_SourceOpenChoiceType::copy(const uci::type::FGI_SourceOpenChoiceType& accessor) {
  copyImpl(accessor, false);
}

void FGI_SourceOpenChoiceType::copyImpl(const uci::type::FGI_SourceOpenChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const FGI_SourceOpenChoiceType&>(accessor);
    if (accessorImpl.foreignGovernmentIdentifier_Accessor) {
      setForeignGovernmentIdentifier(*(accessorImpl.foreignGovernmentIdentifier_Accessor));
    } else {
      foreignGovernmentIdentifier_Accessor.reset();
    }
    if (accessorImpl.nATO_SpecialWord_Accessor) {
      setNATO_SpecialWord(*(accessorImpl.nATO_SpecialWord_Accessor));
    } else {
      nATO_SpecialWord_Accessor.reset();
    }
  }
}

void FGI_SourceOpenChoiceType::reset() noexcept {
  foreignGovernmentIdentifier_Accessor.reset();
  nATO_SpecialWord_Accessor.reset();
}

uci::type::FGI_SourceOpenChoiceType::FGI_SourceOpenChoiceTypeChoice FGI_SourceOpenChoiceType::getFGI_SourceOpenChoiceTypeChoiceOrdinal() const noexcept {
  if (foreignGovernmentIdentifier_Accessor) {
    return FGI_SOURCEOPENCHOICETYPE_CHOICE_FOREIGNGOVERNMENTIDENTIFIER;
  }
  if (nATO_SpecialWord_Accessor) {
    return FGI_SOURCEOPENCHOICETYPE_CHOICE_NATO_SPECIALWORD;
  }
  return FGI_SOURCEOPENCHOICETYPE_CHOICE_NONE;
}

uci::type::FGI_SourceOpenChoiceType& FGI_SourceOpenChoiceType::setFGI_SourceOpenChoiceTypeChoiceOrdinal(uci::type::FGI_SourceOpenChoiceType::FGI_SourceOpenChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case FGI_SOURCEOPENCHOICETYPE_CHOICE_FOREIGNGOVERNMENTIDENTIFIER:
      chooseForeignGovernmentIdentifier("setFGI_SourceOpenChoiceTypeChoiceOrdinal", type);
      break;
    case FGI_SOURCEOPENCHOICETYPE_CHOICE_NATO_SPECIALWORD:
      chooseNATO_SpecialWord("setFGI_SourceOpenChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setFGI_SourceOpenChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::FGI_SourceOpenEnum& FGI_SourceOpenChoiceType::getForeignGovernmentIdentifier_() const {
  if (foreignGovernmentIdentifier_Accessor) {
    return *foreignGovernmentIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getForeignGovernmentIdentifier(): Unable to get ForeignGovernmentIdentifier, field not selected");
}

const uci::type::FGI_SourceOpenEnum& FGI_SourceOpenChoiceType::getForeignGovernmentIdentifier() const {
  return getForeignGovernmentIdentifier_();
}

uci::type::FGI_SourceOpenEnum& FGI_SourceOpenChoiceType::getForeignGovernmentIdentifier() {
  return getForeignGovernmentIdentifier_();
}

uci::type::FGI_SourceOpenChoiceType& FGI_SourceOpenChoiceType::setForeignGovernmentIdentifier(const uci::type::FGI_SourceOpenEnum& accessor) {
  chooseForeignGovernmentIdentifier();
  if (&accessor != foreignGovernmentIdentifier_Accessor.get()) {
    foreignGovernmentIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FGI_SourceOpenChoiceType& FGI_SourceOpenChoiceType::setForeignGovernmentIdentifier(uci::type::FGI_SourceOpenEnum::EnumerationItem value) {
  chooseForeignGovernmentIdentifier().setValue(value);
  return *this;
}

bool FGI_SourceOpenChoiceType::isForeignGovernmentIdentifier() const noexcept {
  return static_cast<bool>(foreignGovernmentIdentifier_Accessor);
}

uci::type::FGI_SourceOpenEnum& FGI_SourceOpenChoiceType::chooseForeignGovernmentIdentifier(const std::string& method, uci::base::accessorType::AccessorType type) {
  nATO_SpecialWord_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fGI_SourceOpenEnum : type};
  if ((!foreignGovernmentIdentifier_Accessor) || (foreignGovernmentIdentifier_Accessor->getAccessorType() != requestedType)) {
    foreignGovernmentIdentifier_Accessor = FGI_SourceOpenEnum::create(type);
    if (!foreignGovernmentIdentifier_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *foreignGovernmentIdentifier_Accessor;
}

uci::type::FGI_SourceOpenEnum& FGI_SourceOpenChoiceType::chooseForeignGovernmentIdentifier(uci::base::accessorType::AccessorType type) {
  return chooseForeignGovernmentIdentifier("chooseForeignGovernmentIdentifier", type);
}

uci::type::NATO_SpecialWordsType& FGI_SourceOpenChoiceType::getNATO_SpecialWord_() const {
  if (nATO_SpecialWord_Accessor) {
    return *nATO_SpecialWord_Accessor;
  }
  throw uci::base::UCIException("Error in getNATO_SpecialWord(): An attempt was made to get an optional field that was not enabled, call hasNATO_SpecialWord() to determine if it is safe to call getNATO_SpecialWord()");
}

const uci::type::NATO_SpecialWordsType& FGI_SourceOpenChoiceType::getNATO_SpecialWord() const {
  return getNATO_SpecialWord_();
}

uci::type::NATO_SpecialWordsType& FGI_SourceOpenChoiceType::getNATO_SpecialWord() {
  return getNATO_SpecialWord_();
}

uci::type::FGI_SourceOpenChoiceType& FGI_SourceOpenChoiceType::setNATO_SpecialWord(const uci::type::NATO_SpecialWordsType& value) {
  return setNATO_SpecialWord(value.c_str());
}

uci::type::FGI_SourceOpenChoiceType& FGI_SourceOpenChoiceType::setNATO_SpecialWord(const std::string& value) {
  return setNATO_SpecialWord(value.c_str());
}

uci::type::FGI_SourceOpenChoiceType& FGI_SourceOpenChoiceType::setNATO_SpecialWord(const char * value) {
  chooseNATO_SpecialWord().setStringValue(value);
  return *this;
}

bool FGI_SourceOpenChoiceType::isNATO_SpecialWord() const noexcept {
  return static_cast<bool>(nATO_SpecialWord_Accessor);
}

uci::type::NATO_SpecialWordsType& FGI_SourceOpenChoiceType::chooseNATO_SpecialWord(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  foreignGovernmentIdentifier_Accessor.reset();
  if (!nATO_SpecialWord_Accessor) {
    nATO_SpecialWord_Accessor = NATO_SpecialWordsType::create(type);
  }
  return *nATO_SpecialWord_Accessor;
}

uci::type::NATO_SpecialWordsType& FGI_SourceOpenChoiceType::chooseNATO_SpecialWord(uci::base::accessorType::AccessorType type) {
  return chooseNATO_SpecialWord("chooseNATO_SpecialWord", type);
}

std::unique_ptr<FGI_SourceOpenChoiceType> FGI_SourceOpenChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fGI_SourceOpenChoiceType : type};
  return (requestedType == uci::type::accessorType::fGI_SourceOpenChoiceType) ? boost::make_unique<FGI_SourceOpenChoiceType>() : nullptr;
}

/**  */
namespace FGI_SourceOpenChoiceType_Names {

constexpr const char* Extern_Type_Name{"FGI_SourceOpenChoiceType"};
constexpr const char* ForeignGovernmentIdentifier_Name{"ForeignGovernmentIdentifier"};
constexpr const char* NATO_SpecialWord_Name{"NATO_SpecialWord"};

} // namespace FGI_SourceOpenChoiceType_Names

void FGI_SourceOpenChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FGI_SourceOpenChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FGI_SourceOpenChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FGI_SourceOpenChoiceType_Names::ForeignGovernmentIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseForeignGovernmentIdentifier().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FGI_SourceOpenChoiceType_Names::NATO_SpecialWord_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseNATO_SpecialWord().setStringValue(*value);
      }
    }
  }
}

std::string FGI_SourceOpenChoiceType::serialize(const uci::type::FGI_SourceOpenChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FGI_SourceOpenChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FGI_SourceOpenChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isForeignGovernmentIdentifier()) {
    FGI_SourceOpenEnum::serialize(accessor.getForeignGovernmentIdentifier(), node, FGI_SourceOpenChoiceType_Names::ForeignGovernmentIdentifier_Name, false);
  } else if (accessor.isNATO_SpecialWord()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getNATO_SpecialWord(), node, FGI_SourceOpenChoiceType_Names::NATO_SpecialWord_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FGI_SourceOpenChoiceType& FGI_SourceOpenChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FGI_SourceOpenChoiceType>().release());
}

uci::type::FGI_SourceOpenChoiceType& FGI_SourceOpenChoiceType::create(const uci::type::FGI_SourceOpenChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FGI_SourceOpenChoiceType> newAccessor{boost::make_unique<asb_uci::type::FGI_SourceOpenChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FGI_SourceOpenChoiceType::destroy(uci::type::FGI_SourceOpenChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::FGI_SourceOpenChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

