/** @file SOB_C2_RecordBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SOB_C2_RecordBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EOB_RecordID_Type.h"
#include "asb_uci/type/FileMetadataID_Type.h"
#include "asb_uci/type/OB_OperationalStatusEnum.h"
#include "asb_uci/type/OB_SensorType.h"
#include "asb_uci/type/OrderOfBattleC2_EmitterType.h"
#include "asb_uci/type/OrderOfBattleTimestampsType.h"
#include "asb_uci/type/Point2D_Type.h"
#include "asb_uci/type/ProductMetadataID_Type.h"
#include "asb_uci/type/SOB_C2_RecordID_Type.h"
#include "asb_uci/type/SOB_C2_RecordRemoveInfoType.h"
#include "asb_uci/type/SOB_SatelliteRecordID_Type.h"
#include "asb_uci/type/SatelliteC2_IdentityType.h"
#include "asb_uci/type/VisibleString512Type.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EOB_RecordID_Type.h"
#include "uci/type/FileMetadataID_Type.h"
#include "uci/type/OB_OperationalStatusEnum.h"
#include "uci/type/OB_SensorType.h"
#include "uci/type/OrderOfBattleC2_EmitterType.h"
#include "uci/type/OrderOfBattleTimestampsType.h"
#include "uci/type/Point2D_Type.h"
#include "uci/type/ProductMetadataID_Type.h"
#include "uci/type/SOB_C2_RecordBaseType.h"
#include "uci/type/SOB_C2_RecordID_Type.h"
#include "uci/type/SOB_C2_RecordRemoveInfoType.h"
#include "uci/type/SOB_SatelliteRecordID_Type.h"
#include "uci/type/SatelliteC2_IdentityType.h"
#include "uci/type/VisibleString512Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SOB_C2_RecordBaseType::SOB_C2_RecordBaseType()
  : sOB_C2_RecordID_Accessor{boost::make_unique<SOB_C2_RecordID_Type>()},
    controlledSatelliteID_Accessor{boost::make_unique<ControlledSatelliteID>(0, SIZE_MAX)},
    subordinateC2_ID_Accessor{boost::make_unique<SubordinateC2_ID>(0, SIZE_MAX)},
    operationalStatus_Accessor{boost::make_unique<OperationalStatus>(0, 24)},
    productID_Accessor{boost::make_unique<ProductID>(0, SIZE_MAX)},
    fileID_Accessor{boost::make_unique<FileID>(0, SIZE_MAX)},
    emitter_Accessor{boost::make_unique<Emitter>(0, SIZE_MAX)},
    sensor_Accessor{boost::make_unique<Sensor>(0, SIZE_MAX)} {
}

SOB_C2_RecordBaseType::~SOB_C2_RecordBaseType() = default;

void SOB_C2_RecordBaseType::copy(const uci::type::SOB_C2_RecordBaseType& accessor) {
  copyImpl(accessor, false);
}

void SOB_C2_RecordBaseType::copyImpl(const uci::type::SOB_C2_RecordBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::sOB_C2_RecordBaseType)) {
      const auto& accessorImpl = dynamic_cast<const SOB_C2_RecordBaseType&>(accessor);
      setSOB_C2_RecordID(*(accessorImpl.sOB_C2_RecordID_Accessor));
      if (accessorImpl.eOB_RecordID_Accessor) {
        setEOB_RecordID(*(accessorImpl.eOB_RecordID_Accessor));
      } else {
        eOB_RecordID_Accessor.reset();
      }
      if (accessorImpl.identity_Accessor) {
        setIdentity(*(accessorImpl.identity_Accessor));
      } else {
        identity_Accessor.reset();
      }
      if (accessorImpl.location_Accessor) {
        setLocation(*(accessorImpl.location_Accessor));
      } else {
        location_Accessor.reset();
      }
      if (accessorImpl.timestamps_Accessor) {
        setTimestamps(*(accessorImpl.timestamps_Accessor));
      } else {
        timestamps_Accessor.reset();
      }
      setControlledSatelliteID(*(accessorImpl.controlledSatelliteID_Accessor));
      setSubordinateC2_ID(*(accessorImpl.subordinateC2_ID_Accessor));
      setOperationalStatus(*(accessorImpl.operationalStatus_Accessor));
      setProductID(*(accessorImpl.productID_Accessor));
      setFileID(*(accessorImpl.fileID_Accessor));
      if (accessorImpl.removeInfo_Accessor) {
        setRemoveInfo(*(accessorImpl.removeInfo_Accessor));
      } else {
        removeInfo_Accessor.reset();
      }
      setEmitter(*(accessorImpl.emitter_Accessor));
      setSensor(*(accessorImpl.sensor_Accessor));
      if (accessorImpl.remarksText_Accessor) {
        setRemarksText(*(accessorImpl.remarksText_Accessor));
      } else {
        remarksText_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void SOB_C2_RecordBaseType::reset() noexcept {
  sOB_C2_RecordID_Accessor->reset();
  eOB_RecordID_Accessor.reset();
  identity_Accessor.reset();
  location_Accessor.reset();
  timestamps_Accessor.reset();
  controlledSatelliteID_Accessor->reset();
  subordinateC2_ID_Accessor->reset();
  operationalStatus_Accessor->reset();
  productID_Accessor->reset();
  fileID_Accessor->reset();
  removeInfo_Accessor.reset();
  emitter_Accessor->reset();
  sensor_Accessor->reset();
  remarksText_Accessor.reset();
}

const uci::type::SOB_C2_RecordID_Type& SOB_C2_RecordBaseType::getSOB_C2_RecordID() const {
  return *sOB_C2_RecordID_Accessor;
}

uci::type::SOB_C2_RecordID_Type& SOB_C2_RecordBaseType::getSOB_C2_RecordID() {
  return *sOB_C2_RecordID_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setSOB_C2_RecordID(const uci::type::SOB_C2_RecordID_Type& accessor) {
  if (&accessor != sOB_C2_RecordID_Accessor.get()) {
    sOB_C2_RecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EOB_RecordID_Type& SOB_C2_RecordBaseType::getEOB_RecordID_() const {
  if (eOB_RecordID_Accessor) {
    return *eOB_RecordID_Accessor;
  }
  throw uci::base::UCIException("Error in getEOB_RecordID(): An attempt was made to get an optional field that was not enabled, call hasEOB_RecordID() to determine if it is safe to call getEOB_RecordID()");
}

const uci::type::EOB_RecordID_Type& SOB_C2_RecordBaseType::getEOB_RecordID() const {
  return getEOB_RecordID_();
}

uci::type::EOB_RecordID_Type& SOB_C2_RecordBaseType::getEOB_RecordID() {
  return getEOB_RecordID_();
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setEOB_RecordID(const uci::type::EOB_RecordID_Type& accessor) {
  enableEOB_RecordID();
  if (&accessor != eOB_RecordID_Accessor.get()) {
    eOB_RecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_C2_RecordBaseType::hasEOB_RecordID() const noexcept {
  return static_cast<bool>(eOB_RecordID_Accessor);
}

uci::type::EOB_RecordID_Type& SOB_C2_RecordBaseType::enableEOB_RecordID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_RecordID_Type : type};
  if ((!eOB_RecordID_Accessor) || (eOB_RecordID_Accessor->getAccessorType() != requestedType)) {
    eOB_RecordID_Accessor = EOB_RecordID_Type::create(requestedType);
    if (!eOB_RecordID_Accessor) {
      throw uci::base::UCIException("Error in enableEOB_RecordID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eOB_RecordID_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::clearEOB_RecordID() noexcept {
  eOB_RecordID_Accessor.reset();
  return *this;
}

uci::type::SatelliteC2_IdentityType& SOB_C2_RecordBaseType::getIdentity_() const {
  if (identity_Accessor) {
    return *identity_Accessor;
  }
  throw uci::base::UCIException("Error in getIdentity(): An attempt was made to get an optional field that was not enabled, call hasIdentity() to determine if it is safe to call getIdentity()");
}

const uci::type::SatelliteC2_IdentityType& SOB_C2_RecordBaseType::getIdentity() const {
  return getIdentity_();
}

uci::type::SatelliteC2_IdentityType& SOB_C2_RecordBaseType::getIdentity() {
  return getIdentity_();
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setIdentity(const uci::type::SatelliteC2_IdentityType& accessor) {
  enableIdentity();
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_C2_RecordBaseType::hasIdentity() const noexcept {
  return static_cast<bool>(identity_Accessor);
}

uci::type::SatelliteC2_IdentityType& SOB_C2_RecordBaseType::enableIdentity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteC2_IdentityType : type};
  if ((!identity_Accessor) || (identity_Accessor->getAccessorType() != requestedType)) {
    identity_Accessor = SatelliteC2_IdentityType::create(requestedType);
    if (!identity_Accessor) {
      throw uci::base::UCIException("Error in enableIdentity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *identity_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::clearIdentity() noexcept {
  identity_Accessor.reset();
  return *this;
}

uci::type::Point2D_Type& SOB_C2_RecordBaseType::getLocation_() const {
  if (location_Accessor) {
    return *location_Accessor;
  }
  throw uci::base::UCIException("Error in getLocation(): An attempt was made to get an optional field that was not enabled, call hasLocation() to determine if it is safe to call getLocation()");
}

const uci::type::Point2D_Type& SOB_C2_RecordBaseType::getLocation() const {
  return getLocation_();
}

uci::type::Point2D_Type& SOB_C2_RecordBaseType::getLocation() {
  return getLocation_();
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setLocation(const uci::type::Point2D_Type& accessor) {
  enableLocation(accessor.getAccessorType());
  if (&accessor != location_Accessor.get()) {
    location_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SOB_C2_RecordBaseType::hasLocation() const noexcept {
  return static_cast<bool>(location_Accessor);
}

uci::type::Point2D_Type& SOB_C2_RecordBaseType::enableLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!location_Accessor) || (location_Accessor->getAccessorType() != requestedType)) {
    location_Accessor = Point2D_Type::create(requestedType);
    if (!location_Accessor) {
      throw uci::base::UCIException("Error in enableLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *location_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::clearLocation() noexcept {
  location_Accessor.reset();
  return *this;
}

uci::type::OrderOfBattleTimestampsType& SOB_C2_RecordBaseType::getTimestamps_() const {
  if (timestamps_Accessor) {
    return *timestamps_Accessor;
  }
  throw uci::base::UCIException("Error in getTimestamps(): An attempt was made to get an optional field that was not enabled, call hasTimestamps() to determine if it is safe to call getTimestamps()");
}

const uci::type::OrderOfBattleTimestampsType& SOB_C2_RecordBaseType::getTimestamps() const {
  return getTimestamps_();
}

uci::type::OrderOfBattleTimestampsType& SOB_C2_RecordBaseType::getTimestamps() {
  return getTimestamps_();
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setTimestamps(const uci::type::OrderOfBattleTimestampsType& accessor) {
  enableTimestamps();
  if (&accessor != timestamps_Accessor.get()) {
    timestamps_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_C2_RecordBaseType::hasTimestamps() const noexcept {
  return static_cast<bool>(timestamps_Accessor);
}

uci::type::OrderOfBattleTimestampsType& SOB_C2_RecordBaseType::enableTimestamps(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orderOfBattleTimestampsType : type};
  if ((!timestamps_Accessor) || (timestamps_Accessor->getAccessorType() != requestedType)) {
    timestamps_Accessor = OrderOfBattleTimestampsType::create(requestedType);
    if (!timestamps_Accessor) {
      throw uci::base::UCIException("Error in enableTimestamps(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timestamps_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::clearTimestamps() noexcept {
  timestamps_Accessor.reset();
  return *this;
}

const uci::type::SOB_C2_RecordBaseType::ControlledSatelliteID& SOB_C2_RecordBaseType::getControlledSatelliteID() const {
  return *controlledSatelliteID_Accessor;
}

uci::type::SOB_C2_RecordBaseType::ControlledSatelliteID& SOB_C2_RecordBaseType::getControlledSatelliteID() {
  return *controlledSatelliteID_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setControlledSatelliteID(const uci::type::SOB_C2_RecordBaseType::ControlledSatelliteID& accessor) {
  if (&accessor != controlledSatelliteID_Accessor.get()) {
    controlledSatelliteID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SOB_C2_RecordBaseType::SubordinateC2_ID& SOB_C2_RecordBaseType::getSubordinateC2_ID() const {
  return *subordinateC2_ID_Accessor;
}

uci::type::SOB_C2_RecordBaseType::SubordinateC2_ID& SOB_C2_RecordBaseType::getSubordinateC2_ID() {
  return *subordinateC2_ID_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setSubordinateC2_ID(const uci::type::SOB_C2_RecordBaseType::SubordinateC2_ID& accessor) {
  if (&accessor != subordinateC2_ID_Accessor.get()) {
    subordinateC2_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SOB_C2_RecordBaseType::OperationalStatus& SOB_C2_RecordBaseType::getOperationalStatus() const {
  return *operationalStatus_Accessor;
}

uci::type::SOB_C2_RecordBaseType::OperationalStatus& SOB_C2_RecordBaseType::getOperationalStatus() {
  return *operationalStatus_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setOperationalStatus(const uci::type::SOB_C2_RecordBaseType::OperationalStatus& accessor) {
  if (&accessor != operationalStatus_Accessor.get()) {
    operationalStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SOB_C2_RecordBaseType::ProductID& SOB_C2_RecordBaseType::getProductID() const {
  return *productID_Accessor;
}

uci::type::SOB_C2_RecordBaseType::ProductID& SOB_C2_RecordBaseType::getProductID() {
  return *productID_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setProductID(const uci::type::SOB_C2_RecordBaseType::ProductID& accessor) {
  if (&accessor != productID_Accessor.get()) {
    productID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SOB_C2_RecordBaseType::FileID& SOB_C2_RecordBaseType::getFileID() const {
  return *fileID_Accessor;
}

uci::type::SOB_C2_RecordBaseType::FileID& SOB_C2_RecordBaseType::getFileID() {
  return *fileID_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setFileID(const uci::type::SOB_C2_RecordBaseType::FileID& accessor) {
  if (&accessor != fileID_Accessor.get()) {
    fileID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SOB_C2_RecordRemoveInfoType& SOB_C2_RecordBaseType::getRemoveInfo_() const {
  if (removeInfo_Accessor) {
    return *removeInfo_Accessor;
  }
  throw uci::base::UCIException("Error in getRemoveInfo(): An attempt was made to get an optional field that was not enabled, call hasRemoveInfo() to determine if it is safe to call getRemoveInfo()");
}

const uci::type::SOB_C2_RecordRemoveInfoType& SOB_C2_RecordBaseType::getRemoveInfo() const {
  return getRemoveInfo_();
}

uci::type::SOB_C2_RecordRemoveInfoType& SOB_C2_RecordBaseType::getRemoveInfo() {
  return getRemoveInfo_();
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setRemoveInfo(const uci::type::SOB_C2_RecordRemoveInfoType& accessor) {
  enableRemoveInfo();
  if (&accessor != removeInfo_Accessor.get()) {
    removeInfo_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_C2_RecordBaseType::hasRemoveInfo() const noexcept {
  return static_cast<bool>(removeInfo_Accessor);
}

uci::type::SOB_C2_RecordRemoveInfoType& SOB_C2_RecordBaseType::enableRemoveInfo(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_C2_RecordRemoveInfoType : type};
  if ((!removeInfo_Accessor) || (removeInfo_Accessor->getAccessorType() != requestedType)) {
    removeInfo_Accessor = SOB_C2_RecordRemoveInfoType::create(requestedType);
    if (!removeInfo_Accessor) {
      throw uci::base::UCIException("Error in enableRemoveInfo(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *removeInfo_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::clearRemoveInfo() noexcept {
  removeInfo_Accessor.reset();
  return *this;
}

const uci::type::SOB_C2_RecordBaseType::Emitter& SOB_C2_RecordBaseType::getEmitter() const {
  return *emitter_Accessor;
}

uci::type::SOB_C2_RecordBaseType::Emitter& SOB_C2_RecordBaseType::getEmitter() {
  return *emitter_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setEmitter(const uci::type::SOB_C2_RecordBaseType::Emitter& accessor) {
  if (&accessor != emitter_Accessor.get()) {
    emitter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SOB_C2_RecordBaseType::Sensor& SOB_C2_RecordBaseType::getSensor() const {
  return *sensor_Accessor;
}

uci::type::SOB_C2_RecordBaseType::Sensor& SOB_C2_RecordBaseType::getSensor() {
  return *sensor_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setSensor(const uci::type::SOB_C2_RecordBaseType::Sensor& accessor) {
  if (&accessor != sensor_Accessor.get()) {
    sensor_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VisibleString512Type& SOB_C2_RecordBaseType::getRemarksText_() const {
  if (remarksText_Accessor) {
    return *remarksText_Accessor;
  }
  throw uci::base::UCIException("Error in getRemarksText(): An attempt was made to get an optional field that was not enabled, call hasRemarksText() to determine if it is safe to call getRemarksText()");
}

const uci::type::VisibleString512Type& SOB_C2_RecordBaseType::getRemarksText() const {
  return getRemarksText_();
}

uci::type::VisibleString512Type& SOB_C2_RecordBaseType::getRemarksText() {
  return getRemarksText_();
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setRemarksText(const uci::type::VisibleString512Type& value) {
  return setRemarksText(value.c_str());
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setRemarksText(const std::string& value) {
  return setRemarksText(value.c_str());
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::setRemarksText(const char* value) {
  enableRemarksText().setStringValue(value);
  return *this;
}

bool SOB_C2_RecordBaseType::hasRemarksText() const noexcept {
  return static_cast<bool>(remarksText_Accessor);
}

uci::type::VisibleString512Type& SOB_C2_RecordBaseType::enableRemarksText(uci::base::accessorType::AccessorType type) {
  if (!remarksText_Accessor) {
    remarksText_Accessor = VisibleString512Type::create(type);
  }
  return *remarksText_Accessor;
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::clearRemarksText() noexcept {
  remarksText_Accessor.reset();
  return *this;
}

std::unique_ptr<SOB_C2_RecordBaseType> SOB_C2_RecordBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_C2_RecordBaseType : type};
  return std::unique_ptr<SOB_C2_RecordBaseType>(dynamic_cast<SOB_C2_RecordBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace SOB_C2_RecordBaseType_Names {

constexpr const char* Extern_Type_Name{"SOB_C2_RecordBaseType"};
constexpr const char* SOB_C2_RecordID_Name{"SOB_C2_RecordID"};
constexpr const char* EOB_RecordID_Name{"EOB_RecordID"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* Location_Name{"Location"};
constexpr const char* Timestamps_Name{"Timestamps"};
constexpr const char* ControlledSatelliteID_Name{"ControlledSatelliteID"};
constexpr const char* SubordinateC2_ID_Name{"SubordinateC2_ID"};
constexpr const char* OperationalStatus_Name{"OperationalStatus"};
constexpr const char* ProductID_Name{"ProductID"};
constexpr const char* FileID_Name{"FileID"};
constexpr const char* RemoveInfo_Name{"RemoveInfo"};
constexpr const char* Emitter_Name{"Emitter"};
constexpr const char* Sensor_Name{"Sensor"};
constexpr const char* RemarksText_Name{"RemarksText"};

} // namespace SOB_C2_RecordBaseType_Names

void SOB_C2_RecordBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SOB_C2_RecordBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SOB_C2_RecordBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::SOB_C2_RecordID_Name) {
      SOB_C2_RecordID_Type::deserialize(valueType.second, accessor.getSOB_C2_RecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::EOB_RecordID_Name) {
      EOB_RecordID_Type::deserialize(valueType.second, accessor.enableEOB_RecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::Identity_Name) {
      SatelliteC2_IdentityType::deserialize(valueType.second, accessor.enableIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::Location_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableLocation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::Timestamps_Name) {
      OrderOfBattleTimestampsType::deserialize(valueType.second, accessor.enableTimestamps(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::ControlledSatelliteID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_C2_RecordBaseType::ControlledSatelliteID& boundedList = accessor.getControlledSatelliteID();
        const uci::type::SOB_C2_RecordBaseType::ControlledSatelliteID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SOB_SatelliteRecordID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::SubordinateC2_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_C2_RecordBaseType::SubordinateC2_ID& boundedList = accessor.getSubordinateC2_ID();
        const uci::type::SOB_C2_RecordBaseType::SubordinateC2_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SOB_C2_RecordID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::OperationalStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_C2_RecordBaseType::OperationalStatus& boundedList = accessor.getOperationalStatus();
        const uci::type::SOB_C2_RecordBaseType::OperationalStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::ProductID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_C2_RecordBaseType::ProductID& boundedList = accessor.getProductID();
        const uci::type::SOB_C2_RecordBaseType::ProductID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::FileID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_C2_RecordBaseType::FileID& boundedList = accessor.getFileID();
        const uci::type::SOB_C2_RecordBaseType::FileID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::RemoveInfo_Name) {
      SOB_C2_RecordRemoveInfoType::deserialize(valueType.second, accessor.enableRemoveInfo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::Emitter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_C2_RecordBaseType::Emitter& boundedList = accessor.getEmitter();
        const uci::type::SOB_C2_RecordBaseType::Emitter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrderOfBattleC2_EmitterType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::Sensor_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_C2_RecordBaseType::Sensor& boundedList = accessor.getSensor();
        const uci::type::SOB_C2_RecordBaseType::Sensor::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OB_SensorType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_C2_RecordBaseType_Names::RemarksText_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRemarksText(*value);
      }
    }
  }
}

std::string SOB_C2_RecordBaseType::serialize(const uci::type::SOB_C2_RecordBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SOB_C2_RecordBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::sOB_C2_RecordBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, SOB_C2_RecordBaseType_Names::Extern_Type_Name);
    }
    SOB_C2_RecordID_Type::serialize(accessor.getSOB_C2_RecordID(), node, SOB_C2_RecordBaseType_Names::SOB_C2_RecordID_Name);
    if (accessor.hasEOB_RecordID()) {
      EOB_RecordID_Type::serialize(accessor.getEOB_RecordID(), node, SOB_C2_RecordBaseType_Names::EOB_RecordID_Name);
    }
    if (accessor.hasIdentity()) {
      SatelliteC2_IdentityType::serialize(accessor.getIdentity(), node, SOB_C2_RecordBaseType_Names::Identity_Name);
    }
    if (accessor.hasLocation()) {
      Point2D_Type::serialize(accessor.getLocation(), node, SOB_C2_RecordBaseType_Names::Location_Name);
    }
    if (accessor.hasTimestamps()) {
      OrderOfBattleTimestampsType::serialize(accessor.getTimestamps(), node, SOB_C2_RecordBaseType_Names::Timestamps_Name);
    }
    {
      const uci::type::SOB_C2_RecordBaseType::ControlledSatelliteID& boundedList = accessor.getControlledSatelliteID();
      for (uci::type::SOB_C2_RecordBaseType::ControlledSatelliteID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SOB_SatelliteRecordID_Type::serialize(boundedList.at(i), node, SOB_C2_RecordBaseType_Names::ControlledSatelliteID_Name);
      }
    }
    {
      const uci::type::SOB_C2_RecordBaseType::SubordinateC2_ID& boundedList = accessor.getSubordinateC2_ID();
      for (uci::type::SOB_C2_RecordBaseType::SubordinateC2_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SOB_C2_RecordID_Type::serialize(boundedList.at(i), node, SOB_C2_RecordBaseType_Names::SubordinateC2_ID_Name);
      }
    }
    {
      const uci::type::SOB_C2_RecordBaseType::OperationalStatus& boundedList = accessor.getOperationalStatus();
      for (uci::type::SOB_C2_RecordBaseType::OperationalStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        OB_OperationalStatusEnum::serialize(boundedList.at(i), node, SOB_C2_RecordBaseType_Names::OperationalStatus_Name, false);
      }
    }
    {
      const uci::type::SOB_C2_RecordBaseType::ProductID& boundedList = accessor.getProductID();
      for (uci::type::SOB_C2_RecordBaseType::ProductID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ProductMetadataID_Type::serialize(boundedList.at(i), node, SOB_C2_RecordBaseType_Names::ProductID_Name);
      }
    }
    {
      const uci::type::SOB_C2_RecordBaseType::FileID& boundedList = accessor.getFileID();
      for (uci::type::SOB_C2_RecordBaseType::FileID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, SOB_C2_RecordBaseType_Names::FileID_Name);
      }
    }
    if (accessor.hasRemoveInfo()) {
      SOB_C2_RecordRemoveInfoType::serialize(accessor.getRemoveInfo(), node, SOB_C2_RecordBaseType_Names::RemoveInfo_Name);
    }
    {
      const uci::type::SOB_C2_RecordBaseType::Emitter& boundedList = accessor.getEmitter();
      for (uci::type::SOB_C2_RecordBaseType::Emitter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::OrderOfBattleC2_EmitterType::serialize(boundedList.at(i), node, SOB_C2_RecordBaseType_Names::Emitter_Name);
      }
    }
    {
      const uci::type::SOB_C2_RecordBaseType::Sensor& boundedList = accessor.getSensor();
      for (uci::type::SOB_C2_RecordBaseType::Sensor::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::OB_SensorType::serialize(boundedList.at(i), node, SOB_C2_RecordBaseType_Names::Sensor_Name);
      }
    }
    if (accessor.hasRemarksText()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getRemarksText(), node, SOB_C2_RecordBaseType_Names::RemarksText_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SOB_C2_RecordBaseType>().release());
}

uci::type::SOB_C2_RecordBaseType& SOB_C2_RecordBaseType::create(const uci::type::SOB_C2_RecordBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SOB_C2_RecordBaseType> newAccessor{boost::make_unique<asb_uci::type::SOB_C2_RecordBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SOB_C2_RecordBaseType::destroy(uci::type::SOB_C2_RecordBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::SOB_C2_RecordBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

