/** @file SubsystemMaintenanceStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SubsystemMaintenanceStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CompletionStatusType.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/type/SubsystemMaintenanceStatusType.h"
#include "asb_uci/type/SubsystemMaintenanceTestResultType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CompletionStatusType.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SubsystemMaintenanceStatusMDT.h"
#include "uci/type/SubsystemMaintenanceStatusType.h"
#include "uci/type/SubsystemMaintenanceTestResultType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemMaintenanceStatusMDT::SubsystemMaintenanceStatusMDT()
  : subsystemID_Accessor{boost::make_unique<SubsystemID_Type>()},
    currentTest_Accessor{boost::make_unique<CurrentTest>(0, SIZE_MAX)},
    completedTest_Accessor{boost::make_unique<CompletedTest>(0, SIZE_MAX)} {
}

SubsystemMaintenanceStatusMDT::~SubsystemMaintenanceStatusMDT() = default;

void SubsystemMaintenanceStatusMDT::copy(const uci::type::SubsystemMaintenanceStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void SubsystemMaintenanceStatusMDT::copyImpl(const uci::type::SubsystemMaintenanceStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SubsystemMaintenanceStatusMDT&>(accessor);
    if (accessorImpl.maintenanceCommandInformation_Accessor) {
      setMaintenanceCommandInformation(*(accessorImpl.maintenanceCommandInformation_Accessor));
    } else {
      maintenanceCommandInformation_Accessor.reset();
    }
    setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    if (accessorImpl.overallStatus_Accessor) {
      setOverallStatus(*(accessorImpl.overallStatus_Accessor));
    } else {
      overallStatus_Accessor.reset();
    }
    setCurrentTest(*(accessorImpl.currentTest_Accessor));
    setCompletedTest(*(accessorImpl.completedTest_Accessor));
  }
}

void SubsystemMaintenanceStatusMDT::reset() noexcept {
  maintenanceCommandInformation_Accessor.reset();
  subsystemID_Accessor->reset();
  overallStatus_Accessor.reset();
  currentTest_Accessor->reset();
  completedTest_Accessor->reset();
}

uci::type::SubsystemMaintenanceStatusType& SubsystemMaintenanceStatusMDT::getMaintenanceCommandInformation_() const {
  if (maintenanceCommandInformation_Accessor) {
    return *maintenanceCommandInformation_Accessor;
  }
  throw uci::base::UCIException("Error in getMaintenanceCommandInformation(): An attempt was made to get an optional field that was not enabled, call hasMaintenanceCommandInformation() to determine if it is safe to call getMaintenanceCommandInformation()");
}

const uci::type::SubsystemMaintenanceStatusType& SubsystemMaintenanceStatusMDT::getMaintenanceCommandInformation() const {
  return getMaintenanceCommandInformation_();
}

uci::type::SubsystemMaintenanceStatusType& SubsystemMaintenanceStatusMDT::getMaintenanceCommandInformation() {
  return getMaintenanceCommandInformation_();
}

uci::type::SubsystemMaintenanceStatusMDT& SubsystemMaintenanceStatusMDT::setMaintenanceCommandInformation(const uci::type::SubsystemMaintenanceStatusType& accessor) {
  enableMaintenanceCommandInformation();
  if (&accessor != maintenanceCommandInformation_Accessor.get()) {
    maintenanceCommandInformation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubsystemMaintenanceStatusMDT::hasMaintenanceCommandInformation() const noexcept {
  return static_cast<bool>(maintenanceCommandInformation_Accessor);
}

uci::type::SubsystemMaintenanceStatusType& SubsystemMaintenanceStatusMDT::enableMaintenanceCommandInformation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemMaintenanceStatusType : type};
  if ((!maintenanceCommandInformation_Accessor) || (maintenanceCommandInformation_Accessor->getAccessorType() != requestedType)) {
    maintenanceCommandInformation_Accessor = SubsystemMaintenanceStatusType::create(requestedType);
    if (!maintenanceCommandInformation_Accessor) {
      throw uci::base::UCIException("Error in enableMaintenanceCommandInformation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *maintenanceCommandInformation_Accessor;
}

uci::type::SubsystemMaintenanceStatusMDT& SubsystemMaintenanceStatusMDT::clearMaintenanceCommandInformation() noexcept {
  maintenanceCommandInformation_Accessor.reset();
  return *this;
}

const uci::type::SubsystemID_Type& SubsystemMaintenanceStatusMDT::getSubsystemID() const {
  return *subsystemID_Accessor;
}

uci::type::SubsystemID_Type& SubsystemMaintenanceStatusMDT::getSubsystemID() {
  return *subsystemID_Accessor;
}

uci::type::SubsystemMaintenanceStatusMDT& SubsystemMaintenanceStatusMDT::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CompletionStatusType& SubsystemMaintenanceStatusMDT::getOverallStatus_() const {
  if (overallStatus_Accessor) {
    return *overallStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getOverallStatus(): An attempt was made to get an optional field that was not enabled, call hasOverallStatus() to determine if it is safe to call getOverallStatus()");
}

const uci::type::CompletionStatusType& SubsystemMaintenanceStatusMDT::getOverallStatus() const {
  return getOverallStatus_();
}

uci::type::CompletionStatusType& SubsystemMaintenanceStatusMDT::getOverallStatus() {
  return getOverallStatus_();
}

uci::type::SubsystemMaintenanceStatusMDT& SubsystemMaintenanceStatusMDT::setOverallStatus(const uci::type::CompletionStatusType& accessor) {
  enableOverallStatus();
  if (&accessor != overallStatus_Accessor.get()) {
    overallStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubsystemMaintenanceStatusMDT::hasOverallStatus() const noexcept {
  return static_cast<bool>(overallStatus_Accessor);
}

uci::type::CompletionStatusType& SubsystemMaintenanceStatusMDT::enableOverallStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::completionStatusType : type};
  if ((!overallStatus_Accessor) || (overallStatus_Accessor->getAccessorType() != requestedType)) {
    overallStatus_Accessor = CompletionStatusType::create(requestedType);
    if (!overallStatus_Accessor) {
      throw uci::base::UCIException("Error in enableOverallStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *overallStatus_Accessor;
}

uci::type::SubsystemMaintenanceStatusMDT& SubsystemMaintenanceStatusMDT::clearOverallStatus() noexcept {
  overallStatus_Accessor.reset();
  return *this;
}

const uci::type::SubsystemMaintenanceStatusMDT::CurrentTest& SubsystemMaintenanceStatusMDT::getCurrentTest() const {
  return *currentTest_Accessor;
}

uci::type::SubsystemMaintenanceStatusMDT::CurrentTest& SubsystemMaintenanceStatusMDT::getCurrentTest() {
  return *currentTest_Accessor;
}

uci::type::SubsystemMaintenanceStatusMDT& SubsystemMaintenanceStatusMDT::setCurrentTest(const uci::type::SubsystemMaintenanceStatusMDT::CurrentTest& accessor) {
  if (&accessor != currentTest_Accessor.get()) {
    currentTest_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemMaintenanceStatusMDT::CompletedTest& SubsystemMaintenanceStatusMDT::getCompletedTest() const {
  return *completedTest_Accessor;
}

uci::type::SubsystemMaintenanceStatusMDT::CompletedTest& SubsystemMaintenanceStatusMDT::getCompletedTest() {
  return *completedTest_Accessor;
}

uci::type::SubsystemMaintenanceStatusMDT& SubsystemMaintenanceStatusMDT::setCompletedTest(const uci::type::SubsystemMaintenanceStatusMDT::CompletedTest& accessor) {
  if (&accessor != completedTest_Accessor.get()) {
    completedTest_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<SubsystemMaintenanceStatusMDT> SubsystemMaintenanceStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemMaintenanceStatusMDT : type};
  return (requestedType == uci::type::accessorType::subsystemMaintenanceStatusMDT) ? boost::make_unique<SubsystemMaintenanceStatusMDT>() : nullptr;
}

/**  */
namespace SubsystemMaintenanceStatusMDT_Names {

constexpr const char* Extern_Type_Name{"SubsystemMaintenanceStatusMDT"};
constexpr const char* MaintenanceCommandInformation_Name{"MaintenanceCommandInformation"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* OverallStatus_Name{"OverallStatus"};
constexpr const char* CurrentTest_Name{"CurrentTest"};
constexpr const char* CompletedTest_Name{"CompletedTest"};

} // namespace SubsystemMaintenanceStatusMDT_Names

void SubsystemMaintenanceStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemMaintenanceStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemMaintenanceStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceStatusMDT_Names::MaintenanceCommandInformation_Name) {
      SubsystemMaintenanceStatusType::deserialize(valueType.second, accessor.enableMaintenanceCommandInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceStatusMDT_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.getSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceStatusMDT_Names::OverallStatus_Name) {
      CompletionStatusType::deserialize(valueType.second, accessor.enableOverallStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceStatusMDT_Names::CurrentTest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemMaintenanceStatusMDT::CurrentTest& boundedList = accessor.getCurrentTest();
        const uci::type::SubsystemMaintenanceStatusMDT::CurrentTest::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SubsystemMaintenanceTestResultType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceStatusMDT_Names::CompletedTest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemMaintenanceStatusMDT::CompletedTest& boundedList = accessor.getCompletedTest();
        const uci::type::SubsystemMaintenanceStatusMDT::CompletedTest::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SubsystemMaintenanceTestResultType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string SubsystemMaintenanceStatusMDT::serialize(const uci::type::SubsystemMaintenanceStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemMaintenanceStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemMaintenanceStatusMDT_Names::Extern_Type_Name);
  }
  if (accessor.hasMaintenanceCommandInformation()) {
    SubsystemMaintenanceStatusType::serialize(accessor.getMaintenanceCommandInformation(), node, SubsystemMaintenanceStatusMDT_Names::MaintenanceCommandInformation_Name);
  }
  SubsystemID_Type::serialize(accessor.getSubsystemID(), node, SubsystemMaintenanceStatusMDT_Names::SubsystemID_Name);
  if (accessor.hasOverallStatus()) {
    CompletionStatusType::serialize(accessor.getOverallStatus(), node, SubsystemMaintenanceStatusMDT_Names::OverallStatus_Name);
  }
  {
    const uci::type::SubsystemMaintenanceStatusMDT::CurrentTest& boundedList = accessor.getCurrentTest();
    for (uci::type::SubsystemMaintenanceStatusMDT::CurrentTest::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SubsystemMaintenanceTestResultType::serialize(boundedList.at(i), node, SubsystemMaintenanceStatusMDT_Names::CurrentTest_Name);
    }
  }
  {
    const uci::type::SubsystemMaintenanceStatusMDT::CompletedTest& boundedList = accessor.getCompletedTest();
    for (uci::type::SubsystemMaintenanceStatusMDT::CompletedTest::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SubsystemMaintenanceTestResultType::serialize(boundedList.at(i), node, SubsystemMaintenanceStatusMDT_Names::CompletedTest_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubsystemMaintenanceStatusMDT& SubsystemMaintenanceStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubsystemMaintenanceStatusMDT>().release());
}

uci::type::SubsystemMaintenanceStatusMDT& SubsystemMaintenanceStatusMDT::create(const uci::type::SubsystemMaintenanceStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubsystemMaintenanceStatusMDT> newAccessor{boost::make_unique<asb_uci::type::SubsystemMaintenanceStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubsystemMaintenanceStatusMDT::destroy(uci::type::SubsystemMaintenanceStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::SubsystemMaintenanceStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

