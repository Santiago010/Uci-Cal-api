/** @file ReferenceActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ReferenceActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityBaseType.h"
#include "asb_uci/type/AssetType.h"
#include "asb_uci/type/TargetType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AssetType.h"
#include "uci/type/ReferenceActivityType.h"
#include "uci/type/TargetType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ReferenceActivityType::ReferenceActivityType()
  : activityFor_Accessor{boost::make_unique<ActivityFor>(0, SIZE_MAX)},
    activityAgainst_Accessor{boost::make_unique<ActivityAgainst>(0, SIZE_MAX)} {
}

ReferenceActivityType::~ReferenceActivityType() = default;

void ReferenceActivityType::copy(const uci::type::ReferenceActivityType& accessor) {
  copyImpl(accessor, false);
}

void ReferenceActivityType::copyImpl(const uci::type::ReferenceActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ActivityBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ReferenceActivityType&>(accessor);
    if (accessorImpl.activityHost_Accessor) {
      setActivityHost(*(accessorImpl.activityHost_Accessor));
    } else {
      activityHost_Accessor.reset();
    }
    setActivityFor(*(accessorImpl.activityFor_Accessor));
    setActivityAgainst(*(accessorImpl.activityAgainst_Accessor));
  }
}

void ReferenceActivityType::reset() noexcept {
  ActivityBaseType::reset();
  activityHost_Accessor.reset();
  activityFor_Accessor->reset();
  activityAgainst_Accessor->reset();
}

uci::type::AssetType& ReferenceActivityType::getActivityHost_() const {
  if (activityHost_Accessor) {
    return *activityHost_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityHost(): An attempt was made to get an optional field that was not enabled, call hasActivityHost() to determine if it is safe to call getActivityHost()");
}

const uci::type::AssetType& ReferenceActivityType::getActivityHost() const {
  return getActivityHost_();
}

uci::type::AssetType& ReferenceActivityType::getActivityHost() {
  return getActivityHost_();
}

uci::type::ReferenceActivityType& ReferenceActivityType::setActivityHost(const uci::type::AssetType& accessor) {
  enableActivityHost();
  if (&accessor != activityHost_Accessor.get()) {
    activityHost_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ReferenceActivityType::hasActivityHost() const noexcept {
  return static_cast<bool>(activityHost_Accessor);
}

uci::type::AssetType& ReferenceActivityType::enableActivityHost(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::assetType : type};
  if ((!activityHost_Accessor) || (activityHost_Accessor->getAccessorType() != requestedType)) {
    activityHost_Accessor = AssetType::create(requestedType);
    if (!activityHost_Accessor) {
      throw uci::base::UCIException("Error in enableActivityHost(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityHost_Accessor;
}

uci::type::ReferenceActivityType& ReferenceActivityType::clearActivityHost() noexcept {
  activityHost_Accessor.reset();
  return *this;
}

const uci::type::ReferenceActivityType::ActivityFor& ReferenceActivityType::getActivityFor() const {
  return *activityFor_Accessor;
}

uci::type::ReferenceActivityType::ActivityFor& ReferenceActivityType::getActivityFor() {
  return *activityFor_Accessor;
}

uci::type::ReferenceActivityType& ReferenceActivityType::setActivityFor(const uci::type::ReferenceActivityType::ActivityFor& accessor) {
  if (&accessor != activityFor_Accessor.get()) {
    activityFor_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ReferenceActivityType::ActivityAgainst& ReferenceActivityType::getActivityAgainst() const {
  return *activityAgainst_Accessor;
}

uci::type::ReferenceActivityType::ActivityAgainst& ReferenceActivityType::getActivityAgainst() {
  return *activityAgainst_Accessor;
}

uci::type::ReferenceActivityType& ReferenceActivityType::setActivityAgainst(const uci::type::ReferenceActivityType::ActivityAgainst& accessor) {
  if (&accessor != activityAgainst_Accessor.get()) {
    activityAgainst_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ReferenceActivityType> ReferenceActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::referenceActivityType : type};
  return (requestedType == uci::type::accessorType::referenceActivityType) ? boost::make_unique<ReferenceActivityType>() : nullptr;
}

/**  */
namespace ReferenceActivityType_Names {

constexpr const char* Extern_Type_Name{"ReferenceActivityType"};
constexpr const char* ActivityHost_Name{"ActivityHost"};
constexpr const char* ActivityFor_Name{"ActivityFor"};
constexpr const char* ActivityAgainst_Name{"ActivityAgainst"};

} // namespace ReferenceActivityType_Names

void ReferenceActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ReferenceActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ReferenceActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ReferenceActivityType_Names::ActivityHost_Name) {
      AssetType::deserialize(valueType.second, accessor.enableActivityHost(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ReferenceActivityType_Names::ActivityFor_Name) {
      uci::type::ReferenceActivityType::ActivityFor& boundedList = accessor.getActivityFor();
      const uci::type::ReferenceActivityType::ActivityFor::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::TargetType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ReferenceActivityType_Names::ActivityAgainst_Name) {
      uci::type::ReferenceActivityType::ActivityAgainst& boundedList = accessor.getActivityAgainst();
      const uci::type::ReferenceActivityType::ActivityAgainst::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::TargetType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    }
  }
  ActivityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ReferenceActivityType::serialize(const uci::type::ReferenceActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ReferenceActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ReferenceActivityType_Names::Extern_Type_Name);
  }
  ActivityBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasActivityHost()) {
    AssetType::serialize(accessor.getActivityHost(), node, ReferenceActivityType_Names::ActivityHost_Name);
  }
  {
    const uci::type::ReferenceActivityType::ActivityFor& boundedList = accessor.getActivityFor();
    for (uci::type::ReferenceActivityType::ActivityFor::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::TargetType::serialize(boundedList.at(i), node, ReferenceActivityType_Names::ActivityFor_Name);
    }
  }
  {
    const uci::type::ReferenceActivityType::ActivityAgainst& boundedList = accessor.getActivityAgainst();
    for (uci::type::ReferenceActivityType::ActivityAgainst::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::TargetType::serialize(boundedList.at(i), node, ReferenceActivityType_Names::ActivityAgainst_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ReferenceActivityType& ReferenceActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ReferenceActivityType>().release());
}

uci::type::ReferenceActivityType& ReferenceActivityType::create(const uci::type::ReferenceActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ReferenceActivityType> newAccessor{boost::make_unique<asb_uci::type::ReferenceActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ReferenceActivityType::destroy(uci::type::ReferenceActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::ReferenceActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

