/** @file RouteMetricsMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RouteMetricsMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityMetricsType.h"
#include "asb_uci/type/ActivityPlanPartsEnum.h"
#include "asb_uci/type/MetricsType.h"
#include "asb_uci/type/PathMetricsType.h"
#include "asb_uci/type/PathTypeEnum.h"
#include "asb_uci/type/RouteActivityPlanID_Type.h"
#include "asb_uci/type/RouteMetricsID_Type.h"
#include "asb_uci/type/RoutePlanID_Type.h"
#include "asb_uci/type/SegmentMetricsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityMetricsType.h"
#include "uci/type/ActivityPlanPartsEnum.h"
#include "uci/type/MetricsType.h"
#include "uci/type/PathMetricsType.h"
#include "uci/type/PathTypeEnum.h"
#include "uci/type/RouteActivityPlanID_Type.h"
#include "uci/type/RouteMetricsID_Type.h"
#include "uci/type/RouteMetricsMDT.h"
#include "uci/type/RoutePlanID_Type.h"
#include "uci/type/SegmentMetricsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RouteMetricsMDT::RouteMetricsMDT()
  : routeMetricsID_Accessor{boost::make_unique<RouteMetricsID_Type>()},
    routePlanID_Accessor{boost::make_unique<RoutePlanID_Type>()},
    routeParts_Accessor{boost::make_unique<RouteParts>(0, 12)},
    routeActivityPlanID_Accessor{boost::make_unique<RouteActivityPlanID>(0, SIZE_MAX)},
    activityPlanParts_Accessor{boost::make_unique<ActivityPlanParts>(0, 9)},
    pathMetrics_Accessor{boost::make_unique<PathMetrics>(0, SIZE_MAX)},
    segmentMetrics_Accessor{boost::make_unique<SegmentMetrics>(0, SIZE_MAX)} {
}

RouteMetricsMDT::~RouteMetricsMDT() = default;

void RouteMetricsMDT::copy(const uci::type::RouteMetricsMDT& accessor) {
  copyImpl(accessor, false);
}

void RouteMetricsMDT::copyImpl(const uci::type::RouteMetricsMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RouteMetricsMDT&>(accessor);
    setRouteMetricsID(*(accessorImpl.routeMetricsID_Accessor));
    setRoutePlanID(*(accessorImpl.routePlanID_Accessor));
    setRouteParts(*(accessorImpl.routeParts_Accessor));
    setRouteActivityPlanID(*(accessorImpl.routeActivityPlanID_Accessor));
    setActivityPlanParts(*(accessorImpl.activityPlanParts_Accessor));
    if (accessorImpl.routeMetrics_Accessor) {
      setRouteMetrics(*(accessorImpl.routeMetrics_Accessor));
    } else {
      routeMetrics_Accessor.reset();
    }
    setPathMetrics(*(accessorImpl.pathMetrics_Accessor));
    setSegmentMetrics(*(accessorImpl.segmentMetrics_Accessor));
    if (accessorImpl.activityMetrics_Accessor) {
      setActivityMetrics(*(accessorImpl.activityMetrics_Accessor));
    } else {
      activityMetrics_Accessor.reset();
    }
  }
}

void RouteMetricsMDT::reset() noexcept {
  routeMetricsID_Accessor->reset();
  routePlanID_Accessor->reset();
  routeParts_Accessor->reset();
  routeActivityPlanID_Accessor->reset();
  activityPlanParts_Accessor->reset();
  routeMetrics_Accessor.reset();
  pathMetrics_Accessor->reset();
  segmentMetrics_Accessor->reset();
  activityMetrics_Accessor.reset();
}

const uci::type::RouteMetricsID_Type& RouteMetricsMDT::getRouteMetricsID() const {
  return *routeMetricsID_Accessor;
}

uci::type::RouteMetricsID_Type& RouteMetricsMDT::getRouteMetricsID() {
  return *routeMetricsID_Accessor;
}

uci::type::RouteMetricsMDT& RouteMetricsMDT::setRouteMetricsID(const uci::type::RouteMetricsID_Type& accessor) {
  if (&accessor != routeMetricsID_Accessor.get()) {
    routeMetricsID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RoutePlanID_Type& RouteMetricsMDT::getRoutePlanID() const {
  return *routePlanID_Accessor;
}

uci::type::RoutePlanID_Type& RouteMetricsMDT::getRoutePlanID() {
  return *routePlanID_Accessor;
}

uci::type::RouteMetricsMDT& RouteMetricsMDT::setRoutePlanID(const uci::type::RoutePlanID_Type& accessor) {
  if (&accessor != routePlanID_Accessor.get()) {
    routePlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RouteMetricsMDT::RouteParts& RouteMetricsMDT::getRouteParts() const {
  return *routeParts_Accessor;
}

uci::type::RouteMetricsMDT::RouteParts& RouteMetricsMDT::getRouteParts() {
  return *routeParts_Accessor;
}

uci::type::RouteMetricsMDT& RouteMetricsMDT::setRouteParts(const uci::type::RouteMetricsMDT::RouteParts& accessor) {
  if (&accessor != routeParts_Accessor.get()) {
    routeParts_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RouteMetricsMDT::RouteActivityPlanID& RouteMetricsMDT::getRouteActivityPlanID() const {
  return *routeActivityPlanID_Accessor;
}

uci::type::RouteMetricsMDT::RouteActivityPlanID& RouteMetricsMDT::getRouteActivityPlanID() {
  return *routeActivityPlanID_Accessor;
}

uci::type::RouteMetricsMDT& RouteMetricsMDT::setRouteActivityPlanID(const uci::type::RouteMetricsMDT::RouteActivityPlanID& accessor) {
  if (&accessor != routeActivityPlanID_Accessor.get()) {
    routeActivityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RouteMetricsMDT::ActivityPlanParts& RouteMetricsMDT::getActivityPlanParts() const {
  return *activityPlanParts_Accessor;
}

uci::type::RouteMetricsMDT::ActivityPlanParts& RouteMetricsMDT::getActivityPlanParts() {
  return *activityPlanParts_Accessor;
}

uci::type::RouteMetricsMDT& RouteMetricsMDT::setActivityPlanParts(const uci::type::RouteMetricsMDT::ActivityPlanParts& accessor) {
  if (&accessor != activityPlanParts_Accessor.get()) {
    activityPlanParts_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MetricsType& RouteMetricsMDT::getRouteMetrics_() const {
  if (routeMetrics_Accessor) {
    return *routeMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteMetrics(): An attempt was made to get an optional field that was not enabled, call hasRouteMetrics() to determine if it is safe to call getRouteMetrics()");
}

const uci::type::MetricsType& RouteMetricsMDT::getRouteMetrics() const {
  return getRouteMetrics_();
}

uci::type::MetricsType& RouteMetricsMDT::getRouteMetrics() {
  return getRouteMetrics_();
}

uci::type::RouteMetricsMDT& RouteMetricsMDT::setRouteMetrics(const uci::type::MetricsType& accessor) {
  enableRouteMetrics();
  if (&accessor != routeMetrics_Accessor.get()) {
    routeMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RouteMetricsMDT::hasRouteMetrics() const noexcept {
  return static_cast<bool>(routeMetrics_Accessor);
}

uci::type::MetricsType& RouteMetricsMDT::enableRouteMetrics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::metricsType : type};
  if ((!routeMetrics_Accessor) || (routeMetrics_Accessor->getAccessorType() != requestedType)) {
    routeMetrics_Accessor = MetricsType::create(requestedType);
    if (!routeMetrics_Accessor) {
      throw uci::base::UCIException("Error in enableRouteMetrics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeMetrics_Accessor;
}

uci::type::RouteMetricsMDT& RouteMetricsMDT::clearRouteMetrics() noexcept {
  routeMetrics_Accessor.reset();
  return *this;
}

const uci::type::RouteMetricsMDT::PathMetrics& RouteMetricsMDT::getPathMetrics() const {
  return *pathMetrics_Accessor;
}

uci::type::RouteMetricsMDT::PathMetrics& RouteMetricsMDT::getPathMetrics() {
  return *pathMetrics_Accessor;
}

uci::type::RouteMetricsMDT& RouteMetricsMDT::setPathMetrics(const uci::type::RouteMetricsMDT::PathMetrics& accessor) {
  if (&accessor != pathMetrics_Accessor.get()) {
    pathMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RouteMetricsMDT::SegmentMetrics& RouteMetricsMDT::getSegmentMetrics() const {
  return *segmentMetrics_Accessor;
}

uci::type::RouteMetricsMDT::SegmentMetrics& RouteMetricsMDT::getSegmentMetrics() {
  return *segmentMetrics_Accessor;
}

uci::type::RouteMetricsMDT& RouteMetricsMDT::setSegmentMetrics(const uci::type::RouteMetricsMDT::SegmentMetrics& accessor) {
  if (&accessor != segmentMetrics_Accessor.get()) {
    segmentMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ActivityMetricsType& RouteMetricsMDT::getActivityMetrics_() const {
  if (activityMetrics_Accessor) {
    return *activityMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityMetrics(): An attempt was made to get an optional field that was not enabled, call hasActivityMetrics() to determine if it is safe to call getActivityMetrics()");
}

const uci::type::ActivityMetricsType& RouteMetricsMDT::getActivityMetrics() const {
  return getActivityMetrics_();
}

uci::type::ActivityMetricsType& RouteMetricsMDT::getActivityMetrics() {
  return getActivityMetrics_();
}

uci::type::RouteMetricsMDT& RouteMetricsMDT::setActivityMetrics(const uci::type::ActivityMetricsType& accessor) {
  enableActivityMetrics();
  if (&accessor != activityMetrics_Accessor.get()) {
    activityMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RouteMetricsMDT::hasActivityMetrics() const noexcept {
  return static_cast<bool>(activityMetrics_Accessor);
}

uci::type::ActivityMetricsType& RouteMetricsMDT::enableActivityMetrics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityMetricsType : type};
  if ((!activityMetrics_Accessor) || (activityMetrics_Accessor->getAccessorType() != requestedType)) {
    activityMetrics_Accessor = ActivityMetricsType::create(requestedType);
    if (!activityMetrics_Accessor) {
      throw uci::base::UCIException("Error in enableActivityMetrics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityMetrics_Accessor;
}

uci::type::RouteMetricsMDT& RouteMetricsMDT::clearActivityMetrics() noexcept {
  activityMetrics_Accessor.reset();
  return *this;
}

std::unique_ptr<RouteMetricsMDT> RouteMetricsMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeMetricsMDT : type};
  return (requestedType == uci::type::accessorType::routeMetricsMDT) ? boost::make_unique<RouteMetricsMDT>() : nullptr;
}

/**  */
namespace RouteMetricsMDT_Names {

constexpr const char* Extern_Type_Name{"RouteMetricsMDT"};
constexpr const char* RouteMetricsID_Name{"RouteMetricsID"};
constexpr const char* RoutePlanID_Name{"RoutePlanID"};
constexpr const char* RouteParts_Name{"RouteParts"};
constexpr const char* RouteActivityPlanID_Name{"RouteActivityPlanID"};
constexpr const char* ActivityPlanParts_Name{"ActivityPlanParts"};
constexpr const char* RouteMetrics_Name{"RouteMetrics"};
constexpr const char* PathMetrics_Name{"PathMetrics"};
constexpr const char* SegmentMetrics_Name{"SegmentMetrics"};
constexpr const char* ActivityMetrics_Name{"ActivityMetrics"};

} // namespace RouteMetricsMDT_Names

void RouteMetricsMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::RouteMetricsMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RouteMetricsMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RouteMetricsMDT_Names::RouteMetricsID_Name) {
      RouteMetricsID_Type::deserialize(valueType.second, accessor.getRouteMetricsID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteMetricsMDT_Names::RoutePlanID_Name) {
      RoutePlanID_Type::deserialize(valueType.second, accessor.getRoutePlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteMetricsMDT_Names::RouteParts_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RouteMetricsMDT::RouteParts& boundedList = accessor.getRouteParts();
        const uci::type::RouteMetricsMDT::RouteParts::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RouteMetricsMDT_Names::RouteActivityPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RouteMetricsMDT::RouteActivityPlanID& boundedList = accessor.getRouteActivityPlanID();
        const uci::type::RouteMetricsMDT::RouteActivityPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RouteActivityPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RouteMetricsMDT_Names::ActivityPlanParts_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RouteMetricsMDT::ActivityPlanParts& boundedList = accessor.getActivityPlanParts();
        const uci::type::RouteMetricsMDT::ActivityPlanParts::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RouteMetricsMDT_Names::RouteMetrics_Name) {
      MetricsType::deserialize(valueType.second, accessor.enableRouteMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteMetricsMDT_Names::PathMetrics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RouteMetricsMDT::PathMetrics& boundedList = accessor.getPathMetrics();
        const uci::type::RouteMetricsMDT::PathMetrics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PathMetricsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RouteMetricsMDT_Names::SegmentMetrics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RouteMetricsMDT::SegmentMetrics& boundedList = accessor.getSegmentMetrics();
        const uci::type::RouteMetricsMDT::SegmentMetrics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SegmentMetricsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RouteMetricsMDT_Names::ActivityMetrics_Name) {
      ActivityMetricsType::deserialize(valueType.second, accessor.enableActivityMetrics(), nodeName, nsPrefix);
    }
  }
}

std::string RouteMetricsMDT::serialize(const uci::type::RouteMetricsMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RouteMetricsMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RouteMetricsMDT_Names::Extern_Type_Name);
  }
  RouteMetricsID_Type::serialize(accessor.getRouteMetricsID(), node, RouteMetricsMDT_Names::RouteMetricsID_Name);
  RoutePlanID_Type::serialize(accessor.getRoutePlanID(), node, RouteMetricsMDT_Names::RoutePlanID_Name);
  {
    const uci::type::RouteMetricsMDT::RouteParts& boundedList = accessor.getRouteParts();
    for (uci::type::RouteMetricsMDT::RouteParts::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PathTypeEnum::serialize(boundedList.at(i), node, RouteMetricsMDT_Names::RouteParts_Name, false);
    }
  }
  {
    const uci::type::RouteMetricsMDT::RouteActivityPlanID& boundedList = accessor.getRouteActivityPlanID();
    for (uci::type::RouteMetricsMDT::RouteActivityPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RouteActivityPlanID_Type::serialize(boundedList.at(i), node, RouteMetricsMDT_Names::RouteActivityPlanID_Name);
    }
  }
  {
    const uci::type::RouteMetricsMDT::ActivityPlanParts& boundedList = accessor.getActivityPlanParts();
    for (uci::type::RouteMetricsMDT::ActivityPlanParts::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ActivityPlanPartsEnum::serialize(boundedList.at(i), node, RouteMetricsMDT_Names::ActivityPlanParts_Name, false);
    }
  }
  if (accessor.hasRouteMetrics()) {
    MetricsType::serialize(accessor.getRouteMetrics(), node, RouteMetricsMDT_Names::RouteMetrics_Name);
  }
  {
    const uci::type::RouteMetricsMDT::PathMetrics& boundedList = accessor.getPathMetrics();
    for (uci::type::RouteMetricsMDT::PathMetrics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PathMetricsType::serialize(boundedList.at(i), node, RouteMetricsMDT_Names::PathMetrics_Name);
    }
  }
  {
    const uci::type::RouteMetricsMDT::SegmentMetrics& boundedList = accessor.getSegmentMetrics();
    for (uci::type::RouteMetricsMDT::SegmentMetrics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SegmentMetricsType::serialize(boundedList.at(i), node, RouteMetricsMDT_Names::SegmentMetrics_Name);
    }
  }
  if (accessor.hasActivityMetrics()) {
    ActivityMetricsType::serialize(accessor.getActivityMetrics(), node, RouteMetricsMDT_Names::ActivityMetrics_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RouteMetricsMDT& RouteMetricsMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RouteMetricsMDT>().release());
}

uci::type::RouteMetricsMDT& RouteMetricsMDT::create(const uci::type::RouteMetricsMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RouteMetricsMDT> newAccessor{boost::make_unique<asb_uci::type::RouteMetricsMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RouteMetricsMDT::destroy(uci::type::RouteMetricsMDT& accessor) {
  delete dynamic_cast<asb_uci::type::RouteMetricsMDT*>(&accessor);
}

} // namespace type

} // namespace uci

