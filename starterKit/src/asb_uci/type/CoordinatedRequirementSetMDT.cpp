/** @file CoordinatedRequirementSetMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CoordinatedRequirementSetMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CallSignType.h"
#include "../../../include/asb_uci/type/CoordinatedRequirementSetID_Type.h"
#include "../../../include/asb_uci/type/LinkedRequirementType.h"
#include "../../../include/asb_uci/type/SecurityInformationType.h"
#include "../../../include/asb_uci/type/TimingConstraintsType.h"
#include "../../../include/asb_uci/type/VisibleString1024Type.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CallSignType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CoordinatedRequirementSetID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CoordinatedRequirementSetMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LinkedRequirementType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SecurityInformationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TimingConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString1024Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CoordinatedRequirementSetMDT::CoordinatedRequirementSetMDT()
  : coordinatedRequirementSetID_Accessor{boost::make_unique<CoordinatedRequirementSetID_Type>()},
    linkedRequirement_Accessor{boost::make_unique<LinkedRequirement>(1, SIZE_MAX)},
    callSign_Accessor{boost::make_unique<CallSign>(0, SIZE_MAX)} {
}

CoordinatedRequirementSetMDT::~CoordinatedRequirementSetMDT() = default;

void CoordinatedRequirementSetMDT::copy(const uci::type::CoordinatedRequirementSetMDT& accessor) {
  copyImpl(accessor, false);
}

void CoordinatedRequirementSetMDT::copyImpl(const uci::type::CoordinatedRequirementSetMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CoordinatedRequirementSetMDT&>(accessor);
    setCoordinatedRequirementSetID(*(accessorImpl.coordinatedRequirementSetID_Accessor));
    if (accessorImpl.acceptableClassificationLevel_Accessor) {
      setAcceptableClassificationLevel(*(accessorImpl.acceptableClassificationLevel_Accessor));
    } else {
      acceptableClassificationLevel_Accessor.reset();
    }
    if (accessorImpl.specialInstructions_Accessor) {
      setSpecialInstructions(*(accessorImpl.specialInstructions_Accessor));
    } else {
      specialInstructions_Accessor.reset();
    }
    if (accessorImpl.timingConstraints_Accessor) {
      setTimingConstraints(*(accessorImpl.timingConstraints_Accessor));
    } else {
      timingConstraints_Accessor.reset();
    }
    if (accessorImpl.coordinationParameter_Accessor) {
      setCoordinationParameter(*(accessorImpl.coordinationParameter_Accessor));
    } else {
      coordinationParameter_Accessor.reset();
    }
    setLinkedRequirement(*(accessorImpl.linkedRequirement_Accessor));
    if (accessorImpl.vOIP_Number_Accessor) {
      setVOIP_Number(*(accessorImpl.vOIP_Number_Accessor));
    } else {
      vOIP_Number_Accessor.reset();
    }
    if (accessorImpl.chatRoom_Accessor) {
      setChatRoom(*(accessorImpl.chatRoom_Accessor));
    } else {
      chatRoom_Accessor.reset();
    }
    if (accessorImpl.hasFrequency()) {
      setFrequency(accessorImpl.getFrequency());
    } else {
      clearFrequency();
    }
    setCallSign(*(accessorImpl.callSign_Accessor));
  }
}

void CoordinatedRequirementSetMDT::reset() noexcept {
  coordinatedRequirementSetID_Accessor->reset();
  acceptableClassificationLevel_Accessor.reset();
  specialInstructions_Accessor.reset();
  timingConstraints_Accessor.reset();
  coordinationParameter_Accessor.reset();
  linkedRequirement_Accessor->reset();
  vOIP_Number_Accessor.reset();
  chatRoom_Accessor.reset();
  clearFrequency();
  callSign_Accessor->reset();
}

const uci::type::CoordinatedRequirementSetID_Type& CoordinatedRequirementSetMDT::getCoordinatedRequirementSetID() const {
  return *coordinatedRequirementSetID_Accessor;
}

uci::type::CoordinatedRequirementSetID_Type& CoordinatedRequirementSetMDT::getCoordinatedRequirementSetID() {
  return *coordinatedRequirementSetID_Accessor;
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setCoordinatedRequirementSetID(const uci::type::CoordinatedRequirementSetID_Type& accessor) {
  if (&accessor != coordinatedRequirementSetID_Accessor.get()) {
    coordinatedRequirementSetID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SecurityInformationType& CoordinatedRequirementSetMDT::getAcceptableClassificationLevel_() const {
  if (acceptableClassificationLevel_Accessor) {
    return *acceptableClassificationLevel_Accessor;
  }
  throw uci::base::UCIException("Error in getAcceptableClassificationLevel(): An attempt was made to get an optional field that was not enabled, call hasAcceptableClassificationLevel() to determine if it is safe to call getAcceptableClassificationLevel()");
}

const uci::type::SecurityInformationType& CoordinatedRequirementSetMDT::getAcceptableClassificationLevel() const {
  return getAcceptableClassificationLevel_();
}

uci::type::SecurityInformationType& CoordinatedRequirementSetMDT::getAcceptableClassificationLevel() {
  return getAcceptableClassificationLevel_();
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setAcceptableClassificationLevel(const uci::type::SecurityInformationType& accessor) {
  enableAcceptableClassificationLevel();
  if (&accessor != acceptableClassificationLevel_Accessor.get()) {
    acceptableClassificationLevel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CoordinatedRequirementSetMDT::hasAcceptableClassificationLevel() const noexcept {
  return static_cast<bool>(acceptableClassificationLevel_Accessor);
}

uci::type::SecurityInformationType& CoordinatedRequirementSetMDT::enableAcceptableClassificationLevel(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::securityInformationType : type};
  if ((!acceptableClassificationLevel_Accessor) || (acceptableClassificationLevel_Accessor->getAccessorType() != requestedType)) {
    acceptableClassificationLevel_Accessor = SecurityInformationType::create(requestedType);
    if (!acceptableClassificationLevel_Accessor) {
      throw uci::base::UCIException("Error in enableAcceptableClassificationLevel(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *acceptableClassificationLevel_Accessor;
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::clearAcceptableClassificationLevel() noexcept {
  acceptableClassificationLevel_Accessor.reset();
  return *this;
}

uci::type::VisibleString1024Type& CoordinatedRequirementSetMDT::getSpecialInstructions_() const {
  if (specialInstructions_Accessor) {
    return *specialInstructions_Accessor;
  }
  throw uci::base::UCIException("Error in getSpecialInstructions(): An attempt was made to get an optional field that was not enabled, call hasSpecialInstructions() to determine if it is safe to call getSpecialInstructions()");
}

const uci::type::VisibleString1024Type& CoordinatedRequirementSetMDT::getSpecialInstructions() const {
  return getSpecialInstructions_();
}

uci::type::VisibleString1024Type& CoordinatedRequirementSetMDT::getSpecialInstructions() {
  return getSpecialInstructions_();
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setSpecialInstructions(const uci::type::VisibleString1024Type& value) {
  return setSpecialInstructions(value.c_str());
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setSpecialInstructions(const std::string& value) {
  return setSpecialInstructions(value.c_str());
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setSpecialInstructions(const char* value) {
  enableSpecialInstructions().setStringValue(value);
  return *this;
}

bool CoordinatedRequirementSetMDT::hasSpecialInstructions() const noexcept {
  return static_cast<bool>(specialInstructions_Accessor);
}

uci::type::VisibleString1024Type& CoordinatedRequirementSetMDT::enableSpecialInstructions(uci::base::accessorType::AccessorType type) {
  if (!specialInstructions_Accessor) {
    specialInstructions_Accessor = VisibleString1024Type::create(type);
  }
  return *specialInstructions_Accessor;
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::clearSpecialInstructions() noexcept {
  specialInstructions_Accessor.reset();
  return *this;
}

uci::type::TimingConstraintsType& CoordinatedRequirementSetMDT::getTimingConstraints_() const {
  if (timingConstraints_Accessor) {
    return *timingConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getTimingConstraints(): An attempt was made to get an optional field that was not enabled, call hasTimingConstraints() to determine if it is safe to call getTimingConstraints()");
}

const uci::type::TimingConstraintsType& CoordinatedRequirementSetMDT::getTimingConstraints() const {
  return getTimingConstraints_();
}

uci::type::TimingConstraintsType& CoordinatedRequirementSetMDT::getTimingConstraints() {
  return getTimingConstraints_();
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setTimingConstraints(const uci::type::TimingConstraintsType& accessor) {
  enableTimingConstraints();
  if (&accessor != timingConstraints_Accessor.get()) {
    timingConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CoordinatedRequirementSetMDT::hasTimingConstraints() const noexcept {
  return static_cast<bool>(timingConstraints_Accessor);
}

uci::type::TimingConstraintsType& CoordinatedRequirementSetMDT::enableTimingConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::timingConstraintsType : type};
  if ((!timingConstraints_Accessor) || (timingConstraints_Accessor->getAccessorType() != requestedType)) {
    timingConstraints_Accessor = TimingConstraintsType::create(requestedType);
    if (!timingConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableTimingConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timingConstraints_Accessor;
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::clearTimingConstraints() noexcept {
  timingConstraints_Accessor.reset();
  return *this;
}

asb_uci::type::VisibleString256Type& CoordinatedRequirementSetMDT::getCoordinationParameter_() const {
  if (coordinationParameter_Accessor) {
    return *coordinationParameter_Accessor;
  }
  throw uci::base::UCIException("Error in getCoordinationParameter(): An attempt was made to get an optional field that was not enabled, call hasCoordinationParameter() to determine if it is safe to call getCoordinationParameter()");
}

const asb_uci::type::VisibleString256Type& CoordinatedRequirementSetMDT::getCoordinationParameter() const {
  return getCoordinationParameter_();
}

asb_uci::type::VisibleString256Type& CoordinatedRequirementSetMDT::getCoordinationParameter() {
  return getCoordinationParameter_();
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setCoordinationParameter(const asb_uci::type::VisibleString256Type& value) {
  return setCoordinationParameter(value.c_str());
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setCoordinationParameter(const std::string& value) {
  return setCoordinationParameter(value.c_str());
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setCoordinationParameter(const char* value) {
  enableCoordinationParameter().setStringValue(value);
  return *this;
}

bool CoordinatedRequirementSetMDT::hasCoordinationParameter() const noexcept {
  return static_cast<bool>(coordinationParameter_Accessor);
}

asb_uci::type::VisibleString256Type& CoordinatedRequirementSetMDT::enableCoordinationParameter(uci::base::accessorType::AccessorType type) {
  if (!coordinationParameter_Accessor) {
    coordinationParameter_Accessor =  asb_uci::type::VisibleString256Type::create(type);
  }
  return *coordinationParameter_Accessor;
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::clearCoordinationParameter() noexcept {
  coordinationParameter_Accessor.reset();
  return *this;
}

const uci::type::CoordinatedRequirementSetMDT::LinkedRequirement& CoordinatedRequirementSetMDT::getLinkedRequirement() const {
  return *linkedRequirement_Accessor;
}

uci::type::CoordinatedRequirementSetMDT::LinkedRequirement& CoordinatedRequirementSetMDT::getLinkedRequirement() {
  return *linkedRequirement_Accessor;
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setLinkedRequirement(const uci::type::CoordinatedRequirementSetMDT::LinkedRequirement& accessor) {
  if (&accessor != linkedRequirement_Accessor.get()) {
    linkedRequirement_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

asb_uci::type::VisibleString256Type& CoordinatedRequirementSetMDT::getVOIP_Number_() const {
  if (vOIP_Number_Accessor) {
    return *vOIP_Number_Accessor;
  }
  throw uci::base::UCIException("Error in getVOIP_Number(): An attempt was made to get an optional field that was not enabled, call hasVOIP_Number() to determine if it is safe to call getVOIP_Number()");
}

const asb_uci::type::VisibleString256Type& CoordinatedRequirementSetMDT::getVOIP_Number() const {
  return getVOIP_Number_();
}

asb_uci::type::VisibleString256Type& CoordinatedRequirementSetMDT::getVOIP_Number() {
  return getVOIP_Number_();
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setVOIP_Number(const asb_uci::type::VisibleString256Type& value) {
  return setVOIP_Number(value.c_str());
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setVOIP_Number(const std::string& value) {
  return setVOIP_Number(value.c_str());
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setVOIP_Number(const char* value) {
  enableVOIP_Number().setStringValue(value);
  return *this;
}

bool CoordinatedRequirementSetMDT::hasVOIP_Number() const noexcept {
  return static_cast<bool>(vOIP_Number_Accessor);
}

asb_uci::type::VisibleString256Type& CoordinatedRequirementSetMDT::enableVOIP_Number(uci::base::accessorType::AccessorType type) {
  if (!vOIP_Number_Accessor) {
    vOIP_Number_Accessor =  asb_uci::type::VisibleString256Type::create(type);
  }
  return *vOIP_Number_Accessor;
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::clearVOIP_Number() noexcept {
  vOIP_Number_Accessor.reset();
  return *this;
}

asb_uci::type::VisibleString256Type& CoordinatedRequirementSetMDT::getChatRoom_() const {
  if (chatRoom_Accessor) {
    return *chatRoom_Accessor;
  }
  throw uci::base::UCIException("Error in getChatRoom(): An attempt was made to get an optional field that was not enabled, call hasChatRoom() to determine if it is safe to call getChatRoom()");
}

const asb_uci::type::VisibleString256Type& CoordinatedRequirementSetMDT::getChatRoom() const {
  return getChatRoom_();
}

asb_uci::type::VisibleString256Type& CoordinatedRequirementSetMDT::getChatRoom() {
  return getChatRoom_();
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setChatRoom(const asb_uci::type::VisibleString256Type& value) {
  return setChatRoom(value.c_str());
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setChatRoom(const std::string& value) {
  return setChatRoom(value.c_str());
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setChatRoom(const char* value) {
  enableChatRoom().setStringValue(value);
  return *this;
}

bool CoordinatedRequirementSetMDT::hasChatRoom() const noexcept {
  return static_cast<bool>(chatRoom_Accessor);
}

asb_uci::type::VisibleString256Type& CoordinatedRequirementSetMDT::enableChatRoom(uci::base::accessorType::AccessorType type) {
  if (!chatRoom_Accessor) {
    chatRoom_Accessor =  asb_uci::type::VisibleString256Type::create(type);
  }
  return *chatRoom_Accessor;
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::clearChatRoom() noexcept {
  chatRoom_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue CoordinatedRequirementSetMDT::getFrequency() const {
  if (frequency_Accessor) {
    return *frequency_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequency(): An attempt was made to get an optional field that was not enabled, call hasFrequency() to determine if it is safe to call getFrequency()");
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setFrequency(uci::type::FrequencyTypeValue value) {
  frequency_Accessor = value;
  return *this;
}

bool CoordinatedRequirementSetMDT::hasFrequency() const noexcept {
  return frequency_Accessor.has_value();
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::clearFrequency() noexcept {
  frequency_Accessor.reset();
  return *this;
}

const uci::type::CoordinatedRequirementSetMDT::CallSign& CoordinatedRequirementSetMDT::getCallSign() const {
  return *callSign_Accessor;
}

uci::type::CoordinatedRequirementSetMDT::CallSign& CoordinatedRequirementSetMDT::getCallSign() {
  return *callSign_Accessor;
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::setCallSign(const uci::type::CoordinatedRequirementSetMDT::CallSign& accessor) {
  if (&accessor != callSign_Accessor.get()) {
    callSign_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CoordinatedRequirementSetMDT> CoordinatedRequirementSetMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::coordinatedRequirementSetMDT : type};
  return (requestedType == uci::type::accessorType::coordinatedRequirementSetMDT) ? boost::make_unique<CoordinatedRequirementSetMDT>() : nullptr;
}

/**  */
namespace CoordinatedRequirementSetMDT_Names {

constexpr const char* Extern_Type_Name{"CoordinatedRequirementSetMDT"};
constexpr const char* CoordinatedRequirementSetID_Name{"CoordinatedRequirementSetID"};
constexpr const char* AcceptableClassificationLevel_Name{"AcceptableClassificationLevel"};
constexpr const char* SpecialInstructions_Name{"SpecialInstructions"};
constexpr const char* TimingConstraints_Name{"TimingConstraints"};
constexpr const char* CoordinationParameter_Name{"CoordinationParameter"};
constexpr const char* LinkedRequirement_Name{"LinkedRequirement"};
constexpr const char* VOIP_Number_Name{"VOIP_Number"};
constexpr const char* ChatRoom_Name{"ChatRoom"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* CallSign_Name{"CallSign"};

} // namespace CoordinatedRequirementSetMDT_Names

void CoordinatedRequirementSetMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::CoordinatedRequirementSetMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CoordinatedRequirementSetMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CoordinatedRequirementSetMDT_Names::CoordinatedRequirementSetID_Name) {
      CoordinatedRequirementSetID_Type::deserialize(valueType.second, accessor.getCoordinatedRequirementSetID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CoordinatedRequirementSetMDT_Names::AcceptableClassificationLevel_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.enableAcceptableClassificationLevel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CoordinatedRequirementSetMDT_Names::SpecialInstructions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpecialInstructions(*value);
      }
    } else if (valueType.first == nsPrefix + CoordinatedRequirementSetMDT_Names::TimingConstraints_Name) {
      TimingConstraintsType::deserialize(valueType.second, accessor.enableTimingConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CoordinatedRequirementSetMDT_Names::CoordinationParameter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCoordinationParameter(*value);
      }
    } else if (valueType.first == nsPrefix + CoordinatedRequirementSetMDT_Names::LinkedRequirement_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CoordinatedRequirementSetMDT::LinkedRequirement& boundedList = accessor.getLinkedRequirement();
        const uci::type::CoordinatedRequirementSetMDT::LinkedRequirement::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::LinkedRequirementType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CoordinatedRequirementSetMDT_Names::VOIP_Number_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVOIP_Number(*value);
      }
    } else if (valueType.first == nsPrefix + CoordinatedRequirementSetMDT_Names::ChatRoom_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setChatRoom(*value);
      }
    } else if (valueType.first == nsPrefix + CoordinatedRequirementSetMDT_Names::Frequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequency(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CoordinatedRequirementSetMDT_Names::CallSign_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CoordinatedRequirementSetMDT::CallSign& boundedList = accessor.getCallSign();
        const uci::type::CoordinatedRequirementSetMDT::CallSign::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CallSignType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CoordinatedRequirementSetMDT::serialize(const uci::type::CoordinatedRequirementSetMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CoordinatedRequirementSetMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CoordinatedRequirementSetMDT_Names::Extern_Type_Name);
  }
  CoordinatedRequirementSetID_Type::serialize(accessor.getCoordinatedRequirementSetID(), node, CoordinatedRequirementSetMDT_Names::CoordinatedRequirementSetID_Name);
  if (accessor.hasAcceptableClassificationLevel()) {
    SecurityInformationType::serialize(accessor.getAcceptableClassificationLevel(), node, CoordinatedRequirementSetMDT_Names::AcceptableClassificationLevel_Name);
  }
  if (accessor.hasSpecialInstructions()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSpecialInstructions(), node, CoordinatedRequirementSetMDT_Names::SpecialInstructions_Name);
  }
  if (accessor.hasTimingConstraints()) {
    TimingConstraintsType::serialize(accessor.getTimingConstraints(), node, CoordinatedRequirementSetMDT_Names::TimingConstraints_Name);
  }
  if (accessor.hasCoordinationParameter()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getCoordinationParameter(), node, CoordinatedRequirementSetMDT_Names::CoordinationParameter_Name);
  }
  {
    const uci::type::CoordinatedRequirementSetMDT::LinkedRequirement& boundedList = accessor.getLinkedRequirement();
    for (uci::type::CoordinatedRequirementSetMDT::LinkedRequirement::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::LinkedRequirementType::serialize(boundedList.at(i), node, CoordinatedRequirementSetMDT_Names::LinkedRequirement_Name);
    }
  }
  if (accessor.hasVOIP_Number()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getVOIP_Number(), node, CoordinatedRequirementSetMDT_Names::VOIP_Number_Name);
  }
  if (accessor.hasChatRoom()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getChatRoom(), node, CoordinatedRequirementSetMDT_Names::ChatRoom_Name);
  }
  if (accessor.hasFrequency()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequency(), node, CoordinatedRequirementSetMDT_Names::Frequency_Name);
  }
  {
    const uci::type::CoordinatedRequirementSetMDT::CallSign& boundedList = accessor.getCallSign();
    for (uci::type::CoordinatedRequirementSetMDT::CallSign::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CallSignType::serialize(boundedList.at(i), node, CoordinatedRequirementSetMDT_Names::CallSign_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CoordinatedRequirementSetMDT>().release());
}

uci::type::CoordinatedRequirementSetMDT& CoordinatedRequirementSetMDT::create(const uci::type::CoordinatedRequirementSetMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CoordinatedRequirementSetMDT> newAccessor{boost::make_unique<asb_uci::type::CoordinatedRequirementSetMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CoordinatedRequirementSetMDT::destroy(uci::type::CoordinatedRequirementSetMDT& accessor) {
  delete dynamic_cast<asb_uci::type::CoordinatedRequirementSetMDT*>(&accessor);
}

} // namespace type

} // namespace uci

