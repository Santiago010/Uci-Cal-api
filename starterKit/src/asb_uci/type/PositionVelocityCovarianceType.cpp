/** @file PositionVelocityCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PositionVelocityCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PositionVelocityCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PositionVelocityCovarianceType::PositionVelocityCovarianceType() = default;

PositionVelocityCovarianceType::~PositionVelocityCovarianceType() = default;

void PositionVelocityCovarianceType::copy(const uci::type::PositionVelocityCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void PositionVelocityCovarianceType::copyImpl(const uci::type::PositionVelocityCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PositionVelocityCovarianceType&>(accessor);
    setPnVn(accessorImpl.pnVn_Accessor);
    setPnVe(accessorImpl.pnVe_Accessor);
    if (accessorImpl.hasPnVd()) {
      setPnVd(accessorImpl.getPnVd());
    } else {
      clearPnVd();
    }
    setPeVn(accessorImpl.peVn_Accessor);
    setPeVe(accessorImpl.peVe_Accessor);
    if (accessorImpl.hasPeVd()) {
      setPeVd(accessorImpl.getPeVd());
    } else {
      clearPeVd();
    }
    if (accessorImpl.hasPdVn()) {
      setPdVn(accessorImpl.getPdVn());
    } else {
      clearPdVn();
    }
    if (accessorImpl.hasPdVe()) {
      setPdVe(accessorImpl.getPdVe());
    } else {
      clearPdVe();
    }
    if (accessorImpl.hasPdVd()) {
      setPdVd(accessorImpl.getPdVd());
    } else {
      clearPdVd();
    }
  }
}

void PositionVelocityCovarianceType::reset() noexcept {
  pnVn_Accessor = 0.0;
  pnVe_Accessor = 0.0;
  clearPnVd();
  peVn_Accessor = 0.0;
  peVe_Accessor = 0.0;
  clearPeVd();
  clearPdVn();
  clearPdVe();
  clearPdVd();
}

xs::Double PositionVelocityCovarianceType::getPnVn() const {
  return pnVn_Accessor;
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::setPnVn(xs::Double value) {
  pnVn_Accessor = value;
  return *this;
}


xs::Double PositionVelocityCovarianceType::getPnVe() const {
  return pnVe_Accessor;
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::setPnVe(xs::Double value) {
  pnVe_Accessor = value;
  return *this;
}


xs::Double PositionVelocityCovarianceType::getPnVd() const {
  if (pnVd_Accessor) {
    return *pnVd_Accessor;
  }
  throw uci::base::UCIException("Error in getPnVd(): An attempt was made to get an optional field that was not enabled, call hasPnVd() to determine if it is safe to call getPnVd()");
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::setPnVd(xs::Double value) {
  pnVd_Accessor = value;
  return *this;
}

bool PositionVelocityCovarianceType::hasPnVd() const noexcept {
  return pnVd_Accessor.has_value();
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::clearPnVd() noexcept {
  pnVd_Accessor.reset();
  return *this;
}

xs::Double PositionVelocityCovarianceType::getPeVn() const {
  return peVn_Accessor;
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::setPeVn(xs::Double value) {
  peVn_Accessor = value;
  return *this;
}


xs::Double PositionVelocityCovarianceType::getPeVe() const {
  return peVe_Accessor;
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::setPeVe(xs::Double value) {
  peVe_Accessor = value;
  return *this;
}


xs::Double PositionVelocityCovarianceType::getPeVd() const {
  if (peVd_Accessor) {
    return *peVd_Accessor;
  }
  throw uci::base::UCIException("Error in getPeVd(): An attempt was made to get an optional field that was not enabled, call hasPeVd() to determine if it is safe to call getPeVd()");
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::setPeVd(xs::Double value) {
  peVd_Accessor = value;
  return *this;
}

bool PositionVelocityCovarianceType::hasPeVd() const noexcept {
  return peVd_Accessor.has_value();
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::clearPeVd() noexcept {
  peVd_Accessor.reset();
  return *this;
}

xs::Double PositionVelocityCovarianceType::getPdVn() const {
  if (pdVn_Accessor) {
    return *pdVn_Accessor;
  }
  throw uci::base::UCIException("Error in getPdVn(): An attempt was made to get an optional field that was not enabled, call hasPdVn() to determine if it is safe to call getPdVn()");
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::setPdVn(xs::Double value) {
  pdVn_Accessor = value;
  return *this;
}

bool PositionVelocityCovarianceType::hasPdVn() const noexcept {
  return pdVn_Accessor.has_value();
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::clearPdVn() noexcept {
  pdVn_Accessor.reset();
  return *this;
}

xs::Double PositionVelocityCovarianceType::getPdVe() const {
  if (pdVe_Accessor) {
    return *pdVe_Accessor;
  }
  throw uci::base::UCIException("Error in getPdVe(): An attempt was made to get an optional field that was not enabled, call hasPdVe() to determine if it is safe to call getPdVe()");
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::setPdVe(xs::Double value) {
  pdVe_Accessor = value;
  return *this;
}

bool PositionVelocityCovarianceType::hasPdVe() const noexcept {
  return pdVe_Accessor.has_value();
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::clearPdVe() noexcept {
  pdVe_Accessor.reset();
  return *this;
}

xs::Double PositionVelocityCovarianceType::getPdVd() const {
  if (pdVd_Accessor) {
    return *pdVd_Accessor;
  }
  throw uci::base::UCIException("Error in getPdVd(): An attempt was made to get an optional field that was not enabled, call hasPdVd() to determine if it is safe to call getPdVd()");
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::setPdVd(xs::Double value) {
  pdVd_Accessor = value;
  return *this;
}

bool PositionVelocityCovarianceType::hasPdVd() const noexcept {
  return pdVd_Accessor.has_value();
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::clearPdVd() noexcept {
  pdVd_Accessor.reset();
  return *this;
}

std::unique_ptr<PositionVelocityCovarianceType> PositionVelocityCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionVelocityCovarianceType : type};
  return (requestedType == uci::type::accessorType::positionVelocityCovarianceType) ? boost::make_unique<PositionVelocityCovarianceType>() : nullptr;
}

/**  */
namespace PositionVelocityCovarianceType_Names {

constexpr const char* Extern_Type_Name{"PositionVelocityCovarianceType"};
constexpr const char* PnVn_Name{"PnVn"};
constexpr const char* PnVe_Name{"PnVe"};
constexpr const char* PnVd_Name{"PnVd"};
constexpr const char* PeVn_Name{"PeVn"};
constexpr const char* PeVe_Name{"PeVe"};
constexpr const char* PeVd_Name{"PeVd"};
constexpr const char* PdVn_Name{"PdVn"};
constexpr const char* PdVe_Name{"PdVe"};
constexpr const char* PdVd_Name{"PdVd"};

} // namespace PositionVelocityCovarianceType_Names

void PositionVelocityCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PositionVelocityCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PositionVelocityCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PositionVelocityCovarianceType_Names::PnVn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPnVn(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionVelocityCovarianceType_Names::PnVe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPnVe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionVelocityCovarianceType_Names::PnVd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPnVd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionVelocityCovarianceType_Names::PeVn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeVn(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionVelocityCovarianceType_Names::PeVe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeVe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionVelocityCovarianceType_Names::PeVd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeVd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionVelocityCovarianceType_Names::PdVn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPdVn(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionVelocityCovarianceType_Names::PdVe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPdVe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionVelocityCovarianceType_Names::PdVd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPdVd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string PositionVelocityCovarianceType::serialize(const uci::type::PositionVelocityCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PositionVelocityCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PositionVelocityCovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPnVn(), node, PositionVelocityCovarianceType_Names::PnVn_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPnVe(), node, PositionVelocityCovarianceType_Names::PnVe_Name);
  if (accessor.hasPnVd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPnVd(), node, PositionVelocityCovarianceType_Names::PnVd_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPeVn(), node, PositionVelocityCovarianceType_Names::PeVn_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPeVe(), node, PositionVelocityCovarianceType_Names::PeVe_Name);
  if (accessor.hasPeVd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPeVd(), node, PositionVelocityCovarianceType_Names::PeVd_Name);
  }
  if (accessor.hasPdVn()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPdVn(), node, PositionVelocityCovarianceType_Names::PdVn_Name);
  }
  if (accessor.hasPdVe()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPdVe(), node, PositionVelocityCovarianceType_Names::PdVe_Name);
  }
  if (accessor.hasPdVd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPdVd(), node, PositionVelocityCovarianceType_Names::PdVd_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PositionVelocityCovarianceType>().release());
}

uci::type::PositionVelocityCovarianceType& PositionVelocityCovarianceType::create(const uci::type::PositionVelocityCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PositionVelocityCovarianceType> newAccessor{boost::make_unique<asb_uci::type::PositionVelocityCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PositionVelocityCovarianceType::destroy(uci::type::PositionVelocityCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::PositionVelocityCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

