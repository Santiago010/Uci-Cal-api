/** @file ESM_ChangeDwellType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ESM_ChangeDwellType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityCommandStateEnum.h"
#include "../../../include/asb_uci/type/DwellID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityCommandStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DwellID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_ChangeDwellType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ESM_ChangeDwellType::ESM_ChangeDwellType()
  : dwellID_Accessor{boost::make_unique<DwellID_Type>()} {
}

ESM_ChangeDwellType::~ESM_ChangeDwellType() = default;

void ESM_ChangeDwellType::copy(const uci::type::ESM_ChangeDwellType& accessor) {
  copyImpl(accessor, false);
}

void ESM_ChangeDwellType::copyImpl(const uci::type::ESM_ChangeDwellType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ESM_ChangeDwellType&>(accessor);
    setDwellID(*(accessorImpl.dwellID_Accessor));
    if (accessorImpl.changeState_Accessor) {
      setChangeState(*(accessorImpl.changeState_Accessor));
    } else {
      changeState_Accessor.reset();
    }
    if (accessorImpl.hasUnallocate()) {
      setUnallocate(accessorImpl.getUnallocate());
    } else {
      clearUnallocate();
    }
    if (accessorImpl.hasDeleteDwell()) {
      setDeleteDwell(accessorImpl.getDeleteDwell());
    } else {
      clearDeleteDwell();
    }
  }
}

void ESM_ChangeDwellType::reset() noexcept {
  dwellID_Accessor->reset();
  changeState_Accessor.reset();
  clearUnallocate();
  clearDeleteDwell();
}

const uci::type::DwellID_Type& ESM_ChangeDwellType::getDwellID() const {
  return *dwellID_Accessor;
}

uci::type::DwellID_Type& ESM_ChangeDwellType::getDwellID() {
  return *dwellID_Accessor;
}

uci::type::ESM_ChangeDwellType& ESM_ChangeDwellType::setDwellID(const uci::type::DwellID_Type& accessor) {
  if (&accessor != dwellID_Accessor.get()) {
    dwellID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CapabilityCommandStateEnum& ESM_ChangeDwellType::getChangeState_() const {
  if (changeState_Accessor) {
    return *changeState_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeState(): An attempt was made to get an optional field that was not enabled, call hasChangeState() to determine if it is safe to call getChangeState()");
}

const uci::type::CapabilityCommandStateEnum& ESM_ChangeDwellType::getChangeState() const {
  return getChangeState_();
}

uci::type::CapabilityCommandStateEnum& ESM_ChangeDwellType::getChangeState() {
  return getChangeState_();
}

uci::type::ESM_ChangeDwellType& ESM_ChangeDwellType::setChangeState(const uci::type::CapabilityCommandStateEnum& accessor) {
  enableChangeState();
  if (&accessor != changeState_Accessor.get()) {
    changeState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ESM_ChangeDwellType& ESM_ChangeDwellType::setChangeState(const uci::type::CapabilityCommandStateEnum::EnumerationItem value) {
  enableChangeState().setValue(value);
  return *this;
}

bool ESM_ChangeDwellType::hasChangeState() const noexcept {
  return static_cast<bool>(changeState_Accessor);
}

uci::type::CapabilityCommandStateEnum& ESM_ChangeDwellType::enableChangeState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandStateEnum : type};
  if ((!changeState_Accessor) || (changeState_Accessor->getAccessorType() != requestedType)) {
    changeState_Accessor = CapabilityCommandStateEnum::create(requestedType);
    if (!changeState_Accessor) {
      throw uci::base::UCIException("Error in enableChangeState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeState_Accessor;
}

uci::type::ESM_ChangeDwellType& ESM_ChangeDwellType::clearChangeState() noexcept {
  changeState_Accessor.reset();
  return *this;
}

xs::Boolean ESM_ChangeDwellType::getUnallocate() const {
  if (unallocate_Accessor) {
    return *unallocate_Accessor;
  }
  throw uci::base::UCIException("Error in getUnallocate(): An attempt was made to get an optional field that was not enabled, call hasUnallocate() to determine if it is safe to call getUnallocate()");
}

uci::type::ESM_ChangeDwellType& ESM_ChangeDwellType::setUnallocate(xs::Boolean value) {
  unallocate_Accessor = value;
  return *this;
}

bool ESM_ChangeDwellType::hasUnallocate() const noexcept {
  return unallocate_Accessor.has_value();
}

uci::type::ESM_ChangeDwellType& ESM_ChangeDwellType::clearUnallocate() noexcept {
  unallocate_Accessor.reset();
  return *this;
}

xs::Boolean ESM_ChangeDwellType::getDeleteDwell() const {
  if (deleteDwell_Accessor) {
    return *deleteDwell_Accessor;
  }
  throw uci::base::UCIException("Error in getDeleteDwell(): An attempt was made to get an optional field that was not enabled, call hasDeleteDwell() to determine if it is safe to call getDeleteDwell()");
}

uci::type::ESM_ChangeDwellType& ESM_ChangeDwellType::setDeleteDwell(xs::Boolean value) {
  deleteDwell_Accessor = value;
  return *this;
}

bool ESM_ChangeDwellType::hasDeleteDwell() const noexcept {
  return deleteDwell_Accessor.has_value();
}

uci::type::ESM_ChangeDwellType& ESM_ChangeDwellType::clearDeleteDwell() noexcept {
  deleteDwell_Accessor.reset();
  return *this;
}

std::unique_ptr<ESM_ChangeDwellType> ESM_ChangeDwellType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_ChangeDwellType : type};
  return (requestedType == uci::type::accessorType::eSM_ChangeDwellType) ? boost::make_unique<ESM_ChangeDwellType>() : nullptr;
}

/**  */
namespace ESM_ChangeDwellType_Names {

constexpr const char* Extern_Type_Name{"ESM_ChangeDwellType"};
constexpr const char* DwellID_Name{"DwellID"};
constexpr const char* ChangeState_Name{"ChangeState"};
constexpr const char* Unallocate_Name{"Unallocate"};
constexpr const char* DeleteDwell_Name{"DeleteDwell"};

} // namespace ESM_ChangeDwellType_Names

void ESM_ChangeDwellType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ESM_ChangeDwellType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ESM_ChangeDwellType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ESM_ChangeDwellType_Names::DwellID_Name) {
      DwellID_Type::deserialize(valueType.second, accessor.getDwellID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_ChangeDwellType_Names::ChangeState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableChangeState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ESM_ChangeDwellType_Names::Unallocate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnallocate(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_ChangeDwellType_Names::DeleteDwell_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDeleteDwell(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string ESM_ChangeDwellType::serialize(const uci::type::ESM_ChangeDwellType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ESM_ChangeDwellType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ESM_ChangeDwellType_Names::Extern_Type_Name);
  }
  DwellID_Type::serialize(accessor.getDwellID(), node, ESM_ChangeDwellType_Names::DwellID_Name);
  if (accessor.hasChangeState()) {
    CapabilityCommandStateEnum::serialize(accessor.getChangeState(), node, ESM_ChangeDwellType_Names::ChangeState_Name, false);
  }
  if (accessor.hasUnallocate()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getUnallocate(), node, ESM_ChangeDwellType_Names::Unallocate_Name);
  }
  if (accessor.hasDeleteDwell()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getDeleteDwell(), node, ESM_ChangeDwellType_Names::DeleteDwell_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ESM_ChangeDwellType& ESM_ChangeDwellType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ESM_ChangeDwellType>().release());
}

uci::type::ESM_ChangeDwellType& ESM_ChangeDwellType::create(const uci::type::ESM_ChangeDwellType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ESM_ChangeDwellType> newAccessor{boost::make_unique<asb_uci::type::ESM_ChangeDwellType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ESM_ChangeDwellType::destroy(uci::type::ESM_ChangeDwellType& accessor) {
  delete dynamic_cast<asb_uci::type::ESM_ChangeDwellType*>(&accessor);
}

} // namespace type

} // namespace uci

