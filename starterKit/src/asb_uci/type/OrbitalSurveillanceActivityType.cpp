/** @file OrbitalSurveillanceActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitalSurveillanceActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityBaseType.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceActivityDetailType.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceTargetType.h"
#include "../../../include/asb_uci/type/TraceabilityType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceActivityDetailType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceActivityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceTargetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalSurveillanceActivityType::OrbitalSurveillanceActivityType()
  : target_Accessor{boost::make_unique<OrbitalSurveillanceTargetType>()},
    metrics_Accessor{boost::make_unique<Metrics>(0, SIZE_MAX)} {
}

OrbitalSurveillanceActivityType::~OrbitalSurveillanceActivityType() = default;

void OrbitalSurveillanceActivityType::copy(const uci::type::OrbitalSurveillanceActivityType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalSurveillanceActivityType::copyImpl(const uci::type::OrbitalSurveillanceActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ActivityBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const OrbitalSurveillanceActivityType&>(accessor);
    setTarget(*(accessorImpl.target_Accessor));
    if (accessorImpl.hasAllProductsAndMessagesProduced()) {
      setAllProductsAndMessagesProduced(accessorImpl.getAllProductsAndMessagesProduced());
    } else {
      clearAllProductsAndMessagesProduced();
    }
    setMetrics(*(accessorImpl.metrics_Accessor));
    if (accessorImpl.traceability_Accessor) {
      setTraceability(*(accessorImpl.traceability_Accessor));
    } else {
      traceability_Accessor.reset();
    }
  }
}

void OrbitalSurveillanceActivityType::reset() noexcept {
  ActivityBaseType::reset();
  target_Accessor->reset();
  clearAllProductsAndMessagesProduced();
  metrics_Accessor->reset();
  traceability_Accessor.reset();
}

const uci::type::OrbitalSurveillanceTargetType& OrbitalSurveillanceActivityType::getTarget() const {
  return *target_Accessor;
}

uci::type::OrbitalSurveillanceTargetType& OrbitalSurveillanceActivityType::getTarget() {
  return *target_Accessor;
}

uci::type::OrbitalSurveillanceActivityType& OrbitalSurveillanceActivityType::setTarget(const uci::type::OrbitalSurveillanceTargetType& accessor) {
  if (&accessor != target_Accessor.get()) {
    target_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean OrbitalSurveillanceActivityType::getAllProductsAndMessagesProduced() const {
  if (allProductsAndMessagesProduced_Accessor) {
    return *allProductsAndMessagesProduced_Accessor;
  }
  throw uci::base::UCIException("Error in getAllProductsAndMessagesProduced(): An attempt was made to get an optional field that was not enabled, call hasAllProductsAndMessagesProduced() to determine if it is safe to call getAllProductsAndMessagesProduced()");
}

uci::type::OrbitalSurveillanceActivityType& OrbitalSurveillanceActivityType::setAllProductsAndMessagesProduced(xs::Boolean value) {
  allProductsAndMessagesProduced_Accessor = value;
  return *this;
}

bool OrbitalSurveillanceActivityType::hasAllProductsAndMessagesProduced() const noexcept {
  return allProductsAndMessagesProduced_Accessor.has_value();
}

uci::type::OrbitalSurveillanceActivityType& OrbitalSurveillanceActivityType::clearAllProductsAndMessagesProduced() noexcept {
  allProductsAndMessagesProduced_Accessor.reset();
  return *this;
}

const uci::type::OrbitalSurveillanceActivityType::Metrics& OrbitalSurveillanceActivityType::getMetrics() const {
  return *metrics_Accessor;
}

uci::type::OrbitalSurveillanceActivityType::Metrics& OrbitalSurveillanceActivityType::getMetrics() {
  return *metrics_Accessor;
}

uci::type::OrbitalSurveillanceActivityType& OrbitalSurveillanceActivityType::setMetrics(const uci::type::OrbitalSurveillanceActivityType::Metrics& accessor) {
  if (&accessor != metrics_Accessor.get()) {
    metrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TraceabilityType& OrbitalSurveillanceActivityType::getTraceability_() const {
  if (traceability_Accessor) {
    return *traceability_Accessor;
  }
  throw uci::base::UCIException("Error in getTraceability(): An attempt was made to get an optional field that was not enabled, call hasTraceability() to determine if it is safe to call getTraceability()");
}

const uci::type::TraceabilityType& OrbitalSurveillanceActivityType::getTraceability() const {
  return getTraceability_();
}

uci::type::TraceabilityType& OrbitalSurveillanceActivityType::getTraceability() {
  return getTraceability_();
}

uci::type::OrbitalSurveillanceActivityType& OrbitalSurveillanceActivityType::setTraceability(const uci::type::TraceabilityType& accessor) {
  enableTraceability();
  if (&accessor != traceability_Accessor.get()) {
    traceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceActivityType::hasTraceability() const noexcept {
  return static_cast<bool>(traceability_Accessor);
}

uci::type::TraceabilityType& OrbitalSurveillanceActivityType::enableTraceability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::traceabilityType : type};
  if ((!traceability_Accessor) || (traceability_Accessor->getAccessorType() != requestedType)) {
    traceability_Accessor = TraceabilityType::create(requestedType);
    if (!traceability_Accessor) {
      throw uci::base::UCIException("Error in enableTraceability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *traceability_Accessor;
}

uci::type::OrbitalSurveillanceActivityType& OrbitalSurveillanceActivityType::clearTraceability() noexcept {
  traceability_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalSurveillanceActivityType> OrbitalSurveillanceActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceActivityType : type};
  return (requestedType == uci::type::accessorType::orbitalSurveillanceActivityType) ? boost::make_unique<OrbitalSurveillanceActivityType>() : nullptr;
}

/**  */
namespace OrbitalSurveillanceActivityType_Names {

constexpr const char* Extern_Type_Name{"OrbitalSurveillanceActivityType"};
constexpr const char* Target_Name{"Target"};
constexpr const char* AllProductsAndMessagesProduced_Name{"AllProductsAndMessagesProduced"};
constexpr const char* Metrics_Name{"Metrics"};
constexpr const char* Traceability_Name{"Traceability"};

} // namespace OrbitalSurveillanceActivityType_Names

void OrbitalSurveillanceActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalSurveillanceActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalSurveillanceActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceActivityType_Names::Target_Name) {
      OrbitalSurveillanceTargetType::deserialize(valueType.second, accessor.getTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceActivityType_Names::AllProductsAndMessagesProduced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAllProductsAndMessagesProduced(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceActivityType_Names::Metrics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitalSurveillanceActivityType::Metrics& boundedList = accessor.getMetrics();
        const uci::type::OrbitalSurveillanceActivityType::Metrics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitalSurveillanceActivityDetailType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceActivityType_Names::Traceability_Name) {
      TraceabilityType::deserialize(valueType.second, accessor.enableTraceability(), nodeName, nsPrefix);
    }
  }
  ActivityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string OrbitalSurveillanceActivityType::serialize(const uci::type::OrbitalSurveillanceActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalSurveillanceActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalSurveillanceActivityType_Names::Extern_Type_Name);
  }
  ActivityBaseType::serialize(accessor, node, "", false, false, false);
  OrbitalSurveillanceTargetType::serialize(accessor.getTarget(), node, OrbitalSurveillanceActivityType_Names::Target_Name);
  if (accessor.hasAllProductsAndMessagesProduced()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAllProductsAndMessagesProduced(), node, OrbitalSurveillanceActivityType_Names::AllProductsAndMessagesProduced_Name);
  }
  {
    const uci::type::OrbitalSurveillanceActivityType::Metrics& boundedList = accessor.getMetrics();
    for (uci::type::OrbitalSurveillanceActivityType::Metrics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitalSurveillanceActivityDetailType::serialize(boundedList.at(i), node, OrbitalSurveillanceActivityType_Names::Metrics_Name);
    }
  }
  if (accessor.hasTraceability()) {
    TraceabilityType::serialize(accessor.getTraceability(), node, OrbitalSurveillanceActivityType_Names::Traceability_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalSurveillanceActivityType& OrbitalSurveillanceActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalSurveillanceActivityType>().release());
}

uci::type::OrbitalSurveillanceActivityType& OrbitalSurveillanceActivityType::create(const uci::type::OrbitalSurveillanceActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalSurveillanceActivityType> newAccessor{boost::make_unique<asb_uci::type::OrbitalSurveillanceActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalSurveillanceActivityType::destroy(uci::type::OrbitalSurveillanceActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalSurveillanceActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

