/** @file SlavedNavigationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SlavedNavigationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SlavedNavigationType.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SlavedNavigationType::SlavedNavigationType() = default;

SlavedNavigationType::~SlavedNavigationType() = default;

void SlavedNavigationType::copy(const uci::type::SlavedNavigationType& accessor) {
  copyImpl(accessor, false);
}

void SlavedNavigationType::copyImpl(const uci::type::SlavedNavigationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SlavedNavigationType&>(accessor);
    if (accessorImpl.slavedToSystemID_Accessor) {
      setSlavedToSystemID(*(accessorImpl.slavedToSystemID_Accessor));
    } else {
      slavedToSystemID_Accessor.reset();
    }
    if (accessorImpl.slavedToServiceID_Accessor) {
      setSlavedToServiceID(*(accessorImpl.slavedToServiceID_Accessor));
    } else {
      slavedToServiceID_Accessor.reset();
    }
    if (accessorImpl.slavedToCapabilityID_Accessor) {
      setSlavedToCapabilityID(*(accessorImpl.slavedToCapabilityID_Accessor));
    } else {
      slavedToCapabilityID_Accessor.reset();
    }
  }
}

void SlavedNavigationType::reset() noexcept {
  slavedToSystemID_Accessor.reset();
  slavedToServiceID_Accessor.reset();
  slavedToCapabilityID_Accessor.reset();
}

uci::type::SystemID_Type& SlavedNavigationType::getSlavedToSystemID_() const {
  if (slavedToSystemID_Accessor) {
    return *slavedToSystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSlavedToSystemID(): An attempt was made to get an optional field that was not enabled, call hasSlavedToSystemID() to determine if it is safe to call getSlavedToSystemID()");
}

const uci::type::SystemID_Type& SlavedNavigationType::getSlavedToSystemID() const {
  return getSlavedToSystemID_();
}

uci::type::SystemID_Type& SlavedNavigationType::getSlavedToSystemID() {
  return getSlavedToSystemID_();
}

uci::type::SlavedNavigationType& SlavedNavigationType::setSlavedToSystemID(const uci::type::SystemID_Type& accessor) {
  enableSlavedToSystemID();
  if (&accessor != slavedToSystemID_Accessor.get()) {
    slavedToSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SlavedNavigationType::hasSlavedToSystemID() const noexcept {
  return static_cast<bool>(slavedToSystemID_Accessor);
}

uci::type::SystemID_Type& SlavedNavigationType::enableSlavedToSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!slavedToSystemID_Accessor) || (slavedToSystemID_Accessor->getAccessorType() != requestedType)) {
    slavedToSystemID_Accessor = SystemID_Type::create(requestedType);
    if (!slavedToSystemID_Accessor) {
      throw uci::base::UCIException("Error in enableSlavedToSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *slavedToSystemID_Accessor;
}

uci::type::SlavedNavigationType& SlavedNavigationType::clearSlavedToSystemID() noexcept {
  slavedToSystemID_Accessor.reset();
  return *this;
}

uci::type::ServiceID_Type& SlavedNavigationType::getSlavedToServiceID_() const {
  if (slavedToServiceID_Accessor) {
    return *slavedToServiceID_Accessor;
  }
  throw uci::base::UCIException("Error in getSlavedToServiceID(): An attempt was made to get an optional field that was not enabled, call hasSlavedToServiceID() to determine if it is safe to call getSlavedToServiceID()");
}

const uci::type::ServiceID_Type& SlavedNavigationType::getSlavedToServiceID() const {
  return getSlavedToServiceID_();
}

uci::type::ServiceID_Type& SlavedNavigationType::getSlavedToServiceID() {
  return getSlavedToServiceID_();
}

uci::type::SlavedNavigationType& SlavedNavigationType::setSlavedToServiceID(const uci::type::ServiceID_Type& accessor) {
  enableSlavedToServiceID();
  if (&accessor != slavedToServiceID_Accessor.get()) {
    slavedToServiceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SlavedNavigationType::hasSlavedToServiceID() const noexcept {
  return static_cast<bool>(slavedToServiceID_Accessor);
}

uci::type::ServiceID_Type& SlavedNavigationType::enableSlavedToServiceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceID_Type : type};
  if ((!slavedToServiceID_Accessor) || (slavedToServiceID_Accessor->getAccessorType() != requestedType)) {
    slavedToServiceID_Accessor = ServiceID_Type::create(requestedType);
    if (!slavedToServiceID_Accessor) {
      throw uci::base::UCIException("Error in enableSlavedToServiceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *slavedToServiceID_Accessor;
}

uci::type::SlavedNavigationType& SlavedNavigationType::clearSlavedToServiceID() noexcept {
  slavedToServiceID_Accessor.reset();
  return *this;
}

uci::type::CapabilityID_Type& SlavedNavigationType::getSlavedToCapabilityID_() const {
  if (slavedToCapabilityID_Accessor) {
    return *slavedToCapabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getSlavedToCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasSlavedToCapabilityID() to determine if it is safe to call getSlavedToCapabilityID()");
}

const uci::type::CapabilityID_Type& SlavedNavigationType::getSlavedToCapabilityID() const {
  return getSlavedToCapabilityID_();
}

uci::type::CapabilityID_Type& SlavedNavigationType::getSlavedToCapabilityID() {
  return getSlavedToCapabilityID_();
}

uci::type::SlavedNavigationType& SlavedNavigationType::setSlavedToCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableSlavedToCapabilityID();
  if (&accessor != slavedToCapabilityID_Accessor.get()) {
    slavedToCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SlavedNavigationType::hasSlavedToCapabilityID() const noexcept {
  return static_cast<bool>(slavedToCapabilityID_Accessor);
}

uci::type::CapabilityID_Type& SlavedNavigationType::enableSlavedToCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!slavedToCapabilityID_Accessor) || (slavedToCapabilityID_Accessor->getAccessorType() != requestedType)) {
    slavedToCapabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!slavedToCapabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableSlavedToCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *slavedToCapabilityID_Accessor;
}

uci::type::SlavedNavigationType& SlavedNavigationType::clearSlavedToCapabilityID() noexcept {
  slavedToCapabilityID_Accessor.reset();
  return *this;
}

std::unique_ptr<SlavedNavigationType> SlavedNavigationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::slavedNavigationType : type};
  return (requestedType == uci::type::accessorType::slavedNavigationType) ? boost::make_unique<SlavedNavigationType>() : nullptr;
}

/**  */
namespace SlavedNavigationType_Names {

constexpr const char* Extern_Type_Name{"SlavedNavigationType"};
constexpr const char* SlavedToSystemID_Name{"SlavedToSystemID"};
constexpr const char* SlavedToServiceID_Name{"SlavedToServiceID"};
constexpr const char* SlavedToCapabilityID_Name{"SlavedToCapabilityID"};

} // namespace SlavedNavigationType_Names

void SlavedNavigationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SlavedNavigationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SlavedNavigationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SlavedNavigationType_Names::SlavedToSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSlavedToSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SlavedNavigationType_Names::SlavedToServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.enableSlavedToServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SlavedNavigationType_Names::SlavedToCapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableSlavedToCapabilityID(), nodeName, nsPrefix);
    }
  }
}

std::string SlavedNavigationType::serialize(const uci::type::SlavedNavigationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SlavedNavigationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SlavedNavigationType_Names::Extern_Type_Name);
  }
  if (accessor.hasSlavedToSystemID()) {
    SystemID_Type::serialize(accessor.getSlavedToSystemID(), node, SlavedNavigationType_Names::SlavedToSystemID_Name);
  }
  if (accessor.hasSlavedToServiceID()) {
    ServiceID_Type::serialize(accessor.getSlavedToServiceID(), node, SlavedNavigationType_Names::SlavedToServiceID_Name);
  }
  if (accessor.hasSlavedToCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getSlavedToCapabilityID(), node, SlavedNavigationType_Names::SlavedToCapabilityID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SlavedNavigationType& SlavedNavigationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SlavedNavigationType>().release());
}

uci::type::SlavedNavigationType& SlavedNavigationType::create(const uci::type::SlavedNavigationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SlavedNavigationType> newAccessor{boost::make_unique<asb_uci::type::SlavedNavigationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SlavedNavigationType::destroy(uci::type::SlavedNavigationType& accessor) {
  delete dynamic_cast<asb_uci::type::SlavedNavigationType*>(&accessor);
}

} // namespace type

} // namespace uci

