/** @file SeparationParametersType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SeparationParametersType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SeparationParametersType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SeparationParametersType::SeparationParametersType() = default;

SeparationParametersType::~SeparationParametersType() = default;

void SeparationParametersType::copy(const uci::type::SeparationParametersType& accessor) {
  copyImpl(accessor, false);
}

void SeparationParametersType::copyImpl(const uci::type::SeparationParametersType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::separationParametersType)) {
      const auto& accessorImpl = dynamic_cast<const SeparationParametersType&>(accessor);
      setAltitudeDistance(accessorImpl.altitudeDistance_Accessor);
      setHorizontalDistance(accessorImpl.horizontalDistance_Accessor);
      setForwardDistance(accessorImpl.forwardDistance_Accessor);
      setTrailingDistance(accessorImpl.trailingDistance_Accessor);
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void SeparationParametersType::reset() noexcept {
  altitudeDistance_Accessor = 0.0;
  horizontalDistance_Accessor = 0.0;
  forwardDistance_Accessor = 0.0;
  trailingDistance_Accessor = 0.0;
}

uci::type::DistanceTypeValue SeparationParametersType::getAltitudeDistance() const {
  return altitudeDistance_Accessor;
}

uci::type::SeparationParametersType& SeparationParametersType::setAltitudeDistance(uci::type::DistanceTypeValue value) {
  altitudeDistance_Accessor = value;
  return *this;
}


uci::type::DistanceTypeValue SeparationParametersType::getHorizontalDistance() const {
  return horizontalDistance_Accessor;
}

uci::type::SeparationParametersType& SeparationParametersType::setHorizontalDistance(uci::type::DistanceTypeValue value) {
  horizontalDistance_Accessor = value;
  return *this;
}


uci::type::DistanceTypeValue SeparationParametersType::getForwardDistance() const {
  return forwardDistance_Accessor;
}

uci::type::SeparationParametersType& SeparationParametersType::setForwardDistance(uci::type::DistanceTypeValue value) {
  forwardDistance_Accessor = value;
  return *this;
}


uci::type::DistanceTypeValue SeparationParametersType::getTrailingDistance() const {
  return trailingDistance_Accessor;
}

uci::type::SeparationParametersType& SeparationParametersType::setTrailingDistance(uci::type::DistanceTypeValue value) {
  trailingDistance_Accessor = value;
  return *this;
}


std::unique_ptr<SeparationParametersType> SeparationParametersType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::separationParametersType : type};
  return std::unique_ptr<SeparationParametersType>(dynamic_cast<SeparationParametersType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace SeparationParametersType_Names {

constexpr const char* Extern_Type_Name{"SeparationParametersType"};
constexpr const char* AltitudeDistance_Name{"AltitudeDistance"};
constexpr const char* HorizontalDistance_Name{"HorizontalDistance"};
constexpr const char* ForwardDistance_Name{"ForwardDistance"};
constexpr const char* TrailingDistance_Name{"TrailingDistance"};

} // namespace SeparationParametersType_Names

void SeparationParametersType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SeparationParametersType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SeparationParametersType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SeparationParametersType_Names::AltitudeDistance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAltitudeDistance(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SeparationParametersType_Names::HorizontalDistance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHorizontalDistance(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SeparationParametersType_Names::ForwardDistance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setForwardDistance(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SeparationParametersType_Names::TrailingDistance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTrailingDistance(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string SeparationParametersType::serialize(const uci::type::SeparationParametersType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SeparationParametersType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::separationParametersType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, SeparationParametersType_Names::Extern_Type_Name);
    }
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAltitudeDistance(), node, SeparationParametersType_Names::AltitudeDistance_Name);
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getHorizontalDistance(), node, SeparationParametersType_Names::HorizontalDistance_Name);
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getForwardDistance(), node, SeparationParametersType_Names::ForwardDistance_Name);
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTrailingDistance(), node, SeparationParametersType_Names::TrailingDistance_Name);
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SeparationParametersType& SeparationParametersType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SeparationParametersType>().release());
}

uci::type::SeparationParametersType& SeparationParametersType::create(const uci::type::SeparationParametersType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SeparationParametersType> newAccessor{boost::make_unique<asb_uci::type::SeparationParametersType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SeparationParametersType::destroy(uci::type::SeparationParametersType& accessor) {
  delete dynamic_cast<asb_uci::type::SeparationParametersType*>(&accessor);
}

} // namespace type

} // namespace uci

