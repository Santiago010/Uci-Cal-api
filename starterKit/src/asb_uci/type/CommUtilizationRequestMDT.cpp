/** @file CommUtilizationRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommUtilizationRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommDataType.h"
#include "../../../include/asb_uci/type/ComparableRankingType.h"
#include "../../../include/asb_uci/type/DateTimeRangeType.h"
#include "../../../include/asb_uci/type/Point2D_Type.h"
#include "../../../include/asb_uci/type/RequestBaseType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommUtilizationRequestMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComparableRankingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point2D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommUtilizationRequestMDT::CommUtilizationRequestMDT()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()},
    commUtilizationData_Accessor{boost::make_unique<CommDataType>()},
    timeSpan_Accessor{boost::make_unique<DateTimeRangeType>()},
    position_Accessor{boost::make_unique<Point2D_Type>()},
    relativePriority_Accessor{boost::make_unique<ComparableRankingType>()} {
}

CommUtilizationRequestMDT::~CommUtilizationRequestMDT() = default;

void CommUtilizationRequestMDT::copy(const uci::type::CommUtilizationRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void CommUtilizationRequestMDT::copyImpl(const uci::type::CommUtilizationRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CommUtilizationRequestMDT&>(accessor);
    setSystemID(*(accessorImpl.systemID_Accessor));
    setCommUtilizationData(*(accessorImpl.commUtilizationData_Accessor));
    setTimeSpan(*(accessorImpl.timeSpan_Accessor));
    setPosition(*(accessorImpl.position_Accessor));
    setRelativePriority(*(accessorImpl.relativePriority_Accessor));
  }
}

void CommUtilizationRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  systemID_Accessor->reset();
  if (commUtilizationData_Accessor->getAccessorType() != uci::type::accessorType::commDataType) {
    commUtilizationData_Accessor = boost::make_unique<CommDataType>();
  } else {
    commUtilizationData_Accessor->reset();
  }
  timeSpan_Accessor->reset();
  if (position_Accessor->getAccessorType() != uci::type::accessorType::point2D_Type) {
    position_Accessor = boost::make_unique<Point2D_Type>();
  } else {
    position_Accessor->reset();
  }
  relativePriority_Accessor->reset();
}

const uci::type::SystemID_Type& CommUtilizationRequestMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& CommUtilizationRequestMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::CommUtilizationRequestMDT& CommUtilizationRequestMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommDataType& CommUtilizationRequestMDT::getCommUtilizationData() const {
  return *commUtilizationData_Accessor;
}

uci::type::CommDataType& CommUtilizationRequestMDT::getCommUtilizationData() {
  return *commUtilizationData_Accessor;
}

uci::type::CommUtilizationRequestMDT& CommUtilizationRequestMDT::setCommUtilizationData(const uci::type::CommDataType& accessor) {
  enableCommUtilizationData(accessor.getAccessorType());
  if (&accessor != commUtilizationData_Accessor.get()) {
    commUtilizationData_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::CommDataType& CommUtilizationRequestMDT::enableCommUtilizationData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commDataType : type};
  if ((!commUtilizationData_Accessor) || (commUtilizationData_Accessor->getAccessorType() != requestedType)) {
    commUtilizationData_Accessor = CommDataType::create(requestedType);
    if (!commUtilizationData_Accessor) {
      throw uci::base::UCIException("Error in enableCommUtilizationData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commUtilizationData_Accessor;
}

const uci::type::DateTimeRangeType& CommUtilizationRequestMDT::getTimeSpan() const {
  return *timeSpan_Accessor;
}

uci::type::DateTimeRangeType& CommUtilizationRequestMDT::getTimeSpan() {
  return *timeSpan_Accessor;
}

uci::type::CommUtilizationRequestMDT& CommUtilizationRequestMDT::setTimeSpan(const uci::type::DateTimeRangeType& accessor) {
  if (&accessor != timeSpan_Accessor.get()) {
    timeSpan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::Point2D_Type& CommUtilizationRequestMDT::getPosition() const {
  return *position_Accessor;
}

uci::type::Point2D_Type& CommUtilizationRequestMDT::getPosition() {
  return *position_Accessor;
}

uci::type::CommUtilizationRequestMDT& CommUtilizationRequestMDT::setPosition(const uci::type::Point2D_Type& accessor) {
  enablePosition(accessor.getAccessorType());
  if (&accessor != position_Accessor.get()) {
    position_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point2D_Type& CommUtilizationRequestMDT::enablePosition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!position_Accessor) || (position_Accessor->getAccessorType() != requestedType)) {
    position_Accessor = Point2D_Type::create(requestedType);
    if (!position_Accessor) {
      throw uci::base::UCIException("Error in enablePosition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *position_Accessor;
}

const uci::type::ComparableRankingType& CommUtilizationRequestMDT::getRelativePriority() const {
  return *relativePriority_Accessor;
}

uci::type::ComparableRankingType& CommUtilizationRequestMDT::getRelativePriority() {
  return *relativePriority_Accessor;
}

uci::type::CommUtilizationRequestMDT& CommUtilizationRequestMDT::setRelativePriority(const uci::type::ComparableRankingType& accessor) {
  if (&accessor != relativePriority_Accessor.get()) {
    relativePriority_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommUtilizationRequestMDT> CommUtilizationRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commUtilizationRequestMDT : type};
  return (requestedType == uci::type::accessorType::commUtilizationRequestMDT) ? boost::make_unique<CommUtilizationRequestMDT>() : nullptr;
}

/**  */
namespace CommUtilizationRequestMDT_Names {

constexpr const char* Extern_Type_Name{"CommUtilizationRequestMDT"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* CommUtilizationData_Name{"CommUtilizationData"};
constexpr const char* TimeSpan_Name{"TimeSpan"};
constexpr const char* Position_Name{"Position"};
constexpr const char* RelativePriority_Name{"RelativePriority"};

} // namespace CommUtilizationRequestMDT_Names

void CommUtilizationRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommUtilizationRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommUtilizationRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommUtilizationRequestMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommUtilizationRequestMDT_Names::CommUtilizationData_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableCommUtilizationData(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommUtilizationRequestMDT_Names::TimeSpan_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.getTimeSpan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommUtilizationRequestMDT_Names::Position_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePosition(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommUtilizationRequestMDT_Names::RelativePriority_Name) {
      ComparableRankingType::deserialize(valueType.second, accessor.getRelativePriority(), nodeName, nsPrefix);
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CommUtilizationRequestMDT::serialize(const uci::type::CommUtilizationRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommUtilizationRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommUtilizationRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  SystemID_Type::serialize(accessor.getSystemID(), node, CommUtilizationRequestMDT_Names::SystemID_Name);
  CommDataType::serialize(accessor.getCommUtilizationData(), node, CommUtilizationRequestMDT_Names::CommUtilizationData_Name);
  DateTimeRangeType::serialize(accessor.getTimeSpan(), node, CommUtilizationRequestMDT_Names::TimeSpan_Name);
  Point2D_Type::serialize(accessor.getPosition(), node, CommUtilizationRequestMDT_Names::Position_Name);
  ComparableRankingType::serialize(accessor.getRelativePriority(), node, CommUtilizationRequestMDT_Names::RelativePriority_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommUtilizationRequestMDT& CommUtilizationRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommUtilizationRequestMDT>().release());
}

uci::type::CommUtilizationRequestMDT& CommUtilizationRequestMDT::create(const uci::type::CommUtilizationRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommUtilizationRequestMDT> newAccessor{boost::make_unique<asb_uci::type::CommUtilizationRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommUtilizationRequestMDT::destroy(uci::type::CommUtilizationRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::CommUtilizationRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

