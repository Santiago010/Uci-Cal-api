/** @file IdentityConfidenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/IdentityConfidenceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EOB_IdentityConfidenceType.h"
#include "../../../include/asb_uci/type/EmitterMultipleType.h"
#include "../../../include/asb_uci/type/EnvironmentIdentityConfidenceType.h"
#include "../../../include/asb_uci/type/PlatformIdentityConfidenceType.h"
#include "../../../include/asb_uci/type/SpecificEmitterMultipleType.h"
#include "../../../include/asb_uci/type/SpecificFacilityIdentityConfidenceType.h"
#include "../../../include/asb_uci/type/SpecificIdentityConfidenceType.h"
#include "../../../include/asb_uci/type/SpecificVehicleIdentityConfidenceType.h"
#include "../../../include/asb_uci/type/StandardIdentityConfidenceType.h"
#include "../../../include/asb_uci/type/StoreMultipleType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_IdentityConfidenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmitterMultipleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EnvironmentIdentityConfidenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IdentityConfidenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlatformIdentityConfidenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpecificEmitterMultipleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpecificFacilityIdentityConfidenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpecificIdentityConfidenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpecificVehicleIdentityConfidenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StandardIdentityConfidenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StoreMultipleType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IdentityConfidenceType::IdentityConfidenceType()
  : standard_Accessor{boost::make_unique<Standard>(0, 8)},
    environment_Accessor{boost::make_unique<Environment>(0, 6)},
    platform_Accessor{boost::make_unique<Platform>(0, SIZE_MAX)},
    specific_Accessor{boost::make_unique<Specific>(0, SIZE_MAX)},
    emitter_Accessor{boost::make_unique<Emitter>(0, SIZE_MAX)},
    specificEmitter_Accessor{boost::make_unique<SpecificEmitter>(0, SIZE_MAX)},
    specificVehicle_Accessor{boost::make_unique<SpecificVehicle>(0, SIZE_MAX)},
    specificFacility_Accessor{boost::make_unique<SpecificFacility>(0, SIZE_MAX)},
    eOB_Accessor{boost::make_unique<EOB>(0, SIZE_MAX)},
    weapon_Accessor{boost::make_unique<Weapon>(0, SIZE_MAX)} {
}

IdentityConfidenceType::~IdentityConfidenceType() = default;

void IdentityConfidenceType::copy(const uci::type::IdentityConfidenceType& accessor) {
  copyImpl(accessor, false);
}

void IdentityConfidenceType::copyImpl(const uci::type::IdentityConfidenceType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::identityConfidenceType)) {
      const auto& accessorImpl = dynamic_cast<const IdentityConfidenceType&>(accessor);
      setStandard(*(accessorImpl.standard_Accessor));
      setEnvironment(*(accessorImpl.environment_Accessor));
      setPlatform(*(accessorImpl.platform_Accessor));
      setSpecific(*(accessorImpl.specific_Accessor));
      setEmitter(*(accessorImpl.emitter_Accessor));
      setSpecificEmitter(*(accessorImpl.specificEmitter_Accessor));
      setSpecificVehicle(*(accessorImpl.specificVehicle_Accessor));
      setSpecificFacility(*(accessorImpl.specificFacility_Accessor));
      setEOB(*(accessorImpl.eOB_Accessor));
      setWeapon(*(accessorImpl.weapon_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void IdentityConfidenceType::reset() noexcept {
  standard_Accessor->reset();
  environment_Accessor->reset();
  platform_Accessor->reset();
  specific_Accessor->reset();
  emitter_Accessor->reset();
  specificEmitter_Accessor->reset();
  specificVehicle_Accessor->reset();
  specificFacility_Accessor->reset();
  eOB_Accessor->reset();
  weapon_Accessor->reset();
}

const uci::type::IdentityConfidenceType::Standard& IdentityConfidenceType::getStandard() const {
  return *standard_Accessor;
}

uci::type::IdentityConfidenceType::Standard& IdentityConfidenceType::getStandard() {
  return *standard_Accessor;
}

uci::type::IdentityConfidenceType& IdentityConfidenceType::setStandard(const uci::type::IdentityConfidenceType::Standard& accessor) {
  if (&accessor != standard_Accessor.get()) {
    standard_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IdentityConfidenceType::Environment& IdentityConfidenceType::getEnvironment() const {
  return *environment_Accessor;
}

uci::type::IdentityConfidenceType::Environment& IdentityConfidenceType::getEnvironment() {
  return *environment_Accessor;
}

uci::type::IdentityConfidenceType& IdentityConfidenceType::setEnvironment(const uci::type::IdentityConfidenceType::Environment& accessor) {
  if (&accessor != environment_Accessor.get()) {
    environment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IdentityConfidenceType::Platform& IdentityConfidenceType::getPlatform() const {
  return *platform_Accessor;
}

uci::type::IdentityConfidenceType::Platform& IdentityConfidenceType::getPlatform() {
  return *platform_Accessor;
}

uci::type::IdentityConfidenceType& IdentityConfidenceType::setPlatform(const uci::type::IdentityConfidenceType::Platform& accessor) {
  if (&accessor != platform_Accessor.get()) {
    platform_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IdentityConfidenceType::Specific& IdentityConfidenceType::getSpecific() const {
  return *specific_Accessor;
}

uci::type::IdentityConfidenceType::Specific& IdentityConfidenceType::getSpecific() {
  return *specific_Accessor;
}

uci::type::IdentityConfidenceType& IdentityConfidenceType::setSpecific(const uci::type::IdentityConfidenceType::Specific& accessor) {
  if (&accessor != specific_Accessor.get()) {
    specific_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IdentityConfidenceType::Emitter& IdentityConfidenceType::getEmitter() const {
  return *emitter_Accessor;
}

uci::type::IdentityConfidenceType::Emitter& IdentityConfidenceType::getEmitter() {
  return *emitter_Accessor;
}

uci::type::IdentityConfidenceType& IdentityConfidenceType::setEmitter(const uci::type::IdentityConfidenceType::Emitter& accessor) {
  if (&accessor != emitter_Accessor.get()) {
    emitter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IdentityConfidenceType::SpecificEmitter& IdentityConfidenceType::getSpecificEmitter() const {
  return *specificEmitter_Accessor;
}

uci::type::IdentityConfidenceType::SpecificEmitter& IdentityConfidenceType::getSpecificEmitter() {
  return *specificEmitter_Accessor;
}

uci::type::IdentityConfidenceType& IdentityConfidenceType::setSpecificEmitter(const uci::type::IdentityConfidenceType::SpecificEmitter& accessor) {
  if (&accessor != specificEmitter_Accessor.get()) {
    specificEmitter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IdentityConfidenceType::SpecificVehicle& IdentityConfidenceType::getSpecificVehicle() const {
  return *specificVehicle_Accessor;
}

uci::type::IdentityConfidenceType::SpecificVehicle& IdentityConfidenceType::getSpecificVehicle() {
  return *specificVehicle_Accessor;
}

uci::type::IdentityConfidenceType& IdentityConfidenceType::setSpecificVehicle(const uci::type::IdentityConfidenceType::SpecificVehicle& accessor) {
  if (&accessor != specificVehicle_Accessor.get()) {
    specificVehicle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IdentityConfidenceType::SpecificFacility& IdentityConfidenceType::getSpecificFacility() const {
  return *specificFacility_Accessor;
}

uci::type::IdentityConfidenceType::SpecificFacility& IdentityConfidenceType::getSpecificFacility() {
  return *specificFacility_Accessor;
}

uci::type::IdentityConfidenceType& IdentityConfidenceType::setSpecificFacility(const uci::type::IdentityConfidenceType::SpecificFacility& accessor) {
  if (&accessor != specificFacility_Accessor.get()) {
    specificFacility_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IdentityConfidenceType::EOB& IdentityConfidenceType::getEOB() const {
  return *eOB_Accessor;
}

uci::type::IdentityConfidenceType::EOB& IdentityConfidenceType::getEOB() {
  return *eOB_Accessor;
}

uci::type::IdentityConfidenceType& IdentityConfidenceType::setEOB(const uci::type::IdentityConfidenceType::EOB& accessor) {
  if (&accessor != eOB_Accessor.get()) {
    eOB_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IdentityConfidenceType::Weapon& IdentityConfidenceType::getWeapon() const {
  return *weapon_Accessor;
}

uci::type::IdentityConfidenceType::Weapon& IdentityConfidenceType::getWeapon() {
  return *weapon_Accessor;
}

uci::type::IdentityConfidenceType& IdentityConfidenceType::setWeapon(const uci::type::IdentityConfidenceType::Weapon& accessor) {
  if (&accessor != weapon_Accessor.get()) {
    weapon_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<IdentityConfidenceType> IdentityConfidenceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::identityConfidenceType : type};
  return std::unique_ptr<IdentityConfidenceType>(dynamic_cast<IdentityConfidenceType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace IdentityConfidenceType_Names {

constexpr const char* Extern_Type_Name{"IdentityConfidenceType"};
constexpr const char* Standard_Name{"Standard"};
constexpr const char* Environment_Name{"Environment"};
constexpr const char* Platform_Name{"Platform"};
constexpr const char* Specific_Name{"Specific"};
constexpr const char* Emitter_Name{"Emitter"};
constexpr const char* SpecificEmitter_Name{"SpecificEmitter"};
constexpr const char* SpecificVehicle_Name{"SpecificVehicle"};
constexpr const char* SpecificFacility_Name{"SpecificFacility"};
constexpr const char* EOB_Name{"EOB"};
constexpr const char* Weapon_Name{"Weapon"};

} // namespace IdentityConfidenceType_Names

void IdentityConfidenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IdentityConfidenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IdentityConfidenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::Standard_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::Standard& boundedList = accessor.getStandard();
        const uci::type::IdentityConfidenceType::Standard::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::StandardIdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::Environment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::Environment& boundedList = accessor.getEnvironment();
        const uci::type::IdentityConfidenceType::Environment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EnvironmentIdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::Platform_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::Platform& boundedList = accessor.getPlatform();
        const uci::type::IdentityConfidenceType::Platform::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PlatformIdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::Specific_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::Specific& boundedList = accessor.getSpecific();
        const uci::type::IdentityConfidenceType::Specific::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SpecificIdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::Emitter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::Emitter& boundedList = accessor.getEmitter();
        const uci::type::IdentityConfidenceType::Emitter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EmitterMultipleType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::SpecificEmitter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::SpecificEmitter& boundedList = accessor.getSpecificEmitter();
        const uci::type::IdentityConfidenceType::SpecificEmitter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SpecificEmitterMultipleType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::SpecificVehicle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::SpecificVehicle& boundedList = accessor.getSpecificVehicle();
        const uci::type::IdentityConfidenceType::SpecificVehicle::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SpecificVehicleIdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::SpecificFacility_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::SpecificFacility& boundedList = accessor.getSpecificFacility();
        const uci::type::IdentityConfidenceType::SpecificFacility::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SpecificFacilityIdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::EOB_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::EOB& boundedList = accessor.getEOB();
        const uci::type::IdentityConfidenceType::EOB::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EOB_IdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::Weapon_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::Weapon& boundedList = accessor.getWeapon();
        const uci::type::IdentityConfidenceType::Weapon::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::StoreMultipleType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string IdentityConfidenceType::serialize(const uci::type::IdentityConfidenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IdentityConfidenceType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::identityConfidenceType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, IdentityConfidenceType_Names::Extern_Type_Name);
    }
    {
      const uci::type::IdentityConfidenceType::Standard& boundedList = accessor.getStandard();
      for (uci::type::IdentityConfidenceType::Standard::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::StandardIdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::Standard_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::Environment& boundedList = accessor.getEnvironment();
      for (uci::type::IdentityConfidenceType::Environment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::EnvironmentIdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::Environment_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::Platform& boundedList = accessor.getPlatform();
      for (uci::type::IdentityConfidenceType::Platform::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::PlatformIdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::Platform_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::Specific& boundedList = accessor.getSpecific();
      for (uci::type::IdentityConfidenceType::Specific::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SpecificIdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::Specific_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::Emitter& boundedList = accessor.getEmitter();
      for (uci::type::IdentityConfidenceType::Emitter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::EmitterMultipleType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::Emitter_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::SpecificEmitter& boundedList = accessor.getSpecificEmitter();
      for (uci::type::IdentityConfidenceType::SpecificEmitter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SpecificEmitterMultipleType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::SpecificEmitter_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::SpecificVehicle& boundedList = accessor.getSpecificVehicle();
      for (uci::type::IdentityConfidenceType::SpecificVehicle::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SpecificVehicleIdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::SpecificVehicle_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::SpecificFacility& boundedList = accessor.getSpecificFacility();
      for (uci::type::IdentityConfidenceType::SpecificFacility::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SpecificFacilityIdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::SpecificFacility_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::EOB& boundedList = accessor.getEOB();
      for (uci::type::IdentityConfidenceType::EOB::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::EOB_IdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::EOB_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::Weapon& boundedList = accessor.getWeapon();
      for (uci::type::IdentityConfidenceType::Weapon::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::StoreMultipleType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::Weapon_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IdentityConfidenceType& IdentityConfidenceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IdentityConfidenceType>().release());
}

uci::type::IdentityConfidenceType& IdentityConfidenceType::create(const uci::type::IdentityConfidenceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IdentityConfidenceType> newAccessor{boost::make_unique<asb_uci::type::IdentityConfidenceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IdentityConfidenceType::destroy(uci::type::IdentityConfidenceType& accessor) {
  delete dynamic_cast<asb_uci::type::IdentityConfidenceType*>(&accessor);
}

} // namespace type

} // namespace uci

