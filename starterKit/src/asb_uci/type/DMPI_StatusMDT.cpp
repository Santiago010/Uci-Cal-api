/** @file DMPI_StatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DMPI_StatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityPlanReferenceType.h"
#include "asb_uci/type/DMPI_ID_Type.h"
#include "asb_uci/type/DMPI_StateEnum.h"
#include "asb_uci/type/DMPI_StoreStatusType.h"
#include "asb_uci/type/RoutePlanReferencesType.h"
#include "asb_uci/type/StrikeStateEnum.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/type/TaskID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityPlanReferenceType.h"
#include "uci/type/DMPI_ID_Type.h"
#include "uci/type/DMPI_StateEnum.h"
#include "uci/type/DMPI_StatusMDT.h"
#include "uci/type/DMPI_StoreStatusType.h"
#include "uci/type/RoutePlanReferencesType.h"
#include "uci/type/StrikeStateEnum.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/TaskID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DMPI_StatusMDT::DMPI_StatusMDT()
  : dMPI_ID_Accessor{boost::make_unique<DMPI_ID_Type>()},
    dMPI_State_Accessor{boost::make_unique<DMPI_StateEnum>()},
    dMPI_StrikeState_Accessor{boost::make_unique<StrikeStateEnum>()},
    storeStatus_Accessor{boost::make_unique<StoreStatus>(0, SIZE_MAX)} {
}

DMPI_StatusMDT::~DMPI_StatusMDT() = default;

void DMPI_StatusMDT::copy(const uci::type::DMPI_StatusMDT& accessor) {
  copyImpl(accessor, false);
}

void DMPI_StatusMDT::copyImpl(const uci::type::DMPI_StatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DMPI_StatusMDT&>(accessor);
    setDMPI_ID(*(accessorImpl.dMPI_ID_Accessor));
    setDMPI_State(*(accessorImpl.dMPI_State_Accessor));
    setDMPI_StrikeState(*(accessorImpl.dMPI_StrikeState_Accessor));
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
    if (accessorImpl.associatedRoutePlan_Accessor) {
      setAssociatedRoutePlan(*(accessorImpl.associatedRoutePlan_Accessor));
    } else {
      associatedRoutePlan_Accessor.reset();
    }
    if (accessorImpl.associatedActivityPlan_Accessor) {
      setAssociatedActivityPlan(*(accessorImpl.associatedActivityPlan_Accessor));
    } else {
      associatedActivityPlan_Accessor.reset();
    }
    setStoreStatus(*(accessorImpl.storeStatus_Accessor));
    if (accessorImpl.taskID_Accessor) {
      setTaskID(*(accessorImpl.taskID_Accessor));
    } else {
      taskID_Accessor.reset();
    }
  }
}

void DMPI_StatusMDT::reset() noexcept {
  dMPI_ID_Accessor->reset();
  dMPI_State_Accessor->reset();
  dMPI_StrikeState_Accessor->reset();
  systemID_Accessor.reset();
  associatedRoutePlan_Accessor.reset();
  associatedActivityPlan_Accessor.reset();
  storeStatus_Accessor->reset();
  taskID_Accessor.reset();
}

const uci::type::DMPI_ID_Type& DMPI_StatusMDT::getDMPI_ID() const {
  return *dMPI_ID_Accessor;
}

uci::type::DMPI_ID_Type& DMPI_StatusMDT::getDMPI_ID() {
  return *dMPI_ID_Accessor;
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::setDMPI_ID(const uci::type::DMPI_ID_Type& accessor) {
  if (&accessor != dMPI_ID_Accessor.get()) {
    dMPI_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DMPI_StateEnum& DMPI_StatusMDT::getDMPI_State() const {
  return *dMPI_State_Accessor;
}

uci::type::DMPI_StateEnum& DMPI_StatusMDT::getDMPI_State() {
  return *dMPI_State_Accessor;
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::setDMPI_State(const uci::type::DMPI_StateEnum& accessor) {
  if (&accessor != dMPI_State_Accessor.get()) {
    dMPI_State_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::setDMPI_State(uci::type::DMPI_StateEnum::EnumerationItem value) {
  dMPI_State_Accessor->setValue(value);
  return *this;
}


const uci::type::StrikeStateEnum& DMPI_StatusMDT::getDMPI_StrikeState() const {
  return *dMPI_StrikeState_Accessor;
}

uci::type::StrikeStateEnum& DMPI_StatusMDT::getDMPI_StrikeState() {
  return *dMPI_StrikeState_Accessor;
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::setDMPI_StrikeState(const uci::type::StrikeStateEnum& accessor) {
  if (&accessor != dMPI_StrikeState_Accessor.get()) {
    dMPI_StrikeState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::setDMPI_StrikeState(uci::type::StrikeStateEnum::EnumerationItem value) {
  dMPI_StrikeState_Accessor->setValue(value);
  return *this;
}


uci::type::SystemID_Type& DMPI_StatusMDT::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): An attempt was made to get an optional field that was not enabled, call hasSystemID() to determine if it is safe to call getSystemID()");
}

const uci::type::SystemID_Type& DMPI_StatusMDT::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& DMPI_StatusMDT::getSystemID() {
  return getSystemID_();
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  enableSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_StatusMDT::hasSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& DMPI_StatusMDT::enableSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(requestedType);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::clearSystemID() noexcept {
  systemID_Accessor.reset();
  return *this;
}

uci::type::RoutePlanReferencesType& DMPI_StatusMDT::getAssociatedRoutePlan_() const {
  if (associatedRoutePlan_Accessor) {
    return *associatedRoutePlan_Accessor;
  }
  throw uci::base::UCIException("Error in getAssociatedRoutePlan(): An attempt was made to get an optional field that was not enabled, call hasAssociatedRoutePlan() to determine if it is safe to call getAssociatedRoutePlan()");
}

const uci::type::RoutePlanReferencesType& DMPI_StatusMDT::getAssociatedRoutePlan() const {
  return getAssociatedRoutePlan_();
}

uci::type::RoutePlanReferencesType& DMPI_StatusMDT::getAssociatedRoutePlan() {
  return getAssociatedRoutePlan_();
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::setAssociatedRoutePlan(const uci::type::RoutePlanReferencesType& accessor) {
  enableAssociatedRoutePlan();
  if (&accessor != associatedRoutePlan_Accessor.get()) {
    associatedRoutePlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_StatusMDT::hasAssociatedRoutePlan() const noexcept {
  return static_cast<bool>(associatedRoutePlan_Accessor);
}

uci::type::RoutePlanReferencesType& DMPI_StatusMDT::enableAssociatedRoutePlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePlanReferencesType : type};
  if ((!associatedRoutePlan_Accessor) || (associatedRoutePlan_Accessor->getAccessorType() != requestedType)) {
    associatedRoutePlan_Accessor = RoutePlanReferencesType::create(requestedType);
    if (!associatedRoutePlan_Accessor) {
      throw uci::base::UCIException("Error in enableAssociatedRoutePlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *associatedRoutePlan_Accessor;
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::clearAssociatedRoutePlan() noexcept {
  associatedRoutePlan_Accessor.reset();
  return *this;
}

uci::type::ActivityPlanReferenceType& DMPI_StatusMDT::getAssociatedActivityPlan_() const {
  if (associatedActivityPlan_Accessor) {
    return *associatedActivityPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getAssociatedActivityPlan(): An attempt was made to get an optional field that was not enabled, call hasAssociatedActivityPlan() to determine if it is safe to call getAssociatedActivityPlan()");
}

const uci::type::ActivityPlanReferenceType& DMPI_StatusMDT::getAssociatedActivityPlan() const {
  return getAssociatedActivityPlan_();
}

uci::type::ActivityPlanReferenceType& DMPI_StatusMDT::getAssociatedActivityPlan() {
  return getAssociatedActivityPlan_();
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::setAssociatedActivityPlan(const uci::type::ActivityPlanReferenceType& accessor) {
  enableAssociatedActivityPlan();
  if (&accessor != associatedActivityPlan_Accessor.get()) {
    associatedActivityPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_StatusMDT::hasAssociatedActivityPlan() const noexcept {
  return static_cast<bool>(associatedActivityPlan_Accessor);
}

uci::type::ActivityPlanReferenceType& DMPI_StatusMDT::enableAssociatedActivityPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanReferenceType : type};
  if ((!associatedActivityPlan_Accessor) || (associatedActivityPlan_Accessor->getAccessorType() != requestedType)) {
    associatedActivityPlan_Accessor = ActivityPlanReferenceType::create(requestedType);
    if (!associatedActivityPlan_Accessor) {
      throw uci::base::UCIException("Error in enableAssociatedActivityPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *associatedActivityPlan_Accessor;
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::clearAssociatedActivityPlan() noexcept {
  associatedActivityPlan_Accessor.reset();
  return *this;
}

const uci::type::DMPI_StatusMDT::StoreStatus& DMPI_StatusMDT::getStoreStatus() const {
  return *storeStatus_Accessor;
}

uci::type::DMPI_StatusMDT::StoreStatus& DMPI_StatusMDT::getStoreStatus() {
  return *storeStatus_Accessor;
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::setStoreStatus(const uci::type::DMPI_StatusMDT::StoreStatus& accessor) {
  if (&accessor != storeStatus_Accessor.get()) {
    storeStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TaskID_Type& DMPI_StatusMDT::getTaskID_() const {
  if (taskID_Accessor) {
    return *taskID_Accessor;
  }
  throw uci::base::UCIException("Error in getTaskID(): An attempt was made to get an optional field that was not enabled, call hasTaskID() to determine if it is safe to call getTaskID()");
}

const uci::type::TaskID_Type& DMPI_StatusMDT::getTaskID() const {
  return getTaskID_();
}

uci::type::TaskID_Type& DMPI_StatusMDT::getTaskID() {
  return getTaskID_();
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::setTaskID(const uci::type::TaskID_Type& accessor) {
  enableTaskID();
  if (&accessor != taskID_Accessor.get()) {
    taskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_StatusMDT::hasTaskID() const noexcept {
  return static_cast<bool>(taskID_Accessor);
}

uci::type::TaskID_Type& DMPI_StatusMDT::enableTaskID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskID_Type : type};
  if ((!taskID_Accessor) || (taskID_Accessor->getAccessorType() != requestedType)) {
    taskID_Accessor = TaskID_Type::create(requestedType);
    if (!taskID_Accessor) {
      throw uci::base::UCIException("Error in enableTaskID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taskID_Accessor;
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::clearTaskID() noexcept {
  taskID_Accessor.reset();
  return *this;
}

std::unique_ptr<DMPI_StatusMDT> DMPI_StatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_StatusMDT : type};
  return (requestedType == uci::type::accessorType::dMPI_StatusMDT) ? boost::make_unique<DMPI_StatusMDT>() : nullptr;
}

/**  */
namespace DMPI_StatusMDT_Names {

constexpr const char* Extern_Type_Name{"DMPI_StatusMDT"};
constexpr const char* DMPI_ID_Name{"DMPI_ID"};
constexpr const char* DMPI_State_Name{"DMPI_State"};
constexpr const char* DMPI_StrikeState_Name{"DMPI_StrikeState"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* AssociatedRoutePlan_Name{"AssociatedRoutePlan"};
constexpr const char* AssociatedActivityPlan_Name{"AssociatedActivityPlan"};
constexpr const char* StoreStatus_Name{"StoreStatus"};
constexpr const char* TaskID_Name{"TaskID"};

} // namespace DMPI_StatusMDT_Names

void DMPI_StatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::DMPI_StatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DMPI_StatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::DMPI_ID_Name) {
      DMPI_ID_Type::deserialize(valueType.second, accessor.getDMPI_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::DMPI_State_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getDMPI_State().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::DMPI_StrikeState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getDMPI_StrikeState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::AssociatedRoutePlan_Name) {
      RoutePlanReferencesType::deserialize(valueType.second, accessor.enableAssociatedRoutePlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::AssociatedActivityPlan_Name) {
      ActivityPlanReferenceType::deserialize(valueType.second, accessor.enableAssociatedActivityPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::StoreStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DMPI_StatusMDT::StoreStatus& boundedList = accessor.getStoreStatus();
        const uci::type::DMPI_StatusMDT::StoreStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DMPI_StoreStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.enableTaskID(), nodeName, nsPrefix);
    }
  }
}

std::string DMPI_StatusMDT::serialize(const uci::type::DMPI_StatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DMPI_StatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DMPI_StatusMDT_Names::Extern_Type_Name);
  }
  DMPI_ID_Type::serialize(accessor.getDMPI_ID(), node, DMPI_StatusMDT_Names::DMPI_ID_Name);
  DMPI_StateEnum::serialize(accessor.getDMPI_State(), node, DMPI_StatusMDT_Names::DMPI_State_Name, false);
  StrikeStateEnum::serialize(accessor.getDMPI_StrikeState(), node, DMPI_StatusMDT_Names::DMPI_StrikeState_Name, false);
  if (accessor.hasSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, DMPI_StatusMDT_Names::SystemID_Name);
  }
  if (accessor.hasAssociatedRoutePlan()) {
    RoutePlanReferencesType::serialize(accessor.getAssociatedRoutePlan(), node, DMPI_StatusMDT_Names::AssociatedRoutePlan_Name);
  }
  if (accessor.hasAssociatedActivityPlan()) {
    ActivityPlanReferenceType::serialize(accessor.getAssociatedActivityPlan(), node, DMPI_StatusMDT_Names::AssociatedActivityPlan_Name);
  }
  {
    const uci::type::DMPI_StatusMDT::StoreStatus& boundedList = accessor.getStoreStatus();
    for (uci::type::DMPI_StatusMDT::StoreStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DMPI_StoreStatusType::serialize(boundedList.at(i), node, DMPI_StatusMDT_Names::StoreStatus_Name);
    }
  }
  if (accessor.hasTaskID()) {
    TaskID_Type::serialize(accessor.getTaskID(), node, DMPI_StatusMDT_Names::TaskID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DMPI_StatusMDT>().release());
}

uci::type::DMPI_StatusMDT& DMPI_StatusMDT::create(const uci::type::DMPI_StatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DMPI_StatusMDT> newAccessor{boost::make_unique<asb_uci::type::DMPI_StatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DMPI_StatusMDT::destroy(uci::type::DMPI_StatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::DMPI_StatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

