/** @file TaskMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/TaskMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/RequirementConstraintsType.h"
#include "asb_uci/type/RequirementGuidanceType.h"
#include "asb_uci/type/RequirementMetadataType.h"
#include "asb_uci/type/TaskID_Type.h"
#include "asb_uci/type/TaskType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/RequirementConstraintsType.h"
#include "uci/type/RequirementGuidanceType.h"
#include "uci/type/RequirementMetadataType.h"
#include "uci/type/TaskID_Type.h"
#include "uci/type/TaskMDT.h"
#include "uci/type/TaskType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TaskMDT::TaskMDT()
  : taskID_Accessor{boost::make_unique<TaskID_Type>()},
    taskType_Accessor{boost::make_unique<TaskType>()} {
}

TaskMDT::~TaskMDT() = default;

void TaskMDT::copy(const uci::type::TaskMDT& accessor) {
  copyImpl(accessor, false);
}

void TaskMDT::copyImpl(const uci::type::TaskMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const TaskMDT&>(accessor);
    setTaskID(*(accessorImpl.taskID_Accessor));
    setTaskType(*(accessorImpl.taskType_Accessor));
    if (accessorImpl.taskConstraints_Accessor) {
      setTaskConstraints(*(accessorImpl.taskConstraints_Accessor));
    } else {
      taskConstraints_Accessor.reset();
    }
    if (accessorImpl.taskGuidance_Accessor) {
      setTaskGuidance(*(accessorImpl.taskGuidance_Accessor));
    } else {
      taskGuidance_Accessor.reset();
    }
    if (accessorImpl.metadata_Accessor) {
      setMetadata(*(accessorImpl.metadata_Accessor));
    } else {
      metadata_Accessor.reset();
    }
  }
}

void TaskMDT::reset() noexcept {
  taskID_Accessor->reset();
  taskType_Accessor->reset();
  taskConstraints_Accessor.reset();
  taskGuidance_Accessor.reset();
  metadata_Accessor.reset();
}

const uci::type::TaskID_Type& TaskMDT::getTaskID() const {
  return *taskID_Accessor;
}

uci::type::TaskID_Type& TaskMDT::getTaskID() {
  return *taskID_Accessor;
}

uci::type::TaskMDT& TaskMDT::setTaskID(const uci::type::TaskID_Type& accessor) {
  if (&accessor != taskID_Accessor.get()) {
    taskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::TaskType& TaskMDT::getTaskType() const {
  return *taskType_Accessor;
}

uci::type::TaskType& TaskMDT::getTaskType() {
  return *taskType_Accessor;
}

uci::type::TaskMDT& TaskMDT::setTaskType(const uci::type::TaskType& accessor) {
  if (&accessor != taskType_Accessor.get()) {
    taskType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementConstraintsType& TaskMDT::getTaskConstraints_() const {
  if (taskConstraints_Accessor) {
    return *taskConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getTaskConstraints(): An attempt was made to get an optional field that was not enabled, call hasTaskConstraints() to determine if it is safe to call getTaskConstraints()");
}

const uci::type::RequirementConstraintsType& TaskMDT::getTaskConstraints() const {
  return getTaskConstraints_();
}

uci::type::RequirementConstraintsType& TaskMDT::getTaskConstraints() {
  return getTaskConstraints_();
}

uci::type::TaskMDT& TaskMDT::setTaskConstraints(const uci::type::RequirementConstraintsType& accessor) {
  enableTaskConstraints();
  if (&accessor != taskConstraints_Accessor.get()) {
    taskConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskMDT::hasTaskConstraints() const noexcept {
  return static_cast<bool>(taskConstraints_Accessor);
}

uci::type::RequirementConstraintsType& TaskMDT::enableTaskConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementConstraintsType : type};
  if ((!taskConstraints_Accessor) || (taskConstraints_Accessor->getAccessorType() != requestedType)) {
    taskConstraints_Accessor = RequirementConstraintsType::create(requestedType);
    if (!taskConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableTaskConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taskConstraints_Accessor;
}

uci::type::TaskMDT& TaskMDT::clearTaskConstraints() noexcept {
  taskConstraints_Accessor.reset();
  return *this;
}

uci::type::RequirementGuidanceType& TaskMDT::getTaskGuidance_() const {
  if (taskGuidance_Accessor) {
    return *taskGuidance_Accessor;
  }
  throw uci::base::UCIException("Error in getTaskGuidance(): An attempt was made to get an optional field that was not enabled, call hasTaskGuidance() to determine if it is safe to call getTaskGuidance()");
}

const uci::type::RequirementGuidanceType& TaskMDT::getTaskGuidance() const {
  return getTaskGuidance_();
}

uci::type::RequirementGuidanceType& TaskMDT::getTaskGuidance() {
  return getTaskGuidance_();
}

uci::type::TaskMDT& TaskMDT::setTaskGuidance(const uci::type::RequirementGuidanceType& accessor) {
  enableTaskGuidance();
  if (&accessor != taskGuidance_Accessor.get()) {
    taskGuidance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskMDT::hasTaskGuidance() const noexcept {
  return static_cast<bool>(taskGuidance_Accessor);
}

uci::type::RequirementGuidanceType& TaskMDT::enableTaskGuidance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementGuidanceType : type};
  if ((!taskGuidance_Accessor) || (taskGuidance_Accessor->getAccessorType() != requestedType)) {
    taskGuidance_Accessor = RequirementGuidanceType::create(requestedType);
    if (!taskGuidance_Accessor) {
      throw uci::base::UCIException("Error in enableTaskGuidance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taskGuidance_Accessor;
}

uci::type::TaskMDT& TaskMDT::clearTaskGuidance() noexcept {
  taskGuidance_Accessor.reset();
  return *this;
}

uci::type::RequirementMetadataType& TaskMDT::getMetadata_() const {
  if (metadata_Accessor) {
    return *metadata_Accessor;
  }
  throw uci::base::UCIException("Error in getMetadata(): An attempt was made to get an optional field that was not enabled, call hasMetadata() to determine if it is safe to call getMetadata()");
}

const uci::type::RequirementMetadataType& TaskMDT::getMetadata() const {
  return getMetadata_();
}

uci::type::RequirementMetadataType& TaskMDT::getMetadata() {
  return getMetadata_();
}

uci::type::TaskMDT& TaskMDT::setMetadata(const uci::type::RequirementMetadataType& accessor) {
  enableMetadata();
  if (&accessor != metadata_Accessor.get()) {
    metadata_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TaskMDT::hasMetadata() const noexcept {
  return static_cast<bool>(metadata_Accessor);
}

uci::type::RequirementMetadataType& TaskMDT::enableMetadata(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementMetadataType : type};
  if ((!metadata_Accessor) || (metadata_Accessor->getAccessorType() != requestedType)) {
    metadata_Accessor = RequirementMetadataType::create(requestedType);
    if (!metadata_Accessor) {
      throw uci::base::UCIException("Error in enableMetadata(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *metadata_Accessor;
}

uci::type::TaskMDT& TaskMDT::clearMetadata() noexcept {
  metadata_Accessor.reset();
  return *this;
}

std::unique_ptr<TaskMDT> TaskMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskMDT : type};
  return (requestedType == uci::type::accessorType::taskMDT) ? boost::make_unique<TaskMDT>() : nullptr;
}

/**  */
namespace TaskMDT_Names {

constexpr const char* Extern_Type_Name{"TaskMDT"};
constexpr const char* TaskID_Name{"TaskID"};
constexpr const char* TaskType_Name{"TaskType"};
constexpr const char* TaskConstraints_Name{"TaskConstraints"};
constexpr const char* TaskGuidance_Name{"TaskGuidance"};
constexpr const char* Metadata_Name{"Metadata"};

} // namespace TaskMDT_Names

void TaskMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::TaskMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TaskMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TaskMDT_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.getTaskID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskMDT_Names::TaskType_Name) {
      TaskType::deserialize(valueType.second, accessor.getTaskType(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskMDT_Names::TaskConstraints_Name) {
      RequirementConstraintsType::deserialize(valueType.second, accessor.enableTaskConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskMDT_Names::TaskGuidance_Name) {
      RequirementGuidanceType::deserialize(valueType.second, accessor.enableTaskGuidance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskMDT_Names::Metadata_Name) {
      RequirementMetadataType::deserialize(valueType.second, accessor.enableMetadata(), nodeName, nsPrefix);
    }
  }
}

std::string TaskMDT::serialize(const uci::type::TaskMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TaskMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, TaskMDT_Names::Extern_Type_Name);
  }
  TaskID_Type::serialize(accessor.getTaskID(), node, TaskMDT_Names::TaskID_Name);
  TaskType::serialize(accessor.getTaskType(), node, TaskMDT_Names::TaskType_Name);
  if (accessor.hasTaskConstraints()) {
    RequirementConstraintsType::serialize(accessor.getTaskConstraints(), node, TaskMDT_Names::TaskConstraints_Name);
  }
  if (accessor.hasTaskGuidance()) {
    RequirementGuidanceType::serialize(accessor.getTaskGuidance(), node, TaskMDT_Names::TaskGuidance_Name);
  }
  if (accessor.hasMetadata()) {
    RequirementMetadataType::serialize(accessor.getMetadata(), node, TaskMDT_Names::Metadata_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TaskMDT& TaskMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TaskMDT>().release());
}

uci::type::TaskMDT& TaskMDT::create(const uci::type::TaskMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TaskMDT> newAccessor{boost::make_unique<asb_uci::type::TaskMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TaskMDT::destroy(uci::type::TaskMDT& accessor) {
  delete dynamic_cast<asb_uci::type::TaskMDT*>(&accessor);
}

} // namespace type

} // namespace uci

