/** @file Point2D_ReportedType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/Point2D_ReportedType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AltitudeSourceEnum.h"
#include "../../../include/asb_uci/type/DepthContactEnum.h"
#include "../../../include/asb_uci/type/Point2D_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AltitudeSourceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DepthContactEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceOffsetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point2D_ReportedType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

Point2D_ReportedType::Point2D_ReportedType() = default;

Point2D_ReportedType::~Point2D_ReportedType() = default;

void Point2D_ReportedType::copy(const uci::type::Point2D_ReportedType& accessor) {
  copyImpl(accessor, false);
}

void Point2D_ReportedType::copyImpl(const uci::type::Point2D_ReportedType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    Point2D_Type::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const Point2D_ReportedType&>(accessor);
    if (accessorImpl.hasHAE_Adjustment()) {
      setHAE_Adjustment(accessorImpl.getHAE_Adjustment());
    } else {
      clearHAE_Adjustment();
    }
    if (accessorImpl.altitudeSource_Accessor) {
      setAltitudeSource(*(accessorImpl.altitudeSource_Accessor));
    } else {
      altitudeSource_Accessor.reset();
    }
    if (accessorImpl.depthContact_Accessor) {
      setDepthContact(*(accessorImpl.depthContact_Accessor));
    } else {
      depthContact_Accessor.reset();
    }
  }
}

void Point2D_ReportedType::reset() noexcept {
  Point2D_Type::reset();
  clearHAE_Adjustment();
  altitudeSource_Accessor.reset();
  depthContact_Accessor.reset();
}

uci::type::DistanceOffsetTypeValue Point2D_ReportedType::getHAE_Adjustment() const {
  if (hAE_Adjustment_Accessor) {
    return *hAE_Adjustment_Accessor;
  }
  throw uci::base::UCIException("Error in getHAE_Adjustment(): An attempt was made to get an optional field that was not enabled, call hasHAE_Adjustment() to determine if it is safe to call getHAE_Adjustment()");
}

uci::type::Point2D_ReportedType& Point2D_ReportedType::setHAE_Adjustment(uci::type::DistanceOffsetTypeValue value) {
  hAE_Adjustment_Accessor = value;
  return *this;
}

bool Point2D_ReportedType::hasHAE_Adjustment() const noexcept {
  return hAE_Adjustment_Accessor.has_value();
}

uci::type::Point2D_ReportedType& Point2D_ReportedType::clearHAE_Adjustment() noexcept {
  hAE_Adjustment_Accessor.reset();
  return *this;
}

uci::type::AltitudeSourceEnum& Point2D_ReportedType::getAltitudeSource_() const {
  if (altitudeSource_Accessor) {
    return *altitudeSource_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeSource(): An attempt was made to get an optional field that was not enabled, call hasAltitudeSource() to determine if it is safe to call getAltitudeSource()");
}

const uci::type::AltitudeSourceEnum& Point2D_ReportedType::getAltitudeSource() const {
  return getAltitudeSource_();
}

uci::type::AltitudeSourceEnum& Point2D_ReportedType::getAltitudeSource() {
  return getAltitudeSource_();
}

uci::type::Point2D_ReportedType& Point2D_ReportedType::setAltitudeSource(const uci::type::AltitudeSourceEnum& accessor) {
  enableAltitudeSource();
  if (&accessor != altitudeSource_Accessor.get()) {
    altitudeSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::Point2D_ReportedType& Point2D_ReportedType::setAltitudeSource(const uci::type::AltitudeSourceEnum::EnumerationItem value) {
  enableAltitudeSource().setValue(value);
  return *this;
}

bool Point2D_ReportedType::hasAltitudeSource() const noexcept {
  return static_cast<bool>(altitudeSource_Accessor);
}

uci::type::AltitudeSourceEnum& Point2D_ReportedType::enableAltitudeSource(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::altitudeSourceEnum : type};
  if ((!altitudeSource_Accessor) || (altitudeSource_Accessor->getAccessorType() != requestedType)) {
    altitudeSource_Accessor = AltitudeSourceEnum::create(requestedType);
    if (!altitudeSource_Accessor) {
      throw uci::base::UCIException("Error in enableAltitudeSource(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *altitudeSource_Accessor;
}

uci::type::Point2D_ReportedType& Point2D_ReportedType::clearAltitudeSource() noexcept {
  altitudeSource_Accessor.reset();
  return *this;
}

uci::type::DepthContactEnum& Point2D_ReportedType::getDepthContact_() const {
  if (depthContact_Accessor) {
    return *depthContact_Accessor;
  }
  throw uci::base::UCIException("Error in getDepthContact(): An attempt was made to get an optional field that was not enabled, call hasDepthContact() to determine if it is safe to call getDepthContact()");
}

const uci::type::DepthContactEnum& Point2D_ReportedType::getDepthContact() const {
  return getDepthContact_();
}

uci::type::DepthContactEnum& Point2D_ReportedType::getDepthContact() {
  return getDepthContact_();
}

uci::type::Point2D_ReportedType& Point2D_ReportedType::setDepthContact(const uci::type::DepthContactEnum& accessor) {
  enableDepthContact();
  if (&accessor != depthContact_Accessor.get()) {
    depthContact_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::Point2D_ReportedType& Point2D_ReportedType::setDepthContact(const uci::type::DepthContactEnum::EnumerationItem value) {
  enableDepthContact().setValue(value);
  return *this;
}

bool Point2D_ReportedType::hasDepthContact() const noexcept {
  return static_cast<bool>(depthContact_Accessor);
}

uci::type::DepthContactEnum& Point2D_ReportedType::enableDepthContact(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::depthContactEnum : type};
  if ((!depthContact_Accessor) || (depthContact_Accessor->getAccessorType() != requestedType)) {
    depthContact_Accessor = DepthContactEnum::create(requestedType);
    if (!depthContact_Accessor) {
      throw uci::base::UCIException("Error in enableDepthContact(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *depthContact_Accessor;
}

uci::type::Point2D_ReportedType& Point2D_ReportedType::clearDepthContact() noexcept {
  depthContact_Accessor.reset();
  return *this;
}

std::unique_ptr<Point2D_ReportedType> Point2D_ReportedType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_ReportedType : type};
  return (requestedType == uci::type::accessorType::point2D_ReportedType) ? boost::make_unique<Point2D_ReportedType>() : nullptr;
}

/**  */
namespace Point2D_ReportedType_Names {

constexpr const char* Extern_Type_Name{"Point2D_ReportedType"};
constexpr const char* HAE_Adjustment_Name{"HAE_Adjustment"};
constexpr const char* AltitudeSource_Name{"AltitudeSource"};
constexpr const char* DepthContact_Name{"DepthContact"};

} // namespace Point2D_ReportedType_Names

void Point2D_ReportedType::deserialize(const boost::property_tree::ptree& propTree, uci::type::Point2D_ReportedType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = Point2D_ReportedType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + Point2D_ReportedType_Names::HAE_Adjustment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHAE_Adjustment(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + Point2D_ReportedType_Names::AltitudeSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAltitudeSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + Point2D_ReportedType_Names::DepthContact_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableDepthContact().setValueFromName(*value);
      }
    }
  }
  Point2D_Type::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string Point2D_ReportedType::serialize(const uci::type::Point2D_ReportedType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? Point2D_ReportedType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, Point2D_ReportedType_Names::Extern_Type_Name);
  }
  Point2D_Type::serialize(accessor, node, "", false, false, false);
  if (accessor.hasHAE_Adjustment()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getHAE_Adjustment(), node, Point2D_ReportedType_Names::HAE_Adjustment_Name);
  }
  if (accessor.hasAltitudeSource()) {
    AltitudeSourceEnum::serialize(accessor.getAltitudeSource(), node, Point2D_ReportedType_Names::AltitudeSource_Name, false);
  }
  if (accessor.hasDepthContact()) {
    DepthContactEnum::serialize(accessor.getDepthContact(), node, Point2D_ReportedType_Names::DepthContact_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::Point2D_ReportedType& Point2D_ReportedType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::Point2D_ReportedType>().release());
}

uci::type::Point2D_ReportedType& Point2D_ReportedType::create(const uci::type::Point2D_ReportedType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::Point2D_ReportedType> newAccessor{boost::make_unique<asb_uci::type::Point2D_ReportedType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void Point2D_ReportedType::destroy(uci::type::Point2D_ReportedType& accessor) {
  delete dynamic_cast<asb_uci::type::Point2D_ReportedType*>(&accessor);
}

} // namespace type

} // namespace uci

