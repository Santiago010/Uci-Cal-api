/** @file DemodulationParameterType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DemodulationParameterType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ModulationEnum.h"
#include "asb_uci/type/TimeWindowType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/DemodulationParameterType.h"
#include "uci/type/FrequencyType.h"
#include "uci/type/ModulationEnum.h"
#include "uci/type/TimeWindowType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DemodulationParameterType::DemodulationParameterType() = default;

DemodulationParameterType::~DemodulationParameterType() = default;

void DemodulationParameterType::copy(const uci::type::DemodulationParameterType& accessor) {
  copyImpl(accessor, false);
}

void DemodulationParameterType::copyImpl(const uci::type::DemodulationParameterType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DemodulationParameterType&>(accessor);
    if (accessorImpl.demodulationUsed_Accessor) {
      setDemodulationUsed(*(accessorImpl.demodulationUsed_Accessor));
    } else {
      demodulationUsed_Accessor.reset();
    }
    if (accessorImpl.hasAudioAmplitude()) {
      setAudioAmplitude(accessorImpl.getAudioAmplitude());
    } else {
      clearAudioAmplitude();
    }
    if (accessorImpl.hasChannelBandwidth()) {
      setChannelBandwidth(accessorImpl.getChannelBandwidth());
    } else {
      clearChannelBandwidth();
    }
    if (accessorImpl.timeWindow_Accessor) {
      setTimeWindow(*(accessorImpl.timeWindow_Accessor));
    } else {
      timeWindow_Accessor.reset();
    }
  }
}

void DemodulationParameterType::reset() noexcept {
  demodulationUsed_Accessor.reset();
  clearAudioAmplitude();
  clearChannelBandwidth();
  timeWindow_Accessor.reset();
}

uci::type::ModulationEnum& DemodulationParameterType::getDemodulationUsed_() const {
  if (demodulationUsed_Accessor) {
    return *demodulationUsed_Accessor;
  }
  throw uci::base::UCIException("Error in getDemodulationUsed(): An attempt was made to get an optional field that was not enabled, call hasDemodulationUsed() to determine if it is safe to call getDemodulationUsed()");
}

const uci::type::ModulationEnum& DemodulationParameterType::getDemodulationUsed() const {
  return getDemodulationUsed_();
}

uci::type::ModulationEnum& DemodulationParameterType::getDemodulationUsed() {
  return getDemodulationUsed_();
}

uci::type::DemodulationParameterType& DemodulationParameterType::setDemodulationUsed(const uci::type::ModulationEnum& accessor) {
  enableDemodulationUsed();
  if (&accessor != demodulationUsed_Accessor.get()) {
    demodulationUsed_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DemodulationParameterType& DemodulationParameterType::setDemodulationUsed(const uci::type::ModulationEnum::EnumerationItem value) {
  enableDemodulationUsed().setValue(value);
  return *this;
}

bool DemodulationParameterType::hasDemodulationUsed() const noexcept {
  return static_cast<bool>(demodulationUsed_Accessor);
}

uci::type::ModulationEnum& DemodulationParameterType::enableDemodulationUsed(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::modulationEnum : type};
  if ((!demodulationUsed_Accessor) || (demodulationUsed_Accessor->getAccessorType() != requestedType)) {
    demodulationUsed_Accessor = ModulationEnum::create(requestedType);
    if (!demodulationUsed_Accessor) {
      throw uci::base::UCIException("Error in enableDemodulationUsed(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *demodulationUsed_Accessor;
}

uci::type::DemodulationParameterType& DemodulationParameterType::clearDemodulationUsed() noexcept {
  demodulationUsed_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue DemodulationParameterType::getAudioAmplitude() const {
  if (audioAmplitude_Accessor) {
    return *audioAmplitude_Accessor;
  }
  throw uci::base::UCIException("Error in getAudioAmplitude(): An attempt was made to get an optional field that was not enabled, call hasAudioAmplitude() to determine if it is safe to call getAudioAmplitude()");
}

uci::type::DemodulationParameterType& DemodulationParameterType::setAudioAmplitude(uci::type::DecibelTypeValue value) {
  audioAmplitude_Accessor = value;
  return *this;
}

bool DemodulationParameterType::hasAudioAmplitude() const noexcept {
  return audioAmplitude_Accessor.has_value();
}

uci::type::DemodulationParameterType& DemodulationParameterType::clearAudioAmplitude() noexcept {
  audioAmplitude_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue DemodulationParameterType::getChannelBandwidth() const {
  if (channelBandwidth_Accessor) {
    return *channelBandwidth_Accessor;
  }
  throw uci::base::UCIException("Error in getChannelBandwidth(): An attempt was made to get an optional field that was not enabled, call hasChannelBandwidth() to determine if it is safe to call getChannelBandwidth()");
}

uci::type::DemodulationParameterType& DemodulationParameterType::setChannelBandwidth(uci::type::FrequencyTypeValue value) {
  channelBandwidth_Accessor = value;
  return *this;
}

bool DemodulationParameterType::hasChannelBandwidth() const noexcept {
  return channelBandwidth_Accessor.has_value();
}

uci::type::DemodulationParameterType& DemodulationParameterType::clearChannelBandwidth() noexcept {
  channelBandwidth_Accessor.reset();
  return *this;
}

uci::type::TimeWindowType& DemodulationParameterType::getTimeWindow_() const {
  if (timeWindow_Accessor) {
    return *timeWindow_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeWindow(): An attempt was made to get an optional field that was not enabled, call hasTimeWindow() to determine if it is safe to call getTimeWindow()");
}

const uci::type::TimeWindowType& DemodulationParameterType::getTimeWindow() const {
  return getTimeWindow_();
}

uci::type::TimeWindowType& DemodulationParameterType::getTimeWindow() {
  return getTimeWindow_();
}

uci::type::DemodulationParameterType& DemodulationParameterType::setTimeWindow(const uci::type::TimeWindowType& accessor) {
  enableTimeWindow();
  if (&accessor != timeWindow_Accessor.get()) {
    timeWindow_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DemodulationParameterType::hasTimeWindow() const noexcept {
  return static_cast<bool>(timeWindow_Accessor);
}

uci::type::TimeWindowType& DemodulationParameterType::enableTimeWindow(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::timeWindowType : type};
  if ((!timeWindow_Accessor) || (timeWindow_Accessor->getAccessorType() != requestedType)) {
    timeWindow_Accessor = TimeWindowType::create(requestedType);
    if (!timeWindow_Accessor) {
      throw uci::base::UCIException("Error in enableTimeWindow(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timeWindow_Accessor;
}

uci::type::DemodulationParameterType& DemodulationParameterType::clearTimeWindow() noexcept {
  timeWindow_Accessor.reset();
  return *this;
}

std::unique_ptr<DemodulationParameterType> DemodulationParameterType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::demodulationParameterType : type};
  return (requestedType == uci::type::accessorType::demodulationParameterType) ? boost::make_unique<DemodulationParameterType>() : nullptr;
}

/**  */
namespace DemodulationParameterType_Names {

constexpr const char* Extern_Type_Name{"DemodulationParameterType"};
constexpr const char* DemodulationUsed_Name{"DemodulationUsed"};
constexpr const char* AudioAmplitude_Name{"AudioAmplitude"};
constexpr const char* ChannelBandwidth_Name{"ChannelBandwidth"};
constexpr const char* TimeWindow_Name{"TimeWindow"};

} // namespace DemodulationParameterType_Names

void DemodulationParameterType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DemodulationParameterType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DemodulationParameterType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DemodulationParameterType_Names::DemodulationUsed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableDemodulationUsed().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DemodulationParameterType_Names::AudioAmplitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAudioAmplitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DemodulationParameterType_Names::ChannelBandwidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setChannelBandwidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DemodulationParameterType_Names::TimeWindow_Name) {
      TimeWindowType::deserialize(valueType.second, accessor.enableTimeWindow(), nodeName, nsPrefix);
    }
  }
}

std::string DemodulationParameterType::serialize(const uci::type::DemodulationParameterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DemodulationParameterType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DemodulationParameterType_Names::Extern_Type_Name);
  }
  if (accessor.hasDemodulationUsed()) {
    ModulationEnum::serialize(accessor.getDemodulationUsed(), node, DemodulationParameterType_Names::DemodulationUsed_Name, false);
  }
  if (accessor.hasAudioAmplitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAudioAmplitude(), node, DemodulationParameterType_Names::AudioAmplitude_Name);
  }
  if (accessor.hasChannelBandwidth()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getChannelBandwidth(), node, DemodulationParameterType_Names::ChannelBandwidth_Name);
  }
  if (accessor.hasTimeWindow()) {
    TimeWindowType::serialize(accessor.getTimeWindow(), node, DemodulationParameterType_Names::TimeWindow_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DemodulationParameterType& DemodulationParameterType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DemodulationParameterType>().release());
}

uci::type::DemodulationParameterType& DemodulationParameterType::create(const uci::type::DemodulationParameterType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DemodulationParameterType> newAccessor{boost::make_unique<asb_uci::type::DemodulationParameterType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DemodulationParameterType::destroy(uci::type::DemodulationParameterType& accessor) {
  delete dynamic_cast<asb_uci::type::DemodulationParameterType*>(&accessor);
}

} // namespace type

} // namespace uci

