/** @file PO_CapabilityStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_CapabilityStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityStatusBaseType.h"
#include "asb_uci/type/FOR_Type.h"
#include "asb_uci/type/PO_CapabilityStatusType.h"
#include "asb_uci/type/PO_CollectionConstraintsStatusType.h"
#include "asb_uci/type/PO_ComponentStatusType.h"
#include "asb_uci/type/PO_MessageOutputsEnum.h"
#include "asb_uci/type/PO_SubCapabilitySettingsType.h"
#include "asb_uci/type/PO_TrackStatusType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/FOR_Type.h"
#include "uci/type/PO_CapabilityStatusMDT.h"
#include "uci/type/PO_CapabilityStatusType.h"
#include "uci/type/PO_CollectionConstraintsStatusType.h"
#include "uci/type/PO_ComponentStatusType.h"
#include "uci/type/PO_MessageOutputsEnum.h"
#include "uci/type/PO_SubCapabilitySettingsType.h"
#include "uci/type/PO_TrackStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_CapabilityStatusMDT::PO_CapabilityStatusMDT()
  : capabilityStatus_Accessor{boost::make_unique<CapabilityStatus>(1, SIZE_MAX)},
    subCapabilityStatus_Accessor{boost::make_unique<SubCapabilityStatus>(0, SIZE_MAX)},
    trackStatus_Accessor{boost::make_unique<TrackStatus>(0, SIZE_MAX)},
    componentStatus_Accessor{boost::make_unique<ComponentStatus>(0, SIZE_MAX)},
    currentMessageOutput_Accessor{boost::make_unique<CurrentMessageOutput>(0, 4)} {
}

PO_CapabilityStatusMDT::~PO_CapabilityStatusMDT() = default;

void PO_CapabilityStatusMDT::copy(const uci::type::PO_CapabilityStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void PO_CapabilityStatusMDT::copyImpl(const uci::type::PO_CapabilityStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CapabilityStatusBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const PO_CapabilityStatusMDT&>(accessor);
    setCapabilityStatus(*(accessorImpl.capabilityStatus_Accessor));
    setSubCapabilityStatus(*(accessorImpl.subCapabilityStatus_Accessor));
    setTrackStatus(*(accessorImpl.trackStatus_Accessor));
    setComponentStatus(*(accessorImpl.componentStatus_Accessor));
    if (accessorImpl.collectionConstraintsStatus_Accessor) {
      setCollectionConstraintsStatus(*(accessorImpl.collectionConstraintsStatus_Accessor));
    } else {
      collectionConstraintsStatus_Accessor.reset();
    }
    setCurrentMessageOutput(*(accessorImpl.currentMessageOutput_Accessor));
    if (accessorImpl.currentFOR_Accessor) {
      setCurrentFOR(*(accessorImpl.currentFOR_Accessor));
    } else {
      currentFOR_Accessor.reset();
    }
    if (accessorImpl.currentThermalBlankingFOR_Accessor) {
      setCurrentThermalBlankingFOR(*(accessorImpl.currentThermalBlankingFOR_Accessor));
    } else {
      currentThermalBlankingFOR_Accessor.reset();
    }
  }
}

void PO_CapabilityStatusMDT::reset() noexcept {
  CapabilityStatusBaseType::reset();
  capabilityStatus_Accessor->reset();
  subCapabilityStatus_Accessor->reset();
  trackStatus_Accessor->reset();
  componentStatus_Accessor->reset();
  collectionConstraintsStatus_Accessor.reset();
  currentMessageOutput_Accessor->reset();
  currentFOR_Accessor.reset();
  currentThermalBlankingFOR_Accessor.reset();
}

const uci::type::PO_CapabilityStatusMDT::CapabilityStatus& PO_CapabilityStatusMDT::getCapabilityStatus() const {
  return *capabilityStatus_Accessor;
}

uci::type::PO_CapabilityStatusMDT::CapabilityStatus& PO_CapabilityStatusMDT::getCapabilityStatus() {
  return *capabilityStatus_Accessor;
}

uci::type::PO_CapabilityStatusMDT& PO_CapabilityStatusMDT::setCapabilityStatus(const uci::type::PO_CapabilityStatusMDT::CapabilityStatus& accessor) {
  if (&accessor != capabilityStatus_Accessor.get()) {
    capabilityStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus& PO_CapabilityStatusMDT::getSubCapabilityStatus() const {
  return *subCapabilityStatus_Accessor;
}

uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus& PO_CapabilityStatusMDT::getSubCapabilityStatus() {
  return *subCapabilityStatus_Accessor;
}

uci::type::PO_CapabilityStatusMDT& PO_CapabilityStatusMDT::setSubCapabilityStatus(const uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus& accessor) {
  if (&accessor != subCapabilityStatus_Accessor.get()) {
    subCapabilityStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_CapabilityStatusMDT::TrackStatus& PO_CapabilityStatusMDT::getTrackStatus() const {
  return *trackStatus_Accessor;
}

uci::type::PO_CapabilityStatusMDT::TrackStatus& PO_CapabilityStatusMDT::getTrackStatus() {
  return *trackStatus_Accessor;
}

uci::type::PO_CapabilityStatusMDT& PO_CapabilityStatusMDT::setTrackStatus(const uci::type::PO_CapabilityStatusMDT::TrackStatus& accessor) {
  if (&accessor != trackStatus_Accessor.get()) {
    trackStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_CapabilityStatusMDT::ComponentStatus& PO_CapabilityStatusMDT::getComponentStatus() const {
  return *componentStatus_Accessor;
}

uci::type::PO_CapabilityStatusMDT::ComponentStatus& PO_CapabilityStatusMDT::getComponentStatus() {
  return *componentStatus_Accessor;
}

uci::type::PO_CapabilityStatusMDT& PO_CapabilityStatusMDT::setComponentStatus(const uci::type::PO_CapabilityStatusMDT::ComponentStatus& accessor) {
  if (&accessor != componentStatus_Accessor.get()) {
    componentStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_CollectionConstraintsStatusType& PO_CapabilityStatusMDT::getCollectionConstraintsStatus_() const {
  if (collectionConstraintsStatus_Accessor) {
    return *collectionConstraintsStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionConstraintsStatus(): An attempt was made to get an optional field that was not enabled, call hasCollectionConstraintsStatus() to determine if it is safe to call getCollectionConstraintsStatus()");
}

const uci::type::PO_CollectionConstraintsStatusType& PO_CapabilityStatusMDT::getCollectionConstraintsStatus() const {
  return getCollectionConstraintsStatus_();
}

uci::type::PO_CollectionConstraintsStatusType& PO_CapabilityStatusMDT::getCollectionConstraintsStatus() {
  return getCollectionConstraintsStatus_();
}

uci::type::PO_CapabilityStatusMDT& PO_CapabilityStatusMDT::setCollectionConstraintsStatus(const uci::type::PO_CollectionConstraintsStatusType& accessor) {
  enableCollectionConstraintsStatus();
  if (&accessor != collectionConstraintsStatus_Accessor.get()) {
    collectionConstraintsStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CapabilityStatusMDT::hasCollectionConstraintsStatus() const noexcept {
  return static_cast<bool>(collectionConstraintsStatus_Accessor);
}

uci::type::PO_CollectionConstraintsStatusType& PO_CapabilityStatusMDT::enableCollectionConstraintsStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_CollectionConstraintsStatusType : type};
  if ((!collectionConstraintsStatus_Accessor) || (collectionConstraintsStatus_Accessor->getAccessorType() != requestedType)) {
    collectionConstraintsStatus_Accessor = PO_CollectionConstraintsStatusType::create(requestedType);
    if (!collectionConstraintsStatus_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionConstraintsStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionConstraintsStatus_Accessor;
}

uci::type::PO_CapabilityStatusMDT& PO_CapabilityStatusMDT::clearCollectionConstraintsStatus() noexcept {
  collectionConstraintsStatus_Accessor.reset();
  return *this;
}

const uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput& PO_CapabilityStatusMDT::getCurrentMessageOutput() const {
  return *currentMessageOutput_Accessor;
}

uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput& PO_CapabilityStatusMDT::getCurrentMessageOutput() {
  return *currentMessageOutput_Accessor;
}

uci::type::PO_CapabilityStatusMDT& PO_CapabilityStatusMDT::setCurrentMessageOutput(const uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput& accessor) {
  if (&accessor != currentMessageOutput_Accessor.get()) {
    currentMessageOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FOR_Type& PO_CapabilityStatusMDT::getCurrentFOR_() const {
  if (currentFOR_Accessor) {
    return *currentFOR_Accessor;
  }
  throw uci::base::UCIException("Error in getCurrentFOR(): An attempt was made to get an optional field that was not enabled, call hasCurrentFOR() to determine if it is safe to call getCurrentFOR()");
}

const uci::type::FOR_Type& PO_CapabilityStatusMDT::getCurrentFOR() const {
  return getCurrentFOR_();
}

uci::type::FOR_Type& PO_CapabilityStatusMDT::getCurrentFOR() {
  return getCurrentFOR_();
}

uci::type::PO_CapabilityStatusMDT& PO_CapabilityStatusMDT::setCurrentFOR(const uci::type::FOR_Type& accessor) {
  enableCurrentFOR();
  if (&accessor != currentFOR_Accessor.get()) {
    currentFOR_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CapabilityStatusMDT::hasCurrentFOR() const noexcept {
  return static_cast<bool>(currentFOR_Accessor);
}

uci::type::FOR_Type& PO_CapabilityStatusMDT::enableCurrentFOR(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fOR_Type : type};
  if ((!currentFOR_Accessor) || (currentFOR_Accessor->getAccessorType() != requestedType)) {
    currentFOR_Accessor = FOR_Type::create(requestedType);
    if (!currentFOR_Accessor) {
      throw uci::base::UCIException("Error in enableCurrentFOR(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *currentFOR_Accessor;
}

uci::type::PO_CapabilityStatusMDT& PO_CapabilityStatusMDT::clearCurrentFOR() noexcept {
  currentFOR_Accessor.reset();
  return *this;
}

uci::type::FOR_Type& PO_CapabilityStatusMDT::getCurrentThermalBlankingFOR_() const {
  if (currentThermalBlankingFOR_Accessor) {
    return *currentThermalBlankingFOR_Accessor;
  }
  throw uci::base::UCIException("Error in getCurrentThermalBlankingFOR(): An attempt was made to get an optional field that was not enabled, call hasCurrentThermalBlankingFOR() to determine if it is safe to call getCurrentThermalBlankingFOR()");
}

const uci::type::FOR_Type& PO_CapabilityStatusMDT::getCurrentThermalBlankingFOR() const {
  return getCurrentThermalBlankingFOR_();
}

uci::type::FOR_Type& PO_CapabilityStatusMDT::getCurrentThermalBlankingFOR() {
  return getCurrentThermalBlankingFOR_();
}

uci::type::PO_CapabilityStatusMDT& PO_CapabilityStatusMDT::setCurrentThermalBlankingFOR(const uci::type::FOR_Type& accessor) {
  enableCurrentThermalBlankingFOR();
  if (&accessor != currentThermalBlankingFOR_Accessor.get()) {
    currentThermalBlankingFOR_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CapabilityStatusMDT::hasCurrentThermalBlankingFOR() const noexcept {
  return static_cast<bool>(currentThermalBlankingFOR_Accessor);
}

uci::type::FOR_Type& PO_CapabilityStatusMDT::enableCurrentThermalBlankingFOR(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fOR_Type : type};
  if ((!currentThermalBlankingFOR_Accessor) || (currentThermalBlankingFOR_Accessor->getAccessorType() != requestedType)) {
    currentThermalBlankingFOR_Accessor = FOR_Type::create(requestedType);
    if (!currentThermalBlankingFOR_Accessor) {
      throw uci::base::UCIException("Error in enableCurrentThermalBlankingFOR(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *currentThermalBlankingFOR_Accessor;
}

uci::type::PO_CapabilityStatusMDT& PO_CapabilityStatusMDT::clearCurrentThermalBlankingFOR() noexcept {
  currentThermalBlankingFOR_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_CapabilityStatusMDT> PO_CapabilityStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_CapabilityStatusMDT : type};
  return (requestedType == uci::type::accessorType::pO_CapabilityStatusMDT) ? boost::make_unique<PO_CapabilityStatusMDT>() : nullptr;
}

/**  */
namespace PO_CapabilityStatusMDT_Names {

constexpr const char* Extern_Type_Name{"PO_CapabilityStatusMDT"};
constexpr const char* CapabilityStatus_Name{"CapabilityStatus"};
constexpr const char* SubCapabilityStatus_Name{"SubCapabilityStatus"};
constexpr const char* TrackStatus_Name{"TrackStatus"};
constexpr const char* ComponentStatus_Name{"ComponentStatus"};
constexpr const char* CollectionConstraintsStatus_Name{"CollectionConstraintsStatus"};
constexpr const char* CurrentMessageOutput_Name{"CurrentMessageOutput"};
constexpr const char* CurrentFOR_Name{"CurrentFOR"};
constexpr const char* CurrentThermalBlankingFOR_Name{"CurrentThermalBlankingFOR"};

} // namespace PO_CapabilityStatusMDT_Names

void PO_CapabilityStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_CapabilityStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_CapabilityStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::CapabilityStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityStatusMDT::CapabilityStatus& boundedList = accessor.getCapabilityStatus();
        const uci::type::PO_CapabilityStatusMDT::CapabilityStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_CapabilityStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::SubCapabilityStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus& boundedList = accessor.getSubCapabilityStatus();
        const uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_SubCapabilitySettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::TrackStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityStatusMDT::TrackStatus& boundedList = accessor.getTrackStatus();
        const uci::type::PO_CapabilityStatusMDT::TrackStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_TrackStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::ComponentStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityStatusMDT::ComponentStatus& boundedList = accessor.getComponentStatus();
        const uci::type::PO_CapabilityStatusMDT::ComponentStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ComponentStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::CollectionConstraintsStatus_Name) {
      PO_CollectionConstraintsStatusType::deserialize(valueType.second, accessor.enableCollectionConstraintsStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::CurrentMessageOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput& boundedList = accessor.getCurrentMessageOutput();
        const uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::CurrentFOR_Name) {
      FOR_Type::deserialize(valueType.second, accessor.enableCurrentFOR(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::CurrentThermalBlankingFOR_Name) {
      FOR_Type::deserialize(valueType.second, accessor.enableCurrentThermalBlankingFOR(), nodeName, nsPrefix);
    }
  }
  CapabilityStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string PO_CapabilityStatusMDT::serialize(const uci::type::PO_CapabilityStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_CapabilityStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_CapabilityStatusMDT_Names::Extern_Type_Name);
  }
  CapabilityStatusBaseType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::PO_CapabilityStatusMDT::CapabilityStatus& boundedList = accessor.getCapabilityStatus();
    for (uci::type::PO_CapabilityStatusMDT::CapabilityStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_CapabilityStatusType::serialize(boundedList.at(i), node, PO_CapabilityStatusMDT_Names::CapabilityStatus_Name);
    }
  }
  {
    const uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus& boundedList = accessor.getSubCapabilityStatus();
    for (uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_SubCapabilitySettingsType::serialize(boundedList.at(i), node, PO_CapabilityStatusMDT_Names::SubCapabilityStatus_Name);
    }
  }
  {
    const uci::type::PO_CapabilityStatusMDT::TrackStatus& boundedList = accessor.getTrackStatus();
    for (uci::type::PO_CapabilityStatusMDT::TrackStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_TrackStatusType::serialize(boundedList.at(i), node, PO_CapabilityStatusMDT_Names::TrackStatus_Name);
    }
  }
  {
    const uci::type::PO_CapabilityStatusMDT::ComponentStatus& boundedList = accessor.getComponentStatus();
    for (uci::type::PO_CapabilityStatusMDT::ComponentStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ComponentStatusType::serialize(boundedList.at(i), node, PO_CapabilityStatusMDT_Names::ComponentStatus_Name);
    }
  }
  if (accessor.hasCollectionConstraintsStatus()) {
    PO_CollectionConstraintsStatusType::serialize(accessor.getCollectionConstraintsStatus(), node, PO_CapabilityStatusMDT_Names::CollectionConstraintsStatus_Name);
  }
  {
    const uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput& boundedList = accessor.getCurrentMessageOutput();
    for (uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_MessageOutputsEnum::serialize(boundedList.at(i), node, PO_CapabilityStatusMDT_Names::CurrentMessageOutput_Name, false);
    }
  }
  if (accessor.hasCurrentFOR()) {
    FOR_Type::serialize(accessor.getCurrentFOR(), node, PO_CapabilityStatusMDT_Names::CurrentFOR_Name);
  }
  if (accessor.hasCurrentThermalBlankingFOR()) {
    FOR_Type::serialize(accessor.getCurrentThermalBlankingFOR(), node, PO_CapabilityStatusMDT_Names::CurrentThermalBlankingFOR_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_CapabilityStatusMDT& PO_CapabilityStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_CapabilityStatusMDT>().release());
}

uci::type::PO_CapabilityStatusMDT& PO_CapabilityStatusMDT::create(const uci::type::PO_CapabilityStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_CapabilityStatusMDT> newAccessor{boost::make_unique<asb_uci::type::PO_CapabilityStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_CapabilityStatusMDT::destroy(uci::type::PO_CapabilityStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::PO_CapabilityStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

