/** @file CS_DetailDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CS_DetailDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CS_SubDetailDataType.h"
#include "asb_uci/type/FileLocationID_Type.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/ModulationEnum.h"
#include "asb_uci/type/PolarizationEnum.h"
#include "asb_uci/type/VisibleString32Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CS_DetailDataType.h"
#include "uci/type/CS_SubDetailDataType.h"
#include "uci/type/FileLocationID_Type.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/FrequencyType.h"
#include "uci/type/ModulationEnum.h"
#include "uci/type/PolarizationEnum.h"
#include "uci/type/VisibleString32Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CS_DetailDataType::CS_DetailDataType()
  : name_Accessor{boost::make_unique<VisibleString32Type>()},
    subDetailData_Accessor{boost::make_unique<SubDetailData>(0, SIZE_MAX)} {
}

CS_DetailDataType::~CS_DetailDataType() = default;

void CS_DetailDataType::copy(const uci::type::CS_DetailDataType& accessor) {
  copyImpl(accessor, false);
}

void CS_DetailDataType::copyImpl(const uci::type::CS_DetailDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CS_DetailDataType&>(accessor);
    setName(*(accessorImpl.name_Accessor));
    if (accessorImpl.detailsID_Accessor) {
      setDetailsID(*(accessorImpl.detailsID_Accessor));
    } else {
      detailsID_Accessor.reset();
    }
    if (accessorImpl.signal_Accessor) {
      setSignal(*(accessorImpl.signal_Accessor));
    } else {
      signal_Accessor.reset();
    }
    if (accessorImpl.hasUplinkFrequency()) {
      setUplinkFrequency(accessorImpl.getUplinkFrequency());
    } else {
      clearUplinkFrequency();
    }
    if (accessorImpl.uplinkPolarization_Accessor) {
      setUplinkPolarization(*(accessorImpl.uplinkPolarization_Accessor));
    } else {
      uplinkPolarization_Accessor.reset();
    }
    if (accessorImpl.hasDownlinkFrequency()) {
      setDownlinkFrequency(accessorImpl.getDownlinkFrequency());
    } else {
      clearDownlinkFrequency();
    }
    if (accessorImpl.downlinkPolarization_Accessor) {
      setDownlinkPolarization(*(accessorImpl.downlinkPolarization_Accessor));
    } else {
      downlinkPolarization_Accessor.reset();
    }
    if (accessorImpl.modulation_Accessor) {
      setModulation(*(accessorImpl.modulation_Accessor));
    } else {
      modulation_Accessor.reset();
    }
    if (accessorImpl.hasBandwidth()) {
      setBandwidth(accessorImpl.getBandwidth());
    } else {
      clearBandwidth();
    }
    if (accessorImpl.attributesID_Accessor) {
      setAttributesID(*(accessorImpl.attributesID_Accessor));
    } else {
      attributesID_Accessor.reset();
    }
    setSubDetailData(*(accessorImpl.subDetailData_Accessor));
  }
}

void CS_DetailDataType::reset() noexcept {
  name_Accessor->reset();
  detailsID_Accessor.reset();
  signal_Accessor.reset();
  clearUplinkFrequency();
  uplinkPolarization_Accessor.reset();
  clearDownlinkFrequency();
  downlinkPolarization_Accessor.reset();
  modulation_Accessor.reset();
  clearBandwidth();
  attributesID_Accessor.reset();
  subDetailData_Accessor->reset();
}

const uci::type::VisibleString32Type& CS_DetailDataType::getName() const noexcept {
  return *name_Accessor;
}

uci::type::VisibleString32Type& CS_DetailDataType::getName() noexcept {
  return *name_Accessor;
}

uci::type::CS_DetailDataType& CS_DetailDataType::setName(const uci::type::VisibleString32Type& value) {
  return setName(value.c_str());
}

uci::type::CS_DetailDataType& CS_DetailDataType::setName(const std::string& value) {
  return setName(value.c_str());
}

uci::type::CS_DetailDataType& CS_DetailDataType::setName(const char* value) {
  name_Accessor->setStringValue(value);
  return *this;
}

uci::type::FileLocationID_Type& CS_DetailDataType::getDetailsID_() const {
  if (detailsID_Accessor) {
    return *detailsID_Accessor;
  }
  throw uci::base::UCIException("Error in getDetailsID(): An attempt was made to get an optional field that was not enabled, call hasDetailsID() to determine if it is safe to call getDetailsID()");
}

const uci::type::FileLocationID_Type& CS_DetailDataType::getDetailsID() const {
  return getDetailsID_();
}

uci::type::FileLocationID_Type& CS_DetailDataType::getDetailsID() {
  return getDetailsID_();
}

uci::type::CS_DetailDataType& CS_DetailDataType::setDetailsID(const uci::type::FileLocationID_Type& accessor) {
  enableDetailsID();
  if (&accessor != detailsID_Accessor.get()) {
    detailsID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CS_DetailDataType::hasDetailsID() const noexcept {
  return static_cast<bool>(detailsID_Accessor);
}

uci::type::FileLocationID_Type& CS_DetailDataType::enableDetailsID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileLocationID_Type : type};
  if ((!detailsID_Accessor) || (detailsID_Accessor->getAccessorType() != requestedType)) {
    detailsID_Accessor = FileLocationID_Type::create(requestedType);
    if (!detailsID_Accessor) {
      throw uci::base::UCIException("Error in enableDetailsID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *detailsID_Accessor;
}

uci::type::CS_DetailDataType& CS_DetailDataType::clearDetailsID() noexcept {
  detailsID_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& CS_DetailDataType::getSignal_() const {
  if (signal_Accessor) {
    return *signal_Accessor;
  }
  throw uci::base::UCIException("Error in getSignal(): An attempt was made to get an optional field that was not enabled, call hasSignal() to determine if it is safe to call getSignal()");
}

const uci::type::ForeignKeyType& CS_DetailDataType::getSignal() const {
  return getSignal_();
}

uci::type::ForeignKeyType& CS_DetailDataType::getSignal() {
  return getSignal_();
}

uci::type::CS_DetailDataType& CS_DetailDataType::setSignal(const uci::type::ForeignKeyType& accessor) {
  enableSignal(accessor.getAccessorType());
  if (&accessor != signal_Accessor.get()) {
    signal_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CS_DetailDataType::hasSignal() const noexcept {
  return static_cast<bool>(signal_Accessor);
}

uci::type::ForeignKeyType& CS_DetailDataType::enableSignal(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!signal_Accessor) || (signal_Accessor->getAccessorType() != requestedType)) {
    signal_Accessor = ForeignKeyType::create(requestedType);
    if (!signal_Accessor) {
      throw uci::base::UCIException("Error in enableSignal(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *signal_Accessor;
}

uci::type::CS_DetailDataType& CS_DetailDataType::clearSignal() noexcept {
  signal_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue CS_DetailDataType::getUplinkFrequency() const {
  if (uplinkFrequency_Accessor) {
    return *uplinkFrequency_Accessor;
  }
  throw uci::base::UCIException("Error in getUplinkFrequency(): An attempt was made to get an optional field that was not enabled, call hasUplinkFrequency() to determine if it is safe to call getUplinkFrequency()");
}

uci::type::CS_DetailDataType& CS_DetailDataType::setUplinkFrequency(uci::type::FrequencyTypeValue value) {
  uplinkFrequency_Accessor = value;
  return *this;
}

bool CS_DetailDataType::hasUplinkFrequency() const noexcept {
  return uplinkFrequency_Accessor.has_value();
}

uci::type::CS_DetailDataType& CS_DetailDataType::clearUplinkFrequency() noexcept {
  uplinkFrequency_Accessor.reset();
  return *this;
}

uci::type::PolarizationEnum& CS_DetailDataType::getUplinkPolarization_() const {
  if (uplinkPolarization_Accessor) {
    return *uplinkPolarization_Accessor;
  }
  throw uci::base::UCIException("Error in getUplinkPolarization(): An attempt was made to get an optional field that was not enabled, call hasUplinkPolarization() to determine if it is safe to call getUplinkPolarization()");
}

const uci::type::PolarizationEnum& CS_DetailDataType::getUplinkPolarization() const {
  return getUplinkPolarization_();
}

uci::type::PolarizationEnum& CS_DetailDataType::getUplinkPolarization() {
  return getUplinkPolarization_();
}

uci::type::CS_DetailDataType& CS_DetailDataType::setUplinkPolarization(const uci::type::PolarizationEnum& accessor) {
  enableUplinkPolarization();
  if (&accessor != uplinkPolarization_Accessor.get()) {
    uplinkPolarization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CS_DetailDataType& CS_DetailDataType::setUplinkPolarization(const uci::type::PolarizationEnum::EnumerationItem value) {
  enableUplinkPolarization().setValue(value);
  return *this;
}

bool CS_DetailDataType::hasUplinkPolarization() const noexcept {
  return static_cast<bool>(uplinkPolarization_Accessor);
}

uci::type::PolarizationEnum& CS_DetailDataType::enableUplinkPolarization(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::polarizationEnum : type};
  if ((!uplinkPolarization_Accessor) || (uplinkPolarization_Accessor->getAccessorType() != requestedType)) {
    uplinkPolarization_Accessor = PolarizationEnum::create(requestedType);
    if (!uplinkPolarization_Accessor) {
      throw uci::base::UCIException("Error in enableUplinkPolarization(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *uplinkPolarization_Accessor;
}

uci::type::CS_DetailDataType& CS_DetailDataType::clearUplinkPolarization() noexcept {
  uplinkPolarization_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue CS_DetailDataType::getDownlinkFrequency() const {
  if (downlinkFrequency_Accessor) {
    return *downlinkFrequency_Accessor;
  }
  throw uci::base::UCIException("Error in getDownlinkFrequency(): An attempt was made to get an optional field that was not enabled, call hasDownlinkFrequency() to determine if it is safe to call getDownlinkFrequency()");
}

uci::type::CS_DetailDataType& CS_DetailDataType::setDownlinkFrequency(uci::type::FrequencyTypeValue value) {
  downlinkFrequency_Accessor = value;
  return *this;
}

bool CS_DetailDataType::hasDownlinkFrequency() const noexcept {
  return downlinkFrequency_Accessor.has_value();
}

uci::type::CS_DetailDataType& CS_DetailDataType::clearDownlinkFrequency() noexcept {
  downlinkFrequency_Accessor.reset();
  return *this;
}

uci::type::PolarizationEnum& CS_DetailDataType::getDownlinkPolarization_() const {
  if (downlinkPolarization_Accessor) {
    return *downlinkPolarization_Accessor;
  }
  throw uci::base::UCIException("Error in getDownlinkPolarization(): An attempt was made to get an optional field that was not enabled, call hasDownlinkPolarization() to determine if it is safe to call getDownlinkPolarization()");
}

const uci::type::PolarizationEnum& CS_DetailDataType::getDownlinkPolarization() const {
  return getDownlinkPolarization_();
}

uci::type::PolarizationEnum& CS_DetailDataType::getDownlinkPolarization() {
  return getDownlinkPolarization_();
}

uci::type::CS_DetailDataType& CS_DetailDataType::setDownlinkPolarization(const uci::type::PolarizationEnum& accessor) {
  enableDownlinkPolarization();
  if (&accessor != downlinkPolarization_Accessor.get()) {
    downlinkPolarization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CS_DetailDataType& CS_DetailDataType::setDownlinkPolarization(const uci::type::PolarizationEnum::EnumerationItem value) {
  enableDownlinkPolarization().setValue(value);
  return *this;
}

bool CS_DetailDataType::hasDownlinkPolarization() const noexcept {
  return static_cast<bool>(downlinkPolarization_Accessor);
}

uci::type::PolarizationEnum& CS_DetailDataType::enableDownlinkPolarization(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::polarizationEnum : type};
  if ((!downlinkPolarization_Accessor) || (downlinkPolarization_Accessor->getAccessorType() != requestedType)) {
    downlinkPolarization_Accessor = PolarizationEnum::create(requestedType);
    if (!downlinkPolarization_Accessor) {
      throw uci::base::UCIException("Error in enableDownlinkPolarization(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *downlinkPolarization_Accessor;
}

uci::type::CS_DetailDataType& CS_DetailDataType::clearDownlinkPolarization() noexcept {
  downlinkPolarization_Accessor.reset();
  return *this;
}

uci::type::ModulationEnum& CS_DetailDataType::getModulation_() const {
  if (modulation_Accessor) {
    return *modulation_Accessor;
  }
  throw uci::base::UCIException("Error in getModulation(): An attempt was made to get an optional field that was not enabled, call hasModulation() to determine if it is safe to call getModulation()");
}

const uci::type::ModulationEnum& CS_DetailDataType::getModulation() const {
  return getModulation_();
}

uci::type::ModulationEnum& CS_DetailDataType::getModulation() {
  return getModulation_();
}

uci::type::CS_DetailDataType& CS_DetailDataType::setModulation(const uci::type::ModulationEnum& accessor) {
  enableModulation();
  if (&accessor != modulation_Accessor.get()) {
    modulation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CS_DetailDataType& CS_DetailDataType::setModulation(const uci::type::ModulationEnum::EnumerationItem value) {
  enableModulation().setValue(value);
  return *this;
}

bool CS_DetailDataType::hasModulation() const noexcept {
  return static_cast<bool>(modulation_Accessor);
}

uci::type::ModulationEnum& CS_DetailDataType::enableModulation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::modulationEnum : type};
  if ((!modulation_Accessor) || (modulation_Accessor->getAccessorType() != requestedType)) {
    modulation_Accessor = ModulationEnum::create(requestedType);
    if (!modulation_Accessor) {
      throw uci::base::UCIException("Error in enableModulation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modulation_Accessor;
}

uci::type::CS_DetailDataType& CS_DetailDataType::clearModulation() noexcept {
  modulation_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue CS_DetailDataType::getBandwidth() const {
  if (bandwidth_Accessor) {
    return *bandwidth_Accessor;
  }
  throw uci::base::UCIException("Error in getBandwidth(): An attempt was made to get an optional field that was not enabled, call hasBandwidth() to determine if it is safe to call getBandwidth()");
}

uci::type::CS_DetailDataType& CS_DetailDataType::setBandwidth(uci::type::FrequencyTypeValue value) {
  bandwidth_Accessor = value;
  return *this;
}

bool CS_DetailDataType::hasBandwidth() const noexcept {
  return bandwidth_Accessor.has_value();
}

uci::type::CS_DetailDataType& CS_DetailDataType::clearBandwidth() noexcept {
  bandwidth_Accessor.reset();
  return *this;
}

uci::type::FileLocationID_Type& CS_DetailDataType::getAttributesID_() const {
  if (attributesID_Accessor) {
    return *attributesID_Accessor;
  }
  throw uci::base::UCIException("Error in getAttributesID(): An attempt was made to get an optional field that was not enabled, call hasAttributesID() to determine if it is safe to call getAttributesID()");
}

const uci::type::FileLocationID_Type& CS_DetailDataType::getAttributesID() const {
  return getAttributesID_();
}

uci::type::FileLocationID_Type& CS_DetailDataType::getAttributesID() {
  return getAttributesID_();
}

uci::type::CS_DetailDataType& CS_DetailDataType::setAttributesID(const uci::type::FileLocationID_Type& accessor) {
  enableAttributesID();
  if (&accessor != attributesID_Accessor.get()) {
    attributesID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CS_DetailDataType::hasAttributesID() const noexcept {
  return static_cast<bool>(attributesID_Accessor);
}

uci::type::FileLocationID_Type& CS_DetailDataType::enableAttributesID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileLocationID_Type : type};
  if ((!attributesID_Accessor) || (attributesID_Accessor->getAccessorType() != requestedType)) {
    attributesID_Accessor = FileLocationID_Type::create(requestedType);
    if (!attributesID_Accessor) {
      throw uci::base::UCIException("Error in enableAttributesID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *attributesID_Accessor;
}

uci::type::CS_DetailDataType& CS_DetailDataType::clearAttributesID() noexcept {
  attributesID_Accessor.reset();
  return *this;
}

const uci::type::CS_DetailDataType::SubDetailData& CS_DetailDataType::getSubDetailData() const {
  return *subDetailData_Accessor;
}

uci::type::CS_DetailDataType::SubDetailData& CS_DetailDataType::getSubDetailData() {
  return *subDetailData_Accessor;
}

uci::type::CS_DetailDataType& CS_DetailDataType::setSubDetailData(const uci::type::CS_DetailDataType::SubDetailData& accessor) {
  if (&accessor != subDetailData_Accessor.get()) {
    subDetailData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CS_DetailDataType> CS_DetailDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_DetailDataType : type};
  return (requestedType == uci::type::accessorType::cS_DetailDataType) ? boost::make_unique<CS_DetailDataType>() : nullptr;
}

/**  */
namespace CS_DetailDataType_Names {

constexpr const char* Extern_Type_Name{"CS_DetailDataType"};
constexpr const char* Name_Name{"Name"};
constexpr const char* DetailsID_Name{"DetailsID"};
constexpr const char* Signal_Name{"Signal"};
constexpr const char* UplinkFrequency_Name{"UplinkFrequency"};
constexpr const char* UplinkPolarization_Name{"UplinkPolarization"};
constexpr const char* DownlinkFrequency_Name{"DownlinkFrequency"};
constexpr const char* DownlinkPolarization_Name{"DownlinkPolarization"};
constexpr const char* Modulation_Name{"Modulation"};
constexpr const char* Bandwidth_Name{"Bandwidth"};
constexpr const char* AttributesID_Name{"AttributesID"};
constexpr const char* SubDetailData_Name{"SubDetailData"};

} // namespace CS_DetailDataType_Names

void CS_DetailDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_DetailDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CS_DetailDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CS_DetailDataType_Names::Name_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_DetailDataType_Names::DetailsID_Name) {
      FileLocationID_Type::deserialize(valueType.second, accessor.enableDetailsID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_DetailDataType_Names::Signal_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSignal(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_DetailDataType_Names::UplinkFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUplinkFrequency(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_DetailDataType_Names::UplinkPolarization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableUplinkPolarization().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_DetailDataType_Names::DownlinkFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDownlinkFrequency(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_DetailDataType_Names::DownlinkPolarization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableDownlinkPolarization().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_DetailDataType_Names::Modulation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableModulation().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_DetailDataType_Names::Bandwidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBandwidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_DetailDataType_Names::AttributesID_Name) {
      FileLocationID_Type::deserialize(valueType.second, accessor.enableAttributesID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_DetailDataType_Names::SubDetailData_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CS_DetailDataType::SubDetailData& boundedList = accessor.getSubDetailData();
        const uci::type::CS_DetailDataType::SubDetailData::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CS_SubDetailDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CS_DetailDataType::serialize(const uci::type::CS_DetailDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CS_DetailDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CS_DetailDataType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeString(accessor.getName(), node, CS_DetailDataType_Names::Name_Name);
  if (accessor.hasDetailsID()) {
    FileLocationID_Type::serialize(accessor.getDetailsID(), node, CS_DetailDataType_Names::DetailsID_Name);
  }
  if (accessor.hasSignal()) {
    ForeignKeyType::serialize(accessor.getSignal(), node, CS_DetailDataType_Names::Signal_Name);
  }
  if (accessor.hasUplinkFrequency()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getUplinkFrequency(), node, CS_DetailDataType_Names::UplinkFrequency_Name);
  }
  if (accessor.hasUplinkPolarization()) {
    PolarizationEnum::serialize(accessor.getUplinkPolarization(), node, CS_DetailDataType_Names::UplinkPolarization_Name, false);
  }
  if (accessor.hasDownlinkFrequency()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDownlinkFrequency(), node, CS_DetailDataType_Names::DownlinkFrequency_Name);
  }
  if (accessor.hasDownlinkPolarization()) {
    PolarizationEnum::serialize(accessor.getDownlinkPolarization(), node, CS_DetailDataType_Names::DownlinkPolarization_Name, false);
  }
  if (accessor.hasModulation()) {
    ModulationEnum::serialize(accessor.getModulation(), node, CS_DetailDataType_Names::Modulation_Name, false);
  }
  if (accessor.hasBandwidth()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getBandwidth(), node, CS_DetailDataType_Names::Bandwidth_Name);
  }
  if (accessor.hasAttributesID()) {
    FileLocationID_Type::serialize(accessor.getAttributesID(), node, CS_DetailDataType_Names::AttributesID_Name);
  }
  {
    const uci::type::CS_DetailDataType::SubDetailData& boundedList = accessor.getSubDetailData();
    for (uci::type::CS_DetailDataType::SubDetailData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CS_SubDetailDataType::serialize(boundedList.at(i), node, CS_DetailDataType_Names::SubDetailData_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CS_DetailDataType& CS_DetailDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CS_DetailDataType>().release());
}

uci::type::CS_DetailDataType& CS_DetailDataType::create(const uci::type::CS_DetailDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CS_DetailDataType> newAccessor{boost::make_unique<asb_uci::type::CS_DetailDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CS_DetailDataType::destroy(uci::type::CS_DetailDataType& accessor) {
  delete dynamic_cast<asb_uci::type::CS_DetailDataType*>(&accessor);
}

} // namespace type

} // namespace uci

