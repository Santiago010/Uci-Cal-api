/** @file PO_ActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityBaseType.h"
#include "../../../include/asb_uci/type/FOR_Enum.h"
#include "../../../include/asb_uci/type/FOV_ActivityType.h"
#include "../../../include/asb_uci/type/PO_CollectionConstraintsStatusType.h"
#include "../../../include/asb_uci/type/PO_ComponentStatusType.h"
#include "../../../include/asb_uci/type/PO_SubCapabilitySettingsType.h"
#include "../../../include/asb_uci/type/PO_TargetType.h"
#include "../../../include/asb_uci/type/PO_TrackActivityType.h"
#include "../../../include/asb_uci/type/PO_TrackDetailsType.h"
#include "../../../include/asb_uci/type/ProductOutputCapabilityStatusImageryType.h"
#include "../../../include/asb_uci/type/RepetitionType.h"
#include "../../../include/asb_uci/type/SearchTrackActivityDetailsType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FOR_Enum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FOV_ActivityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ActivityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_CollectionConstraintsStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_SubCapabilitySettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TargetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TrackActivityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TrackDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductOutputCapabilityStatusImageryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RepetitionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SearchTrackActivityDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ActivityType::PO_ActivityType()
  : subCapabilityStatus_Accessor{boost::make_unique<SubCapabilityStatus>(0, SIZE_MAX)},
    componentStatus_Accessor{boost::make_unique<ComponentStatus>(0, SIZE_MAX)},
    productOutputStatus_Accessor{boost::make_unique<ProductOutputStatus>(0, SIZE_MAX)} {
}

PO_ActivityType::~PO_ActivityType() = default;

void PO_ActivityType::copy(const uci::type::PO_ActivityType& accessor) {
  copyImpl(accessor, false);
}

void PO_ActivityType::copyImpl(const uci::type::PO_ActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ActivityBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const PO_ActivityType&>(accessor);
    if (accessorImpl.hasActualStartTime()) {
      setActualStartTime(accessorImpl.getActualStartTime());
    } else {
      clearActualStartTime();
    }
    if (accessorImpl.hasActualCompletionTime()) {
      setActualCompletionTime(accessorImpl.getActualCompletionTime());
    } else {
      clearActualCompletionTime();
    }
    if (accessorImpl.hasAllProductsAndMessagesProduced()) {
      setAllProductsAndMessagesProduced(accessorImpl.getAllProductsAndMessagesProduced());
    } else {
      clearAllProductsAndMessagesProduced();
    }
    if (accessorImpl.fOV_Accessor) {
      setFOV(*(accessorImpl.fOV_Accessor));
    } else {
      fOV_Accessor.reset();
    }
    if (accessorImpl.pointingActivityReport_Accessor) {
      setPointingActivityReport(*(accessorImpl.pointingActivityReport_Accessor));
    } else {
      pointingActivityReport_Accessor.reset();
    }
    setSubCapabilityStatus(*(accessorImpl.subCapabilityStatus_Accessor));
    setComponentStatus(*(accessorImpl.componentStatus_Accessor));
    if (accessorImpl.collectionConstraintsStatus_Accessor) {
      setCollectionConstraintsStatus(*(accessorImpl.collectionConstraintsStatus_Accessor));
    } else {
      collectionConstraintsStatus_Accessor.reset();
    }
    if (accessorImpl.trackOptionsStatus_Accessor) {
      setTrackOptionsStatus(*(accessorImpl.trackOptionsStatus_Accessor));
    } else {
      trackOptionsStatus_Accessor.reset();
    }
    setProductOutputStatus(*(accessorImpl.productOutputStatus_Accessor));
    if (accessorImpl.searchActivity_Accessor) {
      setSearchActivity(*(accessorImpl.searchActivity_Accessor));
    } else {
      searchActivity_Accessor.reset();
    }
    if (accessorImpl.trackActivity_Accessor) {
      setTrackActivity(*(accessorImpl.trackActivity_Accessor));
    } else {
      trackActivity_Accessor.reset();
    }
    if (accessorImpl.fOR_State_Accessor) {
      setFOR_State(*(accessorImpl.fOR_State_Accessor));
    } else {
      fOR_State_Accessor.reset();
    }
    if (accessorImpl.thermalBlankingFOR_State_Accessor) {
      setThermalBlankingFOR_State(*(accessorImpl.thermalBlankingFOR_State_Accessor));
    } else {
      thermalBlankingFOR_State_Accessor.reset();
    }
    if (accessorImpl.repetition_Accessor) {
      setRepetition(*(accessorImpl.repetition_Accessor));
    } else {
      repetition_Accessor.reset();
    }
  }
}

void PO_ActivityType::reset() noexcept {
  ActivityBaseType::reset();
  clearActualStartTime();
  clearActualCompletionTime();
  clearAllProductsAndMessagesProduced();
  fOV_Accessor.reset();
  pointingActivityReport_Accessor.reset();
  subCapabilityStatus_Accessor->reset();
  componentStatus_Accessor->reset();
  collectionConstraintsStatus_Accessor.reset();
  trackOptionsStatus_Accessor.reset();
  productOutputStatus_Accessor->reset();
  searchActivity_Accessor.reset();
  trackActivity_Accessor.reset();
  fOR_State_Accessor.reset();
  thermalBlankingFOR_State_Accessor.reset();
  repetition_Accessor.reset();
}

uci::type::DateTimeTypeValue PO_ActivityType::getActualStartTime() const {
  if (actualStartTime_Accessor) {
    return *actualStartTime_Accessor;
  }
  throw uci::base::UCIException("Error in getActualStartTime(): An attempt was made to get an optional field that was not enabled, call hasActualStartTime() to determine if it is safe to call getActualStartTime()");
}

uci::type::PO_ActivityType& PO_ActivityType::setActualStartTime(uci::type::DateTimeTypeValue value) {
  actualStartTime_Accessor = value;
  return *this;
}

bool PO_ActivityType::hasActualStartTime() const noexcept {
  return actualStartTime_Accessor.has_value();
}

uci::type::PO_ActivityType& PO_ActivityType::clearActualStartTime() noexcept {
  actualStartTime_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue PO_ActivityType::getActualCompletionTime() const {
  if (actualCompletionTime_Accessor) {
    return *actualCompletionTime_Accessor;
  }
  throw uci::base::UCIException("Error in getActualCompletionTime(): An attempt was made to get an optional field that was not enabled, call hasActualCompletionTime() to determine if it is safe to call getActualCompletionTime()");
}

uci::type::PO_ActivityType& PO_ActivityType::setActualCompletionTime(uci::type::DateTimeTypeValue value) {
  actualCompletionTime_Accessor = value;
  return *this;
}

bool PO_ActivityType::hasActualCompletionTime() const noexcept {
  return actualCompletionTime_Accessor.has_value();
}

uci::type::PO_ActivityType& PO_ActivityType::clearActualCompletionTime() noexcept {
  actualCompletionTime_Accessor.reset();
  return *this;
}

xs::Boolean PO_ActivityType::getAllProductsAndMessagesProduced() const {
  if (allProductsAndMessagesProduced_Accessor) {
    return *allProductsAndMessagesProduced_Accessor;
  }
  throw uci::base::UCIException("Error in getAllProductsAndMessagesProduced(): An attempt was made to get an optional field that was not enabled, call hasAllProductsAndMessagesProduced() to determine if it is safe to call getAllProductsAndMessagesProduced()");
}

uci::type::PO_ActivityType& PO_ActivityType::setAllProductsAndMessagesProduced(xs::Boolean value) {
  allProductsAndMessagesProduced_Accessor = value;
  return *this;
}

bool PO_ActivityType::hasAllProductsAndMessagesProduced() const noexcept {
  return allProductsAndMessagesProduced_Accessor.has_value();
}

uci::type::PO_ActivityType& PO_ActivityType::clearAllProductsAndMessagesProduced() noexcept {
  allProductsAndMessagesProduced_Accessor.reset();
  return *this;
}

uci::type::FOV_ActivityType& PO_ActivityType::getFOV_() const {
  if (fOV_Accessor) {
    return *fOV_Accessor;
  }
  throw uci::base::UCIException("Error in getFOV(): An attempt was made to get an optional field that was not enabled, call hasFOV() to determine if it is safe to call getFOV()");
}

const uci::type::FOV_ActivityType& PO_ActivityType::getFOV() const {
  return getFOV_();
}

uci::type::FOV_ActivityType& PO_ActivityType::getFOV() {
  return getFOV_();
}

uci::type::PO_ActivityType& PO_ActivityType::setFOV(const uci::type::FOV_ActivityType& accessor) {
  enableFOV();
  if (&accessor != fOV_Accessor.get()) {
    fOV_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ActivityType::hasFOV() const noexcept {
  return static_cast<bool>(fOV_Accessor);
}

uci::type::FOV_ActivityType& PO_ActivityType::enableFOV(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fOV_ActivityType : type};
  if ((!fOV_Accessor) || (fOV_Accessor->getAccessorType() != requestedType)) {
    fOV_Accessor = FOV_ActivityType::create(requestedType);
    if (!fOV_Accessor) {
      throw uci::base::UCIException("Error in enableFOV(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fOV_Accessor;
}

uci::type::PO_ActivityType& PO_ActivityType::clearFOV() noexcept {
  fOV_Accessor.reset();
  return *this;
}

uci::type::PO_TargetType& PO_ActivityType::getPointingActivityReport_() const {
  if (pointingActivityReport_Accessor) {
    return *pointingActivityReport_Accessor;
  }
  throw uci::base::UCIException("Error in getPointingActivityReport(): An attempt was made to get an optional field that was not enabled, call hasPointingActivityReport() to determine if it is safe to call getPointingActivityReport()");
}

const uci::type::PO_TargetType& PO_ActivityType::getPointingActivityReport() const {
  return getPointingActivityReport_();
}

uci::type::PO_TargetType& PO_ActivityType::getPointingActivityReport() {
  return getPointingActivityReport_();
}

uci::type::PO_ActivityType& PO_ActivityType::setPointingActivityReport(const uci::type::PO_TargetType& accessor) {
  enablePointingActivityReport();
  if (&accessor != pointingActivityReport_Accessor.get()) {
    pointingActivityReport_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ActivityType::hasPointingActivityReport() const noexcept {
  return static_cast<bool>(pointingActivityReport_Accessor);
}

uci::type::PO_TargetType& PO_ActivityType::enablePointingActivityReport(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_TargetType : type};
  if ((!pointingActivityReport_Accessor) || (pointingActivityReport_Accessor->getAccessorType() != requestedType)) {
    pointingActivityReport_Accessor = PO_TargetType::create(requestedType);
    if (!pointingActivityReport_Accessor) {
      throw uci::base::UCIException("Error in enablePointingActivityReport(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pointingActivityReport_Accessor;
}

uci::type::PO_ActivityType& PO_ActivityType::clearPointingActivityReport() noexcept {
  pointingActivityReport_Accessor.reset();
  return *this;
}

const uci::type::PO_ActivityType::SubCapabilityStatus& PO_ActivityType::getSubCapabilityStatus() const {
  return *subCapabilityStatus_Accessor;
}

uci::type::PO_ActivityType::SubCapabilityStatus& PO_ActivityType::getSubCapabilityStatus() {
  return *subCapabilityStatus_Accessor;
}

uci::type::PO_ActivityType& PO_ActivityType::setSubCapabilityStatus(const uci::type::PO_ActivityType::SubCapabilityStatus& accessor) {
  if (&accessor != subCapabilityStatus_Accessor.get()) {
    subCapabilityStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ActivityType::ComponentStatus& PO_ActivityType::getComponentStatus() const {
  return *componentStatus_Accessor;
}

uci::type::PO_ActivityType::ComponentStatus& PO_ActivityType::getComponentStatus() {
  return *componentStatus_Accessor;
}

uci::type::PO_ActivityType& PO_ActivityType::setComponentStatus(const uci::type::PO_ActivityType::ComponentStatus& accessor) {
  if (&accessor != componentStatus_Accessor.get()) {
    componentStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_CollectionConstraintsStatusType& PO_ActivityType::getCollectionConstraintsStatus_() const {
  if (collectionConstraintsStatus_Accessor) {
    return *collectionConstraintsStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionConstraintsStatus(): An attempt was made to get an optional field that was not enabled, call hasCollectionConstraintsStatus() to determine if it is safe to call getCollectionConstraintsStatus()");
}

const uci::type::PO_CollectionConstraintsStatusType& PO_ActivityType::getCollectionConstraintsStatus() const {
  return getCollectionConstraintsStatus_();
}

uci::type::PO_CollectionConstraintsStatusType& PO_ActivityType::getCollectionConstraintsStatus() {
  return getCollectionConstraintsStatus_();
}

uci::type::PO_ActivityType& PO_ActivityType::setCollectionConstraintsStatus(const uci::type::PO_CollectionConstraintsStatusType& accessor) {
  enableCollectionConstraintsStatus();
  if (&accessor != collectionConstraintsStatus_Accessor.get()) {
    collectionConstraintsStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ActivityType::hasCollectionConstraintsStatus() const noexcept {
  return static_cast<bool>(collectionConstraintsStatus_Accessor);
}

uci::type::PO_CollectionConstraintsStatusType& PO_ActivityType::enableCollectionConstraintsStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_CollectionConstraintsStatusType : type};
  if ((!collectionConstraintsStatus_Accessor) || (collectionConstraintsStatus_Accessor->getAccessorType() != requestedType)) {
    collectionConstraintsStatus_Accessor = PO_CollectionConstraintsStatusType::create(requestedType);
    if (!collectionConstraintsStatus_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionConstraintsStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionConstraintsStatus_Accessor;
}

uci::type::PO_ActivityType& PO_ActivityType::clearCollectionConstraintsStatus() noexcept {
  collectionConstraintsStatus_Accessor.reset();
  return *this;
}

uci::type::PO_TrackDetailsType& PO_ActivityType::getTrackOptionsStatus_() const {
  if (trackOptionsStatus_Accessor) {
    return *trackOptionsStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getTrackOptionsStatus(): An attempt was made to get an optional field that was not enabled, call hasTrackOptionsStatus() to determine if it is safe to call getTrackOptionsStatus()");
}

const uci::type::PO_TrackDetailsType& PO_ActivityType::getTrackOptionsStatus() const {
  return getTrackOptionsStatus_();
}

uci::type::PO_TrackDetailsType& PO_ActivityType::getTrackOptionsStatus() {
  return getTrackOptionsStatus_();
}

uci::type::PO_ActivityType& PO_ActivityType::setTrackOptionsStatus(const uci::type::PO_TrackDetailsType& accessor) {
  enableTrackOptionsStatus();
  if (&accessor != trackOptionsStatus_Accessor.get()) {
    trackOptionsStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ActivityType::hasTrackOptionsStatus() const noexcept {
  return static_cast<bool>(trackOptionsStatus_Accessor);
}

uci::type::PO_TrackDetailsType& PO_ActivityType::enableTrackOptionsStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_TrackDetailsType : type};
  if ((!trackOptionsStatus_Accessor) || (trackOptionsStatus_Accessor->getAccessorType() != requestedType)) {
    trackOptionsStatus_Accessor = PO_TrackDetailsType::create(requestedType);
    if (!trackOptionsStatus_Accessor) {
      throw uci::base::UCIException("Error in enableTrackOptionsStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *trackOptionsStatus_Accessor;
}

uci::type::PO_ActivityType& PO_ActivityType::clearTrackOptionsStatus() noexcept {
  trackOptionsStatus_Accessor.reset();
  return *this;
}

const uci::type::PO_ActivityType::ProductOutputStatus& PO_ActivityType::getProductOutputStatus() const {
  return *productOutputStatus_Accessor;
}

uci::type::PO_ActivityType::ProductOutputStatus& PO_ActivityType::getProductOutputStatus() {
  return *productOutputStatus_Accessor;
}

uci::type::PO_ActivityType& PO_ActivityType::setProductOutputStatus(const uci::type::PO_ActivityType::ProductOutputStatus& accessor) {
  if (&accessor != productOutputStatus_Accessor.get()) {
    productOutputStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SearchTrackActivityDetailsType& PO_ActivityType::getSearchActivity_() const {
  if (searchActivity_Accessor) {
    return *searchActivity_Accessor;
  }
  throw uci::base::UCIException("Error in getSearchActivity(): An attempt was made to get an optional field that was not enabled, call hasSearchActivity() to determine if it is safe to call getSearchActivity()");
}

const uci::type::SearchTrackActivityDetailsType& PO_ActivityType::getSearchActivity() const {
  return getSearchActivity_();
}

uci::type::SearchTrackActivityDetailsType& PO_ActivityType::getSearchActivity() {
  return getSearchActivity_();
}

uci::type::PO_ActivityType& PO_ActivityType::setSearchActivity(const uci::type::SearchTrackActivityDetailsType& accessor) {
  enableSearchActivity();
  if (&accessor != searchActivity_Accessor.get()) {
    searchActivity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ActivityType::hasSearchActivity() const noexcept {
  return static_cast<bool>(searchActivity_Accessor);
}

uci::type::SearchTrackActivityDetailsType& PO_ActivityType::enableSearchActivity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::searchTrackActivityDetailsType : type};
  if ((!searchActivity_Accessor) || (searchActivity_Accessor->getAccessorType() != requestedType)) {
    searchActivity_Accessor = SearchTrackActivityDetailsType::create(requestedType);
    if (!searchActivity_Accessor) {
      throw uci::base::UCIException("Error in enableSearchActivity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *searchActivity_Accessor;
}

uci::type::PO_ActivityType& PO_ActivityType::clearSearchActivity() noexcept {
  searchActivity_Accessor.reset();
  return *this;
}

uci::type::PO_TrackActivityType& PO_ActivityType::getTrackActivity_() const {
  if (trackActivity_Accessor) {
    return *trackActivity_Accessor;
  }
  throw uci::base::UCIException("Error in getTrackActivity(): An attempt was made to get an optional field that was not enabled, call hasTrackActivity() to determine if it is safe to call getTrackActivity()");
}

const uci::type::PO_TrackActivityType& PO_ActivityType::getTrackActivity() const {
  return getTrackActivity_();
}

uci::type::PO_TrackActivityType& PO_ActivityType::getTrackActivity() {
  return getTrackActivity_();
}

uci::type::PO_ActivityType& PO_ActivityType::setTrackActivity(const uci::type::PO_TrackActivityType& accessor) {
  enableTrackActivity();
  if (&accessor != trackActivity_Accessor.get()) {
    trackActivity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ActivityType::hasTrackActivity() const noexcept {
  return static_cast<bool>(trackActivity_Accessor);
}

uci::type::PO_TrackActivityType& PO_ActivityType::enableTrackActivity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_TrackActivityType : type};
  if ((!trackActivity_Accessor) || (trackActivity_Accessor->getAccessorType() != requestedType)) {
    trackActivity_Accessor = PO_TrackActivityType::create(requestedType);
    if (!trackActivity_Accessor) {
      throw uci::base::UCIException("Error in enableTrackActivity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *trackActivity_Accessor;
}

uci::type::PO_ActivityType& PO_ActivityType::clearTrackActivity() noexcept {
  trackActivity_Accessor.reset();
  return *this;
}

uci::type::FOR_Enum& PO_ActivityType::getFOR_State_() const {
  if (fOR_State_Accessor) {
    return *fOR_State_Accessor;
  }
  throw uci::base::UCIException("Error in getFOR_State(): An attempt was made to get an optional field that was not enabled, call hasFOR_State() to determine if it is safe to call getFOR_State()");
}

const uci::type::FOR_Enum& PO_ActivityType::getFOR_State() const {
  return getFOR_State_();
}

uci::type::FOR_Enum& PO_ActivityType::getFOR_State() {
  return getFOR_State_();
}

uci::type::PO_ActivityType& PO_ActivityType::setFOR_State(const uci::type::FOR_Enum& accessor) {
  enableFOR_State();
  if (&accessor != fOR_State_Accessor.get()) {
    fOR_State_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_ActivityType& PO_ActivityType::setFOR_State(const uci::type::FOR_Enum::EnumerationItem value) {
  enableFOR_State().setValue(value);
  return *this;
}

bool PO_ActivityType::hasFOR_State() const noexcept {
  return static_cast<bool>(fOR_State_Accessor);
}

uci::type::FOR_Enum& PO_ActivityType::enableFOR_State(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fOR_Enum : type};
  if ((!fOR_State_Accessor) || (fOR_State_Accessor->getAccessorType() != requestedType)) {
    fOR_State_Accessor = FOR_Enum::create(requestedType);
    if (!fOR_State_Accessor) {
      throw uci::base::UCIException("Error in enableFOR_State(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fOR_State_Accessor;
}

uci::type::PO_ActivityType& PO_ActivityType::clearFOR_State() noexcept {
  fOR_State_Accessor.reset();
  return *this;
}

uci::type::FOR_Enum& PO_ActivityType::getThermalBlankingFOR_State_() const {
  if (thermalBlankingFOR_State_Accessor) {
    return *thermalBlankingFOR_State_Accessor;
  }
  throw uci::base::UCIException("Error in getThermalBlankingFOR_State(): An attempt was made to get an optional field that was not enabled, call hasThermalBlankingFOR_State() to determine if it is safe to call getThermalBlankingFOR_State()");
}

const uci::type::FOR_Enum& PO_ActivityType::getThermalBlankingFOR_State() const {
  return getThermalBlankingFOR_State_();
}

uci::type::FOR_Enum& PO_ActivityType::getThermalBlankingFOR_State() {
  return getThermalBlankingFOR_State_();
}

uci::type::PO_ActivityType& PO_ActivityType::setThermalBlankingFOR_State(const uci::type::FOR_Enum& accessor) {
  enableThermalBlankingFOR_State();
  if (&accessor != thermalBlankingFOR_State_Accessor.get()) {
    thermalBlankingFOR_State_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_ActivityType& PO_ActivityType::setThermalBlankingFOR_State(const uci::type::FOR_Enum::EnumerationItem value) {
  enableThermalBlankingFOR_State().setValue(value);
  return *this;
}

bool PO_ActivityType::hasThermalBlankingFOR_State() const noexcept {
  return static_cast<bool>(thermalBlankingFOR_State_Accessor);
}

uci::type::FOR_Enum& PO_ActivityType::enableThermalBlankingFOR_State(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fOR_Enum : type};
  if ((!thermalBlankingFOR_State_Accessor) || (thermalBlankingFOR_State_Accessor->getAccessorType() != requestedType)) {
    thermalBlankingFOR_State_Accessor = FOR_Enum::create(requestedType);
    if (!thermalBlankingFOR_State_Accessor) {
      throw uci::base::UCIException("Error in enableThermalBlankingFOR_State(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *thermalBlankingFOR_State_Accessor;
}

uci::type::PO_ActivityType& PO_ActivityType::clearThermalBlankingFOR_State() noexcept {
  thermalBlankingFOR_State_Accessor.reset();
  return *this;
}

uci::type::RepetitionType& PO_ActivityType::getRepetition_() const {
  if (repetition_Accessor) {
    return *repetition_Accessor;
  }
  throw uci::base::UCIException("Error in getRepetition(): An attempt was made to get an optional field that was not enabled, call hasRepetition() to determine if it is safe to call getRepetition()");
}

const uci::type::RepetitionType& PO_ActivityType::getRepetition() const {
  return getRepetition_();
}

uci::type::RepetitionType& PO_ActivityType::getRepetition() {
  return getRepetition_();
}

uci::type::PO_ActivityType& PO_ActivityType::setRepetition(const uci::type::RepetitionType& accessor) {
  enableRepetition();
  if (&accessor != repetition_Accessor.get()) {
    repetition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ActivityType::hasRepetition() const noexcept {
  return static_cast<bool>(repetition_Accessor);
}

uci::type::RepetitionType& PO_ActivityType::enableRepetition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionType : type};
  if ((!repetition_Accessor) || (repetition_Accessor->getAccessorType() != requestedType)) {
    repetition_Accessor = RepetitionType::create(requestedType);
    if (!repetition_Accessor) {
      throw uci::base::UCIException("Error in enableRepetition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *repetition_Accessor;
}

uci::type::PO_ActivityType& PO_ActivityType::clearRepetition() noexcept {
  repetition_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ActivityType> PO_ActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ActivityType : type};
  return (requestedType == uci::type::accessorType::pO_ActivityType) ? boost::make_unique<PO_ActivityType>() : nullptr;
}

/**  */
namespace PO_ActivityType_Names {

constexpr const char* Extern_Type_Name{"PO_ActivityType"};
constexpr const char* ActualStartTime_Name{"ActualStartTime"};
constexpr const char* ActualCompletionTime_Name{"ActualCompletionTime"};
constexpr const char* AllProductsAndMessagesProduced_Name{"AllProductsAndMessagesProduced"};
constexpr const char* FOV_Name{"FOV"};
constexpr const char* PointingActivityReport_Name{"PointingActivityReport"};
constexpr const char* SubCapabilityStatus_Name{"SubCapabilityStatus"};
constexpr const char* ComponentStatus_Name{"ComponentStatus"};
constexpr const char* CollectionConstraintsStatus_Name{"CollectionConstraintsStatus"};
constexpr const char* TrackOptionsStatus_Name{"TrackOptionsStatus"};
constexpr const char* ProductOutputStatus_Name{"ProductOutputStatus"};
constexpr const char* SearchActivity_Name{"SearchActivity"};
constexpr const char* TrackActivity_Name{"TrackActivity"};
constexpr const char* FOR_State_Name{"FOR_State"};
constexpr const char* ThermalBlankingFOR_State_Name{"ThermalBlankingFOR_State"};
constexpr const char* Repetition_Name{"Repetition"};

} // namespace PO_ActivityType_Names

void PO_ActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::ActualStartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStartTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::ActualCompletionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualCompletionTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::AllProductsAndMessagesProduced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAllProductsAndMessagesProduced(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::FOV_Name) {
      FOV_ActivityType::deserialize(valueType.second, accessor.enableFOV(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::PointingActivityReport_Name) {
      PO_TargetType::deserialize(valueType.second, accessor.enablePointingActivityReport(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::SubCapabilityStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ActivityType::SubCapabilityStatus& boundedList = accessor.getSubCapabilityStatus();
        const uci::type::PO_ActivityType::SubCapabilityStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_SubCapabilitySettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::ComponentStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ActivityType::ComponentStatus& boundedList = accessor.getComponentStatus();
        const uci::type::PO_ActivityType::ComponentStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ComponentStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::CollectionConstraintsStatus_Name) {
      PO_CollectionConstraintsStatusType::deserialize(valueType.second, accessor.enableCollectionConstraintsStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::TrackOptionsStatus_Name) {
      PO_TrackDetailsType::deserialize(valueType.second, accessor.enableTrackOptionsStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::ProductOutputStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ActivityType::ProductOutputStatus& boundedList = accessor.getProductOutputStatus();
        const uci::type::PO_ActivityType::ProductOutputStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::SearchActivity_Name) {
      SearchTrackActivityDetailsType::deserialize(valueType.second, accessor.enableSearchActivity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::TrackActivity_Name) {
      PO_TrackActivityType::deserialize(valueType.second, accessor.enableTrackActivity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::FOR_State_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFOR_State().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::ThermalBlankingFOR_State_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableThermalBlankingFOR_State().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::Repetition_Name) {
      RepetitionType::deserialize(valueType.second, accessor.enableRepetition(), nodeName, nsPrefix);
    }
  }
  ActivityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string PO_ActivityType::serialize(const uci::type::PO_ActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ActivityType_Names::Extern_Type_Name);
  }
  ActivityBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasActualStartTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStartTime(), node, PO_ActivityType_Names::ActualStartTime_Name);
  }
  if (accessor.hasActualCompletionTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualCompletionTime(), node, PO_ActivityType_Names::ActualCompletionTime_Name);
  }
  if (accessor.hasAllProductsAndMessagesProduced()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAllProductsAndMessagesProduced(), node, PO_ActivityType_Names::AllProductsAndMessagesProduced_Name);
  }
  if (accessor.hasFOV()) {
    FOV_ActivityType::serialize(accessor.getFOV(), node, PO_ActivityType_Names::FOV_Name);
  }
  if (accessor.hasPointingActivityReport()) {
    PO_TargetType::serialize(accessor.getPointingActivityReport(), node, PO_ActivityType_Names::PointingActivityReport_Name);
  }
  {
    const uci::type::PO_ActivityType::SubCapabilityStatus& boundedList = accessor.getSubCapabilityStatus();
    for (uci::type::PO_ActivityType::SubCapabilityStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_SubCapabilitySettingsType::serialize(boundedList.at(i), node, PO_ActivityType_Names::SubCapabilityStatus_Name);
    }
  }
  {
    const uci::type::PO_ActivityType::ComponentStatus& boundedList = accessor.getComponentStatus();
    for (uci::type::PO_ActivityType::ComponentStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ComponentStatusType::serialize(boundedList.at(i), node, PO_ActivityType_Names::ComponentStatus_Name);
    }
  }
  if (accessor.hasCollectionConstraintsStatus()) {
    PO_CollectionConstraintsStatusType::serialize(accessor.getCollectionConstraintsStatus(), node, PO_ActivityType_Names::CollectionConstraintsStatus_Name);
  }
  if (accessor.hasTrackOptionsStatus()) {
    PO_TrackDetailsType::serialize(accessor.getTrackOptionsStatus(), node, PO_ActivityType_Names::TrackOptionsStatus_Name);
  }
  {
    const uci::type::PO_ActivityType::ProductOutputStatus& boundedList = accessor.getProductOutputStatus();
    for (uci::type::PO_ActivityType::ProductOutputStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductOutputCapabilityStatusImageryType::serialize(boundedList.at(i), node, PO_ActivityType_Names::ProductOutputStatus_Name);
    }
  }
  if (accessor.hasSearchActivity()) {
    SearchTrackActivityDetailsType::serialize(accessor.getSearchActivity(), node, PO_ActivityType_Names::SearchActivity_Name);
  }
  if (accessor.hasTrackActivity()) {
    PO_TrackActivityType::serialize(accessor.getTrackActivity(), node, PO_ActivityType_Names::TrackActivity_Name);
  }
  if (accessor.hasFOR_State()) {
    FOR_Enum::serialize(accessor.getFOR_State(), node, PO_ActivityType_Names::FOR_State_Name, false);
  }
  if (accessor.hasThermalBlankingFOR_State()) {
    FOR_Enum::serialize(accessor.getThermalBlankingFOR_State(), node, PO_ActivityType_Names::ThermalBlankingFOR_State_Name, false);
  }
  if (accessor.hasRepetition()) {
    RepetitionType::serialize(accessor.getRepetition(), node, PO_ActivityType_Names::Repetition_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ActivityType& PO_ActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ActivityType>().release());
}

uci::type::PO_ActivityType& PO_ActivityType::create(const uci::type::PO_ActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ActivityType> newAccessor{boost::make_unique<asb_uci::type::PO_ActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ActivityType::destroy(uci::type::PO_ActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

