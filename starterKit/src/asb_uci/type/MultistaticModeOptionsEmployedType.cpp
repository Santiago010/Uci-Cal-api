/** @file MultistaticModeOptionsEmployedType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MultistaticModeOptionsEmployedType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/MultistaticEmitterDataID_Type.h"
#include "asb_uci/type/MultistaticModeStatusEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/MultistaticEmitterDataID_Type.h"
#include "uci/type/MultistaticModeOptionsEmployedType.h"
#include "uci/type/MultistaticModeStatusEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MultistaticModeOptionsEmployedType::MultistaticModeOptionsEmployedType()
  : multistaticModeStatus_Accessor{boost::make_unique<MultistaticModeStatusEnum>()} {
}

MultistaticModeOptionsEmployedType::~MultistaticModeOptionsEmployedType() = default;

void MultistaticModeOptionsEmployedType::copy(const uci::type::MultistaticModeOptionsEmployedType& accessor) {
  copyImpl(accessor, false);
}

void MultistaticModeOptionsEmployedType::copyImpl(const uci::type::MultistaticModeOptionsEmployedType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MultistaticModeOptionsEmployedType&>(accessor);
    setMultistaticModeStatus(*(accessorImpl.multistaticModeStatus_Accessor));
    if (accessorImpl.multistaticEmitterDataID_Accessor) {
      setMultistaticEmitterDataID(*(accessorImpl.multistaticEmitterDataID_Accessor));
    } else {
      multistaticEmitterDataID_Accessor.reset();
    }
  }
}

void MultistaticModeOptionsEmployedType::reset() noexcept {
  multistaticModeStatus_Accessor->reset();
  multistaticEmitterDataID_Accessor.reset();
}

const uci::type::MultistaticModeStatusEnum& MultistaticModeOptionsEmployedType::getMultistaticModeStatus() const {
  return *multistaticModeStatus_Accessor;
}

uci::type::MultistaticModeStatusEnum& MultistaticModeOptionsEmployedType::getMultistaticModeStatus() {
  return *multistaticModeStatus_Accessor;
}

uci::type::MultistaticModeOptionsEmployedType& MultistaticModeOptionsEmployedType::setMultistaticModeStatus(const uci::type::MultistaticModeStatusEnum& accessor) {
  if (&accessor != multistaticModeStatus_Accessor.get()) {
    multistaticModeStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MultistaticModeOptionsEmployedType& MultistaticModeOptionsEmployedType::setMultistaticModeStatus(uci::type::MultistaticModeStatusEnum::EnumerationItem value) {
  multistaticModeStatus_Accessor->setValue(value);
  return *this;
}


uci::type::MultistaticEmitterDataID_Type& MultistaticModeOptionsEmployedType::getMultistaticEmitterDataID_() const {
  if (multistaticEmitterDataID_Accessor) {
    return *multistaticEmitterDataID_Accessor;
  }
  throw uci::base::UCIException("Error in getMultistaticEmitterDataID(): An attempt was made to get an optional field that was not enabled, call hasMultistaticEmitterDataID() to determine if it is safe to call getMultistaticEmitterDataID()");
}

const uci::type::MultistaticEmitterDataID_Type& MultistaticModeOptionsEmployedType::getMultistaticEmitterDataID() const {
  return getMultistaticEmitterDataID_();
}

uci::type::MultistaticEmitterDataID_Type& MultistaticModeOptionsEmployedType::getMultistaticEmitterDataID() {
  return getMultistaticEmitterDataID_();
}

uci::type::MultistaticModeOptionsEmployedType& MultistaticModeOptionsEmployedType::setMultistaticEmitterDataID(const uci::type::MultistaticEmitterDataID_Type& accessor) {
  enableMultistaticEmitterDataID();
  if (&accessor != multistaticEmitterDataID_Accessor.get()) {
    multistaticEmitterDataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MultistaticModeOptionsEmployedType::hasMultistaticEmitterDataID() const noexcept {
  return static_cast<bool>(multistaticEmitterDataID_Accessor);
}

uci::type::MultistaticEmitterDataID_Type& MultistaticModeOptionsEmployedType::enableMultistaticEmitterDataID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::multistaticEmitterDataID_Type : type};
  if ((!multistaticEmitterDataID_Accessor) || (multistaticEmitterDataID_Accessor->getAccessorType() != requestedType)) {
    multistaticEmitterDataID_Accessor = MultistaticEmitterDataID_Type::create(requestedType);
    if (!multistaticEmitterDataID_Accessor) {
      throw uci::base::UCIException("Error in enableMultistaticEmitterDataID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *multistaticEmitterDataID_Accessor;
}

uci::type::MultistaticModeOptionsEmployedType& MultistaticModeOptionsEmployedType::clearMultistaticEmitterDataID() noexcept {
  multistaticEmitterDataID_Accessor.reset();
  return *this;
}

std::unique_ptr<MultistaticModeOptionsEmployedType> MultistaticModeOptionsEmployedType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::multistaticModeOptionsEmployedType : type};
  return (requestedType == uci::type::accessorType::multistaticModeOptionsEmployedType) ? boost::make_unique<MultistaticModeOptionsEmployedType>() : nullptr;
}

/**  */
namespace MultistaticModeOptionsEmployedType_Names {

constexpr const char* Extern_Type_Name{"MultistaticModeOptionsEmployedType"};
constexpr const char* MultistaticModeStatus_Name{"MultistaticModeStatus"};
constexpr const char* MultistaticEmitterDataID_Name{"MultistaticEmitterDataID"};

} // namespace MultistaticModeOptionsEmployedType_Names

void MultistaticModeOptionsEmployedType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MultistaticModeOptionsEmployedType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MultistaticModeOptionsEmployedType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MultistaticModeOptionsEmployedType_Names::MultistaticModeStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getMultistaticModeStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MultistaticModeOptionsEmployedType_Names::MultistaticEmitterDataID_Name) {
      MultistaticEmitterDataID_Type::deserialize(valueType.second, accessor.enableMultistaticEmitterDataID(), nodeName, nsPrefix);
    }
  }
}

std::string MultistaticModeOptionsEmployedType::serialize(const uci::type::MultistaticModeOptionsEmployedType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MultistaticModeOptionsEmployedType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MultistaticModeOptionsEmployedType_Names::Extern_Type_Name);
  }
  MultistaticModeStatusEnum::serialize(accessor.getMultistaticModeStatus(), node, MultistaticModeOptionsEmployedType_Names::MultistaticModeStatus_Name, false);
  if (accessor.hasMultistaticEmitterDataID()) {
    MultistaticEmitterDataID_Type::serialize(accessor.getMultistaticEmitterDataID(), node, MultistaticModeOptionsEmployedType_Names::MultistaticEmitterDataID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MultistaticModeOptionsEmployedType& MultistaticModeOptionsEmployedType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MultistaticModeOptionsEmployedType>().release());
}

uci::type::MultistaticModeOptionsEmployedType& MultistaticModeOptionsEmployedType::create(const uci::type::MultistaticModeOptionsEmployedType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MultistaticModeOptionsEmployedType> newAccessor{boost::make_unique<asb_uci::type::MultistaticModeOptionsEmployedType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MultistaticModeOptionsEmployedType::destroy(uci::type::MultistaticModeOptionsEmployedType& accessor) {
  delete dynamic_cast<asb_uci::type::MultistaticModeOptionsEmployedType*>(&accessor);
}

} // namespace type

} // namespace uci

