/** @file ServiceRegistrationRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ServiceRegistrationRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/RequestBaseType.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/ServiceRegistrationPurposeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/ServiceRegistrationPurposeType.h"
#include "uci/type/ServiceRegistrationRequestMDT.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ServiceRegistrationRequestMDT::ServiceRegistrationRequestMDT()
  : serviceID_Accessor{boost::make_unique<ServiceID_Type>()} {
}

ServiceRegistrationRequestMDT::~ServiceRegistrationRequestMDT() = default;

void ServiceRegistrationRequestMDT::copy(const uci::type::ServiceRegistrationRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void ServiceRegistrationRequestMDT::copyImpl(const uci::type::ServiceRegistrationRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ServiceRegistrationRequestMDT&>(accessor);
    setServiceID(*(accessorImpl.serviceID_Accessor));
    if (accessorImpl.hasUnregisterFlag()) {
      setUnregisterFlag(accessorImpl.getUnregisterFlag());
    } else {
      clearUnregisterFlag();
    }
    if (accessorImpl.purpose_Accessor) {
      setPurpose(*(accessorImpl.purpose_Accessor));
    } else {
      purpose_Accessor.reset();
    }
  }
}

void ServiceRegistrationRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  serviceID_Accessor->reset();
  clearUnregisterFlag();
  purpose_Accessor.reset();
}

const uci::type::ServiceID_Type& ServiceRegistrationRequestMDT::getServiceID() const {
  return *serviceID_Accessor;
}

uci::type::ServiceID_Type& ServiceRegistrationRequestMDT::getServiceID() {
  return *serviceID_Accessor;
}

uci::type::ServiceRegistrationRequestMDT& ServiceRegistrationRequestMDT::setServiceID(const uci::type::ServiceID_Type& accessor) {
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean ServiceRegistrationRequestMDT::getUnregisterFlag() const {
  if (unregisterFlag_Accessor) {
    return *unregisterFlag_Accessor;
  }
  throw uci::base::UCIException("Error in getUnregisterFlag(): An attempt was made to get an optional field that was not enabled, call hasUnregisterFlag() to determine if it is safe to call getUnregisterFlag()");
}

uci::type::ServiceRegistrationRequestMDT& ServiceRegistrationRequestMDT::setUnregisterFlag(xs::Boolean value) {
  unregisterFlag_Accessor = value;
  return *this;
}

bool ServiceRegistrationRequestMDT::hasUnregisterFlag() const noexcept {
  return unregisterFlag_Accessor.has_value();
}

uci::type::ServiceRegistrationRequestMDT& ServiceRegistrationRequestMDT::clearUnregisterFlag() noexcept {
  unregisterFlag_Accessor.reset();
  return *this;
}

uci::type::ServiceRegistrationPurposeType& ServiceRegistrationRequestMDT::getPurpose_() const {
  if (purpose_Accessor) {
    return *purpose_Accessor;
  }
  throw uci::base::UCIException("Error in getPurpose(): An attempt was made to get an optional field that was not enabled, call hasPurpose() to determine if it is safe to call getPurpose()");
}

const uci::type::ServiceRegistrationPurposeType& ServiceRegistrationRequestMDT::getPurpose() const {
  return getPurpose_();
}

uci::type::ServiceRegistrationPurposeType& ServiceRegistrationRequestMDT::getPurpose() {
  return getPurpose_();
}

uci::type::ServiceRegistrationRequestMDT& ServiceRegistrationRequestMDT::setPurpose(const uci::type::ServiceRegistrationPurposeType& accessor) {
  enablePurpose();
  if (&accessor != purpose_Accessor.get()) {
    purpose_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ServiceRegistrationRequestMDT::hasPurpose() const noexcept {
  return static_cast<bool>(purpose_Accessor);
}

uci::type::ServiceRegistrationPurposeType& ServiceRegistrationRequestMDT::enablePurpose(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceRegistrationPurposeType : type};
  if ((!purpose_Accessor) || (purpose_Accessor->getAccessorType() != requestedType)) {
    purpose_Accessor = ServiceRegistrationPurposeType::create(requestedType);
    if (!purpose_Accessor) {
      throw uci::base::UCIException("Error in enablePurpose(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *purpose_Accessor;
}

uci::type::ServiceRegistrationRequestMDT& ServiceRegistrationRequestMDT::clearPurpose() noexcept {
  purpose_Accessor.reset();
  return *this;
}

std::unique_ptr<ServiceRegistrationRequestMDT> ServiceRegistrationRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceRegistrationRequestMDT : type};
  return (requestedType == uci::type::accessorType::serviceRegistrationRequestMDT) ? boost::make_unique<ServiceRegistrationRequestMDT>() : nullptr;
}

/**  */
namespace ServiceRegistrationRequestMDT_Names {

constexpr const char* Extern_Type_Name{"ServiceRegistrationRequestMDT"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* UnregisterFlag_Name{"UnregisterFlag"};
constexpr const char* Purpose_Name{"Purpose"};

} // namespace ServiceRegistrationRequestMDT_Names

void ServiceRegistrationRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ServiceRegistrationRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ServiceRegistrationRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ServiceRegistrationRequestMDT_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.getServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ServiceRegistrationRequestMDT_Names::UnregisterFlag_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnregisterFlag(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ServiceRegistrationRequestMDT_Names::Purpose_Name) {
      ServiceRegistrationPurposeType::deserialize(valueType.second, accessor.enablePurpose(), nodeName, nsPrefix);
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ServiceRegistrationRequestMDT::serialize(const uci::type::ServiceRegistrationRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ServiceRegistrationRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ServiceRegistrationRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  ServiceID_Type::serialize(accessor.getServiceID(), node, ServiceRegistrationRequestMDT_Names::ServiceID_Name);
  if (accessor.hasUnregisterFlag()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getUnregisterFlag(), node, ServiceRegistrationRequestMDT_Names::UnregisterFlag_Name);
  }
  if (accessor.hasPurpose()) {
    ServiceRegistrationPurposeType::serialize(accessor.getPurpose(), node, ServiceRegistrationRequestMDT_Names::Purpose_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ServiceRegistrationRequestMDT& ServiceRegistrationRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ServiceRegistrationRequestMDT>().release());
}

uci::type::ServiceRegistrationRequestMDT& ServiceRegistrationRequestMDT::create(const uci::type::ServiceRegistrationRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ServiceRegistrationRequestMDT> newAccessor{boost::make_unique<asb_uci::type::ServiceRegistrationRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ServiceRegistrationRequestMDT::destroy(uci::type::ServiceRegistrationRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ServiceRegistrationRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

