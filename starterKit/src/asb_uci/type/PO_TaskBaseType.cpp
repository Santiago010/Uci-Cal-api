/** @file PO_TaskBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_TaskBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/LocatedEllipseType.h"
#include "../../../include/asb_uci/type/NIIRS_Type.h"
#include "../../../include/asb_uci/type/OpticalCollectionConstraintsType.h"
#include "../../../include/asb_uci/type/PO_CapabilityEnum.h"
#include "../../../include/asb_uci/type/PO_ProductOutputCommandImageryType.h"
#include "../../../include/asb_uci/type/PairIdentifierEnum.h"
#include "../../../include/asb_uci/type/SensorSpectrumEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LocatedEllipseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NIIRS_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpticalCollectionConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_CapabilityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ProductOutputCommandImageryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TaskBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PairIdentifierEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorSpectrumEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_TaskBaseType::PO_TaskBaseType()
  : capability_Accessor{boost::make_unique<PO_CapabilityEnum>()},
    sensorSpectrum_Accessor{boost::make_unique<SensorSpectrum>(0, 14)},
    output_Accessor{boost::make_unique<Output>(0, SIZE_MAX)} {
}

PO_TaskBaseType::~PO_TaskBaseType() = default;

void PO_TaskBaseType::copy(const uci::type::PO_TaskBaseType& accessor) {
  copyImpl(accessor, false);
}

void PO_TaskBaseType::copyImpl(const uci::type::PO_TaskBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::pO_TaskBaseType)) {
      const auto& accessorImpl = dynamic_cast<const PO_TaskBaseType&>(accessor);
      setCapability(*(accessorImpl.capability_Accessor));
      setSensorSpectrum(*(accessorImpl.sensorSpectrum_Accessor));
      if (accessorImpl.lookAtCoords_Accessor) {
        setLookAtCoords(*(accessorImpl.lookAtCoords_Accessor));
      } else {
        lookAtCoords_Accessor.reset();
      }
      if (accessorImpl.minimumNIIRS_Accessor) {
        setMinimumNIIRS(*(accessorImpl.minimumNIIRS_Accessor));
      } else {
        minimumNIIRS_Accessor.reset();
      }
      if (accessorImpl.desiredNIIRS_Accessor) {
        setDesiredNIIRS(*(accessorImpl.desiredNIIRS_Accessor));
      } else {
        desiredNIIRS_Accessor.reset();
      }
      if (accessorImpl.collectionConstraints_Accessor) {
        setCollectionConstraints(*(accessorImpl.collectionConstraints_Accessor));
      } else {
        collectionConstraints_Accessor.reset();
      }
      if (accessorImpl.pairIdentifier_Accessor) {
        setPairIdentifier(*(accessorImpl.pairIdentifier_Accessor));
      } else {
        pairIdentifier_Accessor.reset();
      }
      setOutput(*(accessorImpl.output_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void PO_TaskBaseType::reset() noexcept {
  capability_Accessor->reset();
  sensorSpectrum_Accessor->reset();
  lookAtCoords_Accessor.reset();
  minimumNIIRS_Accessor.reset();
  desiredNIIRS_Accessor.reset();
  collectionConstraints_Accessor.reset();
  pairIdentifier_Accessor.reset();
  output_Accessor->reset();
}

const uci::type::PO_CapabilityEnum& PO_TaskBaseType::getCapability() const {
  return *capability_Accessor;
}

uci::type::PO_CapabilityEnum& PO_TaskBaseType::getCapability() {
  return *capability_Accessor;
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setCapability(const uci::type::PO_CapabilityEnum& accessor) {
  if (&accessor != capability_Accessor.get()) {
    capability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setCapability(uci::type::PO_CapabilityEnum::EnumerationItem value) {
  capability_Accessor->setValue(value);
  return *this;
}


const uci::type::PO_TaskBaseType::SensorSpectrum& PO_TaskBaseType::getSensorSpectrum() const {
  return *sensorSpectrum_Accessor;
}

uci::type::PO_TaskBaseType::SensorSpectrum& PO_TaskBaseType::getSensorSpectrum() {
  return *sensorSpectrum_Accessor;
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setSensorSpectrum(const uci::type::PO_TaskBaseType::SensorSpectrum& accessor) {
  if (&accessor != sensorSpectrum_Accessor.get()) {
    sensorSpectrum_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::LocatedEllipseType& PO_TaskBaseType::getLookAtCoords_() const {
  if (lookAtCoords_Accessor) {
    return *lookAtCoords_Accessor;
  }
  throw uci::base::UCIException("Error in getLookAtCoords(): An attempt was made to get an optional field that was not enabled, call hasLookAtCoords() to determine if it is safe to call getLookAtCoords()");
}

const uci::type::LocatedEllipseType& PO_TaskBaseType::getLookAtCoords() const {
  return getLookAtCoords_();
}

uci::type::LocatedEllipseType& PO_TaskBaseType::getLookAtCoords() {
  return getLookAtCoords_();
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setLookAtCoords(const uci::type::LocatedEllipseType& accessor) {
  enableLookAtCoords();
  if (&accessor != lookAtCoords_Accessor.get()) {
    lookAtCoords_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_TaskBaseType::hasLookAtCoords() const noexcept {
  return static_cast<bool>(lookAtCoords_Accessor);
}

uci::type::LocatedEllipseType& PO_TaskBaseType::enableLookAtCoords(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::locatedEllipseType : type};
  if ((!lookAtCoords_Accessor) || (lookAtCoords_Accessor->getAccessorType() != requestedType)) {
    lookAtCoords_Accessor = LocatedEllipseType::create(requestedType);
    if (!lookAtCoords_Accessor) {
      throw uci::base::UCIException("Error in enableLookAtCoords(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lookAtCoords_Accessor;
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::clearLookAtCoords() noexcept {
  lookAtCoords_Accessor.reset();
  return *this;
}

uci::type::NIIRS_Type& PO_TaskBaseType::getMinimumNIIRS_() const {
  if (minimumNIIRS_Accessor) {
    return *minimumNIIRS_Accessor;
  }
  throw uci::base::UCIException("Error in getMinimumNIIRS(): An attempt was made to get an optional field that was not enabled, call hasMinimumNIIRS() to determine if it is safe to call getMinimumNIIRS()");
}

const uci::type::NIIRS_Type& PO_TaskBaseType::getMinimumNIIRS() const {
  return getMinimumNIIRS_();
}

uci::type::NIIRS_Type& PO_TaskBaseType::getMinimumNIIRS() {
  return getMinimumNIIRS_();
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setMinimumNIIRS(const uci::type::NIIRS_Type& value) {
  return setMinimumNIIRS(value.c_str());
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setMinimumNIIRS(const std::string& value) {
  return setMinimumNIIRS(value.c_str());
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setMinimumNIIRS(const char* value) {
  enableMinimumNIIRS().setStringValue(value);
  return *this;
}

bool PO_TaskBaseType::hasMinimumNIIRS() const noexcept {
  return static_cast<bool>(minimumNIIRS_Accessor);
}

uci::type::NIIRS_Type& PO_TaskBaseType::enableMinimumNIIRS(uci::base::accessorType::AccessorType type) {
  if (!minimumNIIRS_Accessor) {
    minimumNIIRS_Accessor = NIIRS_Type::create(type);
  }
  return *minimumNIIRS_Accessor;
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::clearMinimumNIIRS() noexcept {
  minimumNIIRS_Accessor.reset();
  return *this;
}

uci::type::NIIRS_Type& PO_TaskBaseType::getDesiredNIIRS_() const {
  if (desiredNIIRS_Accessor) {
    return *desiredNIIRS_Accessor;
  }
  throw uci::base::UCIException("Error in getDesiredNIIRS(): An attempt was made to get an optional field that was not enabled, call hasDesiredNIIRS() to determine if it is safe to call getDesiredNIIRS()");
}

const uci::type::NIIRS_Type& PO_TaskBaseType::getDesiredNIIRS() const {
  return getDesiredNIIRS_();
}

uci::type::NIIRS_Type& PO_TaskBaseType::getDesiredNIIRS() {
  return getDesiredNIIRS_();
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setDesiredNIIRS(const uci::type::NIIRS_Type& value) {
  return setDesiredNIIRS(value.c_str());
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setDesiredNIIRS(const std::string& value) {
  return setDesiredNIIRS(value.c_str());
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setDesiredNIIRS(const char* value) {
  enableDesiredNIIRS().setStringValue(value);
  return *this;
}

bool PO_TaskBaseType::hasDesiredNIIRS() const noexcept {
  return static_cast<bool>(desiredNIIRS_Accessor);
}

uci::type::NIIRS_Type& PO_TaskBaseType::enableDesiredNIIRS(uci::base::accessorType::AccessorType type) {
  if (!desiredNIIRS_Accessor) {
    desiredNIIRS_Accessor = NIIRS_Type::create(type);
  }
  return *desiredNIIRS_Accessor;
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::clearDesiredNIIRS() noexcept {
  desiredNIIRS_Accessor.reset();
  return *this;
}

uci::type::OpticalCollectionConstraintsType& PO_TaskBaseType::getCollectionConstraints_() const {
  if (collectionConstraints_Accessor) {
    return *collectionConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionConstraints(): An attempt was made to get an optional field that was not enabled, call hasCollectionConstraints() to determine if it is safe to call getCollectionConstraints()");
}

const uci::type::OpticalCollectionConstraintsType& PO_TaskBaseType::getCollectionConstraints() const {
  return getCollectionConstraints_();
}

uci::type::OpticalCollectionConstraintsType& PO_TaskBaseType::getCollectionConstraints() {
  return getCollectionConstraints_();
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setCollectionConstraints(const uci::type::OpticalCollectionConstraintsType& accessor) {
  enableCollectionConstraints(accessor.getAccessorType());
  if (&accessor != collectionConstraints_Accessor.get()) {
    collectionConstraints_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PO_TaskBaseType::hasCollectionConstraints() const noexcept {
  return static_cast<bool>(collectionConstraints_Accessor);
}

uci::type::OpticalCollectionConstraintsType& PO_TaskBaseType::enableCollectionConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opticalCollectionConstraintsType : type};
  if ((!collectionConstraints_Accessor) || (collectionConstraints_Accessor->getAccessorType() != requestedType)) {
    collectionConstraints_Accessor = OpticalCollectionConstraintsType::create(requestedType);
    if (!collectionConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionConstraints_Accessor;
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::clearCollectionConstraints() noexcept {
  collectionConstraints_Accessor.reset();
  return *this;
}

uci::type::PairIdentifierEnum& PO_TaskBaseType::getPairIdentifier_() const {
  if (pairIdentifier_Accessor) {
    return *pairIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getPairIdentifier(): An attempt was made to get an optional field that was not enabled, call hasPairIdentifier() to determine if it is safe to call getPairIdentifier()");
}

const uci::type::PairIdentifierEnum& PO_TaskBaseType::getPairIdentifier() const {
  return getPairIdentifier_();
}

uci::type::PairIdentifierEnum& PO_TaskBaseType::getPairIdentifier() {
  return getPairIdentifier_();
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setPairIdentifier(const uci::type::PairIdentifierEnum& accessor) {
  enablePairIdentifier();
  if (&accessor != pairIdentifier_Accessor.get()) {
    pairIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setPairIdentifier(const uci::type::PairIdentifierEnum::EnumerationItem value) {
  enablePairIdentifier().setValue(value);
  return *this;
}

bool PO_TaskBaseType::hasPairIdentifier() const noexcept {
  return static_cast<bool>(pairIdentifier_Accessor);
}

uci::type::PairIdentifierEnum& PO_TaskBaseType::enablePairIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pairIdentifierEnum : type};
  if ((!pairIdentifier_Accessor) || (pairIdentifier_Accessor->getAccessorType() != requestedType)) {
    pairIdentifier_Accessor = PairIdentifierEnum::create(requestedType);
    if (!pairIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enablePairIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pairIdentifier_Accessor;
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::clearPairIdentifier() noexcept {
  pairIdentifier_Accessor.reset();
  return *this;
}

const uci::type::PO_TaskBaseType::Output& PO_TaskBaseType::getOutput() const {
  return *output_Accessor;
}

uci::type::PO_TaskBaseType::Output& PO_TaskBaseType::getOutput() {
  return *output_Accessor;
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::setOutput(const uci::type::PO_TaskBaseType::Output& accessor) {
  if (&accessor != output_Accessor.get()) {
    output_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PO_TaskBaseType> PO_TaskBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_TaskBaseType : type};
  return std::unique_ptr<PO_TaskBaseType>(dynamic_cast<PO_TaskBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace PO_TaskBaseType_Names {

constexpr const char* Extern_Type_Name{"PO_TaskBaseType"};
constexpr const char* Capability_Name{"Capability"};
constexpr const char* SensorSpectrum_Name{"SensorSpectrum"};
constexpr const char* LookAtCoords_Name{"LookAtCoords"};
constexpr const char* MinimumNIIRS_Name{"MinimumNIIRS"};
constexpr const char* DesiredNIIRS_Name{"DesiredNIIRS"};
constexpr const char* CollectionConstraints_Name{"CollectionConstraints"};
constexpr const char* PairIdentifier_Name{"PairIdentifier"};
constexpr const char* Output_Name{"Output"};

} // namespace PO_TaskBaseType_Names

void PO_TaskBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_TaskBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_TaskBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::Capability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCapability().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::SensorSpectrum_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_TaskBaseType::SensorSpectrum& boundedList = accessor.getSensorSpectrum();
        const uci::type::PO_TaskBaseType::SensorSpectrum::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::LookAtCoords_Name) {
      LocatedEllipseType::deserialize(valueType.second, accessor.enableLookAtCoords(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::MinimumNIIRS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumNIIRS(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::DesiredNIIRS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDesiredNIIRS(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::CollectionConstraints_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableCollectionConstraints(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::PairIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePairIdentifier().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::Output_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_TaskBaseType::Output& boundedList = accessor.getOutput();
        const uci::type::PO_TaskBaseType::Output::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ProductOutputCommandImageryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PO_TaskBaseType::serialize(const uci::type::PO_TaskBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_TaskBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::pO_TaskBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_TaskBaseType_Names::Extern_Type_Name);
    }
    PO_CapabilityEnum::serialize(accessor.getCapability(), node, PO_TaskBaseType_Names::Capability_Name, false);
    {
      const uci::type::PO_TaskBaseType::SensorSpectrum& boundedList = accessor.getSensorSpectrum();
      for (uci::type::PO_TaskBaseType::SensorSpectrum::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SensorSpectrumEnum::serialize(boundedList.at(i), node, PO_TaskBaseType_Names::SensorSpectrum_Name, false);
      }
    }
    if (accessor.hasLookAtCoords()) {
      LocatedEllipseType::serialize(accessor.getLookAtCoords(), node, PO_TaskBaseType_Names::LookAtCoords_Name);
    }
    if (accessor.hasMinimumNIIRS()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getMinimumNIIRS(), node, PO_TaskBaseType_Names::MinimumNIIRS_Name);
    }
    if (accessor.hasDesiredNIIRS()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getDesiredNIIRS(), node, PO_TaskBaseType_Names::DesiredNIIRS_Name);
    }
    if (accessor.hasCollectionConstraints()) {
      OpticalCollectionConstraintsType::serialize(accessor.getCollectionConstraints(), node, PO_TaskBaseType_Names::CollectionConstraints_Name);
    }
    if (accessor.hasPairIdentifier()) {
      PairIdentifierEnum::serialize(accessor.getPairIdentifier(), node, PO_TaskBaseType_Names::PairIdentifier_Name, false);
    }
    {
      const uci::type::PO_TaskBaseType::Output& boundedList = accessor.getOutput();
      for (uci::type::PO_TaskBaseType::Output::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::PO_ProductOutputCommandImageryType::serialize(boundedList.at(i), node, PO_TaskBaseType_Names::Output_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_TaskBaseType& PO_TaskBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_TaskBaseType>().release());
}

uci::type::PO_TaskBaseType& PO_TaskBaseType::create(const uci::type::PO_TaskBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_TaskBaseType> newAccessor{boost::make_unique<asb_uci::type::PO_TaskBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_TaskBaseType::destroy(uci::type::PO_TaskBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_TaskBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

