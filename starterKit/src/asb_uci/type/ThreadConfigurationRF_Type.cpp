/** @file ThreadConfigurationRF_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ThreadConfigurationRF_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AntennaResourceID_Type.h"
#include "../../../include/asb_uci/type/BeamPointingReferenceType.h"
#include "../../../include/asb_uci/type/BeamPowerModeEnum.h"
#include "../../../include/asb_uci/type/BeamShapingType.h"
#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/type/PolarizationControlType.h"
#include "../../../include/asb_uci/type/RF_TypeEnum.h"
#include "../../../include/asb_uci/type/SupportCapabilityID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AntennaResourceID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamPointingReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamPowerModeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamShapingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PolarizationControlType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_TypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SupportCapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ThreadConfigurationRF_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ThreadConfigurationRF_Type::ThreadConfigurationRF_Type()
  : supportCapabilityID_Accessor{boost::make_unique<SupportCapabilityID_Type>()},
    antennaResourceInstanceID_Accessor{boost::make_unique<AntennaResourceID_Type>()},
    rF_Mode_Accessor{boost::make_unique<RF_TypeEnum>()},
    polarization_Accessor{boost::make_unique<Polarization>(0, SIZE_MAX)} {
}

ThreadConfigurationRF_Type::~ThreadConfigurationRF_Type() = default;

void ThreadConfigurationRF_Type::copy(const uci::type::ThreadConfigurationRF_Type& accessor) {
  copyImpl(accessor, false);
}

void ThreadConfigurationRF_Type::copyImpl(const uci::type::ThreadConfigurationRF_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ThreadConfigurationRF_Type&>(accessor);
    setBeamConfigurationIndex(accessorImpl.beamConfigurationIndex_Accessor);
    setSupportCapabilityID(*(accessorImpl.supportCapabilityID_Accessor));
    setAntennaResourceInstanceID(*(accessorImpl.antennaResourceInstanceID_Accessor));
    setRF_Mode(*(accessorImpl.rF_Mode_Accessor));
    if (accessorImpl.beamPowerMode_Accessor) {
      setBeamPowerMode(*(accessorImpl.beamPowerMode_Accessor));
    } else {
      beamPowerMode_Accessor.reset();
    }
    if (accessorImpl.frequency_Accessor) {
      setFrequency(*(accessorImpl.frequency_Accessor));
    } else {
      frequency_Accessor.reset();
    }
    if (accessorImpl.beamPointingReference_Accessor) {
      setBeamPointingReference(*(accessorImpl.beamPointingReference_Accessor));
    } else {
      beamPointingReference_Accessor.reset();
    }
    setPolarization(*(accessorImpl.polarization_Accessor));
    if (accessorImpl.hasAntennaAttenuation()) {
      setAntennaAttenuation(accessorImpl.getAntennaAttenuation());
    } else {
      clearAntennaAttenuation();
    }
    if (accessorImpl.hasAntennaPriority()) {
      setAntennaPriority(accessorImpl.getAntennaPriority());
    } else {
      clearAntennaPriority();
    }
    if (accessorImpl.beamShaping_Accessor) {
      setBeamShaping(*(accessorImpl.beamShaping_Accessor));
    } else {
      beamShaping_Accessor.reset();
    }
  }
}

void ThreadConfigurationRF_Type::reset() noexcept {
  beamConfigurationIndex_Accessor = 0;
  supportCapabilityID_Accessor->reset();
  antennaResourceInstanceID_Accessor->reset();
  rF_Mode_Accessor->reset();
  beamPowerMode_Accessor.reset();
  frequency_Accessor.reset();
  beamPointingReference_Accessor.reset();
  polarization_Accessor->reset();
  clearAntennaAttenuation();
  clearAntennaPriority();
  beamShaping_Accessor.reset();
}

xs::UnsignedInt ThreadConfigurationRF_Type::getBeamConfigurationIndex() const {
  return beamConfigurationIndex_Accessor;
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::setBeamConfigurationIndex(xs::UnsignedInt value) {
  beamConfigurationIndex_Accessor = value;
  return *this;
}


const uci::type::SupportCapabilityID_Type& ThreadConfigurationRF_Type::getSupportCapabilityID() const {
  return *supportCapabilityID_Accessor;
}

uci::type::SupportCapabilityID_Type& ThreadConfigurationRF_Type::getSupportCapabilityID() {
  return *supportCapabilityID_Accessor;
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::setSupportCapabilityID(const uci::type::SupportCapabilityID_Type& accessor) {
  if (&accessor != supportCapabilityID_Accessor.get()) {
    supportCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AntennaResourceID_Type& ThreadConfigurationRF_Type::getAntennaResourceInstanceID() const {
  return *antennaResourceInstanceID_Accessor;
}

uci::type::AntennaResourceID_Type& ThreadConfigurationRF_Type::getAntennaResourceInstanceID() {
  return *antennaResourceInstanceID_Accessor;
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::setAntennaResourceInstanceID(const uci::type::AntennaResourceID_Type& accessor) {
  if (&accessor != antennaResourceInstanceID_Accessor.get()) {
    antennaResourceInstanceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RF_TypeEnum& ThreadConfigurationRF_Type::getRF_Mode() const {
  return *rF_Mode_Accessor;
}

uci::type::RF_TypeEnum& ThreadConfigurationRF_Type::getRF_Mode() {
  return *rF_Mode_Accessor;
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::setRF_Mode(const uci::type::RF_TypeEnum& accessor) {
  if (&accessor != rF_Mode_Accessor.get()) {
    rF_Mode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::setRF_Mode(uci::type::RF_TypeEnum::EnumerationItem value) {
  rF_Mode_Accessor->setValue(value);
  return *this;
}


uci::type::BeamPowerModeEnum& ThreadConfigurationRF_Type::getBeamPowerMode_() const {
  if (beamPowerMode_Accessor) {
    return *beamPowerMode_Accessor;
  }
  throw uci::base::UCIException("Error in getBeamPowerMode(): An attempt was made to get an optional field that was not enabled, call hasBeamPowerMode() to determine if it is safe to call getBeamPowerMode()");
}

const uci::type::BeamPowerModeEnum& ThreadConfigurationRF_Type::getBeamPowerMode() const {
  return getBeamPowerMode_();
}

uci::type::BeamPowerModeEnum& ThreadConfigurationRF_Type::getBeamPowerMode() {
  return getBeamPowerMode_();
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::setBeamPowerMode(const uci::type::BeamPowerModeEnum& accessor) {
  enableBeamPowerMode();
  if (&accessor != beamPowerMode_Accessor.get()) {
    beamPowerMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::setBeamPowerMode(const uci::type::BeamPowerModeEnum::EnumerationItem value) {
  enableBeamPowerMode().setValue(value);
  return *this;
}

bool ThreadConfigurationRF_Type::hasBeamPowerMode() const noexcept {
  return static_cast<bool>(beamPowerMode_Accessor);
}

uci::type::BeamPowerModeEnum& ThreadConfigurationRF_Type::enableBeamPowerMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::beamPowerModeEnum : type};
  if ((!beamPowerMode_Accessor) || (beamPowerMode_Accessor->getAccessorType() != requestedType)) {
    beamPowerMode_Accessor = BeamPowerModeEnum::create(requestedType);
    if (!beamPowerMode_Accessor) {
      throw uci::base::UCIException("Error in enableBeamPowerMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *beamPowerMode_Accessor;
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::clearBeamPowerMode() noexcept {
  beamPowerMode_Accessor.reset();
  return *this;
}

uci::type::FrequencyRangeType& ThreadConfigurationRF_Type::getFrequency_() const {
  if (frequency_Accessor) {
    return *frequency_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequency(): An attempt was made to get an optional field that was not enabled, call hasFrequency() to determine if it is safe to call getFrequency()");
}

const uci::type::FrequencyRangeType& ThreadConfigurationRF_Type::getFrequency() const {
  return getFrequency_();
}

uci::type::FrequencyRangeType& ThreadConfigurationRF_Type::getFrequency() {
  return getFrequency_();
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::setFrequency(const uci::type::FrequencyRangeType& accessor) {
  enableFrequency();
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThreadConfigurationRF_Type::hasFrequency() const noexcept {
  return static_cast<bool>(frequency_Accessor);
}

uci::type::FrequencyRangeType& ThreadConfigurationRF_Type::enableFrequency(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyRangeType : type};
  if ((!frequency_Accessor) || (frequency_Accessor->getAccessorType() != requestedType)) {
    frequency_Accessor = FrequencyRangeType::create(requestedType);
    if (!frequency_Accessor) {
      throw uci::base::UCIException("Error in enableFrequency(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *frequency_Accessor;
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::clearFrequency() noexcept {
  frequency_Accessor.reset();
  return *this;
}

uci::type::BeamPointingReferenceType& ThreadConfigurationRF_Type::getBeamPointingReference_() const {
  if (beamPointingReference_Accessor) {
    return *beamPointingReference_Accessor;
  }
  throw uci::base::UCIException("Error in getBeamPointingReference(): An attempt was made to get an optional field that was not enabled, call hasBeamPointingReference() to determine if it is safe to call getBeamPointingReference()");
}

const uci::type::BeamPointingReferenceType& ThreadConfigurationRF_Type::getBeamPointingReference() const {
  return getBeamPointingReference_();
}

uci::type::BeamPointingReferenceType& ThreadConfigurationRF_Type::getBeamPointingReference() {
  return getBeamPointingReference_();
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::setBeamPointingReference(const uci::type::BeamPointingReferenceType& accessor) {
  enableBeamPointingReference();
  if (&accessor != beamPointingReference_Accessor.get()) {
    beamPointingReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThreadConfigurationRF_Type::hasBeamPointingReference() const noexcept {
  return static_cast<bool>(beamPointingReference_Accessor);
}

uci::type::BeamPointingReferenceType& ThreadConfigurationRF_Type::enableBeamPointingReference(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::beamPointingReferenceType : type};
  if ((!beamPointingReference_Accessor) || (beamPointingReference_Accessor->getAccessorType() != requestedType)) {
    beamPointingReference_Accessor = BeamPointingReferenceType::create(requestedType);
    if (!beamPointingReference_Accessor) {
      throw uci::base::UCIException("Error in enableBeamPointingReference(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *beamPointingReference_Accessor;
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::clearBeamPointingReference() noexcept {
  beamPointingReference_Accessor.reset();
  return *this;
}

const uci::type::ThreadConfigurationRF_Type::Polarization& ThreadConfigurationRF_Type::getPolarization() const {
  return *polarization_Accessor;
}

uci::type::ThreadConfigurationRF_Type::Polarization& ThreadConfigurationRF_Type::getPolarization() {
  return *polarization_Accessor;
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::setPolarization(const uci::type::ThreadConfigurationRF_Type::Polarization& accessor) {
  if (&accessor != polarization_Accessor.get()) {
    polarization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DecibelTypeValue ThreadConfigurationRF_Type::getAntennaAttenuation() const {
  if (antennaAttenuation_Accessor) {
    return *antennaAttenuation_Accessor;
  }
  throw uci::base::UCIException("Error in getAntennaAttenuation(): An attempt was made to get an optional field that was not enabled, call hasAntennaAttenuation() to determine if it is safe to call getAntennaAttenuation()");
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::setAntennaAttenuation(uci::type::DecibelTypeValue value) {
  antennaAttenuation_Accessor = value;
  return *this;
}

bool ThreadConfigurationRF_Type::hasAntennaAttenuation() const noexcept {
  return antennaAttenuation_Accessor.has_value();
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::clearAntennaAttenuation() noexcept {
  antennaAttenuation_Accessor.reset();
  return *this;
}

xs::UnsignedInt ThreadConfigurationRF_Type::getAntennaPriority() const {
  if (antennaPriority_Accessor) {
    return *antennaPriority_Accessor;
  }
  throw uci::base::UCIException("Error in getAntennaPriority(): An attempt was made to get an optional field that was not enabled, call hasAntennaPriority() to determine if it is safe to call getAntennaPriority()");
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::setAntennaPriority(xs::UnsignedInt value) {
  antennaPriority_Accessor = value;
  return *this;
}

bool ThreadConfigurationRF_Type::hasAntennaPriority() const noexcept {
  return antennaPriority_Accessor.has_value();
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::clearAntennaPriority() noexcept {
  antennaPriority_Accessor.reset();
  return *this;
}

uci::type::BeamShapingType& ThreadConfigurationRF_Type::getBeamShaping_() const {
  if (beamShaping_Accessor) {
    return *beamShaping_Accessor;
  }
  throw uci::base::UCIException("Error in getBeamShaping(): An attempt was made to get an optional field that was not enabled, call hasBeamShaping() to determine if it is safe to call getBeamShaping()");
}

const uci::type::BeamShapingType& ThreadConfigurationRF_Type::getBeamShaping() const {
  return getBeamShaping_();
}

uci::type::BeamShapingType& ThreadConfigurationRF_Type::getBeamShaping() {
  return getBeamShaping_();
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::setBeamShaping(const uci::type::BeamShapingType& accessor) {
  enableBeamShaping();
  if (&accessor != beamShaping_Accessor.get()) {
    beamShaping_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThreadConfigurationRF_Type::hasBeamShaping() const noexcept {
  return static_cast<bool>(beamShaping_Accessor);
}

uci::type::BeamShapingType& ThreadConfigurationRF_Type::enableBeamShaping(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::beamShapingType : type};
  if ((!beamShaping_Accessor) || (beamShaping_Accessor->getAccessorType() != requestedType)) {
    beamShaping_Accessor = BeamShapingType::create(requestedType);
    if (!beamShaping_Accessor) {
      throw uci::base::UCIException("Error in enableBeamShaping(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *beamShaping_Accessor;
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::clearBeamShaping() noexcept {
  beamShaping_Accessor.reset();
  return *this;
}

std::unique_ptr<ThreadConfigurationRF_Type> ThreadConfigurationRF_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threadConfigurationRF_Type : type};
  return (requestedType == uci::type::accessorType::threadConfigurationRF_Type) ? boost::make_unique<ThreadConfigurationRF_Type>() : nullptr;
}

/**  */
namespace ThreadConfigurationRF_Type_Names {

constexpr const char* Extern_Type_Name{"ThreadConfigurationRF_Type"};
constexpr const char* BeamConfigurationIndex_Name{"BeamConfigurationIndex"};
constexpr const char* SupportCapabilityID_Name{"SupportCapabilityID"};
constexpr const char* AntennaResourceInstanceID_Name{"AntennaResourceInstanceID"};
constexpr const char* RF_Mode_Name{"RF_Mode"};
constexpr const char* BeamPowerMode_Name{"BeamPowerMode"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* BeamPointingReference_Name{"BeamPointingReference"};
constexpr const char* Polarization_Name{"Polarization"};
constexpr const char* AntennaAttenuation_Name{"AntennaAttenuation"};
constexpr const char* AntennaPriority_Name{"AntennaPriority"};
constexpr const char* BeamShaping_Name{"BeamShaping"};

} // namespace ThreadConfigurationRF_Type_Names

void ThreadConfigurationRF_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::ThreadConfigurationRF_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ThreadConfigurationRF_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::BeamConfigurationIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBeamConfigurationIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::SupportCapabilityID_Name) {
      SupportCapabilityID_Type::deserialize(valueType.second, accessor.getSupportCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::AntennaResourceInstanceID_Name) {
      AntennaResourceID_Type::deserialize(valueType.second, accessor.getAntennaResourceInstanceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::RF_Mode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRF_Mode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::BeamPowerMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableBeamPowerMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::Frequency_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::BeamPointingReference_Name) {
      BeamPointingReferenceType::deserialize(valueType.second, accessor.enableBeamPointingReference(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::Polarization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ThreadConfigurationRF_Type::Polarization& boundedList = accessor.getPolarization();
        const uci::type::ThreadConfigurationRF_Type::Polarization::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PolarizationControlType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::AntennaAttenuation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAntennaAttenuation(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::AntennaPriority_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAntennaPriority(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::BeamShaping_Name) {
      BeamShapingType::deserialize(valueType.second, accessor.enableBeamShaping(), nodeName, nsPrefix);
    }
  }
}

std::string ThreadConfigurationRF_Type::serialize(const uci::type::ThreadConfigurationRF_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ThreadConfigurationRF_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ThreadConfigurationRF_Type_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getBeamConfigurationIndex(), node, ThreadConfigurationRF_Type_Names::BeamConfigurationIndex_Name);
  SupportCapabilityID_Type::serialize(accessor.getSupportCapabilityID(), node, ThreadConfigurationRF_Type_Names::SupportCapabilityID_Name);
  AntennaResourceID_Type::serialize(accessor.getAntennaResourceInstanceID(), node, ThreadConfigurationRF_Type_Names::AntennaResourceInstanceID_Name);
  RF_TypeEnum::serialize(accessor.getRF_Mode(), node, ThreadConfigurationRF_Type_Names::RF_Mode_Name, false);
  if (accessor.hasBeamPowerMode()) {
    BeamPowerModeEnum::serialize(accessor.getBeamPowerMode(), node, ThreadConfigurationRF_Type_Names::BeamPowerMode_Name, false);
  }
  if (accessor.hasFrequency()) {
    FrequencyRangeType::serialize(accessor.getFrequency(), node, ThreadConfigurationRF_Type_Names::Frequency_Name);
  }
  if (accessor.hasBeamPointingReference()) {
    BeamPointingReferenceType::serialize(accessor.getBeamPointingReference(), node, ThreadConfigurationRF_Type_Names::BeamPointingReference_Name);
  }
  {
    const uci::type::ThreadConfigurationRF_Type::Polarization& boundedList = accessor.getPolarization();
    for (uci::type::ThreadConfigurationRF_Type::Polarization::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PolarizationControlType::serialize(boundedList.at(i), node, ThreadConfigurationRF_Type_Names::Polarization_Name);
    }
  }
  if (accessor.hasAntennaAttenuation()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAntennaAttenuation(), node, ThreadConfigurationRF_Type_Names::AntennaAttenuation_Name);
  }
  if (accessor.hasAntennaPriority()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAntennaPriority(), node, ThreadConfigurationRF_Type_Names::AntennaPriority_Name);
  }
  if (accessor.hasBeamShaping()) {
    BeamShapingType::serialize(accessor.getBeamShaping(), node, ThreadConfigurationRF_Type_Names::BeamShaping_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ThreadConfigurationRF_Type>().release());
}

uci::type::ThreadConfigurationRF_Type& ThreadConfigurationRF_Type::create(const uci::type::ThreadConfigurationRF_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ThreadConfigurationRF_Type> newAccessor{boost::make_unique<asb_uci::type::ThreadConfigurationRF_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ThreadConfigurationRF_Type::destroy(uci::type::ThreadConfigurationRF_Type& accessor) {
  delete dynamic_cast<asb_uci::type::ThreadConfigurationRF_Type*>(&accessor);
}

} // namespace type

} // namespace uci

