/** @file RequirementTaxonomyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementTaxonomyType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActionTypeEnum.h"
#include "asb_uci/type/CapabilityTypeEnum.h"
#include "asb_uci/type/EffectTypeEnum.h"
#include "asb_uci/type/ResponseTypeEnum.h"
#include "asb_uci/type/TaskTypeEnum.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActionTypeEnum.h"
#include "uci/type/CapabilityTypeEnum.h"
#include "uci/type/EffectTypeEnum.h"
#include "uci/type/RequirementTaxonomyType.h"
#include "uci/type/ResponseTypeEnum.h"
#include "uci/type/TaskTypeEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementTaxonomyType::RequirementTaxonomyType()
  : effect_Accessor{boost::make_unique<Effect>(0, 47)},
    action_Accessor{boost::make_unique<Action>(0, 84)},
    task_Accessor{boost::make_unique<Task>(0, 21)},
    capabilityCommand_Accessor{boost::make_unique<CapabilityCommand>(0, 25)},
    response_Accessor{boost::make_unique<Response>(0, 4)} {
}

RequirementTaxonomyType::~RequirementTaxonomyType() = default;

void RequirementTaxonomyType::copy(const uci::type::RequirementTaxonomyType& accessor) {
  copyImpl(accessor, false);
}

void RequirementTaxonomyType::copyImpl(const uci::type::RequirementTaxonomyType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::requirementTaxonomyType)) {
      const auto& accessorImpl = dynamic_cast<const RequirementTaxonomyType&>(accessor);
      setEffect(*(accessorImpl.effect_Accessor));
      setAction(*(accessorImpl.action_Accessor));
      setTask(*(accessorImpl.task_Accessor));
      setCapabilityCommand(*(accessorImpl.capabilityCommand_Accessor));
      setResponse(*(accessorImpl.response_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void RequirementTaxonomyType::reset() noexcept {
  effect_Accessor->reset();
  action_Accessor->reset();
  task_Accessor->reset();
  capabilityCommand_Accessor->reset();
  response_Accessor->reset();
}

const uci::type::RequirementTaxonomyType::Effect& RequirementTaxonomyType::getEffect() const {
  return *effect_Accessor;
}

uci::type::RequirementTaxonomyType::Effect& RequirementTaxonomyType::getEffect() {
  return *effect_Accessor;
}

uci::type::RequirementTaxonomyType& RequirementTaxonomyType::setEffect(const uci::type::RequirementTaxonomyType::Effect& accessor) {
  if (&accessor != effect_Accessor.get()) {
    effect_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementTaxonomyType::Action& RequirementTaxonomyType::getAction() const {
  return *action_Accessor;
}

uci::type::RequirementTaxonomyType::Action& RequirementTaxonomyType::getAction() {
  return *action_Accessor;
}

uci::type::RequirementTaxonomyType& RequirementTaxonomyType::setAction(const uci::type::RequirementTaxonomyType::Action& accessor) {
  if (&accessor != action_Accessor.get()) {
    action_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementTaxonomyType::Task& RequirementTaxonomyType::getTask() const {
  return *task_Accessor;
}

uci::type::RequirementTaxonomyType::Task& RequirementTaxonomyType::getTask() {
  return *task_Accessor;
}

uci::type::RequirementTaxonomyType& RequirementTaxonomyType::setTask(const uci::type::RequirementTaxonomyType::Task& accessor) {
  if (&accessor != task_Accessor.get()) {
    task_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementTaxonomyType::CapabilityCommand& RequirementTaxonomyType::getCapabilityCommand() const {
  return *capabilityCommand_Accessor;
}

uci::type::RequirementTaxonomyType::CapabilityCommand& RequirementTaxonomyType::getCapabilityCommand() {
  return *capabilityCommand_Accessor;
}

uci::type::RequirementTaxonomyType& RequirementTaxonomyType::setCapabilityCommand(const uci::type::RequirementTaxonomyType::CapabilityCommand& accessor) {
  if (&accessor != capabilityCommand_Accessor.get()) {
    capabilityCommand_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementTaxonomyType::Response& RequirementTaxonomyType::getResponse() const {
  return *response_Accessor;
}

uci::type::RequirementTaxonomyType::Response& RequirementTaxonomyType::getResponse() {
  return *response_Accessor;
}

uci::type::RequirementTaxonomyType& RequirementTaxonomyType::setResponse(const uci::type::RequirementTaxonomyType::Response& accessor) {
  if (&accessor != response_Accessor.get()) {
    response_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RequirementTaxonomyType> RequirementTaxonomyType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementTaxonomyType : type};
  return std::unique_ptr<RequirementTaxonomyType>(dynamic_cast<RequirementTaxonomyType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace RequirementTaxonomyType_Names {

constexpr const char* Extern_Type_Name{"RequirementTaxonomyType"};
constexpr const char* Effect_Name{"Effect"};
constexpr const char* Action_Name{"Action"};
constexpr const char* Task_Name{"Task"};
constexpr const char* CapabilityCommand_Name{"CapabilityCommand"};
constexpr const char* Response_Name{"Response"};

} // namespace RequirementTaxonomyType_Names

void RequirementTaxonomyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementTaxonomyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementTaxonomyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementTaxonomyType_Names::Effect_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementTaxonomyType::Effect& boundedList = accessor.getEffect();
        const uci::type::RequirementTaxonomyType::Effect::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementTaxonomyType_Names::Action_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementTaxonomyType::Action& boundedList = accessor.getAction();
        const uci::type::RequirementTaxonomyType::Action::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementTaxonomyType_Names::Task_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementTaxonomyType::Task& boundedList = accessor.getTask();
        const uci::type::RequirementTaxonomyType::Task::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementTaxonomyType_Names::CapabilityCommand_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementTaxonomyType::CapabilityCommand& boundedList = accessor.getCapabilityCommand();
        const uci::type::RequirementTaxonomyType::CapabilityCommand::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementTaxonomyType_Names::Response_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementTaxonomyType::Response& boundedList = accessor.getResponse();
        const uci::type::RequirementTaxonomyType::Response::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    }
  }
}

std::string RequirementTaxonomyType::serialize(const uci::type::RequirementTaxonomyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementTaxonomyType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::requirementTaxonomyType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementTaxonomyType_Names::Extern_Type_Name);
    }
    {
      const uci::type::RequirementTaxonomyType::Effect& boundedList = accessor.getEffect();
      for (uci::type::RequirementTaxonomyType::Effect::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        EffectTypeEnum::serialize(boundedList.at(i), node, RequirementTaxonomyType_Names::Effect_Name, false);
      }
    }
    {
      const uci::type::RequirementTaxonomyType::Action& boundedList = accessor.getAction();
      for (uci::type::RequirementTaxonomyType::Action::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        ActionTypeEnum::serialize(boundedList.at(i), node, RequirementTaxonomyType_Names::Action_Name, false);
      }
    }
    {
      const uci::type::RequirementTaxonomyType::Task& boundedList = accessor.getTask();
      for (uci::type::RequirementTaxonomyType::Task::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        TaskTypeEnum::serialize(boundedList.at(i), node, RequirementTaxonomyType_Names::Task_Name, false);
      }
    }
    {
      const uci::type::RequirementTaxonomyType::CapabilityCommand& boundedList = accessor.getCapabilityCommand();
      for (uci::type::RequirementTaxonomyType::CapabilityCommand::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        CapabilityTypeEnum::serialize(boundedList.at(i), node, RequirementTaxonomyType_Names::CapabilityCommand_Name, false);
      }
    }
    {
      const uci::type::RequirementTaxonomyType::Response& boundedList = accessor.getResponse();
      for (uci::type::RequirementTaxonomyType::Response::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        ResponseTypeEnum::serialize(boundedList.at(i), node, RequirementTaxonomyType_Names::Response_Name, false);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementTaxonomyType& RequirementTaxonomyType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementTaxonomyType>().release());
}

uci::type::RequirementTaxonomyType& RequirementTaxonomyType::create(const uci::type::RequirementTaxonomyType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementTaxonomyType> newAccessor{boost::make_unique<asb_uci::type::RequirementTaxonomyType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementTaxonomyType::destroy(uci::type::RequirementTaxonomyType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementTaxonomyType*>(&accessor);
}

} // namespace type

} // namespace uci

