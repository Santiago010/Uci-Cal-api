/** @file PositionPositionCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PositionPositionCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PositionPositionCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PositionPositionCovarianceType::PositionPositionCovarianceType() = default;

PositionPositionCovarianceType::~PositionPositionCovarianceType() = default;

void PositionPositionCovarianceType::copy(const uci::type::PositionPositionCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void PositionPositionCovarianceType::copyImpl(const uci::type::PositionPositionCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PositionPositionCovarianceType&>(accessor);
    setPnPn(accessorImpl.pnPn_Accessor);
    setPnPe(accessorImpl.pnPe_Accessor);
    if (accessorImpl.hasPnPd()) {
      setPnPd(accessorImpl.getPnPd());
    } else {
      clearPnPd();
    }
    setPePe(accessorImpl.pePe_Accessor);
    if (accessorImpl.hasPePd()) {
      setPePd(accessorImpl.getPePd());
    } else {
      clearPePd();
    }
    if (accessorImpl.hasPdPd()) {
      setPdPd(accessorImpl.getPdPd());
    } else {
      clearPdPd();
    }
  }
}

void PositionPositionCovarianceType::reset() noexcept {
  pnPn_Accessor = 0.0;
  pnPe_Accessor = 0.0;
  clearPnPd();
  pePe_Accessor = 0.0;
  clearPePd();
  clearPdPd();
}

xs::Double PositionPositionCovarianceType::getPnPn() const {
  return pnPn_Accessor;
}

uci::type::PositionPositionCovarianceType& PositionPositionCovarianceType::setPnPn(xs::Double value) {
  pnPn_Accessor = value;
  return *this;
}


xs::Double PositionPositionCovarianceType::getPnPe() const {
  return pnPe_Accessor;
}

uci::type::PositionPositionCovarianceType& PositionPositionCovarianceType::setPnPe(xs::Double value) {
  pnPe_Accessor = value;
  return *this;
}


xs::Double PositionPositionCovarianceType::getPnPd() const {
  if (pnPd_Accessor) {
    return *pnPd_Accessor;
  }
  throw uci::base::UCIException("Error in getPnPd(): An attempt was made to get an optional field that was not enabled, call hasPnPd() to determine if it is safe to call getPnPd()");
}

uci::type::PositionPositionCovarianceType& PositionPositionCovarianceType::setPnPd(xs::Double value) {
  pnPd_Accessor = value;
  return *this;
}

bool PositionPositionCovarianceType::hasPnPd() const noexcept {
  return pnPd_Accessor.has_value();
}

uci::type::PositionPositionCovarianceType& PositionPositionCovarianceType::clearPnPd() noexcept {
  pnPd_Accessor.reset();
  return *this;
}

xs::Double PositionPositionCovarianceType::getPePe() const {
  return pePe_Accessor;
}

uci::type::PositionPositionCovarianceType& PositionPositionCovarianceType::setPePe(xs::Double value) {
  pePe_Accessor = value;
  return *this;
}


xs::Double PositionPositionCovarianceType::getPePd() const {
  if (pePd_Accessor) {
    return *pePd_Accessor;
  }
  throw uci::base::UCIException("Error in getPePd(): An attempt was made to get an optional field that was not enabled, call hasPePd() to determine if it is safe to call getPePd()");
}

uci::type::PositionPositionCovarianceType& PositionPositionCovarianceType::setPePd(xs::Double value) {
  pePd_Accessor = value;
  return *this;
}

bool PositionPositionCovarianceType::hasPePd() const noexcept {
  return pePd_Accessor.has_value();
}

uci::type::PositionPositionCovarianceType& PositionPositionCovarianceType::clearPePd() noexcept {
  pePd_Accessor.reset();
  return *this;
}

xs::Double PositionPositionCovarianceType::getPdPd() const {
  if (pdPd_Accessor) {
    return *pdPd_Accessor;
  }
  throw uci::base::UCIException("Error in getPdPd(): An attempt was made to get an optional field that was not enabled, call hasPdPd() to determine if it is safe to call getPdPd()");
}

uci::type::PositionPositionCovarianceType& PositionPositionCovarianceType::setPdPd(xs::Double value) {
  pdPd_Accessor = value;
  return *this;
}

bool PositionPositionCovarianceType::hasPdPd() const noexcept {
  return pdPd_Accessor.has_value();
}

uci::type::PositionPositionCovarianceType& PositionPositionCovarianceType::clearPdPd() noexcept {
  pdPd_Accessor.reset();
  return *this;
}

std::unique_ptr<PositionPositionCovarianceType> PositionPositionCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionPositionCovarianceType : type};
  return (requestedType == uci::type::accessorType::positionPositionCovarianceType) ? boost::make_unique<PositionPositionCovarianceType>() : nullptr;
}

/**  */
namespace PositionPositionCovarianceType_Names {

constexpr const char* Extern_Type_Name{"PositionPositionCovarianceType"};
constexpr const char* PnPn_Name{"PnPn"};
constexpr const char* PnPe_Name{"PnPe"};
constexpr const char* PnPd_Name{"PnPd"};
constexpr const char* PePe_Name{"PePe"};
constexpr const char* PePd_Name{"PePd"};
constexpr const char* PdPd_Name{"PdPd"};

} // namespace PositionPositionCovarianceType_Names

void PositionPositionCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PositionPositionCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PositionPositionCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PositionPositionCovarianceType_Names::PnPn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPnPn(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionPositionCovarianceType_Names::PnPe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPnPe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionPositionCovarianceType_Names::PnPd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPnPd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionPositionCovarianceType_Names::PePe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPePe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionPositionCovarianceType_Names::PePd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPePd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionPositionCovarianceType_Names::PdPd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPdPd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string PositionPositionCovarianceType::serialize(const uci::type::PositionPositionCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PositionPositionCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PositionPositionCovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPnPn(), node, PositionPositionCovarianceType_Names::PnPn_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPnPe(), node, PositionPositionCovarianceType_Names::PnPe_Name);
  if (accessor.hasPnPd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPnPd(), node, PositionPositionCovarianceType_Names::PnPd_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPePe(), node, PositionPositionCovarianceType_Names::PePe_Name);
  if (accessor.hasPePd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPePd(), node, PositionPositionCovarianceType_Names::PePd_Name);
  }
  if (accessor.hasPdPd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPdPd(), node, PositionPositionCovarianceType_Names::PdPd_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PositionPositionCovarianceType& PositionPositionCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PositionPositionCovarianceType>().release());
}

uci::type::PositionPositionCovarianceType& PositionPositionCovarianceType::create(const uci::type::PositionPositionCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PositionPositionCovarianceType> newAccessor{boost::make_unique<asb_uci::type::PositionPositionCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PositionPositionCovarianceType::destroy(uci::type::PositionPositionCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::PositionPositionCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

