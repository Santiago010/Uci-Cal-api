/** @file EOB_EquipmentRecordType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EOB_EquipmentRecordType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BaseEOB_RecordType.h"
#include "../../../include/asb_uci/type/EOB_EmitterType.h"
#include "../../../include/asb_uci/type/EOB_WeaponSystemType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_EmitterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_EquipmentRecordType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_WeaponSystemType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EOB_EquipmentRecordType::EOB_EquipmentRecordType()
  : emitter_Accessor{boost::make_unique<Emitter>(0, SIZE_MAX)} {
}

EOB_EquipmentRecordType::~EOB_EquipmentRecordType() = default;

void EOB_EquipmentRecordType::copy(const uci::type::EOB_EquipmentRecordType& accessor) {
  copyImpl(accessor, false);
}

void EOB_EquipmentRecordType::copyImpl(const uci::type::EOB_EquipmentRecordType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    BaseEOB_RecordType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const EOB_EquipmentRecordType&>(accessor);
    if (accessorImpl.weaponSystem_Accessor) {
      setWeaponSystem(*(accessorImpl.weaponSystem_Accessor));
    } else {
      weaponSystem_Accessor.reset();
    }
    setEmitter(*(accessorImpl.emitter_Accessor));
  }
}

void EOB_EquipmentRecordType::reset() noexcept {
  BaseEOB_RecordType::reset();
  weaponSystem_Accessor.reset();
  emitter_Accessor->reset();
}

uci::type::EOB_WeaponSystemType& EOB_EquipmentRecordType::getWeaponSystem_() const {
  if (weaponSystem_Accessor) {
    return *weaponSystem_Accessor;
  }
  throw uci::base::UCIException("Error in getWeaponSystem(): An attempt was made to get an optional field that was not enabled, call hasWeaponSystem() to determine if it is safe to call getWeaponSystem()");
}

const uci::type::EOB_WeaponSystemType& EOB_EquipmentRecordType::getWeaponSystem() const {
  return getWeaponSystem_();
}

uci::type::EOB_WeaponSystemType& EOB_EquipmentRecordType::getWeaponSystem() {
  return getWeaponSystem_();
}

uci::type::EOB_EquipmentRecordType& EOB_EquipmentRecordType::setWeaponSystem(const uci::type::EOB_WeaponSystemType& value) {
  return setWeaponSystem(value.c_str());
}

uci::type::EOB_EquipmentRecordType& EOB_EquipmentRecordType::setWeaponSystem(const std::string& value) {
  return setWeaponSystem(value.c_str());
}

uci::type::EOB_EquipmentRecordType& EOB_EquipmentRecordType::setWeaponSystem(const char* value) {
  enableWeaponSystem().setStringValue(value);
  return *this;
}

bool EOB_EquipmentRecordType::hasWeaponSystem() const noexcept {
  return static_cast<bool>(weaponSystem_Accessor);
}

uci::type::EOB_WeaponSystemType& EOB_EquipmentRecordType::enableWeaponSystem(uci::base::accessorType::AccessorType type) {
  if (!weaponSystem_Accessor) {
    weaponSystem_Accessor = EOB_WeaponSystemType::create(type);
  }
  return *weaponSystem_Accessor;
}

uci::type::EOB_EquipmentRecordType& EOB_EquipmentRecordType::clearWeaponSystem() noexcept {
  weaponSystem_Accessor.reset();
  return *this;
}

const uci::type::EOB_EquipmentRecordType::Emitter& EOB_EquipmentRecordType::getEmitter() const {
  return *emitter_Accessor;
}

uci::type::EOB_EquipmentRecordType::Emitter& EOB_EquipmentRecordType::getEmitter() {
  return *emitter_Accessor;
}

uci::type::EOB_EquipmentRecordType& EOB_EquipmentRecordType::setEmitter(const uci::type::EOB_EquipmentRecordType::Emitter& accessor) {
  if (&accessor != emitter_Accessor.get()) {
    emitter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<EOB_EquipmentRecordType> EOB_EquipmentRecordType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_EquipmentRecordType : type};
  return (requestedType == uci::type::accessorType::eOB_EquipmentRecordType) ? boost::make_unique<EOB_EquipmentRecordType>() : nullptr;
}

/**  */
namespace EOB_EquipmentRecordType_Names {

constexpr const char* Extern_Type_Name{"EOB_EquipmentRecordType"};
constexpr const char* WeaponSystem_Name{"WeaponSystem"};
constexpr const char* Emitter_Name{"Emitter"};

} // namespace EOB_EquipmentRecordType_Names

void EOB_EquipmentRecordType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EOB_EquipmentRecordType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EOB_EquipmentRecordType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EOB_EquipmentRecordType_Names::WeaponSystem_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWeaponSystem(*value);
      }
    } else if (valueType.first == nsPrefix + EOB_EquipmentRecordType_Names::Emitter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EOB_EquipmentRecordType::Emitter& boundedList = accessor.getEmitter();
        const uci::type::EOB_EquipmentRecordType::Emitter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EOB_EmitterType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  BaseEOB_RecordType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string EOB_EquipmentRecordType::serialize(const uci::type::EOB_EquipmentRecordType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EOB_EquipmentRecordType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EOB_EquipmentRecordType_Names::Extern_Type_Name);
  }
  BaseEOB_RecordType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasWeaponSystem()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getWeaponSystem(), node, EOB_EquipmentRecordType_Names::WeaponSystem_Name);
  }
  {
    const uci::type::EOB_EquipmentRecordType::Emitter& boundedList = accessor.getEmitter();
    for (uci::type::EOB_EquipmentRecordType::Emitter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EOB_EmitterType::serialize(boundedList.at(i), node, EOB_EquipmentRecordType_Names::Emitter_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EOB_EquipmentRecordType& EOB_EquipmentRecordType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EOB_EquipmentRecordType>().release());
}

uci::type::EOB_EquipmentRecordType& EOB_EquipmentRecordType::create(const uci::type::EOB_EquipmentRecordType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EOB_EquipmentRecordType> newAccessor{boost::make_unique<asb_uci::type::EOB_EquipmentRecordType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EOB_EquipmentRecordType::destroy(uci::type::EOB_EquipmentRecordType& accessor) {
  delete dynamic_cast<asb_uci::type::EOB_EquipmentRecordType*>(&accessor);
}

} // namespace type

} // namespace uci

