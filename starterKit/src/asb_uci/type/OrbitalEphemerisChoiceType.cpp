/** @file OrbitalEphemerisChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalEphemerisChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitalKinematicsRelativeEphemerisType.h"
#include "asb_uci/type/OrbitalKinematicsStandardEphemerisType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/OrbitalEphemerisChoiceType.h"
#include "uci/type/OrbitalKinematicsRelativeEphemerisType.h"
#include "uci/type/OrbitalKinematicsStandardEphemerisType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalEphemerisChoiceType::OrbitalEphemerisChoiceType() = default;

OrbitalEphemerisChoiceType::~OrbitalEphemerisChoiceType() = default;

void OrbitalEphemerisChoiceType::copy(const uci::type::OrbitalEphemerisChoiceType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalEphemerisChoiceType::copyImpl(const uci::type::OrbitalEphemerisChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalEphemerisChoiceType&>(accessor);
    if (accessorImpl.standardFrame_Accessor) {
      setStandardFrame(*(accessorImpl.standardFrame_Accessor));
    } else {
      standardFrame_Accessor.reset();
    }
    if (accessorImpl.orbitingObjectRelative_Accessor) {
      setOrbitingObjectRelative(*(accessorImpl.orbitingObjectRelative_Accessor));
    } else {
      orbitingObjectRelative_Accessor.reset();
    }
  }
}

void OrbitalEphemerisChoiceType::reset() noexcept {
  standardFrame_Accessor.reset();
  orbitingObjectRelative_Accessor.reset();
}

uci::type::OrbitalEphemerisChoiceType::OrbitalEphemerisChoiceTypeChoice OrbitalEphemerisChoiceType::getOrbitalEphemerisChoiceTypeChoiceOrdinal() const noexcept {
  if (standardFrame_Accessor) {
    return ORBITALEPHEMERISCHOICETYPE_CHOICE_STANDARDFRAME;
  }
  if (orbitingObjectRelative_Accessor) {
    return ORBITALEPHEMERISCHOICETYPE_CHOICE_ORBITINGOBJECTRELATIVE;
  }
  return ORBITALEPHEMERISCHOICETYPE_CHOICE_NONE;
}

uci::type::OrbitalEphemerisChoiceType& OrbitalEphemerisChoiceType::setOrbitalEphemerisChoiceTypeChoiceOrdinal(uci::type::OrbitalEphemerisChoiceType::OrbitalEphemerisChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITALEPHEMERISCHOICETYPE_CHOICE_STANDARDFRAME:
      chooseStandardFrame("setOrbitalEphemerisChoiceTypeChoiceOrdinal", type);
      break;
    case ORBITALEPHEMERISCHOICETYPE_CHOICE_ORBITINGOBJECTRELATIVE:
      chooseOrbitingObjectRelative("setOrbitalEphemerisChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitalEphemerisChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OrbitalKinematicsStandardEphemerisType& OrbitalEphemerisChoiceType::getStandardFrame_() const {
  if (standardFrame_Accessor) {
    return *standardFrame_Accessor;
  }
  throw uci::base::UCIException("Error in getStandardFrame(): Unable to get StandardFrame, field not selected");
}

const uci::type::OrbitalKinematicsStandardEphemerisType& OrbitalEphemerisChoiceType::getStandardFrame() const {
  return getStandardFrame_();
}

uci::type::OrbitalKinematicsStandardEphemerisType& OrbitalEphemerisChoiceType::getStandardFrame() {
  return getStandardFrame_();
}

uci::type::OrbitalEphemerisChoiceType& OrbitalEphemerisChoiceType::setStandardFrame(const uci::type::OrbitalKinematicsStandardEphemerisType& accessor) {
  chooseStandardFrame(accessor.getAccessorType());
  if (&accessor != standardFrame_Accessor.get()) {
    standardFrame_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalEphemerisChoiceType::isStandardFrame() const noexcept {
  return static_cast<bool>(standardFrame_Accessor);
}

uci::type::OrbitalKinematicsStandardEphemerisType& OrbitalEphemerisChoiceType::chooseStandardFrame(const std::string& method, uci::base::accessorType::AccessorType type) {
  orbitingObjectRelative_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsStandardEphemerisType : type};
  if ((!standardFrame_Accessor) || (standardFrame_Accessor->getAccessorType() != requestedType)) {
    standardFrame_Accessor = OrbitalKinematicsStandardEphemerisType::create(type);
    if (!standardFrame_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *standardFrame_Accessor;
}

uci::type::OrbitalKinematicsStandardEphemerisType& OrbitalEphemerisChoiceType::chooseStandardFrame(uci::base::accessorType::AccessorType type) {
  return chooseStandardFrame("chooseStandardFrame", type);
}

uci::type::OrbitalKinematicsRelativeEphemerisType& OrbitalEphemerisChoiceType::getOrbitingObjectRelative_() const {
  if (orbitingObjectRelative_Accessor) {
    return *orbitingObjectRelative_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitingObjectRelative(): Unable to get OrbitingObjectRelative, field not selected");
}

const uci::type::OrbitalKinematicsRelativeEphemerisType& OrbitalEphemerisChoiceType::getOrbitingObjectRelative() const {
  return getOrbitingObjectRelative_();
}

uci::type::OrbitalKinematicsRelativeEphemerisType& OrbitalEphemerisChoiceType::getOrbitingObjectRelative() {
  return getOrbitingObjectRelative_();
}

uci::type::OrbitalEphemerisChoiceType& OrbitalEphemerisChoiceType::setOrbitingObjectRelative(const uci::type::OrbitalKinematicsRelativeEphemerisType& accessor) {
  chooseOrbitingObjectRelative();
  if (&accessor != orbitingObjectRelative_Accessor.get()) {
    orbitingObjectRelative_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalEphemerisChoiceType::isOrbitingObjectRelative() const noexcept {
  return static_cast<bool>(orbitingObjectRelative_Accessor);
}

uci::type::OrbitalKinematicsRelativeEphemerisType& OrbitalEphemerisChoiceType::chooseOrbitingObjectRelative(const std::string& method, uci::base::accessorType::AccessorType type) {
  standardFrame_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsRelativeEphemerisType : type};
  if ((!orbitingObjectRelative_Accessor) || (orbitingObjectRelative_Accessor->getAccessorType() != requestedType)) {
    orbitingObjectRelative_Accessor = OrbitalKinematicsRelativeEphemerisType::create(type);
    if (!orbitingObjectRelative_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitingObjectRelative_Accessor;
}

uci::type::OrbitalKinematicsRelativeEphemerisType& OrbitalEphemerisChoiceType::chooseOrbitingObjectRelative(uci::base::accessorType::AccessorType type) {
  return chooseOrbitingObjectRelative("chooseOrbitingObjectRelative", type);
}

std::unique_ptr<OrbitalEphemerisChoiceType> OrbitalEphemerisChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalEphemerisChoiceType : type};
  return (requestedType == uci::type::accessorType::orbitalEphemerisChoiceType) ? boost::make_unique<OrbitalEphemerisChoiceType>() : nullptr;
}

/**  */
namespace OrbitalEphemerisChoiceType_Names {

constexpr const char* Extern_Type_Name{"OrbitalEphemerisChoiceType"};
constexpr const char* StandardFrame_Name{"StandardFrame"};
constexpr const char* OrbitingObjectRelative_Name{"OrbitingObjectRelative"};

} // namespace OrbitalEphemerisChoiceType_Names

void OrbitalEphemerisChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalEphemerisChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalEphemerisChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalEphemerisChoiceType_Names::StandardFrame_Name) {
      OrbitalKinematicsStandardEphemerisType::deserialize(valueType.second, accessor.chooseStandardFrame(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalEphemerisChoiceType_Names::OrbitingObjectRelative_Name) {
      OrbitalKinematicsRelativeEphemerisType::deserialize(valueType.second, accessor.chooseOrbitingObjectRelative(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalEphemerisChoiceType::serialize(const uci::type::OrbitalEphemerisChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalEphemerisChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalEphemerisChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isStandardFrame()) {
    OrbitalKinematicsStandardEphemerisType::serialize(accessor.getStandardFrame(), node, OrbitalEphemerisChoiceType_Names::StandardFrame_Name);
  } else if (accessor.isOrbitingObjectRelative()) {
    OrbitalKinematicsRelativeEphemerisType::serialize(accessor.getOrbitingObjectRelative(), node, OrbitalEphemerisChoiceType_Names::OrbitingObjectRelative_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalEphemerisChoiceType& OrbitalEphemerisChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalEphemerisChoiceType>().release());
}

uci::type::OrbitalEphemerisChoiceType& OrbitalEphemerisChoiceType::create(const uci::type::OrbitalEphemerisChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalEphemerisChoiceType> newAccessor{boost::make_unique<asb_uci::type::OrbitalEphemerisChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalEphemerisChoiceType::destroy(uci::type::OrbitalEphemerisChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalEphemerisChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

