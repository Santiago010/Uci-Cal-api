/** @file AO_CapabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AO_CapabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AO_CapabilityEnum.h"
#include "../../../include/asb_uci/type/AO_CapabilityOptionsType.h"
#include "../../../include/asb_uci/type/AO_MessageOutputsEnum.h"
#include "../../../include/asb_uci/type/CommandableCapabilityDeclarationType.h"
#include "../../../include/asb_uci/type/ComponentID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AO_CapabilityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AO_CapabilityOptionsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AO_CapabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AO_MessageOutputsEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AO_CapabilityType::AO_CapabilityType()
  : capabilityType_Accessor{boost::make_unique<AO_CapabilityEnum>()},
    capabilityOptions_Accessor{boost::make_unique<AO_CapabilityOptionsType>()},
    associatedComponentID_Accessor{boost::make_unique<AssociatedComponentID>(0, SIZE_MAX)},
    messageOutput_Accessor{boost::make_unique<MessageOutput>(0, 2)} {
}

AO_CapabilityType::~AO_CapabilityType() = default;

void AO_CapabilityType::copy(const uci::type::AO_CapabilityType& accessor) {
  copyImpl(accessor, false);
}

void AO_CapabilityType::copyImpl(const uci::type::AO_CapabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CommandableCapabilityDeclarationType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const AO_CapabilityType&>(accessor);
    setCapabilityType(*(accessorImpl.capabilityType_Accessor));
    setCapabilityOptions(*(accessorImpl.capabilityOptions_Accessor));
    setEyeSafe(accessorImpl.eyeSafe_Accessor);
    setAssociatedComponentID(*(accessorImpl.associatedComponentID_Accessor));
    setMessageOutput(*(accessorImpl.messageOutput_Accessor));
  }
}

void AO_CapabilityType::reset() noexcept {
  CommandableCapabilityDeclarationType::reset();
  capabilityType_Accessor->reset();
  capabilityOptions_Accessor->reset();
  eyeSafe_Accessor = false;
  associatedComponentID_Accessor->reset();
  messageOutput_Accessor->reset();
}

const uci::type::AO_CapabilityEnum& AO_CapabilityType::getCapabilityType() const {
  return *capabilityType_Accessor;
}

uci::type::AO_CapabilityEnum& AO_CapabilityType::getCapabilityType() {
  return *capabilityType_Accessor;
}

uci::type::AO_CapabilityType& AO_CapabilityType::setCapabilityType(const uci::type::AO_CapabilityEnum& accessor) {
  if (&accessor != capabilityType_Accessor.get()) {
    capabilityType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AO_CapabilityType& AO_CapabilityType::setCapabilityType(uci::type::AO_CapabilityEnum::EnumerationItem value) {
  capabilityType_Accessor->setValue(value);
  return *this;
}


const uci::type::AO_CapabilityOptionsType& AO_CapabilityType::getCapabilityOptions() const {
  return *capabilityOptions_Accessor;
}

uci::type::AO_CapabilityOptionsType& AO_CapabilityType::getCapabilityOptions() {
  return *capabilityOptions_Accessor;
}

uci::type::AO_CapabilityType& AO_CapabilityType::setCapabilityOptions(const uci::type::AO_CapabilityOptionsType& accessor) {
  if (&accessor != capabilityOptions_Accessor.get()) {
    capabilityOptions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean AO_CapabilityType::getEyeSafe() const {
  return eyeSafe_Accessor;
}

uci::type::AO_CapabilityType& AO_CapabilityType::setEyeSafe(xs::Boolean value) {
  eyeSafe_Accessor = value;
  return *this;
}


const uci::type::AO_CapabilityType::AssociatedComponentID& AO_CapabilityType::getAssociatedComponentID() const {
  return *associatedComponentID_Accessor;
}

uci::type::AO_CapabilityType::AssociatedComponentID& AO_CapabilityType::getAssociatedComponentID() {
  return *associatedComponentID_Accessor;
}

uci::type::AO_CapabilityType& AO_CapabilityType::setAssociatedComponentID(const uci::type::AO_CapabilityType::AssociatedComponentID& accessor) {
  if (&accessor != associatedComponentID_Accessor.get()) {
    associatedComponentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AO_CapabilityType::MessageOutput& AO_CapabilityType::getMessageOutput() const {
  return *messageOutput_Accessor;
}

uci::type::AO_CapabilityType::MessageOutput& AO_CapabilityType::getMessageOutput() {
  return *messageOutput_Accessor;
}

uci::type::AO_CapabilityType& AO_CapabilityType::setMessageOutput(const uci::type::AO_CapabilityType::MessageOutput& accessor) {
  if (&accessor != messageOutput_Accessor.get()) {
    messageOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<AO_CapabilityType> AO_CapabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_CapabilityType : type};
  return (requestedType == uci::type::accessorType::aO_CapabilityType) ? boost::make_unique<AO_CapabilityType>() : nullptr;
}

/**  */
namespace AO_CapabilityType_Names {

constexpr const char* Extern_Type_Name{"AO_CapabilityType"};
constexpr const char* CapabilityType_Name{"CapabilityType"};
constexpr const char* CapabilityOptions_Name{"CapabilityOptions"};
constexpr const char* EyeSafe_Name{"EyeSafe"};
constexpr const char* AssociatedComponentID_Name{"AssociatedComponentID"};
constexpr const char* MessageOutput_Name{"MessageOutput"};

} // namespace AO_CapabilityType_Names

void AO_CapabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AO_CapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AO_CapabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AO_CapabilityType_Names::CapabilityType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCapabilityType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AO_CapabilityType_Names::CapabilityOptions_Name) {
      AO_CapabilityOptionsType::deserialize(valueType.second, accessor.getCapabilityOptions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AO_CapabilityType_Names::EyeSafe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEyeSafe(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + AO_CapabilityType_Names::AssociatedComponentID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AO_CapabilityType::AssociatedComponentID& boundedList = accessor.getAssociatedComponentID();
        const uci::type::AO_CapabilityType::AssociatedComponentID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ComponentID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + AO_CapabilityType_Names::MessageOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AO_CapabilityType::MessageOutput& boundedList = accessor.getMessageOutput();
        const uci::type::AO_CapabilityType::MessageOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    }
  }
  CommandableCapabilityDeclarationType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string AO_CapabilityType::serialize(const uci::type::AO_CapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AO_CapabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AO_CapabilityType_Names::Extern_Type_Name);
  }
  CommandableCapabilityDeclarationType::serialize(accessor, node, "", false, false, false);
  AO_CapabilityEnum::serialize(accessor.getCapabilityType(), node, AO_CapabilityType_Names::CapabilityType_Name, false);
  AO_CapabilityOptionsType::serialize(accessor.getCapabilityOptions(), node, AO_CapabilityType_Names::CapabilityOptions_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getEyeSafe(), node, AO_CapabilityType_Names::EyeSafe_Name);
  {
    const uci::type::AO_CapabilityType::AssociatedComponentID& boundedList = accessor.getAssociatedComponentID();
    for (uci::type::AO_CapabilityType::AssociatedComponentID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ComponentID_Type::serialize(boundedList.at(i), node, AO_CapabilityType_Names::AssociatedComponentID_Name);
    }
  }
  {
    const uci::type::AO_CapabilityType::MessageOutput& boundedList = accessor.getMessageOutput();
    for (uci::type::AO_CapabilityType::MessageOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      AO_MessageOutputsEnum::serialize(boundedList.at(i), node, AO_CapabilityType_Names::MessageOutput_Name, false);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AO_CapabilityType& AO_CapabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AO_CapabilityType>().release());
}

uci::type::AO_CapabilityType& AO_CapabilityType::create(const uci::type::AO_CapabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AO_CapabilityType> newAccessor{boost::make_unique<asb_uci::type::AO_CapabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AO_CapabilityType::destroy(uci::type::AO_CapabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::AO_CapabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

