/** @file MeasurementSourceIdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MeasurementSourceIdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityID_Type.h"
#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/SatelliteIdentifierType.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/type/TaskID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityID_Type.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/MeasurementSourceIdentityType.h"
#include "uci/type/SatelliteIdentifierType.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/TaskID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MeasurementSourceIdentityType::MeasurementSourceIdentityType() = default;

MeasurementSourceIdentityType::~MeasurementSourceIdentityType() = default;

void MeasurementSourceIdentityType::copy(const uci::type::MeasurementSourceIdentityType& accessor) {
  copyImpl(accessor, false);
}

void MeasurementSourceIdentityType::copyImpl(const uci::type::MeasurementSourceIdentityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MeasurementSourceIdentityType&>(accessor);
    if (accessorImpl.capabilityID_Accessor) {
      setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    } else {
      capabilityID_Accessor.reset();
    }
    if (accessorImpl.taskID_Accessor) {
      setTaskID(*(accessorImpl.taskID_Accessor));
    } else {
      taskID_Accessor.reset();
    }
    if (accessorImpl.activityID_Accessor) {
      setActivityID(*(accessorImpl.activityID_Accessor));
    } else {
      activityID_Accessor.reset();
    }
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
    if (accessorImpl.serviceID_Accessor) {
      setServiceID(*(accessorImpl.serviceID_Accessor));
    } else {
      serviceID_Accessor.reset();
    }
    if (accessorImpl.subsystemID_Accessor) {
      setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    } else {
      subsystemID_Accessor.reset();
    }
    if (accessorImpl.entityID_Accessor) {
      setEntityID(*(accessorImpl.entityID_Accessor));
    } else {
      entityID_Accessor.reset();
    }
    if (accessorImpl.hasSensorSystemIdentity()) {
      setSensorSystemIdentity(accessorImpl.getSensorSystemIdentity());
    } else {
      clearSensorSystemIdentity();
    }
    if (accessorImpl.satellite_Accessor) {
      setSatellite(*(accessorImpl.satellite_Accessor));
    } else {
      satellite_Accessor.reset();
    }
  }
}

void MeasurementSourceIdentityType::reset() noexcept {
  capabilityID_Accessor.reset();
  taskID_Accessor.reset();
  activityID_Accessor.reset();
  systemID_Accessor.reset();
  serviceID_Accessor.reset();
  subsystemID_Accessor.reset();
  entityID_Accessor.reset();
  clearSensorSystemIdentity();
  satellite_Accessor.reset();
}

uci::type::CapabilityID_Type& MeasurementSourceIdentityType::getCapabilityID_() const {
  if (capabilityID_Accessor) {
    return *capabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasCapabilityID() to determine if it is safe to call getCapabilityID()");
}

const uci::type::CapabilityID_Type& MeasurementSourceIdentityType::getCapabilityID() const {
  return getCapabilityID_();
}

uci::type::CapabilityID_Type& MeasurementSourceIdentityType::getCapabilityID() {
  return getCapabilityID_();
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableCapabilityID();
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementSourceIdentityType::hasCapabilityID() const noexcept {
  return static_cast<bool>(capabilityID_Accessor);
}

uci::type::CapabilityID_Type& MeasurementSourceIdentityType::enableCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!capabilityID_Accessor) || (capabilityID_Accessor->getAccessorType() != requestedType)) {
    capabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!capabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityID_Accessor;
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::clearCapabilityID() noexcept {
  capabilityID_Accessor.reset();
  return *this;
}

uci::type::TaskID_Type& MeasurementSourceIdentityType::getTaskID_() const {
  if (taskID_Accessor) {
    return *taskID_Accessor;
  }
  throw uci::base::UCIException("Error in getTaskID(): An attempt was made to get an optional field that was not enabled, call hasTaskID() to determine if it is safe to call getTaskID()");
}

const uci::type::TaskID_Type& MeasurementSourceIdentityType::getTaskID() const {
  return getTaskID_();
}

uci::type::TaskID_Type& MeasurementSourceIdentityType::getTaskID() {
  return getTaskID_();
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::setTaskID(const uci::type::TaskID_Type& accessor) {
  enableTaskID();
  if (&accessor != taskID_Accessor.get()) {
    taskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementSourceIdentityType::hasTaskID() const noexcept {
  return static_cast<bool>(taskID_Accessor);
}

uci::type::TaskID_Type& MeasurementSourceIdentityType::enableTaskID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskID_Type : type};
  if ((!taskID_Accessor) || (taskID_Accessor->getAccessorType() != requestedType)) {
    taskID_Accessor = TaskID_Type::create(requestedType);
    if (!taskID_Accessor) {
      throw uci::base::UCIException("Error in enableTaskID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taskID_Accessor;
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::clearTaskID() noexcept {
  taskID_Accessor.reset();
  return *this;
}

uci::type::ActivityID_Type& MeasurementSourceIdentityType::getActivityID_() const {
  if (activityID_Accessor) {
    return *activityID_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityID(): An attempt was made to get an optional field that was not enabled, call hasActivityID() to determine if it is safe to call getActivityID()");
}

const uci::type::ActivityID_Type& MeasurementSourceIdentityType::getActivityID() const {
  return getActivityID_();
}

uci::type::ActivityID_Type& MeasurementSourceIdentityType::getActivityID() {
  return getActivityID_();
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::setActivityID(const uci::type::ActivityID_Type& accessor) {
  enableActivityID();
  if (&accessor != activityID_Accessor.get()) {
    activityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementSourceIdentityType::hasActivityID() const noexcept {
  return static_cast<bool>(activityID_Accessor);
}

uci::type::ActivityID_Type& MeasurementSourceIdentityType::enableActivityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityID_Type : type};
  if ((!activityID_Accessor) || (activityID_Accessor->getAccessorType() != requestedType)) {
    activityID_Accessor = ActivityID_Type::create(requestedType);
    if (!activityID_Accessor) {
      throw uci::base::UCIException("Error in enableActivityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityID_Accessor;
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::clearActivityID() noexcept {
  activityID_Accessor.reset();
  return *this;
}

uci::type::SystemID_Type& MeasurementSourceIdentityType::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): An attempt was made to get an optional field that was not enabled, call hasSystemID() to determine if it is safe to call getSystemID()");
}

const uci::type::SystemID_Type& MeasurementSourceIdentityType::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& MeasurementSourceIdentityType::getSystemID() {
  return getSystemID_();
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::setSystemID(const uci::type::SystemID_Type& accessor) {
  enableSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementSourceIdentityType::hasSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& MeasurementSourceIdentityType::enableSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(requestedType);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::clearSystemID() noexcept {
  systemID_Accessor.reset();
  return *this;
}

uci::type::ServiceID_Type& MeasurementSourceIdentityType::getServiceID_() const {
  if (serviceID_Accessor) {
    return *serviceID_Accessor;
  }
  throw uci::base::UCIException("Error in getServiceID(): An attempt was made to get an optional field that was not enabled, call hasServiceID() to determine if it is safe to call getServiceID()");
}

const uci::type::ServiceID_Type& MeasurementSourceIdentityType::getServiceID() const {
  return getServiceID_();
}

uci::type::ServiceID_Type& MeasurementSourceIdentityType::getServiceID() {
  return getServiceID_();
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::setServiceID(const uci::type::ServiceID_Type& accessor) {
  enableServiceID();
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementSourceIdentityType::hasServiceID() const noexcept {
  return static_cast<bool>(serviceID_Accessor);
}

uci::type::ServiceID_Type& MeasurementSourceIdentityType::enableServiceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceID_Type : type};
  if ((!serviceID_Accessor) || (serviceID_Accessor->getAccessorType() != requestedType)) {
    serviceID_Accessor = ServiceID_Type::create(requestedType);
    if (!serviceID_Accessor) {
      throw uci::base::UCIException("Error in enableServiceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *serviceID_Accessor;
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::clearServiceID() noexcept {
  serviceID_Accessor.reset();
  return *this;
}

uci::type::SubsystemID_Type& MeasurementSourceIdentityType::getSubsystemID_() const {
  if (subsystemID_Accessor) {
    return *subsystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSubsystemID(): An attempt was made to get an optional field that was not enabled, call hasSubsystemID() to determine if it is safe to call getSubsystemID()");
}

const uci::type::SubsystemID_Type& MeasurementSourceIdentityType::getSubsystemID() const {
  return getSubsystemID_();
}

uci::type::SubsystemID_Type& MeasurementSourceIdentityType::getSubsystemID() {
  return getSubsystemID_();
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  enableSubsystemID();
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementSourceIdentityType::hasSubsystemID() const noexcept {
  return static_cast<bool>(subsystemID_Accessor);
}

uci::type::SubsystemID_Type& MeasurementSourceIdentityType::enableSubsystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemID_Type : type};
  if ((!subsystemID_Accessor) || (subsystemID_Accessor->getAccessorType() != requestedType)) {
    subsystemID_Accessor = SubsystemID_Type::create(requestedType);
    if (!subsystemID_Accessor) {
      throw uci::base::UCIException("Error in enableSubsystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subsystemID_Accessor;
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::clearSubsystemID() noexcept {
  subsystemID_Accessor.reset();
  return *this;
}

uci::type::EntityID_Type& MeasurementSourceIdentityType::getEntityID_() const {
  if (entityID_Accessor) {
    return *entityID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityID(): An attempt was made to get an optional field that was not enabled, call hasEntityID() to determine if it is safe to call getEntityID()");
}

const uci::type::EntityID_Type& MeasurementSourceIdentityType::getEntityID() const {
  return getEntityID_();
}

uci::type::EntityID_Type& MeasurementSourceIdentityType::getEntityID() {
  return getEntityID_();
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool MeasurementSourceIdentityType::hasEntityID() const noexcept {
  return static_cast<bool>(entityID_Accessor);
}

uci::type::EntityID_Type& MeasurementSourceIdentityType::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::clearEntityID() noexcept {
  entityID_Accessor.reset();
  return *this;
}

xs::UnsignedShort MeasurementSourceIdentityType::getSensorSystemIdentity() const {
  if (sensorSystemIdentity_Accessor) {
    return *sensorSystemIdentity_Accessor;
  }
  throw uci::base::UCIException("Error in getSensorSystemIdentity(): An attempt was made to get an optional field that was not enabled, call hasSensorSystemIdentity() to determine if it is safe to call getSensorSystemIdentity()");
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::setSensorSystemIdentity(xs::UnsignedShort value) {
  sensorSystemIdentity_Accessor = value;
  return *this;
}

bool MeasurementSourceIdentityType::hasSensorSystemIdentity() const noexcept {
  return sensorSystemIdentity_Accessor.has_value();
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::clearSensorSystemIdentity() noexcept {
  sensorSystemIdentity_Accessor.reset();
  return *this;
}

uci::type::SatelliteIdentifierType& MeasurementSourceIdentityType::getSatellite_() const {
  if (satellite_Accessor) {
    return *satellite_Accessor;
  }
  throw uci::base::UCIException("Error in getSatellite(): An attempt was made to get an optional field that was not enabled, call hasSatellite() to determine if it is safe to call getSatellite()");
}

const uci::type::SatelliteIdentifierType& MeasurementSourceIdentityType::getSatellite() const {
  return getSatellite_();
}

uci::type::SatelliteIdentifierType& MeasurementSourceIdentityType::getSatellite() {
  return getSatellite_();
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::setSatellite(const uci::type::SatelliteIdentifierType& accessor) {
  enableSatellite();
  if (&accessor != satellite_Accessor.get()) {
    satellite_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementSourceIdentityType::hasSatellite() const noexcept {
  return static_cast<bool>(satellite_Accessor);
}

uci::type::SatelliteIdentifierType& MeasurementSourceIdentityType::enableSatellite(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteIdentifierType : type};
  if ((!satellite_Accessor) || (satellite_Accessor->getAccessorType() != requestedType)) {
    satellite_Accessor = SatelliteIdentifierType::create(requestedType);
    if (!satellite_Accessor) {
      throw uci::base::UCIException("Error in enableSatellite(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *satellite_Accessor;
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::clearSatellite() noexcept {
  satellite_Accessor.reset();
  return *this;
}

std::unique_ptr<MeasurementSourceIdentityType> MeasurementSourceIdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::measurementSourceIdentityType : type};
  return (requestedType == uci::type::accessorType::measurementSourceIdentityType) ? boost::make_unique<MeasurementSourceIdentityType>() : nullptr;
}

/**  */
namespace MeasurementSourceIdentityType_Names {

constexpr const char* Extern_Type_Name{"MeasurementSourceIdentityType"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* TaskID_Name{"TaskID"};
constexpr const char* ActivityID_Name{"ActivityID"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* SensorSystemIdentity_Name{"SensorSystemIdentity"};
constexpr const char* Satellite_Name{"Satellite"};

} // namespace MeasurementSourceIdentityType_Names

void MeasurementSourceIdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MeasurementSourceIdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MeasurementSourceIdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MeasurementSourceIdentityType_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementSourceIdentityType_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.enableTaskID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementSourceIdentityType_Names::ActivityID_Name) {
      ActivityID_Type::deserialize(valueType.second, accessor.enableActivityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementSourceIdentityType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementSourceIdentityType_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.enableServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementSourceIdentityType_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.enableSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementSourceIdentityType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementSourceIdentityType_Names::SensorSystemIdentity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSensorSystemIdentity(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + MeasurementSourceIdentityType_Names::Satellite_Name) {
      SatelliteIdentifierType::deserialize(valueType.second, accessor.enableSatellite(), nodeName, nsPrefix);
    }
  }
}

std::string MeasurementSourceIdentityType::serialize(const uci::type::MeasurementSourceIdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MeasurementSourceIdentityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MeasurementSourceIdentityType_Names::Extern_Type_Name);
  }
  if (accessor.hasCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getCapabilityID(), node, MeasurementSourceIdentityType_Names::CapabilityID_Name);
  }
  if (accessor.hasTaskID()) {
    TaskID_Type::serialize(accessor.getTaskID(), node, MeasurementSourceIdentityType_Names::TaskID_Name);
  }
  if (accessor.hasActivityID()) {
    ActivityID_Type::serialize(accessor.getActivityID(), node, MeasurementSourceIdentityType_Names::ActivityID_Name);
  }
  if (accessor.hasSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, MeasurementSourceIdentityType_Names::SystemID_Name);
  }
  if (accessor.hasServiceID()) {
    ServiceID_Type::serialize(accessor.getServiceID(), node, MeasurementSourceIdentityType_Names::ServiceID_Name);
  }
  if (accessor.hasSubsystemID()) {
    SubsystemID_Type::serialize(accessor.getSubsystemID(), node, MeasurementSourceIdentityType_Names::SubsystemID_Name);
  }
  if (accessor.hasEntityID()) {
    EntityID_Type::serialize(accessor.getEntityID(), node, MeasurementSourceIdentityType_Names::EntityID_Name);
  }
  if (accessor.hasSensorSystemIdentity()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getSensorSystemIdentity(), node, MeasurementSourceIdentityType_Names::SensorSystemIdentity_Name);
  }
  if (accessor.hasSatellite()) {
    SatelliteIdentifierType::serialize(accessor.getSatellite(), node, MeasurementSourceIdentityType_Names::Satellite_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MeasurementSourceIdentityType>().release());
}

uci::type::MeasurementSourceIdentityType& MeasurementSourceIdentityType::create(const uci::type::MeasurementSourceIdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MeasurementSourceIdentityType> newAccessor{boost::make_unique<asb_uci::type::MeasurementSourceIdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MeasurementSourceIdentityType::destroy(uci::type::MeasurementSourceIdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::MeasurementSourceIdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

