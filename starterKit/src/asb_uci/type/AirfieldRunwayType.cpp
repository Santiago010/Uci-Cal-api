/** @file AirfieldRunwayType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AirfieldRunwayType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ApproachLightingEnum.h"
#include "../../../include/asb_uci/type/ArresterWiresEnum.h"
#include "../../../include/asb_uci/type/BrakingActionEnum.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/RunwayCoordinatesType.h"
#include "../../../include/asb_uci/type/RunwayID_Type.h"
#include "../../../include/asb_uci/type/RunwayStatusEnum.h"
#include "../../../include/asb_uci/type/RunwayUsageDetailsType.h"
#include "../../../include/asb_uci/type/SafeAltitudeType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirfieldRunwayType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnglePositiveType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApproachLightingEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ArresterWiresEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BrakingActionEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RunwayCoordinatesType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RunwayID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RunwayStatusEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RunwayUsageDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SafeAltitudeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AirfieldRunwayType::AirfieldRunwayType()
  : runwayID_Accessor{boost::make_unique<RunwayID_Type>()} {
}

AirfieldRunwayType::~AirfieldRunwayType() = default;

void AirfieldRunwayType::copy(const uci::type::AirfieldRunwayType& accessor) {
  copyImpl(accessor, false);
}

void AirfieldRunwayType::copyImpl(const uci::type::AirfieldRunwayType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AirfieldRunwayType&>(accessor);
    setRunwayID(*(accessorImpl.runwayID_Accessor));
    if (accessorImpl.secondaryIndicator_Accessor) {
      setSecondaryIndicator(*(accessorImpl.secondaryIndicator_Accessor));
    } else {
      secondaryIndicator_Accessor.reset();
    }
    if (accessorImpl.status_Accessor) {
      setStatus(*(accessorImpl.status_Accessor));
    } else {
      status_Accessor.reset();
    }
    if (accessorImpl.hasDirection()) {
      setDirection(accessorImpl.getDirection());
    } else {
      clearDirection();
    }
    if (accessorImpl.hasAvailableLength()) {
      setAvailableLength(accessorImpl.getAvailableLength());
    } else {
      clearAvailableLength();
    }
    if (accessorImpl.gCA_Accessor) {
      setGCA(*(accessorImpl.gCA_Accessor));
    } else {
      gCA_Accessor.reset();
    }
    if (accessorImpl.iLS_Accessor) {
      setILS(*(accessorImpl.iLS_Accessor));
    } else {
      iLS_Accessor.reset();
    }
    if (accessorImpl.approachLighting_Accessor) {
      setApproachLighting(*(accessorImpl.approachLighting_Accessor));
    } else {
      approachLighting_Accessor.reset();
    }
    if (accessorImpl.arresterWires_Accessor) {
      setArresterWires(*(accessorImpl.arresterWires_Accessor));
    } else {
      arresterWires_Accessor.reset();
    }
    if (accessorImpl.arresterBarrier_Accessor) {
      setArresterBarrier(*(accessorImpl.arresterBarrier_Accessor));
    } else {
      arresterBarrier_Accessor.reset();
    }
    if (accessorImpl.brakingAction_Accessor) {
      setBrakingAction(*(accessorImpl.brakingAction_Accessor));
    } else {
      brakingAction_Accessor.reset();
    }
    if (accessorImpl.hasVisualRange()) {
      setVisualRange(accessorImpl.getVisualRange());
    } else {
      clearVisualRange();
    }
    if (accessorImpl.takeoffCoordinates_Accessor) {
      setTakeoffCoordinates(*(accessorImpl.takeoffCoordinates_Accessor));
    } else {
      takeoffCoordinates_Accessor.reset();
    }
    if (accessorImpl.landingCoordinates_Accessor) {
      setLandingCoordinates(*(accessorImpl.landingCoordinates_Accessor));
    } else {
      landingCoordinates_Accessor.reset();
    }
    if (accessorImpl.defaultRunwayUsageDetails_Accessor) {
      setDefaultRunwayUsageDetails(*(accessorImpl.defaultRunwayUsageDetails_Accessor));
    } else {
      defaultRunwayUsageDetails_Accessor.reset();
    }
    if (accessorImpl.safeAltitude_Accessor) {
      setSafeAltitude(*(accessorImpl.safeAltitude_Accessor));
    } else {
      safeAltitude_Accessor.reset();
    }
    if (accessorImpl.dAFIF_RunwayIdentifier_Accessor) {
      setDAFIF_RunwayIdentifier(*(accessorImpl.dAFIF_RunwayIdentifier_Accessor));
    } else {
      dAFIF_RunwayIdentifier_Accessor.reset();
    }
  }
}

void AirfieldRunwayType::reset() noexcept {
  runwayID_Accessor->reset();
  secondaryIndicator_Accessor.reset();
  status_Accessor.reset();
  clearDirection();
  clearAvailableLength();
  gCA_Accessor.reset();
  iLS_Accessor.reset();
  approachLighting_Accessor.reset();
  arresterWires_Accessor.reset();
  arresterBarrier_Accessor.reset();
  brakingAction_Accessor.reset();
  clearVisualRange();
  takeoffCoordinates_Accessor.reset();
  landingCoordinates_Accessor.reset();
  defaultRunwayUsageDetails_Accessor.reset();
  safeAltitude_Accessor.reset();
  dAFIF_RunwayIdentifier_Accessor.reset();
}

const uci::type::RunwayID_Type& AirfieldRunwayType::getRunwayID() const {
  return *runwayID_Accessor;
}

uci::type::RunwayID_Type& AirfieldRunwayType::getRunwayID() {
  return *runwayID_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setRunwayID(const uci::type::RunwayID_Type& accessor) {
  if (&accessor != runwayID_Accessor.get()) {
    runwayID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EmptyType& AirfieldRunwayType::getSecondaryIndicator_() const {
  if (secondaryIndicator_Accessor) {
    return *secondaryIndicator_Accessor;
  }
  throw uci::base::UCIException("Error in getSecondaryIndicator(): An attempt was made to get an optional field that was not enabled, call hasSecondaryIndicator() to determine if it is safe to call getSecondaryIndicator()");
}

const uci::type::EmptyType& AirfieldRunwayType::getSecondaryIndicator() const {
  return getSecondaryIndicator_();
}

uci::type::EmptyType& AirfieldRunwayType::getSecondaryIndicator() {
  return getSecondaryIndicator_();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setSecondaryIndicator(const uci::type::EmptyType& value) {
  return setSecondaryIndicator(value.c_str());
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setSecondaryIndicator(const std::string& value) {
  return setSecondaryIndicator(value.c_str());
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setSecondaryIndicator(const char* value) {
  enableSecondaryIndicator().setStringValue(value);
  return *this;
}

bool AirfieldRunwayType::hasSecondaryIndicator() const noexcept {
  return static_cast<bool>(secondaryIndicator_Accessor);
}

uci::type::EmptyType& AirfieldRunwayType::enableSecondaryIndicator(uci::base::accessorType::AccessorType type) {
  if (!secondaryIndicator_Accessor) {
    secondaryIndicator_Accessor = EmptyType::create(type);
  }
  return *secondaryIndicator_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearSecondaryIndicator() noexcept {
  secondaryIndicator_Accessor.reset();
  return *this;
}

uci::type::RunwayStatusEnum& AirfieldRunwayType::getStatus_() const {
  if (status_Accessor) {
    return *status_Accessor;
  }
  throw uci::base::UCIException("Error in getStatus(): An attempt was made to get an optional field that was not enabled, call hasStatus() to determine if it is safe to call getStatus()");
}

const uci::type::RunwayStatusEnum& AirfieldRunwayType::getStatus() const {
  return getStatus_();
}

uci::type::RunwayStatusEnum& AirfieldRunwayType::getStatus() {
  return getStatus_();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setStatus(const uci::type::RunwayStatusEnum& accessor) {
  enableStatus();
  if (&accessor != status_Accessor.get()) {
    status_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setStatus(const uci::type::RunwayStatusEnum::EnumerationItem value) {
  enableStatus().setValue(value);
  return *this;
}

bool AirfieldRunwayType::hasStatus() const noexcept {
  return static_cast<bool>(status_Accessor);
}

uci::type::RunwayStatusEnum& AirfieldRunwayType::enableStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::runwayStatusEnum : type};
  if ((!status_Accessor) || (status_Accessor->getAccessorType() != requestedType)) {
    status_Accessor = RunwayStatusEnum::create(requestedType);
    if (!status_Accessor) {
      throw uci::base::UCIException("Error in enableStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *status_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearStatus() noexcept {
  status_Accessor.reset();
  return *this;
}

uci::type::AnglePositiveTypeValue AirfieldRunwayType::getDirection() const {
  if (direction_Accessor) {
    return *direction_Accessor;
  }
  throw uci::base::UCIException("Error in getDirection(): An attempt was made to get an optional field that was not enabled, call hasDirection() to determine if it is safe to call getDirection()");
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setDirection(uci::type::AnglePositiveTypeValue value) {
  direction_Accessor = value;
  return *this;
}

bool AirfieldRunwayType::hasDirection() const noexcept {
  return direction_Accessor.has_value();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearDirection() noexcept {
  direction_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue AirfieldRunwayType::getAvailableLength() const {
  if (availableLength_Accessor) {
    return *availableLength_Accessor;
  }
  throw uci::base::UCIException("Error in getAvailableLength(): An attempt was made to get an optional field that was not enabled, call hasAvailableLength() to determine if it is safe to call getAvailableLength()");
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setAvailableLength(uci::type::DistanceTypeValue value) {
  availableLength_Accessor = value;
  return *this;
}

bool AirfieldRunwayType::hasAvailableLength() const noexcept {
  return availableLength_Accessor.has_value();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearAvailableLength() noexcept {
  availableLength_Accessor.reset();
  return *this;
}

uci::type::EmptyType& AirfieldRunwayType::getGCA_() const {
  if (gCA_Accessor) {
    return *gCA_Accessor;
  }
  throw uci::base::UCIException("Error in getGCA(): An attempt was made to get an optional field that was not enabled, call hasGCA() to determine if it is safe to call getGCA()");
}

const uci::type::EmptyType& AirfieldRunwayType::getGCA() const {
  return getGCA_();
}

uci::type::EmptyType& AirfieldRunwayType::getGCA() {
  return getGCA_();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setGCA(const uci::type::EmptyType& value) {
  return setGCA(value.c_str());
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setGCA(const std::string& value) {
  return setGCA(value.c_str());
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setGCA(const char* value) {
  enableGCA().setStringValue(value);
  return *this;
}

bool AirfieldRunwayType::hasGCA() const noexcept {
  return static_cast<bool>(gCA_Accessor);
}

uci::type::EmptyType& AirfieldRunwayType::enableGCA(uci::base::accessorType::AccessorType type) {
  if (!gCA_Accessor) {
    gCA_Accessor = EmptyType::create(type);
  }
  return *gCA_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearGCA() noexcept {
  gCA_Accessor.reset();
  return *this;
}

uci::type::EmptyType& AirfieldRunwayType::getILS_() const {
  if (iLS_Accessor) {
    return *iLS_Accessor;
  }
  throw uci::base::UCIException("Error in getILS(): An attempt was made to get an optional field that was not enabled, call hasILS() to determine if it is safe to call getILS()");
}

const uci::type::EmptyType& AirfieldRunwayType::getILS() const {
  return getILS_();
}

uci::type::EmptyType& AirfieldRunwayType::getILS() {
  return getILS_();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setILS(const uci::type::EmptyType& value) {
  return setILS(value.c_str());
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setILS(const std::string& value) {
  return setILS(value.c_str());
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setILS(const char* value) {
  enableILS().setStringValue(value);
  return *this;
}

bool AirfieldRunwayType::hasILS() const noexcept {
  return static_cast<bool>(iLS_Accessor);
}

uci::type::EmptyType& AirfieldRunwayType::enableILS(uci::base::accessorType::AccessorType type) {
  if (!iLS_Accessor) {
    iLS_Accessor = EmptyType::create(type);
  }
  return *iLS_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearILS() noexcept {
  iLS_Accessor.reset();
  return *this;
}

uci::type::ApproachLightingEnum& AirfieldRunwayType::getApproachLighting_() const {
  if (approachLighting_Accessor) {
    return *approachLighting_Accessor;
  }
  throw uci::base::UCIException("Error in getApproachLighting(): An attempt was made to get an optional field that was not enabled, call hasApproachLighting() to determine if it is safe to call getApproachLighting()");
}

const uci::type::ApproachLightingEnum& AirfieldRunwayType::getApproachLighting() const {
  return getApproachLighting_();
}

uci::type::ApproachLightingEnum& AirfieldRunwayType::getApproachLighting() {
  return getApproachLighting_();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setApproachLighting(const uci::type::ApproachLightingEnum& accessor) {
  enableApproachLighting();
  if (&accessor != approachLighting_Accessor.get()) {
    approachLighting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setApproachLighting(const uci::type::ApproachLightingEnum::EnumerationItem value) {
  enableApproachLighting().setValue(value);
  return *this;
}

bool AirfieldRunwayType::hasApproachLighting() const noexcept {
  return static_cast<bool>(approachLighting_Accessor);
}

uci::type::ApproachLightingEnum& AirfieldRunwayType::enableApproachLighting(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::approachLightingEnum : type};
  if ((!approachLighting_Accessor) || (approachLighting_Accessor->getAccessorType() != requestedType)) {
    approachLighting_Accessor = ApproachLightingEnum::create(requestedType);
    if (!approachLighting_Accessor) {
      throw uci::base::UCIException("Error in enableApproachLighting(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *approachLighting_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearApproachLighting() noexcept {
  approachLighting_Accessor.reset();
  return *this;
}

uci::type::ArresterWiresEnum& AirfieldRunwayType::getArresterWires_() const {
  if (arresterWires_Accessor) {
    return *arresterWires_Accessor;
  }
  throw uci::base::UCIException("Error in getArresterWires(): An attempt was made to get an optional field that was not enabled, call hasArresterWires() to determine if it is safe to call getArresterWires()");
}

const uci::type::ArresterWiresEnum& AirfieldRunwayType::getArresterWires() const {
  return getArresterWires_();
}

uci::type::ArresterWiresEnum& AirfieldRunwayType::getArresterWires() {
  return getArresterWires_();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setArresterWires(const uci::type::ArresterWiresEnum& accessor) {
  enableArresterWires();
  if (&accessor != arresterWires_Accessor.get()) {
    arresterWires_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setArresterWires(const uci::type::ArresterWiresEnum::EnumerationItem value) {
  enableArresterWires().setValue(value);
  return *this;
}

bool AirfieldRunwayType::hasArresterWires() const noexcept {
  return static_cast<bool>(arresterWires_Accessor);
}

uci::type::ArresterWiresEnum& AirfieldRunwayType::enableArresterWires(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::arresterWiresEnum : type};
  if ((!arresterWires_Accessor) || (arresterWires_Accessor->getAccessorType() != requestedType)) {
    arresterWires_Accessor = ArresterWiresEnum::create(requestedType);
    if (!arresterWires_Accessor) {
      throw uci::base::UCIException("Error in enableArresterWires(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *arresterWires_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearArresterWires() noexcept {
  arresterWires_Accessor.reset();
  return *this;
}

uci::type::EmptyType& AirfieldRunwayType::getArresterBarrier_() const {
  if (arresterBarrier_Accessor) {
    return *arresterBarrier_Accessor;
  }
  throw uci::base::UCIException("Error in getArresterBarrier(): An attempt was made to get an optional field that was not enabled, call hasArresterBarrier() to determine if it is safe to call getArresterBarrier()");
}

const uci::type::EmptyType& AirfieldRunwayType::getArresterBarrier() const {
  return getArresterBarrier_();
}

uci::type::EmptyType& AirfieldRunwayType::getArresterBarrier() {
  return getArresterBarrier_();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setArresterBarrier(const uci::type::EmptyType& value) {
  return setArresterBarrier(value.c_str());
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setArresterBarrier(const std::string& value) {
  return setArresterBarrier(value.c_str());
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setArresterBarrier(const char* value) {
  enableArresterBarrier().setStringValue(value);
  return *this;
}

bool AirfieldRunwayType::hasArresterBarrier() const noexcept {
  return static_cast<bool>(arresterBarrier_Accessor);
}

uci::type::EmptyType& AirfieldRunwayType::enableArresterBarrier(uci::base::accessorType::AccessorType type) {
  if (!arresterBarrier_Accessor) {
    arresterBarrier_Accessor = EmptyType::create(type);
  }
  return *arresterBarrier_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearArresterBarrier() noexcept {
  arresterBarrier_Accessor.reset();
  return *this;
}

uci::type::BrakingActionEnum& AirfieldRunwayType::getBrakingAction_() const {
  if (brakingAction_Accessor) {
    return *brakingAction_Accessor;
  }
  throw uci::base::UCIException("Error in getBrakingAction(): An attempt was made to get an optional field that was not enabled, call hasBrakingAction() to determine if it is safe to call getBrakingAction()");
}

const uci::type::BrakingActionEnum& AirfieldRunwayType::getBrakingAction() const {
  return getBrakingAction_();
}

uci::type::BrakingActionEnum& AirfieldRunwayType::getBrakingAction() {
  return getBrakingAction_();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setBrakingAction(const uci::type::BrakingActionEnum& accessor) {
  enableBrakingAction();
  if (&accessor != brakingAction_Accessor.get()) {
    brakingAction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setBrakingAction(const uci::type::BrakingActionEnum::EnumerationItem value) {
  enableBrakingAction().setValue(value);
  return *this;
}

bool AirfieldRunwayType::hasBrakingAction() const noexcept {
  return static_cast<bool>(brakingAction_Accessor);
}

uci::type::BrakingActionEnum& AirfieldRunwayType::enableBrakingAction(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::brakingActionEnum : type};
  if ((!brakingAction_Accessor) || (brakingAction_Accessor->getAccessorType() != requestedType)) {
    brakingAction_Accessor = BrakingActionEnum::create(requestedType);
    if (!brakingAction_Accessor) {
      throw uci::base::UCIException("Error in enableBrakingAction(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *brakingAction_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearBrakingAction() noexcept {
  brakingAction_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue AirfieldRunwayType::getVisualRange() const {
  if (visualRange_Accessor) {
    return *visualRange_Accessor;
  }
  throw uci::base::UCIException("Error in getVisualRange(): An attempt was made to get an optional field that was not enabled, call hasVisualRange() to determine if it is safe to call getVisualRange()");
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setVisualRange(uci::type::DistanceTypeValue value) {
  visualRange_Accessor = value;
  return *this;
}

bool AirfieldRunwayType::hasVisualRange() const noexcept {
  return visualRange_Accessor.has_value();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearVisualRange() noexcept {
  visualRange_Accessor.reset();
  return *this;
}

uci::type::RunwayCoordinatesType& AirfieldRunwayType::getTakeoffCoordinates_() const {
  if (takeoffCoordinates_Accessor) {
    return *takeoffCoordinates_Accessor;
  }
  throw uci::base::UCIException("Error in getTakeoffCoordinates(): An attempt was made to get an optional field that was not enabled, call hasTakeoffCoordinates() to determine if it is safe to call getTakeoffCoordinates()");
}

const uci::type::RunwayCoordinatesType& AirfieldRunwayType::getTakeoffCoordinates() const {
  return getTakeoffCoordinates_();
}

uci::type::RunwayCoordinatesType& AirfieldRunwayType::getTakeoffCoordinates() {
  return getTakeoffCoordinates_();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setTakeoffCoordinates(const uci::type::RunwayCoordinatesType& accessor) {
  enableTakeoffCoordinates();
  if (&accessor != takeoffCoordinates_Accessor.get()) {
    takeoffCoordinates_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AirfieldRunwayType::hasTakeoffCoordinates() const noexcept {
  return static_cast<bool>(takeoffCoordinates_Accessor);
}

uci::type::RunwayCoordinatesType& AirfieldRunwayType::enableTakeoffCoordinates(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::runwayCoordinatesType : type};
  if ((!takeoffCoordinates_Accessor) || (takeoffCoordinates_Accessor->getAccessorType() != requestedType)) {
    takeoffCoordinates_Accessor = RunwayCoordinatesType::create(requestedType);
    if (!takeoffCoordinates_Accessor) {
      throw uci::base::UCIException("Error in enableTakeoffCoordinates(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *takeoffCoordinates_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearTakeoffCoordinates() noexcept {
  takeoffCoordinates_Accessor.reset();
  return *this;
}

uci::type::RunwayCoordinatesType& AirfieldRunwayType::getLandingCoordinates_() const {
  if (landingCoordinates_Accessor) {
    return *landingCoordinates_Accessor;
  }
  throw uci::base::UCIException("Error in getLandingCoordinates(): An attempt was made to get an optional field that was not enabled, call hasLandingCoordinates() to determine if it is safe to call getLandingCoordinates()");
}

const uci::type::RunwayCoordinatesType& AirfieldRunwayType::getLandingCoordinates() const {
  return getLandingCoordinates_();
}

uci::type::RunwayCoordinatesType& AirfieldRunwayType::getLandingCoordinates() {
  return getLandingCoordinates_();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setLandingCoordinates(const uci::type::RunwayCoordinatesType& accessor) {
  enableLandingCoordinates();
  if (&accessor != landingCoordinates_Accessor.get()) {
    landingCoordinates_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AirfieldRunwayType::hasLandingCoordinates() const noexcept {
  return static_cast<bool>(landingCoordinates_Accessor);
}

uci::type::RunwayCoordinatesType& AirfieldRunwayType::enableLandingCoordinates(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::runwayCoordinatesType : type};
  if ((!landingCoordinates_Accessor) || (landingCoordinates_Accessor->getAccessorType() != requestedType)) {
    landingCoordinates_Accessor = RunwayCoordinatesType::create(requestedType);
    if (!landingCoordinates_Accessor) {
      throw uci::base::UCIException("Error in enableLandingCoordinates(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *landingCoordinates_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearLandingCoordinates() noexcept {
  landingCoordinates_Accessor.reset();
  return *this;
}

uci::type::RunwayUsageDetailsType& AirfieldRunwayType::getDefaultRunwayUsageDetails_() const {
  if (defaultRunwayUsageDetails_Accessor) {
    return *defaultRunwayUsageDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getDefaultRunwayUsageDetails(): An attempt was made to get an optional field that was not enabled, call hasDefaultRunwayUsageDetails() to determine if it is safe to call getDefaultRunwayUsageDetails()");
}

const uci::type::RunwayUsageDetailsType& AirfieldRunwayType::getDefaultRunwayUsageDetails() const {
  return getDefaultRunwayUsageDetails_();
}

uci::type::RunwayUsageDetailsType& AirfieldRunwayType::getDefaultRunwayUsageDetails() {
  return getDefaultRunwayUsageDetails_();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setDefaultRunwayUsageDetails(const uci::type::RunwayUsageDetailsType& accessor) {
  enableDefaultRunwayUsageDetails();
  if (&accessor != defaultRunwayUsageDetails_Accessor.get()) {
    defaultRunwayUsageDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AirfieldRunwayType::hasDefaultRunwayUsageDetails() const noexcept {
  return static_cast<bool>(defaultRunwayUsageDetails_Accessor);
}

uci::type::RunwayUsageDetailsType& AirfieldRunwayType::enableDefaultRunwayUsageDetails(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::runwayUsageDetailsType : type};
  if ((!defaultRunwayUsageDetails_Accessor) || (defaultRunwayUsageDetails_Accessor->getAccessorType() != requestedType)) {
    defaultRunwayUsageDetails_Accessor = RunwayUsageDetailsType::create(requestedType);
    if (!defaultRunwayUsageDetails_Accessor) {
      throw uci::base::UCIException("Error in enableDefaultRunwayUsageDetails(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *defaultRunwayUsageDetails_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearDefaultRunwayUsageDetails() noexcept {
  defaultRunwayUsageDetails_Accessor.reset();
  return *this;
}

uci::type::SafeAltitudeType& AirfieldRunwayType::getSafeAltitude_() const {
  if (safeAltitude_Accessor) {
    return *safeAltitude_Accessor;
  }
  throw uci::base::UCIException("Error in getSafeAltitude(): An attempt was made to get an optional field that was not enabled, call hasSafeAltitude() to determine if it is safe to call getSafeAltitude()");
}

const uci::type::SafeAltitudeType& AirfieldRunwayType::getSafeAltitude() const {
  return getSafeAltitude_();
}

uci::type::SafeAltitudeType& AirfieldRunwayType::getSafeAltitude() {
  return getSafeAltitude_();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setSafeAltitude(const uci::type::SafeAltitudeType& accessor) {
  enableSafeAltitude();
  if (&accessor != safeAltitude_Accessor.get()) {
    safeAltitude_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AirfieldRunwayType::hasSafeAltitude() const noexcept {
  return static_cast<bool>(safeAltitude_Accessor);
}

uci::type::SafeAltitudeType& AirfieldRunwayType::enableSafeAltitude(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::safeAltitudeType : type};
  if ((!safeAltitude_Accessor) || (safeAltitude_Accessor->getAccessorType() != requestedType)) {
    safeAltitude_Accessor = SafeAltitudeType::create(requestedType);
    if (!safeAltitude_Accessor) {
      throw uci::base::UCIException("Error in enableSafeAltitude(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *safeAltitude_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearSafeAltitude() noexcept {
  safeAltitude_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& AirfieldRunwayType::getDAFIF_RunwayIdentifier_() const {
  if (dAFIF_RunwayIdentifier_Accessor) {
    return *dAFIF_RunwayIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getDAFIF_RunwayIdentifier(): An attempt was made to get an optional field that was not enabled, call hasDAFIF_RunwayIdentifier() to determine if it is safe to call getDAFIF_RunwayIdentifier()");
}

const uci::type::ForeignKeyType& AirfieldRunwayType::getDAFIF_RunwayIdentifier() const {
  return getDAFIF_RunwayIdentifier_();
}

uci::type::ForeignKeyType& AirfieldRunwayType::getDAFIF_RunwayIdentifier() {
  return getDAFIF_RunwayIdentifier_();
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::setDAFIF_RunwayIdentifier(const uci::type::ForeignKeyType& accessor) {
  enableDAFIF_RunwayIdentifier(accessor.getAccessorType());
  if (&accessor != dAFIF_RunwayIdentifier_Accessor.get()) {
    dAFIF_RunwayIdentifier_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AirfieldRunwayType::hasDAFIF_RunwayIdentifier() const noexcept {
  return static_cast<bool>(dAFIF_RunwayIdentifier_Accessor);
}

uci::type::ForeignKeyType& AirfieldRunwayType::enableDAFIF_RunwayIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!dAFIF_RunwayIdentifier_Accessor) || (dAFIF_RunwayIdentifier_Accessor->getAccessorType() != requestedType)) {
    dAFIF_RunwayIdentifier_Accessor = ForeignKeyType::create(requestedType);
    if (!dAFIF_RunwayIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enableDAFIF_RunwayIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dAFIF_RunwayIdentifier_Accessor;
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::clearDAFIF_RunwayIdentifier() noexcept {
  dAFIF_RunwayIdentifier_Accessor.reset();
  return *this;
}

std::unique_ptr<AirfieldRunwayType> AirfieldRunwayType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airfieldRunwayType : type};
  return (requestedType == uci::type::accessorType::airfieldRunwayType) ? boost::make_unique<AirfieldRunwayType>() : nullptr;
}

/**  */
namespace AirfieldRunwayType_Names {

constexpr const char* Extern_Type_Name{"AirfieldRunwayType"};
constexpr const char* RunwayID_Name{"RunwayID"};
constexpr const char* SecondaryIndicator_Name{"SecondaryIndicator"};
constexpr const char* Status_Name{"Status"};
constexpr const char* Direction_Name{"Direction"};
constexpr const char* AvailableLength_Name{"AvailableLength"};
constexpr const char* GCA_Name{"GCA"};
constexpr const char* ILS_Name{"ILS"};
constexpr const char* ApproachLighting_Name{"ApproachLighting"};
constexpr const char* ArresterWires_Name{"ArresterWires"};
constexpr const char* ArresterBarrier_Name{"ArresterBarrier"};
constexpr const char* BrakingAction_Name{"BrakingAction"};
constexpr const char* VisualRange_Name{"VisualRange"};
constexpr const char* TakeoffCoordinates_Name{"TakeoffCoordinates"};
constexpr const char* LandingCoordinates_Name{"LandingCoordinates"};
constexpr const char* DefaultRunwayUsageDetails_Name{"DefaultRunwayUsageDetails"};
constexpr const char* SafeAltitude_Name{"SafeAltitude"};
constexpr const char* DAFIF_RunwayIdentifier_Name{"DAFIF_RunwayIdentifier"};

} // namespace AirfieldRunwayType_Names

void AirfieldRunwayType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AirfieldRunwayType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AirfieldRunwayType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::RunwayID_Name) {
      RunwayID_Type::deserialize(valueType.second, accessor.getRunwayID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::SecondaryIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSecondaryIndicator(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::Status_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::Direction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDirection(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::AvailableLength_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAvailableLength(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::GCA_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGCA(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::ILS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setILS(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::ApproachLighting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableApproachLighting().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::ArresterWires_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableArresterWires().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::ArresterBarrier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setArresterBarrier(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::BrakingAction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableBrakingAction().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::VisualRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVisualRange(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::TakeoffCoordinates_Name) {
      RunwayCoordinatesType::deserialize(valueType.second, accessor.enableTakeoffCoordinates(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::LandingCoordinates_Name) {
      RunwayCoordinatesType::deserialize(valueType.second, accessor.enableLandingCoordinates(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::DefaultRunwayUsageDetails_Name) {
      RunwayUsageDetailsType::deserialize(valueType.second, accessor.enableDefaultRunwayUsageDetails(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::SafeAltitude_Name) {
      SafeAltitudeType::deserialize(valueType.second, accessor.enableSafeAltitude(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::DAFIF_RunwayIdentifier_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDAFIF_RunwayIdentifier(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string AirfieldRunwayType::serialize(const uci::type::AirfieldRunwayType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AirfieldRunwayType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AirfieldRunwayType_Names::Extern_Type_Name);
  }
  RunwayID_Type::serialize(accessor.getRunwayID(), node, AirfieldRunwayType_Names::RunwayID_Name);
  if (accessor.hasSecondaryIndicator()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSecondaryIndicator(), node, AirfieldRunwayType_Names::SecondaryIndicator_Name);
  }
  if (accessor.hasStatus()) {
    RunwayStatusEnum::serialize(accessor.getStatus(), node, AirfieldRunwayType_Names::Status_Name, false);
  }
  if (accessor.hasDirection()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDirection(), node, AirfieldRunwayType_Names::Direction_Name);
  }
  if (accessor.hasAvailableLength()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAvailableLength(), node, AirfieldRunwayType_Names::AvailableLength_Name);
  }
  if (accessor.hasGCA()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getGCA(), node, AirfieldRunwayType_Names::GCA_Name);
  }
  if (accessor.hasILS()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getILS(), node, AirfieldRunwayType_Names::ILS_Name);
  }
  if (accessor.hasApproachLighting()) {
    ApproachLightingEnum::serialize(accessor.getApproachLighting(), node, AirfieldRunwayType_Names::ApproachLighting_Name, false);
  }
  if (accessor.hasArresterWires()) {
    ArresterWiresEnum::serialize(accessor.getArresterWires(), node, AirfieldRunwayType_Names::ArresterWires_Name, false);
  }
  if (accessor.hasArresterBarrier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getArresterBarrier(), node, AirfieldRunwayType_Names::ArresterBarrier_Name);
  }
  if (accessor.hasBrakingAction()) {
    BrakingActionEnum::serialize(accessor.getBrakingAction(), node, AirfieldRunwayType_Names::BrakingAction_Name, false);
  }
  if (accessor.hasVisualRange()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVisualRange(), node, AirfieldRunwayType_Names::VisualRange_Name);
  }
  if (accessor.hasTakeoffCoordinates()) {
    RunwayCoordinatesType::serialize(accessor.getTakeoffCoordinates(), node, AirfieldRunwayType_Names::TakeoffCoordinates_Name);
  }
  if (accessor.hasLandingCoordinates()) {
    RunwayCoordinatesType::serialize(accessor.getLandingCoordinates(), node, AirfieldRunwayType_Names::LandingCoordinates_Name);
  }
  if (accessor.hasDefaultRunwayUsageDetails()) {
    RunwayUsageDetailsType::serialize(accessor.getDefaultRunwayUsageDetails(), node, AirfieldRunwayType_Names::DefaultRunwayUsageDetails_Name);
  }
  if (accessor.hasSafeAltitude()) {
    SafeAltitudeType::serialize(accessor.getSafeAltitude(), node, AirfieldRunwayType_Names::SafeAltitude_Name);
  }
  if (accessor.hasDAFIF_RunwayIdentifier()) {
    ForeignKeyType::serialize(accessor.getDAFIF_RunwayIdentifier(), node, AirfieldRunwayType_Names::DAFIF_RunwayIdentifier_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AirfieldRunwayType& AirfieldRunwayType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AirfieldRunwayType>().release());
}

uci::type::AirfieldRunwayType& AirfieldRunwayType::create(const uci::type::AirfieldRunwayType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AirfieldRunwayType> newAccessor{boost::make_unique<asb_uci::type::AirfieldRunwayType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AirfieldRunwayType::destroy(uci::type::AirfieldRunwayType& accessor) {
  delete dynamic_cast<asb_uci::type::AirfieldRunwayType*>(&accessor);
}

} // namespace type

} // namespace uci

