/** @file SubsystemCalibrationCommandID_ChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SubsystemCalibrationCommandID_ChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CalibrationID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CalibrationID_Type.h"
#include "uci/type/SubsystemCalibrationCommandID_ChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemCalibrationCommandID_ChoiceType::SubsystemCalibrationCommandID_ChoiceType() = default;

SubsystemCalibrationCommandID_ChoiceType::~SubsystemCalibrationCommandID_ChoiceType() = default;

void SubsystemCalibrationCommandID_ChoiceType::copy(const uci::type::SubsystemCalibrationCommandID_ChoiceType& accessor) {
  copyImpl(accessor, false);
}

void SubsystemCalibrationCommandID_ChoiceType::copyImpl(const uci::type::SubsystemCalibrationCommandID_ChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SubsystemCalibrationCommandID_ChoiceType&>(accessor);
    if (accessorImpl.initiateCalibrationID_Accessor) {
      setInitiateCalibrationID(*(accessorImpl.initiateCalibrationID_Accessor));
    } else {
      initiateCalibrationID_Accessor.reset();
    }
    if (accessorImpl.cancelCalibrationID_Accessor) {
      setCancelCalibrationID(*(accessorImpl.cancelCalibrationID_Accessor));
    } else {
      cancelCalibrationID_Accessor.reset();
    }
  }
}

void SubsystemCalibrationCommandID_ChoiceType::reset() noexcept {
  initiateCalibrationID_Accessor.reset();
  cancelCalibrationID_Accessor.reset();
}

uci::type::SubsystemCalibrationCommandID_ChoiceType::SubsystemCalibrationCommandID_ChoiceTypeChoice SubsystemCalibrationCommandID_ChoiceType::getSubsystemCalibrationCommandID_ChoiceTypeChoiceOrdinal() const noexcept {
  if (initiateCalibrationID_Accessor) {
    return SUBSYSTEMCALIBRATIONCOMMANDID_CHOICETYPE_CHOICE_INITIATECALIBRATIONID;
  }
  if (cancelCalibrationID_Accessor) {
    return SUBSYSTEMCALIBRATIONCOMMANDID_CHOICETYPE_CHOICE_CANCELCALIBRATIONID;
  }
  return SUBSYSTEMCALIBRATIONCOMMANDID_CHOICETYPE_CHOICE_NONE;
}

uci::type::SubsystemCalibrationCommandID_ChoiceType& SubsystemCalibrationCommandID_ChoiceType::setSubsystemCalibrationCommandID_ChoiceTypeChoiceOrdinal(uci::type::SubsystemCalibrationCommandID_ChoiceType::SubsystemCalibrationCommandID_ChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case SUBSYSTEMCALIBRATIONCOMMANDID_CHOICETYPE_CHOICE_INITIATECALIBRATIONID:
      chooseInitiateCalibrationID("setSubsystemCalibrationCommandID_ChoiceTypeChoiceOrdinal", type);
      break;
    case SUBSYSTEMCALIBRATIONCOMMANDID_CHOICETYPE_CHOICE_CANCELCALIBRATIONID:
      chooseCancelCalibrationID("setSubsystemCalibrationCommandID_ChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setSubsystemCalibrationCommandID_ChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::CalibrationID_Type& SubsystemCalibrationCommandID_ChoiceType::getInitiateCalibrationID_() const {
  if (initiateCalibrationID_Accessor) {
    return *initiateCalibrationID_Accessor;
  }
  throw uci::base::UCIException("Error in getInitiateCalibrationID(): Unable to get InitiateCalibrationID, field not selected");
}

const uci::type::CalibrationID_Type& SubsystemCalibrationCommandID_ChoiceType::getInitiateCalibrationID() const {
  return getInitiateCalibrationID_();
}

uci::type::CalibrationID_Type& SubsystemCalibrationCommandID_ChoiceType::getInitiateCalibrationID() {
  return getInitiateCalibrationID_();
}

uci::type::SubsystemCalibrationCommandID_ChoiceType& SubsystemCalibrationCommandID_ChoiceType::setInitiateCalibrationID(const uci::type::CalibrationID_Type& accessor) {
  chooseInitiateCalibrationID();
  if (&accessor != initiateCalibrationID_Accessor.get()) {
    initiateCalibrationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubsystemCalibrationCommandID_ChoiceType::isInitiateCalibrationID() const noexcept {
  return static_cast<bool>(initiateCalibrationID_Accessor);
}

uci::type::CalibrationID_Type& SubsystemCalibrationCommandID_ChoiceType::chooseInitiateCalibrationID(const std::string& method, uci::base::accessorType::AccessorType type) {
  cancelCalibrationID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::calibrationID_Type : type};
  if ((!initiateCalibrationID_Accessor) || (initiateCalibrationID_Accessor->getAccessorType() != requestedType)) {
    initiateCalibrationID_Accessor = CalibrationID_Type::create(type);
    if (!initiateCalibrationID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *initiateCalibrationID_Accessor;
}

uci::type::CalibrationID_Type& SubsystemCalibrationCommandID_ChoiceType::chooseInitiateCalibrationID(uci::base::accessorType::AccessorType type) {
  return chooseInitiateCalibrationID("chooseInitiateCalibrationID", type);
}

uci::type::CalibrationID_Type& SubsystemCalibrationCommandID_ChoiceType::getCancelCalibrationID_() const {
  if (cancelCalibrationID_Accessor) {
    return *cancelCalibrationID_Accessor;
  }
  throw uci::base::UCIException("Error in getCancelCalibrationID(): Unable to get CancelCalibrationID, field not selected");
}

const uci::type::CalibrationID_Type& SubsystemCalibrationCommandID_ChoiceType::getCancelCalibrationID() const {
  return getCancelCalibrationID_();
}

uci::type::CalibrationID_Type& SubsystemCalibrationCommandID_ChoiceType::getCancelCalibrationID() {
  return getCancelCalibrationID_();
}

uci::type::SubsystemCalibrationCommandID_ChoiceType& SubsystemCalibrationCommandID_ChoiceType::setCancelCalibrationID(const uci::type::CalibrationID_Type& accessor) {
  chooseCancelCalibrationID();
  if (&accessor != cancelCalibrationID_Accessor.get()) {
    cancelCalibrationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubsystemCalibrationCommandID_ChoiceType::isCancelCalibrationID() const noexcept {
  return static_cast<bool>(cancelCalibrationID_Accessor);
}

uci::type::CalibrationID_Type& SubsystemCalibrationCommandID_ChoiceType::chooseCancelCalibrationID(const std::string& method, uci::base::accessorType::AccessorType type) {
  initiateCalibrationID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::calibrationID_Type : type};
  if ((!cancelCalibrationID_Accessor) || (cancelCalibrationID_Accessor->getAccessorType() != requestedType)) {
    cancelCalibrationID_Accessor = CalibrationID_Type::create(type);
    if (!cancelCalibrationID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *cancelCalibrationID_Accessor;
}

uci::type::CalibrationID_Type& SubsystemCalibrationCommandID_ChoiceType::chooseCancelCalibrationID(uci::base::accessorType::AccessorType type) {
  return chooseCancelCalibrationID("chooseCancelCalibrationID", type);
}

std::unique_ptr<SubsystemCalibrationCommandID_ChoiceType> SubsystemCalibrationCommandID_ChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemCalibrationCommandID_ChoiceType : type};
  return (requestedType == uci::type::accessorType::subsystemCalibrationCommandID_ChoiceType) ? boost::make_unique<SubsystemCalibrationCommandID_ChoiceType>() : nullptr;
}

/**  */
namespace SubsystemCalibrationCommandID_ChoiceType_Names {

constexpr const char* Extern_Type_Name{"SubsystemCalibrationCommandID_ChoiceType"};
constexpr const char* InitiateCalibrationID_Name{"InitiateCalibrationID"};
constexpr const char* CancelCalibrationID_Name{"CancelCalibrationID"};

} // namespace SubsystemCalibrationCommandID_ChoiceType_Names

void SubsystemCalibrationCommandID_ChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemCalibrationCommandID_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemCalibrationCommandID_ChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemCalibrationCommandID_ChoiceType_Names::InitiateCalibrationID_Name) {
      CalibrationID_Type::deserialize(valueType.second, accessor.chooseInitiateCalibrationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemCalibrationCommandID_ChoiceType_Names::CancelCalibrationID_Name) {
      CalibrationID_Type::deserialize(valueType.second, accessor.chooseCancelCalibrationID(), nodeName, nsPrefix);
    }
  }
}

std::string SubsystemCalibrationCommandID_ChoiceType::serialize(const uci::type::SubsystemCalibrationCommandID_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemCalibrationCommandID_ChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemCalibrationCommandID_ChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isInitiateCalibrationID()) {
    CalibrationID_Type::serialize(accessor.getInitiateCalibrationID(), node, SubsystemCalibrationCommandID_ChoiceType_Names::InitiateCalibrationID_Name);
  } else if (accessor.isCancelCalibrationID()) {
    CalibrationID_Type::serialize(accessor.getCancelCalibrationID(), node, SubsystemCalibrationCommandID_ChoiceType_Names::CancelCalibrationID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubsystemCalibrationCommandID_ChoiceType& SubsystemCalibrationCommandID_ChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubsystemCalibrationCommandID_ChoiceType>().release());
}

uci::type::SubsystemCalibrationCommandID_ChoiceType& SubsystemCalibrationCommandID_ChoiceType::create(const uci::type::SubsystemCalibrationCommandID_ChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubsystemCalibrationCommandID_ChoiceType> newAccessor{boost::make_unique<asb_uci::type::SubsystemCalibrationCommandID_ChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubsystemCalibrationCommandID_ChoiceType::destroy(uci::type::SubsystemCalibrationCommandID_ChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::SubsystemCalibrationCommandID_ChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

