/** @file COE_PositionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/COE_PositionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnglePositiveType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/COE_PositionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

COE_PositionType::COE_PositionType() = default;

COE_PositionType::~COE_PositionType() = default;

void COE_PositionType::copy(const uci::type::COE_PositionType& accessor) {
  copyImpl(accessor, false);
}

void COE_PositionType::copyImpl(const uci::type::COE_PositionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const COE_PositionType&>(accessor);
    meanAnomaly_Accessor = (accessorImpl.meanAnomaly_Accessor ? accessorImpl.meanAnomaly_Accessor : boost::none);
    argumentOfLatitude_Accessor = (accessorImpl.argumentOfLatitude_Accessor ? accessorImpl.argumentOfLatitude_Accessor : boost::none);
    trueLongitude_Accessor = (accessorImpl.trueLongitude_Accessor ? accessorImpl.trueLongitude_Accessor : boost::none);
  }
}

void COE_PositionType::reset() noexcept {
  meanAnomaly_Accessor.reset();
  argumentOfLatitude_Accessor.reset();
  trueLongitude_Accessor.reset();
}

uci::type::COE_PositionType::COE_PositionTypeChoice COE_PositionType::getCOE_PositionTypeChoiceOrdinal() const noexcept {
  if (meanAnomaly_Accessor) {
    return COE_POSITIONTYPE_CHOICE_MEANANOMALY;
  }
  if (argumentOfLatitude_Accessor) {
    return COE_POSITIONTYPE_CHOICE_ARGUMENTOFLATITUDE;
  }
  if (trueLongitude_Accessor) {
    return COE_POSITIONTYPE_CHOICE_TRUELONGITUDE;
  }
  return COE_POSITIONTYPE_CHOICE_NONE;
}

uci::type::COE_PositionType& COE_PositionType::setCOE_PositionTypeChoiceOrdinal(uci::type::COE_PositionType::COE_PositionTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case COE_POSITIONTYPE_CHOICE_MEANANOMALY:
      chooseMeanAnomaly();
      break;
    case COE_POSITIONTYPE_CHOICE_ARGUMENTOFLATITUDE:
      chooseArgumentOfLatitude();
      break;
    case COE_POSITIONTYPE_CHOICE_TRUELONGITUDE:
      chooseTrueLongitude();
      break;
    default:
      throw uci::base::UCIException("Error in setCOE_PositionTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AnglePositiveTypeValue COE_PositionType::getMeanAnomaly() const {
  if (meanAnomaly_Accessor) {
    return *meanAnomaly_Accessor;
  }
  throw uci::base::UCIException("Error in getMeanAnomaly(): Unable to get MeanAnomaly, field not selected");
}

uci::type::COE_PositionType& COE_PositionType::setMeanAnomaly(uci::type::AnglePositiveTypeValue value) {
  chooseMeanAnomaly();
  meanAnomaly_Accessor = value;
  return *this;
}

bool COE_PositionType::isMeanAnomaly() const noexcept {
  return static_cast<bool>(meanAnomaly_Accessor);
}

void COE_PositionType::chooseMeanAnomaly() {
  argumentOfLatitude_Accessor.reset();
  trueLongitude_Accessor.reset();
  if (!meanAnomaly_Accessor) {
    meanAnomaly_Accessor = boost::optional<asb_xs::Double>();
  }
}

uci::type::AnglePositiveTypeValue COE_PositionType::getArgumentOfLatitude() const {
  if (argumentOfLatitude_Accessor) {
    return *argumentOfLatitude_Accessor;
  }
  throw uci::base::UCIException("Error in getArgumentOfLatitude(): Unable to get ArgumentOfLatitude, field not selected");
}

uci::type::COE_PositionType& COE_PositionType::setArgumentOfLatitude(uci::type::AnglePositiveTypeValue value) {
  chooseArgumentOfLatitude();
  argumentOfLatitude_Accessor = value;
  return *this;
}

bool COE_PositionType::isArgumentOfLatitude() const noexcept {
  return static_cast<bool>(argumentOfLatitude_Accessor);
}

void COE_PositionType::chooseArgumentOfLatitude() {
  meanAnomaly_Accessor.reset();
  trueLongitude_Accessor.reset();
  if (!argumentOfLatitude_Accessor) {
    argumentOfLatitude_Accessor = boost::optional<asb_xs::Double>();
  }
}

uci::type::AnglePositiveTypeValue COE_PositionType::getTrueLongitude() const {
  if (trueLongitude_Accessor) {
    return *trueLongitude_Accessor;
  }
  throw uci::base::UCIException("Error in getTrueLongitude(): Unable to get TrueLongitude, field not selected");
}

uci::type::COE_PositionType& COE_PositionType::setTrueLongitude(uci::type::AnglePositiveTypeValue value) {
  chooseTrueLongitude();
  trueLongitude_Accessor = value;
  return *this;
}

bool COE_PositionType::isTrueLongitude() const noexcept {
  return static_cast<bool>(trueLongitude_Accessor);
}

void COE_PositionType::chooseTrueLongitude() {
  meanAnomaly_Accessor.reset();
  argumentOfLatitude_Accessor.reset();
  if (!trueLongitude_Accessor) {
    trueLongitude_Accessor = boost::optional<asb_xs::Double>();
  }
}

std::unique_ptr<COE_PositionType> COE_PositionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOE_PositionType : type};
  return (requestedType == uci::type::accessorType::cOE_PositionType) ? boost::make_unique<COE_PositionType>() : nullptr;
}

/**  */
namespace COE_PositionType_Names {

constexpr const char* Extern_Type_Name{"COE_PositionType"};
constexpr const char* MeanAnomaly_Name{"MeanAnomaly"};
constexpr const char* ArgumentOfLatitude_Name{"ArgumentOfLatitude"};
constexpr const char* TrueLongitude_Name{"TrueLongitude"};

} // namespace COE_PositionType_Names

void COE_PositionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::COE_PositionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = COE_PositionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + COE_PositionType_Names::MeanAnomaly_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMeanAnomaly(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COE_PositionType_Names::ArgumentOfLatitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setArgumentOfLatitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COE_PositionType_Names::TrueLongitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTrueLongitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string COE_PositionType::serialize(const uci::type::COE_PositionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? COE_PositionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, COE_PositionType_Names::Extern_Type_Name);
  }
  if (accessor.isMeanAnomaly()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMeanAnomaly(), node, COE_PositionType_Names::MeanAnomaly_Name);
  } else if (accessor.isArgumentOfLatitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getArgumentOfLatitude(), node, COE_PositionType_Names::ArgumentOfLatitude_Name);
  } else if (accessor.isTrueLongitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTrueLongitude(), node, COE_PositionType_Names::TrueLongitude_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::COE_PositionType& COE_PositionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::COE_PositionType>().release());
}

uci::type::COE_PositionType& COE_PositionType::create(const uci::type::COE_PositionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::COE_PositionType> newAccessor{boost::make_unique<asb_uci::type::COE_PositionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void COE_PositionType::destroy(uci::type::COE_PositionType& accessor) {
  delete dynamic_cast<asb_uci::type::COE_PositionType*>(&accessor);
}

} // namespace type

} // namespace uci

