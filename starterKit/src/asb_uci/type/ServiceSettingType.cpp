/** @file ServiceSettingType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ServiceSettingType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EventSeverityEnum.h"
#include "asb_uci/type/ServiceSettingEnum.h"
#include "asb_uci/type/ServiceSettingsParameterType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EventSeverityEnum.h"
#include "uci/type/ServiceSettingEnum.h"
#include "uci/type/ServiceSettingType.h"
#include "uci/type/ServiceSettingsParameterType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ServiceSettingType::ServiceSettingType()
  : serviceSetting_Accessor{boost::make_unique<ServiceSettingEnum>()},
    eventSeverityClass_Accessor{boost::make_unique<EventSeverityClass>(0, 4)} {
}

ServiceSettingType::~ServiceSettingType() = default;

void ServiceSettingType::copy(const uci::type::ServiceSettingType& accessor) {
  copyImpl(accessor, false);
}

void ServiceSettingType::copyImpl(const uci::type::ServiceSettingType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ServiceSettingType&>(accessor);
    setServiceSetting(*(accessorImpl.serviceSetting_Accessor));
    if (accessorImpl.serviceSettingParameter_Accessor) {
      setServiceSettingParameter(*(accessorImpl.serviceSettingParameter_Accessor));
    } else {
      serviceSettingParameter_Accessor.reset();
    }
    setEventSeverityClass(*(accessorImpl.eventSeverityClass_Accessor));
  }
}

void ServiceSettingType::reset() noexcept {
  serviceSetting_Accessor->reset();
  serviceSettingParameter_Accessor.reset();
  eventSeverityClass_Accessor->reset();
}

const uci::type::ServiceSettingEnum& ServiceSettingType::getServiceSetting() const {
  return *serviceSetting_Accessor;
}

uci::type::ServiceSettingEnum& ServiceSettingType::getServiceSetting() {
  return *serviceSetting_Accessor;
}

uci::type::ServiceSettingType& ServiceSettingType::setServiceSetting(const uci::type::ServiceSettingEnum& accessor) {
  if (&accessor != serviceSetting_Accessor.get()) {
    serviceSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ServiceSettingType& ServiceSettingType::setServiceSetting(uci::type::ServiceSettingEnum::EnumerationItem value) {
  serviceSetting_Accessor->setValue(value);
  return *this;
}


uci::type::ServiceSettingsParameterType& ServiceSettingType::getServiceSettingParameter_() const {
  if (serviceSettingParameter_Accessor) {
    return *serviceSettingParameter_Accessor;
  }
  throw uci::base::UCIException("Error in getServiceSettingParameter(): An attempt was made to get an optional field that was not enabled, call hasServiceSettingParameter() to determine if it is safe to call getServiceSettingParameter()");
}

const uci::type::ServiceSettingsParameterType& ServiceSettingType::getServiceSettingParameter() const {
  return getServiceSettingParameter_();
}

uci::type::ServiceSettingsParameterType& ServiceSettingType::getServiceSettingParameter() {
  return getServiceSettingParameter_();
}

uci::type::ServiceSettingType& ServiceSettingType::setServiceSettingParameter(const uci::type::ServiceSettingsParameterType& accessor) {
  enableServiceSettingParameter();
  if (&accessor != serviceSettingParameter_Accessor.get()) {
    serviceSettingParameter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ServiceSettingType::hasServiceSettingParameter() const noexcept {
  return static_cast<bool>(serviceSettingParameter_Accessor);
}

uci::type::ServiceSettingsParameterType& ServiceSettingType::enableServiceSettingParameter(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceSettingsParameterType : type};
  if ((!serviceSettingParameter_Accessor) || (serviceSettingParameter_Accessor->getAccessorType() != requestedType)) {
    serviceSettingParameter_Accessor = ServiceSettingsParameterType::create(requestedType);
    if (!serviceSettingParameter_Accessor) {
      throw uci::base::UCIException("Error in enableServiceSettingParameter(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *serviceSettingParameter_Accessor;
}

uci::type::ServiceSettingType& ServiceSettingType::clearServiceSettingParameter() noexcept {
  serviceSettingParameter_Accessor.reset();
  return *this;
}

const uci::type::ServiceSettingType::EventSeverityClass& ServiceSettingType::getEventSeverityClass() const {
  return *eventSeverityClass_Accessor;
}

uci::type::ServiceSettingType::EventSeverityClass& ServiceSettingType::getEventSeverityClass() {
  return *eventSeverityClass_Accessor;
}

uci::type::ServiceSettingType& ServiceSettingType::setEventSeverityClass(const uci::type::ServiceSettingType::EventSeverityClass& accessor) {
  if (&accessor != eventSeverityClass_Accessor.get()) {
    eventSeverityClass_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ServiceSettingType> ServiceSettingType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceSettingType : type};
  return (requestedType == uci::type::accessorType::serviceSettingType) ? boost::make_unique<ServiceSettingType>() : nullptr;
}

/**  */
namespace ServiceSettingType_Names {

constexpr const char* Extern_Type_Name{"ServiceSettingType"};
constexpr const char* ServiceSetting_Name{"ServiceSetting"};
constexpr const char* ServiceSettingParameter_Name{"ServiceSettingParameter"};
constexpr const char* EventSeverityClass_Name{"EventSeverityClass"};

} // namespace ServiceSettingType_Names

void ServiceSettingType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ServiceSettingType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ServiceSettingType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ServiceSettingType_Names::ServiceSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getServiceSetting().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ServiceSettingType_Names::ServiceSettingParameter_Name) {
      ServiceSettingsParameterType::deserialize(valueType.second, accessor.enableServiceSettingParameter(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ServiceSettingType_Names::EventSeverityClass_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ServiceSettingType::EventSeverityClass& boundedList = accessor.getEventSeverityClass();
        const uci::type::ServiceSettingType::EventSeverityClass::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    }
  }
}

std::string ServiceSettingType::serialize(const uci::type::ServiceSettingType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ServiceSettingType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ServiceSettingType_Names::Extern_Type_Name);
  }
  ServiceSettingEnum::serialize(accessor.getServiceSetting(), node, ServiceSettingType_Names::ServiceSetting_Name, false);
  if (accessor.hasServiceSettingParameter()) {
    ServiceSettingsParameterType::serialize(accessor.getServiceSettingParameter(), node, ServiceSettingType_Names::ServiceSettingParameter_Name);
  }
  {
    const uci::type::ServiceSettingType::EventSeverityClass& boundedList = accessor.getEventSeverityClass();
    for (uci::type::ServiceSettingType::EventSeverityClass::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      EventSeverityEnum::serialize(boundedList.at(i), node, ServiceSettingType_Names::EventSeverityClass_Name, false);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ServiceSettingType& ServiceSettingType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ServiceSettingType>().release());
}

uci::type::ServiceSettingType& ServiceSettingType::create(const uci::type::ServiceSettingType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ServiceSettingType> newAccessor{boost::make_unique<asb_uci::type::ServiceSettingType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ServiceSettingType::destroy(uci::type::ServiceSettingType& accessor) {
  delete dynamic_cast<asb_uci::type::ServiceSettingType*>(&accessor);
}

} // namespace type

} // namespace uci

