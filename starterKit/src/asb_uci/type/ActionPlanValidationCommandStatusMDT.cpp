/** @file ActionPlanValidationCommandStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ActionPlanValidationCommandStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActionPlanValidationID_Type.h"
#include "asb_uci/type/ValidationCommandStatusBaseType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActionPlanValidationCommandStatusMDT.h"
#include "uci/type/ActionPlanValidationID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ActionPlanValidationCommandStatusMDT::ActionPlanValidationCommandStatusMDT() = default;

ActionPlanValidationCommandStatusMDT::~ActionPlanValidationCommandStatusMDT() = default;

void ActionPlanValidationCommandStatusMDT::copy(const uci::type::ActionPlanValidationCommandStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void ActionPlanValidationCommandStatusMDT::copyImpl(const uci::type::ActionPlanValidationCommandStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ValidationCommandStatusBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ActionPlanValidationCommandStatusMDT&>(accessor);
    if (accessorImpl.actionPlanValidationID_Accessor) {
      setActionPlanValidationID(*(accessorImpl.actionPlanValidationID_Accessor));
    } else {
      actionPlanValidationID_Accessor.reset();
    }
  }
}

void ActionPlanValidationCommandStatusMDT::reset() noexcept {
  ValidationCommandStatusBaseType::reset();
  actionPlanValidationID_Accessor.reset();
}

uci::type::ActionPlanValidationID_Type& ActionPlanValidationCommandStatusMDT::getActionPlanValidationID_() const {
  if (actionPlanValidationID_Accessor) {
    return *actionPlanValidationID_Accessor;
  }
  throw uci::base::UCIException("Error in getActionPlanValidationID(): An attempt was made to get an optional field that was not enabled, call hasActionPlanValidationID() to determine if it is safe to call getActionPlanValidationID()");
}

const uci::type::ActionPlanValidationID_Type& ActionPlanValidationCommandStatusMDT::getActionPlanValidationID() const {
  return getActionPlanValidationID_();
}

uci::type::ActionPlanValidationID_Type& ActionPlanValidationCommandStatusMDT::getActionPlanValidationID() {
  return getActionPlanValidationID_();
}

uci::type::ActionPlanValidationCommandStatusMDT& ActionPlanValidationCommandStatusMDT::setActionPlanValidationID(const uci::type::ActionPlanValidationID_Type& accessor) {
  enableActionPlanValidationID();
  if (&accessor != actionPlanValidationID_Accessor.get()) {
    actionPlanValidationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActionPlanValidationCommandStatusMDT::hasActionPlanValidationID() const noexcept {
  return static_cast<bool>(actionPlanValidationID_Accessor);
}

uci::type::ActionPlanValidationID_Type& ActionPlanValidationCommandStatusMDT::enableActionPlanValidationID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionPlanValidationID_Type : type};
  if ((!actionPlanValidationID_Accessor) || (actionPlanValidationID_Accessor->getAccessorType() != requestedType)) {
    actionPlanValidationID_Accessor = ActionPlanValidationID_Type::create(requestedType);
    if (!actionPlanValidationID_Accessor) {
      throw uci::base::UCIException("Error in enableActionPlanValidationID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *actionPlanValidationID_Accessor;
}

uci::type::ActionPlanValidationCommandStatusMDT& ActionPlanValidationCommandStatusMDT::clearActionPlanValidationID() noexcept {
  actionPlanValidationID_Accessor.reset();
  return *this;
}

std::unique_ptr<ActionPlanValidationCommandStatusMDT> ActionPlanValidationCommandStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionPlanValidationCommandStatusMDT : type};
  return (requestedType == uci::type::accessorType::actionPlanValidationCommandStatusMDT) ? boost::make_unique<ActionPlanValidationCommandStatusMDT>() : nullptr;
}

/**  */
namespace ActionPlanValidationCommandStatusMDT_Names {

constexpr const char* Extern_Type_Name{"ActionPlanValidationCommandStatusMDT"};
constexpr const char* ActionPlanValidationID_Name{"ActionPlanValidationID"};

} // namespace ActionPlanValidationCommandStatusMDT_Names

void ActionPlanValidationCommandStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActionPlanValidationCommandStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActionPlanValidationCommandStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ActionPlanValidationCommandStatusMDT_Names::ActionPlanValidationID_Name) {
      ActionPlanValidationID_Type::deserialize(valueType.second, accessor.enableActionPlanValidationID(), nodeName, nsPrefix);
    }
  }
  ValidationCommandStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ActionPlanValidationCommandStatusMDT::serialize(const uci::type::ActionPlanValidationCommandStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ActionPlanValidationCommandStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ActionPlanValidationCommandStatusMDT_Names::Extern_Type_Name);
  }
  ValidationCommandStatusBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasActionPlanValidationID()) {
    ActionPlanValidationID_Type::serialize(accessor.getActionPlanValidationID(), node, ActionPlanValidationCommandStatusMDT_Names::ActionPlanValidationID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ActionPlanValidationCommandStatusMDT& ActionPlanValidationCommandStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ActionPlanValidationCommandStatusMDT>().release());
}

uci::type::ActionPlanValidationCommandStatusMDT& ActionPlanValidationCommandStatusMDT::create(const uci::type::ActionPlanValidationCommandStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ActionPlanValidationCommandStatusMDT> newAccessor{boost::make_unique<asb_uci::type::ActionPlanValidationCommandStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ActionPlanValidationCommandStatusMDT::destroy(uci::type::ActionPlanValidationCommandStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ActionPlanValidationCommandStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

