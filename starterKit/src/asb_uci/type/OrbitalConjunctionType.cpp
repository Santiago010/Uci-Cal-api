/** @file OrbitalConjunctionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalConjunctionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitalConjunctionEnum.h"
#include "asb_uci/type/OrbitalConjunctionID_Type.h"
#include "asb_uci/type/OrbitalConjunctionObjectType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/OrbitalConjunctionEnum.h"
#include "uci/type/OrbitalConjunctionID_Type.h"
#include "uci/type/OrbitalConjunctionObjectType.h"
#include "uci/type/OrbitalConjunctionType.h"
#include "uci/type/PercentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalConjunctionType::OrbitalConjunctionType()
  : conjunctionID_Accessor{boost::make_unique<OrbitalConjunctionID_Type>()},
    conjunctionType_Accessor{boost::make_unique<OrbitalConjunctionEnum>()},
    orbitalConjunctionObject_Accessor{boost::make_unique<OrbitalConjunctionObject>(1, SIZE_MAX)} {
}

OrbitalConjunctionType::~OrbitalConjunctionType() = default;

void OrbitalConjunctionType::copy(const uci::type::OrbitalConjunctionType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalConjunctionType::copyImpl(const uci::type::OrbitalConjunctionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalConjunctionType&>(accessor);
    setConjunctionID(*(accessorImpl.conjunctionID_Accessor));
    setConjunctionTime(accessorImpl.conjunctionTime_Accessor);
    setConjunctionType(*(accessorImpl.conjunctionType_Accessor));
    if (accessorImpl.hasConjunctionRange()) {
      setConjunctionRange(accessorImpl.getConjunctionRange());
    } else {
      clearConjunctionRange();
    }
    setOrbitalConjunctionObject(*(accessorImpl.orbitalConjunctionObject_Accessor));
    if (accessorImpl.hasConjunctionProbability()) {
      setConjunctionProbability(accessorImpl.getConjunctionProbability());
    } else {
      clearConjunctionProbability();
    }
    if (accessorImpl.hasConjunctionConfidence()) {
      setConjunctionConfidence(accessorImpl.getConjunctionConfidence());
    } else {
      clearConjunctionConfidence();
    }
  }
}

void OrbitalConjunctionType::reset() noexcept {
  conjunctionID_Accessor->reset();
  conjunctionTime_Accessor = 0;
  conjunctionType_Accessor->reset();
  clearConjunctionRange();
  orbitalConjunctionObject_Accessor->reset();
  clearConjunctionProbability();
  clearConjunctionConfidence();
}

const uci::type::OrbitalConjunctionID_Type& OrbitalConjunctionType::getConjunctionID() const {
  return *conjunctionID_Accessor;
}

uci::type::OrbitalConjunctionID_Type& OrbitalConjunctionType::getConjunctionID() {
  return *conjunctionID_Accessor;
}

uci::type::OrbitalConjunctionType& OrbitalConjunctionType::setConjunctionID(const uci::type::OrbitalConjunctionID_Type& accessor) {
  if (&accessor != conjunctionID_Accessor.get()) {
    conjunctionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue OrbitalConjunctionType::getConjunctionTime() const {
  return conjunctionTime_Accessor;
}

uci::type::OrbitalConjunctionType& OrbitalConjunctionType::setConjunctionTime(uci::type::DateTimeTypeValue value) {
  conjunctionTime_Accessor = value;
  return *this;
}


const uci::type::OrbitalConjunctionEnum& OrbitalConjunctionType::getConjunctionType() const {
  return *conjunctionType_Accessor;
}

uci::type::OrbitalConjunctionEnum& OrbitalConjunctionType::getConjunctionType() {
  return *conjunctionType_Accessor;
}

uci::type::OrbitalConjunctionType& OrbitalConjunctionType::setConjunctionType(const uci::type::OrbitalConjunctionEnum& accessor) {
  if (&accessor != conjunctionType_Accessor.get()) {
    conjunctionType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitalConjunctionType& OrbitalConjunctionType::setConjunctionType(uci::type::OrbitalConjunctionEnum::EnumerationItem value) {
  conjunctionType_Accessor->setValue(value);
  return *this;
}


uci::type::DistanceTypeValue OrbitalConjunctionType::getConjunctionRange() const {
  if (conjunctionRange_Accessor) {
    return *conjunctionRange_Accessor;
  }
  throw uci::base::UCIException("Error in getConjunctionRange(): An attempt was made to get an optional field that was not enabled, call hasConjunctionRange() to determine if it is safe to call getConjunctionRange()");
}

uci::type::OrbitalConjunctionType& OrbitalConjunctionType::setConjunctionRange(uci::type::DistanceTypeValue value) {
  conjunctionRange_Accessor = value;
  return *this;
}

bool OrbitalConjunctionType::hasConjunctionRange() const noexcept {
  return conjunctionRange_Accessor.has_value();
}

uci::type::OrbitalConjunctionType& OrbitalConjunctionType::clearConjunctionRange() noexcept {
  conjunctionRange_Accessor.reset();
  return *this;
}

const uci::type::OrbitalConjunctionType::OrbitalConjunctionObject& OrbitalConjunctionType::getOrbitalConjunctionObject() const {
  return *orbitalConjunctionObject_Accessor;
}

uci::type::OrbitalConjunctionType::OrbitalConjunctionObject& OrbitalConjunctionType::getOrbitalConjunctionObject() {
  return *orbitalConjunctionObject_Accessor;
}

uci::type::OrbitalConjunctionType& OrbitalConjunctionType::setOrbitalConjunctionObject(const uci::type::OrbitalConjunctionType::OrbitalConjunctionObject& accessor) {
  if (&accessor != orbitalConjunctionObject_Accessor.get()) {
    orbitalConjunctionObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PercentTypeValue OrbitalConjunctionType::getConjunctionProbability() const {
  if (conjunctionProbability_Accessor) {
    return *conjunctionProbability_Accessor;
  }
  throw uci::base::UCIException("Error in getConjunctionProbability(): An attempt was made to get an optional field that was not enabled, call hasConjunctionProbability() to determine if it is safe to call getConjunctionProbability()");
}

uci::type::OrbitalConjunctionType& OrbitalConjunctionType::setConjunctionProbability(uci::type::PercentTypeValue value) {
  conjunctionProbability_Accessor = value;
  return *this;
}

bool OrbitalConjunctionType::hasConjunctionProbability() const noexcept {
  return conjunctionProbability_Accessor.has_value();
}

uci::type::OrbitalConjunctionType& OrbitalConjunctionType::clearConjunctionProbability() noexcept {
  conjunctionProbability_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue OrbitalConjunctionType::getConjunctionConfidence() const {
  if (conjunctionConfidence_Accessor) {
    return *conjunctionConfidence_Accessor;
  }
  throw uci::base::UCIException("Error in getConjunctionConfidence(): An attempt was made to get an optional field that was not enabled, call hasConjunctionConfidence() to determine if it is safe to call getConjunctionConfidence()");
}

uci::type::OrbitalConjunctionType& OrbitalConjunctionType::setConjunctionConfidence(uci::type::PercentTypeValue value) {
  conjunctionConfidence_Accessor = value;
  return *this;
}

bool OrbitalConjunctionType::hasConjunctionConfidence() const noexcept {
  return conjunctionConfidence_Accessor.has_value();
}

uci::type::OrbitalConjunctionType& OrbitalConjunctionType::clearConjunctionConfidence() noexcept {
  conjunctionConfidence_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalConjunctionType> OrbitalConjunctionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalConjunctionType : type};
  return (requestedType == uci::type::accessorType::orbitalConjunctionType) ? boost::make_unique<OrbitalConjunctionType>() : nullptr;
}

/**  */
namespace OrbitalConjunctionType_Names {

constexpr const char* Extern_Type_Name{"OrbitalConjunctionType"};
constexpr const char* ConjunctionID_Name{"ConjunctionID"};
constexpr const char* ConjunctionTime_Name{"ConjunctionTime"};
constexpr const char* ConjunctionType_Name{"ConjunctionType"};
constexpr const char* ConjunctionRange_Name{"ConjunctionRange"};
constexpr const char* OrbitalConjunctionObject_Name{"OrbitalConjunctionObject"};
constexpr const char* ConjunctionProbability_Name{"ConjunctionProbability"};
constexpr const char* ConjunctionConfidence_Name{"ConjunctionConfidence"};

} // namespace OrbitalConjunctionType_Names

void OrbitalConjunctionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalConjunctionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalConjunctionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalConjunctionType_Names::ConjunctionID_Name) {
      OrbitalConjunctionID_Type::deserialize(valueType.second, accessor.getConjunctionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalConjunctionType_Names::ConjunctionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConjunctionTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalConjunctionType_Names::ConjunctionType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getConjunctionType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OrbitalConjunctionType_Names::ConjunctionRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConjunctionRange(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalConjunctionType_Names::OrbitalConjunctionObject_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitalConjunctionType::OrbitalConjunctionObject& boundedList = accessor.getOrbitalConjunctionObject();
        const uci::type::OrbitalConjunctionType::OrbitalConjunctionObject::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitalConjunctionObjectType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitalConjunctionType_Names::ConjunctionProbability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConjunctionProbability(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalConjunctionType_Names::ConjunctionConfidence_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConjunctionConfidence(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string OrbitalConjunctionType::serialize(const uci::type::OrbitalConjunctionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalConjunctionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalConjunctionType_Names::Extern_Type_Name);
  }
  OrbitalConjunctionID_Type::serialize(accessor.getConjunctionID(), node, OrbitalConjunctionType_Names::ConjunctionID_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getConjunctionTime(), node, OrbitalConjunctionType_Names::ConjunctionTime_Name);
  OrbitalConjunctionEnum::serialize(accessor.getConjunctionType(), node, OrbitalConjunctionType_Names::ConjunctionType_Name, false);
  if (accessor.hasConjunctionRange()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getConjunctionRange(), node, OrbitalConjunctionType_Names::ConjunctionRange_Name);
  }
  {
    const uci::type::OrbitalConjunctionType::OrbitalConjunctionObject& boundedList = accessor.getOrbitalConjunctionObject();
    for (uci::type::OrbitalConjunctionType::OrbitalConjunctionObject::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitalConjunctionObjectType::serialize(boundedList.at(i), node, OrbitalConjunctionType_Names::OrbitalConjunctionObject_Name);
    }
  }
  if (accessor.hasConjunctionProbability()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getConjunctionProbability(), node, OrbitalConjunctionType_Names::ConjunctionProbability_Name);
  }
  if (accessor.hasConjunctionConfidence()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getConjunctionConfidence(), node, OrbitalConjunctionType_Names::ConjunctionConfidence_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalConjunctionType& OrbitalConjunctionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalConjunctionType>().release());
}

uci::type::OrbitalConjunctionType& OrbitalConjunctionType::create(const uci::type::OrbitalConjunctionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalConjunctionType> newAccessor{boost::make_unique<asb_uci::type::OrbitalConjunctionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalConjunctionType::destroy(uci::type::OrbitalConjunctionType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalConjunctionType*>(&accessor);
}

} // namespace type

} // namespace uci

