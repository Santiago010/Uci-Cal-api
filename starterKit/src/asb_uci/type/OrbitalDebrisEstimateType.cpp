/** @file OrbitalDebrisEstimateType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalDebrisEstimateType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/FileMetadataID_Type.h"
#include "asb_uci/type/OrbitalDebrisCloudType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/FileMetadataID_Type.h"
#include "uci/type/OrbitalDebrisCloudType.h"
#include "uci/type/OrbitalDebrisEstimateType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalDebrisEstimateType::OrbitalDebrisEstimateType() = default;

OrbitalDebrisEstimateType::~OrbitalDebrisEstimateType() = default;

void OrbitalDebrisEstimateType::copy(const uci::type::OrbitalDebrisEstimateType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalDebrisEstimateType::copyImpl(const uci::type::OrbitalDebrisEstimateType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalDebrisEstimateType&>(accessor);
    if (accessorImpl.fileMetadataID_Accessor) {
      setFileMetadataID(*(accessorImpl.fileMetadataID_Accessor));
    } else {
      fileMetadataID_Accessor.reset();
    }
    if (accessorImpl.debrisCloud_Accessor) {
      setDebrisCloud(*(accessorImpl.debrisCloud_Accessor));
    } else {
      debrisCloud_Accessor.reset();
    }
  }
}

void OrbitalDebrisEstimateType::reset() noexcept {
  fileMetadataID_Accessor.reset();
  debrisCloud_Accessor.reset();
}

uci::type::OrbitalDebrisEstimateType::OrbitalDebrisEstimateTypeChoice OrbitalDebrisEstimateType::getOrbitalDebrisEstimateTypeChoiceOrdinal() const noexcept {
  if (fileMetadataID_Accessor) {
    return ORBITALDEBRISESTIMATETYPE_CHOICE_FILEMETADATAID;
  }
  if (debrisCloud_Accessor) {
    return ORBITALDEBRISESTIMATETYPE_CHOICE_DEBRISCLOUD;
  }
  return ORBITALDEBRISESTIMATETYPE_CHOICE_NONE;
}

uci::type::OrbitalDebrisEstimateType& OrbitalDebrisEstimateType::setOrbitalDebrisEstimateTypeChoiceOrdinal(uci::type::OrbitalDebrisEstimateType::OrbitalDebrisEstimateTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITALDEBRISESTIMATETYPE_CHOICE_FILEMETADATAID:
      chooseFileMetadataID("setOrbitalDebrisEstimateTypeChoiceOrdinal", type);
      break;
    case ORBITALDEBRISESTIMATETYPE_CHOICE_DEBRISCLOUD:
      chooseDebrisCloud();
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitalDebrisEstimateTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::FileMetadataID_Type& OrbitalDebrisEstimateType::getFileMetadataID_() const {
  if (fileMetadataID_Accessor) {
    return *fileMetadataID_Accessor;
  }
  throw uci::base::UCIException("Error in getFileMetadataID(): Unable to get FileMetadataID, field not selected");
}

const uci::type::FileMetadataID_Type& OrbitalDebrisEstimateType::getFileMetadataID() const {
  return getFileMetadataID_();
}

uci::type::FileMetadataID_Type& OrbitalDebrisEstimateType::getFileMetadataID() {
  return getFileMetadataID_();
}

uci::type::OrbitalDebrisEstimateType& OrbitalDebrisEstimateType::setFileMetadataID(const uci::type::FileMetadataID_Type& accessor) {
  chooseFileMetadataID();
  if (&accessor != fileMetadataID_Accessor.get()) {
    fileMetadataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalDebrisEstimateType::isFileMetadataID() const noexcept {
  return static_cast<bool>(fileMetadataID_Accessor);
}

uci::type::FileMetadataID_Type& OrbitalDebrisEstimateType::chooseFileMetadataID(const std::string& method, uci::base::accessorType::AccessorType type) {
  debrisCloud_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileMetadataID_Type : type};
  if ((!fileMetadataID_Accessor) || (fileMetadataID_Accessor->getAccessorType() != requestedType)) {
    fileMetadataID_Accessor = FileMetadataID_Type::create(type);
    if (!fileMetadataID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fileMetadataID_Accessor;
}

uci::type::FileMetadataID_Type& OrbitalDebrisEstimateType::chooseFileMetadataID(uci::base::accessorType::AccessorType type) {
  return chooseFileMetadataID("chooseFileMetadataID", type);
}

uci::type::OrbitalDebrisEstimateType::DebrisCloud& OrbitalDebrisEstimateType::getDebrisCloud_() const {
  if (debrisCloud_Accessor) {
    return *debrisCloud_Accessor;
  }
  throw uci::base::UCIException("Error in getDebrisCloud(): Unable to get DebrisCloud, field not selected");
}

const uci::type::OrbitalDebrisEstimateType::DebrisCloud& OrbitalDebrisEstimateType::getDebrisCloud() const {
  return getDebrisCloud_();
}

uci::type::OrbitalDebrisEstimateType::DebrisCloud& OrbitalDebrisEstimateType::getDebrisCloud() {
  return getDebrisCloud_();
}

uci::type::OrbitalDebrisEstimateType& OrbitalDebrisEstimateType::setDebrisCloud(const uci::type::OrbitalDebrisEstimateType::DebrisCloud& accessor) {
  chooseDebrisCloud();
  if (&accessor != debrisCloud_Accessor.get()) {
    debrisCloud_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalDebrisEstimateType::isDebrisCloud() const noexcept {
  return static_cast<bool>(debrisCloud_Accessor);
}

uci::type::OrbitalDebrisEstimateType::DebrisCloud& OrbitalDebrisEstimateType::chooseDebrisCloud() {
  fileMetadataID_Accessor.reset();
  if (!debrisCloud_Accessor) {
    debrisCloud_Accessor = boost::make_unique<DebrisCloud>(1, SIZE_MAX);
  }
  return *debrisCloud_Accessor;
}

std::unique_ptr<OrbitalDebrisEstimateType> OrbitalDebrisEstimateType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalDebrisEstimateType : type};
  return (requestedType == uci::type::accessorType::orbitalDebrisEstimateType) ? boost::make_unique<OrbitalDebrisEstimateType>() : nullptr;
}

/**  */
namespace OrbitalDebrisEstimateType_Names {

constexpr const char* Extern_Type_Name{"OrbitalDebrisEstimateType"};
constexpr const char* FileMetadataID_Name{"FileMetadataID"};
constexpr const char* DebrisCloud_Name{"DebrisCloud"};

} // namespace OrbitalDebrisEstimateType_Names

void OrbitalDebrisEstimateType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalDebrisEstimateType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalDebrisEstimateType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalDebrisEstimateType_Names::FileMetadataID_Name) {
      FileMetadataID_Type::deserialize(valueType.second, accessor.chooseFileMetadataID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalDebrisEstimateType_Names::DebrisCloud_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitalDebrisEstimateType::DebrisCloud& boundedList = accessor.chooseDebrisCloud();
        const uci::type::OrbitalDebrisEstimateType::DebrisCloud::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitalDebrisCloudType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string OrbitalDebrisEstimateType::serialize(const uci::type::OrbitalDebrisEstimateType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalDebrisEstimateType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalDebrisEstimateType_Names::Extern_Type_Name);
  }
  if (accessor.isFileMetadataID()) {
    FileMetadataID_Type::serialize(accessor.getFileMetadataID(), node, OrbitalDebrisEstimateType_Names::FileMetadataID_Name);
  } else if (accessor.isDebrisCloud()) {
    {
      const uci::type::OrbitalDebrisEstimateType::DebrisCloud& boundedList = accessor.getDebrisCloud();
      for (uci::type::OrbitalDebrisEstimateType::DebrisCloud::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::OrbitalDebrisCloudType::serialize(boundedList.at(i), node, OrbitalDebrisEstimateType_Names::DebrisCloud_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalDebrisEstimateType& OrbitalDebrisEstimateType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalDebrisEstimateType>().release());
}

uci::type::OrbitalDebrisEstimateType& OrbitalDebrisEstimateType::create(const uci::type::OrbitalDebrisEstimateType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalDebrisEstimateType> newAccessor{boost::make_unique<asb_uci::type::OrbitalDebrisEstimateType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalDebrisEstimateType::destroy(uci::type::OrbitalDebrisEstimateType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalDebrisEstimateType*>(&accessor);
}

} // namespace type

} // namespace uci

