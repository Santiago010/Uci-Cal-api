/** @file CS_SatBandDeconType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CS_SatBandDeconType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DateTimeRangeDeconType.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/IEEE_FrequencyBandEnum.h"
#include "asb_uci/type/SatelliteIdentifierType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CS_SatBandDeconType.h"
#include "uci/type/DateTimeRangeDeconType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/FrequencyType.h"
#include "uci/type/IEEE_FrequencyBandEnum.h"
#include "uci/type/MilliwattPowerRatioType.h"
#include "uci/type/SatelliteIdentifierType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CS_SatBandDeconType::CS_SatBandDeconType()
  : satellite_Accessor{boost::make_unique<SatelliteIdentifierType>()},
    freqBand_Accessor{boost::make_unique<IEEE_FrequencyBandEnum>()},
    deconName_Accessor{boost::make_unique<ForeignKeyType>()},
    timeFrame_Accessor{boost::make_unique<TimeFrame>(1, SIZE_MAX)} {
}

CS_SatBandDeconType::~CS_SatBandDeconType() = default;

void CS_SatBandDeconType::copy(const uci::type::CS_SatBandDeconType& accessor) {
  copyImpl(accessor, false);
}

void CS_SatBandDeconType::copyImpl(const uci::type::CS_SatBandDeconType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CS_SatBandDeconType&>(accessor);
    setSatellite(*(accessorImpl.satellite_Accessor));
    setFreqStart(accessorImpl.freqStart_Accessor);
    setFreqStop(accessorImpl.freqStop_Accessor);
    setFreqBand(*(accessorImpl.freqBand_Accessor));
    setMaxEIRP(accessorImpl.maxEIRP_Accessor);
    setDeconName(*(accessorImpl.deconName_Accessor));
    setTimeFrame(*(accessorImpl.timeFrame_Accessor));
  }
}

void CS_SatBandDeconType::reset() noexcept {
  satellite_Accessor->reset();
  freqStart_Accessor = 0.0;
  freqStop_Accessor = 0.0;
  freqBand_Accessor->reset();
  maxEIRP_Accessor = 0.0;
  if (deconName_Accessor->getAccessorType() != uci::type::accessorType::foreignKeyType) {
    deconName_Accessor = boost::make_unique<ForeignKeyType>();
  } else {
    deconName_Accessor->reset();
  }
  timeFrame_Accessor->reset();
}

const uci::type::SatelliteIdentifierType& CS_SatBandDeconType::getSatellite() const {
  return *satellite_Accessor;
}

uci::type::SatelliteIdentifierType& CS_SatBandDeconType::getSatellite() {
  return *satellite_Accessor;
}

uci::type::CS_SatBandDeconType& CS_SatBandDeconType::setSatellite(const uci::type::SatelliteIdentifierType& accessor) {
  if (&accessor != satellite_Accessor.get()) {
    satellite_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FrequencyTypeValue CS_SatBandDeconType::getFreqStart() const {
  return freqStart_Accessor;
}

uci::type::CS_SatBandDeconType& CS_SatBandDeconType::setFreqStart(uci::type::FrequencyTypeValue value) {
  freqStart_Accessor = value;
  return *this;
}


uci::type::FrequencyTypeValue CS_SatBandDeconType::getFreqStop() const {
  return freqStop_Accessor;
}

uci::type::CS_SatBandDeconType& CS_SatBandDeconType::setFreqStop(uci::type::FrequencyTypeValue value) {
  freqStop_Accessor = value;
  return *this;
}


const uci::type::IEEE_FrequencyBandEnum& CS_SatBandDeconType::getFreqBand() const {
  return *freqBand_Accessor;
}

uci::type::IEEE_FrequencyBandEnum& CS_SatBandDeconType::getFreqBand() {
  return *freqBand_Accessor;
}

uci::type::CS_SatBandDeconType& CS_SatBandDeconType::setFreqBand(const uci::type::IEEE_FrequencyBandEnum& accessor) {
  if (&accessor != freqBand_Accessor.get()) {
    freqBand_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CS_SatBandDeconType& CS_SatBandDeconType::setFreqBand(uci::type::IEEE_FrequencyBandEnum::EnumerationItem value) {
  freqBand_Accessor->setValue(value);
  return *this;
}


uci::type::MilliwattPowerRatioTypeValue CS_SatBandDeconType::getMaxEIRP() const {
  return maxEIRP_Accessor;
}

uci::type::CS_SatBandDeconType& CS_SatBandDeconType::setMaxEIRP(uci::type::MilliwattPowerRatioTypeValue value) {
  maxEIRP_Accessor = value;
  return *this;
}


const uci::type::ForeignKeyType& CS_SatBandDeconType::getDeconName() const {
  return *deconName_Accessor;
}

uci::type::ForeignKeyType& CS_SatBandDeconType::getDeconName() {
  return *deconName_Accessor;
}

uci::type::CS_SatBandDeconType& CS_SatBandDeconType::setDeconName(const uci::type::ForeignKeyType& accessor) {
  enableDeconName(accessor.getAccessorType());
  if (&accessor != deconName_Accessor.get()) {
    deconName_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ForeignKeyType& CS_SatBandDeconType::enableDeconName(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!deconName_Accessor) || (deconName_Accessor->getAccessorType() != requestedType)) {
    deconName_Accessor = ForeignKeyType::create(requestedType);
    if (!deconName_Accessor) {
      throw uci::base::UCIException("Error in enableDeconName(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *deconName_Accessor;
}

const uci::type::CS_SatBandDeconType::TimeFrame& CS_SatBandDeconType::getTimeFrame() const {
  return *timeFrame_Accessor;
}

uci::type::CS_SatBandDeconType::TimeFrame& CS_SatBandDeconType::getTimeFrame() {
  return *timeFrame_Accessor;
}

uci::type::CS_SatBandDeconType& CS_SatBandDeconType::setTimeFrame(const uci::type::CS_SatBandDeconType::TimeFrame& accessor) {
  if (&accessor != timeFrame_Accessor.get()) {
    timeFrame_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CS_SatBandDeconType> CS_SatBandDeconType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_SatBandDeconType : type};
  return (requestedType == uci::type::accessorType::cS_SatBandDeconType) ? boost::make_unique<CS_SatBandDeconType>() : nullptr;
}

/**  */
namespace CS_SatBandDeconType_Names {

constexpr const char* Extern_Type_Name{"CS_SatBandDeconType"};
constexpr const char* Satellite_Name{"Satellite"};
constexpr const char* FreqStart_Name{"FreqStart"};
constexpr const char* FreqStop_Name{"FreqStop"};
constexpr const char* FreqBand_Name{"FreqBand"};
constexpr const char* MaxEIRP_Name{"MaxEIRP"};
constexpr const char* DeconName_Name{"DeconName"};
constexpr const char* TimeFrame_Name{"TimeFrame"};

} // namespace CS_SatBandDeconType_Names

void CS_SatBandDeconType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_SatBandDeconType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CS_SatBandDeconType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CS_SatBandDeconType_Names::Satellite_Name) {
      SatelliteIdentifierType::deserialize(valueType.second, accessor.getSatellite(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_SatBandDeconType_Names::FreqStart_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFreqStart(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SatBandDeconType_Names::FreqStop_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFreqStop(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SatBandDeconType_Names::FreqBand_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getFreqBand().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_SatBandDeconType_Names::MaxEIRP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxEIRP(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SatBandDeconType_Names::DeconName_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDeconName(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_SatBandDeconType_Names::TimeFrame_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CS_SatBandDeconType::TimeFrame& boundedList = accessor.getTimeFrame();
        const uci::type::CS_SatBandDeconType::TimeFrame::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DateTimeRangeDeconType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CS_SatBandDeconType::serialize(const uci::type::CS_SatBandDeconType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CS_SatBandDeconType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CS_SatBandDeconType_Names::Extern_Type_Name);
  }
  SatelliteIdentifierType::serialize(accessor.getSatellite(), node, CS_SatBandDeconType_Names::Satellite_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFreqStart(), node, CS_SatBandDeconType_Names::FreqStart_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFreqStop(), node, CS_SatBandDeconType_Names::FreqStop_Name);
  IEEE_FrequencyBandEnum::serialize(accessor.getFreqBand(), node, CS_SatBandDeconType_Names::FreqBand_Name, false);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaxEIRP(), node, CS_SatBandDeconType_Names::MaxEIRP_Name);
  ForeignKeyType::serialize(accessor.getDeconName(), node, CS_SatBandDeconType_Names::DeconName_Name);
  {
    const uci::type::CS_SatBandDeconType::TimeFrame& boundedList = accessor.getTimeFrame();
    for (uci::type::CS_SatBandDeconType::TimeFrame::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DateTimeRangeDeconType::serialize(boundedList.at(i), node, CS_SatBandDeconType_Names::TimeFrame_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CS_SatBandDeconType& CS_SatBandDeconType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CS_SatBandDeconType>().release());
}

uci::type::CS_SatBandDeconType& CS_SatBandDeconType::create(const uci::type::CS_SatBandDeconType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CS_SatBandDeconType> newAccessor{boost::make_unique<asb_uci::type::CS_SatBandDeconType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CS_SatBandDeconType::destroy(uci::type::CS_SatBandDeconType& accessor) {
  delete dynamic_cast<asb_uci::type::CS_SatBandDeconType*>(&accessor);
}

} // namespace type

} // namespace uci

