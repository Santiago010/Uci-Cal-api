/** @file AtomicEnergyMarkingsChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AtomicEnergyMarkingsChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AtomicEnergyMarkingsEnum.h"
#include "asb_uci/type/AtomicEnergySigmaMarkingsEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AtomicEnergyMarkingsChoiceType.h"
#include "uci/type/AtomicEnergyMarkingsEnum.h"
#include "uci/type/AtomicEnergySigmaMarkingsEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AtomicEnergyMarkingsChoiceType::AtomicEnergyMarkingsChoiceType() = default;

AtomicEnergyMarkingsChoiceType::~AtomicEnergyMarkingsChoiceType() = default;

void AtomicEnergyMarkingsChoiceType::copy(const uci::type::AtomicEnergyMarkingsChoiceType& accessor) {
  copyImpl(accessor, false);
}

void AtomicEnergyMarkingsChoiceType::copyImpl(const uci::type::AtomicEnergyMarkingsChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AtomicEnergyMarkingsChoiceType&>(accessor);
    if (accessorImpl.markings_Accessor) {
      setMarkings(*(accessorImpl.markings_Accessor));
    } else {
      markings_Accessor.reset();
    }
    if (accessorImpl.sigmaMarkings_Accessor) {
      setSigmaMarkings(*(accessorImpl.sigmaMarkings_Accessor));
    } else {
      sigmaMarkings_Accessor.reset();
    }
  }
}

void AtomicEnergyMarkingsChoiceType::reset() noexcept {
  markings_Accessor.reset();
  sigmaMarkings_Accessor.reset();
}

uci::type::AtomicEnergyMarkingsChoiceType::AtomicEnergyMarkingsChoiceTypeChoice AtomicEnergyMarkingsChoiceType::getAtomicEnergyMarkingsChoiceTypeChoiceOrdinal() const noexcept {
  if (markings_Accessor) {
    return ATOMICENERGYMARKINGSCHOICETYPE_CHOICE_MARKINGS;
  }
  if (sigmaMarkings_Accessor) {
    return ATOMICENERGYMARKINGSCHOICETYPE_CHOICE_SIGMAMARKINGS;
  }
  return ATOMICENERGYMARKINGSCHOICETYPE_CHOICE_NONE;
}

uci::type::AtomicEnergyMarkingsChoiceType& AtomicEnergyMarkingsChoiceType::setAtomicEnergyMarkingsChoiceTypeChoiceOrdinal(uci::type::AtomicEnergyMarkingsChoiceType::AtomicEnergyMarkingsChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ATOMICENERGYMARKINGSCHOICETYPE_CHOICE_MARKINGS:
      chooseMarkings("setAtomicEnergyMarkingsChoiceTypeChoiceOrdinal", type);
      break;
    case ATOMICENERGYMARKINGSCHOICETYPE_CHOICE_SIGMAMARKINGS:
      chooseSigmaMarkings("setAtomicEnergyMarkingsChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setAtomicEnergyMarkingsChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AtomicEnergyMarkingsEnum& AtomicEnergyMarkingsChoiceType::getMarkings_() const {
  if (markings_Accessor) {
    return *markings_Accessor;
  }
  throw uci::base::UCIException("Error in getMarkings(): Unable to get Markings, field not selected");
}

const uci::type::AtomicEnergyMarkingsEnum& AtomicEnergyMarkingsChoiceType::getMarkings() const {
  return getMarkings_();
}

uci::type::AtomicEnergyMarkingsEnum& AtomicEnergyMarkingsChoiceType::getMarkings() {
  return getMarkings_();
}

uci::type::AtomicEnergyMarkingsChoiceType& AtomicEnergyMarkingsChoiceType::setMarkings(const uci::type::AtomicEnergyMarkingsEnum& accessor) {
  chooseMarkings();
  if (&accessor != markings_Accessor.get()) {
    markings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AtomicEnergyMarkingsChoiceType& AtomicEnergyMarkingsChoiceType::setMarkings(uci::type::AtomicEnergyMarkingsEnum::EnumerationItem value) {
  chooseMarkings().setValue(value);
  return *this;
}

bool AtomicEnergyMarkingsChoiceType::isMarkings() const noexcept {
  return static_cast<bool>(markings_Accessor);
}

uci::type::AtomicEnergyMarkingsEnum& AtomicEnergyMarkingsChoiceType::chooseMarkings(const std::string& method, uci::base::accessorType::AccessorType type) {
  sigmaMarkings_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::atomicEnergyMarkingsEnum : type};
  if ((!markings_Accessor) || (markings_Accessor->getAccessorType() != requestedType)) {
    markings_Accessor = AtomicEnergyMarkingsEnum::create(type);
    if (!markings_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *markings_Accessor;
}

uci::type::AtomicEnergyMarkingsEnum& AtomicEnergyMarkingsChoiceType::chooseMarkings(uci::base::accessorType::AccessorType type) {
  return chooseMarkings("chooseMarkings", type);
}

uci::type::AtomicEnergySigmaMarkingsEnum& AtomicEnergyMarkingsChoiceType::getSigmaMarkings_() const {
  if (sigmaMarkings_Accessor) {
    return *sigmaMarkings_Accessor;
  }
  throw uci::base::UCIException("Error in getSigmaMarkings(): Unable to get SigmaMarkings, field not selected");
}

const uci::type::AtomicEnergySigmaMarkingsEnum& AtomicEnergyMarkingsChoiceType::getSigmaMarkings() const {
  return getSigmaMarkings_();
}

uci::type::AtomicEnergySigmaMarkingsEnum& AtomicEnergyMarkingsChoiceType::getSigmaMarkings() {
  return getSigmaMarkings_();
}

uci::type::AtomicEnergyMarkingsChoiceType& AtomicEnergyMarkingsChoiceType::setSigmaMarkings(const uci::type::AtomicEnergySigmaMarkingsEnum& accessor) {
  chooseSigmaMarkings();
  if (&accessor != sigmaMarkings_Accessor.get()) {
    sigmaMarkings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AtomicEnergyMarkingsChoiceType& AtomicEnergyMarkingsChoiceType::setSigmaMarkings(uci::type::AtomicEnergySigmaMarkingsEnum::EnumerationItem value) {
  chooseSigmaMarkings().setValue(value);
  return *this;
}

bool AtomicEnergyMarkingsChoiceType::isSigmaMarkings() const noexcept {
  return static_cast<bool>(sigmaMarkings_Accessor);
}

uci::type::AtomicEnergySigmaMarkingsEnum& AtomicEnergyMarkingsChoiceType::chooseSigmaMarkings(const std::string& method, uci::base::accessorType::AccessorType type) {
  markings_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::atomicEnergySigmaMarkingsEnum : type};
  if ((!sigmaMarkings_Accessor) || (sigmaMarkings_Accessor->getAccessorType() != requestedType)) {
    sigmaMarkings_Accessor = AtomicEnergySigmaMarkingsEnum::create(type);
    if (!sigmaMarkings_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sigmaMarkings_Accessor;
}

uci::type::AtomicEnergySigmaMarkingsEnum& AtomicEnergyMarkingsChoiceType::chooseSigmaMarkings(uci::base::accessorType::AccessorType type) {
  return chooseSigmaMarkings("chooseSigmaMarkings", type);
}

std::unique_ptr<AtomicEnergyMarkingsChoiceType> AtomicEnergyMarkingsChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::atomicEnergyMarkingsChoiceType : type};
  return (requestedType == uci::type::accessorType::atomicEnergyMarkingsChoiceType) ? boost::make_unique<AtomicEnergyMarkingsChoiceType>() : nullptr;
}

/**  */
namespace AtomicEnergyMarkingsChoiceType_Names {

constexpr const char* Extern_Type_Name{"AtomicEnergyMarkingsChoiceType"};
constexpr const char* Markings_Name{"Markings"};
constexpr const char* SigmaMarkings_Name{"SigmaMarkings"};

} // namespace AtomicEnergyMarkingsChoiceType_Names

void AtomicEnergyMarkingsChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AtomicEnergyMarkingsChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AtomicEnergyMarkingsChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AtomicEnergyMarkingsChoiceType_Names::Markings_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseMarkings().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AtomicEnergyMarkingsChoiceType_Names::SigmaMarkings_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseSigmaMarkings().setValueFromName(*value);
      }
    }
  }
}

std::string AtomicEnergyMarkingsChoiceType::serialize(const uci::type::AtomicEnergyMarkingsChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AtomicEnergyMarkingsChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AtomicEnergyMarkingsChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isMarkings()) {
    AtomicEnergyMarkingsEnum::serialize(accessor.getMarkings(), node, AtomicEnergyMarkingsChoiceType_Names::Markings_Name, false);
  } else if (accessor.isSigmaMarkings()) {
    AtomicEnergySigmaMarkingsEnum::serialize(accessor.getSigmaMarkings(), node, AtomicEnergyMarkingsChoiceType_Names::SigmaMarkings_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AtomicEnergyMarkingsChoiceType& AtomicEnergyMarkingsChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AtomicEnergyMarkingsChoiceType>().release());
}

uci::type::AtomicEnergyMarkingsChoiceType& AtomicEnergyMarkingsChoiceType::create(const uci::type::AtomicEnergyMarkingsChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AtomicEnergyMarkingsChoiceType> newAccessor{boost::make_unique<asb_uci::type::AtomicEnergyMarkingsChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AtomicEnergyMarkingsChoiceType::destroy(uci::type::AtomicEnergyMarkingsChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::AtomicEnergyMarkingsChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

