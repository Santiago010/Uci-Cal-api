/** @file IPv6_SettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/IPv6_SettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IPv6_SettingsType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IPv6_SettingsType::IPv6_SettingsType() = default;

IPv6_SettingsType::~IPv6_SettingsType() = default;

void IPv6_SettingsType::copy(const uci::type::IPv6_SettingsType& accessor) {
  copyImpl(accessor, false);
}

void IPv6_SettingsType::copyImpl(const uci::type::IPv6_SettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IPv6_SettingsType&>(accessor);
    if (accessorImpl.staticIP_Address_Accessor) {
      setStaticIP_Address(*(accessorImpl.staticIP_Address_Accessor));
    } else {
      staticIP_Address_Accessor.reset();
    }
    if (accessorImpl.preferredDNS_Server_Accessor) {
      setPreferredDNS_Server(*(accessorImpl.preferredDNS_Server_Accessor));
    } else {
      preferredDNS_Server_Accessor.reset();
    }
    if (accessorImpl.hasPortNumber()) {
      setPortNumber(accessorImpl.getPortNumber());
    } else {
      clearPortNumber();
    }
  }
}

void IPv6_SettingsType::reset() noexcept {
  staticIP_Address_Accessor.reset();
  preferredDNS_Server_Accessor.reset();
  clearPortNumber();
}

uci::type::ForeignKeyType& IPv6_SettingsType::getStaticIP_Address_() const {
  if (staticIP_Address_Accessor) {
    return *staticIP_Address_Accessor;
  }
  throw uci::base::UCIException("Error in getStaticIP_Address(): An attempt was made to get an optional field that was not enabled, call hasStaticIP_Address() to determine if it is safe to call getStaticIP_Address()");
}

const uci::type::ForeignKeyType& IPv6_SettingsType::getStaticIP_Address() const {
  return getStaticIP_Address_();
}

uci::type::ForeignKeyType& IPv6_SettingsType::getStaticIP_Address() {
  return getStaticIP_Address_();
}

uci::type::IPv6_SettingsType& IPv6_SettingsType::setStaticIP_Address(const uci::type::ForeignKeyType& accessor) {
  enableStaticIP_Address(accessor.getAccessorType());
  if (&accessor != staticIP_Address_Accessor.get()) {
    staticIP_Address_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool IPv6_SettingsType::hasStaticIP_Address() const noexcept {
  return static_cast<bool>(staticIP_Address_Accessor);
}

uci::type::ForeignKeyType& IPv6_SettingsType::enableStaticIP_Address(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!staticIP_Address_Accessor) || (staticIP_Address_Accessor->getAccessorType() != requestedType)) {
    staticIP_Address_Accessor = ForeignKeyType::create(requestedType);
    if (!staticIP_Address_Accessor) {
      throw uci::base::UCIException("Error in enableStaticIP_Address(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *staticIP_Address_Accessor;
}

uci::type::IPv6_SettingsType& IPv6_SettingsType::clearStaticIP_Address() noexcept {
  staticIP_Address_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& IPv6_SettingsType::getPreferredDNS_Server_() const {
  if (preferredDNS_Server_Accessor) {
    return *preferredDNS_Server_Accessor;
  }
  throw uci::base::UCIException("Error in getPreferredDNS_Server(): An attempt was made to get an optional field that was not enabled, call hasPreferredDNS_Server() to determine if it is safe to call getPreferredDNS_Server()");
}

const uci::type::ForeignKeyType& IPv6_SettingsType::getPreferredDNS_Server() const {
  return getPreferredDNS_Server_();
}

uci::type::ForeignKeyType& IPv6_SettingsType::getPreferredDNS_Server() {
  return getPreferredDNS_Server_();
}

uci::type::IPv6_SettingsType& IPv6_SettingsType::setPreferredDNS_Server(const uci::type::ForeignKeyType& accessor) {
  enablePreferredDNS_Server(accessor.getAccessorType());
  if (&accessor != preferredDNS_Server_Accessor.get()) {
    preferredDNS_Server_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool IPv6_SettingsType::hasPreferredDNS_Server() const noexcept {
  return static_cast<bool>(preferredDNS_Server_Accessor);
}

uci::type::ForeignKeyType& IPv6_SettingsType::enablePreferredDNS_Server(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!preferredDNS_Server_Accessor) || (preferredDNS_Server_Accessor->getAccessorType() != requestedType)) {
    preferredDNS_Server_Accessor = ForeignKeyType::create(requestedType);
    if (!preferredDNS_Server_Accessor) {
      throw uci::base::UCIException("Error in enablePreferredDNS_Server(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *preferredDNS_Server_Accessor;
}

uci::type::IPv6_SettingsType& IPv6_SettingsType::clearPreferredDNS_Server() noexcept {
  preferredDNS_Server_Accessor.reset();
  return *this;
}

xs::Int IPv6_SettingsType::getPortNumber() const {
  if (portNumber_Accessor) {
    return *portNumber_Accessor;
  }
  throw uci::base::UCIException("Error in getPortNumber(): An attempt was made to get an optional field that was not enabled, call hasPortNumber() to determine if it is safe to call getPortNumber()");
}

uci::type::IPv6_SettingsType& IPv6_SettingsType::setPortNumber(xs::Int value) {
  portNumber_Accessor = value;
  return *this;
}

bool IPv6_SettingsType::hasPortNumber() const noexcept {
  return portNumber_Accessor.has_value();
}

uci::type::IPv6_SettingsType& IPv6_SettingsType::clearPortNumber() noexcept {
  portNumber_Accessor.reset();
  return *this;
}

std::unique_ptr<IPv6_SettingsType> IPv6_SettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iPv6_SettingsType : type};
  return (requestedType == uci::type::accessorType::iPv6_SettingsType) ? boost::make_unique<IPv6_SettingsType>() : nullptr;
}

/**  */
namespace IPv6_SettingsType_Names {

constexpr const char* Extern_Type_Name{"IPv6_SettingsType"};
constexpr const char* StaticIP_Address_Name{"StaticIP_Address"};
constexpr const char* PreferredDNS_Server_Name{"PreferredDNS_Server"};
constexpr const char* PortNumber_Name{"PortNumber"};

} // namespace IPv6_SettingsType_Names

void IPv6_SettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IPv6_SettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IPv6_SettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IPv6_SettingsType_Names::StaticIP_Address_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableStaticIP_Address(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IPv6_SettingsType_Names::PreferredDNS_Server_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePreferredDNS_Server(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IPv6_SettingsType_Names::PortNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPortNumber(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    }
  }
}

std::string IPv6_SettingsType::serialize(const uci::type::IPv6_SettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IPv6_SettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IPv6_SettingsType_Names::Extern_Type_Name);
  }
  if (accessor.hasStaticIP_Address()) {
    ForeignKeyType::serialize(accessor.getStaticIP_Address(), node, IPv6_SettingsType_Names::StaticIP_Address_Name);
  }
  if (accessor.hasPreferredDNS_Server()) {
    ForeignKeyType::serialize(accessor.getPreferredDNS_Server(), node, IPv6_SettingsType_Names::PreferredDNS_Server_Name);
  }
  if (accessor.hasPortNumber()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getPortNumber(), node, IPv6_SettingsType_Names::PortNumber_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IPv6_SettingsType& IPv6_SettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IPv6_SettingsType>().release());
}

uci::type::IPv6_SettingsType& IPv6_SettingsType::create(const uci::type::IPv6_SettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IPv6_SettingsType> newAccessor{boost::make_unique<asb_uci::type::IPv6_SettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IPv6_SettingsType::destroy(uci::type::IPv6_SettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::IPv6_SettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

