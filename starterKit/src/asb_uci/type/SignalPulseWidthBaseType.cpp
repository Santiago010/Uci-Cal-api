/** @file SignalPulseWidthBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SignalPulseWidthBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DurationType.h"
#include "uci/type/SignalPulseWidthBaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SignalPulseWidthBaseType::SignalPulseWidthBaseType() = default;

SignalPulseWidthBaseType::~SignalPulseWidthBaseType() = default;

void SignalPulseWidthBaseType::copy(const uci::type::SignalPulseWidthBaseType& accessor) {
  copyImpl(accessor, false);
}

void SignalPulseWidthBaseType::copyImpl(const uci::type::SignalPulseWidthBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::signalPulseWidthBaseType)) {
      const auto& accessorImpl = dynamic_cast<const SignalPulseWidthBaseType&>(accessor);
      if (accessorImpl.hasPulseWidthAverage()) {
        setPulseWidthAverage(accessorImpl.getPulseWidthAverage());
      } else {
        clearPulseWidthAverage();
      }
      if (accessorImpl.hasPulseWidthMin()) {
        setPulseWidthMin(accessorImpl.getPulseWidthMin());
      } else {
        clearPulseWidthMin();
      }
      if (accessorImpl.hasPulseWidthMax()) {
        setPulseWidthMax(accessorImpl.getPulseWidthMax());
      } else {
        clearPulseWidthMax();
      }
      if (accessorImpl.hasPulseWidthLast()) {
        setPulseWidthLast(accessorImpl.getPulseWidthLast());
      } else {
        clearPulseWidthLast();
      }
      if (accessorImpl.hasPulseWidthDeviation()) {
        setPulseWidthDeviation(accessorImpl.getPulseWidthDeviation());
      } else {
        clearPulseWidthDeviation();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void SignalPulseWidthBaseType::reset() noexcept {
  clearPulseWidthAverage();
  clearPulseWidthMin();
  clearPulseWidthMax();
  clearPulseWidthLast();
  clearPulseWidthDeviation();
}

uci::type::DurationTypeValue SignalPulseWidthBaseType::getPulseWidthAverage() const {
  if (pulseWidthAverage_Accessor) {
    return *pulseWidthAverage_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidthAverage(): An attempt was made to get an optional field that was not enabled, call hasPulseWidthAverage() to determine if it is safe to call getPulseWidthAverage()");
}

uci::type::SignalPulseWidthBaseType& SignalPulseWidthBaseType::setPulseWidthAverage(uci::type::DurationTypeValue value) {
  pulseWidthAverage_Accessor = value;
  return *this;
}

bool SignalPulseWidthBaseType::hasPulseWidthAverage() const noexcept {
  return pulseWidthAverage_Accessor.has_value();
}

uci::type::SignalPulseWidthBaseType& SignalPulseWidthBaseType::clearPulseWidthAverage() noexcept {
  pulseWidthAverage_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue SignalPulseWidthBaseType::getPulseWidthMin() const {
  if (pulseWidthMin_Accessor) {
    return *pulseWidthMin_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidthMin(): An attempt was made to get an optional field that was not enabled, call hasPulseWidthMin() to determine if it is safe to call getPulseWidthMin()");
}

uci::type::SignalPulseWidthBaseType& SignalPulseWidthBaseType::setPulseWidthMin(uci::type::DurationTypeValue value) {
  pulseWidthMin_Accessor = value;
  return *this;
}

bool SignalPulseWidthBaseType::hasPulseWidthMin() const noexcept {
  return pulseWidthMin_Accessor.has_value();
}

uci::type::SignalPulseWidthBaseType& SignalPulseWidthBaseType::clearPulseWidthMin() noexcept {
  pulseWidthMin_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue SignalPulseWidthBaseType::getPulseWidthMax() const {
  if (pulseWidthMax_Accessor) {
    return *pulseWidthMax_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidthMax(): An attempt was made to get an optional field that was not enabled, call hasPulseWidthMax() to determine if it is safe to call getPulseWidthMax()");
}

uci::type::SignalPulseWidthBaseType& SignalPulseWidthBaseType::setPulseWidthMax(uci::type::DurationTypeValue value) {
  pulseWidthMax_Accessor = value;
  return *this;
}

bool SignalPulseWidthBaseType::hasPulseWidthMax() const noexcept {
  return pulseWidthMax_Accessor.has_value();
}

uci::type::SignalPulseWidthBaseType& SignalPulseWidthBaseType::clearPulseWidthMax() noexcept {
  pulseWidthMax_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue SignalPulseWidthBaseType::getPulseWidthLast() const {
  if (pulseWidthLast_Accessor) {
    return *pulseWidthLast_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidthLast(): An attempt was made to get an optional field that was not enabled, call hasPulseWidthLast() to determine if it is safe to call getPulseWidthLast()");
}

uci::type::SignalPulseWidthBaseType& SignalPulseWidthBaseType::setPulseWidthLast(uci::type::DurationTypeValue value) {
  pulseWidthLast_Accessor = value;
  return *this;
}

bool SignalPulseWidthBaseType::hasPulseWidthLast() const noexcept {
  return pulseWidthLast_Accessor.has_value();
}

uci::type::SignalPulseWidthBaseType& SignalPulseWidthBaseType::clearPulseWidthLast() noexcept {
  pulseWidthLast_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue SignalPulseWidthBaseType::getPulseWidthDeviation() const {
  if (pulseWidthDeviation_Accessor) {
    return *pulseWidthDeviation_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidthDeviation(): An attempt was made to get an optional field that was not enabled, call hasPulseWidthDeviation() to determine if it is safe to call getPulseWidthDeviation()");
}

uci::type::SignalPulseWidthBaseType& SignalPulseWidthBaseType::setPulseWidthDeviation(uci::type::DurationTypeValue value) {
  pulseWidthDeviation_Accessor = value;
  return *this;
}

bool SignalPulseWidthBaseType::hasPulseWidthDeviation() const noexcept {
  return pulseWidthDeviation_Accessor.has_value();
}

uci::type::SignalPulseWidthBaseType& SignalPulseWidthBaseType::clearPulseWidthDeviation() noexcept {
  pulseWidthDeviation_Accessor.reset();
  return *this;
}

std::unique_ptr<SignalPulseWidthBaseType> SignalPulseWidthBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalPulseWidthBaseType : type};
  return std::unique_ptr<SignalPulseWidthBaseType>(dynamic_cast<SignalPulseWidthBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace SignalPulseWidthBaseType_Names {

constexpr const char* Extern_Type_Name{"SignalPulseWidthBaseType"};
constexpr const char* PulseWidthAverage_Name{"PulseWidthAverage"};
constexpr const char* PulseWidthMin_Name{"PulseWidthMin"};
constexpr const char* PulseWidthMax_Name{"PulseWidthMax"};
constexpr const char* PulseWidthLast_Name{"PulseWidthLast"};
constexpr const char* PulseWidthDeviation_Name{"PulseWidthDeviation"};

} // namespace SignalPulseWidthBaseType_Names

void SignalPulseWidthBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalPulseWidthBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SignalPulseWidthBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SignalPulseWidthBaseType_Names::PulseWidthAverage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthAverage(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SignalPulseWidthBaseType_Names::PulseWidthMin_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthMin(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SignalPulseWidthBaseType_Names::PulseWidthMax_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthMax(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SignalPulseWidthBaseType_Names::PulseWidthLast_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthLast(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SignalPulseWidthBaseType_Names::PulseWidthDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthDeviation(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string SignalPulseWidthBaseType::serialize(const uci::type::SignalPulseWidthBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SignalPulseWidthBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::signalPulseWidthBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, SignalPulseWidthBaseType_Names::Extern_Type_Name);
    }
    if (accessor.hasPulseWidthAverage()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthAverage(), node, SignalPulseWidthBaseType_Names::PulseWidthAverage_Name);
    }
    if (accessor.hasPulseWidthMin()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthMin(), node, SignalPulseWidthBaseType_Names::PulseWidthMin_Name);
    }
    if (accessor.hasPulseWidthMax()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthMax(), node, SignalPulseWidthBaseType_Names::PulseWidthMax_Name);
    }
    if (accessor.hasPulseWidthLast()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthLast(), node, SignalPulseWidthBaseType_Names::PulseWidthLast_Name);
    }
    if (accessor.hasPulseWidthDeviation()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthDeviation(), node, SignalPulseWidthBaseType_Names::PulseWidthDeviation_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SignalPulseWidthBaseType& SignalPulseWidthBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SignalPulseWidthBaseType>().release());
}

uci::type::SignalPulseWidthBaseType& SignalPulseWidthBaseType::create(const uci::type::SignalPulseWidthBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SignalPulseWidthBaseType> newAccessor{boost::make_unique<asb_uci::type::SignalPulseWidthBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SignalPulseWidthBaseType::destroy(uci::type::SignalPulseWidthBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::SignalPulseWidthBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

