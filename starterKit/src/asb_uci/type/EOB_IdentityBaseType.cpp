/** @file EOB_IdentityBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EOB_IdentityBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EOB_SiteNameType.h"
#include "../../../include/asb_uci/type/EOB_SitePIN_Type.h"
#include "../../../include/asb_uci/type/ID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_IdentityBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_SiteNameType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_SitePIN_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EOB_IdentityBaseType::EOB_IdentityBaseType() = default;

EOB_IdentityBaseType::~EOB_IdentityBaseType() = default;

void EOB_IdentityBaseType::copy(const uci::type::EOB_IdentityBaseType& accessor) {
  copyImpl(accessor, false);
}

void EOB_IdentityBaseType::copyImpl(const uci::type::EOB_IdentityBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::eOB_IdentityBaseType)) {
      const auto& accessorImpl = dynamic_cast<const EOB_IdentityBaseType&>(accessor);
      if (accessorImpl.sitePIN_Accessor) {
        setSitePIN(*(accessorImpl.sitePIN_Accessor));
      } else {
        sitePIN_Accessor.reset();
      }
      if (accessorImpl.siteName_Accessor) {
        setSiteName(*(accessorImpl.siteName_Accessor));
      } else {
        siteName_Accessor.reset();
      }
      if (accessorImpl.internalID_Accessor) {
        setInternalID(*(accessorImpl.internalID_Accessor));
      } else {
        internalID_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void EOB_IdentityBaseType::reset() noexcept {
  sitePIN_Accessor.reset();
  siteName_Accessor.reset();
  internalID_Accessor.reset();
}

uci::type::EOB_SitePIN_Type& EOB_IdentityBaseType::getSitePIN_() const {
  if (sitePIN_Accessor) {
    return *sitePIN_Accessor;
  }
  throw uci::base::UCIException("Error in getSitePIN(): An attempt was made to get an optional field that was not enabled, call hasSitePIN() to determine if it is safe to call getSitePIN()");
}

const uci::type::EOB_SitePIN_Type& EOB_IdentityBaseType::getSitePIN() const {
  return getSitePIN_();
}

uci::type::EOB_SitePIN_Type& EOB_IdentityBaseType::getSitePIN() {
  return getSitePIN_();
}

uci::type::EOB_IdentityBaseType& EOB_IdentityBaseType::setSitePIN(const uci::type::EOB_SitePIN_Type& accessor) {
  enableSitePIN();
  if (&accessor != sitePIN_Accessor.get()) {
    sitePIN_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EOB_IdentityBaseType::hasSitePIN() const noexcept {
  return static_cast<bool>(sitePIN_Accessor);
}

uci::type::EOB_SitePIN_Type& EOB_IdentityBaseType::enableSitePIN(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_SitePIN_Type : type};
  if ((!sitePIN_Accessor) || (sitePIN_Accessor->getAccessorType() != requestedType)) {
    sitePIN_Accessor = EOB_SitePIN_Type::create(requestedType);
    if (!sitePIN_Accessor) {
      throw uci::base::UCIException("Error in enableSitePIN(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sitePIN_Accessor;
}

uci::type::EOB_IdentityBaseType& EOB_IdentityBaseType::clearSitePIN() noexcept {
  sitePIN_Accessor.reset();
  return *this;
}

uci::type::EOB_SiteNameType& EOB_IdentityBaseType::getSiteName_() const {
  if (siteName_Accessor) {
    return *siteName_Accessor;
  }
  throw uci::base::UCIException("Error in getSiteName(): An attempt was made to get an optional field that was not enabled, call hasSiteName() to determine if it is safe to call getSiteName()");
}

const uci::type::EOB_SiteNameType& EOB_IdentityBaseType::getSiteName() const {
  return getSiteName_();
}

uci::type::EOB_SiteNameType& EOB_IdentityBaseType::getSiteName() {
  return getSiteName_();
}

uci::type::EOB_IdentityBaseType& EOB_IdentityBaseType::setSiteName(const uci::type::EOB_SiteNameType& value) {
  return setSiteName(value.c_str());
}

uci::type::EOB_IdentityBaseType& EOB_IdentityBaseType::setSiteName(const std::string& value) {
  return setSiteName(value.c_str());
}

uci::type::EOB_IdentityBaseType& EOB_IdentityBaseType::setSiteName(const char* value) {
  enableSiteName().setStringValue(value);
  return *this;
}

bool EOB_IdentityBaseType::hasSiteName() const noexcept {
  return static_cast<bool>(siteName_Accessor);
}

uci::type::EOB_SiteNameType& EOB_IdentityBaseType::enableSiteName(uci::base::accessorType::AccessorType type) {
  if (!siteName_Accessor) {
    siteName_Accessor = EOB_SiteNameType::create(type);
  }
  return *siteName_Accessor;
}

uci::type::EOB_IdentityBaseType& EOB_IdentityBaseType::clearSiteName() noexcept {
  siteName_Accessor.reset();
  return *this;
}

uci::type::ID_Type& EOB_IdentityBaseType::getInternalID_() const {
  if (internalID_Accessor) {
    return *internalID_Accessor;
  }
  throw uci::base::UCIException("Error in getInternalID(): An attempt was made to get an optional field that was not enabled, call hasInternalID() to determine if it is safe to call getInternalID()");
}

const uci::type::ID_Type& EOB_IdentityBaseType::getInternalID() const {
  return getInternalID_();
}

uci::type::ID_Type& EOB_IdentityBaseType::getInternalID() {
  return getInternalID_();
}

uci::type::EOB_IdentityBaseType& EOB_IdentityBaseType::setInternalID(const uci::type::ID_Type& accessor) {
  enableInternalID(accessor.getAccessorType());
  if (&accessor != internalID_Accessor.get()) {
    internalID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EOB_IdentityBaseType::hasInternalID() const noexcept {
  return static_cast<bool>(internalID_Accessor);
}

uci::type::ID_Type& EOB_IdentityBaseType::enableInternalID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iD_Type : type};
  if ((!internalID_Accessor) || (internalID_Accessor->getAccessorType() != requestedType)) {
    internalID_Accessor = ID_Type::create(requestedType);
    if (!internalID_Accessor) {
      throw uci::base::UCIException("Error in enableInternalID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *internalID_Accessor;
}

uci::type::EOB_IdentityBaseType& EOB_IdentityBaseType::clearInternalID() noexcept {
  internalID_Accessor.reset();
  return *this;
}

std::unique_ptr<EOB_IdentityBaseType> EOB_IdentityBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_IdentityBaseType : type};
  return std::unique_ptr<EOB_IdentityBaseType>(dynamic_cast<EOB_IdentityBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace EOB_IdentityBaseType_Names {

constexpr const char* Extern_Type_Name{"EOB_IdentityBaseType"};
constexpr const char* SitePIN_Name{"SitePIN"};
constexpr const char* SiteName_Name{"SiteName"};
constexpr const char* InternalID_Name{"InternalID"};

} // namespace EOB_IdentityBaseType_Names

void EOB_IdentityBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EOB_IdentityBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EOB_IdentityBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EOB_IdentityBaseType_Names::SitePIN_Name) {
      EOB_SitePIN_Type::deserialize(valueType.second, accessor.enableSitePIN(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_IdentityBaseType_Names::SiteName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSiteName(*value);
      }
    } else if (valueType.first == nsPrefix + EOB_IdentityBaseType_Names::InternalID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableInternalID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string EOB_IdentityBaseType::serialize(const uci::type::EOB_IdentityBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EOB_IdentityBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::eOB_IdentityBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, EOB_IdentityBaseType_Names::Extern_Type_Name);
    }
    if (accessor.hasSitePIN()) {
      EOB_SitePIN_Type::serialize(accessor.getSitePIN(), node, EOB_IdentityBaseType_Names::SitePIN_Name);
    }
    if (accessor.hasSiteName()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getSiteName(), node, EOB_IdentityBaseType_Names::SiteName_Name);
    }
    if (accessor.hasInternalID()) {
      ID_Type::serialize(accessor.getInternalID(), node, EOB_IdentityBaseType_Names::InternalID_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EOB_IdentityBaseType& EOB_IdentityBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EOB_IdentityBaseType>().release());
}

uci::type::EOB_IdentityBaseType& EOB_IdentityBaseType::create(const uci::type::EOB_IdentityBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EOB_IdentityBaseType> newAccessor{boost::make_unique<asb_uci::type::EOB_IdentityBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EOB_IdentityBaseType::destroy(uci::type::EOB_IdentityBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::EOB_IdentityBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

