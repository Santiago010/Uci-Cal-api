/** @file OrbitKinematicsSourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitKinematicsSourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitPlanID_Type.h"
#include "asb_uci/type/OrbitalElementSetSourceType.h"
#include "asb_uci/type/OrbitalEphemerisSourceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/OrbitKinematicsSourceType.h"
#include "uci/type/OrbitPlanID_Type.h"
#include "uci/type/OrbitalElementSetSourceType.h"
#include "uci/type/OrbitalEphemerisSourceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitKinematicsSourceType::OrbitKinematicsSourceType() = default;

OrbitKinematicsSourceType::~OrbitKinematicsSourceType() = default;

void OrbitKinematicsSourceType::copy(const uci::type::OrbitKinematicsSourceType& accessor) {
  copyImpl(accessor, false);
}

void OrbitKinematicsSourceType::copyImpl(const uci::type::OrbitKinematicsSourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitKinematicsSourceType&>(accessor);
    if (accessorImpl.byPlanID_Accessor) {
      setByPlanID(*(accessorImpl.byPlanID_Accessor));
    } else {
      byPlanID_Accessor.reset();
    }
    if (accessorImpl.byElementSet_Accessor) {
      setByElementSet(*(accessorImpl.byElementSet_Accessor));
    } else {
      byElementSet_Accessor.reset();
    }
    if (accessorImpl.byEphemeris_Accessor) {
      setByEphemeris(*(accessorImpl.byEphemeris_Accessor));
    } else {
      byEphemeris_Accessor.reset();
    }
  }
}

void OrbitKinematicsSourceType::reset() noexcept {
  byPlanID_Accessor.reset();
  byElementSet_Accessor.reset();
  byEphemeris_Accessor.reset();
}

uci::type::OrbitKinematicsSourceType::OrbitKinematicsSourceTypeChoice OrbitKinematicsSourceType::getOrbitKinematicsSourceTypeChoiceOrdinal() const noexcept {
  if (byPlanID_Accessor) {
    return ORBITKINEMATICSSOURCETYPE_CHOICE_BYPLANID;
  }
  if (byElementSet_Accessor) {
    return ORBITKINEMATICSSOURCETYPE_CHOICE_BYELEMENTSET;
  }
  if (byEphemeris_Accessor) {
    return ORBITKINEMATICSSOURCETYPE_CHOICE_BYEPHEMERIS;
  }
  return ORBITKINEMATICSSOURCETYPE_CHOICE_NONE;
}

uci::type::OrbitKinematicsSourceType& OrbitKinematicsSourceType::setOrbitKinematicsSourceTypeChoiceOrdinal(uci::type::OrbitKinematicsSourceType::OrbitKinematicsSourceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITKINEMATICSSOURCETYPE_CHOICE_BYPLANID:
      chooseByPlanID("setOrbitKinematicsSourceTypeChoiceOrdinal", type);
      break;
    case ORBITKINEMATICSSOURCETYPE_CHOICE_BYELEMENTSET:
      chooseByElementSet("setOrbitKinematicsSourceTypeChoiceOrdinal", type);
      break;
    case ORBITKINEMATICSSOURCETYPE_CHOICE_BYEPHEMERIS:
      chooseByEphemeris("setOrbitKinematicsSourceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitKinematicsSourceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OrbitPlanID_Type& OrbitKinematicsSourceType::getByPlanID_() const {
  if (byPlanID_Accessor) {
    return *byPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getByPlanID(): Unable to get ByPlanID, field not selected");
}

const uci::type::OrbitPlanID_Type& OrbitKinematicsSourceType::getByPlanID() const {
  return getByPlanID_();
}

uci::type::OrbitPlanID_Type& OrbitKinematicsSourceType::getByPlanID() {
  return getByPlanID_();
}

uci::type::OrbitKinematicsSourceType& OrbitKinematicsSourceType::setByPlanID(const uci::type::OrbitPlanID_Type& accessor) {
  chooseByPlanID();
  if (&accessor != byPlanID_Accessor.get()) {
    byPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsSourceType::isByPlanID() const noexcept {
  return static_cast<bool>(byPlanID_Accessor);
}

uci::type::OrbitPlanID_Type& OrbitKinematicsSourceType::chooseByPlanID(const std::string& method, uci::base::accessorType::AccessorType type) {
  byElementSet_Accessor.reset();
  byEphemeris_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitPlanID_Type : type};
  if ((!byPlanID_Accessor) || (byPlanID_Accessor->getAccessorType() != requestedType)) {
    byPlanID_Accessor = OrbitPlanID_Type::create(type);
    if (!byPlanID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byPlanID_Accessor;
}

uci::type::OrbitPlanID_Type& OrbitKinematicsSourceType::chooseByPlanID(uci::base::accessorType::AccessorType type) {
  return chooseByPlanID("chooseByPlanID", type);
}

uci::type::OrbitalElementSetSourceType& OrbitKinematicsSourceType::getByElementSet_() const {
  if (byElementSet_Accessor) {
    return *byElementSet_Accessor;
  }
  throw uci::base::UCIException("Error in getByElementSet(): Unable to get ByElementSet, field not selected");
}

const uci::type::OrbitalElementSetSourceType& OrbitKinematicsSourceType::getByElementSet() const {
  return getByElementSet_();
}

uci::type::OrbitalElementSetSourceType& OrbitKinematicsSourceType::getByElementSet() {
  return getByElementSet_();
}

uci::type::OrbitKinematicsSourceType& OrbitKinematicsSourceType::setByElementSet(const uci::type::OrbitalElementSetSourceType& accessor) {
  chooseByElementSet(accessor.getAccessorType());
  if (&accessor != byElementSet_Accessor.get()) {
    byElementSet_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsSourceType::isByElementSet() const noexcept {
  return static_cast<bool>(byElementSet_Accessor);
}

uci::type::OrbitalElementSetSourceType& OrbitKinematicsSourceType::chooseByElementSet(const std::string& method, uci::base::accessorType::AccessorType type) {
  byPlanID_Accessor.reset();
  byEphemeris_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalElementSetSourceType : type};
  if ((!byElementSet_Accessor) || (byElementSet_Accessor->getAccessorType() != requestedType)) {
    byElementSet_Accessor = OrbitalElementSetSourceType::create(type);
    if (!byElementSet_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byElementSet_Accessor;
}

uci::type::OrbitalElementSetSourceType& OrbitKinematicsSourceType::chooseByElementSet(uci::base::accessorType::AccessorType type) {
  return chooseByElementSet("chooseByElementSet", type);
}

uci::type::OrbitalEphemerisSourceType& OrbitKinematicsSourceType::getByEphemeris_() const {
  if (byEphemeris_Accessor) {
    return *byEphemeris_Accessor;
  }
  throw uci::base::UCIException("Error in getByEphemeris(): Unable to get ByEphemeris, field not selected");
}

const uci::type::OrbitalEphemerisSourceType& OrbitKinematicsSourceType::getByEphemeris() const {
  return getByEphemeris_();
}

uci::type::OrbitalEphemerisSourceType& OrbitKinematicsSourceType::getByEphemeris() {
  return getByEphemeris_();
}

uci::type::OrbitKinematicsSourceType& OrbitKinematicsSourceType::setByEphemeris(const uci::type::OrbitalEphemerisSourceType& accessor) {
  chooseByEphemeris(accessor.getAccessorType());
  if (&accessor != byEphemeris_Accessor.get()) {
    byEphemeris_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsSourceType::isByEphemeris() const noexcept {
  return static_cast<bool>(byEphemeris_Accessor);
}

uci::type::OrbitalEphemerisSourceType& OrbitKinematicsSourceType::chooseByEphemeris(const std::string& method, uci::base::accessorType::AccessorType type) {
  byPlanID_Accessor.reset();
  byElementSet_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalEphemerisSourceType : type};
  if ((!byEphemeris_Accessor) || (byEphemeris_Accessor->getAccessorType() != requestedType)) {
    byEphemeris_Accessor = OrbitalEphemerisSourceType::create(type);
    if (!byEphemeris_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byEphemeris_Accessor;
}

uci::type::OrbitalEphemerisSourceType& OrbitKinematicsSourceType::chooseByEphemeris(uci::base::accessorType::AccessorType type) {
  return chooseByEphemeris("chooseByEphemeris", type);
}

std::unique_ptr<OrbitKinematicsSourceType> OrbitKinematicsSourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsSourceType : type};
  return (requestedType == uci::type::accessorType::orbitKinematicsSourceType) ? boost::make_unique<OrbitKinematicsSourceType>() : nullptr;
}

/**  */
namespace OrbitKinematicsSourceType_Names {

constexpr const char* Extern_Type_Name{"OrbitKinematicsSourceType"};
constexpr const char* ByPlanID_Name{"ByPlanID"};
constexpr const char* ByElementSet_Name{"ByElementSet"};
constexpr const char* ByEphemeris_Name{"ByEphemeris"};

} // namespace OrbitKinematicsSourceType_Names

void OrbitKinematicsSourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitKinematicsSourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitKinematicsSourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitKinematicsSourceType_Names::ByPlanID_Name) {
      OrbitPlanID_Type::deserialize(valueType.second, accessor.chooseByPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsSourceType_Names::ByElementSet_Name) {
      OrbitalElementSetSourceType::deserialize(valueType.second, accessor.chooseByElementSet(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsSourceType_Names::ByEphemeris_Name) {
      OrbitalEphemerisSourceType::deserialize(valueType.second, accessor.chooseByEphemeris(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitKinematicsSourceType::serialize(const uci::type::OrbitKinematicsSourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitKinematicsSourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitKinematicsSourceType_Names::Extern_Type_Name);
  }
  if (accessor.isByPlanID()) {
    OrbitPlanID_Type::serialize(accessor.getByPlanID(), node, OrbitKinematicsSourceType_Names::ByPlanID_Name);
  } else if (accessor.isByElementSet()) {
    OrbitalElementSetSourceType::serialize(accessor.getByElementSet(), node, OrbitKinematicsSourceType_Names::ByElementSet_Name);
  } else if (accessor.isByEphemeris()) {
    OrbitalEphemerisSourceType::serialize(accessor.getByEphemeris(), node, OrbitKinematicsSourceType_Names::ByEphemeris_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitKinematicsSourceType& OrbitKinematicsSourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitKinematicsSourceType>().release());
}

uci::type::OrbitKinematicsSourceType& OrbitKinematicsSourceType::create(const uci::type::OrbitKinematicsSourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitKinematicsSourceType> newAccessor{boost::make_unique<asb_uci::type::OrbitKinematicsSourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitKinematicsSourceType::destroy(uci::type::OrbitKinematicsSourceType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitKinematicsSourceType*>(&accessor);
}

} // namespace type

} // namespace uci

