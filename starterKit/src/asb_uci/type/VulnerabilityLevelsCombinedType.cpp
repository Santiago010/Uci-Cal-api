/** @file VulnerabilityLevelsCombinedType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/VulnerabilityLevelsCombinedType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/VulnerabilityLevelsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PercentType.h"
#include "uci/type/VulnerabilityLevelsCombinedType.h"
#include "uci/type/VulnerabilityLevelsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VulnerabilityLevelsCombinedType::VulnerabilityLevelsCombinedType() = default;

VulnerabilityLevelsCombinedType::~VulnerabilityLevelsCombinedType() = default;

void VulnerabilityLevelsCombinedType::copy(const uci::type::VulnerabilityLevelsCombinedType& accessor) {
  copyImpl(accessor, false);
}

void VulnerabilityLevelsCombinedType::copyImpl(const uci::type::VulnerabilityLevelsCombinedType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VulnerabilityLevelsCombinedType&>(accessor);
    if (accessorImpl.acquisitionCostLevels_Accessor) {
      setAcquisitionCostLevels(*(accessorImpl.acquisitionCostLevels_Accessor));
    } else {
      acquisitionCostLevels_Accessor.reset();
    }
    if (accessorImpl.trackCostLevels_Accessor) {
      setTrackCostLevels(*(accessorImpl.trackCostLevels_Accessor));
    } else {
      trackCostLevels_Accessor.reset();
    }
    if (accessorImpl.interceptCostLevels_Accessor) {
      setInterceptCostLevels(*(accessorImpl.interceptCostLevels_Accessor));
    } else {
      interceptCostLevels_Accessor.reset();
    }
    if (accessorImpl.launchCostLevels_Accessor) {
      setLaunchCostLevels(*(accessorImpl.launchCostLevels_Accessor));
    } else {
      launchCostLevels_Accessor.reset();
    }
    if (accessorImpl.hasProbabilityOfSurvival()) {
      setProbabilityOfSurvival(accessorImpl.getProbabilityOfSurvival());
    } else {
      clearProbabilityOfSurvival();
    }
  }
}

void VulnerabilityLevelsCombinedType::reset() noexcept {
  acquisitionCostLevels_Accessor.reset();
  trackCostLevels_Accessor.reset();
  interceptCostLevels_Accessor.reset();
  launchCostLevels_Accessor.reset();
  clearProbabilityOfSurvival();
}

uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::getAcquisitionCostLevels_() const {
  if (acquisitionCostLevels_Accessor) {
    return *acquisitionCostLevels_Accessor;
  }
  throw uci::base::UCIException("Error in getAcquisitionCostLevels(): An attempt was made to get an optional field that was not enabled, call hasAcquisitionCostLevels() to determine if it is safe to call getAcquisitionCostLevels()");
}

const uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::getAcquisitionCostLevels() const {
  return getAcquisitionCostLevels_();
}

uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::getAcquisitionCostLevels() {
  return getAcquisitionCostLevels_();
}

uci::type::VulnerabilityLevelsCombinedType& VulnerabilityLevelsCombinedType::setAcquisitionCostLevels(const uci::type::VulnerabilityLevelsType& accessor) {
  enableAcquisitionCostLevels();
  if (&accessor != acquisitionCostLevels_Accessor.get()) {
    acquisitionCostLevels_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VulnerabilityLevelsCombinedType::hasAcquisitionCostLevels() const noexcept {
  return static_cast<bool>(acquisitionCostLevels_Accessor);
}

uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::enableAcquisitionCostLevels(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vulnerabilityLevelsType : type};
  if ((!acquisitionCostLevels_Accessor) || (acquisitionCostLevels_Accessor->getAccessorType() != requestedType)) {
    acquisitionCostLevels_Accessor = VulnerabilityLevelsType::create(requestedType);
    if (!acquisitionCostLevels_Accessor) {
      throw uci::base::UCIException("Error in enableAcquisitionCostLevels(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *acquisitionCostLevels_Accessor;
}

uci::type::VulnerabilityLevelsCombinedType& VulnerabilityLevelsCombinedType::clearAcquisitionCostLevels() noexcept {
  acquisitionCostLevels_Accessor.reset();
  return *this;
}

uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::getTrackCostLevels_() const {
  if (trackCostLevels_Accessor) {
    return *trackCostLevels_Accessor;
  }
  throw uci::base::UCIException("Error in getTrackCostLevels(): An attempt was made to get an optional field that was not enabled, call hasTrackCostLevels() to determine if it is safe to call getTrackCostLevels()");
}

const uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::getTrackCostLevels() const {
  return getTrackCostLevels_();
}

uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::getTrackCostLevels() {
  return getTrackCostLevels_();
}

uci::type::VulnerabilityLevelsCombinedType& VulnerabilityLevelsCombinedType::setTrackCostLevels(const uci::type::VulnerabilityLevelsType& accessor) {
  enableTrackCostLevels();
  if (&accessor != trackCostLevels_Accessor.get()) {
    trackCostLevels_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VulnerabilityLevelsCombinedType::hasTrackCostLevels() const noexcept {
  return static_cast<bool>(trackCostLevels_Accessor);
}

uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::enableTrackCostLevels(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vulnerabilityLevelsType : type};
  if ((!trackCostLevels_Accessor) || (trackCostLevels_Accessor->getAccessorType() != requestedType)) {
    trackCostLevels_Accessor = VulnerabilityLevelsType::create(requestedType);
    if (!trackCostLevels_Accessor) {
      throw uci::base::UCIException("Error in enableTrackCostLevels(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *trackCostLevels_Accessor;
}

uci::type::VulnerabilityLevelsCombinedType& VulnerabilityLevelsCombinedType::clearTrackCostLevels() noexcept {
  trackCostLevels_Accessor.reset();
  return *this;
}

uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::getInterceptCostLevels_() const {
  if (interceptCostLevels_Accessor) {
    return *interceptCostLevels_Accessor;
  }
  throw uci::base::UCIException("Error in getInterceptCostLevels(): An attempt was made to get an optional field that was not enabled, call hasInterceptCostLevels() to determine if it is safe to call getInterceptCostLevels()");
}

const uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::getInterceptCostLevels() const {
  return getInterceptCostLevels_();
}

uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::getInterceptCostLevels() {
  return getInterceptCostLevels_();
}

uci::type::VulnerabilityLevelsCombinedType& VulnerabilityLevelsCombinedType::setInterceptCostLevels(const uci::type::VulnerabilityLevelsType& accessor) {
  enableInterceptCostLevels();
  if (&accessor != interceptCostLevels_Accessor.get()) {
    interceptCostLevels_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VulnerabilityLevelsCombinedType::hasInterceptCostLevels() const noexcept {
  return static_cast<bool>(interceptCostLevels_Accessor);
}

uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::enableInterceptCostLevels(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vulnerabilityLevelsType : type};
  if ((!interceptCostLevels_Accessor) || (interceptCostLevels_Accessor->getAccessorType() != requestedType)) {
    interceptCostLevels_Accessor = VulnerabilityLevelsType::create(requestedType);
    if (!interceptCostLevels_Accessor) {
      throw uci::base::UCIException("Error in enableInterceptCostLevels(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *interceptCostLevels_Accessor;
}

uci::type::VulnerabilityLevelsCombinedType& VulnerabilityLevelsCombinedType::clearInterceptCostLevels() noexcept {
  interceptCostLevels_Accessor.reset();
  return *this;
}

uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::getLaunchCostLevels_() const {
  if (launchCostLevels_Accessor) {
    return *launchCostLevels_Accessor;
  }
  throw uci::base::UCIException("Error in getLaunchCostLevels(): An attempt was made to get an optional field that was not enabled, call hasLaunchCostLevels() to determine if it is safe to call getLaunchCostLevels()");
}

const uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::getLaunchCostLevels() const {
  return getLaunchCostLevels_();
}

uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::getLaunchCostLevels() {
  return getLaunchCostLevels_();
}

uci::type::VulnerabilityLevelsCombinedType& VulnerabilityLevelsCombinedType::setLaunchCostLevels(const uci::type::VulnerabilityLevelsType& accessor) {
  enableLaunchCostLevels();
  if (&accessor != launchCostLevels_Accessor.get()) {
    launchCostLevels_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VulnerabilityLevelsCombinedType::hasLaunchCostLevels() const noexcept {
  return static_cast<bool>(launchCostLevels_Accessor);
}

uci::type::VulnerabilityLevelsType& VulnerabilityLevelsCombinedType::enableLaunchCostLevels(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vulnerabilityLevelsType : type};
  if ((!launchCostLevels_Accessor) || (launchCostLevels_Accessor->getAccessorType() != requestedType)) {
    launchCostLevels_Accessor = VulnerabilityLevelsType::create(requestedType);
    if (!launchCostLevels_Accessor) {
      throw uci::base::UCIException("Error in enableLaunchCostLevels(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *launchCostLevels_Accessor;
}

uci::type::VulnerabilityLevelsCombinedType& VulnerabilityLevelsCombinedType::clearLaunchCostLevels() noexcept {
  launchCostLevels_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue VulnerabilityLevelsCombinedType::getProbabilityOfSurvival() const {
  if (probabilityOfSurvival_Accessor) {
    return *probabilityOfSurvival_Accessor;
  }
  throw uci::base::UCIException("Error in getProbabilityOfSurvival(): An attempt was made to get an optional field that was not enabled, call hasProbabilityOfSurvival() to determine if it is safe to call getProbabilityOfSurvival()");
}

uci::type::VulnerabilityLevelsCombinedType& VulnerabilityLevelsCombinedType::setProbabilityOfSurvival(uci::type::PercentTypeValue value) {
  probabilityOfSurvival_Accessor = value;
  return *this;
}

bool VulnerabilityLevelsCombinedType::hasProbabilityOfSurvival() const noexcept {
  return probabilityOfSurvival_Accessor.has_value();
}

uci::type::VulnerabilityLevelsCombinedType& VulnerabilityLevelsCombinedType::clearProbabilityOfSurvival() noexcept {
  probabilityOfSurvival_Accessor.reset();
  return *this;
}

std::unique_ptr<VulnerabilityLevelsCombinedType> VulnerabilityLevelsCombinedType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vulnerabilityLevelsCombinedType : type};
  return (requestedType == uci::type::accessorType::vulnerabilityLevelsCombinedType) ? boost::make_unique<VulnerabilityLevelsCombinedType>() : nullptr;
}

/**  */
namespace VulnerabilityLevelsCombinedType_Names {

constexpr const char* Extern_Type_Name{"VulnerabilityLevelsCombinedType"};
constexpr const char* AcquisitionCostLevels_Name{"AcquisitionCostLevels"};
constexpr const char* TrackCostLevels_Name{"TrackCostLevels"};
constexpr const char* InterceptCostLevels_Name{"InterceptCostLevels"};
constexpr const char* LaunchCostLevels_Name{"LaunchCostLevels"};
constexpr const char* ProbabilityOfSurvival_Name{"ProbabilityOfSurvival"};

} // namespace VulnerabilityLevelsCombinedType_Names

void VulnerabilityLevelsCombinedType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VulnerabilityLevelsCombinedType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VulnerabilityLevelsCombinedType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VulnerabilityLevelsCombinedType_Names::AcquisitionCostLevels_Name) {
      VulnerabilityLevelsType::deserialize(valueType.second, accessor.enableAcquisitionCostLevels(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VulnerabilityLevelsCombinedType_Names::TrackCostLevels_Name) {
      VulnerabilityLevelsType::deserialize(valueType.second, accessor.enableTrackCostLevels(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VulnerabilityLevelsCombinedType_Names::InterceptCostLevels_Name) {
      VulnerabilityLevelsType::deserialize(valueType.second, accessor.enableInterceptCostLevels(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VulnerabilityLevelsCombinedType_Names::LaunchCostLevels_Name) {
      VulnerabilityLevelsType::deserialize(valueType.second, accessor.enableLaunchCostLevels(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VulnerabilityLevelsCombinedType_Names::ProbabilityOfSurvival_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProbabilityOfSurvival(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string VulnerabilityLevelsCombinedType::serialize(const uci::type::VulnerabilityLevelsCombinedType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VulnerabilityLevelsCombinedType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VulnerabilityLevelsCombinedType_Names::Extern_Type_Name);
  }
  if (accessor.hasAcquisitionCostLevels()) {
    VulnerabilityLevelsType::serialize(accessor.getAcquisitionCostLevels(), node, VulnerabilityLevelsCombinedType_Names::AcquisitionCostLevels_Name);
  }
  if (accessor.hasTrackCostLevels()) {
    VulnerabilityLevelsType::serialize(accessor.getTrackCostLevels(), node, VulnerabilityLevelsCombinedType_Names::TrackCostLevels_Name);
  }
  if (accessor.hasInterceptCostLevels()) {
    VulnerabilityLevelsType::serialize(accessor.getInterceptCostLevels(), node, VulnerabilityLevelsCombinedType_Names::InterceptCostLevels_Name);
  }
  if (accessor.hasLaunchCostLevels()) {
    VulnerabilityLevelsType::serialize(accessor.getLaunchCostLevels(), node, VulnerabilityLevelsCombinedType_Names::LaunchCostLevels_Name);
  }
  if (accessor.hasProbabilityOfSurvival()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getProbabilityOfSurvival(), node, VulnerabilityLevelsCombinedType_Names::ProbabilityOfSurvival_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VulnerabilityLevelsCombinedType& VulnerabilityLevelsCombinedType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VulnerabilityLevelsCombinedType>().release());
}

uci::type::VulnerabilityLevelsCombinedType& VulnerabilityLevelsCombinedType::create(const uci::type::VulnerabilityLevelsCombinedType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VulnerabilityLevelsCombinedType> newAccessor{boost::make_unique<asb_uci::type::VulnerabilityLevelsCombinedType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VulnerabilityLevelsCombinedType::destroy(uci::type::VulnerabilityLevelsCombinedType& accessor) {
  delete dynamic_cast<asb_uci::type::VulnerabilityLevelsCombinedType*>(&accessor);
}

} // namespace type

} // namespace uci

