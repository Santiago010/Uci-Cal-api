/** @file PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/FocalPlaneArrayNonUniformityCorrectionReferenceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/FocalPlaneArrayNonUniformityCorrectionReferenceType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType() = default;

PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::~PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType() = default;

void PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::copy(const uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::copyImpl(const uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType&>(accessor);
    nUC_TableNumber_Accessor = (accessorImpl.nUC_TableNumber_Accessor ? accessorImpl.nUC_TableNumber_Accessor : boost::none);
    if (accessorImpl.nUC_ReferenceOffset_Accessor) {
      setNUC_ReferenceOffset(*(accessorImpl.nUC_ReferenceOffset_Accessor));
    } else {
      nUC_ReferenceOffset_Accessor.reset();
    }
  }
}

void PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::reset() noexcept {
  nUC_TableNumber_Accessor.reset();
  nUC_ReferenceOffset_Accessor.reset();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataTypeChoice PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::getPO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataTypeChoiceOrdinal() const noexcept {
  if (nUC_TableNumber_Accessor) {
    return PO_COMPONENTSETTINGSFOCALPLANEARRAYNONUNIFORMITYCORRECTIONDATATYPE_CHOICE_NUC_TABLENUMBER;
  }
  if (nUC_ReferenceOffset_Accessor) {
    return PO_COMPONENTSETTINGSFOCALPLANEARRAYNONUNIFORMITYCORRECTIONDATATYPE_CHOICE_NUC_REFERENCEOFFSET;
  }
  return PO_COMPONENTSETTINGSFOCALPLANEARRAYNONUNIFORMITYCORRECTIONDATATYPE_CHOICE_NONE;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType& PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::setPO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataTypeChoiceOrdinal(uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PO_COMPONENTSETTINGSFOCALPLANEARRAYNONUNIFORMITYCORRECTIONDATATYPE_CHOICE_NUC_TABLENUMBER:
      chooseNUC_TableNumber();
      break;
    case PO_COMPONENTSETTINGSFOCALPLANEARRAYNONUNIFORMITYCORRECTIONDATATYPE_CHOICE_NUC_REFERENCEOFFSET:
      chooseNUC_ReferenceOffset("setPO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

xs::UnsignedInt PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::getNUC_TableNumber() const {
  if (nUC_TableNumber_Accessor) {
    return *nUC_TableNumber_Accessor;
  }
  throw uci::base::UCIException("Error in getNUC_TableNumber(): Unable to get NUC_TableNumber, field not selected");
}

uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType& PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::setNUC_TableNumber(xs::UnsignedInt value) {
  chooseNUC_TableNumber();
  nUC_TableNumber_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::isNUC_TableNumber() const noexcept {
  return static_cast<bool>(nUC_TableNumber_Accessor);
}

void PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::chooseNUC_TableNumber() {
  nUC_ReferenceOffset_Accessor.reset();
  if (!nUC_TableNumber_Accessor) {
    nUC_TableNumber_Accessor = boost::optional<asb_xs::UnsignedInt>();
  }
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::getNUC_ReferenceOffset_() const {
  if (nUC_ReferenceOffset_Accessor) {
    return *nUC_ReferenceOffset_Accessor;
  }
  throw uci::base::UCIException("Error in getNUC_ReferenceOffset(): Unable to get NUC_ReferenceOffset, field not selected");
}

const uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::getNUC_ReferenceOffset() const {
  return getNUC_ReferenceOffset_();
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::getNUC_ReferenceOffset() {
  return getNUC_ReferenceOffset_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType& PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::setNUC_ReferenceOffset(const uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& accessor) {
  chooseNUC_ReferenceOffset();
  if (&accessor != nUC_ReferenceOffset_Accessor.get()) {
    nUC_ReferenceOffset_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::isNUC_ReferenceOffset() const noexcept {
  return static_cast<bool>(nUC_ReferenceOffset_Accessor);
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::chooseNUC_ReferenceOffset(const std::string& method, uci::base::accessorType::AccessorType type) {
  nUC_TableNumber_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::focalPlaneArrayNonUniformityCorrectionReferenceType : type};
  if ((!nUC_ReferenceOffset_Accessor) || (nUC_ReferenceOffset_Accessor->getAccessorType() != requestedType)) {
    nUC_ReferenceOffset_Accessor = FocalPlaneArrayNonUniformityCorrectionReferenceType::create(type);
    if (!nUC_ReferenceOffset_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nUC_ReferenceOffset_Accessor;
}

uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType& PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::chooseNUC_ReferenceOffset(uci::base::accessorType::AccessorType type) {
  return chooseNUC_ReferenceOffset("chooseNUC_ReferenceOffset", type);
}

std::unique_ptr<PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType> PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType) ? boost::make_unique<PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType"};
constexpr const char* NUC_TableNumber_Name{"NUC_TableNumber"};
constexpr const char* NUC_ReferenceOffset_Name{"NUC_ReferenceOffset"};

} // namespace PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType_Names

void PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType_Names::NUC_TableNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNUC_TableNumber(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType_Names::NUC_ReferenceOffset_Name) {
      FocalPlaneArrayNonUniformityCorrectionReferenceType::deserialize(valueType.second, accessor.chooseNUC_ReferenceOffset(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::serialize(const uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType_Names::Extern_Type_Name);
  }
  if (accessor.isNUC_TableNumber()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNUC_TableNumber(), node, PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType_Names::NUC_TableNumber_Name);
  } else if (accessor.isNUC_ReferenceOffset()) {
    FocalPlaneArrayNonUniformityCorrectionReferenceType::serialize(accessor.getNUC_ReferenceOffset(), node, PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType_Names::NUC_ReferenceOffset_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType& PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType>().release());
}

uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType& PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::create(const uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::destroy(uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType*>(&accessor);
}

} // namespace type

} // namespace uci

