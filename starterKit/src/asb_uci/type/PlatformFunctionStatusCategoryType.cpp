/** @file PlatformFunctionStatusCategoryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlatformFunctionStatusCategoryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PlatformFunctionAirEnum.h"
#include "asb_uci/type/PlatformFunctionEW_Enum.h"
#include "asb_uci/type/PlatformFunctionGroundEnum.h"
#include "asb_uci/type/PlatformFunctionSeaSurfaceEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PlatformFunctionAirEnum.h"
#include "uci/type/PlatformFunctionEW_Enum.h"
#include "uci/type/PlatformFunctionGroundEnum.h"
#include "uci/type/PlatformFunctionSeaSurfaceEnum.h"
#include "uci/type/PlatformFunctionStatusCategoryType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlatformFunctionStatusCategoryType::PlatformFunctionStatusCategoryType() = default;

PlatformFunctionStatusCategoryType::~PlatformFunctionStatusCategoryType() = default;

void PlatformFunctionStatusCategoryType::copy(const uci::type::PlatformFunctionStatusCategoryType& accessor) {
  copyImpl(accessor, false);
}

void PlatformFunctionStatusCategoryType::copyImpl(const uci::type::PlatformFunctionStatusCategoryType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlatformFunctionStatusCategoryType&>(accessor);
    if (accessorImpl.air_Accessor) {
      setAir(*(accessorImpl.air_Accessor));
    } else {
      air_Accessor.reset();
    }
    if (accessorImpl.seaSurface_Accessor) {
      setSeaSurface(*(accessorImpl.seaSurface_Accessor));
    } else {
      seaSurface_Accessor.reset();
    }
    if (accessorImpl.ground_Accessor) {
      setGround(*(accessorImpl.ground_Accessor));
    } else {
      ground_Accessor.reset();
    }
    if (accessorImpl.eW_Accessor) {
      setEW(*(accessorImpl.eW_Accessor));
    } else {
      eW_Accessor.reset();
    }
  }
}

void PlatformFunctionStatusCategoryType::reset() noexcept {
  air_Accessor.reset();
  seaSurface_Accessor.reset();
  ground_Accessor.reset();
  eW_Accessor.reset();
}

uci::type::PlatformFunctionStatusCategoryType::PlatformFunctionStatusCategoryTypeChoice PlatformFunctionStatusCategoryType::getPlatformFunctionStatusCategoryTypeChoiceOrdinal() const noexcept {
  if (air_Accessor) {
    return PLATFORMFUNCTIONSTATUSCATEGORYTYPE_CHOICE_AIR;
  }
  if (seaSurface_Accessor) {
    return PLATFORMFUNCTIONSTATUSCATEGORYTYPE_CHOICE_SEASURFACE;
  }
  if (ground_Accessor) {
    return PLATFORMFUNCTIONSTATUSCATEGORYTYPE_CHOICE_GROUND;
  }
  if (eW_Accessor) {
    return PLATFORMFUNCTIONSTATUSCATEGORYTYPE_CHOICE_EW;
  }
  return PLATFORMFUNCTIONSTATUSCATEGORYTYPE_CHOICE_NONE;
}

uci::type::PlatformFunctionStatusCategoryType& PlatformFunctionStatusCategoryType::setPlatformFunctionStatusCategoryTypeChoiceOrdinal(uci::type::PlatformFunctionStatusCategoryType::PlatformFunctionStatusCategoryTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PLATFORMFUNCTIONSTATUSCATEGORYTYPE_CHOICE_AIR:
      chooseAir("setPlatformFunctionStatusCategoryTypeChoiceOrdinal", type);
      break;
    case PLATFORMFUNCTIONSTATUSCATEGORYTYPE_CHOICE_SEASURFACE:
      chooseSeaSurface("setPlatformFunctionStatusCategoryTypeChoiceOrdinal", type);
      break;
    case PLATFORMFUNCTIONSTATUSCATEGORYTYPE_CHOICE_GROUND:
      chooseGround("setPlatformFunctionStatusCategoryTypeChoiceOrdinal", type);
      break;
    case PLATFORMFUNCTIONSTATUSCATEGORYTYPE_CHOICE_EW:
      chooseEW("setPlatformFunctionStatusCategoryTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPlatformFunctionStatusCategoryTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PlatformFunctionAirEnum& PlatformFunctionStatusCategoryType::getAir_() const {
  if (air_Accessor) {
    return *air_Accessor;
  }
  throw uci::base::UCIException("Error in getAir(): Unable to get Air, field not selected");
}

const uci::type::PlatformFunctionAirEnum& PlatformFunctionStatusCategoryType::getAir() const {
  return getAir_();
}

uci::type::PlatformFunctionAirEnum& PlatformFunctionStatusCategoryType::getAir() {
  return getAir_();
}

uci::type::PlatformFunctionStatusCategoryType& PlatformFunctionStatusCategoryType::setAir(const uci::type::PlatformFunctionAirEnum& accessor) {
  chooseAir();
  if (&accessor != air_Accessor.get()) {
    air_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformFunctionStatusCategoryType& PlatformFunctionStatusCategoryType::setAir(uci::type::PlatformFunctionAirEnum::EnumerationItem value) {
  chooseAir().setValue(value);
  return *this;
}

bool PlatformFunctionStatusCategoryType::isAir() const noexcept {
  return static_cast<bool>(air_Accessor);
}

uci::type::PlatformFunctionAirEnum& PlatformFunctionStatusCategoryType::chooseAir(const std::string& method, uci::base::accessorType::AccessorType type) {
  seaSurface_Accessor.reset();
  ground_Accessor.reset();
  eW_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::platformFunctionAirEnum : type};
  if ((!air_Accessor) || (air_Accessor->getAccessorType() != requestedType)) {
    air_Accessor = PlatformFunctionAirEnum::create(type);
    if (!air_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *air_Accessor;
}

uci::type::PlatformFunctionAirEnum& PlatformFunctionStatusCategoryType::chooseAir(uci::base::accessorType::AccessorType type) {
  return chooseAir("chooseAir", type);
}

uci::type::PlatformFunctionSeaSurfaceEnum& PlatformFunctionStatusCategoryType::getSeaSurface_() const {
  if (seaSurface_Accessor) {
    return *seaSurface_Accessor;
  }
  throw uci::base::UCIException("Error in getSeaSurface(): Unable to get SeaSurface, field not selected");
}

const uci::type::PlatformFunctionSeaSurfaceEnum& PlatformFunctionStatusCategoryType::getSeaSurface() const {
  return getSeaSurface_();
}

uci::type::PlatformFunctionSeaSurfaceEnum& PlatformFunctionStatusCategoryType::getSeaSurface() {
  return getSeaSurface_();
}

uci::type::PlatformFunctionStatusCategoryType& PlatformFunctionStatusCategoryType::setSeaSurface(const uci::type::PlatformFunctionSeaSurfaceEnum& accessor) {
  chooseSeaSurface();
  if (&accessor != seaSurface_Accessor.get()) {
    seaSurface_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformFunctionStatusCategoryType& PlatformFunctionStatusCategoryType::setSeaSurface(uci::type::PlatformFunctionSeaSurfaceEnum::EnumerationItem value) {
  chooseSeaSurface().setValue(value);
  return *this;
}

bool PlatformFunctionStatusCategoryType::isSeaSurface() const noexcept {
  return static_cast<bool>(seaSurface_Accessor);
}

uci::type::PlatformFunctionSeaSurfaceEnum& PlatformFunctionStatusCategoryType::chooseSeaSurface(const std::string& method, uci::base::accessorType::AccessorType type) {
  air_Accessor.reset();
  ground_Accessor.reset();
  eW_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::platformFunctionSeaSurfaceEnum : type};
  if ((!seaSurface_Accessor) || (seaSurface_Accessor->getAccessorType() != requestedType)) {
    seaSurface_Accessor = PlatformFunctionSeaSurfaceEnum::create(type);
    if (!seaSurface_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *seaSurface_Accessor;
}

uci::type::PlatformFunctionSeaSurfaceEnum& PlatformFunctionStatusCategoryType::chooseSeaSurface(uci::base::accessorType::AccessorType type) {
  return chooseSeaSurface("chooseSeaSurface", type);
}

uci::type::PlatformFunctionGroundEnum& PlatformFunctionStatusCategoryType::getGround_() const {
  if (ground_Accessor) {
    return *ground_Accessor;
  }
  throw uci::base::UCIException("Error in getGround(): Unable to get Ground, field not selected");
}

const uci::type::PlatformFunctionGroundEnum& PlatformFunctionStatusCategoryType::getGround() const {
  return getGround_();
}

uci::type::PlatformFunctionGroundEnum& PlatformFunctionStatusCategoryType::getGround() {
  return getGround_();
}

uci::type::PlatformFunctionStatusCategoryType& PlatformFunctionStatusCategoryType::setGround(const uci::type::PlatformFunctionGroundEnum& accessor) {
  chooseGround();
  if (&accessor != ground_Accessor.get()) {
    ground_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformFunctionStatusCategoryType& PlatformFunctionStatusCategoryType::setGround(uci::type::PlatformFunctionGroundEnum::EnumerationItem value) {
  chooseGround().setValue(value);
  return *this;
}

bool PlatformFunctionStatusCategoryType::isGround() const noexcept {
  return static_cast<bool>(ground_Accessor);
}

uci::type::PlatformFunctionGroundEnum& PlatformFunctionStatusCategoryType::chooseGround(const std::string& method, uci::base::accessorType::AccessorType type) {
  air_Accessor.reset();
  seaSurface_Accessor.reset();
  eW_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::platformFunctionGroundEnum : type};
  if ((!ground_Accessor) || (ground_Accessor->getAccessorType() != requestedType)) {
    ground_Accessor = PlatformFunctionGroundEnum::create(type);
    if (!ground_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ground_Accessor;
}

uci::type::PlatformFunctionGroundEnum& PlatformFunctionStatusCategoryType::chooseGround(uci::base::accessorType::AccessorType type) {
  return chooseGround("chooseGround", type);
}

uci::type::PlatformFunctionEW_Enum& PlatformFunctionStatusCategoryType::getEW_() const {
  if (eW_Accessor) {
    return *eW_Accessor;
  }
  throw uci::base::UCIException("Error in getEW(): Unable to get EW, field not selected");
}

const uci::type::PlatformFunctionEW_Enum& PlatformFunctionStatusCategoryType::getEW() const {
  return getEW_();
}

uci::type::PlatformFunctionEW_Enum& PlatformFunctionStatusCategoryType::getEW() {
  return getEW_();
}

uci::type::PlatformFunctionStatusCategoryType& PlatformFunctionStatusCategoryType::setEW(const uci::type::PlatformFunctionEW_Enum& accessor) {
  chooseEW();
  if (&accessor != eW_Accessor.get()) {
    eW_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformFunctionStatusCategoryType& PlatformFunctionStatusCategoryType::setEW(uci::type::PlatformFunctionEW_Enum::EnumerationItem value) {
  chooseEW().setValue(value);
  return *this;
}

bool PlatformFunctionStatusCategoryType::isEW() const noexcept {
  return static_cast<bool>(eW_Accessor);
}

uci::type::PlatformFunctionEW_Enum& PlatformFunctionStatusCategoryType::chooseEW(const std::string& method, uci::base::accessorType::AccessorType type) {
  air_Accessor.reset();
  seaSurface_Accessor.reset();
  ground_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::platformFunctionEW_Enum : type};
  if ((!eW_Accessor) || (eW_Accessor->getAccessorType() != requestedType)) {
    eW_Accessor = PlatformFunctionEW_Enum::create(type);
    if (!eW_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eW_Accessor;
}

uci::type::PlatformFunctionEW_Enum& PlatformFunctionStatusCategoryType::chooseEW(uci::base::accessorType::AccessorType type) {
  return chooseEW("chooseEW", type);
}

std::unique_ptr<PlatformFunctionStatusCategoryType> PlatformFunctionStatusCategoryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::platformFunctionStatusCategoryType : type};
  return (requestedType == uci::type::accessorType::platformFunctionStatusCategoryType) ? boost::make_unique<PlatformFunctionStatusCategoryType>() : nullptr;
}

/**  */
namespace PlatformFunctionStatusCategoryType_Names {

constexpr const char* Extern_Type_Name{"PlatformFunctionStatusCategoryType"};
constexpr const char* Air_Name{"Air"};
constexpr const char* SeaSurface_Name{"SeaSurface"};
constexpr const char* Ground_Name{"Ground"};
constexpr const char* EW_Name{"EW"};

} // namespace PlatformFunctionStatusCategoryType_Names

void PlatformFunctionStatusCategoryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlatformFunctionStatusCategoryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlatformFunctionStatusCategoryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlatformFunctionStatusCategoryType_Names::Air_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseAir().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlatformFunctionStatusCategoryType_Names::SeaSurface_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseSeaSurface().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlatformFunctionStatusCategoryType_Names::Ground_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseGround().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlatformFunctionStatusCategoryType_Names::EW_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseEW().setValueFromName(*value);
      }
    }
  }
}

std::string PlatformFunctionStatusCategoryType::serialize(const uci::type::PlatformFunctionStatusCategoryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlatformFunctionStatusCategoryType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlatformFunctionStatusCategoryType_Names::Extern_Type_Name);
  }
  if (accessor.isAir()) {
    PlatformFunctionAirEnum::serialize(accessor.getAir(), node, PlatformFunctionStatusCategoryType_Names::Air_Name, false);
  } else if (accessor.isSeaSurface()) {
    PlatformFunctionSeaSurfaceEnum::serialize(accessor.getSeaSurface(), node, PlatformFunctionStatusCategoryType_Names::SeaSurface_Name, false);
  } else if (accessor.isGround()) {
    PlatformFunctionGroundEnum::serialize(accessor.getGround(), node, PlatformFunctionStatusCategoryType_Names::Ground_Name, false);
  } else if (accessor.isEW()) {
    PlatformFunctionEW_Enum::serialize(accessor.getEW(), node, PlatformFunctionStatusCategoryType_Names::EW_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlatformFunctionStatusCategoryType& PlatformFunctionStatusCategoryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlatformFunctionStatusCategoryType>().release());
}

uci::type::PlatformFunctionStatusCategoryType& PlatformFunctionStatusCategoryType::create(const uci::type::PlatformFunctionStatusCategoryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlatformFunctionStatusCategoryType> newAccessor{boost::make_unique<asb_uci::type::PlatformFunctionStatusCategoryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlatformFunctionStatusCategoryType::destroy(uci::type::PlatformFunctionStatusCategoryType& accessor) {
  delete dynamic_cast<asb_uci::type::PlatformFunctionStatusCategoryType*>(&accessor);
}

} // namespace type

} // namespace uci

