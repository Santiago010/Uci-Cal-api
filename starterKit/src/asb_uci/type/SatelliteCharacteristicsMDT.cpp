/** @file SatelliteCharacteristicsMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SatelliteCharacteristicsMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/SatelliteCharacteristicsID_Type.h"
#include "../../../include/asb_uci/type/SatelliteCharacteristicsType.h"
#include "../../../include/asb_uci/type/SatelliteEnduranceType.h"
#include "../../../include/asb_uci/type/SatelliteIdentityType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SatelliteCharacteristicsID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SatelliteCharacteristicsMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SatelliteCharacteristicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SatelliteEnduranceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SatelliteIdentityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SatelliteCharacteristicsMDT::SatelliteCharacteristicsMDT()
  : satelliteCharacteristicsID_Accessor{boost::make_unique<SatelliteCharacteristicsID_Type>()} {
}

SatelliteCharacteristicsMDT::~SatelliteCharacteristicsMDT() = default;

void SatelliteCharacteristicsMDT::copy(const uci::type::SatelliteCharacteristicsMDT& accessor) {
  copyImpl(accessor, false);
}

void SatelliteCharacteristicsMDT::copyImpl(const uci::type::SatelliteCharacteristicsMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const SatelliteCharacteristicsMDT&>(accessor);
    setSatelliteCharacteristicsID(*(accessorImpl.satelliteCharacteristicsID_Accessor));
    if (accessorImpl.identity_Accessor) {
      setIdentity(*(accessorImpl.identity_Accessor));
    } else {
      identity_Accessor.reset();
    }
    if (accessorImpl.commonCharacteristics_Accessor) {
      setCommonCharacteristics(*(accessorImpl.commonCharacteristics_Accessor));
    } else {
      commonCharacteristics_Accessor.reset();
    }
    if (accessorImpl.initialEndurance_Accessor) {
      setInitialEndurance(*(accessorImpl.initialEndurance_Accessor));
    } else {
      initialEndurance_Accessor.reset();
    }
  }
}

void SatelliteCharacteristicsMDT::reset() noexcept {
  DataRecordBaseType::reset();
  satelliteCharacteristicsID_Accessor->reset();
  identity_Accessor.reset();
  commonCharacteristics_Accessor.reset();
  initialEndurance_Accessor.reset();
}

const uci::type::SatelliteCharacteristicsID_Type& SatelliteCharacteristicsMDT::getSatelliteCharacteristicsID() const {
  return *satelliteCharacteristicsID_Accessor;
}

uci::type::SatelliteCharacteristicsID_Type& SatelliteCharacteristicsMDT::getSatelliteCharacteristicsID() {
  return *satelliteCharacteristicsID_Accessor;
}

uci::type::SatelliteCharacteristicsMDT& SatelliteCharacteristicsMDT::setSatelliteCharacteristicsID(const uci::type::SatelliteCharacteristicsID_Type& accessor) {
  if (&accessor != satelliteCharacteristicsID_Accessor.get()) {
    satelliteCharacteristicsID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SatelliteIdentityType& SatelliteCharacteristicsMDT::getIdentity_() const {
  if (identity_Accessor) {
    return *identity_Accessor;
  }
  throw uci::base::UCIException("Error in getIdentity(): An attempt was made to get an optional field that was not enabled, call hasIdentity() to determine if it is safe to call getIdentity()");
}

const uci::type::SatelliteIdentityType& SatelliteCharacteristicsMDT::getIdentity() const {
  return getIdentity_();
}

uci::type::SatelliteIdentityType& SatelliteCharacteristicsMDT::getIdentity() {
  return getIdentity_();
}

uci::type::SatelliteCharacteristicsMDT& SatelliteCharacteristicsMDT::setIdentity(const uci::type::SatelliteIdentityType& accessor) {
  enableIdentity();
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SatelliteCharacteristicsMDT::hasIdentity() const noexcept {
  return static_cast<bool>(identity_Accessor);
}

uci::type::SatelliteIdentityType& SatelliteCharacteristicsMDT::enableIdentity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteIdentityType : type};
  if ((!identity_Accessor) || (identity_Accessor->getAccessorType() != requestedType)) {
    identity_Accessor = SatelliteIdentityType::create(requestedType);
    if (!identity_Accessor) {
      throw uci::base::UCIException("Error in enableIdentity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *identity_Accessor;
}

uci::type::SatelliteCharacteristicsMDT& SatelliteCharacteristicsMDT::clearIdentity() noexcept {
  identity_Accessor.reset();
  return *this;
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsMDT::getCommonCharacteristics_() const {
  if (commonCharacteristics_Accessor) {
    return *commonCharacteristics_Accessor;
  }
  throw uci::base::UCIException("Error in getCommonCharacteristics(): An attempt was made to get an optional field that was not enabled, call hasCommonCharacteristics() to determine if it is safe to call getCommonCharacteristics()");
}

const uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsMDT::getCommonCharacteristics() const {
  return getCommonCharacteristics_();
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsMDT::getCommonCharacteristics() {
  return getCommonCharacteristics_();
}

uci::type::SatelliteCharacteristicsMDT& SatelliteCharacteristicsMDT::setCommonCharacteristics(const uci::type::SatelliteCharacteristicsType& accessor) {
  enableCommonCharacteristics();
  if (&accessor != commonCharacteristics_Accessor.get()) {
    commonCharacteristics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SatelliteCharacteristicsMDT::hasCommonCharacteristics() const noexcept {
  return static_cast<bool>(commonCharacteristics_Accessor);
}

uci::type::SatelliteCharacteristicsType& SatelliteCharacteristicsMDT::enableCommonCharacteristics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteCharacteristicsType : type};
  if ((!commonCharacteristics_Accessor) || (commonCharacteristics_Accessor->getAccessorType() != requestedType)) {
    commonCharacteristics_Accessor = SatelliteCharacteristicsType::create(requestedType);
    if (!commonCharacteristics_Accessor) {
      throw uci::base::UCIException("Error in enableCommonCharacteristics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commonCharacteristics_Accessor;
}

uci::type::SatelliteCharacteristicsMDT& SatelliteCharacteristicsMDT::clearCommonCharacteristics() noexcept {
  commonCharacteristics_Accessor.reset();
  return *this;
}

uci::type::SatelliteEnduranceType& SatelliteCharacteristicsMDT::getInitialEndurance_() const {
  if (initialEndurance_Accessor) {
    return *initialEndurance_Accessor;
  }
  throw uci::base::UCIException("Error in getInitialEndurance(): An attempt was made to get an optional field that was not enabled, call hasInitialEndurance() to determine if it is safe to call getInitialEndurance()");
}

const uci::type::SatelliteEnduranceType& SatelliteCharacteristicsMDT::getInitialEndurance() const {
  return getInitialEndurance_();
}

uci::type::SatelliteEnduranceType& SatelliteCharacteristicsMDT::getInitialEndurance() {
  return getInitialEndurance_();
}

uci::type::SatelliteCharacteristicsMDT& SatelliteCharacteristicsMDT::setInitialEndurance(const uci::type::SatelliteEnduranceType& accessor) {
  enableInitialEndurance();
  if (&accessor != initialEndurance_Accessor.get()) {
    initialEndurance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SatelliteCharacteristicsMDT::hasInitialEndurance() const noexcept {
  return static_cast<bool>(initialEndurance_Accessor);
}

uci::type::SatelliteEnduranceType& SatelliteCharacteristicsMDT::enableInitialEndurance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteEnduranceType : type};
  if ((!initialEndurance_Accessor) || (initialEndurance_Accessor->getAccessorType() != requestedType)) {
    initialEndurance_Accessor = SatelliteEnduranceType::create(requestedType);
    if (!initialEndurance_Accessor) {
      throw uci::base::UCIException("Error in enableInitialEndurance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *initialEndurance_Accessor;
}

uci::type::SatelliteCharacteristicsMDT& SatelliteCharacteristicsMDT::clearInitialEndurance() noexcept {
  initialEndurance_Accessor.reset();
  return *this;
}

std::unique_ptr<SatelliteCharacteristicsMDT> SatelliteCharacteristicsMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteCharacteristicsMDT : type};
  return (requestedType == uci::type::accessorType::satelliteCharacteristicsMDT) ? boost::make_unique<SatelliteCharacteristicsMDT>() : nullptr;
}

/**  */
namespace SatelliteCharacteristicsMDT_Names {

constexpr const char* Extern_Type_Name{"SatelliteCharacteristicsMDT"};
constexpr const char* SatelliteCharacteristicsID_Name{"SatelliteCharacteristicsID"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* CommonCharacteristics_Name{"CommonCharacteristics"};
constexpr const char* InitialEndurance_Name{"InitialEndurance"};

} // namespace SatelliteCharacteristicsMDT_Names

void SatelliteCharacteristicsMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::SatelliteCharacteristicsMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SatelliteCharacteristicsMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SatelliteCharacteristicsMDT_Names::SatelliteCharacteristicsID_Name) {
      SatelliteCharacteristicsID_Type::deserialize(valueType.second, accessor.getSatelliteCharacteristicsID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SatelliteCharacteristicsMDT_Names::Identity_Name) {
      SatelliteIdentityType::deserialize(valueType.second, accessor.enableIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SatelliteCharacteristicsMDT_Names::CommonCharacteristics_Name) {
      SatelliteCharacteristicsType::deserialize(valueType.second, accessor.enableCommonCharacteristics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SatelliteCharacteristicsMDT_Names::InitialEndurance_Name) {
      SatelliteEnduranceType::deserialize(valueType.second, accessor.enableInitialEndurance(), nodeName, nsPrefix);
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SatelliteCharacteristicsMDT::serialize(const uci::type::SatelliteCharacteristicsMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SatelliteCharacteristicsMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SatelliteCharacteristicsMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  SatelliteCharacteristicsID_Type::serialize(accessor.getSatelliteCharacteristicsID(), node, SatelliteCharacteristicsMDT_Names::SatelliteCharacteristicsID_Name);
  if (accessor.hasIdentity()) {
    SatelliteIdentityType::serialize(accessor.getIdentity(), node, SatelliteCharacteristicsMDT_Names::Identity_Name);
  }
  if (accessor.hasCommonCharacteristics()) {
    SatelliteCharacteristicsType::serialize(accessor.getCommonCharacteristics(), node, SatelliteCharacteristicsMDT_Names::CommonCharacteristics_Name);
  }
  if (accessor.hasInitialEndurance()) {
    SatelliteEnduranceType::serialize(accessor.getInitialEndurance(), node, SatelliteCharacteristicsMDT_Names::InitialEndurance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SatelliteCharacteristicsMDT& SatelliteCharacteristicsMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SatelliteCharacteristicsMDT>().release());
}

uci::type::SatelliteCharacteristicsMDT& SatelliteCharacteristicsMDT::create(const uci::type::SatelliteCharacteristicsMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SatelliteCharacteristicsMDT> newAccessor{boost::make_unique<asb_uci::type::SatelliteCharacteristicsMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SatelliteCharacteristicsMDT::destroy(uci::type::SatelliteCharacteristicsMDT& accessor) {
  delete dynamic_cast<asb_uci::type::SatelliteCharacteristicsMDT*>(&accessor);
}

} // namespace type

} // namespace uci

