/** @file CryptoSlotType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CryptoSlotType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CryptoKeyStatusEnum.h"
#include "asb_uci/type/CryptoRolloverStatusType.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CryptoKeyStatusEnum.h"
#include "uci/type/CryptoRolloverStatusType.h"
#include "uci/type/CryptoSlotIdentifierType.h"
#include "uci/type/CryptoSlotType.h"
#include "uci/type/ForeignKeyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CryptoSlotType::CryptoSlotType()
  : slotIdentifier_Accessor{boost::make_unique<CryptoSlotIdentifierType>()},
    slotState_Accessor{boost::make_unique<CryptoKeyStatusEnum>()} {
}

CryptoSlotType::~CryptoSlotType() = default;

void CryptoSlotType::copy(const uci::type::CryptoSlotType& accessor) {
  copyImpl(accessor, false);
}

void CryptoSlotType::copyImpl(const uci::type::CryptoSlotType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CryptoSlotType&>(accessor);
    setSlotIdentifier(*(accessorImpl.slotIdentifier_Accessor));
    setSlotState(*(accessorImpl.slotState_Accessor));
    if (accessorImpl.rolloverStatus_Accessor) {
      setRolloverStatus(*(accessorImpl.rolloverStatus_Accessor));
    } else {
      rolloverStatus_Accessor.reset();
    }
    if (accessorImpl.key_Accessor) {
      setKey(*(accessorImpl.key_Accessor));
    } else {
      key_Accessor.reset();
    }
    if (accessorImpl.nextSlotIdentifier_Accessor) {
      setNextSlotIdentifier(*(accessorImpl.nextSlotIdentifier_Accessor));
    } else {
      nextSlotIdentifier_Accessor.reset();
    }
  }
}

void CryptoSlotType::reset() noexcept {
  slotIdentifier_Accessor->reset();
  slotState_Accessor->reset();
  rolloverStatus_Accessor.reset();
  key_Accessor.reset();
  nextSlotIdentifier_Accessor.reset();
}

const uci::type::CryptoSlotIdentifierType& CryptoSlotType::getSlotIdentifier() const noexcept {
  return *slotIdentifier_Accessor;
}

uci::type::CryptoSlotIdentifierType& CryptoSlotType::getSlotIdentifier() noexcept {
  return *slotIdentifier_Accessor;
}

uci::type::CryptoSlotType& CryptoSlotType::setSlotIdentifier(const uci::type::CryptoSlotIdentifierType& value) {
  return setSlotIdentifier(value.c_str());
}

uci::type::CryptoSlotType& CryptoSlotType::setSlotIdentifier(const std::string& value) {
  return setSlotIdentifier(value.c_str());
}

uci::type::CryptoSlotType& CryptoSlotType::setSlotIdentifier(const char* value) {
  slotIdentifier_Accessor->setStringValue(value);
  return *this;
}

const uci::type::CryptoKeyStatusEnum& CryptoSlotType::getSlotState() const {
  return *slotState_Accessor;
}

uci::type::CryptoKeyStatusEnum& CryptoSlotType::getSlotState() {
  return *slotState_Accessor;
}

uci::type::CryptoSlotType& CryptoSlotType::setSlotState(const uci::type::CryptoKeyStatusEnum& accessor) {
  if (&accessor != slotState_Accessor.get()) {
    slotState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CryptoSlotType& CryptoSlotType::setSlotState(uci::type::CryptoKeyStatusEnum::EnumerationItem value) {
  slotState_Accessor->setValue(value);
  return *this;
}


uci::type::CryptoRolloverStatusType& CryptoSlotType::getRolloverStatus_() const {
  if (rolloverStatus_Accessor) {
    return *rolloverStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getRolloverStatus(): An attempt was made to get an optional field that was not enabled, call hasRolloverStatus() to determine if it is safe to call getRolloverStatus()");
}

const uci::type::CryptoRolloverStatusType& CryptoSlotType::getRolloverStatus() const {
  return getRolloverStatus_();
}

uci::type::CryptoRolloverStatusType& CryptoSlotType::getRolloverStatus() {
  return getRolloverStatus_();
}

uci::type::CryptoSlotType& CryptoSlotType::setRolloverStatus(const uci::type::CryptoRolloverStatusType& accessor) {
  enableRolloverStatus();
  if (&accessor != rolloverStatus_Accessor.get()) {
    rolloverStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CryptoSlotType::hasRolloverStatus() const noexcept {
  return static_cast<bool>(rolloverStatus_Accessor);
}

uci::type::CryptoRolloverStatusType& CryptoSlotType::enableRolloverStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cryptoRolloverStatusType : type};
  if ((!rolloverStatus_Accessor) || (rolloverStatus_Accessor->getAccessorType() != requestedType)) {
    rolloverStatus_Accessor = CryptoRolloverStatusType::create(requestedType);
    if (!rolloverStatus_Accessor) {
      throw uci::base::UCIException("Error in enableRolloverStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rolloverStatus_Accessor;
}

uci::type::CryptoSlotType& CryptoSlotType::clearRolloverStatus() noexcept {
  rolloverStatus_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& CryptoSlotType::getKey_() const {
  if (key_Accessor) {
    return *key_Accessor;
  }
  throw uci::base::UCIException("Error in getKey(): An attempt was made to get an optional field that was not enabled, call hasKey() to determine if it is safe to call getKey()");
}

const uci::type::ForeignKeyType& CryptoSlotType::getKey() const {
  return getKey_();
}

uci::type::ForeignKeyType& CryptoSlotType::getKey() {
  return getKey_();
}

uci::type::CryptoSlotType& CryptoSlotType::setKey(const uci::type::ForeignKeyType& accessor) {
  enableKey(accessor.getAccessorType());
  if (&accessor != key_Accessor.get()) {
    key_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CryptoSlotType::hasKey() const noexcept {
  return static_cast<bool>(key_Accessor);
}

uci::type::ForeignKeyType& CryptoSlotType::enableKey(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!key_Accessor) || (key_Accessor->getAccessorType() != requestedType)) {
    key_Accessor = ForeignKeyType::create(requestedType);
    if (!key_Accessor) {
      throw uci::base::UCIException("Error in enableKey(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *key_Accessor;
}

uci::type::CryptoSlotType& CryptoSlotType::clearKey() noexcept {
  key_Accessor.reset();
  return *this;
}

uci::type::CryptoSlotIdentifierType& CryptoSlotType::getNextSlotIdentifier_() const {
  if (nextSlotIdentifier_Accessor) {
    return *nextSlotIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getNextSlotIdentifier(): An attempt was made to get an optional field that was not enabled, call hasNextSlotIdentifier() to determine if it is safe to call getNextSlotIdentifier()");
}

const uci::type::CryptoSlotIdentifierType& CryptoSlotType::getNextSlotIdentifier() const {
  return getNextSlotIdentifier_();
}

uci::type::CryptoSlotIdentifierType& CryptoSlotType::getNextSlotIdentifier() {
  return getNextSlotIdentifier_();
}

uci::type::CryptoSlotType& CryptoSlotType::setNextSlotIdentifier(const uci::type::CryptoSlotIdentifierType& value) {
  return setNextSlotIdentifier(value.c_str());
}

uci::type::CryptoSlotType& CryptoSlotType::setNextSlotIdentifier(const std::string& value) {
  return setNextSlotIdentifier(value.c_str());
}

uci::type::CryptoSlotType& CryptoSlotType::setNextSlotIdentifier(const char* value) {
  enableNextSlotIdentifier().setStringValue(value);
  return *this;
}

bool CryptoSlotType::hasNextSlotIdentifier() const noexcept {
  return static_cast<bool>(nextSlotIdentifier_Accessor);
}

uci::type::CryptoSlotIdentifierType& CryptoSlotType::enableNextSlotIdentifier(uci::base::accessorType::AccessorType type) {
  if (!nextSlotIdentifier_Accessor) {
    nextSlotIdentifier_Accessor = VisibleString32Type::create(type);
  }
  return *nextSlotIdentifier_Accessor;
}

uci::type::CryptoSlotType& CryptoSlotType::clearNextSlotIdentifier() noexcept {
  nextSlotIdentifier_Accessor.reset();
  return *this;
}

std::unique_ptr<CryptoSlotType> CryptoSlotType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cryptoSlotType : type};
  return (requestedType == uci::type::accessorType::cryptoSlotType) ? boost::make_unique<CryptoSlotType>() : nullptr;
}

/**  */
namespace CryptoSlotType_Names {

constexpr const char* Extern_Type_Name{"CryptoSlotType"};
constexpr const char* SlotIdentifier_Name{"SlotIdentifier"};
constexpr const char* SlotState_Name{"SlotState"};
constexpr const char* RolloverStatus_Name{"RolloverStatus"};
constexpr const char* Key_Name{"Key"};
constexpr const char* NextSlotIdentifier_Name{"NextSlotIdentifier"};

} // namespace CryptoSlotType_Names

void CryptoSlotType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CryptoSlotType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CryptoSlotType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CryptoSlotType_Names::SlotIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSlotIdentifier(*value);
      }
    } else if (valueType.first == nsPrefix + CryptoSlotType_Names::SlotState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSlotState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CryptoSlotType_Names::RolloverStatus_Name) {
      CryptoRolloverStatusType::deserialize(valueType.second, accessor.enableRolloverStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CryptoSlotType_Names::Key_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableKey(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CryptoSlotType_Names::NextSlotIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNextSlotIdentifier(*value);
      }
    }
  }
}

std::string CryptoSlotType::serialize(const uci::type::CryptoSlotType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CryptoSlotType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CryptoSlotType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeString(accessor.getSlotIdentifier(), node, CryptoSlotType_Names::SlotIdentifier_Name);
  CryptoKeyStatusEnum::serialize(accessor.getSlotState(), node, CryptoSlotType_Names::SlotState_Name, false);
  if (accessor.hasRolloverStatus()) {
    CryptoRolloverStatusType::serialize(accessor.getRolloverStatus(), node, CryptoSlotType_Names::RolloverStatus_Name);
  }
  if (accessor.hasKey()) {
    ForeignKeyType::serialize(accessor.getKey(), node, CryptoSlotType_Names::Key_Name);
  }
  if (accessor.hasNextSlotIdentifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getNextSlotIdentifier(), node, CryptoSlotType_Names::NextSlotIdentifier_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CryptoSlotType& CryptoSlotType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CryptoSlotType>().release());
}

uci::type::CryptoSlotType& CryptoSlotType::create(const uci::type::CryptoSlotType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CryptoSlotType> newAccessor{boost::make_unique<asb_uci::type::CryptoSlotType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CryptoSlotType::destroy(uci::type::CryptoSlotType& accessor) {
  delete dynamic_cast<asb_uci::type::CryptoSlotType*>(&accessor);
}

} // namespace type

} // namespace uci

