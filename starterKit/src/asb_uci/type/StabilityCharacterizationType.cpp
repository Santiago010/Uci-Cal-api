/** @file StabilityCharacterizationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/StabilityCharacterizationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AngleRateType.h"
#include "uci/type/AngleType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/StabilityCharacterizationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StabilityCharacterizationType::StabilityCharacterizationType() = default;

StabilityCharacterizationType::~StabilityCharacterizationType() = default;

void StabilityCharacterizationType::copy(const uci::type::StabilityCharacterizationType& accessor) {
  copyImpl(accessor, false);
}

void StabilityCharacterizationType::copyImpl(const uci::type::StabilityCharacterizationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const StabilityCharacterizationType&>(accessor);
    setMinDetectableAngularRate(accessorImpl.minDetectableAngularRate_Accessor);
    setMaxPossibleRate(accessorImpl.maxPossibleRate_Accessor);
    if (accessorImpl.hasAngularResolution()) {
      setAngularResolution(accessorImpl.getAngularResolution());
    } else {
      clearAngularResolution();
    }
    if (accessorImpl.hasStructuralResolution()) {
      setStructuralResolution(accessorImpl.getStructuralResolution());
    } else {
      clearStructuralResolution();
    }
  }
}

void StabilityCharacterizationType::reset() noexcept {
  minDetectableAngularRate_Accessor = 0.0;
  maxPossibleRate_Accessor = 0.0;
  clearAngularResolution();
  clearStructuralResolution();
}

uci::type::AngleRateTypeValue StabilityCharacterizationType::getMinDetectableAngularRate() const {
  return minDetectableAngularRate_Accessor;
}

uci::type::StabilityCharacterizationType& StabilityCharacterizationType::setMinDetectableAngularRate(uci::type::AngleRateTypeValue value) {
  minDetectableAngularRate_Accessor = value;
  return *this;
}


uci::type::AngleRateTypeValue StabilityCharacterizationType::getMaxPossibleRate() const {
  return maxPossibleRate_Accessor;
}

uci::type::StabilityCharacterizationType& StabilityCharacterizationType::setMaxPossibleRate(uci::type::AngleRateTypeValue value) {
  maxPossibleRate_Accessor = value;
  return *this;
}


uci::type::AngleTypeValue StabilityCharacterizationType::getAngularResolution() const {
  if (angularResolution_Accessor) {
    return *angularResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getAngularResolution(): An attempt was made to get an optional field that was not enabled, call hasAngularResolution() to determine if it is safe to call getAngularResolution()");
}

uci::type::StabilityCharacterizationType& StabilityCharacterizationType::setAngularResolution(uci::type::AngleTypeValue value) {
  angularResolution_Accessor = value;
  return *this;
}

bool StabilityCharacterizationType::hasAngularResolution() const noexcept {
  return angularResolution_Accessor.has_value();
}

uci::type::StabilityCharacterizationType& StabilityCharacterizationType::clearAngularResolution() noexcept {
  angularResolution_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue StabilityCharacterizationType::getStructuralResolution() const {
  if (structuralResolution_Accessor) {
    return *structuralResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getStructuralResolution(): An attempt was made to get an optional field that was not enabled, call hasStructuralResolution() to determine if it is safe to call getStructuralResolution()");
}

uci::type::StabilityCharacterizationType& StabilityCharacterizationType::setStructuralResolution(uci::type::DistanceTypeValue value) {
  structuralResolution_Accessor = value;
  return *this;
}

bool StabilityCharacterizationType::hasStructuralResolution() const noexcept {
  return structuralResolution_Accessor.has_value();
}

uci::type::StabilityCharacterizationType& StabilityCharacterizationType::clearStructuralResolution() noexcept {
  structuralResolution_Accessor.reset();
  return *this;
}

std::unique_ptr<StabilityCharacterizationType> StabilityCharacterizationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::stabilityCharacterizationType : type};
  return (requestedType == uci::type::accessorType::stabilityCharacterizationType) ? boost::make_unique<StabilityCharacterizationType>() : nullptr;
}

/**  */
namespace StabilityCharacterizationType_Names {

constexpr const char* Extern_Type_Name{"StabilityCharacterizationType"};
constexpr const char* MinDetectableAngularRate_Name{"MinDetectableAngularRate"};
constexpr const char* MaxPossibleRate_Name{"MaxPossibleRate"};
constexpr const char* AngularResolution_Name{"AngularResolution"};
constexpr const char* StructuralResolution_Name{"StructuralResolution"};

} // namespace StabilityCharacterizationType_Names

void StabilityCharacterizationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StabilityCharacterizationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StabilityCharacterizationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StabilityCharacterizationType_Names::MinDetectableAngularRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinDetectableAngularRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + StabilityCharacterizationType_Names::MaxPossibleRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxPossibleRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + StabilityCharacterizationType_Names::AngularResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAngularResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + StabilityCharacterizationType_Names::StructuralResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStructuralResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string StabilityCharacterizationType::serialize(const uci::type::StabilityCharacterizationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StabilityCharacterizationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StabilityCharacterizationType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinDetectableAngularRate(), node, StabilityCharacterizationType_Names::MinDetectableAngularRate_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaxPossibleRate(), node, StabilityCharacterizationType_Names::MaxPossibleRate_Name);
  if (accessor.hasAngularResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAngularResolution(), node, StabilityCharacterizationType_Names::AngularResolution_Name);
  }
  if (accessor.hasStructuralResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getStructuralResolution(), node, StabilityCharacterizationType_Names::StructuralResolution_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StabilityCharacterizationType& StabilityCharacterizationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StabilityCharacterizationType>().release());
}

uci::type::StabilityCharacterizationType& StabilityCharacterizationType::create(const uci::type::StabilityCharacterizationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StabilityCharacterizationType> newAccessor{boost::make_unique<asb_uci::type::StabilityCharacterizationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StabilityCharacterizationType::destroy(uci::type::StabilityCharacterizationType& accessor) {
  delete dynamic_cast<asb_uci::type::StabilityCharacterizationType*>(&accessor);
}

} // namespace type

} // namespace uci

