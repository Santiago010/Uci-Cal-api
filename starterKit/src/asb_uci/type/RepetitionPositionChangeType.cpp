/** @file RepetitionPositionChangeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RepetitionPositionChangeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/LOS_InertialA_Type.h"
#include "asb_uci/type/LOS_Type.h"
#include "asb_uci/type/ThresholdOffOrbitTriggerDataType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/LOS_InertialA_Type.h"
#include "uci/type/LOS_Type.h"
#include "uci/type/RepetitionPositionChangeType.h"
#include "uci/type/ThresholdOffOrbitTriggerDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RepetitionPositionChangeType::RepetitionPositionChangeType() = default;

RepetitionPositionChangeType::~RepetitionPositionChangeType() = default;

void RepetitionPositionChangeType::copy(const uci::type::RepetitionPositionChangeType& accessor) {
  copyImpl(accessor, false);
}

void RepetitionPositionChangeType::copyImpl(const uci::type::RepetitionPositionChangeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RepetitionPositionChangeType&>(accessor);
    if (accessorImpl.lOS_BearingElevation_Accessor) {
      setLOS_BearingElevation(*(accessorImpl.lOS_BearingElevation_Accessor));
    } else {
      lOS_BearingElevation_Accessor.reset();
    }
    if (accessorImpl.lOS_AzEl_Accessor) {
      setLOS_AzEl(*(accessorImpl.lOS_AzEl_Accessor));
    } else {
      lOS_AzEl_Accessor.reset();
    }
    if (accessorImpl.orbitalRTN_Accessor) {
      setOrbitalRTN(*(accessorImpl.orbitalRTN_Accessor));
    } else {
      orbitalRTN_Accessor.reset();
    }
  }
}

void RepetitionPositionChangeType::reset() noexcept {
  lOS_BearingElevation_Accessor.reset();
  lOS_AzEl_Accessor.reset();
  orbitalRTN_Accessor.reset();
}

uci::type::RepetitionPositionChangeType::RepetitionPositionChangeTypeChoice RepetitionPositionChangeType::getRepetitionPositionChangeTypeChoiceOrdinal() const noexcept {
  if (lOS_BearingElevation_Accessor) {
    return REPETITIONPOSITIONCHANGETYPE_CHOICE_LOS_BEARINGELEVATION;
  }
  if (lOS_AzEl_Accessor) {
    return REPETITIONPOSITIONCHANGETYPE_CHOICE_LOS_AZEL;
  }
  if (orbitalRTN_Accessor) {
    return REPETITIONPOSITIONCHANGETYPE_CHOICE_ORBITALRTN;
  }
  return REPETITIONPOSITIONCHANGETYPE_CHOICE_NONE;
}

uci::type::RepetitionPositionChangeType& RepetitionPositionChangeType::setRepetitionPositionChangeTypeChoiceOrdinal(uci::type::RepetitionPositionChangeType::RepetitionPositionChangeTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case REPETITIONPOSITIONCHANGETYPE_CHOICE_LOS_BEARINGELEVATION:
      chooseLOS_BearingElevation("setRepetitionPositionChangeTypeChoiceOrdinal", type);
      break;
    case REPETITIONPOSITIONCHANGETYPE_CHOICE_LOS_AZEL:
      chooseLOS_AzEl("setRepetitionPositionChangeTypeChoiceOrdinal", type);
      break;
    case REPETITIONPOSITIONCHANGETYPE_CHOICE_ORBITALRTN:
      chooseOrbitalRTN("setRepetitionPositionChangeTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setRepetitionPositionChangeTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::LOS_Type& RepetitionPositionChangeType::getLOS_BearingElevation_() const {
  if (lOS_BearingElevation_Accessor) {
    return *lOS_BearingElevation_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS_BearingElevation(): Unable to get LOS_BearingElevation, field not selected");
}

const uci::type::LOS_Type& RepetitionPositionChangeType::getLOS_BearingElevation() const {
  return getLOS_BearingElevation_();
}

uci::type::LOS_Type& RepetitionPositionChangeType::getLOS_BearingElevation() {
  return getLOS_BearingElevation_();
}

uci::type::RepetitionPositionChangeType& RepetitionPositionChangeType::setLOS_BearingElevation(const uci::type::LOS_Type& accessor) {
  chooseLOS_BearingElevation();
  if (&accessor != lOS_BearingElevation_Accessor.get()) {
    lOS_BearingElevation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RepetitionPositionChangeType::isLOS_BearingElevation() const noexcept {
  return static_cast<bool>(lOS_BearingElevation_Accessor);
}

uci::type::LOS_Type& RepetitionPositionChangeType::chooseLOS_BearingElevation(const std::string& method, uci::base::accessorType::AccessorType type) {
  lOS_AzEl_Accessor.reset();
  orbitalRTN_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_Type : type};
  if ((!lOS_BearingElevation_Accessor) || (lOS_BearingElevation_Accessor->getAccessorType() != requestedType)) {
    lOS_BearingElevation_Accessor = LOS_Type::create(type);
    if (!lOS_BearingElevation_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lOS_BearingElevation_Accessor;
}

uci::type::LOS_Type& RepetitionPositionChangeType::chooseLOS_BearingElevation(uci::base::accessorType::AccessorType type) {
  return chooseLOS_BearingElevation("chooseLOS_BearingElevation", type);
}

uci::type::LOS_InertialA_Type& RepetitionPositionChangeType::getLOS_AzEl_() const {
  if (lOS_AzEl_Accessor) {
    return *lOS_AzEl_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS_AzEl(): Unable to get LOS_AzEl, field not selected");
}

const uci::type::LOS_InertialA_Type& RepetitionPositionChangeType::getLOS_AzEl() const {
  return getLOS_AzEl_();
}

uci::type::LOS_InertialA_Type& RepetitionPositionChangeType::getLOS_AzEl() {
  return getLOS_AzEl_();
}

uci::type::RepetitionPositionChangeType& RepetitionPositionChangeType::setLOS_AzEl(const uci::type::LOS_InertialA_Type& accessor) {
  chooseLOS_AzEl();
  if (&accessor != lOS_AzEl_Accessor.get()) {
    lOS_AzEl_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RepetitionPositionChangeType::isLOS_AzEl() const noexcept {
  return static_cast<bool>(lOS_AzEl_Accessor);
}

uci::type::LOS_InertialA_Type& RepetitionPositionChangeType::chooseLOS_AzEl(const std::string& method, uci::base::accessorType::AccessorType type) {
  lOS_BearingElevation_Accessor.reset();
  orbitalRTN_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_InertialA_Type : type};
  if ((!lOS_AzEl_Accessor) || (lOS_AzEl_Accessor->getAccessorType() != requestedType)) {
    lOS_AzEl_Accessor = LOS_InertialA_Type::create(type);
    if (!lOS_AzEl_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lOS_AzEl_Accessor;
}

uci::type::LOS_InertialA_Type& RepetitionPositionChangeType::chooseLOS_AzEl(uci::base::accessorType::AccessorType type) {
  return chooseLOS_AzEl("chooseLOS_AzEl", type);
}

uci::type::ThresholdOffOrbitTriggerDataType& RepetitionPositionChangeType::getOrbitalRTN_() const {
  if (orbitalRTN_Accessor) {
    return *orbitalRTN_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalRTN(): Unable to get OrbitalRTN, field not selected");
}

const uci::type::ThresholdOffOrbitTriggerDataType& RepetitionPositionChangeType::getOrbitalRTN() const {
  return getOrbitalRTN_();
}

uci::type::ThresholdOffOrbitTriggerDataType& RepetitionPositionChangeType::getOrbitalRTN() {
  return getOrbitalRTN_();
}

uci::type::RepetitionPositionChangeType& RepetitionPositionChangeType::setOrbitalRTN(const uci::type::ThresholdOffOrbitTriggerDataType& accessor) {
  chooseOrbitalRTN();
  if (&accessor != orbitalRTN_Accessor.get()) {
    orbitalRTN_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RepetitionPositionChangeType::isOrbitalRTN() const noexcept {
  return static_cast<bool>(orbitalRTN_Accessor);
}

uci::type::ThresholdOffOrbitTriggerDataType& RepetitionPositionChangeType::chooseOrbitalRTN(const std::string& method, uci::base::accessorType::AccessorType type) {
  lOS_BearingElevation_Accessor.reset();
  lOS_AzEl_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::thresholdOffOrbitTriggerDataType : type};
  if ((!orbitalRTN_Accessor) || (orbitalRTN_Accessor->getAccessorType() != requestedType)) {
    orbitalRTN_Accessor = ThresholdOffOrbitTriggerDataType::create(type);
    if (!orbitalRTN_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalRTN_Accessor;
}

uci::type::ThresholdOffOrbitTriggerDataType& RepetitionPositionChangeType::chooseOrbitalRTN(uci::base::accessorType::AccessorType type) {
  return chooseOrbitalRTN("chooseOrbitalRTN", type);
}

std::unique_ptr<RepetitionPositionChangeType> RepetitionPositionChangeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionPositionChangeType : type};
  return (requestedType == uci::type::accessorType::repetitionPositionChangeType) ? boost::make_unique<RepetitionPositionChangeType>() : nullptr;
}

/**  */
namespace RepetitionPositionChangeType_Names {

constexpr const char* Extern_Type_Name{"RepetitionPositionChangeType"};
constexpr const char* LOS_BearingElevation_Name{"LOS_BearingElevation"};
constexpr const char* LOS_AzEl_Name{"LOS_AzEl"};
constexpr const char* OrbitalRTN_Name{"OrbitalRTN"};

} // namespace RepetitionPositionChangeType_Names

void RepetitionPositionChangeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RepetitionPositionChangeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RepetitionPositionChangeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RepetitionPositionChangeType_Names::LOS_BearingElevation_Name) {
      LOS_Type::deserialize(valueType.second, accessor.chooseLOS_BearingElevation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RepetitionPositionChangeType_Names::LOS_AzEl_Name) {
      LOS_InertialA_Type::deserialize(valueType.second, accessor.chooseLOS_AzEl(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RepetitionPositionChangeType_Names::OrbitalRTN_Name) {
      ThresholdOffOrbitTriggerDataType::deserialize(valueType.second, accessor.chooseOrbitalRTN(), nodeName, nsPrefix);
    }
  }
}

std::string RepetitionPositionChangeType::serialize(const uci::type::RepetitionPositionChangeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RepetitionPositionChangeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RepetitionPositionChangeType_Names::Extern_Type_Name);
  }
  if (accessor.isLOS_BearingElevation()) {
    LOS_Type::serialize(accessor.getLOS_BearingElevation(), node, RepetitionPositionChangeType_Names::LOS_BearingElevation_Name);
  } else if (accessor.isLOS_AzEl()) {
    LOS_InertialA_Type::serialize(accessor.getLOS_AzEl(), node, RepetitionPositionChangeType_Names::LOS_AzEl_Name);
  } else if (accessor.isOrbitalRTN()) {
    ThresholdOffOrbitTriggerDataType::serialize(accessor.getOrbitalRTN(), node, RepetitionPositionChangeType_Names::OrbitalRTN_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RepetitionPositionChangeType& RepetitionPositionChangeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RepetitionPositionChangeType>().release());
}

uci::type::RepetitionPositionChangeType& RepetitionPositionChangeType::create(const uci::type::RepetitionPositionChangeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RepetitionPositionChangeType> newAccessor{boost::make_unique<asb_uci::type::RepetitionPositionChangeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RepetitionPositionChangeType::destroy(uci::type::RepetitionPositionChangeType& accessor) {
  delete dynamic_cast<asb_uci::type::RepetitionPositionChangeType*>(&accessor);
}

} // namespace type

} // namespace uci

