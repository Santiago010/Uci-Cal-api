/** @file LOS_MeasurementType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/LOS_MeasurementType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ArrivalDataType.h"
#include "asb_uci/type/ConeAngleType.h"
#include "asb_uci/type/LOS_AzElType.h"
#include "asb_uci/type/SlantRangeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ArrivalDataType.h"
#include "uci/type/ConeAngleType.h"
#include "uci/type/LOS_AzElType.h"
#include "uci/type/LOS_MeasurementType.h"
#include "uci/type/SlantRangeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LOS_MeasurementType::LOS_MeasurementType() = default;

LOS_MeasurementType::~LOS_MeasurementType() = default;

void LOS_MeasurementType::copy(const uci::type::LOS_MeasurementType& accessor) {
  copyImpl(accessor, false);
}

void LOS_MeasurementType::copyImpl(const uci::type::LOS_MeasurementType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LOS_MeasurementType&>(accessor);
    if (accessorImpl.lineOfSight_Accessor) {
      setLineOfSight(*(accessorImpl.lineOfSight_Accessor));
    } else {
      lineOfSight_Accessor.reset();
    }
    if (accessorImpl.coneAngle_Accessor) {
      setConeAngle(*(accessorImpl.coneAngle_Accessor));
    } else {
      coneAngle_Accessor.reset();
    }
    if (accessorImpl.arrivalData_Accessor) {
      setArrivalData(*(accessorImpl.arrivalData_Accessor));
    } else {
      arrivalData_Accessor.reset();
    }
    if (accessorImpl.slantRange_Accessor) {
      setSlantRange(*(accessorImpl.slantRange_Accessor));
    } else {
      slantRange_Accessor.reset();
    }
  }
}

void LOS_MeasurementType::reset() noexcept {
  lineOfSight_Accessor.reset();
  coneAngle_Accessor.reset();
  arrivalData_Accessor.reset();
  slantRange_Accessor.reset();
}

uci::type::LOS_AzElType& LOS_MeasurementType::getLineOfSight_() const {
  if (lineOfSight_Accessor) {
    return *lineOfSight_Accessor;
  }
  throw uci::base::UCIException("Error in getLineOfSight(): An attempt was made to get an optional field that was not enabled, call hasLineOfSight() to determine if it is safe to call getLineOfSight()");
}

const uci::type::LOS_AzElType& LOS_MeasurementType::getLineOfSight() const {
  return getLineOfSight_();
}

uci::type::LOS_AzElType& LOS_MeasurementType::getLineOfSight() {
  return getLineOfSight_();
}

uci::type::LOS_MeasurementType& LOS_MeasurementType::setLineOfSight(const uci::type::LOS_AzElType& accessor) {
  enableLineOfSight();
  if (&accessor != lineOfSight_Accessor.get()) {
    lineOfSight_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementType::hasLineOfSight() const noexcept {
  return static_cast<bool>(lineOfSight_Accessor);
}

uci::type::LOS_AzElType& LOS_MeasurementType::enableLineOfSight(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_AzElType : type};
  if ((!lineOfSight_Accessor) || (lineOfSight_Accessor->getAccessorType() != requestedType)) {
    lineOfSight_Accessor = LOS_AzElType::create(requestedType);
    if (!lineOfSight_Accessor) {
      throw uci::base::UCIException("Error in enableLineOfSight(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lineOfSight_Accessor;
}

uci::type::LOS_MeasurementType& LOS_MeasurementType::clearLineOfSight() noexcept {
  lineOfSight_Accessor.reset();
  return *this;
}

uci::type::ConeAngleType& LOS_MeasurementType::getConeAngle_() const {
  if (coneAngle_Accessor) {
    return *coneAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getConeAngle(): An attempt was made to get an optional field that was not enabled, call hasConeAngle() to determine if it is safe to call getConeAngle()");
}

const uci::type::ConeAngleType& LOS_MeasurementType::getConeAngle() const {
  return getConeAngle_();
}

uci::type::ConeAngleType& LOS_MeasurementType::getConeAngle() {
  return getConeAngle_();
}

uci::type::LOS_MeasurementType& LOS_MeasurementType::setConeAngle(const uci::type::ConeAngleType& accessor) {
  enableConeAngle();
  if (&accessor != coneAngle_Accessor.get()) {
    coneAngle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementType::hasConeAngle() const noexcept {
  return static_cast<bool>(coneAngle_Accessor);
}

uci::type::ConeAngleType& LOS_MeasurementType::enableConeAngle(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::coneAngleType : type};
  if ((!coneAngle_Accessor) || (coneAngle_Accessor->getAccessorType() != requestedType)) {
    coneAngle_Accessor = ConeAngleType::create(requestedType);
    if (!coneAngle_Accessor) {
      throw uci::base::UCIException("Error in enableConeAngle(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *coneAngle_Accessor;
}

uci::type::LOS_MeasurementType& LOS_MeasurementType::clearConeAngle() noexcept {
  coneAngle_Accessor.reset();
  return *this;
}

uci::type::ArrivalDataType& LOS_MeasurementType::getArrivalData_() const {
  if (arrivalData_Accessor) {
    return *arrivalData_Accessor;
  }
  throw uci::base::UCIException("Error in getArrivalData(): An attempt was made to get an optional field that was not enabled, call hasArrivalData() to determine if it is safe to call getArrivalData()");
}

const uci::type::ArrivalDataType& LOS_MeasurementType::getArrivalData() const {
  return getArrivalData_();
}

uci::type::ArrivalDataType& LOS_MeasurementType::getArrivalData() {
  return getArrivalData_();
}

uci::type::LOS_MeasurementType& LOS_MeasurementType::setArrivalData(const uci::type::ArrivalDataType& accessor) {
  enableArrivalData();
  if (&accessor != arrivalData_Accessor.get()) {
    arrivalData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementType::hasArrivalData() const noexcept {
  return static_cast<bool>(arrivalData_Accessor);
}

uci::type::ArrivalDataType& LOS_MeasurementType::enableArrivalData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::arrivalDataType : type};
  if ((!arrivalData_Accessor) || (arrivalData_Accessor->getAccessorType() != requestedType)) {
    arrivalData_Accessor = ArrivalDataType::create(requestedType);
    if (!arrivalData_Accessor) {
      throw uci::base::UCIException("Error in enableArrivalData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *arrivalData_Accessor;
}

uci::type::LOS_MeasurementType& LOS_MeasurementType::clearArrivalData() noexcept {
  arrivalData_Accessor.reset();
  return *this;
}

uci::type::SlantRangeType& LOS_MeasurementType::getSlantRange_() const {
  if (slantRange_Accessor) {
    return *slantRange_Accessor;
  }
  throw uci::base::UCIException("Error in getSlantRange(): An attempt was made to get an optional field that was not enabled, call hasSlantRange() to determine if it is safe to call getSlantRange()");
}

const uci::type::SlantRangeType& LOS_MeasurementType::getSlantRange() const {
  return getSlantRange_();
}

uci::type::SlantRangeType& LOS_MeasurementType::getSlantRange() {
  return getSlantRange_();
}

uci::type::LOS_MeasurementType& LOS_MeasurementType::setSlantRange(const uci::type::SlantRangeType& accessor) {
  enableSlantRange();
  if (&accessor != slantRange_Accessor.get()) {
    slantRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementType::hasSlantRange() const noexcept {
  return static_cast<bool>(slantRange_Accessor);
}

uci::type::SlantRangeType& LOS_MeasurementType::enableSlantRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::slantRangeType : type};
  if ((!slantRange_Accessor) || (slantRange_Accessor->getAccessorType() != requestedType)) {
    slantRange_Accessor = SlantRangeType::create(requestedType);
    if (!slantRange_Accessor) {
      throw uci::base::UCIException("Error in enableSlantRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *slantRange_Accessor;
}

uci::type::LOS_MeasurementType& LOS_MeasurementType::clearSlantRange() noexcept {
  slantRange_Accessor.reset();
  return *this;
}

std::unique_ptr<LOS_MeasurementType> LOS_MeasurementType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_MeasurementType : type};
  return (requestedType == uci::type::accessorType::lOS_MeasurementType) ? boost::make_unique<LOS_MeasurementType>() : nullptr;
}

/**  */
namespace LOS_MeasurementType_Names {

constexpr const char* Extern_Type_Name{"LOS_MeasurementType"};
constexpr const char* LineOfSight_Name{"LineOfSight"};
constexpr const char* ConeAngle_Name{"ConeAngle"};
constexpr const char* ArrivalData_Name{"ArrivalData"};
constexpr const char* SlantRange_Name{"SlantRange"};

} // namespace LOS_MeasurementType_Names

void LOS_MeasurementType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LOS_MeasurementType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LOS_MeasurementType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LOS_MeasurementType_Names::LineOfSight_Name) {
      LOS_AzElType::deserialize(valueType.second, accessor.enableLineOfSight(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementType_Names::ConeAngle_Name) {
      ConeAngleType::deserialize(valueType.second, accessor.enableConeAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementType_Names::ArrivalData_Name) {
      ArrivalDataType::deserialize(valueType.second, accessor.enableArrivalData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementType_Names::SlantRange_Name) {
      SlantRangeType::deserialize(valueType.second, accessor.enableSlantRange(), nodeName, nsPrefix);
    }
  }
}

std::string LOS_MeasurementType::serialize(const uci::type::LOS_MeasurementType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LOS_MeasurementType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LOS_MeasurementType_Names::Extern_Type_Name);
  }
  if (accessor.hasLineOfSight()) {
    LOS_AzElType::serialize(accessor.getLineOfSight(), node, LOS_MeasurementType_Names::LineOfSight_Name);
  }
  if (accessor.hasConeAngle()) {
    ConeAngleType::serialize(accessor.getConeAngle(), node, LOS_MeasurementType_Names::ConeAngle_Name);
  }
  if (accessor.hasArrivalData()) {
    ArrivalDataType::serialize(accessor.getArrivalData(), node, LOS_MeasurementType_Names::ArrivalData_Name);
  }
  if (accessor.hasSlantRange()) {
    SlantRangeType::serialize(accessor.getSlantRange(), node, LOS_MeasurementType_Names::SlantRange_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LOS_MeasurementType& LOS_MeasurementType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LOS_MeasurementType>().release());
}

uci::type::LOS_MeasurementType& LOS_MeasurementType::create(const uci::type::LOS_MeasurementType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LOS_MeasurementType> newAccessor{boost::make_unique<asb_uci::type::LOS_MeasurementType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LOS_MeasurementType::destroy(uci::type::LOS_MeasurementType& accessor) {
  delete dynamic_cast<asb_uci::type::LOS_MeasurementType*>(&accessor);
}

} // namespace type

} // namespace uci

