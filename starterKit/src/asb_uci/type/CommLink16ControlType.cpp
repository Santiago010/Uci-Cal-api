/** @file CommLink16ControlType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommLink16ControlType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommLink16AdvancedSlotNotificationType.h"
#include "../../../include/asb_uci/type/CommLink16DelayReductionType.h"
#include "../../../include/asb_uci/type/CommLink16EnhancedThroughputCodeRateEnum.h"
#include "../../../include/asb_uci/type/CommLink16InitialEntryGroupEnum.h"
#include "../../../include/asb_uci/type/CommLink16InitialEntryMessageType.h"
#include "../../../include/asb_uci/type/CommLink16InterferenceProtModeEnum.h"
#include "../../../include/asb_uci/type/CommLink16MissionInfoWordsType.h"
#include "../../../include/asb_uci/type/CommLink16NetSelectionType.h"
#include "../../../include/asb_uci/type/CommLink16RangeModeEnum.h"
#include "../../../include/asb_uci/type/CommLink16ReceiptComplianceWordsType.h"
#include "../../../include/asb_uci/type/CommLink16TransmitAntennaEnum.h"
#include "../../../include/asb_uci/type/CommLink16TransmitModeEnum.h"
#include "../../../include/asb_uci/type/CommLink16TxPG_Type.h"
#include "../../../include/asb_uci/type/CommLink16TxPowerSelectionEnum.h"
#include "../../../include/asb_uci/type/CommLink16_PPLI_PoolEnum.h"
#include "../../../include/asb_uci/type/VisibleString20Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16AdvancedSlotNotificationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16ControlType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16DelayReductionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16EnhancedThroughputCodeRateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16InitialEntryGroupEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16InitialEntryMessageType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16InterferenceProtModeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16MissionInfoWordsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16NetSelectionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16RangeModeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16ReceiptComplianceWordsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16TransmitAntennaEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16TransmitModeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16TxPG_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16TxPowerSelectionEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16_PPLI_PoolEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_ParticipationGroupIndexType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_PlatformStrengthType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_TrackNumberType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString20Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommLink16ControlType::CommLink16ControlType()
  : advancedSlotNotificationMode_Accessor{boost::make_unique<AdvancedSlotNotificationMode>(0, 2)},
    delayReduction_Accessor{boost::make_unique<DelayReduction>(0, 3)},
    initialEntryWords_Accessor{boost::make_unique<InitialEntryWords>(0, SIZE_MAX)},
    netSelectionStatus_Accessor{boost::make_unique<NetSelectionStatus>(0, 8)},
    secondarySourceTrackNumber_Accessor{boost::make_unique<SecondarySourceTrackNumber>(0, 16)},
    transmitPG_Slots_Accessor{boost::make_unique<TransmitPG_Slots>(0, 10)},
    receiptComplianceProcessingWords_Accessor{boost::make_unique<ReceiptComplianceProcessingWords>(0, 3)} {
}

CommLink16ControlType::~CommLink16ControlType() = default;

void CommLink16ControlType::copy(const uci::type::CommLink16ControlType& accessor) {
  copyImpl(accessor, false);
}

void CommLink16ControlType::copyImpl(const uci::type::CommLink16ControlType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommLink16ControlType&>(accessor);
    setAdvancedSlotNotificationMode(*(accessorImpl.advancedSlotNotificationMode_Accessor));
    if (accessorImpl.hasDataReductionPG_Index()) {
      setDataReductionPG_Index(accessorImpl.getDataReductionPG_Index());
    } else {
      clearDataReductionPG_Index();
    }
    setDelayReduction(*(accessorImpl.delayReduction_Accessor));
    if (accessorImpl.enhancedThroughputCodeRate_Accessor) {
      setEnhancedThroughputCodeRate(*(accessorImpl.enhancedThroughputCodeRate_Accessor));
    } else {
      enhancedThroughputCodeRate_Accessor.reset();
    }
    if (accessorImpl.initialEntryGroup_Accessor) {
      setInitialEntryGroup(*(accessorImpl.initialEntryGroup_Accessor));
    } else {
      initialEntryGroup_Accessor.reset();
    }
    if (accessorImpl.initialEntryMessageAssignment_Accessor) {
      setInitialEntryMessageAssignment(*(accessorImpl.initialEntryMessageAssignment_Accessor));
    } else {
      initialEntryMessageAssignment_Accessor.reset();
    }
    setInitialEntryWords(*(accessorImpl.initialEntryWords_Accessor));
    if (accessorImpl.hasInitializationActivityIndicator()) {
      setInitializationActivityIndicator(accessorImpl.getInitializationActivityIndicator());
    } else {
      clearInitializationActivityIndicator();
    }
    if (accessorImpl.hasInitializationIndexNumber()) {
      setInitializationIndexNumber(accessorImpl.getInitializationIndexNumber());
    } else {
      clearInitializationIndexNumber();
    }
    if (accessorImpl.interferenceProtectionMode_Accessor) {
      setInterferenceProtectionMode(*(accessorImpl.interferenceProtectionMode_Accessor));
    } else {
      interferenceProtectionMode_Accessor.reset();
    }
    if (accessorImpl.missionInformationWords_Accessor) {
      setMissionInformationWords(*(accessorImpl.missionInformationWords_Accessor));
    } else {
      missionInformationWords_Accessor.reset();
    }
    setNetSelectionStatus(*(accessorImpl.netSelectionStatus_Accessor));
    if (accessorImpl.hasNetEntryTxEnable()) {
      setNetEntryTxEnable(accessorImpl.getNetEntryTxEnable());
    } else {
      clearNetEntryTxEnable();
    }
    if (accessorImpl.hasPlatformStrength()) {
      setPlatformStrength(accessorImpl.getPlatformStrength());
    } else {
      clearPlatformStrength();
    }
    if (accessorImpl.pPLI_Pool_Accessor) {
      setPPLI_Pool(*(accessorImpl.pPLI_Pool_Accessor));
    } else {
      pPLI_Pool_Accessor.reset();
    }
    if (accessorImpl.rangeMode_Accessor) {
      setRangeMode(*(accessorImpl.rangeMode_Accessor));
    } else {
      rangeMode_Accessor.reset();
    }
    if (accessorImpl.hasRouteEstPG_Index()) {
      setRouteEstPG_Index(accessorImpl.getRouteEstPG_Index());
    } else {
      clearRouteEstPG_Index();
    }
    setSecondarySourceTrackNumber(*(accessorImpl.secondarySourceTrackNumber_Accessor));
    setTransmitPG_Slots(*(accessorImpl.transmitPG_Slots_Accessor));
    if (accessorImpl.transmitAntenna_Accessor) {
      setTransmitAntenna(*(accessorImpl.transmitAntenna_Accessor));
    } else {
      transmitAntenna_Accessor.reset();
    }
    setReceiptComplianceProcessingWords(*(accessorImpl.receiptComplianceProcessingWords_Accessor));
    if (accessorImpl.receiveAntenna_Accessor) {
      setReceiveAntenna(*(accessorImpl.receiveAntenna_Accessor));
    } else {
      receiveAntenna_Accessor.reset();
    }
    if (accessorImpl.transmitPowerSelection_Accessor) {
      setTransmitPowerSelection(*(accessorImpl.transmitPowerSelection_Accessor));
    } else {
      transmitPowerSelection_Accessor.reset();
    }
    if (accessorImpl.transmitMode_Accessor) {
      setTransmitMode(*(accessorImpl.transmitMode_Accessor));
    } else {
      transmitMode_Accessor.reset();
    }
    if (accessorImpl.hasVoiceGroupRate()) {
      setVoiceGroupRate(accessorImpl.getVoiceGroupRate());
    } else {
      clearVoiceGroupRate();
    }
    if (accessorImpl.hasVoiceGroupCoding()) {
      setVoiceGroupCoding(accessorImpl.getVoiceGroupCoding());
    } else {
      clearVoiceGroupCoding();
    }
    if (accessorImpl.hasForceTellIndicator()) {
      setForceTellIndicator(accessorImpl.getForceTellIndicator());
    } else {
      clearForceTellIndicator();
    }
    if (accessorImpl.hasResetNavKalmanFilter()) {
      setResetNavKalmanFilter(accessorImpl.getResetNavKalmanFilter());
    } else {
      clearResetNavKalmanFilter();
    }
    if (accessorImpl.hasIPF_Reset()) {
      setIPF_Reset(accessorImpl.getIPF_Reset());
    } else {
      clearIPF_Reset();
    }
    if (accessorImpl.voiceCallSign_Accessor) {
      setVoiceCallSign(*(accessorImpl.voiceCallSign_Accessor));
    } else {
      voiceCallSign_Accessor.reset();
    }
  }
}

void CommLink16ControlType::reset() noexcept {
  advancedSlotNotificationMode_Accessor->reset();
  clearDataReductionPG_Index();
  delayReduction_Accessor->reset();
  enhancedThroughputCodeRate_Accessor.reset();
  initialEntryGroup_Accessor.reset();
  initialEntryMessageAssignment_Accessor.reset();
  initialEntryWords_Accessor->reset();
  clearInitializationActivityIndicator();
  clearInitializationIndexNumber();
  interferenceProtectionMode_Accessor.reset();
  missionInformationWords_Accessor.reset();
  netSelectionStatus_Accessor->reset();
  clearNetEntryTxEnable();
  clearPlatformStrength();
  pPLI_Pool_Accessor.reset();
  rangeMode_Accessor.reset();
  clearRouteEstPG_Index();
  secondarySourceTrackNumber_Accessor->reset();
  transmitPG_Slots_Accessor->reset();
  transmitAntenna_Accessor.reset();
  receiptComplianceProcessingWords_Accessor->reset();
  receiveAntenna_Accessor.reset();
  transmitPowerSelection_Accessor.reset();
  transmitMode_Accessor.reset();
  clearVoiceGroupRate();
  clearVoiceGroupCoding();
  clearForceTellIndicator();
  clearResetNavKalmanFilter();
  clearIPF_Reset();
  voiceCallSign_Accessor.reset();
}

const uci::type::CommLink16ControlType::AdvancedSlotNotificationMode& CommLink16ControlType::getAdvancedSlotNotificationMode() const {
  return *advancedSlotNotificationMode_Accessor;
}

uci::type::CommLink16ControlType::AdvancedSlotNotificationMode& CommLink16ControlType::getAdvancedSlotNotificationMode() {
  return *advancedSlotNotificationMode_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setAdvancedSlotNotificationMode(const uci::type::CommLink16ControlType::AdvancedSlotNotificationMode& accessor) {
  if (&accessor != advancedSlotNotificationMode_Accessor.get()) {
    advancedSlotNotificationMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::Link16_ParticipationGroupIndexTypeValue CommLink16ControlType::getDataReductionPG_Index() const {
  if (dataReductionPG_Index_Accessor) {
    return *dataReductionPG_Index_Accessor;
  }
  throw uci::base::UCIException("Error in getDataReductionPG_Index(): An attempt was made to get an optional field that was not enabled, call hasDataReductionPG_Index() to determine if it is safe to call getDataReductionPG_Index()");
}

uci::type::CommLink16ControlType& CommLink16ControlType::setDataReductionPG_Index(uci::type::Link16_ParticipationGroupIndexTypeValue value) {
  dataReductionPG_Index_Accessor = value;
  return *this;
}

bool CommLink16ControlType::hasDataReductionPG_Index() const noexcept {
  return dataReductionPG_Index_Accessor.has_value();
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearDataReductionPG_Index() noexcept {
  dataReductionPG_Index_Accessor.reset();
  return *this;
}

const uci::type::CommLink16ControlType::DelayReduction& CommLink16ControlType::getDelayReduction() const {
  return *delayReduction_Accessor;
}

uci::type::CommLink16ControlType::DelayReduction& CommLink16ControlType::getDelayReduction() {
  return *delayReduction_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setDelayReduction(const uci::type::CommLink16ControlType::DelayReduction& accessor) {
  if (&accessor != delayReduction_Accessor.get()) {
    delayReduction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLink16EnhancedThroughputCodeRateEnum& CommLink16ControlType::getEnhancedThroughputCodeRate_() const {
  if (enhancedThroughputCodeRate_Accessor) {
    return *enhancedThroughputCodeRate_Accessor;
  }
  throw uci::base::UCIException("Error in getEnhancedThroughputCodeRate(): An attempt was made to get an optional field that was not enabled, call hasEnhancedThroughputCodeRate() to determine if it is safe to call getEnhancedThroughputCodeRate()");
}

const uci::type::CommLink16EnhancedThroughputCodeRateEnum& CommLink16ControlType::getEnhancedThroughputCodeRate() const {
  return getEnhancedThroughputCodeRate_();
}

uci::type::CommLink16EnhancedThroughputCodeRateEnum& CommLink16ControlType::getEnhancedThroughputCodeRate() {
  return getEnhancedThroughputCodeRate_();
}

uci::type::CommLink16ControlType& CommLink16ControlType::setEnhancedThroughputCodeRate(const uci::type::CommLink16EnhancedThroughputCodeRateEnum& accessor) {
  enableEnhancedThroughputCodeRate();
  if (&accessor != enhancedThroughputCodeRate_Accessor.get()) {
    enhancedThroughputCodeRate_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setEnhancedThroughputCodeRate(const uci::type::CommLink16EnhancedThroughputCodeRateEnum::EnumerationItem value) {
  enableEnhancedThroughputCodeRate().setValue(value);
  return *this;
}

bool CommLink16ControlType::hasEnhancedThroughputCodeRate() const noexcept {
  return static_cast<bool>(enhancedThroughputCodeRate_Accessor);
}

uci::type::CommLink16EnhancedThroughputCodeRateEnum& CommLink16ControlType::enableEnhancedThroughputCodeRate(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16EnhancedThroughputCodeRateEnum : type};
  if ((!enhancedThroughputCodeRate_Accessor) || (enhancedThroughputCodeRate_Accessor->getAccessorType() != requestedType)) {
    enhancedThroughputCodeRate_Accessor = CommLink16EnhancedThroughputCodeRateEnum::create(requestedType);
    if (!enhancedThroughputCodeRate_Accessor) {
      throw uci::base::UCIException("Error in enableEnhancedThroughputCodeRate(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *enhancedThroughputCodeRate_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearEnhancedThroughputCodeRate() noexcept {
  enhancedThroughputCodeRate_Accessor.reset();
  return *this;
}

uci::type::CommLink16InitialEntryGroupEnum& CommLink16ControlType::getInitialEntryGroup_() const {
  if (initialEntryGroup_Accessor) {
    return *initialEntryGroup_Accessor;
  }
  throw uci::base::UCIException("Error in getInitialEntryGroup(): An attempt was made to get an optional field that was not enabled, call hasInitialEntryGroup() to determine if it is safe to call getInitialEntryGroup()");
}

const uci::type::CommLink16InitialEntryGroupEnum& CommLink16ControlType::getInitialEntryGroup() const {
  return getInitialEntryGroup_();
}

uci::type::CommLink16InitialEntryGroupEnum& CommLink16ControlType::getInitialEntryGroup() {
  return getInitialEntryGroup_();
}

uci::type::CommLink16ControlType& CommLink16ControlType::setInitialEntryGroup(const uci::type::CommLink16InitialEntryGroupEnum& accessor) {
  enableInitialEntryGroup();
  if (&accessor != initialEntryGroup_Accessor.get()) {
    initialEntryGroup_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setInitialEntryGroup(const uci::type::CommLink16InitialEntryGroupEnum::EnumerationItem value) {
  enableInitialEntryGroup().setValue(value);
  return *this;
}

bool CommLink16ControlType::hasInitialEntryGroup() const noexcept {
  return static_cast<bool>(initialEntryGroup_Accessor);
}

uci::type::CommLink16InitialEntryGroupEnum& CommLink16ControlType::enableInitialEntryGroup(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16InitialEntryGroupEnum : type};
  if ((!initialEntryGroup_Accessor) || (initialEntryGroup_Accessor->getAccessorType() != requestedType)) {
    initialEntryGroup_Accessor = CommLink16InitialEntryGroupEnum::create(requestedType);
    if (!initialEntryGroup_Accessor) {
      throw uci::base::UCIException("Error in enableInitialEntryGroup(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *initialEntryGroup_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearInitialEntryGroup() noexcept {
  initialEntryGroup_Accessor.reset();
  return *this;
}

uci::type::CommLink16InitialEntryMessageType& CommLink16ControlType::getInitialEntryMessageAssignment_() const {
  if (initialEntryMessageAssignment_Accessor) {
    return *initialEntryMessageAssignment_Accessor;
  }
  throw uci::base::UCIException("Error in getInitialEntryMessageAssignment(): An attempt was made to get an optional field that was not enabled, call hasInitialEntryMessageAssignment() to determine if it is safe to call getInitialEntryMessageAssignment()");
}

const uci::type::CommLink16InitialEntryMessageType& CommLink16ControlType::getInitialEntryMessageAssignment() const {
  return getInitialEntryMessageAssignment_();
}

uci::type::CommLink16InitialEntryMessageType& CommLink16ControlType::getInitialEntryMessageAssignment() {
  return getInitialEntryMessageAssignment_();
}

uci::type::CommLink16ControlType& CommLink16ControlType::setInitialEntryMessageAssignment(const uci::type::CommLink16InitialEntryMessageType& accessor) {
  enableInitialEntryMessageAssignment();
  if (&accessor != initialEntryMessageAssignment_Accessor.get()) {
    initialEntryMessageAssignment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommLink16ControlType::hasInitialEntryMessageAssignment() const noexcept {
  return static_cast<bool>(initialEntryMessageAssignment_Accessor);
}

uci::type::CommLink16InitialEntryMessageType& CommLink16ControlType::enableInitialEntryMessageAssignment(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16InitialEntryMessageType : type};
  if ((!initialEntryMessageAssignment_Accessor) || (initialEntryMessageAssignment_Accessor->getAccessorType() != requestedType)) {
    initialEntryMessageAssignment_Accessor = CommLink16InitialEntryMessageType::create(requestedType);
    if (!initialEntryMessageAssignment_Accessor) {
      throw uci::base::UCIException("Error in enableInitialEntryMessageAssignment(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *initialEntryMessageAssignment_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearInitialEntryMessageAssignment() noexcept {
  initialEntryMessageAssignment_Accessor.reset();
  return *this;
}

const uci::type::CommLink16ControlType::InitialEntryWords& CommLink16ControlType::getInitialEntryWords() const {
  return *initialEntryWords_Accessor;
}

uci::type::CommLink16ControlType::InitialEntryWords& CommLink16ControlType::getInitialEntryWords() {
  return *initialEntryWords_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setInitialEntryWords(const uci::type::CommLink16ControlType::InitialEntryWords& accessor) {
  if (&accessor != initialEntryWords_Accessor.get()) {
    initialEntryWords_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean CommLink16ControlType::getInitializationActivityIndicator() const {
  if (initializationActivityIndicator_Accessor) {
    return *initializationActivityIndicator_Accessor;
  }
  throw uci::base::UCIException("Error in getInitializationActivityIndicator(): An attempt was made to get an optional field that was not enabled, call hasInitializationActivityIndicator() to determine if it is safe to call getInitializationActivityIndicator()");
}

uci::type::CommLink16ControlType& CommLink16ControlType::setInitializationActivityIndicator(xs::Boolean value) {
  initializationActivityIndicator_Accessor = value;
  return *this;
}

bool CommLink16ControlType::hasInitializationActivityIndicator() const noexcept {
  return initializationActivityIndicator_Accessor.has_value();
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearInitializationActivityIndicator() noexcept {
  initializationActivityIndicator_Accessor.reset();
  return *this;
}

xs::UnsignedByte CommLink16ControlType::getInitializationIndexNumber() const {
  if (initializationIndexNumber_Accessor) {
    return *initializationIndexNumber_Accessor;
  }
  throw uci::base::UCIException("Error in getInitializationIndexNumber(): An attempt was made to get an optional field that was not enabled, call hasInitializationIndexNumber() to determine if it is safe to call getInitializationIndexNumber()");
}

uci::type::CommLink16ControlType& CommLink16ControlType::setInitializationIndexNumber(xs::UnsignedByte value) {
  initializationIndexNumber_Accessor = value;
  return *this;
}

bool CommLink16ControlType::hasInitializationIndexNumber() const noexcept {
  return initializationIndexNumber_Accessor.has_value();
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearInitializationIndexNumber() noexcept {
  initializationIndexNumber_Accessor.reset();
  return *this;
}

uci::type::CommLink16InterferenceProtModeEnum& CommLink16ControlType::getInterferenceProtectionMode_() const {
  if (interferenceProtectionMode_Accessor) {
    return *interferenceProtectionMode_Accessor;
  }
  throw uci::base::UCIException("Error in getInterferenceProtectionMode(): An attempt was made to get an optional field that was not enabled, call hasInterferenceProtectionMode() to determine if it is safe to call getInterferenceProtectionMode()");
}

const uci::type::CommLink16InterferenceProtModeEnum& CommLink16ControlType::getInterferenceProtectionMode() const {
  return getInterferenceProtectionMode_();
}

uci::type::CommLink16InterferenceProtModeEnum& CommLink16ControlType::getInterferenceProtectionMode() {
  return getInterferenceProtectionMode_();
}

uci::type::CommLink16ControlType& CommLink16ControlType::setInterferenceProtectionMode(const uci::type::CommLink16InterferenceProtModeEnum& accessor) {
  enableInterferenceProtectionMode();
  if (&accessor != interferenceProtectionMode_Accessor.get()) {
    interferenceProtectionMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setInterferenceProtectionMode(const uci::type::CommLink16InterferenceProtModeEnum::EnumerationItem value) {
  enableInterferenceProtectionMode().setValue(value);
  return *this;
}

bool CommLink16ControlType::hasInterferenceProtectionMode() const noexcept {
  return static_cast<bool>(interferenceProtectionMode_Accessor);
}

uci::type::CommLink16InterferenceProtModeEnum& CommLink16ControlType::enableInterferenceProtectionMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16InterferenceProtModeEnum : type};
  if ((!interferenceProtectionMode_Accessor) || (interferenceProtectionMode_Accessor->getAccessorType() != requestedType)) {
    interferenceProtectionMode_Accessor = CommLink16InterferenceProtModeEnum::create(requestedType);
    if (!interferenceProtectionMode_Accessor) {
      throw uci::base::UCIException("Error in enableInterferenceProtectionMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *interferenceProtectionMode_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearInterferenceProtectionMode() noexcept {
  interferenceProtectionMode_Accessor.reset();
  return *this;
}

uci::type::CommLink16MissionInfoWordsType& CommLink16ControlType::getMissionInformationWords_() const {
  if (missionInformationWords_Accessor) {
    return *missionInformationWords_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionInformationWords(): An attempt was made to get an optional field that was not enabled, call hasMissionInformationWords() to determine if it is safe to call getMissionInformationWords()");
}

const uci::type::CommLink16MissionInfoWordsType& CommLink16ControlType::getMissionInformationWords() const {
  return getMissionInformationWords_();
}

uci::type::CommLink16MissionInfoWordsType& CommLink16ControlType::getMissionInformationWords() {
  return getMissionInformationWords_();
}

uci::type::CommLink16ControlType& CommLink16ControlType::setMissionInformationWords(const uci::type::CommLink16MissionInfoWordsType& accessor) {
  enableMissionInformationWords();
  if (&accessor != missionInformationWords_Accessor.get()) {
    missionInformationWords_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommLink16ControlType::hasMissionInformationWords() const noexcept {
  return static_cast<bool>(missionInformationWords_Accessor);
}

uci::type::CommLink16MissionInfoWordsType& CommLink16ControlType::enableMissionInformationWords(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16MissionInfoWordsType : type};
  if ((!missionInformationWords_Accessor) || (missionInformationWords_Accessor->getAccessorType() != requestedType)) {
    missionInformationWords_Accessor = CommLink16MissionInfoWordsType::create(requestedType);
    if (!missionInformationWords_Accessor) {
      throw uci::base::UCIException("Error in enableMissionInformationWords(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionInformationWords_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearMissionInformationWords() noexcept {
  missionInformationWords_Accessor.reset();
  return *this;
}

const uci::type::CommLink16ControlType::NetSelectionStatus& CommLink16ControlType::getNetSelectionStatus() const {
  return *netSelectionStatus_Accessor;
}

uci::type::CommLink16ControlType::NetSelectionStatus& CommLink16ControlType::getNetSelectionStatus() {
  return *netSelectionStatus_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setNetSelectionStatus(const uci::type::CommLink16ControlType::NetSelectionStatus& accessor) {
  if (&accessor != netSelectionStatus_Accessor.get()) {
    netSelectionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean CommLink16ControlType::getNetEntryTxEnable() const {
  if (netEntryTxEnable_Accessor) {
    return *netEntryTxEnable_Accessor;
  }
  throw uci::base::UCIException("Error in getNetEntryTxEnable(): An attempt was made to get an optional field that was not enabled, call hasNetEntryTxEnable() to determine if it is safe to call getNetEntryTxEnable()");
}

uci::type::CommLink16ControlType& CommLink16ControlType::setNetEntryTxEnable(xs::Boolean value) {
  netEntryTxEnable_Accessor = value;
  return *this;
}

bool CommLink16ControlType::hasNetEntryTxEnable() const noexcept {
  return netEntryTxEnable_Accessor.has_value();
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearNetEntryTxEnable() noexcept {
  netEntryTxEnable_Accessor.reset();
  return *this;
}

uci::type::Link16_PlatformStrengthTypeValue CommLink16ControlType::getPlatformStrength() const {
  if (platformStrength_Accessor) {
    return *platformStrength_Accessor;
  }
  throw uci::base::UCIException("Error in getPlatformStrength(): An attempt was made to get an optional field that was not enabled, call hasPlatformStrength() to determine if it is safe to call getPlatformStrength()");
}

uci::type::CommLink16ControlType& CommLink16ControlType::setPlatformStrength(uci::type::Link16_PlatformStrengthTypeValue value) {
  platformStrength_Accessor = value;
  return *this;
}

bool CommLink16ControlType::hasPlatformStrength() const noexcept {
  return platformStrength_Accessor.has_value();
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearPlatformStrength() noexcept {
  platformStrength_Accessor.reset();
  return *this;
}

uci::type::CommLink16_PPLI_PoolEnum& CommLink16ControlType::getPPLI_Pool_() const {
  if (pPLI_Pool_Accessor) {
    return *pPLI_Pool_Accessor;
  }
  throw uci::base::UCIException("Error in getPPLI_Pool(): An attempt was made to get an optional field that was not enabled, call hasPPLI_Pool() to determine if it is safe to call getPPLI_Pool()");
}

const uci::type::CommLink16_PPLI_PoolEnum& CommLink16ControlType::getPPLI_Pool() const {
  return getPPLI_Pool_();
}

uci::type::CommLink16_PPLI_PoolEnum& CommLink16ControlType::getPPLI_Pool() {
  return getPPLI_Pool_();
}

uci::type::CommLink16ControlType& CommLink16ControlType::setPPLI_Pool(const uci::type::CommLink16_PPLI_PoolEnum& accessor) {
  enablePPLI_Pool();
  if (&accessor != pPLI_Pool_Accessor.get()) {
    pPLI_Pool_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setPPLI_Pool(const uci::type::CommLink16_PPLI_PoolEnum::EnumerationItem value) {
  enablePPLI_Pool().setValue(value);
  return *this;
}

bool CommLink16ControlType::hasPPLI_Pool() const noexcept {
  return static_cast<bool>(pPLI_Pool_Accessor);
}

uci::type::CommLink16_PPLI_PoolEnum& CommLink16ControlType::enablePPLI_Pool(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16_PPLI_PoolEnum : type};
  if ((!pPLI_Pool_Accessor) || (pPLI_Pool_Accessor->getAccessorType() != requestedType)) {
    pPLI_Pool_Accessor = CommLink16_PPLI_PoolEnum::create(requestedType);
    if (!pPLI_Pool_Accessor) {
      throw uci::base::UCIException("Error in enablePPLI_Pool(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pPLI_Pool_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearPPLI_Pool() noexcept {
  pPLI_Pool_Accessor.reset();
  return *this;
}

uci::type::CommLink16RangeModeEnum& CommLink16ControlType::getRangeMode_() const {
  if (rangeMode_Accessor) {
    return *rangeMode_Accessor;
  }
  throw uci::base::UCIException("Error in getRangeMode(): An attempt was made to get an optional field that was not enabled, call hasRangeMode() to determine if it is safe to call getRangeMode()");
}

const uci::type::CommLink16RangeModeEnum& CommLink16ControlType::getRangeMode() const {
  return getRangeMode_();
}

uci::type::CommLink16RangeModeEnum& CommLink16ControlType::getRangeMode() {
  return getRangeMode_();
}

uci::type::CommLink16ControlType& CommLink16ControlType::setRangeMode(const uci::type::CommLink16RangeModeEnum& accessor) {
  enableRangeMode();
  if (&accessor != rangeMode_Accessor.get()) {
    rangeMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setRangeMode(const uci::type::CommLink16RangeModeEnum::EnumerationItem value) {
  enableRangeMode().setValue(value);
  return *this;
}

bool CommLink16ControlType::hasRangeMode() const noexcept {
  return static_cast<bool>(rangeMode_Accessor);
}

uci::type::CommLink16RangeModeEnum& CommLink16ControlType::enableRangeMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16RangeModeEnum : type};
  if ((!rangeMode_Accessor) || (rangeMode_Accessor->getAccessorType() != requestedType)) {
    rangeMode_Accessor = CommLink16RangeModeEnum::create(requestedType);
    if (!rangeMode_Accessor) {
      throw uci::base::UCIException("Error in enableRangeMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rangeMode_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearRangeMode() noexcept {
  rangeMode_Accessor.reset();
  return *this;
}

uci::type::Link16_ParticipationGroupIndexTypeValue CommLink16ControlType::getRouteEstPG_Index() const {
  if (routeEstPG_Index_Accessor) {
    return *routeEstPG_Index_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteEstPG_Index(): An attempt was made to get an optional field that was not enabled, call hasRouteEstPG_Index() to determine if it is safe to call getRouteEstPG_Index()");
}

uci::type::CommLink16ControlType& CommLink16ControlType::setRouteEstPG_Index(uci::type::Link16_ParticipationGroupIndexTypeValue value) {
  routeEstPG_Index_Accessor = value;
  return *this;
}

bool CommLink16ControlType::hasRouteEstPG_Index() const noexcept {
  return routeEstPG_Index_Accessor.has_value();
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearRouteEstPG_Index() noexcept {
  routeEstPG_Index_Accessor.reset();
  return *this;
}

const uci::type::CommLink16ControlType::SecondarySourceTrackNumber& CommLink16ControlType::getSecondarySourceTrackNumber() const {
  return *secondarySourceTrackNumber_Accessor;
}

uci::type::CommLink16ControlType::SecondarySourceTrackNumber& CommLink16ControlType::getSecondarySourceTrackNumber() {
  return *secondarySourceTrackNumber_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setSecondarySourceTrackNumber(const uci::type::CommLink16ControlType::SecondarySourceTrackNumber& accessor) {
  if (&accessor != secondarySourceTrackNumber_Accessor.get()) {
    secondarySourceTrackNumber_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommLink16ControlType::TransmitPG_Slots& CommLink16ControlType::getTransmitPG_Slots() const {
  return *transmitPG_Slots_Accessor;
}

uci::type::CommLink16ControlType::TransmitPG_Slots& CommLink16ControlType::getTransmitPG_Slots() {
  return *transmitPG_Slots_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setTransmitPG_Slots(const uci::type::CommLink16ControlType::TransmitPG_Slots& accessor) {
  if (&accessor != transmitPG_Slots_Accessor.get()) {
    transmitPG_Slots_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLink16TransmitAntennaEnum& CommLink16ControlType::getTransmitAntenna_() const {
  if (transmitAntenna_Accessor) {
    return *transmitAntenna_Accessor;
  }
  throw uci::base::UCIException("Error in getTransmitAntenna(): An attempt was made to get an optional field that was not enabled, call hasTransmitAntenna() to determine if it is safe to call getTransmitAntenna()");
}

const uci::type::CommLink16TransmitAntennaEnum& CommLink16ControlType::getTransmitAntenna() const {
  return getTransmitAntenna_();
}

uci::type::CommLink16TransmitAntennaEnum& CommLink16ControlType::getTransmitAntenna() {
  return getTransmitAntenna_();
}

uci::type::CommLink16ControlType& CommLink16ControlType::setTransmitAntenna(const uci::type::CommLink16TransmitAntennaEnum& accessor) {
  enableTransmitAntenna();
  if (&accessor != transmitAntenna_Accessor.get()) {
    transmitAntenna_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setTransmitAntenna(const uci::type::CommLink16TransmitAntennaEnum::EnumerationItem value) {
  enableTransmitAntenna().setValue(value);
  return *this;
}

bool CommLink16ControlType::hasTransmitAntenna() const noexcept {
  return static_cast<bool>(transmitAntenna_Accessor);
}

uci::type::CommLink16TransmitAntennaEnum& CommLink16ControlType::enableTransmitAntenna(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16TransmitAntennaEnum : type};
  if ((!transmitAntenna_Accessor) || (transmitAntenna_Accessor->getAccessorType() != requestedType)) {
    transmitAntenna_Accessor = CommLink16TransmitAntennaEnum::create(requestedType);
    if (!transmitAntenna_Accessor) {
      throw uci::base::UCIException("Error in enableTransmitAntenna(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *transmitAntenna_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearTransmitAntenna() noexcept {
  transmitAntenna_Accessor.reset();
  return *this;
}

const uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords& CommLink16ControlType::getReceiptComplianceProcessingWords() const {
  return *receiptComplianceProcessingWords_Accessor;
}

uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords& CommLink16ControlType::getReceiptComplianceProcessingWords() {
  return *receiptComplianceProcessingWords_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setReceiptComplianceProcessingWords(const uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords& accessor) {
  if (&accessor != receiptComplianceProcessingWords_Accessor.get()) {
    receiptComplianceProcessingWords_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLink16TransmitAntennaEnum& CommLink16ControlType::getReceiveAntenna_() const {
  if (receiveAntenna_Accessor) {
    return *receiveAntenna_Accessor;
  }
  throw uci::base::UCIException("Error in getReceiveAntenna(): An attempt was made to get an optional field that was not enabled, call hasReceiveAntenna() to determine if it is safe to call getReceiveAntenna()");
}

const uci::type::CommLink16TransmitAntennaEnum& CommLink16ControlType::getReceiveAntenna() const {
  return getReceiveAntenna_();
}

uci::type::CommLink16TransmitAntennaEnum& CommLink16ControlType::getReceiveAntenna() {
  return getReceiveAntenna_();
}

uci::type::CommLink16ControlType& CommLink16ControlType::setReceiveAntenna(const uci::type::CommLink16TransmitAntennaEnum& accessor) {
  enableReceiveAntenna();
  if (&accessor != receiveAntenna_Accessor.get()) {
    receiveAntenna_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setReceiveAntenna(const uci::type::CommLink16TransmitAntennaEnum::EnumerationItem value) {
  enableReceiveAntenna().setValue(value);
  return *this;
}

bool CommLink16ControlType::hasReceiveAntenna() const noexcept {
  return static_cast<bool>(receiveAntenna_Accessor);
}

uci::type::CommLink16TransmitAntennaEnum& CommLink16ControlType::enableReceiveAntenna(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16TransmitAntennaEnum : type};
  if ((!receiveAntenna_Accessor) || (receiveAntenna_Accessor->getAccessorType() != requestedType)) {
    receiveAntenna_Accessor = CommLink16TransmitAntennaEnum::create(requestedType);
    if (!receiveAntenna_Accessor) {
      throw uci::base::UCIException("Error in enableReceiveAntenna(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *receiveAntenna_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearReceiveAntenna() noexcept {
  receiveAntenna_Accessor.reset();
  return *this;
}

uci::type::CommLink16TxPowerSelectionEnum& CommLink16ControlType::getTransmitPowerSelection_() const {
  if (transmitPowerSelection_Accessor) {
    return *transmitPowerSelection_Accessor;
  }
  throw uci::base::UCIException("Error in getTransmitPowerSelection(): An attempt was made to get an optional field that was not enabled, call hasTransmitPowerSelection() to determine if it is safe to call getTransmitPowerSelection()");
}

const uci::type::CommLink16TxPowerSelectionEnum& CommLink16ControlType::getTransmitPowerSelection() const {
  return getTransmitPowerSelection_();
}

uci::type::CommLink16TxPowerSelectionEnum& CommLink16ControlType::getTransmitPowerSelection() {
  return getTransmitPowerSelection_();
}

uci::type::CommLink16ControlType& CommLink16ControlType::setTransmitPowerSelection(const uci::type::CommLink16TxPowerSelectionEnum& accessor) {
  enableTransmitPowerSelection();
  if (&accessor != transmitPowerSelection_Accessor.get()) {
    transmitPowerSelection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setTransmitPowerSelection(const uci::type::CommLink16TxPowerSelectionEnum::EnumerationItem value) {
  enableTransmitPowerSelection().setValue(value);
  return *this;
}

bool CommLink16ControlType::hasTransmitPowerSelection() const noexcept {
  return static_cast<bool>(transmitPowerSelection_Accessor);
}

uci::type::CommLink16TxPowerSelectionEnum& CommLink16ControlType::enableTransmitPowerSelection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16TxPowerSelectionEnum : type};
  if ((!transmitPowerSelection_Accessor) || (transmitPowerSelection_Accessor->getAccessorType() != requestedType)) {
    transmitPowerSelection_Accessor = CommLink16TxPowerSelectionEnum::create(requestedType);
    if (!transmitPowerSelection_Accessor) {
      throw uci::base::UCIException("Error in enableTransmitPowerSelection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *transmitPowerSelection_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearTransmitPowerSelection() noexcept {
  transmitPowerSelection_Accessor.reset();
  return *this;
}

uci::type::CommLink16TransmitModeEnum& CommLink16ControlType::getTransmitMode_() const {
  if (transmitMode_Accessor) {
    return *transmitMode_Accessor;
  }
  throw uci::base::UCIException("Error in getTransmitMode(): An attempt was made to get an optional field that was not enabled, call hasTransmitMode() to determine if it is safe to call getTransmitMode()");
}

const uci::type::CommLink16TransmitModeEnum& CommLink16ControlType::getTransmitMode() const {
  return getTransmitMode_();
}

uci::type::CommLink16TransmitModeEnum& CommLink16ControlType::getTransmitMode() {
  return getTransmitMode_();
}

uci::type::CommLink16ControlType& CommLink16ControlType::setTransmitMode(const uci::type::CommLink16TransmitModeEnum& accessor) {
  enableTransmitMode();
  if (&accessor != transmitMode_Accessor.get()) {
    transmitMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLink16ControlType& CommLink16ControlType::setTransmitMode(const uci::type::CommLink16TransmitModeEnum::EnumerationItem value) {
  enableTransmitMode().setValue(value);
  return *this;
}

bool CommLink16ControlType::hasTransmitMode() const noexcept {
  return static_cast<bool>(transmitMode_Accessor);
}

uci::type::CommLink16TransmitModeEnum& CommLink16ControlType::enableTransmitMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16TransmitModeEnum : type};
  if ((!transmitMode_Accessor) || (transmitMode_Accessor->getAccessorType() != requestedType)) {
    transmitMode_Accessor = CommLink16TransmitModeEnum::create(requestedType);
    if (!transmitMode_Accessor) {
      throw uci::base::UCIException("Error in enableTransmitMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *transmitMode_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearTransmitMode() noexcept {
  transmitMode_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue CommLink16ControlType::getVoiceGroupRate() const {
  if (voiceGroupRate_Accessor) {
    return *voiceGroupRate_Accessor;
  }
  throw uci::base::UCIException("Error in getVoiceGroupRate(): An attempt was made to get an optional field that was not enabled, call hasVoiceGroupRate() to determine if it is safe to call getVoiceGroupRate()");
}

uci::type::CommLink16ControlType& CommLink16ControlType::setVoiceGroupRate(uci::type::FrequencyTypeValue value) {
  voiceGroupRate_Accessor = value;
  return *this;
}

bool CommLink16ControlType::hasVoiceGroupRate() const noexcept {
  return voiceGroupRate_Accessor.has_value();
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearVoiceGroupRate() noexcept {
  voiceGroupRate_Accessor.reset();
  return *this;
}

xs::Boolean CommLink16ControlType::getVoiceGroupCoding() const {
  if (voiceGroupCoding_Accessor) {
    return *voiceGroupCoding_Accessor;
  }
  throw uci::base::UCIException("Error in getVoiceGroupCoding(): An attempt was made to get an optional field that was not enabled, call hasVoiceGroupCoding() to determine if it is safe to call getVoiceGroupCoding()");
}

uci::type::CommLink16ControlType& CommLink16ControlType::setVoiceGroupCoding(xs::Boolean value) {
  voiceGroupCoding_Accessor = value;
  return *this;
}

bool CommLink16ControlType::hasVoiceGroupCoding() const noexcept {
  return voiceGroupCoding_Accessor.has_value();
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearVoiceGroupCoding() noexcept {
  voiceGroupCoding_Accessor.reset();
  return *this;
}

xs::Boolean CommLink16ControlType::getForceTellIndicator() const {
  if (forceTellIndicator_Accessor) {
    return *forceTellIndicator_Accessor;
  }
  throw uci::base::UCIException("Error in getForceTellIndicator(): An attempt was made to get an optional field that was not enabled, call hasForceTellIndicator() to determine if it is safe to call getForceTellIndicator()");
}

uci::type::CommLink16ControlType& CommLink16ControlType::setForceTellIndicator(xs::Boolean value) {
  forceTellIndicator_Accessor = value;
  return *this;
}

bool CommLink16ControlType::hasForceTellIndicator() const noexcept {
  return forceTellIndicator_Accessor.has_value();
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearForceTellIndicator() noexcept {
  forceTellIndicator_Accessor.reset();
  return *this;
}

xs::Boolean CommLink16ControlType::getResetNavKalmanFilter() const {
  if (resetNavKalmanFilter_Accessor) {
    return *resetNavKalmanFilter_Accessor;
  }
  throw uci::base::UCIException("Error in getResetNavKalmanFilter(): An attempt was made to get an optional field that was not enabled, call hasResetNavKalmanFilter() to determine if it is safe to call getResetNavKalmanFilter()");
}

uci::type::CommLink16ControlType& CommLink16ControlType::setResetNavKalmanFilter(xs::Boolean value) {
  resetNavKalmanFilter_Accessor = value;
  return *this;
}

bool CommLink16ControlType::hasResetNavKalmanFilter() const noexcept {
  return resetNavKalmanFilter_Accessor.has_value();
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearResetNavKalmanFilter() noexcept {
  resetNavKalmanFilter_Accessor.reset();
  return *this;
}

xs::Boolean CommLink16ControlType::getIPF_Reset() const {
  if (iPF_Reset_Accessor) {
    return *iPF_Reset_Accessor;
  }
  throw uci::base::UCIException("Error in getIPF_Reset(): An attempt was made to get an optional field that was not enabled, call hasIPF_Reset() to determine if it is safe to call getIPF_Reset()");
}

uci::type::CommLink16ControlType& CommLink16ControlType::setIPF_Reset(xs::Boolean value) {
  iPF_Reset_Accessor = value;
  return *this;
}

bool CommLink16ControlType::hasIPF_Reset() const noexcept {
  return iPF_Reset_Accessor.has_value();
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearIPF_Reset() noexcept {
  iPF_Reset_Accessor.reset();
  return *this;
}

uci::type::VisibleString20Type& CommLink16ControlType::getVoiceCallSign_() const {
  if (voiceCallSign_Accessor) {
    return *voiceCallSign_Accessor;
  }
  throw uci::base::UCIException("Error in getVoiceCallSign(): An attempt was made to get an optional field that was not enabled, call hasVoiceCallSign() to determine if it is safe to call getVoiceCallSign()");
}

const uci::type::VisibleString20Type& CommLink16ControlType::getVoiceCallSign() const {
  return getVoiceCallSign_();
}

uci::type::VisibleString20Type& CommLink16ControlType::getVoiceCallSign() {
  return getVoiceCallSign_();
}

uci::type::CommLink16ControlType& CommLink16ControlType::setVoiceCallSign(const uci::type::VisibleString20Type& value) {
  return setVoiceCallSign(value.c_str());
}

uci::type::CommLink16ControlType& CommLink16ControlType::setVoiceCallSign(const std::string& value) {
  return setVoiceCallSign(value.c_str());
}

uci::type::CommLink16ControlType& CommLink16ControlType::setVoiceCallSign(const char* value) {
  enableVoiceCallSign().setStringValue(value);
  return *this;
}

bool CommLink16ControlType::hasVoiceCallSign() const noexcept {
  return static_cast<bool>(voiceCallSign_Accessor);
}

uci::type::VisibleString20Type& CommLink16ControlType::enableVoiceCallSign(uci::base::accessorType::AccessorType type) {
  if (!voiceCallSign_Accessor) {
    voiceCallSign_Accessor = VisibleString20Type::create(type);
  }
  return *voiceCallSign_Accessor;
}

uci::type::CommLink16ControlType& CommLink16ControlType::clearVoiceCallSign() noexcept {
  voiceCallSign_Accessor.reset();
  return *this;
}

std::unique_ptr<CommLink16ControlType> CommLink16ControlType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16ControlType : type};
  return (requestedType == uci::type::accessorType::commLink16ControlType) ? boost::make_unique<CommLink16ControlType>() : nullptr;
}

/**  */
namespace CommLink16ControlType_Names {

constexpr const char* Extern_Type_Name{"CommLink16ControlType"};
constexpr const char* AdvancedSlotNotificationMode_Name{"AdvancedSlotNotificationMode"};
constexpr const char* DataReductionPG_Index_Name{"DataReductionPG_Index"};
constexpr const char* DelayReduction_Name{"DelayReduction"};
constexpr const char* EnhancedThroughputCodeRate_Name{"EnhancedThroughputCodeRate"};
constexpr const char* InitialEntryGroup_Name{"InitialEntryGroup"};
constexpr const char* InitialEntryMessageAssignment_Name{"InitialEntryMessageAssignment"};
constexpr const char* InitialEntryWords_Name{"InitialEntryWords"};
constexpr const char* InitializationActivityIndicator_Name{"InitializationActivityIndicator"};
constexpr const char* InitializationIndexNumber_Name{"InitializationIndexNumber"};
constexpr const char* InterferenceProtectionMode_Name{"InterferenceProtectionMode"};
constexpr const char* MissionInformationWords_Name{"MissionInformationWords"};
constexpr const char* NetSelectionStatus_Name{"NetSelectionStatus"};
constexpr const char* NetEntryTxEnable_Name{"NetEntryTxEnable"};
constexpr const char* PlatformStrength_Name{"PlatformStrength"};
constexpr const char* PPLI_Pool_Name{"PPLI_Pool"};
constexpr const char* RangeMode_Name{"RangeMode"};
constexpr const char* RouteEstPG_Index_Name{"RouteEstPG_Index"};
constexpr const char* SecondarySourceTrackNumber_Name{"SecondarySourceTrackNumber"};
constexpr const char* TransmitPG_Slots_Name{"TransmitPG_Slots"};
constexpr const char* TransmitAntenna_Name{"TransmitAntenna"};
constexpr const char* ReceiptComplianceProcessingWords_Name{"ReceiptComplianceProcessingWords"};
constexpr const char* ReceiveAntenna_Name{"ReceiveAntenna"};
constexpr const char* TransmitPowerSelection_Name{"TransmitPowerSelection"};
constexpr const char* TransmitMode_Name{"TransmitMode"};
constexpr const char* VoiceGroupRate_Name{"VoiceGroupRate"};
constexpr const char* VoiceGroupCoding_Name{"VoiceGroupCoding"};
constexpr const char* ForceTellIndicator_Name{"ForceTellIndicator"};
constexpr const char* ResetNavKalmanFilter_Name{"ResetNavKalmanFilter"};
constexpr const char* IPF_Reset_Name{"IPF_Reset"};
constexpr const char* VoiceCallSign_Name{"VoiceCallSign"};

} // namespace CommLink16ControlType_Names

void CommLink16ControlType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommLink16ControlType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommLink16ControlType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::AdvancedSlotNotificationMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommLink16ControlType::AdvancedSlotNotificationMode& boundedList = accessor.getAdvancedSlotNotificationMode();
        const uci::type::CommLink16ControlType::AdvancedSlotNotificationMode::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommLink16AdvancedSlotNotificationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::DataReductionPG_Index_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDataReductionPG_Index(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::DelayReduction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommLink16ControlType::DelayReduction& boundedList = accessor.getDelayReduction();
        const uci::type::CommLink16ControlType::DelayReduction::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommLink16DelayReductionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::EnhancedThroughputCodeRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEnhancedThroughputCodeRate().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::InitialEntryGroup_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableInitialEntryGroup().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::InitialEntryMessageAssignment_Name) {
      CommLink16InitialEntryMessageType::deserialize(valueType.second, accessor.enableInitialEntryMessageAssignment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::InitialEntryWords_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommLink16ControlType::InitialEntryWords& boundedList = accessor.getInitialEntryWords();
        const uci::type::CommLink16ControlType::InitialEntryWords::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setIntValue(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::InitializationActivityIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInitializationActivityIndicator(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::InitializationIndexNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInitializationIndexNumber(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::InterferenceProtectionMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableInterferenceProtectionMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::MissionInformationWords_Name) {
      CommLink16MissionInfoWordsType::deserialize(valueType.second, accessor.enableMissionInformationWords(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::NetSelectionStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommLink16ControlType::NetSelectionStatus& boundedList = accessor.getNetSelectionStatus();
        const uci::type::CommLink16ControlType::NetSelectionStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommLink16NetSelectionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::NetEntryTxEnable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNetEntryTxEnable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::PlatformStrength_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPlatformStrength(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::PPLI_Pool_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePPLI_Pool().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::RangeMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRangeMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::RouteEstPG_Index_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRouteEstPG_Index(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::SecondarySourceTrackNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommLink16ControlType::SecondarySourceTrackNumber& boundedList = accessor.getSecondarySourceTrackNumber();
        const uci::type::CommLink16ControlType::SecondarySourceTrackNumber::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedShortValue(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::TransmitPG_Slots_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommLink16ControlType::TransmitPG_Slots& boundedList = accessor.getTransmitPG_Slots();
        const uci::type::CommLink16ControlType::TransmitPG_Slots::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommLink16TxPG_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::TransmitAntenna_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTransmitAntenna().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::ReceiptComplianceProcessingWords_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords& boundedList = accessor.getReceiptComplianceProcessingWords();
        const uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommLink16ReceiptComplianceWordsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::ReceiveAntenna_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableReceiveAntenna().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::TransmitPowerSelection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTransmitPowerSelection().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::TransmitMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTransmitMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::VoiceGroupRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceGroupRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::VoiceGroupCoding_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceGroupCoding(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::ForceTellIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setForceTellIndicator(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::ResetNavKalmanFilter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResetNavKalmanFilter(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::IPF_Reset_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIPF_Reset(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::VoiceCallSign_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceCallSign(*value);
      }
    }
  }
}

std::string CommLink16ControlType::serialize(const uci::type::CommLink16ControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommLink16ControlType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommLink16ControlType_Names::Extern_Type_Name);
  }
  {
    const uci::type::CommLink16ControlType::AdvancedSlotNotificationMode& boundedList = accessor.getAdvancedSlotNotificationMode();
    for (uci::type::CommLink16ControlType::AdvancedSlotNotificationMode::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommLink16AdvancedSlotNotificationType::serialize(boundedList.at(i), node, CommLink16ControlType_Names::AdvancedSlotNotificationMode_Name);
    }
  }
  if (accessor.hasDataReductionPG_Index()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getDataReductionPG_Index(), node, CommLink16ControlType_Names::DataReductionPG_Index_Name);
  }
  {
    const uci::type::CommLink16ControlType::DelayReduction& boundedList = accessor.getDelayReduction();
    for (uci::type::CommLink16ControlType::DelayReduction::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommLink16DelayReductionType::serialize(boundedList.at(i), node, CommLink16ControlType_Names::DelayReduction_Name);
    }
  }
  if (accessor.hasEnhancedThroughputCodeRate()) {
    CommLink16EnhancedThroughputCodeRateEnum::serialize(accessor.getEnhancedThroughputCodeRate(), node, CommLink16ControlType_Names::EnhancedThroughputCodeRate_Name, false);
  }
  if (accessor.hasInitialEntryGroup()) {
    CommLink16InitialEntryGroupEnum::serialize(accessor.getInitialEntryGroup(), node, CommLink16ControlType_Names::InitialEntryGroup_Name, false);
  }
  if (accessor.hasInitialEntryMessageAssignment()) {
    CommLink16InitialEntryMessageType::serialize(accessor.getInitialEntryMessageAssignment(), node, CommLink16ControlType_Names::InitialEntryMessageAssignment_Name);
  }
  {
    const uci::type::CommLink16ControlType::InitialEntryWords& boundedList = accessor.getInitialEntryWords();
    for (uci::type::CommLink16ControlType::InitialEntryWords::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeInt(boundedList.at(i), node, CommLink16ControlType_Names::InitialEntryWords_Name);
    }
  }
  if (accessor.hasInitializationActivityIndicator()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInitializationActivityIndicator(), node, CommLink16ControlType_Names::InitializationActivityIndicator_Name);
  }
  if (accessor.hasInitializationIndexNumber()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getInitializationIndexNumber(), node, CommLink16ControlType_Names::InitializationIndexNumber_Name);
  }
  if (accessor.hasInterferenceProtectionMode()) {
    CommLink16InterferenceProtModeEnum::serialize(accessor.getInterferenceProtectionMode(), node, CommLink16ControlType_Names::InterferenceProtectionMode_Name, false);
  }
  if (accessor.hasMissionInformationWords()) {
    CommLink16MissionInfoWordsType::serialize(accessor.getMissionInformationWords(), node, CommLink16ControlType_Names::MissionInformationWords_Name);
  }
  {
    const uci::type::CommLink16ControlType::NetSelectionStatus& boundedList = accessor.getNetSelectionStatus();
    for (uci::type::CommLink16ControlType::NetSelectionStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommLink16NetSelectionType::serialize(boundedList.at(i), node, CommLink16ControlType_Names::NetSelectionStatus_Name);
    }
  }
  if (accessor.hasNetEntryTxEnable()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getNetEntryTxEnable(), node, CommLink16ControlType_Names::NetEntryTxEnable_Name);
  }
  if (accessor.hasPlatformStrength()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getPlatformStrength(), node, CommLink16ControlType_Names::PlatformStrength_Name);
  }
  if (accessor.hasPPLI_Pool()) {
    CommLink16_PPLI_PoolEnum::serialize(accessor.getPPLI_Pool(), node, CommLink16ControlType_Names::PPLI_Pool_Name, false);
  }
  if (accessor.hasRangeMode()) {
    CommLink16RangeModeEnum::serialize(accessor.getRangeMode(), node, CommLink16ControlType_Names::RangeMode_Name, false);
  }
  if (accessor.hasRouteEstPG_Index()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getRouteEstPG_Index(), node, CommLink16ControlType_Names::RouteEstPG_Index_Name);
  }
  {
    const uci::type::CommLink16ControlType::SecondarySourceTrackNumber& boundedList = accessor.getSecondarySourceTrackNumber();
    for (uci::type::CommLink16ControlType::SecondarySourceTrackNumber::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeUnsignedShort(boundedList.at(i), node, CommLink16ControlType_Names::SecondarySourceTrackNumber_Name);
    }
  }
  {
    const uci::type::CommLink16ControlType::TransmitPG_Slots& boundedList = accessor.getTransmitPG_Slots();
    for (uci::type::CommLink16ControlType::TransmitPG_Slots::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommLink16TxPG_Type::serialize(boundedList.at(i), node, CommLink16ControlType_Names::TransmitPG_Slots_Name);
    }
  }
  if (accessor.hasTransmitAntenna()) {
    CommLink16TransmitAntennaEnum::serialize(accessor.getTransmitAntenna(), node, CommLink16ControlType_Names::TransmitAntenna_Name, false);
  }
  {
    const uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords& boundedList = accessor.getReceiptComplianceProcessingWords();
    for (uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommLink16ReceiptComplianceWordsType::serialize(boundedList.at(i), node, CommLink16ControlType_Names::ReceiptComplianceProcessingWords_Name);
    }
  }
  if (accessor.hasReceiveAntenna()) {
    CommLink16TransmitAntennaEnum::serialize(accessor.getReceiveAntenna(), node, CommLink16ControlType_Names::ReceiveAntenna_Name, false);
  }
  if (accessor.hasTransmitPowerSelection()) {
    CommLink16TxPowerSelectionEnum::serialize(accessor.getTransmitPowerSelection(), node, CommLink16ControlType_Names::TransmitPowerSelection_Name, false);
  }
  if (accessor.hasTransmitMode()) {
    CommLink16TransmitModeEnum::serialize(accessor.getTransmitMode(), node, CommLink16ControlType_Names::TransmitMode_Name, false);
  }
  if (accessor.hasVoiceGroupRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVoiceGroupRate(), node, CommLink16ControlType_Names::VoiceGroupRate_Name);
  }
  if (accessor.hasVoiceGroupCoding()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getVoiceGroupCoding(), node, CommLink16ControlType_Names::VoiceGroupCoding_Name);
  }
  if (accessor.hasForceTellIndicator()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getForceTellIndicator(), node, CommLink16ControlType_Names::ForceTellIndicator_Name);
  }
  if (accessor.hasResetNavKalmanFilter()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getResetNavKalmanFilter(), node, CommLink16ControlType_Names::ResetNavKalmanFilter_Name);
  }
  if (accessor.hasIPF_Reset()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getIPF_Reset(), node, CommLink16ControlType_Names::IPF_Reset_Name);
  }
  if (accessor.hasVoiceCallSign()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getVoiceCallSign(), node, CommLink16ControlType_Names::VoiceCallSign_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommLink16ControlType& CommLink16ControlType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommLink16ControlType>().release());
}

uci::type::CommLink16ControlType& CommLink16ControlType::create(const uci::type::CommLink16ControlType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommLink16ControlType> newAccessor{boost::make_unique<asb_uci::type::CommLink16ControlType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommLink16ControlType::destroy(uci::type::CommLink16ControlType& accessor) {
  delete dynamic_cast<asb_uci::type::CommLink16ControlType*>(&accessor);
}

} // namespace type

} // namespace uci

