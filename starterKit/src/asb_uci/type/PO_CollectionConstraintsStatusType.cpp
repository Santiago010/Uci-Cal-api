/** @file PO_CollectionConstraintsStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_CollectionConstraintsStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PO_AngleConstraintControlsStatusType.h"
#include "../../../include/asb_uci/type/PO_ColorPatternConstraintControlsStatusType.h"
#include "../../../include/asb_uci/type/PO_GimbalOrientationConstraintControlsStatusType.h"
#include "../../../include/asb_uci/type/PO_SlantRangeConstraintControlsStatusType.h"
#include "../../../include/asb_uci/type/PO_SweepSpeedConstraintControlsStatusType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_AngleConstraintControlsStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_CollectionConstraintsStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ColorPatternConstraintControlsStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_GimbalOrientationConstraintControlsStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_SlantRangeConstraintControlsStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_SweepSpeedConstraintControlsStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_CollectionConstraintsStatusType::PO_CollectionConstraintsStatusType() = default;

PO_CollectionConstraintsStatusType::~PO_CollectionConstraintsStatusType() = default;

void PO_CollectionConstraintsStatusType::copy(const uci::type::PO_CollectionConstraintsStatusType& accessor) {
  copyImpl(accessor, false);
}

void PO_CollectionConstraintsStatusType::copyImpl(const uci::type::PO_CollectionConstraintsStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_CollectionConstraintsStatusType&>(accessor);
    if (accessorImpl.mapAngleConstraints_Accessor) {
      setMapAngleConstraints(*(accessorImpl.mapAngleConstraints_Accessor));
    } else {
      mapAngleConstraints_Accessor.reset();
    }
    if (accessorImpl.grazingAngleConstraints_Accessor) {
      setGrazingAngleConstraints(*(accessorImpl.grazingAngleConstraints_Accessor));
    } else {
      grazingAngleConstraints_Accessor.reset();
    }
    if (accessorImpl.lookAngleConstraints_Accessor) {
      setLookAngleConstraints(*(accessorImpl.lookAngleConstraints_Accessor));
    } else {
      lookAngleConstraints_Accessor.reset();
    }
    if (accessorImpl.elevationAngleConstraints_Accessor) {
      setElevationAngleConstraints(*(accessorImpl.elevationAngleConstraints_Accessor));
    } else {
      elevationAngleConstraints_Accessor.reset();
    }
    if (accessorImpl.slantRangeConstraints_Accessor) {
      setSlantRangeConstraints(*(accessorImpl.slantRangeConstraints_Accessor));
    } else {
      slantRangeConstraints_Accessor.reset();
    }
    if (accessorImpl.collectionPattern_Accessor) {
      setCollectionPattern(*(accessorImpl.collectionPattern_Accessor));
    } else {
      collectionPattern_Accessor.reset();
    }
    if (accessorImpl.sunElevAngles_Accessor) {
      setSunElevAngles(*(accessorImpl.sunElevAngles_Accessor));
    } else {
      sunElevAngles_Accessor.reset();
    }
    if (accessorImpl.sunAzimuthAngles_Accessor) {
      setSunAzimuthAngles(*(accessorImpl.sunAzimuthAngles_Accessor));
    } else {
      sunAzimuthAngles_Accessor.reset();
    }
    if (accessorImpl.sweepSpeed_Accessor) {
      setSweepSpeed(*(accessorImpl.sweepSpeed_Accessor));
    } else {
      sweepSpeed_Accessor.reset();
    }
    if (accessorImpl.gimbalOrientation_Accessor) {
      setGimbalOrientation(*(accessorImpl.gimbalOrientation_Accessor));
    } else {
      gimbalOrientation_Accessor.reset();
    }
  }
}

void PO_CollectionConstraintsStatusType::reset() noexcept {
  mapAngleConstraints_Accessor.reset();
  grazingAngleConstraints_Accessor.reset();
  lookAngleConstraints_Accessor.reset();
  elevationAngleConstraints_Accessor.reset();
  slantRangeConstraints_Accessor.reset();
  collectionPattern_Accessor.reset();
  sunElevAngles_Accessor.reset();
  sunAzimuthAngles_Accessor.reset();
  sweepSpeed_Accessor.reset();
  gimbalOrientation_Accessor.reset();
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getMapAngleConstraints_() const {
  if (mapAngleConstraints_Accessor) {
    return *mapAngleConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getMapAngleConstraints(): An attempt was made to get an optional field that was not enabled, call hasMapAngleConstraints() to determine if it is safe to call getMapAngleConstraints()");
}

const uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getMapAngleConstraints() const {
  return getMapAngleConstraints_();
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getMapAngleConstraints() {
  return getMapAngleConstraints_();
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::setMapAngleConstraints(const uci::type::PO_AngleConstraintControlsStatusType& accessor) {
  enableMapAngleConstraints();
  if (&accessor != mapAngleConstraints_Accessor.get()) {
    mapAngleConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsStatusType::hasMapAngleConstraints() const noexcept {
  return static_cast<bool>(mapAngleConstraints_Accessor);
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::enableMapAngleConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsStatusType : type};
  if ((!mapAngleConstraints_Accessor) || (mapAngleConstraints_Accessor->getAccessorType() != requestedType)) {
    mapAngleConstraints_Accessor = PO_AngleConstraintControlsStatusType::create(requestedType);
    if (!mapAngleConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableMapAngleConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mapAngleConstraints_Accessor;
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::clearMapAngleConstraints() noexcept {
  mapAngleConstraints_Accessor.reset();
  return *this;
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getGrazingAngleConstraints_() const {
  if (grazingAngleConstraints_Accessor) {
    return *grazingAngleConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getGrazingAngleConstraints(): An attempt was made to get an optional field that was not enabled, call hasGrazingAngleConstraints() to determine if it is safe to call getGrazingAngleConstraints()");
}

const uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getGrazingAngleConstraints() const {
  return getGrazingAngleConstraints_();
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getGrazingAngleConstraints() {
  return getGrazingAngleConstraints_();
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::setGrazingAngleConstraints(const uci::type::PO_AngleConstraintControlsStatusType& accessor) {
  enableGrazingAngleConstraints();
  if (&accessor != grazingAngleConstraints_Accessor.get()) {
    grazingAngleConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsStatusType::hasGrazingAngleConstraints() const noexcept {
  return static_cast<bool>(grazingAngleConstraints_Accessor);
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::enableGrazingAngleConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsStatusType : type};
  if ((!grazingAngleConstraints_Accessor) || (grazingAngleConstraints_Accessor->getAccessorType() != requestedType)) {
    grazingAngleConstraints_Accessor = PO_AngleConstraintControlsStatusType::create(requestedType);
    if (!grazingAngleConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableGrazingAngleConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *grazingAngleConstraints_Accessor;
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::clearGrazingAngleConstraints() noexcept {
  grazingAngleConstraints_Accessor.reset();
  return *this;
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getLookAngleConstraints_() const {
  if (lookAngleConstraints_Accessor) {
    return *lookAngleConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getLookAngleConstraints(): An attempt was made to get an optional field that was not enabled, call hasLookAngleConstraints() to determine if it is safe to call getLookAngleConstraints()");
}

const uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getLookAngleConstraints() const {
  return getLookAngleConstraints_();
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getLookAngleConstraints() {
  return getLookAngleConstraints_();
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::setLookAngleConstraints(const uci::type::PO_AngleConstraintControlsStatusType& accessor) {
  enableLookAngleConstraints();
  if (&accessor != lookAngleConstraints_Accessor.get()) {
    lookAngleConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsStatusType::hasLookAngleConstraints() const noexcept {
  return static_cast<bool>(lookAngleConstraints_Accessor);
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::enableLookAngleConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsStatusType : type};
  if ((!lookAngleConstraints_Accessor) || (lookAngleConstraints_Accessor->getAccessorType() != requestedType)) {
    lookAngleConstraints_Accessor = PO_AngleConstraintControlsStatusType::create(requestedType);
    if (!lookAngleConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableLookAngleConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lookAngleConstraints_Accessor;
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::clearLookAngleConstraints() noexcept {
  lookAngleConstraints_Accessor.reset();
  return *this;
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getElevationAngleConstraints_() const {
  if (elevationAngleConstraints_Accessor) {
    return *elevationAngleConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getElevationAngleConstraints(): An attempt was made to get an optional field that was not enabled, call hasElevationAngleConstraints() to determine if it is safe to call getElevationAngleConstraints()");
}

const uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getElevationAngleConstraints() const {
  return getElevationAngleConstraints_();
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getElevationAngleConstraints() {
  return getElevationAngleConstraints_();
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::setElevationAngleConstraints(const uci::type::PO_AngleConstraintControlsStatusType& accessor) {
  enableElevationAngleConstraints();
  if (&accessor != elevationAngleConstraints_Accessor.get()) {
    elevationAngleConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsStatusType::hasElevationAngleConstraints() const noexcept {
  return static_cast<bool>(elevationAngleConstraints_Accessor);
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::enableElevationAngleConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsStatusType : type};
  if ((!elevationAngleConstraints_Accessor) || (elevationAngleConstraints_Accessor->getAccessorType() != requestedType)) {
    elevationAngleConstraints_Accessor = PO_AngleConstraintControlsStatusType::create(requestedType);
    if (!elevationAngleConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableElevationAngleConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *elevationAngleConstraints_Accessor;
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::clearElevationAngleConstraints() noexcept {
  elevationAngleConstraints_Accessor.reset();
  return *this;
}

uci::type::PO_SlantRangeConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getSlantRangeConstraints_() const {
  if (slantRangeConstraints_Accessor) {
    return *slantRangeConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getSlantRangeConstraints(): An attempt was made to get an optional field that was not enabled, call hasSlantRangeConstraints() to determine if it is safe to call getSlantRangeConstraints()");
}

const uci::type::PO_SlantRangeConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getSlantRangeConstraints() const {
  return getSlantRangeConstraints_();
}

uci::type::PO_SlantRangeConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getSlantRangeConstraints() {
  return getSlantRangeConstraints_();
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::setSlantRangeConstraints(const uci::type::PO_SlantRangeConstraintControlsStatusType& accessor) {
  enableSlantRangeConstraints();
  if (&accessor != slantRangeConstraints_Accessor.get()) {
    slantRangeConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsStatusType::hasSlantRangeConstraints() const noexcept {
  return static_cast<bool>(slantRangeConstraints_Accessor);
}

uci::type::PO_SlantRangeConstraintControlsStatusType& PO_CollectionConstraintsStatusType::enableSlantRangeConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_SlantRangeConstraintControlsStatusType : type};
  if ((!slantRangeConstraints_Accessor) || (slantRangeConstraints_Accessor->getAccessorType() != requestedType)) {
    slantRangeConstraints_Accessor = PO_SlantRangeConstraintControlsStatusType::create(requestedType);
    if (!slantRangeConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableSlantRangeConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *slantRangeConstraints_Accessor;
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::clearSlantRangeConstraints() noexcept {
  slantRangeConstraints_Accessor.reset();
  return *this;
}

uci::type::PO_ColorPatternConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getCollectionPattern_() const {
  if (collectionPattern_Accessor) {
    return *collectionPattern_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionPattern(): An attempt was made to get an optional field that was not enabled, call hasCollectionPattern() to determine if it is safe to call getCollectionPattern()");
}

const uci::type::PO_ColorPatternConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getCollectionPattern() const {
  return getCollectionPattern_();
}

uci::type::PO_ColorPatternConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getCollectionPattern() {
  return getCollectionPattern_();
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::setCollectionPattern(const uci::type::PO_ColorPatternConstraintControlsStatusType& accessor) {
  enableCollectionPattern();
  if (&accessor != collectionPattern_Accessor.get()) {
    collectionPattern_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsStatusType::hasCollectionPattern() const noexcept {
  return static_cast<bool>(collectionPattern_Accessor);
}

uci::type::PO_ColorPatternConstraintControlsStatusType& PO_CollectionConstraintsStatusType::enableCollectionPattern(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ColorPatternConstraintControlsStatusType : type};
  if ((!collectionPattern_Accessor) || (collectionPattern_Accessor->getAccessorType() != requestedType)) {
    collectionPattern_Accessor = PO_ColorPatternConstraintControlsStatusType::create(requestedType);
    if (!collectionPattern_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionPattern(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionPattern_Accessor;
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::clearCollectionPattern() noexcept {
  collectionPattern_Accessor.reset();
  return *this;
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getSunElevAngles_() const {
  if (sunElevAngles_Accessor) {
    return *sunElevAngles_Accessor;
  }
  throw uci::base::UCIException("Error in getSunElevAngles(): An attempt was made to get an optional field that was not enabled, call hasSunElevAngles() to determine if it is safe to call getSunElevAngles()");
}

const uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getSunElevAngles() const {
  return getSunElevAngles_();
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getSunElevAngles() {
  return getSunElevAngles_();
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::setSunElevAngles(const uci::type::PO_AngleConstraintControlsStatusType& accessor) {
  enableSunElevAngles();
  if (&accessor != sunElevAngles_Accessor.get()) {
    sunElevAngles_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsStatusType::hasSunElevAngles() const noexcept {
  return static_cast<bool>(sunElevAngles_Accessor);
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::enableSunElevAngles(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsStatusType : type};
  if ((!sunElevAngles_Accessor) || (sunElevAngles_Accessor->getAccessorType() != requestedType)) {
    sunElevAngles_Accessor = PO_AngleConstraintControlsStatusType::create(requestedType);
    if (!sunElevAngles_Accessor) {
      throw uci::base::UCIException("Error in enableSunElevAngles(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sunElevAngles_Accessor;
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::clearSunElevAngles() noexcept {
  sunElevAngles_Accessor.reset();
  return *this;
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getSunAzimuthAngles_() const {
  if (sunAzimuthAngles_Accessor) {
    return *sunAzimuthAngles_Accessor;
  }
  throw uci::base::UCIException("Error in getSunAzimuthAngles(): An attempt was made to get an optional field that was not enabled, call hasSunAzimuthAngles() to determine if it is safe to call getSunAzimuthAngles()");
}

const uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getSunAzimuthAngles() const {
  return getSunAzimuthAngles_();
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getSunAzimuthAngles() {
  return getSunAzimuthAngles_();
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::setSunAzimuthAngles(const uci::type::PO_AngleConstraintControlsStatusType& accessor) {
  enableSunAzimuthAngles();
  if (&accessor != sunAzimuthAngles_Accessor.get()) {
    sunAzimuthAngles_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsStatusType::hasSunAzimuthAngles() const noexcept {
  return static_cast<bool>(sunAzimuthAngles_Accessor);
}

uci::type::PO_AngleConstraintControlsStatusType& PO_CollectionConstraintsStatusType::enableSunAzimuthAngles(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsStatusType : type};
  if ((!sunAzimuthAngles_Accessor) || (sunAzimuthAngles_Accessor->getAccessorType() != requestedType)) {
    sunAzimuthAngles_Accessor = PO_AngleConstraintControlsStatusType::create(requestedType);
    if (!sunAzimuthAngles_Accessor) {
      throw uci::base::UCIException("Error in enableSunAzimuthAngles(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sunAzimuthAngles_Accessor;
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::clearSunAzimuthAngles() noexcept {
  sunAzimuthAngles_Accessor.reset();
  return *this;
}

uci::type::PO_SweepSpeedConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getSweepSpeed_() const {
  if (sweepSpeed_Accessor) {
    return *sweepSpeed_Accessor;
  }
  throw uci::base::UCIException("Error in getSweepSpeed(): An attempt was made to get an optional field that was not enabled, call hasSweepSpeed() to determine if it is safe to call getSweepSpeed()");
}

const uci::type::PO_SweepSpeedConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getSweepSpeed() const {
  return getSweepSpeed_();
}

uci::type::PO_SweepSpeedConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getSweepSpeed() {
  return getSweepSpeed_();
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::setSweepSpeed(const uci::type::PO_SweepSpeedConstraintControlsStatusType& accessor) {
  enableSweepSpeed();
  if (&accessor != sweepSpeed_Accessor.get()) {
    sweepSpeed_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsStatusType::hasSweepSpeed() const noexcept {
  return static_cast<bool>(sweepSpeed_Accessor);
}

uci::type::PO_SweepSpeedConstraintControlsStatusType& PO_CollectionConstraintsStatusType::enableSweepSpeed(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_SweepSpeedConstraintControlsStatusType : type};
  if ((!sweepSpeed_Accessor) || (sweepSpeed_Accessor->getAccessorType() != requestedType)) {
    sweepSpeed_Accessor = PO_SweepSpeedConstraintControlsStatusType::create(requestedType);
    if (!sweepSpeed_Accessor) {
      throw uci::base::UCIException("Error in enableSweepSpeed(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sweepSpeed_Accessor;
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::clearSweepSpeed() noexcept {
  sweepSpeed_Accessor.reset();
  return *this;
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getGimbalOrientation_() const {
  if (gimbalOrientation_Accessor) {
    return *gimbalOrientation_Accessor;
  }
  throw uci::base::UCIException("Error in getGimbalOrientation(): An attempt was made to get an optional field that was not enabled, call hasGimbalOrientation() to determine if it is safe to call getGimbalOrientation()");
}

const uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getGimbalOrientation() const {
  return getGimbalOrientation_();
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_CollectionConstraintsStatusType::getGimbalOrientation() {
  return getGimbalOrientation_();
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::setGimbalOrientation(const uci::type::PO_GimbalOrientationConstraintControlsStatusType& accessor) {
  enableGimbalOrientation();
  if (&accessor != gimbalOrientation_Accessor.get()) {
    gimbalOrientation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsStatusType::hasGimbalOrientation() const noexcept {
  return static_cast<bool>(gimbalOrientation_Accessor);
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_CollectionConstraintsStatusType::enableGimbalOrientation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_GimbalOrientationConstraintControlsStatusType : type};
  if ((!gimbalOrientation_Accessor) || (gimbalOrientation_Accessor->getAccessorType() != requestedType)) {
    gimbalOrientation_Accessor = PO_GimbalOrientationConstraintControlsStatusType::create(requestedType);
    if (!gimbalOrientation_Accessor) {
      throw uci::base::UCIException("Error in enableGimbalOrientation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *gimbalOrientation_Accessor;
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::clearGimbalOrientation() noexcept {
  gimbalOrientation_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_CollectionConstraintsStatusType> PO_CollectionConstraintsStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_CollectionConstraintsStatusType : type};
  return (requestedType == uci::type::accessorType::pO_CollectionConstraintsStatusType) ? boost::make_unique<PO_CollectionConstraintsStatusType>() : nullptr;
}

/**  */
namespace PO_CollectionConstraintsStatusType_Names {

constexpr const char* Extern_Type_Name{"PO_CollectionConstraintsStatusType"};
constexpr const char* MapAngleConstraints_Name{"MapAngleConstraints"};
constexpr const char* GrazingAngleConstraints_Name{"GrazingAngleConstraints"};
constexpr const char* LookAngleConstraints_Name{"LookAngleConstraints"};
constexpr const char* ElevationAngleConstraints_Name{"ElevationAngleConstraints"};
constexpr const char* SlantRangeConstraints_Name{"SlantRangeConstraints"};
constexpr const char* CollectionPattern_Name{"CollectionPattern"};
constexpr const char* SunElevAngles_Name{"SunElevAngles"};
constexpr const char* SunAzimuthAngles_Name{"SunAzimuthAngles"};
constexpr const char* SweepSpeed_Name{"SweepSpeed"};
constexpr const char* GimbalOrientation_Name{"GimbalOrientation"};

} // namespace PO_CollectionConstraintsStatusType_Names

void PO_CollectionConstraintsStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_CollectionConstraintsStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_CollectionConstraintsStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsStatusType_Names::MapAngleConstraints_Name) {
      PO_AngleConstraintControlsStatusType::deserialize(valueType.second, accessor.enableMapAngleConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsStatusType_Names::GrazingAngleConstraints_Name) {
      PO_AngleConstraintControlsStatusType::deserialize(valueType.second, accessor.enableGrazingAngleConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsStatusType_Names::LookAngleConstraints_Name) {
      PO_AngleConstraintControlsStatusType::deserialize(valueType.second, accessor.enableLookAngleConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsStatusType_Names::ElevationAngleConstraints_Name) {
      PO_AngleConstraintControlsStatusType::deserialize(valueType.second, accessor.enableElevationAngleConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsStatusType_Names::SlantRangeConstraints_Name) {
      PO_SlantRangeConstraintControlsStatusType::deserialize(valueType.second, accessor.enableSlantRangeConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsStatusType_Names::CollectionPattern_Name) {
      PO_ColorPatternConstraintControlsStatusType::deserialize(valueType.second, accessor.enableCollectionPattern(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsStatusType_Names::SunElevAngles_Name) {
      PO_AngleConstraintControlsStatusType::deserialize(valueType.second, accessor.enableSunElevAngles(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsStatusType_Names::SunAzimuthAngles_Name) {
      PO_AngleConstraintControlsStatusType::deserialize(valueType.second, accessor.enableSunAzimuthAngles(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsStatusType_Names::SweepSpeed_Name) {
      PO_SweepSpeedConstraintControlsStatusType::deserialize(valueType.second, accessor.enableSweepSpeed(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsStatusType_Names::GimbalOrientation_Name) {
      PO_GimbalOrientationConstraintControlsStatusType::deserialize(valueType.second, accessor.enableGimbalOrientation(), nodeName, nsPrefix);
    }
  }
}

std::string PO_CollectionConstraintsStatusType::serialize(const uci::type::PO_CollectionConstraintsStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_CollectionConstraintsStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_CollectionConstraintsStatusType_Names::Extern_Type_Name);
  }
  if (accessor.hasMapAngleConstraints()) {
    PO_AngleConstraintControlsStatusType::serialize(accessor.getMapAngleConstraints(), node, PO_CollectionConstraintsStatusType_Names::MapAngleConstraints_Name);
  }
  if (accessor.hasGrazingAngleConstraints()) {
    PO_AngleConstraintControlsStatusType::serialize(accessor.getGrazingAngleConstraints(), node, PO_CollectionConstraintsStatusType_Names::GrazingAngleConstraints_Name);
  }
  if (accessor.hasLookAngleConstraints()) {
    PO_AngleConstraintControlsStatusType::serialize(accessor.getLookAngleConstraints(), node, PO_CollectionConstraintsStatusType_Names::LookAngleConstraints_Name);
  }
  if (accessor.hasElevationAngleConstraints()) {
    PO_AngleConstraintControlsStatusType::serialize(accessor.getElevationAngleConstraints(), node, PO_CollectionConstraintsStatusType_Names::ElevationAngleConstraints_Name);
  }
  if (accessor.hasSlantRangeConstraints()) {
    PO_SlantRangeConstraintControlsStatusType::serialize(accessor.getSlantRangeConstraints(), node, PO_CollectionConstraintsStatusType_Names::SlantRangeConstraints_Name);
  }
  if (accessor.hasCollectionPattern()) {
    PO_ColorPatternConstraintControlsStatusType::serialize(accessor.getCollectionPattern(), node, PO_CollectionConstraintsStatusType_Names::CollectionPattern_Name);
  }
  if (accessor.hasSunElevAngles()) {
    PO_AngleConstraintControlsStatusType::serialize(accessor.getSunElevAngles(), node, PO_CollectionConstraintsStatusType_Names::SunElevAngles_Name);
  }
  if (accessor.hasSunAzimuthAngles()) {
    PO_AngleConstraintControlsStatusType::serialize(accessor.getSunAzimuthAngles(), node, PO_CollectionConstraintsStatusType_Names::SunAzimuthAngles_Name);
  }
  if (accessor.hasSweepSpeed()) {
    PO_SweepSpeedConstraintControlsStatusType::serialize(accessor.getSweepSpeed(), node, PO_CollectionConstraintsStatusType_Names::SweepSpeed_Name);
  }
  if (accessor.hasGimbalOrientation()) {
    PO_GimbalOrientationConstraintControlsStatusType::serialize(accessor.getGimbalOrientation(), node, PO_CollectionConstraintsStatusType_Names::GimbalOrientation_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_CollectionConstraintsStatusType>().release());
}

uci::type::PO_CollectionConstraintsStatusType& PO_CollectionConstraintsStatusType::create(const uci::type::PO_CollectionConstraintsStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_CollectionConstraintsStatusType> newAccessor{boost::make_unique<asb_uci::type::PO_CollectionConstraintsStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_CollectionConstraintsStatusType::destroy(uci::type::PO_CollectionConstraintsStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_CollectionConstraintsStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

