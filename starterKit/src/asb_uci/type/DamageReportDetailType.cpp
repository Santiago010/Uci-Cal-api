/** @file DamageReportDetailType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DamageReportDetailType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BehavioralChangeEnum.h"
#include "../../../include/asb_uci/type/DamageAssessmentDetailType.h"
#include "../../../include/asb_uci/type/DamageCategoryEnum.h"
#include "../../../include/asb_uci/type/DamageWeaponEmploymentType.h"
#include "../../../include/asb_uci/type/ImpactDetailsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BehavioralChangeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageCategoryEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageReportDetailType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageWeaponEmploymentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ImpactDetailsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DamageReportDetailType::DamageReportDetailType() = default;

DamageReportDetailType::~DamageReportDetailType() = default;

void DamageReportDetailType::copy(const uci::type::DamageReportDetailType& accessor) {
  copyImpl(accessor, false);
}

void DamageReportDetailType::copyImpl(const uci::type::DamageReportDetailType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DamageAssessmentDetailType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const DamageReportDetailType&>(accessor);
    if (accessorImpl.damageType_Accessor) {
      setDamageType(*(accessorImpl.damageType_Accessor));
    } else {
      damageType_Accessor.reset();
    }
    if (accessorImpl.behavioralChange_Accessor) {
      setBehavioralChange(*(accessorImpl.behavioralChange_Accessor));
    } else {
      behavioralChange_Accessor.reset();
    }
    if (accessorImpl.weaponEmployment_Accessor) {
      setWeaponEmployment(*(accessorImpl.weaponEmployment_Accessor));
    } else {
      weaponEmployment_Accessor.reset();
    }
    if (accessorImpl.impactDetails_Accessor) {
      setImpactDetails(*(accessorImpl.impactDetails_Accessor));
    } else {
      impactDetails_Accessor.reset();
    }
  }
}

void DamageReportDetailType::reset() noexcept {
  DamageAssessmentDetailType::reset();
  damageType_Accessor.reset();
  behavioralChange_Accessor.reset();
  weaponEmployment_Accessor.reset();
  impactDetails_Accessor.reset();
}

uci::type::DamageCategoryEnum& DamageReportDetailType::getDamageType_() const {
  if (damageType_Accessor) {
    return *damageType_Accessor;
  }
  throw uci::base::UCIException("Error in getDamageType(): An attempt was made to get an optional field that was not enabled, call hasDamageType() to determine if it is safe to call getDamageType()");
}

const uci::type::DamageCategoryEnum& DamageReportDetailType::getDamageType() const {
  return getDamageType_();
}

uci::type::DamageCategoryEnum& DamageReportDetailType::getDamageType() {
  return getDamageType_();
}

uci::type::DamageReportDetailType& DamageReportDetailType::setDamageType(const uci::type::DamageCategoryEnum& accessor) {
  enableDamageType();
  if (&accessor != damageType_Accessor.get()) {
    damageType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DamageReportDetailType& DamageReportDetailType::setDamageType(const uci::type::DamageCategoryEnum::EnumerationItem value) {
  enableDamageType().setValue(value);
  return *this;
}

bool DamageReportDetailType::hasDamageType() const noexcept {
  return static_cast<bool>(damageType_Accessor);
}

uci::type::DamageCategoryEnum& DamageReportDetailType::enableDamageType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageCategoryEnum : type};
  if ((!damageType_Accessor) || (damageType_Accessor->getAccessorType() != requestedType)) {
    damageType_Accessor = DamageCategoryEnum::create(requestedType);
    if (!damageType_Accessor) {
      throw uci::base::UCIException("Error in enableDamageType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *damageType_Accessor;
}

uci::type::DamageReportDetailType& DamageReportDetailType::clearDamageType() noexcept {
  damageType_Accessor.reset();
  return *this;
}

uci::type::BehavioralChangeEnum& DamageReportDetailType::getBehavioralChange_() const {
  if (behavioralChange_Accessor) {
    return *behavioralChange_Accessor;
  }
  throw uci::base::UCIException("Error in getBehavioralChange(): An attempt was made to get an optional field that was not enabled, call hasBehavioralChange() to determine if it is safe to call getBehavioralChange()");
}

const uci::type::BehavioralChangeEnum& DamageReportDetailType::getBehavioralChange() const {
  return getBehavioralChange_();
}

uci::type::BehavioralChangeEnum& DamageReportDetailType::getBehavioralChange() {
  return getBehavioralChange_();
}

uci::type::DamageReportDetailType& DamageReportDetailType::setBehavioralChange(const uci::type::BehavioralChangeEnum& accessor) {
  enableBehavioralChange();
  if (&accessor != behavioralChange_Accessor.get()) {
    behavioralChange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DamageReportDetailType& DamageReportDetailType::setBehavioralChange(const uci::type::BehavioralChangeEnum::EnumerationItem value) {
  enableBehavioralChange().setValue(value);
  return *this;
}

bool DamageReportDetailType::hasBehavioralChange() const noexcept {
  return static_cast<bool>(behavioralChange_Accessor);
}

uci::type::BehavioralChangeEnum& DamageReportDetailType::enableBehavioralChange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::behavioralChangeEnum : type};
  if ((!behavioralChange_Accessor) || (behavioralChange_Accessor->getAccessorType() != requestedType)) {
    behavioralChange_Accessor = BehavioralChangeEnum::create(requestedType);
    if (!behavioralChange_Accessor) {
      throw uci::base::UCIException("Error in enableBehavioralChange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *behavioralChange_Accessor;
}

uci::type::DamageReportDetailType& DamageReportDetailType::clearBehavioralChange() noexcept {
  behavioralChange_Accessor.reset();
  return *this;
}

uci::type::DamageWeaponEmploymentType& DamageReportDetailType::getWeaponEmployment_() const {
  if (weaponEmployment_Accessor) {
    return *weaponEmployment_Accessor;
  }
  throw uci::base::UCIException("Error in getWeaponEmployment(): An attempt was made to get an optional field that was not enabled, call hasWeaponEmployment() to determine if it is safe to call getWeaponEmployment()");
}

const uci::type::DamageWeaponEmploymentType& DamageReportDetailType::getWeaponEmployment() const {
  return getWeaponEmployment_();
}

uci::type::DamageWeaponEmploymentType& DamageReportDetailType::getWeaponEmployment() {
  return getWeaponEmployment_();
}

uci::type::DamageReportDetailType& DamageReportDetailType::setWeaponEmployment(const uci::type::DamageWeaponEmploymentType& accessor) {
  enableWeaponEmployment();
  if (&accessor != weaponEmployment_Accessor.get()) {
    weaponEmployment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageReportDetailType::hasWeaponEmployment() const noexcept {
  return static_cast<bool>(weaponEmployment_Accessor);
}

uci::type::DamageWeaponEmploymentType& DamageReportDetailType::enableWeaponEmployment(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageWeaponEmploymentType : type};
  if ((!weaponEmployment_Accessor) || (weaponEmployment_Accessor->getAccessorType() != requestedType)) {
    weaponEmployment_Accessor = DamageWeaponEmploymentType::create(requestedType);
    if (!weaponEmployment_Accessor) {
      throw uci::base::UCIException("Error in enableWeaponEmployment(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weaponEmployment_Accessor;
}

uci::type::DamageReportDetailType& DamageReportDetailType::clearWeaponEmployment() noexcept {
  weaponEmployment_Accessor.reset();
  return *this;
}

uci::type::ImpactDetailsType& DamageReportDetailType::getImpactDetails_() const {
  if (impactDetails_Accessor) {
    return *impactDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getImpactDetails(): An attempt was made to get an optional field that was not enabled, call hasImpactDetails() to determine if it is safe to call getImpactDetails()");
}

const uci::type::ImpactDetailsType& DamageReportDetailType::getImpactDetails() const {
  return getImpactDetails_();
}

uci::type::ImpactDetailsType& DamageReportDetailType::getImpactDetails() {
  return getImpactDetails_();
}

uci::type::DamageReportDetailType& DamageReportDetailType::setImpactDetails(const uci::type::ImpactDetailsType& accessor) {
  enableImpactDetails();
  if (&accessor != impactDetails_Accessor.get()) {
    impactDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageReportDetailType::hasImpactDetails() const noexcept {
  return static_cast<bool>(impactDetails_Accessor);
}

uci::type::ImpactDetailsType& DamageReportDetailType::enableImpactDetails(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::impactDetailsType : type};
  if ((!impactDetails_Accessor) || (impactDetails_Accessor->getAccessorType() != requestedType)) {
    impactDetails_Accessor = ImpactDetailsType::create(requestedType);
    if (!impactDetails_Accessor) {
      throw uci::base::UCIException("Error in enableImpactDetails(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *impactDetails_Accessor;
}

uci::type::DamageReportDetailType& DamageReportDetailType::clearImpactDetails() noexcept {
  impactDetails_Accessor.reset();
  return *this;
}

std::unique_ptr<DamageReportDetailType> DamageReportDetailType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageReportDetailType : type};
  return (requestedType == uci::type::accessorType::damageReportDetailType) ? boost::make_unique<DamageReportDetailType>() : nullptr;
}

/**  */
namespace DamageReportDetailType_Names {

constexpr const char* Extern_Type_Name{"DamageReportDetailType"};
constexpr const char* DamageType_Name{"DamageType"};
constexpr const char* BehavioralChange_Name{"BehavioralChange"};
constexpr const char* WeaponEmployment_Name{"WeaponEmployment"};
constexpr const char* ImpactDetails_Name{"ImpactDetails"};

} // namespace DamageReportDetailType_Names

void DamageReportDetailType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageReportDetailType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamageReportDetailType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamageReportDetailType_Names::DamageType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableDamageType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DamageReportDetailType_Names::BehavioralChange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableBehavioralChange().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DamageReportDetailType_Names::WeaponEmployment_Name) {
      DamageWeaponEmploymentType::deserialize(valueType.second, accessor.enableWeaponEmployment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageReportDetailType_Names::ImpactDetails_Name) {
      ImpactDetailsType::deserialize(valueType.second, accessor.enableImpactDetails(), nodeName, nsPrefix);
    }
  }
  DamageAssessmentDetailType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string DamageReportDetailType::serialize(const uci::type::DamageReportDetailType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DamageReportDetailType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DamageReportDetailType_Names::Extern_Type_Name);
  }
  DamageAssessmentDetailType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasDamageType()) {
    DamageCategoryEnum::serialize(accessor.getDamageType(), node, DamageReportDetailType_Names::DamageType_Name, false);
  }
  if (accessor.hasBehavioralChange()) {
    BehavioralChangeEnum::serialize(accessor.getBehavioralChange(), node, DamageReportDetailType_Names::BehavioralChange_Name, false);
  }
  if (accessor.hasWeaponEmployment()) {
    DamageWeaponEmploymentType::serialize(accessor.getWeaponEmployment(), node, DamageReportDetailType_Names::WeaponEmployment_Name);
  }
  if (accessor.hasImpactDetails()) {
    ImpactDetailsType::serialize(accessor.getImpactDetails(), node, DamageReportDetailType_Names::ImpactDetails_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DamageReportDetailType& DamageReportDetailType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DamageReportDetailType>().release());
}

uci::type::DamageReportDetailType& DamageReportDetailType::create(const uci::type::DamageReportDetailType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DamageReportDetailType> newAccessor{boost::make_unique<asb_uci::type::DamageReportDetailType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DamageReportDetailType::destroy(uci::type::DamageReportDetailType& accessor) {
  delete dynamic_cast<asb_uci::type::DamageReportDetailType*>(&accessor);
}

} // namespace type

} // namespace uci

