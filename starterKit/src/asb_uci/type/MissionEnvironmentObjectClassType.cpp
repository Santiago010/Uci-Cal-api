/** @file MissionEnvironmentObjectClassType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MissionEnvironmentObjectClassType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/MissionEnvironmentObjectValueActionType.h"
#include "asb_uci/type/MissionEnvironmentObjectValueEffectType.h"
#include "asb_uci/type/MissionEnvironmentObjectValueEntityType.h"
#include "asb_uci/type/MissionEnvironmentObjectValueOpLineType.h"
#include "asb_uci/type/MissionEnvironmentObjectValueOpPointType.h"
#include "asb_uci/type/MissionEnvironmentObjectValueOpVolumeType.h"
#include "asb_uci/type/MissionEnvironmentObjectValueOpZoneType.h"
#include "asb_uci/type/MissionEnvironmentObjectValueResponseType.h"
#include "asb_uci/type/MissionEnvironmentObjectValueSystemType.h"
#include "asb_uci/type/MissionEnvironmentObjectValueTaskType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/MissionEnvironmentObjectClassType.h"
#include "uci/type/MissionEnvironmentObjectValueActionType.h"
#include "uci/type/MissionEnvironmentObjectValueEffectType.h"
#include "uci/type/MissionEnvironmentObjectValueEntityType.h"
#include "uci/type/MissionEnvironmentObjectValueOpLineType.h"
#include "uci/type/MissionEnvironmentObjectValueOpPointType.h"
#include "uci/type/MissionEnvironmentObjectValueOpVolumeType.h"
#include "uci/type/MissionEnvironmentObjectValueOpZoneType.h"
#include "uci/type/MissionEnvironmentObjectValueResponseType.h"
#include "uci/type/MissionEnvironmentObjectValueSystemType.h"
#include "uci/type/MissionEnvironmentObjectValueTaskType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MissionEnvironmentObjectClassType::MissionEnvironmentObjectClassType() = default;

MissionEnvironmentObjectClassType::~MissionEnvironmentObjectClassType() = default;

void MissionEnvironmentObjectClassType::copy(const uci::type::MissionEnvironmentObjectClassType& accessor) {
  copyImpl(accessor, false);
}

void MissionEnvironmentObjectClassType::copyImpl(const uci::type::MissionEnvironmentObjectClassType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MissionEnvironmentObjectClassType&>(accessor);
    if (accessorImpl.entity_Accessor) {
      setEntity(*(accessorImpl.entity_Accessor));
    } else {
      entity_Accessor.reset();
    }
    if (accessorImpl.system_Accessor) {
      setSystem(*(accessorImpl.system_Accessor));
    } else {
      system_Accessor.reset();
    }
    if (accessorImpl.opPoint_Accessor) {
      setOpPoint(*(accessorImpl.opPoint_Accessor));
    } else {
      opPoint_Accessor.reset();
    }
    if (accessorImpl.opLine_Accessor) {
      setOpLine(*(accessorImpl.opLine_Accessor));
    } else {
      opLine_Accessor.reset();
    }
    if (accessorImpl.opZone_Accessor) {
      setOpZone(*(accessorImpl.opZone_Accessor));
    } else {
      opZone_Accessor.reset();
    }
    if (accessorImpl.opVolume_Accessor) {
      setOpVolume(*(accessorImpl.opVolume_Accessor));
    } else {
      opVolume_Accessor.reset();
    }
    if (accessorImpl.task_Accessor) {
      setTask(*(accessorImpl.task_Accessor));
    } else {
      task_Accessor.reset();
    }
    if (accessorImpl.effect_Accessor) {
      setEffect(*(accessorImpl.effect_Accessor));
    } else {
      effect_Accessor.reset();
    }
    if (accessorImpl.action_Accessor) {
      setAction(*(accessorImpl.action_Accessor));
    } else {
      action_Accessor.reset();
    }
    if (accessorImpl.response_Accessor) {
      setResponse(*(accessorImpl.response_Accessor));
    } else {
      response_Accessor.reset();
    }
  }
}

void MissionEnvironmentObjectClassType::reset() noexcept {
  entity_Accessor.reset();
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
  task_Accessor.reset();
  effect_Accessor.reset();
  action_Accessor.reset();
  response_Accessor.reset();
}

uci::type::MissionEnvironmentObjectClassType::MissionEnvironmentObjectClassTypeChoice MissionEnvironmentObjectClassType::getMissionEnvironmentObjectClassTypeChoiceOrdinal() const noexcept {
  if (entity_Accessor) {
    return MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_ENTITY;
  }
  if (system_Accessor) {
    return MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_SYSTEM;
  }
  if (opPoint_Accessor) {
    return MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_OPPOINT;
  }
  if (opLine_Accessor) {
    return MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_OPLINE;
  }
  if (opZone_Accessor) {
    return MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_OPZONE;
  }
  if (opVolume_Accessor) {
    return MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_OPVOLUME;
  }
  if (task_Accessor) {
    return MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_TASK;
  }
  if (effect_Accessor) {
    return MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_EFFECT;
  }
  if (action_Accessor) {
    return MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_ACTION;
  }
  if (response_Accessor) {
    return MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_RESPONSE;
  }
  return MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_NONE;
}

uci::type::MissionEnvironmentObjectClassType& MissionEnvironmentObjectClassType::setMissionEnvironmentObjectClassTypeChoiceOrdinal(uci::type::MissionEnvironmentObjectClassType::MissionEnvironmentObjectClassTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_ENTITY:
      chooseEntity("setMissionEnvironmentObjectClassTypeChoiceOrdinal", type);
      break;
    case MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_SYSTEM:
      chooseSystem("setMissionEnvironmentObjectClassTypeChoiceOrdinal", type);
      break;
    case MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_OPPOINT:
      chooseOpPoint("setMissionEnvironmentObjectClassTypeChoiceOrdinal", type);
      break;
    case MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_OPLINE:
      chooseOpLine("setMissionEnvironmentObjectClassTypeChoiceOrdinal", type);
      break;
    case MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_OPZONE:
      chooseOpZone("setMissionEnvironmentObjectClassTypeChoiceOrdinal", type);
      break;
    case MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_OPVOLUME:
      chooseOpVolume("setMissionEnvironmentObjectClassTypeChoiceOrdinal", type);
      break;
    case MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_TASK:
      chooseTask("setMissionEnvironmentObjectClassTypeChoiceOrdinal", type);
      break;
    case MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_EFFECT:
      chooseEffect("setMissionEnvironmentObjectClassTypeChoiceOrdinal", type);
      break;
    case MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_ACTION:
      chooseAction("setMissionEnvironmentObjectClassTypeChoiceOrdinal", type);
      break;
    case MISSIONENVIRONMENTOBJECTCLASSTYPE_CHOICE_RESPONSE:
      chooseResponse("setMissionEnvironmentObjectClassTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setMissionEnvironmentObjectClassTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::MissionEnvironmentObjectValueEntityType& MissionEnvironmentObjectClassType::getEntity_() const {
  if (entity_Accessor) {
    return *entity_Accessor;
  }
  throw uci::base::UCIException("Error in getEntity(): Unable to get Entity, field not selected");
}

const uci::type::MissionEnvironmentObjectValueEntityType& MissionEnvironmentObjectClassType::getEntity() const {
  return getEntity_();
}

uci::type::MissionEnvironmentObjectValueEntityType& MissionEnvironmentObjectClassType::getEntity() {
  return getEntity_();
}

uci::type::MissionEnvironmentObjectClassType& MissionEnvironmentObjectClassType::setEntity(const uci::type::MissionEnvironmentObjectValueEntityType& accessor) {
  chooseEntity();
  if (&accessor != entity_Accessor.get()) {
    entity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionEnvironmentObjectClassType::isEntity() const noexcept {
  return static_cast<bool>(entity_Accessor);
}

uci::type::MissionEnvironmentObjectValueEntityType& MissionEnvironmentObjectClassType::chooseEntity(const std::string& method, uci::base::accessorType::AccessorType type) {
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
  task_Accessor.reset();
  effect_Accessor.reset();
  action_Accessor.reset();
  response_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionEnvironmentObjectValueEntityType : type};
  if ((!entity_Accessor) || (entity_Accessor->getAccessorType() != requestedType)) {
    entity_Accessor = MissionEnvironmentObjectValueEntityType::create(type);
    if (!entity_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entity_Accessor;
}

uci::type::MissionEnvironmentObjectValueEntityType& MissionEnvironmentObjectClassType::chooseEntity(uci::base::accessorType::AccessorType type) {
  return chooseEntity("chooseEntity", type);
}

uci::type::MissionEnvironmentObjectValueSystemType& MissionEnvironmentObjectClassType::getSystem_() const {
  if (system_Accessor) {
    return *system_Accessor;
  }
  throw uci::base::UCIException("Error in getSystem(): Unable to get System, field not selected");
}

const uci::type::MissionEnvironmentObjectValueSystemType& MissionEnvironmentObjectClassType::getSystem() const {
  return getSystem_();
}

uci::type::MissionEnvironmentObjectValueSystemType& MissionEnvironmentObjectClassType::getSystem() {
  return getSystem_();
}

uci::type::MissionEnvironmentObjectClassType& MissionEnvironmentObjectClassType::setSystem(const uci::type::MissionEnvironmentObjectValueSystemType& accessor) {
  chooseSystem();
  if (&accessor != system_Accessor.get()) {
    system_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionEnvironmentObjectClassType::isSystem() const noexcept {
  return static_cast<bool>(system_Accessor);
}

uci::type::MissionEnvironmentObjectValueSystemType& MissionEnvironmentObjectClassType::chooseSystem(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
  task_Accessor.reset();
  effect_Accessor.reset();
  action_Accessor.reset();
  response_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionEnvironmentObjectValueSystemType : type};
  if ((!system_Accessor) || (system_Accessor->getAccessorType() != requestedType)) {
    system_Accessor = MissionEnvironmentObjectValueSystemType::create(type);
    if (!system_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *system_Accessor;
}

uci::type::MissionEnvironmentObjectValueSystemType& MissionEnvironmentObjectClassType::chooseSystem(uci::base::accessorType::AccessorType type) {
  return chooseSystem("chooseSystem", type);
}

uci::type::MissionEnvironmentObjectValueOpPointType& MissionEnvironmentObjectClassType::getOpPoint_() const {
  if (opPoint_Accessor) {
    return *opPoint_Accessor;
  }
  throw uci::base::UCIException("Error in getOpPoint(): Unable to get OpPoint, field not selected");
}

const uci::type::MissionEnvironmentObjectValueOpPointType& MissionEnvironmentObjectClassType::getOpPoint() const {
  return getOpPoint_();
}

uci::type::MissionEnvironmentObjectValueOpPointType& MissionEnvironmentObjectClassType::getOpPoint() {
  return getOpPoint_();
}

uci::type::MissionEnvironmentObjectClassType& MissionEnvironmentObjectClassType::setOpPoint(const uci::type::MissionEnvironmentObjectValueOpPointType& accessor) {
  chooseOpPoint();
  if (&accessor != opPoint_Accessor.get()) {
    opPoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionEnvironmentObjectClassType::isOpPoint() const noexcept {
  return static_cast<bool>(opPoint_Accessor);
}

uci::type::MissionEnvironmentObjectValueOpPointType& MissionEnvironmentObjectClassType::chooseOpPoint(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
  task_Accessor.reset();
  effect_Accessor.reset();
  action_Accessor.reset();
  response_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionEnvironmentObjectValueOpPointType : type};
  if ((!opPoint_Accessor) || (opPoint_Accessor->getAccessorType() != requestedType)) {
    opPoint_Accessor = MissionEnvironmentObjectValueOpPointType::create(type);
    if (!opPoint_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opPoint_Accessor;
}

uci::type::MissionEnvironmentObjectValueOpPointType& MissionEnvironmentObjectClassType::chooseOpPoint(uci::base::accessorType::AccessorType type) {
  return chooseOpPoint("chooseOpPoint", type);
}

uci::type::MissionEnvironmentObjectValueOpLineType& MissionEnvironmentObjectClassType::getOpLine_() const {
  if (opLine_Accessor) {
    return *opLine_Accessor;
  }
  throw uci::base::UCIException("Error in getOpLine(): Unable to get OpLine, field not selected");
}

const uci::type::MissionEnvironmentObjectValueOpLineType& MissionEnvironmentObjectClassType::getOpLine() const {
  return getOpLine_();
}

uci::type::MissionEnvironmentObjectValueOpLineType& MissionEnvironmentObjectClassType::getOpLine() {
  return getOpLine_();
}

uci::type::MissionEnvironmentObjectClassType& MissionEnvironmentObjectClassType::setOpLine(const uci::type::MissionEnvironmentObjectValueOpLineType& accessor) {
  chooseOpLine();
  if (&accessor != opLine_Accessor.get()) {
    opLine_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionEnvironmentObjectClassType::isOpLine() const noexcept {
  return static_cast<bool>(opLine_Accessor);
}

uci::type::MissionEnvironmentObjectValueOpLineType& MissionEnvironmentObjectClassType::chooseOpLine(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
  task_Accessor.reset();
  effect_Accessor.reset();
  action_Accessor.reset();
  response_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionEnvironmentObjectValueOpLineType : type};
  if ((!opLine_Accessor) || (opLine_Accessor->getAccessorType() != requestedType)) {
    opLine_Accessor = MissionEnvironmentObjectValueOpLineType::create(type);
    if (!opLine_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opLine_Accessor;
}

uci::type::MissionEnvironmentObjectValueOpLineType& MissionEnvironmentObjectClassType::chooseOpLine(uci::base::accessorType::AccessorType type) {
  return chooseOpLine("chooseOpLine", type);
}

uci::type::MissionEnvironmentObjectValueOpZoneType& MissionEnvironmentObjectClassType::getOpZone_() const {
  if (opZone_Accessor) {
    return *opZone_Accessor;
  }
  throw uci::base::UCIException("Error in getOpZone(): Unable to get OpZone, field not selected");
}

const uci::type::MissionEnvironmentObjectValueOpZoneType& MissionEnvironmentObjectClassType::getOpZone() const {
  return getOpZone_();
}

uci::type::MissionEnvironmentObjectValueOpZoneType& MissionEnvironmentObjectClassType::getOpZone() {
  return getOpZone_();
}

uci::type::MissionEnvironmentObjectClassType& MissionEnvironmentObjectClassType::setOpZone(const uci::type::MissionEnvironmentObjectValueOpZoneType& accessor) {
  chooseOpZone();
  if (&accessor != opZone_Accessor.get()) {
    opZone_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionEnvironmentObjectClassType::isOpZone() const noexcept {
  return static_cast<bool>(opZone_Accessor);
}

uci::type::MissionEnvironmentObjectValueOpZoneType& MissionEnvironmentObjectClassType::chooseOpZone(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opVolume_Accessor.reset();
  task_Accessor.reset();
  effect_Accessor.reset();
  action_Accessor.reset();
  response_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionEnvironmentObjectValueOpZoneType : type};
  if ((!opZone_Accessor) || (opZone_Accessor->getAccessorType() != requestedType)) {
    opZone_Accessor = MissionEnvironmentObjectValueOpZoneType::create(type);
    if (!opZone_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opZone_Accessor;
}

uci::type::MissionEnvironmentObjectValueOpZoneType& MissionEnvironmentObjectClassType::chooseOpZone(uci::base::accessorType::AccessorType type) {
  return chooseOpZone("chooseOpZone", type);
}

uci::type::MissionEnvironmentObjectValueOpVolumeType& MissionEnvironmentObjectClassType::getOpVolume_() const {
  if (opVolume_Accessor) {
    return *opVolume_Accessor;
  }
  throw uci::base::UCIException("Error in getOpVolume(): Unable to get OpVolume, field not selected");
}

const uci::type::MissionEnvironmentObjectValueOpVolumeType& MissionEnvironmentObjectClassType::getOpVolume() const {
  return getOpVolume_();
}

uci::type::MissionEnvironmentObjectValueOpVolumeType& MissionEnvironmentObjectClassType::getOpVolume() {
  return getOpVolume_();
}

uci::type::MissionEnvironmentObjectClassType& MissionEnvironmentObjectClassType::setOpVolume(const uci::type::MissionEnvironmentObjectValueOpVolumeType& accessor) {
  chooseOpVolume();
  if (&accessor != opVolume_Accessor.get()) {
    opVolume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionEnvironmentObjectClassType::isOpVolume() const noexcept {
  return static_cast<bool>(opVolume_Accessor);
}

uci::type::MissionEnvironmentObjectValueOpVolumeType& MissionEnvironmentObjectClassType::chooseOpVolume(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  task_Accessor.reset();
  effect_Accessor.reset();
  action_Accessor.reset();
  response_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionEnvironmentObjectValueOpVolumeType : type};
  if ((!opVolume_Accessor) || (opVolume_Accessor->getAccessorType() != requestedType)) {
    opVolume_Accessor = MissionEnvironmentObjectValueOpVolumeType::create(type);
    if (!opVolume_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opVolume_Accessor;
}

uci::type::MissionEnvironmentObjectValueOpVolumeType& MissionEnvironmentObjectClassType::chooseOpVolume(uci::base::accessorType::AccessorType type) {
  return chooseOpVolume("chooseOpVolume", type);
}

uci::type::MissionEnvironmentObjectValueTaskType& MissionEnvironmentObjectClassType::getTask_() const {
  if (task_Accessor) {
    return *task_Accessor;
  }
  throw uci::base::UCIException("Error in getTask(): Unable to get Task, field not selected");
}

const uci::type::MissionEnvironmentObjectValueTaskType& MissionEnvironmentObjectClassType::getTask() const {
  return getTask_();
}

uci::type::MissionEnvironmentObjectValueTaskType& MissionEnvironmentObjectClassType::getTask() {
  return getTask_();
}

uci::type::MissionEnvironmentObjectClassType& MissionEnvironmentObjectClassType::setTask(const uci::type::MissionEnvironmentObjectValueTaskType& accessor) {
  chooseTask();
  if (&accessor != task_Accessor.get()) {
    task_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionEnvironmentObjectClassType::isTask() const noexcept {
  return static_cast<bool>(task_Accessor);
}

uci::type::MissionEnvironmentObjectValueTaskType& MissionEnvironmentObjectClassType::chooseTask(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
  effect_Accessor.reset();
  action_Accessor.reset();
  response_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionEnvironmentObjectValueTaskType : type};
  if ((!task_Accessor) || (task_Accessor->getAccessorType() != requestedType)) {
    task_Accessor = MissionEnvironmentObjectValueTaskType::create(type);
    if (!task_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *task_Accessor;
}

uci::type::MissionEnvironmentObjectValueTaskType& MissionEnvironmentObjectClassType::chooseTask(uci::base::accessorType::AccessorType type) {
  return chooseTask("chooseTask", type);
}

uci::type::MissionEnvironmentObjectValueEffectType& MissionEnvironmentObjectClassType::getEffect_() const {
  if (effect_Accessor) {
    return *effect_Accessor;
  }
  throw uci::base::UCIException("Error in getEffect(): Unable to get Effect, field not selected");
}

const uci::type::MissionEnvironmentObjectValueEffectType& MissionEnvironmentObjectClassType::getEffect() const {
  return getEffect_();
}

uci::type::MissionEnvironmentObjectValueEffectType& MissionEnvironmentObjectClassType::getEffect() {
  return getEffect_();
}

uci::type::MissionEnvironmentObjectClassType& MissionEnvironmentObjectClassType::setEffect(const uci::type::MissionEnvironmentObjectValueEffectType& accessor) {
  chooseEffect();
  if (&accessor != effect_Accessor.get()) {
    effect_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionEnvironmentObjectClassType::isEffect() const noexcept {
  return static_cast<bool>(effect_Accessor);
}

uci::type::MissionEnvironmentObjectValueEffectType& MissionEnvironmentObjectClassType::chooseEffect(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
  task_Accessor.reset();
  action_Accessor.reset();
  response_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionEnvironmentObjectValueEffectType : type};
  if ((!effect_Accessor) || (effect_Accessor->getAccessorType() != requestedType)) {
    effect_Accessor = MissionEnvironmentObjectValueEffectType::create(type);
    if (!effect_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *effect_Accessor;
}

uci::type::MissionEnvironmentObjectValueEffectType& MissionEnvironmentObjectClassType::chooseEffect(uci::base::accessorType::AccessorType type) {
  return chooseEffect("chooseEffect", type);
}

uci::type::MissionEnvironmentObjectValueActionType& MissionEnvironmentObjectClassType::getAction_() const {
  if (action_Accessor) {
    return *action_Accessor;
  }
  throw uci::base::UCIException("Error in getAction(): Unable to get Action, field not selected");
}

const uci::type::MissionEnvironmentObjectValueActionType& MissionEnvironmentObjectClassType::getAction() const {
  return getAction_();
}

uci::type::MissionEnvironmentObjectValueActionType& MissionEnvironmentObjectClassType::getAction() {
  return getAction_();
}

uci::type::MissionEnvironmentObjectClassType& MissionEnvironmentObjectClassType::setAction(const uci::type::MissionEnvironmentObjectValueActionType& accessor) {
  chooseAction();
  if (&accessor != action_Accessor.get()) {
    action_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionEnvironmentObjectClassType::isAction() const noexcept {
  return static_cast<bool>(action_Accessor);
}

uci::type::MissionEnvironmentObjectValueActionType& MissionEnvironmentObjectClassType::chooseAction(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
  task_Accessor.reset();
  effect_Accessor.reset();
  response_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionEnvironmentObjectValueActionType : type};
  if ((!action_Accessor) || (action_Accessor->getAccessorType() != requestedType)) {
    action_Accessor = MissionEnvironmentObjectValueActionType::create(type);
    if (!action_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *action_Accessor;
}

uci::type::MissionEnvironmentObjectValueActionType& MissionEnvironmentObjectClassType::chooseAction(uci::base::accessorType::AccessorType type) {
  return chooseAction("chooseAction", type);
}

uci::type::MissionEnvironmentObjectValueResponseType& MissionEnvironmentObjectClassType::getResponse_() const {
  if (response_Accessor) {
    return *response_Accessor;
  }
  throw uci::base::UCIException("Error in getResponse(): Unable to get Response, field not selected");
}

const uci::type::MissionEnvironmentObjectValueResponseType& MissionEnvironmentObjectClassType::getResponse() const {
  return getResponse_();
}

uci::type::MissionEnvironmentObjectValueResponseType& MissionEnvironmentObjectClassType::getResponse() {
  return getResponse_();
}

uci::type::MissionEnvironmentObjectClassType& MissionEnvironmentObjectClassType::setResponse(const uci::type::MissionEnvironmentObjectValueResponseType& accessor) {
  chooseResponse();
  if (&accessor != response_Accessor.get()) {
    response_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionEnvironmentObjectClassType::isResponse() const noexcept {
  return static_cast<bool>(response_Accessor);
}

uci::type::MissionEnvironmentObjectValueResponseType& MissionEnvironmentObjectClassType::chooseResponse(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
  task_Accessor.reset();
  effect_Accessor.reset();
  action_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionEnvironmentObjectValueResponseType : type};
  if ((!response_Accessor) || (response_Accessor->getAccessorType() != requestedType)) {
    response_Accessor = MissionEnvironmentObjectValueResponseType::create(type);
    if (!response_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *response_Accessor;
}

uci::type::MissionEnvironmentObjectValueResponseType& MissionEnvironmentObjectClassType::chooseResponse(uci::base::accessorType::AccessorType type) {
  return chooseResponse("chooseResponse", type);
}

std::unique_ptr<MissionEnvironmentObjectClassType> MissionEnvironmentObjectClassType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionEnvironmentObjectClassType : type};
  return (requestedType == uci::type::accessorType::missionEnvironmentObjectClassType) ? boost::make_unique<MissionEnvironmentObjectClassType>() : nullptr;
}

/**  */
namespace MissionEnvironmentObjectClassType_Names {

constexpr const char* Extern_Type_Name{"MissionEnvironmentObjectClassType"};
constexpr const char* Entity_Name{"Entity"};
constexpr const char* System_Name{"System"};
constexpr const char* OpPoint_Name{"OpPoint"};
constexpr const char* OpLine_Name{"OpLine"};
constexpr const char* OpZone_Name{"OpZone"};
constexpr const char* OpVolume_Name{"OpVolume"};
constexpr const char* Task_Name{"Task"};
constexpr const char* Effect_Name{"Effect"};
constexpr const char* Action_Name{"Action"};
constexpr const char* Response_Name{"Response"};

} // namespace MissionEnvironmentObjectClassType_Names

void MissionEnvironmentObjectClassType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionEnvironmentObjectClassType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionEnvironmentObjectClassType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::Entity_Name) {
      MissionEnvironmentObjectValueEntityType::deserialize(valueType.second, accessor.chooseEntity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::System_Name) {
      MissionEnvironmentObjectValueSystemType::deserialize(valueType.second, accessor.chooseSystem(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::OpPoint_Name) {
      MissionEnvironmentObjectValueOpPointType::deserialize(valueType.second, accessor.chooseOpPoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::OpLine_Name) {
      MissionEnvironmentObjectValueOpLineType::deserialize(valueType.second, accessor.chooseOpLine(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::OpZone_Name) {
      MissionEnvironmentObjectValueOpZoneType::deserialize(valueType.second, accessor.chooseOpZone(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::OpVolume_Name) {
      MissionEnvironmentObjectValueOpVolumeType::deserialize(valueType.second, accessor.chooseOpVolume(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::Task_Name) {
      MissionEnvironmentObjectValueTaskType::deserialize(valueType.second, accessor.chooseTask(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::Effect_Name) {
      MissionEnvironmentObjectValueEffectType::deserialize(valueType.second, accessor.chooseEffect(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::Action_Name) {
      MissionEnvironmentObjectValueActionType::deserialize(valueType.second, accessor.chooseAction(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::Response_Name) {
      MissionEnvironmentObjectValueResponseType::deserialize(valueType.second, accessor.chooseResponse(), nodeName, nsPrefix);
    }
  }
}

std::string MissionEnvironmentObjectClassType::serialize(const uci::type::MissionEnvironmentObjectClassType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MissionEnvironmentObjectClassType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MissionEnvironmentObjectClassType_Names::Extern_Type_Name);
  }
  if (accessor.isEntity()) {
    MissionEnvironmentObjectValueEntityType::serialize(accessor.getEntity(), node, MissionEnvironmentObjectClassType_Names::Entity_Name);
  } else if (accessor.isSystem()) {
    MissionEnvironmentObjectValueSystemType::serialize(accessor.getSystem(), node, MissionEnvironmentObjectClassType_Names::System_Name);
  } else if (accessor.isOpPoint()) {
    MissionEnvironmentObjectValueOpPointType::serialize(accessor.getOpPoint(), node, MissionEnvironmentObjectClassType_Names::OpPoint_Name);
  } else if (accessor.isOpLine()) {
    MissionEnvironmentObjectValueOpLineType::serialize(accessor.getOpLine(), node, MissionEnvironmentObjectClassType_Names::OpLine_Name);
  } else if (accessor.isOpZone()) {
    MissionEnvironmentObjectValueOpZoneType::serialize(accessor.getOpZone(), node, MissionEnvironmentObjectClassType_Names::OpZone_Name);
  } else if (accessor.isOpVolume()) {
    MissionEnvironmentObjectValueOpVolumeType::serialize(accessor.getOpVolume(), node, MissionEnvironmentObjectClassType_Names::OpVolume_Name);
  } else if (accessor.isTask()) {
    MissionEnvironmentObjectValueTaskType::serialize(accessor.getTask(), node, MissionEnvironmentObjectClassType_Names::Task_Name);
  } else if (accessor.isEffect()) {
    MissionEnvironmentObjectValueEffectType::serialize(accessor.getEffect(), node, MissionEnvironmentObjectClassType_Names::Effect_Name);
  } else if (accessor.isAction()) {
    MissionEnvironmentObjectValueActionType::serialize(accessor.getAction(), node, MissionEnvironmentObjectClassType_Names::Action_Name);
  } else if (accessor.isResponse()) {
    MissionEnvironmentObjectValueResponseType::serialize(accessor.getResponse(), node, MissionEnvironmentObjectClassType_Names::Response_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MissionEnvironmentObjectClassType& MissionEnvironmentObjectClassType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MissionEnvironmentObjectClassType>().release());
}

uci::type::MissionEnvironmentObjectClassType& MissionEnvironmentObjectClassType::create(const uci::type::MissionEnvironmentObjectClassType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MissionEnvironmentObjectClassType> newAccessor{boost::make_unique<asb_uci::type::MissionEnvironmentObjectClassType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MissionEnvironmentObjectClassType::destroy(uci::type::MissionEnvironmentObjectClassType& accessor) {
  delete dynamic_cast<asb_uci::type::MissionEnvironmentObjectClassType*>(&accessor);
}

} // namespace type

} // namespace uci

