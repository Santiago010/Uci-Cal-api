/** @file ComponentElementIdentifierChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ComponentElementIdentifierChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentElementIdentifierChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ComponentElementIdentifierChoiceType::ComponentElementIdentifierChoiceType() = default;

ComponentElementIdentifierChoiceType::~ComponentElementIdentifierChoiceType() = default;

void ComponentElementIdentifierChoiceType::copy(const uci::type::ComponentElementIdentifierChoiceType& accessor) {
  copyImpl(accessor, false);
}

void ComponentElementIdentifierChoiceType::copyImpl(const uci::type::ComponentElementIdentifierChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ComponentElementIdentifierChoiceType&>(accessor);
    componentElementNumericIdentifier_Accessor = (accessorImpl.componentElementNumericIdentifier_Accessor ? accessorImpl.componentElementNumericIdentifier_Accessor : boost::none);
    if (accessorImpl.componentElementKey_Accessor) {
      setComponentElementKey(*(accessorImpl.componentElementKey_Accessor));
    } else {
      componentElementKey_Accessor.reset();
    }
  }
}

void ComponentElementIdentifierChoiceType::reset() noexcept {
  componentElementNumericIdentifier_Accessor.reset();
  componentElementKey_Accessor.reset();
}

uci::type::ComponentElementIdentifierChoiceType::ComponentElementIdentifierChoiceTypeChoice ComponentElementIdentifierChoiceType::getComponentElementIdentifierChoiceTypeChoiceOrdinal() const noexcept {
  if (componentElementNumericIdentifier_Accessor) {
    return COMPONENTELEMENTIDENTIFIERCHOICETYPE_CHOICE_COMPONENTELEMENTNUMERICIDENTIFIER;
  }
  if (componentElementKey_Accessor) {
    return COMPONENTELEMENTIDENTIFIERCHOICETYPE_CHOICE_COMPONENTELEMENTKEY;
  }
  return COMPONENTELEMENTIDENTIFIERCHOICETYPE_CHOICE_NONE;
}

uci::type::ComponentElementIdentifierChoiceType& ComponentElementIdentifierChoiceType::setComponentElementIdentifierChoiceTypeChoiceOrdinal(uci::type::ComponentElementIdentifierChoiceType::ComponentElementIdentifierChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case COMPONENTELEMENTIDENTIFIERCHOICETYPE_CHOICE_COMPONENTELEMENTNUMERICIDENTIFIER:
      chooseComponentElementNumericIdentifier();
      break;
    case COMPONENTELEMENTIDENTIFIERCHOICETYPE_CHOICE_COMPONENTELEMENTKEY:
      chooseComponentElementKey("setComponentElementIdentifierChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setComponentElementIdentifierChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

xs::UnsignedInt ComponentElementIdentifierChoiceType::getComponentElementNumericIdentifier() const {
  if (componentElementNumericIdentifier_Accessor) {
    return *componentElementNumericIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getComponentElementNumericIdentifier(): Unable to get ComponentElementNumericIdentifier, field not selected");
}

uci::type::ComponentElementIdentifierChoiceType& ComponentElementIdentifierChoiceType::setComponentElementNumericIdentifier(xs::UnsignedInt value) {
  chooseComponentElementNumericIdentifier();
  componentElementNumericIdentifier_Accessor = value;
  return *this;
}

bool ComponentElementIdentifierChoiceType::isComponentElementNumericIdentifier() const noexcept {
  return static_cast<bool>(componentElementNumericIdentifier_Accessor);
}

void ComponentElementIdentifierChoiceType::chooseComponentElementNumericIdentifier() {
  componentElementKey_Accessor.reset();
  if (!componentElementNumericIdentifier_Accessor) {
    componentElementNumericIdentifier_Accessor = boost::optional<asb_xs::UnsignedInt>();
  }
}

uci::type::ForeignKeyType& ComponentElementIdentifierChoiceType::getComponentElementKey_() const {
  if (componentElementKey_Accessor) {
    return *componentElementKey_Accessor;
  }
  throw uci::base::UCIException("Error in getComponentElementKey(): Unable to get ComponentElementKey, field not selected");
}

const uci::type::ForeignKeyType& ComponentElementIdentifierChoiceType::getComponentElementKey() const {
  return getComponentElementKey_();
}

uci::type::ForeignKeyType& ComponentElementIdentifierChoiceType::getComponentElementKey() {
  return getComponentElementKey_();
}

uci::type::ComponentElementIdentifierChoiceType& ComponentElementIdentifierChoiceType::setComponentElementKey(const uci::type::ForeignKeyType& accessor) {
  chooseComponentElementKey("setComponentElementKey", accessor.getAccessorType());
  if (&accessor != componentElementKey_Accessor.get()) {
    componentElementKey_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ComponentElementIdentifierChoiceType::isComponentElementKey() const noexcept {
  return static_cast<bool>(componentElementKey_Accessor);
}

uci::type::ForeignKeyType& ComponentElementIdentifierChoiceType::chooseComponentElementKey(const std::string& method, uci::base::accessorType::AccessorType type) {
  componentElementNumericIdentifier_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!componentElementKey_Accessor) || (componentElementKey_Accessor->getAccessorType() != requestedType)) {
    componentElementKey_Accessor = ForeignKeyType::create(type);
    if (!componentElementKey_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *componentElementKey_Accessor;
}

uci::type::ForeignKeyType& ComponentElementIdentifierChoiceType::chooseComponentElementKey(uci::base::accessorType::AccessorType type) {
  return chooseComponentElementKey("chooseComponentElementKey", type);
}

std::unique_ptr<ComponentElementIdentifierChoiceType> ComponentElementIdentifierChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentElementIdentifierChoiceType : type};
  return (requestedType == uci::type::accessorType::componentElementIdentifierChoiceType) ? boost::make_unique<ComponentElementIdentifierChoiceType>() : nullptr;
}

/**  */
namespace ComponentElementIdentifierChoiceType_Names {

constexpr const char* Extern_Type_Name{"ComponentElementIdentifierChoiceType"};
constexpr const char* ComponentElementNumericIdentifier_Name{"ComponentElementNumericIdentifier"};
constexpr const char* ComponentElementKey_Name{"ComponentElementKey"};

} // namespace ComponentElementIdentifierChoiceType_Names

void ComponentElementIdentifierChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ComponentElementIdentifierChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ComponentElementIdentifierChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ComponentElementIdentifierChoiceType_Names::ComponentElementNumericIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setComponentElementNumericIdentifier(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ComponentElementIdentifierChoiceType_Names::ComponentElementKey_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseComponentElementKey(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string ComponentElementIdentifierChoiceType::serialize(const uci::type::ComponentElementIdentifierChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ComponentElementIdentifierChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ComponentElementIdentifierChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isComponentElementNumericIdentifier()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getComponentElementNumericIdentifier(), node, ComponentElementIdentifierChoiceType_Names::ComponentElementNumericIdentifier_Name);
  } else if (accessor.isComponentElementKey()) {
    ForeignKeyType::serialize(accessor.getComponentElementKey(), node, ComponentElementIdentifierChoiceType_Names::ComponentElementKey_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ComponentElementIdentifierChoiceType& ComponentElementIdentifierChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ComponentElementIdentifierChoiceType>().release());
}

uci::type::ComponentElementIdentifierChoiceType& ComponentElementIdentifierChoiceType::create(const uci::type::ComponentElementIdentifierChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ComponentElementIdentifierChoiceType> newAccessor{boost::make_unique<asb_uci::type::ComponentElementIdentifierChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ComponentElementIdentifierChoiceType::destroy(uci::type::ComponentElementIdentifierChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::ComponentElementIdentifierChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

