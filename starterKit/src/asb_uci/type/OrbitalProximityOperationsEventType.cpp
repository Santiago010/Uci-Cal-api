/** @file OrbitalProximityOperationsEventType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitalProximityOperationsEventType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/RTN_PositionType.h"
#include "../../../include/asb_uci/type/RTN_VelocityType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalProximityOperationsEventType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RTN_PositionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RTN_VelocityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpeedType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalProximityOperationsEventType::OrbitalProximityOperationsEventType() = default;

OrbitalProximityOperationsEventType::~OrbitalProximityOperationsEventType() = default;

void OrbitalProximityOperationsEventType::copy(const uci::type::OrbitalProximityOperationsEventType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalProximityOperationsEventType::copyImpl(const uci::type::OrbitalProximityOperationsEventType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalProximityOperationsEventType&>(accessor);
    if (accessorImpl.hasActorStateEpoch()) {
      setActorStateEpoch(accessorImpl.getActorStateEpoch());
    } else {
      clearActorStateEpoch();
    }
    if (accessorImpl.hasTargetStateEpoch()) {
      setTargetStateEpoch(accessorImpl.getTargetStateEpoch());
    } else {
      clearTargetStateEpoch();
    }
    if (accessorImpl.hasAnalysisEpoch()) {
      setAnalysisEpoch(accessorImpl.getAnalysisEpoch());
    } else {
      clearAnalysisEpoch();
    }
    if (accessorImpl.hasAnalysisDuration()) {
      setAnalysisDuration(accessorImpl.getAnalysisDuration());
    } else {
      clearAnalysisDuration();
    }
    if (accessorImpl.hasDurationThreshold()) {
      setDurationThreshold(accessorImpl.getDurationThreshold());
    } else {
      clearDurationThreshold();
    }
    if (accessorImpl.hasRangeThreshold()) {
      setRangeThreshold(accessorImpl.getRangeThreshold());
    } else {
      clearRangeThreshold();
    }
    if (accessorImpl.hasMinimumRangeEpoch()) {
      setMinimumRangeEpoch(accessorImpl.getMinimumRangeEpoch());
    } else {
      clearMinimumRangeEpoch();
    }
    if (accessorImpl.hasMinimumRange()) {
      setMinimumRange(accessorImpl.getMinimumRange());
    } else {
      clearMinimumRange();
    }
    if (accessorImpl.hasRelativeSpeed()) {
      setRelativeSpeed(accessorImpl.getRelativeSpeed());
    } else {
      clearRelativeSpeed();
    }
    if (accessorImpl.relativePosition_Accessor) {
      setRelativePosition(*(accessorImpl.relativePosition_Accessor));
    } else {
      relativePosition_Accessor.reset();
    }
    if (accessorImpl.relativeVelocity_Accessor) {
      setRelativeVelocity(*(accessorImpl.relativeVelocity_Accessor));
    } else {
      relativeVelocity_Accessor.reset();
    }
  }
}

void OrbitalProximityOperationsEventType::reset() noexcept {
  clearActorStateEpoch();
  clearTargetStateEpoch();
  clearAnalysisEpoch();
  clearAnalysisDuration();
  clearDurationThreshold();
  clearRangeThreshold();
  clearMinimumRangeEpoch();
  clearMinimumRange();
  clearRelativeSpeed();
  relativePosition_Accessor.reset();
  relativeVelocity_Accessor.reset();
}

uci::type::DateTimeTypeValue OrbitalProximityOperationsEventType::getActorStateEpoch() const {
  if (actorStateEpoch_Accessor) {
    return *actorStateEpoch_Accessor;
  }
  throw uci::base::UCIException("Error in getActorStateEpoch(): An attempt was made to get an optional field that was not enabled, call hasActorStateEpoch() to determine if it is safe to call getActorStateEpoch()");
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::setActorStateEpoch(uci::type::DateTimeTypeValue value) {
  actorStateEpoch_Accessor = value;
  return *this;
}

bool OrbitalProximityOperationsEventType::hasActorStateEpoch() const noexcept {
  return actorStateEpoch_Accessor.has_value();
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::clearActorStateEpoch() noexcept {
  actorStateEpoch_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue OrbitalProximityOperationsEventType::getTargetStateEpoch() const {
  if (targetStateEpoch_Accessor) {
    return *targetStateEpoch_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetStateEpoch(): An attempt was made to get an optional field that was not enabled, call hasTargetStateEpoch() to determine if it is safe to call getTargetStateEpoch()");
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::setTargetStateEpoch(uci::type::DateTimeTypeValue value) {
  targetStateEpoch_Accessor = value;
  return *this;
}

bool OrbitalProximityOperationsEventType::hasTargetStateEpoch() const noexcept {
  return targetStateEpoch_Accessor.has_value();
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::clearTargetStateEpoch() noexcept {
  targetStateEpoch_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue OrbitalProximityOperationsEventType::getAnalysisEpoch() const {
  if (analysisEpoch_Accessor) {
    return *analysisEpoch_Accessor;
  }
  throw uci::base::UCIException("Error in getAnalysisEpoch(): An attempt was made to get an optional field that was not enabled, call hasAnalysisEpoch() to determine if it is safe to call getAnalysisEpoch()");
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::setAnalysisEpoch(uci::type::DateTimeTypeValue value) {
  analysisEpoch_Accessor = value;
  return *this;
}

bool OrbitalProximityOperationsEventType::hasAnalysisEpoch() const noexcept {
  return analysisEpoch_Accessor.has_value();
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::clearAnalysisEpoch() noexcept {
  analysisEpoch_Accessor.reset();
  return *this;
}

xs::Duration OrbitalProximityOperationsEventType::getAnalysisDuration() const {
  if (analysisDuration_Accessor) {
    return *analysisDuration_Accessor;
  }
  throw uci::base::UCIException("Error in getAnalysisDuration(): An attempt was made to get an optional field that was not enabled, call hasAnalysisDuration() to determine if it is safe to call getAnalysisDuration()");
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::setAnalysisDuration(xs::Duration value) {
  analysisDuration_Accessor = value;
  return *this;
}

bool OrbitalProximityOperationsEventType::hasAnalysisDuration() const noexcept {
  return analysisDuration_Accessor.has_value();
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::clearAnalysisDuration() noexcept {
  analysisDuration_Accessor.reset();
  return *this;
}

xs::Duration OrbitalProximityOperationsEventType::getDurationThreshold() const {
  if (durationThreshold_Accessor) {
    return *durationThreshold_Accessor;
  }
  throw uci::base::UCIException("Error in getDurationThreshold(): An attempt was made to get an optional field that was not enabled, call hasDurationThreshold() to determine if it is safe to call getDurationThreshold()");
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::setDurationThreshold(xs::Duration value) {
  durationThreshold_Accessor = value;
  return *this;
}

bool OrbitalProximityOperationsEventType::hasDurationThreshold() const noexcept {
  return durationThreshold_Accessor.has_value();
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::clearDurationThreshold() noexcept {
  durationThreshold_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue OrbitalProximityOperationsEventType::getRangeThreshold() const {
  if (rangeThreshold_Accessor) {
    return *rangeThreshold_Accessor;
  }
  throw uci::base::UCIException("Error in getRangeThreshold(): An attempt was made to get an optional field that was not enabled, call hasRangeThreshold() to determine if it is safe to call getRangeThreshold()");
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::setRangeThreshold(uci::type::DistanceTypeValue value) {
  rangeThreshold_Accessor = value;
  return *this;
}

bool OrbitalProximityOperationsEventType::hasRangeThreshold() const noexcept {
  return rangeThreshold_Accessor.has_value();
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::clearRangeThreshold() noexcept {
  rangeThreshold_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue OrbitalProximityOperationsEventType::getMinimumRangeEpoch() const {
  if (minimumRangeEpoch_Accessor) {
    return *minimumRangeEpoch_Accessor;
  }
  throw uci::base::UCIException("Error in getMinimumRangeEpoch(): An attempt was made to get an optional field that was not enabled, call hasMinimumRangeEpoch() to determine if it is safe to call getMinimumRangeEpoch()");
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::setMinimumRangeEpoch(uci::type::DateTimeTypeValue value) {
  minimumRangeEpoch_Accessor = value;
  return *this;
}

bool OrbitalProximityOperationsEventType::hasMinimumRangeEpoch() const noexcept {
  return minimumRangeEpoch_Accessor.has_value();
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::clearMinimumRangeEpoch() noexcept {
  minimumRangeEpoch_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue OrbitalProximityOperationsEventType::getMinimumRange() const {
  if (minimumRange_Accessor) {
    return *minimumRange_Accessor;
  }
  throw uci::base::UCIException("Error in getMinimumRange(): An attempt was made to get an optional field that was not enabled, call hasMinimumRange() to determine if it is safe to call getMinimumRange()");
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::setMinimumRange(uci::type::DistanceTypeValue value) {
  minimumRange_Accessor = value;
  return *this;
}

bool OrbitalProximityOperationsEventType::hasMinimumRange() const noexcept {
  return minimumRange_Accessor.has_value();
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::clearMinimumRange() noexcept {
  minimumRange_Accessor.reset();
  return *this;
}

uci::type::SpeedTypeValue OrbitalProximityOperationsEventType::getRelativeSpeed() const {
  if (relativeSpeed_Accessor) {
    return *relativeSpeed_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeSpeed(): An attempt was made to get an optional field that was not enabled, call hasRelativeSpeed() to determine if it is safe to call getRelativeSpeed()");
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::setRelativeSpeed(uci::type::SpeedTypeValue value) {
  relativeSpeed_Accessor = value;
  return *this;
}

bool OrbitalProximityOperationsEventType::hasRelativeSpeed() const noexcept {
  return relativeSpeed_Accessor.has_value();
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::clearRelativeSpeed() noexcept {
  relativeSpeed_Accessor.reset();
  return *this;
}

uci::type::RTN_PositionType& OrbitalProximityOperationsEventType::getRelativePosition_() const {
  if (relativePosition_Accessor) {
    return *relativePosition_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativePosition(): An attempt was made to get an optional field that was not enabled, call hasRelativePosition() to determine if it is safe to call getRelativePosition()");
}

const uci::type::RTN_PositionType& OrbitalProximityOperationsEventType::getRelativePosition() const {
  return getRelativePosition_();
}

uci::type::RTN_PositionType& OrbitalProximityOperationsEventType::getRelativePosition() {
  return getRelativePosition_();
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::setRelativePosition(const uci::type::RTN_PositionType& accessor) {
  enableRelativePosition();
  if (&accessor != relativePosition_Accessor.get()) {
    relativePosition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalProximityOperationsEventType::hasRelativePosition() const noexcept {
  return static_cast<bool>(relativePosition_Accessor);
}

uci::type::RTN_PositionType& OrbitalProximityOperationsEventType::enableRelativePosition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rTN_PositionType : type};
  if ((!relativePosition_Accessor) || (relativePosition_Accessor->getAccessorType() != requestedType)) {
    relativePosition_Accessor = RTN_PositionType::create(requestedType);
    if (!relativePosition_Accessor) {
      throw uci::base::UCIException("Error in enableRelativePosition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativePosition_Accessor;
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::clearRelativePosition() noexcept {
  relativePosition_Accessor.reset();
  return *this;
}

uci::type::RTN_VelocityType& OrbitalProximityOperationsEventType::getRelativeVelocity_() const {
  if (relativeVelocity_Accessor) {
    return *relativeVelocity_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeVelocity(): An attempt was made to get an optional field that was not enabled, call hasRelativeVelocity() to determine if it is safe to call getRelativeVelocity()");
}

const uci::type::RTN_VelocityType& OrbitalProximityOperationsEventType::getRelativeVelocity() const {
  return getRelativeVelocity_();
}

uci::type::RTN_VelocityType& OrbitalProximityOperationsEventType::getRelativeVelocity() {
  return getRelativeVelocity_();
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::setRelativeVelocity(const uci::type::RTN_VelocityType& accessor) {
  enableRelativeVelocity();
  if (&accessor != relativeVelocity_Accessor.get()) {
    relativeVelocity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalProximityOperationsEventType::hasRelativeVelocity() const noexcept {
  return static_cast<bool>(relativeVelocity_Accessor);
}

uci::type::RTN_VelocityType& OrbitalProximityOperationsEventType::enableRelativeVelocity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rTN_VelocityType : type};
  if ((!relativeVelocity_Accessor) || (relativeVelocity_Accessor->getAccessorType() != requestedType)) {
    relativeVelocity_Accessor = RTN_VelocityType::create(requestedType);
    if (!relativeVelocity_Accessor) {
      throw uci::base::UCIException("Error in enableRelativeVelocity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativeVelocity_Accessor;
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::clearRelativeVelocity() noexcept {
  relativeVelocity_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalProximityOperationsEventType> OrbitalProximityOperationsEventType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalProximityOperationsEventType : type};
  return (requestedType == uci::type::accessorType::orbitalProximityOperationsEventType) ? boost::make_unique<OrbitalProximityOperationsEventType>() : nullptr;
}

/**  */
namespace OrbitalProximityOperationsEventType_Names {

constexpr const char* Extern_Type_Name{"OrbitalProximityOperationsEventType"};
constexpr const char* ActorStateEpoch_Name{"ActorStateEpoch"};
constexpr const char* TargetStateEpoch_Name{"TargetStateEpoch"};
constexpr const char* AnalysisEpoch_Name{"AnalysisEpoch"};
constexpr const char* AnalysisDuration_Name{"AnalysisDuration"};
constexpr const char* DurationThreshold_Name{"DurationThreshold"};
constexpr const char* RangeThreshold_Name{"RangeThreshold"};
constexpr const char* MinimumRangeEpoch_Name{"MinimumRangeEpoch"};
constexpr const char* MinimumRange_Name{"MinimumRange"};
constexpr const char* RelativeSpeed_Name{"RelativeSpeed"};
constexpr const char* RelativePosition_Name{"RelativePosition"};
constexpr const char* RelativeVelocity_Name{"RelativeVelocity"};

} // namespace OrbitalProximityOperationsEventType_Names

void OrbitalProximityOperationsEventType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalProximityOperationsEventType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalProximityOperationsEventType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalProximityOperationsEventType_Names::ActorStateEpoch_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActorStateEpoch(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalProximityOperationsEventType_Names::TargetStateEpoch_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetStateEpoch(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalProximityOperationsEventType_Names::AnalysisEpoch_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAnalysisEpoch(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalProximityOperationsEventType_Names::AnalysisDuration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAnalysisDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalProximityOperationsEventType_Names::DurationThreshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDurationThreshold(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalProximityOperationsEventType_Names::RangeThreshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRangeThreshold(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalProximityOperationsEventType_Names::MinimumRangeEpoch_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumRangeEpoch(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalProximityOperationsEventType_Names::MinimumRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumRange(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalProximityOperationsEventType_Names::RelativeSpeed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRelativeSpeed(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalProximityOperationsEventType_Names::RelativePosition_Name) {
      RTN_PositionType::deserialize(valueType.second, accessor.enableRelativePosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalProximityOperationsEventType_Names::RelativeVelocity_Name) {
      RTN_VelocityType::deserialize(valueType.second, accessor.enableRelativeVelocity(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalProximityOperationsEventType::serialize(const uci::type::OrbitalProximityOperationsEventType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalProximityOperationsEventType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalProximityOperationsEventType_Names::Extern_Type_Name);
  }
  if (accessor.hasActorStateEpoch()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActorStateEpoch(), node, OrbitalProximityOperationsEventType_Names::ActorStateEpoch_Name);
  }
  if (accessor.hasTargetStateEpoch()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTargetStateEpoch(), node, OrbitalProximityOperationsEventType_Names::TargetStateEpoch_Name);
  }
  if (accessor.hasAnalysisEpoch()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getAnalysisEpoch(), node, OrbitalProximityOperationsEventType_Names::AnalysisEpoch_Name);
  }
  if (accessor.hasAnalysisDuration()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getAnalysisDuration(), node, OrbitalProximityOperationsEventType_Names::AnalysisDuration_Name);
  }
  if (accessor.hasDurationThreshold()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getDurationThreshold(), node, OrbitalProximityOperationsEventType_Names::DurationThreshold_Name);
  }
  if (accessor.hasRangeThreshold()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRangeThreshold(), node, OrbitalProximityOperationsEventType_Names::RangeThreshold_Name);
  }
  if (accessor.hasMinimumRangeEpoch()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getMinimumRangeEpoch(), node, OrbitalProximityOperationsEventType_Names::MinimumRangeEpoch_Name);
  }
  if (accessor.hasMinimumRange()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinimumRange(), node, OrbitalProximityOperationsEventType_Names::MinimumRange_Name);
  }
  if (accessor.hasRelativeSpeed()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRelativeSpeed(), node, OrbitalProximityOperationsEventType_Names::RelativeSpeed_Name);
  }
  if (accessor.hasRelativePosition()) {
    RTN_PositionType::serialize(accessor.getRelativePosition(), node, OrbitalProximityOperationsEventType_Names::RelativePosition_Name);
  }
  if (accessor.hasRelativeVelocity()) {
    RTN_VelocityType::serialize(accessor.getRelativeVelocity(), node, OrbitalProximityOperationsEventType_Names::RelativeVelocity_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalProximityOperationsEventType>().release());
}

uci::type::OrbitalProximityOperationsEventType& OrbitalProximityOperationsEventType::create(const uci::type::OrbitalProximityOperationsEventType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalProximityOperationsEventType> newAccessor{boost::make_unique<asb_uci::type::OrbitalProximityOperationsEventType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalProximityOperationsEventType::destroy(uci::type::OrbitalProximityOperationsEventType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalProximityOperationsEventType*>(&accessor);
}

} // namespace type

} // namespace uci

