/** @file IFF_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/IFF_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/IFF_Mode1Type.h"
#include "../../../include/asb_uci/type/IFF_Mode4Type.h"
#include "../../../include/asb_uci/type/IFF_Mode5Type.h"
#include "../../../include/asb_uci/type/IFF_ModeS_Type.h"
#include "../../../include/asb_uci/type/IFF_OctalModeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_Mode1Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_Mode4Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_Mode5Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_ModeS_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_OctalModeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IFF_Type::IFF_Type()
  : mode3A_Accessor{boost::make_unique<Mode3A>(0, SIZE_MAX)} {
}

IFF_Type::~IFF_Type() = default;

void IFF_Type::copy(const uci::type::IFF_Type& accessor) {
  copyImpl(accessor, false);
}

void IFF_Type::copyImpl(const uci::type::IFF_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IFF_Type&>(accessor);
    if (accessorImpl.mode1_Accessor) {
      setMode1(*(accessorImpl.mode1_Accessor));
    } else {
      mode1_Accessor.reset();
    }
    if (accessorImpl.mode2_Accessor) {
      setMode2(*(accessorImpl.mode2_Accessor));
    } else {
      mode2_Accessor.reset();
    }
    setMode3A(*(accessorImpl.mode3A_Accessor));
    if (accessorImpl.mode3LC_Accessor) {
      setMode3LC(*(accessorImpl.mode3LC_Accessor));
    } else {
      mode3LC_Accessor.reset();
    }
    if (accessorImpl.mode4_Accessor) {
      setMode4(*(accessorImpl.mode4_Accessor));
    } else {
      mode4_Accessor.reset();
    }
    if (accessorImpl.mode5_Accessor) {
      setMode5(*(accessorImpl.mode5_Accessor));
    } else {
      mode5_Accessor.reset();
    }
    if (accessorImpl.modeS_Accessor) {
      setModeS(*(accessorImpl.modeS_Accessor));
    } else {
      modeS_Accessor.reset();
    }
    if (accessorImpl.modeC_Accessor) {
      setModeC(*(accessorImpl.modeC_Accessor));
    } else {
      modeC_Accessor.reset();
    }
  }
}

void IFF_Type::reset() noexcept {
  mode1_Accessor.reset();
  mode2_Accessor.reset();
  mode3A_Accessor->reset();
  mode3LC_Accessor.reset();
  mode4_Accessor.reset();
  mode5_Accessor.reset();
  modeS_Accessor.reset();
  modeC_Accessor.reset();
}

uci::type::IFF_Mode1Type& IFF_Type::getMode1_() const {
  if (mode1_Accessor) {
    return *mode1_Accessor;
  }
  throw uci::base::UCIException("Error in getMode1(): An attempt was made to get an optional field that was not enabled, call hasMode1() to determine if it is safe to call getMode1()");
}

const uci::type::IFF_Mode1Type& IFF_Type::getMode1() const {
  return getMode1_();
}

uci::type::IFF_Mode1Type& IFF_Type::getMode1() {
  return getMode1_();
}

uci::type::IFF_Type& IFF_Type::setMode1(const uci::type::IFF_Mode1Type& accessor) {
  enableMode1();
  if (&accessor != mode1_Accessor.get()) {
    mode1_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_Type::hasMode1() const noexcept {
  return static_cast<bool>(mode1_Accessor);
}

uci::type::IFF_Mode1Type& IFF_Type::enableMode1(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_Mode1Type : type};
  if ((!mode1_Accessor) || (mode1_Accessor->getAccessorType() != requestedType)) {
    mode1_Accessor = IFF_Mode1Type::create(requestedType);
    if (!mode1_Accessor) {
      throw uci::base::UCIException("Error in enableMode1(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mode1_Accessor;
}

uci::type::IFF_Type& IFF_Type::clearMode1() noexcept {
  mode1_Accessor.reset();
  return *this;
}

uci::type::IFF_OctalModeType& IFF_Type::getMode2_() const {
  if (mode2_Accessor) {
    return *mode2_Accessor;
  }
  throw uci::base::UCIException("Error in getMode2(): An attempt was made to get an optional field that was not enabled, call hasMode2() to determine if it is safe to call getMode2()");
}

const uci::type::IFF_OctalModeType& IFF_Type::getMode2() const {
  return getMode2_();
}

uci::type::IFF_OctalModeType& IFF_Type::getMode2() {
  return getMode2_();
}

uci::type::IFF_Type& IFF_Type::setMode2(const uci::type::IFF_OctalModeType& accessor) {
  enableMode2();
  if (&accessor != mode2_Accessor.get()) {
    mode2_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_Type::hasMode2() const noexcept {
  return static_cast<bool>(mode2_Accessor);
}

uci::type::IFF_OctalModeType& IFF_Type::enableMode2(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_OctalModeType : type};
  if ((!mode2_Accessor) || (mode2_Accessor->getAccessorType() != requestedType)) {
    mode2_Accessor = IFF_OctalModeType::create(requestedType);
    if (!mode2_Accessor) {
      throw uci::base::UCIException("Error in enableMode2(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mode2_Accessor;
}

uci::type::IFF_Type& IFF_Type::clearMode2() noexcept {
  mode2_Accessor.reset();
  return *this;
}

const uci::type::IFF_Type::Mode3A& IFF_Type::getMode3A() const {
  return *mode3A_Accessor;
}

uci::type::IFF_Type::Mode3A& IFF_Type::getMode3A() {
  return *mode3A_Accessor;
}

uci::type::IFF_Type& IFF_Type::setMode3A(const uci::type::IFF_Type::Mode3A& accessor) {
  if (&accessor != mode3A_Accessor.get()) {
    mode3A_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IFF_OctalModeType& IFF_Type::getMode3LC_() const {
  if (mode3LC_Accessor) {
    return *mode3LC_Accessor;
  }
  throw uci::base::UCIException("Error in getMode3LC(): An attempt was made to get an optional field that was not enabled, call hasMode3LC() to determine if it is safe to call getMode3LC()");
}

const uci::type::IFF_OctalModeType& IFF_Type::getMode3LC() const {
  return getMode3LC_();
}

uci::type::IFF_OctalModeType& IFF_Type::getMode3LC() {
  return getMode3LC_();
}

uci::type::IFF_Type& IFF_Type::setMode3LC(const uci::type::IFF_OctalModeType& accessor) {
  enableMode3LC();
  if (&accessor != mode3LC_Accessor.get()) {
    mode3LC_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_Type::hasMode3LC() const noexcept {
  return static_cast<bool>(mode3LC_Accessor);
}

uci::type::IFF_OctalModeType& IFF_Type::enableMode3LC(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_OctalModeType : type};
  if ((!mode3LC_Accessor) || (mode3LC_Accessor->getAccessorType() != requestedType)) {
    mode3LC_Accessor = IFF_OctalModeType::create(requestedType);
    if (!mode3LC_Accessor) {
      throw uci::base::UCIException("Error in enableMode3LC(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mode3LC_Accessor;
}

uci::type::IFF_Type& IFF_Type::clearMode3LC() noexcept {
  mode3LC_Accessor.reset();
  return *this;
}

uci::type::IFF_Mode4Type& IFF_Type::getMode4_() const {
  if (mode4_Accessor) {
    return *mode4_Accessor;
  }
  throw uci::base::UCIException("Error in getMode4(): An attempt was made to get an optional field that was not enabled, call hasMode4() to determine if it is safe to call getMode4()");
}

const uci::type::IFF_Mode4Type& IFF_Type::getMode4() const {
  return getMode4_();
}

uci::type::IFF_Mode4Type& IFF_Type::getMode4() {
  return getMode4_();
}

uci::type::IFF_Type& IFF_Type::setMode4(const uci::type::IFF_Mode4Type& accessor) {
  enableMode4();
  if (&accessor != mode4_Accessor.get()) {
    mode4_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_Type::hasMode4() const noexcept {
  return static_cast<bool>(mode4_Accessor);
}

uci::type::IFF_Mode4Type& IFF_Type::enableMode4(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_Mode4Type : type};
  if ((!mode4_Accessor) || (mode4_Accessor->getAccessorType() != requestedType)) {
    mode4_Accessor = IFF_Mode4Type::create(requestedType);
    if (!mode4_Accessor) {
      throw uci::base::UCIException("Error in enableMode4(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mode4_Accessor;
}

uci::type::IFF_Type& IFF_Type::clearMode4() noexcept {
  mode4_Accessor.reset();
  return *this;
}

uci::type::IFF_Mode5Type& IFF_Type::getMode5_() const {
  if (mode5_Accessor) {
    return *mode5_Accessor;
  }
  throw uci::base::UCIException("Error in getMode5(): An attempt was made to get an optional field that was not enabled, call hasMode5() to determine if it is safe to call getMode5()");
}

const uci::type::IFF_Mode5Type& IFF_Type::getMode5() const {
  return getMode5_();
}

uci::type::IFF_Mode5Type& IFF_Type::getMode5() {
  return getMode5_();
}

uci::type::IFF_Type& IFF_Type::setMode5(const uci::type::IFF_Mode5Type& accessor) {
  enableMode5();
  if (&accessor != mode5_Accessor.get()) {
    mode5_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_Type::hasMode5() const noexcept {
  return static_cast<bool>(mode5_Accessor);
}

uci::type::IFF_Mode5Type& IFF_Type::enableMode5(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_Mode5Type : type};
  if ((!mode5_Accessor) || (mode5_Accessor->getAccessorType() != requestedType)) {
    mode5_Accessor = IFF_Mode5Type::create(requestedType);
    if (!mode5_Accessor) {
      throw uci::base::UCIException("Error in enableMode5(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mode5_Accessor;
}

uci::type::IFF_Type& IFF_Type::clearMode5() noexcept {
  mode5_Accessor.reset();
  return *this;
}

uci::type::IFF_ModeS_Type& IFF_Type::getModeS_() const {
  if (modeS_Accessor) {
    return *modeS_Accessor;
  }
  throw uci::base::UCIException("Error in getModeS(): An attempt was made to get an optional field that was not enabled, call hasModeS() to determine if it is safe to call getModeS()");
}

const uci::type::IFF_ModeS_Type& IFF_Type::getModeS() const {
  return getModeS_();
}

uci::type::IFF_ModeS_Type& IFF_Type::getModeS() {
  return getModeS_();
}

uci::type::IFF_Type& IFF_Type::setModeS(const uci::type::IFF_ModeS_Type& accessor) {
  enableModeS();
  if (&accessor != modeS_Accessor.get()) {
    modeS_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_Type::hasModeS() const noexcept {
  return static_cast<bool>(modeS_Accessor);
}

uci::type::IFF_ModeS_Type& IFF_Type::enableModeS(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_ModeS_Type : type};
  if ((!modeS_Accessor) || (modeS_Accessor->getAccessorType() != requestedType)) {
    modeS_Accessor = IFF_ModeS_Type::create(requestedType);
    if (!modeS_Accessor) {
      throw uci::base::UCIException("Error in enableModeS(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modeS_Accessor;
}

uci::type::IFF_Type& IFF_Type::clearModeS() noexcept {
  modeS_Accessor.reset();
  return *this;
}

uci::type::IFF_OctalModeType& IFF_Type::getModeC_() const {
  if (modeC_Accessor) {
    return *modeC_Accessor;
  }
  throw uci::base::UCIException("Error in getModeC(): An attempt was made to get an optional field that was not enabled, call hasModeC() to determine if it is safe to call getModeC()");
}

const uci::type::IFF_OctalModeType& IFF_Type::getModeC() const {
  return getModeC_();
}

uci::type::IFF_OctalModeType& IFF_Type::getModeC() {
  return getModeC_();
}

uci::type::IFF_Type& IFF_Type::setModeC(const uci::type::IFF_OctalModeType& accessor) {
  enableModeC();
  if (&accessor != modeC_Accessor.get()) {
    modeC_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_Type::hasModeC() const noexcept {
  return static_cast<bool>(modeC_Accessor);
}

uci::type::IFF_OctalModeType& IFF_Type::enableModeC(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_OctalModeType : type};
  if ((!modeC_Accessor) || (modeC_Accessor->getAccessorType() != requestedType)) {
    modeC_Accessor = IFF_OctalModeType::create(requestedType);
    if (!modeC_Accessor) {
      throw uci::base::UCIException("Error in enableModeC(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modeC_Accessor;
}

uci::type::IFF_Type& IFF_Type::clearModeC() noexcept {
  modeC_Accessor.reset();
  return *this;
}

std::unique_ptr<IFF_Type> IFF_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_Type : type};
  return (requestedType == uci::type::accessorType::iFF_Type) ? boost::make_unique<IFF_Type>() : nullptr;
}

/**  */
namespace IFF_Type_Names {

constexpr const char* Extern_Type_Name{"IFF_Type"};
constexpr const char* Mode1_Name{"Mode1"};
constexpr const char* Mode2_Name{"Mode2"};
constexpr const char* Mode3A_Name{"Mode3A"};
constexpr const char* Mode3LC_Name{"Mode3LC"};
constexpr const char* Mode4_Name{"Mode4"};
constexpr const char* Mode5_Name{"Mode5"};
constexpr const char* ModeS_Name{"ModeS"};
constexpr const char* ModeC_Name{"ModeC"};

} // namespace IFF_Type_Names

void IFF_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::IFF_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IFF_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IFF_Type_Names::Mode1_Name) {
      IFF_Mode1Type::deserialize(valueType.second, accessor.enableMode1(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IFF_Type_Names::Mode2_Name) {
      IFF_OctalModeType::deserialize(valueType.second, accessor.enableMode2(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IFF_Type_Names::Mode3A_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IFF_Type::Mode3A& boundedList = accessor.getMode3A();
        const uci::type::IFF_Type::Mode3A::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::IFF_OctalModeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IFF_Type_Names::Mode3LC_Name) {
      IFF_OctalModeType::deserialize(valueType.second, accessor.enableMode3LC(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IFF_Type_Names::Mode4_Name) {
      IFF_Mode4Type::deserialize(valueType.second, accessor.enableMode4(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IFF_Type_Names::Mode5_Name) {
      IFF_Mode5Type::deserialize(valueType.second, accessor.enableMode5(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IFF_Type_Names::ModeS_Name) {
      IFF_ModeS_Type::deserialize(valueType.second, accessor.enableModeS(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IFF_Type_Names::ModeC_Name) {
      IFF_OctalModeType::deserialize(valueType.second, accessor.enableModeC(), nodeName, nsPrefix);
    }
  }
}

std::string IFF_Type::serialize(const uci::type::IFF_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IFF_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IFF_Type_Names::Extern_Type_Name);
  }
  if (accessor.hasMode1()) {
    IFF_Mode1Type::serialize(accessor.getMode1(), node, IFF_Type_Names::Mode1_Name);
  }
  if (accessor.hasMode2()) {
    IFF_OctalModeType::serialize(accessor.getMode2(), node, IFF_Type_Names::Mode2_Name);
  }
  {
    const uci::type::IFF_Type::Mode3A& boundedList = accessor.getMode3A();
    for (uci::type::IFF_Type::Mode3A::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::IFF_OctalModeType::serialize(boundedList.at(i), node, IFF_Type_Names::Mode3A_Name);
    }
  }
  if (accessor.hasMode3LC()) {
    IFF_OctalModeType::serialize(accessor.getMode3LC(), node, IFF_Type_Names::Mode3LC_Name);
  }
  if (accessor.hasMode4()) {
    IFF_Mode4Type::serialize(accessor.getMode4(), node, IFF_Type_Names::Mode4_Name);
  }
  if (accessor.hasMode5()) {
    IFF_Mode5Type::serialize(accessor.getMode5(), node, IFF_Type_Names::Mode5_Name);
  }
  if (accessor.hasModeS()) {
    IFF_ModeS_Type::serialize(accessor.getModeS(), node, IFF_Type_Names::ModeS_Name);
  }
  if (accessor.hasModeC()) {
    IFF_OctalModeType::serialize(accessor.getModeC(), node, IFF_Type_Names::ModeC_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IFF_Type& IFF_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IFF_Type>().release());
}

uci::type::IFF_Type& IFF_Type::create(const uci::type::IFF_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IFF_Type> newAccessor{boost::make_unique<asb_uci::type::IFF_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IFF_Type::destroy(uci::type::IFF_Type& accessor) {
  delete dynamic_cast<asb_uci::type::IFF_Type*>(&accessor);
}

} // namespace type

} // namespace uci

