/** @file ChannelDescriptionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ChannelDescriptionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentID_Type.h"
#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/type/GainRangeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ChannelDescriptionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GainRangeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ChannelDescriptionType::ChannelDescriptionType()
  : componentID_Accessor{boost::make_unique<ComponentID_Type>()},
    channelFreq_Accessor{boost::make_unique<FrequencyRangeType>()},
    bandsSupported_Accessor{boost::make_unique<BandsSupported>(0, SIZE_MAX)} {
}

ChannelDescriptionType::~ChannelDescriptionType() = default;

void ChannelDescriptionType::copy(const uci::type::ChannelDescriptionType& accessor) {
  copyImpl(accessor, false);
}

void ChannelDescriptionType::copyImpl(const uci::type::ChannelDescriptionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ChannelDescriptionType&>(accessor);
    setComponentID(*(accessorImpl.componentID_Accessor));
    setChannelFreq(*(accessorImpl.channelFreq_Accessor));
    if (accessorImpl.gain_Accessor) {
      setGain(*(accessorImpl.gain_Accessor));
    } else {
      gain_Accessor.reset();
    }
    if (accessorImpl.hasGainStepSize()) {
      setGainStepSize(accessorImpl.getGainStepSize());
    } else {
      clearGainStepSize();
    }
    setBandsSupported(*(accessorImpl.bandsSupported_Accessor));
  }
}

void ChannelDescriptionType::reset() noexcept {
  componentID_Accessor->reset();
  channelFreq_Accessor->reset();
  gain_Accessor.reset();
  clearGainStepSize();
  bandsSupported_Accessor->reset();
}

const uci::type::ComponentID_Type& ChannelDescriptionType::getComponentID() const {
  return *componentID_Accessor;
}

uci::type::ComponentID_Type& ChannelDescriptionType::getComponentID() {
  return *componentID_Accessor;
}

uci::type::ChannelDescriptionType& ChannelDescriptionType::setComponentID(const uci::type::ComponentID_Type& accessor) {
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::FrequencyRangeType& ChannelDescriptionType::getChannelFreq() const {
  return *channelFreq_Accessor;
}

uci::type::FrequencyRangeType& ChannelDescriptionType::getChannelFreq() {
  return *channelFreq_Accessor;
}

uci::type::ChannelDescriptionType& ChannelDescriptionType::setChannelFreq(const uci::type::FrequencyRangeType& accessor) {
  if (&accessor != channelFreq_Accessor.get()) {
    channelFreq_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::GainRangeType& ChannelDescriptionType::getGain_() const {
  if (gain_Accessor) {
    return *gain_Accessor;
  }
  throw uci::base::UCIException("Error in getGain(): An attempt was made to get an optional field that was not enabled, call hasGain() to determine if it is safe to call getGain()");
}

const uci::type::GainRangeType& ChannelDescriptionType::getGain() const {
  return getGain_();
}

uci::type::GainRangeType& ChannelDescriptionType::getGain() {
  return getGain_();
}

uci::type::ChannelDescriptionType& ChannelDescriptionType::setGain(const uci::type::GainRangeType& accessor) {
  enableGain();
  if (&accessor != gain_Accessor.get()) {
    gain_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ChannelDescriptionType::hasGain() const noexcept {
  return static_cast<bool>(gain_Accessor);
}

uci::type::GainRangeType& ChannelDescriptionType::enableGain(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gainRangeType : type};
  if ((!gain_Accessor) || (gain_Accessor->getAccessorType() != requestedType)) {
    gain_Accessor = GainRangeType::create(requestedType);
    if (!gain_Accessor) {
      throw uci::base::UCIException("Error in enableGain(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *gain_Accessor;
}

uci::type::ChannelDescriptionType& ChannelDescriptionType::clearGain() noexcept {
  gain_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue ChannelDescriptionType::getGainStepSize() const {
  if (gainStepSize_Accessor) {
    return *gainStepSize_Accessor;
  }
  throw uci::base::UCIException("Error in getGainStepSize(): An attempt was made to get an optional field that was not enabled, call hasGainStepSize() to determine if it is safe to call getGainStepSize()");
}

uci::type::ChannelDescriptionType& ChannelDescriptionType::setGainStepSize(uci::type::DecibelTypeValue value) {
  gainStepSize_Accessor = value;
  return *this;
}

bool ChannelDescriptionType::hasGainStepSize() const noexcept {
  return gainStepSize_Accessor.has_value();
}

uci::type::ChannelDescriptionType& ChannelDescriptionType::clearGainStepSize() noexcept {
  gainStepSize_Accessor.reset();
  return *this;
}

const uci::type::ChannelDescriptionType::BandsSupported& ChannelDescriptionType::getBandsSupported() const {
  return *bandsSupported_Accessor;
}

uci::type::ChannelDescriptionType::BandsSupported& ChannelDescriptionType::getBandsSupported() {
  return *bandsSupported_Accessor;
}

uci::type::ChannelDescriptionType& ChannelDescriptionType::setBandsSupported(const uci::type::ChannelDescriptionType::BandsSupported& accessor) {
  if (&accessor != bandsSupported_Accessor.get()) {
    bandsSupported_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ChannelDescriptionType> ChannelDescriptionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::channelDescriptionType : type};
  return (requestedType == uci::type::accessorType::channelDescriptionType) ? boost::make_unique<ChannelDescriptionType>() : nullptr;
}

/**  */
namespace ChannelDescriptionType_Names {

constexpr const char* Extern_Type_Name{"ChannelDescriptionType"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* ChannelFreq_Name{"ChannelFreq"};
constexpr const char* Gain_Name{"Gain"};
constexpr const char* GainStepSize_Name{"GainStepSize"};
constexpr const char* BandsSupported_Name{"BandsSupported"};

} // namespace ChannelDescriptionType_Names

void ChannelDescriptionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ChannelDescriptionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ChannelDescriptionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ChannelDescriptionType_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.getComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ChannelDescriptionType_Names::ChannelFreq_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.getChannelFreq(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ChannelDescriptionType_Names::Gain_Name) {
      GainRangeType::deserialize(valueType.second, accessor.enableGain(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ChannelDescriptionType_Names::GainStepSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGainStepSize(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ChannelDescriptionType_Names::BandsSupported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ChannelDescriptionType::BandsSupported& boundedList = accessor.getBandsSupported();
        const uci::type::ChannelDescriptionType::BandsSupported::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setIntValue(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    }
  }
}

std::string ChannelDescriptionType::serialize(const uci::type::ChannelDescriptionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ChannelDescriptionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ChannelDescriptionType_Names::Extern_Type_Name);
  }
  ComponentID_Type::serialize(accessor.getComponentID(), node, ChannelDescriptionType_Names::ComponentID_Name);
  FrequencyRangeType::serialize(accessor.getChannelFreq(), node, ChannelDescriptionType_Names::ChannelFreq_Name);
  if (accessor.hasGain()) {
    GainRangeType::serialize(accessor.getGain(), node, ChannelDescriptionType_Names::Gain_Name);
  }
  if (accessor.hasGainStepSize()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getGainStepSize(), node, ChannelDescriptionType_Names::GainStepSize_Name);
  }
  {
    const uci::type::ChannelDescriptionType::BandsSupported& boundedList = accessor.getBandsSupported();
    for (uci::type::ChannelDescriptionType::BandsSupported::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeInt(boundedList.at(i), node, ChannelDescriptionType_Names::BandsSupported_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ChannelDescriptionType& ChannelDescriptionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ChannelDescriptionType>().release());
}

uci::type::ChannelDescriptionType& ChannelDescriptionType::create(const uci::type::ChannelDescriptionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ChannelDescriptionType> newAccessor{boost::make_unique<asb_uci::type::ChannelDescriptionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ChannelDescriptionType::destroy(uci::type::ChannelDescriptionType& accessor) {
  delete dynamic_cast<asb_uci::type::ChannelDescriptionType*>(&accessor);
}

} // namespace type

} // namespace uci

