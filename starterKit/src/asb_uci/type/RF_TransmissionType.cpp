/** @file RF_TransmissionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RF_TransmissionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AntennaAndResourceInstanceType.h"
#include "../../../include/asb_uci/type/BlankingLimitType.h"
#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/type/PolarizationControlType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AntennaAndResourceInstanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BlankingLimitType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PolarizationControlType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_TransmissionType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RF_TransmissionType::RF_TransmissionType()
  : rF_ThreadInstanceIndex_Accessor{boost::make_unique<RF_ThreadInstanceIndex>(0, SIZE_MAX)},
    antennaResource_Accessor{boost::make_unique<AntennaResource>(1, SIZE_MAX)},
    frequency_Accessor{boost::make_unique<Frequency>(0, SIZE_MAX)},
    polarization_Accessor{boost::make_unique<Polarization>(0, SIZE_MAX)},
    blankingLimit_Accessor{boost::make_unique<BlankingLimit>(1, SIZE_MAX)} {
}

RF_TransmissionType::~RF_TransmissionType() = default;

void RF_TransmissionType::copy(const uci::type::RF_TransmissionType& accessor) {
  copyImpl(accessor, false);
}

void RF_TransmissionType::copyImpl(const uci::type::RF_TransmissionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RF_TransmissionType&>(accessor);
    setRF_ThreadInstanceIndex(*(accessorImpl.rF_ThreadInstanceIndex_Accessor));
    setAntennaResource(*(accessorImpl.antennaResource_Accessor));
    setResourceAccessPriority(accessorImpl.resourceAccessPriority_Accessor);
    setFrequency(*(accessorImpl.frequency_Accessor));
    setPolarization(*(accessorImpl.polarization_Accessor));
    setMaximumTransmitERP(accessorImpl.maximumTransmitERP_Accessor);
    setBlankingLimit(*(accessorImpl.blankingLimit_Accessor));
    if (accessorImpl.hasMinimumReceiveSensitivity()) {
      setMinimumReceiveSensitivity(accessorImpl.getMinimumReceiveSensitivity());
    } else {
      clearMinimumReceiveSensitivity();
    }
    if (accessorImpl.hasPercentInterruptable()) {
      setPercentInterruptable(accessorImpl.getPercentInterruptable());
    } else {
      clearPercentInterruptable();
    }
  }
}

void RF_TransmissionType::reset() noexcept {
  rF_ThreadInstanceIndex_Accessor->reset();
  antennaResource_Accessor->reset();
  resourceAccessPriority_Accessor = 0;
  frequency_Accessor->reset();
  polarization_Accessor->reset();
  maximumTransmitERP_Accessor = 0.0;
  blankingLimit_Accessor->reset();
  clearMinimumReceiveSensitivity();
  clearPercentInterruptable();
}

const uci::type::RF_TransmissionType::RF_ThreadInstanceIndex& RF_TransmissionType::getRF_ThreadInstanceIndex() const {
  return *rF_ThreadInstanceIndex_Accessor;
}

uci::type::RF_TransmissionType::RF_ThreadInstanceIndex& RF_TransmissionType::getRF_ThreadInstanceIndex() {
  return *rF_ThreadInstanceIndex_Accessor;
}

uci::type::RF_TransmissionType& RF_TransmissionType::setRF_ThreadInstanceIndex(const uci::type::RF_TransmissionType::RF_ThreadInstanceIndex& accessor) {
  if (&accessor != rF_ThreadInstanceIndex_Accessor.get()) {
    rF_ThreadInstanceIndex_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RF_TransmissionType::AntennaResource& RF_TransmissionType::getAntennaResource() const {
  return *antennaResource_Accessor;
}

uci::type::RF_TransmissionType::AntennaResource& RF_TransmissionType::getAntennaResource() {
  return *antennaResource_Accessor;
}

uci::type::RF_TransmissionType& RF_TransmissionType::setAntennaResource(const uci::type::RF_TransmissionType::AntennaResource& accessor) {
  if (&accessor != antennaResource_Accessor.get()) {
    antennaResource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt RF_TransmissionType::getResourceAccessPriority() const {
  return resourceAccessPriority_Accessor;
}

uci::type::RF_TransmissionType& RF_TransmissionType::setResourceAccessPriority(xs::UnsignedInt value) {
  resourceAccessPriority_Accessor = value;
  return *this;
}


const uci::type::RF_TransmissionType::Frequency& RF_TransmissionType::getFrequency() const {
  return *frequency_Accessor;
}

uci::type::RF_TransmissionType::Frequency& RF_TransmissionType::getFrequency() {
  return *frequency_Accessor;
}

uci::type::RF_TransmissionType& RF_TransmissionType::setFrequency(const uci::type::RF_TransmissionType::Frequency& accessor) {
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RF_TransmissionType::Polarization& RF_TransmissionType::getPolarization() const {
  return *polarization_Accessor;
}

uci::type::RF_TransmissionType::Polarization& RF_TransmissionType::getPolarization() {
  return *polarization_Accessor;
}

uci::type::RF_TransmissionType& RF_TransmissionType::setPolarization(const uci::type::RF_TransmissionType::Polarization& accessor) {
  if (&accessor != polarization_Accessor.get()) {
    polarization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DecibelTypeValue RF_TransmissionType::getMaximumTransmitERP() const {
  return maximumTransmitERP_Accessor;
}

uci::type::RF_TransmissionType& RF_TransmissionType::setMaximumTransmitERP(uci::type::DecibelTypeValue value) {
  maximumTransmitERP_Accessor = value;
  return *this;
}


const uci::type::RF_TransmissionType::BlankingLimit& RF_TransmissionType::getBlankingLimit() const {
  return *blankingLimit_Accessor;
}

uci::type::RF_TransmissionType::BlankingLimit& RF_TransmissionType::getBlankingLimit() {
  return *blankingLimit_Accessor;
}

uci::type::RF_TransmissionType& RF_TransmissionType::setBlankingLimit(const uci::type::RF_TransmissionType::BlankingLimit& accessor) {
  if (&accessor != blankingLimit_Accessor.get()) {
    blankingLimit_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DecibelTypeValue RF_TransmissionType::getMinimumReceiveSensitivity() const {
  if (minimumReceiveSensitivity_Accessor) {
    return *minimumReceiveSensitivity_Accessor;
  }
  throw uci::base::UCIException("Error in getMinimumReceiveSensitivity(): An attempt was made to get an optional field that was not enabled, call hasMinimumReceiveSensitivity() to determine if it is safe to call getMinimumReceiveSensitivity()");
}

uci::type::RF_TransmissionType& RF_TransmissionType::setMinimumReceiveSensitivity(uci::type::DecibelTypeValue value) {
  minimumReceiveSensitivity_Accessor = value;
  return *this;
}

bool RF_TransmissionType::hasMinimumReceiveSensitivity() const noexcept {
  return minimumReceiveSensitivity_Accessor.has_value();
}

uci::type::RF_TransmissionType& RF_TransmissionType::clearMinimumReceiveSensitivity() noexcept {
  minimumReceiveSensitivity_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue RF_TransmissionType::getPercentInterruptable() const {
  if (percentInterruptable_Accessor) {
    return *percentInterruptable_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentInterruptable(): An attempt was made to get an optional field that was not enabled, call hasPercentInterruptable() to determine if it is safe to call getPercentInterruptable()");
}

uci::type::RF_TransmissionType& RF_TransmissionType::setPercentInterruptable(uci::type::PercentTypeValue value) {
  percentInterruptable_Accessor = value;
  return *this;
}

bool RF_TransmissionType::hasPercentInterruptable() const noexcept {
  return percentInterruptable_Accessor.has_value();
}

uci::type::RF_TransmissionType& RF_TransmissionType::clearPercentInterruptable() noexcept {
  percentInterruptable_Accessor.reset();
  return *this;
}

std::unique_ptr<RF_TransmissionType> RF_TransmissionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_TransmissionType : type};
  return (requestedType == uci::type::accessorType::rF_TransmissionType) ? boost::make_unique<RF_TransmissionType>() : nullptr;
}

/**  */
namespace RF_TransmissionType_Names {

constexpr const char* Extern_Type_Name{"RF_TransmissionType"};
constexpr const char* RF_ThreadInstanceIndex_Name{"RF_ThreadInstanceIndex"};
constexpr const char* AntennaResource_Name{"AntennaResource"};
constexpr const char* ResourceAccessPriority_Name{"ResourceAccessPriority"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* Polarization_Name{"Polarization"};
constexpr const char* MaximumTransmitERP_Name{"MaximumTransmitERP"};
constexpr const char* BlankingLimit_Name{"BlankingLimit"};
constexpr const char* MinimumReceiveSensitivity_Name{"MinimumReceiveSensitivity"};
constexpr const char* PercentInterruptable_Name{"PercentInterruptable"};

} // namespace RF_TransmissionType_Names

void RF_TransmissionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_TransmissionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RF_TransmissionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RF_TransmissionType_Names::RF_ThreadInstanceIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_TransmissionType::RF_ThreadInstanceIndex& boundedList = accessor.getRF_ThreadInstanceIndex();
        const uci::type::RF_TransmissionType::RF_ThreadInstanceIndex::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedIntValue(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + RF_TransmissionType_Names::AntennaResource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_TransmissionType::AntennaResource& boundedList = accessor.getAntennaResource();
        const uci::type::RF_TransmissionType::AntennaResource::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AntennaAndResourceInstanceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RF_TransmissionType_Names::ResourceAccessPriority_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResourceAccessPriority(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + RF_TransmissionType_Names::Frequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_TransmissionType::Frequency& boundedList = accessor.getFrequency();
        const uci::type::RF_TransmissionType::Frequency::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RF_TransmissionType_Names::Polarization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_TransmissionType::Polarization& boundedList = accessor.getPolarization();
        const uci::type::RF_TransmissionType::Polarization::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PolarizationControlType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RF_TransmissionType_Names::MaximumTransmitERP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumTransmitERP(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RF_TransmissionType_Names::BlankingLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_TransmissionType::BlankingLimit& boundedList = accessor.getBlankingLimit();
        const uci::type::RF_TransmissionType::BlankingLimit::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::BlankingLimitType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RF_TransmissionType_Names::MinimumReceiveSensitivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumReceiveSensitivity(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RF_TransmissionType_Names::PercentInterruptable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentInterruptable(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string RF_TransmissionType::serialize(const uci::type::RF_TransmissionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RF_TransmissionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RF_TransmissionType_Names::Extern_Type_Name);
  }
  {
    const uci::type::RF_TransmissionType::RF_ThreadInstanceIndex& boundedList = accessor.getRF_ThreadInstanceIndex();
    for (uci::type::RF_TransmissionType::RF_ThreadInstanceIndex::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(boundedList.at(i), node, RF_TransmissionType_Names::RF_ThreadInstanceIndex_Name);
    }
  }
  {
    const uci::type::RF_TransmissionType::AntennaResource& boundedList = accessor.getAntennaResource();
    for (uci::type::RF_TransmissionType::AntennaResource::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AntennaAndResourceInstanceType::serialize(boundedList.at(i), node, RF_TransmissionType_Names::AntennaResource_Name);
    }
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getResourceAccessPriority(), node, RF_TransmissionType_Names::ResourceAccessPriority_Name);
  {
    const uci::type::RF_TransmissionType::Frequency& boundedList = accessor.getFrequency();
    for (uci::type::RF_TransmissionType::Frequency::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FrequencyRangeType::serialize(boundedList.at(i), node, RF_TransmissionType_Names::Frequency_Name);
    }
  }
  {
    const uci::type::RF_TransmissionType::Polarization& boundedList = accessor.getPolarization();
    for (uci::type::RF_TransmissionType::Polarization::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PolarizationControlType::serialize(boundedList.at(i), node, RF_TransmissionType_Names::Polarization_Name);
    }
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaximumTransmitERP(), node, RF_TransmissionType_Names::MaximumTransmitERP_Name);
  {
    const uci::type::RF_TransmissionType::BlankingLimit& boundedList = accessor.getBlankingLimit();
    for (uci::type::RF_TransmissionType::BlankingLimit::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::BlankingLimitType::serialize(boundedList.at(i), node, RF_TransmissionType_Names::BlankingLimit_Name);
    }
  }
  if (accessor.hasMinimumReceiveSensitivity()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinimumReceiveSensitivity(), node, RF_TransmissionType_Names::MinimumReceiveSensitivity_Name);
  }
  if (accessor.hasPercentInterruptable()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentInterruptable(), node, RF_TransmissionType_Names::PercentInterruptable_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RF_TransmissionType& RF_TransmissionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RF_TransmissionType>().release());
}

uci::type::RF_TransmissionType& RF_TransmissionType::create(const uci::type::RF_TransmissionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RF_TransmissionType> newAccessor{boost::make_unique<asb_uci::type::RF_TransmissionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RF_TransmissionType::destroy(uci::type::RF_TransmissionType& accessor) {
  delete dynamic_cast<asb_uci::type::RF_TransmissionType*>(&accessor);
}

} // namespace type

} // namespace uci

