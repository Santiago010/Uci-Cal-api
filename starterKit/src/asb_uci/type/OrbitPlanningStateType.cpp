/** @file OrbitPlanningStateType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitPlanningStateType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitTransitionSequenceType.h"
#include "../../../include/asb_uci/type/OrbitalKinematicsChoiceType.h"
#include "../../../include/asb_uci/type/SatelliteEnduranceType.h"
#include "../../../include/asb_uci/type/TLE_BaseType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitPlanningStateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitTransitionSequenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalKinematicsChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SatelliteEnduranceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TLE_BaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitPlanningStateType::OrbitPlanningStateType() = default;

OrbitPlanningStateType::~OrbitPlanningStateType() = default;

void OrbitPlanningStateType::copy(const uci::type::OrbitPlanningStateType& accessor) {
  copyImpl(accessor, false);
}

void OrbitPlanningStateType::copyImpl(const uci::type::OrbitPlanningStateType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitPlanningStateType&>(accessor);
    if (accessorImpl.hasTime()) {
      setTime(accessorImpl.getTime());
    } else {
      clearTime();
    }
    if (accessorImpl.kinematics_Accessor) {
      setKinematics(*(accessorImpl.kinematics_Accessor));
    } else {
      kinematics_Accessor.reset();
    }
    if (accessorImpl.elementSet_Accessor) {
      setElementSet(*(accessorImpl.elementSet_Accessor));
    } else {
      elementSet_Accessor.reset();
    }
    if (accessorImpl.endurance_Accessor) {
      setEndurance(*(accessorImpl.endurance_Accessor));
    } else {
      endurance_Accessor.reset();
    }
    if (accessorImpl.transition_Accessor) {
      setTransition(*(accessorImpl.transition_Accessor));
    } else {
      transition_Accessor.reset();
    }
  }
}

void OrbitPlanningStateType::reset() noexcept {
  clearTime();
  kinematics_Accessor.reset();
  elementSet_Accessor.reset();
  endurance_Accessor.reset();
  transition_Accessor.reset();
}

uci::type::DateTimeTypeValue OrbitPlanningStateType::getTime() const {
  if (time_Accessor) {
    return *time_Accessor;
  }
  throw uci::base::UCIException("Error in getTime(): An attempt was made to get an optional field that was not enabled, call hasTime() to determine if it is safe to call getTime()");
}

uci::type::OrbitPlanningStateType& OrbitPlanningStateType::setTime(uci::type::DateTimeTypeValue value) {
  time_Accessor = value;
  return *this;
}

bool OrbitPlanningStateType::hasTime() const noexcept {
  return time_Accessor.has_value();
}

uci::type::OrbitPlanningStateType& OrbitPlanningStateType::clearTime() noexcept {
  time_Accessor.reset();
  return *this;
}

uci::type::OrbitalKinematicsChoiceType& OrbitPlanningStateType::getKinematics_() const {
  if (kinematics_Accessor) {
    return *kinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getKinematics(): An attempt was made to get an optional field that was not enabled, call hasKinematics() to determine if it is safe to call getKinematics()");
}

const uci::type::OrbitalKinematicsChoiceType& OrbitPlanningStateType::getKinematics() const {
  return getKinematics_();
}

uci::type::OrbitalKinematicsChoiceType& OrbitPlanningStateType::getKinematics() {
  return getKinematics_();
}

uci::type::OrbitPlanningStateType& OrbitPlanningStateType::setKinematics(const uci::type::OrbitalKinematicsChoiceType& accessor) {
  enableKinematics();
  if (&accessor != kinematics_Accessor.get()) {
    kinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitPlanningStateType::hasKinematics() const noexcept {
  return static_cast<bool>(kinematics_Accessor);
}

uci::type::OrbitalKinematicsChoiceType& OrbitPlanningStateType::enableKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsChoiceType : type};
  if ((!kinematics_Accessor) || (kinematics_Accessor->getAccessorType() != requestedType)) {
    kinematics_Accessor = OrbitalKinematicsChoiceType::create(requestedType);
    if (!kinematics_Accessor) {
      throw uci::base::UCIException("Error in enableKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *kinematics_Accessor;
}

uci::type::OrbitPlanningStateType& OrbitPlanningStateType::clearKinematics() noexcept {
  kinematics_Accessor.reset();
  return *this;
}

uci::type::TLE_BaseType& OrbitPlanningStateType::getElementSet_() const {
  if (elementSet_Accessor) {
    return *elementSet_Accessor;
  }
  throw uci::base::UCIException("Error in getElementSet(): An attempt was made to get an optional field that was not enabled, call hasElementSet() to determine if it is safe to call getElementSet()");
}

const uci::type::TLE_BaseType& OrbitPlanningStateType::getElementSet() const {
  return getElementSet_();
}

uci::type::TLE_BaseType& OrbitPlanningStateType::getElementSet() {
  return getElementSet_();
}

uci::type::OrbitPlanningStateType& OrbitPlanningStateType::setElementSet(const uci::type::TLE_BaseType& accessor) {
  enableElementSet(accessor.getAccessorType());
  if (&accessor != elementSet_Accessor.get()) {
    elementSet_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OrbitPlanningStateType::hasElementSet() const noexcept {
  return static_cast<bool>(elementSet_Accessor);
}

uci::type::TLE_BaseType& OrbitPlanningStateType::enableElementSet(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::tLE_BaseType : type};
  if ((!elementSet_Accessor) || (elementSet_Accessor->getAccessorType() != requestedType)) {
    elementSet_Accessor = TLE_BaseType::create(requestedType);
    if (!elementSet_Accessor) {
      throw uci::base::UCIException("Error in enableElementSet(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *elementSet_Accessor;
}

uci::type::OrbitPlanningStateType& OrbitPlanningStateType::clearElementSet() noexcept {
  elementSet_Accessor.reset();
  return *this;
}

uci::type::SatelliteEnduranceType& OrbitPlanningStateType::getEndurance_() const {
  if (endurance_Accessor) {
    return *endurance_Accessor;
  }
  throw uci::base::UCIException("Error in getEndurance(): An attempt was made to get an optional field that was not enabled, call hasEndurance() to determine if it is safe to call getEndurance()");
}

const uci::type::SatelliteEnduranceType& OrbitPlanningStateType::getEndurance() const {
  return getEndurance_();
}

uci::type::SatelliteEnduranceType& OrbitPlanningStateType::getEndurance() {
  return getEndurance_();
}

uci::type::OrbitPlanningStateType& OrbitPlanningStateType::setEndurance(const uci::type::SatelliteEnduranceType& accessor) {
  enableEndurance();
  if (&accessor != endurance_Accessor.get()) {
    endurance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitPlanningStateType::hasEndurance() const noexcept {
  return static_cast<bool>(endurance_Accessor);
}

uci::type::SatelliteEnduranceType& OrbitPlanningStateType::enableEndurance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteEnduranceType : type};
  if ((!endurance_Accessor) || (endurance_Accessor->getAccessorType() != requestedType)) {
    endurance_Accessor = SatelliteEnduranceType::create(requestedType);
    if (!endurance_Accessor) {
      throw uci::base::UCIException("Error in enableEndurance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *endurance_Accessor;
}

uci::type::OrbitPlanningStateType& OrbitPlanningStateType::clearEndurance() noexcept {
  endurance_Accessor.reset();
  return *this;
}

uci::type::OrbitTransitionSequenceType& OrbitPlanningStateType::getTransition_() const {
  if (transition_Accessor) {
    return *transition_Accessor;
  }
  throw uci::base::UCIException("Error in getTransition(): An attempt was made to get an optional field that was not enabled, call hasTransition() to determine if it is safe to call getTransition()");
}

const uci::type::OrbitTransitionSequenceType& OrbitPlanningStateType::getTransition() const {
  return getTransition_();
}

uci::type::OrbitTransitionSequenceType& OrbitPlanningStateType::getTransition() {
  return getTransition_();
}

uci::type::OrbitPlanningStateType& OrbitPlanningStateType::setTransition(const uci::type::OrbitTransitionSequenceType& accessor) {
  enableTransition();
  if (&accessor != transition_Accessor.get()) {
    transition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitPlanningStateType::hasTransition() const noexcept {
  return static_cast<bool>(transition_Accessor);
}

uci::type::OrbitTransitionSequenceType& OrbitPlanningStateType::enableTransition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitTransitionSequenceType : type};
  if ((!transition_Accessor) || (transition_Accessor->getAccessorType() != requestedType)) {
    transition_Accessor = OrbitTransitionSequenceType::create(requestedType);
    if (!transition_Accessor) {
      throw uci::base::UCIException("Error in enableTransition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *transition_Accessor;
}

uci::type::OrbitPlanningStateType& OrbitPlanningStateType::clearTransition() noexcept {
  transition_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitPlanningStateType> OrbitPlanningStateType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitPlanningStateType : type};
  return (requestedType == uci::type::accessorType::orbitPlanningStateType) ? boost::make_unique<OrbitPlanningStateType>() : nullptr;
}

/**  */
namespace OrbitPlanningStateType_Names {

constexpr const char* Extern_Type_Name{"OrbitPlanningStateType"};
constexpr const char* Time_Name{"Time"};
constexpr const char* Kinematics_Name{"Kinematics"};
constexpr const char* ElementSet_Name{"ElementSet"};
constexpr const char* Endurance_Name{"Endurance"};
constexpr const char* Transition_Name{"Transition"};

} // namespace OrbitPlanningStateType_Names

void OrbitPlanningStateType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitPlanningStateType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitPlanningStateType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitPlanningStateType_Names::Time_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitPlanningStateType_Names::Kinematics_Name) {
      OrbitalKinematicsChoiceType::deserialize(valueType.second, accessor.enableKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitPlanningStateType_Names::ElementSet_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableElementSet(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitPlanningStateType_Names::Endurance_Name) {
      SatelliteEnduranceType::deserialize(valueType.second, accessor.enableEndurance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitPlanningStateType_Names::Transition_Name) {
      OrbitTransitionSequenceType::deserialize(valueType.second, accessor.enableTransition(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitPlanningStateType::serialize(const uci::type::OrbitPlanningStateType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitPlanningStateType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitPlanningStateType_Names::Extern_Type_Name);
  }
  if (accessor.hasTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTime(), node, OrbitPlanningStateType_Names::Time_Name);
  }
  if (accessor.hasKinematics()) {
    OrbitalKinematicsChoiceType::serialize(accessor.getKinematics(), node, OrbitPlanningStateType_Names::Kinematics_Name);
  }
  if (accessor.hasElementSet()) {
    TLE_BaseType::serialize(accessor.getElementSet(), node, OrbitPlanningStateType_Names::ElementSet_Name);
  }
  if (accessor.hasEndurance()) {
    SatelliteEnduranceType::serialize(accessor.getEndurance(), node, OrbitPlanningStateType_Names::Endurance_Name);
  }
  if (accessor.hasTransition()) {
    OrbitTransitionSequenceType::serialize(accessor.getTransition(), node, OrbitPlanningStateType_Names::Transition_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitPlanningStateType& OrbitPlanningStateType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitPlanningStateType>().release());
}

uci::type::OrbitPlanningStateType& OrbitPlanningStateType::create(const uci::type::OrbitPlanningStateType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitPlanningStateType> newAccessor{boost::make_unique<asb_uci::type::OrbitPlanningStateType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitPlanningStateType::destroy(uci::type::OrbitPlanningStateType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitPlanningStateType*>(&accessor);
}

} // namespace type

} // namespace uci

