/** @file DataUpdateOriginatorType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DataUpdateOriginatorType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DataUpdateSourceType.h"
#include "asb_uci/type/EmptyType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DataUpdateOriginatorType.h"
#include "uci/type/DataUpdateSourceType.h"
#include "uci/type/EmptyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DataUpdateOriginatorType::DataUpdateOriginatorType() = default;

DataUpdateOriginatorType::~DataUpdateOriginatorType() = default;

void DataUpdateOriginatorType::copy(const uci::type::DataUpdateOriginatorType& accessor) {
  copyImpl(accessor, false);
}

void DataUpdateOriginatorType::copyImpl(const uci::type::DataUpdateOriginatorType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DataUpdateOriginatorType&>(accessor);
    if (accessorImpl.all_Producers_Accessor) {
      setAll_Producers(*(accessorImpl.all_Producers_Accessor));
    } else {
      all_Producers_Accessor.reset();
    }
    if (accessorImpl.source_Accessor) {
      setSource(*(accessorImpl.source_Accessor));
    } else {
      source_Accessor.reset();
    }
  }
}

void DataUpdateOriginatorType::reset() noexcept {
  all_Producers_Accessor.reset();
  source_Accessor.reset();
}

uci::type::DataUpdateOriginatorType::DataUpdateOriginatorTypeChoice DataUpdateOriginatorType::getDataUpdateOriginatorTypeChoiceOrdinal() const noexcept {
  if (all_Producers_Accessor) {
    return DATAUPDATEORIGINATORTYPE_CHOICE_ALL_PRODUCERS;
  }
  if (source_Accessor) {
    return DATAUPDATEORIGINATORTYPE_CHOICE_SOURCE;
  }
  return DATAUPDATEORIGINATORTYPE_CHOICE_NONE;
}

uci::type::DataUpdateOriginatorType& DataUpdateOriginatorType::setDataUpdateOriginatorTypeChoiceOrdinal(uci::type::DataUpdateOriginatorType::DataUpdateOriginatorTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case DATAUPDATEORIGINATORTYPE_CHOICE_ALL_PRODUCERS:
      chooseAll_Producers("setDataUpdateOriginatorTypeChoiceOrdinal", type);
      break;
    case DATAUPDATEORIGINATORTYPE_CHOICE_SOURCE:
      chooseSource("setDataUpdateOriginatorTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setDataUpdateOriginatorTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EmptyType& DataUpdateOriginatorType::getAll_Producers_() const {
  if (all_Producers_Accessor) {
    return *all_Producers_Accessor;
  }
  throw uci::base::UCIException("Error in getAll_Producers(): An attempt was made to get an optional field that was not enabled, call hasAll_Producers() to determine if it is safe to call getAll_Producers()");
}

const uci::type::EmptyType& DataUpdateOriginatorType::getAll_Producers() const {
  return getAll_Producers_();
}

uci::type::EmptyType& DataUpdateOriginatorType::getAll_Producers() {
  return getAll_Producers_();
}

uci::type::DataUpdateOriginatorType& DataUpdateOriginatorType::setAll_Producers(const uci::type::EmptyType& value) {
  return setAll_Producers(value.c_str());
}

uci::type::DataUpdateOriginatorType& DataUpdateOriginatorType::setAll_Producers(const std::string& value) {
  return setAll_Producers(value.c_str());
}

uci::type::DataUpdateOriginatorType& DataUpdateOriginatorType::setAll_Producers(const char * value) {
  chooseAll_Producers().setStringValue(value);
  return *this;
}

bool DataUpdateOriginatorType::isAll_Producers() const noexcept {
  return static_cast<bool>(all_Producers_Accessor);
}

uci::type::EmptyType& DataUpdateOriginatorType::chooseAll_Producers(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  source_Accessor.reset();
  if (!all_Producers_Accessor) {
    all_Producers_Accessor = EmptyType::create(type);
  }
  return *all_Producers_Accessor;
}

uci::type::EmptyType& DataUpdateOriginatorType::chooseAll_Producers(uci::base::accessorType::AccessorType type) {
  return chooseAll_Producers("chooseAll_Producers", type);
}

uci::type::DataUpdateSourceType& DataUpdateOriginatorType::getSource_() const {
  if (source_Accessor) {
    return *source_Accessor;
  }
  throw uci::base::UCIException("Error in getSource(): Unable to get Source, field not selected");
}

const uci::type::DataUpdateSourceType& DataUpdateOriginatorType::getSource() const {
  return getSource_();
}

uci::type::DataUpdateSourceType& DataUpdateOriginatorType::getSource() {
  return getSource_();
}

uci::type::DataUpdateOriginatorType& DataUpdateOriginatorType::setSource(const uci::type::DataUpdateSourceType& accessor) {
  chooseSource();
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataUpdateOriginatorType::isSource() const noexcept {
  return static_cast<bool>(source_Accessor);
}

uci::type::DataUpdateSourceType& DataUpdateOriginatorType::chooseSource(const std::string& method, uci::base::accessorType::AccessorType type) {
  all_Producers_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataUpdateSourceType : type};
  if ((!source_Accessor) || (source_Accessor->getAccessorType() != requestedType)) {
    source_Accessor = DataUpdateSourceType::create(type);
    if (!source_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *source_Accessor;
}

uci::type::DataUpdateSourceType& DataUpdateOriginatorType::chooseSource(uci::base::accessorType::AccessorType type) {
  return chooseSource("chooseSource", type);
}

std::unique_ptr<DataUpdateOriginatorType> DataUpdateOriginatorType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataUpdateOriginatorType : type};
  return (requestedType == uci::type::accessorType::dataUpdateOriginatorType) ? boost::make_unique<DataUpdateOriginatorType>() : nullptr;
}

/**  */
namespace DataUpdateOriginatorType_Names {

constexpr const char* Extern_Type_Name{"DataUpdateOriginatorType"};
constexpr const char* All_Producers_Name{"All_Producers"};
constexpr const char* Source_Name{"Source"};

} // namespace DataUpdateOriginatorType_Names

void DataUpdateOriginatorType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DataUpdateOriginatorType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DataUpdateOriginatorType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DataUpdateOriginatorType_Names::All_Producers_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseAll_Producers().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + DataUpdateOriginatorType_Names::Source_Name) {
      DataUpdateSourceType::deserialize(valueType.second, accessor.chooseSource(), nodeName, nsPrefix);
    }
  }
}

std::string DataUpdateOriginatorType::serialize(const uci::type::DataUpdateOriginatorType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DataUpdateOriginatorType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DataUpdateOriginatorType_Names::Extern_Type_Name);
  }
  if (accessor.isAll_Producers()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getAll_Producers(), node, DataUpdateOriginatorType_Names::All_Producers_Name);
  } else if (accessor.isSource()) {
    DataUpdateSourceType::serialize(accessor.getSource(), node, DataUpdateOriginatorType_Names::Source_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DataUpdateOriginatorType& DataUpdateOriginatorType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DataUpdateOriginatorType>().release());
}

uci::type::DataUpdateOriginatorType& DataUpdateOriginatorType::create(const uci::type::DataUpdateOriginatorType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DataUpdateOriginatorType> newAccessor{boost::make_unique<asb_uci::type::DataUpdateOriginatorType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DataUpdateOriginatorType::destroy(uci::type::DataUpdateOriginatorType& accessor) {
  delete dynamic_cast<asb_uci::type::DataUpdateOriginatorType*>(&accessor);
}

} // namespace type

} // namespace uci

