/** @file PlanPartsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PlanPartsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityPlanPartsType.h"
#include "../../../include/asb_uci/type/OrbitPlanPartsType.h"
#include "../../../include/asb_uci/type/PlanPartsBaseType.h"
#include "../../../include/asb_uci/type/RoutePlanPartsType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityPlanPartsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitPlanPartsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanPartsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RoutePlanPartsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanPartsType::PlanPartsType() = default;

PlanPartsType::~PlanPartsType() = default;

void PlanPartsType::copy(const uci::type::PlanPartsType& accessor) {
  copyImpl(accessor, false);
}

void PlanPartsType::copyImpl(const uci::type::PlanPartsType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::planPartsType)) {
      PlanPartsBaseType::copyImpl(accessor, false);
      const auto& accessorImpl = dynamic_cast<const PlanPartsType&>(accessor);
      if (accessorImpl.activityPlan_Accessor) {
        setActivityPlan(*(accessorImpl.activityPlan_Accessor));
      } else {
        activityPlan_Accessor.reset();
      }
      if (accessorImpl.routePlan_Accessor) {
        setRoutePlan(*(accessorImpl.routePlan_Accessor));
      } else {
        routePlan_Accessor.reset();
      }
      if (accessorImpl.routeActivityPlan_Accessor) {
        setRouteActivityPlan(*(accessorImpl.routeActivityPlan_Accessor));
      } else {
        routeActivityPlan_Accessor.reset();
      }
      if (accessorImpl.orbitPlan_Accessor) {
        setOrbitPlan(*(accessorImpl.orbitPlan_Accessor));
      } else {
        orbitPlan_Accessor.reset();
      }
      if (accessorImpl.orbitActivityPlan_Accessor) {
        setOrbitActivityPlan(*(accessorImpl.orbitActivityPlan_Accessor));
      } else {
        orbitActivityPlan_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void PlanPartsType::reset() noexcept {
  PlanPartsBaseType::reset();
  activityPlan_Accessor.reset();
  routePlan_Accessor.reset();
  routeActivityPlan_Accessor.reset();
  orbitPlan_Accessor.reset();
  orbitActivityPlan_Accessor.reset();
}

uci::type::ActivityPlanPartsType& PlanPartsType::getActivityPlan_() const {
  if (activityPlan_Accessor) {
    return *activityPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityPlan(): An attempt was made to get an optional field that was not enabled, call hasActivityPlan() to determine if it is safe to call getActivityPlan()");
}

const uci::type::ActivityPlanPartsType& PlanPartsType::getActivityPlan() const {
  return getActivityPlan_();
}

uci::type::ActivityPlanPartsType& PlanPartsType::getActivityPlan() {
  return getActivityPlan_();
}

uci::type::PlanPartsType& PlanPartsType::setActivityPlan(const uci::type::ActivityPlanPartsType& accessor) {
  enableActivityPlan(accessor.getAccessorType());
  if (&accessor != activityPlan_Accessor.get()) {
    activityPlan_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PlanPartsType::hasActivityPlan() const noexcept {
  return static_cast<bool>(activityPlan_Accessor);
}

uci::type::ActivityPlanPartsType& PlanPartsType::enableActivityPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanPartsType : type};
  if ((!activityPlan_Accessor) || (activityPlan_Accessor->getAccessorType() != requestedType)) {
    activityPlan_Accessor = ActivityPlanPartsType::create(requestedType);
    if (!activityPlan_Accessor) {
      throw uci::base::UCIException("Error in enableActivityPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityPlan_Accessor;
}

uci::type::PlanPartsType& PlanPartsType::clearActivityPlan() noexcept {
  activityPlan_Accessor.reset();
  return *this;
}

uci::type::RoutePlanPartsType& PlanPartsType::getRoutePlan_() const {
  if (routePlan_Accessor) {
    return *routePlan_Accessor;
  }
  throw uci::base::UCIException("Error in getRoutePlan(): An attempt was made to get an optional field that was not enabled, call hasRoutePlan() to determine if it is safe to call getRoutePlan()");
}

const uci::type::RoutePlanPartsType& PlanPartsType::getRoutePlan() const {
  return getRoutePlan_();
}

uci::type::RoutePlanPartsType& PlanPartsType::getRoutePlan() {
  return getRoutePlan_();
}

uci::type::PlanPartsType& PlanPartsType::setRoutePlan(const uci::type::RoutePlanPartsType& accessor) {
  enableRoutePlan();
  if (&accessor != routePlan_Accessor.get()) {
    routePlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanPartsType::hasRoutePlan() const noexcept {
  return static_cast<bool>(routePlan_Accessor);
}

uci::type::RoutePlanPartsType& PlanPartsType::enableRoutePlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePlanPartsType : type};
  if ((!routePlan_Accessor) || (routePlan_Accessor->getAccessorType() != requestedType)) {
    routePlan_Accessor = RoutePlanPartsType::create(requestedType);
    if (!routePlan_Accessor) {
      throw uci::base::UCIException("Error in enableRoutePlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routePlan_Accessor;
}

uci::type::PlanPartsType& PlanPartsType::clearRoutePlan() noexcept {
  routePlan_Accessor.reset();
  return *this;
}

uci::type::ActivityPlanPartsType& PlanPartsType::getRouteActivityPlan_() const {
  if (routeActivityPlan_Accessor) {
    return *routeActivityPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteActivityPlan(): An attempt was made to get an optional field that was not enabled, call hasRouteActivityPlan() to determine if it is safe to call getRouteActivityPlan()");
}

const uci::type::ActivityPlanPartsType& PlanPartsType::getRouteActivityPlan() const {
  return getRouteActivityPlan_();
}

uci::type::ActivityPlanPartsType& PlanPartsType::getRouteActivityPlan() {
  return getRouteActivityPlan_();
}

uci::type::PlanPartsType& PlanPartsType::setRouteActivityPlan(const uci::type::ActivityPlanPartsType& accessor) {
  enableRouteActivityPlan(accessor.getAccessorType());
  if (&accessor != routeActivityPlan_Accessor.get()) {
    routeActivityPlan_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PlanPartsType::hasRouteActivityPlan() const noexcept {
  return static_cast<bool>(routeActivityPlan_Accessor);
}

uci::type::ActivityPlanPartsType& PlanPartsType::enableRouteActivityPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanPartsType : type};
  if ((!routeActivityPlan_Accessor) || (routeActivityPlan_Accessor->getAccessorType() != requestedType)) {
    routeActivityPlan_Accessor = ActivityPlanPartsType::create(requestedType);
    if (!routeActivityPlan_Accessor) {
      throw uci::base::UCIException("Error in enableRouteActivityPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeActivityPlan_Accessor;
}

uci::type::PlanPartsType& PlanPartsType::clearRouteActivityPlan() noexcept {
  routeActivityPlan_Accessor.reset();
  return *this;
}

uci::type::OrbitPlanPartsType& PlanPartsType::getOrbitPlan_() const {
  if (orbitPlan_Accessor) {
    return *orbitPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitPlan(): An attempt was made to get an optional field that was not enabled, call hasOrbitPlan() to determine if it is safe to call getOrbitPlan()");
}

const uci::type::OrbitPlanPartsType& PlanPartsType::getOrbitPlan() const {
  return getOrbitPlan_();
}

uci::type::OrbitPlanPartsType& PlanPartsType::getOrbitPlan() {
  return getOrbitPlan_();
}

uci::type::PlanPartsType& PlanPartsType::setOrbitPlan(const uci::type::OrbitPlanPartsType& accessor) {
  enableOrbitPlan();
  if (&accessor != orbitPlan_Accessor.get()) {
    orbitPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanPartsType::hasOrbitPlan() const noexcept {
  return static_cast<bool>(orbitPlan_Accessor);
}

uci::type::OrbitPlanPartsType& PlanPartsType::enableOrbitPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitPlanPartsType : type};
  if ((!orbitPlan_Accessor) || (orbitPlan_Accessor->getAccessorType() != requestedType)) {
    orbitPlan_Accessor = OrbitPlanPartsType::create(requestedType);
    if (!orbitPlan_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitPlan_Accessor;
}

uci::type::PlanPartsType& PlanPartsType::clearOrbitPlan() noexcept {
  orbitPlan_Accessor.reset();
  return *this;
}

uci::type::ActivityPlanPartsType& PlanPartsType::getOrbitActivityPlan_() const {
  if (orbitActivityPlan_Accessor) {
    return *orbitActivityPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitActivityPlan(): An attempt was made to get an optional field that was not enabled, call hasOrbitActivityPlan() to determine if it is safe to call getOrbitActivityPlan()");
}

const uci::type::ActivityPlanPartsType& PlanPartsType::getOrbitActivityPlan() const {
  return getOrbitActivityPlan_();
}

uci::type::ActivityPlanPartsType& PlanPartsType::getOrbitActivityPlan() {
  return getOrbitActivityPlan_();
}

uci::type::PlanPartsType& PlanPartsType::setOrbitActivityPlan(const uci::type::ActivityPlanPartsType& accessor) {
  enableOrbitActivityPlan(accessor.getAccessorType());
  if (&accessor != orbitActivityPlan_Accessor.get()) {
    orbitActivityPlan_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PlanPartsType::hasOrbitActivityPlan() const noexcept {
  return static_cast<bool>(orbitActivityPlan_Accessor);
}

uci::type::ActivityPlanPartsType& PlanPartsType::enableOrbitActivityPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanPartsType : type};
  if ((!orbitActivityPlan_Accessor) || (orbitActivityPlan_Accessor->getAccessorType() != requestedType)) {
    orbitActivityPlan_Accessor = ActivityPlanPartsType::create(requestedType);
    if (!orbitActivityPlan_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitActivityPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitActivityPlan_Accessor;
}

uci::type::PlanPartsType& PlanPartsType::clearOrbitActivityPlan() noexcept {
  orbitActivityPlan_Accessor.reset();
  return *this;
}

std::unique_ptr<PlanPartsType> PlanPartsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planPartsType : type};
  return std::unique_ptr<PlanPartsType>(dynamic_cast<PlanPartsType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace PlanPartsType_Names {

constexpr const char* Extern_Type_Name{"PlanPartsType"};
constexpr const char* ActivityPlan_Name{"ActivityPlan"};
constexpr const char* RoutePlan_Name{"RoutePlan"};
constexpr const char* RouteActivityPlan_Name{"RouteActivityPlan"};
constexpr const char* OrbitPlan_Name{"OrbitPlan"};
constexpr const char* OrbitActivityPlan_Name{"OrbitActivityPlan"};

} // namespace PlanPartsType_Names

void PlanPartsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanPartsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanPartsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanPartsType_Names::ActivityPlan_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableActivityPlan(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanPartsType_Names::RoutePlan_Name) {
      RoutePlanPartsType::deserialize(valueType.second, accessor.enableRoutePlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanPartsType_Names::RouteActivityPlan_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRouteActivityPlan(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanPartsType_Names::OrbitPlan_Name) {
      OrbitPlanPartsType::deserialize(valueType.second, accessor.enableOrbitPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanPartsType_Names::OrbitActivityPlan_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableOrbitActivityPlan(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  PlanPartsBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string PlanPartsType::serialize(const uci::type::PlanPartsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanPartsType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::planPartsType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanPartsType_Names::Extern_Type_Name);
    }
    PlanPartsBaseType::serialize(accessor, node, "", false, false, false);
    if (accessor.hasActivityPlan()) {
      ActivityPlanPartsType::serialize(accessor.getActivityPlan(), node, PlanPartsType_Names::ActivityPlan_Name);
    }
    if (accessor.hasRoutePlan()) {
      RoutePlanPartsType::serialize(accessor.getRoutePlan(), node, PlanPartsType_Names::RoutePlan_Name);
    }
    if (accessor.hasRouteActivityPlan()) {
      ActivityPlanPartsType::serialize(accessor.getRouteActivityPlan(), node, PlanPartsType_Names::RouteActivityPlan_Name);
    }
    if (accessor.hasOrbitPlan()) {
      OrbitPlanPartsType::serialize(accessor.getOrbitPlan(), node, PlanPartsType_Names::OrbitPlan_Name);
    }
    if (accessor.hasOrbitActivityPlan()) {
      ActivityPlanPartsType::serialize(accessor.getOrbitActivityPlan(), node, PlanPartsType_Names::OrbitActivityPlan_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanPartsType& PlanPartsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanPartsType>().release());
}

uci::type::PlanPartsType& PlanPartsType::create(const uci::type::PlanPartsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanPartsType> newAccessor{boost::make_unique<asb_uci::type::PlanPartsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanPartsType::destroy(uci::type::PlanPartsType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanPartsType*>(&accessor);
}

} // namespace type

} // namespace uci

