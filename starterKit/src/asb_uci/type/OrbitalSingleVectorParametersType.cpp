/** @file OrbitalSingleVectorParametersType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalSingleVectorParametersType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EphemerisOrbitalModelType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AreaType.h"
#include "uci/type/EphemerisOrbitalModelType.h"
#include "uci/type/OrbitalSingleVectorParametersType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalSingleVectorParametersType::OrbitalSingleVectorParametersType() = default;

OrbitalSingleVectorParametersType::~OrbitalSingleVectorParametersType() = default;

void OrbitalSingleVectorParametersType::copy(const uci::type::OrbitalSingleVectorParametersType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalSingleVectorParametersType::copyImpl(const uci::type::OrbitalSingleVectorParametersType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalSingleVectorParametersType&>(accessor);
    if (accessorImpl.hasArea()) {
      setArea(accessorImpl.getArea());
    } else {
      clearArea();
    }
    if (accessorImpl.hasMass()) {
      setMass(accessorImpl.getMass());
    } else {
      clearMass();
    }
    if (accessorImpl.orbitalModel_Accessor) {
      setOrbitalModel(*(accessorImpl.orbitalModel_Accessor));
    } else {
      orbitalModel_Accessor.reset();
    }
  }
}

void OrbitalSingleVectorParametersType::reset() noexcept {
  clearArea();
  clearMass();
  orbitalModel_Accessor.reset();
}

uci::type::AreaTypeValue OrbitalSingleVectorParametersType::getArea() const {
  if (area_Accessor) {
    return *area_Accessor;
  }
  throw uci::base::UCIException("Error in getArea(): An attempt was made to get an optional field that was not enabled, call hasArea() to determine if it is safe to call getArea()");
}

uci::type::OrbitalSingleVectorParametersType& OrbitalSingleVectorParametersType::setArea(uci::type::AreaTypeValue value) {
  area_Accessor = value;
  return *this;
}

bool OrbitalSingleVectorParametersType::hasArea() const noexcept {
  return area_Accessor.has_value();
}

uci::type::OrbitalSingleVectorParametersType& OrbitalSingleVectorParametersType::clearArea() noexcept {
  area_Accessor.reset();
  return *this;
}

xs::Double OrbitalSingleVectorParametersType::getMass() const {
  if (mass_Accessor) {
    return *mass_Accessor;
  }
  throw uci::base::UCIException("Error in getMass(): An attempt was made to get an optional field that was not enabled, call hasMass() to determine if it is safe to call getMass()");
}

uci::type::OrbitalSingleVectorParametersType& OrbitalSingleVectorParametersType::setMass(xs::Double value) {
  mass_Accessor = value;
  return *this;
}

bool OrbitalSingleVectorParametersType::hasMass() const noexcept {
  return mass_Accessor.has_value();
}

uci::type::OrbitalSingleVectorParametersType& OrbitalSingleVectorParametersType::clearMass() noexcept {
  mass_Accessor.reset();
  return *this;
}

uci::type::EphemerisOrbitalModelType& OrbitalSingleVectorParametersType::getOrbitalModel_() const {
  if (orbitalModel_Accessor) {
    return *orbitalModel_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalModel(): An attempt was made to get an optional field that was not enabled, call hasOrbitalModel() to determine if it is safe to call getOrbitalModel()");
}

const uci::type::EphemerisOrbitalModelType& OrbitalSingleVectorParametersType::getOrbitalModel() const {
  return getOrbitalModel_();
}

uci::type::EphemerisOrbitalModelType& OrbitalSingleVectorParametersType::getOrbitalModel() {
  return getOrbitalModel_();
}

uci::type::OrbitalSingleVectorParametersType& OrbitalSingleVectorParametersType::setOrbitalModel(const uci::type::EphemerisOrbitalModelType& accessor) {
  enableOrbitalModel();
  if (&accessor != orbitalModel_Accessor.get()) {
    orbitalModel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSingleVectorParametersType::hasOrbitalModel() const noexcept {
  return static_cast<bool>(orbitalModel_Accessor);
}

uci::type::EphemerisOrbitalModelType& OrbitalSingleVectorParametersType::enableOrbitalModel(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ephemerisOrbitalModelType : type};
  if ((!orbitalModel_Accessor) || (orbitalModel_Accessor->getAccessorType() != requestedType)) {
    orbitalModel_Accessor = EphemerisOrbitalModelType::create(requestedType);
    if (!orbitalModel_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitalModel(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalModel_Accessor;
}

uci::type::OrbitalSingleVectorParametersType& OrbitalSingleVectorParametersType::clearOrbitalModel() noexcept {
  orbitalModel_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalSingleVectorParametersType> OrbitalSingleVectorParametersType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSingleVectorParametersType : type};
  return (requestedType == uci::type::accessorType::orbitalSingleVectorParametersType) ? boost::make_unique<OrbitalSingleVectorParametersType>() : nullptr;
}

/**  */
namespace OrbitalSingleVectorParametersType_Names {

constexpr const char* Extern_Type_Name{"OrbitalSingleVectorParametersType"};
constexpr const char* Area_Name{"Area"};
constexpr const char* Mass_Name{"Mass"};
constexpr const char* OrbitalModel_Name{"OrbitalModel"};

} // namespace OrbitalSingleVectorParametersType_Names

void OrbitalSingleVectorParametersType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalSingleVectorParametersType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalSingleVectorParametersType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalSingleVectorParametersType_Names::Area_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setArea(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalSingleVectorParametersType_Names::Mass_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMass(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalSingleVectorParametersType_Names::OrbitalModel_Name) {
      EphemerisOrbitalModelType::deserialize(valueType.second, accessor.enableOrbitalModel(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalSingleVectorParametersType::serialize(const uci::type::OrbitalSingleVectorParametersType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalSingleVectorParametersType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalSingleVectorParametersType_Names::Extern_Type_Name);
  }
  if (accessor.hasArea()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getArea(), node, OrbitalSingleVectorParametersType_Names::Area_Name);
  }
  if (accessor.hasMass()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMass(), node, OrbitalSingleVectorParametersType_Names::Mass_Name);
  }
  if (accessor.hasOrbitalModel()) {
    EphemerisOrbitalModelType::serialize(accessor.getOrbitalModel(), node, OrbitalSingleVectorParametersType_Names::OrbitalModel_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalSingleVectorParametersType& OrbitalSingleVectorParametersType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalSingleVectorParametersType>().release());
}

uci::type::OrbitalSingleVectorParametersType& OrbitalSingleVectorParametersType::create(const uci::type::OrbitalSingleVectorParametersType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalSingleVectorParametersType> newAccessor{boost::make_unique<asb_uci::type::OrbitalSingleVectorParametersType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalSingleVectorParametersType::destroy(uci::type::OrbitalSingleVectorParametersType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalSingleVectorParametersType*>(&accessor);
}

} // namespace type

} // namespace uci

