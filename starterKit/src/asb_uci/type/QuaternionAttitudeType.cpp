/** @file QuaternionAttitudeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/QuaternionAttitudeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/QuaternionType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QuaternionAttitudeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QuaternionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

QuaternionAttitudeType::QuaternionAttitudeType()
  : attitude_Accessor{boost::make_unique<QuaternionType>()} {
}

QuaternionAttitudeType::~QuaternionAttitudeType() = default;

void QuaternionAttitudeType::copy(const uci::type::QuaternionAttitudeType& accessor) {
  copyImpl(accessor, false);
}

void QuaternionAttitudeType::copyImpl(const uci::type::QuaternionAttitudeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const QuaternionAttitudeType&>(accessor);
    setAttitude(*(accessorImpl.attitude_Accessor));
    if (accessorImpl.attitudeError_Accessor) {
      setAttitudeError(*(accessorImpl.attitudeError_Accessor));
    } else {
      attitudeError_Accessor.reset();
    }
  }
}

void QuaternionAttitudeType::reset() noexcept {
  attitude_Accessor->reset();
  attitudeError_Accessor.reset();
}

const uci::type::QuaternionType& QuaternionAttitudeType::getAttitude() const {
  return *attitude_Accessor;
}

uci::type::QuaternionType& QuaternionAttitudeType::getAttitude() {
  return *attitude_Accessor;
}

uci::type::QuaternionAttitudeType& QuaternionAttitudeType::setAttitude(const uci::type::QuaternionType& accessor) {
  if (&accessor != attitude_Accessor.get()) {
    attitude_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::QuaternionType& QuaternionAttitudeType::getAttitudeError_() const {
  if (attitudeError_Accessor) {
    return *attitudeError_Accessor;
  }
  throw uci::base::UCIException("Error in getAttitudeError(): An attempt was made to get an optional field that was not enabled, call hasAttitudeError() to determine if it is safe to call getAttitudeError()");
}

const uci::type::QuaternionType& QuaternionAttitudeType::getAttitudeError() const {
  return getAttitudeError_();
}

uci::type::QuaternionType& QuaternionAttitudeType::getAttitudeError() {
  return getAttitudeError_();
}

uci::type::QuaternionAttitudeType& QuaternionAttitudeType::setAttitudeError(const uci::type::QuaternionType& accessor) {
  enableAttitudeError();
  if (&accessor != attitudeError_Accessor.get()) {
    attitudeError_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QuaternionAttitudeType::hasAttitudeError() const noexcept {
  return static_cast<bool>(attitudeError_Accessor);
}

uci::type::QuaternionType& QuaternionAttitudeType::enableAttitudeError(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::quaternionType : type};
  if ((!attitudeError_Accessor) || (attitudeError_Accessor->getAccessorType() != requestedType)) {
    attitudeError_Accessor = QuaternionType::create(requestedType);
    if (!attitudeError_Accessor) {
      throw uci::base::UCIException("Error in enableAttitudeError(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *attitudeError_Accessor;
}

uci::type::QuaternionAttitudeType& QuaternionAttitudeType::clearAttitudeError() noexcept {
  attitudeError_Accessor.reset();
  return *this;
}

std::unique_ptr<QuaternionAttitudeType> QuaternionAttitudeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::quaternionAttitudeType : type};
  return (requestedType == uci::type::accessorType::quaternionAttitudeType) ? boost::make_unique<QuaternionAttitudeType>() : nullptr;
}

/**  */
namespace QuaternionAttitudeType_Names {

constexpr const char* Extern_Type_Name{"QuaternionAttitudeType"};
constexpr const char* Attitude_Name{"Attitude"};
constexpr const char* AttitudeError_Name{"AttitudeError"};

} // namespace QuaternionAttitudeType_Names

void QuaternionAttitudeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::QuaternionAttitudeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = QuaternionAttitudeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + QuaternionAttitudeType_Names::Attitude_Name) {
      QuaternionType::deserialize(valueType.second, accessor.getAttitude(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QuaternionAttitudeType_Names::AttitudeError_Name) {
      QuaternionType::deserialize(valueType.second, accessor.enableAttitudeError(), nodeName, nsPrefix);
    }
  }
}

std::string QuaternionAttitudeType::serialize(const uci::type::QuaternionAttitudeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? QuaternionAttitudeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, QuaternionAttitudeType_Names::Extern_Type_Name);
  }
  QuaternionType::serialize(accessor.getAttitude(), node, QuaternionAttitudeType_Names::Attitude_Name);
  if (accessor.hasAttitudeError()) {
    QuaternionType::serialize(accessor.getAttitudeError(), node, QuaternionAttitudeType_Names::AttitudeError_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::QuaternionAttitudeType& QuaternionAttitudeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::QuaternionAttitudeType>().release());
}

uci::type::QuaternionAttitudeType& QuaternionAttitudeType::create(const uci::type::QuaternionAttitudeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::QuaternionAttitudeType> newAccessor{boost::make_unique<asb_uci::type::QuaternionAttitudeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void QuaternionAttitudeType::destroy(uci::type::QuaternionAttitudeType& accessor) {
  delete dynamic_cast<asb_uci::type::QuaternionAttitudeType*>(&accessor);
}

} // namespace type

} // namespace uci

