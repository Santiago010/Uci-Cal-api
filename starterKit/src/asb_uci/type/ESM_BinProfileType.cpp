/** @file ESM_BinProfileType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ESM_BinProfileType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/ESM_BinType.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/ESM_BinProfileType.h"
#include "uci/type/ESM_BinType.h"
#include "uci/type/SubsystemID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ESM_BinProfileType::ESM_BinProfileType()
  : profileData_Accessor{boost::make_unique<ProfileData>(1, SIZE_MAX)} {
}

ESM_BinProfileType::~ESM_BinProfileType() = default;

void ESM_BinProfileType::copy(const uci::type::ESM_BinProfileType& accessor) {
  copyImpl(accessor, false);
}

void ESM_BinProfileType::copyImpl(const uci::type::ESM_BinProfileType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ESM_BinProfileType&>(accessor);
    if (accessorImpl.requestedSubsystemID_Accessor) {
      setRequestedSubsystemID(*(accessorImpl.requestedSubsystemID_Accessor));
    } else {
      requestedSubsystemID_Accessor.reset();
    }
    setScanScheduleProfileIndex(accessorImpl.scanScheduleProfileIndex_Accessor);
    if (accessorImpl.capabilityID_Accessor) {
      setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    } else {
      capabilityID_Accessor.reset();
    }
    setProfileData(*(accessorImpl.profileData_Accessor));
  }
}

void ESM_BinProfileType::reset() noexcept {
  requestedSubsystemID_Accessor.reset();
  scanScheduleProfileIndex_Accessor = 0;
  capabilityID_Accessor.reset();
  profileData_Accessor->reset();
}

uci::type::SubsystemID_Type& ESM_BinProfileType::getRequestedSubsystemID_() const {
  if (requestedSubsystemID_Accessor) {
    return *requestedSubsystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getRequestedSubsystemID(): An attempt was made to get an optional field that was not enabled, call hasRequestedSubsystemID() to determine if it is safe to call getRequestedSubsystemID()");
}

const uci::type::SubsystemID_Type& ESM_BinProfileType::getRequestedSubsystemID() const {
  return getRequestedSubsystemID_();
}

uci::type::SubsystemID_Type& ESM_BinProfileType::getRequestedSubsystemID() {
  return getRequestedSubsystemID_();
}

uci::type::ESM_BinProfileType& ESM_BinProfileType::setRequestedSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  enableRequestedSubsystemID();
  if (&accessor != requestedSubsystemID_Accessor.get()) {
    requestedSubsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_BinProfileType::hasRequestedSubsystemID() const noexcept {
  return static_cast<bool>(requestedSubsystemID_Accessor);
}

uci::type::SubsystemID_Type& ESM_BinProfileType::enableRequestedSubsystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemID_Type : type};
  if ((!requestedSubsystemID_Accessor) || (requestedSubsystemID_Accessor->getAccessorType() != requestedType)) {
    requestedSubsystemID_Accessor = SubsystemID_Type::create(requestedType);
    if (!requestedSubsystemID_Accessor) {
      throw uci::base::UCIException("Error in enableRequestedSubsystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requestedSubsystemID_Accessor;
}

uci::type::ESM_BinProfileType& ESM_BinProfileType::clearRequestedSubsystemID() noexcept {
  requestedSubsystemID_Accessor.reset();
  return *this;
}

xs::UnsignedInt ESM_BinProfileType::getScanScheduleProfileIndex() const {
  return scanScheduleProfileIndex_Accessor;
}

uci::type::ESM_BinProfileType& ESM_BinProfileType::setScanScheduleProfileIndex(xs::UnsignedInt value) {
  scanScheduleProfileIndex_Accessor = value;
  return *this;
}


uci::type::CapabilityID_Type& ESM_BinProfileType::getCapabilityID_() const {
  if (capabilityID_Accessor) {
    return *capabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasCapabilityID() to determine if it is safe to call getCapabilityID()");
}

const uci::type::CapabilityID_Type& ESM_BinProfileType::getCapabilityID() const {
  return getCapabilityID_();
}

uci::type::CapabilityID_Type& ESM_BinProfileType::getCapabilityID() {
  return getCapabilityID_();
}

uci::type::ESM_BinProfileType& ESM_BinProfileType::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableCapabilityID();
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_BinProfileType::hasCapabilityID() const noexcept {
  return static_cast<bool>(capabilityID_Accessor);
}

uci::type::CapabilityID_Type& ESM_BinProfileType::enableCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!capabilityID_Accessor) || (capabilityID_Accessor->getAccessorType() != requestedType)) {
    capabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!capabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityID_Accessor;
}

uci::type::ESM_BinProfileType& ESM_BinProfileType::clearCapabilityID() noexcept {
  capabilityID_Accessor.reset();
  return *this;
}

const uci::type::ESM_BinProfileType::ProfileData& ESM_BinProfileType::getProfileData() const {
  return *profileData_Accessor;
}

uci::type::ESM_BinProfileType::ProfileData& ESM_BinProfileType::getProfileData() {
  return *profileData_Accessor;
}

uci::type::ESM_BinProfileType& ESM_BinProfileType::setProfileData(const uci::type::ESM_BinProfileType::ProfileData& accessor) {
  if (&accessor != profileData_Accessor.get()) {
    profileData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ESM_BinProfileType> ESM_BinProfileType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_BinProfileType : type};
  return (requestedType == uci::type::accessorType::eSM_BinProfileType) ? boost::make_unique<ESM_BinProfileType>() : nullptr;
}

/**  */
namespace ESM_BinProfileType_Names {

constexpr const char* Extern_Type_Name{"ESM_BinProfileType"};
constexpr const char* RequestedSubsystemID_Name{"RequestedSubsystemID"};
constexpr const char* ScanScheduleProfileIndex_Name{"ScanScheduleProfileIndex"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* ProfileData_Name{"ProfileData"};

} // namespace ESM_BinProfileType_Names

void ESM_BinProfileType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ESM_BinProfileType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ESM_BinProfileType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ESM_BinProfileType_Names::RequestedSubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.enableRequestedSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_BinProfileType_Names::ScanScheduleProfileIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setScanScheduleProfileIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_BinProfileType_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_BinProfileType_Names::ProfileData_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ESM_BinProfileType::ProfileData& boundedList = accessor.getProfileData();
        const uci::type::ESM_BinProfileType::ProfileData::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ESM_BinType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ESM_BinProfileType::serialize(const uci::type::ESM_BinProfileType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ESM_BinProfileType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ESM_BinProfileType_Names::Extern_Type_Name);
  }
  if (accessor.hasRequestedSubsystemID()) {
    SubsystemID_Type::serialize(accessor.getRequestedSubsystemID(), node, ESM_BinProfileType_Names::RequestedSubsystemID_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getScanScheduleProfileIndex(), node, ESM_BinProfileType_Names::ScanScheduleProfileIndex_Name);
  if (accessor.hasCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getCapabilityID(), node, ESM_BinProfileType_Names::CapabilityID_Name);
  }
  {
    const uci::type::ESM_BinProfileType::ProfileData& boundedList = accessor.getProfileData();
    for (uci::type::ESM_BinProfileType::ProfileData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ESM_BinType::serialize(boundedList.at(i), node, ESM_BinProfileType_Names::ProfileData_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ESM_BinProfileType& ESM_BinProfileType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ESM_BinProfileType>().release());
}

uci::type::ESM_BinProfileType& ESM_BinProfileType::create(const uci::type::ESM_BinProfileType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ESM_BinProfileType> newAccessor{boost::make_unique<asb_uci::type::ESM_BinProfileType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ESM_BinProfileType::destroy(uci::type::ESM_BinProfileType& accessor) {
  delete dynamic_cast<asb_uci::type::ESM_BinProfileType*>(&accessor);
}

} // namespace type

} // namespace uci

