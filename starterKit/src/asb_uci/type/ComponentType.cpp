/** @file ComponentType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ComponentType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/BIT_ID_Type.h"
#include "asb_uci/type/ComponentDetailedStatusType.h"
#include "asb_uci/type/ComponentExtendedStatusPET.h"
#include "asb_uci/type/ComponentID_Type.h"
#include "asb_uci/type/ComponentStateEnum.h"
#include "asb_uci/type/SubsystemMaintenanceID_Type.h"
#include "asb_uci/type/TemperatureStatusType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/BIT_ID_Type.h"
#include "uci/type/ComponentDetailedStatusType.h"
#include "uci/type/ComponentExtendedStatusPET.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/ComponentStateEnum.h"
#include "uci/type/ComponentType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/SubsystemMaintenanceID_Type.h"
#include "uci/type/TemperatureStatusType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ComponentType::ComponentType()
  : componentID_Accessor{boost::make_unique<ComponentID_Type>()},
    componentState_Accessor{boost::make_unique<ComponentStateEnum>()},
    temperature_Accessor{boost::make_unique<Temperature>(0, SIZE_MAX)},
    bIT_ID_Accessor{boost::make_unique<BIT_ID>(0, SIZE_MAX)},
    diagnosticTestID_Accessor{boost::make_unique<DiagnosticTestID>(0, SIZE_MAX)},
    specificStatus_Accessor{boost::make_unique<SpecificStatus>(0, SIZE_MAX)} {
}

ComponentType::~ComponentType() = default;

void ComponentType::copy(const uci::type::ComponentType& accessor) {
  copyImpl(accessor, false);
}

void ComponentType::copyImpl(const uci::type::ComponentType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ComponentType&>(accessor);
    setComponentID(*(accessorImpl.componentID_Accessor));
    setComponentState(*(accessorImpl.componentState_Accessor));
    if (accessorImpl.hasDataTimestamp()) {
      setDataTimestamp(accessorImpl.getDataTimestamp());
    } else {
      clearDataTimestamp();
    }
    setTemperature(*(accessorImpl.temperature_Accessor));
    setBIT_ID(*(accessorImpl.bIT_ID_Accessor));
    if (accessorImpl.hasSubsystemCritical()) {
      setSubsystemCritical(accessorImpl.getSubsystemCritical());
    } else {
      clearSubsystemCritical();
    }
    setDiagnosticTestID(*(accessorImpl.diagnosticTestID_Accessor));
    if (accessorImpl.extendedStatus_Accessor) {
      setExtendedStatus(*(accessorImpl.extendedStatus_Accessor));
    } else {
      extendedStatus_Accessor.reset();
    }
    setSpecificStatus(*(accessorImpl.specificStatus_Accessor));
    if (accessorImpl.subsystemMaintenanceTestID_Accessor) {
      setSubsystemMaintenanceTestID(*(accessorImpl.subsystemMaintenanceTestID_Accessor));
    } else {
      subsystemMaintenanceTestID_Accessor.reset();
    }
  }
}

void ComponentType::reset() noexcept {
  componentID_Accessor->reset();
  componentState_Accessor->reset();
  clearDataTimestamp();
  temperature_Accessor->reset();
  bIT_ID_Accessor->reset();
  clearSubsystemCritical();
  diagnosticTestID_Accessor->reset();
  extendedStatus_Accessor.reset();
  specificStatus_Accessor->reset();
  subsystemMaintenanceTestID_Accessor.reset();
}

const uci::type::ComponentID_Type& ComponentType::getComponentID() const {
  return *componentID_Accessor;
}

uci::type::ComponentID_Type& ComponentType::getComponentID() {
  return *componentID_Accessor;
}

uci::type::ComponentType& ComponentType::setComponentID(const uci::type::ComponentID_Type& accessor) {
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ComponentStateEnum& ComponentType::getComponentState() const {
  return *componentState_Accessor;
}

uci::type::ComponentStateEnum& ComponentType::getComponentState() {
  return *componentState_Accessor;
}

uci::type::ComponentType& ComponentType::setComponentState(const uci::type::ComponentStateEnum& accessor) {
  if (&accessor != componentState_Accessor.get()) {
    componentState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ComponentType& ComponentType::setComponentState(uci::type::ComponentStateEnum::EnumerationItem value) {
  componentState_Accessor->setValue(value);
  return *this;
}


uci::type::DateTimeTypeValue ComponentType::getDataTimestamp() const {
  if (dataTimestamp_Accessor) {
    return *dataTimestamp_Accessor;
  }
  throw uci::base::UCIException("Error in getDataTimestamp(): An attempt was made to get an optional field that was not enabled, call hasDataTimestamp() to determine if it is safe to call getDataTimestamp()");
}

uci::type::ComponentType& ComponentType::setDataTimestamp(uci::type::DateTimeTypeValue value) {
  dataTimestamp_Accessor = value;
  return *this;
}

bool ComponentType::hasDataTimestamp() const noexcept {
  return dataTimestamp_Accessor.has_value();
}

uci::type::ComponentType& ComponentType::clearDataTimestamp() noexcept {
  dataTimestamp_Accessor.reset();
  return *this;
}

const uci::type::ComponentType::Temperature& ComponentType::getTemperature() const {
  return *temperature_Accessor;
}

uci::type::ComponentType::Temperature& ComponentType::getTemperature() {
  return *temperature_Accessor;
}

uci::type::ComponentType& ComponentType::setTemperature(const uci::type::ComponentType::Temperature& accessor) {
  if (&accessor != temperature_Accessor.get()) {
    temperature_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ComponentType::BIT_ID& ComponentType::getBIT_ID() const {
  return *bIT_ID_Accessor;
}

uci::type::ComponentType::BIT_ID& ComponentType::getBIT_ID() {
  return *bIT_ID_Accessor;
}

uci::type::ComponentType& ComponentType::setBIT_ID(const uci::type::ComponentType::BIT_ID& accessor) {
  if (&accessor != bIT_ID_Accessor.get()) {
    bIT_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean ComponentType::getSubsystemCritical() const {
  if (subsystemCritical_Accessor) {
    return *subsystemCritical_Accessor;
  }
  throw uci::base::UCIException("Error in getSubsystemCritical(): An attempt was made to get an optional field that was not enabled, call hasSubsystemCritical() to determine if it is safe to call getSubsystemCritical()");
}

uci::type::ComponentType& ComponentType::setSubsystemCritical(xs::Boolean value) {
  subsystemCritical_Accessor = value;
  return *this;
}

bool ComponentType::hasSubsystemCritical() const noexcept {
  return subsystemCritical_Accessor.has_value();
}

uci::type::ComponentType& ComponentType::clearSubsystemCritical() noexcept {
  subsystemCritical_Accessor.reset();
  return *this;
}

const uci::type::ComponentType::DiagnosticTestID& ComponentType::getDiagnosticTestID() const {
  return *diagnosticTestID_Accessor;
}

uci::type::ComponentType::DiagnosticTestID& ComponentType::getDiagnosticTestID() {
  return *diagnosticTestID_Accessor;
}

uci::type::ComponentType& ComponentType::setDiagnosticTestID(const uci::type::ComponentType::DiagnosticTestID& accessor) {
  if (&accessor != diagnosticTestID_Accessor.get()) {
    diagnosticTestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ComponentExtendedStatusPET& ComponentType::getExtendedStatus_() const {
  if (extendedStatus_Accessor) {
    return *extendedStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getExtendedStatus(): An attempt was made to get an optional field that was not enabled, call hasExtendedStatus() to determine if it is safe to call getExtendedStatus()");
}

const uci::type::ComponentExtendedStatusPET& ComponentType::getExtendedStatus() const {
  return getExtendedStatus_();
}

uci::type::ComponentExtendedStatusPET& ComponentType::getExtendedStatus() {
  return getExtendedStatus_();
}

uci::type::ComponentType& ComponentType::setExtendedStatus(const uci::type::ComponentExtendedStatusPET& accessor) {
  enableExtendedStatus(accessor.getAccessorType());
  if (&accessor != extendedStatus_Accessor.get()) {
    extendedStatus_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ComponentType::hasExtendedStatus() const noexcept {
  return static_cast<bool>(extendedStatus_Accessor);
}

uci::type::ComponentExtendedStatusPET& ComponentType::enableExtendedStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentExtendedStatusPET : type};
  if ((!extendedStatus_Accessor) || (extendedStatus_Accessor->getAccessorType() != requestedType)) {
    extendedStatus_Accessor = ComponentExtendedStatusPET::create(requestedType);
    if (!extendedStatus_Accessor) {
      throw uci::base::UCIException("Error in enableExtendedStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *extendedStatus_Accessor;
}

uci::type::ComponentType& ComponentType::clearExtendedStatus() noexcept {
  extendedStatus_Accessor.reset();
  return *this;
}

const uci::type::ComponentType::SpecificStatus& ComponentType::getSpecificStatus() const {
  return *specificStatus_Accessor;
}

uci::type::ComponentType::SpecificStatus& ComponentType::getSpecificStatus() {
  return *specificStatus_Accessor;
}

uci::type::ComponentType& ComponentType::setSpecificStatus(const uci::type::ComponentType::SpecificStatus& accessor) {
  if (&accessor != specificStatus_Accessor.get()) {
    specificStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemMaintenanceID_Type& ComponentType::getSubsystemMaintenanceTestID_() const {
  if (subsystemMaintenanceTestID_Accessor) {
    return *subsystemMaintenanceTestID_Accessor;
  }
  throw uci::base::UCIException("Error in getSubsystemMaintenanceTestID(): An attempt was made to get an optional field that was not enabled, call hasSubsystemMaintenanceTestID() to determine if it is safe to call getSubsystemMaintenanceTestID()");
}

const uci::type::SubsystemMaintenanceID_Type& ComponentType::getSubsystemMaintenanceTestID() const {
  return getSubsystemMaintenanceTestID_();
}

uci::type::SubsystemMaintenanceID_Type& ComponentType::getSubsystemMaintenanceTestID() {
  return getSubsystemMaintenanceTestID_();
}

uci::type::ComponentType& ComponentType::setSubsystemMaintenanceTestID(const uci::type::SubsystemMaintenanceID_Type& accessor) {
  enableSubsystemMaintenanceTestID();
  if (&accessor != subsystemMaintenanceTestID_Accessor.get()) {
    subsystemMaintenanceTestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ComponentType::hasSubsystemMaintenanceTestID() const noexcept {
  return static_cast<bool>(subsystemMaintenanceTestID_Accessor);
}

uci::type::SubsystemMaintenanceID_Type& ComponentType::enableSubsystemMaintenanceTestID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemMaintenanceID_Type : type};
  if ((!subsystemMaintenanceTestID_Accessor) || (subsystemMaintenanceTestID_Accessor->getAccessorType() != requestedType)) {
    subsystemMaintenanceTestID_Accessor = SubsystemMaintenanceID_Type::create(requestedType);
    if (!subsystemMaintenanceTestID_Accessor) {
      throw uci::base::UCIException("Error in enableSubsystemMaintenanceTestID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subsystemMaintenanceTestID_Accessor;
}

uci::type::ComponentType& ComponentType::clearSubsystemMaintenanceTestID() noexcept {
  subsystemMaintenanceTestID_Accessor.reset();
  return *this;
}

std::unique_ptr<ComponentType> ComponentType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentType : type};
  return (requestedType == uci::type::accessorType::componentType) ? boost::make_unique<ComponentType>() : nullptr;
}

/**  */
namespace ComponentType_Names {

constexpr const char* Extern_Type_Name{"ComponentType"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* ComponentState_Name{"ComponentState"};
constexpr const char* DataTimestamp_Name{"DataTimestamp"};
constexpr const char* Temperature_Name{"Temperature"};
constexpr const char* BIT_ID_Name{"BIT_ID"};
constexpr const char* SubsystemCritical_Name{"SubsystemCritical"};
constexpr const char* DiagnosticTestID_Name{"DiagnosticTestID"};
constexpr const char* ExtendedStatus_Name{"ExtendedStatus"};
constexpr const char* SpecificStatus_Name{"SpecificStatus"};
constexpr const char* SubsystemMaintenanceTestID_Name{"SubsystemMaintenanceTestID"};

} // namespace ComponentType_Names

void ComponentType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ComponentType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ComponentType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ComponentType_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.getComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentType_Names::ComponentState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getComponentState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::DataTimestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDataTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::Temperature_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ComponentType::Temperature& boundedList = accessor.getTemperature();
        const uci::type::ComponentType::Temperature::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::BIT_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ComponentType::BIT_ID& boundedList = accessor.getBIT_ID();
        const uci::type::ComponentType::BIT_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::BIT_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::SubsystemCritical_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSubsystemCritical(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::DiagnosticTestID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ComponentType::DiagnosticTestID& boundedList = accessor.getDiagnosticTestID();
        const uci::type::ComponentType::DiagnosticTestID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::BIT_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::ExtendedStatus_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableExtendedStatus(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentType_Names::SpecificStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ComponentType::SpecificStatus& boundedList = accessor.getSpecificStatus();
        const uci::type::ComponentType::SpecificStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::SubsystemMaintenanceTestID_Name) {
      SubsystemMaintenanceID_Type::deserialize(valueType.second, accessor.enableSubsystemMaintenanceTestID(), nodeName, nsPrefix);
    }
  }
}

std::string ComponentType::serialize(const uci::type::ComponentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ComponentType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ComponentType_Names::Extern_Type_Name);
  }
  ComponentID_Type::serialize(accessor.getComponentID(), node, ComponentType_Names::ComponentID_Name);
  ComponentStateEnum::serialize(accessor.getComponentState(), node, ComponentType_Names::ComponentState_Name, false);
  if (accessor.hasDataTimestamp()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getDataTimestamp(), node, ComponentType_Names::DataTimestamp_Name);
  }
  {
    const uci::type::ComponentType::Temperature& boundedList = accessor.getTemperature();
    for (uci::type::ComponentType::Temperature::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::TemperatureStatusType::serialize(boundedList.at(i), node, ComponentType_Names::Temperature_Name);
    }
  }
  {
    const uci::type::ComponentType::BIT_ID& boundedList = accessor.getBIT_ID();
    for (uci::type::ComponentType::BIT_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::BIT_ID_Type::serialize(boundedList.at(i), node, ComponentType_Names::BIT_ID_Name);
    }
  }
  if (accessor.hasSubsystemCritical()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSubsystemCritical(), node, ComponentType_Names::SubsystemCritical_Name);
  }
  {
    const uci::type::ComponentType::DiagnosticTestID& boundedList = accessor.getDiagnosticTestID();
    for (uci::type::ComponentType::DiagnosticTestID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::BIT_ID_Type::serialize(boundedList.at(i), node, ComponentType_Names::DiagnosticTestID_Name);
    }
  }
  if (accessor.hasExtendedStatus()) {
    ComponentExtendedStatusPET::serialize(accessor.getExtendedStatus(), node, ComponentType_Names::ExtendedStatus_Name);
  }
  {
    const uci::type::ComponentType::SpecificStatus& boundedList = accessor.getSpecificStatus();
    for (uci::type::ComponentType::SpecificStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ComponentDetailedStatusType::serialize(boundedList.at(i), node, ComponentType_Names::SpecificStatus_Name);
    }
  }
  if (accessor.hasSubsystemMaintenanceTestID()) {
    SubsystemMaintenanceID_Type::serialize(accessor.getSubsystemMaintenanceTestID(), node, ComponentType_Names::SubsystemMaintenanceTestID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ComponentType& ComponentType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ComponentType>().release());
}

uci::type::ComponentType& ComponentType::create(const uci::type::ComponentType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ComponentType> newAccessor{boost::make_unique<asb_uci::type::ComponentType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ComponentType::destroy(uci::type::ComponentType& accessor) {
  delete dynamic_cast<asb_uci::type::ComponentType*>(&accessor);
}

} // namespace type

} // namespace uci

