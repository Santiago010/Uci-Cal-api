/** @file ECEF_SensorKinematicsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ECEF_SensorKinematicsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ECEF_KinematicsType.h"
#include "../../../include/asb_uci/type/QuaternionAttitudeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_KinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_SensorKinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QuaternionAttitudeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ECEF_SensorKinematicsType::ECEF_SensorKinematicsType()
  : sensorKinematics_Accessor{boost::make_unique<ECEF_KinematicsType>()} {
}

ECEF_SensorKinematicsType::~ECEF_SensorKinematicsType() = default;

void ECEF_SensorKinematicsType::copy(const uci::type::ECEF_SensorKinematicsType& accessor) {
  copyImpl(accessor, false);
}

void ECEF_SensorKinematicsType::copyImpl(const uci::type::ECEF_SensorKinematicsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ECEF_SensorKinematicsType&>(accessor);
    setTimestamp(accessorImpl.timestamp_Accessor);
    setSensorKinematics(*(accessorImpl.sensorKinematics_Accessor));
    if (accessorImpl.sensorAttitude_Accessor) {
      setSensorAttitude(*(accessorImpl.sensorAttitude_Accessor));
    } else {
      sensorAttitude_Accessor.reset();
    }
  }
}

void ECEF_SensorKinematicsType::reset() noexcept {
  timestamp_Accessor = 0;
  sensorKinematics_Accessor->reset();
  sensorAttitude_Accessor.reset();
}

uci::type::DateTimeTypeValue ECEF_SensorKinematicsType::getTimestamp() const {
  return timestamp_Accessor;
}

uci::type::ECEF_SensorKinematicsType& ECEF_SensorKinematicsType::setTimestamp(uci::type::DateTimeTypeValue value) {
  timestamp_Accessor = value;
  return *this;
}


const uci::type::ECEF_KinematicsType& ECEF_SensorKinematicsType::getSensorKinematics() const {
  return *sensorKinematics_Accessor;
}

uci::type::ECEF_KinematicsType& ECEF_SensorKinematicsType::getSensorKinematics() {
  return *sensorKinematics_Accessor;
}

uci::type::ECEF_SensorKinematicsType& ECEF_SensorKinematicsType::setSensorKinematics(const uci::type::ECEF_KinematicsType& accessor) {
  if (&accessor != sensorKinematics_Accessor.get()) {
    sensorKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::QuaternionAttitudeType& ECEF_SensorKinematicsType::getSensorAttitude_() const {
  if (sensorAttitude_Accessor) {
    return *sensorAttitude_Accessor;
  }
  throw uci::base::UCIException("Error in getSensorAttitude(): An attempt was made to get an optional field that was not enabled, call hasSensorAttitude() to determine if it is safe to call getSensorAttitude()");
}

const uci::type::QuaternionAttitudeType& ECEF_SensorKinematicsType::getSensorAttitude() const {
  return getSensorAttitude_();
}

uci::type::QuaternionAttitudeType& ECEF_SensorKinematicsType::getSensorAttitude() {
  return getSensorAttitude_();
}

uci::type::ECEF_SensorKinematicsType& ECEF_SensorKinematicsType::setSensorAttitude(const uci::type::QuaternionAttitudeType& accessor) {
  enableSensorAttitude();
  if (&accessor != sensorAttitude_Accessor.get()) {
    sensorAttitude_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_SensorKinematicsType::hasSensorAttitude() const noexcept {
  return static_cast<bool>(sensorAttitude_Accessor);
}

uci::type::QuaternionAttitudeType& ECEF_SensorKinematicsType::enableSensorAttitude(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::quaternionAttitudeType : type};
  if ((!sensorAttitude_Accessor) || (sensorAttitude_Accessor->getAccessorType() != requestedType)) {
    sensorAttitude_Accessor = QuaternionAttitudeType::create(requestedType);
    if (!sensorAttitude_Accessor) {
      throw uci::base::UCIException("Error in enableSensorAttitude(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sensorAttitude_Accessor;
}

uci::type::ECEF_SensorKinematicsType& ECEF_SensorKinematicsType::clearSensorAttitude() noexcept {
  sensorAttitude_Accessor.reset();
  return *this;
}

std::unique_ptr<ECEF_SensorKinematicsType> ECEF_SensorKinematicsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_SensorKinematicsType : type};
  return (requestedType == uci::type::accessorType::eCEF_SensorKinematicsType) ? boost::make_unique<ECEF_SensorKinematicsType>() : nullptr;
}

/**  */
namespace ECEF_SensorKinematicsType_Names {

constexpr const char* Extern_Type_Name{"ECEF_SensorKinematicsType"};
constexpr const char* Timestamp_Name{"Timestamp"};
constexpr const char* SensorKinematics_Name{"SensorKinematics"};
constexpr const char* SensorAttitude_Name{"SensorAttitude"};

} // namespace ECEF_SensorKinematicsType_Names

void ECEF_SensorKinematicsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ECEF_SensorKinematicsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ECEF_SensorKinematicsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ECEF_SensorKinematicsType_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_SensorKinematicsType_Names::SensorKinematics_Name) {
      ECEF_KinematicsType::deserialize(valueType.second, accessor.getSensorKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_SensorKinematicsType_Names::SensorAttitude_Name) {
      QuaternionAttitudeType::deserialize(valueType.second, accessor.enableSensorAttitude(), nodeName, nsPrefix);
    }
  }
}

std::string ECEF_SensorKinematicsType::serialize(const uci::type::ECEF_SensorKinematicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ECEF_SensorKinematicsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ECEF_SensorKinematicsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, ECEF_SensorKinematicsType_Names::Timestamp_Name);
  ECEF_KinematicsType::serialize(accessor.getSensorKinematics(), node, ECEF_SensorKinematicsType_Names::SensorKinematics_Name);
  if (accessor.hasSensorAttitude()) {
    QuaternionAttitudeType::serialize(accessor.getSensorAttitude(), node, ECEF_SensorKinematicsType_Names::SensorAttitude_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ECEF_SensorKinematicsType& ECEF_SensorKinematicsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ECEF_SensorKinematicsType>().release());
}

uci::type::ECEF_SensorKinematicsType& ECEF_SensorKinematicsType::create(const uci::type::ECEF_SensorKinematicsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ECEF_SensorKinematicsType> newAccessor{boost::make_unique<asb_uci::type::ECEF_SensorKinematicsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ECEF_SensorKinematicsType::destroy(uci::type::ECEF_SensorKinematicsType& accessor) {
  delete dynamic_cast<asb_uci::type::ECEF_SensorKinematicsType*>(&accessor);
}

} // namespace type

} // namespace uci

