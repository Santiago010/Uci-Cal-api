/** @file CommLink16MissionInfoWordsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommLink16MissionInfoWordsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16MissionInfoWordsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_NetNumberType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_TrackNumberType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommLink16MissionInfoWordsType::CommLink16MissionInfoWordsType() = default;

CommLink16MissionInfoWordsType::~CommLink16MissionInfoWordsType() = default;

void CommLink16MissionInfoWordsType::copy(const uci::type::CommLink16MissionInfoWordsType& accessor) {
  copyImpl(accessor, false);
}

void CommLink16MissionInfoWordsType::copyImpl(const uci::type::CommLink16MissionInfoWordsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommLink16MissionInfoWordsType&>(accessor);
    if (accessorImpl.hasNonC2_PGA_NetNumber()) {
      setNonC2_PGA_NetNumber(accessorImpl.getNonC2_PGA_NetNumber());
    } else {
      clearNonC2_PGA_NetNumber();
    }
    if (accessorImpl.hasNonC2_PGB_NetNumber()) {
      setNonC2_PGB_NetNumber(accessorImpl.getNonC2_PGB_NetNumber());
    } else {
      clearNonC2_PGB_NetNumber();
    }
    if (accessorImpl.hasNonC2_PGA_Status()) {
      setNonC2_PGA_Status(accessorImpl.getNonC2_PGA_Status());
    } else {
      clearNonC2_PGA_Status();
    }
    if (accessorImpl.hasNonC2_PGB_Status()) {
      setNonC2_PGB_Status(accessorImpl.getNonC2_PGB_Status());
    } else {
      clearNonC2_PGB_Status();
    }
    if (accessorImpl.hasMissionCorrelatorIdentifier()) {
      setMissionCorrelatorIdentifier(accessorImpl.getMissionCorrelatorIdentifier());
    } else {
      clearMissionCorrelatorIdentifier();
    }
    if (accessorImpl.wingmanKey_Accessor) {
      setWingmanKey(*(accessorImpl.wingmanKey_Accessor));
    } else {
      wingmanKey_Accessor.reset();
    }
    if (accessorImpl.hasMissionCDR_TrackNumber()) {
      setMissionCDR_TrackNumber(accessorImpl.getMissionCDR_TrackNumber());
    } else {
      clearMissionCDR_TrackNumber();
    }
    if (accessorImpl.hasFlightLeadTrackNumber()) {
      setFlightLeadTrackNumber(accessorImpl.getFlightLeadTrackNumber());
    } else {
      clearFlightLeadTrackNumber();
    }
  }
}

void CommLink16MissionInfoWordsType::reset() noexcept {
  clearNonC2_PGA_NetNumber();
  clearNonC2_PGB_NetNumber();
  clearNonC2_PGA_Status();
  clearNonC2_PGB_Status();
  clearMissionCorrelatorIdentifier();
  wingmanKey_Accessor.reset();
  clearMissionCDR_TrackNumber();
  clearFlightLeadTrackNumber();
}

uci::type::Link16_NetNumberTypeValue CommLink16MissionInfoWordsType::getNonC2_PGA_NetNumber() const {
  if (nonC2_PGA_NetNumber_Accessor) {
    return *nonC2_PGA_NetNumber_Accessor;
  }
  throw uci::base::UCIException("Error in getNonC2_PGA_NetNumber(): An attempt was made to get an optional field that was not enabled, call hasNonC2_PGA_NetNumber() to determine if it is safe to call getNonC2_PGA_NetNumber()");
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::setNonC2_PGA_NetNumber(uci::type::Link16_NetNumberTypeValue value) {
  nonC2_PGA_NetNumber_Accessor = value;
  return *this;
}

bool CommLink16MissionInfoWordsType::hasNonC2_PGA_NetNumber() const noexcept {
  return nonC2_PGA_NetNumber_Accessor.has_value();
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::clearNonC2_PGA_NetNumber() noexcept {
  nonC2_PGA_NetNumber_Accessor.reset();
  return *this;
}

uci::type::Link16_NetNumberTypeValue CommLink16MissionInfoWordsType::getNonC2_PGB_NetNumber() const {
  if (nonC2_PGB_NetNumber_Accessor) {
    return *nonC2_PGB_NetNumber_Accessor;
  }
  throw uci::base::UCIException("Error in getNonC2_PGB_NetNumber(): An attempt was made to get an optional field that was not enabled, call hasNonC2_PGB_NetNumber() to determine if it is safe to call getNonC2_PGB_NetNumber()");
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::setNonC2_PGB_NetNumber(uci::type::Link16_NetNumberTypeValue value) {
  nonC2_PGB_NetNumber_Accessor = value;
  return *this;
}

bool CommLink16MissionInfoWordsType::hasNonC2_PGB_NetNumber() const noexcept {
  return nonC2_PGB_NetNumber_Accessor.has_value();
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::clearNonC2_PGB_NetNumber() noexcept {
  nonC2_PGB_NetNumber_Accessor.reset();
  return *this;
}

xs::Boolean CommLink16MissionInfoWordsType::getNonC2_PGA_Status() const {
  if (nonC2_PGA_Status_Accessor) {
    return *nonC2_PGA_Status_Accessor;
  }
  throw uci::base::UCIException("Error in getNonC2_PGA_Status(): An attempt was made to get an optional field that was not enabled, call hasNonC2_PGA_Status() to determine if it is safe to call getNonC2_PGA_Status()");
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::setNonC2_PGA_Status(xs::Boolean value) {
  nonC2_PGA_Status_Accessor = value;
  return *this;
}

bool CommLink16MissionInfoWordsType::hasNonC2_PGA_Status() const noexcept {
  return nonC2_PGA_Status_Accessor.has_value();
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::clearNonC2_PGA_Status() noexcept {
  nonC2_PGA_Status_Accessor.reset();
  return *this;
}

xs::Boolean CommLink16MissionInfoWordsType::getNonC2_PGB_Status() const {
  if (nonC2_PGB_Status_Accessor) {
    return *nonC2_PGB_Status_Accessor;
  }
  throw uci::base::UCIException("Error in getNonC2_PGB_Status(): An attempt was made to get an optional field that was not enabled, call hasNonC2_PGB_Status() to determine if it is safe to call getNonC2_PGB_Status()");
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::setNonC2_PGB_Status(xs::Boolean value) {
  nonC2_PGB_Status_Accessor = value;
  return *this;
}

bool CommLink16MissionInfoWordsType::hasNonC2_PGB_Status() const noexcept {
  return nonC2_PGB_Status_Accessor.has_value();
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::clearNonC2_PGB_Status() noexcept {
  nonC2_PGB_Status_Accessor.reset();
  return *this;
}

xs::UnsignedByte CommLink16MissionInfoWordsType::getMissionCorrelatorIdentifier() const {
  if (missionCorrelatorIdentifier_Accessor) {
    return *missionCorrelatorIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionCorrelatorIdentifier(): An attempt was made to get an optional field that was not enabled, call hasMissionCorrelatorIdentifier() to determine if it is safe to call getMissionCorrelatorIdentifier()");
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::setMissionCorrelatorIdentifier(xs::UnsignedByte value) {
  missionCorrelatorIdentifier_Accessor = value;
  return *this;
}

bool CommLink16MissionInfoWordsType::hasMissionCorrelatorIdentifier() const noexcept {
  return missionCorrelatorIdentifier_Accessor.has_value();
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::clearMissionCorrelatorIdentifier() noexcept {
  missionCorrelatorIdentifier_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& CommLink16MissionInfoWordsType::getWingmanKey_() const {
  if (wingmanKey_Accessor) {
    return *wingmanKey_Accessor;
  }
  throw uci::base::UCIException("Error in getWingmanKey(): An attempt was made to get an optional field that was not enabled, call hasWingmanKey() to determine if it is safe to call getWingmanKey()");
}

const uci::type::ForeignKeyType& CommLink16MissionInfoWordsType::getWingmanKey() const {
  return getWingmanKey_();
}

uci::type::ForeignKeyType& CommLink16MissionInfoWordsType::getWingmanKey() {
  return getWingmanKey_();
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::setWingmanKey(const uci::type::ForeignKeyType& accessor) {
  enableWingmanKey(accessor.getAccessorType());
  if (&accessor != wingmanKey_Accessor.get()) {
    wingmanKey_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CommLink16MissionInfoWordsType::hasWingmanKey() const noexcept {
  return static_cast<bool>(wingmanKey_Accessor);
}

uci::type::ForeignKeyType& CommLink16MissionInfoWordsType::enableWingmanKey(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!wingmanKey_Accessor) || (wingmanKey_Accessor->getAccessorType() != requestedType)) {
    wingmanKey_Accessor = ForeignKeyType::create(requestedType);
    if (!wingmanKey_Accessor) {
      throw uci::base::UCIException("Error in enableWingmanKey(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *wingmanKey_Accessor;
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::clearWingmanKey() noexcept {
  wingmanKey_Accessor.reset();
  return *this;
}

uci::type::Link16_TrackNumberTypeValue CommLink16MissionInfoWordsType::getMissionCDR_TrackNumber() const {
  if (missionCDR_TrackNumber_Accessor) {
    return *missionCDR_TrackNumber_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionCDR_TrackNumber(): An attempt was made to get an optional field that was not enabled, call hasMissionCDR_TrackNumber() to determine if it is safe to call getMissionCDR_TrackNumber()");
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::setMissionCDR_TrackNumber(uci::type::Link16_TrackNumberTypeValue value) {
  missionCDR_TrackNumber_Accessor = value;
  return *this;
}

bool CommLink16MissionInfoWordsType::hasMissionCDR_TrackNumber() const noexcept {
  return missionCDR_TrackNumber_Accessor.has_value();
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::clearMissionCDR_TrackNumber() noexcept {
  missionCDR_TrackNumber_Accessor.reset();
  return *this;
}

uci::type::Link16_TrackNumberTypeValue CommLink16MissionInfoWordsType::getFlightLeadTrackNumber() const {
  if (flightLeadTrackNumber_Accessor) {
    return *flightLeadTrackNumber_Accessor;
  }
  throw uci::base::UCIException("Error in getFlightLeadTrackNumber(): An attempt was made to get an optional field that was not enabled, call hasFlightLeadTrackNumber() to determine if it is safe to call getFlightLeadTrackNumber()");
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::setFlightLeadTrackNumber(uci::type::Link16_TrackNumberTypeValue value) {
  flightLeadTrackNumber_Accessor = value;
  return *this;
}

bool CommLink16MissionInfoWordsType::hasFlightLeadTrackNumber() const noexcept {
  return flightLeadTrackNumber_Accessor.has_value();
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::clearFlightLeadTrackNumber() noexcept {
  flightLeadTrackNumber_Accessor.reset();
  return *this;
}

std::unique_ptr<CommLink16MissionInfoWordsType> CommLink16MissionInfoWordsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16MissionInfoWordsType : type};
  return (requestedType == uci::type::accessorType::commLink16MissionInfoWordsType) ? boost::make_unique<CommLink16MissionInfoWordsType>() : nullptr;
}

/**  */
namespace CommLink16MissionInfoWordsType_Names {

constexpr const char* Extern_Type_Name{"CommLink16MissionInfoWordsType"};
constexpr const char* NonC2_PGA_NetNumber_Name{"NonC2_PGA_NetNumber"};
constexpr const char* NonC2_PGB_NetNumber_Name{"NonC2_PGB_NetNumber"};
constexpr const char* NonC2_PGA_Status_Name{"NonC2_PGA_Status"};
constexpr const char* NonC2_PGB_Status_Name{"NonC2_PGB_Status"};
constexpr const char* MissionCorrelatorIdentifier_Name{"MissionCorrelatorIdentifier"};
constexpr const char* WingmanKey_Name{"WingmanKey"};
constexpr const char* MissionCDR_TrackNumber_Name{"MissionCDR_TrackNumber"};
constexpr const char* FlightLeadTrackNumber_Name{"FlightLeadTrackNumber"};

} // namespace CommLink16MissionInfoWordsType_Names

void CommLink16MissionInfoWordsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommLink16MissionInfoWordsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommLink16MissionInfoWordsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommLink16MissionInfoWordsType_Names::NonC2_PGA_NetNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNonC2_PGA_NetNumber(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16MissionInfoWordsType_Names::NonC2_PGB_NetNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNonC2_PGB_NetNumber(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16MissionInfoWordsType_Names::NonC2_PGA_Status_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNonC2_PGA_Status(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16MissionInfoWordsType_Names::NonC2_PGB_Status_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNonC2_PGB_Status(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16MissionInfoWordsType_Names::MissionCorrelatorIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionCorrelatorIdentifier(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16MissionInfoWordsType_Names::WingmanKey_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableWingmanKey(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommLink16MissionInfoWordsType_Names::MissionCDR_TrackNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionCDR_TrackNumber(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16MissionInfoWordsType_Names::FlightLeadTrackNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFlightLeadTrackNumber(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    }
  }
}

std::string CommLink16MissionInfoWordsType::serialize(const uci::type::CommLink16MissionInfoWordsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommLink16MissionInfoWordsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommLink16MissionInfoWordsType_Names::Extern_Type_Name);
  }
  if (accessor.hasNonC2_PGA_NetNumber()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getNonC2_PGA_NetNumber(), node, CommLink16MissionInfoWordsType_Names::NonC2_PGA_NetNumber_Name);
  }
  if (accessor.hasNonC2_PGB_NetNumber()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getNonC2_PGB_NetNumber(), node, CommLink16MissionInfoWordsType_Names::NonC2_PGB_NetNumber_Name);
  }
  if (accessor.hasNonC2_PGA_Status()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getNonC2_PGA_Status(), node, CommLink16MissionInfoWordsType_Names::NonC2_PGA_Status_Name);
  }
  if (accessor.hasNonC2_PGB_Status()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getNonC2_PGB_Status(), node, CommLink16MissionInfoWordsType_Names::NonC2_PGB_Status_Name);
  }
  if (accessor.hasMissionCorrelatorIdentifier()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getMissionCorrelatorIdentifier(), node, CommLink16MissionInfoWordsType_Names::MissionCorrelatorIdentifier_Name);
  }
  if (accessor.hasWingmanKey()) {
    ForeignKeyType::serialize(accessor.getWingmanKey(), node, CommLink16MissionInfoWordsType_Names::WingmanKey_Name);
  }
  if (accessor.hasMissionCDR_TrackNumber()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getMissionCDR_TrackNumber(), node, CommLink16MissionInfoWordsType_Names::MissionCDR_TrackNumber_Name);
  }
  if (accessor.hasFlightLeadTrackNumber()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getFlightLeadTrackNumber(), node, CommLink16MissionInfoWordsType_Names::FlightLeadTrackNumber_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommLink16MissionInfoWordsType>().release());
}

uci::type::CommLink16MissionInfoWordsType& CommLink16MissionInfoWordsType::create(const uci::type::CommLink16MissionInfoWordsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommLink16MissionInfoWordsType> newAccessor{boost::make_unique<asb_uci::type::CommLink16MissionInfoWordsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommLink16MissionInfoWordsType::destroy(uci::type::CommLink16MissionInfoWordsType& accessor) {
  delete dynamic_cast<asb_uci::type::CommLink16MissionInfoWordsType*>(&accessor);
}

} // namespace type

} // namespace uci

