/** @file PropagatorChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PropagatorChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PropagatorType.h"
#include "../../../include/asb_uci/type/VCM_PropagatorType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PropagatorChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PropagatorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VCM_PropagatorType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PropagatorChoiceType::PropagatorChoiceType() = default;

PropagatorChoiceType::~PropagatorChoiceType() = default;

void PropagatorChoiceType::copy(const uci::type::PropagatorChoiceType& accessor) {
  copyImpl(accessor, false);
}

void PropagatorChoiceType::copyImpl(const uci::type::PropagatorChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PropagatorChoiceType&>(accessor);
    if (accessorImpl.generalPropagator_Accessor) {
      setGeneralPropagator(*(accessorImpl.generalPropagator_Accessor));
    } else {
      generalPropagator_Accessor.reset();
    }
    if (accessorImpl.vCM_Propagator_Accessor) {
      setVCM_Propagator(*(accessorImpl.vCM_Propagator_Accessor));
    } else {
      vCM_Propagator_Accessor.reset();
    }
  }
}

void PropagatorChoiceType::reset() noexcept {
  generalPropagator_Accessor.reset();
  vCM_Propagator_Accessor.reset();
}

uci::type::PropagatorChoiceType::PropagatorChoiceTypeChoice PropagatorChoiceType::getPropagatorChoiceTypeChoiceOrdinal() const noexcept {
  if (generalPropagator_Accessor) {
    return PROPAGATORCHOICETYPE_CHOICE_GENERALPROPAGATOR;
  }
  if (vCM_Propagator_Accessor) {
    return PROPAGATORCHOICETYPE_CHOICE_VCM_PROPAGATOR;
  }
  return PROPAGATORCHOICETYPE_CHOICE_NONE;
}

uci::type::PropagatorChoiceType& PropagatorChoiceType::setPropagatorChoiceTypeChoiceOrdinal(uci::type::PropagatorChoiceType::PropagatorChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PROPAGATORCHOICETYPE_CHOICE_GENERALPROPAGATOR:
      chooseGeneralPropagator("setPropagatorChoiceTypeChoiceOrdinal", type);
      break;
    case PROPAGATORCHOICETYPE_CHOICE_VCM_PROPAGATOR:
      chooseVCM_Propagator("setPropagatorChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPropagatorChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PropagatorType& PropagatorChoiceType::getGeneralPropagator_() const {
  if (generalPropagator_Accessor) {
    return *generalPropagator_Accessor;
  }
  throw uci::base::UCIException("Error in getGeneralPropagator(): Unable to get GeneralPropagator, field not selected");
}

const uci::type::PropagatorType& PropagatorChoiceType::getGeneralPropagator() const {
  return getGeneralPropagator_();
}

uci::type::PropagatorType& PropagatorChoiceType::getGeneralPropagator() {
  return getGeneralPropagator_();
}

uci::type::PropagatorChoiceType& PropagatorChoiceType::setGeneralPropagator(const uci::type::PropagatorType& accessor) {
  chooseGeneralPropagator();
  if (&accessor != generalPropagator_Accessor.get()) {
    generalPropagator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PropagatorChoiceType::isGeneralPropagator() const noexcept {
  return static_cast<bool>(generalPropagator_Accessor);
}

uci::type::PropagatorType& PropagatorChoiceType::chooseGeneralPropagator(const std::string& method, uci::base::accessorType::AccessorType type) {
  vCM_Propagator_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::propagatorType : type};
  if ((!generalPropagator_Accessor) || (generalPropagator_Accessor->getAccessorType() != requestedType)) {
    generalPropagator_Accessor = PropagatorType::create(type);
    if (!generalPropagator_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *generalPropagator_Accessor;
}

uci::type::PropagatorType& PropagatorChoiceType::chooseGeneralPropagator(uci::base::accessorType::AccessorType type) {
  return chooseGeneralPropagator("chooseGeneralPropagator", type);
}

uci::type::VCM_PropagatorType& PropagatorChoiceType::getVCM_Propagator_() const {
  if (vCM_Propagator_Accessor) {
    return *vCM_Propagator_Accessor;
  }
  throw uci::base::UCIException("Error in getVCM_Propagator(): Unable to get VCM_Propagator, field not selected");
}

const uci::type::VCM_PropagatorType& PropagatorChoiceType::getVCM_Propagator() const {
  return getVCM_Propagator_();
}

uci::type::VCM_PropagatorType& PropagatorChoiceType::getVCM_Propagator() {
  return getVCM_Propagator_();
}

uci::type::PropagatorChoiceType& PropagatorChoiceType::setVCM_Propagator(const uci::type::VCM_PropagatorType& accessor) {
  chooseVCM_Propagator();
  if (&accessor != vCM_Propagator_Accessor.get()) {
    vCM_Propagator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PropagatorChoiceType::isVCM_Propagator() const noexcept {
  return static_cast<bool>(vCM_Propagator_Accessor);
}

uci::type::VCM_PropagatorType& PropagatorChoiceType::chooseVCM_Propagator(const std::string& method, uci::base::accessorType::AccessorType type) {
  generalPropagator_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vCM_PropagatorType : type};
  if ((!vCM_Propagator_Accessor) || (vCM_Propagator_Accessor->getAccessorType() != requestedType)) {
    vCM_Propagator_Accessor = VCM_PropagatorType::create(type);
    if (!vCM_Propagator_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vCM_Propagator_Accessor;
}

uci::type::VCM_PropagatorType& PropagatorChoiceType::chooseVCM_Propagator(uci::base::accessorType::AccessorType type) {
  return chooseVCM_Propagator("chooseVCM_Propagator", type);
}

std::unique_ptr<PropagatorChoiceType> PropagatorChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::propagatorChoiceType : type};
  return (requestedType == uci::type::accessorType::propagatorChoiceType) ? boost::make_unique<PropagatorChoiceType>() : nullptr;
}

/**  */
namespace PropagatorChoiceType_Names {

constexpr const char* Extern_Type_Name{"PropagatorChoiceType"};
constexpr const char* GeneralPropagator_Name{"GeneralPropagator"};
constexpr const char* VCM_Propagator_Name{"VCM_Propagator"};

} // namespace PropagatorChoiceType_Names

void PropagatorChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PropagatorChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PropagatorChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PropagatorChoiceType_Names::GeneralPropagator_Name) {
      PropagatorType::deserialize(valueType.second, accessor.chooseGeneralPropagator(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PropagatorChoiceType_Names::VCM_Propagator_Name) {
      VCM_PropagatorType::deserialize(valueType.second, accessor.chooseVCM_Propagator(), nodeName, nsPrefix);
    }
  }
}

std::string PropagatorChoiceType::serialize(const uci::type::PropagatorChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PropagatorChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PropagatorChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isGeneralPropagator()) {
    PropagatorType::serialize(accessor.getGeneralPropagator(), node, PropagatorChoiceType_Names::GeneralPropagator_Name);
  } else if (accessor.isVCM_Propagator()) {
    VCM_PropagatorType::serialize(accessor.getVCM_Propagator(), node, PropagatorChoiceType_Names::VCM_Propagator_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PropagatorChoiceType& PropagatorChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PropagatorChoiceType>().release());
}

uci::type::PropagatorChoiceType& PropagatorChoiceType::create(const uci::type::PropagatorChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PropagatorChoiceType> newAccessor{boost::make_unique<asb_uci::type::PropagatorChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PropagatorChoiceType::destroy(uci::type::PropagatorChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::PropagatorChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

