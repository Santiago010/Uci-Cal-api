/** @file PO_ComponentSettingsFocalPlaneArrayScanDirectionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentSettingsFocalPlaneArrayScanDirectionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentControlsB_Type.h"
#include "../../../include/asb_uci/type/RelativeDirectionEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentControlsB_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentSettingsFocalPlaneArrayScanDirectionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RelativeDirectionEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsFocalPlaneArrayScanDirectionType::PO_ComponentSettingsFocalPlaneArrayScanDirectionType() = default;

PO_ComponentSettingsFocalPlaneArrayScanDirectionType::~PO_ComponentSettingsFocalPlaneArrayScanDirectionType() = default;

void PO_ComponentSettingsFocalPlaneArrayScanDirectionType::copy(const uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsFocalPlaneArrayScanDirectionType::copyImpl(const uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsFocalPlaneArrayScanDirectionType&>(accessor);
    if (accessorImpl.directionSetting_Accessor) {
      setDirectionSetting(*(accessorImpl.directionSetting_Accessor));
    } else {
      directionSetting_Accessor.reset();
    }
    if (accessorImpl.directionControls_Accessor) {
      setDirectionControls(*(accessorImpl.directionControls_Accessor));
    } else {
      directionControls_Accessor.reset();
    }
  }
}

void PO_ComponentSettingsFocalPlaneArrayScanDirectionType::reset() noexcept {
  directionSetting_Accessor.reset();
  directionControls_Accessor.reset();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType::PO_ComponentSettingsFocalPlaneArrayScanDirectionTypeChoice PO_ComponentSettingsFocalPlaneArrayScanDirectionType::getPO_ComponentSettingsFocalPlaneArrayScanDirectionTypeChoiceOrdinal() const noexcept {
  if (directionSetting_Accessor) {
    return PO_COMPONENTSETTINGSFOCALPLANEARRAYSCANDIRECTIONTYPE_CHOICE_DIRECTIONSETTING;
  }
  if (directionControls_Accessor) {
    return PO_COMPONENTSETTINGSFOCALPLANEARRAYSCANDIRECTIONTYPE_CHOICE_DIRECTIONCONTROLS;
  }
  return PO_COMPONENTSETTINGSFOCALPLANEARRAYSCANDIRECTIONTYPE_CHOICE_NONE;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::setPO_ComponentSettingsFocalPlaneArrayScanDirectionTypeChoiceOrdinal(uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType::PO_ComponentSettingsFocalPlaneArrayScanDirectionTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PO_COMPONENTSETTINGSFOCALPLANEARRAYSCANDIRECTIONTYPE_CHOICE_DIRECTIONSETTING:
      chooseDirectionSetting("setPO_ComponentSettingsFocalPlaneArrayScanDirectionTypeChoiceOrdinal", type);
      break;
    case PO_COMPONENTSETTINGSFOCALPLANEARRAYSCANDIRECTIONTYPE_CHOICE_DIRECTIONCONTROLS:
      chooseDirectionControls("setPO_ComponentSettingsFocalPlaneArrayScanDirectionTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPO_ComponentSettingsFocalPlaneArrayScanDirectionTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::RelativeDirectionEnum& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::getDirectionSetting_() const {
  if (directionSetting_Accessor) {
    return *directionSetting_Accessor;
  }
  throw uci::base::UCIException("Error in getDirectionSetting(): Unable to get DirectionSetting, field not selected");
}

const uci::type::RelativeDirectionEnum& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::getDirectionSetting() const {
  return getDirectionSetting_();
}

uci::type::RelativeDirectionEnum& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::getDirectionSetting() {
  return getDirectionSetting_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::setDirectionSetting(const uci::type::RelativeDirectionEnum& accessor) {
  chooseDirectionSetting();
  if (&accessor != directionSetting_Accessor.get()) {
    directionSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::setDirectionSetting(uci::type::RelativeDirectionEnum::EnumerationItem value) {
  chooseDirectionSetting().setValue(value);
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayScanDirectionType::isDirectionSetting() const noexcept {
  return static_cast<bool>(directionSetting_Accessor);
}

uci::type::RelativeDirectionEnum& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::chooseDirectionSetting(const std::string& method, uci::base::accessorType::AccessorType type) {
  directionControls_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativeDirectionEnum : type};
  if ((!directionSetting_Accessor) || (directionSetting_Accessor->getAccessorType() != requestedType)) {
    directionSetting_Accessor = RelativeDirectionEnum::create(type);
    if (!directionSetting_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *directionSetting_Accessor;
}

uci::type::RelativeDirectionEnum& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::chooseDirectionSetting(uci::base::accessorType::AccessorType type) {
  return chooseDirectionSetting("chooseDirectionSetting", type);
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::getDirectionControls_() const {
  if (directionControls_Accessor) {
    return *directionControls_Accessor;
  }
  throw uci::base::UCIException("Error in getDirectionControls(): Unable to get DirectionControls, field not selected");
}

const uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::getDirectionControls() const {
  return getDirectionControls_();
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::getDirectionControls() {
  return getDirectionControls_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::setDirectionControls(const uci::type::ComponentControlsB_Type& accessor) {
  chooseDirectionControls();
  if (&accessor != directionControls_Accessor.get()) {
    directionControls_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayScanDirectionType::isDirectionControls() const noexcept {
  return static_cast<bool>(directionControls_Accessor);
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::chooseDirectionControls(const std::string& method, uci::base::accessorType::AccessorType type) {
  directionSetting_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControlsB_Type : type};
  if ((!directionControls_Accessor) || (directionControls_Accessor->getAccessorType() != requestedType)) {
    directionControls_Accessor = ComponentControlsB_Type::create(type);
    if (!directionControls_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *directionControls_Accessor;
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::chooseDirectionControls(uci::base::accessorType::AccessorType type) {
  return chooseDirectionControls("chooseDirectionControls", type);
}

std::unique_ptr<PO_ComponentSettingsFocalPlaneArrayScanDirectionType> PO_ComponentSettingsFocalPlaneArrayScanDirectionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayScanDirectionType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayScanDirectionType) ? boost::make_unique<PO_ComponentSettingsFocalPlaneArrayScanDirectionType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsFocalPlaneArrayScanDirectionType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsFocalPlaneArrayScanDirectionType"};
constexpr const char* DirectionSetting_Name{"DirectionSetting"};
constexpr const char* DirectionControls_Name{"DirectionControls"};

} // namespace PO_ComponentSettingsFocalPlaneArrayScanDirectionType_Names

void PO_ComponentSettingsFocalPlaneArrayScanDirectionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsFocalPlaneArrayScanDirectionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayScanDirectionType_Names::DirectionSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseDirectionSetting().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayScanDirectionType_Names::DirectionControls_Name) {
      ComponentControlsB_Type::deserialize(valueType.second, accessor.chooseDirectionControls(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentSettingsFocalPlaneArrayScanDirectionType::serialize(const uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsFocalPlaneArrayScanDirectionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsFocalPlaneArrayScanDirectionType_Names::Extern_Type_Name);
  }
  if (accessor.isDirectionSetting()) {
    RelativeDirectionEnum::serialize(accessor.getDirectionSetting(), node, PO_ComponentSettingsFocalPlaneArrayScanDirectionType_Names::DirectionSetting_Name, false);
  } else if (accessor.isDirectionControls()) {
    ComponentControlsB_Type::serialize(accessor.getDirectionControls(), node, PO_ComponentSettingsFocalPlaneArrayScanDirectionType_Names::DirectionControls_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType>().release());
}

uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& PO_ComponentSettingsFocalPlaneArrayScanDirectionType::create(const uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsFocalPlaneArrayScanDirectionType::destroy(uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType*>(&accessor);
}

} // namespace type

} // namespace uci

