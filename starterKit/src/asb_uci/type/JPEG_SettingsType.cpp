/** @file JPEG_SettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/JPEG_SettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/JPEG_WaveletTransformType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/JPEG_SettingsType.h"
#include "uci/type/JPEG_WaveletTransformType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

JPEG_SettingsType::JPEG_SettingsType() = default;

JPEG_SettingsType::~JPEG_SettingsType() = default;

void JPEG_SettingsType::copy(const uci::type::JPEG_SettingsType& accessor) {
  copyImpl(accessor, false);
}

void JPEG_SettingsType::copyImpl(const uci::type::JPEG_SettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const JPEG_SettingsType&>(accessor);
    if (accessorImpl.hasCompressionRatio()) {
      setCompressionRatio(accessorImpl.getCompressionRatio());
    } else {
      clearCompressionRatio();
    }
    if (accessorImpl.hasPeakSNR()) {
      setPeakSNR(accessorImpl.getPeakSNR());
    } else {
      clearPeakSNR();
    }
    if (accessorImpl.hasRateDistortionSlope()) {
      setRateDistortionSlope(accessorImpl.getRateDistortionSlope());
    } else {
      clearRateDistortionSlope();
    }
    if (accessorImpl.waveletTransform_Accessor) {
      setWaveletTransform(*(accessorImpl.waveletTransform_Accessor));
    } else {
      waveletTransform_Accessor.reset();
    }
  }
}

void JPEG_SettingsType::reset() noexcept {
  clearCompressionRatio();
  clearPeakSNR();
  clearRateDistortionSlope();
  waveletTransform_Accessor.reset();
}

xs::Float JPEG_SettingsType::getCompressionRatio() const {
  if (compressionRatio_Accessor) {
    return *compressionRatio_Accessor;
  }
  throw uci::base::UCIException("Error in getCompressionRatio(): An attempt was made to get an optional field that was not enabled, call hasCompressionRatio() to determine if it is safe to call getCompressionRatio()");
}

uci::type::JPEG_SettingsType& JPEG_SettingsType::setCompressionRatio(xs::Float value) {
  compressionRatio_Accessor = value;
  return *this;
}

bool JPEG_SettingsType::hasCompressionRatio() const noexcept {
  return compressionRatio_Accessor.has_value();
}

uci::type::JPEG_SettingsType& JPEG_SettingsType::clearCompressionRatio() noexcept {
  compressionRatio_Accessor.reset();
  return *this;
}

xs::Float JPEG_SettingsType::getPeakSNR() const {
  if (peakSNR_Accessor) {
    return *peakSNR_Accessor;
  }
  throw uci::base::UCIException("Error in getPeakSNR(): An attempt was made to get an optional field that was not enabled, call hasPeakSNR() to determine if it is safe to call getPeakSNR()");
}

uci::type::JPEG_SettingsType& JPEG_SettingsType::setPeakSNR(xs::Float value) {
  peakSNR_Accessor = value;
  return *this;
}

bool JPEG_SettingsType::hasPeakSNR() const noexcept {
  return peakSNR_Accessor.has_value();
}

uci::type::JPEG_SettingsType& JPEG_SettingsType::clearPeakSNR() noexcept {
  peakSNR_Accessor.reset();
  return *this;
}

xs::Float JPEG_SettingsType::getRateDistortionSlope() const {
  if (rateDistortionSlope_Accessor) {
    return *rateDistortionSlope_Accessor;
  }
  throw uci::base::UCIException("Error in getRateDistortionSlope(): An attempt was made to get an optional field that was not enabled, call hasRateDistortionSlope() to determine if it is safe to call getRateDistortionSlope()");
}

uci::type::JPEG_SettingsType& JPEG_SettingsType::setRateDistortionSlope(xs::Float value) {
  rateDistortionSlope_Accessor = value;
  return *this;
}

bool JPEG_SettingsType::hasRateDistortionSlope() const noexcept {
  return rateDistortionSlope_Accessor.has_value();
}

uci::type::JPEG_SettingsType& JPEG_SettingsType::clearRateDistortionSlope() noexcept {
  rateDistortionSlope_Accessor.reset();
  return *this;
}

uci::type::JPEG_WaveletTransformType& JPEG_SettingsType::getWaveletTransform_() const {
  if (waveletTransform_Accessor) {
    return *waveletTransform_Accessor;
  }
  throw uci::base::UCIException("Error in getWaveletTransform(): An attempt was made to get an optional field that was not enabled, call hasWaveletTransform() to determine if it is safe to call getWaveletTransform()");
}

const uci::type::JPEG_WaveletTransformType& JPEG_SettingsType::getWaveletTransform() const {
  return getWaveletTransform_();
}

uci::type::JPEG_WaveletTransformType& JPEG_SettingsType::getWaveletTransform() {
  return getWaveletTransform_();
}

uci::type::JPEG_SettingsType& JPEG_SettingsType::setWaveletTransform(const uci::type::JPEG_WaveletTransformType& accessor) {
  enableWaveletTransform();
  if (&accessor != waveletTransform_Accessor.get()) {
    waveletTransform_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool JPEG_SettingsType::hasWaveletTransform() const noexcept {
  return static_cast<bool>(waveletTransform_Accessor);
}

uci::type::JPEG_WaveletTransformType& JPEG_SettingsType::enableWaveletTransform(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::jPEG_WaveletTransformType : type};
  if ((!waveletTransform_Accessor) || (waveletTransform_Accessor->getAccessorType() != requestedType)) {
    waveletTransform_Accessor = JPEG_WaveletTransformType::create(requestedType);
    if (!waveletTransform_Accessor) {
      throw uci::base::UCIException("Error in enableWaveletTransform(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *waveletTransform_Accessor;
}

uci::type::JPEG_SettingsType& JPEG_SettingsType::clearWaveletTransform() noexcept {
  waveletTransform_Accessor.reset();
  return *this;
}

std::unique_ptr<JPEG_SettingsType> JPEG_SettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::jPEG_SettingsType : type};
  return (requestedType == uci::type::accessorType::jPEG_SettingsType) ? boost::make_unique<JPEG_SettingsType>() : nullptr;
}

/**  */
namespace JPEG_SettingsType_Names {

constexpr const char* Extern_Type_Name{"JPEG_SettingsType"};
constexpr const char* CompressionRatio_Name{"CompressionRatio"};
constexpr const char* PeakSNR_Name{"PeakSNR"};
constexpr const char* RateDistortionSlope_Name{"RateDistortionSlope"};
constexpr const char* WaveletTransform_Name{"WaveletTransform"};

} // namespace JPEG_SettingsType_Names

void JPEG_SettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::JPEG_SettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = JPEG_SettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + JPEG_SettingsType_Names::CompressionRatio_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCompressionRatio(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + JPEG_SettingsType_Names::PeakSNR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeakSNR(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + JPEG_SettingsType_Names::RateDistortionSlope_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRateDistortionSlope(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + JPEG_SettingsType_Names::WaveletTransform_Name) {
      JPEG_WaveletTransformType::deserialize(valueType.second, accessor.enableWaveletTransform(), nodeName, nsPrefix);
    }
  }
}

std::string JPEG_SettingsType::serialize(const uci::type::JPEG_SettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? JPEG_SettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, JPEG_SettingsType_Names::Extern_Type_Name);
  }
  if (accessor.hasCompressionRatio()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getCompressionRatio(), node, JPEG_SettingsType_Names::CompressionRatio_Name);
  }
  if (accessor.hasPeakSNR()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getPeakSNR(), node, JPEG_SettingsType_Names::PeakSNR_Name);
  }
  if (accessor.hasRateDistortionSlope()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getRateDistortionSlope(), node, JPEG_SettingsType_Names::RateDistortionSlope_Name);
  }
  if (accessor.hasWaveletTransform()) {
    JPEG_WaveletTransformType::serialize(accessor.getWaveletTransform(), node, JPEG_SettingsType_Names::WaveletTransform_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::JPEG_SettingsType& JPEG_SettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::JPEG_SettingsType>().release());
}

uci::type::JPEG_SettingsType& JPEG_SettingsType::create(const uci::type::JPEG_SettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::JPEG_SettingsType> newAccessor{boost::make_unique<asb_uci::type::JPEG_SettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void JPEG_SettingsType::destroy(uci::type::JPEG_SettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::JPEG_SettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

