/** @file AtmosphericDragModelType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AtmosphericDragModelType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AtmosphereModelEnum.h"
#include "asb_uci/type/DragCoefficientChoiceType.h"
#include "asb_uci/type/SpaceWeatherDataChoiceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AtmosphereModelEnum.h"
#include "uci/type/AtmosphericDragModelType.h"
#include "uci/type/DragCoefficientChoiceType.h"
#include "uci/type/EnergyDissipationRateType.h"
#include "uci/type/SpaceWeatherDataChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AtmosphericDragModelType::AtmosphericDragModelType()
  : atmosphericDensityModel_Accessor{boost::make_unique<AtmosphereModelEnum>()} {
}

AtmosphericDragModelType::~AtmosphericDragModelType() = default;

void AtmosphericDragModelType::copy(const uci::type::AtmosphericDragModelType& accessor) {
  copyImpl(accessor, false);
}

void AtmosphericDragModelType::copyImpl(const uci::type::AtmosphericDragModelType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AtmosphericDragModelType&>(accessor);
    setAtmosphericDensityModel(*(accessorImpl.atmosphericDensityModel_Accessor));
    if (accessorImpl.spaceWeatherData_Accessor) {
      setSpaceWeatherData(*(accessorImpl.spaceWeatherData_Accessor));
    } else {
      spaceWeatherData_Accessor.reset();
    }
    if (accessorImpl.dragModelCoefficient_Accessor) {
      setDragModelCoefficient(*(accessorImpl.dragModelCoefficient_Accessor));
    } else {
      dragModelCoefficient_Accessor.reset();
    }
    if (accessorImpl.hasEnergyDissipationRate()) {
      setEnergyDissipationRate(accessorImpl.getEnergyDissipationRate());
    } else {
      clearEnergyDissipationRate();
    }
  }
}

void AtmosphericDragModelType::reset() noexcept {
  atmosphericDensityModel_Accessor->reset();
  spaceWeatherData_Accessor.reset();
  dragModelCoefficient_Accessor.reset();
  clearEnergyDissipationRate();
}

const uci::type::AtmosphereModelEnum& AtmosphericDragModelType::getAtmosphericDensityModel() const {
  return *atmosphericDensityModel_Accessor;
}

uci::type::AtmosphereModelEnum& AtmosphericDragModelType::getAtmosphericDensityModel() {
  return *atmosphericDensityModel_Accessor;
}

uci::type::AtmosphericDragModelType& AtmosphericDragModelType::setAtmosphericDensityModel(const uci::type::AtmosphereModelEnum& accessor) {
  if (&accessor != atmosphericDensityModel_Accessor.get()) {
    atmosphericDensityModel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AtmosphericDragModelType& AtmosphericDragModelType::setAtmosphericDensityModel(uci::type::AtmosphereModelEnum::EnumerationItem value) {
  atmosphericDensityModel_Accessor->setValue(value);
  return *this;
}


uci::type::SpaceWeatherDataChoiceType& AtmosphericDragModelType::getSpaceWeatherData_() const {
  if (spaceWeatherData_Accessor) {
    return *spaceWeatherData_Accessor;
  }
  throw uci::base::UCIException("Error in getSpaceWeatherData(): An attempt was made to get an optional field that was not enabled, call hasSpaceWeatherData() to determine if it is safe to call getSpaceWeatherData()");
}

const uci::type::SpaceWeatherDataChoiceType& AtmosphericDragModelType::getSpaceWeatherData() const {
  return getSpaceWeatherData_();
}

uci::type::SpaceWeatherDataChoiceType& AtmosphericDragModelType::getSpaceWeatherData() {
  return getSpaceWeatherData_();
}

uci::type::AtmosphericDragModelType& AtmosphericDragModelType::setSpaceWeatherData(const uci::type::SpaceWeatherDataChoiceType& accessor) {
  enableSpaceWeatherData();
  if (&accessor != spaceWeatherData_Accessor.get()) {
    spaceWeatherData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AtmosphericDragModelType::hasSpaceWeatherData() const noexcept {
  return static_cast<bool>(spaceWeatherData_Accessor);
}

uci::type::SpaceWeatherDataChoiceType& AtmosphericDragModelType::enableSpaceWeatherData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::spaceWeatherDataChoiceType : type};
  if ((!spaceWeatherData_Accessor) || (spaceWeatherData_Accessor->getAccessorType() != requestedType)) {
    spaceWeatherData_Accessor = SpaceWeatherDataChoiceType::create(requestedType);
    if (!spaceWeatherData_Accessor) {
      throw uci::base::UCIException("Error in enableSpaceWeatherData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *spaceWeatherData_Accessor;
}

uci::type::AtmosphericDragModelType& AtmosphericDragModelType::clearSpaceWeatherData() noexcept {
  spaceWeatherData_Accessor.reset();
  return *this;
}

uci::type::DragCoefficientChoiceType& AtmosphericDragModelType::getDragModelCoefficient_() const {
  if (dragModelCoefficient_Accessor) {
    return *dragModelCoefficient_Accessor;
  }
  throw uci::base::UCIException("Error in getDragModelCoefficient(): An attempt was made to get an optional field that was not enabled, call hasDragModelCoefficient() to determine if it is safe to call getDragModelCoefficient()");
}

const uci::type::DragCoefficientChoiceType& AtmosphericDragModelType::getDragModelCoefficient() const {
  return getDragModelCoefficient_();
}

uci::type::DragCoefficientChoiceType& AtmosphericDragModelType::getDragModelCoefficient() {
  return getDragModelCoefficient_();
}

uci::type::AtmosphericDragModelType& AtmosphericDragModelType::setDragModelCoefficient(const uci::type::DragCoefficientChoiceType& accessor) {
  enableDragModelCoefficient();
  if (&accessor != dragModelCoefficient_Accessor.get()) {
    dragModelCoefficient_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AtmosphericDragModelType::hasDragModelCoefficient() const noexcept {
  return static_cast<bool>(dragModelCoefficient_Accessor);
}

uci::type::DragCoefficientChoiceType& AtmosphericDragModelType::enableDragModelCoefficient(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dragCoefficientChoiceType : type};
  if ((!dragModelCoefficient_Accessor) || (dragModelCoefficient_Accessor->getAccessorType() != requestedType)) {
    dragModelCoefficient_Accessor = DragCoefficientChoiceType::create(requestedType);
    if (!dragModelCoefficient_Accessor) {
      throw uci::base::UCIException("Error in enableDragModelCoefficient(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dragModelCoefficient_Accessor;
}

uci::type::AtmosphericDragModelType& AtmosphericDragModelType::clearDragModelCoefficient() noexcept {
  dragModelCoefficient_Accessor.reset();
  return *this;
}

uci::type::EnergyDissipationRateTypeValue AtmosphericDragModelType::getEnergyDissipationRate() const {
  if (energyDissipationRate_Accessor) {
    return *energyDissipationRate_Accessor;
  }
  throw uci::base::UCIException("Error in getEnergyDissipationRate(): An attempt was made to get an optional field that was not enabled, call hasEnergyDissipationRate() to determine if it is safe to call getEnergyDissipationRate()");
}

uci::type::AtmosphericDragModelType& AtmosphericDragModelType::setEnergyDissipationRate(uci::type::EnergyDissipationRateTypeValue value) {
  energyDissipationRate_Accessor = value;
  return *this;
}

bool AtmosphericDragModelType::hasEnergyDissipationRate() const noexcept {
  return energyDissipationRate_Accessor.has_value();
}

uci::type::AtmosphericDragModelType& AtmosphericDragModelType::clearEnergyDissipationRate() noexcept {
  energyDissipationRate_Accessor.reset();
  return *this;
}

std::unique_ptr<AtmosphericDragModelType> AtmosphericDragModelType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::atmosphericDragModelType : type};
  return (requestedType == uci::type::accessorType::atmosphericDragModelType) ? boost::make_unique<AtmosphericDragModelType>() : nullptr;
}

/**  */
namespace AtmosphericDragModelType_Names {

constexpr const char* Extern_Type_Name{"AtmosphericDragModelType"};
constexpr const char* AtmosphericDensityModel_Name{"AtmosphericDensityModel"};
constexpr const char* SpaceWeatherData_Name{"SpaceWeatherData"};
constexpr const char* DragModelCoefficient_Name{"DragModelCoefficient"};
constexpr const char* EnergyDissipationRate_Name{"EnergyDissipationRate"};

} // namespace AtmosphericDragModelType_Names

void AtmosphericDragModelType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AtmosphericDragModelType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AtmosphericDragModelType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AtmosphericDragModelType_Names::AtmosphericDensityModel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAtmosphericDensityModel().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AtmosphericDragModelType_Names::SpaceWeatherData_Name) {
      SpaceWeatherDataChoiceType::deserialize(valueType.second, accessor.enableSpaceWeatherData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AtmosphericDragModelType_Names::DragModelCoefficient_Name) {
      DragCoefficientChoiceType::deserialize(valueType.second, accessor.enableDragModelCoefficient(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AtmosphericDragModelType_Names::EnergyDissipationRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEnergyDissipationRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string AtmosphericDragModelType::serialize(const uci::type::AtmosphericDragModelType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AtmosphericDragModelType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AtmosphericDragModelType_Names::Extern_Type_Name);
  }
  AtmosphereModelEnum::serialize(accessor.getAtmosphericDensityModel(), node, AtmosphericDragModelType_Names::AtmosphericDensityModel_Name, false);
  if (accessor.hasSpaceWeatherData()) {
    SpaceWeatherDataChoiceType::serialize(accessor.getSpaceWeatherData(), node, AtmosphericDragModelType_Names::SpaceWeatherData_Name);
  }
  if (accessor.hasDragModelCoefficient()) {
    DragCoefficientChoiceType::serialize(accessor.getDragModelCoefficient(), node, AtmosphericDragModelType_Names::DragModelCoefficient_Name);
  }
  if (accessor.hasEnergyDissipationRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEnergyDissipationRate(), node, AtmosphericDragModelType_Names::EnergyDissipationRate_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AtmosphericDragModelType& AtmosphericDragModelType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AtmosphericDragModelType>().release());
}

uci::type::AtmosphericDragModelType& AtmosphericDragModelType::create(const uci::type::AtmosphericDragModelType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AtmosphericDragModelType> newAccessor{boost::make_unique<asb_uci::type::AtmosphericDragModelType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AtmosphericDragModelType::destroy(uci::type::AtmosphericDragModelType& accessor) {
  delete dynamic_cast<asb_uci::type::AtmosphericDragModelType*>(&accessor);
}

} // namespace type

} // namespace uci

