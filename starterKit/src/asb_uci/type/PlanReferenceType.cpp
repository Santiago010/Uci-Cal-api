/** @file PlanReferenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlanReferenceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActionPlanID_Type.h"
#include "asb_uci/type/ActivityPlanID_Type.h"
#include "asb_uci/type/CommScheduleAllocationID_Type.h"
#include "asb_uci/type/EffectPlanID_Type.h"
#include "asb_uci/type/MissionPlanID_Type.h"
#include "asb_uci/type/OrbitActivityPlanID_Type.h"
#include "asb_uci/type/OrbitPlanID_Type.h"
#include "asb_uci/type/ResponsePlanID_Type.h"
#include "asb_uci/type/RouteActivityPlanID_Type.h"
#include "asb_uci/type/RoutePlanID_Type.h"
#include "asb_uci/type/TaskPlanID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActionPlanID_Type.h"
#include "uci/type/ActivityPlanID_Type.h"
#include "uci/type/CommScheduleAllocationID_Type.h"
#include "uci/type/EffectPlanID_Type.h"
#include "uci/type/MissionPlanID_Type.h"
#include "uci/type/OrbitActivityPlanID_Type.h"
#include "uci/type/OrbitPlanID_Type.h"
#include "uci/type/PlanReferenceType.h"
#include "uci/type/ResponsePlanID_Type.h"
#include "uci/type/RouteActivityPlanID_Type.h"
#include "uci/type/RoutePlanID_Type.h"
#include "uci/type/TaskPlanID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanReferenceType::PlanReferenceType() = default;

PlanReferenceType::~PlanReferenceType() = default;

void PlanReferenceType::copy(const uci::type::PlanReferenceType& accessor) {
  copyImpl(accessor, false);
}

void PlanReferenceType::copyImpl(const uci::type::PlanReferenceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlanReferenceType&>(accessor);
    if (accessorImpl.missionPlanID_Accessor) {
      setMissionPlanID(*(accessorImpl.missionPlanID_Accessor));
    } else {
      missionPlanID_Accessor.reset();
    }
    if (accessorImpl.taskPlanID_Accessor) {
      setTaskPlanID(*(accessorImpl.taskPlanID_Accessor));
    } else {
      taskPlanID_Accessor.reset();
    }
    if (accessorImpl.orbitPlanID_Accessor) {
      setOrbitPlanID(*(accessorImpl.orbitPlanID_Accessor));
    } else {
      orbitPlanID_Accessor.reset();
    }
    if (accessorImpl.orbitActivityPlanID_Accessor) {
      setOrbitActivityPlanID(*(accessorImpl.orbitActivityPlanID_Accessor));
    } else {
      orbitActivityPlanID_Accessor.reset();
    }
    if (accessorImpl.routePlanID_Accessor) {
      setRoutePlanID(*(accessorImpl.routePlanID_Accessor));
    } else {
      routePlanID_Accessor.reset();
    }
    if (accessorImpl.routeActivityPlanID_Accessor) {
      setRouteActivityPlanID(*(accessorImpl.routeActivityPlanID_Accessor));
    } else {
      routeActivityPlanID_Accessor.reset();
    }
    if (accessorImpl.commScheduleAllocationID_Accessor) {
      setCommScheduleAllocationID(*(accessorImpl.commScheduleAllocationID_Accessor));
    } else {
      commScheduleAllocationID_Accessor.reset();
    }
    if (accessorImpl.activityPlanID_Accessor) {
      setActivityPlanID(*(accessorImpl.activityPlanID_Accessor));
    } else {
      activityPlanID_Accessor.reset();
    }
    if (accessorImpl.effectPlanID_Accessor) {
      setEffectPlanID(*(accessorImpl.effectPlanID_Accessor));
    } else {
      effectPlanID_Accessor.reset();
    }
    if (accessorImpl.actionPlanID_Accessor) {
      setActionPlanID(*(accessorImpl.actionPlanID_Accessor));
    } else {
      actionPlanID_Accessor.reset();
    }
    if (accessorImpl.responsePlanID_Accessor) {
      setResponsePlanID(*(accessorImpl.responsePlanID_Accessor));
    } else {
      responsePlanID_Accessor.reset();
    }
  }
}

void PlanReferenceType::reset() noexcept {
  missionPlanID_Accessor.reset();
  taskPlanID_Accessor.reset();
  orbitPlanID_Accessor.reset();
  orbitActivityPlanID_Accessor.reset();
  routePlanID_Accessor.reset();
  routeActivityPlanID_Accessor.reset();
  commScheduleAllocationID_Accessor.reset();
  activityPlanID_Accessor.reset();
  effectPlanID_Accessor.reset();
  actionPlanID_Accessor.reset();
  responsePlanID_Accessor.reset();
}

uci::type::MissionPlanID_Type& PlanReferenceType::getMissionPlanID_() const {
  if (missionPlanID_Accessor) {
    return *missionPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionPlanID(): An attempt was made to get an optional field that was not enabled, call hasMissionPlanID() to determine if it is safe to call getMissionPlanID()");
}

const uci::type::MissionPlanID_Type& PlanReferenceType::getMissionPlanID() const {
  return getMissionPlanID_();
}

uci::type::MissionPlanID_Type& PlanReferenceType::getMissionPlanID() {
  return getMissionPlanID_();
}

uci::type::PlanReferenceType& PlanReferenceType::setMissionPlanID(const uci::type::MissionPlanID_Type& accessor) {
  enableMissionPlanID();
  if (&accessor != missionPlanID_Accessor.get()) {
    missionPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceType::hasMissionPlanID() const noexcept {
  return static_cast<bool>(missionPlanID_Accessor);
}

uci::type::MissionPlanID_Type& PlanReferenceType::enableMissionPlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanID_Type : type};
  if ((!missionPlanID_Accessor) || (missionPlanID_Accessor->getAccessorType() != requestedType)) {
    missionPlanID_Accessor = MissionPlanID_Type::create(requestedType);
    if (!missionPlanID_Accessor) {
      throw uci::base::UCIException("Error in enableMissionPlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionPlanID_Accessor;
}

uci::type::PlanReferenceType& PlanReferenceType::clearMissionPlanID() noexcept {
  missionPlanID_Accessor.reset();
  return *this;
}

uci::type::TaskPlanID_Type& PlanReferenceType::getTaskPlanID_() const {
  if (taskPlanID_Accessor) {
    return *taskPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getTaskPlanID(): An attempt was made to get an optional field that was not enabled, call hasTaskPlanID() to determine if it is safe to call getTaskPlanID()");
}

const uci::type::TaskPlanID_Type& PlanReferenceType::getTaskPlanID() const {
  return getTaskPlanID_();
}

uci::type::TaskPlanID_Type& PlanReferenceType::getTaskPlanID() {
  return getTaskPlanID_();
}

uci::type::PlanReferenceType& PlanReferenceType::setTaskPlanID(const uci::type::TaskPlanID_Type& accessor) {
  enableTaskPlanID();
  if (&accessor != taskPlanID_Accessor.get()) {
    taskPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceType::hasTaskPlanID() const noexcept {
  return static_cast<bool>(taskPlanID_Accessor);
}

uci::type::TaskPlanID_Type& PlanReferenceType::enableTaskPlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskPlanID_Type : type};
  if ((!taskPlanID_Accessor) || (taskPlanID_Accessor->getAccessorType() != requestedType)) {
    taskPlanID_Accessor = TaskPlanID_Type::create(requestedType);
    if (!taskPlanID_Accessor) {
      throw uci::base::UCIException("Error in enableTaskPlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taskPlanID_Accessor;
}

uci::type::PlanReferenceType& PlanReferenceType::clearTaskPlanID() noexcept {
  taskPlanID_Accessor.reset();
  return *this;
}

uci::type::OrbitPlanID_Type& PlanReferenceType::getOrbitPlanID_() const {
  if (orbitPlanID_Accessor) {
    return *orbitPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitPlanID(): An attempt was made to get an optional field that was not enabled, call hasOrbitPlanID() to determine if it is safe to call getOrbitPlanID()");
}

const uci::type::OrbitPlanID_Type& PlanReferenceType::getOrbitPlanID() const {
  return getOrbitPlanID_();
}

uci::type::OrbitPlanID_Type& PlanReferenceType::getOrbitPlanID() {
  return getOrbitPlanID_();
}

uci::type::PlanReferenceType& PlanReferenceType::setOrbitPlanID(const uci::type::OrbitPlanID_Type& accessor) {
  enableOrbitPlanID();
  if (&accessor != orbitPlanID_Accessor.get()) {
    orbitPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceType::hasOrbitPlanID() const noexcept {
  return static_cast<bool>(orbitPlanID_Accessor);
}

uci::type::OrbitPlanID_Type& PlanReferenceType::enableOrbitPlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitPlanID_Type : type};
  if ((!orbitPlanID_Accessor) || (orbitPlanID_Accessor->getAccessorType() != requestedType)) {
    orbitPlanID_Accessor = OrbitPlanID_Type::create(requestedType);
    if (!orbitPlanID_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitPlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitPlanID_Accessor;
}

uci::type::PlanReferenceType& PlanReferenceType::clearOrbitPlanID() noexcept {
  orbitPlanID_Accessor.reset();
  return *this;
}

uci::type::OrbitActivityPlanID_Type& PlanReferenceType::getOrbitActivityPlanID_() const {
  if (orbitActivityPlanID_Accessor) {
    return *orbitActivityPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitActivityPlanID(): An attempt was made to get an optional field that was not enabled, call hasOrbitActivityPlanID() to determine if it is safe to call getOrbitActivityPlanID()");
}

const uci::type::OrbitActivityPlanID_Type& PlanReferenceType::getOrbitActivityPlanID() const {
  return getOrbitActivityPlanID_();
}

uci::type::OrbitActivityPlanID_Type& PlanReferenceType::getOrbitActivityPlanID() {
  return getOrbitActivityPlanID_();
}

uci::type::PlanReferenceType& PlanReferenceType::setOrbitActivityPlanID(const uci::type::OrbitActivityPlanID_Type& accessor) {
  enableOrbitActivityPlanID();
  if (&accessor != orbitActivityPlanID_Accessor.get()) {
    orbitActivityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceType::hasOrbitActivityPlanID() const noexcept {
  return static_cast<bool>(orbitActivityPlanID_Accessor);
}

uci::type::OrbitActivityPlanID_Type& PlanReferenceType::enableOrbitActivityPlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitActivityPlanID_Type : type};
  if ((!orbitActivityPlanID_Accessor) || (orbitActivityPlanID_Accessor->getAccessorType() != requestedType)) {
    orbitActivityPlanID_Accessor = OrbitActivityPlanID_Type::create(requestedType);
    if (!orbitActivityPlanID_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitActivityPlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitActivityPlanID_Accessor;
}

uci::type::PlanReferenceType& PlanReferenceType::clearOrbitActivityPlanID() noexcept {
  orbitActivityPlanID_Accessor.reset();
  return *this;
}

uci::type::RoutePlanID_Type& PlanReferenceType::getRoutePlanID_() const {
  if (routePlanID_Accessor) {
    return *routePlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getRoutePlanID(): An attempt was made to get an optional field that was not enabled, call hasRoutePlanID() to determine if it is safe to call getRoutePlanID()");
}

const uci::type::RoutePlanID_Type& PlanReferenceType::getRoutePlanID() const {
  return getRoutePlanID_();
}

uci::type::RoutePlanID_Type& PlanReferenceType::getRoutePlanID() {
  return getRoutePlanID_();
}

uci::type::PlanReferenceType& PlanReferenceType::setRoutePlanID(const uci::type::RoutePlanID_Type& accessor) {
  enableRoutePlanID();
  if (&accessor != routePlanID_Accessor.get()) {
    routePlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceType::hasRoutePlanID() const noexcept {
  return static_cast<bool>(routePlanID_Accessor);
}

uci::type::RoutePlanID_Type& PlanReferenceType::enableRoutePlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePlanID_Type : type};
  if ((!routePlanID_Accessor) || (routePlanID_Accessor->getAccessorType() != requestedType)) {
    routePlanID_Accessor = RoutePlanID_Type::create(requestedType);
    if (!routePlanID_Accessor) {
      throw uci::base::UCIException("Error in enableRoutePlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routePlanID_Accessor;
}

uci::type::PlanReferenceType& PlanReferenceType::clearRoutePlanID() noexcept {
  routePlanID_Accessor.reset();
  return *this;
}

uci::type::RouteActivityPlanID_Type& PlanReferenceType::getRouteActivityPlanID_() const {
  if (routeActivityPlanID_Accessor) {
    return *routeActivityPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteActivityPlanID(): An attempt was made to get an optional field that was not enabled, call hasRouteActivityPlanID() to determine if it is safe to call getRouteActivityPlanID()");
}

const uci::type::RouteActivityPlanID_Type& PlanReferenceType::getRouteActivityPlanID() const {
  return getRouteActivityPlanID_();
}

uci::type::RouteActivityPlanID_Type& PlanReferenceType::getRouteActivityPlanID() {
  return getRouteActivityPlanID_();
}

uci::type::PlanReferenceType& PlanReferenceType::setRouteActivityPlanID(const uci::type::RouteActivityPlanID_Type& accessor) {
  enableRouteActivityPlanID();
  if (&accessor != routeActivityPlanID_Accessor.get()) {
    routeActivityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceType::hasRouteActivityPlanID() const noexcept {
  return static_cast<bool>(routeActivityPlanID_Accessor);
}

uci::type::RouteActivityPlanID_Type& PlanReferenceType::enableRouteActivityPlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeActivityPlanID_Type : type};
  if ((!routeActivityPlanID_Accessor) || (routeActivityPlanID_Accessor->getAccessorType() != requestedType)) {
    routeActivityPlanID_Accessor = RouteActivityPlanID_Type::create(requestedType);
    if (!routeActivityPlanID_Accessor) {
      throw uci::base::UCIException("Error in enableRouteActivityPlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeActivityPlanID_Accessor;
}

uci::type::PlanReferenceType& PlanReferenceType::clearRouteActivityPlanID() noexcept {
  routeActivityPlanID_Accessor.reset();
  return *this;
}

uci::type::CommScheduleAllocationID_Type& PlanReferenceType::getCommScheduleAllocationID_() const {
  if (commScheduleAllocationID_Accessor) {
    return *commScheduleAllocationID_Accessor;
  }
  throw uci::base::UCIException("Error in getCommScheduleAllocationID(): An attempt was made to get an optional field that was not enabled, call hasCommScheduleAllocationID() to determine if it is safe to call getCommScheduleAllocationID()");
}

const uci::type::CommScheduleAllocationID_Type& PlanReferenceType::getCommScheduleAllocationID() const {
  return getCommScheduleAllocationID_();
}

uci::type::CommScheduleAllocationID_Type& PlanReferenceType::getCommScheduleAllocationID() {
  return getCommScheduleAllocationID_();
}

uci::type::PlanReferenceType& PlanReferenceType::setCommScheduleAllocationID(const uci::type::CommScheduleAllocationID_Type& accessor) {
  enableCommScheduleAllocationID();
  if (&accessor != commScheduleAllocationID_Accessor.get()) {
    commScheduleAllocationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceType::hasCommScheduleAllocationID() const noexcept {
  return static_cast<bool>(commScheduleAllocationID_Accessor);
}

uci::type::CommScheduleAllocationID_Type& PlanReferenceType::enableCommScheduleAllocationID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commScheduleAllocationID_Type : type};
  if ((!commScheduleAllocationID_Accessor) || (commScheduleAllocationID_Accessor->getAccessorType() != requestedType)) {
    commScheduleAllocationID_Accessor = CommScheduleAllocationID_Type::create(requestedType);
    if (!commScheduleAllocationID_Accessor) {
      throw uci::base::UCIException("Error in enableCommScheduleAllocationID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commScheduleAllocationID_Accessor;
}

uci::type::PlanReferenceType& PlanReferenceType::clearCommScheduleAllocationID() noexcept {
  commScheduleAllocationID_Accessor.reset();
  return *this;
}

uci::type::ActivityPlanID_Type& PlanReferenceType::getActivityPlanID_() const {
  if (activityPlanID_Accessor) {
    return *activityPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityPlanID(): An attempt was made to get an optional field that was not enabled, call hasActivityPlanID() to determine if it is safe to call getActivityPlanID()");
}

const uci::type::ActivityPlanID_Type& PlanReferenceType::getActivityPlanID() const {
  return getActivityPlanID_();
}

uci::type::ActivityPlanID_Type& PlanReferenceType::getActivityPlanID() {
  return getActivityPlanID_();
}

uci::type::PlanReferenceType& PlanReferenceType::setActivityPlanID(const uci::type::ActivityPlanID_Type& accessor) {
  enableActivityPlanID();
  if (&accessor != activityPlanID_Accessor.get()) {
    activityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceType::hasActivityPlanID() const noexcept {
  return static_cast<bool>(activityPlanID_Accessor);
}

uci::type::ActivityPlanID_Type& PlanReferenceType::enableActivityPlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanID_Type : type};
  if ((!activityPlanID_Accessor) || (activityPlanID_Accessor->getAccessorType() != requestedType)) {
    activityPlanID_Accessor = ActivityPlanID_Type::create(requestedType);
    if (!activityPlanID_Accessor) {
      throw uci::base::UCIException("Error in enableActivityPlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityPlanID_Accessor;
}

uci::type::PlanReferenceType& PlanReferenceType::clearActivityPlanID() noexcept {
  activityPlanID_Accessor.reset();
  return *this;
}

uci::type::EffectPlanID_Type& PlanReferenceType::getEffectPlanID_() const {
  if (effectPlanID_Accessor) {
    return *effectPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getEffectPlanID(): An attempt was made to get an optional field that was not enabled, call hasEffectPlanID() to determine if it is safe to call getEffectPlanID()");
}

const uci::type::EffectPlanID_Type& PlanReferenceType::getEffectPlanID() const {
  return getEffectPlanID_();
}

uci::type::EffectPlanID_Type& PlanReferenceType::getEffectPlanID() {
  return getEffectPlanID_();
}

uci::type::PlanReferenceType& PlanReferenceType::setEffectPlanID(const uci::type::EffectPlanID_Type& accessor) {
  enableEffectPlanID();
  if (&accessor != effectPlanID_Accessor.get()) {
    effectPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceType::hasEffectPlanID() const noexcept {
  return static_cast<bool>(effectPlanID_Accessor);
}

uci::type::EffectPlanID_Type& PlanReferenceType::enableEffectPlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectPlanID_Type : type};
  if ((!effectPlanID_Accessor) || (effectPlanID_Accessor->getAccessorType() != requestedType)) {
    effectPlanID_Accessor = EffectPlanID_Type::create(requestedType);
    if (!effectPlanID_Accessor) {
      throw uci::base::UCIException("Error in enableEffectPlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *effectPlanID_Accessor;
}

uci::type::PlanReferenceType& PlanReferenceType::clearEffectPlanID() noexcept {
  effectPlanID_Accessor.reset();
  return *this;
}

uci::type::ActionPlanID_Type& PlanReferenceType::getActionPlanID_() const {
  if (actionPlanID_Accessor) {
    return *actionPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getActionPlanID(): An attempt was made to get an optional field that was not enabled, call hasActionPlanID() to determine if it is safe to call getActionPlanID()");
}

const uci::type::ActionPlanID_Type& PlanReferenceType::getActionPlanID() const {
  return getActionPlanID_();
}

uci::type::ActionPlanID_Type& PlanReferenceType::getActionPlanID() {
  return getActionPlanID_();
}

uci::type::PlanReferenceType& PlanReferenceType::setActionPlanID(const uci::type::ActionPlanID_Type& accessor) {
  enableActionPlanID();
  if (&accessor != actionPlanID_Accessor.get()) {
    actionPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceType::hasActionPlanID() const noexcept {
  return static_cast<bool>(actionPlanID_Accessor);
}

uci::type::ActionPlanID_Type& PlanReferenceType::enableActionPlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionPlanID_Type : type};
  if ((!actionPlanID_Accessor) || (actionPlanID_Accessor->getAccessorType() != requestedType)) {
    actionPlanID_Accessor = ActionPlanID_Type::create(requestedType);
    if (!actionPlanID_Accessor) {
      throw uci::base::UCIException("Error in enableActionPlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *actionPlanID_Accessor;
}

uci::type::PlanReferenceType& PlanReferenceType::clearActionPlanID() noexcept {
  actionPlanID_Accessor.reset();
  return *this;
}

uci::type::ResponsePlanID_Type& PlanReferenceType::getResponsePlanID_() const {
  if (responsePlanID_Accessor) {
    return *responsePlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getResponsePlanID(): An attempt was made to get an optional field that was not enabled, call hasResponsePlanID() to determine if it is safe to call getResponsePlanID()");
}

const uci::type::ResponsePlanID_Type& PlanReferenceType::getResponsePlanID() const {
  return getResponsePlanID_();
}

uci::type::ResponsePlanID_Type& PlanReferenceType::getResponsePlanID() {
  return getResponsePlanID_();
}

uci::type::PlanReferenceType& PlanReferenceType::setResponsePlanID(const uci::type::ResponsePlanID_Type& accessor) {
  enableResponsePlanID();
  if (&accessor != responsePlanID_Accessor.get()) {
    responsePlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanReferenceType::hasResponsePlanID() const noexcept {
  return static_cast<bool>(responsePlanID_Accessor);
}

uci::type::ResponsePlanID_Type& PlanReferenceType::enableResponsePlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responsePlanID_Type : type};
  if ((!responsePlanID_Accessor) || (responsePlanID_Accessor->getAccessorType() != requestedType)) {
    responsePlanID_Accessor = ResponsePlanID_Type::create(requestedType);
    if (!responsePlanID_Accessor) {
      throw uci::base::UCIException("Error in enableResponsePlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *responsePlanID_Accessor;
}

uci::type::PlanReferenceType& PlanReferenceType::clearResponsePlanID() noexcept {
  responsePlanID_Accessor.reset();
  return *this;
}

std::unique_ptr<PlanReferenceType> PlanReferenceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planReferenceType : type};
  return (requestedType == uci::type::accessorType::planReferenceType) ? boost::make_unique<PlanReferenceType>() : nullptr;
}

/**  */
namespace PlanReferenceType_Names {

constexpr const char* Extern_Type_Name{"PlanReferenceType"};
constexpr const char* MissionPlanID_Name{"MissionPlanID"};
constexpr const char* TaskPlanID_Name{"TaskPlanID"};
constexpr const char* OrbitPlanID_Name{"OrbitPlanID"};
constexpr const char* OrbitActivityPlanID_Name{"OrbitActivityPlanID"};
constexpr const char* RoutePlanID_Name{"RoutePlanID"};
constexpr const char* RouteActivityPlanID_Name{"RouteActivityPlanID"};
constexpr const char* CommScheduleAllocationID_Name{"CommScheduleAllocationID"};
constexpr const char* ActivityPlanID_Name{"ActivityPlanID"};
constexpr const char* EffectPlanID_Name{"EffectPlanID"};
constexpr const char* ActionPlanID_Name{"ActionPlanID"};
constexpr const char* ResponsePlanID_Name{"ResponsePlanID"};

} // namespace PlanReferenceType_Names

void PlanReferenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanReferenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanReferenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanReferenceType_Names::MissionPlanID_Name) {
      MissionPlanID_Type::deserialize(valueType.second, accessor.enableMissionPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceType_Names::TaskPlanID_Name) {
      TaskPlanID_Type::deserialize(valueType.second, accessor.enableTaskPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceType_Names::OrbitPlanID_Name) {
      OrbitPlanID_Type::deserialize(valueType.second, accessor.enableOrbitPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceType_Names::OrbitActivityPlanID_Name) {
      OrbitActivityPlanID_Type::deserialize(valueType.second, accessor.enableOrbitActivityPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceType_Names::RoutePlanID_Name) {
      RoutePlanID_Type::deserialize(valueType.second, accessor.enableRoutePlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceType_Names::RouteActivityPlanID_Name) {
      RouteActivityPlanID_Type::deserialize(valueType.second, accessor.enableRouteActivityPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceType_Names::CommScheduleAllocationID_Name) {
      CommScheduleAllocationID_Type::deserialize(valueType.second, accessor.enableCommScheduleAllocationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceType_Names::ActivityPlanID_Name) {
      ActivityPlanID_Type::deserialize(valueType.second, accessor.enableActivityPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceType_Names::EffectPlanID_Name) {
      EffectPlanID_Type::deserialize(valueType.second, accessor.enableEffectPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceType_Names::ActionPlanID_Name) {
      ActionPlanID_Type::deserialize(valueType.second, accessor.enableActionPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceType_Names::ResponsePlanID_Name) {
      ResponsePlanID_Type::deserialize(valueType.second, accessor.enableResponsePlanID(), nodeName, nsPrefix);
    }
  }
}

std::string PlanReferenceType::serialize(const uci::type::PlanReferenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanReferenceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanReferenceType_Names::Extern_Type_Name);
  }
  if (accessor.hasMissionPlanID()) {
    MissionPlanID_Type::serialize(accessor.getMissionPlanID(), node, PlanReferenceType_Names::MissionPlanID_Name);
  }
  if (accessor.hasTaskPlanID()) {
    TaskPlanID_Type::serialize(accessor.getTaskPlanID(), node, PlanReferenceType_Names::TaskPlanID_Name);
  }
  if (accessor.hasOrbitPlanID()) {
    OrbitPlanID_Type::serialize(accessor.getOrbitPlanID(), node, PlanReferenceType_Names::OrbitPlanID_Name);
  }
  if (accessor.hasOrbitActivityPlanID()) {
    OrbitActivityPlanID_Type::serialize(accessor.getOrbitActivityPlanID(), node, PlanReferenceType_Names::OrbitActivityPlanID_Name);
  }
  if (accessor.hasRoutePlanID()) {
    RoutePlanID_Type::serialize(accessor.getRoutePlanID(), node, PlanReferenceType_Names::RoutePlanID_Name);
  }
  if (accessor.hasRouteActivityPlanID()) {
    RouteActivityPlanID_Type::serialize(accessor.getRouteActivityPlanID(), node, PlanReferenceType_Names::RouteActivityPlanID_Name);
  }
  if (accessor.hasCommScheduleAllocationID()) {
    CommScheduleAllocationID_Type::serialize(accessor.getCommScheduleAllocationID(), node, PlanReferenceType_Names::CommScheduleAllocationID_Name);
  }
  if (accessor.hasActivityPlanID()) {
    ActivityPlanID_Type::serialize(accessor.getActivityPlanID(), node, PlanReferenceType_Names::ActivityPlanID_Name);
  }
  if (accessor.hasEffectPlanID()) {
    EffectPlanID_Type::serialize(accessor.getEffectPlanID(), node, PlanReferenceType_Names::EffectPlanID_Name);
  }
  if (accessor.hasActionPlanID()) {
    ActionPlanID_Type::serialize(accessor.getActionPlanID(), node, PlanReferenceType_Names::ActionPlanID_Name);
  }
  if (accessor.hasResponsePlanID()) {
    ResponsePlanID_Type::serialize(accessor.getResponsePlanID(), node, PlanReferenceType_Names::ResponsePlanID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanReferenceType& PlanReferenceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanReferenceType>().release());
}

uci::type::PlanReferenceType& PlanReferenceType::create(const uci::type::PlanReferenceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanReferenceType> newAccessor{boost::make_unique<asb_uci::type::PlanReferenceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanReferenceType::destroy(uci::type::PlanReferenceType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanReferenceType*>(&accessor);
}

} // namespace type

} // namespace uci

