/** @file RF_RadiusToFixType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RF_RadiusToFixType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/Point2D_Type.h"
#include "asb_uci/type/RelativeDirectionEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AnglePositiveType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/Point2D_Type.h"
#include "uci/type/RF_RadiusToFixType.h"
#include "uci/type/RelativeDirectionEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RF_RadiusToFixType::RF_RadiusToFixType()
  : radiusCenterPoint_Accessor{boost::make_unique<Point2D_Type>()},
    arcInitialPoint_Accessor{boost::make_unique<Point2D_Type>()},
    arcEndPoint_Accessor{boost::make_unique<Point2D_Type>()},
    turnDirection_Accessor{boost::make_unique<RelativeDirectionEnum>()} {
}

RF_RadiusToFixType::~RF_RadiusToFixType() = default;

void RF_RadiusToFixType::copy(const uci::type::RF_RadiusToFixType& accessor) {
  copyImpl(accessor, false);
}

void RF_RadiusToFixType::copyImpl(const uci::type::RF_RadiusToFixType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RF_RadiusToFixType&>(accessor);
    setRadiusCenterPoint(*(accessorImpl.radiusCenterPoint_Accessor));
    setTurnRadius(accessorImpl.turnRadius_Accessor);
    setCourseIn(accessorImpl.courseIn_Accessor);
    setCourseOut(accessorImpl.courseOut_Accessor);
    setArcInitialPoint(*(accessorImpl.arcInitialPoint_Accessor));
    setArcEndPoint(*(accessorImpl.arcEndPoint_Accessor));
    setArcDistance(accessorImpl.arcDistance_Accessor);
    setArcDirectDistance(accessorImpl.arcDirectDistance_Accessor);
    setTurnDirection(*(accessorImpl.turnDirection_Accessor));
  }
}

void RF_RadiusToFixType::reset() noexcept {
  if (radiusCenterPoint_Accessor->getAccessorType() != uci::type::accessorType::point2D_Type) {
    radiusCenterPoint_Accessor = boost::make_unique<Point2D_Type>();
  } else {
    radiusCenterPoint_Accessor->reset();
  }
  turnRadius_Accessor = 0.0;
  courseIn_Accessor = 0.0;
  courseOut_Accessor = 0.0;
  if (arcInitialPoint_Accessor->getAccessorType() != uci::type::accessorType::point2D_Type) {
    arcInitialPoint_Accessor = boost::make_unique<Point2D_Type>();
  } else {
    arcInitialPoint_Accessor->reset();
  }
  if (arcEndPoint_Accessor->getAccessorType() != uci::type::accessorType::point2D_Type) {
    arcEndPoint_Accessor = boost::make_unique<Point2D_Type>();
  } else {
    arcEndPoint_Accessor->reset();
  }
  arcDistance_Accessor = 0.0;
  arcDirectDistance_Accessor = 0.0;
  turnDirection_Accessor->reset();
}

const uci::type::Point2D_Type& RF_RadiusToFixType::getRadiusCenterPoint() const {
  return *radiusCenterPoint_Accessor;
}

uci::type::Point2D_Type& RF_RadiusToFixType::getRadiusCenterPoint() {
  return *radiusCenterPoint_Accessor;
}

uci::type::RF_RadiusToFixType& RF_RadiusToFixType::setRadiusCenterPoint(const uci::type::Point2D_Type& accessor) {
  enableRadiusCenterPoint(accessor.getAccessorType());
  if (&accessor != radiusCenterPoint_Accessor.get()) {
    radiusCenterPoint_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point2D_Type& RF_RadiusToFixType::enableRadiusCenterPoint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!radiusCenterPoint_Accessor) || (radiusCenterPoint_Accessor->getAccessorType() != requestedType)) {
    radiusCenterPoint_Accessor = Point2D_Type::create(requestedType);
    if (!radiusCenterPoint_Accessor) {
      throw uci::base::UCIException("Error in enableRadiusCenterPoint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *radiusCenterPoint_Accessor;
}

uci::type::DistanceTypeValue RF_RadiusToFixType::getTurnRadius() const {
  return turnRadius_Accessor;
}

uci::type::RF_RadiusToFixType& RF_RadiusToFixType::setTurnRadius(uci::type::DistanceTypeValue value) {
  turnRadius_Accessor = value;
  return *this;
}


uci::type::AnglePositiveTypeValue RF_RadiusToFixType::getCourseIn() const {
  return courseIn_Accessor;
}

uci::type::RF_RadiusToFixType& RF_RadiusToFixType::setCourseIn(uci::type::AnglePositiveTypeValue value) {
  courseIn_Accessor = value;
  return *this;
}


uci::type::AnglePositiveTypeValue RF_RadiusToFixType::getCourseOut() const {
  return courseOut_Accessor;
}

uci::type::RF_RadiusToFixType& RF_RadiusToFixType::setCourseOut(uci::type::AnglePositiveTypeValue value) {
  courseOut_Accessor = value;
  return *this;
}


const uci::type::Point2D_Type& RF_RadiusToFixType::getArcInitialPoint() const {
  return *arcInitialPoint_Accessor;
}

uci::type::Point2D_Type& RF_RadiusToFixType::getArcInitialPoint() {
  return *arcInitialPoint_Accessor;
}

uci::type::RF_RadiusToFixType& RF_RadiusToFixType::setArcInitialPoint(const uci::type::Point2D_Type& accessor) {
  enableArcInitialPoint(accessor.getAccessorType());
  if (&accessor != arcInitialPoint_Accessor.get()) {
    arcInitialPoint_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point2D_Type& RF_RadiusToFixType::enableArcInitialPoint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!arcInitialPoint_Accessor) || (arcInitialPoint_Accessor->getAccessorType() != requestedType)) {
    arcInitialPoint_Accessor = Point2D_Type::create(requestedType);
    if (!arcInitialPoint_Accessor) {
      throw uci::base::UCIException("Error in enableArcInitialPoint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *arcInitialPoint_Accessor;
}

const uci::type::Point2D_Type& RF_RadiusToFixType::getArcEndPoint() const {
  return *arcEndPoint_Accessor;
}

uci::type::Point2D_Type& RF_RadiusToFixType::getArcEndPoint() {
  return *arcEndPoint_Accessor;
}

uci::type::RF_RadiusToFixType& RF_RadiusToFixType::setArcEndPoint(const uci::type::Point2D_Type& accessor) {
  enableArcEndPoint(accessor.getAccessorType());
  if (&accessor != arcEndPoint_Accessor.get()) {
    arcEndPoint_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point2D_Type& RF_RadiusToFixType::enableArcEndPoint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!arcEndPoint_Accessor) || (arcEndPoint_Accessor->getAccessorType() != requestedType)) {
    arcEndPoint_Accessor = Point2D_Type::create(requestedType);
    if (!arcEndPoint_Accessor) {
      throw uci::base::UCIException("Error in enableArcEndPoint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *arcEndPoint_Accessor;
}

uci::type::DistanceTypeValue RF_RadiusToFixType::getArcDistance() const {
  return arcDistance_Accessor;
}

uci::type::RF_RadiusToFixType& RF_RadiusToFixType::setArcDistance(uci::type::DistanceTypeValue value) {
  arcDistance_Accessor = value;
  return *this;
}


uci::type::DistanceTypeValue RF_RadiusToFixType::getArcDirectDistance() const {
  return arcDirectDistance_Accessor;
}

uci::type::RF_RadiusToFixType& RF_RadiusToFixType::setArcDirectDistance(uci::type::DistanceTypeValue value) {
  arcDirectDistance_Accessor = value;
  return *this;
}


const uci::type::RelativeDirectionEnum& RF_RadiusToFixType::getTurnDirection() const {
  return *turnDirection_Accessor;
}

uci::type::RelativeDirectionEnum& RF_RadiusToFixType::getTurnDirection() {
  return *turnDirection_Accessor;
}

uci::type::RF_RadiusToFixType& RF_RadiusToFixType::setTurnDirection(const uci::type::RelativeDirectionEnum& accessor) {
  if (&accessor != turnDirection_Accessor.get()) {
    turnDirection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RF_RadiusToFixType& RF_RadiusToFixType::setTurnDirection(uci::type::RelativeDirectionEnum::EnumerationItem value) {
  turnDirection_Accessor->setValue(value);
  return *this;
}


std::unique_ptr<RF_RadiusToFixType> RF_RadiusToFixType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_RadiusToFixType : type};
  return (requestedType == uci::type::accessorType::rF_RadiusToFixType) ? boost::make_unique<RF_RadiusToFixType>() : nullptr;
}

/**  */
namespace RF_RadiusToFixType_Names {

constexpr const char* Extern_Type_Name{"RF_RadiusToFixType"};
constexpr const char* RadiusCenterPoint_Name{"RadiusCenterPoint"};
constexpr const char* TurnRadius_Name{"TurnRadius"};
constexpr const char* CourseIn_Name{"CourseIn"};
constexpr const char* CourseOut_Name{"CourseOut"};
constexpr const char* ArcInitialPoint_Name{"ArcInitialPoint"};
constexpr const char* ArcEndPoint_Name{"ArcEndPoint"};
constexpr const char* ArcDistance_Name{"ArcDistance"};
constexpr const char* ArcDirectDistance_Name{"ArcDirectDistance"};
constexpr const char* TurnDirection_Name{"TurnDirection"};

} // namespace RF_RadiusToFixType_Names

void RF_RadiusToFixType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_RadiusToFixType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RF_RadiusToFixType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RF_RadiusToFixType_Names::RadiusCenterPoint_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRadiusCenterPoint(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_RadiusToFixType_Names::TurnRadius_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTurnRadius(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RF_RadiusToFixType_Names::CourseIn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCourseIn(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RF_RadiusToFixType_Names::CourseOut_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCourseOut(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RF_RadiusToFixType_Names::ArcInitialPoint_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableArcInitialPoint(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_RadiusToFixType_Names::ArcEndPoint_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableArcEndPoint(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_RadiusToFixType_Names::ArcDistance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setArcDistance(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RF_RadiusToFixType_Names::ArcDirectDistance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setArcDirectDistance(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RF_RadiusToFixType_Names::TurnDirection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getTurnDirection().setValueFromName(*value);
      }
    }
  }
}

std::string RF_RadiusToFixType::serialize(const uci::type::RF_RadiusToFixType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RF_RadiusToFixType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RF_RadiusToFixType_Names::Extern_Type_Name);
  }
  Point2D_Type::serialize(accessor.getRadiusCenterPoint(), node, RF_RadiusToFixType_Names::RadiusCenterPoint_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTurnRadius(), node, RF_RadiusToFixType_Names::TurnRadius_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCourseIn(), node, RF_RadiusToFixType_Names::CourseIn_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCourseOut(), node, RF_RadiusToFixType_Names::CourseOut_Name);
  Point2D_Type::serialize(accessor.getArcInitialPoint(), node, RF_RadiusToFixType_Names::ArcInitialPoint_Name);
  Point2D_Type::serialize(accessor.getArcEndPoint(), node, RF_RadiusToFixType_Names::ArcEndPoint_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getArcDistance(), node, RF_RadiusToFixType_Names::ArcDistance_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getArcDirectDistance(), node, RF_RadiusToFixType_Names::ArcDirectDistance_Name);
  RelativeDirectionEnum::serialize(accessor.getTurnDirection(), node, RF_RadiusToFixType_Names::TurnDirection_Name, false);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RF_RadiusToFixType& RF_RadiusToFixType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RF_RadiusToFixType>().release());
}

uci::type::RF_RadiusToFixType& RF_RadiusToFixType::create(const uci::type::RF_RadiusToFixType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RF_RadiusToFixType> newAccessor{boost::make_unique<asb_uci::type::RF_RadiusToFixType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RF_RadiusToFixType::destroy(uci::type::RF_RadiusToFixType& accessor) {
  delete dynamic_cast<asb_uci::type::RF_RadiusToFixType*>(&accessor);
}

} // namespace type

} // namespace uci

