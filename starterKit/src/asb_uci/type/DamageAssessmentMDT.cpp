/** @file DamageAssessmentMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DamageAssessmentMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DamageAssessmentDetailType.h"
#include "../../../include/asb_uci/type/DamageAssessmentID_Type.h"
#include "../../../include/asb_uci/type/DamageCategoryEnum.h"
#include "../../../include/asb_uci/type/DamageSubjectType.h"
#include "../../../include/asb_uci/type/DamageSummaryID_Type.h"
#include "../../../include/asb_uci/type/DamageSummaryType.h"
#include "../../../include/asb_uci/type/VisibleString1024Type.h"
#include "../../../include/asb_uci/type/ZoneType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageAssessmentDetailType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageAssessmentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageAssessmentMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageCategoryEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageSubjectType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageSummaryID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageSummaryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString1024Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ZoneType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DamageAssessmentMDT::DamageAssessmentMDT()
  : damageAssessmentID_Accessor{boost::make_unique<DamageAssessmentID_Type>()},
    assessmentType_Accessor{boost::make_unique<DamageCategoryEnum>()},
    subject_Accessor{boost::make_unique<DamageSubjectType>()},
    assessedObject_Accessor{boost::make_unique<AssessedObject>(1, SIZE_MAX)},
    damageSummaryID_Accessor{boost::make_unique<DamageSummaryID>(0, SIZE_MAX)} {
}

DamageAssessmentMDT::~DamageAssessmentMDT() = default;

void DamageAssessmentMDT::copy(const uci::type::DamageAssessmentMDT& accessor) {
  copyImpl(accessor, false);
}

void DamageAssessmentMDT::copyImpl(const uci::type::DamageAssessmentMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DamageAssessmentMDT&>(accessor);
    setDamageAssessmentID(*(accessorImpl.damageAssessmentID_Accessor));
    setAssessmentType(*(accessorImpl.assessmentType_Accessor));
    setSubject(*(accessorImpl.subject_Accessor));
    setCompletionTime(accessorImpl.completionTime_Accessor);
    if (accessorImpl.assessmentZone_Accessor) {
      setAssessmentZone(*(accessorImpl.assessmentZone_Accessor));
    } else {
      assessmentZone_Accessor.reset();
    }
    setAssessedObject(*(accessorImpl.assessedObject_Accessor));
    if (accessorImpl.summary_Accessor) {
      setSummary(*(accessorImpl.summary_Accessor));
    } else {
      summary_Accessor.reset();
    }
    if (accessorImpl.assessmentNarrative_Accessor) {
      setAssessmentNarrative(*(accessorImpl.assessmentNarrative_Accessor));
    } else {
      assessmentNarrative_Accessor.reset();
    }
    setReAttackRequired(accessorImpl.reAttackRequired_Accessor);
    if (accessorImpl.reAttackNarrative_Accessor) {
      setReAttackNarrative(*(accessorImpl.reAttackNarrative_Accessor));
    } else {
      reAttackNarrative_Accessor.reset();
    }
    setDamageSummaryID(*(accessorImpl.damageSummaryID_Accessor));
  }
}

void DamageAssessmentMDT::reset() noexcept {
  damageAssessmentID_Accessor->reset();
  assessmentType_Accessor->reset();
  subject_Accessor->reset();
  completionTime_Accessor = 0;
  assessmentZone_Accessor.reset();
  assessedObject_Accessor->reset();
  summary_Accessor.reset();
  assessmentNarrative_Accessor.reset();
  reAttackRequired_Accessor = false;
  reAttackNarrative_Accessor.reset();
  damageSummaryID_Accessor->reset();
}

const uci::type::DamageAssessmentID_Type& DamageAssessmentMDT::getDamageAssessmentID() const {
  return *damageAssessmentID_Accessor;
}

uci::type::DamageAssessmentID_Type& DamageAssessmentMDT::getDamageAssessmentID() {
  return *damageAssessmentID_Accessor;
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setDamageAssessmentID(const uci::type::DamageAssessmentID_Type& accessor) {
  if (&accessor != damageAssessmentID_Accessor.get()) {
    damageAssessmentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DamageCategoryEnum& DamageAssessmentMDT::getAssessmentType() const {
  return *assessmentType_Accessor;
}

uci::type::DamageCategoryEnum& DamageAssessmentMDT::getAssessmentType() {
  return *assessmentType_Accessor;
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setAssessmentType(const uci::type::DamageCategoryEnum& accessor) {
  if (&accessor != assessmentType_Accessor.get()) {
    assessmentType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setAssessmentType(uci::type::DamageCategoryEnum::EnumerationItem value) {
  assessmentType_Accessor->setValue(value);
  return *this;
}


const uci::type::DamageSubjectType& DamageAssessmentMDT::getSubject() const {
  return *subject_Accessor;
}

uci::type::DamageSubjectType& DamageAssessmentMDT::getSubject() {
  return *subject_Accessor;
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setSubject(const uci::type::DamageSubjectType& accessor) {
  if (&accessor != subject_Accessor.get()) {
    subject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue DamageAssessmentMDT::getCompletionTime() const {
  return completionTime_Accessor;
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setCompletionTime(uci::type::DateTimeTypeValue value) {
  completionTime_Accessor = value;
  return *this;
}


uci::type::ZoneType& DamageAssessmentMDT::getAssessmentZone_() const {
  if (assessmentZone_Accessor) {
    return *assessmentZone_Accessor;
  }
  throw uci::base::UCIException("Error in getAssessmentZone(): An attempt was made to get an optional field that was not enabled, call hasAssessmentZone() to determine if it is safe to call getAssessmentZone()");
}

const uci::type::ZoneType& DamageAssessmentMDT::getAssessmentZone() const {
  return getAssessmentZone_();
}

uci::type::ZoneType& DamageAssessmentMDT::getAssessmentZone() {
  return getAssessmentZone_();
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setAssessmentZone(const uci::type::ZoneType& accessor) {
  enableAssessmentZone(accessor.getAccessorType());
  if (&accessor != assessmentZone_Accessor.get()) {
    assessmentZone_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DamageAssessmentMDT::hasAssessmentZone() const noexcept {
  return static_cast<bool>(assessmentZone_Accessor);
}

uci::type::ZoneType& DamageAssessmentMDT::enableAssessmentZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!assessmentZone_Accessor) || (assessmentZone_Accessor->getAccessorType() != requestedType)) {
    assessmentZone_Accessor = ZoneType::create(requestedType);
    if (!assessmentZone_Accessor) {
      throw uci::base::UCIException("Error in enableAssessmentZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *assessmentZone_Accessor;
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::clearAssessmentZone() noexcept {
  assessmentZone_Accessor.reset();
  return *this;
}

const uci::type::DamageAssessmentMDT::AssessedObject& DamageAssessmentMDT::getAssessedObject() const {
  return *assessedObject_Accessor;
}

uci::type::DamageAssessmentMDT::AssessedObject& DamageAssessmentMDT::getAssessedObject() {
  return *assessedObject_Accessor;
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setAssessedObject(const uci::type::DamageAssessmentMDT::AssessedObject& accessor) {
  if (&accessor != assessedObject_Accessor.get()) {
    assessedObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DamageSummaryType& DamageAssessmentMDT::getSummary_() const {
  if (summary_Accessor) {
    return *summary_Accessor;
  }
  throw uci::base::UCIException("Error in getSummary(): An attempt was made to get an optional field that was not enabled, call hasSummary() to determine if it is safe to call getSummary()");
}

const uci::type::DamageSummaryType& DamageAssessmentMDT::getSummary() const {
  return getSummary_();
}

uci::type::DamageSummaryType& DamageAssessmentMDT::getSummary() {
  return getSummary_();
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setSummary(const uci::type::DamageSummaryType& accessor) {
  enableSummary();
  if (&accessor != summary_Accessor.get()) {
    summary_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageAssessmentMDT::hasSummary() const noexcept {
  return static_cast<bool>(summary_Accessor);
}

uci::type::DamageSummaryType& DamageAssessmentMDT::enableSummary(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageSummaryType : type};
  if ((!summary_Accessor) || (summary_Accessor->getAccessorType() != requestedType)) {
    summary_Accessor = DamageSummaryType::create(requestedType);
    if (!summary_Accessor) {
      throw uci::base::UCIException("Error in enableSummary(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *summary_Accessor;
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::clearSummary() noexcept {
  summary_Accessor.reset();
  return *this;
}

uci::type::VisibleString1024Type& DamageAssessmentMDT::getAssessmentNarrative_() const {
  if (assessmentNarrative_Accessor) {
    return *assessmentNarrative_Accessor;
  }
  throw uci::base::UCIException("Error in getAssessmentNarrative(): An attempt was made to get an optional field that was not enabled, call hasAssessmentNarrative() to determine if it is safe to call getAssessmentNarrative()");
}

const uci::type::VisibleString1024Type& DamageAssessmentMDT::getAssessmentNarrative() const {
  return getAssessmentNarrative_();
}

uci::type::VisibleString1024Type& DamageAssessmentMDT::getAssessmentNarrative() {
  return getAssessmentNarrative_();
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setAssessmentNarrative(const uci::type::VisibleString1024Type& value) {
  return setAssessmentNarrative(value.c_str());
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setAssessmentNarrative(const std::string& value) {
  return setAssessmentNarrative(value.c_str());
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setAssessmentNarrative(const char* value) {
  enableAssessmentNarrative().setStringValue(value);
  return *this;
}

bool DamageAssessmentMDT::hasAssessmentNarrative() const noexcept {
  return static_cast<bool>(assessmentNarrative_Accessor);
}

uci::type::VisibleString1024Type& DamageAssessmentMDT::enableAssessmentNarrative(uci::base::accessorType::AccessorType type) {
  if (!assessmentNarrative_Accessor) {
    assessmentNarrative_Accessor = VisibleString1024Type::create(type);
  }
  return *assessmentNarrative_Accessor;
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::clearAssessmentNarrative() noexcept {
  assessmentNarrative_Accessor.reset();
  return *this;
}

xs::Boolean DamageAssessmentMDT::getReAttackRequired() const {
  return reAttackRequired_Accessor;
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setReAttackRequired(xs::Boolean value) {
  reAttackRequired_Accessor = value;
  return *this;
}


uci::type::VisibleString1024Type& DamageAssessmentMDT::getReAttackNarrative_() const {
  if (reAttackNarrative_Accessor) {
    return *reAttackNarrative_Accessor;
  }
  throw uci::base::UCIException("Error in getReAttackNarrative(): An attempt was made to get an optional field that was not enabled, call hasReAttackNarrative() to determine if it is safe to call getReAttackNarrative()");
}

const uci::type::VisibleString1024Type& DamageAssessmentMDT::getReAttackNarrative() const {
  return getReAttackNarrative_();
}

uci::type::VisibleString1024Type& DamageAssessmentMDT::getReAttackNarrative() {
  return getReAttackNarrative_();
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setReAttackNarrative(const uci::type::VisibleString1024Type& value) {
  return setReAttackNarrative(value.c_str());
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setReAttackNarrative(const std::string& value) {
  return setReAttackNarrative(value.c_str());
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setReAttackNarrative(const char* value) {
  enableReAttackNarrative().setStringValue(value);
  return *this;
}

bool DamageAssessmentMDT::hasReAttackNarrative() const noexcept {
  return static_cast<bool>(reAttackNarrative_Accessor);
}

uci::type::VisibleString1024Type& DamageAssessmentMDT::enableReAttackNarrative(uci::base::accessorType::AccessorType type) {
  if (!reAttackNarrative_Accessor) {
    reAttackNarrative_Accessor = VisibleString1024Type::create(type);
  }
  return *reAttackNarrative_Accessor;
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::clearReAttackNarrative() noexcept {
  reAttackNarrative_Accessor.reset();
  return *this;
}

const uci::type::DamageAssessmentMDT::DamageSummaryID& DamageAssessmentMDT::getDamageSummaryID() const {
  return *damageSummaryID_Accessor;
}

uci::type::DamageAssessmentMDT::DamageSummaryID& DamageAssessmentMDT::getDamageSummaryID() {
  return *damageSummaryID_Accessor;
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::setDamageSummaryID(const uci::type::DamageAssessmentMDT::DamageSummaryID& accessor) {
  if (&accessor != damageSummaryID_Accessor.get()) {
    damageSummaryID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<DamageAssessmentMDT> DamageAssessmentMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageAssessmentMDT : type};
  return (requestedType == uci::type::accessorType::damageAssessmentMDT) ? boost::make_unique<DamageAssessmentMDT>() : nullptr;
}

/**  */
namespace DamageAssessmentMDT_Names {

constexpr const char* Extern_Type_Name{"DamageAssessmentMDT"};
constexpr const char* DamageAssessmentID_Name{"DamageAssessmentID"};
constexpr const char* AssessmentType_Name{"AssessmentType"};
constexpr const char* Subject_Name{"Subject"};
constexpr const char* CompletionTime_Name{"CompletionTime"};
constexpr const char* AssessmentZone_Name{"AssessmentZone"};
constexpr const char* AssessedObject_Name{"AssessedObject"};
constexpr const char* Summary_Name{"Summary"};
constexpr const char* AssessmentNarrative_Name{"AssessmentNarrative"};
constexpr const char* ReAttackRequired_Name{"ReAttackRequired"};
constexpr const char* ReAttackNarrative_Name{"ReAttackNarrative"};
constexpr const char* DamageSummaryID_Name{"DamageSummaryID"};

} // namespace DamageAssessmentMDT_Names

void DamageAssessmentMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageAssessmentMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamageAssessmentMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamageAssessmentMDT_Names::DamageAssessmentID_Name) {
      DamageAssessmentID_Type::deserialize(valueType.second, accessor.getDamageAssessmentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageAssessmentMDT_Names::AssessmentType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAssessmentType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DamageAssessmentMDT_Names::Subject_Name) {
      DamageSubjectType::deserialize(valueType.second, accessor.getSubject(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageAssessmentMDT_Names::CompletionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCompletionTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + DamageAssessmentMDT_Names::AssessmentZone_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableAssessmentZone(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageAssessmentMDT_Names::AssessedObject_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DamageAssessmentMDT::AssessedObject& boundedList = accessor.getAssessedObject();
        const uci::type::DamageAssessmentMDT::AssessedObject::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DamageAssessmentMDT_Names::Summary_Name) {
      DamageSummaryType::deserialize(valueType.second, accessor.enableSummary(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageAssessmentMDT_Names::AssessmentNarrative_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAssessmentNarrative(*value);
      }
    } else if (valueType.first == nsPrefix + DamageAssessmentMDT_Names::ReAttackRequired_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReAttackRequired(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + DamageAssessmentMDT_Names::ReAttackNarrative_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReAttackNarrative(*value);
      }
    } else if (valueType.first == nsPrefix + DamageAssessmentMDT_Names::DamageSummaryID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DamageAssessmentMDT::DamageSummaryID& boundedList = accessor.getDamageSummaryID();
        const uci::type::DamageAssessmentMDT::DamageSummaryID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DamageSummaryID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string DamageAssessmentMDT::serialize(const uci::type::DamageAssessmentMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DamageAssessmentMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DamageAssessmentMDT_Names::Extern_Type_Name);
  }
  DamageAssessmentID_Type::serialize(accessor.getDamageAssessmentID(), node, DamageAssessmentMDT_Names::DamageAssessmentID_Name);
  DamageCategoryEnum::serialize(accessor.getAssessmentType(), node, DamageAssessmentMDT_Names::AssessmentType_Name, false);
  DamageSubjectType::serialize(accessor.getSubject(), node, DamageAssessmentMDT_Names::Subject_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getCompletionTime(), node, DamageAssessmentMDT_Names::CompletionTime_Name);
  if (accessor.hasAssessmentZone()) {
    ZoneType::serialize(accessor.getAssessmentZone(), node, DamageAssessmentMDT_Names::AssessmentZone_Name);
  }
  {
    const uci::type::DamageAssessmentMDT::AssessedObject& boundedList = accessor.getAssessedObject();
    for (uci::type::DamageAssessmentMDT::AssessedObject::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DamageAssessmentDetailType::serialize(boundedList.at(i), node, DamageAssessmentMDT_Names::AssessedObject_Name);
    }
  }
  if (accessor.hasSummary()) {
    DamageSummaryType::serialize(accessor.getSummary(), node, DamageAssessmentMDT_Names::Summary_Name);
  }
  if (accessor.hasAssessmentNarrative()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getAssessmentNarrative(), node, DamageAssessmentMDT_Names::AssessmentNarrative_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getReAttackRequired(), node, DamageAssessmentMDT_Names::ReAttackRequired_Name);
  if (accessor.hasReAttackNarrative()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getReAttackNarrative(), node, DamageAssessmentMDT_Names::ReAttackNarrative_Name);
  }
  {
    const uci::type::DamageAssessmentMDT::DamageSummaryID& boundedList = accessor.getDamageSummaryID();
    for (uci::type::DamageAssessmentMDT::DamageSummaryID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DamageSummaryID_Type::serialize(boundedList.at(i), node, DamageAssessmentMDT_Names::DamageSummaryID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DamageAssessmentMDT>().release());
}

uci::type::DamageAssessmentMDT& DamageAssessmentMDT::create(const uci::type::DamageAssessmentMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DamageAssessmentMDT> newAccessor{boost::make_unique<asb_uci::type::DamageAssessmentMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DamageAssessmentMDT::destroy(uci::type::DamageAssessmentMDT& accessor) {
  delete dynamic_cast<asb_uci::type::DamageAssessmentMDT*>(&accessor);
}

} // namespace type

} // namespace uci

