/** @file ImpactPointType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ImpactPointType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BodyFaceType.h"
#include "../../../include/asb_uci/type/OffsetLocationErrorType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BodyFaceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ImpactPointType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OffsetLocationErrorType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ImpactPointType::ImpactPointType() = default;

ImpactPointType::~ImpactPointType() = default;

void ImpactPointType::copy(const uci::type::ImpactPointType& accessor) {
  copyImpl(accessor, false);
}

void ImpactPointType::copyImpl(const uci::type::ImpactPointType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ImpactPointType&>(accessor);
    if (accessorImpl.bodyLocation_Accessor) {
      setBodyLocation(*(accessorImpl.bodyLocation_Accessor));
    } else {
      bodyLocation_Accessor.reset();
    }
    if (accessorImpl.bodyFace_Accessor) {
      setBodyFace(*(accessorImpl.bodyFace_Accessor));
    } else {
      bodyFace_Accessor.reset();
    }
  }
}

void ImpactPointType::reset() noexcept {
  bodyLocation_Accessor.reset();
  bodyFace_Accessor.reset();
}

uci::type::ImpactPointType::ImpactPointTypeChoice ImpactPointType::getImpactPointTypeChoiceOrdinal() const noexcept {
  if (bodyLocation_Accessor) {
    return IMPACTPOINTTYPE_CHOICE_BODYLOCATION;
  }
  if (bodyFace_Accessor) {
    return IMPACTPOINTTYPE_CHOICE_BODYFACE;
  }
  return IMPACTPOINTTYPE_CHOICE_NONE;
}

uci::type::ImpactPointType& ImpactPointType::setImpactPointTypeChoiceOrdinal(uci::type::ImpactPointType::ImpactPointTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case IMPACTPOINTTYPE_CHOICE_BODYLOCATION:
      chooseBodyLocation("setImpactPointTypeChoiceOrdinal", type);
      break;
    case IMPACTPOINTTYPE_CHOICE_BODYFACE:
      chooseBodyFace("setImpactPointTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setImpactPointTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OffsetLocationErrorType& ImpactPointType::getBodyLocation_() const {
  if (bodyLocation_Accessor) {
    return *bodyLocation_Accessor;
  }
  throw uci::base::UCIException("Error in getBodyLocation(): Unable to get BodyLocation, field not selected");
}

const uci::type::OffsetLocationErrorType& ImpactPointType::getBodyLocation() const {
  return getBodyLocation_();
}

uci::type::OffsetLocationErrorType& ImpactPointType::getBodyLocation() {
  return getBodyLocation_();
}

uci::type::ImpactPointType& ImpactPointType::setBodyLocation(const uci::type::OffsetLocationErrorType& accessor) {
  chooseBodyLocation();
  if (&accessor != bodyLocation_Accessor.get()) {
    bodyLocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ImpactPointType::isBodyLocation() const noexcept {
  return static_cast<bool>(bodyLocation_Accessor);
}

uci::type::OffsetLocationErrorType& ImpactPointType::chooseBodyLocation(const std::string& method, uci::base::accessorType::AccessorType type) {
  bodyFace_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::offsetLocationErrorType : type};
  if ((!bodyLocation_Accessor) || (bodyLocation_Accessor->getAccessorType() != requestedType)) {
    bodyLocation_Accessor = OffsetLocationErrorType::create(type);
    if (!bodyLocation_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *bodyLocation_Accessor;
}

uci::type::OffsetLocationErrorType& ImpactPointType::chooseBodyLocation(uci::base::accessorType::AccessorType type) {
  return chooseBodyLocation("chooseBodyLocation", type);
}

uci::type::BodyFaceType& ImpactPointType::getBodyFace_() const {
  if (bodyFace_Accessor) {
    return *bodyFace_Accessor;
  }
  throw uci::base::UCIException("Error in getBodyFace(): Unable to get BodyFace, field not selected");
}

const uci::type::BodyFaceType& ImpactPointType::getBodyFace() const {
  return getBodyFace_();
}

uci::type::BodyFaceType& ImpactPointType::getBodyFace() {
  return getBodyFace_();
}

uci::type::ImpactPointType& ImpactPointType::setBodyFace(const uci::type::BodyFaceType& accessor) {
  chooseBodyFace();
  if (&accessor != bodyFace_Accessor.get()) {
    bodyFace_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ImpactPointType::isBodyFace() const noexcept {
  return static_cast<bool>(bodyFace_Accessor);
}

uci::type::BodyFaceType& ImpactPointType::chooseBodyFace(const std::string& method, uci::base::accessorType::AccessorType type) {
  bodyLocation_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::bodyFaceType : type};
  if ((!bodyFace_Accessor) || (bodyFace_Accessor->getAccessorType() != requestedType)) {
    bodyFace_Accessor = BodyFaceType::create(type);
    if (!bodyFace_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *bodyFace_Accessor;
}

uci::type::BodyFaceType& ImpactPointType::chooseBodyFace(uci::base::accessorType::AccessorType type) {
  return chooseBodyFace("chooseBodyFace", type);
}

std::unique_ptr<ImpactPointType> ImpactPointType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::impactPointType : type};
  return (requestedType == uci::type::accessorType::impactPointType) ? boost::make_unique<ImpactPointType>() : nullptr;
}

/**  */
namespace ImpactPointType_Names {

constexpr const char* Extern_Type_Name{"ImpactPointType"};
constexpr const char* BodyLocation_Name{"BodyLocation"};
constexpr const char* BodyFace_Name{"BodyFace"};

} // namespace ImpactPointType_Names

void ImpactPointType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ImpactPointType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ImpactPointType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ImpactPointType_Names::BodyLocation_Name) {
      OffsetLocationErrorType::deserialize(valueType.second, accessor.chooseBodyLocation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ImpactPointType_Names::BodyFace_Name) {
      BodyFaceType::deserialize(valueType.second, accessor.chooseBodyFace(), nodeName, nsPrefix);
    }
  }
}

std::string ImpactPointType::serialize(const uci::type::ImpactPointType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ImpactPointType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ImpactPointType_Names::Extern_Type_Name);
  }
  if (accessor.isBodyLocation()) {
    OffsetLocationErrorType::serialize(accessor.getBodyLocation(), node, ImpactPointType_Names::BodyLocation_Name);
  } else if (accessor.isBodyFace()) {
    BodyFaceType::serialize(accessor.getBodyFace(), node, ImpactPointType_Names::BodyFace_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ImpactPointType& ImpactPointType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ImpactPointType>().release());
}

uci::type::ImpactPointType& ImpactPointType::create(const uci::type::ImpactPointType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ImpactPointType> newAccessor{boost::make_unique<asb_uci::type::ImpactPointType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ImpactPointType::destroy(uci::type::ImpactPointType& accessor) {
  delete dynamic_cast<asb_uci::type::ImpactPointType*>(&accessor);
}

} // namespace type

} // namespace uci

