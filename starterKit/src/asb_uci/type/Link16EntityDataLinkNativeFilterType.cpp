/** @file Link16EntityDataLinkNativeFilterType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/Link16EntityDataLinkNativeFilterType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DataLinkNativeFilterPET.h"
#include "asb_uci/type/EntityAssignmentType.h"
#include "asb_uci/type/GatewayLink16ConfigurationAreaType.h"
#include "asb_uci/type/GatewayLink16ConfigurationClassEnum.h"
#include "asb_uci/type/GatewayLink16ConfigurationEnvironmentType.h"
#include "asb_uci/type/GatewayLink16ConfigurationIdentityType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EntityAssignmentType.h"
#include "uci/type/GatewayLink16ConfigurationAreaType.h"
#include "uci/type/GatewayLink16ConfigurationClassEnum.h"
#include "uci/type/GatewayLink16ConfigurationEnvironmentType.h"
#include "uci/type/GatewayLink16ConfigurationIdentityType.h"
#include "uci/type/Link16EntityDataLinkNativeFilterType.h"
#include "uci/type/Link16_NPG_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

Link16EntityDataLinkNativeFilterType::Link16EntityDataLinkNativeFilterType()
  : gatewayClass_Accessor{boost::make_unique<GatewayLink16ConfigurationClassEnum>()},
    link16NPG_Accessor{boost::make_unique<Link16NPG>(0, SIZE_MAX)},
    entityIdentification_Accessor{boost::make_unique<EntityIdentification>(0, SIZE_MAX)} {
}

Link16EntityDataLinkNativeFilterType::~Link16EntityDataLinkNativeFilterType() = default;

void Link16EntityDataLinkNativeFilterType::copy(const uci::type::Link16EntityDataLinkNativeFilterType& accessor) {
  copyImpl(accessor, false);
}

void Link16EntityDataLinkNativeFilterType::copyImpl(const uci::type::Link16EntityDataLinkNativeFilterType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataLinkNativeFilterPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const Link16EntityDataLinkNativeFilterType&>(accessor);
    setGatewayClass(*(accessorImpl.gatewayClass_Accessor));
    setSpecialProcessingIndicator(accessorImpl.specialProcessingIndicator_Accessor);
    setSimulationIndicator(accessorImpl.simulationIndicator_Accessor);
    setTargetSorting12_6(accessorImpl.targetSorting12_6_Accessor);
    setTrack3X(accessorImpl.track3X_Accessor);
    setLink16NPG(*(accessorImpl.link16NPG_Accessor));
    if (accessorImpl.geographicArea_Accessor) {
      setGeographicArea(*(accessorImpl.geographicArea_Accessor));
    } else {
      geographicArea_Accessor.reset();
    }
    if (accessorImpl.hasNumber()) {
      setNumber(accessorImpl.getNumber());
    } else {
      clearNumber();
    }
    if (accessorImpl.environment_Accessor) {
      setEnvironment(*(accessorImpl.environment_Accessor));
    } else {
      environment_Accessor.reset();
    }
    if (accessorImpl.identity_Accessor) {
      setIdentity(*(accessorImpl.identity_Accessor));
    } else {
      identity_Accessor.reset();
    }
    setEntityIdentification(*(accessorImpl.entityIdentification_Accessor));
  }
}

void Link16EntityDataLinkNativeFilterType::reset() noexcept {
  DataLinkNativeFilterPET::reset();
  gatewayClass_Accessor->reset();
  specialProcessingIndicator_Accessor = false;
  simulationIndicator_Accessor = false;
  targetSorting12_6_Accessor = false;
  track3X_Accessor = false;
  link16NPG_Accessor->reset();
  geographicArea_Accessor.reset();
  clearNumber();
  environment_Accessor.reset();
  identity_Accessor.reset();
  entityIdentification_Accessor->reset();
}

const uci::type::GatewayLink16ConfigurationClassEnum& Link16EntityDataLinkNativeFilterType::getGatewayClass() const {
  return *gatewayClass_Accessor;
}

uci::type::GatewayLink16ConfigurationClassEnum& Link16EntityDataLinkNativeFilterType::getGatewayClass() {
  return *gatewayClass_Accessor;
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::setGatewayClass(const uci::type::GatewayLink16ConfigurationClassEnum& accessor) {
  if (&accessor != gatewayClass_Accessor.get()) {
    gatewayClass_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::setGatewayClass(uci::type::GatewayLink16ConfigurationClassEnum::EnumerationItem value) {
  gatewayClass_Accessor->setValue(value);
  return *this;
}


xs::Boolean Link16EntityDataLinkNativeFilterType::getSpecialProcessingIndicator() const {
  return specialProcessingIndicator_Accessor;
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::setSpecialProcessingIndicator(xs::Boolean value) {
  specialProcessingIndicator_Accessor = value;
  return *this;
}


xs::Boolean Link16EntityDataLinkNativeFilterType::getSimulationIndicator() const {
  return simulationIndicator_Accessor;
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::setSimulationIndicator(xs::Boolean value) {
  simulationIndicator_Accessor = value;
  return *this;
}


xs::Boolean Link16EntityDataLinkNativeFilterType::getTargetSorting12_6() const {
  return targetSorting12_6_Accessor;
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::setTargetSorting12_6(xs::Boolean value) {
  targetSorting12_6_Accessor = value;
  return *this;
}


xs::Boolean Link16EntityDataLinkNativeFilterType::getTrack3X() const {
  return track3X_Accessor;
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::setTrack3X(xs::Boolean value) {
  track3X_Accessor = value;
  return *this;
}


const uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG& Link16EntityDataLinkNativeFilterType::getLink16NPG() const {
  return *link16NPG_Accessor;
}

uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG& Link16EntityDataLinkNativeFilterType::getLink16NPG() {
  return *link16NPG_Accessor;
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::setLink16NPG(const uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG& accessor) {
  if (&accessor != link16NPG_Accessor.get()) {
    link16NPG_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::GatewayLink16ConfigurationAreaType& Link16EntityDataLinkNativeFilterType::getGeographicArea_() const {
  if (geographicArea_Accessor) {
    return *geographicArea_Accessor;
  }
  throw uci::base::UCIException("Error in getGeographicArea(): An attempt was made to get an optional field that was not enabled, call hasGeographicArea() to determine if it is safe to call getGeographicArea()");
}

const uci::type::GatewayLink16ConfigurationAreaType& Link16EntityDataLinkNativeFilterType::getGeographicArea() const {
  return getGeographicArea_();
}

uci::type::GatewayLink16ConfigurationAreaType& Link16EntityDataLinkNativeFilterType::getGeographicArea() {
  return getGeographicArea_();
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::setGeographicArea(const uci::type::GatewayLink16ConfigurationAreaType& accessor) {
  enableGeographicArea();
  if (&accessor != geographicArea_Accessor.get()) {
    geographicArea_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool Link16EntityDataLinkNativeFilterType::hasGeographicArea() const noexcept {
  return static_cast<bool>(geographicArea_Accessor);
}

uci::type::GatewayLink16ConfigurationAreaType& Link16EntityDataLinkNativeFilterType::enableGeographicArea(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationAreaType : type};
  if ((!geographicArea_Accessor) || (geographicArea_Accessor->getAccessorType() != requestedType)) {
    geographicArea_Accessor = GatewayLink16ConfigurationAreaType::create(requestedType);
    if (!geographicArea_Accessor) {
      throw uci::base::UCIException("Error in enableGeographicArea(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *geographicArea_Accessor;
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::clearGeographicArea() noexcept {
  geographicArea_Accessor.reset();
  return *this;
}

xs::UnsignedInt Link16EntityDataLinkNativeFilterType::getNumber() const {
  if (number_Accessor) {
    return *number_Accessor;
  }
  throw uci::base::UCIException("Error in getNumber(): An attempt was made to get an optional field that was not enabled, call hasNumber() to determine if it is safe to call getNumber()");
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::setNumber(xs::UnsignedInt value) {
  number_Accessor = value;
  return *this;
}

bool Link16EntityDataLinkNativeFilterType::hasNumber() const noexcept {
  return number_Accessor.has_value();
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::clearNumber() noexcept {
  number_Accessor.reset();
  return *this;
}

uci::type::GatewayLink16ConfigurationEnvironmentType& Link16EntityDataLinkNativeFilterType::getEnvironment_() const {
  if (environment_Accessor) {
    return *environment_Accessor;
  }
  throw uci::base::UCIException("Error in getEnvironment(): An attempt was made to get an optional field that was not enabled, call hasEnvironment() to determine if it is safe to call getEnvironment()");
}

const uci::type::GatewayLink16ConfigurationEnvironmentType& Link16EntityDataLinkNativeFilterType::getEnvironment() const {
  return getEnvironment_();
}

uci::type::GatewayLink16ConfigurationEnvironmentType& Link16EntityDataLinkNativeFilterType::getEnvironment() {
  return getEnvironment_();
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::setEnvironment(const uci::type::GatewayLink16ConfigurationEnvironmentType& accessor) {
  enableEnvironment();
  if (&accessor != environment_Accessor.get()) {
    environment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool Link16EntityDataLinkNativeFilterType::hasEnvironment() const noexcept {
  return static_cast<bool>(environment_Accessor);
}

uci::type::GatewayLink16ConfigurationEnvironmentType& Link16EntityDataLinkNativeFilterType::enableEnvironment(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationEnvironmentType : type};
  if ((!environment_Accessor) || (environment_Accessor->getAccessorType() != requestedType)) {
    environment_Accessor = GatewayLink16ConfigurationEnvironmentType::create(requestedType);
    if (!environment_Accessor) {
      throw uci::base::UCIException("Error in enableEnvironment(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *environment_Accessor;
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::clearEnvironment() noexcept {
  environment_Accessor.reset();
  return *this;
}

uci::type::GatewayLink16ConfigurationIdentityType& Link16EntityDataLinkNativeFilterType::getIdentity_() const {
  if (identity_Accessor) {
    return *identity_Accessor;
  }
  throw uci::base::UCIException("Error in getIdentity(): An attempt was made to get an optional field that was not enabled, call hasIdentity() to determine if it is safe to call getIdentity()");
}

const uci::type::GatewayLink16ConfigurationIdentityType& Link16EntityDataLinkNativeFilterType::getIdentity() const {
  return getIdentity_();
}

uci::type::GatewayLink16ConfigurationIdentityType& Link16EntityDataLinkNativeFilterType::getIdentity() {
  return getIdentity_();
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::setIdentity(const uci::type::GatewayLink16ConfigurationIdentityType& accessor) {
  enableIdentity();
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool Link16EntityDataLinkNativeFilterType::hasIdentity() const noexcept {
  return static_cast<bool>(identity_Accessor);
}

uci::type::GatewayLink16ConfigurationIdentityType& Link16EntityDataLinkNativeFilterType::enableIdentity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationIdentityType : type};
  if ((!identity_Accessor) || (identity_Accessor->getAccessorType() != requestedType)) {
    identity_Accessor = GatewayLink16ConfigurationIdentityType::create(requestedType);
    if (!identity_Accessor) {
      throw uci::base::UCIException("Error in enableIdentity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *identity_Accessor;
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::clearIdentity() noexcept {
  identity_Accessor.reset();
  return *this;
}

const uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification& Link16EntityDataLinkNativeFilterType::getEntityIdentification() const {
  return *entityIdentification_Accessor;
}

uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification& Link16EntityDataLinkNativeFilterType::getEntityIdentification() {
  return *entityIdentification_Accessor;
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::setEntityIdentification(const uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification& accessor) {
  if (&accessor != entityIdentification_Accessor.get()) {
    entityIdentification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<Link16EntityDataLinkNativeFilterType> Link16EntityDataLinkNativeFilterType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::link16EntityDataLinkNativeFilterType : type};
  return (requestedType == uci::type::accessorType::link16EntityDataLinkNativeFilterType) ? boost::make_unique<Link16EntityDataLinkNativeFilterType>() : nullptr;
}

/**  */
namespace Link16EntityDataLinkNativeFilterType_Names {

constexpr const char* Extern_Type_Name{"Link16EntityDataLinkNativeFilterType"};
constexpr const char* GatewayClass_Name{"GatewayClass"};
constexpr const char* SpecialProcessingIndicator_Name{"SpecialProcessingIndicator"};
constexpr const char* SimulationIndicator_Name{"SimulationIndicator"};
constexpr const char* TargetSorting12_6_Name{"TargetSorting12_6"};
constexpr const char* Track3X_Name{"Track3X"};
constexpr const char* Link16NPG_Name{"Link16NPG"};
constexpr const char* GeographicArea_Name{"GeographicArea"};
constexpr const char* Number_Name{"Number"};
constexpr const char* Environment_Name{"Environment"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* EntityIdentification_Name{"EntityIdentification"};

} // namespace Link16EntityDataLinkNativeFilterType_Names

void Link16EntityDataLinkNativeFilterType::deserialize(const boost::property_tree::ptree& propTree, uci::type::Link16EntityDataLinkNativeFilterType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = Link16EntityDataLinkNativeFilterType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::GatewayClass_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getGatewayClass().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::SpecialProcessingIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpecialProcessingIndicator(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::SimulationIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSimulationIndicator(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::TargetSorting12_6_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetSorting12_6(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::Track3X_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTrack3X(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::Link16NPG_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG& boundedList = accessor.getLink16NPG();
        const uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedShortValue(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::GeographicArea_Name) {
      GatewayLink16ConfigurationAreaType::deserialize(valueType.second, accessor.enableGeographicArea(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::Number_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumber(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::Environment_Name) {
      GatewayLink16ConfigurationEnvironmentType::deserialize(valueType.second, accessor.enableEnvironment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::Identity_Name) {
      GatewayLink16ConfigurationIdentityType::deserialize(valueType.second, accessor.enableIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::EntityIdentification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification& boundedList = accessor.getEntityIdentification();
        const uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EntityAssignmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  DataLinkNativeFilterPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string Link16EntityDataLinkNativeFilterType::serialize(const uci::type::Link16EntityDataLinkNativeFilterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? Link16EntityDataLinkNativeFilterType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, Link16EntityDataLinkNativeFilterType_Names::Extern_Type_Name);
  }
  DataLinkNativeFilterPET::serialize(accessor, node, "", false, false, false);
  GatewayLink16ConfigurationClassEnum::serialize(accessor.getGatewayClass(), node, Link16EntityDataLinkNativeFilterType_Names::GatewayClass_Name, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSpecialProcessingIndicator(), node, Link16EntityDataLinkNativeFilterType_Names::SpecialProcessingIndicator_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSimulationIndicator(), node, Link16EntityDataLinkNativeFilterType_Names::SimulationIndicator_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getTargetSorting12_6(), node, Link16EntityDataLinkNativeFilterType_Names::TargetSorting12_6_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getTrack3X(), node, Link16EntityDataLinkNativeFilterType_Names::Track3X_Name);
  {
    const uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG& boundedList = accessor.getLink16NPG();
    for (uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeUnsignedShort(boundedList.at(i), node, Link16EntityDataLinkNativeFilterType_Names::Link16NPG_Name);
    }
  }
  if (accessor.hasGeographicArea()) {
    GatewayLink16ConfigurationAreaType::serialize(accessor.getGeographicArea(), node, Link16EntityDataLinkNativeFilterType_Names::GeographicArea_Name);
  }
  if (accessor.hasNumber()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumber(), node, Link16EntityDataLinkNativeFilterType_Names::Number_Name);
  }
  if (accessor.hasEnvironment()) {
    GatewayLink16ConfigurationEnvironmentType::serialize(accessor.getEnvironment(), node, Link16EntityDataLinkNativeFilterType_Names::Environment_Name);
  }
  if (accessor.hasIdentity()) {
    GatewayLink16ConfigurationIdentityType::serialize(accessor.getIdentity(), node, Link16EntityDataLinkNativeFilterType_Names::Identity_Name);
  }
  {
    const uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification& boundedList = accessor.getEntityIdentification();
    for (uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EntityAssignmentType::serialize(boundedList.at(i), node, Link16EntityDataLinkNativeFilterType_Names::EntityIdentification_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::Link16EntityDataLinkNativeFilterType>().release());
}

uci::type::Link16EntityDataLinkNativeFilterType& Link16EntityDataLinkNativeFilterType::create(const uci::type::Link16EntityDataLinkNativeFilterType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::Link16EntityDataLinkNativeFilterType> newAccessor{boost::make_unique<asb_uci::type::Link16EntityDataLinkNativeFilterType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void Link16EntityDataLinkNativeFilterType::destroy(uci::type::Link16EntityDataLinkNativeFilterType& accessor) {
  delete dynamic_cast<asb_uci::type::Link16EntityDataLinkNativeFilterType*>(&accessor);
}

} // namespace type

} // namespace uci

