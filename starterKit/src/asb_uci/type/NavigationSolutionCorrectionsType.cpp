/** @file NavigationSolutionCorrectionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/NavigationSolutionCorrectionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrientationType.h"
#include "asb_uci/type/Point3D_Type.h"
#include "asb_uci/type/Velocity3D_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/NavigationSolutionCorrectionsType.h"
#include "uci/type/OrientationType.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/Velocity3D_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

NavigationSolutionCorrectionsType::NavigationSolutionCorrectionsType() = default;

NavigationSolutionCorrectionsType::~NavigationSolutionCorrectionsType() = default;

void NavigationSolutionCorrectionsType::copy(const uci::type::NavigationSolutionCorrectionsType& accessor) {
  copyImpl(accessor, false);
}

void NavigationSolutionCorrectionsType::copyImpl(const uci::type::NavigationSolutionCorrectionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const NavigationSolutionCorrectionsType&>(accessor);
    if (accessorImpl.velocityCorrection_Accessor) {
      setVelocityCorrection(*(accessorImpl.velocityCorrection_Accessor));
    } else {
      velocityCorrection_Accessor.reset();
    }
    if (accessorImpl.positionCorrection_Accessor) {
      setPositionCorrection(*(accessorImpl.positionCorrection_Accessor));
    } else {
      positionCorrection_Accessor.reset();
    }
    if (accessorImpl.orientationCorrection_Accessor) {
      setOrientationCorrection(*(accessorImpl.orientationCorrection_Accessor));
    } else {
      orientationCorrection_Accessor.reset();
    }
  }
}

void NavigationSolutionCorrectionsType::reset() noexcept {
  velocityCorrection_Accessor.reset();
  positionCorrection_Accessor.reset();
  orientationCorrection_Accessor.reset();
}

uci::type::Velocity3D_Type& NavigationSolutionCorrectionsType::getVelocityCorrection_() const {
  if (velocityCorrection_Accessor) {
    return *velocityCorrection_Accessor;
  }
  throw uci::base::UCIException("Error in getVelocityCorrection(): An attempt was made to get an optional field that was not enabled, call hasVelocityCorrection() to determine if it is safe to call getVelocityCorrection()");
}

const uci::type::Velocity3D_Type& NavigationSolutionCorrectionsType::getVelocityCorrection() const {
  return getVelocityCorrection_();
}

uci::type::Velocity3D_Type& NavigationSolutionCorrectionsType::getVelocityCorrection() {
  return getVelocityCorrection_();
}

uci::type::NavigationSolutionCorrectionsType& NavigationSolutionCorrectionsType::setVelocityCorrection(const uci::type::Velocity3D_Type& accessor) {
  enableVelocityCorrection();
  if (&accessor != velocityCorrection_Accessor.get()) {
    velocityCorrection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NavigationSolutionCorrectionsType::hasVelocityCorrection() const noexcept {
  return static_cast<bool>(velocityCorrection_Accessor);
}

uci::type::Velocity3D_Type& NavigationSolutionCorrectionsType::enableVelocityCorrection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::velocity3D_Type : type};
  if ((!velocityCorrection_Accessor) || (velocityCorrection_Accessor->getAccessorType() != requestedType)) {
    velocityCorrection_Accessor = Velocity3D_Type::create(requestedType);
    if (!velocityCorrection_Accessor) {
      throw uci::base::UCIException("Error in enableVelocityCorrection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *velocityCorrection_Accessor;
}

uci::type::NavigationSolutionCorrectionsType& NavigationSolutionCorrectionsType::clearVelocityCorrection() noexcept {
  velocityCorrection_Accessor.reset();
  return *this;
}

uci::type::Point3D_Type& NavigationSolutionCorrectionsType::getPositionCorrection_() const {
  if (positionCorrection_Accessor) {
    return *positionCorrection_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionCorrection(): An attempt was made to get an optional field that was not enabled, call hasPositionCorrection() to determine if it is safe to call getPositionCorrection()");
}

const uci::type::Point3D_Type& NavigationSolutionCorrectionsType::getPositionCorrection() const {
  return getPositionCorrection_();
}

uci::type::Point3D_Type& NavigationSolutionCorrectionsType::getPositionCorrection() {
  return getPositionCorrection_();
}

uci::type::NavigationSolutionCorrectionsType& NavigationSolutionCorrectionsType::setPositionCorrection(const uci::type::Point3D_Type& accessor) {
  enablePositionCorrection(accessor.getAccessorType());
  if (&accessor != positionCorrection_Accessor.get()) {
    positionCorrection_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool NavigationSolutionCorrectionsType::hasPositionCorrection() const noexcept {
  return static_cast<bool>(positionCorrection_Accessor);
}

uci::type::Point3D_Type& NavigationSolutionCorrectionsType::enablePositionCorrection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!positionCorrection_Accessor) || (positionCorrection_Accessor->getAccessorType() != requestedType)) {
    positionCorrection_Accessor = Point3D_Type::create(requestedType);
    if (!positionCorrection_Accessor) {
      throw uci::base::UCIException("Error in enablePositionCorrection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionCorrection_Accessor;
}

uci::type::NavigationSolutionCorrectionsType& NavigationSolutionCorrectionsType::clearPositionCorrection() noexcept {
  positionCorrection_Accessor.reset();
  return *this;
}

uci::type::OrientationType& NavigationSolutionCorrectionsType::getOrientationCorrection_() const {
  if (orientationCorrection_Accessor) {
    return *orientationCorrection_Accessor;
  }
  throw uci::base::UCIException("Error in getOrientationCorrection(): An attempt was made to get an optional field that was not enabled, call hasOrientationCorrection() to determine if it is safe to call getOrientationCorrection()");
}

const uci::type::OrientationType& NavigationSolutionCorrectionsType::getOrientationCorrection() const {
  return getOrientationCorrection_();
}

uci::type::OrientationType& NavigationSolutionCorrectionsType::getOrientationCorrection() {
  return getOrientationCorrection_();
}

uci::type::NavigationSolutionCorrectionsType& NavigationSolutionCorrectionsType::setOrientationCorrection(const uci::type::OrientationType& accessor) {
  enableOrientationCorrection();
  if (&accessor != orientationCorrection_Accessor.get()) {
    orientationCorrection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NavigationSolutionCorrectionsType::hasOrientationCorrection() const noexcept {
  return static_cast<bool>(orientationCorrection_Accessor);
}

uci::type::OrientationType& NavigationSolutionCorrectionsType::enableOrientationCorrection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orientationType : type};
  if ((!orientationCorrection_Accessor) || (orientationCorrection_Accessor->getAccessorType() != requestedType)) {
    orientationCorrection_Accessor = OrientationType::create(requestedType);
    if (!orientationCorrection_Accessor) {
      throw uci::base::UCIException("Error in enableOrientationCorrection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orientationCorrection_Accessor;
}

uci::type::NavigationSolutionCorrectionsType& NavigationSolutionCorrectionsType::clearOrientationCorrection() noexcept {
  orientationCorrection_Accessor.reset();
  return *this;
}

std::unique_ptr<NavigationSolutionCorrectionsType> NavigationSolutionCorrectionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::navigationSolutionCorrectionsType : type};
  return (requestedType == uci::type::accessorType::navigationSolutionCorrectionsType) ? boost::make_unique<NavigationSolutionCorrectionsType>() : nullptr;
}

/**  */
namespace NavigationSolutionCorrectionsType_Names {

constexpr const char* Extern_Type_Name{"NavigationSolutionCorrectionsType"};
constexpr const char* VelocityCorrection_Name{"VelocityCorrection"};
constexpr const char* PositionCorrection_Name{"PositionCorrection"};
constexpr const char* OrientationCorrection_Name{"OrientationCorrection"};

} // namespace NavigationSolutionCorrectionsType_Names

void NavigationSolutionCorrectionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::NavigationSolutionCorrectionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = NavigationSolutionCorrectionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + NavigationSolutionCorrectionsType_Names::VelocityCorrection_Name) {
      Velocity3D_Type::deserialize(valueType.second, accessor.enableVelocityCorrection(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NavigationSolutionCorrectionsType_Names::PositionCorrection_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePositionCorrection(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NavigationSolutionCorrectionsType_Names::OrientationCorrection_Name) {
      OrientationType::deserialize(valueType.second, accessor.enableOrientationCorrection(), nodeName, nsPrefix);
    }
  }
}

std::string NavigationSolutionCorrectionsType::serialize(const uci::type::NavigationSolutionCorrectionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? NavigationSolutionCorrectionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, NavigationSolutionCorrectionsType_Names::Extern_Type_Name);
  }
  if (accessor.hasVelocityCorrection()) {
    Velocity3D_Type::serialize(accessor.getVelocityCorrection(), node, NavigationSolutionCorrectionsType_Names::VelocityCorrection_Name);
  }
  if (accessor.hasPositionCorrection()) {
    Point3D_Type::serialize(accessor.getPositionCorrection(), node, NavigationSolutionCorrectionsType_Names::PositionCorrection_Name);
  }
  if (accessor.hasOrientationCorrection()) {
    OrientationType::serialize(accessor.getOrientationCorrection(), node, NavigationSolutionCorrectionsType_Names::OrientationCorrection_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::NavigationSolutionCorrectionsType& NavigationSolutionCorrectionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::NavigationSolutionCorrectionsType>().release());
}

uci::type::NavigationSolutionCorrectionsType& NavigationSolutionCorrectionsType::create(const uci::type::NavigationSolutionCorrectionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::NavigationSolutionCorrectionsType> newAccessor{boost::make_unique<asb_uci::type::NavigationSolutionCorrectionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void NavigationSolutionCorrectionsType::destroy(uci::type::NavigationSolutionCorrectionsType& accessor) {
  delete dynamic_cast<asb_uci::type::NavigationSolutionCorrectionsType*>(&accessor);
}

} // namespace type

} // namespace uci

