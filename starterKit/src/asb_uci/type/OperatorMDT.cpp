/** @file OperatorMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OperatorMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ContactDetailsType.h"
#include "asb_uci/type/DataRecordBaseType.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/OperatorID_Type.h"
#include "asb_uci/type/OperatorRoleID_Type.h"
#include "asb_uci/type/OperatorStatusEnum.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ContactDetailsType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/OperatorID_Type.h"
#include "uci/type/OperatorMDT.h"
#include "uci/type/OperatorRoleID_Type.h"
#include "uci/type/OperatorStatusEnum.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OperatorMDT::OperatorMDT()
  : operatorID_Accessor{boost::make_unique<OperatorID_Type>()},
    operatorStatus_Accessor{boost::make_unique<OperatorStatusEnum>()},
    operatorRoleID_Accessor{boost::make_unique<OperatorRoleID>(0, SIZE_MAX)} {
}

OperatorMDT::~OperatorMDT() = default;

void OperatorMDT::copy(const uci::type::OperatorMDT& accessor) {
  copyImpl(accessor, false);
}

void OperatorMDT::copyImpl(const uci::type::OperatorMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const OperatorMDT&>(accessor);
    setOperatorID(*(accessorImpl.operatorID_Accessor));
    if (accessorImpl.operatorSystemID_Accessor) {
      setOperatorSystemID(*(accessorImpl.operatorSystemID_Accessor));
    } else {
      operatorSystemID_Accessor.reset();
    }
    setOperatorStatus(*(accessorImpl.operatorStatus_Accessor));
    if (accessorImpl.station_Accessor) {
      setStation(*(accessorImpl.station_Accessor));
    } else {
      station_Accessor.reset();
    }
    setOperatorRoleID(*(accessorImpl.operatorRoleID_Accessor));
    if (accessorImpl.contactDetails_Accessor) {
      setContactDetails(*(accessorImpl.contactDetails_Accessor));
    } else {
      contactDetails_Accessor.reset();
    }
  }
}

void OperatorMDT::reset() noexcept {
  DataRecordBaseType::reset();
  operatorID_Accessor->reset();
  operatorSystemID_Accessor.reset();
  operatorStatus_Accessor->reset();
  station_Accessor.reset();
  operatorRoleID_Accessor->reset();
  contactDetails_Accessor.reset();
}

const uci::type::OperatorID_Type& OperatorMDT::getOperatorID() const {
  return *operatorID_Accessor;
}

uci::type::OperatorID_Type& OperatorMDT::getOperatorID() {
  return *operatorID_Accessor;
}

uci::type::OperatorMDT& OperatorMDT::setOperatorID(const uci::type::OperatorID_Type& accessor) {
  if (&accessor != operatorID_Accessor.get()) {
    operatorID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemID_Type& OperatorMDT::getOperatorSystemID_() const {
  if (operatorSystemID_Accessor) {
    return *operatorSystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getOperatorSystemID(): An attempt was made to get an optional field that was not enabled, call hasOperatorSystemID() to determine if it is safe to call getOperatorSystemID()");
}

const uci::type::SystemID_Type& OperatorMDT::getOperatorSystemID() const {
  return getOperatorSystemID_();
}

uci::type::SystemID_Type& OperatorMDT::getOperatorSystemID() {
  return getOperatorSystemID_();
}

uci::type::OperatorMDT& OperatorMDT::setOperatorSystemID(const uci::type::SystemID_Type& accessor) {
  enableOperatorSystemID();
  if (&accessor != operatorSystemID_Accessor.get()) {
    operatorSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OperatorMDT::hasOperatorSystemID() const noexcept {
  return static_cast<bool>(operatorSystemID_Accessor);
}

uci::type::SystemID_Type& OperatorMDT::enableOperatorSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!operatorSystemID_Accessor) || (operatorSystemID_Accessor->getAccessorType() != requestedType)) {
    operatorSystemID_Accessor = SystemID_Type::create(requestedType);
    if (!operatorSystemID_Accessor) {
      throw uci::base::UCIException("Error in enableOperatorSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *operatorSystemID_Accessor;
}

uci::type::OperatorMDT& OperatorMDT::clearOperatorSystemID() noexcept {
  operatorSystemID_Accessor.reset();
  return *this;
}

const uci::type::OperatorStatusEnum& OperatorMDT::getOperatorStatus() const {
  return *operatorStatus_Accessor;
}

uci::type::OperatorStatusEnum& OperatorMDT::getOperatorStatus() {
  return *operatorStatus_Accessor;
}

uci::type::OperatorMDT& OperatorMDT::setOperatorStatus(const uci::type::OperatorStatusEnum& accessor) {
  if (&accessor != operatorStatus_Accessor.get()) {
    operatorStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OperatorMDT& OperatorMDT::setOperatorStatus(uci::type::OperatorStatusEnum::EnumerationItem value) {
  operatorStatus_Accessor->setValue(value);
  return *this;
}


uci::type::ForeignKeyType& OperatorMDT::getStation_() const {
  if (station_Accessor) {
    return *station_Accessor;
  }
  throw uci::base::UCIException("Error in getStation(): An attempt was made to get an optional field that was not enabled, call hasStation() to determine if it is safe to call getStation()");
}

const uci::type::ForeignKeyType& OperatorMDT::getStation() const {
  return getStation_();
}

uci::type::ForeignKeyType& OperatorMDT::getStation() {
  return getStation_();
}

uci::type::OperatorMDT& OperatorMDT::setStation(const uci::type::ForeignKeyType& accessor) {
  enableStation(accessor.getAccessorType());
  if (&accessor != station_Accessor.get()) {
    station_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OperatorMDT::hasStation() const noexcept {
  return static_cast<bool>(station_Accessor);
}

uci::type::ForeignKeyType& OperatorMDT::enableStation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!station_Accessor) || (station_Accessor->getAccessorType() != requestedType)) {
    station_Accessor = ForeignKeyType::create(requestedType);
    if (!station_Accessor) {
      throw uci::base::UCIException("Error in enableStation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *station_Accessor;
}

uci::type::OperatorMDT& OperatorMDT::clearStation() noexcept {
  station_Accessor.reset();
  return *this;
}

const uci::type::OperatorMDT::OperatorRoleID& OperatorMDT::getOperatorRoleID() const {
  return *operatorRoleID_Accessor;
}

uci::type::OperatorMDT::OperatorRoleID& OperatorMDT::getOperatorRoleID() {
  return *operatorRoleID_Accessor;
}

uci::type::OperatorMDT& OperatorMDT::setOperatorRoleID(const uci::type::OperatorMDT::OperatorRoleID& accessor) {
  if (&accessor != operatorRoleID_Accessor.get()) {
    operatorRoleID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ContactDetailsType& OperatorMDT::getContactDetails_() const {
  if (contactDetails_Accessor) {
    return *contactDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getContactDetails(): An attempt was made to get an optional field that was not enabled, call hasContactDetails() to determine if it is safe to call getContactDetails()");
}

const uci::type::ContactDetailsType& OperatorMDT::getContactDetails() const {
  return getContactDetails_();
}

uci::type::ContactDetailsType& OperatorMDT::getContactDetails() {
  return getContactDetails_();
}

uci::type::OperatorMDT& OperatorMDT::setContactDetails(const uci::type::ContactDetailsType& accessor) {
  enableContactDetails();
  if (&accessor != contactDetails_Accessor.get()) {
    contactDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OperatorMDT::hasContactDetails() const noexcept {
  return static_cast<bool>(contactDetails_Accessor);
}

uci::type::ContactDetailsType& OperatorMDT::enableContactDetails(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::contactDetailsType : type};
  if ((!contactDetails_Accessor) || (contactDetails_Accessor->getAccessorType() != requestedType)) {
    contactDetails_Accessor = ContactDetailsType::create(requestedType);
    if (!contactDetails_Accessor) {
      throw uci::base::UCIException("Error in enableContactDetails(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *contactDetails_Accessor;
}

uci::type::OperatorMDT& OperatorMDT::clearContactDetails() noexcept {
  contactDetails_Accessor.reset();
  return *this;
}

std::unique_ptr<OperatorMDT> OperatorMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorMDT : type};
  return (requestedType == uci::type::accessorType::operatorMDT) ? boost::make_unique<OperatorMDT>() : nullptr;
}

/**  */
namespace OperatorMDT_Names {

constexpr const char* Extern_Type_Name{"OperatorMDT"};
constexpr const char* OperatorID_Name{"OperatorID"};
constexpr const char* OperatorSystemID_Name{"OperatorSystemID"};
constexpr const char* OperatorStatus_Name{"OperatorStatus"};
constexpr const char* Station_Name{"Station"};
constexpr const char* OperatorRoleID_Name{"OperatorRoleID"};
constexpr const char* ContactDetails_Name{"ContactDetails"};

} // namespace OperatorMDT_Names

void OperatorMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OperatorMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OperatorMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OperatorMDT_Names::OperatorID_Name) {
      OperatorID_Type::deserialize(valueType.second, accessor.getOperatorID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorMDT_Names::OperatorSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableOperatorSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorMDT_Names::OperatorStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getOperatorStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OperatorMDT_Names::Station_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableStation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorMDT_Names::OperatorRoleID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OperatorMDT::OperatorRoleID& boundedList = accessor.getOperatorRoleID();
        const uci::type::OperatorMDT::OperatorRoleID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OperatorRoleID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OperatorMDT_Names::ContactDetails_Name) {
      ContactDetailsType::deserialize(valueType.second, accessor.enableContactDetails(), nodeName, nsPrefix);
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string OperatorMDT::serialize(const uci::type::OperatorMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OperatorMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OperatorMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  OperatorID_Type::serialize(accessor.getOperatorID(), node, OperatorMDT_Names::OperatorID_Name);
  if (accessor.hasOperatorSystemID()) {
    SystemID_Type::serialize(accessor.getOperatorSystemID(), node, OperatorMDT_Names::OperatorSystemID_Name);
  }
  OperatorStatusEnum::serialize(accessor.getOperatorStatus(), node, OperatorMDT_Names::OperatorStatus_Name, false);
  if (accessor.hasStation()) {
    ForeignKeyType::serialize(accessor.getStation(), node, OperatorMDT_Names::Station_Name);
  }
  {
    const uci::type::OperatorMDT::OperatorRoleID& boundedList = accessor.getOperatorRoleID();
    for (uci::type::OperatorMDT::OperatorRoleID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OperatorRoleID_Type::serialize(boundedList.at(i), node, OperatorMDT_Names::OperatorRoleID_Name);
    }
  }
  if (accessor.hasContactDetails()) {
    ContactDetailsType::serialize(accessor.getContactDetails(), node, OperatorMDT_Names::ContactDetails_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OperatorMDT& OperatorMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OperatorMDT>().release());
}

uci::type::OperatorMDT& OperatorMDT::create(const uci::type::OperatorMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OperatorMDT> newAccessor{boost::make_unique<asb_uci::type::OperatorMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OperatorMDT::destroy(uci::type::OperatorMDT& accessor) {
  delete dynamic_cast<asb_uci::type::OperatorMDT*>(&accessor);
}

} // namespace type

} // namespace uci

