/** @file StrikeTaskReleaseConstraintsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/StrikeTaskReleaseConstraintsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AreaConstraintsType.h"
#include "../../../include/asb_uci/type/Point3D_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AreaConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point3D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StrikeTaskReleaseConstraintsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StrikeTaskReleaseConstraintsType::StrikeTaskReleaseConstraintsType() = default;

StrikeTaskReleaseConstraintsType::~StrikeTaskReleaseConstraintsType() = default;

void StrikeTaskReleaseConstraintsType::copy(const uci::type::StrikeTaskReleaseConstraintsType& accessor) {
  copyImpl(accessor, false);
}

void StrikeTaskReleaseConstraintsType::copyImpl(const uci::type::StrikeTaskReleaseConstraintsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const StrikeTaskReleaseConstraintsType&>(accessor);
    if (accessorImpl.releasePoint_Accessor) {
      setReleasePoint(*(accessorImpl.releasePoint_Accessor));
    } else {
      releasePoint_Accessor.reset();
    }
    if (accessorImpl.releaseArea_Accessor) {
      setReleaseArea(*(accessorImpl.releaseArea_Accessor));
    } else {
      releaseArea_Accessor.reset();
    }
  }
}

void StrikeTaskReleaseConstraintsType::reset() noexcept {
  releasePoint_Accessor.reset();
  releaseArea_Accessor.reset();
}

uci::type::StrikeTaskReleaseConstraintsType::StrikeTaskReleaseConstraintsTypeChoice StrikeTaskReleaseConstraintsType::getStrikeTaskReleaseConstraintsTypeChoiceOrdinal() const noexcept {
  if (releasePoint_Accessor) {
    return STRIKETASKRELEASECONSTRAINTSTYPE_CHOICE_RELEASEPOINT;
  }
  if (releaseArea_Accessor) {
    return STRIKETASKRELEASECONSTRAINTSTYPE_CHOICE_RELEASEAREA;
  }
  return STRIKETASKRELEASECONSTRAINTSTYPE_CHOICE_NONE;
}

uci::type::StrikeTaskReleaseConstraintsType& StrikeTaskReleaseConstraintsType::setStrikeTaskReleaseConstraintsTypeChoiceOrdinal(uci::type::StrikeTaskReleaseConstraintsType::StrikeTaskReleaseConstraintsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case STRIKETASKRELEASECONSTRAINTSTYPE_CHOICE_RELEASEPOINT:
      chooseReleasePoint("setStrikeTaskReleaseConstraintsTypeChoiceOrdinal", type);
      break;
    case STRIKETASKRELEASECONSTRAINTSTYPE_CHOICE_RELEASEAREA:
      chooseReleaseArea("setStrikeTaskReleaseConstraintsTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setStrikeTaskReleaseConstraintsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::Point3D_Type& StrikeTaskReleaseConstraintsType::getReleasePoint_() const {
  if (releasePoint_Accessor) {
    return *releasePoint_Accessor;
  }
  throw uci::base::UCIException("Error in getReleasePoint(): Unable to get ReleasePoint, field not selected");
}

const uci::type::Point3D_Type& StrikeTaskReleaseConstraintsType::getReleasePoint() const {
  return getReleasePoint_();
}

uci::type::Point3D_Type& StrikeTaskReleaseConstraintsType::getReleasePoint() {
  return getReleasePoint_();
}

uci::type::StrikeTaskReleaseConstraintsType& StrikeTaskReleaseConstraintsType::setReleasePoint(const uci::type::Point3D_Type& accessor) {
  chooseReleasePoint("setReleasePoint", accessor.getAccessorType());
  if (&accessor != releasePoint_Accessor.get()) {
    releasePoint_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool StrikeTaskReleaseConstraintsType::isReleasePoint() const noexcept {
  return static_cast<bool>(releasePoint_Accessor);
}

uci::type::Point3D_Type& StrikeTaskReleaseConstraintsType::chooseReleasePoint(const std::string& method, uci::base::accessorType::AccessorType type) {
  releaseArea_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!releasePoint_Accessor) || (releasePoint_Accessor->getAccessorType() != requestedType)) {
    releasePoint_Accessor = Point3D_Type::create(type);
    if (!releasePoint_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *releasePoint_Accessor;
}

uci::type::Point3D_Type& StrikeTaskReleaseConstraintsType::chooseReleasePoint(uci::base::accessorType::AccessorType type) {
  return chooseReleasePoint("chooseReleasePoint", type);
}

uci::type::AreaConstraintsType& StrikeTaskReleaseConstraintsType::getReleaseArea_() const {
  if (releaseArea_Accessor) {
    return *releaseArea_Accessor;
  }
  throw uci::base::UCIException("Error in getReleaseArea(): Unable to get ReleaseArea, field not selected");
}

const uci::type::AreaConstraintsType& StrikeTaskReleaseConstraintsType::getReleaseArea() const {
  return getReleaseArea_();
}

uci::type::AreaConstraintsType& StrikeTaskReleaseConstraintsType::getReleaseArea() {
  return getReleaseArea_();
}

uci::type::StrikeTaskReleaseConstraintsType& StrikeTaskReleaseConstraintsType::setReleaseArea(const uci::type::AreaConstraintsType& accessor) {
  chooseReleaseArea();
  if (&accessor != releaseArea_Accessor.get()) {
    releaseArea_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeTaskReleaseConstraintsType::isReleaseArea() const noexcept {
  return static_cast<bool>(releaseArea_Accessor);
}

uci::type::AreaConstraintsType& StrikeTaskReleaseConstraintsType::chooseReleaseArea(const std::string& method, uci::base::accessorType::AccessorType type) {
  releasePoint_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::areaConstraintsType : type};
  if ((!releaseArea_Accessor) || (releaseArea_Accessor->getAccessorType() != requestedType)) {
    releaseArea_Accessor = AreaConstraintsType::create(type);
    if (!releaseArea_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *releaseArea_Accessor;
}

uci::type::AreaConstraintsType& StrikeTaskReleaseConstraintsType::chooseReleaseArea(uci::base::accessorType::AccessorType type) {
  return chooseReleaseArea("chooseReleaseArea", type);
}

std::unique_ptr<StrikeTaskReleaseConstraintsType> StrikeTaskReleaseConstraintsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeTaskReleaseConstraintsType : type};
  return (requestedType == uci::type::accessorType::strikeTaskReleaseConstraintsType) ? boost::make_unique<StrikeTaskReleaseConstraintsType>() : nullptr;
}

/**  */
namespace StrikeTaskReleaseConstraintsType_Names {

constexpr const char* Extern_Type_Name{"StrikeTaskReleaseConstraintsType"};
constexpr const char* ReleasePoint_Name{"ReleasePoint"};
constexpr const char* ReleaseArea_Name{"ReleaseArea"};

} // namespace StrikeTaskReleaseConstraintsType_Names

void StrikeTaskReleaseConstraintsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StrikeTaskReleaseConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StrikeTaskReleaseConstraintsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StrikeTaskReleaseConstraintsType_Names::ReleasePoint_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseReleasePoint(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeTaskReleaseConstraintsType_Names::ReleaseArea_Name) {
      AreaConstraintsType::deserialize(valueType.second, accessor.chooseReleaseArea(), nodeName, nsPrefix);
    }
  }
}

std::string StrikeTaskReleaseConstraintsType::serialize(const uci::type::StrikeTaskReleaseConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StrikeTaskReleaseConstraintsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StrikeTaskReleaseConstraintsType_Names::Extern_Type_Name);
  }
  if (accessor.isReleasePoint()) {
    Point3D_Type::serialize(accessor.getReleasePoint(), node, StrikeTaskReleaseConstraintsType_Names::ReleasePoint_Name);
  } else if (accessor.isReleaseArea()) {
    AreaConstraintsType::serialize(accessor.getReleaseArea(), node, StrikeTaskReleaseConstraintsType_Names::ReleaseArea_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StrikeTaskReleaseConstraintsType& StrikeTaskReleaseConstraintsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StrikeTaskReleaseConstraintsType>().release());
}

uci::type::StrikeTaskReleaseConstraintsType& StrikeTaskReleaseConstraintsType::create(const uci::type::StrikeTaskReleaseConstraintsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StrikeTaskReleaseConstraintsType> newAccessor{boost::make_unique<asb_uci::type::StrikeTaskReleaseConstraintsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StrikeTaskReleaseConstraintsType::destroy(uci::type::StrikeTaskReleaseConstraintsType& accessor) {
  delete dynamic_cast<asb_uci::type::StrikeTaskReleaseConstraintsType*>(&accessor);
}

} // namespace type

} // namespace uci

