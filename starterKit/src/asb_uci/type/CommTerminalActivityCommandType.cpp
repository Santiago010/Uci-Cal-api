/** @file CommTerminalActivityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommTerminalActivityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityCommandFrequencyType.h"
#include "../../../include/asb_uci/type/CommConnectionCommandEnum.h"
#include "../../../include/asb_uci/type/CommControlType.h"
#include "../../../include/asb_uci/type/CommLinkPortMapType.h"
#include "../../../include/asb_uci/type/CommProfileID_Type.h"
#include "../../../include/asb_uci/type/CommWaveformActivityCommandPET.h"
#include "../../../include/asb_uci/type/DependentActivityType.h"
#include "../../../include/asb_uci/type/LinkConnectionRequestType.h"
#include "../../../include/asb_uci/type/NetworkLinkID_Type.h"
#include "../../../include/asb_uci/type/ResourceSelectionType.h"
#include "../../../include/asb_uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "../../../include/asb_uci/type/VerboseStatusType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityCommandFrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommConnectionCommandEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommControlType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLinkPortMapType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommProfileID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommTerminalActivityCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommWaveformActivityCommandPET.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DependentActivityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LinkConnectionRequestType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NetworkLinkID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceSelectionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VerboseStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommTerminalActivityCommandType::CommTerminalActivityCommandType()
  : resourceSelection_Accessor{boost::make_unique<ResourceSelection>(0, SIZE_MAX)},
    linkConnectionRequest_Accessor{boost::make_unique<LinkConnectionRequest>(0, SIZE_MAX)} {
}

CommTerminalActivityCommandType::~CommTerminalActivityCommandType() = default;

void CommTerminalActivityCommandType::copy(const uci::type::CommTerminalActivityCommandType& accessor) {
  copyImpl(accessor, false);
}

void CommTerminalActivityCommandType::copyImpl(const uci::type::CommTerminalActivityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SharedRF_ApertureActivityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CommTerminalActivityCommandType&>(accessor);
    if (accessorImpl.activateProfileID_Accessor) {
      setActivateProfileID(*(accessorImpl.activateProfileID_Accessor));
    } else {
      activateProfileID_Accessor.reset();
    }
    if (accessorImpl.changeDependentActivity_Accessor) {
      setChangeDependentActivity(*(accessorImpl.changeDependentActivity_Accessor));
    } else {
      changeDependentActivity_Accessor.reset();
    }
    setResourceSelection(*(accessorImpl.resourceSelection_Accessor));
    if (accessorImpl.connectionRequest_Accessor) {
      setConnectionRequest(*(accessorImpl.connectionRequest_Accessor));
    } else {
      connectionRequest_Accessor.reset();
    }
    if (accessorImpl.commonSettingsChange_Accessor) {
      setCommonSettingsChange(*(accessorImpl.commonSettingsChange_Accessor));
    } else {
      commonSettingsChange_Accessor.reset();
    }
    if (accessorImpl.linkPortAssignments_Accessor) {
      setLinkPortAssignments(*(accessorImpl.linkPortAssignments_Accessor));
    } else {
      linkPortAssignments_Accessor.reset();
    }
    setLinkConnectionRequest(*(accessorImpl.linkConnectionRequest_Accessor));
    if (accessorImpl.networkLinkID_Accessor) {
      setNetworkLinkID(*(accessorImpl.networkLinkID_Accessor));
    } else {
      networkLinkID_Accessor.reset();
    }
    if (accessorImpl.waveformSpecificSettingsChange_Accessor) {
      setWaveformSpecificSettingsChange(*(accessorImpl.waveformSpecificSettingsChange_Accessor));
    } else {
      waveformSpecificSettingsChange_Accessor.reset();
    }
    if (accessorImpl.verboseStatus_Accessor) {
      setVerboseStatus(*(accessorImpl.verboseStatus_Accessor));
    } else {
      verboseStatus_Accessor.reset();
    }
    if (accessorImpl.frequency_Accessor) {
      setFrequency(*(accessorImpl.frequency_Accessor));
    } else {
      frequency_Accessor.reset();
    }
  }
}

void CommTerminalActivityCommandType::reset() noexcept {
  SharedRF_ApertureActivityCommandBaseType::reset();
  activateProfileID_Accessor.reset();
  changeDependentActivity_Accessor.reset();
  resourceSelection_Accessor->reset();
  connectionRequest_Accessor.reset();
  commonSettingsChange_Accessor.reset();
  linkPortAssignments_Accessor.reset();
  linkConnectionRequest_Accessor->reset();
  networkLinkID_Accessor.reset();
  waveformSpecificSettingsChange_Accessor.reset();
  verboseStatus_Accessor.reset();
  frequency_Accessor.reset();
}

uci::type::CommProfileID_Type& CommTerminalActivityCommandType::getActivateProfileID_() const {
  if (activateProfileID_Accessor) {
    return *activateProfileID_Accessor;
  }
  throw uci::base::UCIException("Error in getActivateProfileID(): An attempt was made to get an optional field that was not enabled, call hasActivateProfileID() to determine if it is safe to call getActivateProfileID()");
}

const uci::type::CommProfileID_Type& CommTerminalActivityCommandType::getActivateProfileID() const {
  return getActivateProfileID_();
}

uci::type::CommProfileID_Type& CommTerminalActivityCommandType::getActivateProfileID() {
  return getActivateProfileID_();
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::setActivateProfileID(const uci::type::CommProfileID_Type& accessor) {
  enableActivateProfileID();
  if (&accessor != activateProfileID_Accessor.get()) {
    activateProfileID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalActivityCommandType::hasActivateProfileID() const noexcept {
  return static_cast<bool>(activateProfileID_Accessor);
}

uci::type::CommProfileID_Type& CommTerminalActivityCommandType::enableActivateProfileID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commProfileID_Type : type};
  if ((!activateProfileID_Accessor) || (activateProfileID_Accessor->getAccessorType() != requestedType)) {
    activateProfileID_Accessor = CommProfileID_Type::create(requestedType);
    if (!activateProfileID_Accessor) {
      throw uci::base::UCIException("Error in enableActivateProfileID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activateProfileID_Accessor;
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::clearActivateProfileID() noexcept {
  activateProfileID_Accessor.reset();
  return *this;
}

uci::type::DependentActivityType& CommTerminalActivityCommandType::getChangeDependentActivity_() const {
  if (changeDependentActivity_Accessor) {
    return *changeDependentActivity_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeDependentActivity(): An attempt was made to get an optional field that was not enabled, call hasChangeDependentActivity() to determine if it is safe to call getChangeDependentActivity()");
}

const uci::type::DependentActivityType& CommTerminalActivityCommandType::getChangeDependentActivity() const {
  return getChangeDependentActivity_();
}

uci::type::DependentActivityType& CommTerminalActivityCommandType::getChangeDependentActivity() {
  return getChangeDependentActivity_();
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::setChangeDependentActivity(const uci::type::DependentActivityType& accessor) {
  enableChangeDependentActivity();
  if (&accessor != changeDependentActivity_Accessor.get()) {
    changeDependentActivity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalActivityCommandType::hasChangeDependentActivity() const noexcept {
  return static_cast<bool>(changeDependentActivity_Accessor);
}

uci::type::DependentActivityType& CommTerminalActivityCommandType::enableChangeDependentActivity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dependentActivityType : type};
  if ((!changeDependentActivity_Accessor) || (changeDependentActivity_Accessor->getAccessorType() != requestedType)) {
    changeDependentActivity_Accessor = DependentActivityType::create(requestedType);
    if (!changeDependentActivity_Accessor) {
      throw uci::base::UCIException("Error in enableChangeDependentActivity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeDependentActivity_Accessor;
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::clearChangeDependentActivity() noexcept {
  changeDependentActivity_Accessor.reset();
  return *this;
}

const uci::type::CommTerminalActivityCommandType::ResourceSelection& CommTerminalActivityCommandType::getResourceSelection() const {
  return *resourceSelection_Accessor;
}

uci::type::CommTerminalActivityCommandType::ResourceSelection& CommTerminalActivityCommandType::getResourceSelection() {
  return *resourceSelection_Accessor;
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::setResourceSelection(const uci::type::CommTerminalActivityCommandType::ResourceSelection& accessor) {
  if (&accessor != resourceSelection_Accessor.get()) {
    resourceSelection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommConnectionCommandEnum& CommTerminalActivityCommandType::getConnectionRequest_() const {
  if (connectionRequest_Accessor) {
    return *connectionRequest_Accessor;
  }
  throw uci::base::UCIException("Error in getConnectionRequest(): An attempt was made to get an optional field that was not enabled, call hasConnectionRequest() to determine if it is safe to call getConnectionRequest()");
}

const uci::type::CommConnectionCommandEnum& CommTerminalActivityCommandType::getConnectionRequest() const {
  return getConnectionRequest_();
}

uci::type::CommConnectionCommandEnum& CommTerminalActivityCommandType::getConnectionRequest() {
  return getConnectionRequest_();
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::setConnectionRequest(const uci::type::CommConnectionCommandEnum& accessor) {
  enableConnectionRequest();
  if (&accessor != connectionRequest_Accessor.get()) {
    connectionRequest_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::setConnectionRequest(const uci::type::CommConnectionCommandEnum::EnumerationItem value) {
  enableConnectionRequest().setValue(value);
  return *this;
}

bool CommTerminalActivityCommandType::hasConnectionRequest() const noexcept {
  return static_cast<bool>(connectionRequest_Accessor);
}

uci::type::CommConnectionCommandEnum& CommTerminalActivityCommandType::enableConnectionRequest(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commConnectionCommandEnum : type};
  if ((!connectionRequest_Accessor) || (connectionRequest_Accessor->getAccessorType() != requestedType)) {
    connectionRequest_Accessor = CommConnectionCommandEnum::create(requestedType);
    if (!connectionRequest_Accessor) {
      throw uci::base::UCIException("Error in enableConnectionRequest(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *connectionRequest_Accessor;
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::clearConnectionRequest() noexcept {
  connectionRequest_Accessor.reset();
  return *this;
}

uci::type::CommControlType& CommTerminalActivityCommandType::getCommonSettingsChange_() const {
  if (commonSettingsChange_Accessor) {
    return *commonSettingsChange_Accessor;
  }
  throw uci::base::UCIException("Error in getCommonSettingsChange(): An attempt was made to get an optional field that was not enabled, call hasCommonSettingsChange() to determine if it is safe to call getCommonSettingsChange()");
}

const uci::type::CommControlType& CommTerminalActivityCommandType::getCommonSettingsChange() const {
  return getCommonSettingsChange_();
}

uci::type::CommControlType& CommTerminalActivityCommandType::getCommonSettingsChange() {
  return getCommonSettingsChange_();
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::setCommonSettingsChange(const uci::type::CommControlType& accessor) {
  enableCommonSettingsChange();
  if (&accessor != commonSettingsChange_Accessor.get()) {
    commonSettingsChange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalActivityCommandType::hasCommonSettingsChange() const noexcept {
  return static_cast<bool>(commonSettingsChange_Accessor);
}

uci::type::CommControlType& CommTerminalActivityCommandType::enableCommonSettingsChange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commControlType : type};
  if ((!commonSettingsChange_Accessor) || (commonSettingsChange_Accessor->getAccessorType() != requestedType)) {
    commonSettingsChange_Accessor = CommControlType::create(requestedType);
    if (!commonSettingsChange_Accessor) {
      throw uci::base::UCIException("Error in enableCommonSettingsChange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commonSettingsChange_Accessor;
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::clearCommonSettingsChange() noexcept {
  commonSettingsChange_Accessor.reset();
  return *this;
}

uci::type::CommLinkPortMapType& CommTerminalActivityCommandType::getLinkPortAssignments_() const {
  if (linkPortAssignments_Accessor) {
    return *linkPortAssignments_Accessor;
  }
  throw uci::base::UCIException("Error in getLinkPortAssignments(): An attempt was made to get an optional field that was not enabled, call hasLinkPortAssignments() to determine if it is safe to call getLinkPortAssignments()");
}

const uci::type::CommLinkPortMapType& CommTerminalActivityCommandType::getLinkPortAssignments() const {
  return getLinkPortAssignments_();
}

uci::type::CommLinkPortMapType& CommTerminalActivityCommandType::getLinkPortAssignments() {
  return getLinkPortAssignments_();
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::setLinkPortAssignments(const uci::type::CommLinkPortMapType& accessor) {
  enableLinkPortAssignments();
  if (&accessor != linkPortAssignments_Accessor.get()) {
    linkPortAssignments_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalActivityCommandType::hasLinkPortAssignments() const noexcept {
  return static_cast<bool>(linkPortAssignments_Accessor);
}

uci::type::CommLinkPortMapType& CommTerminalActivityCommandType::enableLinkPortAssignments(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLinkPortMapType : type};
  if ((!linkPortAssignments_Accessor) || (linkPortAssignments_Accessor->getAccessorType() != requestedType)) {
    linkPortAssignments_Accessor = CommLinkPortMapType::create(requestedType);
    if (!linkPortAssignments_Accessor) {
      throw uci::base::UCIException("Error in enableLinkPortAssignments(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *linkPortAssignments_Accessor;
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::clearLinkPortAssignments() noexcept {
  linkPortAssignments_Accessor.reset();
  return *this;
}

const uci::type::CommTerminalActivityCommandType::LinkConnectionRequest& CommTerminalActivityCommandType::getLinkConnectionRequest() const {
  return *linkConnectionRequest_Accessor;
}

uci::type::CommTerminalActivityCommandType::LinkConnectionRequest& CommTerminalActivityCommandType::getLinkConnectionRequest() {
  return *linkConnectionRequest_Accessor;
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::setLinkConnectionRequest(const uci::type::CommTerminalActivityCommandType::LinkConnectionRequest& accessor) {
  if (&accessor != linkConnectionRequest_Accessor.get()) {
    linkConnectionRequest_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::NetworkLinkID_Type& CommTerminalActivityCommandType::getNetworkLinkID_() const {
  if (networkLinkID_Accessor) {
    return *networkLinkID_Accessor;
  }
  throw uci::base::UCIException("Error in getNetworkLinkID(): An attempt was made to get an optional field that was not enabled, call hasNetworkLinkID() to determine if it is safe to call getNetworkLinkID()");
}

const uci::type::NetworkLinkID_Type& CommTerminalActivityCommandType::getNetworkLinkID() const {
  return getNetworkLinkID_();
}

uci::type::NetworkLinkID_Type& CommTerminalActivityCommandType::getNetworkLinkID() {
  return getNetworkLinkID_();
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::setNetworkLinkID(const uci::type::NetworkLinkID_Type& accessor) {
  enableNetworkLinkID();
  if (&accessor != networkLinkID_Accessor.get()) {
    networkLinkID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalActivityCommandType::hasNetworkLinkID() const noexcept {
  return static_cast<bool>(networkLinkID_Accessor);
}

uci::type::NetworkLinkID_Type& CommTerminalActivityCommandType::enableNetworkLinkID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::networkLinkID_Type : type};
  if ((!networkLinkID_Accessor) || (networkLinkID_Accessor->getAccessorType() != requestedType)) {
    networkLinkID_Accessor = NetworkLinkID_Type::create(requestedType);
    if (!networkLinkID_Accessor) {
      throw uci::base::UCIException("Error in enableNetworkLinkID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *networkLinkID_Accessor;
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::clearNetworkLinkID() noexcept {
  networkLinkID_Accessor.reset();
  return *this;
}

uci::type::CommWaveformActivityCommandPET& CommTerminalActivityCommandType::getWaveformSpecificSettingsChange_() const {
  if (waveformSpecificSettingsChange_Accessor) {
    return *waveformSpecificSettingsChange_Accessor;
  }
  throw uci::base::UCIException("Error in getWaveformSpecificSettingsChange(): An attempt was made to get an optional field that was not enabled, call hasWaveformSpecificSettingsChange() to determine if it is safe to call getWaveformSpecificSettingsChange()");
}

const uci::type::CommWaveformActivityCommandPET& CommTerminalActivityCommandType::getWaveformSpecificSettingsChange() const {
  return getWaveformSpecificSettingsChange_();
}

uci::type::CommWaveformActivityCommandPET& CommTerminalActivityCommandType::getWaveformSpecificSettingsChange() {
  return getWaveformSpecificSettingsChange_();
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::setWaveformSpecificSettingsChange(const uci::type::CommWaveformActivityCommandPET& accessor) {
  enableWaveformSpecificSettingsChange(accessor.getAccessorType());
  if (&accessor != waveformSpecificSettingsChange_Accessor.get()) {
    waveformSpecificSettingsChange_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CommTerminalActivityCommandType::hasWaveformSpecificSettingsChange() const noexcept {
  return static_cast<bool>(waveformSpecificSettingsChange_Accessor);
}

uci::type::CommWaveformActivityCommandPET& CommTerminalActivityCommandType::enableWaveformSpecificSettingsChange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commWaveformActivityCommandPET : type};
  if ((!waveformSpecificSettingsChange_Accessor) || (waveformSpecificSettingsChange_Accessor->getAccessorType() != requestedType)) {
    waveformSpecificSettingsChange_Accessor = CommWaveformActivityCommandPET::create(requestedType);
    if (!waveformSpecificSettingsChange_Accessor) {
      throw uci::base::UCIException("Error in enableWaveformSpecificSettingsChange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *waveformSpecificSettingsChange_Accessor;
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::clearWaveformSpecificSettingsChange() noexcept {
  waveformSpecificSettingsChange_Accessor.reset();
  return *this;
}

uci::type::VerboseStatusType& CommTerminalActivityCommandType::getVerboseStatus_() const {
  if (verboseStatus_Accessor) {
    return *verboseStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getVerboseStatus(): An attempt was made to get an optional field that was not enabled, call hasVerboseStatus() to determine if it is safe to call getVerboseStatus()");
}

const uci::type::VerboseStatusType& CommTerminalActivityCommandType::getVerboseStatus() const {
  return getVerboseStatus_();
}

uci::type::VerboseStatusType& CommTerminalActivityCommandType::getVerboseStatus() {
  return getVerboseStatus_();
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::setVerboseStatus(const uci::type::VerboseStatusType& accessor) {
  enableVerboseStatus();
  if (&accessor != verboseStatus_Accessor.get()) {
    verboseStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalActivityCommandType::hasVerboseStatus() const noexcept {
  return static_cast<bool>(verboseStatus_Accessor);
}

uci::type::VerboseStatusType& CommTerminalActivityCommandType::enableVerboseStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::verboseStatusType : type};
  if ((!verboseStatus_Accessor) || (verboseStatus_Accessor->getAccessorType() != requestedType)) {
    verboseStatus_Accessor = VerboseStatusType::create(requestedType);
    if (!verboseStatus_Accessor) {
      throw uci::base::UCIException("Error in enableVerboseStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *verboseStatus_Accessor;
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::clearVerboseStatus() noexcept {
  verboseStatus_Accessor.reset();
  return *this;
}

uci::type::CapabilityCommandFrequencyType& CommTerminalActivityCommandType::getFrequency_() const {
  if (frequency_Accessor) {
    return *frequency_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequency(): An attempt was made to get an optional field that was not enabled, call hasFrequency() to determine if it is safe to call getFrequency()");
}

const uci::type::CapabilityCommandFrequencyType& CommTerminalActivityCommandType::getFrequency() const {
  return getFrequency_();
}

uci::type::CapabilityCommandFrequencyType& CommTerminalActivityCommandType::getFrequency() {
  return getFrequency_();
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::setFrequency(const uci::type::CapabilityCommandFrequencyType& accessor) {
  enableFrequency();
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalActivityCommandType::hasFrequency() const noexcept {
  return static_cast<bool>(frequency_Accessor);
}

uci::type::CapabilityCommandFrequencyType& CommTerminalActivityCommandType::enableFrequency(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandFrequencyType : type};
  if ((!frequency_Accessor) || (frequency_Accessor->getAccessorType() != requestedType)) {
    frequency_Accessor = CapabilityCommandFrequencyType::create(requestedType);
    if (!frequency_Accessor) {
      throw uci::base::UCIException("Error in enableFrequency(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *frequency_Accessor;
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::clearFrequency() noexcept {
  frequency_Accessor.reset();
  return *this;
}

std::unique_ptr<CommTerminalActivityCommandType> CommTerminalActivityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commTerminalActivityCommandType : type};
  return (requestedType == uci::type::accessorType::commTerminalActivityCommandType) ? boost::make_unique<CommTerminalActivityCommandType>() : nullptr;
}

/**  */
namespace CommTerminalActivityCommandType_Names {

constexpr const char* Extern_Type_Name{"CommTerminalActivityCommandType"};
constexpr const char* ActivateProfileID_Name{"ActivateProfileID"};
constexpr const char* ChangeDependentActivity_Name{"ChangeDependentActivity"};
constexpr const char* ResourceSelection_Name{"ResourceSelection"};
constexpr const char* ConnectionRequest_Name{"ConnectionRequest"};
constexpr const char* CommonSettingsChange_Name{"CommonSettingsChange"};
constexpr const char* LinkPortAssignments_Name{"LinkPortAssignments"};
constexpr const char* LinkConnectionRequest_Name{"LinkConnectionRequest"};
constexpr const char* NetworkLinkID_Name{"NetworkLinkID"};
constexpr const char* WaveformSpecificSettingsChange_Name{"WaveformSpecificSettingsChange"};
constexpr const char* VerboseStatus_Name{"VerboseStatus"};
constexpr const char* Frequency_Name{"Frequency"};

} // namespace CommTerminalActivityCommandType_Names

void CommTerminalActivityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommTerminalActivityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommTerminalActivityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommTerminalActivityCommandType_Names::ActivateProfileID_Name) {
      CommProfileID_Type::deserialize(valueType.second, accessor.enableActivateProfileID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalActivityCommandType_Names::ChangeDependentActivity_Name) {
      DependentActivityType::deserialize(valueType.second, accessor.enableChangeDependentActivity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalActivityCommandType_Names::ResourceSelection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalActivityCommandType::ResourceSelection& boundedList = accessor.getResourceSelection();
        const uci::type::CommTerminalActivityCommandType::ResourceSelection::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ResourceSelectionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalActivityCommandType_Names::ConnectionRequest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableConnectionRequest().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommTerminalActivityCommandType_Names::CommonSettingsChange_Name) {
      CommControlType::deserialize(valueType.second, accessor.enableCommonSettingsChange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalActivityCommandType_Names::LinkPortAssignments_Name) {
      CommLinkPortMapType::deserialize(valueType.second, accessor.enableLinkPortAssignments(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalActivityCommandType_Names::LinkConnectionRequest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalActivityCommandType::LinkConnectionRequest& boundedList = accessor.getLinkConnectionRequest();
        const uci::type::CommTerminalActivityCommandType::LinkConnectionRequest::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::LinkConnectionRequestType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalActivityCommandType_Names::NetworkLinkID_Name) {
      NetworkLinkID_Type::deserialize(valueType.second, accessor.enableNetworkLinkID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalActivityCommandType_Names::WaveformSpecificSettingsChange_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableWaveformSpecificSettingsChange(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalActivityCommandType_Names::VerboseStatus_Name) {
      VerboseStatusType::deserialize(valueType.second, accessor.enableVerboseStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalActivityCommandType_Names::Frequency_Name) {
      CapabilityCommandFrequencyType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    }
  }
  SharedRF_ApertureActivityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CommTerminalActivityCommandType::serialize(const uci::type::CommTerminalActivityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommTerminalActivityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommTerminalActivityCommandType_Names::Extern_Type_Name);
  }
  SharedRF_ApertureActivityCommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasActivateProfileID()) {
    CommProfileID_Type::serialize(accessor.getActivateProfileID(), node, CommTerminalActivityCommandType_Names::ActivateProfileID_Name);
  }
  if (accessor.hasChangeDependentActivity()) {
    DependentActivityType::serialize(accessor.getChangeDependentActivity(), node, CommTerminalActivityCommandType_Names::ChangeDependentActivity_Name);
  }
  {
    const uci::type::CommTerminalActivityCommandType::ResourceSelection& boundedList = accessor.getResourceSelection();
    for (uci::type::CommTerminalActivityCommandType::ResourceSelection::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ResourceSelectionType::serialize(boundedList.at(i), node, CommTerminalActivityCommandType_Names::ResourceSelection_Name);
    }
  }
  if (accessor.hasConnectionRequest()) {
    CommConnectionCommandEnum::serialize(accessor.getConnectionRequest(), node, CommTerminalActivityCommandType_Names::ConnectionRequest_Name, false);
  }
  if (accessor.hasCommonSettingsChange()) {
    CommControlType::serialize(accessor.getCommonSettingsChange(), node, CommTerminalActivityCommandType_Names::CommonSettingsChange_Name);
  }
  if (accessor.hasLinkPortAssignments()) {
    CommLinkPortMapType::serialize(accessor.getLinkPortAssignments(), node, CommTerminalActivityCommandType_Names::LinkPortAssignments_Name);
  }
  {
    const uci::type::CommTerminalActivityCommandType::LinkConnectionRequest& boundedList = accessor.getLinkConnectionRequest();
    for (uci::type::CommTerminalActivityCommandType::LinkConnectionRequest::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::LinkConnectionRequestType::serialize(boundedList.at(i), node, CommTerminalActivityCommandType_Names::LinkConnectionRequest_Name);
    }
  }
  if (accessor.hasNetworkLinkID()) {
    NetworkLinkID_Type::serialize(accessor.getNetworkLinkID(), node, CommTerminalActivityCommandType_Names::NetworkLinkID_Name);
  }
  if (accessor.hasWaveformSpecificSettingsChange()) {
    CommWaveformActivityCommandPET::serialize(accessor.getWaveformSpecificSettingsChange(), node, CommTerminalActivityCommandType_Names::WaveformSpecificSettingsChange_Name);
  }
  if (accessor.hasVerboseStatus()) {
    VerboseStatusType::serialize(accessor.getVerboseStatus(), node, CommTerminalActivityCommandType_Names::VerboseStatus_Name);
  }
  if (accessor.hasFrequency()) {
    CapabilityCommandFrequencyType::serialize(accessor.getFrequency(), node, CommTerminalActivityCommandType_Names::Frequency_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommTerminalActivityCommandType>().release());
}

uci::type::CommTerminalActivityCommandType& CommTerminalActivityCommandType::create(const uci::type::CommTerminalActivityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommTerminalActivityCommandType> newAccessor{boost::make_unique<asb_uci::type::CommTerminalActivityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommTerminalActivityCommandType::destroy(uci::type::CommTerminalActivityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::CommTerminalActivityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

