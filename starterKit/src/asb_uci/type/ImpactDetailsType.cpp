/** @file ImpactDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ImpactDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ApproachAngleType.h"
#include "../../../include/asb_uci/type/ImpactPointType.h"
#include "../../../include/asb_uci/type/WeaponEffectIndicatorsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApproachAngleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ImpactDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ImpactPointType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpeedType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeaponEffectIndicatorsType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ImpactDetailsType::ImpactDetailsType() = default;

ImpactDetailsType::~ImpactDetailsType() = default;

void ImpactDetailsType::copy(const uci::type::ImpactDetailsType& accessor) {
  copyImpl(accessor, false);
}

void ImpactDetailsType::copyImpl(const uci::type::ImpactDetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ImpactDetailsType&>(accessor);
    if (accessorImpl.approachAngle_Accessor) {
      setApproachAngle(*(accessorImpl.approachAngle_Accessor));
    } else {
      approachAngle_Accessor.reset();
    }
    if (accessorImpl.impactPoint_Accessor) {
      setImpactPoint(*(accessorImpl.impactPoint_Accessor));
    } else {
      impactPoint_Accessor.reset();
    }
    if (accessorImpl.hasImpactSpeed()) {
      setImpactSpeed(accessorImpl.getImpactSpeed());
    } else {
      clearImpactSpeed();
    }
    if (accessorImpl.hasImpactPointDistanceFromDMPI()) {
      setImpactPointDistanceFromDMPI(accessorImpl.getImpactPointDistanceFromDMPI());
    } else {
      clearImpactPointDistanceFromDMPI();
    }
    if (accessorImpl.hasAccelerometerRecordedImpact()) {
      setAccelerometerRecordedImpact(accessorImpl.getAccelerometerRecordedImpact());
    } else {
      clearAccelerometerRecordedImpact();
    }
    if (accessorImpl.effectIndicators_Accessor) {
      setEffectIndicators(*(accessorImpl.effectIndicators_Accessor));
    } else {
      effectIndicators_Accessor.reset();
    }
  }
}

void ImpactDetailsType::reset() noexcept {
  approachAngle_Accessor.reset();
  impactPoint_Accessor.reset();
  clearImpactSpeed();
  clearImpactPointDistanceFromDMPI();
  clearAccelerometerRecordedImpact();
  effectIndicators_Accessor.reset();
}

uci::type::ApproachAngleType& ImpactDetailsType::getApproachAngle_() const {
  if (approachAngle_Accessor) {
    return *approachAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getApproachAngle(): An attempt was made to get an optional field that was not enabled, call hasApproachAngle() to determine if it is safe to call getApproachAngle()");
}

const uci::type::ApproachAngleType& ImpactDetailsType::getApproachAngle() const {
  return getApproachAngle_();
}

uci::type::ApproachAngleType& ImpactDetailsType::getApproachAngle() {
  return getApproachAngle_();
}

uci::type::ImpactDetailsType& ImpactDetailsType::setApproachAngle(const uci::type::ApproachAngleType& accessor) {
  enableApproachAngle();
  if (&accessor != approachAngle_Accessor.get()) {
    approachAngle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ImpactDetailsType::hasApproachAngle() const noexcept {
  return static_cast<bool>(approachAngle_Accessor);
}

uci::type::ApproachAngleType& ImpactDetailsType::enableApproachAngle(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::approachAngleType : type};
  if ((!approachAngle_Accessor) || (approachAngle_Accessor->getAccessorType() != requestedType)) {
    approachAngle_Accessor = ApproachAngleType::create(requestedType);
    if (!approachAngle_Accessor) {
      throw uci::base::UCIException("Error in enableApproachAngle(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *approachAngle_Accessor;
}

uci::type::ImpactDetailsType& ImpactDetailsType::clearApproachAngle() noexcept {
  approachAngle_Accessor.reset();
  return *this;
}

uci::type::ImpactPointType& ImpactDetailsType::getImpactPoint_() const {
  if (impactPoint_Accessor) {
    return *impactPoint_Accessor;
  }
  throw uci::base::UCIException("Error in getImpactPoint(): An attempt was made to get an optional field that was not enabled, call hasImpactPoint() to determine if it is safe to call getImpactPoint()");
}

const uci::type::ImpactPointType& ImpactDetailsType::getImpactPoint() const {
  return getImpactPoint_();
}

uci::type::ImpactPointType& ImpactDetailsType::getImpactPoint() {
  return getImpactPoint_();
}

uci::type::ImpactDetailsType& ImpactDetailsType::setImpactPoint(const uci::type::ImpactPointType& accessor) {
  enableImpactPoint();
  if (&accessor != impactPoint_Accessor.get()) {
    impactPoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ImpactDetailsType::hasImpactPoint() const noexcept {
  return static_cast<bool>(impactPoint_Accessor);
}

uci::type::ImpactPointType& ImpactDetailsType::enableImpactPoint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::impactPointType : type};
  if ((!impactPoint_Accessor) || (impactPoint_Accessor->getAccessorType() != requestedType)) {
    impactPoint_Accessor = ImpactPointType::create(requestedType);
    if (!impactPoint_Accessor) {
      throw uci::base::UCIException("Error in enableImpactPoint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *impactPoint_Accessor;
}

uci::type::ImpactDetailsType& ImpactDetailsType::clearImpactPoint() noexcept {
  impactPoint_Accessor.reset();
  return *this;
}

uci::type::SpeedTypeValue ImpactDetailsType::getImpactSpeed() const {
  if (impactSpeed_Accessor) {
    return *impactSpeed_Accessor;
  }
  throw uci::base::UCIException("Error in getImpactSpeed(): An attempt was made to get an optional field that was not enabled, call hasImpactSpeed() to determine if it is safe to call getImpactSpeed()");
}

uci::type::ImpactDetailsType& ImpactDetailsType::setImpactSpeed(uci::type::SpeedTypeValue value) {
  impactSpeed_Accessor = value;
  return *this;
}

bool ImpactDetailsType::hasImpactSpeed() const noexcept {
  return impactSpeed_Accessor.has_value();
}

uci::type::ImpactDetailsType& ImpactDetailsType::clearImpactSpeed() noexcept {
  impactSpeed_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue ImpactDetailsType::getImpactPointDistanceFromDMPI() const {
  if (impactPointDistanceFromDMPI_Accessor) {
    return *impactPointDistanceFromDMPI_Accessor;
  }
  throw uci::base::UCIException("Error in getImpactPointDistanceFromDMPI(): An attempt was made to get an optional field that was not enabled, call hasImpactPointDistanceFromDMPI() to determine if it is safe to call getImpactPointDistanceFromDMPI()");
}

uci::type::ImpactDetailsType& ImpactDetailsType::setImpactPointDistanceFromDMPI(uci::type::DistanceTypeValue value) {
  impactPointDistanceFromDMPI_Accessor = value;
  return *this;
}

bool ImpactDetailsType::hasImpactPointDistanceFromDMPI() const noexcept {
  return impactPointDistanceFromDMPI_Accessor.has_value();
}

uci::type::ImpactDetailsType& ImpactDetailsType::clearImpactPointDistanceFromDMPI() noexcept {
  impactPointDistanceFromDMPI_Accessor.reset();
  return *this;
}

xs::Boolean ImpactDetailsType::getAccelerometerRecordedImpact() const {
  if (accelerometerRecordedImpact_Accessor) {
    return *accelerometerRecordedImpact_Accessor;
  }
  throw uci::base::UCIException("Error in getAccelerometerRecordedImpact(): An attempt was made to get an optional field that was not enabled, call hasAccelerometerRecordedImpact() to determine if it is safe to call getAccelerometerRecordedImpact()");
}

uci::type::ImpactDetailsType& ImpactDetailsType::setAccelerometerRecordedImpact(xs::Boolean value) {
  accelerometerRecordedImpact_Accessor = value;
  return *this;
}

bool ImpactDetailsType::hasAccelerometerRecordedImpact() const noexcept {
  return accelerometerRecordedImpact_Accessor.has_value();
}

uci::type::ImpactDetailsType& ImpactDetailsType::clearAccelerometerRecordedImpact() noexcept {
  accelerometerRecordedImpact_Accessor.reset();
  return *this;
}

uci::type::WeaponEffectIndicatorsType& ImpactDetailsType::getEffectIndicators_() const {
  if (effectIndicators_Accessor) {
    return *effectIndicators_Accessor;
  }
  throw uci::base::UCIException("Error in getEffectIndicators(): An attempt was made to get an optional field that was not enabled, call hasEffectIndicators() to determine if it is safe to call getEffectIndicators()");
}

const uci::type::WeaponEffectIndicatorsType& ImpactDetailsType::getEffectIndicators() const {
  return getEffectIndicators_();
}

uci::type::WeaponEffectIndicatorsType& ImpactDetailsType::getEffectIndicators() {
  return getEffectIndicators_();
}

uci::type::ImpactDetailsType& ImpactDetailsType::setEffectIndicators(const uci::type::WeaponEffectIndicatorsType& accessor) {
  enableEffectIndicators();
  if (&accessor != effectIndicators_Accessor.get()) {
    effectIndicators_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ImpactDetailsType::hasEffectIndicators() const noexcept {
  return static_cast<bool>(effectIndicators_Accessor);
}

uci::type::WeaponEffectIndicatorsType& ImpactDetailsType::enableEffectIndicators(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weaponEffectIndicatorsType : type};
  if ((!effectIndicators_Accessor) || (effectIndicators_Accessor->getAccessorType() != requestedType)) {
    effectIndicators_Accessor = WeaponEffectIndicatorsType::create(requestedType);
    if (!effectIndicators_Accessor) {
      throw uci::base::UCIException("Error in enableEffectIndicators(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *effectIndicators_Accessor;
}

uci::type::ImpactDetailsType& ImpactDetailsType::clearEffectIndicators() noexcept {
  effectIndicators_Accessor.reset();
  return *this;
}

std::unique_ptr<ImpactDetailsType> ImpactDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::impactDetailsType : type};
  return (requestedType == uci::type::accessorType::impactDetailsType) ? boost::make_unique<ImpactDetailsType>() : nullptr;
}

/**  */
namespace ImpactDetailsType_Names {

constexpr const char* Extern_Type_Name{"ImpactDetailsType"};
constexpr const char* ApproachAngle_Name{"ApproachAngle"};
constexpr const char* ImpactPoint_Name{"ImpactPoint"};
constexpr const char* ImpactSpeed_Name{"ImpactSpeed"};
constexpr const char* ImpactPointDistanceFromDMPI_Name{"ImpactPointDistanceFromDMPI"};
constexpr const char* AccelerometerRecordedImpact_Name{"AccelerometerRecordedImpact"};
constexpr const char* EffectIndicators_Name{"EffectIndicators"};

} // namespace ImpactDetailsType_Names

void ImpactDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ImpactDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ImpactDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ImpactDetailsType_Names::ApproachAngle_Name) {
      ApproachAngleType::deserialize(valueType.second, accessor.enableApproachAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ImpactDetailsType_Names::ImpactPoint_Name) {
      ImpactPointType::deserialize(valueType.second, accessor.enableImpactPoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ImpactDetailsType_Names::ImpactSpeed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setImpactSpeed(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ImpactDetailsType_Names::ImpactPointDistanceFromDMPI_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setImpactPointDistanceFromDMPI(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ImpactDetailsType_Names::AccelerometerRecordedImpact_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAccelerometerRecordedImpact(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ImpactDetailsType_Names::EffectIndicators_Name) {
      WeaponEffectIndicatorsType::deserialize(valueType.second, accessor.enableEffectIndicators(), nodeName, nsPrefix);
    }
  }
}

std::string ImpactDetailsType::serialize(const uci::type::ImpactDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ImpactDetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ImpactDetailsType_Names::Extern_Type_Name);
  }
  if (accessor.hasApproachAngle()) {
    ApproachAngleType::serialize(accessor.getApproachAngle(), node, ImpactDetailsType_Names::ApproachAngle_Name);
  }
  if (accessor.hasImpactPoint()) {
    ImpactPointType::serialize(accessor.getImpactPoint(), node, ImpactDetailsType_Names::ImpactPoint_Name);
  }
  if (accessor.hasImpactSpeed()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getImpactSpeed(), node, ImpactDetailsType_Names::ImpactSpeed_Name);
  }
  if (accessor.hasImpactPointDistanceFromDMPI()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getImpactPointDistanceFromDMPI(), node, ImpactDetailsType_Names::ImpactPointDistanceFromDMPI_Name);
  }
  if (accessor.hasAccelerometerRecordedImpact()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAccelerometerRecordedImpact(), node, ImpactDetailsType_Names::AccelerometerRecordedImpact_Name);
  }
  if (accessor.hasEffectIndicators()) {
    WeaponEffectIndicatorsType::serialize(accessor.getEffectIndicators(), node, ImpactDetailsType_Names::EffectIndicators_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ImpactDetailsType& ImpactDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ImpactDetailsType>().release());
}

uci::type::ImpactDetailsType& ImpactDetailsType::create(const uci::type::ImpactDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ImpactDetailsType> newAccessor{boost::make_unique<asb_uci::type::ImpactDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ImpactDetailsType::destroy(uci::type::ImpactDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::ImpactDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

