/** @file WindDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/WindDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/WindDataChoiceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpeedType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WindDataChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WindDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WindDataType::WindDataType() = default;

WindDataType::~WindDataType() = default;

void WindDataType::copy(const uci::type::WindDataType& accessor) {
  copyImpl(accessor, false);
}

void WindDataType::copyImpl(const uci::type::WindDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const WindDataType&>(accessor);
    if (accessorImpl.windChoice_Accessor) {
      setWindChoice(*(accessorImpl.windChoice_Accessor));
    } else {
      windChoice_Accessor.reset();
    }
    if (accessorImpl.hasWindGust()) {
      setWindGust(accessorImpl.getWindGust());
    } else {
      clearWindGust();
    }
    if (accessorImpl.windShear_Accessor) {
      setWindShear(*(accessorImpl.windShear_Accessor));
    } else {
      windShear_Accessor.reset();
    }
    if (accessorImpl.variableWinds_Accessor) {
      setVariableWinds(*(accessorImpl.variableWinds_Accessor));
    } else {
      variableWinds_Accessor.reset();
    }
  }
}

void WindDataType::reset() noexcept {
  windChoice_Accessor.reset();
  clearWindGust();
  windShear_Accessor.reset();
  variableWinds_Accessor.reset();
}

uci::type::WindDataChoiceType& WindDataType::getWindChoice_() const {
  if (windChoice_Accessor) {
    return *windChoice_Accessor;
  }
  throw uci::base::UCIException("Error in getWindChoice(): An attempt was made to get an optional field that was not enabled, call hasWindChoice() to determine if it is safe to call getWindChoice()");
}

const uci::type::WindDataChoiceType& WindDataType::getWindChoice() const {
  return getWindChoice_();
}

uci::type::WindDataChoiceType& WindDataType::getWindChoice() {
  return getWindChoice_();
}

uci::type::WindDataType& WindDataType::setWindChoice(const uci::type::WindDataChoiceType& accessor) {
  enableWindChoice();
  if (&accessor != windChoice_Accessor.get()) {
    windChoice_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WindDataType::hasWindChoice() const noexcept {
  return static_cast<bool>(windChoice_Accessor);
}

uci::type::WindDataChoiceType& WindDataType::enableWindChoice(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::windDataChoiceType : type};
  if ((!windChoice_Accessor) || (windChoice_Accessor->getAccessorType() != requestedType)) {
    windChoice_Accessor = WindDataChoiceType::create(requestedType);
    if (!windChoice_Accessor) {
      throw uci::base::UCIException("Error in enableWindChoice(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *windChoice_Accessor;
}

uci::type::WindDataType& WindDataType::clearWindChoice() noexcept {
  windChoice_Accessor.reset();
  return *this;
}

uci::type::SpeedTypeValue WindDataType::getWindGust() const {
  if (windGust_Accessor) {
    return *windGust_Accessor;
  }
  throw uci::base::UCIException("Error in getWindGust(): An attempt was made to get an optional field that was not enabled, call hasWindGust() to determine if it is safe to call getWindGust()");
}

uci::type::WindDataType& WindDataType::setWindGust(uci::type::SpeedTypeValue value) {
  windGust_Accessor = value;
  return *this;
}

bool WindDataType::hasWindGust() const noexcept {
  return windGust_Accessor.has_value();
}

uci::type::WindDataType& WindDataType::clearWindGust() noexcept {
  windGust_Accessor.reset();
  return *this;
}

uci::type::EmptyType& WindDataType::getWindShear_() const {
  if (windShear_Accessor) {
    return *windShear_Accessor;
  }
  throw uci::base::UCIException("Error in getWindShear(): An attempt was made to get an optional field that was not enabled, call hasWindShear() to determine if it is safe to call getWindShear()");
}

const uci::type::EmptyType& WindDataType::getWindShear() const {
  return getWindShear_();
}

uci::type::EmptyType& WindDataType::getWindShear() {
  return getWindShear_();
}

uci::type::WindDataType& WindDataType::setWindShear(const uci::type::EmptyType& value) {
  return setWindShear(value.c_str());
}

uci::type::WindDataType& WindDataType::setWindShear(const std::string& value) {
  return setWindShear(value.c_str());
}

uci::type::WindDataType& WindDataType::setWindShear(const char* value) {
  enableWindShear().setStringValue(value);
  return *this;
}

bool WindDataType::hasWindShear() const noexcept {
  return static_cast<bool>(windShear_Accessor);
}

uci::type::EmptyType& WindDataType::enableWindShear(uci::base::accessorType::AccessorType type) {
  if (!windShear_Accessor) {
    windShear_Accessor = EmptyType::create(type);
  }
  return *windShear_Accessor;
}

uci::type::WindDataType& WindDataType::clearWindShear() noexcept {
  windShear_Accessor.reset();
  return *this;
}

uci::type::EmptyType& WindDataType::getVariableWinds_() const {
  if (variableWinds_Accessor) {
    return *variableWinds_Accessor;
  }
  throw uci::base::UCIException("Error in getVariableWinds(): An attempt was made to get an optional field that was not enabled, call hasVariableWinds() to determine if it is safe to call getVariableWinds()");
}

const uci::type::EmptyType& WindDataType::getVariableWinds() const {
  return getVariableWinds_();
}

uci::type::EmptyType& WindDataType::getVariableWinds() {
  return getVariableWinds_();
}

uci::type::WindDataType& WindDataType::setVariableWinds(const uci::type::EmptyType& value) {
  return setVariableWinds(value.c_str());
}

uci::type::WindDataType& WindDataType::setVariableWinds(const std::string& value) {
  return setVariableWinds(value.c_str());
}

uci::type::WindDataType& WindDataType::setVariableWinds(const char* value) {
  enableVariableWinds().setStringValue(value);
  return *this;
}

bool WindDataType::hasVariableWinds() const noexcept {
  return static_cast<bool>(variableWinds_Accessor);
}

uci::type::EmptyType& WindDataType::enableVariableWinds(uci::base::accessorType::AccessorType type) {
  if (!variableWinds_Accessor) {
    variableWinds_Accessor = EmptyType::create(type);
  }
  return *variableWinds_Accessor;
}

uci::type::WindDataType& WindDataType::clearVariableWinds() noexcept {
  variableWinds_Accessor.reset();
  return *this;
}

std::unique_ptr<WindDataType> WindDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::windDataType : type};
  return (requestedType == uci::type::accessorType::windDataType) ? boost::make_unique<WindDataType>() : nullptr;
}

/**  */
namespace WindDataType_Names {

constexpr const char* Extern_Type_Name{"WindDataType"};
constexpr const char* WindChoice_Name{"WindChoice"};
constexpr const char* WindGust_Name{"WindGust"};
constexpr const char* WindShear_Name{"WindShear"};
constexpr const char* VariableWinds_Name{"VariableWinds"};

} // namespace WindDataType_Names

void WindDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::WindDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WindDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WindDataType_Names::WindChoice_Name) {
      WindDataChoiceType::deserialize(valueType.second, accessor.enableWindChoice(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WindDataType_Names::WindGust_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWindGust(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WindDataType_Names::WindShear_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWindShear(*value);
      }
    } else if (valueType.first == nsPrefix + WindDataType_Names::VariableWinds_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVariableWinds(*value);
      }
    }
  }
}

std::string WindDataType::serialize(const uci::type::WindDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WindDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WindDataType_Names::Extern_Type_Name);
  }
  if (accessor.hasWindChoice()) {
    WindDataChoiceType::serialize(accessor.getWindChoice(), node, WindDataType_Names::WindChoice_Name);
  }
  if (accessor.hasWindGust()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getWindGust(), node, WindDataType_Names::WindGust_Name);
  }
  if (accessor.hasWindShear()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getWindShear(), node, WindDataType_Names::WindShear_Name);
  }
  if (accessor.hasVariableWinds()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getVariableWinds(), node, WindDataType_Names::VariableWinds_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WindDataType& WindDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WindDataType>().release());
}

uci::type::WindDataType& WindDataType::create(const uci::type::WindDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WindDataType> newAccessor{boost::make_unique<asb_uci::type::WindDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WindDataType::destroy(uci::type::WindDataType& accessor) {
  delete dynamic_cast<asb_uci::type::WindDataType*>(&accessor);
}

} // namespace type

} // namespace uci

