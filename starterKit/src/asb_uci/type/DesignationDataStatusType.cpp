/** @file DesignationDataStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DesignationDataStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CannotComplyType.h"
#include "asb_uci/type/DesignationID_Type.h"
#include "asb_uci/type/RequestProcessingStateEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CannotComplyType.h"
#include "uci/type/DesignationDataStatusType.h"
#include "uci/type/DesignationID_Type.h"
#include "uci/type/RequestProcessingStateEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DesignationDataStatusType::DesignationDataStatusType()
  : designationID_Accessor{boost::make_unique<DesignationID_Type>()},
    requestProcessingState_Accessor{boost::make_unique<RequestProcessingStateEnum>()} {
}

DesignationDataStatusType::~DesignationDataStatusType() = default;

void DesignationDataStatusType::copy(const uci::type::DesignationDataStatusType& accessor) {
  copyImpl(accessor, false);
}

void DesignationDataStatusType::copyImpl(const uci::type::DesignationDataStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DesignationDataStatusType&>(accessor);
    setDesignationID(*(accessorImpl.designationID_Accessor));
    setRequestProcessingState(*(accessorImpl.requestProcessingState_Accessor));
    if (accessorImpl.requestProcessingStateReason_Accessor) {
      setRequestProcessingStateReason(*(accessorImpl.requestProcessingStateReason_Accessor));
    } else {
      requestProcessingStateReason_Accessor.reset();
    }
  }
}

void DesignationDataStatusType::reset() noexcept {
  designationID_Accessor->reset();
  requestProcessingState_Accessor->reset();
  requestProcessingStateReason_Accessor.reset();
}

const uci::type::DesignationID_Type& DesignationDataStatusType::getDesignationID() const {
  return *designationID_Accessor;
}

uci::type::DesignationID_Type& DesignationDataStatusType::getDesignationID() {
  return *designationID_Accessor;
}

uci::type::DesignationDataStatusType& DesignationDataStatusType::setDesignationID(const uci::type::DesignationID_Type& accessor) {
  if (&accessor != designationID_Accessor.get()) {
    designationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequestProcessingStateEnum& DesignationDataStatusType::getRequestProcessingState() const {
  return *requestProcessingState_Accessor;
}

uci::type::RequestProcessingStateEnum& DesignationDataStatusType::getRequestProcessingState() {
  return *requestProcessingState_Accessor;
}

uci::type::DesignationDataStatusType& DesignationDataStatusType::setRequestProcessingState(const uci::type::RequestProcessingStateEnum& accessor) {
  if (&accessor != requestProcessingState_Accessor.get()) {
    requestProcessingState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DesignationDataStatusType& DesignationDataStatusType::setRequestProcessingState(uci::type::RequestProcessingStateEnum::EnumerationItem value) {
  requestProcessingState_Accessor->setValue(value);
  return *this;
}


uci::type::CannotComplyType& DesignationDataStatusType::getRequestProcessingStateReason_() const {
  if (requestProcessingStateReason_Accessor) {
    return *requestProcessingStateReason_Accessor;
  }
  throw uci::base::UCIException("Error in getRequestProcessingStateReason(): An attempt was made to get an optional field that was not enabled, call hasRequestProcessingStateReason() to determine if it is safe to call getRequestProcessingStateReason()");
}

const uci::type::CannotComplyType& DesignationDataStatusType::getRequestProcessingStateReason() const {
  return getRequestProcessingStateReason_();
}

uci::type::CannotComplyType& DesignationDataStatusType::getRequestProcessingStateReason() {
  return getRequestProcessingStateReason_();
}

uci::type::DesignationDataStatusType& DesignationDataStatusType::setRequestProcessingStateReason(const uci::type::CannotComplyType& accessor) {
  enableRequestProcessingStateReason(accessor.getAccessorType());
  if (&accessor != requestProcessingStateReason_Accessor.get()) {
    requestProcessingStateReason_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DesignationDataStatusType::hasRequestProcessingStateReason() const noexcept {
  return static_cast<bool>(requestProcessingStateReason_Accessor);
}

uci::type::CannotComplyType& DesignationDataStatusType::enableRequestProcessingStateReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!requestProcessingStateReason_Accessor) || (requestProcessingStateReason_Accessor->getAccessorType() != requestedType)) {
    requestProcessingStateReason_Accessor = CannotComplyType::create(requestedType);
    if (!requestProcessingStateReason_Accessor) {
      throw uci::base::UCIException("Error in enableRequestProcessingStateReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requestProcessingStateReason_Accessor;
}

uci::type::DesignationDataStatusType& DesignationDataStatusType::clearRequestProcessingStateReason() noexcept {
  requestProcessingStateReason_Accessor.reset();
  return *this;
}

std::unique_ptr<DesignationDataStatusType> DesignationDataStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::designationDataStatusType : type};
  return (requestedType == uci::type::accessorType::designationDataStatusType) ? boost::make_unique<DesignationDataStatusType>() : nullptr;
}

/**  */
namespace DesignationDataStatusType_Names {

constexpr const char* Extern_Type_Name{"DesignationDataStatusType"};
constexpr const char* DesignationID_Name{"DesignationID"};
constexpr const char* RequestProcessingState_Name{"RequestProcessingState"};
constexpr const char* RequestProcessingStateReason_Name{"RequestProcessingStateReason"};

} // namespace DesignationDataStatusType_Names

void DesignationDataStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DesignationDataStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DesignationDataStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DesignationDataStatusType_Names::DesignationID_Name) {
      DesignationID_Type::deserialize(valueType.second, accessor.getDesignationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DesignationDataStatusType_Names::RequestProcessingState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRequestProcessingState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DesignationDataStatusType_Names::RequestProcessingStateReason_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRequestProcessingStateReason(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string DesignationDataStatusType::serialize(const uci::type::DesignationDataStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DesignationDataStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DesignationDataStatusType_Names::Extern_Type_Name);
  }
  DesignationID_Type::serialize(accessor.getDesignationID(), node, DesignationDataStatusType_Names::DesignationID_Name);
  RequestProcessingStateEnum::serialize(accessor.getRequestProcessingState(), node, DesignationDataStatusType_Names::RequestProcessingState_Name, false);
  if (accessor.hasRequestProcessingStateReason()) {
    CannotComplyType::serialize(accessor.getRequestProcessingStateReason(), node, DesignationDataStatusType_Names::RequestProcessingStateReason_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DesignationDataStatusType& DesignationDataStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DesignationDataStatusType>().release());
}

uci::type::DesignationDataStatusType& DesignationDataStatusType::create(const uci::type::DesignationDataStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DesignationDataStatusType> newAccessor{boost::make_unique<asb_uci::type::DesignationDataStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DesignationDataStatusType::destroy(uci::type::DesignationDataStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::DesignationDataStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

