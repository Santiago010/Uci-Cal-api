/** @file RF_ThreadInstanceCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RF_ThreadInstanceCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ModifyRF_ThreadInstanceType.h"
#include "asb_uci/type/RemoveRF_ThreadInstanceType.h"
#include "asb_uci/type/SetupRF_ThreadInstanceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ModifyRF_ThreadInstanceType.h"
#include "uci/type/RF_ThreadInstanceCommandType.h"
#include "uci/type/RemoveRF_ThreadInstanceType.h"
#include "uci/type/SetupRF_ThreadInstanceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RF_ThreadInstanceCommandType::RF_ThreadInstanceCommandType() = default;

RF_ThreadInstanceCommandType::~RF_ThreadInstanceCommandType() = default;

void RF_ThreadInstanceCommandType::copy(const uci::type::RF_ThreadInstanceCommandType& accessor) {
  copyImpl(accessor, false);
}

void RF_ThreadInstanceCommandType::copyImpl(const uci::type::RF_ThreadInstanceCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RF_ThreadInstanceCommandType&>(accessor);
    if (accessorImpl.setupRF_ThreadInstance_Accessor) {
      setSetupRF_ThreadInstance(*(accessorImpl.setupRF_ThreadInstance_Accessor));
    } else {
      setupRF_ThreadInstance_Accessor.reset();
    }
    if (accessorImpl.modifyRF_ThreadInstance_Accessor) {
      setModifyRF_ThreadInstance(*(accessorImpl.modifyRF_ThreadInstance_Accessor));
    } else {
      modifyRF_ThreadInstance_Accessor.reset();
    }
    if (accessorImpl.removeRF_ThreadInstance_Accessor) {
      setRemoveRF_ThreadInstance(*(accessorImpl.removeRF_ThreadInstance_Accessor));
    } else {
      removeRF_ThreadInstance_Accessor.reset();
    }
  }
}

void RF_ThreadInstanceCommandType::reset() noexcept {
  setupRF_ThreadInstance_Accessor.reset();
  modifyRF_ThreadInstance_Accessor.reset();
  removeRF_ThreadInstance_Accessor.reset();
}

uci::type::RF_ThreadInstanceCommandType::RF_ThreadInstanceCommandTypeChoice RF_ThreadInstanceCommandType::getRF_ThreadInstanceCommandTypeChoiceOrdinal() const noexcept {
  if (setupRF_ThreadInstance_Accessor) {
    return RF_THREADINSTANCECOMMANDTYPE_CHOICE_SETUPRF_THREADINSTANCE;
  }
  if (modifyRF_ThreadInstance_Accessor) {
    return RF_THREADINSTANCECOMMANDTYPE_CHOICE_MODIFYRF_THREADINSTANCE;
  }
  if (removeRF_ThreadInstance_Accessor) {
    return RF_THREADINSTANCECOMMANDTYPE_CHOICE_REMOVERF_THREADINSTANCE;
  }
  return RF_THREADINSTANCECOMMANDTYPE_CHOICE_NONE;
}

uci::type::RF_ThreadInstanceCommandType& RF_ThreadInstanceCommandType::setRF_ThreadInstanceCommandTypeChoiceOrdinal(uci::type::RF_ThreadInstanceCommandType::RF_ThreadInstanceCommandTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case RF_THREADINSTANCECOMMANDTYPE_CHOICE_SETUPRF_THREADINSTANCE:
      chooseSetupRF_ThreadInstance();
      break;
    case RF_THREADINSTANCECOMMANDTYPE_CHOICE_MODIFYRF_THREADINSTANCE:
      chooseModifyRF_ThreadInstance();
      break;
    case RF_THREADINSTANCECOMMANDTYPE_CHOICE_REMOVERF_THREADINSTANCE:
      chooseRemoveRF_ThreadInstance();
      break;
    default:
      throw uci::base::UCIException("Error in setRF_ThreadInstanceCommandTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::RF_ThreadInstanceCommandType::SetupRF_ThreadInstance& RF_ThreadInstanceCommandType::getSetupRF_ThreadInstance_() const {
  if (setupRF_ThreadInstance_Accessor) {
    return *setupRF_ThreadInstance_Accessor;
  }
  throw uci::base::UCIException("Error in getSetupRF_ThreadInstance(): Unable to get SetupRF_ThreadInstance, field not selected");
}

const uci::type::RF_ThreadInstanceCommandType::SetupRF_ThreadInstance& RF_ThreadInstanceCommandType::getSetupRF_ThreadInstance() const {
  return getSetupRF_ThreadInstance_();
}

uci::type::RF_ThreadInstanceCommandType::SetupRF_ThreadInstance& RF_ThreadInstanceCommandType::getSetupRF_ThreadInstance() {
  return getSetupRF_ThreadInstance_();
}

uci::type::RF_ThreadInstanceCommandType& RF_ThreadInstanceCommandType::setSetupRF_ThreadInstance(const uci::type::RF_ThreadInstanceCommandType::SetupRF_ThreadInstance& accessor) {
  chooseSetupRF_ThreadInstance();
  if (&accessor != setupRF_ThreadInstance_Accessor.get()) {
    setupRF_ThreadInstance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RF_ThreadInstanceCommandType::isSetupRF_ThreadInstance() const noexcept {
  return static_cast<bool>(setupRF_ThreadInstance_Accessor);
}

uci::type::RF_ThreadInstanceCommandType::SetupRF_ThreadInstance& RF_ThreadInstanceCommandType::chooseSetupRF_ThreadInstance() {
  modifyRF_ThreadInstance_Accessor.reset();
  removeRF_ThreadInstance_Accessor.reset();
  if (!setupRF_ThreadInstance_Accessor) {
    setupRF_ThreadInstance_Accessor = boost::make_unique<SetupRF_ThreadInstance>(1, SIZE_MAX);
  }
  return *setupRF_ThreadInstance_Accessor;
}

uci::type::RF_ThreadInstanceCommandType::ModifyRF_ThreadInstance& RF_ThreadInstanceCommandType::getModifyRF_ThreadInstance_() const {
  if (modifyRF_ThreadInstance_Accessor) {
    return *modifyRF_ThreadInstance_Accessor;
  }
  throw uci::base::UCIException("Error in getModifyRF_ThreadInstance(): Unable to get ModifyRF_ThreadInstance, field not selected");
}

const uci::type::RF_ThreadInstanceCommandType::ModifyRF_ThreadInstance& RF_ThreadInstanceCommandType::getModifyRF_ThreadInstance() const {
  return getModifyRF_ThreadInstance_();
}

uci::type::RF_ThreadInstanceCommandType::ModifyRF_ThreadInstance& RF_ThreadInstanceCommandType::getModifyRF_ThreadInstance() {
  return getModifyRF_ThreadInstance_();
}

uci::type::RF_ThreadInstanceCommandType& RF_ThreadInstanceCommandType::setModifyRF_ThreadInstance(const uci::type::RF_ThreadInstanceCommandType::ModifyRF_ThreadInstance& accessor) {
  chooseModifyRF_ThreadInstance();
  if (&accessor != modifyRF_ThreadInstance_Accessor.get()) {
    modifyRF_ThreadInstance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RF_ThreadInstanceCommandType::isModifyRF_ThreadInstance() const noexcept {
  return static_cast<bool>(modifyRF_ThreadInstance_Accessor);
}

uci::type::RF_ThreadInstanceCommandType::ModifyRF_ThreadInstance& RF_ThreadInstanceCommandType::chooseModifyRF_ThreadInstance() {
  setupRF_ThreadInstance_Accessor.reset();
  removeRF_ThreadInstance_Accessor.reset();
  if (!modifyRF_ThreadInstance_Accessor) {
    modifyRF_ThreadInstance_Accessor = boost::make_unique<ModifyRF_ThreadInstance>(1, SIZE_MAX);
  }
  return *modifyRF_ThreadInstance_Accessor;
}

uci::type::RF_ThreadInstanceCommandType::RemoveRF_ThreadInstance& RF_ThreadInstanceCommandType::getRemoveRF_ThreadInstance_() const {
  if (removeRF_ThreadInstance_Accessor) {
    return *removeRF_ThreadInstance_Accessor;
  }
  throw uci::base::UCIException("Error in getRemoveRF_ThreadInstance(): Unable to get RemoveRF_ThreadInstance, field not selected");
}

const uci::type::RF_ThreadInstanceCommandType::RemoveRF_ThreadInstance& RF_ThreadInstanceCommandType::getRemoveRF_ThreadInstance() const {
  return getRemoveRF_ThreadInstance_();
}

uci::type::RF_ThreadInstanceCommandType::RemoveRF_ThreadInstance& RF_ThreadInstanceCommandType::getRemoveRF_ThreadInstance() {
  return getRemoveRF_ThreadInstance_();
}

uci::type::RF_ThreadInstanceCommandType& RF_ThreadInstanceCommandType::setRemoveRF_ThreadInstance(const uci::type::RF_ThreadInstanceCommandType::RemoveRF_ThreadInstance& accessor) {
  chooseRemoveRF_ThreadInstance();
  if (&accessor != removeRF_ThreadInstance_Accessor.get()) {
    removeRF_ThreadInstance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RF_ThreadInstanceCommandType::isRemoveRF_ThreadInstance() const noexcept {
  return static_cast<bool>(removeRF_ThreadInstance_Accessor);
}

uci::type::RF_ThreadInstanceCommandType::RemoveRF_ThreadInstance& RF_ThreadInstanceCommandType::chooseRemoveRF_ThreadInstance() {
  setupRF_ThreadInstance_Accessor.reset();
  modifyRF_ThreadInstance_Accessor.reset();
  if (!removeRF_ThreadInstance_Accessor) {
    removeRF_ThreadInstance_Accessor = boost::make_unique<RemoveRF_ThreadInstance>(1, SIZE_MAX);
  }
  return *removeRF_ThreadInstance_Accessor;
}

std::unique_ptr<RF_ThreadInstanceCommandType> RF_ThreadInstanceCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_ThreadInstanceCommandType : type};
  return (requestedType == uci::type::accessorType::rF_ThreadInstanceCommandType) ? boost::make_unique<RF_ThreadInstanceCommandType>() : nullptr;
}

/**  */
namespace RF_ThreadInstanceCommandType_Names {

constexpr const char* Extern_Type_Name{"RF_ThreadInstanceCommandType"};
constexpr const char* SetupRF_ThreadInstance_Name{"SetupRF_ThreadInstance"};
constexpr const char* ModifyRF_ThreadInstance_Name{"ModifyRF_ThreadInstance"};
constexpr const char* RemoveRF_ThreadInstance_Name{"RemoveRF_ThreadInstance"};

} // namespace RF_ThreadInstanceCommandType_Names

void RF_ThreadInstanceCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_ThreadInstanceCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RF_ThreadInstanceCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RF_ThreadInstanceCommandType_Names::SetupRF_ThreadInstance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_ThreadInstanceCommandType::SetupRF_ThreadInstance& boundedList = accessor.chooseSetupRF_ThreadInstance();
        const uci::type::RF_ThreadInstanceCommandType::SetupRF_ThreadInstance::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SetupRF_ThreadInstanceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RF_ThreadInstanceCommandType_Names::ModifyRF_ThreadInstance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_ThreadInstanceCommandType::ModifyRF_ThreadInstance& boundedList = accessor.chooseModifyRF_ThreadInstance();
        const uci::type::RF_ThreadInstanceCommandType::ModifyRF_ThreadInstance::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ModifyRF_ThreadInstanceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RF_ThreadInstanceCommandType_Names::RemoveRF_ThreadInstance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_ThreadInstanceCommandType::RemoveRF_ThreadInstance& boundedList = accessor.chooseRemoveRF_ThreadInstance();
        const uci::type::RF_ThreadInstanceCommandType::RemoveRF_ThreadInstance::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RemoveRF_ThreadInstanceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string RF_ThreadInstanceCommandType::serialize(const uci::type::RF_ThreadInstanceCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RF_ThreadInstanceCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RF_ThreadInstanceCommandType_Names::Extern_Type_Name);
  }
  if (accessor.isSetupRF_ThreadInstance()) {
    {
      const uci::type::RF_ThreadInstanceCommandType::SetupRF_ThreadInstance& boundedList = accessor.getSetupRF_ThreadInstance();
      for (uci::type::RF_ThreadInstanceCommandType::SetupRF_ThreadInstance::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SetupRF_ThreadInstanceType::serialize(boundedList.at(i), node, RF_ThreadInstanceCommandType_Names::SetupRF_ThreadInstance_Name);
      }
    }
  } else if (accessor.isModifyRF_ThreadInstance()) {
    {
      const uci::type::RF_ThreadInstanceCommandType::ModifyRF_ThreadInstance& boundedList = accessor.getModifyRF_ThreadInstance();
      for (uci::type::RF_ThreadInstanceCommandType::ModifyRF_ThreadInstance::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ModifyRF_ThreadInstanceType::serialize(boundedList.at(i), node, RF_ThreadInstanceCommandType_Names::ModifyRF_ThreadInstance_Name);
      }
    }
  } else if (accessor.isRemoveRF_ThreadInstance()) {
    {
      const uci::type::RF_ThreadInstanceCommandType::RemoveRF_ThreadInstance& boundedList = accessor.getRemoveRF_ThreadInstance();
      for (uci::type::RF_ThreadInstanceCommandType::RemoveRF_ThreadInstance::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::RemoveRF_ThreadInstanceType::serialize(boundedList.at(i), node, RF_ThreadInstanceCommandType_Names::RemoveRF_ThreadInstance_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RF_ThreadInstanceCommandType& RF_ThreadInstanceCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RF_ThreadInstanceCommandType>().release());
}

uci::type::RF_ThreadInstanceCommandType& RF_ThreadInstanceCommandType::create(const uci::type::RF_ThreadInstanceCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RF_ThreadInstanceCommandType> newAccessor{boost::make_unique<asb_uci::type::RF_ThreadInstanceCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RF_ThreadInstanceCommandType::destroy(uci::type::RF_ThreadInstanceCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::RF_ThreadInstanceCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

