/** @file GatewayLinkStatisticsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/GatewayLinkStatisticsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommLinkPortMapType.h"
#include "../../../include/asb_uci/type/GatewayNativeStatisticsPET.h"
#include "../../../include/asb_uci/type/NetworkLinkID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLinkPortMapType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataRateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayLinkStatisticsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayNativeStatisticsPET.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NetworkLinkID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

GatewayLinkStatisticsType::GatewayLinkStatisticsType() = default;

GatewayLinkStatisticsType::~GatewayLinkStatisticsType() = default;

void GatewayLinkStatisticsType::copy(const uci::type::GatewayLinkStatisticsType& accessor) {
  copyImpl(accessor, false);
}

void GatewayLinkStatisticsType::copyImpl(const uci::type::GatewayLinkStatisticsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const GatewayLinkStatisticsType&>(accessor);
    if (accessorImpl.networkLinkID_Accessor) {
      setNetworkLinkID(*(accessorImpl.networkLinkID_Accessor));
    } else {
      networkLinkID_Accessor.reset();
    }
    if (accessorImpl.hasGatewayRxUtilization()) {
      setGatewayRxUtilization(accessorImpl.getGatewayRxUtilization());
    } else {
      clearGatewayRxUtilization();
    }
    if (accessorImpl.hasGatewayTxUtilization()) {
      setGatewayTxUtilization(accessorImpl.getGatewayTxUtilization());
    } else {
      clearGatewayTxUtilization();
    }
    if (accessorImpl.hasRxDataErrorRate()) {
      setRxDataErrorRate(accessorImpl.getRxDataErrorRate());
    } else {
      clearRxDataErrorRate();
    }
    if (accessorImpl.hasRxDataRate()) {
      setRxDataRate(accessorImpl.getRxDataRate());
    } else {
      clearRxDataRate();
    }
    if (accessorImpl.hasRxMessageErrorRate()) {
      setRxMessageErrorRate(accessorImpl.getRxMessageErrorRate());
    } else {
      clearRxMessageErrorRate();
    }
    if (accessorImpl.hasRxMessageRate()) {
      setRxMessageRate(accessorImpl.getRxMessageRate());
    } else {
      clearRxMessageRate();
    }
    if (accessorImpl.hasTxDataErrorRate()) {
      setTxDataErrorRate(accessorImpl.getTxDataErrorRate());
    } else {
      clearTxDataErrorRate();
    }
    if (accessorImpl.hasTxDataRate()) {
      setTxDataRate(accessorImpl.getTxDataRate());
    } else {
      clearTxDataRate();
    }
    if (accessorImpl.hasTxMessageErrorRate()) {
      setTxMessageErrorRate(accessorImpl.getTxMessageErrorRate());
    } else {
      clearTxMessageErrorRate();
    }
    if (accessorImpl.hasTxMessageRate()) {
      setTxMessageRate(accessorImpl.getTxMessageRate());
    } else {
      clearTxMessageRate();
    }
    if (accessorImpl.linkPortMap_Accessor) {
      setLinkPortMap(*(accessorImpl.linkPortMap_Accessor));
    } else {
      linkPortMap_Accessor.reset();
    }
    if (accessorImpl.dataLinkNativeStatistics_Accessor) {
      setDataLinkNativeStatistics(*(accessorImpl.dataLinkNativeStatistics_Accessor));
    } else {
      dataLinkNativeStatistics_Accessor.reset();
    }
  }
}

void GatewayLinkStatisticsType::reset() noexcept {
  networkLinkID_Accessor.reset();
  clearGatewayRxUtilization();
  clearGatewayTxUtilization();
  clearRxDataErrorRate();
  clearRxDataRate();
  clearRxMessageErrorRate();
  clearRxMessageRate();
  clearTxDataErrorRate();
  clearTxDataRate();
  clearTxMessageErrorRate();
  clearTxMessageRate();
  linkPortMap_Accessor.reset();
  dataLinkNativeStatistics_Accessor.reset();
}

uci::type::NetworkLinkID_Type& GatewayLinkStatisticsType::getNetworkLinkID_() const {
  if (networkLinkID_Accessor) {
    return *networkLinkID_Accessor;
  }
  throw uci::base::UCIException("Error in getNetworkLinkID(): An attempt was made to get an optional field that was not enabled, call hasNetworkLinkID() to determine if it is safe to call getNetworkLinkID()");
}

const uci::type::NetworkLinkID_Type& GatewayLinkStatisticsType::getNetworkLinkID() const {
  return getNetworkLinkID_();
}

uci::type::NetworkLinkID_Type& GatewayLinkStatisticsType::getNetworkLinkID() {
  return getNetworkLinkID_();
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::setNetworkLinkID(const uci::type::NetworkLinkID_Type& accessor) {
  enableNetworkLinkID();
  if (&accessor != networkLinkID_Accessor.get()) {
    networkLinkID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLinkStatisticsType::hasNetworkLinkID() const noexcept {
  return static_cast<bool>(networkLinkID_Accessor);
}

uci::type::NetworkLinkID_Type& GatewayLinkStatisticsType::enableNetworkLinkID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::networkLinkID_Type : type};
  if ((!networkLinkID_Accessor) || (networkLinkID_Accessor->getAccessorType() != requestedType)) {
    networkLinkID_Accessor = NetworkLinkID_Type::create(requestedType);
    if (!networkLinkID_Accessor) {
      throw uci::base::UCIException("Error in enableNetworkLinkID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *networkLinkID_Accessor;
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::clearNetworkLinkID() noexcept {
  networkLinkID_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue GatewayLinkStatisticsType::getGatewayRxUtilization() const {
  if (gatewayRxUtilization_Accessor) {
    return *gatewayRxUtilization_Accessor;
  }
  throw uci::base::UCIException("Error in getGatewayRxUtilization(): An attempt was made to get an optional field that was not enabled, call hasGatewayRxUtilization() to determine if it is safe to call getGatewayRxUtilization()");
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::setGatewayRxUtilization(uci::type::PercentTypeValue value) {
  gatewayRxUtilization_Accessor = value;
  return *this;
}

bool GatewayLinkStatisticsType::hasGatewayRxUtilization() const noexcept {
  return gatewayRxUtilization_Accessor.has_value();
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::clearGatewayRxUtilization() noexcept {
  gatewayRxUtilization_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue GatewayLinkStatisticsType::getGatewayTxUtilization() const {
  if (gatewayTxUtilization_Accessor) {
    return *gatewayTxUtilization_Accessor;
  }
  throw uci::base::UCIException("Error in getGatewayTxUtilization(): An attempt was made to get an optional field that was not enabled, call hasGatewayTxUtilization() to determine if it is safe to call getGatewayTxUtilization()");
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::setGatewayTxUtilization(uci::type::PercentTypeValue value) {
  gatewayTxUtilization_Accessor = value;
  return *this;
}

bool GatewayLinkStatisticsType::hasGatewayTxUtilization() const noexcept {
  return gatewayTxUtilization_Accessor.has_value();
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::clearGatewayTxUtilization() noexcept {
  gatewayTxUtilization_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue GatewayLinkStatisticsType::getRxDataErrorRate() const {
  if (rxDataErrorRate_Accessor) {
    return *rxDataErrorRate_Accessor;
  }
  throw uci::base::UCIException("Error in getRxDataErrorRate(): An attempt was made to get an optional field that was not enabled, call hasRxDataErrorRate() to determine if it is safe to call getRxDataErrorRate()");
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::setRxDataErrorRate(uci::type::PercentTypeValue value) {
  rxDataErrorRate_Accessor = value;
  return *this;
}

bool GatewayLinkStatisticsType::hasRxDataErrorRate() const noexcept {
  return rxDataErrorRate_Accessor.has_value();
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::clearRxDataErrorRate() noexcept {
  rxDataErrorRate_Accessor.reset();
  return *this;
}

uci::type::DataRateTypeValue GatewayLinkStatisticsType::getRxDataRate() const {
  if (rxDataRate_Accessor) {
    return *rxDataRate_Accessor;
  }
  throw uci::base::UCIException("Error in getRxDataRate(): An attempt was made to get an optional field that was not enabled, call hasRxDataRate() to determine if it is safe to call getRxDataRate()");
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::setRxDataRate(uci::type::DataRateTypeValue value) {
  rxDataRate_Accessor = value;
  return *this;
}

bool GatewayLinkStatisticsType::hasRxDataRate() const noexcept {
  return rxDataRate_Accessor.has_value();
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::clearRxDataRate() noexcept {
  rxDataRate_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue GatewayLinkStatisticsType::getRxMessageErrorRate() const {
  if (rxMessageErrorRate_Accessor) {
    return *rxMessageErrorRate_Accessor;
  }
  throw uci::base::UCIException("Error in getRxMessageErrorRate(): An attempt was made to get an optional field that was not enabled, call hasRxMessageErrorRate() to determine if it is safe to call getRxMessageErrorRate()");
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::setRxMessageErrorRate(uci::type::PercentTypeValue value) {
  rxMessageErrorRate_Accessor = value;
  return *this;
}

bool GatewayLinkStatisticsType::hasRxMessageErrorRate() const noexcept {
  return rxMessageErrorRate_Accessor.has_value();
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::clearRxMessageErrorRate() noexcept {
  rxMessageErrorRate_Accessor.reset();
  return *this;
}

xs::Double GatewayLinkStatisticsType::getRxMessageRate() const {
  if (rxMessageRate_Accessor) {
    return *rxMessageRate_Accessor;
  }
  throw uci::base::UCIException("Error in getRxMessageRate(): An attempt was made to get an optional field that was not enabled, call hasRxMessageRate() to determine if it is safe to call getRxMessageRate()");
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::setRxMessageRate(xs::Double value) {
  rxMessageRate_Accessor = value;
  return *this;
}

bool GatewayLinkStatisticsType::hasRxMessageRate() const noexcept {
  return rxMessageRate_Accessor.has_value();
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::clearRxMessageRate() noexcept {
  rxMessageRate_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue GatewayLinkStatisticsType::getTxDataErrorRate() const {
  if (txDataErrorRate_Accessor) {
    return *txDataErrorRate_Accessor;
  }
  throw uci::base::UCIException("Error in getTxDataErrorRate(): An attempt was made to get an optional field that was not enabled, call hasTxDataErrorRate() to determine if it is safe to call getTxDataErrorRate()");
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::setTxDataErrorRate(uci::type::PercentTypeValue value) {
  txDataErrorRate_Accessor = value;
  return *this;
}

bool GatewayLinkStatisticsType::hasTxDataErrorRate() const noexcept {
  return txDataErrorRate_Accessor.has_value();
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::clearTxDataErrorRate() noexcept {
  txDataErrorRate_Accessor.reset();
  return *this;
}

uci::type::DataRateTypeValue GatewayLinkStatisticsType::getTxDataRate() const {
  if (txDataRate_Accessor) {
    return *txDataRate_Accessor;
  }
  throw uci::base::UCIException("Error in getTxDataRate(): An attempt was made to get an optional field that was not enabled, call hasTxDataRate() to determine if it is safe to call getTxDataRate()");
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::setTxDataRate(uci::type::DataRateTypeValue value) {
  txDataRate_Accessor = value;
  return *this;
}

bool GatewayLinkStatisticsType::hasTxDataRate() const noexcept {
  return txDataRate_Accessor.has_value();
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::clearTxDataRate() noexcept {
  txDataRate_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue GatewayLinkStatisticsType::getTxMessageErrorRate() const {
  if (txMessageErrorRate_Accessor) {
    return *txMessageErrorRate_Accessor;
  }
  throw uci::base::UCIException("Error in getTxMessageErrorRate(): An attempt was made to get an optional field that was not enabled, call hasTxMessageErrorRate() to determine if it is safe to call getTxMessageErrorRate()");
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::setTxMessageErrorRate(uci::type::PercentTypeValue value) {
  txMessageErrorRate_Accessor = value;
  return *this;
}

bool GatewayLinkStatisticsType::hasTxMessageErrorRate() const noexcept {
  return txMessageErrorRate_Accessor.has_value();
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::clearTxMessageErrorRate() noexcept {
  txMessageErrorRate_Accessor.reset();
  return *this;
}

xs::Double GatewayLinkStatisticsType::getTxMessageRate() const {
  if (txMessageRate_Accessor) {
    return *txMessageRate_Accessor;
  }
  throw uci::base::UCIException("Error in getTxMessageRate(): An attempt was made to get an optional field that was not enabled, call hasTxMessageRate() to determine if it is safe to call getTxMessageRate()");
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::setTxMessageRate(xs::Double value) {
  txMessageRate_Accessor = value;
  return *this;
}

bool GatewayLinkStatisticsType::hasTxMessageRate() const noexcept {
  return txMessageRate_Accessor.has_value();
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::clearTxMessageRate() noexcept {
  txMessageRate_Accessor.reset();
  return *this;
}

uci::type::CommLinkPortMapType& GatewayLinkStatisticsType::getLinkPortMap_() const {
  if (linkPortMap_Accessor) {
    return *linkPortMap_Accessor;
  }
  throw uci::base::UCIException("Error in getLinkPortMap(): An attempt was made to get an optional field that was not enabled, call hasLinkPortMap() to determine if it is safe to call getLinkPortMap()");
}

const uci::type::CommLinkPortMapType& GatewayLinkStatisticsType::getLinkPortMap() const {
  return getLinkPortMap_();
}

uci::type::CommLinkPortMapType& GatewayLinkStatisticsType::getLinkPortMap() {
  return getLinkPortMap_();
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::setLinkPortMap(const uci::type::CommLinkPortMapType& accessor) {
  enableLinkPortMap();
  if (&accessor != linkPortMap_Accessor.get()) {
    linkPortMap_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLinkStatisticsType::hasLinkPortMap() const noexcept {
  return static_cast<bool>(linkPortMap_Accessor);
}

uci::type::CommLinkPortMapType& GatewayLinkStatisticsType::enableLinkPortMap(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLinkPortMapType : type};
  if ((!linkPortMap_Accessor) || (linkPortMap_Accessor->getAccessorType() != requestedType)) {
    linkPortMap_Accessor = CommLinkPortMapType::create(requestedType);
    if (!linkPortMap_Accessor) {
      throw uci::base::UCIException("Error in enableLinkPortMap(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *linkPortMap_Accessor;
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::clearLinkPortMap() noexcept {
  linkPortMap_Accessor.reset();
  return *this;
}

uci::type::GatewayNativeStatisticsPET& GatewayLinkStatisticsType::getDataLinkNativeStatistics_() const {
  if (dataLinkNativeStatistics_Accessor) {
    return *dataLinkNativeStatistics_Accessor;
  }
  throw uci::base::UCIException("Error in getDataLinkNativeStatistics(): An attempt was made to get an optional field that was not enabled, call hasDataLinkNativeStatistics() to determine if it is safe to call getDataLinkNativeStatistics()");
}

const uci::type::GatewayNativeStatisticsPET& GatewayLinkStatisticsType::getDataLinkNativeStatistics() const {
  return getDataLinkNativeStatistics_();
}

uci::type::GatewayNativeStatisticsPET& GatewayLinkStatisticsType::getDataLinkNativeStatistics() {
  return getDataLinkNativeStatistics_();
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::setDataLinkNativeStatistics(const uci::type::GatewayNativeStatisticsPET& accessor) {
  enableDataLinkNativeStatistics(accessor.getAccessorType());
  if (&accessor != dataLinkNativeStatistics_Accessor.get()) {
    dataLinkNativeStatistics_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool GatewayLinkStatisticsType::hasDataLinkNativeStatistics() const noexcept {
  return static_cast<bool>(dataLinkNativeStatistics_Accessor);
}

uci::type::GatewayNativeStatisticsPET& GatewayLinkStatisticsType::enableDataLinkNativeStatistics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayNativeStatisticsPET : type};
  if ((!dataLinkNativeStatistics_Accessor) || (dataLinkNativeStatistics_Accessor->getAccessorType() != requestedType)) {
    dataLinkNativeStatistics_Accessor = GatewayNativeStatisticsPET::create(requestedType);
    if (!dataLinkNativeStatistics_Accessor) {
      throw uci::base::UCIException("Error in enableDataLinkNativeStatistics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dataLinkNativeStatistics_Accessor;
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::clearDataLinkNativeStatistics() noexcept {
  dataLinkNativeStatistics_Accessor.reset();
  return *this;
}

std::unique_ptr<GatewayLinkStatisticsType> GatewayLinkStatisticsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLinkStatisticsType : type};
  return (requestedType == uci::type::accessorType::gatewayLinkStatisticsType) ? boost::make_unique<GatewayLinkStatisticsType>() : nullptr;
}

/**  */
namespace GatewayLinkStatisticsType_Names {

constexpr const char* Extern_Type_Name{"GatewayLinkStatisticsType"};
constexpr const char* NetworkLinkID_Name{"NetworkLinkID"};
constexpr const char* GatewayRxUtilization_Name{"GatewayRxUtilization"};
constexpr const char* GatewayTxUtilization_Name{"GatewayTxUtilization"};
constexpr const char* RxDataErrorRate_Name{"RxDataErrorRate"};
constexpr const char* RxDataRate_Name{"RxDataRate"};
constexpr const char* RxMessageErrorRate_Name{"RxMessageErrorRate"};
constexpr const char* RxMessageRate_Name{"RxMessageRate"};
constexpr const char* TxDataErrorRate_Name{"TxDataErrorRate"};
constexpr const char* TxDataRate_Name{"TxDataRate"};
constexpr const char* TxMessageErrorRate_Name{"TxMessageErrorRate"};
constexpr const char* TxMessageRate_Name{"TxMessageRate"};
constexpr const char* LinkPortMap_Name{"LinkPortMap"};
constexpr const char* DataLinkNativeStatistics_Name{"DataLinkNativeStatistics"};

} // namespace GatewayLinkStatisticsType_Names

void GatewayLinkStatisticsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::GatewayLinkStatisticsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = GatewayLinkStatisticsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + GatewayLinkStatisticsType_Names::NetworkLinkID_Name) {
      NetworkLinkID_Type::deserialize(valueType.second, accessor.enableNetworkLinkID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLinkStatisticsType_Names::GatewayRxUtilization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGatewayRxUtilization(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLinkStatisticsType_Names::GatewayTxUtilization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGatewayTxUtilization(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLinkStatisticsType_Names::RxDataErrorRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRxDataErrorRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLinkStatisticsType_Names::RxDataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRxDataRate(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLinkStatisticsType_Names::RxMessageErrorRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRxMessageErrorRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLinkStatisticsType_Names::RxMessageRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRxMessageRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLinkStatisticsType_Names::TxDataErrorRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTxDataErrorRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLinkStatisticsType_Names::TxDataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTxDataRate(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLinkStatisticsType_Names::TxMessageErrorRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTxMessageErrorRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLinkStatisticsType_Names::TxMessageRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTxMessageRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLinkStatisticsType_Names::LinkPortMap_Name) {
      CommLinkPortMapType::deserialize(valueType.second, accessor.enableLinkPortMap(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLinkStatisticsType_Names::DataLinkNativeStatistics_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDataLinkNativeStatistics(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string GatewayLinkStatisticsType::serialize(const uci::type::GatewayLinkStatisticsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? GatewayLinkStatisticsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, GatewayLinkStatisticsType_Names::Extern_Type_Name);
  }
  if (accessor.hasNetworkLinkID()) {
    NetworkLinkID_Type::serialize(accessor.getNetworkLinkID(), node, GatewayLinkStatisticsType_Names::NetworkLinkID_Name);
  }
  if (accessor.hasGatewayRxUtilization()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getGatewayRxUtilization(), node, GatewayLinkStatisticsType_Names::GatewayRxUtilization_Name);
  }
  if (accessor.hasGatewayTxUtilization()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getGatewayTxUtilization(), node, GatewayLinkStatisticsType_Names::GatewayTxUtilization_Name);
  }
  if (accessor.hasRxDataErrorRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRxDataErrorRate(), node, GatewayLinkStatisticsType_Names::RxDataErrorRate_Name);
  }
  if (accessor.hasRxDataRate()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getRxDataRate(), node, GatewayLinkStatisticsType_Names::RxDataRate_Name);
  }
  if (accessor.hasRxMessageErrorRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRxMessageErrorRate(), node, GatewayLinkStatisticsType_Names::RxMessageErrorRate_Name);
  }
  if (accessor.hasRxMessageRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRxMessageRate(), node, GatewayLinkStatisticsType_Names::RxMessageRate_Name);
  }
  if (accessor.hasTxDataErrorRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTxDataErrorRate(), node, GatewayLinkStatisticsType_Names::TxDataErrorRate_Name);
  }
  if (accessor.hasTxDataRate()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getTxDataRate(), node, GatewayLinkStatisticsType_Names::TxDataRate_Name);
  }
  if (accessor.hasTxMessageErrorRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTxMessageErrorRate(), node, GatewayLinkStatisticsType_Names::TxMessageErrorRate_Name);
  }
  if (accessor.hasTxMessageRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTxMessageRate(), node, GatewayLinkStatisticsType_Names::TxMessageRate_Name);
  }
  if (accessor.hasLinkPortMap()) {
    CommLinkPortMapType::serialize(accessor.getLinkPortMap(), node, GatewayLinkStatisticsType_Names::LinkPortMap_Name);
  }
  if (accessor.hasDataLinkNativeStatistics()) {
    GatewayNativeStatisticsPET::serialize(accessor.getDataLinkNativeStatistics(), node, GatewayLinkStatisticsType_Names::DataLinkNativeStatistics_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::GatewayLinkStatisticsType>().release());
}

uci::type::GatewayLinkStatisticsType& GatewayLinkStatisticsType::create(const uci::type::GatewayLinkStatisticsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::GatewayLinkStatisticsType> newAccessor{boost::make_unique<asb_uci::type::GatewayLinkStatisticsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void GatewayLinkStatisticsType::destroy(uci::type::GatewayLinkStatisticsType& accessor) {
  delete dynamic_cast<asb_uci::type::GatewayLinkStatisticsType*>(&accessor);
}

} // namespace type

} // namespace uci

