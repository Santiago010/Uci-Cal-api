/** @file PeriodPerformanceFeedbackType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PeriodPerformanceFeedbackType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DurationType.h"
#include "uci/type/PercentType.h"
#include "uci/type/PeriodPerformanceFeedbackType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PeriodPerformanceFeedbackType::PeriodPerformanceFeedbackType() = default;

PeriodPerformanceFeedbackType::~PeriodPerformanceFeedbackType() = default;

void PeriodPerformanceFeedbackType::copy(const uci::type::PeriodPerformanceFeedbackType& accessor) {
  copyImpl(accessor, false);
}

void PeriodPerformanceFeedbackType::copyImpl(const uci::type::PeriodPerformanceFeedbackType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PeriodPerformanceFeedbackType&>(accessor);
    setAccessPeriodIndex(accessorImpl.accessPeriodIndex_Accessor);
    setPercentAccessAllocated(accessorImpl.percentAccessAllocated_Accessor);
    setPercentAccessRequested(accessorImpl.percentAccessRequested_Accessor);
    setPercentAccessAchieved(accessorImpl.percentAccessAchieved_Accessor);
    if (accessorImpl.hasUnusableGrantedTime()) {
      setUnusableGrantedTime(accessorImpl.getUnusableGrantedTime());
    } else {
      clearUnusableGrantedTime();
    }
    setPercentInterruption(accessorImpl.percentInterruption_Accessor);
    setLongestUninterruptedTime(accessorImpl.longestUninterruptedTime_Accessor);
  }
}

void PeriodPerformanceFeedbackType::reset() noexcept {
  accessPeriodIndex_Accessor = 0;
  percentAccessAllocated_Accessor = 0.0;
  percentAccessRequested_Accessor = 0.0;
  percentAccessAchieved_Accessor = 0.0;
  clearUnusableGrantedTime();
  percentInterruption_Accessor = 0.0;
  longestUninterruptedTime_Accessor = 0;
}

xs::UnsignedInt PeriodPerformanceFeedbackType::getAccessPeriodIndex() const {
  return accessPeriodIndex_Accessor;
}

uci::type::PeriodPerformanceFeedbackType& PeriodPerformanceFeedbackType::setAccessPeriodIndex(xs::UnsignedInt value) {
  accessPeriodIndex_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue PeriodPerformanceFeedbackType::getPercentAccessAllocated() const {
  return percentAccessAllocated_Accessor;
}

uci::type::PeriodPerformanceFeedbackType& PeriodPerformanceFeedbackType::setPercentAccessAllocated(uci::type::PercentTypeValue value) {
  percentAccessAllocated_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue PeriodPerformanceFeedbackType::getPercentAccessRequested() const {
  return percentAccessRequested_Accessor;
}

uci::type::PeriodPerformanceFeedbackType& PeriodPerformanceFeedbackType::setPercentAccessRequested(uci::type::PercentTypeValue value) {
  percentAccessRequested_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue PeriodPerformanceFeedbackType::getPercentAccessAchieved() const {
  return percentAccessAchieved_Accessor;
}

uci::type::PeriodPerformanceFeedbackType& PeriodPerformanceFeedbackType::setPercentAccessAchieved(uci::type::PercentTypeValue value) {
  percentAccessAchieved_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue PeriodPerformanceFeedbackType::getUnusableGrantedTime() const {
  if (unusableGrantedTime_Accessor) {
    return *unusableGrantedTime_Accessor;
  }
  throw uci::base::UCIException("Error in getUnusableGrantedTime(): An attempt was made to get an optional field that was not enabled, call hasUnusableGrantedTime() to determine if it is safe to call getUnusableGrantedTime()");
}

uci::type::PeriodPerformanceFeedbackType& PeriodPerformanceFeedbackType::setUnusableGrantedTime(uci::type::PercentTypeValue value) {
  unusableGrantedTime_Accessor = value;
  return *this;
}

bool PeriodPerformanceFeedbackType::hasUnusableGrantedTime() const noexcept {
  return unusableGrantedTime_Accessor.has_value();
}

uci::type::PeriodPerformanceFeedbackType& PeriodPerformanceFeedbackType::clearUnusableGrantedTime() noexcept {
  unusableGrantedTime_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue PeriodPerformanceFeedbackType::getPercentInterruption() const {
  return percentInterruption_Accessor;
}

uci::type::PeriodPerformanceFeedbackType& PeriodPerformanceFeedbackType::setPercentInterruption(uci::type::PercentTypeValue value) {
  percentInterruption_Accessor = value;
  return *this;
}


uci::type::DurationTypeValue PeriodPerformanceFeedbackType::getLongestUninterruptedTime() const {
  return longestUninterruptedTime_Accessor;
}

uci::type::PeriodPerformanceFeedbackType& PeriodPerformanceFeedbackType::setLongestUninterruptedTime(uci::type::DurationTypeValue value) {
  longestUninterruptedTime_Accessor = value;
  return *this;
}


std::unique_ptr<PeriodPerformanceFeedbackType> PeriodPerformanceFeedbackType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::periodPerformanceFeedbackType : type};
  return (requestedType == uci::type::accessorType::periodPerformanceFeedbackType) ? boost::make_unique<PeriodPerformanceFeedbackType>() : nullptr;
}

/**  */
namespace PeriodPerformanceFeedbackType_Names {

constexpr const char* Extern_Type_Name{"PeriodPerformanceFeedbackType"};
constexpr const char* AccessPeriodIndex_Name{"AccessPeriodIndex"};
constexpr const char* PercentAccessAllocated_Name{"PercentAccessAllocated"};
constexpr const char* PercentAccessRequested_Name{"PercentAccessRequested"};
constexpr const char* PercentAccessAchieved_Name{"PercentAccessAchieved"};
constexpr const char* UnusableGrantedTime_Name{"UnusableGrantedTime"};
constexpr const char* PercentInterruption_Name{"PercentInterruption"};
constexpr const char* LongestUninterruptedTime_Name{"LongestUninterruptedTime"};

} // namespace PeriodPerformanceFeedbackType_Names

void PeriodPerformanceFeedbackType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PeriodPerformanceFeedbackType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PeriodPerformanceFeedbackType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PeriodPerformanceFeedbackType_Names::AccessPeriodIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAccessPeriodIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PeriodPerformanceFeedbackType_Names::PercentAccessAllocated_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentAccessAllocated(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PeriodPerformanceFeedbackType_Names::PercentAccessRequested_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentAccessRequested(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PeriodPerformanceFeedbackType_Names::PercentAccessAchieved_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentAccessAchieved(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PeriodPerformanceFeedbackType_Names::UnusableGrantedTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnusableGrantedTime(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PeriodPerformanceFeedbackType_Names::PercentInterruption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentInterruption(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PeriodPerformanceFeedbackType_Names::LongestUninterruptedTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLongestUninterruptedTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string PeriodPerformanceFeedbackType::serialize(const uci::type::PeriodPerformanceFeedbackType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PeriodPerformanceFeedbackType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PeriodPerformanceFeedbackType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAccessPeriodIndex(), node, PeriodPerformanceFeedbackType_Names::AccessPeriodIndex_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentAccessAllocated(), node, PeriodPerformanceFeedbackType_Names::PercentAccessAllocated_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentAccessRequested(), node, PeriodPerformanceFeedbackType_Names::PercentAccessRequested_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentAccessAchieved(), node, PeriodPerformanceFeedbackType_Names::PercentAccessAchieved_Name);
  if (accessor.hasUnusableGrantedTime()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getUnusableGrantedTime(), node, PeriodPerformanceFeedbackType_Names::UnusableGrantedTime_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentInterruption(), node, PeriodPerformanceFeedbackType_Names::PercentInterruption_Name);
  asb_uci::util::SerializationHelpers::serializeDuration(accessor.getLongestUninterruptedTime(), node, PeriodPerformanceFeedbackType_Names::LongestUninterruptedTime_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PeriodPerformanceFeedbackType& PeriodPerformanceFeedbackType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PeriodPerformanceFeedbackType>().release());
}

uci::type::PeriodPerformanceFeedbackType& PeriodPerformanceFeedbackType::create(const uci::type::PeriodPerformanceFeedbackType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PeriodPerformanceFeedbackType> newAccessor{boost::make_unique<asb_uci::type::PeriodPerformanceFeedbackType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PeriodPerformanceFeedbackType::destroy(uci::type::PeriodPerformanceFeedbackType& accessor) {
  delete dynamic_cast<asb_uci::type::PeriodPerformanceFeedbackType*>(&accessor);
}

} // namespace type

} // namespace uci

