/** @file CommTerminalPlanEffectivityActivationStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommTerminalPlanEffectivityActivationStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CannotComplyType.h"
#include "../../../include/asb_uci/type/CommEffectivityID_Type.h"
#include "../../../include/asb_uci/type/CommandStateEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CannotComplyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommEffectivityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommTerminalPlanEffectivityActivationStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommandStateEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommTerminalPlanEffectivityActivationStatusType::CommTerminalPlanEffectivityActivationStatusType()
  : stateReason_Accessor{boost::make_unique<CannotComplyType>()},
    state_Accessor{boost::make_unique<CommandStateEnum>()},
    effectivityID_Accessor{boost::make_unique<CommEffectivityID_Type>()} {
}

CommTerminalPlanEffectivityActivationStatusType::~CommTerminalPlanEffectivityActivationStatusType() = default;

void CommTerminalPlanEffectivityActivationStatusType::copy(const uci::type::CommTerminalPlanEffectivityActivationStatusType& accessor) {
  copyImpl(accessor, false);
}

void CommTerminalPlanEffectivityActivationStatusType::copyImpl(const uci::type::CommTerminalPlanEffectivityActivationStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommTerminalPlanEffectivityActivationStatusType&>(accessor);
    setStateReason(*(accessorImpl.stateReason_Accessor));
    setState(*(accessorImpl.state_Accessor));
    setEffectivityID(*(accessorImpl.effectivityID_Accessor));
  }
}

void CommTerminalPlanEffectivityActivationStatusType::reset() noexcept {
  if (stateReason_Accessor->getAccessorType() != uci::type::accessorType::cannotComplyType) {
    stateReason_Accessor = boost::make_unique<CannotComplyType>();
  } else {
    stateReason_Accessor->reset();
  }
  state_Accessor->reset();
  effectivityID_Accessor->reset();
}

const uci::type::CannotComplyType& CommTerminalPlanEffectivityActivationStatusType::getStateReason() const {
  return *stateReason_Accessor;
}

uci::type::CannotComplyType& CommTerminalPlanEffectivityActivationStatusType::getStateReason() {
  return *stateReason_Accessor;
}

uci::type::CommTerminalPlanEffectivityActivationStatusType& CommTerminalPlanEffectivityActivationStatusType::setStateReason(const uci::type::CannotComplyType& accessor) {
  enableStateReason(accessor.getAccessorType());
  if (&accessor != stateReason_Accessor.get()) {
    stateReason_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::CannotComplyType& CommTerminalPlanEffectivityActivationStatusType::enableStateReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!stateReason_Accessor) || (stateReason_Accessor->getAccessorType() != requestedType)) {
    stateReason_Accessor = CannotComplyType::create(requestedType);
    if (!stateReason_Accessor) {
      throw uci::base::UCIException("Error in enableStateReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *stateReason_Accessor;
}

const uci::type::CommandStateEnum& CommTerminalPlanEffectivityActivationStatusType::getState() const {
  return *state_Accessor;
}

uci::type::CommandStateEnum& CommTerminalPlanEffectivityActivationStatusType::getState() {
  return *state_Accessor;
}

uci::type::CommTerminalPlanEffectivityActivationStatusType& CommTerminalPlanEffectivityActivationStatusType::setState(const uci::type::CommandStateEnum& accessor) {
  if (&accessor != state_Accessor.get()) {
    state_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommTerminalPlanEffectivityActivationStatusType& CommTerminalPlanEffectivityActivationStatusType::setState(uci::type::CommandStateEnum::EnumerationItem value) {
  state_Accessor->setValue(value);
  return *this;
}


const uci::type::CommEffectivityID_Type& CommTerminalPlanEffectivityActivationStatusType::getEffectivityID() const {
  return *effectivityID_Accessor;
}

uci::type::CommEffectivityID_Type& CommTerminalPlanEffectivityActivationStatusType::getEffectivityID() {
  return *effectivityID_Accessor;
}

uci::type::CommTerminalPlanEffectivityActivationStatusType& CommTerminalPlanEffectivityActivationStatusType::setEffectivityID(const uci::type::CommEffectivityID_Type& accessor) {
  if (&accessor != effectivityID_Accessor.get()) {
    effectivityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommTerminalPlanEffectivityActivationStatusType> CommTerminalPlanEffectivityActivationStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commTerminalPlanEffectivityActivationStatusType : type};
  return (requestedType == uci::type::accessorType::commTerminalPlanEffectivityActivationStatusType) ? boost::make_unique<CommTerminalPlanEffectivityActivationStatusType>() : nullptr;
}

/**  */
namespace CommTerminalPlanEffectivityActivationStatusType_Names {

constexpr const char* Extern_Type_Name{"CommTerminalPlanEffectivityActivationStatusType"};
constexpr const char* StateReason_Name{"StateReason"};
constexpr const char* State_Name{"State"};
constexpr const char* EffectivityID_Name{"EffectivityID"};

} // namespace CommTerminalPlanEffectivityActivationStatusType_Names

void CommTerminalPlanEffectivityActivationStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommTerminalPlanEffectivityActivationStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommTerminalPlanEffectivityActivationStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommTerminalPlanEffectivityActivationStatusType_Names::StateReason_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableStateReason(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalPlanEffectivityActivationStatusType_Names::State_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommTerminalPlanEffectivityActivationStatusType_Names::EffectivityID_Name) {
      CommEffectivityID_Type::deserialize(valueType.second, accessor.getEffectivityID(), nodeName, nsPrefix);
    }
  }
}

std::string CommTerminalPlanEffectivityActivationStatusType::serialize(const uci::type::CommTerminalPlanEffectivityActivationStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommTerminalPlanEffectivityActivationStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommTerminalPlanEffectivityActivationStatusType_Names::Extern_Type_Name);
  }
  CannotComplyType::serialize(accessor.getStateReason(), node, CommTerminalPlanEffectivityActivationStatusType_Names::StateReason_Name);
  CommandStateEnum::serialize(accessor.getState(), node, CommTerminalPlanEffectivityActivationStatusType_Names::State_Name, false);
  CommEffectivityID_Type::serialize(accessor.getEffectivityID(), node, CommTerminalPlanEffectivityActivationStatusType_Names::EffectivityID_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommTerminalPlanEffectivityActivationStatusType& CommTerminalPlanEffectivityActivationStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommTerminalPlanEffectivityActivationStatusType>().release());
}

uci::type::CommTerminalPlanEffectivityActivationStatusType& CommTerminalPlanEffectivityActivationStatusType::create(const uci::type::CommTerminalPlanEffectivityActivationStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommTerminalPlanEffectivityActivationStatusType> newAccessor{boost::make_unique<asb_uci::type::CommTerminalPlanEffectivityActivationStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommTerminalPlanEffectivityActivationStatusType::destroy(uci::type::CommTerminalPlanEffectivityActivationStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::CommTerminalPlanEffectivityActivationStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

