/** @file TimeAndPolarDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/TimeAndPolarDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PolarMotionType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PolarMotionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TimeAndPolarDataType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TimeAndPolarDataType::TimeAndPolarDataType()
  : polarMotion_Accessor{boost::make_unique<PolarMotionType>()} {
}

TimeAndPolarDataType::~TimeAndPolarDataType() = default;

void TimeAndPolarDataType::copy(const uci::type::TimeAndPolarDataType& accessor) {
  copyImpl(accessor, false);
}

void TimeAndPolarDataType::copyImpl(const uci::type::TimeAndPolarDataType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::timeAndPolarDataType)) {
      const auto& accessorImpl = dynamic_cast<const TimeAndPolarDataType&>(accessor);
      setTAI_UTC_Difference(accessorImpl.tAI_UTC_Difference_Accessor);
      setUT1_UTC_Difference(accessorImpl.uT1_UTC_Difference_Accessor);
      setUT1_Rate(accessorImpl.uT1_Rate_Accessor);
      setPolarMotion(*(accessorImpl.polarMotion_Accessor));
      setNutationModelTerms(accessorImpl.nutationModelTerms_Accessor);
      if (accessorImpl.hasNextLeapSecond()) {
        setNextLeapSecond(accessorImpl.getNextLeapSecond());
      } else {
        clearNextLeapSecond();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void TimeAndPolarDataType::reset() noexcept {
  tAI_UTC_Difference_Accessor = 0;
  uT1_UTC_Difference_Accessor = 0.0;
  uT1_Rate_Accessor = 0.0;
  polarMotion_Accessor->reset();
  nutationModelTerms_Accessor = 0;
  clearNextLeapSecond();
}

xs::Int TimeAndPolarDataType::getTAI_UTC_Difference() const {
  return tAI_UTC_Difference_Accessor;
}

uci::type::TimeAndPolarDataType& TimeAndPolarDataType::setTAI_UTC_Difference(xs::Int value) {
  tAI_UTC_Difference_Accessor = value;
  return *this;
}


xs::Double TimeAndPolarDataType::getUT1_UTC_Difference() const {
  return uT1_UTC_Difference_Accessor;
}

uci::type::TimeAndPolarDataType& TimeAndPolarDataType::setUT1_UTC_Difference(xs::Double value) {
  uT1_UTC_Difference_Accessor = value;
  return *this;
}


xs::Double TimeAndPolarDataType::getUT1_Rate() const {
  return uT1_Rate_Accessor;
}

uci::type::TimeAndPolarDataType& TimeAndPolarDataType::setUT1_Rate(xs::Double value) {
  uT1_Rate_Accessor = value;
  return *this;
}


const uci::type::PolarMotionType& TimeAndPolarDataType::getPolarMotion() const {
  return *polarMotion_Accessor;
}

uci::type::PolarMotionType& TimeAndPolarDataType::getPolarMotion() {
  return *polarMotion_Accessor;
}

uci::type::TimeAndPolarDataType& TimeAndPolarDataType::setPolarMotion(const uci::type::PolarMotionType& accessor) {
  if (&accessor != polarMotion_Accessor.get()) {
    polarMotion_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Int TimeAndPolarDataType::getNutationModelTerms() const {
  return nutationModelTerms_Accessor;
}

uci::type::TimeAndPolarDataType& TimeAndPolarDataType::setNutationModelTerms(xs::Int value) {
  nutationModelTerms_Accessor = value;
  return *this;
}


uci::type::DateTimeTypeValue TimeAndPolarDataType::getNextLeapSecond() const {
  if (nextLeapSecond_Accessor) {
    return *nextLeapSecond_Accessor;
  }
  throw uci::base::UCIException("Error in getNextLeapSecond(): An attempt was made to get an optional field that was not enabled, call hasNextLeapSecond() to determine if it is safe to call getNextLeapSecond()");
}

uci::type::TimeAndPolarDataType& TimeAndPolarDataType::setNextLeapSecond(uci::type::DateTimeTypeValue value) {
  nextLeapSecond_Accessor = value;
  return *this;
}

bool TimeAndPolarDataType::hasNextLeapSecond() const noexcept {
  return nextLeapSecond_Accessor.has_value();
}

uci::type::TimeAndPolarDataType& TimeAndPolarDataType::clearNextLeapSecond() noexcept {
  nextLeapSecond_Accessor.reset();
  return *this;
}

std::unique_ptr<TimeAndPolarDataType> TimeAndPolarDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::timeAndPolarDataType : type};
  return std::unique_ptr<TimeAndPolarDataType>(dynamic_cast<TimeAndPolarDataType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace TimeAndPolarDataType_Names {

constexpr const char* Extern_Type_Name{"TimeAndPolarDataType"};
constexpr const char* TAI_UTC_Difference_Name{"TAI_UTC_Difference"};
constexpr const char* UT1_UTC_Difference_Name{"UT1_UTC_Difference"};
constexpr const char* UT1_Rate_Name{"UT1_Rate"};
constexpr const char* PolarMotion_Name{"PolarMotion"};
constexpr const char* NutationModelTerms_Name{"NutationModelTerms"};
constexpr const char* NextLeapSecond_Name{"NextLeapSecond"};

} // namespace TimeAndPolarDataType_Names

void TimeAndPolarDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TimeAndPolarDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TimeAndPolarDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TimeAndPolarDataType_Names::TAI_UTC_Difference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTAI_UTC_Difference(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + TimeAndPolarDataType_Names::UT1_UTC_Difference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUT1_UTC_Difference(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TimeAndPolarDataType_Names::UT1_Rate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUT1_Rate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TimeAndPolarDataType_Names::PolarMotion_Name) {
      PolarMotionType::deserialize(valueType.second, accessor.getPolarMotion(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TimeAndPolarDataType_Names::NutationModelTerms_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNutationModelTerms(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + TimeAndPolarDataType_Names::NextLeapSecond_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNextLeapSecond(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    }
  }
}

std::string TimeAndPolarDataType::serialize(const uci::type::TimeAndPolarDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TimeAndPolarDataType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::timeAndPolarDataType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, TimeAndPolarDataType_Names::Extern_Type_Name);
    }
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getTAI_UTC_Difference(), node, TimeAndPolarDataType_Names::TAI_UTC_Difference_Name);
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getUT1_UTC_Difference(), node, TimeAndPolarDataType_Names::UT1_UTC_Difference_Name);
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getUT1_Rate(), node, TimeAndPolarDataType_Names::UT1_Rate_Name);
    PolarMotionType::serialize(accessor.getPolarMotion(), node, TimeAndPolarDataType_Names::PolarMotion_Name);
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getNutationModelTerms(), node, TimeAndPolarDataType_Names::NutationModelTerms_Name);
    if (accessor.hasNextLeapSecond()) {
      asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getNextLeapSecond(), node, TimeAndPolarDataType_Names::NextLeapSecond_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TimeAndPolarDataType& TimeAndPolarDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TimeAndPolarDataType>().release());
}

uci::type::TimeAndPolarDataType& TimeAndPolarDataType::create(const uci::type::TimeAndPolarDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TimeAndPolarDataType> newAccessor{boost::make_unique<asb_uci::type::TimeAndPolarDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TimeAndPolarDataType::destroy(uci::type::TimeAndPolarDataType& accessor) {
  delete dynamic_cast<asb_uci::type::TimeAndPolarDataType*>(&accessor);
}

} // namespace type

} // namespace uci

