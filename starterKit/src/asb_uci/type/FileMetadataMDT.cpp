/** @file FileMetadataMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/FileMetadataMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CreationSourceEnum.h"
#include "asb_uci/type/DataRecordBaseType.h"
#include "asb_uci/type/FileMetadataID_Type.h"
#include "asb_uci/type/FileNameType.h"
#include "asb_uci/type/FileOutputType.h"
#include "asb_uci/type/SecurityInformationType.h"
#include "asb_uci/type/SourceFiltersType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CreationSourceEnum.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/FileMetadataID_Type.h"
#include "uci/type/FileMetadataMDT.h"
#include "uci/type/FileNameType.h"
#include "uci/type/FileOutputType.h"
#include "uci/type/SecurityInformationType.h"
#include "uci/type/SourceFiltersType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FileMetadataMDT::FileMetadataMDT()
  : fileMetadataID_Accessor{boost::make_unique<FileMetadataID_Type>()},
    fileDescription_Accessor{boost::make_unique<FileOutputType>()},
    fileName_Accessor{boost::make_unique<FileNameType>()},
    fileSource_Accessor{boost::make_unique<SourceFiltersType>()},
    creationSource_Accessor{boost::make_unique<CreationSourceEnum>()},
    securityInformation_Accessor{boost::make_unique<SecurityInformationType>()},
    associatedID_Accessor{boost::make_unique<AssociatedID>(0, SIZE_MAX)} {
}

FileMetadataMDT::~FileMetadataMDT() = default;

void FileMetadataMDT::copy(const uci::type::FileMetadataMDT& accessor) {
  copyImpl(accessor, false);
}

void FileMetadataMDT::copyImpl(const uci::type::FileMetadataMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const FileMetadataMDT&>(accessor);
    setFileMetadataID(*(accessorImpl.fileMetadataID_Accessor));
    setFileDescription(*(accessorImpl.fileDescription_Accessor));
    setFileName(*(accessorImpl.fileName_Accessor));
    setFileSource(*(accessorImpl.fileSource_Accessor));
    if (accessorImpl.fileConsumer_Accessor) {
      setFileConsumer(*(accessorImpl.fileConsumer_Accessor));
    } else {
      fileConsumer_Accessor.reset();
    }
    setCreationSource(*(accessorImpl.creationSource_Accessor));
    setUntrustedModification(accessorImpl.untrustedModification_Accessor);
    setTimestamp(accessorImpl.timestamp_Accessor);
    setSecurityInformation(*(accessorImpl.securityInformation_Accessor));
    sHA_2_Hash_Accessor = (accessorImpl.sHA_2_Hash_Accessor ? boost::make_unique<SHA_2_256_HashType>(*(accessorImpl.sHA_2_Hash_Accessor)) : nullptr);
    setAssociatedID(*(accessorImpl.associatedID_Accessor));
  }
}

void FileMetadataMDT::reset() noexcept {
  DataRecordBaseType::reset();
  fileMetadataID_Accessor->reset();
  fileDescription_Accessor->reset();
  fileName_Accessor->reset();
  fileSource_Accessor->reset();
  fileConsumer_Accessor.reset();
  creationSource_Accessor->reset();
  untrustedModification_Accessor = false;
  timestamp_Accessor = 0;
  securityInformation_Accessor->reset();
  sHA_2_Hash_Accessor.reset();
  associatedID_Accessor->reset();
}

const uci::type::FileMetadataID_Type& FileMetadataMDT::getFileMetadataID() const {
  return *fileMetadataID_Accessor;
}

uci::type::FileMetadataID_Type& FileMetadataMDT::getFileMetadataID() {
  return *fileMetadataID_Accessor;
}

uci::type::FileMetadataMDT& FileMetadataMDT::setFileMetadataID(const uci::type::FileMetadataID_Type& accessor) {
  if (&accessor != fileMetadataID_Accessor.get()) {
    fileMetadataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::FileOutputType& FileMetadataMDT::getFileDescription() const {
  return *fileDescription_Accessor;
}

uci::type::FileOutputType& FileMetadataMDT::getFileDescription() {
  return *fileDescription_Accessor;
}

uci::type::FileMetadataMDT& FileMetadataMDT::setFileDescription(const uci::type::FileOutputType& accessor) {
  if (&accessor != fileDescription_Accessor.get()) {
    fileDescription_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::FileNameType& FileMetadataMDT::getFileName() const noexcept {
  return *fileName_Accessor;
}

uci::type::FileNameType& FileMetadataMDT::getFileName() noexcept {
  return *fileName_Accessor;
}

uci::type::FileMetadataMDT& FileMetadataMDT::setFileName(const uci::type::FileNameType& value) {
  return setFileName(value.c_str());
}

uci::type::FileMetadataMDT& FileMetadataMDT::setFileName(const std::string& value) {
  return setFileName(value.c_str());
}

uci::type::FileMetadataMDT& FileMetadataMDT::setFileName(const char* value) {
  fileName_Accessor->setStringValue(value);
  return *this;
}

const uci::type::SourceFiltersType& FileMetadataMDT::getFileSource() const {
  return *fileSource_Accessor;
}

uci::type::SourceFiltersType& FileMetadataMDT::getFileSource() {
  return *fileSource_Accessor;
}

uci::type::FileMetadataMDT& FileMetadataMDT::setFileSource(const uci::type::SourceFiltersType& accessor) {
  if (&accessor != fileSource_Accessor.get()) {
    fileSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SourceFiltersType& FileMetadataMDT::getFileConsumer_() const {
  if (fileConsumer_Accessor) {
    return *fileConsumer_Accessor;
  }
  throw uci::base::UCIException("Error in getFileConsumer(): An attempt was made to get an optional field that was not enabled, call hasFileConsumer() to determine if it is safe to call getFileConsumer()");
}

const uci::type::SourceFiltersType& FileMetadataMDT::getFileConsumer() const {
  return getFileConsumer_();
}

uci::type::SourceFiltersType& FileMetadataMDT::getFileConsumer() {
  return getFileConsumer_();
}

uci::type::FileMetadataMDT& FileMetadataMDT::setFileConsumer(const uci::type::SourceFiltersType& accessor) {
  enableFileConsumer();
  if (&accessor != fileConsumer_Accessor.get()) {
    fileConsumer_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FileMetadataMDT::hasFileConsumer() const noexcept {
  return static_cast<bool>(fileConsumer_Accessor);
}

uci::type::SourceFiltersType& FileMetadataMDT::enableFileConsumer(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceFiltersType : type};
  if ((!fileConsumer_Accessor) || (fileConsumer_Accessor->getAccessorType() != requestedType)) {
    fileConsumer_Accessor = SourceFiltersType::create(requestedType);
    if (!fileConsumer_Accessor) {
      throw uci::base::UCIException("Error in enableFileConsumer(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fileConsumer_Accessor;
}

uci::type::FileMetadataMDT& FileMetadataMDT::clearFileConsumer() noexcept {
  fileConsumer_Accessor.reset();
  return *this;
}

const uci::type::CreationSourceEnum& FileMetadataMDT::getCreationSource() const {
  return *creationSource_Accessor;
}

uci::type::CreationSourceEnum& FileMetadataMDT::getCreationSource() {
  return *creationSource_Accessor;
}

uci::type::FileMetadataMDT& FileMetadataMDT::setCreationSource(const uci::type::CreationSourceEnum& accessor) {
  if (&accessor != creationSource_Accessor.get()) {
    creationSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FileMetadataMDT& FileMetadataMDT::setCreationSource(uci::type::CreationSourceEnum::EnumerationItem value) {
  creationSource_Accessor->setValue(value);
  return *this;
}


xs::Boolean FileMetadataMDT::getUntrustedModification() const {
  return untrustedModification_Accessor;
}

uci::type::FileMetadataMDT& FileMetadataMDT::setUntrustedModification(xs::Boolean value) {
  untrustedModification_Accessor = value;
  return *this;
}


uci::type::DateTimeTypeValue FileMetadataMDT::getTimestamp() const {
  return timestamp_Accessor;
}

uci::type::FileMetadataMDT& FileMetadataMDT::setTimestamp(uci::type::DateTimeTypeValue value) {
  timestamp_Accessor = value;
  return *this;
}


const uci::type::SecurityInformationType& FileMetadataMDT::getSecurityInformation() const {
  return *securityInformation_Accessor;
}

uci::type::SecurityInformationType& FileMetadataMDT::getSecurityInformation() {
  return *securityInformation_Accessor;
}

uci::type::FileMetadataMDT& FileMetadataMDT::setSecurityInformation(const uci::type::SecurityInformationType& accessor) {
  if (&accessor != securityInformation_Accessor.get()) {
    securityInformation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SHA_2_256_HashType& FileMetadataMDT::getSHA_2_Hash_() const {
  if (sHA_2_Hash_Accessor) {
    return *sHA_2_Hash_Accessor;
  }
  throw uci::base::UCIException("Error in getSHA_2_Hash(): An attempt was made to get an optional field that was not enabled, call hasSHA_2_Hash() to determine if it is safe to call getSHA_2_Hash()");
}

const uci::type::SHA_2_256_HashType& FileMetadataMDT::getSHA_2_Hash() const {
  return getSHA_2_Hash_();
}

uci::type::SHA_2_256_HashType& FileMetadataMDT::getSHA_2_Hash() {
  return getSHA_2_Hash_();
}

uci::type::FileMetadataMDT& FileMetadataMDT::setSHA_2_Hash(const uci::type::SHA_2_256_HashType& value) {
  sHA_2_Hash_Accessor = boost::make_unique<SHA_2_256_HashType>(dynamic_cast<const SHA_2_256_HashType&>(value));
  return *this;
}

bool FileMetadataMDT::hasSHA_2_Hash() const noexcept {
  return static_cast<bool>(sHA_2_Hash_Accessor);
}

uci::type::SHA_2_256_HashType& FileMetadataMDT::enableSHA_2_Hash() {
  if (!sHA_2_Hash_Accessor) {
    sHA_2_Hash_Accessor = boost::make_unique<SHA_2_256_HashType>();
  }
  return *sHA_2_Hash_Accessor;
}

uci::type::FileMetadataMDT& FileMetadataMDT::clearSHA_2_Hash() noexcept {
  sHA_2_Hash_Accessor.reset();
  return *this;
}

const uci::type::FileMetadataMDT::AssociatedID& FileMetadataMDT::getAssociatedID() const {
  return *associatedID_Accessor;
}

uci::type::FileMetadataMDT::AssociatedID& FileMetadataMDT::getAssociatedID() {
  return *associatedID_Accessor;
}

uci::type::FileMetadataMDT& FileMetadataMDT::setAssociatedID(const uci::type::FileMetadataMDT::AssociatedID& accessor) {
  if (&accessor != associatedID_Accessor.get()) {
    associatedID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<FileMetadataMDT> FileMetadataMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileMetadataMDT : type};
  return (requestedType == uci::type::accessorType::fileMetadataMDT) ? boost::make_unique<FileMetadataMDT>() : nullptr;
}

/**  */
namespace FileMetadataMDT_Names {

constexpr const char* Extern_Type_Name{"FileMetadataMDT"};
constexpr const char* FileMetadataID_Name{"FileMetadataID"};
constexpr const char* FileDescription_Name{"FileDescription"};
constexpr const char* FileName_Name{"FileName"};
constexpr const char* FileSource_Name{"FileSource"};
constexpr const char* FileConsumer_Name{"FileConsumer"};
constexpr const char* CreationSource_Name{"CreationSource"};
constexpr const char* UntrustedModification_Name{"UntrustedModification"};
constexpr const char* Timestamp_Name{"Timestamp"};
constexpr const char* SecurityInformation_Name{"SecurityInformation"};
constexpr const char* SHA_2_Hash_Name{"SHA_2_Hash"};
constexpr const char* AssociatedID_Name{"AssociatedID"};

} // namespace FileMetadataMDT_Names

void FileMetadataMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::FileMetadataMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FileMetadataMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::FileMetadataID_Name) {
      FileMetadataID_Type::deserialize(valueType.second, accessor.getFileMetadataID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::FileDescription_Name) {
      FileOutputType::deserialize(valueType.second, accessor.getFileDescription(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::FileName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileName(*value);
      }
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::FileSource_Name) {
      SourceFiltersType::deserialize(valueType.second, accessor.getFileSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::FileConsumer_Name) {
      SourceFiltersType::deserialize(valueType.second, accessor.enableFileConsumer(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::CreationSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCreationSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::UntrustedModification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUntrustedModification(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::SecurityInformation_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.getSecurityInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::SHA_2_Hash_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        asb_uci::util::SerializationHelpers::deserializeHexBinary(*value, accessor.enableSHA_2_Hash());
      }
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::AssociatedID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::FileMetadataMDT::AssociatedID& boundedList = accessor.getAssociatedID();
        const uci::type::FileMetadataMDT::AssociatedID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string FileMetadataMDT::serialize(const uci::type::FileMetadataMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FileMetadataMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FileMetadataMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  FileMetadataID_Type::serialize(accessor.getFileMetadataID(), node, FileMetadataMDT_Names::FileMetadataID_Name);
  FileOutputType::serialize(accessor.getFileDescription(), node, FileMetadataMDT_Names::FileDescription_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getFileName(), node, FileMetadataMDT_Names::FileName_Name);
  SourceFiltersType::serialize(accessor.getFileSource(), node, FileMetadataMDT_Names::FileSource_Name);
  if (accessor.hasFileConsumer()) {
    SourceFiltersType::serialize(accessor.getFileConsumer(), node, FileMetadataMDT_Names::FileConsumer_Name);
  }
  CreationSourceEnum::serialize(accessor.getCreationSource(), node, FileMetadataMDT_Names::CreationSource_Name, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getUntrustedModification(), node, FileMetadataMDT_Names::UntrustedModification_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, FileMetadataMDT_Names::Timestamp_Name);
  SecurityInformationType::serialize(accessor.getSecurityInformation(), node, FileMetadataMDT_Names::SecurityInformation_Name);
  if (accessor.hasSHA_2_Hash()) {
    asb_uci::util::SerializationHelpers::serializeHexBinary(accessor.getSHA_2_Hash(), node, FileMetadataMDT_Names::SHA_2_Hash_Name);
  }
  {
    const uci::type::FileMetadataMDT::AssociatedID& boundedList = accessor.getAssociatedID();
    for (uci::type::FileMetadataMDT::AssociatedID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, FileMetadataMDT_Names::AssociatedID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FileMetadataMDT& FileMetadataMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FileMetadataMDT>().release());
}

uci::type::FileMetadataMDT& FileMetadataMDT::create(const uci::type::FileMetadataMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FileMetadataMDT> newAccessor{boost::make_unique<asb_uci::type::FileMetadataMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FileMetadataMDT::destroy(uci::type::FileMetadataMDT& accessor) {
  delete dynamic_cast<asb_uci::type::FileMetadataMDT*>(&accessor);
}

} // namespace type

} // namespace uci

