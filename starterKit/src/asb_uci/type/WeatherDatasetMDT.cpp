/** @file WeatherDatasetMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/WeatherDatasetMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DataRecordBaseType.h"
#include "asb_uci/type/ScheduleType.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/type/WeatherDataType.h"
#include "asb_uci/type/WeatherDatasetID_Type.h"
#include "asb_uci/type/ZoneType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AltitudeType.h"
#include "uci/type/AnglePositiveType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/ScheduleType.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/WeatherDataType.h"
#include "uci/type/WeatherDatasetID_Type.h"
#include "uci/type/WeatherDatasetMDT.h"
#include "uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WeatherDatasetMDT::WeatherDatasetMDT()
  : weatherDatasetID_Accessor{boost::make_unique<WeatherDatasetID_Type>()},
    datasetArea_Accessor{boost::make_unique<ZoneType>()},
    weatherData_Accessor{boost::make_unique<WeatherData>(0, SIZE_MAX)},
    systemID_Accessor{boost::make_unique<SystemID>(0, SIZE_MAX)} {
}

WeatherDatasetMDT::~WeatherDatasetMDT() = default;

void WeatherDatasetMDT::copy(const uci::type::WeatherDatasetMDT& accessor) {
  copyImpl(accessor, false);
}

void WeatherDatasetMDT::copyImpl(const uci::type::WeatherDatasetMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const WeatherDatasetMDT&>(accessor);
    setWeatherDatasetID(*(accessorImpl.weatherDatasetID_Accessor));
    setCreated(accessorImpl.created_Accessor);
    setUpdated(accessorImpl.updated_Accessor);
    setDatasetArea(*(accessorImpl.datasetArea_Accessor));
    if (accessorImpl.hasDegreeStep()) {
      setDegreeStep(accessorImpl.getDegreeStep());
    } else {
      clearDegreeStep();
    }
    if (accessorImpl.hasAltitudeStep()) {
      setAltitudeStep(accessorImpl.getAltitudeStep());
    } else {
      clearAltitudeStep();
    }
    setWeatherData(*(accessorImpl.weatherData_Accessor));
    setSystemID(*(accessorImpl.systemID_Accessor));
    if (accessorImpl.schedule_Accessor) {
      setSchedule(*(accessorImpl.schedule_Accessor));
    } else {
      schedule_Accessor.reset();
    }
  }
}

void WeatherDatasetMDT::reset() noexcept {
  DataRecordBaseType::reset();
  weatherDatasetID_Accessor->reset();
  created_Accessor = 0;
  updated_Accessor = 0;
  if (datasetArea_Accessor->getAccessorType() != uci::type::accessorType::zoneType) {
    datasetArea_Accessor = boost::make_unique<ZoneType>();
  } else {
    datasetArea_Accessor->reset();
  }
  clearDegreeStep();
  clearAltitudeStep();
  weatherData_Accessor->reset();
  systemID_Accessor->reset();
  schedule_Accessor.reset();
}

const uci::type::WeatherDatasetID_Type& WeatherDatasetMDT::getWeatherDatasetID() const {
  return *weatherDatasetID_Accessor;
}

uci::type::WeatherDatasetID_Type& WeatherDatasetMDT::getWeatherDatasetID() {
  return *weatherDatasetID_Accessor;
}

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::setWeatherDatasetID(const uci::type::WeatherDatasetID_Type& accessor) {
  if (&accessor != weatherDatasetID_Accessor.get()) {
    weatherDatasetID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue WeatherDatasetMDT::getCreated() const {
  return created_Accessor;
}

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::setCreated(uci::type::DateTimeTypeValue value) {
  created_Accessor = value;
  return *this;
}


uci::type::DateTimeTypeValue WeatherDatasetMDT::getUpdated() const {
  return updated_Accessor;
}

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::setUpdated(uci::type::DateTimeTypeValue value) {
  updated_Accessor = value;
  return *this;
}


const uci::type::ZoneType& WeatherDatasetMDT::getDatasetArea() const {
  return *datasetArea_Accessor;
}

uci::type::ZoneType& WeatherDatasetMDT::getDatasetArea() {
  return *datasetArea_Accessor;
}

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::setDatasetArea(const uci::type::ZoneType& accessor) {
  enableDatasetArea(accessor.getAccessorType());
  if (&accessor != datasetArea_Accessor.get()) {
    datasetArea_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ZoneType& WeatherDatasetMDT::enableDatasetArea(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!datasetArea_Accessor) || (datasetArea_Accessor->getAccessorType() != requestedType)) {
    datasetArea_Accessor = ZoneType::create(requestedType);
    if (!datasetArea_Accessor) {
      throw uci::base::UCIException("Error in enableDatasetArea(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *datasetArea_Accessor;
}

uci::type::AnglePositiveTypeValue WeatherDatasetMDT::getDegreeStep() const {
  if (degreeStep_Accessor) {
    return *degreeStep_Accessor;
  }
  throw uci::base::UCIException("Error in getDegreeStep(): An attempt was made to get an optional field that was not enabled, call hasDegreeStep() to determine if it is safe to call getDegreeStep()");
}

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::setDegreeStep(uci::type::AnglePositiveTypeValue value) {
  degreeStep_Accessor = value;
  return *this;
}

bool WeatherDatasetMDT::hasDegreeStep() const noexcept {
  return degreeStep_Accessor.has_value();
}

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::clearDegreeStep() noexcept {
  degreeStep_Accessor.reset();
  return *this;
}

uci::type::AltitudeTypeValue WeatherDatasetMDT::getAltitudeStep() const {
  if (altitudeStep_Accessor) {
    return *altitudeStep_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeStep(): An attempt was made to get an optional field that was not enabled, call hasAltitudeStep() to determine if it is safe to call getAltitudeStep()");
}

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::setAltitudeStep(uci::type::AltitudeTypeValue value) {
  altitudeStep_Accessor = value;
  return *this;
}

bool WeatherDatasetMDT::hasAltitudeStep() const noexcept {
  return altitudeStep_Accessor.has_value();
}

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::clearAltitudeStep() noexcept {
  altitudeStep_Accessor.reset();
  return *this;
}

const uci::type::WeatherDatasetMDT::WeatherData& WeatherDatasetMDT::getWeatherData() const {
  return *weatherData_Accessor;
}

uci::type::WeatherDatasetMDT::WeatherData& WeatherDatasetMDT::getWeatherData() {
  return *weatherData_Accessor;
}

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::setWeatherData(const uci::type::WeatherDatasetMDT::WeatherData& accessor) {
  if (&accessor != weatherData_Accessor.get()) {
    weatherData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::WeatherDatasetMDT::SystemID& WeatherDatasetMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::WeatherDatasetMDT::SystemID& WeatherDatasetMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::setSystemID(const uci::type::WeatherDatasetMDT::SystemID& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ScheduleType& WeatherDatasetMDT::getSchedule_() const {
  if (schedule_Accessor) {
    return *schedule_Accessor;
  }
  throw uci::base::UCIException("Error in getSchedule(): An attempt was made to get an optional field that was not enabled, call hasSchedule() to determine if it is safe to call getSchedule()");
}

const uci::type::ScheduleType& WeatherDatasetMDT::getSchedule() const {
  return getSchedule_();
}

uci::type::ScheduleType& WeatherDatasetMDT::getSchedule() {
  return getSchedule_();
}

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::setSchedule(const uci::type::ScheduleType& accessor) {
  enableSchedule();
  if (&accessor != schedule_Accessor.get()) {
    schedule_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeatherDatasetMDT::hasSchedule() const noexcept {
  return static_cast<bool>(schedule_Accessor);
}

uci::type::ScheduleType& WeatherDatasetMDT::enableSchedule(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::scheduleType : type};
  if ((!schedule_Accessor) || (schedule_Accessor->getAccessorType() != requestedType)) {
    schedule_Accessor = ScheduleType::create(requestedType);
    if (!schedule_Accessor) {
      throw uci::base::UCIException("Error in enableSchedule(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *schedule_Accessor;
}

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::clearSchedule() noexcept {
  schedule_Accessor.reset();
  return *this;
}

std::unique_ptr<WeatherDatasetMDT> WeatherDatasetMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherDatasetMDT : type};
  return (requestedType == uci::type::accessorType::weatherDatasetMDT) ? boost::make_unique<WeatherDatasetMDT>() : nullptr;
}

/**  */
namespace WeatherDatasetMDT_Names {

constexpr const char* Extern_Type_Name{"WeatherDatasetMDT"};
constexpr const char* WeatherDatasetID_Name{"WeatherDatasetID"};
constexpr const char* Created_Name{"Created"};
constexpr const char* Updated_Name{"Updated"};
constexpr const char* DatasetArea_Name{"DatasetArea"};
constexpr const char* DegreeStep_Name{"DegreeStep"};
constexpr const char* AltitudeStep_Name{"AltitudeStep"};
constexpr const char* WeatherData_Name{"WeatherData"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* Schedule_Name{"Schedule"};

} // namespace WeatherDatasetMDT_Names

void WeatherDatasetMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherDatasetMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeatherDatasetMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::WeatherDatasetID_Name) {
      WeatherDatasetID_Type::deserialize(valueType.second, accessor.getWeatherDatasetID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::Created_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCreated(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::Updated_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUpdated(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::DatasetArea_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDatasetArea(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::DegreeStep_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDegreeStep(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::AltitudeStep_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAltitudeStep(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::WeatherData_Name) {
      uci::type::WeatherDatasetMDT::WeatherData& boundedList = accessor.getWeatherData();
      const uci::type::WeatherDatasetMDT::WeatherData::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::WeatherDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::SystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WeatherDatasetMDT::SystemID& boundedList = accessor.getSystemID();
        const uci::type::WeatherDatasetMDT::SystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::Schedule_Name) {
      ScheduleType::deserialize(valueType.second, accessor.enableSchedule(), nodeName, nsPrefix);
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string WeatherDatasetMDT::serialize(const uci::type::WeatherDatasetMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WeatherDatasetMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WeatherDatasetMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  WeatherDatasetID_Type::serialize(accessor.getWeatherDatasetID(), node, WeatherDatasetMDT_Names::WeatherDatasetID_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getCreated(), node, WeatherDatasetMDT_Names::Created_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getUpdated(), node, WeatherDatasetMDT_Names::Updated_Name);
  ZoneType::serialize(accessor.getDatasetArea(), node, WeatherDatasetMDT_Names::DatasetArea_Name);
  if (accessor.hasDegreeStep()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDegreeStep(), node, WeatherDatasetMDT_Names::DegreeStep_Name);
  }
  if (accessor.hasAltitudeStep()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAltitudeStep(), node, WeatherDatasetMDT_Names::AltitudeStep_Name);
  }
  {
    const uci::type::WeatherDatasetMDT::WeatherData& boundedList = accessor.getWeatherData();
    for (uci::type::WeatherDatasetMDT::WeatherData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::WeatherDataType::serialize(boundedList.at(i), node, WeatherDatasetMDT_Names::WeatherData_Name);
    }
  }
  {
    const uci::type::WeatherDatasetMDT::SystemID& boundedList = accessor.getSystemID();
    for (uci::type::WeatherDatasetMDT::SystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SystemID_Type::serialize(boundedList.at(i), node, WeatherDatasetMDT_Names::SystemID_Name);
    }
  }
  if (accessor.hasSchedule()) {
    ScheduleType::serialize(accessor.getSchedule(), node, WeatherDatasetMDT_Names::Schedule_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WeatherDatasetMDT>().release());
}

uci::type::WeatherDatasetMDT& WeatherDatasetMDT::create(const uci::type::WeatherDatasetMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WeatherDatasetMDT> newAccessor{boost::make_unique<asb_uci::type::WeatherDatasetMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WeatherDatasetMDT::destroy(uci::type::WeatherDatasetMDT& accessor) {
  delete dynamic_cast<asb_uci::type::WeatherDatasetMDT*>(&accessor);
}

} // namespace type

} // namespace uci

