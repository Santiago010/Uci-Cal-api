/** @file EntityOrbitalEphemerisRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EntityOrbitalEphemerisRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EntityEphemerisRequestParametersType.h"
#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/RequestBaseType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityEphemerisRequestParametersType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityOrbitalEphemerisRequestMDT.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityOrbitalEphemerisRequestMDT::EntityOrbitalEphemerisRequestMDT()
  : entityID_Accessor{boost::make_unique<EntityID_Type>()},
    parameters_Accessor{boost::make_unique<EntityEphemerisRequestParametersType>()} {
}

EntityOrbitalEphemerisRequestMDT::~EntityOrbitalEphemerisRequestMDT() = default;

void EntityOrbitalEphemerisRequestMDT::copy(const uci::type::EntityOrbitalEphemerisRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void EntityOrbitalEphemerisRequestMDT::copyImpl(const uci::type::EntityOrbitalEphemerisRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const EntityOrbitalEphemerisRequestMDT&>(accessor);
    setEntityID(*(accessorImpl.entityID_Accessor));
    setResultsInNativeMessage(accessorImpl.resultsInNativeMessage_Accessor);
    setParameters(*(accessorImpl.parameters_Accessor));
  }
}

void EntityOrbitalEphemerisRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  if (entityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    entityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    entityID_Accessor->reset();
  }
  resultsInNativeMessage_Accessor = false;
  parameters_Accessor->reset();
}

const uci::type::EntityID_Type& EntityOrbitalEphemerisRequestMDT::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityID_Type& EntityOrbitalEphemerisRequestMDT::getEntityID() {
  return *entityID_Accessor;
}

uci::type::EntityOrbitalEphemerisRequestMDT& EntityOrbitalEphemerisRequestMDT::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& EntityOrbitalEphemerisRequestMDT::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

xs::Boolean EntityOrbitalEphemerisRequestMDT::getResultsInNativeMessage() const {
  return resultsInNativeMessage_Accessor;
}

uci::type::EntityOrbitalEphemerisRequestMDT& EntityOrbitalEphemerisRequestMDT::setResultsInNativeMessage(xs::Boolean value) {
  resultsInNativeMessage_Accessor = value;
  return *this;
}


const uci::type::EntityEphemerisRequestParametersType& EntityOrbitalEphemerisRequestMDT::getParameters() const {
  return *parameters_Accessor;
}

uci::type::EntityEphemerisRequestParametersType& EntityOrbitalEphemerisRequestMDT::getParameters() {
  return *parameters_Accessor;
}

uci::type::EntityOrbitalEphemerisRequestMDT& EntityOrbitalEphemerisRequestMDT::setParameters(const uci::type::EntityEphemerisRequestParametersType& accessor) {
  if (&accessor != parameters_Accessor.get()) {
    parameters_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<EntityOrbitalEphemerisRequestMDT> EntityOrbitalEphemerisRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityOrbitalEphemerisRequestMDT : type};
  return (requestedType == uci::type::accessorType::entityOrbitalEphemerisRequestMDT) ? boost::make_unique<EntityOrbitalEphemerisRequestMDT>() : nullptr;
}

/**  */
namespace EntityOrbitalEphemerisRequestMDT_Names {

constexpr const char* Extern_Type_Name{"EntityOrbitalEphemerisRequestMDT"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* ResultsInNativeMessage_Name{"ResultsInNativeMessage"};
constexpr const char* Parameters_Name{"Parameters"};

} // namespace EntityOrbitalEphemerisRequestMDT_Names

void EntityOrbitalEphemerisRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityOrbitalEphemerisRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityOrbitalEphemerisRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityOrbitalEphemerisRequestMDT_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalEphemerisRequestMDT_Names::ResultsInNativeMessage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResultsInNativeMessage(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + EntityOrbitalEphemerisRequestMDT_Names::Parameters_Name) {
      EntityEphemerisRequestParametersType::deserialize(valueType.second, accessor.getParameters(), nodeName, nsPrefix);
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string EntityOrbitalEphemerisRequestMDT::serialize(const uci::type::EntityOrbitalEphemerisRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityOrbitalEphemerisRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityOrbitalEphemerisRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  EntityID_Type::serialize(accessor.getEntityID(), node, EntityOrbitalEphemerisRequestMDT_Names::EntityID_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getResultsInNativeMessage(), node, EntityOrbitalEphemerisRequestMDT_Names::ResultsInNativeMessage_Name);
  EntityEphemerisRequestParametersType::serialize(accessor.getParameters(), node, EntityOrbitalEphemerisRequestMDT_Names::Parameters_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityOrbitalEphemerisRequestMDT& EntityOrbitalEphemerisRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityOrbitalEphemerisRequestMDT>().release());
}

uci::type::EntityOrbitalEphemerisRequestMDT& EntityOrbitalEphemerisRequestMDT::create(const uci::type::EntityOrbitalEphemerisRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityOrbitalEphemerisRequestMDT> newAccessor{boost::make_unique<asb_uci::type::EntityOrbitalEphemerisRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityOrbitalEphemerisRequestMDT::destroy(uci::type::EntityOrbitalEphemerisRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::EntityOrbitalEphemerisRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

