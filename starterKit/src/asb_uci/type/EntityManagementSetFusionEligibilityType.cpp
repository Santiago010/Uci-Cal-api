/** @file EntityManagementSetFusionEligibilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EntityManagementSetFusionEligibilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EntityFusionEligibilityEnum.h"
#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityFusionEligibilityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityManagementSetFusionEligibilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityManagementSetFusionEligibilityType::EntityManagementSetFusionEligibilityType()
  : entityID_Accessor{boost::make_unique<EntityID>(1, SIZE_MAX)},
    correlatedEntityID_Accessor{boost::make_unique<CorrelatedEntityID>(0, SIZE_MAX)} {
}

EntityManagementSetFusionEligibilityType::~EntityManagementSetFusionEligibilityType() = default;

void EntityManagementSetFusionEligibilityType::copy(const uci::type::EntityManagementSetFusionEligibilityType& accessor) {
  copyImpl(accessor, false);
}

void EntityManagementSetFusionEligibilityType::copyImpl(const uci::type::EntityManagementSetFusionEligibilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityManagementSetFusionEligibilityType&>(accessor);
    setEntityID(*(accessorImpl.entityID_Accessor));
    if (accessorImpl.fusionEligibility_Accessor) {
      setFusionEligibility(*(accessorImpl.fusionEligibility_Accessor));
    } else {
      fusionEligibility_Accessor.reset();
    }
    setCorrelatedEntityID(*(accessorImpl.correlatedEntityID_Accessor));
  }
}

void EntityManagementSetFusionEligibilityType::reset() noexcept {
  entityID_Accessor->reset();
  fusionEligibility_Accessor.reset();
  correlatedEntityID_Accessor->reset();
}

const uci::type::EntityManagementSetFusionEligibilityType::EntityID& EntityManagementSetFusionEligibilityType::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityManagementSetFusionEligibilityType::EntityID& EntityManagementSetFusionEligibilityType::getEntityID() {
  return *entityID_Accessor;
}

uci::type::EntityManagementSetFusionEligibilityType& EntityManagementSetFusionEligibilityType::setEntityID(const uci::type::EntityManagementSetFusionEligibilityType::EntityID& accessor) {
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityFusionEligibilityEnum& EntityManagementSetFusionEligibilityType::getFusionEligibility_() const {
  if (fusionEligibility_Accessor) {
    return *fusionEligibility_Accessor;
  }
  throw uci::base::UCIException("Error in getFusionEligibility(): An attempt was made to get an optional field that was not enabled, call hasFusionEligibility() to determine if it is safe to call getFusionEligibility()");
}

const uci::type::EntityFusionEligibilityEnum& EntityManagementSetFusionEligibilityType::getFusionEligibility() const {
  return getFusionEligibility_();
}

uci::type::EntityFusionEligibilityEnum& EntityManagementSetFusionEligibilityType::getFusionEligibility() {
  return getFusionEligibility_();
}

uci::type::EntityManagementSetFusionEligibilityType& EntityManagementSetFusionEligibilityType::setFusionEligibility(const uci::type::EntityFusionEligibilityEnum& accessor) {
  enableFusionEligibility();
  if (&accessor != fusionEligibility_Accessor.get()) {
    fusionEligibility_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityManagementSetFusionEligibilityType& EntityManagementSetFusionEligibilityType::setFusionEligibility(const uci::type::EntityFusionEligibilityEnum::EnumerationItem value) {
  enableFusionEligibility().setValue(value);
  return *this;
}

bool EntityManagementSetFusionEligibilityType::hasFusionEligibility() const noexcept {
  return static_cast<bool>(fusionEligibility_Accessor);
}

uci::type::EntityFusionEligibilityEnum& EntityManagementSetFusionEligibilityType::enableFusionEligibility(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityFusionEligibilityEnum : type};
  if ((!fusionEligibility_Accessor) || (fusionEligibility_Accessor->getAccessorType() != requestedType)) {
    fusionEligibility_Accessor = EntityFusionEligibilityEnum::create(requestedType);
    if (!fusionEligibility_Accessor) {
      throw uci::base::UCIException("Error in enableFusionEligibility(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fusionEligibility_Accessor;
}

uci::type::EntityManagementSetFusionEligibilityType& EntityManagementSetFusionEligibilityType::clearFusionEligibility() noexcept {
  fusionEligibility_Accessor.reset();
  return *this;
}

const uci::type::EntityManagementSetFusionEligibilityType::CorrelatedEntityID& EntityManagementSetFusionEligibilityType::getCorrelatedEntityID() const {
  return *correlatedEntityID_Accessor;
}

uci::type::EntityManagementSetFusionEligibilityType::CorrelatedEntityID& EntityManagementSetFusionEligibilityType::getCorrelatedEntityID() {
  return *correlatedEntityID_Accessor;
}

uci::type::EntityManagementSetFusionEligibilityType& EntityManagementSetFusionEligibilityType::setCorrelatedEntityID(const uci::type::EntityManagementSetFusionEligibilityType::CorrelatedEntityID& accessor) {
  if (&accessor != correlatedEntityID_Accessor.get()) {
    correlatedEntityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<EntityManagementSetFusionEligibilityType> EntityManagementSetFusionEligibilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityManagementSetFusionEligibilityType : type};
  return (requestedType == uci::type::accessorType::entityManagementSetFusionEligibilityType) ? boost::make_unique<EntityManagementSetFusionEligibilityType>() : nullptr;
}

/**  */
namespace EntityManagementSetFusionEligibilityType_Names {

constexpr const char* Extern_Type_Name{"EntityManagementSetFusionEligibilityType"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* FusionEligibility_Name{"FusionEligibility"};
constexpr const char* CorrelatedEntityID_Name{"CorrelatedEntityID"};

} // namespace EntityManagementSetFusionEligibilityType_Names

void EntityManagementSetFusionEligibilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityManagementSetFusionEligibilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityManagementSetFusionEligibilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityManagementSetFusionEligibilityType_Names::EntityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityManagementSetFusionEligibilityType::EntityID& boundedList = accessor.getEntityID();
        const uci::type::EntityManagementSetFusionEligibilityType::EntityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityManagementSetFusionEligibilityType_Names::FusionEligibility_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFusionEligibility().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityManagementSetFusionEligibilityType_Names::CorrelatedEntityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityManagementSetFusionEligibilityType::CorrelatedEntityID& boundedList = accessor.getCorrelatedEntityID();
        const uci::type::EntityManagementSetFusionEligibilityType::CorrelatedEntityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string EntityManagementSetFusionEligibilityType::serialize(const uci::type::EntityManagementSetFusionEligibilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityManagementSetFusionEligibilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityManagementSetFusionEligibilityType_Names::Extern_Type_Name);
  }
  {
    const uci::type::EntityManagementSetFusionEligibilityType::EntityID& boundedList = accessor.getEntityID();
    for (uci::type::EntityManagementSetFusionEligibilityType::EntityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EntityID_Type::serialize(boundedList.at(i), node, EntityManagementSetFusionEligibilityType_Names::EntityID_Name);
    }
  }
  if (accessor.hasFusionEligibility()) {
    EntityFusionEligibilityEnum::serialize(accessor.getFusionEligibility(), node, EntityManagementSetFusionEligibilityType_Names::FusionEligibility_Name, false);
  }
  {
    const uci::type::EntityManagementSetFusionEligibilityType::CorrelatedEntityID& boundedList = accessor.getCorrelatedEntityID();
    for (uci::type::EntityManagementSetFusionEligibilityType::CorrelatedEntityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EntityID_Type::serialize(boundedList.at(i), node, EntityManagementSetFusionEligibilityType_Names::CorrelatedEntityID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityManagementSetFusionEligibilityType& EntityManagementSetFusionEligibilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityManagementSetFusionEligibilityType>().release());
}

uci::type::EntityManagementSetFusionEligibilityType& EntityManagementSetFusionEligibilityType::create(const uci::type::EntityManagementSetFusionEligibilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityManagementSetFusionEligibilityType> newAccessor{boost::make_unique<asb_uci::type::EntityManagementSetFusionEligibilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityManagementSetFusionEligibilityType::destroy(uci::type::EntityManagementSetFusionEligibilityType& accessor) {
  delete dynamic_cast<asb_uci::type::EntityManagementSetFusionEligibilityType*>(&accessor);
}

} // namespace type

} // namespace uci

