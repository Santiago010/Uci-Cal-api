/** @file MessageType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MessageType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/HeaderType.h"
#include "../../../include/asb_uci/type/SecurityInformationType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/HeaderType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MessageType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SecurityInformationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MessageType::MessageType()
  : securityInformation_Accessor{boost::make_unique<SecurityInformationType>()},
    messageHeader_Accessor{boost::make_unique<HeaderType>()} {
}

MessageType::~MessageType() = default;

void MessageType::copy(const uci::type::MessageType& accessor) {
  copyImpl(accessor, false);
}

void MessageType::copyImpl(const uci::type::MessageType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::messageType)) {
      const auto& accessorImpl = dynamic_cast<const MessageType&>(accessor);
      setSecurityInformation(*(accessorImpl.securityInformation_Accessor));
      setMessageHeader(*(accessorImpl.messageHeader_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void MessageType::reset() noexcept {
  securityInformation_Accessor->reset();
  messageHeader_Accessor->reset();
}

const uci::type::SecurityInformationType& MessageType::getSecurityInformation() const {
  return *securityInformation_Accessor;
}

uci::type::SecurityInformationType& MessageType::getSecurityInformation() {
  return *securityInformation_Accessor;
}

uci::type::MessageType& MessageType::setSecurityInformation(const uci::type::SecurityInformationType& accessor) {
  if (&accessor != securityInformation_Accessor.get()) {
    securityInformation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::HeaderType& MessageType::getMessageHeader() const {
  return *messageHeader_Accessor;
}

uci::type::HeaderType& MessageType::getMessageHeader() {
  return *messageHeader_Accessor;
}

uci::type::MessageType& MessageType::setMessageHeader(const uci::type::HeaderType& accessor) {
  if (&accessor != messageHeader_Accessor.get()) {
    messageHeader_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<MessageType> MessageType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::messageType : type};
  return std::unique_ptr<MessageType>(dynamic_cast<MessageType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace MessageType_Names {

constexpr const char* Extern_Type_Name{"MessageType"};
constexpr const char* SecurityInformation_Name{"SecurityInformation"};
constexpr const char* MessageHeader_Name{"MessageHeader"};

} // namespace MessageType_Names

void MessageType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MessageType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MessageType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MessageType_Names::SecurityInformation_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.getSecurityInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MessageType_Names::MessageHeader_Name) {
      HeaderType::deserialize(valueType.second, accessor.getMessageHeader(), nodeName, nsPrefix);
    }
  }
}

std::string MessageType::serialize(const uci::type::MessageType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MessageType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::messageType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, MessageType_Names::Extern_Type_Name);
    }
    SecurityInformationType::serialize(accessor.getSecurityInformation(), node, MessageType_Names::SecurityInformation_Name);
    HeaderType::serialize(accessor.getMessageHeader(), node, MessageType_Names::MessageHeader_Name);
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

