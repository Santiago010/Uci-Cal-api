/** @file RefuelCapabilityDrogueStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RefuelCapabilityDrogueStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/HoseCutStatusEnum.h"
#include "../../../include/asb_uci/type/RefuelCapabilityDrogueCommonType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/HoseCutStatusEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MassType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RefuelCapabilityDrogueStatusType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RefuelCapabilityDrogueStatusType::RefuelCapabilityDrogueStatusType() = default;

RefuelCapabilityDrogueStatusType::~RefuelCapabilityDrogueStatusType() = default;

void RefuelCapabilityDrogueStatusType::copy(const uci::type::RefuelCapabilityDrogueStatusType& accessor) {
  copyImpl(accessor, false);
}

void RefuelCapabilityDrogueStatusType::copyImpl(const uci::type::RefuelCapabilityDrogueStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RefuelCapabilityDrogueCommonType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const RefuelCapabilityDrogueStatusType&>(accessor);
    if (accessorImpl.hasDrogueStowed()) {
      setDrogueStowed(accessorImpl.getDrogueStowed());
    } else {
      clearDrogueStowed();
    }
    if (accessorImpl.hasScheduledMissionFuelToBeDelivered()) {
      setScheduledMissionFuelToBeDelivered(accessorImpl.getScheduledMissionFuelToBeDelivered());
    } else {
      clearScheduledMissionFuelToBeDelivered();
    }
    if (accessorImpl.hoseCutStatus_Accessor) {
      setHoseCutStatus(*(accessorImpl.hoseCutStatus_Accessor));
    } else {
      hoseCutStatus_Accessor.reset();
    }
  }
}

void RefuelCapabilityDrogueStatusType::reset() noexcept {
  RefuelCapabilityDrogueCommonType::reset();
  clearDrogueStowed();
  clearScheduledMissionFuelToBeDelivered();
  hoseCutStatus_Accessor.reset();
}

xs::Boolean RefuelCapabilityDrogueStatusType::getDrogueStowed() const {
  if (drogueStowed_Accessor) {
    return *drogueStowed_Accessor;
  }
  throw uci::base::UCIException("Error in getDrogueStowed(): An attempt was made to get an optional field that was not enabled, call hasDrogueStowed() to determine if it is safe to call getDrogueStowed()");
}

uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityDrogueStatusType::setDrogueStowed(xs::Boolean value) {
  drogueStowed_Accessor = value;
  return *this;
}

bool RefuelCapabilityDrogueStatusType::hasDrogueStowed() const noexcept {
  return drogueStowed_Accessor.has_value();
}

uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityDrogueStatusType::clearDrogueStowed() noexcept {
  drogueStowed_Accessor.reset();
  return *this;
}

uci::type::MassTypeValue RefuelCapabilityDrogueStatusType::getScheduledMissionFuelToBeDelivered() const {
  if (scheduledMissionFuelToBeDelivered_Accessor) {
    return *scheduledMissionFuelToBeDelivered_Accessor;
  }
  throw uci::base::UCIException("Error in getScheduledMissionFuelToBeDelivered(): An attempt was made to get an optional field that was not enabled, call hasScheduledMissionFuelToBeDelivered() to determine if it is safe to call getScheduledMissionFuelToBeDelivered()");
}

uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityDrogueStatusType::setScheduledMissionFuelToBeDelivered(uci::type::MassTypeValue value) {
  scheduledMissionFuelToBeDelivered_Accessor = value;
  return *this;
}

bool RefuelCapabilityDrogueStatusType::hasScheduledMissionFuelToBeDelivered() const noexcept {
  return scheduledMissionFuelToBeDelivered_Accessor.has_value();
}

uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityDrogueStatusType::clearScheduledMissionFuelToBeDelivered() noexcept {
  scheduledMissionFuelToBeDelivered_Accessor.reset();
  return *this;
}

uci::type::HoseCutStatusEnum& RefuelCapabilityDrogueStatusType::getHoseCutStatus_() const {
  if (hoseCutStatus_Accessor) {
    return *hoseCutStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getHoseCutStatus(): An attempt was made to get an optional field that was not enabled, call hasHoseCutStatus() to determine if it is safe to call getHoseCutStatus()");
}

const uci::type::HoseCutStatusEnum& RefuelCapabilityDrogueStatusType::getHoseCutStatus() const {
  return getHoseCutStatus_();
}

uci::type::HoseCutStatusEnum& RefuelCapabilityDrogueStatusType::getHoseCutStatus() {
  return getHoseCutStatus_();
}

uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityDrogueStatusType::setHoseCutStatus(const uci::type::HoseCutStatusEnum& accessor) {
  enableHoseCutStatus();
  if (&accessor != hoseCutStatus_Accessor.get()) {
    hoseCutStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityDrogueStatusType::setHoseCutStatus(const uci::type::HoseCutStatusEnum::EnumerationItem value) {
  enableHoseCutStatus().setValue(value);
  return *this;
}

bool RefuelCapabilityDrogueStatusType::hasHoseCutStatus() const noexcept {
  return static_cast<bool>(hoseCutStatus_Accessor);
}

uci::type::HoseCutStatusEnum& RefuelCapabilityDrogueStatusType::enableHoseCutStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::hoseCutStatusEnum : type};
  if ((!hoseCutStatus_Accessor) || (hoseCutStatus_Accessor->getAccessorType() != requestedType)) {
    hoseCutStatus_Accessor = HoseCutStatusEnum::create(requestedType);
    if (!hoseCutStatus_Accessor) {
      throw uci::base::UCIException("Error in enableHoseCutStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *hoseCutStatus_Accessor;
}

uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityDrogueStatusType::clearHoseCutStatus() noexcept {
  hoseCutStatus_Accessor.reset();
  return *this;
}

std::unique_ptr<RefuelCapabilityDrogueStatusType> RefuelCapabilityDrogueStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelCapabilityDrogueStatusType : type};
  return (requestedType == uci::type::accessorType::refuelCapabilityDrogueStatusType) ? boost::make_unique<RefuelCapabilityDrogueStatusType>() : nullptr;
}

/**  */
namespace RefuelCapabilityDrogueStatusType_Names {

constexpr const char* Extern_Type_Name{"RefuelCapabilityDrogueStatusType"};
constexpr const char* DrogueStowed_Name{"DrogueStowed"};
constexpr const char* ScheduledMissionFuelToBeDelivered_Name{"ScheduledMissionFuelToBeDelivered"};
constexpr const char* HoseCutStatus_Name{"HoseCutStatus"};

} // namespace RefuelCapabilityDrogueStatusType_Names

void RefuelCapabilityDrogueStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RefuelCapabilityDrogueStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RefuelCapabilityDrogueStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RefuelCapabilityDrogueStatusType_Names::DrogueStowed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDrogueStowed(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RefuelCapabilityDrogueStatusType_Names::ScheduledMissionFuelToBeDelivered_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setScheduledMissionFuelToBeDelivered(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RefuelCapabilityDrogueStatusType_Names::HoseCutStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableHoseCutStatus().setValueFromName(*value);
      }
    }
  }
  RefuelCapabilityDrogueCommonType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string RefuelCapabilityDrogueStatusType::serialize(const uci::type::RefuelCapabilityDrogueStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RefuelCapabilityDrogueStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RefuelCapabilityDrogueStatusType_Names::Extern_Type_Name);
  }
  RefuelCapabilityDrogueCommonType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasDrogueStowed()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getDrogueStowed(), node, RefuelCapabilityDrogueStatusType_Names::DrogueStowed_Name);
  }
  if (accessor.hasScheduledMissionFuelToBeDelivered()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getScheduledMissionFuelToBeDelivered(), node, RefuelCapabilityDrogueStatusType_Names::ScheduledMissionFuelToBeDelivered_Name);
  }
  if (accessor.hasHoseCutStatus()) {
    HoseCutStatusEnum::serialize(accessor.getHoseCutStatus(), node, RefuelCapabilityDrogueStatusType_Names::HoseCutStatus_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityDrogueStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RefuelCapabilityDrogueStatusType>().release());
}

uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityDrogueStatusType::create(const uci::type::RefuelCapabilityDrogueStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RefuelCapabilityDrogueStatusType> newAccessor{boost::make_unique<asb_uci::type::RefuelCapabilityDrogueStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RefuelCapabilityDrogueStatusType::destroy(uci::type::RefuelCapabilityDrogueStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::RefuelCapabilityDrogueStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

