/** @file SAR_ProcessingParametersType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SAR_ProcessingParametersType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ImageRegionOfInterestPET.h"
#include "asb_uci/type/ImageRemapEnum.h"
#include "asb_uci/type/ImageWeightEnum.h"
#include "asb_uci/type/ProcessingParametersPET.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ImageRegionOfInterestPET.h"
#include "uci/type/ImageRemapEnum.h"
#include "uci/type/ImageWeightEnum.h"
#include "uci/type/SAR_ProcessingParametersType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SAR_ProcessingParametersType::SAR_ProcessingParametersType() = default;

SAR_ProcessingParametersType::~SAR_ProcessingParametersType() = default;

void SAR_ProcessingParametersType::copy(const uci::type::SAR_ProcessingParametersType& accessor) {
  copyImpl(accessor, false);
}

void SAR_ProcessingParametersType::copyImpl(const uci::type::SAR_ProcessingParametersType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::sAR_ProcessingParametersType)) {
      ProcessingParametersPET::copyImpl(accessor, false);
      const auto& accessorImpl = dynamic_cast<const SAR_ProcessingParametersType&>(accessor);
      if (accessorImpl.weight_Accessor) {
        setWeight(*(accessorImpl.weight_Accessor));
      } else {
        weight_Accessor.reset();
      }
      if (accessorImpl.remap_Accessor) {
        setRemap(*(accessorImpl.remap_Accessor));
      } else {
        remap_Accessor.reset();
      }
      if (accessorImpl.regionOfInterest_Accessor) {
        setRegionOfInterest(*(accessorImpl.regionOfInterest_Accessor));
      } else {
        regionOfInterest_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void SAR_ProcessingParametersType::reset() noexcept {
  ProcessingParametersPET::reset();
  weight_Accessor.reset();
  remap_Accessor.reset();
  regionOfInterest_Accessor.reset();
}

uci::type::ImageWeightEnum& SAR_ProcessingParametersType::getWeight_() const {
  if (weight_Accessor) {
    return *weight_Accessor;
  }
  throw uci::base::UCIException("Error in getWeight(): An attempt was made to get an optional field that was not enabled, call hasWeight() to determine if it is safe to call getWeight()");
}

const uci::type::ImageWeightEnum& SAR_ProcessingParametersType::getWeight() const {
  return getWeight_();
}

uci::type::ImageWeightEnum& SAR_ProcessingParametersType::getWeight() {
  return getWeight_();
}

uci::type::SAR_ProcessingParametersType& SAR_ProcessingParametersType::setWeight(const uci::type::ImageWeightEnum& accessor) {
  enableWeight();
  if (&accessor != weight_Accessor.get()) {
    weight_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SAR_ProcessingParametersType& SAR_ProcessingParametersType::setWeight(const uci::type::ImageWeightEnum::EnumerationItem value) {
  enableWeight().setValue(value);
  return *this;
}

bool SAR_ProcessingParametersType::hasWeight() const noexcept {
  return static_cast<bool>(weight_Accessor);
}

uci::type::ImageWeightEnum& SAR_ProcessingParametersType::enableWeight(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::imageWeightEnum : type};
  if ((!weight_Accessor) || (weight_Accessor->getAccessorType() != requestedType)) {
    weight_Accessor = ImageWeightEnum::create(requestedType);
    if (!weight_Accessor) {
      throw uci::base::UCIException("Error in enableWeight(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weight_Accessor;
}

uci::type::SAR_ProcessingParametersType& SAR_ProcessingParametersType::clearWeight() noexcept {
  weight_Accessor.reset();
  return *this;
}

uci::type::ImageRemapEnum& SAR_ProcessingParametersType::getRemap_() const {
  if (remap_Accessor) {
    return *remap_Accessor;
  }
  throw uci::base::UCIException("Error in getRemap(): An attempt was made to get an optional field that was not enabled, call hasRemap() to determine if it is safe to call getRemap()");
}

const uci::type::ImageRemapEnum& SAR_ProcessingParametersType::getRemap() const {
  return getRemap_();
}

uci::type::ImageRemapEnum& SAR_ProcessingParametersType::getRemap() {
  return getRemap_();
}

uci::type::SAR_ProcessingParametersType& SAR_ProcessingParametersType::setRemap(const uci::type::ImageRemapEnum& accessor) {
  enableRemap();
  if (&accessor != remap_Accessor.get()) {
    remap_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SAR_ProcessingParametersType& SAR_ProcessingParametersType::setRemap(const uci::type::ImageRemapEnum::EnumerationItem value) {
  enableRemap().setValue(value);
  return *this;
}

bool SAR_ProcessingParametersType::hasRemap() const noexcept {
  return static_cast<bool>(remap_Accessor);
}

uci::type::ImageRemapEnum& SAR_ProcessingParametersType::enableRemap(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::imageRemapEnum : type};
  if ((!remap_Accessor) || (remap_Accessor->getAccessorType() != requestedType)) {
    remap_Accessor = ImageRemapEnum::create(requestedType);
    if (!remap_Accessor) {
      throw uci::base::UCIException("Error in enableRemap(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *remap_Accessor;
}

uci::type::SAR_ProcessingParametersType& SAR_ProcessingParametersType::clearRemap() noexcept {
  remap_Accessor.reset();
  return *this;
}

uci::type::ImageRegionOfInterestPET& SAR_ProcessingParametersType::getRegionOfInterest_() const {
  if (regionOfInterest_Accessor) {
    return *regionOfInterest_Accessor;
  }
  throw uci::base::UCIException("Error in getRegionOfInterest(): An attempt was made to get an optional field that was not enabled, call hasRegionOfInterest() to determine if it is safe to call getRegionOfInterest()");
}

const uci::type::ImageRegionOfInterestPET& SAR_ProcessingParametersType::getRegionOfInterest() const {
  return getRegionOfInterest_();
}

uci::type::ImageRegionOfInterestPET& SAR_ProcessingParametersType::getRegionOfInterest() {
  return getRegionOfInterest_();
}

uci::type::SAR_ProcessingParametersType& SAR_ProcessingParametersType::setRegionOfInterest(const uci::type::ImageRegionOfInterestPET& accessor) {
  enableRegionOfInterest(accessor.getAccessorType());
  if (&accessor != regionOfInterest_Accessor.get()) {
    regionOfInterest_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SAR_ProcessingParametersType::hasRegionOfInterest() const noexcept {
  return static_cast<bool>(regionOfInterest_Accessor);
}

uci::type::ImageRegionOfInterestPET& SAR_ProcessingParametersType::enableRegionOfInterest(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::imageRegionOfInterestPET : type};
  if ((!regionOfInterest_Accessor) || (regionOfInterest_Accessor->getAccessorType() != requestedType)) {
    regionOfInterest_Accessor = ImageRegionOfInterestPET::create(requestedType);
    if (!regionOfInterest_Accessor) {
      throw uci::base::UCIException("Error in enableRegionOfInterest(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *regionOfInterest_Accessor;
}

uci::type::SAR_ProcessingParametersType& SAR_ProcessingParametersType::clearRegionOfInterest() noexcept {
  regionOfInterest_Accessor.reset();
  return *this;
}

std::unique_ptr<SAR_ProcessingParametersType> SAR_ProcessingParametersType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_ProcessingParametersType : type};
  return std::unique_ptr<SAR_ProcessingParametersType>(dynamic_cast<SAR_ProcessingParametersType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace SAR_ProcessingParametersType_Names {

constexpr const char* Extern_Type_Name{"SAR_ProcessingParametersType"};
constexpr const char* Weight_Name{"Weight"};
constexpr const char* Remap_Name{"Remap"};
constexpr const char* RegionOfInterest_Name{"RegionOfInterest"};

} // namespace SAR_ProcessingParametersType_Names

void SAR_ProcessingParametersType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_ProcessingParametersType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SAR_ProcessingParametersType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SAR_ProcessingParametersType_Names::Weight_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableWeight().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SAR_ProcessingParametersType_Names::Remap_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRemap().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SAR_ProcessingParametersType_Names::RegionOfInterest_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRegionOfInterest(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  ProcessingParametersPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SAR_ProcessingParametersType::serialize(const uci::type::SAR_ProcessingParametersType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SAR_ProcessingParametersType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::sAR_ProcessingParametersType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, SAR_ProcessingParametersType_Names::Extern_Type_Name);
    }
    ProcessingParametersPET::serialize(accessor, node, "", false, false, false);
    if (accessor.hasWeight()) {
      ImageWeightEnum::serialize(accessor.getWeight(), node, SAR_ProcessingParametersType_Names::Weight_Name, false);
    }
    if (accessor.hasRemap()) {
      ImageRemapEnum::serialize(accessor.getRemap(), node, SAR_ProcessingParametersType_Names::Remap_Name, false);
    }
    if (accessor.hasRegionOfInterest()) {
      ImageRegionOfInterestPET::serialize(accessor.getRegionOfInterest(), node, SAR_ProcessingParametersType_Names::RegionOfInterest_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SAR_ProcessingParametersType& SAR_ProcessingParametersType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SAR_ProcessingParametersType>().release());
}

uci::type::SAR_ProcessingParametersType& SAR_ProcessingParametersType::create(const uci::type::SAR_ProcessingParametersType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SAR_ProcessingParametersType> newAccessor{boost::make_unique<asb_uci::type::SAR_ProcessingParametersType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SAR_ProcessingParametersType::destroy(uci::type::SAR_ProcessingParametersType& accessor) {
  delete dynamic_cast<asb_uci::type::SAR_ProcessingParametersType*>(&accessor);
}

} // namespace type

} // namespace uci

