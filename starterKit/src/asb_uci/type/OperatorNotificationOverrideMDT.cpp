/** @file OperatorNotificationOverrideMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OperatorNotificationOverrideMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OperatorNotificationID_Type.h"
#include "asb_uci/type/OperatorNotificationOverrideID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/OperatorNotificationID_Type.h"
#include "uci/type/OperatorNotificationOverrideID_Type.h"
#include "uci/type/OperatorNotificationOverrideMDT.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OperatorNotificationOverrideMDT::OperatorNotificationOverrideMDT()
  : operatorNotificationOverrideID_Accessor{boost::make_unique<OperatorNotificationOverrideID_Type>()},
    operatorNotificationID_Accessor{boost::make_unique<OperatorNotificationID_Type>()} {
}

OperatorNotificationOverrideMDT::~OperatorNotificationOverrideMDT() = default;

void OperatorNotificationOverrideMDT::copy(const uci::type::OperatorNotificationOverrideMDT& accessor) {
  copyImpl(accessor, false);
}

void OperatorNotificationOverrideMDT::copyImpl(const uci::type::OperatorNotificationOverrideMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OperatorNotificationOverrideMDT&>(accessor);
    setOperatorNotificationOverrideID(*(accessorImpl.operatorNotificationOverrideID_Accessor));
    setOperatorNotificationID(*(accessorImpl.operatorNotificationID_Accessor));
    setIsEnabled(accessorImpl.isEnabled_Accessor);
  }
}

void OperatorNotificationOverrideMDT::reset() noexcept {
  operatorNotificationOverrideID_Accessor->reset();
  operatorNotificationID_Accessor->reset();
  isEnabled_Accessor = false;
}

const uci::type::OperatorNotificationOverrideID_Type& OperatorNotificationOverrideMDT::getOperatorNotificationOverrideID() const {
  return *operatorNotificationOverrideID_Accessor;
}

uci::type::OperatorNotificationOverrideID_Type& OperatorNotificationOverrideMDT::getOperatorNotificationOverrideID() {
  return *operatorNotificationOverrideID_Accessor;
}

uci::type::OperatorNotificationOverrideMDT& OperatorNotificationOverrideMDT::setOperatorNotificationOverrideID(const uci::type::OperatorNotificationOverrideID_Type& accessor) {
  if (&accessor != operatorNotificationOverrideID_Accessor.get()) {
    operatorNotificationOverrideID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OperatorNotificationID_Type& OperatorNotificationOverrideMDT::getOperatorNotificationID() const {
  return *operatorNotificationID_Accessor;
}

uci::type::OperatorNotificationID_Type& OperatorNotificationOverrideMDT::getOperatorNotificationID() {
  return *operatorNotificationID_Accessor;
}

uci::type::OperatorNotificationOverrideMDT& OperatorNotificationOverrideMDT::setOperatorNotificationID(const uci::type::OperatorNotificationID_Type& accessor) {
  if (&accessor != operatorNotificationID_Accessor.get()) {
    operatorNotificationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean OperatorNotificationOverrideMDT::getIsEnabled() const {
  return isEnabled_Accessor;
}

uci::type::OperatorNotificationOverrideMDT& OperatorNotificationOverrideMDT::setIsEnabled(xs::Boolean value) {
  isEnabled_Accessor = value;
  return *this;
}


std::unique_ptr<OperatorNotificationOverrideMDT> OperatorNotificationOverrideMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorNotificationOverrideMDT : type};
  return (requestedType == uci::type::accessorType::operatorNotificationOverrideMDT) ? boost::make_unique<OperatorNotificationOverrideMDT>() : nullptr;
}

/**  */
namespace OperatorNotificationOverrideMDT_Names {

constexpr const char* Extern_Type_Name{"OperatorNotificationOverrideMDT"};
constexpr const char* OperatorNotificationOverrideID_Name{"OperatorNotificationOverrideID"};
constexpr const char* OperatorNotificationID_Name{"OperatorNotificationID"};
constexpr const char* IsEnabled_Name{"IsEnabled"};

} // namespace OperatorNotificationOverrideMDT_Names

void OperatorNotificationOverrideMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OperatorNotificationOverrideMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OperatorNotificationOverrideMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OperatorNotificationOverrideMDT_Names::OperatorNotificationOverrideID_Name) {
      OperatorNotificationOverrideID_Type::deserialize(valueType.second, accessor.getOperatorNotificationOverrideID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorNotificationOverrideMDT_Names::OperatorNotificationID_Name) {
      OperatorNotificationID_Type::deserialize(valueType.second, accessor.getOperatorNotificationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorNotificationOverrideMDT_Names::IsEnabled_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIsEnabled(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string OperatorNotificationOverrideMDT::serialize(const uci::type::OperatorNotificationOverrideMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OperatorNotificationOverrideMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OperatorNotificationOverrideMDT_Names::Extern_Type_Name);
  }
  OperatorNotificationOverrideID_Type::serialize(accessor.getOperatorNotificationOverrideID(), node, OperatorNotificationOverrideMDT_Names::OperatorNotificationOverrideID_Name);
  OperatorNotificationID_Type::serialize(accessor.getOperatorNotificationID(), node, OperatorNotificationOverrideMDT_Names::OperatorNotificationID_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getIsEnabled(), node, OperatorNotificationOverrideMDT_Names::IsEnabled_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OperatorNotificationOverrideMDT& OperatorNotificationOverrideMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OperatorNotificationOverrideMDT>().release());
}

uci::type::OperatorNotificationOverrideMDT& OperatorNotificationOverrideMDT::create(const uci::type::OperatorNotificationOverrideMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OperatorNotificationOverrideMDT> newAccessor{boost::make_unique<asb_uci::type::OperatorNotificationOverrideMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OperatorNotificationOverrideMDT::destroy(uci::type::OperatorNotificationOverrideMDT& accessor) {
  delete dynamic_cast<asb_uci::type::OperatorNotificationOverrideMDT*>(&accessor);
}

} // namespace type

} // namespace uci

