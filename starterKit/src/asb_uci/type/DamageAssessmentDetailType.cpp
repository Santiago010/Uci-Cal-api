/** @file DamageAssessmentDetailType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DamageAssessmentDetailType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DamageCauseEnum.h"
#include "asb_uci/type/DamagedHumanType.h"
#include "asb_uci/type/DamagedObjectType.h"
#include "asb_uci/type/FunctionalDamageConfidenceType.h"
#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DamageAssessmentDetailType.h"
#include "uci/type/DamageCauseEnum.h"
#include "uci/type/DamagedHumanType.h"
#include "uci/type/DamagedObjectType.h"
#include "uci/type/FunctionalDamageConfidenceType.h"
#include "uci/type/VisibleString1024Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DamageAssessmentDetailType::DamageAssessmentDetailType()
  : damagedObject_Accessor{boost::make_unique<DamagedObjectType>()},
    functionalDamage_Accessor{boost::make_unique<FunctionalDamage>(0, SIZE_MAX)} {
}

DamageAssessmentDetailType::~DamageAssessmentDetailType() = default;

void DamageAssessmentDetailType::copy(const uci::type::DamageAssessmentDetailType& accessor) {
  copyImpl(accessor, false);
}

void DamageAssessmentDetailType::copyImpl(const uci::type::DamageAssessmentDetailType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::damageAssessmentDetailType)) {
      const auto& accessorImpl = dynamic_cast<const DamageAssessmentDetailType&>(accessor);
      setDamagedObject(*(accessorImpl.damagedObject_Accessor));
      setFunctionalDamage(*(accessorImpl.functionalDamage_Accessor));
      if (accessorImpl.humanDamage_Accessor) {
        setHumanDamage(*(accessorImpl.humanDamage_Accessor));
      } else {
        humanDamage_Accessor.reset();
      }
      if (accessorImpl.damageCause_Accessor) {
        setDamageCause(*(accessorImpl.damageCause_Accessor));
      } else {
        damageCause_Accessor.reset();
      }
      if (accessorImpl.damageNarrative_Accessor) {
        setDamageNarrative(*(accessorImpl.damageNarrative_Accessor));
      } else {
        damageNarrative_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void DamageAssessmentDetailType::reset() noexcept {
  damagedObject_Accessor->reset();
  functionalDamage_Accessor->reset();
  humanDamage_Accessor.reset();
  damageCause_Accessor.reset();
  damageNarrative_Accessor.reset();
}

const uci::type::DamagedObjectType& DamageAssessmentDetailType::getDamagedObject() const {
  return *damagedObject_Accessor;
}

uci::type::DamagedObjectType& DamageAssessmentDetailType::getDamagedObject() {
  return *damagedObject_Accessor;
}

uci::type::DamageAssessmentDetailType& DamageAssessmentDetailType::setDamagedObject(const uci::type::DamagedObjectType& accessor) {
  if (&accessor != damagedObject_Accessor.get()) {
    damagedObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DamageAssessmentDetailType::FunctionalDamage& DamageAssessmentDetailType::getFunctionalDamage() const {
  return *functionalDamage_Accessor;
}

uci::type::DamageAssessmentDetailType::FunctionalDamage& DamageAssessmentDetailType::getFunctionalDamage() {
  return *functionalDamage_Accessor;
}

uci::type::DamageAssessmentDetailType& DamageAssessmentDetailType::setFunctionalDamage(const uci::type::DamageAssessmentDetailType::FunctionalDamage& accessor) {
  if (&accessor != functionalDamage_Accessor.get()) {
    functionalDamage_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DamagedHumanType& DamageAssessmentDetailType::getHumanDamage_() const {
  if (humanDamage_Accessor) {
    return *humanDamage_Accessor;
  }
  throw uci::base::UCIException("Error in getHumanDamage(): An attempt was made to get an optional field that was not enabled, call hasHumanDamage() to determine if it is safe to call getHumanDamage()");
}

const uci::type::DamagedHumanType& DamageAssessmentDetailType::getHumanDamage() const {
  return getHumanDamage_();
}

uci::type::DamagedHumanType& DamageAssessmentDetailType::getHumanDamage() {
  return getHumanDamage_();
}

uci::type::DamageAssessmentDetailType& DamageAssessmentDetailType::setHumanDamage(const uci::type::DamagedHumanType& accessor) {
  enableHumanDamage();
  if (&accessor != humanDamage_Accessor.get()) {
    humanDamage_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageAssessmentDetailType::hasHumanDamage() const noexcept {
  return static_cast<bool>(humanDamage_Accessor);
}

uci::type::DamagedHumanType& DamageAssessmentDetailType::enableHumanDamage(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damagedHumanType : type};
  if ((!humanDamage_Accessor) || (humanDamage_Accessor->getAccessorType() != requestedType)) {
    humanDamage_Accessor = DamagedHumanType::create(requestedType);
    if (!humanDamage_Accessor) {
      throw uci::base::UCIException("Error in enableHumanDamage(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *humanDamage_Accessor;
}

uci::type::DamageAssessmentDetailType& DamageAssessmentDetailType::clearHumanDamage() noexcept {
  humanDamage_Accessor.reset();
  return *this;
}

uci::type::DamageCauseEnum& DamageAssessmentDetailType::getDamageCause_() const {
  if (damageCause_Accessor) {
    return *damageCause_Accessor;
  }
  throw uci::base::UCIException("Error in getDamageCause(): An attempt was made to get an optional field that was not enabled, call hasDamageCause() to determine if it is safe to call getDamageCause()");
}

const uci::type::DamageCauseEnum& DamageAssessmentDetailType::getDamageCause() const {
  return getDamageCause_();
}

uci::type::DamageCauseEnum& DamageAssessmentDetailType::getDamageCause() {
  return getDamageCause_();
}

uci::type::DamageAssessmentDetailType& DamageAssessmentDetailType::setDamageCause(const uci::type::DamageCauseEnum& accessor) {
  enableDamageCause();
  if (&accessor != damageCause_Accessor.get()) {
    damageCause_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DamageAssessmentDetailType& DamageAssessmentDetailType::setDamageCause(const uci::type::DamageCauseEnum::EnumerationItem value) {
  enableDamageCause().setValue(value);
  return *this;
}

bool DamageAssessmentDetailType::hasDamageCause() const noexcept {
  return static_cast<bool>(damageCause_Accessor);
}

uci::type::DamageCauseEnum& DamageAssessmentDetailType::enableDamageCause(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageCauseEnum : type};
  if ((!damageCause_Accessor) || (damageCause_Accessor->getAccessorType() != requestedType)) {
    damageCause_Accessor = DamageCauseEnum::create(requestedType);
    if (!damageCause_Accessor) {
      throw uci::base::UCIException("Error in enableDamageCause(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *damageCause_Accessor;
}

uci::type::DamageAssessmentDetailType& DamageAssessmentDetailType::clearDamageCause() noexcept {
  damageCause_Accessor.reset();
  return *this;
}

uci::type::VisibleString1024Type& DamageAssessmentDetailType::getDamageNarrative_() const {
  if (damageNarrative_Accessor) {
    return *damageNarrative_Accessor;
  }
  throw uci::base::UCIException("Error in getDamageNarrative(): An attempt was made to get an optional field that was not enabled, call hasDamageNarrative() to determine if it is safe to call getDamageNarrative()");
}

const uci::type::VisibleString1024Type& DamageAssessmentDetailType::getDamageNarrative() const {
  return getDamageNarrative_();
}

uci::type::VisibleString1024Type& DamageAssessmentDetailType::getDamageNarrative() {
  return getDamageNarrative_();
}

uci::type::DamageAssessmentDetailType& DamageAssessmentDetailType::setDamageNarrative(const uci::type::VisibleString1024Type& value) {
  return setDamageNarrative(value.c_str());
}

uci::type::DamageAssessmentDetailType& DamageAssessmentDetailType::setDamageNarrative(const std::string& value) {
  return setDamageNarrative(value.c_str());
}

uci::type::DamageAssessmentDetailType& DamageAssessmentDetailType::setDamageNarrative(const char* value) {
  enableDamageNarrative().setStringValue(value);
  return *this;
}

bool DamageAssessmentDetailType::hasDamageNarrative() const noexcept {
  return static_cast<bool>(damageNarrative_Accessor);
}

uci::type::VisibleString1024Type& DamageAssessmentDetailType::enableDamageNarrative(uci::base::accessorType::AccessorType type) {
  if (!damageNarrative_Accessor) {
    damageNarrative_Accessor = VisibleString1024Type::create(type);
  }
  return *damageNarrative_Accessor;
}

uci::type::DamageAssessmentDetailType& DamageAssessmentDetailType::clearDamageNarrative() noexcept {
  damageNarrative_Accessor.reset();
  return *this;
}

std::unique_ptr<DamageAssessmentDetailType> DamageAssessmentDetailType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageAssessmentDetailType : type};
  return std::unique_ptr<DamageAssessmentDetailType>(dynamic_cast<DamageAssessmentDetailType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace DamageAssessmentDetailType_Names {

constexpr const char* Extern_Type_Name{"DamageAssessmentDetailType"};
constexpr const char* DamagedObject_Name{"DamagedObject"};
constexpr const char* FunctionalDamage_Name{"FunctionalDamage"};
constexpr const char* HumanDamage_Name{"HumanDamage"};
constexpr const char* DamageCause_Name{"DamageCause"};
constexpr const char* DamageNarrative_Name{"DamageNarrative"};

} // namespace DamageAssessmentDetailType_Names

void DamageAssessmentDetailType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageAssessmentDetailType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamageAssessmentDetailType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamageAssessmentDetailType_Names::DamagedObject_Name) {
      DamagedObjectType::deserialize(valueType.second, accessor.getDamagedObject(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageAssessmentDetailType_Names::FunctionalDamage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DamageAssessmentDetailType::FunctionalDamage& boundedList = accessor.getFunctionalDamage();
        const uci::type::DamageAssessmentDetailType::FunctionalDamage::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FunctionalDamageConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DamageAssessmentDetailType_Names::HumanDamage_Name) {
      DamagedHumanType::deserialize(valueType.second, accessor.enableHumanDamage(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageAssessmentDetailType_Names::DamageCause_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableDamageCause().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DamageAssessmentDetailType_Names::DamageNarrative_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDamageNarrative(*value);
      }
    }
  }
}

std::string DamageAssessmentDetailType::serialize(const uci::type::DamageAssessmentDetailType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DamageAssessmentDetailType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::damageAssessmentDetailType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, DamageAssessmentDetailType_Names::Extern_Type_Name);
    }
    DamagedObjectType::serialize(accessor.getDamagedObject(), node, DamageAssessmentDetailType_Names::DamagedObject_Name);
    {
      const uci::type::DamageAssessmentDetailType::FunctionalDamage& boundedList = accessor.getFunctionalDamage();
      for (uci::type::DamageAssessmentDetailType::FunctionalDamage::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::FunctionalDamageConfidenceType::serialize(boundedList.at(i), node, DamageAssessmentDetailType_Names::FunctionalDamage_Name);
      }
    }
    if (accessor.hasHumanDamage()) {
      DamagedHumanType::serialize(accessor.getHumanDamage(), node, DamageAssessmentDetailType_Names::HumanDamage_Name);
    }
    if (accessor.hasDamageCause()) {
      DamageCauseEnum::serialize(accessor.getDamageCause(), node, DamageAssessmentDetailType_Names::DamageCause_Name, false);
    }
    if (accessor.hasDamageNarrative()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getDamageNarrative(), node, DamageAssessmentDetailType_Names::DamageNarrative_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DamageAssessmentDetailType& DamageAssessmentDetailType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DamageAssessmentDetailType>().release());
}

uci::type::DamageAssessmentDetailType& DamageAssessmentDetailType::create(const uci::type::DamageAssessmentDetailType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DamageAssessmentDetailType> newAccessor{boost::make_unique<asb_uci::type::DamageAssessmentDetailType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DamageAssessmentDetailType::destroy(uci::type::DamageAssessmentDetailType& accessor) {
  delete dynamic_cast<asb_uci::type::DamageAssessmentDetailType*>(&accessor);
}

} // namespace type

} // namespace uci

