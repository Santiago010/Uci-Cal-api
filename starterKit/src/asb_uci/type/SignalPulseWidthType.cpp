/** @file SignalPulseWidthType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SignalPulseWidthType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/MeasurementQualityEnum.h"
#include "../../../include/asb_uci/type/SignalPulseWidthBaseType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MeasurementQualityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SignalPulseWidthType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SignalPulseWidthType::SignalPulseWidthType() = default;

SignalPulseWidthType::~SignalPulseWidthType() = default;

void SignalPulseWidthType::copy(const uci::type::SignalPulseWidthType& accessor) {
  copyImpl(accessor, false);
}

void SignalPulseWidthType::copyImpl(const uci::type::SignalPulseWidthType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SignalPulseWidthBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const SignalPulseWidthType&>(accessor);
    if (accessorImpl.pulseWidthQuality_Accessor) {
      setPulseWidthQuality(*(accessorImpl.pulseWidthQuality_Accessor));
    } else {
      pulseWidthQuality_Accessor.reset();
    }
    if (accessorImpl.hasPulseWidthChopped()) {
      setPulseWidthChopped(accessorImpl.getPulseWidthChopped());
    } else {
      clearPulseWidthChopped();
    }
    if (accessorImpl.hasPulseOnPulse()) {
      setPulseOnPulse(accessorImpl.getPulseOnPulse());
    } else {
      clearPulseOnPulse();
    }
  }
}

void SignalPulseWidthType::reset() noexcept {
  SignalPulseWidthBaseType::reset();
  pulseWidthQuality_Accessor.reset();
  clearPulseWidthChopped();
  clearPulseOnPulse();
}

uci::type::MeasurementQualityEnum& SignalPulseWidthType::getPulseWidthQuality_() const {
  if (pulseWidthQuality_Accessor) {
    return *pulseWidthQuality_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidthQuality(): An attempt was made to get an optional field that was not enabled, call hasPulseWidthQuality() to determine if it is safe to call getPulseWidthQuality()");
}

const uci::type::MeasurementQualityEnum& SignalPulseWidthType::getPulseWidthQuality() const {
  return getPulseWidthQuality_();
}

uci::type::MeasurementQualityEnum& SignalPulseWidthType::getPulseWidthQuality() {
  return getPulseWidthQuality_();
}

uci::type::SignalPulseWidthType& SignalPulseWidthType::setPulseWidthQuality(const uci::type::MeasurementQualityEnum& accessor) {
  enablePulseWidthQuality();
  if (&accessor != pulseWidthQuality_Accessor.get()) {
    pulseWidthQuality_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SignalPulseWidthType& SignalPulseWidthType::setPulseWidthQuality(const uci::type::MeasurementQualityEnum::EnumerationItem value) {
  enablePulseWidthQuality().setValue(value);
  return *this;
}

bool SignalPulseWidthType::hasPulseWidthQuality() const noexcept {
  return static_cast<bool>(pulseWidthQuality_Accessor);
}

uci::type::MeasurementQualityEnum& SignalPulseWidthType::enablePulseWidthQuality(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::measurementQualityEnum : type};
  if ((!pulseWidthQuality_Accessor) || (pulseWidthQuality_Accessor->getAccessorType() != requestedType)) {
    pulseWidthQuality_Accessor = MeasurementQualityEnum::create(requestedType);
    if (!pulseWidthQuality_Accessor) {
      throw uci::base::UCIException("Error in enablePulseWidthQuality(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pulseWidthQuality_Accessor;
}

uci::type::SignalPulseWidthType& SignalPulseWidthType::clearPulseWidthQuality() noexcept {
  pulseWidthQuality_Accessor.reset();
  return *this;
}

xs::Boolean SignalPulseWidthType::getPulseWidthChopped() const {
  if (pulseWidthChopped_Accessor) {
    return *pulseWidthChopped_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidthChopped(): An attempt was made to get an optional field that was not enabled, call hasPulseWidthChopped() to determine if it is safe to call getPulseWidthChopped()");
}

uci::type::SignalPulseWidthType& SignalPulseWidthType::setPulseWidthChopped(xs::Boolean value) {
  pulseWidthChopped_Accessor = value;
  return *this;
}

bool SignalPulseWidthType::hasPulseWidthChopped() const noexcept {
  return pulseWidthChopped_Accessor.has_value();
}

uci::type::SignalPulseWidthType& SignalPulseWidthType::clearPulseWidthChopped() noexcept {
  pulseWidthChopped_Accessor.reset();
  return *this;
}

xs::Boolean SignalPulseWidthType::getPulseOnPulse() const {
  if (pulseOnPulse_Accessor) {
    return *pulseOnPulse_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseOnPulse(): An attempt was made to get an optional field that was not enabled, call hasPulseOnPulse() to determine if it is safe to call getPulseOnPulse()");
}

uci::type::SignalPulseWidthType& SignalPulseWidthType::setPulseOnPulse(xs::Boolean value) {
  pulseOnPulse_Accessor = value;
  return *this;
}

bool SignalPulseWidthType::hasPulseOnPulse() const noexcept {
  return pulseOnPulse_Accessor.has_value();
}

uci::type::SignalPulseWidthType& SignalPulseWidthType::clearPulseOnPulse() noexcept {
  pulseOnPulse_Accessor.reset();
  return *this;
}

std::unique_ptr<SignalPulseWidthType> SignalPulseWidthType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalPulseWidthType : type};
  return (requestedType == uci::type::accessorType::signalPulseWidthType) ? boost::make_unique<SignalPulseWidthType>() : nullptr;
}

/**  */
namespace SignalPulseWidthType_Names {

constexpr const char* Extern_Type_Name{"SignalPulseWidthType"};
constexpr const char* PulseWidthQuality_Name{"PulseWidthQuality"};
constexpr const char* PulseWidthChopped_Name{"PulseWidthChopped"};
constexpr const char* PulseOnPulse_Name{"PulseOnPulse"};

} // namespace SignalPulseWidthType_Names

void SignalPulseWidthType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalPulseWidthType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SignalPulseWidthType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SignalPulseWidthType_Names::PulseWidthQuality_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePulseWidthQuality().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalPulseWidthType_Names::PulseWidthChopped_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthChopped(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SignalPulseWidthType_Names::PulseOnPulse_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseOnPulse(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
  SignalPulseWidthBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SignalPulseWidthType::serialize(const uci::type::SignalPulseWidthType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SignalPulseWidthType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SignalPulseWidthType_Names::Extern_Type_Name);
  }
  SignalPulseWidthBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasPulseWidthQuality()) {
    MeasurementQualityEnum::serialize(accessor.getPulseWidthQuality(), node, SignalPulseWidthType_Names::PulseWidthQuality_Name, false);
  }
  if (accessor.hasPulseWidthChopped()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPulseWidthChopped(), node, SignalPulseWidthType_Names::PulseWidthChopped_Name);
  }
  if (accessor.hasPulseOnPulse()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPulseOnPulse(), node, SignalPulseWidthType_Names::PulseOnPulse_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SignalPulseWidthType& SignalPulseWidthType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SignalPulseWidthType>().release());
}

uci::type::SignalPulseWidthType& SignalPulseWidthType::create(const uci::type::SignalPulseWidthType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SignalPulseWidthType> newAccessor{boost::make_unique<asb_uci::type::SignalPulseWidthType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SignalPulseWidthType::destroy(uci::type::SignalPulseWidthType& accessor) {
  delete dynamic_cast<asb_uci::type::SignalPulseWidthType*>(&accessor);
}

} // namespace type

} // namespace uci

