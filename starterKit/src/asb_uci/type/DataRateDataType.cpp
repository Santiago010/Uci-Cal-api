/** @file DataRateDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DataRateDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataRateDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataRateType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DataRateDataType::DataRateDataType() = default;

DataRateDataType::~DataRateDataType() = default;

void DataRateDataType::copy(const uci::type::DataRateDataType& accessor) {
  copyImpl(accessor, false);
}

void DataRateDataType::copyImpl(const uci::type::DataRateDataType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::dataRateDataType)) {
      const auto& accessorImpl = dynamic_cast<const DataRateDataType&>(accessor);
      if (accessorImpl.hasDataRateAverage()) {
        setDataRateAverage(accessorImpl.getDataRateAverage());
      } else {
        clearDataRateAverage();
      }
      if (accessorImpl.hasDataRateMin()) {
        setDataRateMin(accessorImpl.getDataRateMin());
      } else {
        clearDataRateMin();
      }
      if (accessorImpl.hasDataRateMax()) {
        setDataRateMax(accessorImpl.getDataRateMax());
      } else {
        clearDataRateMax();
      }
      if (accessorImpl.hasDataRateDeviation()) {
        setDataRateDeviation(accessorImpl.getDataRateDeviation());
      } else {
        clearDataRateDeviation();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void DataRateDataType::reset() noexcept {
  clearDataRateAverage();
  clearDataRateMin();
  clearDataRateMax();
  clearDataRateDeviation();
}

uci::type::DataRateTypeValue DataRateDataType::getDataRateAverage() const {
  if (dataRateAverage_Accessor) {
    return *dataRateAverage_Accessor;
  }
  throw uci::base::UCIException("Error in getDataRateAverage(): An attempt was made to get an optional field that was not enabled, call hasDataRateAverage() to determine if it is safe to call getDataRateAverage()");
}

uci::type::DataRateDataType& DataRateDataType::setDataRateAverage(uci::type::DataRateTypeValue value) {
  dataRateAverage_Accessor = value;
  return *this;
}

bool DataRateDataType::hasDataRateAverage() const noexcept {
  return dataRateAverage_Accessor.has_value();
}

uci::type::DataRateDataType& DataRateDataType::clearDataRateAverage() noexcept {
  dataRateAverage_Accessor.reset();
  return *this;
}

uci::type::DataRateTypeValue DataRateDataType::getDataRateMin() const {
  if (dataRateMin_Accessor) {
    return *dataRateMin_Accessor;
  }
  throw uci::base::UCIException("Error in getDataRateMin(): An attempt was made to get an optional field that was not enabled, call hasDataRateMin() to determine if it is safe to call getDataRateMin()");
}

uci::type::DataRateDataType& DataRateDataType::setDataRateMin(uci::type::DataRateTypeValue value) {
  dataRateMin_Accessor = value;
  return *this;
}

bool DataRateDataType::hasDataRateMin() const noexcept {
  return dataRateMin_Accessor.has_value();
}

uci::type::DataRateDataType& DataRateDataType::clearDataRateMin() noexcept {
  dataRateMin_Accessor.reset();
  return *this;
}

uci::type::DataRateTypeValue DataRateDataType::getDataRateMax() const {
  if (dataRateMax_Accessor) {
    return *dataRateMax_Accessor;
  }
  throw uci::base::UCIException("Error in getDataRateMax(): An attempt was made to get an optional field that was not enabled, call hasDataRateMax() to determine if it is safe to call getDataRateMax()");
}

uci::type::DataRateDataType& DataRateDataType::setDataRateMax(uci::type::DataRateTypeValue value) {
  dataRateMax_Accessor = value;
  return *this;
}

bool DataRateDataType::hasDataRateMax() const noexcept {
  return dataRateMax_Accessor.has_value();
}

uci::type::DataRateDataType& DataRateDataType::clearDataRateMax() noexcept {
  dataRateMax_Accessor.reset();
  return *this;
}

uci::type::DataRateTypeValue DataRateDataType::getDataRateDeviation() const {
  if (dataRateDeviation_Accessor) {
    return *dataRateDeviation_Accessor;
  }
  throw uci::base::UCIException("Error in getDataRateDeviation(): An attempt was made to get an optional field that was not enabled, call hasDataRateDeviation() to determine if it is safe to call getDataRateDeviation()");
}

uci::type::DataRateDataType& DataRateDataType::setDataRateDeviation(uci::type::DataRateTypeValue value) {
  dataRateDeviation_Accessor = value;
  return *this;
}

bool DataRateDataType::hasDataRateDeviation() const noexcept {
  return dataRateDeviation_Accessor.has_value();
}

uci::type::DataRateDataType& DataRateDataType::clearDataRateDeviation() noexcept {
  dataRateDeviation_Accessor.reset();
  return *this;
}

std::unique_ptr<DataRateDataType> DataRateDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataRateDataType : type};
  return std::unique_ptr<DataRateDataType>(dynamic_cast<DataRateDataType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace DataRateDataType_Names {

constexpr const char* Extern_Type_Name{"DataRateDataType"};
constexpr const char* DataRateAverage_Name{"DataRateAverage"};
constexpr const char* DataRateMin_Name{"DataRateMin"};
constexpr const char* DataRateMax_Name{"DataRateMax"};
constexpr const char* DataRateDeviation_Name{"DataRateDeviation"};

} // namespace DataRateDataType_Names

void DataRateDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DataRateDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DataRateDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DataRateDataType_Names::DataRateAverage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDataRateAverage(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + DataRateDataType_Names::DataRateMin_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDataRateMin(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + DataRateDataType_Names::DataRateMax_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDataRateMax(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + DataRateDataType_Names::DataRateDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDataRateDeviation(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string DataRateDataType::serialize(const uci::type::DataRateDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DataRateDataType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::dataRateDataType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, DataRateDataType_Names::Extern_Type_Name);
    }
    if (accessor.hasDataRateAverage()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getDataRateAverage(), node, DataRateDataType_Names::DataRateAverage_Name);
    }
    if (accessor.hasDataRateMin()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getDataRateMin(), node, DataRateDataType_Names::DataRateMin_Name);
    }
    if (accessor.hasDataRateMax()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getDataRateMax(), node, DataRateDataType_Names::DataRateMax_Name);
    }
    if (accessor.hasDataRateDeviation()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getDataRateDeviation(), node, DataRateDataType_Names::DataRateDeviation_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DataRateDataType& DataRateDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DataRateDataType>().release());
}

uci::type::DataRateDataType& DataRateDataType::create(const uci::type::DataRateDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DataRateDataType> newAccessor{boost::make_unique<asb_uci::type::DataRateDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DataRateDataType::destroy(uci::type::DataRateDataType& accessor) {
  delete dynamic_cast<asb_uci::type::DataRateDataType*>(&accessor);
}

} // namespace type

} // namespace uci

