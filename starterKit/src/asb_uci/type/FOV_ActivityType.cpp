/** @file FOV_ActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/FOV_ActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/FOV_Type.h"
#include "asb_uci/type/PolygonType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/FOV_ActivityType.h"
#include "uci/type/PolygonType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FOV_ActivityType::FOV_ActivityType() = default;

FOV_ActivityType::~FOV_ActivityType() = default;

void FOV_ActivityType::copy(const uci::type::FOV_ActivityType& accessor) {
  copyImpl(accessor, false);
}

void FOV_ActivityType::copyImpl(const uci::type::FOV_ActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    FOV_Type::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const FOV_ActivityType&>(accessor);
    if (accessorImpl.groundFOV_Accessor) {
      setGroundFOV(*(accessorImpl.groundFOV_Accessor));
    } else {
      groundFOV_Accessor.reset();
    }
    if (accessorImpl.hasFOV_Timestamp()) {
      setFOV_Timestamp(accessorImpl.getFOV_Timestamp());
    } else {
      clearFOV_Timestamp();
    }
    if (accessorImpl.hasMaximumEffectiveRange()) {
      setMaximumEffectiveRange(accessorImpl.getMaximumEffectiveRange());
    } else {
      clearMaximumEffectiveRange();
    }
  }
}

void FOV_ActivityType::reset() noexcept {
  FOV_Type::reset();
  groundFOV_Accessor.reset();
  clearFOV_Timestamp();
  clearMaximumEffectiveRange();
}

uci::type::PolygonType& FOV_ActivityType::getGroundFOV_() const {
  if (groundFOV_Accessor) {
    return *groundFOV_Accessor;
  }
  throw uci::base::UCIException("Error in getGroundFOV(): An attempt was made to get an optional field that was not enabled, call hasGroundFOV() to determine if it is safe to call getGroundFOV()");
}

const uci::type::PolygonType& FOV_ActivityType::getGroundFOV() const {
  return getGroundFOV_();
}

uci::type::PolygonType& FOV_ActivityType::getGroundFOV() {
  return getGroundFOV_();
}

uci::type::FOV_ActivityType& FOV_ActivityType::setGroundFOV(const uci::type::PolygonType& accessor) {
  enableGroundFOV();
  if (&accessor != groundFOV_Accessor.get()) {
    groundFOV_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FOV_ActivityType::hasGroundFOV() const noexcept {
  return static_cast<bool>(groundFOV_Accessor);
}

uci::type::PolygonType& FOV_ActivityType::enableGroundFOV(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::polygonType : type};
  if ((!groundFOV_Accessor) || (groundFOV_Accessor->getAccessorType() != requestedType)) {
    groundFOV_Accessor = PolygonType::create(requestedType);
    if (!groundFOV_Accessor) {
      throw uci::base::UCIException("Error in enableGroundFOV(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *groundFOV_Accessor;
}

uci::type::FOV_ActivityType& FOV_ActivityType::clearGroundFOV() noexcept {
  groundFOV_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue FOV_ActivityType::getFOV_Timestamp() const {
  if (fOV_Timestamp_Accessor) {
    return *fOV_Timestamp_Accessor;
  }
  throw uci::base::UCIException("Error in getFOV_Timestamp(): An attempt was made to get an optional field that was not enabled, call hasFOV_Timestamp() to determine if it is safe to call getFOV_Timestamp()");
}

uci::type::FOV_ActivityType& FOV_ActivityType::setFOV_Timestamp(uci::type::DateTimeTypeValue value) {
  fOV_Timestamp_Accessor = value;
  return *this;
}

bool FOV_ActivityType::hasFOV_Timestamp() const noexcept {
  return fOV_Timestamp_Accessor.has_value();
}

uci::type::FOV_ActivityType& FOV_ActivityType::clearFOV_Timestamp() noexcept {
  fOV_Timestamp_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue FOV_ActivityType::getMaximumEffectiveRange() const {
  if (maximumEffectiveRange_Accessor) {
    return *maximumEffectiveRange_Accessor;
  }
  throw uci::base::UCIException("Error in getMaximumEffectiveRange(): An attempt was made to get an optional field that was not enabled, call hasMaximumEffectiveRange() to determine if it is safe to call getMaximumEffectiveRange()");
}

uci::type::FOV_ActivityType& FOV_ActivityType::setMaximumEffectiveRange(uci::type::DistanceTypeValue value) {
  maximumEffectiveRange_Accessor = value;
  return *this;
}

bool FOV_ActivityType::hasMaximumEffectiveRange() const noexcept {
  return maximumEffectiveRange_Accessor.has_value();
}

uci::type::FOV_ActivityType& FOV_ActivityType::clearMaximumEffectiveRange() noexcept {
  maximumEffectiveRange_Accessor.reset();
  return *this;
}

std::unique_ptr<FOV_ActivityType> FOV_ActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fOV_ActivityType : type};
  return (requestedType == uci::type::accessorType::fOV_ActivityType) ? boost::make_unique<FOV_ActivityType>() : nullptr;
}

/**  */
namespace FOV_ActivityType_Names {

constexpr const char* Extern_Type_Name{"FOV_ActivityType"};
constexpr const char* GroundFOV_Name{"GroundFOV"};
constexpr const char* FOV_Timestamp_Name{"FOV_Timestamp"};
constexpr const char* MaximumEffectiveRange_Name{"MaximumEffectiveRange"};

} // namespace FOV_ActivityType_Names

void FOV_ActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FOV_ActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FOV_ActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FOV_ActivityType_Names::GroundFOV_Name) {
      PolygonType::deserialize(valueType.second, accessor.enableGroundFOV(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FOV_ActivityType_Names::FOV_Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFOV_Timestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + FOV_ActivityType_Names::MaximumEffectiveRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumEffectiveRange(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
  FOV_Type::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string FOV_ActivityType::serialize(const uci::type::FOV_ActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FOV_ActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FOV_ActivityType_Names::Extern_Type_Name);
  }
  FOV_Type::serialize(accessor, node, "", false, false, false);
  if (accessor.hasGroundFOV()) {
    PolygonType::serialize(accessor.getGroundFOV(), node, FOV_ActivityType_Names::GroundFOV_Name);
  }
  if (accessor.hasFOV_Timestamp()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getFOV_Timestamp(), node, FOV_ActivityType_Names::FOV_Timestamp_Name);
  }
  if (accessor.hasMaximumEffectiveRange()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaximumEffectiveRange(), node, FOV_ActivityType_Names::MaximumEffectiveRange_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FOV_ActivityType& FOV_ActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FOV_ActivityType>().release());
}

uci::type::FOV_ActivityType& FOV_ActivityType::create(const uci::type::FOV_ActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FOV_ActivityType> newAccessor{boost::make_unique<asb_uci::type::FOV_ActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FOV_ActivityType::destroy(uci::type::FOV_ActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::FOV_ActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

