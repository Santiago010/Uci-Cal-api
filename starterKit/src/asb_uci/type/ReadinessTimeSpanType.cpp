/** @file ReadinessTimeSpanType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ReadinessTimeSpanType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/ScheduleType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ReadinessTimeSpanType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ScheduleType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ReadinessTimeSpanType::ReadinessTimeSpanType() = default;

ReadinessTimeSpanType::~ReadinessTimeSpanType() = default;

void ReadinessTimeSpanType::copy(const uci::type::ReadinessTimeSpanType& accessor) {
  copyImpl(accessor, false);
}

void ReadinessTimeSpanType::copyImpl(const uci::type::ReadinessTimeSpanType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ReadinessTimeSpanType&>(accessor);
    if (accessorImpl.byMission_Accessor) {
      setByMission(*(accessorImpl.byMission_Accessor));
    } else {
      byMission_Accessor.reset();
    }
    if (accessorImpl.subMission_Accessor) {
      setSubMission(*(accessorImpl.subMission_Accessor));
    } else {
      subMission_Accessor.reset();
    }
  }
}

void ReadinessTimeSpanType::reset() noexcept {
  byMission_Accessor.reset();
  subMission_Accessor.reset();
}

uci::type::ReadinessTimeSpanType::ReadinessTimeSpanTypeChoice ReadinessTimeSpanType::getReadinessTimeSpanTypeChoiceOrdinal() const noexcept {
  if (byMission_Accessor) {
    return READINESSTIMESPANTYPE_CHOICE_BYMISSION;
  }
  if (subMission_Accessor) {
    return READINESSTIMESPANTYPE_CHOICE_SUBMISSION;
  }
  return READINESSTIMESPANTYPE_CHOICE_NONE;
}

uci::type::ReadinessTimeSpanType& ReadinessTimeSpanType::setReadinessTimeSpanTypeChoiceOrdinal(uci::type::ReadinessTimeSpanType::ReadinessTimeSpanTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case READINESSTIMESPANTYPE_CHOICE_BYMISSION:
      chooseByMission("setReadinessTimeSpanTypeChoiceOrdinal", type);
      break;
    case READINESSTIMESPANTYPE_CHOICE_SUBMISSION:
      chooseSubMission("setReadinessTimeSpanTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setReadinessTimeSpanTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EmptyType& ReadinessTimeSpanType::getByMission_() const {
  if (byMission_Accessor) {
    return *byMission_Accessor;
  }
  throw uci::base::UCIException("Error in getByMission(): An attempt was made to get an optional field that was not enabled, call hasByMission() to determine if it is safe to call getByMission()");
}

const uci::type::EmptyType& ReadinessTimeSpanType::getByMission() const {
  return getByMission_();
}

uci::type::EmptyType& ReadinessTimeSpanType::getByMission() {
  return getByMission_();
}

uci::type::ReadinessTimeSpanType& ReadinessTimeSpanType::setByMission(const uci::type::EmptyType& value) {
  return setByMission(value.c_str());
}

uci::type::ReadinessTimeSpanType& ReadinessTimeSpanType::setByMission(const std::string& value) {
  return setByMission(value.c_str());
}

uci::type::ReadinessTimeSpanType& ReadinessTimeSpanType::setByMission(const char * value) {
  chooseByMission().setStringValue(value);
  return *this;
}

bool ReadinessTimeSpanType::isByMission() const noexcept {
  return static_cast<bool>(byMission_Accessor);
}

uci::type::EmptyType& ReadinessTimeSpanType::chooseByMission(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  subMission_Accessor.reset();
  if (!byMission_Accessor) {
    byMission_Accessor = EmptyType::create(type);
  }
  return *byMission_Accessor;
}

uci::type::EmptyType& ReadinessTimeSpanType::chooseByMission(uci::base::accessorType::AccessorType type) {
  return chooseByMission("chooseByMission", type);
}

uci::type::ScheduleType& ReadinessTimeSpanType::getSubMission_() const {
  if (subMission_Accessor) {
    return *subMission_Accessor;
  }
  throw uci::base::UCIException("Error in getSubMission(): Unable to get SubMission, field not selected");
}

const uci::type::ScheduleType& ReadinessTimeSpanType::getSubMission() const {
  return getSubMission_();
}

uci::type::ScheduleType& ReadinessTimeSpanType::getSubMission() {
  return getSubMission_();
}

uci::type::ReadinessTimeSpanType& ReadinessTimeSpanType::setSubMission(const uci::type::ScheduleType& accessor) {
  chooseSubMission(accessor.getAccessorType());
  if (&accessor != subMission_Accessor.get()) {
    subMission_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ReadinessTimeSpanType::isSubMission() const noexcept {
  return static_cast<bool>(subMission_Accessor);
}

uci::type::ScheduleType& ReadinessTimeSpanType::chooseSubMission(const std::string& method, uci::base::accessorType::AccessorType type) {
  byMission_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::scheduleType : type};
  if ((!subMission_Accessor) || (subMission_Accessor->getAccessorType() != requestedType)) {
    subMission_Accessor = ScheduleType::create(type);
    if (!subMission_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subMission_Accessor;
}

uci::type::ScheduleType& ReadinessTimeSpanType::chooseSubMission(uci::base::accessorType::AccessorType type) {
  return chooseSubMission("chooseSubMission", type);
}

std::unique_ptr<ReadinessTimeSpanType> ReadinessTimeSpanType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::readinessTimeSpanType : type};
  return (requestedType == uci::type::accessorType::readinessTimeSpanType) ? boost::make_unique<ReadinessTimeSpanType>() : nullptr;
}

/**  */
namespace ReadinessTimeSpanType_Names {

constexpr const char* Extern_Type_Name{"ReadinessTimeSpanType"};
constexpr const char* ByMission_Name{"ByMission"};
constexpr const char* SubMission_Name{"SubMission"};

} // namespace ReadinessTimeSpanType_Names

void ReadinessTimeSpanType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ReadinessTimeSpanType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ReadinessTimeSpanType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ReadinessTimeSpanType_Names::ByMission_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseByMission().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + ReadinessTimeSpanType_Names::SubMission_Name) {
      ScheduleType::deserialize(valueType.second, accessor.chooseSubMission(), nodeName, nsPrefix);
    }
  }
}

std::string ReadinessTimeSpanType::serialize(const uci::type::ReadinessTimeSpanType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ReadinessTimeSpanType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ReadinessTimeSpanType_Names::Extern_Type_Name);
  }
  if (accessor.isByMission()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getByMission(), node, ReadinessTimeSpanType_Names::ByMission_Name);
  } else if (accessor.isSubMission()) {
    ScheduleType::serialize(accessor.getSubMission(), node, ReadinessTimeSpanType_Names::SubMission_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ReadinessTimeSpanType& ReadinessTimeSpanType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ReadinessTimeSpanType>().release());
}

uci::type::ReadinessTimeSpanType& ReadinessTimeSpanType::create(const uci::type::ReadinessTimeSpanType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ReadinessTimeSpanType> newAccessor{boost::make_unique<asb_uci::type::ReadinessTimeSpanType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ReadinessTimeSpanType::destroy(uci::type::ReadinessTimeSpanType& accessor) {
  delete dynamic_cast<asb_uci::type::ReadinessTimeSpanType*>(&accessor);
}

} // namespace type

} // namespace uci

