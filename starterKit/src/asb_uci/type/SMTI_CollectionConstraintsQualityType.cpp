/** @file SMTI_CollectionConstraintsQualityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SMTI_CollectionConstraintsQualityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/NIIRS_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NIIRS_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SMTI_CollectionConstraintsQualityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SMTI_CollectionConstraintsQualityType::SMTI_CollectionConstraintsQualityType() = default;

SMTI_CollectionConstraintsQualityType::~SMTI_CollectionConstraintsQualityType() = default;

void SMTI_CollectionConstraintsQualityType::copy(const uci::type::SMTI_CollectionConstraintsQualityType& accessor) {
  copyImpl(accessor, false);
}

void SMTI_CollectionConstraintsQualityType::copyImpl(const uci::type::SMTI_CollectionConstraintsQualityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SMTI_CollectionConstraintsQualityType&>(accessor);
    if (accessorImpl.mTIIRS_Accessor) {
      setMTIIRS(*(accessorImpl.mTIIRS_Accessor));
    } else {
      mTIIRS_Accessor.reset();
    }
    circularErrorProbable90_Accessor = (accessorImpl.circularErrorProbable90_Accessor ? accessorImpl.circularErrorProbable90_Accessor : boost::none);
  }
}

void SMTI_CollectionConstraintsQualityType::reset() noexcept {
  mTIIRS_Accessor.reset();
  circularErrorProbable90_Accessor.reset();
}

uci::type::SMTI_CollectionConstraintsQualityType::SMTI_CollectionConstraintsQualityTypeChoice SMTI_CollectionConstraintsQualityType::getSMTI_CollectionConstraintsQualityTypeChoiceOrdinal() const noexcept {
  if (mTIIRS_Accessor) {
    return SMTI_COLLECTIONCONSTRAINTSQUALITYTYPE_CHOICE_MTIIRS;
  }
  if (circularErrorProbable90_Accessor) {
    return SMTI_COLLECTIONCONSTRAINTSQUALITYTYPE_CHOICE_CIRCULARERRORPROBABLE90;
  }
  return SMTI_COLLECTIONCONSTRAINTSQUALITYTYPE_CHOICE_NONE;
}

uci::type::SMTI_CollectionConstraintsQualityType& SMTI_CollectionConstraintsQualityType::setSMTI_CollectionConstraintsQualityTypeChoiceOrdinal(uci::type::SMTI_CollectionConstraintsQualityType::SMTI_CollectionConstraintsQualityTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case SMTI_COLLECTIONCONSTRAINTSQUALITYTYPE_CHOICE_MTIIRS:
      chooseMTIIRS("setSMTI_CollectionConstraintsQualityTypeChoiceOrdinal", type);
      break;
    case SMTI_COLLECTIONCONSTRAINTSQUALITYTYPE_CHOICE_CIRCULARERRORPROBABLE90:
      chooseCircularErrorProbable90();
      break;
    default:
      throw uci::base::UCIException("Error in setSMTI_CollectionConstraintsQualityTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::NIIRS_Type& SMTI_CollectionConstraintsQualityType::getMTIIRS_() const {
  if (mTIIRS_Accessor) {
    return *mTIIRS_Accessor;
  }
  throw uci::base::UCIException("Error in getMTIIRS(): An attempt was made to get an optional field that was not enabled, call hasMTIIRS() to determine if it is safe to call getMTIIRS()");
}

const uci::type::NIIRS_Type& SMTI_CollectionConstraintsQualityType::getMTIIRS() const {
  return getMTIIRS_();
}

uci::type::NIIRS_Type& SMTI_CollectionConstraintsQualityType::getMTIIRS() {
  return getMTIIRS_();
}

uci::type::SMTI_CollectionConstraintsQualityType& SMTI_CollectionConstraintsQualityType::setMTIIRS(const uci::type::NIIRS_Type& value) {
  return setMTIIRS(value.c_str());
}

uci::type::SMTI_CollectionConstraintsQualityType& SMTI_CollectionConstraintsQualityType::setMTIIRS(const std::string& value) {
  return setMTIIRS(value.c_str());
}

uci::type::SMTI_CollectionConstraintsQualityType& SMTI_CollectionConstraintsQualityType::setMTIIRS(const char * value) {
  chooseMTIIRS().setStringValue(value);
  return *this;
}

bool SMTI_CollectionConstraintsQualityType::isMTIIRS() const noexcept {
  return static_cast<bool>(mTIIRS_Accessor);
}

uci::type::NIIRS_Type& SMTI_CollectionConstraintsQualityType::chooseMTIIRS(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  circularErrorProbable90_Accessor.reset();
  if (!mTIIRS_Accessor) {
    mTIIRS_Accessor = NIIRS_Type::create(type);
  }
  return *mTIIRS_Accessor;
}

uci::type::NIIRS_Type& SMTI_CollectionConstraintsQualityType::chooseMTIIRS(uci::base::accessorType::AccessorType type) {
  return chooseMTIIRS("chooseMTIIRS", type);
}

uci::type::DistanceTypeValue SMTI_CollectionConstraintsQualityType::getCircularErrorProbable90() const {
  if (circularErrorProbable90_Accessor) {
    return *circularErrorProbable90_Accessor;
  }
  throw uci::base::UCIException("Error in getCircularErrorProbable90(): Unable to get CircularErrorProbable90, field not selected");
}

uci::type::SMTI_CollectionConstraintsQualityType& SMTI_CollectionConstraintsQualityType::setCircularErrorProbable90(uci::type::DistanceTypeValue value) {
  chooseCircularErrorProbable90();
  circularErrorProbable90_Accessor = value;
  return *this;
}

bool SMTI_CollectionConstraintsQualityType::isCircularErrorProbable90() const noexcept {
  return static_cast<bool>(circularErrorProbable90_Accessor);
}

void SMTI_CollectionConstraintsQualityType::chooseCircularErrorProbable90() {
  mTIIRS_Accessor.reset();
  if (!circularErrorProbable90_Accessor) {
    circularErrorProbable90_Accessor = boost::optional<asb_xs::Double>();
  }
}

std::unique_ptr<SMTI_CollectionConstraintsQualityType> SMTI_CollectionConstraintsQualityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sMTI_CollectionConstraintsQualityType : type};
  return (requestedType == uci::type::accessorType::sMTI_CollectionConstraintsQualityType) ? boost::make_unique<SMTI_CollectionConstraintsQualityType>() : nullptr;
}

/**  */
namespace SMTI_CollectionConstraintsQualityType_Names {

constexpr const char* Extern_Type_Name{"SMTI_CollectionConstraintsQualityType"};
constexpr const char* MTIIRS_Name{"MTIIRS"};
constexpr const char* CircularErrorProbable90_Name{"CircularErrorProbable90"};

} // namespace SMTI_CollectionConstraintsQualityType_Names

void SMTI_CollectionConstraintsQualityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SMTI_CollectionConstraintsQualityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SMTI_CollectionConstraintsQualityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SMTI_CollectionConstraintsQualityType_Names::MTIIRS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseMTIIRS().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + SMTI_CollectionConstraintsQualityType_Names::CircularErrorProbable90_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCircularErrorProbable90(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string SMTI_CollectionConstraintsQualityType::serialize(const uci::type::SMTI_CollectionConstraintsQualityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SMTI_CollectionConstraintsQualityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SMTI_CollectionConstraintsQualityType_Names::Extern_Type_Name);
  }
  if (accessor.isMTIIRS()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMTIIRS(), node, SMTI_CollectionConstraintsQualityType_Names::MTIIRS_Name);
  } else if (accessor.isCircularErrorProbable90()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCircularErrorProbable90(), node, SMTI_CollectionConstraintsQualityType_Names::CircularErrorProbable90_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SMTI_CollectionConstraintsQualityType& SMTI_CollectionConstraintsQualityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SMTI_CollectionConstraintsQualityType>().release());
}

uci::type::SMTI_CollectionConstraintsQualityType& SMTI_CollectionConstraintsQualityType::create(const uci::type::SMTI_CollectionConstraintsQualityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SMTI_CollectionConstraintsQualityType> newAccessor{boost::make_unique<asb_uci::type::SMTI_CollectionConstraintsQualityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SMTI_CollectionConstraintsQualityType::destroy(uci::type::SMTI_CollectionConstraintsQualityType& accessor) {
  delete dynamic_cast<asb_uci::type::SMTI_CollectionConstraintsQualityType*>(&accessor);
}

} // namespace type

} // namespace uci

