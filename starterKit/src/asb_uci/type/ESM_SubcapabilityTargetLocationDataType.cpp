/** @file ESM_SubcapabilityTargetLocationDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ESM_SubcapabilityTargetLocationDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/NED_ConeType.h"
#include "asb_uci/type/PointTargetType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ESM_SubcapabilityTargetLocationDataType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/NED_ConeType.h"
#include "uci/type/PointTargetType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ESM_SubcapabilityTargetLocationDataType::ESM_SubcapabilityTargetLocationDataType() = default;

ESM_SubcapabilityTargetLocationDataType::~ESM_SubcapabilityTargetLocationDataType() = default;

void ESM_SubcapabilityTargetLocationDataType::copy(const uci::type::ESM_SubcapabilityTargetLocationDataType& accessor) {
  copyImpl(accessor, false);
}

void ESM_SubcapabilityTargetLocationDataType::copyImpl(const uci::type::ESM_SubcapabilityTargetLocationDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ESM_SubcapabilityTargetLocationDataType&>(accessor);
    if (accessorImpl.entityID_Accessor) {
      setEntityID(*(accessorImpl.entityID_Accessor));
    } else {
      entityID_Accessor.reset();
    }
    if (accessorImpl.dwellFOV_Accessor) {
      setDwellFOV(*(accessorImpl.dwellFOV_Accessor));
    } else {
      dwellFOV_Accessor.reset();
    }
    if (accessorImpl.pointTarget_Accessor) {
      setPointTarget(*(accessorImpl.pointTarget_Accessor));
    } else {
      pointTarget_Accessor.reset();
    }
  }
}

void ESM_SubcapabilityTargetLocationDataType::reset() noexcept {
  entityID_Accessor.reset();
  dwellFOV_Accessor.reset();
  pointTarget_Accessor.reset();
}

uci::type::ESM_SubcapabilityTargetLocationDataType::ESM_SubcapabilityTargetLocationDataTypeChoice ESM_SubcapabilityTargetLocationDataType::getESM_SubcapabilityTargetLocationDataTypeChoiceOrdinal() const noexcept {
  if (entityID_Accessor) {
    return ESM_SUBCAPABILITYTARGETLOCATIONDATATYPE_CHOICE_ENTITYID;
  }
  if (dwellFOV_Accessor) {
    return ESM_SUBCAPABILITYTARGETLOCATIONDATATYPE_CHOICE_DWELLFOV;
  }
  if (pointTarget_Accessor) {
    return ESM_SUBCAPABILITYTARGETLOCATIONDATATYPE_CHOICE_POINTTARGET;
  }
  return ESM_SUBCAPABILITYTARGETLOCATIONDATATYPE_CHOICE_NONE;
}

uci::type::ESM_SubcapabilityTargetLocationDataType& ESM_SubcapabilityTargetLocationDataType::setESM_SubcapabilityTargetLocationDataTypeChoiceOrdinal(uci::type::ESM_SubcapabilityTargetLocationDataType::ESM_SubcapabilityTargetLocationDataTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ESM_SUBCAPABILITYTARGETLOCATIONDATATYPE_CHOICE_ENTITYID:
      chooseEntityID("setESM_SubcapabilityTargetLocationDataTypeChoiceOrdinal", type);
      break;
    case ESM_SUBCAPABILITYTARGETLOCATIONDATATYPE_CHOICE_DWELLFOV:
      chooseDwellFOV("setESM_SubcapabilityTargetLocationDataTypeChoiceOrdinal", type);
      break;
    case ESM_SUBCAPABILITYTARGETLOCATIONDATATYPE_CHOICE_POINTTARGET:
      choosePointTarget("setESM_SubcapabilityTargetLocationDataTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setESM_SubcapabilityTargetLocationDataTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EntityID_Type& ESM_SubcapabilityTargetLocationDataType::getEntityID_() const {
  if (entityID_Accessor) {
    return *entityID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityID(): Unable to get EntityID, field not selected");
}

const uci::type::EntityID_Type& ESM_SubcapabilityTargetLocationDataType::getEntityID() const {
  return getEntityID_();
}

uci::type::EntityID_Type& ESM_SubcapabilityTargetLocationDataType::getEntityID() {
  return getEntityID_();
}

uci::type::ESM_SubcapabilityTargetLocationDataType& ESM_SubcapabilityTargetLocationDataType::setEntityID(const uci::type::EntityID_Type& accessor) {
  chooseEntityID("setEntityID", accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ESM_SubcapabilityTargetLocationDataType::isEntityID() const noexcept {
  return static_cast<bool>(entityID_Accessor);
}

uci::type::EntityID_Type& ESM_SubcapabilityTargetLocationDataType::chooseEntityID(const std::string& method, uci::base::accessorType::AccessorType type) {
  dwellFOV_Accessor.reset();
  pointTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(type);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::EntityID_Type& ESM_SubcapabilityTargetLocationDataType::chooseEntityID(uci::base::accessorType::AccessorType type) {
  return chooseEntityID("chooseEntityID", type);
}

uci::type::NED_ConeType& ESM_SubcapabilityTargetLocationDataType::getDwellFOV_() const {
  if (dwellFOV_Accessor) {
    return *dwellFOV_Accessor;
  }
  throw uci::base::UCIException("Error in getDwellFOV(): Unable to get DwellFOV, field not selected");
}

const uci::type::NED_ConeType& ESM_SubcapabilityTargetLocationDataType::getDwellFOV() const {
  return getDwellFOV_();
}

uci::type::NED_ConeType& ESM_SubcapabilityTargetLocationDataType::getDwellFOV() {
  return getDwellFOV_();
}

uci::type::ESM_SubcapabilityTargetLocationDataType& ESM_SubcapabilityTargetLocationDataType::setDwellFOV(const uci::type::NED_ConeType& accessor) {
  chooseDwellFOV();
  if (&accessor != dwellFOV_Accessor.get()) {
    dwellFOV_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_SubcapabilityTargetLocationDataType::isDwellFOV() const noexcept {
  return static_cast<bool>(dwellFOV_Accessor);
}

uci::type::NED_ConeType& ESM_SubcapabilityTargetLocationDataType::chooseDwellFOV(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  pointTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::nED_ConeType : type};
  if ((!dwellFOV_Accessor) || (dwellFOV_Accessor->getAccessorType() != requestedType)) {
    dwellFOV_Accessor = NED_ConeType::create(type);
    if (!dwellFOV_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dwellFOV_Accessor;
}

uci::type::NED_ConeType& ESM_SubcapabilityTargetLocationDataType::chooseDwellFOV(uci::base::accessorType::AccessorType type) {
  return chooseDwellFOV("chooseDwellFOV", type);
}

uci::type::PointTargetType& ESM_SubcapabilityTargetLocationDataType::getPointTarget_() const {
  if (pointTarget_Accessor) {
    return *pointTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getPointTarget(): Unable to get PointTarget, field not selected");
}

const uci::type::PointTargetType& ESM_SubcapabilityTargetLocationDataType::getPointTarget() const {
  return getPointTarget_();
}

uci::type::PointTargetType& ESM_SubcapabilityTargetLocationDataType::getPointTarget() {
  return getPointTarget_();
}

uci::type::ESM_SubcapabilityTargetLocationDataType& ESM_SubcapabilityTargetLocationDataType::setPointTarget(const uci::type::PointTargetType& accessor) {
  choosePointTarget();
  if (&accessor != pointTarget_Accessor.get()) {
    pointTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_SubcapabilityTargetLocationDataType::isPointTarget() const noexcept {
  return static_cast<bool>(pointTarget_Accessor);
}

uci::type::PointTargetType& ESM_SubcapabilityTargetLocationDataType::choosePointTarget(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  dwellFOV_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pointTargetType : type};
  if ((!pointTarget_Accessor) || (pointTarget_Accessor->getAccessorType() != requestedType)) {
    pointTarget_Accessor = PointTargetType::create(type);
    if (!pointTarget_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pointTarget_Accessor;
}

uci::type::PointTargetType& ESM_SubcapabilityTargetLocationDataType::choosePointTarget(uci::base::accessorType::AccessorType type) {
  return choosePointTarget("choosePointTarget", type);
}

std::unique_ptr<ESM_SubcapabilityTargetLocationDataType> ESM_SubcapabilityTargetLocationDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_SubcapabilityTargetLocationDataType : type};
  return (requestedType == uci::type::accessorType::eSM_SubcapabilityTargetLocationDataType) ? boost::make_unique<ESM_SubcapabilityTargetLocationDataType>() : nullptr;
}

/**  */
namespace ESM_SubcapabilityTargetLocationDataType_Names {

constexpr const char* Extern_Type_Name{"ESM_SubcapabilityTargetLocationDataType"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* DwellFOV_Name{"DwellFOV"};
constexpr const char* PointTarget_Name{"PointTarget"};

} // namespace ESM_SubcapabilityTargetLocationDataType_Names

void ESM_SubcapabilityTargetLocationDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ESM_SubcapabilityTargetLocationDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ESM_SubcapabilityTargetLocationDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ESM_SubcapabilityTargetLocationDataType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_SubcapabilityTargetLocationDataType_Names::DwellFOV_Name) {
      NED_ConeType::deserialize(valueType.second, accessor.chooseDwellFOV(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_SubcapabilityTargetLocationDataType_Names::PointTarget_Name) {
      PointTargetType::deserialize(valueType.second, accessor.choosePointTarget(), nodeName, nsPrefix);
    }
  }
}

std::string ESM_SubcapabilityTargetLocationDataType::serialize(const uci::type::ESM_SubcapabilityTargetLocationDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ESM_SubcapabilityTargetLocationDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ESM_SubcapabilityTargetLocationDataType_Names::Extern_Type_Name);
  }
  if (accessor.isEntityID()) {
    EntityID_Type::serialize(accessor.getEntityID(), node, ESM_SubcapabilityTargetLocationDataType_Names::EntityID_Name);
  } else if (accessor.isDwellFOV()) {
    NED_ConeType::serialize(accessor.getDwellFOV(), node, ESM_SubcapabilityTargetLocationDataType_Names::DwellFOV_Name);
  } else if (accessor.isPointTarget()) {
    PointTargetType::serialize(accessor.getPointTarget(), node, ESM_SubcapabilityTargetLocationDataType_Names::PointTarget_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ESM_SubcapabilityTargetLocationDataType& ESM_SubcapabilityTargetLocationDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ESM_SubcapabilityTargetLocationDataType>().release());
}

uci::type::ESM_SubcapabilityTargetLocationDataType& ESM_SubcapabilityTargetLocationDataType::create(const uci::type::ESM_SubcapabilityTargetLocationDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ESM_SubcapabilityTargetLocationDataType> newAccessor{boost::make_unique<asb_uci::type::ESM_SubcapabilityTargetLocationDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ESM_SubcapabilityTargetLocationDataType::destroy(uci::type::ESM_SubcapabilityTargetLocationDataType& accessor) {
  delete dynamic_cast<asb_uci::type::ESM_SubcapabilityTargetLocationDataType*>(&accessor);
}

} // namespace type

} // namespace uci

