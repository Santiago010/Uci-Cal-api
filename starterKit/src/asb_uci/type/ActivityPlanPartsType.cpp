/** @file ActivityPlanPartsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ActivityPlanPartsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityTypeEnum.h"
#include "asb_uci/type/EmptyType.h"
#include "asb_uci/type/PlanPartsBaseType.h"
#include "asb_uci/type/SupportCapabilityTypeEnum.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityPlanPartsType.h"
#include "uci/type/CapabilityTypeEnum.h"
#include "uci/type/EmptyType.h"
#include "uci/type/SupportCapabilityTypeEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ActivityPlanPartsType::ActivityPlanPartsType()
  : capabilityCommand_Accessor{boost::make_unique<CapabilityCommand>(0, 25)},
    supportingCapabilityCommand_Accessor{boost::make_unique<SupportingCapabilityCommand>(0, 4)} {
}

ActivityPlanPartsType::~ActivityPlanPartsType() = default;

void ActivityPlanPartsType::copy(const uci::type::ActivityPlanPartsType& accessor) {
  copyImpl(accessor, false);
}

void ActivityPlanPartsType::copyImpl(const uci::type::ActivityPlanPartsType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::activityPlanPartsType)) {
      PlanPartsBaseType::copyImpl(accessor, false);
      const auto& accessorImpl = dynamic_cast<const ActivityPlanPartsType&>(accessor);
      setCapabilityCommand(*(accessorImpl.capabilityCommand_Accessor));
      setSupportingCapabilityCommand(*(accessorImpl.supportingCapabilityCommand_Accessor));
      if (accessorImpl.vehicleSettings_Accessor) {
        setVehicleSettings(*(accessorImpl.vehicleSettings_Accessor));
      } else {
        vehicleSettings_Accessor.reset();
      }
      if (accessorImpl.commsUsage_Accessor) {
        setCommsUsage(*(accessorImpl.commsUsage_Accessor));
      } else {
        commsUsage_Accessor.reset();
      }
      if (accessorImpl.productTasks_Accessor) {
        setProductTasks(*(accessorImpl.productTasks_Accessor));
      } else {
        productTasks_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void ActivityPlanPartsType::reset() noexcept {
  PlanPartsBaseType::reset();
  capabilityCommand_Accessor->reset();
  supportingCapabilityCommand_Accessor->reset();
  vehicleSettings_Accessor.reset();
  commsUsage_Accessor.reset();
  productTasks_Accessor.reset();
}

const uci::type::ActivityPlanPartsType::CapabilityCommand& ActivityPlanPartsType::getCapabilityCommand() const {
  return *capabilityCommand_Accessor;
}

uci::type::ActivityPlanPartsType::CapabilityCommand& ActivityPlanPartsType::getCapabilityCommand() {
  return *capabilityCommand_Accessor;
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::setCapabilityCommand(const uci::type::ActivityPlanPartsType::CapabilityCommand& accessor) {
  if (&accessor != capabilityCommand_Accessor.get()) {
    capabilityCommand_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ActivityPlanPartsType::SupportingCapabilityCommand& ActivityPlanPartsType::getSupportingCapabilityCommand() const {
  return *supportingCapabilityCommand_Accessor;
}

uci::type::ActivityPlanPartsType::SupportingCapabilityCommand& ActivityPlanPartsType::getSupportingCapabilityCommand() {
  return *supportingCapabilityCommand_Accessor;
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::setSupportingCapabilityCommand(const uci::type::ActivityPlanPartsType::SupportingCapabilityCommand& accessor) {
  if (&accessor != supportingCapabilityCommand_Accessor.get()) {
    supportingCapabilityCommand_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EmptyType& ActivityPlanPartsType::getVehicleSettings_() const {
  if (vehicleSettings_Accessor) {
    return *vehicleSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getVehicleSettings(): An attempt was made to get an optional field that was not enabled, call hasVehicleSettings() to determine if it is safe to call getVehicleSettings()");
}

const uci::type::EmptyType& ActivityPlanPartsType::getVehicleSettings() const {
  return getVehicleSettings_();
}

uci::type::EmptyType& ActivityPlanPartsType::getVehicleSettings() {
  return getVehicleSettings_();
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::setVehicleSettings(const uci::type::EmptyType& value) {
  return setVehicleSettings(value.c_str());
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::setVehicleSettings(const std::string& value) {
  return setVehicleSettings(value.c_str());
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::setVehicleSettings(const char* value) {
  enableVehicleSettings().setStringValue(value);
  return *this;
}

bool ActivityPlanPartsType::hasVehicleSettings() const noexcept {
  return static_cast<bool>(vehicleSettings_Accessor);
}

uci::type::EmptyType& ActivityPlanPartsType::enableVehicleSettings(uci::base::accessorType::AccessorType type) {
  if (!vehicleSettings_Accessor) {
    vehicleSettings_Accessor = EmptyType::create(type);
  }
  return *vehicleSettings_Accessor;
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::clearVehicleSettings() noexcept {
  vehicleSettings_Accessor.reset();
  return *this;
}

uci::type::EmptyType& ActivityPlanPartsType::getCommsUsage_() const {
  if (commsUsage_Accessor) {
    return *commsUsage_Accessor;
  }
  throw uci::base::UCIException("Error in getCommsUsage(): An attempt was made to get an optional field that was not enabled, call hasCommsUsage() to determine if it is safe to call getCommsUsage()");
}

const uci::type::EmptyType& ActivityPlanPartsType::getCommsUsage() const {
  return getCommsUsage_();
}

uci::type::EmptyType& ActivityPlanPartsType::getCommsUsage() {
  return getCommsUsage_();
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::setCommsUsage(const uci::type::EmptyType& value) {
  return setCommsUsage(value.c_str());
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::setCommsUsage(const std::string& value) {
  return setCommsUsage(value.c_str());
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::setCommsUsage(const char* value) {
  enableCommsUsage().setStringValue(value);
  return *this;
}

bool ActivityPlanPartsType::hasCommsUsage() const noexcept {
  return static_cast<bool>(commsUsage_Accessor);
}

uci::type::EmptyType& ActivityPlanPartsType::enableCommsUsage(uci::base::accessorType::AccessorType type) {
  if (!commsUsage_Accessor) {
    commsUsage_Accessor = EmptyType::create(type);
  }
  return *commsUsage_Accessor;
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::clearCommsUsage() noexcept {
  commsUsage_Accessor.reset();
  return *this;
}

uci::type::EmptyType& ActivityPlanPartsType::getProductTasks_() const {
  if (productTasks_Accessor) {
    return *productTasks_Accessor;
  }
  throw uci::base::UCIException("Error in getProductTasks(): An attempt was made to get an optional field that was not enabled, call hasProductTasks() to determine if it is safe to call getProductTasks()");
}

const uci::type::EmptyType& ActivityPlanPartsType::getProductTasks() const {
  return getProductTasks_();
}

uci::type::EmptyType& ActivityPlanPartsType::getProductTasks() {
  return getProductTasks_();
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::setProductTasks(const uci::type::EmptyType& value) {
  return setProductTasks(value.c_str());
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::setProductTasks(const std::string& value) {
  return setProductTasks(value.c_str());
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::setProductTasks(const char* value) {
  enableProductTasks().setStringValue(value);
  return *this;
}

bool ActivityPlanPartsType::hasProductTasks() const noexcept {
  return static_cast<bool>(productTasks_Accessor);
}

uci::type::EmptyType& ActivityPlanPartsType::enableProductTasks(uci::base::accessorType::AccessorType type) {
  if (!productTasks_Accessor) {
    productTasks_Accessor = EmptyType::create(type);
  }
  return *productTasks_Accessor;
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::clearProductTasks() noexcept {
  productTasks_Accessor.reset();
  return *this;
}

std::unique_ptr<ActivityPlanPartsType> ActivityPlanPartsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanPartsType : type};
  return std::unique_ptr<ActivityPlanPartsType>(dynamic_cast<ActivityPlanPartsType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace ActivityPlanPartsType_Names {

constexpr const char* Extern_Type_Name{"ActivityPlanPartsType"};
constexpr const char* CapabilityCommand_Name{"CapabilityCommand"};
constexpr const char* SupportingCapabilityCommand_Name{"SupportingCapabilityCommand"};
constexpr const char* VehicleSettings_Name{"VehicleSettings"};
constexpr const char* CommsUsage_Name{"CommsUsage"};
constexpr const char* ProductTasks_Name{"ProductTasks"};

} // namespace ActivityPlanPartsType_Names

void ActivityPlanPartsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActivityPlanPartsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActivityPlanPartsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ActivityPlanPartsType_Names::CapabilityCommand_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ActivityPlanPartsType::CapabilityCommand& boundedList = accessor.getCapabilityCommand();
        const uci::type::ActivityPlanPartsType::CapabilityCommand::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ActivityPlanPartsType_Names::SupportingCapabilityCommand_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ActivityPlanPartsType::SupportingCapabilityCommand& boundedList = accessor.getSupportingCapabilityCommand();
        const uci::type::ActivityPlanPartsType::SupportingCapabilityCommand::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ActivityPlanPartsType_Names::VehicleSettings_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVehicleSettings(*value);
      }
    } else if (valueType.first == nsPrefix + ActivityPlanPartsType_Names::CommsUsage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCommsUsage(*value);
      }
    } else if (valueType.first == nsPrefix + ActivityPlanPartsType_Names::ProductTasks_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProductTasks(*value);
      }
    }
  }
  PlanPartsBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ActivityPlanPartsType::serialize(const uci::type::ActivityPlanPartsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ActivityPlanPartsType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::activityPlanPartsType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, ActivityPlanPartsType_Names::Extern_Type_Name);
    }
    PlanPartsBaseType::serialize(accessor, node, "", false, false, false);
    {
      const uci::type::ActivityPlanPartsType::CapabilityCommand& boundedList = accessor.getCapabilityCommand();
      for (uci::type::ActivityPlanPartsType::CapabilityCommand::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        CapabilityTypeEnum::serialize(boundedList.at(i), node, ActivityPlanPartsType_Names::CapabilityCommand_Name, false);
      }
    }
    {
      const uci::type::ActivityPlanPartsType::SupportingCapabilityCommand& boundedList = accessor.getSupportingCapabilityCommand();
      for (uci::type::ActivityPlanPartsType::SupportingCapabilityCommand::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SupportCapabilityTypeEnum::serialize(boundedList.at(i), node, ActivityPlanPartsType_Names::SupportingCapabilityCommand_Name, false);
      }
    }
    if (accessor.hasVehicleSettings()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getVehicleSettings(), node, ActivityPlanPartsType_Names::VehicleSettings_Name);
    }
    if (accessor.hasCommsUsage()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getCommsUsage(), node, ActivityPlanPartsType_Names::CommsUsage_Name);
    }
    if (accessor.hasProductTasks()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getProductTasks(), node, ActivityPlanPartsType_Names::ProductTasks_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ActivityPlanPartsType>().release());
}

uci::type::ActivityPlanPartsType& ActivityPlanPartsType::create(const uci::type::ActivityPlanPartsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ActivityPlanPartsType> newAccessor{boost::make_unique<asb_uci::type::ActivityPlanPartsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ActivityPlanPartsType::destroy(uci::type::ActivityPlanPartsType& accessor) {
  delete dynamic_cast<asb_uci::type::ActivityPlanPartsType*>(&accessor);
}

} // namespace type

} // namespace uci

