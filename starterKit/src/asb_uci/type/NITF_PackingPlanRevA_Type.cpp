/** @file NITF_PackingPlanRevA_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/NITF_PackingPlanRevA_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ACFTB_RevA_Type.h"
#include "../../../include/asb_uci/type/FileHeaderRevA_Type.h"
#include "../../../include/asb_uci/type/ImageSubheaderRevA_Type.h"
#include "../../../include/asb_uci/type/MSTGTA_RevA_Type.h"
#include "../../../include/asb_uci/type/NITF_PackingPlanPET.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ACFTB_RevA_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FileHeaderRevA_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ImageSubheaderRevA_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MSTGTA_RevA_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NITF_PackingPlanRevA_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

NITF_PackingPlanRevA_Type::NITF_PackingPlanRevA_Type()
  : fileHeader_Accessor{boost::make_unique<FileHeaderRevA_Type>()},
    imageSubheader_Accessor{boost::make_unique<ImageSubheaderRevA_Type>()} {
}

NITF_PackingPlanRevA_Type::~NITF_PackingPlanRevA_Type() = default;

void NITF_PackingPlanRevA_Type::copy(const uci::type::NITF_PackingPlanRevA_Type& accessor) {
  copyImpl(accessor, false);
}

void NITF_PackingPlanRevA_Type::copyImpl(const uci::type::NITF_PackingPlanRevA_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    NITF_PackingPlanPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const NITF_PackingPlanRevA_Type&>(accessor);
    setFileHeader(*(accessorImpl.fileHeader_Accessor));
    setImageSubheader(*(accessorImpl.imageSubheader_Accessor));
    if (accessorImpl.aCFTB_Accessor) {
      setACFTB(*(accessorImpl.aCFTB_Accessor));
    } else {
      aCFTB_Accessor.reset();
    }
    if (accessorImpl.mSTGTA_Accessor) {
      setMSTGTA(*(accessorImpl.mSTGTA_Accessor));
    } else {
      mSTGTA_Accessor.reset();
    }
  }
}

void NITF_PackingPlanRevA_Type::reset() noexcept {
  NITF_PackingPlanPET::reset();
  fileHeader_Accessor->reset();
  imageSubheader_Accessor->reset();
  aCFTB_Accessor.reset();
  mSTGTA_Accessor.reset();
}

const uci::type::FileHeaderRevA_Type& NITF_PackingPlanRevA_Type::getFileHeader() const {
  return *fileHeader_Accessor;
}

uci::type::FileHeaderRevA_Type& NITF_PackingPlanRevA_Type::getFileHeader() {
  return *fileHeader_Accessor;
}

uci::type::NITF_PackingPlanRevA_Type& NITF_PackingPlanRevA_Type::setFileHeader(const uci::type::FileHeaderRevA_Type& accessor) {
  if (&accessor != fileHeader_Accessor.get()) {
    fileHeader_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ImageSubheaderRevA_Type& NITF_PackingPlanRevA_Type::getImageSubheader() const {
  return *imageSubheader_Accessor;
}

uci::type::ImageSubheaderRevA_Type& NITF_PackingPlanRevA_Type::getImageSubheader() {
  return *imageSubheader_Accessor;
}

uci::type::NITF_PackingPlanRevA_Type& NITF_PackingPlanRevA_Type::setImageSubheader(const uci::type::ImageSubheaderRevA_Type& accessor) {
  if (&accessor != imageSubheader_Accessor.get()) {
    imageSubheader_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ACFTB_RevA_Type& NITF_PackingPlanRevA_Type::getACFTB_() const {
  if (aCFTB_Accessor) {
    return *aCFTB_Accessor;
  }
  throw uci::base::UCIException("Error in getACFTB(): An attempt was made to get an optional field that was not enabled, call hasACFTB() to determine if it is safe to call getACFTB()");
}

const uci::type::ACFTB_RevA_Type& NITF_PackingPlanRevA_Type::getACFTB() const {
  return getACFTB_();
}

uci::type::ACFTB_RevA_Type& NITF_PackingPlanRevA_Type::getACFTB() {
  return getACFTB_();
}

uci::type::NITF_PackingPlanRevA_Type& NITF_PackingPlanRevA_Type::setACFTB(const uci::type::ACFTB_RevA_Type& accessor) {
  enableACFTB();
  if (&accessor != aCFTB_Accessor.get()) {
    aCFTB_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NITF_PackingPlanRevA_Type::hasACFTB() const noexcept {
  return static_cast<bool>(aCFTB_Accessor);
}

uci::type::ACFTB_RevA_Type& NITF_PackingPlanRevA_Type::enableACFTB(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aCFTB_RevA_Type : type};
  if ((!aCFTB_Accessor) || (aCFTB_Accessor->getAccessorType() != requestedType)) {
    aCFTB_Accessor = ACFTB_RevA_Type::create(requestedType);
    if (!aCFTB_Accessor) {
      throw uci::base::UCIException("Error in enableACFTB(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aCFTB_Accessor;
}

uci::type::NITF_PackingPlanRevA_Type& NITF_PackingPlanRevA_Type::clearACFTB() noexcept {
  aCFTB_Accessor.reset();
  return *this;
}

uci::type::MSTGTA_RevA_Type& NITF_PackingPlanRevA_Type::getMSTGTA_() const {
  if (mSTGTA_Accessor) {
    return *mSTGTA_Accessor;
  }
  throw uci::base::UCIException("Error in getMSTGTA(): An attempt was made to get an optional field that was not enabled, call hasMSTGTA() to determine if it is safe to call getMSTGTA()");
}

const uci::type::MSTGTA_RevA_Type& NITF_PackingPlanRevA_Type::getMSTGTA() const {
  return getMSTGTA_();
}

uci::type::MSTGTA_RevA_Type& NITF_PackingPlanRevA_Type::getMSTGTA() {
  return getMSTGTA_();
}

uci::type::NITF_PackingPlanRevA_Type& NITF_PackingPlanRevA_Type::setMSTGTA(const uci::type::MSTGTA_RevA_Type& accessor) {
  enableMSTGTA();
  if (&accessor != mSTGTA_Accessor.get()) {
    mSTGTA_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NITF_PackingPlanRevA_Type::hasMSTGTA() const noexcept {
  return static_cast<bool>(mSTGTA_Accessor);
}

uci::type::MSTGTA_RevA_Type& NITF_PackingPlanRevA_Type::enableMSTGTA(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mSTGTA_RevA_Type : type};
  if ((!mSTGTA_Accessor) || (mSTGTA_Accessor->getAccessorType() != requestedType)) {
    mSTGTA_Accessor = MSTGTA_RevA_Type::create(requestedType);
    if (!mSTGTA_Accessor) {
      throw uci::base::UCIException("Error in enableMSTGTA(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mSTGTA_Accessor;
}

uci::type::NITF_PackingPlanRevA_Type& NITF_PackingPlanRevA_Type::clearMSTGTA() noexcept {
  mSTGTA_Accessor.reset();
  return *this;
}

std::unique_ptr<NITF_PackingPlanRevA_Type> NITF_PackingPlanRevA_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::nITF_PackingPlanRevA_Type : type};
  return (requestedType == uci::type::accessorType::nITF_PackingPlanRevA_Type) ? boost::make_unique<NITF_PackingPlanRevA_Type>() : nullptr;
}

/**  */
namespace NITF_PackingPlanRevA_Type_Names {

constexpr const char* Extern_Type_Name{"NITF_PackingPlanRevA_Type"};
constexpr const char* FileHeader_Name{"FileHeader"};
constexpr const char* ImageSubheader_Name{"ImageSubheader"};
constexpr const char* ACFTB_Name{"ACFTB"};
constexpr const char* MSTGTA_Name{"MSTGTA"};

} // namespace NITF_PackingPlanRevA_Type_Names

void NITF_PackingPlanRevA_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::NITF_PackingPlanRevA_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = NITF_PackingPlanRevA_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + NITF_PackingPlanRevA_Type_Names::FileHeader_Name) {
      FileHeaderRevA_Type::deserialize(valueType.second, accessor.getFileHeader(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanRevA_Type_Names::ImageSubheader_Name) {
      ImageSubheaderRevA_Type::deserialize(valueType.second, accessor.getImageSubheader(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanRevA_Type_Names::ACFTB_Name) {
      ACFTB_RevA_Type::deserialize(valueType.second, accessor.enableACFTB(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanRevA_Type_Names::MSTGTA_Name) {
      MSTGTA_RevA_Type::deserialize(valueType.second, accessor.enableMSTGTA(), nodeName, nsPrefix);
    }
  }
  NITF_PackingPlanPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string NITF_PackingPlanRevA_Type::serialize(const uci::type::NITF_PackingPlanRevA_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? NITF_PackingPlanRevA_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, NITF_PackingPlanRevA_Type_Names::Extern_Type_Name);
  }
  NITF_PackingPlanPET::serialize(accessor, node, "", false, false, false);
  FileHeaderRevA_Type::serialize(accessor.getFileHeader(), node, NITF_PackingPlanRevA_Type_Names::FileHeader_Name);
  ImageSubheaderRevA_Type::serialize(accessor.getImageSubheader(), node, NITF_PackingPlanRevA_Type_Names::ImageSubheader_Name);
  if (accessor.hasACFTB()) {
    ACFTB_RevA_Type::serialize(accessor.getACFTB(), node, NITF_PackingPlanRevA_Type_Names::ACFTB_Name);
  }
  if (accessor.hasMSTGTA()) {
    MSTGTA_RevA_Type::serialize(accessor.getMSTGTA(), node, NITF_PackingPlanRevA_Type_Names::MSTGTA_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::NITF_PackingPlanRevA_Type& NITF_PackingPlanRevA_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::NITF_PackingPlanRevA_Type>().release());
}

uci::type::NITF_PackingPlanRevA_Type& NITF_PackingPlanRevA_Type::create(const uci::type::NITF_PackingPlanRevA_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::NITF_PackingPlanRevA_Type> newAccessor{boost::make_unique<asb_uci::type::NITF_PackingPlanRevA_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void NITF_PackingPlanRevA_Type::destroy(uci::type::NITF_PackingPlanRevA_Type& accessor) {
  delete dynamic_cast<asb_uci::type::NITF_PackingPlanRevA_Type*>(&accessor);
}

} // namespace type

} // namespace uci

