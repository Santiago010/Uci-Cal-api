/** @file ESM_LocationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ESM_LocationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AirVolumeSensorReferencedType.h"
#include "asb_uci/type/ESM_SubcapabilityTargetLocationDataType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AirVolumeSensorReferencedType.h"
#include "uci/type/ESM_LocationType.h"
#include "uci/type/ESM_SubcapabilityTargetLocationDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ESM_LocationType::ESM_LocationType() = default;

ESM_LocationType::~ESM_LocationType() = default;

void ESM_LocationType::copy(const uci::type::ESM_LocationType& accessor) {
  copyImpl(accessor, false);
}

void ESM_LocationType::copyImpl(const uci::type::ESM_LocationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ESM_LocationType&>(accessor);
    if (accessorImpl.targetLocationData_Accessor) {
      setTargetLocationData(*(accessorImpl.targetLocationData_Accessor));
    } else {
      targetLocationData_Accessor.reset();
    }
    if (accessorImpl.eSM_AirVolume_Accessor) {
      setESM_AirVolume(*(accessorImpl.eSM_AirVolume_Accessor));
    } else {
      eSM_AirVolume_Accessor.reset();
    }
  }
}

void ESM_LocationType::reset() noexcept {
  targetLocationData_Accessor.reset();
  eSM_AirVolume_Accessor.reset();
}

uci::type::ESM_LocationType::ESM_LocationTypeChoice ESM_LocationType::getESM_LocationTypeChoiceOrdinal() const noexcept {
  if (targetLocationData_Accessor) {
    return ESM_LOCATIONTYPE_CHOICE_TARGETLOCATIONDATA;
  }
  if (eSM_AirVolume_Accessor) {
    return ESM_LOCATIONTYPE_CHOICE_ESM_AIRVOLUME;
  }
  return ESM_LOCATIONTYPE_CHOICE_NONE;
}

uci::type::ESM_LocationType& ESM_LocationType::setESM_LocationTypeChoiceOrdinal(uci::type::ESM_LocationType::ESM_LocationTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ESM_LOCATIONTYPE_CHOICE_TARGETLOCATIONDATA:
      chooseTargetLocationData("setESM_LocationTypeChoiceOrdinal", type);
      break;
    case ESM_LOCATIONTYPE_CHOICE_ESM_AIRVOLUME:
      chooseESM_AirVolume("setESM_LocationTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setESM_LocationTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ESM_SubcapabilityTargetLocationDataType& ESM_LocationType::getTargetLocationData_() const {
  if (targetLocationData_Accessor) {
    return *targetLocationData_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetLocationData(): Unable to get TargetLocationData, field not selected");
}

const uci::type::ESM_SubcapabilityTargetLocationDataType& ESM_LocationType::getTargetLocationData() const {
  return getTargetLocationData_();
}

uci::type::ESM_SubcapabilityTargetLocationDataType& ESM_LocationType::getTargetLocationData() {
  return getTargetLocationData_();
}

uci::type::ESM_LocationType& ESM_LocationType::setTargetLocationData(const uci::type::ESM_SubcapabilityTargetLocationDataType& accessor) {
  chooseTargetLocationData(accessor.getAccessorType());
  if (&accessor != targetLocationData_Accessor.get()) {
    targetLocationData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_LocationType::isTargetLocationData() const noexcept {
  return static_cast<bool>(targetLocationData_Accessor);
}

uci::type::ESM_SubcapabilityTargetLocationDataType& ESM_LocationType::chooseTargetLocationData(const std::string& method, uci::base::accessorType::AccessorType type) {
  eSM_AirVolume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_SubcapabilityTargetLocationDataType : type};
  if ((!targetLocationData_Accessor) || (targetLocationData_Accessor->getAccessorType() != requestedType)) {
    targetLocationData_Accessor = ESM_SubcapabilityTargetLocationDataType::create(type);
    if (!targetLocationData_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *targetLocationData_Accessor;
}

uci::type::ESM_SubcapabilityTargetLocationDataType& ESM_LocationType::chooseTargetLocationData(uci::base::accessorType::AccessorType type) {
  return chooseTargetLocationData("chooseTargetLocationData", type);
}

uci::type::AirVolumeSensorReferencedType& ESM_LocationType::getESM_AirVolume_() const {
  if (eSM_AirVolume_Accessor) {
    return *eSM_AirVolume_Accessor;
  }
  throw uci::base::UCIException("Error in getESM_AirVolume(): Unable to get ESM_AirVolume, field not selected");
}

const uci::type::AirVolumeSensorReferencedType& ESM_LocationType::getESM_AirVolume() const {
  return getESM_AirVolume_();
}

uci::type::AirVolumeSensorReferencedType& ESM_LocationType::getESM_AirVolume() {
  return getESM_AirVolume_();
}

uci::type::ESM_LocationType& ESM_LocationType::setESM_AirVolume(const uci::type::AirVolumeSensorReferencedType& accessor) {
  chooseESM_AirVolume();
  if (&accessor != eSM_AirVolume_Accessor.get()) {
    eSM_AirVolume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_LocationType::isESM_AirVolume() const noexcept {
  return static_cast<bool>(eSM_AirVolume_Accessor);
}

uci::type::AirVolumeSensorReferencedType& ESM_LocationType::chooseESM_AirVolume(const std::string& method, uci::base::accessorType::AccessorType type) {
  targetLocationData_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airVolumeSensorReferencedType : type};
  if ((!eSM_AirVolume_Accessor) || (eSM_AirVolume_Accessor->getAccessorType() != requestedType)) {
    eSM_AirVolume_Accessor = AirVolumeSensorReferencedType::create(type);
    if (!eSM_AirVolume_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eSM_AirVolume_Accessor;
}

uci::type::AirVolumeSensorReferencedType& ESM_LocationType::chooseESM_AirVolume(uci::base::accessorType::AccessorType type) {
  return chooseESM_AirVolume("chooseESM_AirVolume", type);
}

std::unique_ptr<ESM_LocationType> ESM_LocationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_LocationType : type};
  return (requestedType == uci::type::accessorType::eSM_LocationType) ? boost::make_unique<ESM_LocationType>() : nullptr;
}

/**  */
namespace ESM_LocationType_Names {

constexpr const char* Extern_Type_Name{"ESM_LocationType"};
constexpr const char* TargetLocationData_Name{"TargetLocationData"};
constexpr const char* ESM_AirVolume_Name{"ESM_AirVolume"};

} // namespace ESM_LocationType_Names

void ESM_LocationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ESM_LocationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ESM_LocationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ESM_LocationType_Names::TargetLocationData_Name) {
      ESM_SubcapabilityTargetLocationDataType::deserialize(valueType.second, accessor.chooseTargetLocationData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_LocationType_Names::ESM_AirVolume_Name) {
      AirVolumeSensorReferencedType::deserialize(valueType.second, accessor.chooseESM_AirVolume(), nodeName, nsPrefix);
    }
  }
}

std::string ESM_LocationType::serialize(const uci::type::ESM_LocationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ESM_LocationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ESM_LocationType_Names::Extern_Type_Name);
  }
  if (accessor.isTargetLocationData()) {
    ESM_SubcapabilityTargetLocationDataType::serialize(accessor.getTargetLocationData(), node, ESM_LocationType_Names::TargetLocationData_Name);
  } else if (accessor.isESM_AirVolume()) {
    AirVolumeSensorReferencedType::serialize(accessor.getESM_AirVolume(), node, ESM_LocationType_Names::ESM_AirVolume_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ESM_LocationType& ESM_LocationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ESM_LocationType>().release());
}

uci::type::ESM_LocationType& ESM_LocationType::create(const uci::type::ESM_LocationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ESM_LocationType> newAccessor{boost::make_unique<asb_uci::type::ESM_LocationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ESM_LocationType::destroy(uci::type::ESM_LocationType& accessor) {
  delete dynamic_cast<asb_uci::type::ESM_LocationType*>(&accessor);
}

} // namespace type

} // namespace uci

