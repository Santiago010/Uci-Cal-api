/** @file EA_TaskEscortType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EA_TaskEscortType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AnglePairType.h"
#include "asb_uci/type/Point4D_Type.h"
#include "asb_uci/type/ProtectedAssetType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AnglePairType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/EA_TaskEscortType.h"
#include "uci/type/Point4D_Type.h"
#include "uci/type/ProtectedAssetType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EA_TaskEscortType::EA_TaskEscortType()
  : escortedAsset_Accessor{boost::make_unique<EscortedAsset>(1, SIZE_MAX)} {
}

EA_TaskEscortType::~EA_TaskEscortType() = default;

void EA_TaskEscortType::copy(const uci::type::EA_TaskEscortType& accessor) {
  copyImpl(accessor, false);
}

void EA_TaskEscortType::copyImpl(const uci::type::EA_TaskEscortType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EA_TaskEscortType&>(accessor);
    setEscortedAsset(*(accessorImpl.escortedAsset_Accessor));
    if (accessorImpl.hasMinDistanceOffset()) {
      setMinDistanceOffset(accessorImpl.getMinDistanceOffset());
    } else {
      clearMinDistanceOffset();
    }
    if (accessorImpl.hasMaxDistanceOffset()) {
      setMaxDistanceOffset(accessorImpl.getMaxDistanceOffset());
    } else {
      clearMaxDistanceOffset();
    }
    if (accessorImpl.relativeAngleOffset_Accessor) {
      setRelativeAngleOffset(*(accessorImpl.relativeAngleOffset_Accessor));
    } else {
      relativeAngleOffset_Accessor.reset();
    }
    if (accessorImpl.rendezvousPoint_Accessor) {
      setRendezvousPoint(*(accessorImpl.rendezvousPoint_Accessor));
    } else {
      rendezvousPoint_Accessor.reset();
    }
  }
}

void EA_TaskEscortType::reset() noexcept {
  escortedAsset_Accessor->reset();
  clearMinDistanceOffset();
  clearMaxDistanceOffset();
  relativeAngleOffset_Accessor.reset();
  rendezvousPoint_Accessor.reset();
}

const uci::type::EA_TaskEscortType::EscortedAsset& EA_TaskEscortType::getEscortedAsset() const {
  return *escortedAsset_Accessor;
}

uci::type::EA_TaskEscortType::EscortedAsset& EA_TaskEscortType::getEscortedAsset() {
  return *escortedAsset_Accessor;
}

uci::type::EA_TaskEscortType& EA_TaskEscortType::setEscortedAsset(const uci::type::EA_TaskEscortType::EscortedAsset& accessor) {
  if (&accessor != escortedAsset_Accessor.get()) {
    escortedAsset_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DistanceTypeValue EA_TaskEscortType::getMinDistanceOffset() const {
  if (minDistanceOffset_Accessor) {
    return *minDistanceOffset_Accessor;
  }
  throw uci::base::UCIException("Error in getMinDistanceOffset(): An attempt was made to get an optional field that was not enabled, call hasMinDistanceOffset() to determine if it is safe to call getMinDistanceOffset()");
}

uci::type::EA_TaskEscortType& EA_TaskEscortType::setMinDistanceOffset(uci::type::DistanceTypeValue value) {
  minDistanceOffset_Accessor = value;
  return *this;
}

bool EA_TaskEscortType::hasMinDistanceOffset() const noexcept {
  return minDistanceOffset_Accessor.has_value();
}

uci::type::EA_TaskEscortType& EA_TaskEscortType::clearMinDistanceOffset() noexcept {
  minDistanceOffset_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue EA_TaskEscortType::getMaxDistanceOffset() const {
  if (maxDistanceOffset_Accessor) {
    return *maxDistanceOffset_Accessor;
  }
  throw uci::base::UCIException("Error in getMaxDistanceOffset(): An attempt was made to get an optional field that was not enabled, call hasMaxDistanceOffset() to determine if it is safe to call getMaxDistanceOffset()");
}

uci::type::EA_TaskEscortType& EA_TaskEscortType::setMaxDistanceOffset(uci::type::DistanceTypeValue value) {
  maxDistanceOffset_Accessor = value;
  return *this;
}

bool EA_TaskEscortType::hasMaxDistanceOffset() const noexcept {
  return maxDistanceOffset_Accessor.has_value();
}

uci::type::EA_TaskEscortType& EA_TaskEscortType::clearMaxDistanceOffset() noexcept {
  maxDistanceOffset_Accessor.reset();
  return *this;
}

uci::type::AnglePairType& EA_TaskEscortType::getRelativeAngleOffset_() const {
  if (relativeAngleOffset_Accessor) {
    return *relativeAngleOffset_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeAngleOffset(): An attempt was made to get an optional field that was not enabled, call hasRelativeAngleOffset() to determine if it is safe to call getRelativeAngleOffset()");
}

const uci::type::AnglePairType& EA_TaskEscortType::getRelativeAngleOffset() const {
  return getRelativeAngleOffset_();
}

uci::type::AnglePairType& EA_TaskEscortType::getRelativeAngleOffset() {
  return getRelativeAngleOffset_();
}

uci::type::EA_TaskEscortType& EA_TaskEscortType::setRelativeAngleOffset(const uci::type::AnglePairType& accessor) {
  enableRelativeAngleOffset(accessor.getAccessorType());
  if (&accessor != relativeAngleOffset_Accessor.get()) {
    relativeAngleOffset_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EA_TaskEscortType::hasRelativeAngleOffset() const noexcept {
  return static_cast<bool>(relativeAngleOffset_Accessor);
}

uci::type::AnglePairType& EA_TaskEscortType::enableRelativeAngleOffset(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::anglePairType : type};
  if ((!relativeAngleOffset_Accessor) || (relativeAngleOffset_Accessor->getAccessorType() != requestedType)) {
    relativeAngleOffset_Accessor = AnglePairType::create(requestedType);
    if (!relativeAngleOffset_Accessor) {
      throw uci::base::UCIException("Error in enableRelativeAngleOffset(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativeAngleOffset_Accessor;
}

uci::type::EA_TaskEscortType& EA_TaskEscortType::clearRelativeAngleOffset() noexcept {
  relativeAngleOffset_Accessor.reset();
  return *this;
}

uci::type::Point4D_Type& EA_TaskEscortType::getRendezvousPoint_() const {
  if (rendezvousPoint_Accessor) {
    return *rendezvousPoint_Accessor;
  }
  throw uci::base::UCIException("Error in getRendezvousPoint(): An attempt was made to get an optional field that was not enabled, call hasRendezvousPoint() to determine if it is safe to call getRendezvousPoint()");
}

const uci::type::Point4D_Type& EA_TaskEscortType::getRendezvousPoint() const {
  return getRendezvousPoint_();
}

uci::type::Point4D_Type& EA_TaskEscortType::getRendezvousPoint() {
  return getRendezvousPoint_();
}

uci::type::EA_TaskEscortType& EA_TaskEscortType::setRendezvousPoint(const uci::type::Point4D_Type& accessor) {
  enableRendezvousPoint();
  if (&accessor != rendezvousPoint_Accessor.get()) {
    rendezvousPoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_TaskEscortType::hasRendezvousPoint() const noexcept {
  return static_cast<bool>(rendezvousPoint_Accessor);
}

uci::type::Point4D_Type& EA_TaskEscortType::enableRendezvousPoint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point4D_Type : type};
  if ((!rendezvousPoint_Accessor) || (rendezvousPoint_Accessor->getAccessorType() != requestedType)) {
    rendezvousPoint_Accessor = Point4D_Type::create(requestedType);
    if (!rendezvousPoint_Accessor) {
      throw uci::base::UCIException("Error in enableRendezvousPoint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rendezvousPoint_Accessor;
}

uci::type::EA_TaskEscortType& EA_TaskEscortType::clearRendezvousPoint() noexcept {
  rendezvousPoint_Accessor.reset();
  return *this;
}

std::unique_ptr<EA_TaskEscortType> EA_TaskEscortType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_TaskEscortType : type};
  return (requestedType == uci::type::accessorType::eA_TaskEscortType) ? boost::make_unique<EA_TaskEscortType>() : nullptr;
}

/**  */
namespace EA_TaskEscortType_Names {

constexpr const char* Extern_Type_Name{"EA_TaskEscortType"};
constexpr const char* EscortedAsset_Name{"EscortedAsset"};
constexpr const char* MinDistanceOffset_Name{"MinDistanceOffset"};
constexpr const char* MaxDistanceOffset_Name{"MaxDistanceOffset"};
constexpr const char* RelativeAngleOffset_Name{"RelativeAngleOffset"};
constexpr const char* RendezvousPoint_Name{"RendezvousPoint"};

} // namespace EA_TaskEscortType_Names

void EA_TaskEscortType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_TaskEscortType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EA_TaskEscortType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EA_TaskEscortType_Names::EscortedAsset_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EA_TaskEscortType::EscortedAsset& boundedList = accessor.getEscortedAsset();
        const uci::type::EA_TaskEscortType::EscortedAsset::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProtectedAssetType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EA_TaskEscortType_Names::MinDistanceOffset_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinDistanceOffset(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EA_TaskEscortType_Names::MaxDistanceOffset_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxDistanceOffset(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EA_TaskEscortType_Names::RelativeAngleOffset_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRelativeAngleOffset(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_TaskEscortType_Names::RendezvousPoint_Name) {
      Point4D_Type::deserialize(valueType.second, accessor.enableRendezvousPoint(), nodeName, nsPrefix);
    }
  }
}

std::string EA_TaskEscortType::serialize(const uci::type::EA_TaskEscortType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EA_TaskEscortType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EA_TaskEscortType_Names::Extern_Type_Name);
  }
  {
    const uci::type::EA_TaskEscortType::EscortedAsset& boundedList = accessor.getEscortedAsset();
    for (uci::type::EA_TaskEscortType::EscortedAsset::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProtectedAssetType::serialize(boundedList.at(i), node, EA_TaskEscortType_Names::EscortedAsset_Name);
    }
  }
  if (accessor.hasMinDistanceOffset()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinDistanceOffset(), node, EA_TaskEscortType_Names::MinDistanceOffset_Name);
  }
  if (accessor.hasMaxDistanceOffset()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaxDistanceOffset(), node, EA_TaskEscortType_Names::MaxDistanceOffset_Name);
  }
  if (accessor.hasRelativeAngleOffset()) {
    AnglePairType::serialize(accessor.getRelativeAngleOffset(), node, EA_TaskEscortType_Names::RelativeAngleOffset_Name);
  }
  if (accessor.hasRendezvousPoint()) {
    Point4D_Type::serialize(accessor.getRendezvousPoint(), node, EA_TaskEscortType_Names::RendezvousPoint_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EA_TaskEscortType& EA_TaskEscortType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EA_TaskEscortType>().release());
}

uci::type::EA_TaskEscortType& EA_TaskEscortType::create(const uci::type::EA_TaskEscortType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EA_TaskEscortType> newAccessor{boost::make_unique<asb_uci::type::EA_TaskEscortType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EA_TaskEscortType::destroy(uci::type::EA_TaskEscortType& accessor) {
  delete dynamic_cast<asb_uci::type::EA_TaskEscortType*>(&accessor);
}

} // namespace type

} // namespace uci

