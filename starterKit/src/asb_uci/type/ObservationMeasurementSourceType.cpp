/** @file ObservationMeasurementSourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ObservationMeasurementSourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ElementDetailsType.h"
#include "asb_uci/type/FOV_ExtentType.h"
#include "asb_uci/type/MeasurementReportSourceTypeEnum.h"
#include "asb_uci/type/MeasurementSourceIdentityType.h"
#include "asb_uci/type/NameValuePairType.h"
#include "asb_uci/type/ProductMetadataID_Type.h"
#include "asb_uci/type/SourceCharacteristicsType.h"
#include "asb_uci/type/SourceCoverageType.h"
#include "asb_uci/type/SourceResolutionType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ElementDetailsType.h"
#include "uci/type/FOV_ExtentType.h"
#include "uci/type/MeasurementReportSourceTypeEnum.h"
#include "uci/type/MeasurementSourceIdentityType.h"
#include "uci/type/NameValuePairType.h"
#include "uci/type/ObservationMeasurementSourceType.h"
#include "uci/type/ProductMetadataID_Type.h"
#include "uci/type/SourceCharacteristicsType.h"
#include "uci/type/SourceCoverageType.h"
#include "uci/type/SourceResolutionType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ObservationMeasurementSourceType::ObservationMeasurementSourceType()
  : elementDetails_Accessor{boost::make_unique<ElementDetails>(0, SIZE_MAX)},
    productMetadataID_Accessor{boost::make_unique<ProductMetadataID>(0, SIZE_MAX)},
    customCharacteristics_Accessor{boost::make_unique<CustomCharacteristics>(0, SIZE_MAX)} {
}

ObservationMeasurementSourceType::~ObservationMeasurementSourceType() = default;

void ObservationMeasurementSourceType::copy(const uci::type::ObservationMeasurementSourceType& accessor) {
  copyImpl(accessor, false);
}

void ObservationMeasurementSourceType::copyImpl(const uci::type::ObservationMeasurementSourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ObservationMeasurementSourceType&>(accessor);
    setElementDetails(*(accessorImpl.elementDetails_Accessor));
    if (accessorImpl.sourceIdentity_Accessor) {
      setSourceIdentity(*(accessorImpl.sourceIdentity_Accessor));
    } else {
      sourceIdentity_Accessor.reset();
    }
    if (accessorImpl.sourceType_Accessor) {
      setSourceType(*(accessorImpl.sourceType_Accessor));
    } else {
      sourceType_Accessor.reset();
    }
    if (accessorImpl.sourceCoverage_Accessor) {
      setSourceCoverage(*(accessorImpl.sourceCoverage_Accessor));
    } else {
      sourceCoverage_Accessor.reset();
    }
    if (accessorImpl.sourceAngularExtent_Accessor) {
      setSourceAngularExtent(*(accessorImpl.sourceAngularExtent_Accessor));
    } else {
      sourceAngularExtent_Accessor.reset();
    }
    if (accessorImpl.sourceResolution_Accessor) {
      setSourceResolution(*(accessorImpl.sourceResolution_Accessor));
    } else {
      sourceResolution_Accessor.reset();
    }
    if (accessorImpl.sourceSpecifiedCharacteristics_Accessor) {
      setSourceSpecifiedCharacteristics(*(accessorImpl.sourceSpecifiedCharacteristics_Accessor));
    } else {
      sourceSpecifiedCharacteristics_Accessor.reset();
    }
    if (accessorImpl.hasNumberOfLocalTracksReported()) {
      setNumberOfLocalTracksReported(accessorImpl.getNumberOfLocalTracksReported());
    } else {
      clearNumberOfLocalTracksReported();
    }
    if (accessorImpl.hasNumberOfIndependentMeasurements()) {
      setNumberOfIndependentMeasurements(accessorImpl.getNumberOfIndependentMeasurements());
    } else {
      clearNumberOfIndependentMeasurements();
    }
    setProductMetadataID(*(accessorImpl.productMetadataID_Accessor));
    setCustomCharacteristics(*(accessorImpl.customCharacteristics_Accessor));
  }
}

void ObservationMeasurementSourceType::reset() noexcept {
  elementDetails_Accessor->reset();
  sourceIdentity_Accessor.reset();
  sourceType_Accessor.reset();
  sourceCoverage_Accessor.reset();
  sourceAngularExtent_Accessor.reset();
  sourceResolution_Accessor.reset();
  sourceSpecifiedCharacteristics_Accessor.reset();
  clearNumberOfLocalTracksReported();
  clearNumberOfIndependentMeasurements();
  productMetadataID_Accessor->reset();
  customCharacteristics_Accessor->reset();
}

const uci::type::ObservationMeasurementSourceType::ElementDetails& ObservationMeasurementSourceType::getElementDetails() const {
  return *elementDetails_Accessor;
}

uci::type::ObservationMeasurementSourceType::ElementDetails& ObservationMeasurementSourceType::getElementDetails() {
  return *elementDetails_Accessor;
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::setElementDetails(const uci::type::ObservationMeasurementSourceType::ElementDetails& accessor) {
  if (&accessor != elementDetails_Accessor.get()) {
    elementDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MeasurementSourceIdentityType& ObservationMeasurementSourceType::getSourceIdentity_() const {
  if (sourceIdentity_Accessor) {
    return *sourceIdentity_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceIdentity(): An attempt was made to get an optional field that was not enabled, call hasSourceIdentity() to determine if it is safe to call getSourceIdentity()");
}

const uci::type::MeasurementSourceIdentityType& ObservationMeasurementSourceType::getSourceIdentity() const {
  return getSourceIdentity_();
}

uci::type::MeasurementSourceIdentityType& ObservationMeasurementSourceType::getSourceIdentity() {
  return getSourceIdentity_();
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::setSourceIdentity(const uci::type::MeasurementSourceIdentityType& accessor) {
  enableSourceIdentity();
  if (&accessor != sourceIdentity_Accessor.get()) {
    sourceIdentity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ObservationMeasurementSourceType::hasSourceIdentity() const noexcept {
  return static_cast<bool>(sourceIdentity_Accessor);
}

uci::type::MeasurementSourceIdentityType& ObservationMeasurementSourceType::enableSourceIdentity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::measurementSourceIdentityType : type};
  if ((!sourceIdentity_Accessor) || (sourceIdentity_Accessor->getAccessorType() != requestedType)) {
    sourceIdentity_Accessor = MeasurementSourceIdentityType::create(requestedType);
    if (!sourceIdentity_Accessor) {
      throw uci::base::UCIException("Error in enableSourceIdentity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceIdentity_Accessor;
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::clearSourceIdentity() noexcept {
  sourceIdentity_Accessor.reset();
  return *this;
}

uci::type::MeasurementReportSourceTypeEnum& ObservationMeasurementSourceType::getSourceType_() const {
  if (sourceType_Accessor) {
    return *sourceType_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceType(): An attempt was made to get an optional field that was not enabled, call hasSourceType() to determine if it is safe to call getSourceType()");
}

const uci::type::MeasurementReportSourceTypeEnum& ObservationMeasurementSourceType::getSourceType() const {
  return getSourceType_();
}

uci::type::MeasurementReportSourceTypeEnum& ObservationMeasurementSourceType::getSourceType() {
  return getSourceType_();
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::setSourceType(const uci::type::MeasurementReportSourceTypeEnum& accessor) {
  enableSourceType();
  if (&accessor != sourceType_Accessor.get()) {
    sourceType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::setSourceType(const uci::type::MeasurementReportSourceTypeEnum::EnumerationItem value) {
  enableSourceType().setValue(value);
  return *this;
}

bool ObservationMeasurementSourceType::hasSourceType() const noexcept {
  return static_cast<bool>(sourceType_Accessor);
}

uci::type::MeasurementReportSourceTypeEnum& ObservationMeasurementSourceType::enableSourceType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::measurementReportSourceTypeEnum : type};
  if ((!sourceType_Accessor) || (sourceType_Accessor->getAccessorType() != requestedType)) {
    sourceType_Accessor = MeasurementReportSourceTypeEnum::create(requestedType);
    if (!sourceType_Accessor) {
      throw uci::base::UCIException("Error in enableSourceType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceType_Accessor;
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::clearSourceType() noexcept {
  sourceType_Accessor.reset();
  return *this;
}

uci::type::SourceCoverageType& ObservationMeasurementSourceType::getSourceCoverage_() const {
  if (sourceCoverage_Accessor) {
    return *sourceCoverage_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceCoverage(): An attempt was made to get an optional field that was not enabled, call hasSourceCoverage() to determine if it is safe to call getSourceCoverage()");
}

const uci::type::SourceCoverageType& ObservationMeasurementSourceType::getSourceCoverage() const {
  return getSourceCoverage_();
}

uci::type::SourceCoverageType& ObservationMeasurementSourceType::getSourceCoverage() {
  return getSourceCoverage_();
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::setSourceCoverage(const uci::type::SourceCoverageType& accessor) {
  enableSourceCoverage();
  if (&accessor != sourceCoverage_Accessor.get()) {
    sourceCoverage_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ObservationMeasurementSourceType::hasSourceCoverage() const noexcept {
  return static_cast<bool>(sourceCoverage_Accessor);
}

uci::type::SourceCoverageType& ObservationMeasurementSourceType::enableSourceCoverage(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceCoverageType : type};
  if ((!sourceCoverage_Accessor) || (sourceCoverage_Accessor->getAccessorType() != requestedType)) {
    sourceCoverage_Accessor = SourceCoverageType::create(requestedType);
    if (!sourceCoverage_Accessor) {
      throw uci::base::UCIException("Error in enableSourceCoverage(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceCoverage_Accessor;
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::clearSourceCoverage() noexcept {
  sourceCoverage_Accessor.reset();
  return *this;
}

uci::type::FOV_ExtentType& ObservationMeasurementSourceType::getSourceAngularExtent_() const {
  if (sourceAngularExtent_Accessor) {
    return *sourceAngularExtent_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceAngularExtent(): An attempt was made to get an optional field that was not enabled, call hasSourceAngularExtent() to determine if it is safe to call getSourceAngularExtent()");
}

const uci::type::FOV_ExtentType& ObservationMeasurementSourceType::getSourceAngularExtent() const {
  return getSourceAngularExtent_();
}

uci::type::FOV_ExtentType& ObservationMeasurementSourceType::getSourceAngularExtent() {
  return getSourceAngularExtent_();
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::setSourceAngularExtent(const uci::type::FOV_ExtentType& accessor) {
  enableSourceAngularExtent();
  if (&accessor != sourceAngularExtent_Accessor.get()) {
    sourceAngularExtent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ObservationMeasurementSourceType::hasSourceAngularExtent() const noexcept {
  return static_cast<bool>(sourceAngularExtent_Accessor);
}

uci::type::FOV_ExtentType& ObservationMeasurementSourceType::enableSourceAngularExtent(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fOV_ExtentType : type};
  if ((!sourceAngularExtent_Accessor) || (sourceAngularExtent_Accessor->getAccessorType() != requestedType)) {
    sourceAngularExtent_Accessor = FOV_ExtentType::create(requestedType);
    if (!sourceAngularExtent_Accessor) {
      throw uci::base::UCIException("Error in enableSourceAngularExtent(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceAngularExtent_Accessor;
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::clearSourceAngularExtent() noexcept {
  sourceAngularExtent_Accessor.reset();
  return *this;
}

uci::type::SourceResolutionType& ObservationMeasurementSourceType::getSourceResolution_() const {
  if (sourceResolution_Accessor) {
    return *sourceResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceResolution(): An attempt was made to get an optional field that was not enabled, call hasSourceResolution() to determine if it is safe to call getSourceResolution()");
}

const uci::type::SourceResolutionType& ObservationMeasurementSourceType::getSourceResolution() const {
  return getSourceResolution_();
}

uci::type::SourceResolutionType& ObservationMeasurementSourceType::getSourceResolution() {
  return getSourceResolution_();
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::setSourceResolution(const uci::type::SourceResolutionType& accessor) {
  enableSourceResolution();
  if (&accessor != sourceResolution_Accessor.get()) {
    sourceResolution_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ObservationMeasurementSourceType::hasSourceResolution() const noexcept {
  return static_cast<bool>(sourceResolution_Accessor);
}

uci::type::SourceResolutionType& ObservationMeasurementSourceType::enableSourceResolution(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceResolutionType : type};
  if ((!sourceResolution_Accessor) || (sourceResolution_Accessor->getAccessorType() != requestedType)) {
    sourceResolution_Accessor = SourceResolutionType::create(requestedType);
    if (!sourceResolution_Accessor) {
      throw uci::base::UCIException("Error in enableSourceResolution(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceResolution_Accessor;
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::clearSourceResolution() noexcept {
  sourceResolution_Accessor.reset();
  return *this;
}

uci::type::SourceCharacteristicsType& ObservationMeasurementSourceType::getSourceSpecifiedCharacteristics_() const {
  if (sourceSpecifiedCharacteristics_Accessor) {
    return *sourceSpecifiedCharacteristics_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceSpecifiedCharacteristics(): An attempt was made to get an optional field that was not enabled, call hasSourceSpecifiedCharacteristics() to determine if it is safe to call getSourceSpecifiedCharacteristics()");
}

const uci::type::SourceCharacteristicsType& ObservationMeasurementSourceType::getSourceSpecifiedCharacteristics() const {
  return getSourceSpecifiedCharacteristics_();
}

uci::type::SourceCharacteristicsType& ObservationMeasurementSourceType::getSourceSpecifiedCharacteristics() {
  return getSourceSpecifiedCharacteristics_();
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::setSourceSpecifiedCharacteristics(const uci::type::SourceCharacteristicsType& accessor) {
  enableSourceSpecifiedCharacteristics();
  if (&accessor != sourceSpecifiedCharacteristics_Accessor.get()) {
    sourceSpecifiedCharacteristics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ObservationMeasurementSourceType::hasSourceSpecifiedCharacteristics() const noexcept {
  return static_cast<bool>(sourceSpecifiedCharacteristics_Accessor);
}

uci::type::SourceCharacteristicsType& ObservationMeasurementSourceType::enableSourceSpecifiedCharacteristics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceCharacteristicsType : type};
  if ((!sourceSpecifiedCharacteristics_Accessor) || (sourceSpecifiedCharacteristics_Accessor->getAccessorType() != requestedType)) {
    sourceSpecifiedCharacteristics_Accessor = SourceCharacteristicsType::create(requestedType);
    if (!sourceSpecifiedCharacteristics_Accessor) {
      throw uci::base::UCIException("Error in enableSourceSpecifiedCharacteristics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceSpecifiedCharacteristics_Accessor;
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::clearSourceSpecifiedCharacteristics() noexcept {
  sourceSpecifiedCharacteristics_Accessor.reset();
  return *this;
}

xs::Int ObservationMeasurementSourceType::getNumberOfLocalTracksReported() const {
  if (numberOfLocalTracksReported_Accessor) {
    return *numberOfLocalTracksReported_Accessor;
  }
  throw uci::base::UCIException("Error in getNumberOfLocalTracksReported(): An attempt was made to get an optional field that was not enabled, call hasNumberOfLocalTracksReported() to determine if it is safe to call getNumberOfLocalTracksReported()");
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::setNumberOfLocalTracksReported(xs::Int value) {
  numberOfLocalTracksReported_Accessor = value;
  return *this;
}

bool ObservationMeasurementSourceType::hasNumberOfLocalTracksReported() const noexcept {
  return numberOfLocalTracksReported_Accessor.has_value();
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::clearNumberOfLocalTracksReported() noexcept {
  numberOfLocalTracksReported_Accessor.reset();
  return *this;
}

xs::Int ObservationMeasurementSourceType::getNumberOfIndependentMeasurements() const {
  if (numberOfIndependentMeasurements_Accessor) {
    return *numberOfIndependentMeasurements_Accessor;
  }
  throw uci::base::UCIException("Error in getNumberOfIndependentMeasurements(): An attempt was made to get an optional field that was not enabled, call hasNumberOfIndependentMeasurements() to determine if it is safe to call getNumberOfIndependentMeasurements()");
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::setNumberOfIndependentMeasurements(xs::Int value) {
  numberOfIndependentMeasurements_Accessor = value;
  return *this;
}

bool ObservationMeasurementSourceType::hasNumberOfIndependentMeasurements() const noexcept {
  return numberOfIndependentMeasurements_Accessor.has_value();
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::clearNumberOfIndependentMeasurements() noexcept {
  numberOfIndependentMeasurements_Accessor.reset();
  return *this;
}

const uci::type::ObservationMeasurementSourceType::ProductMetadataID& ObservationMeasurementSourceType::getProductMetadataID() const {
  return *productMetadataID_Accessor;
}

uci::type::ObservationMeasurementSourceType::ProductMetadataID& ObservationMeasurementSourceType::getProductMetadataID() {
  return *productMetadataID_Accessor;
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::setProductMetadataID(const uci::type::ObservationMeasurementSourceType::ProductMetadataID& accessor) {
  if (&accessor != productMetadataID_Accessor.get()) {
    productMetadataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ObservationMeasurementSourceType::CustomCharacteristics& ObservationMeasurementSourceType::getCustomCharacteristics() const {
  return *customCharacteristics_Accessor;
}

uci::type::ObservationMeasurementSourceType::CustomCharacteristics& ObservationMeasurementSourceType::getCustomCharacteristics() {
  return *customCharacteristics_Accessor;
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::setCustomCharacteristics(const uci::type::ObservationMeasurementSourceType::CustomCharacteristics& accessor) {
  if (&accessor != customCharacteristics_Accessor.get()) {
    customCharacteristics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ObservationMeasurementSourceType> ObservationMeasurementSourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::observationMeasurementSourceType : type};
  return (requestedType == uci::type::accessorType::observationMeasurementSourceType) ? boost::make_unique<ObservationMeasurementSourceType>() : nullptr;
}

/**  */
namespace ObservationMeasurementSourceType_Names {

constexpr const char* Extern_Type_Name{"ObservationMeasurementSourceType"};
constexpr const char* ElementDetails_Name{"ElementDetails"};
constexpr const char* SourceIdentity_Name{"SourceIdentity"};
constexpr const char* SourceType_Name{"SourceType"};
constexpr const char* SourceCoverage_Name{"SourceCoverage"};
constexpr const char* SourceAngularExtent_Name{"SourceAngularExtent"};
constexpr const char* SourceResolution_Name{"SourceResolution"};
constexpr const char* SourceSpecifiedCharacteristics_Name{"SourceSpecifiedCharacteristics"};
constexpr const char* NumberOfLocalTracksReported_Name{"NumberOfLocalTracksReported"};
constexpr const char* NumberOfIndependentMeasurements_Name{"NumberOfIndependentMeasurements"};
constexpr const char* ProductMetadataID_Name{"ProductMetadataID"};
constexpr const char* CustomCharacteristics_Name{"CustomCharacteristics"};

} // namespace ObservationMeasurementSourceType_Names

void ObservationMeasurementSourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ObservationMeasurementSourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ObservationMeasurementSourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::ElementDetails_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ObservationMeasurementSourceType::ElementDetails& boundedList = accessor.getElementDetails();
        const uci::type::ObservationMeasurementSourceType::ElementDetails::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ElementDetailsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::SourceIdentity_Name) {
      MeasurementSourceIdentityType::deserialize(valueType.second, accessor.enableSourceIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::SourceType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSourceType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::SourceCoverage_Name) {
      SourceCoverageType::deserialize(valueType.second, accessor.enableSourceCoverage(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::SourceAngularExtent_Name) {
      FOV_ExtentType::deserialize(valueType.second, accessor.enableSourceAngularExtent(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::SourceResolution_Name) {
      SourceResolutionType::deserialize(valueType.second, accessor.enableSourceResolution(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::SourceSpecifiedCharacteristics_Name) {
      SourceCharacteristicsType::deserialize(valueType.second, accessor.enableSourceSpecifiedCharacteristics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::NumberOfLocalTracksReported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfLocalTracksReported(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::NumberOfIndependentMeasurements_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfIndependentMeasurements(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::ProductMetadataID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ObservationMeasurementSourceType::ProductMetadataID& boundedList = accessor.getProductMetadataID();
        const uci::type::ObservationMeasurementSourceType::ProductMetadataID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::CustomCharacteristics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ObservationMeasurementSourceType::CustomCharacteristics& boundedList = accessor.getCustomCharacteristics();
        const uci::type::ObservationMeasurementSourceType::CustomCharacteristics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ObservationMeasurementSourceType::serialize(const uci::type::ObservationMeasurementSourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ObservationMeasurementSourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ObservationMeasurementSourceType_Names::Extern_Type_Name);
  }
  {
    const uci::type::ObservationMeasurementSourceType::ElementDetails& boundedList = accessor.getElementDetails();
    for (uci::type::ObservationMeasurementSourceType::ElementDetails::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ElementDetailsType::serialize(boundedList.at(i), node, ObservationMeasurementSourceType_Names::ElementDetails_Name);
    }
  }
  if (accessor.hasSourceIdentity()) {
    MeasurementSourceIdentityType::serialize(accessor.getSourceIdentity(), node, ObservationMeasurementSourceType_Names::SourceIdentity_Name);
  }
  if (accessor.hasSourceType()) {
    MeasurementReportSourceTypeEnum::serialize(accessor.getSourceType(), node, ObservationMeasurementSourceType_Names::SourceType_Name, false);
  }
  if (accessor.hasSourceCoverage()) {
    SourceCoverageType::serialize(accessor.getSourceCoverage(), node, ObservationMeasurementSourceType_Names::SourceCoverage_Name);
  }
  if (accessor.hasSourceAngularExtent()) {
    FOV_ExtentType::serialize(accessor.getSourceAngularExtent(), node, ObservationMeasurementSourceType_Names::SourceAngularExtent_Name);
  }
  if (accessor.hasSourceResolution()) {
    SourceResolutionType::serialize(accessor.getSourceResolution(), node, ObservationMeasurementSourceType_Names::SourceResolution_Name);
  }
  if (accessor.hasSourceSpecifiedCharacteristics()) {
    SourceCharacteristicsType::serialize(accessor.getSourceSpecifiedCharacteristics(), node, ObservationMeasurementSourceType_Names::SourceSpecifiedCharacteristics_Name);
  }
  if (accessor.hasNumberOfLocalTracksReported()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getNumberOfLocalTracksReported(), node, ObservationMeasurementSourceType_Names::NumberOfLocalTracksReported_Name);
  }
  if (accessor.hasNumberOfIndependentMeasurements()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getNumberOfIndependentMeasurements(), node, ObservationMeasurementSourceType_Names::NumberOfIndependentMeasurements_Name);
  }
  {
    const uci::type::ObservationMeasurementSourceType::ProductMetadataID& boundedList = accessor.getProductMetadataID();
    for (uci::type::ObservationMeasurementSourceType::ProductMetadataID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductMetadataID_Type::serialize(boundedList.at(i), node, ObservationMeasurementSourceType_Names::ProductMetadataID_Name);
    }
  }
  {
    const uci::type::ObservationMeasurementSourceType::CustomCharacteristics& boundedList = accessor.getCustomCharacteristics();
    for (uci::type::ObservationMeasurementSourceType::CustomCharacteristics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::NameValuePairType::serialize(boundedList.at(i), node, ObservationMeasurementSourceType_Names::CustomCharacteristics_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ObservationMeasurementSourceType>().release());
}

uci::type::ObservationMeasurementSourceType& ObservationMeasurementSourceType::create(const uci::type::ObservationMeasurementSourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ObservationMeasurementSourceType> newAccessor{boost::make_unique<asb_uci::type::ObservationMeasurementSourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ObservationMeasurementSourceType::destroy(uci::type::ObservationMeasurementSourceType& accessor) {
  delete dynamic_cast<asb_uci::type::ObservationMeasurementSourceType*>(&accessor);
}

} // namespace type

} // namespace uci

