/** @file AirTargetVolumeCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AirTargetVolumeCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AirVolumeCueType.h"
#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirTargetVolumeCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirVolumeCueType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AirTargetVolumeCommandType::AirTargetVolumeCommandType() = default;

AirTargetVolumeCommandType::~AirTargetVolumeCommandType() = default;

void AirTargetVolumeCommandType::copy(const uci::type::AirTargetVolumeCommandType& accessor) {
  copyImpl(accessor, false);
}

void AirTargetVolumeCommandType::copyImpl(const uci::type::AirTargetVolumeCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AirTargetVolumeCommandType&>(accessor);
    if (accessorImpl.airVolume_Accessor) {
      setAirVolume(*(accessorImpl.airVolume_Accessor));
    } else {
      airVolume_Accessor.reset();
    }
    if (accessorImpl.entityID_Accessor) {
      setEntityID(*(accessorImpl.entityID_Accessor));
    } else {
      entityID_Accessor.reset();
    }
  }
}

void AirTargetVolumeCommandType::reset() noexcept {
  airVolume_Accessor.reset();
  entityID_Accessor.reset();
}

uci::type::AirTargetVolumeCommandType::AirTargetVolumeCommandTypeChoice AirTargetVolumeCommandType::getAirTargetVolumeCommandTypeChoiceOrdinal() const noexcept {
  if (airVolume_Accessor) {
    return AIRTARGETVOLUMECOMMANDTYPE_CHOICE_AIRVOLUME;
  }
  if (entityID_Accessor) {
    return AIRTARGETVOLUMECOMMANDTYPE_CHOICE_ENTITYID;
  }
  return AIRTARGETVOLUMECOMMANDTYPE_CHOICE_NONE;
}

uci::type::AirTargetVolumeCommandType& AirTargetVolumeCommandType::setAirTargetVolumeCommandTypeChoiceOrdinal(uci::type::AirTargetVolumeCommandType::AirTargetVolumeCommandTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case AIRTARGETVOLUMECOMMANDTYPE_CHOICE_AIRVOLUME:
      chooseAirVolume("setAirTargetVolumeCommandTypeChoiceOrdinal", type);
      break;
    case AIRTARGETVOLUMECOMMANDTYPE_CHOICE_ENTITYID:
      chooseEntityID("setAirTargetVolumeCommandTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setAirTargetVolumeCommandTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AirVolumeCueType& AirTargetVolumeCommandType::getAirVolume_() const {
  if (airVolume_Accessor) {
    return *airVolume_Accessor;
  }
  throw uci::base::UCIException("Error in getAirVolume(): Unable to get AirVolume, field not selected");
}

const uci::type::AirVolumeCueType& AirTargetVolumeCommandType::getAirVolume() const {
  return getAirVolume_();
}

uci::type::AirVolumeCueType& AirTargetVolumeCommandType::getAirVolume() {
  return getAirVolume_();
}

uci::type::AirTargetVolumeCommandType& AirTargetVolumeCommandType::setAirVolume(const uci::type::AirVolumeCueType& accessor) {
  chooseAirVolume();
  if (&accessor != airVolume_Accessor.get()) {
    airVolume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AirTargetVolumeCommandType::isAirVolume() const noexcept {
  return static_cast<bool>(airVolume_Accessor);
}

uci::type::AirVolumeCueType& AirTargetVolumeCommandType::chooseAirVolume(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airVolumeCueType : type};
  if ((!airVolume_Accessor) || (airVolume_Accessor->getAccessorType() != requestedType)) {
    airVolume_Accessor = AirVolumeCueType::create(type);
    if (!airVolume_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *airVolume_Accessor;
}

uci::type::AirVolumeCueType& AirTargetVolumeCommandType::chooseAirVolume(uci::base::accessorType::AccessorType type) {
  return chooseAirVolume("chooseAirVolume", type);
}

uci::type::EntityID_Type& AirTargetVolumeCommandType::getEntityID_() const {
  if (entityID_Accessor) {
    return *entityID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityID(): Unable to get EntityID, field not selected");
}

const uci::type::EntityID_Type& AirTargetVolumeCommandType::getEntityID() const {
  return getEntityID_();
}

uci::type::EntityID_Type& AirTargetVolumeCommandType::getEntityID() {
  return getEntityID_();
}

uci::type::AirTargetVolumeCommandType& AirTargetVolumeCommandType::setEntityID(const uci::type::EntityID_Type& accessor) {
  chooseEntityID("setEntityID", accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AirTargetVolumeCommandType::isEntityID() const noexcept {
  return static_cast<bool>(entityID_Accessor);
}

uci::type::EntityID_Type& AirTargetVolumeCommandType::chooseEntityID(const std::string& method, uci::base::accessorType::AccessorType type) {
  airVolume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(type);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::EntityID_Type& AirTargetVolumeCommandType::chooseEntityID(uci::base::accessorType::AccessorType type) {
  return chooseEntityID("chooseEntityID", type);
}

std::unique_ptr<AirTargetVolumeCommandType> AirTargetVolumeCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airTargetVolumeCommandType : type};
  return (requestedType == uci::type::accessorType::airTargetVolumeCommandType) ? boost::make_unique<AirTargetVolumeCommandType>() : nullptr;
}

/**  */
namespace AirTargetVolumeCommandType_Names {

constexpr const char* Extern_Type_Name{"AirTargetVolumeCommandType"};
constexpr const char* AirVolume_Name{"AirVolume"};
constexpr const char* EntityID_Name{"EntityID"};

} // namespace AirTargetVolumeCommandType_Names

void AirTargetVolumeCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AirTargetVolumeCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AirTargetVolumeCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AirTargetVolumeCommandType_Names::AirVolume_Name) {
      AirVolumeCueType::deserialize(valueType.second, accessor.chooseAirVolume(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirTargetVolumeCommandType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string AirTargetVolumeCommandType::serialize(const uci::type::AirTargetVolumeCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AirTargetVolumeCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AirTargetVolumeCommandType_Names::Extern_Type_Name);
  }
  if (accessor.isAirVolume()) {
    AirVolumeCueType::serialize(accessor.getAirVolume(), node, AirTargetVolumeCommandType_Names::AirVolume_Name);
  } else if (accessor.isEntityID()) {
    EntityID_Type::serialize(accessor.getEntityID(), node, AirTargetVolumeCommandType_Names::EntityID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AirTargetVolumeCommandType& AirTargetVolumeCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AirTargetVolumeCommandType>().release());
}

uci::type::AirTargetVolumeCommandType& AirTargetVolumeCommandType::create(const uci::type::AirTargetVolumeCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AirTargetVolumeCommandType> newAccessor{boost::make_unique<asb_uci::type::AirTargetVolumeCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AirTargetVolumeCommandType::destroy(uci::type::AirTargetVolumeCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::AirTargetVolumeCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

