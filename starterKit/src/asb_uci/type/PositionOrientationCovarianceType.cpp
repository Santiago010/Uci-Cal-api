/** @file PositionOrientationCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PositionOrientationCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PositionOrientationCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PositionOrientationCovarianceType::PositionOrientationCovarianceType() = default;

PositionOrientationCovarianceType::~PositionOrientationCovarianceType() = default;

void PositionOrientationCovarianceType::copy(const uci::type::PositionOrientationCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void PositionOrientationCovarianceType::copyImpl(const uci::type::PositionOrientationCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PositionOrientationCovarianceType&>(accessor);
    if (accessorImpl.hasPnRr()) {
      setPnRr(accessorImpl.getPnRr());
    } else {
      clearPnRr();
    }
    if (accessorImpl.hasPnRp()) {
      setPnRp(accessorImpl.getPnRp());
    } else {
      clearPnRp();
    }
    if (accessorImpl.hasPnRy()) {
      setPnRy(accessorImpl.getPnRy());
    } else {
      clearPnRy();
    }
    if (accessorImpl.hasPeRr()) {
      setPeRr(accessorImpl.getPeRr());
    } else {
      clearPeRr();
    }
    if (accessorImpl.hasPeRp()) {
      setPeRp(accessorImpl.getPeRp());
    } else {
      clearPeRp();
    }
    if (accessorImpl.hasPeRy()) {
      setPeRy(accessorImpl.getPeRy());
    } else {
      clearPeRy();
    }
    setPdRr(accessorImpl.pdRr_Accessor);
    setPdRp(accessorImpl.pdRp_Accessor);
    if (accessorImpl.hasPdRy()) {
      setPdRy(accessorImpl.getPdRy());
    } else {
      clearPdRy();
    }
  }
}

void PositionOrientationCovarianceType::reset() noexcept {
  clearPnRr();
  clearPnRp();
  clearPnRy();
  clearPeRr();
  clearPeRp();
  clearPeRy();
  pdRr_Accessor = 0.0;
  pdRp_Accessor = 0.0;
  clearPdRy();
}

xs::Double PositionOrientationCovarianceType::getPnRr() const {
  if (pnRr_Accessor) {
    return *pnRr_Accessor;
  }
  throw uci::base::UCIException("Error in getPnRr(): An attempt was made to get an optional field that was not enabled, call hasPnRr() to determine if it is safe to call getPnRr()");
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::setPnRr(xs::Double value) {
  pnRr_Accessor = value;
  return *this;
}

bool PositionOrientationCovarianceType::hasPnRr() const noexcept {
  return pnRr_Accessor.has_value();
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::clearPnRr() noexcept {
  pnRr_Accessor.reset();
  return *this;
}

xs::Double PositionOrientationCovarianceType::getPnRp() const {
  if (pnRp_Accessor) {
    return *pnRp_Accessor;
  }
  throw uci::base::UCIException("Error in getPnRp(): An attempt was made to get an optional field that was not enabled, call hasPnRp() to determine if it is safe to call getPnRp()");
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::setPnRp(xs::Double value) {
  pnRp_Accessor = value;
  return *this;
}

bool PositionOrientationCovarianceType::hasPnRp() const noexcept {
  return pnRp_Accessor.has_value();
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::clearPnRp() noexcept {
  pnRp_Accessor.reset();
  return *this;
}

xs::Double PositionOrientationCovarianceType::getPnRy() const {
  if (pnRy_Accessor) {
    return *pnRy_Accessor;
  }
  throw uci::base::UCIException("Error in getPnRy(): An attempt was made to get an optional field that was not enabled, call hasPnRy() to determine if it is safe to call getPnRy()");
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::setPnRy(xs::Double value) {
  pnRy_Accessor = value;
  return *this;
}

bool PositionOrientationCovarianceType::hasPnRy() const noexcept {
  return pnRy_Accessor.has_value();
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::clearPnRy() noexcept {
  pnRy_Accessor.reset();
  return *this;
}

xs::Double PositionOrientationCovarianceType::getPeRr() const {
  if (peRr_Accessor) {
    return *peRr_Accessor;
  }
  throw uci::base::UCIException("Error in getPeRr(): An attempt was made to get an optional field that was not enabled, call hasPeRr() to determine if it is safe to call getPeRr()");
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::setPeRr(xs::Double value) {
  peRr_Accessor = value;
  return *this;
}

bool PositionOrientationCovarianceType::hasPeRr() const noexcept {
  return peRr_Accessor.has_value();
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::clearPeRr() noexcept {
  peRr_Accessor.reset();
  return *this;
}

xs::Double PositionOrientationCovarianceType::getPeRp() const {
  if (peRp_Accessor) {
    return *peRp_Accessor;
  }
  throw uci::base::UCIException("Error in getPeRp(): An attempt was made to get an optional field that was not enabled, call hasPeRp() to determine if it is safe to call getPeRp()");
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::setPeRp(xs::Double value) {
  peRp_Accessor = value;
  return *this;
}

bool PositionOrientationCovarianceType::hasPeRp() const noexcept {
  return peRp_Accessor.has_value();
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::clearPeRp() noexcept {
  peRp_Accessor.reset();
  return *this;
}

xs::Double PositionOrientationCovarianceType::getPeRy() const {
  if (peRy_Accessor) {
    return *peRy_Accessor;
  }
  throw uci::base::UCIException("Error in getPeRy(): An attempt was made to get an optional field that was not enabled, call hasPeRy() to determine if it is safe to call getPeRy()");
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::setPeRy(xs::Double value) {
  peRy_Accessor = value;
  return *this;
}

bool PositionOrientationCovarianceType::hasPeRy() const noexcept {
  return peRy_Accessor.has_value();
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::clearPeRy() noexcept {
  peRy_Accessor.reset();
  return *this;
}

xs::Double PositionOrientationCovarianceType::getPdRr() const {
  return pdRr_Accessor;
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::setPdRr(xs::Double value) {
  pdRr_Accessor = value;
  return *this;
}


xs::Double PositionOrientationCovarianceType::getPdRp() const {
  return pdRp_Accessor;
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::setPdRp(xs::Double value) {
  pdRp_Accessor = value;
  return *this;
}


xs::Double PositionOrientationCovarianceType::getPdRy() const {
  if (pdRy_Accessor) {
    return *pdRy_Accessor;
  }
  throw uci::base::UCIException("Error in getPdRy(): An attempt was made to get an optional field that was not enabled, call hasPdRy() to determine if it is safe to call getPdRy()");
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::setPdRy(xs::Double value) {
  pdRy_Accessor = value;
  return *this;
}

bool PositionOrientationCovarianceType::hasPdRy() const noexcept {
  return pdRy_Accessor.has_value();
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::clearPdRy() noexcept {
  pdRy_Accessor.reset();
  return *this;
}

std::unique_ptr<PositionOrientationCovarianceType> PositionOrientationCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionOrientationCovarianceType : type};
  return (requestedType == uci::type::accessorType::positionOrientationCovarianceType) ? boost::make_unique<PositionOrientationCovarianceType>() : nullptr;
}

/**  */
namespace PositionOrientationCovarianceType_Names {

constexpr const char* Extern_Type_Name{"PositionOrientationCovarianceType"};
constexpr const char* PnRr_Name{"PnRr"};
constexpr const char* PnRp_Name{"PnRp"};
constexpr const char* PnRy_Name{"PnRy"};
constexpr const char* PeRr_Name{"PeRr"};
constexpr const char* PeRp_Name{"PeRp"};
constexpr const char* PeRy_Name{"PeRy"};
constexpr const char* PdRr_Name{"PdRr"};
constexpr const char* PdRp_Name{"PdRp"};
constexpr const char* PdRy_Name{"PdRy"};

} // namespace PositionOrientationCovarianceType_Names

void PositionOrientationCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PositionOrientationCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PositionOrientationCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PositionOrientationCovarianceType_Names::PnRr_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPnRr(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionOrientationCovarianceType_Names::PnRp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPnRp(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionOrientationCovarianceType_Names::PnRy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPnRy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionOrientationCovarianceType_Names::PeRr_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeRr(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionOrientationCovarianceType_Names::PeRp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeRp(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionOrientationCovarianceType_Names::PeRy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeRy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionOrientationCovarianceType_Names::PdRr_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPdRr(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionOrientationCovarianceType_Names::PdRp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPdRp(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PositionOrientationCovarianceType_Names::PdRy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPdRy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string PositionOrientationCovarianceType::serialize(const uci::type::PositionOrientationCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PositionOrientationCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PositionOrientationCovarianceType_Names::Extern_Type_Name);
  }
  if (accessor.hasPnRr()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPnRr(), node, PositionOrientationCovarianceType_Names::PnRr_Name);
  }
  if (accessor.hasPnRp()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPnRp(), node, PositionOrientationCovarianceType_Names::PnRp_Name);
  }
  if (accessor.hasPnRy()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPnRy(), node, PositionOrientationCovarianceType_Names::PnRy_Name);
  }
  if (accessor.hasPeRr()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPeRr(), node, PositionOrientationCovarianceType_Names::PeRr_Name);
  }
  if (accessor.hasPeRp()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPeRp(), node, PositionOrientationCovarianceType_Names::PeRp_Name);
  }
  if (accessor.hasPeRy()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPeRy(), node, PositionOrientationCovarianceType_Names::PeRy_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPdRr(), node, PositionOrientationCovarianceType_Names::PdRr_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPdRp(), node, PositionOrientationCovarianceType_Names::PdRp_Name);
  if (accessor.hasPdRy()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPdRy(), node, PositionOrientationCovarianceType_Names::PdRy_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PositionOrientationCovarianceType>().release());
}

uci::type::PositionOrientationCovarianceType& PositionOrientationCovarianceType::create(const uci::type::PositionOrientationCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PositionOrientationCovarianceType> newAccessor{boost::make_unique<asb_uci::type::PositionOrientationCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PositionOrientationCovarianceType::destroy(uci::type::PositionOrientationCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::PositionOrientationCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

