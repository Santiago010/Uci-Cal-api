/** @file CommCapabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommCapabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityCommandRankingType.h"
#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/CommConnectionCommandEnum.h"
#include "asb_uci/type/CommControlType.h"
#include "asb_uci/type/CommLinkPortMapType.h"
#include "asb_uci/type/CommProfileID_Type.h"
#include "asb_uci/type/CommWaveformCapabilityCommandPET.h"
#include "asb_uci/type/CryptoLocationType.h"
#include "asb_uci/type/CryptoRolloverCommandType.h"
#include "asb_uci/type/LinkConnectionRequestType.h"
#include "asb_uci/type/NetworkLinkActionTypeEnum.h"
#include "asb_uci/type/NetworkLinkID_Type.h"
#include "asb_uci/type/SecurityInformationType.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/type/VerboseStatusType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityCommandRankingType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/CommCapabilityType.h"
#include "uci/type/CommConnectionCommandEnum.h"
#include "uci/type/CommControlType.h"
#include "uci/type/CommLinkPortMapType.h"
#include "uci/type/CommProfileID_Type.h"
#include "uci/type/CommWaveformCapabilityCommandPET.h"
#include "uci/type/CryptoLocationType.h"
#include "uci/type/CryptoRolloverCommandType.h"
#include "uci/type/LinkConnectionRequestType.h"
#include "uci/type/NetworkLinkActionTypeEnum.h"
#include "uci/type/NetworkLinkID_Type.h"
#include "uci/type/SecurityInformationType.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/VerboseStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommCapabilityType::CommCapabilityType()
  : action_Accessor{boost::make_unique<NetworkLinkActionTypeEnum>()},
    capabilityID_Accessor{boost::make_unique<CapabilityID>(1, SIZE_MAX)},
    cryptoKey_Accessor{boost::make_unique<CryptoKey>(0, SIZE_MAX)},
    cryptoZeroize_Accessor{boost::make_unique<CryptoZeroize>(0, SIZE_MAX)},
    linkConnectionRequest_Accessor{boost::make_unique<LinkConnectionRequest>(0, SIZE_MAX)} {
}

CommCapabilityType::~CommCapabilityType() = default;

void CommCapabilityType::copy(const uci::type::CommCapabilityType& accessor) {
  copyImpl(accessor, false);
}

void CommCapabilityType::copyImpl(const uci::type::CommCapabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommCapabilityType&>(accessor);
    setAction(*(accessorImpl.action_Accessor));
    setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    if (accessorImpl.subsystemID_Accessor) {
      setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    } else {
      subsystemID_Accessor.reset();
    }
    if (accessorImpl.ranking_Accessor) {
      setRanking(*(accessorImpl.ranking_Accessor));
    } else {
      ranking_Accessor.reset();
    }
    if (accessorImpl.classification_Accessor) {
      setClassification(*(accessorImpl.classification_Accessor));
    } else {
      classification_Accessor.reset();
    }
    if (accessorImpl.connectionRequest_Accessor) {
      setConnectionRequest(*(accessorImpl.connectionRequest_Accessor));
    } else {
      connectionRequest_Accessor.reset();
    }
    if (accessorImpl.activateProfileID_Accessor) {
      setActivateProfileID(*(accessorImpl.activateProfileID_Accessor));
    } else {
      activateProfileID_Accessor.reset();
    }
    if (accessorImpl.networkLinkID_Accessor) {
      setNetworkLinkID(*(accessorImpl.networkLinkID_Accessor));
    } else {
      networkLinkID_Accessor.reset();
    }
    if (accessorImpl.commonSettings_Accessor) {
      setCommonSettings(*(accessorImpl.commonSettings_Accessor));
    } else {
      commonSettings_Accessor.reset();
    }
    setCryptoKey(*(accessorImpl.cryptoKey_Accessor));
    setCryptoZeroize(*(accessorImpl.cryptoZeroize_Accessor));
    if (accessorImpl.cryptoRollover_Accessor) {
      setCryptoRollover(*(accessorImpl.cryptoRollover_Accessor));
    } else {
      cryptoRollover_Accessor.reset();
    }
    if (accessorImpl.linkPortAssignments_Accessor) {
      setLinkPortAssignments(*(accessorImpl.linkPortAssignments_Accessor));
    } else {
      linkPortAssignments_Accessor.reset();
    }
    if (accessorImpl.verboseStatus_Accessor) {
      setVerboseStatus(*(accessorImpl.verboseStatus_Accessor));
    } else {
      verboseStatus_Accessor.reset();
    }
    if (accessorImpl.waveformSpecificSettings_Accessor) {
      setWaveformSpecificSettings(*(accessorImpl.waveformSpecificSettings_Accessor));
    } else {
      waveformSpecificSettings_Accessor.reset();
    }
    setLinkConnectionRequest(*(accessorImpl.linkConnectionRequest_Accessor));
  }
}

void CommCapabilityType::reset() noexcept {
  action_Accessor->reset();
  capabilityID_Accessor->reset();
  subsystemID_Accessor.reset();
  ranking_Accessor.reset();
  classification_Accessor.reset();
  connectionRequest_Accessor.reset();
  activateProfileID_Accessor.reset();
  networkLinkID_Accessor.reset();
  commonSettings_Accessor.reset();
  cryptoKey_Accessor->reset();
  cryptoZeroize_Accessor->reset();
  cryptoRollover_Accessor.reset();
  linkPortAssignments_Accessor.reset();
  verboseStatus_Accessor.reset();
  waveformSpecificSettings_Accessor.reset();
  linkConnectionRequest_Accessor->reset();
}

const uci::type::NetworkLinkActionTypeEnum& CommCapabilityType::getAction() const {
  return *action_Accessor;
}

uci::type::NetworkLinkActionTypeEnum& CommCapabilityType::getAction() {
  return *action_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::setAction(const uci::type::NetworkLinkActionTypeEnum& accessor) {
  if (&accessor != action_Accessor.get()) {
    action_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommCapabilityType& CommCapabilityType::setAction(uci::type::NetworkLinkActionTypeEnum::EnumerationItem value) {
  action_Accessor->setValue(value);
  return *this;
}


const uci::type::CommCapabilityType::CapabilityID& CommCapabilityType::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::CommCapabilityType::CapabilityID& CommCapabilityType::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::setCapabilityID(const uci::type::CommCapabilityType::CapabilityID& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemID_Type& CommCapabilityType::getSubsystemID_() const {
  if (subsystemID_Accessor) {
    return *subsystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSubsystemID(): An attempt was made to get an optional field that was not enabled, call hasSubsystemID() to determine if it is safe to call getSubsystemID()");
}

const uci::type::SubsystemID_Type& CommCapabilityType::getSubsystemID() const {
  return getSubsystemID_();
}

uci::type::SubsystemID_Type& CommCapabilityType::getSubsystemID() {
  return getSubsystemID_();
}

uci::type::CommCapabilityType& CommCapabilityType::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  enableSubsystemID();
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommCapabilityType::hasSubsystemID() const noexcept {
  return static_cast<bool>(subsystemID_Accessor);
}

uci::type::SubsystemID_Type& CommCapabilityType::enableSubsystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemID_Type : type};
  if ((!subsystemID_Accessor) || (subsystemID_Accessor->getAccessorType() != requestedType)) {
    subsystemID_Accessor = SubsystemID_Type::create(requestedType);
    if (!subsystemID_Accessor) {
      throw uci::base::UCIException("Error in enableSubsystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subsystemID_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::clearSubsystemID() noexcept {
  subsystemID_Accessor.reset();
  return *this;
}

uci::type::CapabilityCommandRankingType& CommCapabilityType::getRanking_() const {
  if (ranking_Accessor) {
    return *ranking_Accessor;
  }
  throw uci::base::UCIException("Error in getRanking(): An attempt was made to get an optional field that was not enabled, call hasRanking() to determine if it is safe to call getRanking()");
}

const uci::type::CapabilityCommandRankingType& CommCapabilityType::getRanking() const {
  return getRanking_();
}

uci::type::CapabilityCommandRankingType& CommCapabilityType::getRanking() {
  return getRanking_();
}

uci::type::CommCapabilityType& CommCapabilityType::setRanking(const uci::type::CapabilityCommandRankingType& accessor) {
  enableRanking();
  if (&accessor != ranking_Accessor.get()) {
    ranking_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommCapabilityType::hasRanking() const noexcept {
  return static_cast<bool>(ranking_Accessor);
}

uci::type::CapabilityCommandRankingType& CommCapabilityType::enableRanking(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandRankingType : type};
  if ((!ranking_Accessor) || (ranking_Accessor->getAccessorType() != requestedType)) {
    ranking_Accessor = CapabilityCommandRankingType::create(requestedType);
    if (!ranking_Accessor) {
      throw uci::base::UCIException("Error in enableRanking(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ranking_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::clearRanking() noexcept {
  ranking_Accessor.reset();
  return *this;
}

uci::type::SecurityInformationType& CommCapabilityType::getClassification_() const {
  if (classification_Accessor) {
    return *classification_Accessor;
  }
  throw uci::base::UCIException("Error in getClassification(): An attempt was made to get an optional field that was not enabled, call hasClassification() to determine if it is safe to call getClassification()");
}

const uci::type::SecurityInformationType& CommCapabilityType::getClassification() const {
  return getClassification_();
}

uci::type::SecurityInformationType& CommCapabilityType::getClassification() {
  return getClassification_();
}

uci::type::CommCapabilityType& CommCapabilityType::setClassification(const uci::type::SecurityInformationType& accessor) {
  enableClassification();
  if (&accessor != classification_Accessor.get()) {
    classification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommCapabilityType::hasClassification() const noexcept {
  return static_cast<bool>(classification_Accessor);
}

uci::type::SecurityInformationType& CommCapabilityType::enableClassification(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::securityInformationType : type};
  if ((!classification_Accessor) || (classification_Accessor->getAccessorType() != requestedType)) {
    classification_Accessor = SecurityInformationType::create(requestedType);
    if (!classification_Accessor) {
      throw uci::base::UCIException("Error in enableClassification(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *classification_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::clearClassification() noexcept {
  classification_Accessor.reset();
  return *this;
}

uci::type::CommConnectionCommandEnum& CommCapabilityType::getConnectionRequest_() const {
  if (connectionRequest_Accessor) {
    return *connectionRequest_Accessor;
  }
  throw uci::base::UCIException("Error in getConnectionRequest(): An attempt was made to get an optional field that was not enabled, call hasConnectionRequest() to determine if it is safe to call getConnectionRequest()");
}

const uci::type::CommConnectionCommandEnum& CommCapabilityType::getConnectionRequest() const {
  return getConnectionRequest_();
}

uci::type::CommConnectionCommandEnum& CommCapabilityType::getConnectionRequest() {
  return getConnectionRequest_();
}

uci::type::CommCapabilityType& CommCapabilityType::setConnectionRequest(const uci::type::CommConnectionCommandEnum& accessor) {
  enableConnectionRequest();
  if (&accessor != connectionRequest_Accessor.get()) {
    connectionRequest_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommCapabilityType& CommCapabilityType::setConnectionRequest(const uci::type::CommConnectionCommandEnum::EnumerationItem value) {
  enableConnectionRequest().setValue(value);
  return *this;
}

bool CommCapabilityType::hasConnectionRequest() const noexcept {
  return static_cast<bool>(connectionRequest_Accessor);
}

uci::type::CommConnectionCommandEnum& CommCapabilityType::enableConnectionRequest(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commConnectionCommandEnum : type};
  if ((!connectionRequest_Accessor) || (connectionRequest_Accessor->getAccessorType() != requestedType)) {
    connectionRequest_Accessor = CommConnectionCommandEnum::create(requestedType);
    if (!connectionRequest_Accessor) {
      throw uci::base::UCIException("Error in enableConnectionRequest(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *connectionRequest_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::clearConnectionRequest() noexcept {
  connectionRequest_Accessor.reset();
  return *this;
}

uci::type::CommProfileID_Type& CommCapabilityType::getActivateProfileID_() const {
  if (activateProfileID_Accessor) {
    return *activateProfileID_Accessor;
  }
  throw uci::base::UCIException("Error in getActivateProfileID(): An attempt was made to get an optional field that was not enabled, call hasActivateProfileID() to determine if it is safe to call getActivateProfileID()");
}

const uci::type::CommProfileID_Type& CommCapabilityType::getActivateProfileID() const {
  return getActivateProfileID_();
}

uci::type::CommProfileID_Type& CommCapabilityType::getActivateProfileID() {
  return getActivateProfileID_();
}

uci::type::CommCapabilityType& CommCapabilityType::setActivateProfileID(const uci::type::CommProfileID_Type& accessor) {
  enableActivateProfileID();
  if (&accessor != activateProfileID_Accessor.get()) {
    activateProfileID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommCapabilityType::hasActivateProfileID() const noexcept {
  return static_cast<bool>(activateProfileID_Accessor);
}

uci::type::CommProfileID_Type& CommCapabilityType::enableActivateProfileID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commProfileID_Type : type};
  if ((!activateProfileID_Accessor) || (activateProfileID_Accessor->getAccessorType() != requestedType)) {
    activateProfileID_Accessor = CommProfileID_Type::create(requestedType);
    if (!activateProfileID_Accessor) {
      throw uci::base::UCIException("Error in enableActivateProfileID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activateProfileID_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::clearActivateProfileID() noexcept {
  activateProfileID_Accessor.reset();
  return *this;
}

uci::type::NetworkLinkID_Type& CommCapabilityType::getNetworkLinkID_() const {
  if (networkLinkID_Accessor) {
    return *networkLinkID_Accessor;
  }
  throw uci::base::UCIException("Error in getNetworkLinkID(): An attempt was made to get an optional field that was not enabled, call hasNetworkLinkID() to determine if it is safe to call getNetworkLinkID()");
}

const uci::type::NetworkLinkID_Type& CommCapabilityType::getNetworkLinkID() const {
  return getNetworkLinkID_();
}

uci::type::NetworkLinkID_Type& CommCapabilityType::getNetworkLinkID() {
  return getNetworkLinkID_();
}

uci::type::CommCapabilityType& CommCapabilityType::setNetworkLinkID(const uci::type::NetworkLinkID_Type& accessor) {
  enableNetworkLinkID();
  if (&accessor != networkLinkID_Accessor.get()) {
    networkLinkID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommCapabilityType::hasNetworkLinkID() const noexcept {
  return static_cast<bool>(networkLinkID_Accessor);
}

uci::type::NetworkLinkID_Type& CommCapabilityType::enableNetworkLinkID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::networkLinkID_Type : type};
  if ((!networkLinkID_Accessor) || (networkLinkID_Accessor->getAccessorType() != requestedType)) {
    networkLinkID_Accessor = NetworkLinkID_Type::create(requestedType);
    if (!networkLinkID_Accessor) {
      throw uci::base::UCIException("Error in enableNetworkLinkID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *networkLinkID_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::clearNetworkLinkID() noexcept {
  networkLinkID_Accessor.reset();
  return *this;
}

uci::type::CommControlType& CommCapabilityType::getCommonSettings_() const {
  if (commonSettings_Accessor) {
    return *commonSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getCommonSettings(): An attempt was made to get an optional field that was not enabled, call hasCommonSettings() to determine if it is safe to call getCommonSettings()");
}

const uci::type::CommControlType& CommCapabilityType::getCommonSettings() const {
  return getCommonSettings_();
}

uci::type::CommControlType& CommCapabilityType::getCommonSettings() {
  return getCommonSettings_();
}

uci::type::CommCapabilityType& CommCapabilityType::setCommonSettings(const uci::type::CommControlType& accessor) {
  enableCommonSettings();
  if (&accessor != commonSettings_Accessor.get()) {
    commonSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommCapabilityType::hasCommonSettings() const noexcept {
  return static_cast<bool>(commonSettings_Accessor);
}

uci::type::CommControlType& CommCapabilityType::enableCommonSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commControlType : type};
  if ((!commonSettings_Accessor) || (commonSettings_Accessor->getAccessorType() != requestedType)) {
    commonSettings_Accessor = CommControlType::create(requestedType);
    if (!commonSettings_Accessor) {
      throw uci::base::UCIException("Error in enableCommonSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commonSettings_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::clearCommonSettings() noexcept {
  commonSettings_Accessor.reset();
  return *this;
}

const uci::type::CommCapabilityType::CryptoKey& CommCapabilityType::getCryptoKey() const {
  return *cryptoKey_Accessor;
}

uci::type::CommCapabilityType::CryptoKey& CommCapabilityType::getCryptoKey() {
  return *cryptoKey_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::setCryptoKey(const uci::type::CommCapabilityType::CryptoKey& accessor) {
  if (&accessor != cryptoKey_Accessor.get()) {
    cryptoKey_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommCapabilityType::CryptoZeroize& CommCapabilityType::getCryptoZeroize() const {
  return *cryptoZeroize_Accessor;
}

uci::type::CommCapabilityType::CryptoZeroize& CommCapabilityType::getCryptoZeroize() {
  return *cryptoZeroize_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::setCryptoZeroize(const uci::type::CommCapabilityType::CryptoZeroize& accessor) {
  if (&accessor != cryptoZeroize_Accessor.get()) {
    cryptoZeroize_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CryptoRolloverCommandType& CommCapabilityType::getCryptoRollover_() const {
  if (cryptoRollover_Accessor) {
    return *cryptoRollover_Accessor;
  }
  throw uci::base::UCIException("Error in getCryptoRollover(): An attempt was made to get an optional field that was not enabled, call hasCryptoRollover() to determine if it is safe to call getCryptoRollover()");
}

const uci::type::CryptoRolloverCommandType& CommCapabilityType::getCryptoRollover() const {
  return getCryptoRollover_();
}

uci::type::CryptoRolloverCommandType& CommCapabilityType::getCryptoRollover() {
  return getCryptoRollover_();
}

uci::type::CommCapabilityType& CommCapabilityType::setCryptoRollover(const uci::type::CryptoRolloverCommandType& accessor) {
  enableCryptoRollover();
  if (&accessor != cryptoRollover_Accessor.get()) {
    cryptoRollover_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommCapabilityType::hasCryptoRollover() const noexcept {
  return static_cast<bool>(cryptoRollover_Accessor);
}

uci::type::CryptoRolloverCommandType& CommCapabilityType::enableCryptoRollover(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cryptoRolloverCommandType : type};
  if ((!cryptoRollover_Accessor) || (cryptoRollover_Accessor->getAccessorType() != requestedType)) {
    cryptoRollover_Accessor = CryptoRolloverCommandType::create(requestedType);
    if (!cryptoRollover_Accessor) {
      throw uci::base::UCIException("Error in enableCryptoRollover(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *cryptoRollover_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::clearCryptoRollover() noexcept {
  cryptoRollover_Accessor.reset();
  return *this;
}

uci::type::CommLinkPortMapType& CommCapabilityType::getLinkPortAssignments_() const {
  if (linkPortAssignments_Accessor) {
    return *linkPortAssignments_Accessor;
  }
  throw uci::base::UCIException("Error in getLinkPortAssignments(): An attempt was made to get an optional field that was not enabled, call hasLinkPortAssignments() to determine if it is safe to call getLinkPortAssignments()");
}

const uci::type::CommLinkPortMapType& CommCapabilityType::getLinkPortAssignments() const {
  return getLinkPortAssignments_();
}

uci::type::CommLinkPortMapType& CommCapabilityType::getLinkPortAssignments() {
  return getLinkPortAssignments_();
}

uci::type::CommCapabilityType& CommCapabilityType::setLinkPortAssignments(const uci::type::CommLinkPortMapType& accessor) {
  enableLinkPortAssignments();
  if (&accessor != linkPortAssignments_Accessor.get()) {
    linkPortAssignments_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommCapabilityType::hasLinkPortAssignments() const noexcept {
  return static_cast<bool>(linkPortAssignments_Accessor);
}

uci::type::CommLinkPortMapType& CommCapabilityType::enableLinkPortAssignments(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLinkPortMapType : type};
  if ((!linkPortAssignments_Accessor) || (linkPortAssignments_Accessor->getAccessorType() != requestedType)) {
    linkPortAssignments_Accessor = CommLinkPortMapType::create(requestedType);
    if (!linkPortAssignments_Accessor) {
      throw uci::base::UCIException("Error in enableLinkPortAssignments(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *linkPortAssignments_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::clearLinkPortAssignments() noexcept {
  linkPortAssignments_Accessor.reset();
  return *this;
}

uci::type::VerboseStatusType& CommCapabilityType::getVerboseStatus_() const {
  if (verboseStatus_Accessor) {
    return *verboseStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getVerboseStatus(): An attempt was made to get an optional field that was not enabled, call hasVerboseStatus() to determine if it is safe to call getVerboseStatus()");
}

const uci::type::VerboseStatusType& CommCapabilityType::getVerboseStatus() const {
  return getVerboseStatus_();
}

uci::type::VerboseStatusType& CommCapabilityType::getVerboseStatus() {
  return getVerboseStatus_();
}

uci::type::CommCapabilityType& CommCapabilityType::setVerboseStatus(const uci::type::VerboseStatusType& accessor) {
  enableVerboseStatus();
  if (&accessor != verboseStatus_Accessor.get()) {
    verboseStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommCapabilityType::hasVerboseStatus() const noexcept {
  return static_cast<bool>(verboseStatus_Accessor);
}

uci::type::VerboseStatusType& CommCapabilityType::enableVerboseStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::verboseStatusType : type};
  if ((!verboseStatus_Accessor) || (verboseStatus_Accessor->getAccessorType() != requestedType)) {
    verboseStatus_Accessor = VerboseStatusType::create(requestedType);
    if (!verboseStatus_Accessor) {
      throw uci::base::UCIException("Error in enableVerboseStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *verboseStatus_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::clearVerboseStatus() noexcept {
  verboseStatus_Accessor.reset();
  return *this;
}

uci::type::CommWaveformCapabilityCommandPET& CommCapabilityType::getWaveformSpecificSettings_() const {
  if (waveformSpecificSettings_Accessor) {
    return *waveformSpecificSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getWaveformSpecificSettings(): An attempt was made to get an optional field that was not enabled, call hasWaveformSpecificSettings() to determine if it is safe to call getWaveformSpecificSettings()");
}

const uci::type::CommWaveformCapabilityCommandPET& CommCapabilityType::getWaveformSpecificSettings() const {
  return getWaveformSpecificSettings_();
}

uci::type::CommWaveformCapabilityCommandPET& CommCapabilityType::getWaveformSpecificSettings() {
  return getWaveformSpecificSettings_();
}

uci::type::CommCapabilityType& CommCapabilityType::setWaveformSpecificSettings(const uci::type::CommWaveformCapabilityCommandPET& accessor) {
  enableWaveformSpecificSettings(accessor.getAccessorType());
  if (&accessor != waveformSpecificSettings_Accessor.get()) {
    waveformSpecificSettings_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CommCapabilityType::hasWaveformSpecificSettings() const noexcept {
  return static_cast<bool>(waveformSpecificSettings_Accessor);
}

uci::type::CommWaveformCapabilityCommandPET& CommCapabilityType::enableWaveformSpecificSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commWaveformCapabilityCommandPET : type};
  if ((!waveformSpecificSettings_Accessor) || (waveformSpecificSettings_Accessor->getAccessorType() != requestedType)) {
    waveformSpecificSettings_Accessor = CommWaveformCapabilityCommandPET::create(requestedType);
    if (!waveformSpecificSettings_Accessor) {
      throw uci::base::UCIException("Error in enableWaveformSpecificSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *waveformSpecificSettings_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::clearWaveformSpecificSettings() noexcept {
  waveformSpecificSettings_Accessor.reset();
  return *this;
}

const uci::type::CommCapabilityType::LinkConnectionRequest& CommCapabilityType::getLinkConnectionRequest() const {
  return *linkConnectionRequest_Accessor;
}

uci::type::CommCapabilityType::LinkConnectionRequest& CommCapabilityType::getLinkConnectionRequest() {
  return *linkConnectionRequest_Accessor;
}

uci::type::CommCapabilityType& CommCapabilityType::setLinkConnectionRequest(const uci::type::CommCapabilityType::LinkConnectionRequest& accessor) {
  if (&accessor != linkConnectionRequest_Accessor.get()) {
    linkConnectionRequest_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommCapabilityType> CommCapabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commCapabilityType : type};
  return (requestedType == uci::type::accessorType::commCapabilityType) ? boost::make_unique<CommCapabilityType>() : nullptr;
}

/**  */
namespace CommCapabilityType_Names {

constexpr const char* Extern_Type_Name{"CommCapabilityType"};
constexpr const char* Action_Name{"Action"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* Ranking_Name{"Ranking"};
constexpr const char* Classification_Name{"Classification"};
constexpr const char* ConnectionRequest_Name{"ConnectionRequest"};
constexpr const char* ActivateProfileID_Name{"ActivateProfileID"};
constexpr const char* NetworkLinkID_Name{"NetworkLinkID"};
constexpr const char* CommonSettings_Name{"CommonSettings"};
constexpr const char* CryptoKey_Name{"CryptoKey"};
constexpr const char* CryptoZeroize_Name{"CryptoZeroize"};
constexpr const char* CryptoRollover_Name{"CryptoRollover"};
constexpr const char* LinkPortAssignments_Name{"LinkPortAssignments"};
constexpr const char* VerboseStatus_Name{"VerboseStatus"};
constexpr const char* WaveformSpecificSettings_Name{"WaveformSpecificSettings"};
constexpr const char* LinkConnectionRequest_Name{"LinkConnectionRequest"};

} // namespace CommCapabilityType_Names

void CommCapabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommCapabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::Action_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAction().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommCapabilityType::CapabilityID& boundedList = accessor.getCapabilityID();
        const uci::type::CommCapabilityType::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.enableSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::Ranking_Name) {
      CapabilityCommandRankingType::deserialize(valueType.second, accessor.enableRanking(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::Classification_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.enableClassification(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::ConnectionRequest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableConnectionRequest().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::ActivateProfileID_Name) {
      CommProfileID_Type::deserialize(valueType.second, accessor.enableActivateProfileID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::NetworkLinkID_Name) {
      NetworkLinkID_Type::deserialize(valueType.second, accessor.enableNetworkLinkID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::CommonSettings_Name) {
      CommControlType::deserialize(valueType.second, accessor.enableCommonSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::CryptoKey_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommCapabilityType::CryptoKey& boundedList = accessor.getCryptoKey();
        const uci::type::CommCapabilityType::CryptoKey::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CryptoLocationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::CryptoZeroize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommCapabilityType::CryptoZeroize& boundedList = accessor.getCryptoZeroize();
        const uci::type::CommCapabilityType::CryptoZeroize::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CryptoLocationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::CryptoRollover_Name) {
      CryptoRolloverCommandType::deserialize(valueType.second, accessor.enableCryptoRollover(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::LinkPortAssignments_Name) {
      CommLinkPortMapType::deserialize(valueType.second, accessor.enableLinkPortAssignments(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::VerboseStatus_Name) {
      VerboseStatusType::deserialize(valueType.second, accessor.enableVerboseStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::WaveformSpecificSettings_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableWaveformSpecificSettings(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommCapabilityType_Names::LinkConnectionRequest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommCapabilityType::LinkConnectionRequest& boundedList = accessor.getLinkConnectionRequest();
        const uci::type::CommCapabilityType::LinkConnectionRequest::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::LinkConnectionRequestType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CommCapabilityType::serialize(const uci::type::CommCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommCapabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommCapabilityType_Names::Extern_Type_Name);
  }
  NetworkLinkActionTypeEnum::serialize(accessor.getAction(), node, CommCapabilityType_Names::Action_Name, false);
  {
    const uci::type::CommCapabilityType::CapabilityID& boundedList = accessor.getCapabilityID();
    for (uci::type::CommCapabilityType::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityID_Type::serialize(boundedList.at(i), node, CommCapabilityType_Names::CapabilityID_Name);
    }
  }
  if (accessor.hasSubsystemID()) {
    SubsystemID_Type::serialize(accessor.getSubsystemID(), node, CommCapabilityType_Names::SubsystemID_Name);
  }
  if (accessor.hasRanking()) {
    CapabilityCommandRankingType::serialize(accessor.getRanking(), node, CommCapabilityType_Names::Ranking_Name);
  }
  if (accessor.hasClassification()) {
    SecurityInformationType::serialize(accessor.getClassification(), node, CommCapabilityType_Names::Classification_Name);
  }
  if (accessor.hasConnectionRequest()) {
    CommConnectionCommandEnum::serialize(accessor.getConnectionRequest(), node, CommCapabilityType_Names::ConnectionRequest_Name, false);
  }
  if (accessor.hasActivateProfileID()) {
    CommProfileID_Type::serialize(accessor.getActivateProfileID(), node, CommCapabilityType_Names::ActivateProfileID_Name);
  }
  if (accessor.hasNetworkLinkID()) {
    NetworkLinkID_Type::serialize(accessor.getNetworkLinkID(), node, CommCapabilityType_Names::NetworkLinkID_Name);
  }
  if (accessor.hasCommonSettings()) {
    CommControlType::serialize(accessor.getCommonSettings(), node, CommCapabilityType_Names::CommonSettings_Name);
  }
  {
    const uci::type::CommCapabilityType::CryptoKey& boundedList = accessor.getCryptoKey();
    for (uci::type::CommCapabilityType::CryptoKey::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CryptoLocationType::serialize(boundedList.at(i), node, CommCapabilityType_Names::CryptoKey_Name);
    }
  }
  {
    const uci::type::CommCapabilityType::CryptoZeroize& boundedList = accessor.getCryptoZeroize();
    for (uci::type::CommCapabilityType::CryptoZeroize::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CryptoLocationType::serialize(boundedList.at(i), node, CommCapabilityType_Names::CryptoZeroize_Name);
    }
  }
  if (accessor.hasCryptoRollover()) {
    CryptoRolloverCommandType::serialize(accessor.getCryptoRollover(), node, CommCapabilityType_Names::CryptoRollover_Name);
  }
  if (accessor.hasLinkPortAssignments()) {
    CommLinkPortMapType::serialize(accessor.getLinkPortAssignments(), node, CommCapabilityType_Names::LinkPortAssignments_Name);
  }
  if (accessor.hasVerboseStatus()) {
    VerboseStatusType::serialize(accessor.getVerboseStatus(), node, CommCapabilityType_Names::VerboseStatus_Name);
  }
  if (accessor.hasWaveformSpecificSettings()) {
    CommWaveformCapabilityCommandPET::serialize(accessor.getWaveformSpecificSettings(), node, CommCapabilityType_Names::WaveformSpecificSettings_Name);
  }
  {
    const uci::type::CommCapabilityType::LinkConnectionRequest& boundedList = accessor.getLinkConnectionRequest();
    for (uci::type::CommCapabilityType::LinkConnectionRequest::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::LinkConnectionRequestType::serialize(boundedList.at(i), node, CommCapabilityType_Names::LinkConnectionRequest_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommCapabilityType& CommCapabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommCapabilityType>().release());
}

uci::type::CommCapabilityType& CommCapabilityType::create(const uci::type::CommCapabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommCapabilityType> newAccessor{boost::make_unique<asb_uci::type::CommCapabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommCapabilityType::destroy(uci::type::CommCapabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::CommCapabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

