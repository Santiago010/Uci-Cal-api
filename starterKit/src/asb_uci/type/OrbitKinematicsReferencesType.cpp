/** @file OrbitKinematicsReferencesType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitKinematicsReferencesType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EntityOrbitalElementSetID_Type.h"
#include "../../../include/asb_uci/type/EntityOrbitalEphemerisID_Type.h"
#include "../../../include/asb_uci/type/OrbitKinematicsSequenceID_Type.h"
#include "../../../include/asb_uci/type/OrbitManeuverSegmentID_Type.h"
#include "../../../include/asb_uci/type/OrbitPlanID_Type.h"
#include "../../../include/asb_uci/type/SystemOrbitalElementSetID_Type.h"
#include "../../../include/asb_uci/type/SystemOrbitalEphemerisID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityOrbitalElementSetID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityOrbitalEphemerisID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitKinematicsReferencesType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitKinematicsSequenceID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitManeuverSegmentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitPlanID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemOrbitalElementSetID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemOrbitalEphemerisID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitKinematicsReferencesType::OrbitKinematicsReferencesType() = default;

OrbitKinematicsReferencesType::~OrbitKinematicsReferencesType() = default;

void OrbitKinematicsReferencesType::copy(const uci::type::OrbitKinematicsReferencesType& accessor) {
  copyImpl(accessor, false);
}

void OrbitKinematicsReferencesType::copyImpl(const uci::type::OrbitKinematicsReferencesType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitKinematicsReferencesType&>(accessor);
    if (accessorImpl.orbitPlanID_Accessor) {
      setOrbitPlanID(*(accessorImpl.orbitPlanID_Accessor));
    } else {
      orbitPlanID_Accessor.reset();
    }
    if (accessorImpl.orbitPlanSequenceID_Accessor) {
      setOrbitPlanSequenceID(*(accessorImpl.orbitPlanSequenceID_Accessor));
    } else {
      orbitPlanSequenceID_Accessor.reset();
    }
    if (accessorImpl.orbitPlanManeuverSegmentID_Accessor) {
      setOrbitPlanManeuverSegmentID(*(accessorImpl.orbitPlanManeuverSegmentID_Accessor));
    } else {
      orbitPlanManeuverSegmentID_Accessor.reset();
    }
    if (accessorImpl.systemElementSetID_Accessor) {
      setSystemElementSetID(*(accessorImpl.systemElementSetID_Accessor));
    } else {
      systemElementSetID_Accessor.reset();
    }
    if (accessorImpl.entityElementSetID_Accessor) {
      setEntityElementSetID(*(accessorImpl.entityElementSetID_Accessor));
    } else {
      entityElementSetID_Accessor.reset();
    }
    if (accessorImpl.systemEphemerisID_Accessor) {
      setSystemEphemerisID(*(accessorImpl.systemEphemerisID_Accessor));
    } else {
      systemEphemerisID_Accessor.reset();
    }
    if (accessorImpl.entityEphemerisID_Accessor) {
      setEntityEphemerisID(*(accessorImpl.entityEphemerisID_Accessor));
    } else {
      entityEphemerisID_Accessor.reset();
    }
  }
}

void OrbitKinematicsReferencesType::reset() noexcept {
  orbitPlanID_Accessor.reset();
  orbitPlanSequenceID_Accessor.reset();
  orbitPlanManeuverSegmentID_Accessor.reset();
  systemElementSetID_Accessor.reset();
  entityElementSetID_Accessor.reset();
  systemEphemerisID_Accessor.reset();
  entityEphemerisID_Accessor.reset();
}

uci::type::OrbitPlanID_Type& OrbitKinematicsReferencesType::getOrbitPlanID_() const {
  if (orbitPlanID_Accessor) {
    return *orbitPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitPlanID(): An attempt was made to get an optional field that was not enabled, call hasOrbitPlanID() to determine if it is safe to call getOrbitPlanID()");
}

const uci::type::OrbitPlanID_Type& OrbitKinematicsReferencesType::getOrbitPlanID() const {
  return getOrbitPlanID_();
}

uci::type::OrbitPlanID_Type& OrbitKinematicsReferencesType::getOrbitPlanID() {
  return getOrbitPlanID_();
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::setOrbitPlanID(const uci::type::OrbitPlanID_Type& accessor) {
  enableOrbitPlanID();
  if (&accessor != orbitPlanID_Accessor.get()) {
    orbitPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsReferencesType::hasOrbitPlanID() const noexcept {
  return static_cast<bool>(orbitPlanID_Accessor);
}

uci::type::OrbitPlanID_Type& OrbitKinematicsReferencesType::enableOrbitPlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitPlanID_Type : type};
  if ((!orbitPlanID_Accessor) || (orbitPlanID_Accessor->getAccessorType() != requestedType)) {
    orbitPlanID_Accessor = OrbitPlanID_Type::create(requestedType);
    if (!orbitPlanID_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitPlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitPlanID_Accessor;
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::clearOrbitPlanID() noexcept {
  orbitPlanID_Accessor.reset();
  return *this;
}

uci::type::OrbitKinematicsSequenceID_Type& OrbitKinematicsReferencesType::getOrbitPlanSequenceID_() const {
  if (orbitPlanSequenceID_Accessor) {
    return *orbitPlanSequenceID_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitPlanSequenceID(): An attempt was made to get an optional field that was not enabled, call hasOrbitPlanSequenceID() to determine if it is safe to call getOrbitPlanSequenceID()");
}

const uci::type::OrbitKinematicsSequenceID_Type& OrbitKinematicsReferencesType::getOrbitPlanSequenceID() const {
  return getOrbitPlanSequenceID_();
}

uci::type::OrbitKinematicsSequenceID_Type& OrbitKinematicsReferencesType::getOrbitPlanSequenceID() {
  return getOrbitPlanSequenceID_();
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::setOrbitPlanSequenceID(const uci::type::OrbitKinematicsSequenceID_Type& accessor) {
  enableOrbitPlanSequenceID();
  if (&accessor != orbitPlanSequenceID_Accessor.get()) {
    orbitPlanSequenceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsReferencesType::hasOrbitPlanSequenceID() const noexcept {
  return static_cast<bool>(orbitPlanSequenceID_Accessor);
}

uci::type::OrbitKinematicsSequenceID_Type& OrbitKinematicsReferencesType::enableOrbitPlanSequenceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsSequenceID_Type : type};
  if ((!orbitPlanSequenceID_Accessor) || (orbitPlanSequenceID_Accessor->getAccessorType() != requestedType)) {
    orbitPlanSequenceID_Accessor = OrbitKinematicsSequenceID_Type::create(requestedType);
    if (!orbitPlanSequenceID_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitPlanSequenceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitPlanSequenceID_Accessor;
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::clearOrbitPlanSequenceID() noexcept {
  orbitPlanSequenceID_Accessor.reset();
  return *this;
}

uci::type::OrbitManeuverSegmentID_Type& OrbitKinematicsReferencesType::getOrbitPlanManeuverSegmentID_() const {
  if (orbitPlanManeuverSegmentID_Accessor) {
    return *orbitPlanManeuverSegmentID_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitPlanManeuverSegmentID(): An attempt was made to get an optional field that was not enabled, call hasOrbitPlanManeuverSegmentID() to determine if it is safe to call getOrbitPlanManeuverSegmentID()");
}

const uci::type::OrbitManeuverSegmentID_Type& OrbitKinematicsReferencesType::getOrbitPlanManeuverSegmentID() const {
  return getOrbitPlanManeuverSegmentID_();
}

uci::type::OrbitManeuverSegmentID_Type& OrbitKinematicsReferencesType::getOrbitPlanManeuverSegmentID() {
  return getOrbitPlanManeuverSegmentID_();
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::setOrbitPlanManeuverSegmentID(const uci::type::OrbitManeuverSegmentID_Type& accessor) {
  enableOrbitPlanManeuverSegmentID();
  if (&accessor != orbitPlanManeuverSegmentID_Accessor.get()) {
    orbitPlanManeuverSegmentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsReferencesType::hasOrbitPlanManeuverSegmentID() const noexcept {
  return static_cast<bool>(orbitPlanManeuverSegmentID_Accessor);
}

uci::type::OrbitManeuverSegmentID_Type& OrbitKinematicsReferencesType::enableOrbitPlanManeuverSegmentID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitManeuverSegmentID_Type : type};
  if ((!orbitPlanManeuverSegmentID_Accessor) || (orbitPlanManeuverSegmentID_Accessor->getAccessorType() != requestedType)) {
    orbitPlanManeuverSegmentID_Accessor = OrbitManeuverSegmentID_Type::create(requestedType);
    if (!orbitPlanManeuverSegmentID_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitPlanManeuverSegmentID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitPlanManeuverSegmentID_Accessor;
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::clearOrbitPlanManeuverSegmentID() noexcept {
  orbitPlanManeuverSegmentID_Accessor.reset();
  return *this;
}

uci::type::SystemOrbitalElementSetID_Type& OrbitKinematicsReferencesType::getSystemElementSetID_() const {
  if (systemElementSetID_Accessor) {
    return *systemElementSetID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemElementSetID(): An attempt was made to get an optional field that was not enabled, call hasSystemElementSetID() to determine if it is safe to call getSystemElementSetID()");
}

const uci::type::SystemOrbitalElementSetID_Type& OrbitKinematicsReferencesType::getSystemElementSetID() const {
  return getSystemElementSetID_();
}

uci::type::SystemOrbitalElementSetID_Type& OrbitKinematicsReferencesType::getSystemElementSetID() {
  return getSystemElementSetID_();
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::setSystemElementSetID(const uci::type::SystemOrbitalElementSetID_Type& accessor) {
  enableSystemElementSetID();
  if (&accessor != systemElementSetID_Accessor.get()) {
    systemElementSetID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsReferencesType::hasSystemElementSetID() const noexcept {
  return static_cast<bool>(systemElementSetID_Accessor);
}

uci::type::SystemOrbitalElementSetID_Type& OrbitKinematicsReferencesType::enableSystemElementSetID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemOrbitalElementSetID_Type : type};
  if ((!systemElementSetID_Accessor) || (systemElementSetID_Accessor->getAccessorType() != requestedType)) {
    systemElementSetID_Accessor = SystemOrbitalElementSetID_Type::create(requestedType);
    if (!systemElementSetID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemElementSetID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemElementSetID_Accessor;
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::clearSystemElementSetID() noexcept {
  systemElementSetID_Accessor.reset();
  return *this;
}

uci::type::EntityOrbitalElementSetID_Type& OrbitKinematicsReferencesType::getEntityElementSetID_() const {
  if (entityElementSetID_Accessor) {
    return *entityElementSetID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityElementSetID(): An attempt was made to get an optional field that was not enabled, call hasEntityElementSetID() to determine if it is safe to call getEntityElementSetID()");
}

const uci::type::EntityOrbitalElementSetID_Type& OrbitKinematicsReferencesType::getEntityElementSetID() const {
  return getEntityElementSetID_();
}

uci::type::EntityOrbitalElementSetID_Type& OrbitKinematicsReferencesType::getEntityElementSetID() {
  return getEntityElementSetID_();
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::setEntityElementSetID(const uci::type::EntityOrbitalElementSetID_Type& accessor) {
  enableEntityElementSetID();
  if (&accessor != entityElementSetID_Accessor.get()) {
    entityElementSetID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsReferencesType::hasEntityElementSetID() const noexcept {
  return static_cast<bool>(entityElementSetID_Accessor);
}

uci::type::EntityOrbitalElementSetID_Type& OrbitKinematicsReferencesType::enableEntityElementSetID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityOrbitalElementSetID_Type : type};
  if ((!entityElementSetID_Accessor) || (entityElementSetID_Accessor->getAccessorType() != requestedType)) {
    entityElementSetID_Accessor = EntityOrbitalElementSetID_Type::create(requestedType);
    if (!entityElementSetID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityElementSetID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityElementSetID_Accessor;
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::clearEntityElementSetID() noexcept {
  entityElementSetID_Accessor.reset();
  return *this;
}

uci::type::SystemOrbitalEphemerisID_Type& OrbitKinematicsReferencesType::getSystemEphemerisID_() const {
  if (systemEphemerisID_Accessor) {
    return *systemEphemerisID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemEphemerisID(): An attempt was made to get an optional field that was not enabled, call hasSystemEphemerisID() to determine if it is safe to call getSystemEphemerisID()");
}

const uci::type::SystemOrbitalEphemerisID_Type& OrbitKinematicsReferencesType::getSystemEphemerisID() const {
  return getSystemEphemerisID_();
}

uci::type::SystemOrbitalEphemerisID_Type& OrbitKinematicsReferencesType::getSystemEphemerisID() {
  return getSystemEphemerisID_();
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::setSystemEphemerisID(const uci::type::SystemOrbitalEphemerisID_Type& accessor) {
  enableSystemEphemerisID();
  if (&accessor != systemEphemerisID_Accessor.get()) {
    systemEphemerisID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsReferencesType::hasSystemEphemerisID() const noexcept {
  return static_cast<bool>(systemEphemerisID_Accessor);
}

uci::type::SystemOrbitalEphemerisID_Type& OrbitKinematicsReferencesType::enableSystemEphemerisID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemOrbitalEphemerisID_Type : type};
  if ((!systemEphemerisID_Accessor) || (systemEphemerisID_Accessor->getAccessorType() != requestedType)) {
    systemEphemerisID_Accessor = SystemOrbitalEphemerisID_Type::create(requestedType);
    if (!systemEphemerisID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemEphemerisID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemEphemerisID_Accessor;
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::clearSystemEphemerisID() noexcept {
  systemEphemerisID_Accessor.reset();
  return *this;
}

uci::type::EntityOrbitalEphemerisID_Type& OrbitKinematicsReferencesType::getEntityEphemerisID_() const {
  if (entityEphemerisID_Accessor) {
    return *entityEphemerisID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityEphemerisID(): An attempt was made to get an optional field that was not enabled, call hasEntityEphemerisID() to determine if it is safe to call getEntityEphemerisID()");
}

const uci::type::EntityOrbitalEphemerisID_Type& OrbitKinematicsReferencesType::getEntityEphemerisID() const {
  return getEntityEphemerisID_();
}

uci::type::EntityOrbitalEphemerisID_Type& OrbitKinematicsReferencesType::getEntityEphemerisID() {
  return getEntityEphemerisID_();
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::setEntityEphemerisID(const uci::type::EntityOrbitalEphemerisID_Type& accessor) {
  enableEntityEphemerisID();
  if (&accessor != entityEphemerisID_Accessor.get()) {
    entityEphemerisID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsReferencesType::hasEntityEphemerisID() const noexcept {
  return static_cast<bool>(entityEphemerisID_Accessor);
}

uci::type::EntityOrbitalEphemerisID_Type& OrbitKinematicsReferencesType::enableEntityEphemerisID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityOrbitalEphemerisID_Type : type};
  if ((!entityEphemerisID_Accessor) || (entityEphemerisID_Accessor->getAccessorType() != requestedType)) {
    entityEphemerisID_Accessor = EntityOrbitalEphemerisID_Type::create(requestedType);
    if (!entityEphemerisID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityEphemerisID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityEphemerisID_Accessor;
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::clearEntityEphemerisID() noexcept {
  entityEphemerisID_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitKinematicsReferencesType> OrbitKinematicsReferencesType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsReferencesType : type};
  return (requestedType == uci::type::accessorType::orbitKinematicsReferencesType) ? boost::make_unique<OrbitKinematicsReferencesType>() : nullptr;
}

/**  */
namespace OrbitKinematicsReferencesType_Names {

constexpr const char* Extern_Type_Name{"OrbitKinematicsReferencesType"};
constexpr const char* OrbitPlanID_Name{"OrbitPlanID"};
constexpr const char* OrbitPlanSequenceID_Name{"OrbitPlanSequenceID"};
constexpr const char* OrbitPlanManeuverSegmentID_Name{"OrbitPlanManeuverSegmentID"};
constexpr const char* SystemElementSetID_Name{"SystemElementSetID"};
constexpr const char* EntityElementSetID_Name{"EntityElementSetID"};
constexpr const char* SystemEphemerisID_Name{"SystemEphemerisID"};
constexpr const char* EntityEphemerisID_Name{"EntityEphemerisID"};

} // namespace OrbitKinematicsReferencesType_Names

void OrbitKinematicsReferencesType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitKinematicsReferencesType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitKinematicsReferencesType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitKinematicsReferencesType_Names::OrbitPlanID_Name) {
      OrbitPlanID_Type::deserialize(valueType.second, accessor.enableOrbitPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsReferencesType_Names::OrbitPlanSequenceID_Name) {
      OrbitKinematicsSequenceID_Type::deserialize(valueType.second, accessor.enableOrbitPlanSequenceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsReferencesType_Names::OrbitPlanManeuverSegmentID_Name) {
      OrbitManeuverSegmentID_Type::deserialize(valueType.second, accessor.enableOrbitPlanManeuverSegmentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsReferencesType_Names::SystemElementSetID_Name) {
      SystemOrbitalElementSetID_Type::deserialize(valueType.second, accessor.enableSystemElementSetID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsReferencesType_Names::EntityElementSetID_Name) {
      EntityOrbitalElementSetID_Type::deserialize(valueType.second, accessor.enableEntityElementSetID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsReferencesType_Names::SystemEphemerisID_Name) {
      SystemOrbitalEphemerisID_Type::deserialize(valueType.second, accessor.enableSystemEphemerisID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsReferencesType_Names::EntityEphemerisID_Name) {
      EntityOrbitalEphemerisID_Type::deserialize(valueType.second, accessor.enableEntityEphemerisID(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitKinematicsReferencesType::serialize(const uci::type::OrbitKinematicsReferencesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitKinematicsReferencesType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitKinematicsReferencesType_Names::Extern_Type_Name);
  }
  if (accessor.hasOrbitPlanID()) {
    OrbitPlanID_Type::serialize(accessor.getOrbitPlanID(), node, OrbitKinematicsReferencesType_Names::OrbitPlanID_Name);
  }
  if (accessor.hasOrbitPlanSequenceID()) {
    OrbitKinematicsSequenceID_Type::serialize(accessor.getOrbitPlanSequenceID(), node, OrbitKinematicsReferencesType_Names::OrbitPlanSequenceID_Name);
  }
  if (accessor.hasOrbitPlanManeuverSegmentID()) {
    OrbitManeuverSegmentID_Type::serialize(accessor.getOrbitPlanManeuverSegmentID(), node, OrbitKinematicsReferencesType_Names::OrbitPlanManeuverSegmentID_Name);
  }
  if (accessor.hasSystemElementSetID()) {
    SystemOrbitalElementSetID_Type::serialize(accessor.getSystemElementSetID(), node, OrbitKinematicsReferencesType_Names::SystemElementSetID_Name);
  }
  if (accessor.hasEntityElementSetID()) {
    EntityOrbitalElementSetID_Type::serialize(accessor.getEntityElementSetID(), node, OrbitKinematicsReferencesType_Names::EntityElementSetID_Name);
  }
  if (accessor.hasSystemEphemerisID()) {
    SystemOrbitalEphemerisID_Type::serialize(accessor.getSystemEphemerisID(), node, OrbitKinematicsReferencesType_Names::SystemEphemerisID_Name);
  }
  if (accessor.hasEntityEphemerisID()) {
    EntityOrbitalEphemerisID_Type::serialize(accessor.getEntityEphemerisID(), node, OrbitKinematicsReferencesType_Names::EntityEphemerisID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitKinematicsReferencesType>().release());
}

uci::type::OrbitKinematicsReferencesType& OrbitKinematicsReferencesType::create(const uci::type::OrbitKinematicsReferencesType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitKinematicsReferencesType> newAccessor{boost::make_unique<asb_uci::type::OrbitKinematicsReferencesType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitKinematicsReferencesType::destroy(uci::type::OrbitKinematicsReferencesType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitKinematicsReferencesType*>(&accessor);
}

} // namespace type

} // namespace uci

