/** @file PlanWindowModificationTypeChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlanWindowModificationTypeChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/DurationType.h"
#include "uci/type/PlanWindowModificationTypeChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanWindowModificationTypeChoiceType::PlanWindowModificationTypeChoiceType() = default;

PlanWindowModificationTypeChoiceType::~PlanWindowModificationTypeChoiceType() = default;

void PlanWindowModificationTypeChoiceType::copy(const uci::type::PlanWindowModificationTypeChoiceType& accessor) {
  copyImpl(accessor, false);
}

void PlanWindowModificationTypeChoiceType::copyImpl(const uci::type::PlanWindowModificationTypeChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlanWindowModificationTypeChoiceType&>(accessor);
    if (accessorImpl.window_Accessor) {
      setWindow(*(accessorImpl.window_Accessor));
    } else {
      window_Accessor.reset();
    }
    timeOffset_Accessor = (accessorImpl.timeOffset_Accessor ? accessorImpl.timeOffset_Accessor : boost::none);
  }
}

void PlanWindowModificationTypeChoiceType::reset() noexcept {
  window_Accessor.reset();
  timeOffset_Accessor.reset();
}

uci::type::PlanWindowModificationTypeChoiceType::PlanWindowModificationTypeChoiceTypeChoice PlanWindowModificationTypeChoiceType::getPlanWindowModificationTypeChoiceTypeChoiceOrdinal() const noexcept {
  if (window_Accessor) {
    return PLANWINDOWMODIFICATIONTYPECHOICETYPE_CHOICE_WINDOW;
  }
  if (timeOffset_Accessor) {
    return PLANWINDOWMODIFICATIONTYPECHOICETYPE_CHOICE_TIMEOFFSET;
  }
  return PLANWINDOWMODIFICATIONTYPECHOICETYPE_CHOICE_NONE;
}

uci::type::PlanWindowModificationTypeChoiceType& PlanWindowModificationTypeChoiceType::setPlanWindowModificationTypeChoiceTypeChoiceOrdinal(uci::type::PlanWindowModificationTypeChoiceType::PlanWindowModificationTypeChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PLANWINDOWMODIFICATIONTYPECHOICETYPE_CHOICE_WINDOW:
      chooseWindow("setPlanWindowModificationTypeChoiceTypeChoiceOrdinal", type);
      break;
    case PLANWINDOWMODIFICATIONTYPECHOICETYPE_CHOICE_TIMEOFFSET:
      chooseTimeOffset();
      break;
    default:
      throw uci::base::UCIException("Error in setPlanWindowModificationTypeChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::DateTimeRangeType& PlanWindowModificationTypeChoiceType::getWindow_() const {
  if (window_Accessor) {
    return *window_Accessor;
  }
  throw uci::base::UCIException("Error in getWindow(): Unable to get Window, field not selected");
}

const uci::type::DateTimeRangeType& PlanWindowModificationTypeChoiceType::getWindow() const {
  return getWindow_();
}

uci::type::DateTimeRangeType& PlanWindowModificationTypeChoiceType::getWindow() {
  return getWindow_();
}

uci::type::PlanWindowModificationTypeChoiceType& PlanWindowModificationTypeChoiceType::setWindow(const uci::type::DateTimeRangeType& accessor) {
  chooseWindow();
  if (&accessor != window_Accessor.get()) {
    window_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanWindowModificationTypeChoiceType::isWindow() const noexcept {
  return static_cast<bool>(window_Accessor);
}

uci::type::DateTimeRangeType& PlanWindowModificationTypeChoiceType::chooseWindow(const std::string& method, uci::base::accessorType::AccessorType type) {
  timeOffset_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!window_Accessor) || (window_Accessor->getAccessorType() != requestedType)) {
    window_Accessor = DateTimeRangeType::create(type);
    if (!window_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *window_Accessor;
}

uci::type::DateTimeRangeType& PlanWindowModificationTypeChoiceType::chooseWindow(uci::base::accessorType::AccessorType type) {
  return chooseWindow("chooseWindow", type);
}

uci::type::DurationTypeValue PlanWindowModificationTypeChoiceType::getTimeOffset() const {
  if (timeOffset_Accessor) {
    return *timeOffset_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeOffset(): Unable to get TimeOffset, field not selected");
}

uci::type::PlanWindowModificationTypeChoiceType& PlanWindowModificationTypeChoiceType::setTimeOffset(uci::type::DurationTypeValue value) {
  chooseTimeOffset();
  timeOffset_Accessor = value;
  return *this;
}

bool PlanWindowModificationTypeChoiceType::isTimeOffset() const noexcept {
  return static_cast<bool>(timeOffset_Accessor);
}

void PlanWindowModificationTypeChoiceType::chooseTimeOffset() {
  window_Accessor.reset();
  if (!timeOffset_Accessor) {
    timeOffset_Accessor = boost::optional<asb_xs::Duration>();
  }
}

std::unique_ptr<PlanWindowModificationTypeChoiceType> PlanWindowModificationTypeChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planWindowModificationTypeChoiceType : type};
  return (requestedType == uci::type::accessorType::planWindowModificationTypeChoiceType) ? boost::make_unique<PlanWindowModificationTypeChoiceType>() : nullptr;
}

/**  */
namespace PlanWindowModificationTypeChoiceType_Names {

constexpr const char* Extern_Type_Name{"PlanWindowModificationTypeChoiceType"};
constexpr const char* Window_Name{"Window"};
constexpr const char* TimeOffset_Name{"TimeOffset"};

} // namespace PlanWindowModificationTypeChoiceType_Names

void PlanWindowModificationTypeChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanWindowModificationTypeChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanWindowModificationTypeChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanWindowModificationTypeChoiceType_Names::Window_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.chooseWindow(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanWindowModificationTypeChoiceType_Names::TimeOffset_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeOffset(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string PlanWindowModificationTypeChoiceType::serialize(const uci::type::PlanWindowModificationTypeChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanWindowModificationTypeChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanWindowModificationTypeChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isWindow()) {
    DateTimeRangeType::serialize(accessor.getWindow(), node, PlanWindowModificationTypeChoiceType_Names::Window_Name);
  } else if (accessor.isTimeOffset()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTimeOffset(), node, PlanWindowModificationTypeChoiceType_Names::TimeOffset_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanWindowModificationTypeChoiceType& PlanWindowModificationTypeChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanWindowModificationTypeChoiceType>().release());
}

uci::type::PlanWindowModificationTypeChoiceType& PlanWindowModificationTypeChoiceType::create(const uci::type::PlanWindowModificationTypeChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanWindowModificationTypeChoiceType> newAccessor{boost::make_unique<asb_uci::type::PlanWindowModificationTypeChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanWindowModificationTypeChoiceType::destroy(uci::type::PlanWindowModificationTypeChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanWindowModificationTypeChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

