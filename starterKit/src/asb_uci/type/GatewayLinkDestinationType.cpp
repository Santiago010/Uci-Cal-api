/** @file GatewayLinkDestinationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/GatewayLinkDestinationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityID_Type.h"
#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/CommConfigurationStateEnum.h"
#include "../../../include/asb_uci/type/CommLinkPortMapType.h"
#include "../../../include/asb_uci/type/MessageDestinationType.h"
#include "../../../include/asb_uci/type/NetworkLinkID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommConfigurationStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLinkPortMapType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayLinkDestinationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MessageDestinationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NetworkLinkID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

GatewayLinkDestinationType::GatewayLinkDestinationType()
  : dataDestination_Accessor{boost::make_unique<DataDestination>(0, SIZE_MAX)} {
}

GatewayLinkDestinationType::~GatewayLinkDestinationType() = default;

void GatewayLinkDestinationType::copy(const uci::type::GatewayLinkDestinationType& accessor) {
  copyImpl(accessor, false);
}

void GatewayLinkDestinationType::copyImpl(const uci::type::GatewayLinkDestinationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const GatewayLinkDestinationType&>(accessor);
    if (accessorImpl.networkLinkID_Accessor) {
      setNetworkLinkID(*(accessorImpl.networkLinkID_Accessor));
    } else {
      networkLinkID_Accessor.reset();
    }
    if (accessorImpl.commCapabilityID_Accessor) {
      setCommCapabilityID(*(accessorImpl.commCapabilityID_Accessor));
    } else {
      commCapabilityID_Accessor.reset();
    }
    if (accessorImpl.commActivityID_Accessor) {
      setCommActivityID(*(accessorImpl.commActivityID_Accessor));
    } else {
      commActivityID_Accessor.reset();
    }
    setDataDestination(*(accessorImpl.dataDestination_Accessor));
    if (accessorImpl.linkPortAssignments_Accessor) {
      setLinkPortAssignments(*(accessorImpl.linkPortAssignments_Accessor));
    } else {
      linkPortAssignments_Accessor.reset();
    }
    if (accessorImpl.configurationState_Accessor) {
      setConfigurationState(*(accessorImpl.configurationState_Accessor));
    } else {
      configurationState_Accessor.reset();
    }
  }
}

void GatewayLinkDestinationType::reset() noexcept {
  networkLinkID_Accessor.reset();
  commCapabilityID_Accessor.reset();
  commActivityID_Accessor.reset();
  dataDestination_Accessor->reset();
  linkPortAssignments_Accessor.reset();
  configurationState_Accessor.reset();
}

uci::type::NetworkLinkID_Type& GatewayLinkDestinationType::getNetworkLinkID_() const {
  if (networkLinkID_Accessor) {
    return *networkLinkID_Accessor;
  }
  throw uci::base::UCIException("Error in getNetworkLinkID(): An attempt was made to get an optional field that was not enabled, call hasNetworkLinkID() to determine if it is safe to call getNetworkLinkID()");
}

const uci::type::NetworkLinkID_Type& GatewayLinkDestinationType::getNetworkLinkID() const {
  return getNetworkLinkID_();
}

uci::type::NetworkLinkID_Type& GatewayLinkDestinationType::getNetworkLinkID() {
  return getNetworkLinkID_();
}

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::setNetworkLinkID(const uci::type::NetworkLinkID_Type& accessor) {
  enableNetworkLinkID();
  if (&accessor != networkLinkID_Accessor.get()) {
    networkLinkID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLinkDestinationType::hasNetworkLinkID() const noexcept {
  return static_cast<bool>(networkLinkID_Accessor);
}

uci::type::NetworkLinkID_Type& GatewayLinkDestinationType::enableNetworkLinkID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::networkLinkID_Type : type};
  if ((!networkLinkID_Accessor) || (networkLinkID_Accessor->getAccessorType() != requestedType)) {
    networkLinkID_Accessor = NetworkLinkID_Type::create(requestedType);
    if (!networkLinkID_Accessor) {
      throw uci::base::UCIException("Error in enableNetworkLinkID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *networkLinkID_Accessor;
}

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::clearNetworkLinkID() noexcept {
  networkLinkID_Accessor.reset();
  return *this;
}

uci::type::CapabilityID_Type& GatewayLinkDestinationType::getCommCapabilityID_() const {
  if (commCapabilityID_Accessor) {
    return *commCapabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getCommCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasCommCapabilityID() to determine if it is safe to call getCommCapabilityID()");
}

const uci::type::CapabilityID_Type& GatewayLinkDestinationType::getCommCapabilityID() const {
  return getCommCapabilityID_();
}

uci::type::CapabilityID_Type& GatewayLinkDestinationType::getCommCapabilityID() {
  return getCommCapabilityID_();
}

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::setCommCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableCommCapabilityID();
  if (&accessor != commCapabilityID_Accessor.get()) {
    commCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLinkDestinationType::hasCommCapabilityID() const noexcept {
  return static_cast<bool>(commCapabilityID_Accessor);
}

uci::type::CapabilityID_Type& GatewayLinkDestinationType::enableCommCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!commCapabilityID_Accessor) || (commCapabilityID_Accessor->getAccessorType() != requestedType)) {
    commCapabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!commCapabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableCommCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commCapabilityID_Accessor;
}

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::clearCommCapabilityID() noexcept {
  commCapabilityID_Accessor.reset();
  return *this;
}

uci::type::ActivityID_Type& GatewayLinkDestinationType::getCommActivityID_() const {
  if (commActivityID_Accessor) {
    return *commActivityID_Accessor;
  }
  throw uci::base::UCIException("Error in getCommActivityID(): An attempt was made to get an optional field that was not enabled, call hasCommActivityID() to determine if it is safe to call getCommActivityID()");
}

const uci::type::ActivityID_Type& GatewayLinkDestinationType::getCommActivityID() const {
  return getCommActivityID_();
}

uci::type::ActivityID_Type& GatewayLinkDestinationType::getCommActivityID() {
  return getCommActivityID_();
}

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::setCommActivityID(const uci::type::ActivityID_Type& accessor) {
  enableCommActivityID();
  if (&accessor != commActivityID_Accessor.get()) {
    commActivityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLinkDestinationType::hasCommActivityID() const noexcept {
  return static_cast<bool>(commActivityID_Accessor);
}

uci::type::ActivityID_Type& GatewayLinkDestinationType::enableCommActivityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityID_Type : type};
  if ((!commActivityID_Accessor) || (commActivityID_Accessor->getAccessorType() != requestedType)) {
    commActivityID_Accessor = ActivityID_Type::create(requestedType);
    if (!commActivityID_Accessor) {
      throw uci::base::UCIException("Error in enableCommActivityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commActivityID_Accessor;
}

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::clearCommActivityID() noexcept {
  commActivityID_Accessor.reset();
  return *this;
}

const uci::type::GatewayLinkDestinationType::DataDestination& GatewayLinkDestinationType::getDataDestination() const {
  return *dataDestination_Accessor;
}

uci::type::GatewayLinkDestinationType::DataDestination& GatewayLinkDestinationType::getDataDestination() {
  return *dataDestination_Accessor;
}

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::setDataDestination(const uci::type::GatewayLinkDestinationType::DataDestination& accessor) {
  if (&accessor != dataDestination_Accessor.get()) {
    dataDestination_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLinkPortMapType& GatewayLinkDestinationType::getLinkPortAssignments_() const {
  if (linkPortAssignments_Accessor) {
    return *linkPortAssignments_Accessor;
  }
  throw uci::base::UCIException("Error in getLinkPortAssignments(): An attempt was made to get an optional field that was not enabled, call hasLinkPortAssignments() to determine if it is safe to call getLinkPortAssignments()");
}

const uci::type::CommLinkPortMapType& GatewayLinkDestinationType::getLinkPortAssignments() const {
  return getLinkPortAssignments_();
}

uci::type::CommLinkPortMapType& GatewayLinkDestinationType::getLinkPortAssignments() {
  return getLinkPortAssignments_();
}

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::setLinkPortAssignments(const uci::type::CommLinkPortMapType& accessor) {
  enableLinkPortAssignments();
  if (&accessor != linkPortAssignments_Accessor.get()) {
    linkPortAssignments_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLinkDestinationType::hasLinkPortAssignments() const noexcept {
  return static_cast<bool>(linkPortAssignments_Accessor);
}

uci::type::CommLinkPortMapType& GatewayLinkDestinationType::enableLinkPortAssignments(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLinkPortMapType : type};
  if ((!linkPortAssignments_Accessor) || (linkPortAssignments_Accessor->getAccessorType() != requestedType)) {
    linkPortAssignments_Accessor = CommLinkPortMapType::create(requestedType);
    if (!linkPortAssignments_Accessor) {
      throw uci::base::UCIException("Error in enableLinkPortAssignments(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *linkPortAssignments_Accessor;
}

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::clearLinkPortAssignments() noexcept {
  linkPortAssignments_Accessor.reset();
  return *this;
}

uci::type::CommConfigurationStateEnum& GatewayLinkDestinationType::getConfigurationState_() const {
  if (configurationState_Accessor) {
    return *configurationState_Accessor;
  }
  throw uci::base::UCIException("Error in getConfigurationState(): An attempt was made to get an optional field that was not enabled, call hasConfigurationState() to determine if it is safe to call getConfigurationState()");
}

const uci::type::CommConfigurationStateEnum& GatewayLinkDestinationType::getConfigurationState() const {
  return getConfigurationState_();
}

uci::type::CommConfigurationStateEnum& GatewayLinkDestinationType::getConfigurationState() {
  return getConfigurationState_();
}

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::setConfigurationState(const uci::type::CommConfigurationStateEnum& accessor) {
  enableConfigurationState();
  if (&accessor != configurationState_Accessor.get()) {
    configurationState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::setConfigurationState(const uci::type::CommConfigurationStateEnum::EnumerationItem value) {
  enableConfigurationState().setValue(value);
  return *this;
}

bool GatewayLinkDestinationType::hasConfigurationState() const noexcept {
  return static_cast<bool>(configurationState_Accessor);
}

uci::type::CommConfigurationStateEnum& GatewayLinkDestinationType::enableConfigurationState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commConfigurationStateEnum : type};
  if ((!configurationState_Accessor) || (configurationState_Accessor->getAccessorType() != requestedType)) {
    configurationState_Accessor = CommConfigurationStateEnum::create(requestedType);
    if (!configurationState_Accessor) {
      throw uci::base::UCIException("Error in enableConfigurationState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *configurationState_Accessor;
}

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::clearConfigurationState() noexcept {
  configurationState_Accessor.reset();
  return *this;
}

std::unique_ptr<GatewayLinkDestinationType> GatewayLinkDestinationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLinkDestinationType : type};
  return (requestedType == uci::type::accessorType::gatewayLinkDestinationType) ? boost::make_unique<GatewayLinkDestinationType>() : nullptr;
}

/**  */
namespace GatewayLinkDestinationType_Names {

constexpr const char* Extern_Type_Name{"GatewayLinkDestinationType"};
constexpr const char* NetworkLinkID_Name{"NetworkLinkID"};
constexpr const char* CommCapabilityID_Name{"CommCapabilityID"};
constexpr const char* CommActivityID_Name{"CommActivityID"};
constexpr const char* DataDestination_Name{"DataDestination"};
constexpr const char* LinkPortAssignments_Name{"LinkPortAssignments"};
constexpr const char* ConfigurationState_Name{"ConfigurationState"};

} // namespace GatewayLinkDestinationType_Names

void GatewayLinkDestinationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::GatewayLinkDestinationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = GatewayLinkDestinationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + GatewayLinkDestinationType_Names::NetworkLinkID_Name) {
      NetworkLinkID_Type::deserialize(valueType.second, accessor.enableNetworkLinkID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLinkDestinationType_Names::CommCapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableCommCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLinkDestinationType_Names::CommActivityID_Name) {
      ActivityID_Type::deserialize(valueType.second, accessor.enableCommActivityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLinkDestinationType_Names::DataDestination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::GatewayLinkDestinationType::DataDestination& boundedList = accessor.getDataDestination();
        const uci::type::GatewayLinkDestinationType::DataDestination::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MessageDestinationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + GatewayLinkDestinationType_Names::LinkPortAssignments_Name) {
      CommLinkPortMapType::deserialize(valueType.second, accessor.enableLinkPortAssignments(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLinkDestinationType_Names::ConfigurationState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableConfigurationState().setValueFromName(*value);
      }
    }
  }
}

std::string GatewayLinkDestinationType::serialize(const uci::type::GatewayLinkDestinationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? GatewayLinkDestinationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, GatewayLinkDestinationType_Names::Extern_Type_Name);
  }
  if (accessor.hasNetworkLinkID()) {
    NetworkLinkID_Type::serialize(accessor.getNetworkLinkID(), node, GatewayLinkDestinationType_Names::NetworkLinkID_Name);
  }
  if (accessor.hasCommCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getCommCapabilityID(), node, GatewayLinkDestinationType_Names::CommCapabilityID_Name);
  }
  if (accessor.hasCommActivityID()) {
    ActivityID_Type::serialize(accessor.getCommActivityID(), node, GatewayLinkDestinationType_Names::CommActivityID_Name);
  }
  {
    const uci::type::GatewayLinkDestinationType::DataDestination& boundedList = accessor.getDataDestination();
    for (uci::type::GatewayLinkDestinationType::DataDestination::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MessageDestinationType::serialize(boundedList.at(i), node, GatewayLinkDestinationType_Names::DataDestination_Name);
    }
  }
  if (accessor.hasLinkPortAssignments()) {
    CommLinkPortMapType::serialize(accessor.getLinkPortAssignments(), node, GatewayLinkDestinationType_Names::LinkPortAssignments_Name);
  }
  if (accessor.hasConfigurationState()) {
    CommConfigurationStateEnum::serialize(accessor.getConfigurationState(), node, GatewayLinkDestinationType_Names::ConfigurationState_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::GatewayLinkDestinationType>().release());
}

uci::type::GatewayLinkDestinationType& GatewayLinkDestinationType::create(const uci::type::GatewayLinkDestinationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::GatewayLinkDestinationType> newAccessor{boost::make_unique<asb_uci::type::GatewayLinkDestinationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void GatewayLinkDestinationType::destroy(uci::type::GatewayLinkDestinationType& accessor) {
  delete dynamic_cast<asb_uci::type::GatewayLinkDestinationType*>(&accessor);
}

} // namespace type

} // namespace uci

