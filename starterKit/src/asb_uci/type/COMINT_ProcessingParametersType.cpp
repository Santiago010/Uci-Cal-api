/** @file COMINT_ProcessingParametersType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/COMINT_ProcessingParametersType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/type/ProcessingParametersPET.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/COMINT_ProcessingParametersType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

COMINT_ProcessingParametersType::COMINT_ProcessingParametersType() = default;

COMINT_ProcessingParametersType::~COMINT_ProcessingParametersType() = default;

void COMINT_ProcessingParametersType::copy(const uci::type::COMINT_ProcessingParametersType& accessor) {
  copyImpl(accessor, false);
}

void COMINT_ProcessingParametersType::copyImpl(const uci::type::COMINT_ProcessingParametersType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ProcessingParametersPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const COMINT_ProcessingParametersType&>(accessor);
    if (accessorImpl.hasCenterFrequency()) {
      setCenterFrequency(accessorImpl.getCenterFrequency());
    } else {
      clearCenterFrequency();
    }
    if (accessorImpl.collectionBandwidth_Accessor) {
      setCollectionBandwidth(*(accessorImpl.collectionBandwidth_Accessor));
    } else {
      collectionBandwidth_Accessor.reset();
    }
    if (accessorImpl.signalBandwidth_Accessor) {
      setSignalBandwidth(*(accessorImpl.signalBandwidth_Accessor));
    } else {
      signalBandwidth_Accessor.reset();
    }
    if (accessorImpl.hasMaxLOB_TimeOffset()) {
      setMaxLOB_TimeOffset(accessorImpl.getMaxLOB_TimeOffset());
    } else {
      clearMaxLOB_TimeOffset();
    }
  }
}

void COMINT_ProcessingParametersType::reset() noexcept {
  ProcessingParametersPET::reset();
  clearCenterFrequency();
  collectionBandwidth_Accessor.reset();
  signalBandwidth_Accessor.reset();
  clearMaxLOB_TimeOffset();
}

uci::type::FrequencyTypeValue COMINT_ProcessingParametersType::getCenterFrequency() const {
  if (centerFrequency_Accessor) {
    return *centerFrequency_Accessor;
  }
  throw uci::base::UCIException("Error in getCenterFrequency(): An attempt was made to get an optional field that was not enabled, call hasCenterFrequency() to determine if it is safe to call getCenterFrequency()");
}

uci::type::COMINT_ProcessingParametersType& COMINT_ProcessingParametersType::setCenterFrequency(uci::type::FrequencyTypeValue value) {
  centerFrequency_Accessor = value;
  return *this;
}

bool COMINT_ProcessingParametersType::hasCenterFrequency() const noexcept {
  return centerFrequency_Accessor.has_value();
}

uci::type::COMINT_ProcessingParametersType& COMINT_ProcessingParametersType::clearCenterFrequency() noexcept {
  centerFrequency_Accessor.reset();
  return *this;
}

uci::type::FrequencyRangeType& COMINT_ProcessingParametersType::getCollectionBandwidth_() const {
  if (collectionBandwidth_Accessor) {
    return *collectionBandwidth_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionBandwidth(): An attempt was made to get an optional field that was not enabled, call hasCollectionBandwidth() to determine if it is safe to call getCollectionBandwidth()");
}

const uci::type::FrequencyRangeType& COMINT_ProcessingParametersType::getCollectionBandwidth() const {
  return getCollectionBandwidth_();
}

uci::type::FrequencyRangeType& COMINT_ProcessingParametersType::getCollectionBandwidth() {
  return getCollectionBandwidth_();
}

uci::type::COMINT_ProcessingParametersType& COMINT_ProcessingParametersType::setCollectionBandwidth(const uci::type::FrequencyRangeType& accessor) {
  enableCollectionBandwidth();
  if (&accessor != collectionBandwidth_Accessor.get()) {
    collectionBandwidth_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_ProcessingParametersType::hasCollectionBandwidth() const noexcept {
  return static_cast<bool>(collectionBandwidth_Accessor);
}

uci::type::FrequencyRangeType& COMINT_ProcessingParametersType::enableCollectionBandwidth(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyRangeType : type};
  if ((!collectionBandwidth_Accessor) || (collectionBandwidth_Accessor->getAccessorType() != requestedType)) {
    collectionBandwidth_Accessor = FrequencyRangeType::create(requestedType);
    if (!collectionBandwidth_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionBandwidth(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionBandwidth_Accessor;
}

uci::type::COMINT_ProcessingParametersType& COMINT_ProcessingParametersType::clearCollectionBandwidth() noexcept {
  collectionBandwidth_Accessor.reset();
  return *this;
}

uci::type::FrequencyRangeType& COMINT_ProcessingParametersType::getSignalBandwidth_() const {
  if (signalBandwidth_Accessor) {
    return *signalBandwidth_Accessor;
  }
  throw uci::base::UCIException("Error in getSignalBandwidth(): An attempt was made to get an optional field that was not enabled, call hasSignalBandwidth() to determine if it is safe to call getSignalBandwidth()");
}

const uci::type::FrequencyRangeType& COMINT_ProcessingParametersType::getSignalBandwidth() const {
  return getSignalBandwidth_();
}

uci::type::FrequencyRangeType& COMINT_ProcessingParametersType::getSignalBandwidth() {
  return getSignalBandwidth_();
}

uci::type::COMINT_ProcessingParametersType& COMINT_ProcessingParametersType::setSignalBandwidth(const uci::type::FrequencyRangeType& accessor) {
  enableSignalBandwidth();
  if (&accessor != signalBandwidth_Accessor.get()) {
    signalBandwidth_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_ProcessingParametersType::hasSignalBandwidth() const noexcept {
  return static_cast<bool>(signalBandwidth_Accessor);
}

uci::type::FrequencyRangeType& COMINT_ProcessingParametersType::enableSignalBandwidth(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyRangeType : type};
  if ((!signalBandwidth_Accessor) || (signalBandwidth_Accessor->getAccessorType() != requestedType)) {
    signalBandwidth_Accessor = FrequencyRangeType::create(requestedType);
    if (!signalBandwidth_Accessor) {
      throw uci::base::UCIException("Error in enableSignalBandwidth(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *signalBandwidth_Accessor;
}

uci::type::COMINT_ProcessingParametersType& COMINT_ProcessingParametersType::clearSignalBandwidth() noexcept {
  signalBandwidth_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue COMINT_ProcessingParametersType::getMaxLOB_TimeOffset() const {
  if (maxLOB_TimeOffset_Accessor) {
    return *maxLOB_TimeOffset_Accessor;
  }
  throw uci::base::UCIException("Error in getMaxLOB_TimeOffset(): An attempt was made to get an optional field that was not enabled, call hasMaxLOB_TimeOffset() to determine if it is safe to call getMaxLOB_TimeOffset()");
}

uci::type::COMINT_ProcessingParametersType& COMINT_ProcessingParametersType::setMaxLOB_TimeOffset(uci::type::DurationTypeValue value) {
  maxLOB_TimeOffset_Accessor = value;
  return *this;
}

bool COMINT_ProcessingParametersType::hasMaxLOB_TimeOffset() const noexcept {
  return maxLOB_TimeOffset_Accessor.has_value();
}

uci::type::COMINT_ProcessingParametersType& COMINT_ProcessingParametersType::clearMaxLOB_TimeOffset() noexcept {
  maxLOB_TimeOffset_Accessor.reset();
  return *this;
}

std::unique_ptr<COMINT_ProcessingParametersType> COMINT_ProcessingParametersType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_ProcessingParametersType : type};
  return (requestedType == uci::type::accessorType::cOMINT_ProcessingParametersType) ? boost::make_unique<COMINT_ProcessingParametersType>() : nullptr;
}

/**  */
namespace COMINT_ProcessingParametersType_Names {

constexpr const char* Extern_Type_Name{"COMINT_ProcessingParametersType"};
constexpr const char* CenterFrequency_Name{"CenterFrequency"};
constexpr const char* CollectionBandwidth_Name{"CollectionBandwidth"};
constexpr const char* SignalBandwidth_Name{"SignalBandwidth"};
constexpr const char* MaxLOB_TimeOffset_Name{"MaxLOB_TimeOffset"};

} // namespace COMINT_ProcessingParametersType_Names

void COMINT_ProcessingParametersType::deserialize(const boost::property_tree::ptree& propTree, uci::type::COMINT_ProcessingParametersType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = COMINT_ProcessingParametersType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + COMINT_ProcessingParametersType_Names::CenterFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCenterFrequency(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ProcessingParametersType_Names::CollectionBandwidth_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableCollectionBandwidth(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_ProcessingParametersType_Names::SignalBandwidth_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableSignalBandwidth(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_ProcessingParametersType_Names::MaxLOB_TimeOffset_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxLOB_TimeOffset(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
  ProcessingParametersPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string COMINT_ProcessingParametersType::serialize(const uci::type::COMINT_ProcessingParametersType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? COMINT_ProcessingParametersType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, COMINT_ProcessingParametersType_Names::Extern_Type_Name);
  }
  ProcessingParametersPET::serialize(accessor, node, "", false, false, false);
  if (accessor.hasCenterFrequency()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCenterFrequency(), node, COMINT_ProcessingParametersType_Names::CenterFrequency_Name);
  }
  if (accessor.hasCollectionBandwidth()) {
    FrequencyRangeType::serialize(accessor.getCollectionBandwidth(), node, COMINT_ProcessingParametersType_Names::CollectionBandwidth_Name);
  }
  if (accessor.hasSignalBandwidth()) {
    FrequencyRangeType::serialize(accessor.getSignalBandwidth(), node, COMINT_ProcessingParametersType_Names::SignalBandwidth_Name);
  }
  if (accessor.hasMaxLOB_TimeOffset()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getMaxLOB_TimeOffset(), node, COMINT_ProcessingParametersType_Names::MaxLOB_TimeOffset_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::COMINT_ProcessingParametersType& COMINT_ProcessingParametersType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::COMINT_ProcessingParametersType>().release());
}

uci::type::COMINT_ProcessingParametersType& COMINT_ProcessingParametersType::create(const uci::type::COMINT_ProcessingParametersType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::COMINT_ProcessingParametersType> newAccessor{boost::make_unique<asb_uci::type::COMINT_ProcessingParametersType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void COMINT_ProcessingParametersType::destroy(uci::type::COMINT_ProcessingParametersType& accessor) {
  delete dynamic_cast<asb_uci::type::COMINT_ProcessingParametersType*>(&accessor);
}

} // namespace type

} // namespace uci

