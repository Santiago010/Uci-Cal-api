/** @file CornerPointImageRegionOfInterestType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CornerPointImageRegionOfInterestType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ImageRegionOfInterestPET.h"
#include "../../../include/asb_uci/type/Point2D_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CornerPointImageRegionOfInterestType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point2D_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CornerPointImageRegionOfInterestType::CornerPointImageRegionOfInterestType()
  : upperLeft_Accessor{boost::make_unique<Point2D_Type>()},
    upperRight_Accessor{boost::make_unique<Point2D_Type>()},
    lowerRight_Accessor{boost::make_unique<Point2D_Type>()},
    lowerLeft_Accessor{boost::make_unique<Point2D_Type>()} {
}

CornerPointImageRegionOfInterestType::~CornerPointImageRegionOfInterestType() = default;

void CornerPointImageRegionOfInterestType::copy(const uci::type::CornerPointImageRegionOfInterestType& accessor) {
  copyImpl(accessor, false);
}

void CornerPointImageRegionOfInterestType::copyImpl(const uci::type::CornerPointImageRegionOfInterestType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ImageRegionOfInterestPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CornerPointImageRegionOfInterestType&>(accessor);
    setUpperLeft(*(accessorImpl.upperLeft_Accessor));
    setUpperRight(*(accessorImpl.upperRight_Accessor));
    setLowerRight(*(accessorImpl.lowerRight_Accessor));
    setLowerLeft(*(accessorImpl.lowerLeft_Accessor));
  }
}

void CornerPointImageRegionOfInterestType::reset() noexcept {
  ImageRegionOfInterestPET::reset();
  if (upperLeft_Accessor->getAccessorType() != uci::type::accessorType::point2D_Type) {
    upperLeft_Accessor = boost::make_unique<Point2D_Type>();
  } else {
    upperLeft_Accessor->reset();
  }
  if (upperRight_Accessor->getAccessorType() != uci::type::accessorType::point2D_Type) {
    upperRight_Accessor = boost::make_unique<Point2D_Type>();
  } else {
    upperRight_Accessor->reset();
  }
  if (lowerRight_Accessor->getAccessorType() != uci::type::accessorType::point2D_Type) {
    lowerRight_Accessor = boost::make_unique<Point2D_Type>();
  } else {
    lowerRight_Accessor->reset();
  }
  if (lowerLeft_Accessor->getAccessorType() != uci::type::accessorType::point2D_Type) {
    lowerLeft_Accessor = boost::make_unique<Point2D_Type>();
  } else {
    lowerLeft_Accessor->reset();
  }
}

const uci::type::Point2D_Type& CornerPointImageRegionOfInterestType::getUpperLeft() const {
  return *upperLeft_Accessor;
}

uci::type::Point2D_Type& CornerPointImageRegionOfInterestType::getUpperLeft() {
  return *upperLeft_Accessor;
}

uci::type::CornerPointImageRegionOfInterestType& CornerPointImageRegionOfInterestType::setUpperLeft(const uci::type::Point2D_Type& accessor) {
  enableUpperLeft(accessor.getAccessorType());
  if (&accessor != upperLeft_Accessor.get()) {
    upperLeft_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point2D_Type& CornerPointImageRegionOfInterestType::enableUpperLeft(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!upperLeft_Accessor) || (upperLeft_Accessor->getAccessorType() != requestedType)) {
    upperLeft_Accessor = Point2D_Type::create(requestedType);
    if (!upperLeft_Accessor) {
      throw uci::base::UCIException("Error in enableUpperLeft(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *upperLeft_Accessor;
}

const uci::type::Point2D_Type& CornerPointImageRegionOfInterestType::getUpperRight() const {
  return *upperRight_Accessor;
}

uci::type::Point2D_Type& CornerPointImageRegionOfInterestType::getUpperRight() {
  return *upperRight_Accessor;
}

uci::type::CornerPointImageRegionOfInterestType& CornerPointImageRegionOfInterestType::setUpperRight(const uci::type::Point2D_Type& accessor) {
  enableUpperRight(accessor.getAccessorType());
  if (&accessor != upperRight_Accessor.get()) {
    upperRight_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point2D_Type& CornerPointImageRegionOfInterestType::enableUpperRight(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!upperRight_Accessor) || (upperRight_Accessor->getAccessorType() != requestedType)) {
    upperRight_Accessor = Point2D_Type::create(requestedType);
    if (!upperRight_Accessor) {
      throw uci::base::UCIException("Error in enableUpperRight(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *upperRight_Accessor;
}

const uci::type::Point2D_Type& CornerPointImageRegionOfInterestType::getLowerRight() const {
  return *lowerRight_Accessor;
}

uci::type::Point2D_Type& CornerPointImageRegionOfInterestType::getLowerRight() {
  return *lowerRight_Accessor;
}

uci::type::CornerPointImageRegionOfInterestType& CornerPointImageRegionOfInterestType::setLowerRight(const uci::type::Point2D_Type& accessor) {
  enableLowerRight(accessor.getAccessorType());
  if (&accessor != lowerRight_Accessor.get()) {
    lowerRight_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point2D_Type& CornerPointImageRegionOfInterestType::enableLowerRight(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!lowerRight_Accessor) || (lowerRight_Accessor->getAccessorType() != requestedType)) {
    lowerRight_Accessor = Point2D_Type::create(requestedType);
    if (!lowerRight_Accessor) {
      throw uci::base::UCIException("Error in enableLowerRight(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lowerRight_Accessor;
}

const uci::type::Point2D_Type& CornerPointImageRegionOfInterestType::getLowerLeft() const {
  return *lowerLeft_Accessor;
}

uci::type::Point2D_Type& CornerPointImageRegionOfInterestType::getLowerLeft() {
  return *lowerLeft_Accessor;
}

uci::type::CornerPointImageRegionOfInterestType& CornerPointImageRegionOfInterestType::setLowerLeft(const uci::type::Point2D_Type& accessor) {
  enableLowerLeft(accessor.getAccessorType());
  if (&accessor != lowerLeft_Accessor.get()) {
    lowerLeft_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point2D_Type& CornerPointImageRegionOfInterestType::enableLowerLeft(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!lowerLeft_Accessor) || (lowerLeft_Accessor->getAccessorType() != requestedType)) {
    lowerLeft_Accessor = Point2D_Type::create(requestedType);
    if (!lowerLeft_Accessor) {
      throw uci::base::UCIException("Error in enableLowerLeft(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lowerLeft_Accessor;
}

std::unique_ptr<CornerPointImageRegionOfInterestType> CornerPointImageRegionOfInterestType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cornerPointImageRegionOfInterestType : type};
  return (requestedType == uci::type::accessorType::cornerPointImageRegionOfInterestType) ? boost::make_unique<CornerPointImageRegionOfInterestType>() : nullptr;
}

/**  */
namespace CornerPointImageRegionOfInterestType_Names {

constexpr const char* Extern_Type_Name{"CornerPointImageRegionOfInterestType"};
constexpr const char* UpperLeft_Name{"UpperLeft"};
constexpr const char* UpperRight_Name{"UpperRight"};
constexpr const char* LowerRight_Name{"LowerRight"};
constexpr const char* LowerLeft_Name{"LowerLeft"};

} // namespace CornerPointImageRegionOfInterestType_Names

void CornerPointImageRegionOfInterestType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CornerPointImageRegionOfInterestType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CornerPointImageRegionOfInterestType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CornerPointImageRegionOfInterestType_Names::UpperLeft_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableUpperLeft(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CornerPointImageRegionOfInterestType_Names::UpperRight_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableUpperRight(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CornerPointImageRegionOfInterestType_Names::LowerRight_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableLowerRight(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CornerPointImageRegionOfInterestType_Names::LowerLeft_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableLowerLeft(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  ImageRegionOfInterestPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CornerPointImageRegionOfInterestType::serialize(const uci::type::CornerPointImageRegionOfInterestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CornerPointImageRegionOfInterestType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CornerPointImageRegionOfInterestType_Names::Extern_Type_Name);
  }
  ImageRegionOfInterestPET::serialize(accessor, node, "", false, false, false);
  Point2D_Type::serialize(accessor.getUpperLeft(), node, CornerPointImageRegionOfInterestType_Names::UpperLeft_Name);
  Point2D_Type::serialize(accessor.getUpperRight(), node, CornerPointImageRegionOfInterestType_Names::UpperRight_Name);
  Point2D_Type::serialize(accessor.getLowerRight(), node, CornerPointImageRegionOfInterestType_Names::LowerRight_Name);
  Point2D_Type::serialize(accessor.getLowerLeft(), node, CornerPointImageRegionOfInterestType_Names::LowerLeft_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CornerPointImageRegionOfInterestType& CornerPointImageRegionOfInterestType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CornerPointImageRegionOfInterestType>().release());
}

uci::type::CornerPointImageRegionOfInterestType& CornerPointImageRegionOfInterestType::create(const uci::type::CornerPointImageRegionOfInterestType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CornerPointImageRegionOfInterestType> newAccessor{boost::make_unique<asb_uci::type::CornerPointImageRegionOfInterestType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CornerPointImageRegionOfInterestType::destroy(uci::type::CornerPointImageRegionOfInterestType& accessor) {
  delete dynamic_cast<asb_uci::type::CornerPointImageRegionOfInterestType*>(&accessor);
}

} // namespace type

} // namespace uci

