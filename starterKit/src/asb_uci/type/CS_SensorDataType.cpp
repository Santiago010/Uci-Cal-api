/** @file CS_SensorDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CS_SensorDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CS_SensorPointingEnum.h"
#include "asb_uci/type/CS_SensorTargetingEnum.h"
#include "asb_uci/type/CS_SensorTypeEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AltitudeType.h"
#include "uci/type/AnglePositiveType.h"
#include "uci/type/AngleQuarterType.h"
#include "uci/type/CS_SensorDataType.h"
#include "uci/type/CS_SensorPointingEnum.h"
#include "uci/type/CS_SensorTargetingEnum.h"
#include "uci/type/CS_SensorTypeEnum.h"
#include "uci/type/FrequencyType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CS_SensorDataType::CS_SensorDataType()
  : sensorType_Accessor{boost::make_unique<CS_SensorTypeEnum>()},
    sensorPointing_Accessor{boost::make_unique<CS_SensorPointingEnum>()} {
}

CS_SensorDataType::~CS_SensorDataType() = default;

void CS_SensorDataType::copy(const uci::type::CS_SensorDataType& accessor) {
  copyImpl(accessor, false);
}

void CS_SensorDataType::copyImpl(const uci::type::CS_SensorDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CS_SensorDataType&>(accessor);
    setSensorType(*(accessorImpl.sensorType_Accessor));
    setSensorPointing(*(accessorImpl.sensorPointing_Accessor));
    if (accessorImpl.hasInnerConeAngle()) {
      setInnerConeAngle(accessorImpl.getInnerConeAngle());
    } else {
      clearInnerConeAngle();
    }
    if (accessorImpl.hasOuterConeAngle()) {
      setOuterConeAngle(accessorImpl.getOuterConeAngle());
    } else {
      clearOuterConeAngle();
    }
    if (accessorImpl.hasMinClockAngle()) {
      setMinClockAngle(accessorImpl.getMinClockAngle());
    } else {
      clearMinClockAngle();
    }
    if (accessorImpl.hasMaxClockAngle()) {
      setMaxClockAngle(accessorImpl.getMaxClockAngle());
    } else {
      clearMaxClockAngle();
    }
    if (accessorImpl.sensorTargeting_Accessor) {
      setSensorTargeting(*(accessorImpl.sensorTargeting_Accessor));
    } else {
      sensorTargeting_Accessor.reset();
    }
    if (accessorImpl.hasBoreSightAzimuth()) {
      setBoreSightAzimuth(accessorImpl.getBoreSightAzimuth());
    } else {
      clearBoreSightAzimuth();
    }
    if (accessorImpl.hasBoreSightElevation()) {
      setBoreSightElevation(accessorImpl.getBoreSightElevation());
    } else {
      clearBoreSightElevation();
    }
    if (accessorImpl.hasMinAltitude()) {
      setMinAltitude(accessorImpl.getMinAltitude());
    } else {
      clearMinAltitude();
    }
    if (accessorImpl.hasMaxAltitude()) {
      setMaxAltitude(accessorImpl.getMaxAltitude());
    } else {
      clearMaxAltitude();
    }
    if (accessorImpl.hasAntennaDiameter()) {
      setAntennaDiameter(accessorImpl.getAntennaDiameter());
    } else {
      clearAntennaDiameter();
    }
    if (accessorImpl.hasAntennaFreq()) {
      setAntennaFreq(accessorImpl.getAntennaFreq());
    } else {
      clearAntennaFreq();
    }
    if (accessorImpl.hasNumSteps()) {
      setNumSteps(accessorImpl.getNumSteps());
    } else {
      clearNumSteps();
    }
  }
}

void CS_SensorDataType::reset() noexcept {
  sensorType_Accessor->reset();
  sensorPointing_Accessor->reset();
  clearInnerConeAngle();
  clearOuterConeAngle();
  clearMinClockAngle();
  clearMaxClockAngle();
  sensorTargeting_Accessor.reset();
  clearBoreSightAzimuth();
  clearBoreSightElevation();
  clearMinAltitude();
  clearMaxAltitude();
  clearAntennaDiameter();
  clearAntennaFreq();
  clearNumSteps();
}

const uci::type::CS_SensorTypeEnum& CS_SensorDataType::getSensorType() const {
  return *sensorType_Accessor;
}

uci::type::CS_SensorTypeEnum& CS_SensorDataType::getSensorType() {
  return *sensorType_Accessor;
}

uci::type::CS_SensorDataType& CS_SensorDataType::setSensorType(const uci::type::CS_SensorTypeEnum& accessor) {
  if (&accessor != sensorType_Accessor.get()) {
    sensorType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CS_SensorDataType& CS_SensorDataType::setSensorType(uci::type::CS_SensorTypeEnum::EnumerationItem value) {
  sensorType_Accessor->setValue(value);
  return *this;
}


const uci::type::CS_SensorPointingEnum& CS_SensorDataType::getSensorPointing() const {
  return *sensorPointing_Accessor;
}

uci::type::CS_SensorPointingEnum& CS_SensorDataType::getSensorPointing() {
  return *sensorPointing_Accessor;
}

uci::type::CS_SensorDataType& CS_SensorDataType::setSensorPointing(const uci::type::CS_SensorPointingEnum& accessor) {
  if (&accessor != sensorPointing_Accessor.get()) {
    sensorPointing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CS_SensorDataType& CS_SensorDataType::setSensorPointing(uci::type::CS_SensorPointingEnum::EnumerationItem value) {
  sensorPointing_Accessor->setValue(value);
  return *this;
}


uci::type::AnglePositiveTypeValue CS_SensorDataType::getInnerConeAngle() const {
  if (innerConeAngle_Accessor) {
    return *innerConeAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getInnerConeAngle(): An attempt was made to get an optional field that was not enabled, call hasInnerConeAngle() to determine if it is safe to call getInnerConeAngle()");
}

uci::type::CS_SensorDataType& CS_SensorDataType::setInnerConeAngle(uci::type::AnglePositiveTypeValue value) {
  innerConeAngle_Accessor = value;
  return *this;
}

bool CS_SensorDataType::hasInnerConeAngle() const noexcept {
  return innerConeAngle_Accessor.has_value();
}

uci::type::CS_SensorDataType& CS_SensorDataType::clearInnerConeAngle() noexcept {
  innerConeAngle_Accessor.reset();
  return *this;
}

uci::type::AnglePositiveTypeValue CS_SensorDataType::getOuterConeAngle() const {
  if (outerConeAngle_Accessor) {
    return *outerConeAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getOuterConeAngle(): An attempt was made to get an optional field that was not enabled, call hasOuterConeAngle() to determine if it is safe to call getOuterConeAngle()");
}

uci::type::CS_SensorDataType& CS_SensorDataType::setOuterConeAngle(uci::type::AnglePositiveTypeValue value) {
  outerConeAngle_Accessor = value;
  return *this;
}

bool CS_SensorDataType::hasOuterConeAngle() const noexcept {
  return outerConeAngle_Accessor.has_value();
}

uci::type::CS_SensorDataType& CS_SensorDataType::clearOuterConeAngle() noexcept {
  outerConeAngle_Accessor.reset();
  return *this;
}

uci::type::AnglePositiveTypeValue CS_SensorDataType::getMinClockAngle() const {
  if (minClockAngle_Accessor) {
    return *minClockAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getMinClockAngle(): An attempt was made to get an optional field that was not enabled, call hasMinClockAngle() to determine if it is safe to call getMinClockAngle()");
}

uci::type::CS_SensorDataType& CS_SensorDataType::setMinClockAngle(uci::type::AnglePositiveTypeValue value) {
  minClockAngle_Accessor = value;
  return *this;
}

bool CS_SensorDataType::hasMinClockAngle() const noexcept {
  return minClockAngle_Accessor.has_value();
}

uci::type::CS_SensorDataType& CS_SensorDataType::clearMinClockAngle() noexcept {
  minClockAngle_Accessor.reset();
  return *this;
}

uci::type::AnglePositiveTypeValue CS_SensorDataType::getMaxClockAngle() const {
  if (maxClockAngle_Accessor) {
    return *maxClockAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getMaxClockAngle(): An attempt was made to get an optional field that was not enabled, call hasMaxClockAngle() to determine if it is safe to call getMaxClockAngle()");
}

uci::type::CS_SensorDataType& CS_SensorDataType::setMaxClockAngle(uci::type::AnglePositiveTypeValue value) {
  maxClockAngle_Accessor = value;
  return *this;
}

bool CS_SensorDataType::hasMaxClockAngle() const noexcept {
  return maxClockAngle_Accessor.has_value();
}

uci::type::CS_SensorDataType& CS_SensorDataType::clearMaxClockAngle() noexcept {
  maxClockAngle_Accessor.reset();
  return *this;
}

uci::type::CS_SensorTargetingEnum& CS_SensorDataType::getSensorTargeting_() const {
  if (sensorTargeting_Accessor) {
    return *sensorTargeting_Accessor;
  }
  throw uci::base::UCIException("Error in getSensorTargeting(): An attempt was made to get an optional field that was not enabled, call hasSensorTargeting() to determine if it is safe to call getSensorTargeting()");
}

const uci::type::CS_SensorTargetingEnum& CS_SensorDataType::getSensorTargeting() const {
  return getSensorTargeting_();
}

uci::type::CS_SensorTargetingEnum& CS_SensorDataType::getSensorTargeting() {
  return getSensorTargeting_();
}

uci::type::CS_SensorDataType& CS_SensorDataType::setSensorTargeting(const uci::type::CS_SensorTargetingEnum& accessor) {
  enableSensorTargeting();
  if (&accessor != sensorTargeting_Accessor.get()) {
    sensorTargeting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CS_SensorDataType& CS_SensorDataType::setSensorTargeting(const uci::type::CS_SensorTargetingEnum::EnumerationItem value) {
  enableSensorTargeting().setValue(value);
  return *this;
}

bool CS_SensorDataType::hasSensorTargeting() const noexcept {
  return static_cast<bool>(sensorTargeting_Accessor);
}

uci::type::CS_SensorTargetingEnum& CS_SensorDataType::enableSensorTargeting(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_SensorTargetingEnum : type};
  if ((!sensorTargeting_Accessor) || (sensorTargeting_Accessor->getAccessorType() != requestedType)) {
    sensorTargeting_Accessor = CS_SensorTargetingEnum::create(requestedType);
    if (!sensorTargeting_Accessor) {
      throw uci::base::UCIException("Error in enableSensorTargeting(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sensorTargeting_Accessor;
}

uci::type::CS_SensorDataType& CS_SensorDataType::clearSensorTargeting() noexcept {
  sensorTargeting_Accessor.reset();
  return *this;
}

uci::type::AnglePositiveTypeValue CS_SensorDataType::getBoreSightAzimuth() const {
  if (boreSightAzimuth_Accessor) {
    return *boreSightAzimuth_Accessor;
  }
  throw uci::base::UCIException("Error in getBoreSightAzimuth(): An attempt was made to get an optional field that was not enabled, call hasBoreSightAzimuth() to determine if it is safe to call getBoreSightAzimuth()");
}

uci::type::CS_SensorDataType& CS_SensorDataType::setBoreSightAzimuth(uci::type::AnglePositiveTypeValue value) {
  boreSightAzimuth_Accessor = value;
  return *this;
}

bool CS_SensorDataType::hasBoreSightAzimuth() const noexcept {
  return boreSightAzimuth_Accessor.has_value();
}

uci::type::CS_SensorDataType& CS_SensorDataType::clearBoreSightAzimuth() noexcept {
  boreSightAzimuth_Accessor.reset();
  return *this;
}

uci::type::AngleQuarterTypeValue CS_SensorDataType::getBoreSightElevation() const {
  if (boreSightElevation_Accessor) {
    return *boreSightElevation_Accessor;
  }
  throw uci::base::UCIException("Error in getBoreSightElevation(): An attempt was made to get an optional field that was not enabled, call hasBoreSightElevation() to determine if it is safe to call getBoreSightElevation()");
}

uci::type::CS_SensorDataType& CS_SensorDataType::setBoreSightElevation(uci::type::AngleQuarterTypeValue value) {
  boreSightElevation_Accessor = value;
  return *this;
}

bool CS_SensorDataType::hasBoreSightElevation() const noexcept {
  return boreSightElevation_Accessor.has_value();
}

uci::type::CS_SensorDataType& CS_SensorDataType::clearBoreSightElevation() noexcept {
  boreSightElevation_Accessor.reset();
  return *this;
}

uci::type::AltitudeTypeValue CS_SensorDataType::getMinAltitude() const {
  if (minAltitude_Accessor) {
    return *minAltitude_Accessor;
  }
  throw uci::base::UCIException("Error in getMinAltitude(): An attempt was made to get an optional field that was not enabled, call hasMinAltitude() to determine if it is safe to call getMinAltitude()");
}

uci::type::CS_SensorDataType& CS_SensorDataType::setMinAltitude(uci::type::AltitudeTypeValue value) {
  minAltitude_Accessor = value;
  return *this;
}

bool CS_SensorDataType::hasMinAltitude() const noexcept {
  return minAltitude_Accessor.has_value();
}

uci::type::CS_SensorDataType& CS_SensorDataType::clearMinAltitude() noexcept {
  minAltitude_Accessor.reset();
  return *this;
}

uci::type::AltitudeTypeValue CS_SensorDataType::getMaxAltitude() const {
  if (maxAltitude_Accessor) {
    return *maxAltitude_Accessor;
  }
  throw uci::base::UCIException("Error in getMaxAltitude(): An attempt was made to get an optional field that was not enabled, call hasMaxAltitude() to determine if it is safe to call getMaxAltitude()");
}

uci::type::CS_SensorDataType& CS_SensorDataType::setMaxAltitude(uci::type::AltitudeTypeValue value) {
  maxAltitude_Accessor = value;
  return *this;
}

bool CS_SensorDataType::hasMaxAltitude() const noexcept {
  return maxAltitude_Accessor.has_value();
}

uci::type::CS_SensorDataType& CS_SensorDataType::clearMaxAltitude() noexcept {
  maxAltitude_Accessor.reset();
  return *this;
}

xs::Double CS_SensorDataType::getAntennaDiameter() const {
  if (antennaDiameter_Accessor) {
    return *antennaDiameter_Accessor;
  }
  throw uci::base::UCIException("Error in getAntennaDiameter(): An attempt was made to get an optional field that was not enabled, call hasAntennaDiameter() to determine if it is safe to call getAntennaDiameter()");
}

uci::type::CS_SensorDataType& CS_SensorDataType::setAntennaDiameter(xs::Double value) {
  antennaDiameter_Accessor = value;
  return *this;
}

bool CS_SensorDataType::hasAntennaDiameter() const noexcept {
  return antennaDiameter_Accessor.has_value();
}

uci::type::CS_SensorDataType& CS_SensorDataType::clearAntennaDiameter() noexcept {
  antennaDiameter_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue CS_SensorDataType::getAntennaFreq() const {
  if (antennaFreq_Accessor) {
    return *antennaFreq_Accessor;
  }
  throw uci::base::UCIException("Error in getAntennaFreq(): An attempt was made to get an optional field that was not enabled, call hasAntennaFreq() to determine if it is safe to call getAntennaFreq()");
}

uci::type::CS_SensorDataType& CS_SensorDataType::setAntennaFreq(uci::type::FrequencyTypeValue value) {
  antennaFreq_Accessor = value;
  return *this;
}

bool CS_SensorDataType::hasAntennaFreq() const noexcept {
  return antennaFreq_Accessor.has_value();
}

uci::type::CS_SensorDataType& CS_SensorDataType::clearAntennaFreq() noexcept {
  antennaFreq_Accessor.reset();
  return *this;
}

xs::Int CS_SensorDataType::getNumSteps() const {
  if (numSteps_Accessor) {
    return *numSteps_Accessor;
  }
  throw uci::base::UCIException("Error in getNumSteps(): An attempt was made to get an optional field that was not enabled, call hasNumSteps() to determine if it is safe to call getNumSteps()");
}

uci::type::CS_SensorDataType& CS_SensorDataType::setNumSteps(xs::Int value) {
  numSteps_Accessor = value;
  return *this;
}

bool CS_SensorDataType::hasNumSteps() const noexcept {
  return numSteps_Accessor.has_value();
}

uci::type::CS_SensorDataType& CS_SensorDataType::clearNumSteps() noexcept {
  numSteps_Accessor.reset();
  return *this;
}

std::unique_ptr<CS_SensorDataType> CS_SensorDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_SensorDataType : type};
  return (requestedType == uci::type::accessorType::cS_SensorDataType) ? boost::make_unique<CS_SensorDataType>() : nullptr;
}

/**  */
namespace CS_SensorDataType_Names {

constexpr const char* Extern_Type_Name{"CS_SensorDataType"};
constexpr const char* SensorType_Name{"SensorType"};
constexpr const char* SensorPointing_Name{"SensorPointing"};
constexpr const char* InnerConeAngle_Name{"InnerConeAngle"};
constexpr const char* OuterConeAngle_Name{"OuterConeAngle"};
constexpr const char* MinClockAngle_Name{"MinClockAngle"};
constexpr const char* MaxClockAngle_Name{"MaxClockAngle"};
constexpr const char* SensorTargeting_Name{"SensorTargeting"};
constexpr const char* BoreSightAzimuth_Name{"BoreSightAzimuth"};
constexpr const char* BoreSightElevation_Name{"BoreSightElevation"};
constexpr const char* MinAltitude_Name{"MinAltitude"};
constexpr const char* MaxAltitude_Name{"MaxAltitude"};
constexpr const char* AntennaDiameter_Name{"AntennaDiameter"};
constexpr const char* AntennaFreq_Name{"AntennaFreq"};
constexpr const char* NumSteps_Name{"NumSteps"};

} // namespace CS_SensorDataType_Names

void CS_SensorDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_SensorDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CS_SensorDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::SensorType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSensorType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::SensorPointing_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSensorPointing().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::InnerConeAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInnerConeAngle(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::OuterConeAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOuterConeAngle(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::MinClockAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinClockAngle(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::MaxClockAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxClockAngle(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::SensorTargeting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSensorTargeting().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::BoreSightAzimuth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBoreSightAzimuth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::BoreSightElevation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBoreSightElevation(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::MinAltitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinAltitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::MaxAltitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxAltitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::AntennaDiameter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAntennaDiameter(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::AntennaFreq_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAntennaFreq(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::NumSteps_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumSteps(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    }
  }
}

std::string CS_SensorDataType::serialize(const uci::type::CS_SensorDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CS_SensorDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CS_SensorDataType_Names::Extern_Type_Name);
  }
  CS_SensorTypeEnum::serialize(accessor.getSensorType(), node, CS_SensorDataType_Names::SensorType_Name, false);
  CS_SensorPointingEnum::serialize(accessor.getSensorPointing(), node, CS_SensorDataType_Names::SensorPointing_Name, false);
  if (accessor.hasInnerConeAngle()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getInnerConeAngle(), node, CS_SensorDataType_Names::InnerConeAngle_Name);
  }
  if (accessor.hasOuterConeAngle()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getOuterConeAngle(), node, CS_SensorDataType_Names::OuterConeAngle_Name);
  }
  if (accessor.hasMinClockAngle()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinClockAngle(), node, CS_SensorDataType_Names::MinClockAngle_Name);
  }
  if (accessor.hasMaxClockAngle()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaxClockAngle(), node, CS_SensorDataType_Names::MaxClockAngle_Name);
  }
  if (accessor.hasSensorTargeting()) {
    CS_SensorTargetingEnum::serialize(accessor.getSensorTargeting(), node, CS_SensorDataType_Names::SensorTargeting_Name, false);
  }
  if (accessor.hasBoreSightAzimuth()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getBoreSightAzimuth(), node, CS_SensorDataType_Names::BoreSightAzimuth_Name);
  }
  if (accessor.hasBoreSightElevation()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getBoreSightElevation(), node, CS_SensorDataType_Names::BoreSightElevation_Name);
  }
  if (accessor.hasMinAltitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinAltitude(), node, CS_SensorDataType_Names::MinAltitude_Name);
  }
  if (accessor.hasMaxAltitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaxAltitude(), node, CS_SensorDataType_Names::MaxAltitude_Name);
  }
  if (accessor.hasAntennaDiameter()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAntennaDiameter(), node, CS_SensorDataType_Names::AntennaDiameter_Name);
  }
  if (accessor.hasAntennaFreq()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAntennaFreq(), node, CS_SensorDataType_Names::AntennaFreq_Name);
  }
  if (accessor.hasNumSteps()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getNumSteps(), node, CS_SensorDataType_Names::NumSteps_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CS_SensorDataType& CS_SensorDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CS_SensorDataType>().release());
}

uci::type::CS_SensorDataType& CS_SensorDataType::create(const uci::type::CS_SensorDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CS_SensorDataType> newAccessor{boost::make_unique<asb_uci::type::CS_SensorDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CS_SensorDataType::destroy(uci::type::CS_SensorDataType& accessor) {
  delete dynamic_cast<asb_uci::type::CS_SensorDataType*>(&accessor);
}

} // namespace type

} // namespace uci

