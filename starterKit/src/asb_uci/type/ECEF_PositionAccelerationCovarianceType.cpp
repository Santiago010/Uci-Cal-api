/** @file ECEF_PositionAccelerationCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ECEF_PositionAccelerationCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ECEF_PositionAccelerationCovarianceType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ECEF_PositionAccelerationCovarianceType::ECEF_PositionAccelerationCovarianceType() = default;

ECEF_PositionAccelerationCovarianceType::~ECEF_PositionAccelerationCovarianceType() = default;

void ECEF_PositionAccelerationCovarianceType::copy(const uci::type::ECEF_PositionAccelerationCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void ECEF_PositionAccelerationCovarianceType::copyImpl(const uci::type::ECEF_PositionAccelerationCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ECEF_PositionAccelerationCovarianceType&>(accessor);
    setPxAx(accessorImpl.pxAx_Accessor);
    setPxAy(accessorImpl.pxAy_Accessor);
    setPxAz(accessorImpl.pxAz_Accessor);
    setPyAx(accessorImpl.pyAx_Accessor);
    setPyAy(accessorImpl.pyAy_Accessor);
    setPyAz(accessorImpl.pyAz_Accessor);
    setPzAx(accessorImpl.pzAx_Accessor);
    setPzAy(accessorImpl.pzAy_Accessor);
    setPzAz(accessorImpl.pzAz_Accessor);
  }
}

void ECEF_PositionAccelerationCovarianceType::reset() noexcept {
  pxAx_Accessor = 0.0;
  pxAy_Accessor = 0.0;
  pxAz_Accessor = 0.0;
  pyAx_Accessor = 0.0;
  pyAy_Accessor = 0.0;
  pyAz_Accessor = 0.0;
  pzAx_Accessor = 0.0;
  pzAy_Accessor = 0.0;
  pzAz_Accessor = 0.0;
}

xs::Double ECEF_PositionAccelerationCovarianceType::getPxAx() const {
  return pxAx_Accessor;
}

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_PositionAccelerationCovarianceType::setPxAx(xs::Double value) {
  pxAx_Accessor = value;
  return *this;
}


xs::Double ECEF_PositionAccelerationCovarianceType::getPxAy() const {
  return pxAy_Accessor;
}

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_PositionAccelerationCovarianceType::setPxAy(xs::Double value) {
  pxAy_Accessor = value;
  return *this;
}


xs::Double ECEF_PositionAccelerationCovarianceType::getPxAz() const {
  return pxAz_Accessor;
}

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_PositionAccelerationCovarianceType::setPxAz(xs::Double value) {
  pxAz_Accessor = value;
  return *this;
}


xs::Double ECEF_PositionAccelerationCovarianceType::getPyAx() const {
  return pyAx_Accessor;
}

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_PositionAccelerationCovarianceType::setPyAx(xs::Double value) {
  pyAx_Accessor = value;
  return *this;
}


xs::Double ECEF_PositionAccelerationCovarianceType::getPyAy() const {
  return pyAy_Accessor;
}

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_PositionAccelerationCovarianceType::setPyAy(xs::Double value) {
  pyAy_Accessor = value;
  return *this;
}


xs::Double ECEF_PositionAccelerationCovarianceType::getPyAz() const {
  return pyAz_Accessor;
}

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_PositionAccelerationCovarianceType::setPyAz(xs::Double value) {
  pyAz_Accessor = value;
  return *this;
}


xs::Double ECEF_PositionAccelerationCovarianceType::getPzAx() const {
  return pzAx_Accessor;
}

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_PositionAccelerationCovarianceType::setPzAx(xs::Double value) {
  pzAx_Accessor = value;
  return *this;
}


xs::Double ECEF_PositionAccelerationCovarianceType::getPzAy() const {
  return pzAy_Accessor;
}

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_PositionAccelerationCovarianceType::setPzAy(xs::Double value) {
  pzAy_Accessor = value;
  return *this;
}


xs::Double ECEF_PositionAccelerationCovarianceType::getPzAz() const {
  return pzAz_Accessor;
}

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_PositionAccelerationCovarianceType::setPzAz(xs::Double value) {
  pzAz_Accessor = value;
  return *this;
}


std::unique_ptr<ECEF_PositionAccelerationCovarianceType> ECEF_PositionAccelerationCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_PositionAccelerationCovarianceType : type};
  return (requestedType == uci::type::accessorType::eCEF_PositionAccelerationCovarianceType) ? boost::make_unique<ECEF_PositionAccelerationCovarianceType>() : nullptr;
}

/**  */
namespace ECEF_PositionAccelerationCovarianceType_Names {

constexpr const char* Extern_Type_Name{"ECEF_PositionAccelerationCovarianceType"};
constexpr const char* PxAx_Name{"PxAx"};
constexpr const char* PxAy_Name{"PxAy"};
constexpr const char* PxAz_Name{"PxAz"};
constexpr const char* PyAx_Name{"PyAx"};
constexpr const char* PyAy_Name{"PyAy"};
constexpr const char* PyAz_Name{"PyAz"};
constexpr const char* PzAx_Name{"PzAx"};
constexpr const char* PzAy_Name{"PzAy"};
constexpr const char* PzAz_Name{"PzAz"};

} // namespace ECEF_PositionAccelerationCovarianceType_Names

void ECEF_PositionAccelerationCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ECEF_PositionAccelerationCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ECEF_PositionAccelerationCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ECEF_PositionAccelerationCovarianceType_Names::PxAx_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPxAx(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_PositionAccelerationCovarianceType_Names::PxAy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPxAy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_PositionAccelerationCovarianceType_Names::PxAz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPxAz(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_PositionAccelerationCovarianceType_Names::PyAx_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPyAx(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_PositionAccelerationCovarianceType_Names::PyAy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPyAy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_PositionAccelerationCovarianceType_Names::PyAz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPyAz(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_PositionAccelerationCovarianceType_Names::PzAx_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPzAx(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_PositionAccelerationCovarianceType_Names::PzAy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPzAy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_PositionAccelerationCovarianceType_Names::PzAz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPzAz(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string ECEF_PositionAccelerationCovarianceType::serialize(const uci::type::ECEF_PositionAccelerationCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ECEF_PositionAccelerationCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ECEF_PositionAccelerationCovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPxAx(), node, ECEF_PositionAccelerationCovarianceType_Names::PxAx_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPxAy(), node, ECEF_PositionAccelerationCovarianceType_Names::PxAy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPxAz(), node, ECEF_PositionAccelerationCovarianceType_Names::PxAz_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPyAx(), node, ECEF_PositionAccelerationCovarianceType_Names::PyAx_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPyAy(), node, ECEF_PositionAccelerationCovarianceType_Names::PyAy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPyAz(), node, ECEF_PositionAccelerationCovarianceType_Names::PyAz_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPzAx(), node, ECEF_PositionAccelerationCovarianceType_Names::PzAx_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPzAy(), node, ECEF_PositionAccelerationCovarianceType_Names::PzAy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPzAz(), node, ECEF_PositionAccelerationCovarianceType_Names::PzAz_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_PositionAccelerationCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ECEF_PositionAccelerationCovarianceType>().release());
}

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_PositionAccelerationCovarianceType::create(const uci::type::ECEF_PositionAccelerationCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ECEF_PositionAccelerationCovarianceType> newAccessor{boost::make_unique<asb_uci::type::ECEF_PositionAccelerationCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ECEF_PositionAccelerationCovarianceType::destroy(uci::type::ECEF_PositionAccelerationCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::ECEF_PositionAccelerationCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

