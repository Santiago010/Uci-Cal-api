/** @file RequirementMetadataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementMetadataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CreationSourceEnum.h"
#include "asb_uci/type/RemarksType.h"
#include "asb_uci/type/TraceabilityType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CreationSourceEnum.h"
#include "uci/type/RemarksType.h"
#include "uci/type/RequirementMetadataType.h"
#include "uci/type/TraceabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementMetadataType::RequirementMetadataType() = default;

RequirementMetadataType::~RequirementMetadataType() = default;

void RequirementMetadataType::copy(const uci::type::RequirementMetadataType& accessor) {
  copyImpl(accessor, false);
}

void RequirementMetadataType::copyImpl(const uci::type::RequirementMetadataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementMetadataType&>(accessor);
    if (accessorImpl.traceability_Accessor) {
      setTraceability(*(accessorImpl.traceability_Accessor));
    } else {
      traceability_Accessor.reset();
    }
    if (accessorImpl.source_Accessor) {
      setSource(*(accessorImpl.source_Accessor));
    } else {
      source_Accessor.reset();
    }
    if (accessorImpl.narrative_Accessor) {
      setNarrative(*(accessorImpl.narrative_Accessor));
    } else {
      narrative_Accessor.reset();
    }
  }
}

void RequirementMetadataType::reset() noexcept {
  traceability_Accessor.reset();
  source_Accessor.reset();
  narrative_Accessor.reset();
}

uci::type::TraceabilityType& RequirementMetadataType::getTraceability_() const {
  if (traceability_Accessor) {
    return *traceability_Accessor;
  }
  throw uci::base::UCIException("Error in getTraceability(): An attempt was made to get an optional field that was not enabled, call hasTraceability() to determine if it is safe to call getTraceability()");
}

const uci::type::TraceabilityType& RequirementMetadataType::getTraceability() const {
  return getTraceability_();
}

uci::type::TraceabilityType& RequirementMetadataType::getTraceability() {
  return getTraceability_();
}

uci::type::RequirementMetadataType& RequirementMetadataType::setTraceability(const uci::type::TraceabilityType& accessor) {
  enableTraceability();
  if (&accessor != traceability_Accessor.get()) {
    traceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementMetadataType::hasTraceability() const noexcept {
  return static_cast<bool>(traceability_Accessor);
}

uci::type::TraceabilityType& RequirementMetadataType::enableTraceability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::traceabilityType : type};
  if ((!traceability_Accessor) || (traceability_Accessor->getAccessorType() != requestedType)) {
    traceability_Accessor = TraceabilityType::create(requestedType);
    if (!traceability_Accessor) {
      throw uci::base::UCIException("Error in enableTraceability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *traceability_Accessor;
}

uci::type::RequirementMetadataType& RequirementMetadataType::clearTraceability() noexcept {
  traceability_Accessor.reset();
  return *this;
}

uci::type::CreationSourceEnum& RequirementMetadataType::getSource_() const {
  if (source_Accessor) {
    return *source_Accessor;
  }
  throw uci::base::UCIException("Error in getSource(): An attempt was made to get an optional field that was not enabled, call hasSource() to determine if it is safe to call getSource()");
}

const uci::type::CreationSourceEnum& RequirementMetadataType::getSource() const {
  return getSource_();
}

uci::type::CreationSourceEnum& RequirementMetadataType::getSource() {
  return getSource_();
}

uci::type::RequirementMetadataType& RequirementMetadataType::setSource(const uci::type::CreationSourceEnum& accessor) {
  enableSource();
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementMetadataType& RequirementMetadataType::setSource(const uci::type::CreationSourceEnum::EnumerationItem value) {
  enableSource().setValue(value);
  return *this;
}

bool RequirementMetadataType::hasSource() const noexcept {
  return static_cast<bool>(source_Accessor);
}

uci::type::CreationSourceEnum& RequirementMetadataType::enableSource(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::creationSourceEnum : type};
  if ((!source_Accessor) || (source_Accessor->getAccessorType() != requestedType)) {
    source_Accessor = CreationSourceEnum::create(requestedType);
    if (!source_Accessor) {
      throw uci::base::UCIException("Error in enableSource(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *source_Accessor;
}

uci::type::RequirementMetadataType& RequirementMetadataType::clearSource() noexcept {
  source_Accessor.reset();
  return *this;
}

uci::type::RemarksType& RequirementMetadataType::getNarrative_() const {
  if (narrative_Accessor) {
    return *narrative_Accessor;
  }
  throw uci::base::UCIException("Error in getNarrative(): An attempt was made to get an optional field that was not enabled, call hasNarrative() to determine if it is safe to call getNarrative()");
}

const uci::type::RemarksType& RequirementMetadataType::getNarrative() const {
  return getNarrative_();
}

uci::type::RemarksType& RequirementMetadataType::getNarrative() {
  return getNarrative_();
}

uci::type::RequirementMetadataType& RequirementMetadataType::setNarrative(const uci::type::RemarksType& accessor) {
  enableNarrative();
  if (&accessor != narrative_Accessor.get()) {
    narrative_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementMetadataType::hasNarrative() const noexcept {
  return static_cast<bool>(narrative_Accessor);
}

uci::type::RemarksType& RequirementMetadataType::enableNarrative(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::remarksType : type};
  if ((!narrative_Accessor) || (narrative_Accessor->getAccessorType() != requestedType)) {
    narrative_Accessor = RemarksType::create(requestedType);
    if (!narrative_Accessor) {
      throw uci::base::UCIException("Error in enableNarrative(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *narrative_Accessor;
}

uci::type::RequirementMetadataType& RequirementMetadataType::clearNarrative() noexcept {
  narrative_Accessor.reset();
  return *this;
}

std::unique_ptr<RequirementMetadataType> RequirementMetadataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementMetadataType : type};
  return (requestedType == uci::type::accessorType::requirementMetadataType) ? boost::make_unique<RequirementMetadataType>() : nullptr;
}

/**  */
namespace RequirementMetadataType_Names {

constexpr const char* Extern_Type_Name{"RequirementMetadataType"};
constexpr const char* Traceability_Name{"Traceability"};
constexpr const char* Source_Name{"Source"};
constexpr const char* Narrative_Name{"Narrative"};

} // namespace RequirementMetadataType_Names

void RequirementMetadataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementMetadataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementMetadataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementMetadataType_Names::Traceability_Name) {
      TraceabilityType::deserialize(valueType.second, accessor.enableTraceability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementMetadataType_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementMetadataType_Names::Narrative_Name) {
      RemarksType::deserialize(valueType.second, accessor.enableNarrative(), nodeName, nsPrefix);
    }
  }
}

std::string RequirementMetadataType::serialize(const uci::type::RequirementMetadataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementMetadataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementMetadataType_Names::Extern_Type_Name);
  }
  if (accessor.hasTraceability()) {
    TraceabilityType::serialize(accessor.getTraceability(), node, RequirementMetadataType_Names::Traceability_Name);
  }
  if (accessor.hasSource()) {
    CreationSourceEnum::serialize(accessor.getSource(), node, RequirementMetadataType_Names::Source_Name, false);
  }
  if (accessor.hasNarrative()) {
    RemarksType::serialize(accessor.getNarrative(), node, RequirementMetadataType_Names::Narrative_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementMetadataType& RequirementMetadataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementMetadataType>().release());
}

uci::type::RequirementMetadataType& RequirementMetadataType::create(const uci::type::RequirementMetadataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementMetadataType> newAccessor{boost::make_unique<asb_uci::type::RequirementMetadataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementMetadataType::destroy(uci::type::RequirementMetadataType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementMetadataType*>(&accessor);
}

} // namespace type

} // namespace uci

