/** @file CommSchedulingRequirementMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommSchedulingRequirementMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommCoverageUserDataType.h"
#include "asb_uci/type/CommSchedulingRequirementID_Type.h"
#include "asb_uci/type/CommSchedulingRequirementStateEnum.h"
#include "asb_uci/type/RoutePlanReferenceType.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommCoverageUserDataType.h"
#include "uci/type/CommSchedulingRequirementID_Type.h"
#include "uci/type/CommSchedulingRequirementMDT.h"
#include "uci/type/CommSchedulingRequirementStateEnum.h"
#include "uci/type/RoutePlanReferenceType.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommSchedulingRequirementMDT::CommSchedulingRequirementMDT()
  : requirementID_Accessor{boost::make_unique<CommSchedulingRequirementID_Type>()},
    requirementState_Accessor{boost::make_unique<CommSchedulingRequirementStateEnum>()},
    requestingSystemID_Accessor{boost::make_unique<SystemID_Type>()},
    commRequirementData_Accessor{boost::make_unique<CommCoverageUserDataType>()},
    requirementRoutePlan_Accessor{boost::make_unique<RequirementRoutePlan>(0, SIZE_MAX)} {
}

CommSchedulingRequirementMDT::~CommSchedulingRequirementMDT() = default;

void CommSchedulingRequirementMDT::copy(const uci::type::CommSchedulingRequirementMDT& accessor) {
  copyImpl(accessor, false);
}

void CommSchedulingRequirementMDT::copyImpl(const uci::type::CommSchedulingRequirementMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommSchedulingRequirementMDT&>(accessor);
    setRequirementID(*(accessorImpl.requirementID_Accessor));
    setRequirementState(*(accessorImpl.requirementState_Accessor));
    setRequestingSystemID(*(accessorImpl.requestingSystemID_Accessor));
    setCommRequirementData(*(accessorImpl.commRequirementData_Accessor));
    setRequirementRoutePlan(*(accessorImpl.requirementRoutePlan_Accessor));
  }
}

void CommSchedulingRequirementMDT::reset() noexcept {
  requirementID_Accessor->reset();
  requirementState_Accessor->reset();
  requestingSystemID_Accessor->reset();
  commRequirementData_Accessor->reset();
  requirementRoutePlan_Accessor->reset();
}

const uci::type::CommSchedulingRequirementID_Type& CommSchedulingRequirementMDT::getRequirementID() const {
  return *requirementID_Accessor;
}

uci::type::CommSchedulingRequirementID_Type& CommSchedulingRequirementMDT::getRequirementID() {
  return *requirementID_Accessor;
}

uci::type::CommSchedulingRequirementMDT& CommSchedulingRequirementMDT::setRequirementID(const uci::type::CommSchedulingRequirementID_Type& accessor) {
  if (&accessor != requirementID_Accessor.get()) {
    requirementID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommSchedulingRequirementStateEnum& CommSchedulingRequirementMDT::getRequirementState() const {
  return *requirementState_Accessor;
}

uci::type::CommSchedulingRequirementStateEnum& CommSchedulingRequirementMDT::getRequirementState() {
  return *requirementState_Accessor;
}

uci::type::CommSchedulingRequirementMDT& CommSchedulingRequirementMDT::setRequirementState(const uci::type::CommSchedulingRequirementStateEnum& accessor) {
  if (&accessor != requirementState_Accessor.get()) {
    requirementState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommSchedulingRequirementMDT& CommSchedulingRequirementMDT::setRequirementState(uci::type::CommSchedulingRequirementStateEnum::EnumerationItem value) {
  requirementState_Accessor->setValue(value);
  return *this;
}


const uci::type::SystemID_Type& CommSchedulingRequirementMDT::getRequestingSystemID() const {
  return *requestingSystemID_Accessor;
}

uci::type::SystemID_Type& CommSchedulingRequirementMDT::getRequestingSystemID() {
  return *requestingSystemID_Accessor;
}

uci::type::CommSchedulingRequirementMDT& CommSchedulingRequirementMDT::setRequestingSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != requestingSystemID_Accessor.get()) {
    requestingSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommCoverageUserDataType& CommSchedulingRequirementMDT::getCommRequirementData() const {
  return *commRequirementData_Accessor;
}

uci::type::CommCoverageUserDataType& CommSchedulingRequirementMDT::getCommRequirementData() {
  return *commRequirementData_Accessor;
}

uci::type::CommSchedulingRequirementMDT& CommSchedulingRequirementMDT::setCommRequirementData(const uci::type::CommCoverageUserDataType& accessor) {
  if (&accessor != commRequirementData_Accessor.get()) {
    commRequirementData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommSchedulingRequirementMDT::RequirementRoutePlan& CommSchedulingRequirementMDT::getRequirementRoutePlan() const {
  return *requirementRoutePlan_Accessor;
}

uci::type::CommSchedulingRequirementMDT::RequirementRoutePlan& CommSchedulingRequirementMDT::getRequirementRoutePlan() {
  return *requirementRoutePlan_Accessor;
}

uci::type::CommSchedulingRequirementMDT& CommSchedulingRequirementMDT::setRequirementRoutePlan(const uci::type::CommSchedulingRequirementMDT::RequirementRoutePlan& accessor) {
  if (&accessor != requirementRoutePlan_Accessor.get()) {
    requirementRoutePlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommSchedulingRequirementMDT> CommSchedulingRequirementMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commSchedulingRequirementMDT : type};
  return (requestedType == uci::type::accessorType::commSchedulingRequirementMDT) ? boost::make_unique<CommSchedulingRequirementMDT>() : nullptr;
}

/**  */
namespace CommSchedulingRequirementMDT_Names {

constexpr const char* Extern_Type_Name{"CommSchedulingRequirementMDT"};
constexpr const char* RequirementID_Name{"RequirementID"};
constexpr const char* RequirementState_Name{"RequirementState"};
constexpr const char* RequestingSystemID_Name{"RequestingSystemID"};
constexpr const char* CommRequirementData_Name{"CommRequirementData"};
constexpr const char* RequirementRoutePlan_Name{"RequirementRoutePlan"};

} // namespace CommSchedulingRequirementMDT_Names

void CommSchedulingRequirementMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommSchedulingRequirementMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommSchedulingRequirementMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommSchedulingRequirementMDT_Names::RequirementID_Name) {
      CommSchedulingRequirementID_Type::deserialize(valueType.second, accessor.getRequirementID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommSchedulingRequirementMDT_Names::RequirementState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRequirementState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommSchedulingRequirementMDT_Names::RequestingSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getRequestingSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommSchedulingRequirementMDT_Names::CommRequirementData_Name) {
      CommCoverageUserDataType::deserialize(valueType.second, accessor.getCommRequirementData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommSchedulingRequirementMDT_Names::RequirementRoutePlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommSchedulingRequirementMDT::RequirementRoutePlan& boundedList = accessor.getRequirementRoutePlan();
        const uci::type::CommSchedulingRequirementMDT::RequirementRoutePlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RoutePlanReferenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CommSchedulingRequirementMDT::serialize(const uci::type::CommSchedulingRequirementMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommSchedulingRequirementMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommSchedulingRequirementMDT_Names::Extern_Type_Name);
  }
  CommSchedulingRequirementID_Type::serialize(accessor.getRequirementID(), node, CommSchedulingRequirementMDT_Names::RequirementID_Name);
  CommSchedulingRequirementStateEnum::serialize(accessor.getRequirementState(), node, CommSchedulingRequirementMDT_Names::RequirementState_Name, false);
  SystemID_Type::serialize(accessor.getRequestingSystemID(), node, CommSchedulingRequirementMDT_Names::RequestingSystemID_Name);
  CommCoverageUserDataType::serialize(accessor.getCommRequirementData(), node, CommSchedulingRequirementMDT_Names::CommRequirementData_Name);
  {
    const uci::type::CommSchedulingRequirementMDT::RequirementRoutePlan& boundedList = accessor.getRequirementRoutePlan();
    for (uci::type::CommSchedulingRequirementMDT::RequirementRoutePlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RoutePlanReferenceType::serialize(boundedList.at(i), node, CommSchedulingRequirementMDT_Names::RequirementRoutePlan_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommSchedulingRequirementMDT& CommSchedulingRequirementMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommSchedulingRequirementMDT>().release());
}

uci::type::CommSchedulingRequirementMDT& CommSchedulingRequirementMDT::create(const uci::type::CommSchedulingRequirementMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommSchedulingRequirementMDT> newAccessor{boost::make_unique<asb_uci::type::CommSchedulingRequirementMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommSchedulingRequirementMDT::destroy(uci::type::CommSchedulingRequirementMDT& accessor) {
  delete dynamic_cast<asb_uci::type::CommSchedulingRequirementMDT*>(&accessor);
}

} // namespace type

} // namespace uci

