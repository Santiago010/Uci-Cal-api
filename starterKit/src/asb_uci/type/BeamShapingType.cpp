/** @file BeamShapingType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/BeamShapingType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BeamWeightingType.h"
#include "../../../include/asb_uci/type/BeamWidthType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamShapingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamWeightingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamWidthType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

BeamShapingType::BeamShapingType() = default;

BeamShapingType::~BeamShapingType() = default;

void BeamShapingType::copy(const uci::type::BeamShapingType& accessor) {
  copyImpl(accessor, false);
}

void BeamShapingType::copyImpl(const uci::type::BeamShapingType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const BeamShapingType&>(accessor);
    if (accessorImpl.beamWeighting_Accessor) {
      setBeamWeighting(*(accessorImpl.beamWeighting_Accessor));
    } else {
      beamWeighting_Accessor.reset();
    }
    if (accessorImpl.beamWidth_Accessor) {
      setBeamWidth(*(accessorImpl.beamWidth_Accessor));
    } else {
      beamWidth_Accessor.reset();
    }
  }
}

void BeamShapingType::reset() noexcept {
  beamWeighting_Accessor.reset();
  beamWidth_Accessor.reset();
}

uci::type::BeamShapingType::BeamShapingTypeChoice BeamShapingType::getBeamShapingTypeChoiceOrdinal() const noexcept {
  if (beamWeighting_Accessor) {
    return BEAMSHAPINGTYPE_CHOICE_BEAMWEIGHTING;
  }
  if (beamWidth_Accessor) {
    return BEAMSHAPINGTYPE_CHOICE_BEAMWIDTH;
  }
  return BEAMSHAPINGTYPE_CHOICE_NONE;
}

uci::type::BeamShapingType& BeamShapingType::setBeamShapingTypeChoiceOrdinal(uci::type::BeamShapingType::BeamShapingTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case BEAMSHAPINGTYPE_CHOICE_BEAMWEIGHTING:
      chooseBeamWeighting("setBeamShapingTypeChoiceOrdinal", type);
      break;
    case BEAMSHAPINGTYPE_CHOICE_BEAMWIDTH:
      chooseBeamWidth("setBeamShapingTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setBeamShapingTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::BeamWeightingType& BeamShapingType::getBeamWeighting_() const {
  if (beamWeighting_Accessor) {
    return *beamWeighting_Accessor;
  }
  throw uci::base::UCIException("Error in getBeamWeighting(): Unable to get BeamWeighting, field not selected");
}

const uci::type::BeamWeightingType& BeamShapingType::getBeamWeighting() const {
  return getBeamWeighting_();
}

uci::type::BeamWeightingType& BeamShapingType::getBeamWeighting() {
  return getBeamWeighting_();
}

uci::type::BeamShapingType& BeamShapingType::setBeamWeighting(const uci::type::BeamWeightingType& accessor) {
  chooseBeamWeighting();
  if (&accessor != beamWeighting_Accessor.get()) {
    beamWeighting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool BeamShapingType::isBeamWeighting() const noexcept {
  return static_cast<bool>(beamWeighting_Accessor);
}

uci::type::BeamWeightingType& BeamShapingType::chooseBeamWeighting(const std::string& method, uci::base::accessorType::AccessorType type) {
  beamWidth_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::beamWeightingType : type};
  if ((!beamWeighting_Accessor) || (beamWeighting_Accessor->getAccessorType() != requestedType)) {
    beamWeighting_Accessor = BeamWeightingType::create(type);
    if (!beamWeighting_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *beamWeighting_Accessor;
}

uci::type::BeamWeightingType& BeamShapingType::chooseBeamWeighting(uci::base::accessorType::AccessorType type) {
  return chooseBeamWeighting("chooseBeamWeighting", type);
}

uci::type::BeamWidthType& BeamShapingType::getBeamWidth_() const {
  if (beamWidth_Accessor) {
    return *beamWidth_Accessor;
  }
  throw uci::base::UCIException("Error in getBeamWidth(): Unable to get BeamWidth, field not selected");
}

const uci::type::BeamWidthType& BeamShapingType::getBeamWidth() const {
  return getBeamWidth_();
}

uci::type::BeamWidthType& BeamShapingType::getBeamWidth() {
  return getBeamWidth_();
}

uci::type::BeamShapingType& BeamShapingType::setBeamWidth(const uci::type::BeamWidthType& accessor) {
  chooseBeamWidth();
  if (&accessor != beamWidth_Accessor.get()) {
    beamWidth_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool BeamShapingType::isBeamWidth() const noexcept {
  return static_cast<bool>(beamWidth_Accessor);
}

uci::type::BeamWidthType& BeamShapingType::chooseBeamWidth(const std::string& method, uci::base::accessorType::AccessorType type) {
  beamWeighting_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::beamWidthType : type};
  if ((!beamWidth_Accessor) || (beamWidth_Accessor->getAccessorType() != requestedType)) {
    beamWidth_Accessor = BeamWidthType::create(type);
    if (!beamWidth_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *beamWidth_Accessor;
}

uci::type::BeamWidthType& BeamShapingType::chooseBeamWidth(uci::base::accessorType::AccessorType type) {
  return chooseBeamWidth("chooseBeamWidth", type);
}

std::unique_ptr<BeamShapingType> BeamShapingType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::beamShapingType : type};
  return (requestedType == uci::type::accessorType::beamShapingType) ? boost::make_unique<BeamShapingType>() : nullptr;
}

/**  */
namespace BeamShapingType_Names {

constexpr const char* Extern_Type_Name{"BeamShapingType"};
constexpr const char* BeamWeighting_Name{"BeamWeighting"};
constexpr const char* BeamWidth_Name{"BeamWidth"};

} // namespace BeamShapingType_Names

void BeamShapingType::deserialize(const boost::property_tree::ptree& propTree, uci::type::BeamShapingType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = BeamShapingType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + BeamShapingType_Names::BeamWeighting_Name) {
      BeamWeightingType::deserialize(valueType.second, accessor.chooseBeamWeighting(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BeamShapingType_Names::BeamWidth_Name) {
      BeamWidthType::deserialize(valueType.second, accessor.chooseBeamWidth(), nodeName, nsPrefix);
    }
  }
}

std::string BeamShapingType::serialize(const uci::type::BeamShapingType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? BeamShapingType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, BeamShapingType_Names::Extern_Type_Name);
  }
  if (accessor.isBeamWeighting()) {
    BeamWeightingType::serialize(accessor.getBeamWeighting(), node, BeamShapingType_Names::BeamWeighting_Name);
  } else if (accessor.isBeamWidth()) {
    BeamWidthType::serialize(accessor.getBeamWidth(), node, BeamShapingType_Names::BeamWidth_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::BeamShapingType& BeamShapingType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::BeamShapingType>().release());
}

uci::type::BeamShapingType& BeamShapingType::create(const uci::type::BeamShapingType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::BeamShapingType> newAccessor{boost::make_unique<asb_uci::type::BeamShapingType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void BeamShapingType::destroy(uci::type::BeamShapingType& accessor) {
  delete dynamic_cast<asb_uci::type::BeamShapingType*>(&accessor);
}

} // namespace type

} // namespace uci

