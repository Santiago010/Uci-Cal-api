/** @file OpPointBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OpPointBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AnglePairType.h"
#include "../../../include/asb_uci/type/OpBaseType.h"
#include "../../../include/asb_uci/type/OpPointChoiceType.h"
#include "../../../include/asb_uci/type/OpPointID_Type.h"
#include "../../../include/asb_uci/type/RelativeDirectionEnum.h"
#include "../../../include/asb_uci/type/SafeAltitudeType.h"
#include "../../../include/asb_uci/type/SystemConfigurationType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnglePairType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RelativeDirectionEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SafeAltitudeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemConfigurationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpPointBaseType::OpPointBaseType()
  : opPointID_Accessor{boost::make_unique<OpPointID_Type>()},
    pointChoice_Accessor{boost::make_unique<OpPointChoiceType>()},
    systemConfiguration_Accessor{boost::make_unique<SystemConfiguration>(0, SIZE_MAX)} {
}

OpPointBaseType::~OpPointBaseType() = default;

void OpPointBaseType::copy(const uci::type::OpPointBaseType& accessor) {
  copyImpl(accessor, false);
}

void OpPointBaseType::copyImpl(const uci::type::OpPointBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::opPointBaseType)) {
      OpBaseType::copyImpl(accessor, false);
      const auto& accessorImpl = dynamic_cast<const OpPointBaseType&>(accessor);
      setOpPointID(*(accessorImpl.opPointID_Accessor));
      setPointChoice(*(accessorImpl.pointChoice_Accessor));
      setSystemConfiguration(*(accessorImpl.systemConfiguration_Accessor));
      if (accessorImpl.turnDirection_Accessor) {
        setTurnDirection(*(accessorImpl.turnDirection_Accessor));
      } else {
        turnDirection_Accessor.reset();
      }
      if (accessorImpl.ingressConstraint_Accessor) {
        setIngressConstraint(*(accessorImpl.ingressConstraint_Accessor));
      } else {
        ingressConstraint_Accessor.reset();
      }
      if (accessorImpl.safeAltitude_Accessor) {
        setSafeAltitude(*(accessorImpl.safeAltitude_Accessor));
      } else {
        safeAltitude_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void OpPointBaseType::reset() noexcept {
  OpBaseType::reset();
  opPointID_Accessor->reset();
  pointChoice_Accessor->reset();
  systemConfiguration_Accessor->reset();
  turnDirection_Accessor.reset();
  ingressConstraint_Accessor.reset();
  safeAltitude_Accessor.reset();
}

const uci::type::OpPointID_Type& OpPointBaseType::getOpPointID() const {
  return *opPointID_Accessor;
}

uci::type::OpPointID_Type& OpPointBaseType::getOpPointID() {
  return *opPointID_Accessor;
}

uci::type::OpPointBaseType& OpPointBaseType::setOpPointID(const uci::type::OpPointID_Type& accessor) {
  if (&accessor != opPointID_Accessor.get()) {
    opPointID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OpPointChoiceType& OpPointBaseType::getPointChoice() const {
  return *pointChoice_Accessor;
}

uci::type::OpPointChoiceType& OpPointBaseType::getPointChoice() {
  return *pointChoice_Accessor;
}

uci::type::OpPointBaseType& OpPointBaseType::setPointChoice(const uci::type::OpPointChoiceType& accessor) {
  if (&accessor != pointChoice_Accessor.get()) {
    pointChoice_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OpPointBaseType::SystemConfiguration& OpPointBaseType::getSystemConfiguration() const {
  return *systemConfiguration_Accessor;
}

uci::type::OpPointBaseType::SystemConfiguration& OpPointBaseType::getSystemConfiguration() {
  return *systemConfiguration_Accessor;
}

uci::type::OpPointBaseType& OpPointBaseType::setSystemConfiguration(const uci::type::OpPointBaseType::SystemConfiguration& accessor) {
  if (&accessor != systemConfiguration_Accessor.get()) {
    systemConfiguration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RelativeDirectionEnum& OpPointBaseType::getTurnDirection_() const {
  if (turnDirection_Accessor) {
    return *turnDirection_Accessor;
  }
  throw uci::base::UCIException("Error in getTurnDirection(): An attempt was made to get an optional field that was not enabled, call hasTurnDirection() to determine if it is safe to call getTurnDirection()");
}

const uci::type::RelativeDirectionEnum& OpPointBaseType::getTurnDirection() const {
  return getTurnDirection_();
}

uci::type::RelativeDirectionEnum& OpPointBaseType::getTurnDirection() {
  return getTurnDirection_();
}

uci::type::OpPointBaseType& OpPointBaseType::setTurnDirection(const uci::type::RelativeDirectionEnum& accessor) {
  enableTurnDirection();
  if (&accessor != turnDirection_Accessor.get()) {
    turnDirection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpPointBaseType& OpPointBaseType::setTurnDirection(const uci::type::RelativeDirectionEnum::EnumerationItem value) {
  enableTurnDirection().setValue(value);
  return *this;
}

bool OpPointBaseType::hasTurnDirection() const noexcept {
  return static_cast<bool>(turnDirection_Accessor);
}

uci::type::RelativeDirectionEnum& OpPointBaseType::enableTurnDirection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativeDirectionEnum : type};
  if ((!turnDirection_Accessor) || (turnDirection_Accessor->getAccessorType() != requestedType)) {
    turnDirection_Accessor = RelativeDirectionEnum::create(requestedType);
    if (!turnDirection_Accessor) {
      throw uci::base::UCIException("Error in enableTurnDirection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *turnDirection_Accessor;
}

uci::type::OpPointBaseType& OpPointBaseType::clearTurnDirection() noexcept {
  turnDirection_Accessor.reset();
  return *this;
}

uci::type::AnglePairType& OpPointBaseType::getIngressConstraint_() const {
  if (ingressConstraint_Accessor) {
    return *ingressConstraint_Accessor;
  }
  throw uci::base::UCIException("Error in getIngressConstraint(): An attempt was made to get an optional field that was not enabled, call hasIngressConstraint() to determine if it is safe to call getIngressConstraint()");
}

const uci::type::AnglePairType& OpPointBaseType::getIngressConstraint() const {
  return getIngressConstraint_();
}

uci::type::AnglePairType& OpPointBaseType::getIngressConstraint() {
  return getIngressConstraint_();
}

uci::type::OpPointBaseType& OpPointBaseType::setIngressConstraint(const uci::type::AnglePairType& accessor) {
  enableIngressConstraint(accessor.getAccessorType());
  if (&accessor != ingressConstraint_Accessor.get()) {
    ingressConstraint_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OpPointBaseType::hasIngressConstraint() const noexcept {
  return static_cast<bool>(ingressConstraint_Accessor);
}

uci::type::AnglePairType& OpPointBaseType::enableIngressConstraint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::anglePairType : type};
  if ((!ingressConstraint_Accessor) || (ingressConstraint_Accessor->getAccessorType() != requestedType)) {
    ingressConstraint_Accessor = AnglePairType::create(requestedType);
    if (!ingressConstraint_Accessor) {
      throw uci::base::UCIException("Error in enableIngressConstraint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ingressConstraint_Accessor;
}

uci::type::OpPointBaseType& OpPointBaseType::clearIngressConstraint() noexcept {
  ingressConstraint_Accessor.reset();
  return *this;
}

uci::type::SafeAltitudeType& OpPointBaseType::getSafeAltitude_() const {
  if (safeAltitude_Accessor) {
    return *safeAltitude_Accessor;
  }
  throw uci::base::UCIException("Error in getSafeAltitude(): An attempt was made to get an optional field that was not enabled, call hasSafeAltitude() to determine if it is safe to call getSafeAltitude()");
}

const uci::type::SafeAltitudeType& OpPointBaseType::getSafeAltitude() const {
  return getSafeAltitude_();
}

uci::type::SafeAltitudeType& OpPointBaseType::getSafeAltitude() {
  return getSafeAltitude_();
}

uci::type::OpPointBaseType& OpPointBaseType::setSafeAltitude(const uci::type::SafeAltitudeType& accessor) {
  enableSafeAltitude();
  if (&accessor != safeAltitude_Accessor.get()) {
    safeAltitude_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpPointBaseType::hasSafeAltitude() const noexcept {
  return static_cast<bool>(safeAltitude_Accessor);
}

uci::type::SafeAltitudeType& OpPointBaseType::enableSafeAltitude(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::safeAltitudeType : type};
  if ((!safeAltitude_Accessor) || (safeAltitude_Accessor->getAccessorType() != requestedType)) {
    safeAltitude_Accessor = SafeAltitudeType::create(requestedType);
    if (!safeAltitude_Accessor) {
      throw uci::base::UCIException("Error in enableSafeAltitude(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *safeAltitude_Accessor;
}

uci::type::OpPointBaseType& OpPointBaseType::clearSafeAltitude() noexcept {
  safeAltitude_Accessor.reset();
  return *this;
}

std::unique_ptr<OpPointBaseType> OpPointBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointBaseType : type};
  return std::unique_ptr<OpPointBaseType>(dynamic_cast<OpPointBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace OpPointBaseType_Names {

constexpr const char* Extern_Type_Name{"OpPointBaseType"};
constexpr const char* OpPointID_Name{"OpPointID"};
constexpr const char* PointChoice_Name{"PointChoice"};
constexpr const char* SystemConfiguration_Name{"SystemConfiguration"};
constexpr const char* TurnDirection_Name{"TurnDirection"};
constexpr const char* IngressConstraint_Name{"IngressConstraint"};
constexpr const char* SafeAltitude_Name{"SafeAltitude"};

} // namespace OpPointBaseType_Names

void OpPointBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpPointBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpPointBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpPointBaseType_Names::OpPointID_Name) {
      OpPointID_Type::deserialize(valueType.second, accessor.getOpPointID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpPointBaseType_Names::PointChoice_Name) {
      OpPointChoiceType::deserialize(valueType.second, accessor.getPointChoice(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpPointBaseType_Names::SystemConfiguration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpPointBaseType::SystemConfiguration& boundedList = accessor.getSystemConfiguration();
        const uci::type::OpPointBaseType::SystemConfiguration::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemConfigurationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpPointBaseType_Names::TurnDirection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTurnDirection().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OpPointBaseType_Names::IngressConstraint_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableIngressConstraint(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpPointBaseType_Names::SafeAltitude_Name) {
      SafeAltitudeType::deserialize(valueType.second, accessor.enableSafeAltitude(), nodeName, nsPrefix);
    }
  }
  OpBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string OpPointBaseType::serialize(const uci::type::OpPointBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpPointBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::opPointBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpPointBaseType_Names::Extern_Type_Name);
    }
    OpBaseType::serialize(accessor, node, "", false, false, false);
    OpPointID_Type::serialize(accessor.getOpPointID(), node, OpPointBaseType_Names::OpPointID_Name);
    OpPointChoiceType::serialize(accessor.getPointChoice(), node, OpPointBaseType_Names::PointChoice_Name);
    {
      const uci::type::OpPointBaseType::SystemConfiguration& boundedList = accessor.getSystemConfiguration();
      for (uci::type::OpPointBaseType::SystemConfiguration::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SystemConfigurationType::serialize(boundedList.at(i), node, OpPointBaseType_Names::SystemConfiguration_Name);
      }
    }
    if (accessor.hasTurnDirection()) {
      RelativeDirectionEnum::serialize(accessor.getTurnDirection(), node, OpPointBaseType_Names::TurnDirection_Name, false);
    }
    if (accessor.hasIngressConstraint()) {
      AnglePairType::serialize(accessor.getIngressConstraint(), node, OpPointBaseType_Names::IngressConstraint_Name);
    }
    if (accessor.hasSafeAltitude()) {
      SafeAltitudeType::serialize(accessor.getSafeAltitude(), node, OpPointBaseType_Names::SafeAltitude_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

