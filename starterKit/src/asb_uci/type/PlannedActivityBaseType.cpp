/** @file PlannedActivityBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PlannedActivityBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityChoiceType.h"
#include "../../../include/asb_uci/type/ActivityTransitionEnum.h"
#include "../../../include/asb_uci/type/DateTimeRangeType.h"
#include "../../../include/asb_uci/type/PlannedActivityID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityTransitionEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlannedActivityBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlannedActivityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlannedActivityBaseType::PlannedActivityBaseType()
  : plannedActivityID_Accessor{boost::make_unique<PlannedActivityID_Type>()},
    activityType_Accessor{boost::make_unique<ActivityChoiceType>()},
    activityTransition_Accessor{boost::make_unique<ActivityTransitionEnum>()} {
}

PlannedActivityBaseType::~PlannedActivityBaseType() = default;

void PlannedActivityBaseType::copy(const uci::type::PlannedActivityBaseType& accessor) {
  copyImpl(accessor, false);
}

void PlannedActivityBaseType::copyImpl(const uci::type::PlannedActivityBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::plannedActivityBaseType)) {
      const auto& accessorImpl = dynamic_cast<const PlannedActivityBaseType&>(accessor);
      setPlannedActivityID(*(accessorImpl.plannedActivityID_Accessor));
      setActivityType(*(accessorImpl.activityType_Accessor));
      if (accessorImpl.hasLocked()) {
        setLocked(accessorImpl.getLocked());
      } else {
        clearLocked();
      }
      setActivityTransition(*(accessorImpl.activityTransition_Accessor));
      if (accessorImpl.resultTime_Accessor) {
        setResultTime(*(accessorImpl.resultTime_Accessor));
      } else {
        resultTime_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void PlannedActivityBaseType::reset() noexcept {
  plannedActivityID_Accessor->reset();
  activityType_Accessor->reset();
  clearLocked();
  activityTransition_Accessor->reset();
  resultTime_Accessor.reset();
}

const uci::type::PlannedActivityID_Type& PlannedActivityBaseType::getPlannedActivityID() const {
  return *plannedActivityID_Accessor;
}

uci::type::PlannedActivityID_Type& PlannedActivityBaseType::getPlannedActivityID() {
  return *plannedActivityID_Accessor;
}

uci::type::PlannedActivityBaseType& PlannedActivityBaseType::setPlannedActivityID(const uci::type::PlannedActivityID_Type& accessor) {
  if (&accessor != plannedActivityID_Accessor.get()) {
    plannedActivityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ActivityChoiceType& PlannedActivityBaseType::getActivityType() const {
  return *activityType_Accessor;
}

uci::type::ActivityChoiceType& PlannedActivityBaseType::getActivityType() {
  return *activityType_Accessor;
}

uci::type::PlannedActivityBaseType& PlannedActivityBaseType::setActivityType(const uci::type::ActivityChoiceType& accessor) {
  if (&accessor != activityType_Accessor.get()) {
    activityType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean PlannedActivityBaseType::getLocked() const {
  if (locked_Accessor) {
    return *locked_Accessor;
  }
  throw uci::base::UCIException("Error in getLocked(): An attempt was made to get an optional field that was not enabled, call hasLocked() to determine if it is safe to call getLocked()");
}

uci::type::PlannedActivityBaseType& PlannedActivityBaseType::setLocked(xs::Boolean value) {
  locked_Accessor = value;
  return *this;
}

bool PlannedActivityBaseType::hasLocked() const noexcept {
  return locked_Accessor.has_value();
}

uci::type::PlannedActivityBaseType& PlannedActivityBaseType::clearLocked() noexcept {
  locked_Accessor.reset();
  return *this;
}

const uci::type::ActivityTransitionEnum& PlannedActivityBaseType::getActivityTransition() const {
  return *activityTransition_Accessor;
}

uci::type::ActivityTransitionEnum& PlannedActivityBaseType::getActivityTransition() {
  return *activityTransition_Accessor;
}

uci::type::PlannedActivityBaseType& PlannedActivityBaseType::setActivityTransition(const uci::type::ActivityTransitionEnum& accessor) {
  if (&accessor != activityTransition_Accessor.get()) {
    activityTransition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlannedActivityBaseType& PlannedActivityBaseType::setActivityTransition(uci::type::ActivityTransitionEnum::EnumerationItem value) {
  activityTransition_Accessor->setValue(value);
  return *this;
}


uci::type::DateTimeRangeType& PlannedActivityBaseType::getResultTime_() const {
  if (resultTime_Accessor) {
    return *resultTime_Accessor;
  }
  throw uci::base::UCIException("Error in getResultTime(): An attempt was made to get an optional field that was not enabled, call hasResultTime() to determine if it is safe to call getResultTime()");
}

const uci::type::DateTimeRangeType& PlannedActivityBaseType::getResultTime() const {
  return getResultTime_();
}

uci::type::DateTimeRangeType& PlannedActivityBaseType::getResultTime() {
  return getResultTime_();
}

uci::type::PlannedActivityBaseType& PlannedActivityBaseType::setResultTime(const uci::type::DateTimeRangeType& accessor) {
  enableResultTime();
  if (&accessor != resultTime_Accessor.get()) {
    resultTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlannedActivityBaseType::hasResultTime() const noexcept {
  return static_cast<bool>(resultTime_Accessor);
}

uci::type::DateTimeRangeType& PlannedActivityBaseType::enableResultTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!resultTime_Accessor) || (resultTime_Accessor->getAccessorType() != requestedType)) {
    resultTime_Accessor = DateTimeRangeType::create(requestedType);
    if (!resultTime_Accessor) {
      throw uci::base::UCIException("Error in enableResultTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *resultTime_Accessor;
}

uci::type::PlannedActivityBaseType& PlannedActivityBaseType::clearResultTime() noexcept {
  resultTime_Accessor.reset();
  return *this;
}

std::unique_ptr<PlannedActivityBaseType> PlannedActivityBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::plannedActivityBaseType : type};
  return std::unique_ptr<PlannedActivityBaseType>(dynamic_cast<PlannedActivityBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace PlannedActivityBaseType_Names {

constexpr const char* Extern_Type_Name{"PlannedActivityBaseType"};
constexpr const char* PlannedActivityID_Name{"PlannedActivityID"};
constexpr const char* ActivityType_Name{"ActivityType"};
constexpr const char* Locked_Name{"Locked"};
constexpr const char* ActivityTransition_Name{"ActivityTransition"};
constexpr const char* ResultTime_Name{"ResultTime"};

} // namespace PlannedActivityBaseType_Names

void PlannedActivityBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlannedActivityBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlannedActivityBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlannedActivityBaseType_Names::PlannedActivityID_Name) {
      PlannedActivityID_Type::deserialize(valueType.second, accessor.getPlannedActivityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedActivityBaseType_Names::ActivityType_Name) {
      ActivityChoiceType::deserialize(valueType.second, accessor.getActivityType(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedActivityBaseType_Names::Locked_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLocked(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PlannedActivityBaseType_Names::ActivityTransition_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getActivityTransition().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlannedActivityBaseType_Names::ResultTime_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableResultTime(), nodeName, nsPrefix);
    }
  }
}

std::string PlannedActivityBaseType::serialize(const uci::type::PlannedActivityBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlannedActivityBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::plannedActivityBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlannedActivityBaseType_Names::Extern_Type_Name);
    }
    PlannedActivityID_Type::serialize(accessor.getPlannedActivityID(), node, PlannedActivityBaseType_Names::PlannedActivityID_Name);
    ActivityChoiceType::serialize(accessor.getActivityType(), node, PlannedActivityBaseType_Names::ActivityType_Name);
    if (accessor.hasLocked()) {
      asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getLocked(), node, PlannedActivityBaseType_Names::Locked_Name);
    }
    ActivityTransitionEnum::serialize(accessor.getActivityTransition(), node, PlannedActivityBaseType_Names::ActivityTransition_Name, false);
    if (accessor.hasResultTime()) {
      DateTimeRangeType::serialize(accessor.getResultTime(), node, PlannedActivityBaseType_Names::ResultTime_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlannedActivityBaseType& PlannedActivityBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlannedActivityBaseType>().release());
}

uci::type::PlannedActivityBaseType& PlannedActivityBaseType::create(const uci::type::PlannedActivityBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlannedActivityBaseType> newAccessor{boost::make_unique<asb_uci::type::PlannedActivityBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlannedActivityBaseType::destroy(uci::type::PlannedActivityBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::PlannedActivityBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

