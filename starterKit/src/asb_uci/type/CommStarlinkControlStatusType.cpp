/** @file CommStarlinkControlStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommStarlinkControlStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BeamPointingReferenceType.h"
#include "../../../include/asb_uci/type/PointingControlModeStatusEnum.h"
#include "../../../include/asb_uci/type/PolarizationType.h"
#include "../../../include/asb_uci/type/PositionModeEnum.h"
#include "../../../include/asb_uci/type/TransceiverType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamPointingReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommStarlinkControlStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PointingControlModeStatusEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PolarizationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PositionModeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TransceiverType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommStarlinkControlStatusType::CommStarlinkControlStatusType() = default;

CommStarlinkControlStatusType::~CommStarlinkControlStatusType() = default;

void CommStarlinkControlStatusType::copy(const uci::type::CommStarlinkControlStatusType& accessor) {
  copyImpl(accessor, false);
}

void CommStarlinkControlStatusType::copyImpl(const uci::type::CommStarlinkControlStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommStarlinkControlStatusType&>(accessor);
    if (accessorImpl.positionMode_Accessor) {
      setPositionMode(*(accessorImpl.positionMode_Accessor));
    } else {
      positionMode_Accessor.reset();
    }
    if (accessorImpl.transceiver_Accessor) {
      setTransceiver(*(accessorImpl.transceiver_Accessor));
    } else {
      transceiver_Accessor.reset();
    }
    if (accessorImpl.pointingControlModeStatus_Accessor) {
      setPointingControlModeStatus(*(accessorImpl.pointingControlModeStatus_Accessor));
    } else {
      pointingControlModeStatus_Accessor.reset();
    }
    if (accessorImpl.beamPointing_Accessor) {
      setBeamPointing(*(accessorImpl.beamPointing_Accessor));
    } else {
      beamPointing_Accessor.reset();
    }
    if (accessorImpl.polarization_Accessor) {
      setPolarization(*(accessorImpl.polarization_Accessor));
    } else {
      polarization_Accessor.reset();
    }
  }
}

void CommStarlinkControlStatusType::reset() noexcept {
  positionMode_Accessor.reset();
  transceiver_Accessor.reset();
  pointingControlModeStatus_Accessor.reset();
  beamPointing_Accessor.reset();
  polarization_Accessor.reset();
}

uci::type::PositionModeEnum& CommStarlinkControlStatusType::getPositionMode_() const {
  if (positionMode_Accessor) {
    return *positionMode_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionMode(): An attempt was made to get an optional field that was not enabled, call hasPositionMode() to determine if it is safe to call getPositionMode()");
}

const uci::type::PositionModeEnum& CommStarlinkControlStatusType::getPositionMode() const {
  return getPositionMode_();
}

uci::type::PositionModeEnum& CommStarlinkControlStatusType::getPositionMode() {
  return getPositionMode_();
}

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::setPositionMode(const uci::type::PositionModeEnum& accessor) {
  enablePositionMode();
  if (&accessor != positionMode_Accessor.get()) {
    positionMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::setPositionMode(const uci::type::PositionModeEnum::EnumerationItem value) {
  enablePositionMode().setValue(value);
  return *this;
}

bool CommStarlinkControlStatusType::hasPositionMode() const noexcept {
  return static_cast<bool>(positionMode_Accessor);
}

uci::type::PositionModeEnum& CommStarlinkControlStatusType::enablePositionMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionModeEnum : type};
  if ((!positionMode_Accessor) || (positionMode_Accessor->getAccessorType() != requestedType)) {
    positionMode_Accessor = PositionModeEnum::create(requestedType);
    if (!positionMode_Accessor) {
      throw uci::base::UCIException("Error in enablePositionMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionMode_Accessor;
}

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::clearPositionMode() noexcept {
  positionMode_Accessor.reset();
  return *this;
}

uci::type::TransceiverType& CommStarlinkControlStatusType::getTransceiver_() const {
  if (transceiver_Accessor) {
    return *transceiver_Accessor;
  }
  throw uci::base::UCIException("Error in getTransceiver(): An attempt was made to get an optional field that was not enabled, call hasTransceiver() to determine if it is safe to call getTransceiver()");
}

const uci::type::TransceiverType& CommStarlinkControlStatusType::getTransceiver() const {
  return getTransceiver_();
}

uci::type::TransceiverType& CommStarlinkControlStatusType::getTransceiver() {
  return getTransceiver_();
}

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::setTransceiver(const uci::type::TransceiverType& accessor) {
  enableTransceiver();
  if (&accessor != transceiver_Accessor.get()) {
    transceiver_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommStarlinkControlStatusType::hasTransceiver() const noexcept {
  return static_cast<bool>(transceiver_Accessor);
}

uci::type::TransceiverType& CommStarlinkControlStatusType::enableTransceiver(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::transceiverType : type};
  if ((!transceiver_Accessor) || (transceiver_Accessor->getAccessorType() != requestedType)) {
    transceiver_Accessor = TransceiverType::create(requestedType);
    if (!transceiver_Accessor) {
      throw uci::base::UCIException("Error in enableTransceiver(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *transceiver_Accessor;
}

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::clearTransceiver() noexcept {
  transceiver_Accessor.reset();
  return *this;
}

uci::type::PointingControlModeStatusEnum& CommStarlinkControlStatusType::getPointingControlModeStatus_() const {
  if (pointingControlModeStatus_Accessor) {
    return *pointingControlModeStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getPointingControlModeStatus(): An attempt was made to get an optional field that was not enabled, call hasPointingControlModeStatus() to determine if it is safe to call getPointingControlModeStatus()");
}

const uci::type::PointingControlModeStatusEnum& CommStarlinkControlStatusType::getPointingControlModeStatus() const {
  return getPointingControlModeStatus_();
}

uci::type::PointingControlModeStatusEnum& CommStarlinkControlStatusType::getPointingControlModeStatus() {
  return getPointingControlModeStatus_();
}

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::setPointingControlModeStatus(const uci::type::PointingControlModeStatusEnum& accessor) {
  enablePointingControlModeStatus();
  if (&accessor != pointingControlModeStatus_Accessor.get()) {
    pointingControlModeStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::setPointingControlModeStatus(const uci::type::PointingControlModeStatusEnum::EnumerationItem value) {
  enablePointingControlModeStatus().setValue(value);
  return *this;
}

bool CommStarlinkControlStatusType::hasPointingControlModeStatus() const noexcept {
  return static_cast<bool>(pointingControlModeStatus_Accessor);
}

uci::type::PointingControlModeStatusEnum& CommStarlinkControlStatusType::enablePointingControlModeStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pointingControlModeStatusEnum : type};
  if ((!pointingControlModeStatus_Accessor) || (pointingControlModeStatus_Accessor->getAccessorType() != requestedType)) {
    pointingControlModeStatus_Accessor = PointingControlModeStatusEnum::create(requestedType);
    if (!pointingControlModeStatus_Accessor) {
      throw uci::base::UCIException("Error in enablePointingControlModeStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pointingControlModeStatus_Accessor;
}

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::clearPointingControlModeStatus() noexcept {
  pointingControlModeStatus_Accessor.reset();
  return *this;
}

uci::type::BeamPointingReferenceType& CommStarlinkControlStatusType::getBeamPointing_() const {
  if (beamPointing_Accessor) {
    return *beamPointing_Accessor;
  }
  throw uci::base::UCIException("Error in getBeamPointing(): An attempt was made to get an optional field that was not enabled, call hasBeamPointing() to determine if it is safe to call getBeamPointing()");
}

const uci::type::BeamPointingReferenceType& CommStarlinkControlStatusType::getBeamPointing() const {
  return getBeamPointing_();
}

uci::type::BeamPointingReferenceType& CommStarlinkControlStatusType::getBeamPointing() {
  return getBeamPointing_();
}

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::setBeamPointing(const uci::type::BeamPointingReferenceType& accessor) {
  enableBeamPointing();
  if (&accessor != beamPointing_Accessor.get()) {
    beamPointing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommStarlinkControlStatusType::hasBeamPointing() const noexcept {
  return static_cast<bool>(beamPointing_Accessor);
}

uci::type::BeamPointingReferenceType& CommStarlinkControlStatusType::enableBeamPointing(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::beamPointingReferenceType : type};
  if ((!beamPointing_Accessor) || (beamPointing_Accessor->getAccessorType() != requestedType)) {
    beamPointing_Accessor = BeamPointingReferenceType::create(requestedType);
    if (!beamPointing_Accessor) {
      throw uci::base::UCIException("Error in enableBeamPointing(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *beamPointing_Accessor;
}

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::clearBeamPointing() noexcept {
  beamPointing_Accessor.reset();
  return *this;
}

uci::type::PolarizationType& CommStarlinkControlStatusType::getPolarization_() const {
  if (polarization_Accessor) {
    return *polarization_Accessor;
  }
  throw uci::base::UCIException("Error in getPolarization(): An attempt was made to get an optional field that was not enabled, call hasPolarization() to determine if it is safe to call getPolarization()");
}

const uci::type::PolarizationType& CommStarlinkControlStatusType::getPolarization() const {
  return getPolarization_();
}

uci::type::PolarizationType& CommStarlinkControlStatusType::getPolarization() {
  return getPolarization_();
}

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::setPolarization(const uci::type::PolarizationType& accessor) {
  enablePolarization();
  if (&accessor != polarization_Accessor.get()) {
    polarization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommStarlinkControlStatusType::hasPolarization() const noexcept {
  return static_cast<bool>(polarization_Accessor);
}

uci::type::PolarizationType& CommStarlinkControlStatusType::enablePolarization(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::polarizationType : type};
  if ((!polarization_Accessor) || (polarization_Accessor->getAccessorType() != requestedType)) {
    polarization_Accessor = PolarizationType::create(requestedType);
    if (!polarization_Accessor) {
      throw uci::base::UCIException("Error in enablePolarization(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *polarization_Accessor;
}

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::clearPolarization() noexcept {
  polarization_Accessor.reset();
  return *this;
}

std::unique_ptr<CommStarlinkControlStatusType> CommStarlinkControlStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commStarlinkControlStatusType : type};
  return (requestedType == uci::type::accessorType::commStarlinkControlStatusType) ? boost::make_unique<CommStarlinkControlStatusType>() : nullptr;
}

/**  */
namespace CommStarlinkControlStatusType_Names {

constexpr const char* Extern_Type_Name{"CommStarlinkControlStatusType"};
constexpr const char* PositionMode_Name{"PositionMode"};
constexpr const char* Transceiver_Name{"Transceiver"};
constexpr const char* PointingControlModeStatus_Name{"PointingControlModeStatus"};
constexpr const char* BeamPointing_Name{"BeamPointing"};
constexpr const char* Polarization_Name{"Polarization"};

} // namespace CommStarlinkControlStatusType_Names

void CommStarlinkControlStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommStarlinkControlStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommStarlinkControlStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommStarlinkControlStatusType_Names::PositionMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePositionMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommStarlinkControlStatusType_Names::Transceiver_Name) {
      TransceiverType::deserialize(valueType.second, accessor.enableTransceiver(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommStarlinkControlStatusType_Names::PointingControlModeStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePointingControlModeStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommStarlinkControlStatusType_Names::BeamPointing_Name) {
      BeamPointingReferenceType::deserialize(valueType.second, accessor.enableBeamPointing(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommStarlinkControlStatusType_Names::Polarization_Name) {
      PolarizationType::deserialize(valueType.second, accessor.enablePolarization(), nodeName, nsPrefix);
    }
  }
}

std::string CommStarlinkControlStatusType::serialize(const uci::type::CommStarlinkControlStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommStarlinkControlStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommStarlinkControlStatusType_Names::Extern_Type_Name);
  }
  if (accessor.hasPositionMode()) {
    PositionModeEnum::serialize(accessor.getPositionMode(), node, CommStarlinkControlStatusType_Names::PositionMode_Name, false);
  }
  if (accessor.hasTransceiver()) {
    TransceiverType::serialize(accessor.getTransceiver(), node, CommStarlinkControlStatusType_Names::Transceiver_Name);
  }
  if (accessor.hasPointingControlModeStatus()) {
    PointingControlModeStatusEnum::serialize(accessor.getPointingControlModeStatus(), node, CommStarlinkControlStatusType_Names::PointingControlModeStatus_Name, false);
  }
  if (accessor.hasBeamPointing()) {
    BeamPointingReferenceType::serialize(accessor.getBeamPointing(), node, CommStarlinkControlStatusType_Names::BeamPointing_Name);
  }
  if (accessor.hasPolarization()) {
    PolarizationType::serialize(accessor.getPolarization(), node, CommStarlinkControlStatusType_Names::Polarization_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommStarlinkControlStatusType>().release());
}

uci::type::CommStarlinkControlStatusType& CommStarlinkControlStatusType::create(const uci::type::CommStarlinkControlStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommStarlinkControlStatusType> newAccessor{boost::make_unique<asb_uci::type::CommStarlinkControlStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommStarlinkControlStatusType::destroy(uci::type::CommStarlinkControlStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::CommStarlinkControlStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

