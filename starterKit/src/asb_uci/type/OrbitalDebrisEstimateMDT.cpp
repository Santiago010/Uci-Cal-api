/** @file OrbitalDebrisEstimateMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitalDebrisEstimateMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitBreakupEventDetailsType.h"
#include "../../../include/asb_uci/type/OrbitalDebrisEstimateID_Type.h"
#include "../../../include/asb_uci/type/OrbitalDebrisEstimateType.h"
#include "../../../include/asb_uci/type/RequestID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitBreakupEventDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalDebrisEstimateID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalDebrisEstimateMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalDebrisEstimateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequestID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalDebrisEstimateMDT::OrbitalDebrisEstimateMDT()
  : orbitalDebrisEstimateID_Accessor{boost::make_unique<OrbitalDebrisEstimateID_Type>()},
    causalEvent_Accessor{boost::make_unique<OrbitBreakupEventDetailsType>()},
    estimate_Accessor{boost::make_unique<OrbitalDebrisEstimateType>()} {
}

OrbitalDebrisEstimateMDT::~OrbitalDebrisEstimateMDT() = default;

void OrbitalDebrisEstimateMDT::copy(const uci::type::OrbitalDebrisEstimateMDT& accessor) {
  copyImpl(accessor, false);
}

void OrbitalDebrisEstimateMDT::copyImpl(const uci::type::OrbitalDebrisEstimateMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalDebrisEstimateMDT&>(accessor);
    setOrbitalDebrisEstimateID(*(accessorImpl.orbitalDebrisEstimateID_Accessor));
    if (accessorImpl.orbitalDebrisEstimateRequestID_Accessor) {
      setOrbitalDebrisEstimateRequestID(*(accessorImpl.orbitalDebrisEstimateRequestID_Accessor));
    } else {
      orbitalDebrisEstimateRequestID_Accessor.reset();
    }
    setCausalEvent(*(accessorImpl.causalEvent_Accessor));
    setEstimate(*(accessorImpl.estimate_Accessor));
  }
}

void OrbitalDebrisEstimateMDT::reset() noexcept {
  orbitalDebrisEstimateID_Accessor->reset();
  orbitalDebrisEstimateRequestID_Accessor.reset();
  causalEvent_Accessor->reset();
  estimate_Accessor->reset();
}

const uci::type::OrbitalDebrisEstimateID_Type& OrbitalDebrisEstimateMDT::getOrbitalDebrisEstimateID() const {
  return *orbitalDebrisEstimateID_Accessor;
}

uci::type::OrbitalDebrisEstimateID_Type& OrbitalDebrisEstimateMDT::getOrbitalDebrisEstimateID() {
  return *orbitalDebrisEstimateID_Accessor;
}

uci::type::OrbitalDebrisEstimateMDT& OrbitalDebrisEstimateMDT::setOrbitalDebrisEstimateID(const uci::type::OrbitalDebrisEstimateID_Type& accessor) {
  if (&accessor != orbitalDebrisEstimateID_Accessor.get()) {
    orbitalDebrisEstimateID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequestID_Type& OrbitalDebrisEstimateMDT::getOrbitalDebrisEstimateRequestID_() const {
  if (orbitalDebrisEstimateRequestID_Accessor) {
    return *orbitalDebrisEstimateRequestID_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalDebrisEstimateRequestID(): An attempt was made to get an optional field that was not enabled, call hasOrbitalDebrisEstimateRequestID() to determine if it is safe to call getOrbitalDebrisEstimateRequestID()");
}

const uci::type::RequestID_Type& OrbitalDebrisEstimateMDT::getOrbitalDebrisEstimateRequestID() const {
  return getOrbitalDebrisEstimateRequestID_();
}

uci::type::RequestID_Type& OrbitalDebrisEstimateMDT::getOrbitalDebrisEstimateRequestID() {
  return getOrbitalDebrisEstimateRequestID_();
}

uci::type::OrbitalDebrisEstimateMDT& OrbitalDebrisEstimateMDT::setOrbitalDebrisEstimateRequestID(const uci::type::RequestID_Type& accessor) {
  enableOrbitalDebrisEstimateRequestID();
  if (&accessor != orbitalDebrisEstimateRequestID_Accessor.get()) {
    orbitalDebrisEstimateRequestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalDebrisEstimateMDT::hasOrbitalDebrisEstimateRequestID() const noexcept {
  return static_cast<bool>(orbitalDebrisEstimateRequestID_Accessor);
}

uci::type::RequestID_Type& OrbitalDebrisEstimateMDT::enableOrbitalDebrisEstimateRequestID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requestID_Type : type};
  if ((!orbitalDebrisEstimateRequestID_Accessor) || (orbitalDebrisEstimateRequestID_Accessor->getAccessorType() != requestedType)) {
    orbitalDebrisEstimateRequestID_Accessor = RequestID_Type::create(requestedType);
    if (!orbitalDebrisEstimateRequestID_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitalDebrisEstimateRequestID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalDebrisEstimateRequestID_Accessor;
}

uci::type::OrbitalDebrisEstimateMDT& OrbitalDebrisEstimateMDT::clearOrbitalDebrisEstimateRequestID() noexcept {
  orbitalDebrisEstimateRequestID_Accessor.reset();
  return *this;
}

const uci::type::OrbitBreakupEventDetailsType& OrbitalDebrisEstimateMDT::getCausalEvent() const {
  return *causalEvent_Accessor;
}

uci::type::OrbitBreakupEventDetailsType& OrbitalDebrisEstimateMDT::getCausalEvent() {
  return *causalEvent_Accessor;
}

uci::type::OrbitalDebrisEstimateMDT& OrbitalDebrisEstimateMDT::setCausalEvent(const uci::type::OrbitBreakupEventDetailsType& accessor) {
  if (&accessor != causalEvent_Accessor.get()) {
    causalEvent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitalDebrisEstimateType& OrbitalDebrisEstimateMDT::getEstimate() const {
  return *estimate_Accessor;
}

uci::type::OrbitalDebrisEstimateType& OrbitalDebrisEstimateMDT::getEstimate() {
  return *estimate_Accessor;
}

uci::type::OrbitalDebrisEstimateMDT& OrbitalDebrisEstimateMDT::setEstimate(const uci::type::OrbitalDebrisEstimateType& accessor) {
  if (&accessor != estimate_Accessor.get()) {
    estimate_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<OrbitalDebrisEstimateMDT> OrbitalDebrisEstimateMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalDebrisEstimateMDT : type};
  return (requestedType == uci::type::accessorType::orbitalDebrisEstimateMDT) ? boost::make_unique<OrbitalDebrisEstimateMDT>() : nullptr;
}

/**  */
namespace OrbitalDebrisEstimateMDT_Names {

constexpr const char* Extern_Type_Name{"OrbitalDebrisEstimateMDT"};
constexpr const char* OrbitalDebrisEstimateID_Name{"OrbitalDebrisEstimateID"};
constexpr const char* OrbitalDebrisEstimateRequestID_Name{"OrbitalDebrisEstimateRequestID"};
constexpr const char* CausalEvent_Name{"CausalEvent"};
constexpr const char* Estimate_Name{"Estimate"};

} // namespace OrbitalDebrisEstimateMDT_Names

void OrbitalDebrisEstimateMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalDebrisEstimateMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalDebrisEstimateMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalDebrisEstimateMDT_Names::OrbitalDebrisEstimateID_Name) {
      OrbitalDebrisEstimateID_Type::deserialize(valueType.second, accessor.getOrbitalDebrisEstimateID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalDebrisEstimateMDT_Names::OrbitalDebrisEstimateRequestID_Name) {
      RequestID_Type::deserialize(valueType.second, accessor.enableOrbitalDebrisEstimateRequestID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalDebrisEstimateMDT_Names::CausalEvent_Name) {
      OrbitBreakupEventDetailsType::deserialize(valueType.second, accessor.getCausalEvent(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalDebrisEstimateMDT_Names::Estimate_Name) {
      OrbitalDebrisEstimateType::deserialize(valueType.second, accessor.getEstimate(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalDebrisEstimateMDT::serialize(const uci::type::OrbitalDebrisEstimateMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalDebrisEstimateMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalDebrisEstimateMDT_Names::Extern_Type_Name);
  }
  OrbitalDebrisEstimateID_Type::serialize(accessor.getOrbitalDebrisEstimateID(), node, OrbitalDebrisEstimateMDT_Names::OrbitalDebrisEstimateID_Name);
  if (accessor.hasOrbitalDebrisEstimateRequestID()) {
    RequestID_Type::serialize(accessor.getOrbitalDebrisEstimateRequestID(), node, OrbitalDebrisEstimateMDT_Names::OrbitalDebrisEstimateRequestID_Name);
  }
  OrbitBreakupEventDetailsType::serialize(accessor.getCausalEvent(), node, OrbitalDebrisEstimateMDT_Names::CausalEvent_Name);
  OrbitalDebrisEstimateType::serialize(accessor.getEstimate(), node, OrbitalDebrisEstimateMDT_Names::Estimate_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalDebrisEstimateMDT& OrbitalDebrisEstimateMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalDebrisEstimateMDT>().release());
}

uci::type::OrbitalDebrisEstimateMDT& OrbitalDebrisEstimateMDT::create(const uci::type::OrbitalDebrisEstimateMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalDebrisEstimateMDT> newAccessor{boost::make_unique<asb_uci::type::OrbitalDebrisEstimateMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalDebrisEstimateMDT::destroy(uci::type::OrbitalDebrisEstimateMDT& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalDebrisEstimateMDT*>(&accessor);
}

} // namespace type

} // namespace uci

