/** @file RCS_MedianType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RCS_MedianType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PolarizationEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DoubleNonNegativeType.h"
#include "uci/type/FrequencyType.h"
#include "uci/type/PolarizationEnum.h"
#include "uci/type/RCS_MedianType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RCS_MedianType::RCS_MedianType()
  : receiverPolarization_Accessor{boost::make_unique<PolarizationEnum>()} {
}

RCS_MedianType::~RCS_MedianType() = default;

void RCS_MedianType::copy(const uci::type::RCS_MedianType& accessor) {
  copyImpl(accessor, false);
}

void RCS_MedianType::copyImpl(const uci::type::RCS_MedianType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RCS_MedianType&>(accessor);
    setRCS_Value(accessorImpl.rCS_Value_Accessor);
    setRCS_Variance(accessorImpl.rCS_Variance_Accessor);
    if (accessorImpl.hasSpectralWidth()) {
      setSpectralWidth(accessorImpl.getSpectralWidth());
    } else {
      clearSpectralWidth();
    }
    setReceiverPolarization(*(accessorImpl.receiverPolarization_Accessor));
    if (accessorImpl.transmitterPolarization_Accessor) {
      setTransmitterPolarization(*(accessorImpl.transmitterPolarization_Accessor));
    } else {
      transmitterPolarization_Accessor.reset();
    }
  }
}

void RCS_MedianType::reset() noexcept {
  rCS_Value_Accessor = 0.0;
  rCS_Variance_Accessor = 0.0;
  clearSpectralWidth();
  receiverPolarization_Accessor->reset();
  transmitterPolarization_Accessor.reset();
}

uci::type::DoubleNonNegativeTypeValue RCS_MedianType::getRCS_Value() const {
  return rCS_Value_Accessor;
}

uci::type::RCS_MedianType& RCS_MedianType::setRCS_Value(uci::type::DoubleNonNegativeTypeValue value) {
  rCS_Value_Accessor = value;
  return *this;
}


uci::type::DoubleNonNegativeTypeValue RCS_MedianType::getRCS_Variance() const {
  return rCS_Variance_Accessor;
}

uci::type::RCS_MedianType& RCS_MedianType::setRCS_Variance(uci::type::DoubleNonNegativeTypeValue value) {
  rCS_Variance_Accessor = value;
  return *this;
}


uci::type::FrequencyTypeValue RCS_MedianType::getSpectralWidth() const {
  if (spectralWidth_Accessor) {
    return *spectralWidth_Accessor;
  }
  throw uci::base::UCIException("Error in getSpectralWidth(): An attempt was made to get an optional field that was not enabled, call hasSpectralWidth() to determine if it is safe to call getSpectralWidth()");
}

uci::type::RCS_MedianType& RCS_MedianType::setSpectralWidth(uci::type::FrequencyTypeValue value) {
  spectralWidth_Accessor = value;
  return *this;
}

bool RCS_MedianType::hasSpectralWidth() const noexcept {
  return spectralWidth_Accessor.has_value();
}

uci::type::RCS_MedianType& RCS_MedianType::clearSpectralWidth() noexcept {
  spectralWidth_Accessor.reset();
  return *this;
}

const uci::type::PolarizationEnum& RCS_MedianType::getReceiverPolarization() const {
  return *receiverPolarization_Accessor;
}

uci::type::PolarizationEnum& RCS_MedianType::getReceiverPolarization() {
  return *receiverPolarization_Accessor;
}

uci::type::RCS_MedianType& RCS_MedianType::setReceiverPolarization(const uci::type::PolarizationEnum& accessor) {
  if (&accessor != receiverPolarization_Accessor.get()) {
    receiverPolarization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RCS_MedianType& RCS_MedianType::setReceiverPolarization(uci::type::PolarizationEnum::EnumerationItem value) {
  receiverPolarization_Accessor->setValue(value);
  return *this;
}


uci::type::PolarizationEnum& RCS_MedianType::getTransmitterPolarization_() const {
  if (transmitterPolarization_Accessor) {
    return *transmitterPolarization_Accessor;
  }
  throw uci::base::UCIException("Error in getTransmitterPolarization(): An attempt was made to get an optional field that was not enabled, call hasTransmitterPolarization() to determine if it is safe to call getTransmitterPolarization()");
}

const uci::type::PolarizationEnum& RCS_MedianType::getTransmitterPolarization() const {
  return getTransmitterPolarization_();
}

uci::type::PolarizationEnum& RCS_MedianType::getTransmitterPolarization() {
  return getTransmitterPolarization_();
}

uci::type::RCS_MedianType& RCS_MedianType::setTransmitterPolarization(const uci::type::PolarizationEnum& accessor) {
  enableTransmitterPolarization();
  if (&accessor != transmitterPolarization_Accessor.get()) {
    transmitterPolarization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RCS_MedianType& RCS_MedianType::setTransmitterPolarization(const uci::type::PolarizationEnum::EnumerationItem value) {
  enableTransmitterPolarization().setValue(value);
  return *this;
}

bool RCS_MedianType::hasTransmitterPolarization() const noexcept {
  return static_cast<bool>(transmitterPolarization_Accessor);
}

uci::type::PolarizationEnum& RCS_MedianType::enableTransmitterPolarization(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::polarizationEnum : type};
  if ((!transmitterPolarization_Accessor) || (transmitterPolarization_Accessor->getAccessorType() != requestedType)) {
    transmitterPolarization_Accessor = PolarizationEnum::create(requestedType);
    if (!transmitterPolarization_Accessor) {
      throw uci::base::UCIException("Error in enableTransmitterPolarization(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *transmitterPolarization_Accessor;
}

uci::type::RCS_MedianType& RCS_MedianType::clearTransmitterPolarization() noexcept {
  transmitterPolarization_Accessor.reset();
  return *this;
}

std::unique_ptr<RCS_MedianType> RCS_MedianType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rCS_MedianType : type};
  return (requestedType == uci::type::accessorType::rCS_MedianType) ? boost::make_unique<RCS_MedianType>() : nullptr;
}

/**  */
namespace RCS_MedianType_Names {

constexpr const char* Extern_Type_Name{"RCS_MedianType"};
constexpr const char* RCS_Value_Name{"RCS_Value"};
constexpr const char* RCS_Variance_Name{"RCS_Variance"};
constexpr const char* SpectralWidth_Name{"SpectralWidth"};
constexpr const char* ReceiverPolarization_Name{"ReceiverPolarization"};
constexpr const char* TransmitterPolarization_Name{"TransmitterPolarization"};

} // namespace RCS_MedianType_Names

void RCS_MedianType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RCS_MedianType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RCS_MedianType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RCS_MedianType_Names::RCS_Value_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRCS_Value(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RCS_MedianType_Names::RCS_Variance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRCS_Variance(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RCS_MedianType_Names::SpectralWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpectralWidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RCS_MedianType_Names::ReceiverPolarization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getReceiverPolarization().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RCS_MedianType_Names::TransmitterPolarization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTransmitterPolarization().setValueFromName(*value);
      }
    }
  }
}

std::string RCS_MedianType::serialize(const uci::type::RCS_MedianType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RCS_MedianType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RCS_MedianType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRCS_Value(), node, RCS_MedianType_Names::RCS_Value_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRCS_Variance(), node, RCS_MedianType_Names::RCS_Variance_Name);
  if (accessor.hasSpectralWidth()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSpectralWidth(), node, RCS_MedianType_Names::SpectralWidth_Name);
  }
  PolarizationEnum::serialize(accessor.getReceiverPolarization(), node, RCS_MedianType_Names::ReceiverPolarization_Name, false);
  if (accessor.hasTransmitterPolarization()) {
    PolarizationEnum::serialize(accessor.getTransmitterPolarization(), node, RCS_MedianType_Names::TransmitterPolarization_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RCS_MedianType& RCS_MedianType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RCS_MedianType>().release());
}

uci::type::RCS_MedianType& RCS_MedianType::create(const uci::type::RCS_MedianType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RCS_MedianType> newAccessor{boost::make_unique<asb_uci::type::RCS_MedianType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RCS_MedianType::destroy(uci::type::RCS_MedianType& accessor) {
  delete dynamic_cast<asb_uci::type::RCS_MedianType*>(&accessor);
}

} // namespace type

} // namespace uci

