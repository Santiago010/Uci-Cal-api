/** @file PO_ComponentSettingsOutputProductSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_ComponentSettingsOutputProductSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PO_ComponentSettingsProductSettingsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PO_ComponentSettingsOutputProductSettingsType.h"
#include "uci/type/PO_ComponentSettingsProductSettingsType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsOutputProductSettingsType::PO_ComponentSettingsOutputProductSettingsType() = default;

PO_ComponentSettingsOutputProductSettingsType::~PO_ComponentSettingsOutputProductSettingsType() = default;

void PO_ComponentSettingsOutputProductSettingsType::copy(const uci::type::PO_ComponentSettingsOutputProductSettingsType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsOutputProductSettingsType::copyImpl(const uci::type::PO_ComponentSettingsOutputProductSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsOutputProductSettingsType&>(accessor);
    if (accessorImpl.productSettings_Accessor) {
      setProductSettings(*(accessorImpl.productSettings_Accessor));
    } else {
      productSettings_Accessor.reset();
    }
    autoOutputProductSettings_Accessor = (accessorImpl.autoOutputProductSettings_Accessor ? accessorImpl.autoOutputProductSettings_Accessor : boost::none);
  }
}

void PO_ComponentSettingsOutputProductSettingsType::reset() noexcept {
  productSettings_Accessor.reset();
  autoOutputProductSettings_Accessor.reset();
}

uci::type::PO_ComponentSettingsOutputProductSettingsType::PO_ComponentSettingsOutputProductSettingsTypeChoice PO_ComponentSettingsOutputProductSettingsType::getPO_ComponentSettingsOutputProductSettingsTypeChoiceOrdinal() const noexcept {
  if (productSettings_Accessor) {
    return PO_COMPONENTSETTINGSOUTPUTPRODUCTSETTINGSTYPE_CHOICE_PRODUCTSETTINGS;
  }
  if (autoOutputProductSettings_Accessor) {
    return PO_COMPONENTSETTINGSOUTPUTPRODUCTSETTINGSTYPE_CHOICE_AUTOOUTPUTPRODUCTSETTINGS;
  }
  return PO_COMPONENTSETTINGSOUTPUTPRODUCTSETTINGSTYPE_CHOICE_NONE;
}

uci::type::PO_ComponentSettingsOutputProductSettingsType& PO_ComponentSettingsOutputProductSettingsType::setPO_ComponentSettingsOutputProductSettingsTypeChoiceOrdinal(uci::type::PO_ComponentSettingsOutputProductSettingsType::PO_ComponentSettingsOutputProductSettingsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PO_COMPONENTSETTINGSOUTPUTPRODUCTSETTINGSTYPE_CHOICE_PRODUCTSETTINGS:
      chooseProductSettings("setPO_ComponentSettingsOutputProductSettingsTypeChoiceOrdinal", type);
      break;
    case PO_COMPONENTSETTINGSOUTPUTPRODUCTSETTINGSTYPE_CHOICE_AUTOOUTPUTPRODUCTSETTINGS:
      chooseAutoOutputProductSettings();
      break;
    default:
      throw uci::base::UCIException("Error in setPO_ComponentSettingsOutputProductSettingsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsOutputProductSettingsType::getProductSettings_() const {
  if (productSettings_Accessor) {
    return *productSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getProductSettings(): Unable to get ProductSettings, field not selected");
}

const uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsOutputProductSettingsType::getProductSettings() const {
  return getProductSettings_();
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsOutputProductSettingsType::getProductSettings() {
  return getProductSettings_();
}

uci::type::PO_ComponentSettingsOutputProductSettingsType& PO_ComponentSettingsOutputProductSettingsType::setProductSettings(const uci::type::PO_ComponentSettingsProductSettingsType& accessor) {
  chooseProductSettings();
  if (&accessor != productSettings_Accessor.get()) {
    productSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsOutputProductSettingsType::isProductSettings() const noexcept {
  return static_cast<bool>(productSettings_Accessor);
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsOutputProductSettingsType::chooseProductSettings(const std::string& method, uci::base::accessorType::AccessorType type) {
  autoOutputProductSettings_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsProductSettingsType : type};
  if ((!productSettings_Accessor) || (productSettings_Accessor->getAccessorType() != requestedType)) {
    productSettings_Accessor = PO_ComponentSettingsProductSettingsType::create(type);
    if (!productSettings_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productSettings_Accessor;
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsOutputProductSettingsType::chooseProductSettings(uci::base::accessorType::AccessorType type) {
  return chooseProductSettings("chooseProductSettings", type);
}

xs::Boolean PO_ComponentSettingsOutputProductSettingsType::getAutoOutputProductSettings() const {
  if (autoOutputProductSettings_Accessor) {
    return *autoOutputProductSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getAutoOutputProductSettings(): Unable to get AutoOutputProductSettings, field not selected");
}

uci::type::PO_ComponentSettingsOutputProductSettingsType& PO_ComponentSettingsOutputProductSettingsType::setAutoOutputProductSettings(xs::Boolean value) {
  chooseAutoOutputProductSettings();
  autoOutputProductSettings_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsOutputProductSettingsType::isAutoOutputProductSettings() const noexcept {
  return static_cast<bool>(autoOutputProductSettings_Accessor);
}

void PO_ComponentSettingsOutputProductSettingsType::chooseAutoOutputProductSettings() {
  productSettings_Accessor.reset();
  if (!autoOutputProductSettings_Accessor) {
    autoOutputProductSettings_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

std::unique_ptr<PO_ComponentSettingsOutputProductSettingsType> PO_ComponentSettingsOutputProductSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsOutputProductSettingsType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsOutputProductSettingsType) ? boost::make_unique<PO_ComponentSettingsOutputProductSettingsType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsOutputProductSettingsType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsOutputProductSettingsType"};
constexpr const char* ProductSettings_Name{"ProductSettings"};
constexpr const char* AutoOutputProductSettings_Name{"AutoOutputProductSettings"};

} // namespace PO_ComponentSettingsOutputProductSettingsType_Names

void PO_ComponentSettingsOutputProductSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsOutputProductSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsOutputProductSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsOutputProductSettingsType_Names::ProductSettings_Name) {
      PO_ComponentSettingsProductSettingsType::deserialize(valueType.second, accessor.chooseProductSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsOutputProductSettingsType_Names::AutoOutputProductSettings_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAutoOutputProductSettings(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string PO_ComponentSettingsOutputProductSettingsType::serialize(const uci::type::PO_ComponentSettingsOutputProductSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsOutputProductSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsOutputProductSettingsType_Names::Extern_Type_Name);
  }
  if (accessor.isProductSettings()) {
    PO_ComponentSettingsProductSettingsType::serialize(accessor.getProductSettings(), node, PO_ComponentSettingsOutputProductSettingsType_Names::ProductSettings_Name);
  } else if (accessor.isAutoOutputProductSettings()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAutoOutputProductSettings(), node, PO_ComponentSettingsOutputProductSettingsType_Names::AutoOutputProductSettings_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsOutputProductSettingsType& PO_ComponentSettingsOutputProductSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsOutputProductSettingsType>().release());
}

uci::type::PO_ComponentSettingsOutputProductSettingsType& PO_ComponentSettingsOutputProductSettingsType::create(const uci::type::PO_ComponentSettingsOutputProductSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsOutputProductSettingsType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsOutputProductSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsOutputProductSettingsType::destroy(uci::type::PO_ComponentSettingsOutputProductSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsOutputProductSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

