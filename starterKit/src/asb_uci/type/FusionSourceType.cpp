/** @file FusionSourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/FusionSourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntitySourceEnum.h"
#include "asb_uci/type/FusionUpdatesEnum.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EntitySourceEnum.h"
#include "uci/type/FusionSourceType.h"
#include "uci/type/FusionUpdatesEnum.h"
#include "uci/type/SystemID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FusionSourceType::FusionSourceType()
  : sourceType_Accessor{boost::make_unique<EntitySourceEnum>()},
    allowedUpdates_Accessor{boost::make_unique<FusionUpdatesEnum>()} {
}

FusionSourceType::~FusionSourceType() = default;

void FusionSourceType::copy(const uci::type::FusionSourceType& accessor) {
  copyImpl(accessor, false);
}

void FusionSourceType::copyImpl(const uci::type::FusionSourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const FusionSourceType&>(accessor);
    setSourceType(*(accessorImpl.sourceType_Accessor));
    if (accessorImpl.sourceSystemID_Accessor) {
      setSourceSystemID(*(accessorImpl.sourceSystemID_Accessor));
    } else {
      sourceSystemID_Accessor.reset();
    }
    setEnabled(accessorImpl.enabled_Accessor);
    setAllowedUpdates(*(accessorImpl.allowedUpdates_Accessor));
    setInitiateAllowed(accessorImpl.initiateAllowed_Accessor);
  }
}

void FusionSourceType::reset() noexcept {
  sourceType_Accessor->reset();
  sourceSystemID_Accessor.reset();
  enabled_Accessor = false;
  allowedUpdates_Accessor->reset();
  initiateAllowed_Accessor = false;
}

const uci::type::EntitySourceEnum& FusionSourceType::getSourceType() const {
  return *sourceType_Accessor;
}

uci::type::EntitySourceEnum& FusionSourceType::getSourceType() {
  return *sourceType_Accessor;
}

uci::type::FusionSourceType& FusionSourceType::setSourceType(const uci::type::EntitySourceEnum& accessor) {
  if (&accessor != sourceType_Accessor.get()) {
    sourceType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FusionSourceType& FusionSourceType::setSourceType(uci::type::EntitySourceEnum::EnumerationItem value) {
  sourceType_Accessor->setValue(value);
  return *this;
}


uci::type::SystemID_Type& FusionSourceType::getSourceSystemID_() const {
  if (sourceSystemID_Accessor) {
    return *sourceSystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceSystemID(): An attempt was made to get an optional field that was not enabled, call hasSourceSystemID() to determine if it is safe to call getSourceSystemID()");
}

const uci::type::SystemID_Type& FusionSourceType::getSourceSystemID() const {
  return getSourceSystemID_();
}

uci::type::SystemID_Type& FusionSourceType::getSourceSystemID() {
  return getSourceSystemID_();
}

uci::type::FusionSourceType& FusionSourceType::setSourceSystemID(const uci::type::SystemID_Type& accessor) {
  enableSourceSystemID();
  if (&accessor != sourceSystemID_Accessor.get()) {
    sourceSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FusionSourceType::hasSourceSystemID() const noexcept {
  return static_cast<bool>(sourceSystemID_Accessor);
}

uci::type::SystemID_Type& FusionSourceType::enableSourceSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!sourceSystemID_Accessor) || (sourceSystemID_Accessor->getAccessorType() != requestedType)) {
    sourceSystemID_Accessor = SystemID_Type::create(requestedType);
    if (!sourceSystemID_Accessor) {
      throw uci::base::UCIException("Error in enableSourceSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceSystemID_Accessor;
}

uci::type::FusionSourceType& FusionSourceType::clearSourceSystemID() noexcept {
  sourceSystemID_Accessor.reset();
  return *this;
}

xs::Boolean FusionSourceType::getEnabled() const {
  return enabled_Accessor;
}

uci::type::FusionSourceType& FusionSourceType::setEnabled(xs::Boolean value) {
  enabled_Accessor = value;
  return *this;
}


const uci::type::FusionUpdatesEnum& FusionSourceType::getAllowedUpdates() const {
  return *allowedUpdates_Accessor;
}

uci::type::FusionUpdatesEnum& FusionSourceType::getAllowedUpdates() {
  return *allowedUpdates_Accessor;
}

uci::type::FusionSourceType& FusionSourceType::setAllowedUpdates(const uci::type::FusionUpdatesEnum& accessor) {
  if (&accessor != allowedUpdates_Accessor.get()) {
    allowedUpdates_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FusionSourceType& FusionSourceType::setAllowedUpdates(uci::type::FusionUpdatesEnum::EnumerationItem value) {
  allowedUpdates_Accessor->setValue(value);
  return *this;
}


xs::Boolean FusionSourceType::getInitiateAllowed() const {
  return initiateAllowed_Accessor;
}

uci::type::FusionSourceType& FusionSourceType::setInitiateAllowed(xs::Boolean value) {
  initiateAllowed_Accessor = value;
  return *this;
}


std::unique_ptr<FusionSourceType> FusionSourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fusionSourceType : type};
  return (requestedType == uci::type::accessorType::fusionSourceType) ? boost::make_unique<FusionSourceType>() : nullptr;
}

/**  */
namespace FusionSourceType_Names {

constexpr const char* Extern_Type_Name{"FusionSourceType"};
constexpr const char* SourceType_Name{"SourceType"};
constexpr const char* SourceSystemID_Name{"SourceSystemID"};
constexpr const char* Enabled_Name{"Enabled"};
constexpr const char* AllowedUpdates_Name{"AllowedUpdates"};
constexpr const char* InitiateAllowed_Name{"InitiateAllowed"};

} // namespace FusionSourceType_Names

void FusionSourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FusionSourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FusionSourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FusionSourceType_Names::SourceType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSourceType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FusionSourceType_Names::SourceSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSourceSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FusionSourceType_Names::Enabled_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEnabled(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + FusionSourceType_Names::AllowedUpdates_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAllowedUpdates().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FusionSourceType_Names::InitiateAllowed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInitiateAllowed(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string FusionSourceType::serialize(const uci::type::FusionSourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FusionSourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FusionSourceType_Names::Extern_Type_Name);
  }
  EntitySourceEnum::serialize(accessor.getSourceType(), node, FusionSourceType_Names::SourceType_Name, false);
  if (accessor.hasSourceSystemID()) {
    SystemID_Type::serialize(accessor.getSourceSystemID(), node, FusionSourceType_Names::SourceSystemID_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getEnabled(), node, FusionSourceType_Names::Enabled_Name);
  FusionUpdatesEnum::serialize(accessor.getAllowedUpdates(), node, FusionSourceType_Names::AllowedUpdates_Name, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInitiateAllowed(), node, FusionSourceType_Names::InitiateAllowed_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FusionSourceType& FusionSourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FusionSourceType>().release());
}

uci::type::FusionSourceType& FusionSourceType::create(const uci::type::FusionSourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FusionSourceType> newAccessor{boost::make_unique<asb_uci::type::FusionSourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FusionSourceType::destroy(uci::type::FusionSourceType& accessor) {
  delete dynamic_cast<asb_uci::type::FusionSourceType*>(&accessor);
}

} // namespace type

} // namespace uci

