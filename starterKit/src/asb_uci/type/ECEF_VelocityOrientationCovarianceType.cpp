/** @file ECEF_VelocityOrientationCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ECEF_VelocityOrientationCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_VelocityOrientationCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ECEF_VelocityOrientationCovarianceType::ECEF_VelocityOrientationCovarianceType() = default;

ECEF_VelocityOrientationCovarianceType::~ECEF_VelocityOrientationCovarianceType() = default;

void ECEF_VelocityOrientationCovarianceType::copy(const uci::type::ECEF_VelocityOrientationCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void ECEF_VelocityOrientationCovarianceType::copyImpl(const uci::type::ECEF_VelocityOrientationCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ECEF_VelocityOrientationCovarianceType&>(accessor);
    setVxRr(accessorImpl.vxRr_Accessor);
    setVxRp(accessorImpl.vxRp_Accessor);
    setVxRy(accessorImpl.vxRy_Accessor);
    setVyRr(accessorImpl.vyRr_Accessor);
    setVyRp(accessorImpl.vyRp_Accessor);
    setVyRy(accessorImpl.vyRy_Accessor);
    setVzRr(accessorImpl.vzRr_Accessor);
    setVzRp(accessorImpl.vzRp_Accessor);
    setVzRy(accessorImpl.vzRy_Accessor);
  }
}

void ECEF_VelocityOrientationCovarianceType::reset() noexcept {
  vxRr_Accessor = 0.0;
  vxRp_Accessor = 0.0;
  vxRy_Accessor = 0.0;
  vyRr_Accessor = 0.0;
  vyRp_Accessor = 0.0;
  vyRy_Accessor = 0.0;
  vzRr_Accessor = 0.0;
  vzRp_Accessor = 0.0;
  vzRy_Accessor = 0.0;
}

xs::Double ECEF_VelocityOrientationCovarianceType::getVxRr() const {
  return vxRr_Accessor;
}

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_VelocityOrientationCovarianceType::setVxRr(xs::Double value) {
  vxRr_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityOrientationCovarianceType::getVxRp() const {
  return vxRp_Accessor;
}

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_VelocityOrientationCovarianceType::setVxRp(xs::Double value) {
  vxRp_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityOrientationCovarianceType::getVxRy() const {
  return vxRy_Accessor;
}

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_VelocityOrientationCovarianceType::setVxRy(xs::Double value) {
  vxRy_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityOrientationCovarianceType::getVyRr() const {
  return vyRr_Accessor;
}

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_VelocityOrientationCovarianceType::setVyRr(xs::Double value) {
  vyRr_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityOrientationCovarianceType::getVyRp() const {
  return vyRp_Accessor;
}

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_VelocityOrientationCovarianceType::setVyRp(xs::Double value) {
  vyRp_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityOrientationCovarianceType::getVyRy() const {
  return vyRy_Accessor;
}

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_VelocityOrientationCovarianceType::setVyRy(xs::Double value) {
  vyRy_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityOrientationCovarianceType::getVzRr() const {
  return vzRr_Accessor;
}

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_VelocityOrientationCovarianceType::setVzRr(xs::Double value) {
  vzRr_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityOrientationCovarianceType::getVzRp() const {
  return vzRp_Accessor;
}

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_VelocityOrientationCovarianceType::setVzRp(xs::Double value) {
  vzRp_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityOrientationCovarianceType::getVzRy() const {
  return vzRy_Accessor;
}

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_VelocityOrientationCovarianceType::setVzRy(xs::Double value) {
  vzRy_Accessor = value;
  return *this;
}


std::unique_ptr<ECEF_VelocityOrientationCovarianceType> ECEF_VelocityOrientationCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_VelocityOrientationCovarianceType : type};
  return (requestedType == uci::type::accessorType::eCEF_VelocityOrientationCovarianceType) ? boost::make_unique<ECEF_VelocityOrientationCovarianceType>() : nullptr;
}

/**  */
namespace ECEF_VelocityOrientationCovarianceType_Names {

constexpr const char* Extern_Type_Name{"ECEF_VelocityOrientationCovarianceType"};
constexpr const char* VxRr_Name{"VxRr"};
constexpr const char* VxRp_Name{"VxRp"};
constexpr const char* VxRy_Name{"VxRy"};
constexpr const char* VyRr_Name{"VyRr"};
constexpr const char* VyRp_Name{"VyRp"};
constexpr const char* VyRy_Name{"VyRy"};
constexpr const char* VzRr_Name{"VzRr"};
constexpr const char* VzRp_Name{"VzRp"};
constexpr const char* VzRy_Name{"VzRy"};

} // namespace ECEF_VelocityOrientationCovarianceType_Names

void ECEF_VelocityOrientationCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ECEF_VelocityOrientationCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ECEF_VelocityOrientationCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ECEF_VelocityOrientationCovarianceType_Names::VxRr_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVxRr(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityOrientationCovarianceType_Names::VxRp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVxRp(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityOrientationCovarianceType_Names::VxRy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVxRy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityOrientationCovarianceType_Names::VyRr_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVyRr(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityOrientationCovarianceType_Names::VyRp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVyRp(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityOrientationCovarianceType_Names::VyRy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVyRy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityOrientationCovarianceType_Names::VzRr_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVzRr(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityOrientationCovarianceType_Names::VzRp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVzRp(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityOrientationCovarianceType_Names::VzRy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVzRy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string ECEF_VelocityOrientationCovarianceType::serialize(const uci::type::ECEF_VelocityOrientationCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ECEF_VelocityOrientationCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ECEF_VelocityOrientationCovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVxRr(), node, ECEF_VelocityOrientationCovarianceType_Names::VxRr_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVxRp(), node, ECEF_VelocityOrientationCovarianceType_Names::VxRp_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVxRy(), node, ECEF_VelocityOrientationCovarianceType_Names::VxRy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVyRr(), node, ECEF_VelocityOrientationCovarianceType_Names::VyRr_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVyRp(), node, ECEF_VelocityOrientationCovarianceType_Names::VyRp_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVyRy(), node, ECEF_VelocityOrientationCovarianceType_Names::VyRy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVzRr(), node, ECEF_VelocityOrientationCovarianceType_Names::VzRr_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVzRp(), node, ECEF_VelocityOrientationCovarianceType_Names::VzRp_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVzRy(), node, ECEF_VelocityOrientationCovarianceType_Names::VzRy_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_VelocityOrientationCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ECEF_VelocityOrientationCovarianceType>().release());
}

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_VelocityOrientationCovarianceType::create(const uci::type::ECEF_VelocityOrientationCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ECEF_VelocityOrientationCovarianceType> newAccessor{boost::make_unique<asb_uci::type::ECEF_VelocityOrientationCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ECEF_VelocityOrientationCovarianceType::destroy(uci::type::ECEF_VelocityOrientationCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::ECEF_VelocityOrientationCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

