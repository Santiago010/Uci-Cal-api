/** @file PlannedGatewayConfigurationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlannedGatewayConfigurationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityID_Type.h"
#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/CommConfigurationID_Type.h"
#include "asb_uci/type/CommConfigurationStateEnum.h"
#include "asb_uci/type/CommProfileID_Type.h"
#include "asb_uci/type/GatewayConfigurationPET.h"
#include "asb_uci/type/GatewayLinkDestinationType.h"
#include "asb_uci/type/MDF_CommandType.h"
#include "asb_uci/type/MessageConfigurationType.h"
#include "asb_uci/type/ProductDisseminationDestinationID_Type.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityID_Type.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/CommConfigurationID_Type.h"
#include "uci/type/CommConfigurationStateEnum.h"
#include "uci/type/CommProfileID_Type.h"
#include "uci/type/GatewayConfigurationPET.h"
#include "uci/type/GatewayLinkDestinationType.h"
#include "uci/type/MDF_CommandType.h"
#include "uci/type/MessageConfigurationType.h"
#include "uci/type/PlannedGatewayConfigurationType.h"
#include "uci/type/ProductDisseminationDestinationID_Type.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlannedGatewayConfigurationType::PlannedGatewayConfigurationType()
  : gatewayServiceID_Accessor{boost::make_unique<GatewayServiceID>(1, SIZE_MAX)},
    configurationID_Accessor{boost::make_unique<CommConfigurationID_Type>()},
    configurationState_Accessor{boost::make_unique<CommConfigurationStateEnum>()},
    gatewayLinkDestination_Accessor{boost::make_unique<GatewayLinkDestination>(0, SIZE_MAX)},
    messageConfiguration_Accessor{boost::make_unique<MessageConfiguration>(0, SIZE_MAX)},
    productDisseminationIngressSystemID_Accessor{boost::make_unique<ProductDisseminationIngressSystemID>(0, SIZE_MAX)},
    productDisseminationEgressDestinationID_Accessor{boost::make_unique<ProductDisseminationEgressDestinationID>(0, SIZE_MAX)} {
}

PlannedGatewayConfigurationType::~PlannedGatewayConfigurationType() = default;

void PlannedGatewayConfigurationType::copy(const uci::type::PlannedGatewayConfigurationType& accessor) {
  copyImpl(accessor, false);
}

void PlannedGatewayConfigurationType::copyImpl(const uci::type::PlannedGatewayConfigurationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlannedGatewayConfigurationType&>(accessor);
    setGatewayServiceID(*(accessorImpl.gatewayServiceID_Accessor));
    setConfigurationID(*(accessorImpl.configurationID_Accessor));
    setConfigurationState(*(accessorImpl.configurationState_Accessor));
    if (accessorImpl.activateMDF_Accessor) {
      setActivateMDF(*(accessorImpl.activateMDF_Accessor));
    } else {
      activateMDF_Accessor.reset();
    }
    if (accessorImpl.activateProfileID_Accessor) {
      setActivateProfileID(*(accessorImpl.activateProfileID_Accessor));
    } else {
      activateProfileID_Accessor.reset();
    }
    if (accessorImpl.gatewayCapabilityID_Accessor) {
      setGatewayCapabilityID(*(accessorImpl.gatewayCapabilityID_Accessor));
    } else {
      gatewayCapabilityID_Accessor.reset();
    }
    if (accessorImpl.gatewayActivityID_Accessor) {
      setGatewayActivityID(*(accessorImpl.gatewayActivityID_Accessor));
    } else {
      gatewayActivityID_Accessor.reset();
    }
    setGatewayLinkDestination(*(accessorImpl.gatewayLinkDestination_Accessor));
    setMessageConfiguration(*(accessorImpl.messageConfiguration_Accessor));
    setProductDisseminationIngressSystemID(*(accessorImpl.productDisseminationIngressSystemID_Accessor));
    setProductDisseminationEgressDestinationID(*(accessorImpl.productDisseminationEgressDestinationID_Accessor));
    if (accessorImpl.gatewaySpecificSettings_Accessor) {
      setGatewaySpecificSettings(*(accessorImpl.gatewaySpecificSettings_Accessor));
    } else {
      gatewaySpecificSettings_Accessor.reset();
    }
  }
}

void PlannedGatewayConfigurationType::reset() noexcept {
  gatewayServiceID_Accessor->reset();
  configurationID_Accessor->reset();
  configurationState_Accessor->reset();
  activateMDF_Accessor.reset();
  activateProfileID_Accessor.reset();
  gatewayCapabilityID_Accessor.reset();
  gatewayActivityID_Accessor.reset();
  gatewayLinkDestination_Accessor->reset();
  messageConfiguration_Accessor->reset();
  productDisseminationIngressSystemID_Accessor->reset();
  productDisseminationEgressDestinationID_Accessor->reset();
  gatewaySpecificSettings_Accessor.reset();
}

const uci::type::PlannedGatewayConfigurationType::GatewayServiceID& PlannedGatewayConfigurationType::getGatewayServiceID() const {
  return *gatewayServiceID_Accessor;
}

uci::type::PlannedGatewayConfigurationType::GatewayServiceID& PlannedGatewayConfigurationType::getGatewayServiceID() {
  return *gatewayServiceID_Accessor;
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::setGatewayServiceID(const uci::type::PlannedGatewayConfigurationType::GatewayServiceID& accessor) {
  if (&accessor != gatewayServiceID_Accessor.get()) {
    gatewayServiceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommConfigurationID_Type& PlannedGatewayConfigurationType::getConfigurationID() const {
  return *configurationID_Accessor;
}

uci::type::CommConfigurationID_Type& PlannedGatewayConfigurationType::getConfigurationID() {
  return *configurationID_Accessor;
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::setConfigurationID(const uci::type::CommConfigurationID_Type& accessor) {
  if (&accessor != configurationID_Accessor.get()) {
    configurationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommConfigurationStateEnum& PlannedGatewayConfigurationType::getConfigurationState() const {
  return *configurationState_Accessor;
}

uci::type::CommConfigurationStateEnum& PlannedGatewayConfigurationType::getConfigurationState() {
  return *configurationState_Accessor;
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::setConfigurationState(const uci::type::CommConfigurationStateEnum& accessor) {
  if (&accessor != configurationState_Accessor.get()) {
    configurationState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::setConfigurationState(uci::type::CommConfigurationStateEnum::EnumerationItem value) {
  configurationState_Accessor->setValue(value);
  return *this;
}


uci::type::MDF_CommandType& PlannedGatewayConfigurationType::getActivateMDF_() const {
  if (activateMDF_Accessor) {
    return *activateMDF_Accessor;
  }
  throw uci::base::UCIException("Error in getActivateMDF(): An attempt was made to get an optional field that was not enabled, call hasActivateMDF() to determine if it is safe to call getActivateMDF()");
}

const uci::type::MDF_CommandType& PlannedGatewayConfigurationType::getActivateMDF() const {
  return getActivateMDF_();
}

uci::type::MDF_CommandType& PlannedGatewayConfigurationType::getActivateMDF() {
  return getActivateMDF_();
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::setActivateMDF(const uci::type::MDF_CommandType& accessor) {
  enableActivateMDF();
  if (&accessor != activateMDF_Accessor.get()) {
    activateMDF_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlannedGatewayConfigurationType::hasActivateMDF() const noexcept {
  return static_cast<bool>(activateMDF_Accessor);
}

uci::type::MDF_CommandType& PlannedGatewayConfigurationType::enableActivateMDF(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mDF_CommandType : type};
  if ((!activateMDF_Accessor) || (activateMDF_Accessor->getAccessorType() != requestedType)) {
    activateMDF_Accessor = MDF_CommandType::create(requestedType);
    if (!activateMDF_Accessor) {
      throw uci::base::UCIException("Error in enableActivateMDF(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activateMDF_Accessor;
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::clearActivateMDF() noexcept {
  activateMDF_Accessor.reset();
  return *this;
}

uci::type::CommProfileID_Type& PlannedGatewayConfigurationType::getActivateProfileID_() const {
  if (activateProfileID_Accessor) {
    return *activateProfileID_Accessor;
  }
  throw uci::base::UCIException("Error in getActivateProfileID(): An attempt was made to get an optional field that was not enabled, call hasActivateProfileID() to determine if it is safe to call getActivateProfileID()");
}

const uci::type::CommProfileID_Type& PlannedGatewayConfigurationType::getActivateProfileID() const {
  return getActivateProfileID_();
}

uci::type::CommProfileID_Type& PlannedGatewayConfigurationType::getActivateProfileID() {
  return getActivateProfileID_();
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::setActivateProfileID(const uci::type::CommProfileID_Type& accessor) {
  enableActivateProfileID();
  if (&accessor != activateProfileID_Accessor.get()) {
    activateProfileID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlannedGatewayConfigurationType::hasActivateProfileID() const noexcept {
  return static_cast<bool>(activateProfileID_Accessor);
}

uci::type::CommProfileID_Type& PlannedGatewayConfigurationType::enableActivateProfileID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commProfileID_Type : type};
  if ((!activateProfileID_Accessor) || (activateProfileID_Accessor->getAccessorType() != requestedType)) {
    activateProfileID_Accessor = CommProfileID_Type::create(requestedType);
    if (!activateProfileID_Accessor) {
      throw uci::base::UCIException("Error in enableActivateProfileID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activateProfileID_Accessor;
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::clearActivateProfileID() noexcept {
  activateProfileID_Accessor.reset();
  return *this;
}

uci::type::CapabilityID_Type& PlannedGatewayConfigurationType::getGatewayCapabilityID_() const {
  if (gatewayCapabilityID_Accessor) {
    return *gatewayCapabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getGatewayCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasGatewayCapabilityID() to determine if it is safe to call getGatewayCapabilityID()");
}

const uci::type::CapabilityID_Type& PlannedGatewayConfigurationType::getGatewayCapabilityID() const {
  return getGatewayCapabilityID_();
}

uci::type::CapabilityID_Type& PlannedGatewayConfigurationType::getGatewayCapabilityID() {
  return getGatewayCapabilityID_();
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::setGatewayCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableGatewayCapabilityID();
  if (&accessor != gatewayCapabilityID_Accessor.get()) {
    gatewayCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlannedGatewayConfigurationType::hasGatewayCapabilityID() const noexcept {
  return static_cast<bool>(gatewayCapabilityID_Accessor);
}

uci::type::CapabilityID_Type& PlannedGatewayConfigurationType::enableGatewayCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!gatewayCapabilityID_Accessor) || (gatewayCapabilityID_Accessor->getAccessorType() != requestedType)) {
    gatewayCapabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!gatewayCapabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableGatewayCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *gatewayCapabilityID_Accessor;
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::clearGatewayCapabilityID() noexcept {
  gatewayCapabilityID_Accessor.reset();
  return *this;
}

uci::type::ActivityID_Type& PlannedGatewayConfigurationType::getGatewayActivityID_() const {
  if (gatewayActivityID_Accessor) {
    return *gatewayActivityID_Accessor;
  }
  throw uci::base::UCIException("Error in getGatewayActivityID(): An attempt was made to get an optional field that was not enabled, call hasGatewayActivityID() to determine if it is safe to call getGatewayActivityID()");
}

const uci::type::ActivityID_Type& PlannedGatewayConfigurationType::getGatewayActivityID() const {
  return getGatewayActivityID_();
}

uci::type::ActivityID_Type& PlannedGatewayConfigurationType::getGatewayActivityID() {
  return getGatewayActivityID_();
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::setGatewayActivityID(const uci::type::ActivityID_Type& accessor) {
  enableGatewayActivityID();
  if (&accessor != gatewayActivityID_Accessor.get()) {
    gatewayActivityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlannedGatewayConfigurationType::hasGatewayActivityID() const noexcept {
  return static_cast<bool>(gatewayActivityID_Accessor);
}

uci::type::ActivityID_Type& PlannedGatewayConfigurationType::enableGatewayActivityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityID_Type : type};
  if ((!gatewayActivityID_Accessor) || (gatewayActivityID_Accessor->getAccessorType() != requestedType)) {
    gatewayActivityID_Accessor = ActivityID_Type::create(requestedType);
    if (!gatewayActivityID_Accessor) {
      throw uci::base::UCIException("Error in enableGatewayActivityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *gatewayActivityID_Accessor;
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::clearGatewayActivityID() noexcept {
  gatewayActivityID_Accessor.reset();
  return *this;
}

const uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination& PlannedGatewayConfigurationType::getGatewayLinkDestination() const {
  return *gatewayLinkDestination_Accessor;
}

uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination& PlannedGatewayConfigurationType::getGatewayLinkDestination() {
  return *gatewayLinkDestination_Accessor;
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::setGatewayLinkDestination(const uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination& accessor) {
  if (&accessor != gatewayLinkDestination_Accessor.get()) {
    gatewayLinkDestination_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlannedGatewayConfigurationType::MessageConfiguration& PlannedGatewayConfigurationType::getMessageConfiguration() const {
  return *messageConfiguration_Accessor;
}

uci::type::PlannedGatewayConfigurationType::MessageConfiguration& PlannedGatewayConfigurationType::getMessageConfiguration() {
  return *messageConfiguration_Accessor;
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::setMessageConfiguration(const uci::type::PlannedGatewayConfigurationType::MessageConfiguration& accessor) {
  if (&accessor != messageConfiguration_Accessor.get()) {
    messageConfiguration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID& PlannedGatewayConfigurationType::getProductDisseminationIngressSystemID() const {
  return *productDisseminationIngressSystemID_Accessor;
}

uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID& PlannedGatewayConfigurationType::getProductDisseminationIngressSystemID() {
  return *productDisseminationIngressSystemID_Accessor;
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::setProductDisseminationIngressSystemID(const uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID& accessor) {
  if (&accessor != productDisseminationIngressSystemID_Accessor.get()) {
    productDisseminationIngressSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID& PlannedGatewayConfigurationType::getProductDisseminationEgressDestinationID() const {
  return *productDisseminationEgressDestinationID_Accessor;
}

uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID& PlannedGatewayConfigurationType::getProductDisseminationEgressDestinationID() {
  return *productDisseminationEgressDestinationID_Accessor;
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::setProductDisseminationEgressDestinationID(const uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID& accessor) {
  if (&accessor != productDisseminationEgressDestinationID_Accessor.get()) {
    productDisseminationEgressDestinationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::GatewayConfigurationPET& PlannedGatewayConfigurationType::getGatewaySpecificSettings_() const {
  if (gatewaySpecificSettings_Accessor) {
    return *gatewaySpecificSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getGatewaySpecificSettings(): An attempt was made to get an optional field that was not enabled, call hasGatewaySpecificSettings() to determine if it is safe to call getGatewaySpecificSettings()");
}

const uci::type::GatewayConfigurationPET& PlannedGatewayConfigurationType::getGatewaySpecificSettings() const {
  return getGatewaySpecificSettings_();
}

uci::type::GatewayConfigurationPET& PlannedGatewayConfigurationType::getGatewaySpecificSettings() {
  return getGatewaySpecificSettings_();
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::setGatewaySpecificSettings(const uci::type::GatewayConfigurationPET& accessor) {
  enableGatewaySpecificSettings(accessor.getAccessorType());
  if (&accessor != gatewaySpecificSettings_Accessor.get()) {
    gatewaySpecificSettings_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PlannedGatewayConfigurationType::hasGatewaySpecificSettings() const noexcept {
  return static_cast<bool>(gatewaySpecificSettings_Accessor);
}

uci::type::GatewayConfigurationPET& PlannedGatewayConfigurationType::enableGatewaySpecificSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayConfigurationPET : type};
  if ((!gatewaySpecificSettings_Accessor) || (gatewaySpecificSettings_Accessor->getAccessorType() != requestedType)) {
    gatewaySpecificSettings_Accessor = GatewayConfigurationPET::create(requestedType);
    if (!gatewaySpecificSettings_Accessor) {
      throw uci::base::UCIException("Error in enableGatewaySpecificSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *gatewaySpecificSettings_Accessor;
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::clearGatewaySpecificSettings() noexcept {
  gatewaySpecificSettings_Accessor.reset();
  return *this;
}

std::unique_ptr<PlannedGatewayConfigurationType> PlannedGatewayConfigurationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::plannedGatewayConfigurationType : type};
  return (requestedType == uci::type::accessorType::plannedGatewayConfigurationType) ? boost::make_unique<PlannedGatewayConfigurationType>() : nullptr;
}

/**  */
namespace PlannedGatewayConfigurationType_Names {

constexpr const char* Extern_Type_Name{"PlannedGatewayConfigurationType"};
constexpr const char* GatewayServiceID_Name{"GatewayServiceID"};
constexpr const char* ConfigurationID_Name{"ConfigurationID"};
constexpr const char* ConfigurationState_Name{"ConfigurationState"};
constexpr const char* ActivateMDF_Name{"ActivateMDF"};
constexpr const char* ActivateProfileID_Name{"ActivateProfileID"};
constexpr const char* GatewayCapabilityID_Name{"GatewayCapabilityID"};
constexpr const char* GatewayActivityID_Name{"GatewayActivityID"};
constexpr const char* GatewayLinkDestination_Name{"GatewayLinkDestination"};
constexpr const char* MessageConfiguration_Name{"MessageConfiguration"};
constexpr const char* ProductDisseminationIngressSystemID_Name{"ProductDisseminationIngressSystemID"};
constexpr const char* ProductDisseminationEgressDestinationID_Name{"ProductDisseminationEgressDestinationID"};
constexpr const char* GatewaySpecificSettings_Name{"GatewaySpecificSettings"};

} // namespace PlannedGatewayConfigurationType_Names

void PlannedGatewayConfigurationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlannedGatewayConfigurationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlannedGatewayConfigurationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::GatewayServiceID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlannedGatewayConfigurationType::GatewayServiceID& boundedList = accessor.getGatewayServiceID();
        const uci::type::PlannedGatewayConfigurationType::GatewayServiceID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ServiceID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::ConfigurationID_Name) {
      CommConfigurationID_Type::deserialize(valueType.second, accessor.getConfigurationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::ConfigurationState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getConfigurationState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::ActivateMDF_Name) {
      MDF_CommandType::deserialize(valueType.second, accessor.enableActivateMDF(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::ActivateProfileID_Name) {
      CommProfileID_Type::deserialize(valueType.second, accessor.enableActivateProfileID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::GatewayCapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableGatewayCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::GatewayActivityID_Name) {
      ActivityID_Type::deserialize(valueType.second, accessor.enableGatewayActivityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::GatewayLinkDestination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination& boundedList = accessor.getGatewayLinkDestination();
        const uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::GatewayLinkDestinationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::MessageConfiguration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlannedGatewayConfigurationType::MessageConfiguration& boundedList = accessor.getMessageConfiguration();
        const uci::type::PlannedGatewayConfigurationType::MessageConfiguration::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MessageConfigurationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::ProductDisseminationIngressSystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID& boundedList = accessor.getProductDisseminationIngressSystemID();
        const uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::ProductDisseminationEgressDestinationID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID& boundedList = accessor.getProductDisseminationEgressDestinationID();
        const uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProductDisseminationDestinationID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::GatewaySpecificSettings_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableGatewaySpecificSettings(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string PlannedGatewayConfigurationType::serialize(const uci::type::PlannedGatewayConfigurationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlannedGatewayConfigurationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlannedGatewayConfigurationType_Names::Extern_Type_Name);
  }
  {
    const uci::type::PlannedGatewayConfigurationType::GatewayServiceID& boundedList = accessor.getGatewayServiceID();
    for (uci::type::PlannedGatewayConfigurationType::GatewayServiceID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ServiceID_Type::serialize(boundedList.at(i), node, PlannedGatewayConfigurationType_Names::GatewayServiceID_Name);
    }
  }
  CommConfigurationID_Type::serialize(accessor.getConfigurationID(), node, PlannedGatewayConfigurationType_Names::ConfigurationID_Name);
  CommConfigurationStateEnum::serialize(accessor.getConfigurationState(), node, PlannedGatewayConfigurationType_Names::ConfigurationState_Name, false);
  if (accessor.hasActivateMDF()) {
    MDF_CommandType::serialize(accessor.getActivateMDF(), node, PlannedGatewayConfigurationType_Names::ActivateMDF_Name);
  }
  if (accessor.hasActivateProfileID()) {
    CommProfileID_Type::serialize(accessor.getActivateProfileID(), node, PlannedGatewayConfigurationType_Names::ActivateProfileID_Name);
  }
  if (accessor.hasGatewayCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getGatewayCapabilityID(), node, PlannedGatewayConfigurationType_Names::GatewayCapabilityID_Name);
  }
  if (accessor.hasGatewayActivityID()) {
    ActivityID_Type::serialize(accessor.getGatewayActivityID(), node, PlannedGatewayConfigurationType_Names::GatewayActivityID_Name);
  }
  {
    const uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination& boundedList = accessor.getGatewayLinkDestination();
    for (uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::GatewayLinkDestinationType::serialize(boundedList.at(i), node, PlannedGatewayConfigurationType_Names::GatewayLinkDestination_Name);
    }
  }
  {
    const uci::type::PlannedGatewayConfigurationType::MessageConfiguration& boundedList = accessor.getMessageConfiguration();
    for (uci::type::PlannedGatewayConfigurationType::MessageConfiguration::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MessageConfigurationType::serialize(boundedList.at(i), node, PlannedGatewayConfigurationType_Names::MessageConfiguration_Name);
    }
  }
  {
    const uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID& boundedList = accessor.getProductDisseminationIngressSystemID();
    for (uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SystemID_Type::serialize(boundedList.at(i), node, PlannedGatewayConfigurationType_Names::ProductDisseminationIngressSystemID_Name);
    }
  }
  {
    const uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID& boundedList = accessor.getProductDisseminationEgressDestinationID();
    for (uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductDisseminationDestinationID_Type::serialize(boundedList.at(i), node, PlannedGatewayConfigurationType_Names::ProductDisseminationEgressDestinationID_Name);
    }
  }
  if (accessor.hasGatewaySpecificSettings()) {
    GatewayConfigurationPET::serialize(accessor.getGatewaySpecificSettings(), node, PlannedGatewayConfigurationType_Names::GatewaySpecificSettings_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlannedGatewayConfigurationType>().release());
}

uci::type::PlannedGatewayConfigurationType& PlannedGatewayConfigurationType::create(const uci::type::PlannedGatewayConfigurationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlannedGatewayConfigurationType> newAccessor{boost::make_unique<asb_uci::type::PlannedGatewayConfigurationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlannedGatewayConfigurationType::destroy(uci::type::PlannedGatewayConfigurationType& accessor) {
  delete dynamic_cast<asb_uci::type::PlannedGatewayConfigurationType*>(&accessor);
}

} // namespace type

} // namespace uci

