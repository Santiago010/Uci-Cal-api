/** @file EntityFilterType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EntityFilterType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DesignationFilterType.h"
#include "../../../include/asb_uci/type/EntityComparativeType.h"
#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/EntitySourceEnum.h"
#include "../../../include/asb_uci/type/GeoFiltersQueryType.h"
#include "../../../include/asb_uci/type/OrbitalFiltersQueryType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DesignationFilterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityComparativeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityFilterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntitySourceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GeoFiltersQueryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalFiltersQueryType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityFilterType::EntityFilterType()
  : characteristics_Accessor{boost::make_unique<Characteristics>(0, SIZE_MAX)},
    entityID_Accessor{boost::make_unique<EntityID>(0, SIZE_MAX)},
    source_Accessor{boost::make_unique<Source>(0, 28)},
    geoFilter_Accessor{boost::make_unique<GeoFilter>(0, SIZE_MAX)},
    orbitalFilter_Accessor{boost::make_unique<OrbitalFilter>(0, SIZE_MAX)} {
}

EntityFilterType::~EntityFilterType() = default;

void EntityFilterType::copy(const uci::type::EntityFilterType& accessor) {
  copyImpl(accessor, false);
}

void EntityFilterType::copyImpl(const uci::type::EntityFilterType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityFilterType&>(accessor);
    if (accessorImpl.designation_Accessor) {
      setDesignation(*(accessorImpl.designation_Accessor));
    } else {
      designation_Accessor.reset();
    }
    setCharacteristics(*(accessorImpl.characteristics_Accessor));
    setEntityID(*(accessorImpl.entityID_Accessor));
    setSource(*(accessorImpl.source_Accessor));
    setGeoFilter(*(accessorImpl.geoFilter_Accessor));
    setOrbitalFilter(*(accessorImpl.orbitalFilter_Accessor));
  }
}

void EntityFilterType::reset() noexcept {
  designation_Accessor.reset();
  characteristics_Accessor->reset();
  entityID_Accessor->reset();
  source_Accessor->reset();
  geoFilter_Accessor->reset();
  orbitalFilter_Accessor->reset();
}

uci::type::DesignationFilterType& EntityFilterType::getDesignation_() const {
  if (designation_Accessor) {
    return *designation_Accessor;
  }
  throw uci::base::UCIException("Error in getDesignation(): An attempt was made to get an optional field that was not enabled, call hasDesignation() to determine if it is safe to call getDesignation()");
}

const uci::type::DesignationFilterType& EntityFilterType::getDesignation() const {
  return getDesignation_();
}

uci::type::DesignationFilterType& EntityFilterType::getDesignation() {
  return getDesignation_();
}

uci::type::EntityFilterType& EntityFilterType::setDesignation(const uci::type::DesignationFilterType& accessor) {
  enableDesignation();
  if (&accessor != designation_Accessor.get()) {
    designation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityFilterType::hasDesignation() const noexcept {
  return static_cast<bool>(designation_Accessor);
}

uci::type::DesignationFilterType& EntityFilterType::enableDesignation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::designationFilterType : type};
  if ((!designation_Accessor) || (designation_Accessor->getAccessorType() != requestedType)) {
    designation_Accessor = DesignationFilterType::create(requestedType);
    if (!designation_Accessor) {
      throw uci::base::UCIException("Error in enableDesignation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *designation_Accessor;
}

uci::type::EntityFilterType& EntityFilterType::clearDesignation() noexcept {
  designation_Accessor.reset();
  return *this;
}

const uci::type::EntityFilterType::Characteristics& EntityFilterType::getCharacteristics() const {
  return *characteristics_Accessor;
}

uci::type::EntityFilterType::Characteristics& EntityFilterType::getCharacteristics() {
  return *characteristics_Accessor;
}

uci::type::EntityFilterType& EntityFilterType::setCharacteristics(const uci::type::EntityFilterType::Characteristics& accessor) {
  if (&accessor != characteristics_Accessor.get()) {
    characteristics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityFilterType::EntityID& EntityFilterType::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityFilterType::EntityID& EntityFilterType::getEntityID() {
  return *entityID_Accessor;
}

uci::type::EntityFilterType& EntityFilterType::setEntityID(const uci::type::EntityFilterType::EntityID& accessor) {
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityFilterType::Source& EntityFilterType::getSource() const {
  return *source_Accessor;
}

uci::type::EntityFilterType::Source& EntityFilterType::getSource() {
  return *source_Accessor;
}

uci::type::EntityFilterType& EntityFilterType::setSource(const uci::type::EntityFilterType::Source& accessor) {
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityFilterType::GeoFilter& EntityFilterType::getGeoFilter() const {
  return *geoFilter_Accessor;
}

uci::type::EntityFilterType::GeoFilter& EntityFilterType::getGeoFilter() {
  return *geoFilter_Accessor;
}

uci::type::EntityFilterType& EntityFilterType::setGeoFilter(const uci::type::EntityFilterType::GeoFilter& accessor) {
  if (&accessor != geoFilter_Accessor.get()) {
    geoFilter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityFilterType::OrbitalFilter& EntityFilterType::getOrbitalFilter() const {
  return *orbitalFilter_Accessor;
}

uci::type::EntityFilterType::OrbitalFilter& EntityFilterType::getOrbitalFilter() {
  return *orbitalFilter_Accessor;
}

uci::type::EntityFilterType& EntityFilterType::setOrbitalFilter(const uci::type::EntityFilterType::OrbitalFilter& accessor) {
  if (&accessor != orbitalFilter_Accessor.get()) {
    orbitalFilter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<EntityFilterType> EntityFilterType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityFilterType : type};
  return (requestedType == uci::type::accessorType::entityFilterType) ? boost::make_unique<EntityFilterType>() : nullptr;
}

/**  */
namespace EntityFilterType_Names {

constexpr const char* Extern_Type_Name{"EntityFilterType"};
constexpr const char* Designation_Name{"Designation"};
constexpr const char* Characteristics_Name{"Characteristics"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* Source_Name{"Source"};
constexpr const char* GeoFilter_Name{"GeoFilter"};
constexpr const char* OrbitalFilter_Name{"OrbitalFilter"};

} // namespace EntityFilterType_Names

void EntityFilterType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityFilterType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityFilterType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityFilterType_Names::Designation_Name) {
      DesignationFilterType::deserialize(valueType.second, accessor.enableDesignation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityFilterType_Names::Characteristics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityFilterType::Characteristics& boundedList = accessor.getCharacteristics();
        const uci::type::EntityFilterType::Characteristics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EntityComparativeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityFilterType_Names::EntityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityFilterType::EntityID& boundedList = accessor.getEntityID();
        const uci::type::EntityFilterType::EntityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityFilterType_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityFilterType::Source& boundedList = accessor.getSource();
        const uci::type::EntityFilterType::Source::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityFilterType_Names::GeoFilter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityFilterType::GeoFilter& boundedList = accessor.getGeoFilter();
        const uci::type::EntityFilterType::GeoFilter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::GeoFiltersQueryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityFilterType_Names::OrbitalFilter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityFilterType::OrbitalFilter& boundedList = accessor.getOrbitalFilter();
        const uci::type::EntityFilterType::OrbitalFilter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitalFiltersQueryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string EntityFilterType::serialize(const uci::type::EntityFilterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityFilterType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityFilterType_Names::Extern_Type_Name);
  }
  if (accessor.hasDesignation()) {
    DesignationFilterType::serialize(accessor.getDesignation(), node, EntityFilterType_Names::Designation_Name);
  }
  {
    const uci::type::EntityFilterType::Characteristics& boundedList = accessor.getCharacteristics();
    for (uci::type::EntityFilterType::Characteristics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EntityComparativeType::serialize(boundedList.at(i), node, EntityFilterType_Names::Characteristics_Name);
    }
  }
  {
    const uci::type::EntityFilterType::EntityID& boundedList = accessor.getEntityID();
    for (uci::type::EntityFilterType::EntityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EntityID_Type::serialize(boundedList.at(i), node, EntityFilterType_Names::EntityID_Name);
    }
  }
  {
    const uci::type::EntityFilterType::Source& boundedList = accessor.getSource();
    for (uci::type::EntityFilterType::Source::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      EntitySourceEnum::serialize(boundedList.at(i), node, EntityFilterType_Names::Source_Name, false);
    }
  }
  {
    const uci::type::EntityFilterType::GeoFilter& boundedList = accessor.getGeoFilter();
    for (uci::type::EntityFilterType::GeoFilter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::GeoFiltersQueryType::serialize(boundedList.at(i), node, EntityFilterType_Names::GeoFilter_Name);
    }
  }
  {
    const uci::type::EntityFilterType::OrbitalFilter& boundedList = accessor.getOrbitalFilter();
    for (uci::type::EntityFilterType::OrbitalFilter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitalFiltersQueryType::serialize(boundedList.at(i), node, EntityFilterType_Names::OrbitalFilter_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityFilterType& EntityFilterType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityFilterType>().release());
}

uci::type::EntityFilterType& EntityFilterType::create(const uci::type::EntityFilterType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityFilterType> newAccessor{boost::make_unique<asb_uci::type::EntityFilterType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityFilterType::destroy(uci::type::EntityFilterType& accessor) {
  delete dynamic_cast<asb_uci::type::EntityFilterType*>(&accessor);
}

} // namespace type

} // namespace uci

