/** @file VolumeChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/VolumeChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OpVolumeID_Type.h"
#include "asb_uci/type/OpVolumeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/OpVolumeID_Type.h"
#include "uci/type/OpVolumeType.h"
#include "uci/type/VolumeChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VolumeChoiceType::VolumeChoiceType() = default;

VolumeChoiceType::~VolumeChoiceType() = default;

void VolumeChoiceType::copy(const uci::type::VolumeChoiceType& accessor) {
  copyImpl(accessor, false);
}

void VolumeChoiceType::copyImpl(const uci::type::VolumeChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VolumeChoiceType&>(accessor);
    if (accessorImpl.opVolumeID_Accessor) {
      setOpVolumeID(*(accessorImpl.opVolumeID_Accessor));
    } else {
      opVolumeID_Accessor.reset();
    }
    if (accessorImpl.volumeTarget_Accessor) {
      setVolumeTarget(*(accessorImpl.volumeTarget_Accessor));
    } else {
      volumeTarget_Accessor.reset();
    }
  }
}

void VolumeChoiceType::reset() noexcept {
  opVolumeID_Accessor.reset();
  volumeTarget_Accessor.reset();
}

uci::type::VolumeChoiceType::VolumeChoiceTypeChoice VolumeChoiceType::getVolumeChoiceTypeChoiceOrdinal() const noexcept {
  if (opVolumeID_Accessor) {
    return VOLUMECHOICETYPE_CHOICE_OPVOLUMEID;
  }
  if (volumeTarget_Accessor) {
    return VOLUMECHOICETYPE_CHOICE_VOLUMETARGET;
  }
  return VOLUMECHOICETYPE_CHOICE_NONE;
}

uci::type::VolumeChoiceType& VolumeChoiceType::setVolumeChoiceTypeChoiceOrdinal(uci::type::VolumeChoiceType::VolumeChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case VOLUMECHOICETYPE_CHOICE_OPVOLUMEID:
      chooseOpVolumeID("setVolumeChoiceTypeChoiceOrdinal", type);
      break;
    case VOLUMECHOICETYPE_CHOICE_VOLUMETARGET:
      chooseVolumeTarget("setVolumeChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setVolumeChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OpVolumeID_Type& VolumeChoiceType::getOpVolumeID_() const {
  if (opVolumeID_Accessor) {
    return *opVolumeID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpVolumeID(): Unable to get OpVolumeID, field not selected");
}

const uci::type::OpVolumeID_Type& VolumeChoiceType::getOpVolumeID() const {
  return getOpVolumeID_();
}

uci::type::OpVolumeID_Type& VolumeChoiceType::getOpVolumeID() {
  return getOpVolumeID_();
}

uci::type::VolumeChoiceType& VolumeChoiceType::setOpVolumeID(const uci::type::OpVolumeID_Type& accessor) {
  chooseOpVolumeID();
  if (&accessor != opVolumeID_Accessor.get()) {
    opVolumeID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VolumeChoiceType::isOpVolumeID() const noexcept {
  return static_cast<bool>(opVolumeID_Accessor);
}

uci::type::OpVolumeID_Type& VolumeChoiceType::chooseOpVolumeID(const std::string& method, uci::base::accessorType::AccessorType type) {
  volumeTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opVolumeID_Type : type};
  if ((!opVolumeID_Accessor) || (opVolumeID_Accessor->getAccessorType() != requestedType)) {
    opVolumeID_Accessor = OpVolumeID_Type::create(type);
    if (!opVolumeID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opVolumeID_Accessor;
}

uci::type::OpVolumeID_Type& VolumeChoiceType::chooseOpVolumeID(uci::base::accessorType::AccessorType type) {
  return chooseOpVolumeID("chooseOpVolumeID", type);
}

uci::type::OpVolumeType& VolumeChoiceType::getVolumeTarget_() const {
  if (volumeTarget_Accessor) {
    return *volumeTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getVolumeTarget(): Unable to get VolumeTarget, field not selected");
}

const uci::type::OpVolumeType& VolumeChoiceType::getVolumeTarget() const {
  return getVolumeTarget_();
}

uci::type::OpVolumeType& VolumeChoiceType::getVolumeTarget() {
  return getVolumeTarget_();
}

uci::type::VolumeChoiceType& VolumeChoiceType::setVolumeTarget(const uci::type::OpVolumeType& accessor) {
  chooseVolumeTarget(accessor.getAccessorType());
  if (&accessor != volumeTarget_Accessor.get()) {
    volumeTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VolumeChoiceType::isVolumeTarget() const noexcept {
  return static_cast<bool>(volumeTarget_Accessor);
}

uci::type::OpVolumeType& VolumeChoiceType::chooseVolumeTarget(const std::string& method, uci::base::accessorType::AccessorType type) {
  opVolumeID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opVolumeType : type};
  if ((!volumeTarget_Accessor) || (volumeTarget_Accessor->getAccessorType() != requestedType)) {
    volumeTarget_Accessor = OpVolumeType::create(type);
    if (!volumeTarget_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *volumeTarget_Accessor;
}

uci::type::OpVolumeType& VolumeChoiceType::chooseVolumeTarget(uci::base::accessorType::AccessorType type) {
  return chooseVolumeTarget("chooseVolumeTarget", type);
}

std::unique_ptr<VolumeChoiceType> VolumeChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::volumeChoiceType : type};
  return (requestedType == uci::type::accessorType::volumeChoiceType) ? boost::make_unique<VolumeChoiceType>() : nullptr;
}

/**  */
namespace VolumeChoiceType_Names {

constexpr const char* Extern_Type_Name{"VolumeChoiceType"};
constexpr const char* OpVolumeID_Name{"OpVolumeID"};
constexpr const char* VolumeTarget_Name{"VolumeTarget"};

} // namespace VolumeChoiceType_Names

void VolumeChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VolumeChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VolumeChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VolumeChoiceType_Names::OpVolumeID_Name) {
      OpVolumeID_Type::deserialize(valueType.second, accessor.chooseOpVolumeID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VolumeChoiceType_Names::VolumeTarget_Name) {
      OpVolumeType::deserialize(valueType.second, accessor.chooseVolumeTarget(), nodeName, nsPrefix);
    }
  }
}

std::string VolumeChoiceType::serialize(const uci::type::VolumeChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VolumeChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VolumeChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isOpVolumeID()) {
    OpVolumeID_Type::serialize(accessor.getOpVolumeID(), node, VolumeChoiceType_Names::OpVolumeID_Name);
  } else if (accessor.isVolumeTarget()) {
    OpVolumeType::serialize(accessor.getVolumeTarget(), node, VolumeChoiceType_Names::VolumeTarget_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VolumeChoiceType& VolumeChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VolumeChoiceType>().release());
}

uci::type::VolumeChoiceType& VolumeChoiceType::create(const uci::type::VolumeChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VolumeChoiceType> newAccessor{boost::make_unique<asb_uci::type::VolumeChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VolumeChoiceType::destroy(uci::type::VolumeChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::VolumeChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

