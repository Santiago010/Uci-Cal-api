/** @file SOB_EquipmentType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SOB_EquipmentType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AlphanumericString54Type.h"
#include "asb_uci/type/CountryCodeType.h"
#include "asb_uci/type/EquipmentConditionEnum.h"
#include "asb_uci/type/VisibleString128Type.h"
#include "asb_uci/type/VisibleString32Type.h"
#include "asb_uci/type/VisibleString64Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AlphanumericString54Type.h"
#include "uci/type/CountryCodeType.h"
#include "uci/type/EquipmentConditionEnum.h"
#include "uci/type/SOB_EquipmentType.h"
#include "uci/type/VisibleString128Type.h"
#include "uci/type/VisibleString32Type.h"
#include "uci/type/VisibleString64Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SOB_EquipmentType::SOB_EquipmentType() = default;

SOB_EquipmentType::~SOB_EquipmentType() = default;

void SOB_EquipmentType::copy(const uci::type::SOB_EquipmentType& accessor) {
  copyImpl(accessor, false);
}

void SOB_EquipmentType::copyImpl(const uci::type::SOB_EquipmentType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SOB_EquipmentType&>(accessor);
    if (accessorImpl.equipmentCode_Accessor) {
      setEquipmentCode(*(accessorImpl.equipmentCode_Accessor));
    } else {
      equipmentCode_Accessor.reset();
    }
    if (accessorImpl.manufacturer_Accessor) {
      setManufacturer(*(accessorImpl.manufacturer_Accessor));
    } else {
      manufacturer_Accessor.reset();
    }
    if (accessorImpl.description_Accessor) {
      setDescription(*(accessorImpl.description_Accessor));
    } else {
      description_Accessor.reset();
    }
    if (accessorImpl.countryCode_Accessor) {
      setCountryCode(*(accessorImpl.countryCode_Accessor));
    } else {
      countryCode_Accessor.reset();
    }
    if (accessorImpl.wSSIC_Designator_Accessor) {
      setWSSIC_Designator(*(accessorImpl.wSSIC_Designator_Accessor));
    } else {
      wSSIC_Designator_Accessor.reset();
    }
    if (accessorImpl.equipmentCondition_Accessor) {
      setEquipmentCondition(*(accessorImpl.equipmentCondition_Accessor));
    } else {
      equipmentCondition_Accessor.reset();
    }
  }
}

void SOB_EquipmentType::reset() noexcept {
  equipmentCode_Accessor.reset();
  manufacturer_Accessor.reset();
  description_Accessor.reset();
  countryCode_Accessor.reset();
  wSSIC_Designator_Accessor.reset();
  equipmentCondition_Accessor.reset();
}

uci::type::VisibleString32Type& SOB_EquipmentType::getEquipmentCode_() const {
  if (equipmentCode_Accessor) {
    return *equipmentCode_Accessor;
  }
  throw uci::base::UCIException("Error in getEquipmentCode(): An attempt was made to get an optional field that was not enabled, call hasEquipmentCode() to determine if it is safe to call getEquipmentCode()");
}

const uci::type::VisibleString32Type& SOB_EquipmentType::getEquipmentCode() const {
  return getEquipmentCode_();
}

uci::type::VisibleString32Type& SOB_EquipmentType::getEquipmentCode() {
  return getEquipmentCode_();
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setEquipmentCode(const uci::type::VisibleString32Type& value) {
  return setEquipmentCode(value.c_str());
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setEquipmentCode(const std::string& value) {
  return setEquipmentCode(value.c_str());
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setEquipmentCode(const char* value) {
  enableEquipmentCode().setStringValue(value);
  return *this;
}

bool SOB_EquipmentType::hasEquipmentCode() const noexcept {
  return static_cast<bool>(equipmentCode_Accessor);
}

uci::type::VisibleString32Type& SOB_EquipmentType::enableEquipmentCode(uci::base::accessorType::AccessorType type) {
  if (!equipmentCode_Accessor) {
    equipmentCode_Accessor = VisibleString32Type::create(type);
  }
  return *equipmentCode_Accessor;
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::clearEquipmentCode() noexcept {
  equipmentCode_Accessor.reset();
  return *this;
}

uci::type::VisibleString64Type& SOB_EquipmentType::getManufacturer_() const {
  if (manufacturer_Accessor) {
    return *manufacturer_Accessor;
  }
  throw uci::base::UCIException("Error in getManufacturer(): An attempt was made to get an optional field that was not enabled, call hasManufacturer() to determine if it is safe to call getManufacturer()");
}

const uci::type::VisibleString64Type& SOB_EquipmentType::getManufacturer() const {
  return getManufacturer_();
}

uci::type::VisibleString64Type& SOB_EquipmentType::getManufacturer() {
  return getManufacturer_();
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setManufacturer(const uci::type::VisibleString64Type& value) {
  return setManufacturer(value.c_str());
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setManufacturer(const std::string& value) {
  return setManufacturer(value.c_str());
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setManufacturer(const char* value) {
  enableManufacturer().setStringValue(value);
  return *this;
}

bool SOB_EquipmentType::hasManufacturer() const noexcept {
  return static_cast<bool>(manufacturer_Accessor);
}

uci::type::VisibleString64Type& SOB_EquipmentType::enableManufacturer(uci::base::accessorType::AccessorType type) {
  if (!manufacturer_Accessor) {
    manufacturer_Accessor = VisibleString64Type::create(type);
  }
  return *manufacturer_Accessor;
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::clearManufacturer() noexcept {
  manufacturer_Accessor.reset();
  return *this;
}

uci::type::VisibleString128Type& SOB_EquipmentType::getDescription_() const {
  if (description_Accessor) {
    return *description_Accessor;
  }
  throw uci::base::UCIException("Error in getDescription(): An attempt was made to get an optional field that was not enabled, call hasDescription() to determine if it is safe to call getDescription()");
}

const uci::type::VisibleString128Type& SOB_EquipmentType::getDescription() const {
  return getDescription_();
}

uci::type::VisibleString128Type& SOB_EquipmentType::getDescription() {
  return getDescription_();
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setDescription(const uci::type::VisibleString128Type& value) {
  return setDescription(value.c_str());
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setDescription(const std::string& value) {
  return setDescription(value.c_str());
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setDescription(const char* value) {
  enableDescription().setStringValue(value);
  return *this;
}

bool SOB_EquipmentType::hasDescription() const noexcept {
  return static_cast<bool>(description_Accessor);
}

uci::type::VisibleString128Type& SOB_EquipmentType::enableDescription(uci::base::accessorType::AccessorType type) {
  if (!description_Accessor) {
    description_Accessor = VisibleString128Type::create(type);
  }
  return *description_Accessor;
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::clearDescription() noexcept {
  description_Accessor.reset();
  return *this;
}

uci::type::CountryCodeType& SOB_EquipmentType::getCountryCode_() const {
  if (countryCode_Accessor) {
    return *countryCode_Accessor;
  }
  throw uci::base::UCIException("Error in getCountryCode(): An attempt was made to get an optional field that was not enabled, call hasCountryCode() to determine if it is safe to call getCountryCode()");
}

const uci::type::CountryCodeType& SOB_EquipmentType::getCountryCode() const {
  return getCountryCode_();
}

uci::type::CountryCodeType& SOB_EquipmentType::getCountryCode() {
  return getCountryCode_();
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setCountryCode(const uci::type::CountryCodeType& accessor) {
  enableCountryCode();
  if (&accessor != countryCode_Accessor.get()) {
    countryCode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_EquipmentType::hasCountryCode() const noexcept {
  return static_cast<bool>(countryCode_Accessor);
}

uci::type::CountryCodeType& SOB_EquipmentType::enableCountryCode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::countryCodeType : type};
  if ((!countryCode_Accessor) || (countryCode_Accessor->getAccessorType() != requestedType)) {
    countryCode_Accessor = CountryCodeType::create(requestedType);
    if (!countryCode_Accessor) {
      throw uci::base::UCIException("Error in enableCountryCode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *countryCode_Accessor;
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::clearCountryCode() noexcept {
  countryCode_Accessor.reset();
  return *this;
}

uci::type::AlphanumericString54Type& SOB_EquipmentType::getWSSIC_Designator_() const {
  if (wSSIC_Designator_Accessor) {
    return *wSSIC_Designator_Accessor;
  }
  throw uci::base::UCIException("Error in getWSSIC_Designator(): An attempt was made to get an optional field that was not enabled, call hasWSSIC_Designator() to determine if it is safe to call getWSSIC_Designator()");
}

const uci::type::AlphanumericString54Type& SOB_EquipmentType::getWSSIC_Designator() const {
  return getWSSIC_Designator_();
}

uci::type::AlphanumericString54Type& SOB_EquipmentType::getWSSIC_Designator() {
  return getWSSIC_Designator_();
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setWSSIC_Designator(const uci::type::AlphanumericString54Type& value) {
  return setWSSIC_Designator(value.c_str());
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setWSSIC_Designator(const std::string& value) {
  return setWSSIC_Designator(value.c_str());
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setWSSIC_Designator(const char* value) {
  enableWSSIC_Designator().setStringValue(value);
  return *this;
}

bool SOB_EquipmentType::hasWSSIC_Designator() const noexcept {
  return static_cast<bool>(wSSIC_Designator_Accessor);
}

uci::type::AlphanumericString54Type& SOB_EquipmentType::enableWSSIC_Designator(uci::base::accessorType::AccessorType type) {
  if (!wSSIC_Designator_Accessor) {
    wSSIC_Designator_Accessor = AlphanumericString54Type::create(type);
  }
  return *wSSIC_Designator_Accessor;
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::clearWSSIC_Designator() noexcept {
  wSSIC_Designator_Accessor.reset();
  return *this;
}

uci::type::EquipmentConditionEnum& SOB_EquipmentType::getEquipmentCondition_() const {
  if (equipmentCondition_Accessor) {
    return *equipmentCondition_Accessor;
  }
  throw uci::base::UCIException("Error in getEquipmentCondition(): An attempt was made to get an optional field that was not enabled, call hasEquipmentCondition() to determine if it is safe to call getEquipmentCondition()");
}

const uci::type::EquipmentConditionEnum& SOB_EquipmentType::getEquipmentCondition() const {
  return getEquipmentCondition_();
}

uci::type::EquipmentConditionEnum& SOB_EquipmentType::getEquipmentCondition() {
  return getEquipmentCondition_();
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setEquipmentCondition(const uci::type::EquipmentConditionEnum& accessor) {
  enableEquipmentCondition();
  if (&accessor != equipmentCondition_Accessor.get()) {
    equipmentCondition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::setEquipmentCondition(const uci::type::EquipmentConditionEnum::EnumerationItem value) {
  enableEquipmentCondition().setValue(value);
  return *this;
}

bool SOB_EquipmentType::hasEquipmentCondition() const noexcept {
  return static_cast<bool>(equipmentCondition_Accessor);
}

uci::type::EquipmentConditionEnum& SOB_EquipmentType::enableEquipmentCondition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::equipmentConditionEnum : type};
  if ((!equipmentCondition_Accessor) || (equipmentCondition_Accessor->getAccessorType() != requestedType)) {
    equipmentCondition_Accessor = EquipmentConditionEnum::create(requestedType);
    if (!equipmentCondition_Accessor) {
      throw uci::base::UCIException("Error in enableEquipmentCondition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *equipmentCondition_Accessor;
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::clearEquipmentCondition() noexcept {
  equipmentCondition_Accessor.reset();
  return *this;
}

std::unique_ptr<SOB_EquipmentType> SOB_EquipmentType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_EquipmentType : type};
  return (requestedType == uci::type::accessorType::sOB_EquipmentType) ? boost::make_unique<SOB_EquipmentType>() : nullptr;
}

/**  */
namespace SOB_EquipmentType_Names {

constexpr const char* Extern_Type_Name{"SOB_EquipmentType"};
constexpr const char* EquipmentCode_Name{"EquipmentCode"};
constexpr const char* Manufacturer_Name{"Manufacturer"};
constexpr const char* Description_Name{"Description"};
constexpr const char* CountryCode_Name{"CountryCode"};
constexpr const char* WSSIC_Designator_Name{"WSSIC_Designator"};
constexpr const char* EquipmentCondition_Name{"EquipmentCondition"};

} // namespace SOB_EquipmentType_Names

void SOB_EquipmentType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SOB_EquipmentType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SOB_EquipmentType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SOB_EquipmentType_Names::EquipmentCode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEquipmentCode(*value);
      }
    } else if (valueType.first == nsPrefix + SOB_EquipmentType_Names::Manufacturer_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setManufacturer(*value);
      }
    } else if (valueType.first == nsPrefix + SOB_EquipmentType_Names::Description_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDescription(*value);
      }
    } else if (valueType.first == nsPrefix + SOB_EquipmentType_Names::CountryCode_Name) {
      CountryCodeType::deserialize(valueType.second, accessor.enableCountryCode(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_EquipmentType_Names::WSSIC_Designator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWSSIC_Designator(*value);
      }
    } else if (valueType.first == nsPrefix + SOB_EquipmentType_Names::EquipmentCondition_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEquipmentCondition().setValueFromName(*value);
      }
    }
  }
}

std::string SOB_EquipmentType::serialize(const uci::type::SOB_EquipmentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SOB_EquipmentType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SOB_EquipmentType_Names::Extern_Type_Name);
  }
  if (accessor.hasEquipmentCode()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getEquipmentCode(), node, SOB_EquipmentType_Names::EquipmentCode_Name);
  }
  if (accessor.hasManufacturer()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getManufacturer(), node, SOB_EquipmentType_Names::Manufacturer_Name);
  }
  if (accessor.hasDescription()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDescription(), node, SOB_EquipmentType_Names::Description_Name);
  }
  if (accessor.hasCountryCode()) {
    CountryCodeType::serialize(accessor.getCountryCode(), node, SOB_EquipmentType_Names::CountryCode_Name);
  }
  if (accessor.hasWSSIC_Designator()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getWSSIC_Designator(), node, SOB_EquipmentType_Names::WSSIC_Designator_Name);
  }
  if (accessor.hasEquipmentCondition()) {
    EquipmentConditionEnum::serialize(accessor.getEquipmentCondition(), node, SOB_EquipmentType_Names::EquipmentCondition_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SOB_EquipmentType& SOB_EquipmentType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SOB_EquipmentType>().release());
}

uci::type::SOB_EquipmentType& SOB_EquipmentType::create(const uci::type::SOB_EquipmentType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SOB_EquipmentType> newAccessor{boost::make_unique<asb_uci::type::SOB_EquipmentType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SOB_EquipmentType::destroy(uci::type::SOB_EquipmentType& accessor) {
  delete dynamic_cast<asb_uci::type::SOB_EquipmentType*>(&accessor);
}

} // namespace type

} // namespace uci

