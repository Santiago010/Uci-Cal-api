/** @file SourceResolutionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SourceResolutionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AnglePositiveType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/SourceResolutionType.h"
#include "uci/type/SpeedType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SourceResolutionType::SourceResolutionType() = default;

SourceResolutionType::~SourceResolutionType() = default;

void SourceResolutionType::copy(const uci::type::SourceResolutionType& accessor) {
  copyImpl(accessor, false);
}

void SourceResolutionType::copyImpl(const uci::type::SourceResolutionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SourceResolutionType&>(accessor);
    if (accessorImpl.hasRangeResolution()) {
      setRangeResolution(accessorImpl.getRangeResolution());
    } else {
      clearRangeResolution();
    }
    if (accessorImpl.hasRangeRateResolution()) {
      setRangeRateResolution(accessorImpl.getRangeRateResolution());
    } else {
      clearRangeRateResolution();
    }
    if (accessorImpl.hasAzimuthResolution()) {
      setAzimuthResolution(accessorImpl.getAzimuthResolution());
    } else {
      clearAzimuthResolution();
    }
    if (accessorImpl.hasElevationResolution()) {
      setElevationResolution(accessorImpl.getElevationResolution());
    } else {
      clearElevationResolution();
    }
    if (accessorImpl.hasAzimuthRateResolution()) {
      setAzimuthRateResolution(accessorImpl.getAzimuthRateResolution());
    } else {
      clearAzimuthRateResolution();
    }
    if (accessorImpl.hasElevationRateResolution()) {
      setElevationRateResolution(accessorImpl.getElevationRateResolution());
    } else {
      clearElevationRateResolution();
    }
    if (accessorImpl.hasCosconeY_Resolution()) {
      setCosconeY_Resolution(accessorImpl.getCosconeY_Resolution());
    } else {
      clearCosconeY_Resolution();
    }
    if (accessorImpl.hasCosconeZ_Resolution()) {
      setCosconeZ_Resolution(accessorImpl.getCosconeZ_Resolution());
    } else {
      clearCosconeZ_Resolution();
    }
    if (accessorImpl.hasCosconeY_RateResolution()) {
      setCosconeY_RateResolution(accessorImpl.getCosconeY_RateResolution());
    } else {
      clearCosconeY_RateResolution();
    }
    if (accessorImpl.hasCosconeZ_RateResolution()) {
      setCosconeZ_RateResolution(accessorImpl.getCosconeZ_RateResolution());
    } else {
      clearCosconeZ_RateResolution();
    }
  }
}

void SourceResolutionType::reset() noexcept {
  clearRangeResolution();
  clearRangeRateResolution();
  clearAzimuthResolution();
  clearElevationResolution();
  clearAzimuthRateResolution();
  clearElevationRateResolution();
  clearCosconeY_Resolution();
  clearCosconeZ_Resolution();
  clearCosconeY_RateResolution();
  clearCosconeZ_RateResolution();
}

uci::type::DistanceTypeValue SourceResolutionType::getRangeResolution() const {
  if (rangeResolution_Accessor) {
    return *rangeResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getRangeResolution(): An attempt was made to get an optional field that was not enabled, call hasRangeResolution() to determine if it is safe to call getRangeResolution()");
}

uci::type::SourceResolutionType& SourceResolutionType::setRangeResolution(uci::type::DistanceTypeValue value) {
  rangeResolution_Accessor = value;
  return *this;
}

bool SourceResolutionType::hasRangeResolution() const noexcept {
  return rangeResolution_Accessor.has_value();
}

uci::type::SourceResolutionType& SourceResolutionType::clearRangeResolution() noexcept {
  rangeResolution_Accessor.reset();
  return *this;
}

uci::type::SpeedTypeValue SourceResolutionType::getRangeRateResolution() const {
  if (rangeRateResolution_Accessor) {
    return *rangeRateResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getRangeRateResolution(): An attempt was made to get an optional field that was not enabled, call hasRangeRateResolution() to determine if it is safe to call getRangeRateResolution()");
}

uci::type::SourceResolutionType& SourceResolutionType::setRangeRateResolution(uci::type::SpeedTypeValue value) {
  rangeRateResolution_Accessor = value;
  return *this;
}

bool SourceResolutionType::hasRangeRateResolution() const noexcept {
  return rangeRateResolution_Accessor.has_value();
}

uci::type::SourceResolutionType& SourceResolutionType::clearRangeRateResolution() noexcept {
  rangeRateResolution_Accessor.reset();
  return *this;
}

uci::type::AnglePositiveTypeValue SourceResolutionType::getAzimuthResolution() const {
  if (azimuthResolution_Accessor) {
    return *azimuthResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getAzimuthResolution(): An attempt was made to get an optional field that was not enabled, call hasAzimuthResolution() to determine if it is safe to call getAzimuthResolution()");
}

uci::type::SourceResolutionType& SourceResolutionType::setAzimuthResolution(uci::type::AnglePositiveTypeValue value) {
  azimuthResolution_Accessor = value;
  return *this;
}

bool SourceResolutionType::hasAzimuthResolution() const noexcept {
  return azimuthResolution_Accessor.has_value();
}

uci::type::SourceResolutionType& SourceResolutionType::clearAzimuthResolution() noexcept {
  azimuthResolution_Accessor.reset();
  return *this;
}

uci::type::AnglePositiveTypeValue SourceResolutionType::getElevationResolution() const {
  if (elevationResolution_Accessor) {
    return *elevationResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getElevationResolution(): An attempt was made to get an optional field that was not enabled, call hasElevationResolution() to determine if it is safe to call getElevationResolution()");
}

uci::type::SourceResolutionType& SourceResolutionType::setElevationResolution(uci::type::AnglePositiveTypeValue value) {
  elevationResolution_Accessor = value;
  return *this;
}

bool SourceResolutionType::hasElevationResolution() const noexcept {
  return elevationResolution_Accessor.has_value();
}

uci::type::SourceResolutionType& SourceResolutionType::clearElevationResolution() noexcept {
  elevationResolution_Accessor.reset();
  return *this;
}

uci::type::AnglePositiveTypeValue SourceResolutionType::getAzimuthRateResolution() const {
  if (azimuthRateResolution_Accessor) {
    return *azimuthRateResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getAzimuthRateResolution(): An attempt was made to get an optional field that was not enabled, call hasAzimuthRateResolution() to determine if it is safe to call getAzimuthRateResolution()");
}

uci::type::SourceResolutionType& SourceResolutionType::setAzimuthRateResolution(uci::type::AnglePositiveTypeValue value) {
  azimuthRateResolution_Accessor = value;
  return *this;
}

bool SourceResolutionType::hasAzimuthRateResolution() const noexcept {
  return azimuthRateResolution_Accessor.has_value();
}

uci::type::SourceResolutionType& SourceResolutionType::clearAzimuthRateResolution() noexcept {
  azimuthRateResolution_Accessor.reset();
  return *this;
}

uci::type::AnglePositiveTypeValue SourceResolutionType::getElevationRateResolution() const {
  if (elevationRateResolution_Accessor) {
    return *elevationRateResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getElevationRateResolution(): An attempt was made to get an optional field that was not enabled, call hasElevationRateResolution() to determine if it is safe to call getElevationRateResolution()");
}

uci::type::SourceResolutionType& SourceResolutionType::setElevationRateResolution(uci::type::AnglePositiveTypeValue value) {
  elevationRateResolution_Accessor = value;
  return *this;
}

bool SourceResolutionType::hasElevationRateResolution() const noexcept {
  return elevationRateResolution_Accessor.has_value();
}

uci::type::SourceResolutionType& SourceResolutionType::clearElevationRateResolution() noexcept {
  elevationRateResolution_Accessor.reset();
  return *this;
}

xs::Double SourceResolutionType::getCosconeY_Resolution() const {
  if (cosconeY_Resolution_Accessor) {
    return *cosconeY_Resolution_Accessor;
  }
  throw uci::base::UCIException("Error in getCosconeY_Resolution(): An attempt was made to get an optional field that was not enabled, call hasCosconeY_Resolution() to determine if it is safe to call getCosconeY_Resolution()");
}

uci::type::SourceResolutionType& SourceResolutionType::setCosconeY_Resolution(xs::Double value) {
  cosconeY_Resolution_Accessor = value;
  return *this;
}

bool SourceResolutionType::hasCosconeY_Resolution() const noexcept {
  return cosconeY_Resolution_Accessor.has_value();
}

uci::type::SourceResolutionType& SourceResolutionType::clearCosconeY_Resolution() noexcept {
  cosconeY_Resolution_Accessor.reset();
  return *this;
}

xs::Double SourceResolutionType::getCosconeZ_Resolution() const {
  if (cosconeZ_Resolution_Accessor) {
    return *cosconeZ_Resolution_Accessor;
  }
  throw uci::base::UCIException("Error in getCosconeZ_Resolution(): An attempt was made to get an optional field that was not enabled, call hasCosconeZ_Resolution() to determine if it is safe to call getCosconeZ_Resolution()");
}

uci::type::SourceResolutionType& SourceResolutionType::setCosconeZ_Resolution(xs::Double value) {
  cosconeZ_Resolution_Accessor = value;
  return *this;
}

bool SourceResolutionType::hasCosconeZ_Resolution() const noexcept {
  return cosconeZ_Resolution_Accessor.has_value();
}

uci::type::SourceResolutionType& SourceResolutionType::clearCosconeZ_Resolution() noexcept {
  cosconeZ_Resolution_Accessor.reset();
  return *this;
}

xs::Double SourceResolutionType::getCosconeY_RateResolution() const {
  if (cosconeY_RateResolution_Accessor) {
    return *cosconeY_RateResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getCosconeY_RateResolution(): An attempt was made to get an optional field that was not enabled, call hasCosconeY_RateResolution() to determine if it is safe to call getCosconeY_RateResolution()");
}

uci::type::SourceResolutionType& SourceResolutionType::setCosconeY_RateResolution(xs::Double value) {
  cosconeY_RateResolution_Accessor = value;
  return *this;
}

bool SourceResolutionType::hasCosconeY_RateResolution() const noexcept {
  return cosconeY_RateResolution_Accessor.has_value();
}

uci::type::SourceResolutionType& SourceResolutionType::clearCosconeY_RateResolution() noexcept {
  cosconeY_RateResolution_Accessor.reset();
  return *this;
}

xs::Double SourceResolutionType::getCosconeZ_RateResolution() const {
  if (cosconeZ_RateResolution_Accessor) {
    return *cosconeZ_RateResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getCosconeZ_RateResolution(): An attempt was made to get an optional field that was not enabled, call hasCosconeZ_RateResolution() to determine if it is safe to call getCosconeZ_RateResolution()");
}

uci::type::SourceResolutionType& SourceResolutionType::setCosconeZ_RateResolution(xs::Double value) {
  cosconeZ_RateResolution_Accessor = value;
  return *this;
}

bool SourceResolutionType::hasCosconeZ_RateResolution() const noexcept {
  return cosconeZ_RateResolution_Accessor.has_value();
}

uci::type::SourceResolutionType& SourceResolutionType::clearCosconeZ_RateResolution() noexcept {
  cosconeZ_RateResolution_Accessor.reset();
  return *this;
}

std::unique_ptr<SourceResolutionType> SourceResolutionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceResolutionType : type};
  return (requestedType == uci::type::accessorType::sourceResolutionType) ? boost::make_unique<SourceResolutionType>() : nullptr;
}

/**  */
namespace SourceResolutionType_Names {

constexpr const char* Extern_Type_Name{"SourceResolutionType"};
constexpr const char* RangeResolution_Name{"RangeResolution"};
constexpr const char* RangeRateResolution_Name{"RangeRateResolution"};
constexpr const char* AzimuthResolution_Name{"AzimuthResolution"};
constexpr const char* ElevationResolution_Name{"ElevationResolution"};
constexpr const char* AzimuthRateResolution_Name{"AzimuthRateResolution"};
constexpr const char* ElevationRateResolution_Name{"ElevationRateResolution"};
constexpr const char* CosconeY_Resolution_Name{"CosconeY_Resolution"};
constexpr const char* CosconeZ_Resolution_Name{"CosconeZ_Resolution"};
constexpr const char* CosconeY_RateResolution_Name{"CosconeY_RateResolution"};
constexpr const char* CosconeZ_RateResolution_Name{"CosconeZ_RateResolution"};

} // namespace SourceResolutionType_Names

void SourceResolutionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SourceResolutionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SourceResolutionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::RangeResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRangeResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::RangeRateResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRangeRateResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::AzimuthResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzimuthResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::ElevationResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setElevationResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::AzimuthRateResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzimuthRateResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::ElevationRateResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setElevationRateResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::CosconeY_Resolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeY_Resolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::CosconeZ_Resolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeZ_Resolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::CosconeY_RateResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeY_RateResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::CosconeZ_RateResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeZ_RateResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string SourceResolutionType::serialize(const uci::type::SourceResolutionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SourceResolutionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SourceResolutionType_Names::Extern_Type_Name);
  }
  if (accessor.hasRangeResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRangeResolution(), node, SourceResolutionType_Names::RangeResolution_Name);
  }
  if (accessor.hasRangeRateResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRangeRateResolution(), node, SourceResolutionType_Names::RangeRateResolution_Name);
  }
  if (accessor.hasAzimuthResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAzimuthResolution(), node, SourceResolutionType_Names::AzimuthResolution_Name);
  }
  if (accessor.hasElevationResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getElevationResolution(), node, SourceResolutionType_Names::ElevationResolution_Name);
  }
  if (accessor.hasAzimuthRateResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAzimuthRateResolution(), node, SourceResolutionType_Names::AzimuthRateResolution_Name);
  }
  if (accessor.hasElevationRateResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getElevationRateResolution(), node, SourceResolutionType_Names::ElevationRateResolution_Name);
  }
  if (accessor.hasCosconeY_Resolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeY_Resolution(), node, SourceResolutionType_Names::CosconeY_Resolution_Name);
  }
  if (accessor.hasCosconeZ_Resolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeZ_Resolution(), node, SourceResolutionType_Names::CosconeZ_Resolution_Name);
  }
  if (accessor.hasCosconeY_RateResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeY_RateResolution(), node, SourceResolutionType_Names::CosconeY_RateResolution_Name);
  }
  if (accessor.hasCosconeZ_RateResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeZ_RateResolution(), node, SourceResolutionType_Names::CosconeZ_RateResolution_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SourceResolutionType& SourceResolutionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SourceResolutionType>().release());
}

uci::type::SourceResolutionType& SourceResolutionType::create(const uci::type::SourceResolutionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SourceResolutionType> newAccessor{boost::make_unique<asb_uci::type::SourceResolutionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SourceResolutionType::destroy(uci::type::SourceResolutionType& accessor) {
  delete dynamic_cast<asb_uci::type::SourceResolutionType*>(&accessor);
}

} // namespace type

} // namespace uci

