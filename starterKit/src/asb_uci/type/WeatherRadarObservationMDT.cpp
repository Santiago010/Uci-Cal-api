/** @file WeatherRadarObservationMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/WeatherRadarObservationMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/Point3D_Type.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/WeatherRadarCellSizeType.h"
#include "../../../include/asb_uci/type/WeatherRadarCellType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point3D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherRadarCellSizeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherRadarCellType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherRadarObservationMDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WeatherRadarObservationMDT::WeatherRadarObservationMDT()
  : observingSystemID_Accessor{boost::make_unique<SystemID_Type>()},
    location_Accessor{boost::make_unique<Point3D_Type>()},
    cellSize_Accessor{boost::make_unique<WeatherRadarCellSizeType>()},
    cell_Accessor{boost::make_unique<Cell>(1, SIZE_MAX)} {
}

WeatherRadarObservationMDT::~WeatherRadarObservationMDT() = default;

void WeatherRadarObservationMDT::copy(const uci::type::WeatherRadarObservationMDT& accessor) {
  copyImpl(accessor, false);
}

void WeatherRadarObservationMDT::copyImpl(const uci::type::WeatherRadarObservationMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const WeatherRadarObservationMDT&>(accessor);
    setObservingSystemID(*(accessorImpl.observingSystemID_Accessor));
    setLocation(*(accessorImpl.location_Accessor));
    setTimestamp(accessorImpl.timestamp_Accessor);
    if (accessorImpl.capabilityID_Accessor) {
      setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    } else {
      capabilityID_Accessor.reset();
    }
    setCellSize(*(accessorImpl.cellSize_Accessor));
    setCell(*(accessorImpl.cell_Accessor));
  }
}

void WeatherRadarObservationMDT::reset() noexcept {
  observingSystemID_Accessor->reset();
  if (location_Accessor->getAccessorType() != uci::type::accessorType::point3D_Type) {
    location_Accessor = boost::make_unique<Point3D_Type>();
  } else {
    location_Accessor->reset();
  }
  timestamp_Accessor = 0;
  capabilityID_Accessor.reset();
  cellSize_Accessor->reset();
  cell_Accessor->reset();
}

const uci::type::SystemID_Type& WeatherRadarObservationMDT::getObservingSystemID() const {
  return *observingSystemID_Accessor;
}

uci::type::SystemID_Type& WeatherRadarObservationMDT::getObservingSystemID() {
  return *observingSystemID_Accessor;
}

uci::type::WeatherRadarObservationMDT& WeatherRadarObservationMDT::setObservingSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != observingSystemID_Accessor.get()) {
    observingSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::Point3D_Type& WeatherRadarObservationMDT::getLocation() const {
  return *location_Accessor;
}

uci::type::Point3D_Type& WeatherRadarObservationMDT::getLocation() {
  return *location_Accessor;
}

uci::type::WeatherRadarObservationMDT& WeatherRadarObservationMDT::setLocation(const uci::type::Point3D_Type& accessor) {
  enableLocation(accessor.getAccessorType());
  if (&accessor != location_Accessor.get()) {
    location_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point3D_Type& WeatherRadarObservationMDT::enableLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!location_Accessor) || (location_Accessor->getAccessorType() != requestedType)) {
    location_Accessor = Point3D_Type::create(requestedType);
    if (!location_Accessor) {
      throw uci::base::UCIException("Error in enableLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *location_Accessor;
}

uci::type::DateTimeTypeValue WeatherRadarObservationMDT::getTimestamp() const {
  return timestamp_Accessor;
}

uci::type::WeatherRadarObservationMDT& WeatherRadarObservationMDT::setTimestamp(uci::type::DateTimeTypeValue value) {
  timestamp_Accessor = value;
  return *this;
}


uci::type::CapabilityID_Type& WeatherRadarObservationMDT::getCapabilityID_() const {
  if (capabilityID_Accessor) {
    return *capabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasCapabilityID() to determine if it is safe to call getCapabilityID()");
}

const uci::type::CapabilityID_Type& WeatherRadarObservationMDT::getCapabilityID() const {
  return getCapabilityID_();
}

uci::type::CapabilityID_Type& WeatherRadarObservationMDT::getCapabilityID() {
  return getCapabilityID_();
}

uci::type::WeatherRadarObservationMDT& WeatherRadarObservationMDT::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableCapabilityID();
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeatherRadarObservationMDT::hasCapabilityID() const noexcept {
  return static_cast<bool>(capabilityID_Accessor);
}

uci::type::CapabilityID_Type& WeatherRadarObservationMDT::enableCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!capabilityID_Accessor) || (capabilityID_Accessor->getAccessorType() != requestedType)) {
    capabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!capabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityID_Accessor;
}

uci::type::WeatherRadarObservationMDT& WeatherRadarObservationMDT::clearCapabilityID() noexcept {
  capabilityID_Accessor.reset();
  return *this;
}

const uci::type::WeatherRadarCellSizeType& WeatherRadarObservationMDT::getCellSize() const {
  return *cellSize_Accessor;
}

uci::type::WeatherRadarCellSizeType& WeatherRadarObservationMDT::getCellSize() {
  return *cellSize_Accessor;
}

uci::type::WeatherRadarObservationMDT& WeatherRadarObservationMDT::setCellSize(const uci::type::WeatherRadarCellSizeType& accessor) {
  if (&accessor != cellSize_Accessor.get()) {
    cellSize_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::WeatherRadarObservationMDT::Cell& WeatherRadarObservationMDT::getCell() const {
  return *cell_Accessor;
}

uci::type::WeatherRadarObservationMDT::Cell& WeatherRadarObservationMDT::getCell() {
  return *cell_Accessor;
}

uci::type::WeatherRadarObservationMDT& WeatherRadarObservationMDT::setCell(const uci::type::WeatherRadarObservationMDT::Cell& accessor) {
  if (&accessor != cell_Accessor.get()) {
    cell_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<WeatherRadarObservationMDT> WeatherRadarObservationMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherRadarObservationMDT : type};
  return (requestedType == uci::type::accessorType::weatherRadarObservationMDT) ? boost::make_unique<WeatherRadarObservationMDT>() : nullptr;
}

/**  */
namespace WeatherRadarObservationMDT_Names {

constexpr const char* Extern_Type_Name{"WeatherRadarObservationMDT"};
constexpr const char* ObservingSystemID_Name{"ObservingSystemID"};
constexpr const char* Location_Name{"Location"};
constexpr const char* Timestamp_Name{"Timestamp"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* CellSize_Name{"CellSize"};
constexpr const char* Cell_Name{"Cell"};

} // namespace WeatherRadarObservationMDT_Names

void WeatherRadarObservationMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherRadarObservationMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeatherRadarObservationMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WeatherRadarObservationMDT_Names::ObservingSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getObservingSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarObservationMDT_Names::Location_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableLocation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarObservationMDT_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherRadarObservationMDT_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarObservationMDT_Names::CellSize_Name) {
      WeatherRadarCellSizeType::deserialize(valueType.second, accessor.getCellSize(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarObservationMDT_Names::Cell_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WeatherRadarObservationMDT::Cell& boundedList = accessor.getCell();
        const uci::type::WeatherRadarObservationMDT::Cell::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::WeatherRadarCellType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string WeatherRadarObservationMDT::serialize(const uci::type::WeatherRadarObservationMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WeatherRadarObservationMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WeatherRadarObservationMDT_Names::Extern_Type_Name);
  }
  SystemID_Type::serialize(accessor.getObservingSystemID(), node, WeatherRadarObservationMDT_Names::ObservingSystemID_Name);
  Point3D_Type::serialize(accessor.getLocation(), node, WeatherRadarObservationMDT_Names::Location_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, WeatherRadarObservationMDT_Names::Timestamp_Name);
  if (accessor.hasCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getCapabilityID(), node, WeatherRadarObservationMDT_Names::CapabilityID_Name);
  }
  WeatherRadarCellSizeType::serialize(accessor.getCellSize(), node, WeatherRadarObservationMDT_Names::CellSize_Name);
  {
    const uci::type::WeatherRadarObservationMDT::Cell& boundedList = accessor.getCell();
    for (uci::type::WeatherRadarObservationMDT::Cell::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::WeatherRadarCellType::serialize(boundedList.at(i), node, WeatherRadarObservationMDT_Names::Cell_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WeatherRadarObservationMDT& WeatherRadarObservationMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WeatherRadarObservationMDT>().release());
}

uci::type::WeatherRadarObservationMDT& WeatherRadarObservationMDT::create(const uci::type::WeatherRadarObservationMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WeatherRadarObservationMDT> newAccessor{boost::make_unique<asb_uci::type::WeatherRadarObservationMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WeatherRadarObservationMDT::destroy(uci::type::WeatherRadarObservationMDT& accessor) {
  delete dynamic_cast<asb_uci::type::WeatherRadarObservationMDT*>(&accessor);
}

} // namespace type

} // namespace uci

