/** @file PlanActivationPolicyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PlanActivationPolicyType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ApprovalPolicyBaseType.h"
#include "../../../include/asb_uci/type/MissionPlanActivationSettingType.h"
#include "../../../include/asb_uci/type/PlanPartsType.h"
#include "../../../include/asb_uci/type/SubPlanActivationSettingType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApprovalPolicyBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanActivationSettingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanActivationPolicyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanPartsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubPlanActivationSettingType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanActivationPolicyType::PlanActivationPolicyType()
  : byMissionPlan_Accessor{boost::make_unique<ByMissionPlan>(0, 2)},
    bySubPlan_Accessor{boost::make_unique<BySubPlan>(0, 9)} {
}

PlanActivationPolicyType::~PlanActivationPolicyType() = default;

void PlanActivationPolicyType::copy(const uci::type::PlanActivationPolicyType& accessor) {
  copyImpl(accessor, false);
}

void PlanActivationPolicyType::copyImpl(const uci::type::PlanActivationPolicyType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlanActivationPolicyType&>(accessor);
    setByMissionPlan(*(accessorImpl.byMissionPlan_Accessor));
    setBySubPlan(*(accessorImpl.bySubPlan_Accessor));
    if (accessorImpl.byPlanParts_Accessor) {
      setByPlanParts(*(accessorImpl.byPlanParts_Accessor));
    } else {
      byPlanParts_Accessor.reset();
    }
    if (accessorImpl.policy_Accessor) {
      setPolicy(*(accessorImpl.policy_Accessor));
    } else {
      policy_Accessor.reset();
    }
  }
}

void PlanActivationPolicyType::reset() noexcept {
  byMissionPlan_Accessor->reset();
  bySubPlan_Accessor->reset();
  byPlanParts_Accessor.reset();
  policy_Accessor.reset();
}

const uci::type::PlanActivationPolicyType::ByMissionPlan& PlanActivationPolicyType::getByMissionPlan() const {
  return *byMissionPlan_Accessor;
}

uci::type::PlanActivationPolicyType::ByMissionPlan& PlanActivationPolicyType::getByMissionPlan() {
  return *byMissionPlan_Accessor;
}

uci::type::PlanActivationPolicyType& PlanActivationPolicyType::setByMissionPlan(const uci::type::PlanActivationPolicyType::ByMissionPlan& accessor) {
  if (&accessor != byMissionPlan_Accessor.get()) {
    byMissionPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlanActivationPolicyType::BySubPlan& PlanActivationPolicyType::getBySubPlan() const {
  return *bySubPlan_Accessor;
}

uci::type::PlanActivationPolicyType::BySubPlan& PlanActivationPolicyType::getBySubPlan() {
  return *bySubPlan_Accessor;
}

uci::type::PlanActivationPolicyType& PlanActivationPolicyType::setBySubPlan(const uci::type::PlanActivationPolicyType::BySubPlan& accessor) {
  if (&accessor != bySubPlan_Accessor.get()) {
    bySubPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanPartsType& PlanActivationPolicyType::getByPlanParts_() const {
  if (byPlanParts_Accessor) {
    return *byPlanParts_Accessor;
  }
  throw uci::base::UCIException("Error in getByPlanParts(): An attempt was made to get an optional field that was not enabled, call hasByPlanParts() to determine if it is safe to call getByPlanParts()");
}

const uci::type::PlanPartsType& PlanActivationPolicyType::getByPlanParts() const {
  return getByPlanParts_();
}

uci::type::PlanPartsType& PlanActivationPolicyType::getByPlanParts() {
  return getByPlanParts_();
}

uci::type::PlanActivationPolicyType& PlanActivationPolicyType::setByPlanParts(const uci::type::PlanPartsType& accessor) {
  enableByPlanParts(accessor.getAccessorType());
  if (&accessor != byPlanParts_Accessor.get()) {
    byPlanParts_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PlanActivationPolicyType::hasByPlanParts() const noexcept {
  return static_cast<bool>(byPlanParts_Accessor);
}

uci::type::PlanPartsType& PlanActivationPolicyType::enableByPlanParts(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planPartsType : type};
  if ((!byPlanParts_Accessor) || (byPlanParts_Accessor->getAccessorType() != requestedType)) {
    byPlanParts_Accessor = PlanPartsType::create(requestedType);
    if (!byPlanParts_Accessor) {
      throw uci::base::UCIException("Error in enableByPlanParts(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byPlanParts_Accessor;
}

uci::type::PlanActivationPolicyType& PlanActivationPolicyType::clearByPlanParts() noexcept {
  byPlanParts_Accessor.reset();
  return *this;
}

uci::type::ApprovalPolicyBaseType& PlanActivationPolicyType::getPolicy_() const {
  if (policy_Accessor) {
    return *policy_Accessor;
  }
  throw uci::base::UCIException("Error in getPolicy(): An attempt was made to get an optional field that was not enabled, call hasPolicy() to determine if it is safe to call getPolicy()");
}

const uci::type::ApprovalPolicyBaseType& PlanActivationPolicyType::getPolicy() const {
  return getPolicy_();
}

uci::type::ApprovalPolicyBaseType& PlanActivationPolicyType::getPolicy() {
  return getPolicy_();
}

uci::type::PlanActivationPolicyType& PlanActivationPolicyType::setPolicy(const uci::type::ApprovalPolicyBaseType& accessor) {
  enablePolicy(accessor.getAccessorType());
  if (&accessor != policy_Accessor.get()) {
    policy_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PlanActivationPolicyType::hasPolicy() const noexcept {
  return static_cast<bool>(policy_Accessor);
}

uci::type::ApprovalPolicyBaseType& PlanActivationPolicyType::enablePolicy(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::approvalPolicyBaseType : type};
  if ((!policy_Accessor) || (policy_Accessor->getAccessorType() != requestedType)) {
    policy_Accessor = ApprovalPolicyBaseType::create(requestedType);
    if (!policy_Accessor) {
      throw uci::base::UCIException("Error in enablePolicy(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *policy_Accessor;
}

uci::type::PlanActivationPolicyType& PlanActivationPolicyType::clearPolicy() noexcept {
  policy_Accessor.reset();
  return *this;
}

std::unique_ptr<PlanActivationPolicyType> PlanActivationPolicyType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planActivationPolicyType : type};
  return (requestedType == uci::type::accessorType::planActivationPolicyType) ? boost::make_unique<PlanActivationPolicyType>() : nullptr;
}

/**  */
namespace PlanActivationPolicyType_Names {

constexpr const char* Extern_Type_Name{"PlanActivationPolicyType"};
constexpr const char* ByMissionPlan_Name{"ByMissionPlan"};
constexpr const char* BySubPlan_Name{"BySubPlan"};
constexpr const char* ByPlanParts_Name{"ByPlanParts"};
constexpr const char* Policy_Name{"Policy"};

} // namespace PlanActivationPolicyType_Names

void PlanActivationPolicyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanActivationPolicyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanActivationPolicyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanActivationPolicyType_Names::ByMissionPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanActivationPolicyType::ByMissionPlan& boundedList = accessor.getByMissionPlan();
        const uci::type::PlanActivationPolicyType::ByMissionPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MissionPlanActivationSettingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanActivationPolicyType_Names::BySubPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanActivationPolicyType::BySubPlan& boundedList = accessor.getBySubPlan();
        const uci::type::PlanActivationPolicyType::BySubPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SubPlanActivationSettingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanActivationPolicyType_Names::ByPlanParts_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableByPlanParts(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanActivationPolicyType_Names::Policy_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePolicy(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string PlanActivationPolicyType::serialize(const uci::type::PlanActivationPolicyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanActivationPolicyType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanActivationPolicyType_Names::Extern_Type_Name);
  }
  {
    const uci::type::PlanActivationPolicyType::ByMissionPlan& boundedList = accessor.getByMissionPlan();
    for (uci::type::PlanActivationPolicyType::ByMissionPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MissionPlanActivationSettingType::serialize(boundedList.at(i), node, PlanActivationPolicyType_Names::ByMissionPlan_Name);
    }
  }
  {
    const uci::type::PlanActivationPolicyType::BySubPlan& boundedList = accessor.getBySubPlan();
    for (uci::type::PlanActivationPolicyType::BySubPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SubPlanActivationSettingType::serialize(boundedList.at(i), node, PlanActivationPolicyType_Names::BySubPlan_Name);
    }
  }
  if (accessor.hasByPlanParts()) {
    PlanPartsType::serialize(accessor.getByPlanParts(), node, PlanActivationPolicyType_Names::ByPlanParts_Name);
  }
  if (accessor.hasPolicy()) {
    ApprovalPolicyBaseType::serialize(accessor.getPolicy(), node, PlanActivationPolicyType_Names::Policy_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanActivationPolicyType& PlanActivationPolicyType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanActivationPolicyType>().release());
}

uci::type::PlanActivationPolicyType& PlanActivationPolicyType::create(const uci::type::PlanActivationPolicyType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanActivationPolicyType> newAccessor{boost::make_unique<asb_uci::type::PlanActivationPolicyType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanActivationPolicyType::destroy(uci::type::PlanActivationPolicyType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanActivationPolicyType*>(&accessor);
}

} // namespace type

} // namespace uci

