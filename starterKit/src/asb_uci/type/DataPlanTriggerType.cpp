/** @file DataPlanTriggerType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DataPlanTriggerType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommTerminalPlanID_Type.h"
#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/type/MissionID_Type.h"
#include "asb_uci/type/OpVolumeID_Type.h"
#include "asb_uci/type/OpZoneID_Type.h"
#include "asb_uci/type/PlansReferenceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommTerminalPlanID_Type.h"
#include "uci/type/DataPlanTriggerType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/MissionID_Type.h"
#include "uci/type/OpVolumeID_Type.h"
#include "uci/type/OpZoneID_Type.h"
#include "uci/type/PlansReferenceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DataPlanTriggerType::DataPlanTriggerType()
  : missionID_Accessor{boost::make_unique<MissionID>(0, SIZE_MAX)},
    commTerminalPlanID_Accessor{boost::make_unique<CommTerminalPlanID>(0, SIZE_MAX)},
    effectiveTimeSpans_Accessor{boost::make_unique<EffectiveTimeSpans>(0, SIZE_MAX)},
    opZoneID_Accessor{boost::make_unique<OpZoneID>(0, SIZE_MAX)},
    opVolumeID_Accessor{boost::make_unique<OpVolumeID>(0, SIZE_MAX)} {
}

DataPlanTriggerType::~DataPlanTriggerType() = default;

void DataPlanTriggerType::copy(const uci::type::DataPlanTriggerType& accessor) {
  copyImpl(accessor, false);
}

void DataPlanTriggerType::copyImpl(const uci::type::DataPlanTriggerType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DataPlanTriggerType&>(accessor);
    setMissionID(*(accessorImpl.missionID_Accessor));
    if (accessorImpl.planIdentifier_Accessor) {
      setPlanIdentifier(*(accessorImpl.planIdentifier_Accessor));
    } else {
      planIdentifier_Accessor.reset();
    }
    setCommTerminalPlanID(*(accessorImpl.commTerminalPlanID_Accessor));
    setEffectiveTimeSpans(*(accessorImpl.effectiveTimeSpans_Accessor));
    setOpZoneID(*(accessorImpl.opZoneID_Accessor));
    setOpVolumeID(*(accessorImpl.opVolumeID_Accessor));
  }
}

void DataPlanTriggerType::reset() noexcept {
  missionID_Accessor->reset();
  planIdentifier_Accessor.reset();
  commTerminalPlanID_Accessor->reset();
  effectiveTimeSpans_Accessor->reset();
  opZoneID_Accessor->reset();
  opVolumeID_Accessor->reset();
}

const uci::type::DataPlanTriggerType::MissionID& DataPlanTriggerType::getMissionID() const {
  return *missionID_Accessor;
}

uci::type::DataPlanTriggerType::MissionID& DataPlanTriggerType::getMissionID() {
  return *missionID_Accessor;
}

uci::type::DataPlanTriggerType& DataPlanTriggerType::setMissionID(const uci::type::DataPlanTriggerType::MissionID& accessor) {
  if (&accessor != missionID_Accessor.get()) {
    missionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlansReferenceType& DataPlanTriggerType::getPlanIdentifier_() const {
  if (planIdentifier_Accessor) {
    return *planIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getPlanIdentifier(): An attempt was made to get an optional field that was not enabled, call hasPlanIdentifier() to determine if it is safe to call getPlanIdentifier()");
}

const uci::type::PlansReferenceType& DataPlanTriggerType::getPlanIdentifier() const {
  return getPlanIdentifier_();
}

uci::type::PlansReferenceType& DataPlanTriggerType::getPlanIdentifier() {
  return getPlanIdentifier_();
}

uci::type::DataPlanTriggerType& DataPlanTriggerType::setPlanIdentifier(const uci::type::PlansReferenceType& accessor) {
  enablePlanIdentifier();
  if (&accessor != planIdentifier_Accessor.get()) {
    planIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataPlanTriggerType::hasPlanIdentifier() const noexcept {
  return static_cast<bool>(planIdentifier_Accessor);
}

uci::type::PlansReferenceType& DataPlanTriggerType::enablePlanIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::plansReferenceType : type};
  if ((!planIdentifier_Accessor) || (planIdentifier_Accessor->getAccessorType() != requestedType)) {
    planIdentifier_Accessor = PlansReferenceType::create(requestedType);
    if (!planIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enablePlanIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *planIdentifier_Accessor;
}

uci::type::DataPlanTriggerType& DataPlanTriggerType::clearPlanIdentifier() noexcept {
  planIdentifier_Accessor.reset();
  return *this;
}

const uci::type::DataPlanTriggerType::CommTerminalPlanID& DataPlanTriggerType::getCommTerminalPlanID() const {
  return *commTerminalPlanID_Accessor;
}

uci::type::DataPlanTriggerType::CommTerminalPlanID& DataPlanTriggerType::getCommTerminalPlanID() {
  return *commTerminalPlanID_Accessor;
}

uci::type::DataPlanTriggerType& DataPlanTriggerType::setCommTerminalPlanID(const uci::type::DataPlanTriggerType::CommTerminalPlanID& accessor) {
  if (&accessor != commTerminalPlanID_Accessor.get()) {
    commTerminalPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DataPlanTriggerType::EffectiveTimeSpans& DataPlanTriggerType::getEffectiveTimeSpans() const {
  return *effectiveTimeSpans_Accessor;
}

uci::type::DataPlanTriggerType::EffectiveTimeSpans& DataPlanTriggerType::getEffectiveTimeSpans() {
  return *effectiveTimeSpans_Accessor;
}

uci::type::DataPlanTriggerType& DataPlanTriggerType::setEffectiveTimeSpans(const uci::type::DataPlanTriggerType::EffectiveTimeSpans& accessor) {
  if (&accessor != effectiveTimeSpans_Accessor.get()) {
    effectiveTimeSpans_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DataPlanTriggerType::OpZoneID& DataPlanTriggerType::getOpZoneID() const {
  return *opZoneID_Accessor;
}

uci::type::DataPlanTriggerType::OpZoneID& DataPlanTriggerType::getOpZoneID() {
  return *opZoneID_Accessor;
}

uci::type::DataPlanTriggerType& DataPlanTriggerType::setOpZoneID(const uci::type::DataPlanTriggerType::OpZoneID& accessor) {
  if (&accessor != opZoneID_Accessor.get()) {
    opZoneID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DataPlanTriggerType::OpVolumeID& DataPlanTriggerType::getOpVolumeID() const {
  return *opVolumeID_Accessor;
}

uci::type::DataPlanTriggerType::OpVolumeID& DataPlanTriggerType::getOpVolumeID() {
  return *opVolumeID_Accessor;
}

uci::type::DataPlanTriggerType& DataPlanTriggerType::setOpVolumeID(const uci::type::DataPlanTriggerType::OpVolumeID& accessor) {
  if (&accessor != opVolumeID_Accessor.get()) {
    opVolumeID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<DataPlanTriggerType> DataPlanTriggerType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataPlanTriggerType : type};
  return (requestedType == uci::type::accessorType::dataPlanTriggerType) ? boost::make_unique<DataPlanTriggerType>() : nullptr;
}

/**  */
namespace DataPlanTriggerType_Names {

constexpr const char* Extern_Type_Name{"DataPlanTriggerType"};
constexpr const char* MissionID_Name{"MissionID"};
constexpr const char* PlanIdentifier_Name{"PlanIdentifier"};
constexpr const char* CommTerminalPlanID_Name{"CommTerminalPlanID"};
constexpr const char* EffectiveTimeSpans_Name{"EffectiveTimeSpans"};
constexpr const char* OpZoneID_Name{"OpZoneID"};
constexpr const char* OpVolumeID_Name{"OpVolumeID"};

} // namespace DataPlanTriggerType_Names

void DataPlanTriggerType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DataPlanTriggerType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DataPlanTriggerType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DataPlanTriggerType_Names::MissionID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DataPlanTriggerType::MissionID& boundedList = accessor.getMissionID();
        const uci::type::DataPlanTriggerType::MissionID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MissionID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DataPlanTriggerType_Names::PlanIdentifier_Name) {
      PlansReferenceType::deserialize(valueType.second, accessor.enablePlanIdentifier(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataPlanTriggerType_Names::CommTerminalPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DataPlanTriggerType::CommTerminalPlanID& boundedList = accessor.getCommTerminalPlanID();
        const uci::type::DataPlanTriggerType::CommTerminalPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommTerminalPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DataPlanTriggerType_Names::EffectiveTimeSpans_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DataPlanTriggerType::EffectiveTimeSpans& boundedList = accessor.getEffectiveTimeSpans();
        const uci::type::DataPlanTriggerType::EffectiveTimeSpans::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DateTimeRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DataPlanTriggerType_Names::OpZoneID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DataPlanTriggerType::OpZoneID& boundedList = accessor.getOpZoneID();
        const uci::type::DataPlanTriggerType::OpZoneID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OpZoneID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DataPlanTriggerType_Names::OpVolumeID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DataPlanTriggerType::OpVolumeID& boundedList = accessor.getOpVolumeID();
        const uci::type::DataPlanTriggerType::OpVolumeID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OpVolumeID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string DataPlanTriggerType::serialize(const uci::type::DataPlanTriggerType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DataPlanTriggerType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DataPlanTriggerType_Names::Extern_Type_Name);
  }
  {
    const uci::type::DataPlanTriggerType::MissionID& boundedList = accessor.getMissionID();
    for (uci::type::DataPlanTriggerType::MissionID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MissionID_Type::serialize(boundedList.at(i), node, DataPlanTriggerType_Names::MissionID_Name);
    }
  }
  if (accessor.hasPlanIdentifier()) {
    PlansReferenceType::serialize(accessor.getPlanIdentifier(), node, DataPlanTriggerType_Names::PlanIdentifier_Name);
  }
  {
    const uci::type::DataPlanTriggerType::CommTerminalPlanID& boundedList = accessor.getCommTerminalPlanID();
    for (uci::type::DataPlanTriggerType::CommTerminalPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommTerminalPlanID_Type::serialize(boundedList.at(i), node, DataPlanTriggerType_Names::CommTerminalPlanID_Name);
    }
  }
  {
    const uci::type::DataPlanTriggerType::EffectiveTimeSpans& boundedList = accessor.getEffectiveTimeSpans();
    for (uci::type::DataPlanTriggerType::EffectiveTimeSpans::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DateTimeRangeType::serialize(boundedList.at(i), node, DataPlanTriggerType_Names::EffectiveTimeSpans_Name);
    }
  }
  {
    const uci::type::DataPlanTriggerType::OpZoneID& boundedList = accessor.getOpZoneID();
    for (uci::type::DataPlanTriggerType::OpZoneID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OpZoneID_Type::serialize(boundedList.at(i), node, DataPlanTriggerType_Names::OpZoneID_Name);
    }
  }
  {
    const uci::type::DataPlanTriggerType::OpVolumeID& boundedList = accessor.getOpVolumeID();
    for (uci::type::DataPlanTriggerType::OpVolumeID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OpVolumeID_Type::serialize(boundedList.at(i), node, DataPlanTriggerType_Names::OpVolumeID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DataPlanTriggerType& DataPlanTriggerType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DataPlanTriggerType>().release());
}

uci::type::DataPlanTriggerType& DataPlanTriggerType::create(const uci::type::DataPlanTriggerType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DataPlanTriggerType> newAccessor{boost::make_unique<asb_uci::type::DataPlanTriggerType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DataPlanTriggerType::destroy(uci::type::DataPlanTriggerType& accessor) {
  delete dynamic_cast<asb_uci::type::DataPlanTriggerType*>(&accessor);
}

} // namespace type

} // namespace uci

