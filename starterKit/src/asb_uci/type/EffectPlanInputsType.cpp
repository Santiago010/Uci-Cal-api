/** @file EffectPlanInputsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EffectPlanInputsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EffectAllocationType.h"
#include "../../../include/asb_uci/type/EffectPlanConstraintType.h"
#include "../../../include/asb_uci/type/EffectPlanPartsType.h"
#include "../../../include/asb_uci/type/PlanInputsCoreType.h"
#include "../../../include/asb_uci/type/RequirementAssociationConstraintType.h"
#include "../../../include/asb_uci/type/RequirementPlanningCandidateType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EffectAllocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EffectPlanConstraintType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EffectPlanInputsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EffectPlanPartsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementAssociationConstraintType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementPlanningCandidateType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EffectPlanInputsType::EffectPlanInputsType()
  : planningCandidate_Accessor{boost::make_unique<PlanningCandidate>(0, SIZE_MAX)},
    proposedEffect_Accessor{boost::make_unique<ProposedEffect>(0, SIZE_MAX)},
    associationConstraint_Accessor{boost::make_unique<AssociationConstraint>(0, SIZE_MAX)} {
}

EffectPlanInputsType::~EffectPlanInputsType() = default;

void EffectPlanInputsType::copy(const uci::type::EffectPlanInputsType& accessor) {
  copyImpl(accessor, false);
}

void EffectPlanInputsType::copyImpl(const uci::type::EffectPlanInputsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    PlanInputsCoreType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const EffectPlanInputsType&>(accessor);
    setPlanningCandidate(*(accessorImpl.planningCandidate_Accessor));
    if (accessorImpl.proposedEffectPlan_Accessor) {
      setProposedEffectPlan(*(accessorImpl.proposedEffectPlan_Accessor));
    } else {
      proposedEffectPlan_Accessor.reset();
    }
    setProposedEffect(*(accessorImpl.proposedEffect_Accessor));
    setAssociationConstraint(*(accessorImpl.associationConstraint_Accessor));
    if (accessorImpl.outputPlanType_Accessor) {
      setOutputPlanType(*(accessorImpl.outputPlanType_Accessor));
    } else {
      outputPlanType_Accessor.reset();
    }
  }
}

void EffectPlanInputsType::reset() noexcept {
  PlanInputsCoreType::reset();
  planningCandidate_Accessor->reset();
  proposedEffectPlan_Accessor.reset();
  proposedEffect_Accessor->reset();
  associationConstraint_Accessor->reset();
  outputPlanType_Accessor.reset();
}

const uci::type::EffectPlanInputsType::PlanningCandidate& EffectPlanInputsType::getPlanningCandidate() const {
  return *planningCandidate_Accessor;
}

uci::type::EffectPlanInputsType::PlanningCandidate& EffectPlanInputsType::getPlanningCandidate() {
  return *planningCandidate_Accessor;
}

uci::type::EffectPlanInputsType& EffectPlanInputsType::setPlanningCandidate(const uci::type::EffectPlanInputsType::PlanningCandidate& accessor) {
  if (&accessor != planningCandidate_Accessor.get()) {
    planningCandidate_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EffectPlanConstraintType& EffectPlanInputsType::getProposedEffectPlan_() const {
  if (proposedEffectPlan_Accessor) {
    return *proposedEffectPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getProposedEffectPlan(): An attempt was made to get an optional field that was not enabled, call hasProposedEffectPlan() to determine if it is safe to call getProposedEffectPlan()");
}

const uci::type::EffectPlanConstraintType& EffectPlanInputsType::getProposedEffectPlan() const {
  return getProposedEffectPlan_();
}

uci::type::EffectPlanConstraintType& EffectPlanInputsType::getProposedEffectPlan() {
  return getProposedEffectPlan_();
}

uci::type::EffectPlanInputsType& EffectPlanInputsType::setProposedEffectPlan(const uci::type::EffectPlanConstraintType& accessor) {
  enableProposedEffectPlan();
  if (&accessor != proposedEffectPlan_Accessor.get()) {
    proposedEffectPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EffectPlanInputsType::hasProposedEffectPlan() const noexcept {
  return static_cast<bool>(proposedEffectPlan_Accessor);
}

uci::type::EffectPlanConstraintType& EffectPlanInputsType::enableProposedEffectPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectPlanConstraintType : type};
  if ((!proposedEffectPlan_Accessor) || (proposedEffectPlan_Accessor->getAccessorType() != requestedType)) {
    proposedEffectPlan_Accessor = EffectPlanConstraintType::create(requestedType);
    if (!proposedEffectPlan_Accessor) {
      throw uci::base::UCIException("Error in enableProposedEffectPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *proposedEffectPlan_Accessor;
}

uci::type::EffectPlanInputsType& EffectPlanInputsType::clearProposedEffectPlan() noexcept {
  proposedEffectPlan_Accessor.reset();
  return *this;
}

const uci::type::EffectPlanInputsType::ProposedEffect& EffectPlanInputsType::getProposedEffect() const {
  return *proposedEffect_Accessor;
}

uci::type::EffectPlanInputsType::ProposedEffect& EffectPlanInputsType::getProposedEffect() {
  return *proposedEffect_Accessor;
}

uci::type::EffectPlanInputsType& EffectPlanInputsType::setProposedEffect(const uci::type::EffectPlanInputsType::ProposedEffect& accessor) {
  if (&accessor != proposedEffect_Accessor.get()) {
    proposedEffect_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EffectPlanInputsType::AssociationConstraint& EffectPlanInputsType::getAssociationConstraint() const {
  return *associationConstraint_Accessor;
}

uci::type::EffectPlanInputsType::AssociationConstraint& EffectPlanInputsType::getAssociationConstraint() {
  return *associationConstraint_Accessor;
}

uci::type::EffectPlanInputsType& EffectPlanInputsType::setAssociationConstraint(const uci::type::EffectPlanInputsType::AssociationConstraint& accessor) {
  if (&accessor != associationConstraint_Accessor.get()) {
    associationConstraint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EffectPlanPartsType& EffectPlanInputsType::getOutputPlanType_() const {
  if (outputPlanType_Accessor) {
    return *outputPlanType_Accessor;
  }
  throw uci::base::UCIException("Error in getOutputPlanType(): An attempt was made to get an optional field that was not enabled, call hasOutputPlanType() to determine if it is safe to call getOutputPlanType()");
}

const uci::type::EffectPlanPartsType& EffectPlanInputsType::getOutputPlanType() const {
  return getOutputPlanType_();
}

uci::type::EffectPlanPartsType& EffectPlanInputsType::getOutputPlanType() {
  return getOutputPlanType_();
}

uci::type::EffectPlanInputsType& EffectPlanInputsType::setOutputPlanType(const uci::type::EffectPlanPartsType& accessor) {
  enableOutputPlanType();
  if (&accessor != outputPlanType_Accessor.get()) {
    outputPlanType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EffectPlanInputsType::hasOutputPlanType() const noexcept {
  return static_cast<bool>(outputPlanType_Accessor);
}

uci::type::EffectPlanPartsType& EffectPlanInputsType::enableOutputPlanType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectPlanPartsType : type};
  if ((!outputPlanType_Accessor) || (outputPlanType_Accessor->getAccessorType() != requestedType)) {
    outputPlanType_Accessor = EffectPlanPartsType::create(requestedType);
    if (!outputPlanType_Accessor) {
      throw uci::base::UCIException("Error in enableOutputPlanType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *outputPlanType_Accessor;
}

uci::type::EffectPlanInputsType& EffectPlanInputsType::clearOutputPlanType() noexcept {
  outputPlanType_Accessor.reset();
  return *this;
}

std::unique_ptr<EffectPlanInputsType> EffectPlanInputsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectPlanInputsType : type};
  return (requestedType == uci::type::accessorType::effectPlanInputsType) ? boost::make_unique<EffectPlanInputsType>() : nullptr;
}

/**  */
namespace EffectPlanInputsType_Names {

constexpr const char* Extern_Type_Name{"EffectPlanInputsType"};
constexpr const char* PlanningCandidate_Name{"PlanningCandidate"};
constexpr const char* ProposedEffectPlan_Name{"ProposedEffectPlan"};
constexpr const char* ProposedEffect_Name{"ProposedEffect"};
constexpr const char* AssociationConstraint_Name{"AssociationConstraint"};
constexpr const char* OutputPlanType_Name{"OutputPlanType"};

} // namespace EffectPlanInputsType_Names

void EffectPlanInputsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EffectPlanInputsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EffectPlanInputsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EffectPlanInputsType_Names::PlanningCandidate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EffectPlanInputsType::PlanningCandidate& boundedList = accessor.getPlanningCandidate();
        const uci::type::EffectPlanInputsType::PlanningCandidate::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RequirementPlanningCandidateType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EffectPlanInputsType_Names::ProposedEffectPlan_Name) {
      EffectPlanConstraintType::deserialize(valueType.second, accessor.enableProposedEffectPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EffectPlanInputsType_Names::ProposedEffect_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EffectPlanInputsType::ProposedEffect& boundedList = accessor.getProposedEffect();
        const uci::type::EffectPlanInputsType::ProposedEffect::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EffectAllocationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EffectPlanInputsType_Names::AssociationConstraint_Name) {
      uci::type::EffectPlanInputsType::AssociationConstraint& boundedList = accessor.getAssociationConstraint();
      const uci::type::EffectPlanInputsType::AssociationConstraint::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::RequirementAssociationConstraintType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EffectPlanInputsType_Names::OutputPlanType_Name) {
      EffectPlanPartsType::deserialize(valueType.second, accessor.enableOutputPlanType(), nodeName, nsPrefix);
    }
  }
  PlanInputsCoreType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string EffectPlanInputsType::serialize(const uci::type::EffectPlanInputsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EffectPlanInputsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EffectPlanInputsType_Names::Extern_Type_Name);
  }
  PlanInputsCoreType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::EffectPlanInputsType::PlanningCandidate& boundedList = accessor.getPlanningCandidate();
    for (uci::type::EffectPlanInputsType::PlanningCandidate::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementPlanningCandidateType::serialize(boundedList.at(i), node, EffectPlanInputsType_Names::PlanningCandidate_Name);
    }
  }
  if (accessor.hasProposedEffectPlan()) {
    EffectPlanConstraintType::serialize(accessor.getProposedEffectPlan(), node, EffectPlanInputsType_Names::ProposedEffectPlan_Name);
  }
  {
    const uci::type::EffectPlanInputsType::ProposedEffect& boundedList = accessor.getProposedEffect();
    for (uci::type::EffectPlanInputsType::ProposedEffect::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EffectAllocationType::serialize(boundedList.at(i), node, EffectPlanInputsType_Names::ProposedEffect_Name);
    }
  }
  {
    const uci::type::EffectPlanInputsType::AssociationConstraint& boundedList = accessor.getAssociationConstraint();
    for (uci::type::EffectPlanInputsType::AssociationConstraint::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementAssociationConstraintType::serialize(boundedList.at(i), node, EffectPlanInputsType_Names::AssociationConstraint_Name);
    }
  }
  if (accessor.hasOutputPlanType()) {
    EffectPlanPartsType::serialize(accessor.getOutputPlanType(), node, EffectPlanInputsType_Names::OutputPlanType_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EffectPlanInputsType& EffectPlanInputsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EffectPlanInputsType>().release());
}

uci::type::EffectPlanInputsType& EffectPlanInputsType::create(const uci::type::EffectPlanInputsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EffectPlanInputsType> newAccessor{boost::make_unique<asb_uci::type::EffectPlanInputsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EffectPlanInputsType::destroy(uci::type::EffectPlanInputsType& accessor) {
  delete dynamic_cast<asb_uci::type::EffectPlanInputsType*>(&accessor);
}

} // namespace type

} // namespace uci

