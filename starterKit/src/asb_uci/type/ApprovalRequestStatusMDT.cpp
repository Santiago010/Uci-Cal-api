/** @file ApprovalRequestStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ApprovalRequestStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ApprovalStatusEnum.h"
#include "../../../include/asb_uci/type/CannotComplyType.h"
#include "../../../include/asb_uci/type/DMPI_ID_Type.h"
#include "../../../include/asb_uci/type/OperatorID_Type.h"
#include "../../../include/asb_uci/type/RequestStatusBaseType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApprovalRequestStatusMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApprovalStatusEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CannotComplyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ApprovalRequestStatusMDT::ApprovalRequestStatusMDT()
  : approvalRequestProcessingState_Accessor{boost::make_unique<ApprovalStatusEnum>()},
    approvedDMPI_ID_Accessor{boost::make_unique<ApprovedDMPI_ID>(0, SIZE_MAX)} {
}

ApprovalRequestStatusMDT::~ApprovalRequestStatusMDT() = default;

void ApprovalRequestStatusMDT::copy(const uci::type::ApprovalRequestStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void ApprovalRequestStatusMDT::copyImpl(const uci::type::ApprovalRequestStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestStatusBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ApprovalRequestStatusMDT&>(accessor);
    setApprovalRequestProcessingState(*(accessorImpl.approvalRequestProcessingState_Accessor));
    if (accessorImpl.approvalRequestProcessingStateReason_Accessor) {
      setApprovalRequestProcessingStateReason(*(accessorImpl.approvalRequestProcessingStateReason_Accessor));
    } else {
      approvalRequestProcessingStateReason_Accessor.reset();
    }
    if (accessorImpl.operatorID_Accessor) {
      setOperatorID(*(accessorImpl.operatorID_Accessor));
    } else {
      operatorID_Accessor.reset();
    }
    setApprovedDMPI_ID(*(accessorImpl.approvedDMPI_ID_Accessor));
  }
}

void ApprovalRequestStatusMDT::reset() noexcept {
  RequestStatusBaseType::reset();
  approvalRequestProcessingState_Accessor->reset();
  approvalRequestProcessingStateReason_Accessor.reset();
  operatorID_Accessor.reset();
  approvedDMPI_ID_Accessor->reset();
}

const uci::type::ApprovalStatusEnum& ApprovalRequestStatusMDT::getApprovalRequestProcessingState() const {
  return *approvalRequestProcessingState_Accessor;
}

uci::type::ApprovalStatusEnum& ApprovalRequestStatusMDT::getApprovalRequestProcessingState() {
  return *approvalRequestProcessingState_Accessor;
}

uci::type::ApprovalRequestStatusMDT& ApprovalRequestStatusMDT::setApprovalRequestProcessingState(const uci::type::ApprovalStatusEnum& accessor) {
  if (&accessor != approvalRequestProcessingState_Accessor.get()) {
    approvalRequestProcessingState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ApprovalRequestStatusMDT& ApprovalRequestStatusMDT::setApprovalRequestProcessingState(uci::type::ApprovalStatusEnum::EnumerationItem value) {
  approvalRequestProcessingState_Accessor->setValue(value);
  return *this;
}


uci::type::CannotComplyType& ApprovalRequestStatusMDT::getApprovalRequestProcessingStateReason_() const {
  if (approvalRequestProcessingStateReason_Accessor) {
    return *approvalRequestProcessingStateReason_Accessor;
  }
  throw uci::base::UCIException("Error in getApprovalRequestProcessingStateReason(): An attempt was made to get an optional field that was not enabled, call hasApprovalRequestProcessingStateReason() to determine if it is safe to call getApprovalRequestProcessingStateReason()");
}

const uci::type::CannotComplyType& ApprovalRequestStatusMDT::getApprovalRequestProcessingStateReason() const {
  return getApprovalRequestProcessingStateReason_();
}

uci::type::CannotComplyType& ApprovalRequestStatusMDT::getApprovalRequestProcessingStateReason() {
  return getApprovalRequestProcessingStateReason_();
}

uci::type::ApprovalRequestStatusMDT& ApprovalRequestStatusMDT::setApprovalRequestProcessingStateReason(const uci::type::CannotComplyType& accessor) {
  enableApprovalRequestProcessingStateReason(accessor.getAccessorType());
  if (&accessor != approvalRequestProcessingStateReason_Accessor.get()) {
    approvalRequestProcessingStateReason_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ApprovalRequestStatusMDT::hasApprovalRequestProcessingStateReason() const noexcept {
  return static_cast<bool>(approvalRequestProcessingStateReason_Accessor);
}

uci::type::CannotComplyType& ApprovalRequestStatusMDT::enableApprovalRequestProcessingStateReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!approvalRequestProcessingStateReason_Accessor) || (approvalRequestProcessingStateReason_Accessor->getAccessorType() != requestedType)) {
    approvalRequestProcessingStateReason_Accessor = CannotComplyType::create(requestedType);
    if (!approvalRequestProcessingStateReason_Accessor) {
      throw uci::base::UCIException("Error in enableApprovalRequestProcessingStateReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *approvalRequestProcessingStateReason_Accessor;
}

uci::type::ApprovalRequestStatusMDT& ApprovalRequestStatusMDT::clearApprovalRequestProcessingStateReason() noexcept {
  approvalRequestProcessingStateReason_Accessor.reset();
  return *this;
}

uci::type::OperatorID_Type& ApprovalRequestStatusMDT::getOperatorID_() const {
  if (operatorID_Accessor) {
    return *operatorID_Accessor;
  }
  throw uci::base::UCIException("Error in getOperatorID(): An attempt was made to get an optional field that was not enabled, call hasOperatorID() to determine if it is safe to call getOperatorID()");
}

const uci::type::OperatorID_Type& ApprovalRequestStatusMDT::getOperatorID() const {
  return getOperatorID_();
}

uci::type::OperatorID_Type& ApprovalRequestStatusMDT::getOperatorID() {
  return getOperatorID_();
}

uci::type::ApprovalRequestStatusMDT& ApprovalRequestStatusMDT::setOperatorID(const uci::type::OperatorID_Type& accessor) {
  enableOperatorID();
  if (&accessor != operatorID_Accessor.get()) {
    operatorID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ApprovalRequestStatusMDT::hasOperatorID() const noexcept {
  return static_cast<bool>(operatorID_Accessor);
}

uci::type::OperatorID_Type& ApprovalRequestStatusMDT::enableOperatorID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorID_Type : type};
  if ((!operatorID_Accessor) || (operatorID_Accessor->getAccessorType() != requestedType)) {
    operatorID_Accessor = OperatorID_Type::create(requestedType);
    if (!operatorID_Accessor) {
      throw uci::base::UCIException("Error in enableOperatorID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *operatorID_Accessor;
}

uci::type::ApprovalRequestStatusMDT& ApprovalRequestStatusMDT::clearOperatorID() noexcept {
  operatorID_Accessor.reset();
  return *this;
}

const uci::type::ApprovalRequestStatusMDT::ApprovedDMPI_ID& ApprovalRequestStatusMDT::getApprovedDMPI_ID() const {
  return *approvedDMPI_ID_Accessor;
}

uci::type::ApprovalRequestStatusMDT::ApprovedDMPI_ID& ApprovalRequestStatusMDT::getApprovedDMPI_ID() {
  return *approvedDMPI_ID_Accessor;
}

uci::type::ApprovalRequestStatusMDT& ApprovalRequestStatusMDT::setApprovedDMPI_ID(const uci::type::ApprovalRequestStatusMDT::ApprovedDMPI_ID& accessor) {
  if (&accessor != approvedDMPI_ID_Accessor.get()) {
    approvedDMPI_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ApprovalRequestStatusMDT> ApprovalRequestStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::approvalRequestStatusMDT : type};
  return (requestedType == uci::type::accessorType::approvalRequestStatusMDT) ? boost::make_unique<ApprovalRequestStatusMDT>() : nullptr;
}

/**  */
namespace ApprovalRequestStatusMDT_Names {

constexpr const char* Extern_Type_Name{"ApprovalRequestStatusMDT"};
constexpr const char* ApprovalRequestProcessingState_Name{"ApprovalRequestProcessingState"};
constexpr const char* ApprovalRequestProcessingStateReason_Name{"ApprovalRequestProcessingStateReason"};
constexpr const char* OperatorID_Name{"OperatorID"};
constexpr const char* ApprovedDMPI_ID_Name{"ApprovedDMPI_ID"};

} // namespace ApprovalRequestStatusMDT_Names

void ApprovalRequestStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ApprovalRequestStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ApprovalRequestStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ApprovalRequestStatusMDT_Names::ApprovalRequestProcessingState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getApprovalRequestProcessingState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ApprovalRequestStatusMDT_Names::ApprovalRequestProcessingStateReason_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableApprovalRequestProcessingStateReason(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ApprovalRequestStatusMDT_Names::OperatorID_Name) {
      OperatorID_Type::deserialize(valueType.second, accessor.enableOperatorID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ApprovalRequestStatusMDT_Names::ApprovedDMPI_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ApprovalRequestStatusMDT::ApprovedDMPI_ID& boundedList = accessor.getApprovedDMPI_ID();
        const uci::type::ApprovalRequestStatusMDT::ApprovedDMPI_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DMPI_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  RequestStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ApprovalRequestStatusMDT::serialize(const uci::type::ApprovalRequestStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ApprovalRequestStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ApprovalRequestStatusMDT_Names::Extern_Type_Name);
  }
  RequestStatusBaseType::serialize(accessor, node, "", false, false, false);
  ApprovalStatusEnum::serialize(accessor.getApprovalRequestProcessingState(), node, ApprovalRequestStatusMDT_Names::ApprovalRequestProcessingState_Name, false);
  if (accessor.hasApprovalRequestProcessingStateReason()) {
    CannotComplyType::serialize(accessor.getApprovalRequestProcessingStateReason(), node, ApprovalRequestStatusMDT_Names::ApprovalRequestProcessingStateReason_Name);
  }
  if (accessor.hasOperatorID()) {
    OperatorID_Type::serialize(accessor.getOperatorID(), node, ApprovalRequestStatusMDT_Names::OperatorID_Name);
  }
  {
    const uci::type::ApprovalRequestStatusMDT::ApprovedDMPI_ID& boundedList = accessor.getApprovedDMPI_ID();
    for (uci::type::ApprovalRequestStatusMDT::ApprovedDMPI_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DMPI_ID_Type::serialize(boundedList.at(i), node, ApprovalRequestStatusMDT_Names::ApprovedDMPI_ID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ApprovalRequestStatusMDT& ApprovalRequestStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ApprovalRequestStatusMDT>().release());
}

uci::type::ApprovalRequestStatusMDT& ApprovalRequestStatusMDT::create(const uci::type::ApprovalRequestStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ApprovalRequestStatusMDT> newAccessor{boost::make_unique<asb_uci::type::ApprovalRequestStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ApprovalRequestStatusMDT::destroy(uci::type::ApprovalRequestStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ApprovalRequestStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

