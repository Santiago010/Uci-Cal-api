/** @file RadarSpoilTaperType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RadarSpoilTaperType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/RadarSpoilType.h"
#include "../../../include/asb_uci/type/RadarTaperType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadarSpoilTaperType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadarSpoilType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadarTaperType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RadarSpoilTaperType::RadarSpoilTaperType() = default;

RadarSpoilTaperType::~RadarSpoilTaperType() = default;

void RadarSpoilTaperType::copy(const uci::type::RadarSpoilTaperType& accessor) {
  copyImpl(accessor, false);
}

void RadarSpoilTaperType::copyImpl(const uci::type::RadarSpoilTaperType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RadarSpoilTaperType&>(accessor);
    if (accessorImpl.taper_Accessor) {
      setTaper(*(accessorImpl.taper_Accessor));
    } else {
      taper_Accessor.reset();
    }
    if (accessorImpl.spoil_Accessor) {
      setSpoil(*(accessorImpl.spoil_Accessor));
    } else {
      spoil_Accessor.reset();
    }
  }
}

void RadarSpoilTaperType::reset() noexcept {
  taper_Accessor.reset();
  spoil_Accessor.reset();
}

uci::type::RadarSpoilTaperType::RadarSpoilTaperTypeChoice RadarSpoilTaperType::getRadarSpoilTaperTypeChoiceOrdinal() const noexcept {
  if (taper_Accessor) {
    return RADARSPOILTAPERTYPE_CHOICE_TAPER;
  }
  if (spoil_Accessor) {
    return RADARSPOILTAPERTYPE_CHOICE_SPOIL;
  }
  return RADARSPOILTAPERTYPE_CHOICE_NONE;
}

uci::type::RadarSpoilTaperType& RadarSpoilTaperType::setRadarSpoilTaperTypeChoiceOrdinal(uci::type::RadarSpoilTaperType::RadarSpoilTaperTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case RADARSPOILTAPERTYPE_CHOICE_TAPER:
      chooseTaper("setRadarSpoilTaperTypeChoiceOrdinal", type);
      break;
    case RADARSPOILTAPERTYPE_CHOICE_SPOIL:
      chooseSpoil("setRadarSpoilTaperTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setRadarSpoilTaperTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::RadarTaperType& RadarSpoilTaperType::getTaper_() const {
  if (taper_Accessor) {
    return *taper_Accessor;
  }
  throw uci::base::UCIException("Error in getTaper(): Unable to get Taper, field not selected");
}

const uci::type::RadarTaperType& RadarSpoilTaperType::getTaper() const {
  return getTaper_();
}

uci::type::RadarTaperType& RadarSpoilTaperType::getTaper() {
  return getTaper_();
}

uci::type::RadarSpoilTaperType& RadarSpoilTaperType::setTaper(const uci::type::RadarTaperType& accessor) {
  chooseTaper();
  if (&accessor != taper_Accessor.get()) {
    taper_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RadarSpoilTaperType::isTaper() const noexcept {
  return static_cast<bool>(taper_Accessor);
}

uci::type::RadarTaperType& RadarSpoilTaperType::chooseTaper(const std::string& method, uci::base::accessorType::AccessorType type) {
  spoil_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarTaperType : type};
  if ((!taper_Accessor) || (taper_Accessor->getAccessorType() != requestedType)) {
    taper_Accessor = RadarTaperType::create(type);
    if (!taper_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taper_Accessor;
}

uci::type::RadarTaperType& RadarSpoilTaperType::chooseTaper(uci::base::accessorType::AccessorType type) {
  return chooseTaper("chooseTaper", type);
}

uci::type::RadarSpoilType& RadarSpoilTaperType::getSpoil_() const {
  if (spoil_Accessor) {
    return *spoil_Accessor;
  }
  throw uci::base::UCIException("Error in getSpoil(): Unable to get Spoil, field not selected");
}

const uci::type::RadarSpoilType& RadarSpoilTaperType::getSpoil() const {
  return getSpoil_();
}

uci::type::RadarSpoilType& RadarSpoilTaperType::getSpoil() {
  return getSpoil_();
}

uci::type::RadarSpoilTaperType& RadarSpoilTaperType::setSpoil(const uci::type::RadarSpoilType& accessor) {
  chooseSpoil();
  if (&accessor != spoil_Accessor.get()) {
    spoil_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RadarSpoilTaperType::isSpoil() const noexcept {
  return static_cast<bool>(spoil_Accessor);
}

uci::type::RadarSpoilType& RadarSpoilTaperType::chooseSpoil(const std::string& method, uci::base::accessorType::AccessorType type) {
  taper_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarSpoilType : type};
  if ((!spoil_Accessor) || (spoil_Accessor->getAccessorType() != requestedType)) {
    spoil_Accessor = RadarSpoilType::create(type);
    if (!spoil_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *spoil_Accessor;
}

uci::type::RadarSpoilType& RadarSpoilTaperType::chooseSpoil(uci::base::accessorType::AccessorType type) {
  return chooseSpoil("chooseSpoil", type);
}

std::unique_ptr<RadarSpoilTaperType> RadarSpoilTaperType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarSpoilTaperType : type};
  return (requestedType == uci::type::accessorType::radarSpoilTaperType) ? boost::make_unique<RadarSpoilTaperType>() : nullptr;
}

/**  */
namespace RadarSpoilTaperType_Names {

constexpr const char* Extern_Type_Name{"RadarSpoilTaperType"};
constexpr const char* Taper_Name{"Taper"};
constexpr const char* Spoil_Name{"Spoil"};

} // namespace RadarSpoilTaperType_Names

void RadarSpoilTaperType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RadarSpoilTaperType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RadarSpoilTaperType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RadarSpoilTaperType_Names::Taper_Name) {
      RadarTaperType::deserialize(valueType.second, accessor.chooseTaper(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RadarSpoilTaperType_Names::Spoil_Name) {
      RadarSpoilType::deserialize(valueType.second, accessor.chooseSpoil(), nodeName, nsPrefix);
    }
  }
}

std::string RadarSpoilTaperType::serialize(const uci::type::RadarSpoilTaperType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RadarSpoilTaperType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RadarSpoilTaperType_Names::Extern_Type_Name);
  }
  if (accessor.isTaper()) {
    RadarTaperType::serialize(accessor.getTaper(), node, RadarSpoilTaperType_Names::Taper_Name);
  } else if (accessor.isSpoil()) {
    RadarSpoilType::serialize(accessor.getSpoil(), node, RadarSpoilTaperType_Names::Spoil_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RadarSpoilTaperType& RadarSpoilTaperType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RadarSpoilTaperType>().release());
}

uci::type::RadarSpoilTaperType& RadarSpoilTaperType::create(const uci::type::RadarSpoilTaperType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RadarSpoilTaperType> newAccessor{boost::make_unique<asb_uci::type::RadarSpoilTaperType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RadarSpoilTaperType::destroy(uci::type::RadarSpoilTaperType& accessor) {
  delete dynamic_cast<asb_uci::type::RadarSpoilTaperType*>(&accessor);
}

} // namespace type

} // namespace uci

