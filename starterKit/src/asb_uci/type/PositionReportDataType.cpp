/** @file PositionReportDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PositionReportDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentID_Type.h"
#include "../../../include/asb_uci/type/DetailedKinematicsErrorType.h"
#include "../../../include/asb_uci/type/DetailedKinematicsType.h"
#include "../../../include/asb_uci/type/NavigationSolutionCorrectionsType.h"
#include "../../../include/asb_uci/type/NavigationSolutionStateEnum.h"
#include "../../../include/asb_uci/type/PositionSourceID_ChoiceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BytePositiveType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DetailedKinematicsErrorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DetailedKinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NavigationSolutionCorrectionsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NavigationSolutionStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PositionReportDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PositionSourceID_ChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PositionReportDataType::PositionReportDataType()
  : positionSource_Accessor{boost::make_unique<PositionSourceID_ChoiceType>()},
    navigationSolutionState_Accessor{boost::make_unique<NavigationSolutionStateEnum>()},
    kinematics_Accessor{boost::make_unique<DetailedKinematicsType>()},
    kinematicsError_Accessor{boost::make_unique<DetailedKinematicsErrorType>()} {
}

PositionReportDataType::~PositionReportDataType() = default;

void PositionReportDataType::copy(const uci::type::PositionReportDataType& accessor) {
  copyImpl(accessor, false);
}

void PositionReportDataType::copyImpl(const uci::type::PositionReportDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PositionReportDataType&>(accessor);
    setPositionSource(*(accessorImpl.positionSource_Accessor));
    if (accessorImpl.componentID_Accessor) {
      setComponentID(*(accessorImpl.componentID_Accessor));
    } else {
      componentID_Accessor.reset();
    }
    setNavigationSolutionState(*(accessorImpl.navigationSolutionState_Accessor));
    if (accessorImpl.hasFigureOfMerit()) {
      setFigureOfMerit(accessorImpl.getFigureOfMerit());
    } else {
      clearFigureOfMerit();
    }
    setKinematics(*(accessorImpl.kinematics_Accessor));
    setKinematicsError(*(accessorImpl.kinematicsError_Accessor));
    if (accessorImpl.solutionCorrections_Accessor) {
      setSolutionCorrections(*(accessorImpl.solutionCorrections_Accessor));
    } else {
      solutionCorrections_Accessor.reset();
    }
  }
}

void PositionReportDataType::reset() noexcept {
  positionSource_Accessor->reset();
  componentID_Accessor.reset();
  navigationSolutionState_Accessor->reset();
  clearFigureOfMerit();
  kinematics_Accessor->reset();
  kinematicsError_Accessor->reset();
  solutionCorrections_Accessor.reset();
}

const uci::type::PositionSourceID_ChoiceType& PositionReportDataType::getPositionSource() const {
  return *positionSource_Accessor;
}

uci::type::PositionSourceID_ChoiceType& PositionReportDataType::getPositionSource() {
  return *positionSource_Accessor;
}

uci::type::PositionReportDataType& PositionReportDataType::setPositionSource(const uci::type::PositionSourceID_ChoiceType& accessor) {
  if (&accessor != positionSource_Accessor.get()) {
    positionSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ComponentID_Type& PositionReportDataType::getComponentID_() const {
  if (componentID_Accessor) {
    return *componentID_Accessor;
  }
  throw uci::base::UCIException("Error in getComponentID(): An attempt was made to get an optional field that was not enabled, call hasComponentID() to determine if it is safe to call getComponentID()");
}

const uci::type::ComponentID_Type& PositionReportDataType::getComponentID() const {
  return getComponentID_();
}

uci::type::ComponentID_Type& PositionReportDataType::getComponentID() {
  return getComponentID_();
}

uci::type::PositionReportDataType& PositionReportDataType::setComponentID(const uci::type::ComponentID_Type& accessor) {
  enableComponentID();
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PositionReportDataType::hasComponentID() const noexcept {
  return static_cast<bool>(componentID_Accessor);
}

uci::type::ComponentID_Type& PositionReportDataType::enableComponentID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentID_Type : type};
  if ((!componentID_Accessor) || (componentID_Accessor->getAccessorType() != requestedType)) {
    componentID_Accessor = ComponentID_Type::create(requestedType);
    if (!componentID_Accessor) {
      throw uci::base::UCIException("Error in enableComponentID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *componentID_Accessor;
}

uci::type::PositionReportDataType& PositionReportDataType::clearComponentID() noexcept {
  componentID_Accessor.reset();
  return *this;
}

const uci::type::NavigationSolutionStateEnum& PositionReportDataType::getNavigationSolutionState() const {
  return *navigationSolutionState_Accessor;
}

uci::type::NavigationSolutionStateEnum& PositionReportDataType::getNavigationSolutionState() {
  return *navigationSolutionState_Accessor;
}

uci::type::PositionReportDataType& PositionReportDataType::setNavigationSolutionState(const uci::type::NavigationSolutionStateEnum& accessor) {
  if (&accessor != navigationSolutionState_Accessor.get()) {
    navigationSolutionState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PositionReportDataType& PositionReportDataType::setNavigationSolutionState(uci::type::NavigationSolutionStateEnum::EnumerationItem value) {
  navigationSolutionState_Accessor->setValue(value);
  return *this;
}


uci::type::BytePositiveTypeValue PositionReportDataType::getFigureOfMerit() const {
  if (figureOfMerit_Accessor) {
    return *figureOfMerit_Accessor;
  }
  throw uci::base::UCIException("Error in getFigureOfMerit(): An attempt was made to get an optional field that was not enabled, call hasFigureOfMerit() to determine if it is safe to call getFigureOfMerit()");
}

uci::type::PositionReportDataType& PositionReportDataType::setFigureOfMerit(uci::type::BytePositiveTypeValue value) {
  figureOfMerit_Accessor = value;
  return *this;
}

bool PositionReportDataType::hasFigureOfMerit() const noexcept {
  return figureOfMerit_Accessor.has_value();
}

uci::type::PositionReportDataType& PositionReportDataType::clearFigureOfMerit() noexcept {
  figureOfMerit_Accessor.reset();
  return *this;
}

const uci::type::DetailedKinematicsType& PositionReportDataType::getKinematics() const {
  return *kinematics_Accessor;
}

uci::type::DetailedKinematicsType& PositionReportDataType::getKinematics() {
  return *kinematics_Accessor;
}

uci::type::PositionReportDataType& PositionReportDataType::setKinematics(const uci::type::DetailedKinematicsType& accessor) {
  if (&accessor != kinematics_Accessor.get()) {
    kinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DetailedKinematicsErrorType& PositionReportDataType::getKinematicsError() const {
  return *kinematicsError_Accessor;
}

uci::type::DetailedKinematicsErrorType& PositionReportDataType::getKinematicsError() {
  return *kinematicsError_Accessor;
}

uci::type::PositionReportDataType& PositionReportDataType::setKinematicsError(const uci::type::DetailedKinematicsErrorType& accessor) {
  if (&accessor != kinematicsError_Accessor.get()) {
    kinematicsError_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::NavigationSolutionCorrectionsType& PositionReportDataType::getSolutionCorrections_() const {
  if (solutionCorrections_Accessor) {
    return *solutionCorrections_Accessor;
  }
  throw uci::base::UCIException("Error in getSolutionCorrections(): An attempt was made to get an optional field that was not enabled, call hasSolutionCorrections() to determine if it is safe to call getSolutionCorrections()");
}

const uci::type::NavigationSolutionCorrectionsType& PositionReportDataType::getSolutionCorrections() const {
  return getSolutionCorrections_();
}

uci::type::NavigationSolutionCorrectionsType& PositionReportDataType::getSolutionCorrections() {
  return getSolutionCorrections_();
}

uci::type::PositionReportDataType& PositionReportDataType::setSolutionCorrections(const uci::type::NavigationSolutionCorrectionsType& accessor) {
  enableSolutionCorrections();
  if (&accessor != solutionCorrections_Accessor.get()) {
    solutionCorrections_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PositionReportDataType::hasSolutionCorrections() const noexcept {
  return static_cast<bool>(solutionCorrections_Accessor);
}

uci::type::NavigationSolutionCorrectionsType& PositionReportDataType::enableSolutionCorrections(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::navigationSolutionCorrectionsType : type};
  if ((!solutionCorrections_Accessor) || (solutionCorrections_Accessor->getAccessorType() != requestedType)) {
    solutionCorrections_Accessor = NavigationSolutionCorrectionsType::create(requestedType);
    if (!solutionCorrections_Accessor) {
      throw uci::base::UCIException("Error in enableSolutionCorrections(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *solutionCorrections_Accessor;
}

uci::type::PositionReportDataType& PositionReportDataType::clearSolutionCorrections() noexcept {
  solutionCorrections_Accessor.reset();
  return *this;
}

std::unique_ptr<PositionReportDataType> PositionReportDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionReportDataType : type};
  return (requestedType == uci::type::accessorType::positionReportDataType) ? boost::make_unique<PositionReportDataType>() : nullptr;
}

/**  */
namespace PositionReportDataType_Names {

constexpr const char* Extern_Type_Name{"PositionReportDataType"};
constexpr const char* PositionSource_Name{"PositionSource"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* NavigationSolutionState_Name{"NavigationSolutionState"};
constexpr const char* FigureOfMerit_Name{"FigureOfMerit"};
constexpr const char* Kinematics_Name{"Kinematics"};
constexpr const char* KinematicsError_Name{"KinematicsError"};
constexpr const char* SolutionCorrections_Name{"SolutionCorrections"};

} // namespace PositionReportDataType_Names

void PositionReportDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PositionReportDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PositionReportDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PositionReportDataType_Names::PositionSource_Name) {
      PositionSourceID_ChoiceType::deserialize(valueType.second, accessor.getPositionSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PositionReportDataType_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.enableComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PositionReportDataType_Names::NavigationSolutionState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getNavigationSolutionState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PositionReportDataType_Names::FigureOfMerit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFigureOfMerit(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + PositionReportDataType_Names::Kinematics_Name) {
      DetailedKinematicsType::deserialize(valueType.second, accessor.getKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PositionReportDataType_Names::KinematicsError_Name) {
      DetailedKinematicsErrorType::deserialize(valueType.second, accessor.getKinematicsError(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PositionReportDataType_Names::SolutionCorrections_Name) {
      NavigationSolutionCorrectionsType::deserialize(valueType.second, accessor.enableSolutionCorrections(), nodeName, nsPrefix);
    }
  }
}

std::string PositionReportDataType::serialize(const uci::type::PositionReportDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PositionReportDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PositionReportDataType_Names::Extern_Type_Name);
  }
  PositionSourceID_ChoiceType::serialize(accessor.getPositionSource(), node, PositionReportDataType_Names::PositionSource_Name);
  if (accessor.hasComponentID()) {
    ComponentID_Type::serialize(accessor.getComponentID(), node, PositionReportDataType_Names::ComponentID_Name);
  }
  NavigationSolutionStateEnum::serialize(accessor.getNavigationSolutionState(), node, PositionReportDataType_Names::NavigationSolutionState_Name, false);
  if (accessor.hasFigureOfMerit()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getFigureOfMerit(), node, PositionReportDataType_Names::FigureOfMerit_Name);
  }
  DetailedKinematicsType::serialize(accessor.getKinematics(), node, PositionReportDataType_Names::Kinematics_Name);
  DetailedKinematicsErrorType::serialize(accessor.getKinematicsError(), node, PositionReportDataType_Names::KinematicsError_Name);
  if (accessor.hasSolutionCorrections()) {
    NavigationSolutionCorrectionsType::serialize(accessor.getSolutionCorrections(), node, PositionReportDataType_Names::SolutionCorrections_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PositionReportDataType& PositionReportDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PositionReportDataType>().release());
}

uci::type::PositionReportDataType& PositionReportDataType::create(const uci::type::PositionReportDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PositionReportDataType> newAccessor{boost::make_unique<asb_uci::type::PositionReportDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PositionReportDataType::destroy(uci::type::PositionReportDataType& accessor) {
  delete dynamic_cast<asb_uci::type::PositionReportDataType*>(&accessor);
}

} // namespace type

} // namespace uci

