/** @file LocationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/LocationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/LoiterType.h"
#include "asb_uci/type/PathType.h"
#include "asb_uci/type/ZoneType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/LocationType.h"
#include "uci/type/LoiterType.h"
#include "uci/type/PathType.h"
#include "uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LocationType::LocationType() = default;

LocationType::~LocationType() = default;

void LocationType::copy(const uci::type::LocationType& accessor) {
  copyImpl(accessor, false);
}

void LocationType::copyImpl(const uci::type::LocationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LocationType&>(accessor);
    if (accessorImpl.path_Accessor) {
      setPath(*(accessorImpl.path_Accessor));
    } else {
      path_Accessor.reset();
    }
    if (accessorImpl.loiter_Accessor) {
      setLoiter(*(accessorImpl.loiter_Accessor));
    } else {
      loiter_Accessor.reset();
    }
    if (accessorImpl.zone_Accessor) {
      setZone(*(accessorImpl.zone_Accessor));
    } else {
      zone_Accessor.reset();
    }
  }
}

void LocationType::reset() noexcept {
  path_Accessor.reset();
  loiter_Accessor.reset();
  zone_Accessor.reset();
}

uci::type::LocationType::LocationTypeChoice LocationType::getLocationTypeChoiceOrdinal() const noexcept {
  if (path_Accessor) {
    return LOCATIONTYPE_CHOICE_PATH;
  }
  if (loiter_Accessor) {
    return LOCATIONTYPE_CHOICE_LOITER;
  }
  if (zone_Accessor) {
    return LOCATIONTYPE_CHOICE_ZONE;
  }
  return LOCATIONTYPE_CHOICE_NONE;
}

uci::type::LocationType& LocationType::setLocationTypeChoiceOrdinal(uci::type::LocationType::LocationTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case LOCATIONTYPE_CHOICE_PATH:
      choosePath("setLocationTypeChoiceOrdinal", type);
      break;
    case LOCATIONTYPE_CHOICE_LOITER:
      chooseLoiter("setLocationTypeChoiceOrdinal", type);
      break;
    case LOCATIONTYPE_CHOICE_ZONE:
      chooseZone("setLocationTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setLocationTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PathType& LocationType::getPath_() const {
  if (path_Accessor) {
    return *path_Accessor;
  }
  throw uci::base::UCIException("Error in getPath(): Unable to get Path, field not selected");
}

const uci::type::PathType& LocationType::getPath() const {
  return getPath_();
}

uci::type::PathType& LocationType::getPath() {
  return getPath_();
}

uci::type::LocationType& LocationType::setPath(const uci::type::PathType& accessor) {
  choosePath();
  if (&accessor != path_Accessor.get()) {
    path_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LocationType::isPath() const noexcept {
  return static_cast<bool>(path_Accessor);
}

uci::type::PathType& LocationType::choosePath(const std::string& method, uci::base::accessorType::AccessorType type) {
  loiter_Accessor.reset();
  zone_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pathType : type};
  if ((!path_Accessor) || (path_Accessor->getAccessorType() != requestedType)) {
    path_Accessor = PathType::create(type);
    if (!path_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *path_Accessor;
}

uci::type::PathType& LocationType::choosePath(uci::base::accessorType::AccessorType type) {
  return choosePath("choosePath", type);
}

uci::type::LoiterType& LocationType::getLoiter_() const {
  if (loiter_Accessor) {
    return *loiter_Accessor;
  }
  throw uci::base::UCIException("Error in getLoiter(): Unable to get Loiter, field not selected");
}

const uci::type::LoiterType& LocationType::getLoiter() const {
  return getLoiter_();
}

uci::type::LoiterType& LocationType::getLoiter() {
  return getLoiter_();
}

uci::type::LocationType& LocationType::setLoiter(const uci::type::LoiterType& accessor) {
  chooseLoiter(accessor.getAccessorType());
  if (&accessor != loiter_Accessor.get()) {
    loiter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LocationType::isLoiter() const noexcept {
  return static_cast<bool>(loiter_Accessor);
}

uci::type::LoiterType& LocationType::chooseLoiter(const std::string& method, uci::base::accessorType::AccessorType type) {
  path_Accessor.reset();
  zone_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::loiterType : type};
  if ((!loiter_Accessor) || (loiter_Accessor->getAccessorType() != requestedType)) {
    loiter_Accessor = LoiterType::create(type);
    if (!loiter_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *loiter_Accessor;
}

uci::type::LoiterType& LocationType::chooseLoiter(uci::base::accessorType::AccessorType type) {
  return chooseLoiter("chooseLoiter", type);
}

uci::type::ZoneType& LocationType::getZone_() const {
  if (zone_Accessor) {
    return *zone_Accessor;
  }
  throw uci::base::UCIException("Error in getZone(): Unable to get Zone, field not selected");
}

const uci::type::ZoneType& LocationType::getZone() const {
  return getZone_();
}

uci::type::ZoneType& LocationType::getZone() {
  return getZone_();
}

uci::type::LocationType& LocationType::setZone(const uci::type::ZoneType& accessor) {
  chooseZone("setZone", accessor.getAccessorType());
  if (&accessor != zone_Accessor.get()) {
    zone_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool LocationType::isZone() const noexcept {
  return static_cast<bool>(zone_Accessor);
}

uci::type::ZoneType& LocationType::chooseZone(const std::string& method, uci::base::accessorType::AccessorType type) {
  path_Accessor.reset();
  loiter_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!zone_Accessor) || (zone_Accessor->getAccessorType() != requestedType)) {
    zone_Accessor = ZoneType::create(type);
    if (!zone_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *zone_Accessor;
}

uci::type::ZoneType& LocationType::chooseZone(uci::base::accessorType::AccessorType type) {
  return chooseZone("chooseZone", type);
}

std::unique_ptr<LocationType> LocationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::locationType : type};
  return (requestedType == uci::type::accessorType::locationType) ? boost::make_unique<LocationType>() : nullptr;
}

/**  */
namespace LocationType_Names {

constexpr const char* Extern_Type_Name{"LocationType"};
constexpr const char* Path_Name{"Path"};
constexpr const char* Loiter_Name{"Loiter"};
constexpr const char* Zone_Name{"Zone"};

} // namespace LocationType_Names

void LocationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LocationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LocationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LocationType_Names::Path_Name) {
      PathType::deserialize(valueType.second, accessor.choosePath(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LocationType_Names::Loiter_Name) {
      LoiterType::deserialize(valueType.second, accessor.chooseLoiter(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LocationType_Names::Zone_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseZone(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string LocationType::serialize(const uci::type::LocationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LocationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LocationType_Names::Extern_Type_Name);
  }
  if (accessor.isPath()) {
    PathType::serialize(accessor.getPath(), node, LocationType_Names::Path_Name);
  } else if (accessor.isLoiter()) {
    LoiterType::serialize(accessor.getLoiter(), node, LocationType_Names::Loiter_Name);
  } else if (accessor.isZone()) {
    ZoneType::serialize(accessor.getZone(), node, LocationType_Names::Zone_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LocationType& LocationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LocationType>().release());
}

uci::type::LocationType& LocationType::create(const uci::type::LocationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LocationType> newAccessor{boost::make_unique<asb_uci::type::LocationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LocationType::destroy(uci::type::LocationType& accessor) {
  delete dynamic_cast<asb_uci::type::LocationType*>(&accessor);
}

} // namespace type

} // namespace uci

