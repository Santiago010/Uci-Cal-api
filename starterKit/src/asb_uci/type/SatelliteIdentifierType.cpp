/** @file SatelliteIdentifierType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SatelliteIdentifierType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/InternationalDesignatorType.h"
#include "../../../include/asb_uci/type/MissionInformationType.h"
#include "../../../include/asb_uci/type/VisibleString128Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IntPositiveType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/InternationalDesignatorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionInformationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SatelliteIdentifierType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString128Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SatelliteIdentifierType::SatelliteIdentifierType()
  : missionInformation_Accessor{boost::make_unique<MissionInformation>(0, SIZE_MAX)} {
}

SatelliteIdentifierType::~SatelliteIdentifierType() = default;

void SatelliteIdentifierType::copy(const uci::type::SatelliteIdentifierType& accessor) {
  copyImpl(accessor, false);
}

void SatelliteIdentifierType::copyImpl(const uci::type::SatelliteIdentifierType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SatelliteIdentifierType&>(accessor);
    setSatelliteNumber(accessorImpl.satelliteNumber_Accessor);
    if (accessorImpl.satelliteName_Accessor) {
      setSatelliteName(*(accessorImpl.satelliteName_Accessor));
    } else {
      satelliteName_Accessor.reset();
    }
    if (accessorImpl.internationalDesignator_Accessor) {
      setInternationalDesignator(*(accessorImpl.internationalDesignator_Accessor));
    } else {
      internationalDesignator_Accessor.reset();
    }
    setMissionInformation(*(accessorImpl.missionInformation_Accessor));
  }
}

void SatelliteIdentifierType::reset() noexcept {
  satelliteNumber_Accessor = 0;
  satelliteName_Accessor.reset();
  internationalDesignator_Accessor.reset();
  missionInformation_Accessor->reset();
}

uci::type::IntPositiveTypeValue SatelliteIdentifierType::getSatelliteNumber() const {
  return satelliteNumber_Accessor;
}

uci::type::SatelliteIdentifierType& SatelliteIdentifierType::setSatelliteNumber(uci::type::IntPositiveTypeValue value) {
  satelliteNumber_Accessor = value;
  return *this;
}


uci::type::VisibleString128Type& SatelliteIdentifierType::getSatelliteName_() const {
  if (satelliteName_Accessor) {
    return *satelliteName_Accessor;
  }
  throw uci::base::UCIException("Error in getSatelliteName(): An attempt was made to get an optional field that was not enabled, call hasSatelliteName() to determine if it is safe to call getSatelliteName()");
}

const uci::type::VisibleString128Type& SatelliteIdentifierType::getSatelliteName() const {
  return getSatelliteName_();
}

uci::type::VisibleString128Type& SatelliteIdentifierType::getSatelliteName() {
  return getSatelliteName_();
}

uci::type::SatelliteIdentifierType& SatelliteIdentifierType::setSatelliteName(const uci::type::VisibleString128Type& value) {
  return setSatelliteName(value.c_str());
}

uci::type::SatelliteIdentifierType& SatelliteIdentifierType::setSatelliteName(const std::string& value) {
  return setSatelliteName(value.c_str());
}

uci::type::SatelliteIdentifierType& SatelliteIdentifierType::setSatelliteName(const char* value) {
  enableSatelliteName().setStringValue(value);
  return *this;
}

bool SatelliteIdentifierType::hasSatelliteName() const noexcept {
  return static_cast<bool>(satelliteName_Accessor);
}

uci::type::VisibleString128Type& SatelliteIdentifierType::enableSatelliteName(uci::base::accessorType::AccessorType type) {
  if (!satelliteName_Accessor) {
    satelliteName_Accessor = VisibleString128Type::create(type);
  }
  return *satelliteName_Accessor;
}

uci::type::SatelliteIdentifierType& SatelliteIdentifierType::clearSatelliteName() noexcept {
  satelliteName_Accessor.reset();
  return *this;
}

uci::type::InternationalDesignatorType& SatelliteIdentifierType::getInternationalDesignator_() const {
  if (internationalDesignator_Accessor) {
    return *internationalDesignator_Accessor;
  }
  throw uci::base::UCIException("Error in getInternationalDesignator(): An attempt was made to get an optional field that was not enabled, call hasInternationalDesignator() to determine if it is safe to call getInternationalDesignator()");
}

const uci::type::InternationalDesignatorType& SatelliteIdentifierType::getInternationalDesignator() const {
  return getInternationalDesignator_();
}

uci::type::InternationalDesignatorType& SatelliteIdentifierType::getInternationalDesignator() {
  return getInternationalDesignator_();
}

uci::type::SatelliteIdentifierType& SatelliteIdentifierType::setInternationalDesignator(const uci::type::InternationalDesignatorType& accessor) {
  enableInternationalDesignator();
  if (&accessor != internationalDesignator_Accessor.get()) {
    internationalDesignator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SatelliteIdentifierType::hasInternationalDesignator() const noexcept {
  return static_cast<bool>(internationalDesignator_Accessor);
}

uci::type::InternationalDesignatorType& SatelliteIdentifierType::enableInternationalDesignator(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::internationalDesignatorType : type};
  if ((!internationalDesignator_Accessor) || (internationalDesignator_Accessor->getAccessorType() != requestedType)) {
    internationalDesignator_Accessor = InternationalDesignatorType::create(requestedType);
    if (!internationalDesignator_Accessor) {
      throw uci::base::UCIException("Error in enableInternationalDesignator(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *internationalDesignator_Accessor;
}

uci::type::SatelliteIdentifierType& SatelliteIdentifierType::clearInternationalDesignator() noexcept {
  internationalDesignator_Accessor.reset();
  return *this;
}

const uci::type::SatelliteIdentifierType::MissionInformation& SatelliteIdentifierType::getMissionInformation() const {
  return *missionInformation_Accessor;
}

uci::type::SatelliteIdentifierType::MissionInformation& SatelliteIdentifierType::getMissionInformation() {
  return *missionInformation_Accessor;
}

uci::type::SatelliteIdentifierType& SatelliteIdentifierType::setMissionInformation(const uci::type::SatelliteIdentifierType::MissionInformation& accessor) {
  if (&accessor != missionInformation_Accessor.get()) {
    missionInformation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<SatelliteIdentifierType> SatelliteIdentifierType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteIdentifierType : type};
  return (requestedType == uci::type::accessorType::satelliteIdentifierType) ? boost::make_unique<SatelliteIdentifierType>() : nullptr;
}

/**  */
namespace SatelliteIdentifierType_Names {

constexpr const char* Extern_Type_Name{"SatelliteIdentifierType"};
constexpr const char* SatelliteNumber_Name{"SatelliteNumber"};
constexpr const char* SatelliteName_Name{"SatelliteName"};
constexpr const char* InternationalDesignator_Name{"InternationalDesignator"};
constexpr const char* MissionInformation_Name{"MissionInformation"};

} // namespace SatelliteIdentifierType_Names

void SatelliteIdentifierType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SatelliteIdentifierType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SatelliteIdentifierType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SatelliteIdentifierType_Names::SatelliteNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSatelliteNumber(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SatelliteIdentifierType_Names::SatelliteName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSatelliteName(*value);
      }
    } else if (valueType.first == nsPrefix + SatelliteIdentifierType_Names::InternationalDesignator_Name) {
      InternationalDesignatorType::deserialize(valueType.second, accessor.enableInternationalDesignator(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SatelliteIdentifierType_Names::MissionInformation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SatelliteIdentifierType::MissionInformation& boundedList = accessor.getMissionInformation();
        const uci::type::SatelliteIdentifierType::MissionInformation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MissionInformationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string SatelliteIdentifierType::serialize(const uci::type::SatelliteIdentifierType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SatelliteIdentifierType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SatelliteIdentifierType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getSatelliteNumber(), node, SatelliteIdentifierType_Names::SatelliteNumber_Name);
  if (accessor.hasSatelliteName()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSatelliteName(), node, SatelliteIdentifierType_Names::SatelliteName_Name);
  }
  if (accessor.hasInternationalDesignator()) {
    InternationalDesignatorType::serialize(accessor.getInternationalDesignator(), node, SatelliteIdentifierType_Names::InternationalDesignator_Name);
  }
  {
    const uci::type::SatelliteIdentifierType::MissionInformation& boundedList = accessor.getMissionInformation();
    for (uci::type::SatelliteIdentifierType::MissionInformation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MissionInformationType::serialize(boundedList.at(i), node, SatelliteIdentifierType_Names::MissionInformation_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SatelliteIdentifierType& SatelliteIdentifierType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SatelliteIdentifierType>().release());
}

uci::type::SatelliteIdentifierType& SatelliteIdentifierType::create(const uci::type::SatelliteIdentifierType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SatelliteIdentifierType> newAccessor{boost::make_unique<asb_uci::type::SatelliteIdentifierType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SatelliteIdentifierType::destroy(uci::type::SatelliteIdentifierType& accessor) {
  delete dynamic_cast<asb_uci::type::SatelliteIdentifierType*>(&accessor);
}

} // namespace type

} // namespace uci

