/** @file PolarizationControlType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PolarizationControlType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PolarizationPortEnum.h"
#include "asb_uci/type/PolarizationType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DurationType.h"
#include "uci/type/PolarizationControlType.h"
#include "uci/type/PolarizationPortEnum.h"
#include "uci/type/PolarizationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PolarizationControlType::PolarizationControlType()
  : portPolarization_Accessor{boost::make_unique<PolarizationPortEnum>()} {
}

PolarizationControlType::~PolarizationControlType() = default;

void PolarizationControlType::copy(const uci::type::PolarizationControlType& accessor) {
  copyImpl(accessor, false);
}

void PolarizationControlType::copyImpl(const uci::type::PolarizationControlType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PolarizationControlType&>(accessor);
    setPortPolarization(*(accessorImpl.portPolarization_Accessor));
    if (accessorImpl.hasDuration()) {
      setDuration(accessorImpl.getDuration());
    } else {
      clearDuration();
    }
    if (accessorImpl.polarizationDescription_Accessor) {
      setPolarizationDescription(*(accessorImpl.polarizationDescription_Accessor));
    } else {
      polarizationDescription_Accessor.reset();
    }
  }
}

void PolarizationControlType::reset() noexcept {
  portPolarization_Accessor->reset();
  clearDuration();
  polarizationDescription_Accessor.reset();
}

const uci::type::PolarizationPortEnum& PolarizationControlType::getPortPolarization() const {
  return *portPolarization_Accessor;
}

uci::type::PolarizationPortEnum& PolarizationControlType::getPortPolarization() {
  return *portPolarization_Accessor;
}

uci::type::PolarizationControlType& PolarizationControlType::setPortPolarization(const uci::type::PolarizationPortEnum& accessor) {
  if (&accessor != portPolarization_Accessor.get()) {
    portPolarization_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PolarizationControlType& PolarizationControlType::setPortPolarization(uci::type::PolarizationPortEnum::EnumerationItem value) {
  portPolarization_Accessor->setValue(value);
  return *this;
}


uci::type::DurationTypeValue PolarizationControlType::getDuration() const {
  if (duration_Accessor) {
    return *duration_Accessor;
  }
  throw uci::base::UCIException("Error in getDuration(): An attempt was made to get an optional field that was not enabled, call hasDuration() to determine if it is safe to call getDuration()");
}

uci::type::PolarizationControlType& PolarizationControlType::setDuration(uci::type::DurationTypeValue value) {
  duration_Accessor = value;
  return *this;
}

bool PolarizationControlType::hasDuration() const noexcept {
  return duration_Accessor.has_value();
}

uci::type::PolarizationControlType& PolarizationControlType::clearDuration() noexcept {
  duration_Accessor.reset();
  return *this;
}

uci::type::PolarizationType& PolarizationControlType::getPolarizationDescription_() const {
  if (polarizationDescription_Accessor) {
    return *polarizationDescription_Accessor;
  }
  throw uci::base::UCIException("Error in getPolarizationDescription(): An attempt was made to get an optional field that was not enabled, call hasPolarizationDescription() to determine if it is safe to call getPolarizationDescription()");
}

const uci::type::PolarizationType& PolarizationControlType::getPolarizationDescription() const {
  return getPolarizationDescription_();
}

uci::type::PolarizationType& PolarizationControlType::getPolarizationDescription() {
  return getPolarizationDescription_();
}

uci::type::PolarizationControlType& PolarizationControlType::setPolarizationDescription(const uci::type::PolarizationType& accessor) {
  enablePolarizationDescription();
  if (&accessor != polarizationDescription_Accessor.get()) {
    polarizationDescription_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PolarizationControlType::hasPolarizationDescription() const noexcept {
  return static_cast<bool>(polarizationDescription_Accessor);
}

uci::type::PolarizationType& PolarizationControlType::enablePolarizationDescription(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::polarizationType : type};
  if ((!polarizationDescription_Accessor) || (polarizationDescription_Accessor->getAccessorType() != requestedType)) {
    polarizationDescription_Accessor = PolarizationType::create(requestedType);
    if (!polarizationDescription_Accessor) {
      throw uci::base::UCIException("Error in enablePolarizationDescription(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *polarizationDescription_Accessor;
}

uci::type::PolarizationControlType& PolarizationControlType::clearPolarizationDescription() noexcept {
  polarizationDescription_Accessor.reset();
  return *this;
}

std::unique_ptr<PolarizationControlType> PolarizationControlType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::polarizationControlType : type};
  return (requestedType == uci::type::accessorType::polarizationControlType) ? boost::make_unique<PolarizationControlType>() : nullptr;
}

/**  */
namespace PolarizationControlType_Names {

constexpr const char* Extern_Type_Name{"PolarizationControlType"};
constexpr const char* PortPolarization_Name{"PortPolarization"};
constexpr const char* Duration_Name{"Duration"};
constexpr const char* PolarizationDescription_Name{"PolarizationDescription"};

} // namespace PolarizationControlType_Names

void PolarizationControlType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PolarizationControlType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PolarizationControlType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PolarizationControlType_Names::PortPolarization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPortPolarization().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PolarizationControlType_Names::Duration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PolarizationControlType_Names::PolarizationDescription_Name) {
      PolarizationType::deserialize(valueType.second, accessor.enablePolarizationDescription(), nodeName, nsPrefix);
    }
  }
}

std::string PolarizationControlType::serialize(const uci::type::PolarizationControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PolarizationControlType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PolarizationControlType_Names::Extern_Type_Name);
  }
  PolarizationPortEnum::serialize(accessor.getPortPolarization(), node, PolarizationControlType_Names::PortPolarization_Name, false);
  if (accessor.hasDuration()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getDuration(), node, PolarizationControlType_Names::Duration_Name);
  }
  if (accessor.hasPolarizationDescription()) {
    PolarizationType::serialize(accessor.getPolarizationDescription(), node, PolarizationControlType_Names::PolarizationDescription_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PolarizationControlType& PolarizationControlType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PolarizationControlType>().release());
}

uci::type::PolarizationControlType& PolarizationControlType::create(const uci::type::PolarizationControlType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PolarizationControlType> newAccessor{boost::make_unique<asb_uci::type::PolarizationControlType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PolarizationControlType::destroy(uci::type::PolarizationControlType& accessor) {
  delete dynamic_cast<asb_uci::type::PolarizationControlType*>(&accessor);
}

} // namespace type

} // namespace uci

