/** @file AltitudeReferenceUncertaintyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AltitudeReferenceUncertaintyType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AltitudeReferenceEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AltitudeReferenceEnum.h"
#include "uci/type/AltitudeReferenceUncertaintyType.h"
#include "uci/type/AltitudeType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AltitudeReferenceUncertaintyType::AltitudeReferenceUncertaintyType()
  : altitudeReference_Accessor{boost::make_unique<AltitudeReferenceEnum>()} {
}

AltitudeReferenceUncertaintyType::~AltitudeReferenceUncertaintyType() = default;

void AltitudeReferenceUncertaintyType::copy(const uci::type::AltitudeReferenceUncertaintyType& accessor) {
  copyImpl(accessor, false);
}

void AltitudeReferenceUncertaintyType::copyImpl(const uci::type::AltitudeReferenceUncertaintyType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AltitudeReferenceUncertaintyType&>(accessor);
    setAltitudeReference(*(accessorImpl.altitudeReference_Accessor));
    setAltitude(accessorImpl.altitude_Accessor);
    if (accessorImpl.hasVarAltitude()) {
      setVarAltitude(accessorImpl.getVarAltitude());
    } else {
      clearVarAltitude();
    }
  }
}

void AltitudeReferenceUncertaintyType::reset() noexcept {
  altitudeReference_Accessor->reset();
  altitude_Accessor = 0.0;
  clearVarAltitude();
}

const uci::type::AltitudeReferenceEnum& AltitudeReferenceUncertaintyType::getAltitudeReference() const {
  return *altitudeReference_Accessor;
}

uci::type::AltitudeReferenceEnum& AltitudeReferenceUncertaintyType::getAltitudeReference() {
  return *altitudeReference_Accessor;
}

uci::type::AltitudeReferenceUncertaintyType& AltitudeReferenceUncertaintyType::setAltitudeReference(const uci::type::AltitudeReferenceEnum& accessor) {
  if (&accessor != altitudeReference_Accessor.get()) {
    altitudeReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AltitudeReferenceUncertaintyType& AltitudeReferenceUncertaintyType::setAltitudeReference(uci::type::AltitudeReferenceEnum::EnumerationItem value) {
  altitudeReference_Accessor->setValue(value);
  return *this;
}


uci::type::AltitudeTypeValue AltitudeReferenceUncertaintyType::getAltitude() const {
  return altitude_Accessor;
}

uci::type::AltitudeReferenceUncertaintyType& AltitudeReferenceUncertaintyType::setAltitude(uci::type::AltitudeTypeValue value) {
  altitude_Accessor = value;
  return *this;
}


xs::Double AltitudeReferenceUncertaintyType::getVarAltitude() const {
  if (varAltitude_Accessor) {
    return *varAltitude_Accessor;
  }
  throw uci::base::UCIException("Error in getVarAltitude(): An attempt was made to get an optional field that was not enabled, call hasVarAltitude() to determine if it is safe to call getVarAltitude()");
}

uci::type::AltitudeReferenceUncertaintyType& AltitudeReferenceUncertaintyType::setVarAltitude(xs::Double value) {
  varAltitude_Accessor = value;
  return *this;
}

bool AltitudeReferenceUncertaintyType::hasVarAltitude() const noexcept {
  return varAltitude_Accessor.has_value();
}

uci::type::AltitudeReferenceUncertaintyType& AltitudeReferenceUncertaintyType::clearVarAltitude() noexcept {
  varAltitude_Accessor.reset();
  return *this;
}

std::unique_ptr<AltitudeReferenceUncertaintyType> AltitudeReferenceUncertaintyType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::altitudeReferenceUncertaintyType : type};
  return (requestedType == uci::type::accessorType::altitudeReferenceUncertaintyType) ? boost::make_unique<AltitudeReferenceUncertaintyType>() : nullptr;
}

/**  */
namespace AltitudeReferenceUncertaintyType_Names {

constexpr const char* Extern_Type_Name{"AltitudeReferenceUncertaintyType"};
constexpr const char* AltitudeReference_Name{"AltitudeReference"};
constexpr const char* Altitude_Name{"Altitude"};
constexpr const char* VarAltitude_Name{"VarAltitude"};

} // namespace AltitudeReferenceUncertaintyType_Names

void AltitudeReferenceUncertaintyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AltitudeReferenceUncertaintyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AltitudeReferenceUncertaintyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AltitudeReferenceUncertaintyType_Names::AltitudeReference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAltitudeReference().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AltitudeReferenceUncertaintyType_Names::Altitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAltitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AltitudeReferenceUncertaintyType_Names::VarAltitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVarAltitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string AltitudeReferenceUncertaintyType::serialize(const uci::type::AltitudeReferenceUncertaintyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AltitudeReferenceUncertaintyType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AltitudeReferenceUncertaintyType_Names::Extern_Type_Name);
  }
  AltitudeReferenceEnum::serialize(accessor.getAltitudeReference(), node, AltitudeReferenceUncertaintyType_Names::AltitudeReference_Name, false);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAltitude(), node, AltitudeReferenceUncertaintyType_Names::Altitude_Name);
  if (accessor.hasVarAltitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVarAltitude(), node, AltitudeReferenceUncertaintyType_Names::VarAltitude_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AltitudeReferenceUncertaintyType& AltitudeReferenceUncertaintyType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AltitudeReferenceUncertaintyType>().release());
}

uci::type::AltitudeReferenceUncertaintyType& AltitudeReferenceUncertaintyType::create(const uci::type::AltitudeReferenceUncertaintyType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AltitudeReferenceUncertaintyType> newAccessor{boost::make_unique<asb_uci::type::AltitudeReferenceUncertaintyType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AltitudeReferenceUncertaintyType::destroy(uci::type::AltitudeReferenceUncertaintyType& accessor) {
  delete dynamic_cast<asb_uci::type::AltitudeReferenceUncertaintyType*>(&accessor);
}

} // namespace type

} // namespace uci

