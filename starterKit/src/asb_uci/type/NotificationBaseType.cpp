/** @file NotificationBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/NotificationBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/NotificationID_Type.h"
#include "../../../include/asb_uci/type/NotificationSeverityEnum.h"
#include "../../../include/asb_uci/type/NotificationSourceType.h"
#include "../../../include/asb_uci/type/NotificationStateEnum.h"
#include "../../../include/asb_uci/type/SubjectType.h"
#include "../../../include/asb_uci/type/VisibleString1024Type.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NotificationBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NotificationID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NotificationSeverityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NotificationSourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NotificationStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubjectType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString1024Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

NotificationBaseType::NotificationBaseType()
  : notificationID_Accessor{boost::make_unique<NotificationID_Type>()},
    notificationState_Accessor{boost::make_unique<NotificationStateEnum>()},
    source_Accessor{boost::make_unique<NotificationSourceType>()},
    severity_Accessor{boost::make_unique<NotificationSeverityEnum>()},
    appliesTo_Accessor{boost::make_unique<AppliesTo>(0, SIZE_MAX)} {
}

NotificationBaseType::~NotificationBaseType() = default;

void NotificationBaseType::copy(const uci::type::NotificationBaseType& accessor) {
  copyImpl(accessor, false);
}

void NotificationBaseType::copyImpl(const uci::type::NotificationBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::notificationBaseType)) {
      const auto& accessorImpl = dynamic_cast<const NotificationBaseType&>(accessor);
      setNotificationID(*(accessorImpl.notificationID_Accessor));
      setNotificationState(*(accessorImpl.notificationState_Accessor));
      setTimestamp(accessorImpl.timestamp_Accessor);
      setSource(*(accessorImpl.source_Accessor));
      setSeverity(*(accessorImpl.severity_Accessor));
      setAppliesTo(*(accessorImpl.appliesTo_Accessor));
      if (accessorImpl.notificationNarrative_Accessor) {
        setNotificationNarrative(*(accessorImpl.notificationNarrative_Accessor));
      } else {
        notificationNarrative_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void NotificationBaseType::reset() noexcept {
  notificationID_Accessor->reset();
  notificationState_Accessor->reset();
  timestamp_Accessor = 0;
  source_Accessor->reset();
  severity_Accessor->reset();
  appliesTo_Accessor->reset();
  notificationNarrative_Accessor.reset();
}

const uci::type::NotificationID_Type& NotificationBaseType::getNotificationID() const {
  return *notificationID_Accessor;
}

uci::type::NotificationID_Type& NotificationBaseType::getNotificationID() {
  return *notificationID_Accessor;
}

uci::type::NotificationBaseType& NotificationBaseType::setNotificationID(const uci::type::NotificationID_Type& accessor) {
  if (&accessor != notificationID_Accessor.get()) {
    notificationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::NotificationStateEnum& NotificationBaseType::getNotificationState() const {
  return *notificationState_Accessor;
}

uci::type::NotificationStateEnum& NotificationBaseType::getNotificationState() {
  return *notificationState_Accessor;
}

uci::type::NotificationBaseType& NotificationBaseType::setNotificationState(const uci::type::NotificationStateEnum& accessor) {
  if (&accessor != notificationState_Accessor.get()) {
    notificationState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::NotificationBaseType& NotificationBaseType::setNotificationState(uci::type::NotificationStateEnum::EnumerationItem value) {
  notificationState_Accessor->setValue(value);
  return *this;
}


uci::type::DateTimeTypeValue NotificationBaseType::getTimestamp() const {
  return timestamp_Accessor;
}

uci::type::NotificationBaseType& NotificationBaseType::setTimestamp(uci::type::DateTimeTypeValue value) {
  timestamp_Accessor = value;
  return *this;
}


const uci::type::NotificationSourceType& NotificationBaseType::getSource() const {
  return *source_Accessor;
}

uci::type::NotificationSourceType& NotificationBaseType::getSource() {
  return *source_Accessor;
}

uci::type::NotificationBaseType& NotificationBaseType::setSource(const uci::type::NotificationSourceType& accessor) {
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::NotificationSeverityEnum& NotificationBaseType::getSeverity() const {
  return *severity_Accessor;
}

uci::type::NotificationSeverityEnum& NotificationBaseType::getSeverity() {
  return *severity_Accessor;
}

uci::type::NotificationBaseType& NotificationBaseType::setSeverity(const uci::type::NotificationSeverityEnum& accessor) {
  if (&accessor != severity_Accessor.get()) {
    severity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::NotificationBaseType& NotificationBaseType::setSeverity(uci::type::NotificationSeverityEnum::EnumerationItem value) {
  severity_Accessor->setValue(value);
  return *this;
}


const uci::type::NotificationBaseType::AppliesTo& NotificationBaseType::getAppliesTo() const {
  return *appliesTo_Accessor;
}

uci::type::NotificationBaseType::AppliesTo& NotificationBaseType::getAppliesTo() {
  return *appliesTo_Accessor;
}

uci::type::NotificationBaseType& NotificationBaseType::setAppliesTo(const uci::type::NotificationBaseType::AppliesTo& accessor) {
  if (&accessor != appliesTo_Accessor.get()) {
    appliesTo_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VisibleString1024Type& NotificationBaseType::getNotificationNarrative_() const {
  if (notificationNarrative_Accessor) {
    return *notificationNarrative_Accessor;
  }
  throw uci::base::UCIException("Error in getNotificationNarrative(): An attempt was made to get an optional field that was not enabled, call hasNotificationNarrative() to determine if it is safe to call getNotificationNarrative()");
}

const uci::type::VisibleString1024Type& NotificationBaseType::getNotificationNarrative() const {
  return getNotificationNarrative_();
}

uci::type::VisibleString1024Type& NotificationBaseType::getNotificationNarrative() {
  return getNotificationNarrative_();
}

uci::type::NotificationBaseType& NotificationBaseType::setNotificationNarrative(const uci::type::VisibleString1024Type& value) {
  return setNotificationNarrative(value.c_str());
}

uci::type::NotificationBaseType& NotificationBaseType::setNotificationNarrative(const std::string& value) {
  return setNotificationNarrative(value.c_str());
}

uci::type::NotificationBaseType& NotificationBaseType::setNotificationNarrative(const char* value) {
  enableNotificationNarrative().setStringValue(value);
  return *this;
}

bool NotificationBaseType::hasNotificationNarrative() const noexcept {
  return static_cast<bool>(notificationNarrative_Accessor);
}

uci::type::VisibleString1024Type& NotificationBaseType::enableNotificationNarrative(uci::base::accessorType::AccessorType type) {
  if (!notificationNarrative_Accessor) {
    notificationNarrative_Accessor = VisibleString1024Type::create(type);
  }
  return *notificationNarrative_Accessor;
}

uci::type::NotificationBaseType& NotificationBaseType::clearNotificationNarrative() noexcept {
  notificationNarrative_Accessor.reset();
  return *this;
}

std::unique_ptr<NotificationBaseType> NotificationBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::notificationBaseType : type};
  return std::unique_ptr<NotificationBaseType>(dynamic_cast<NotificationBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace NotificationBaseType_Names {

constexpr const char* Extern_Type_Name{"NotificationBaseType"};
constexpr const char* NotificationID_Name{"NotificationID"};
constexpr const char* NotificationState_Name{"NotificationState"};
constexpr const char* Timestamp_Name{"Timestamp"};
constexpr const char* Source_Name{"Source"};
constexpr const char* Severity_Name{"Severity"};
constexpr const char* AppliesTo_Name{"AppliesTo"};
constexpr const char* NotificationNarrative_Name{"NotificationNarrative"};

} // namespace NotificationBaseType_Names

void NotificationBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::NotificationBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = NotificationBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::NotificationID_Name) {
      NotificationID_Type::deserialize(valueType.second, accessor.getNotificationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::NotificationState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getNotificationState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::Source_Name) {
      NotificationSourceType::deserialize(valueType.second, accessor.getSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::Severity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSeverity().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::AppliesTo_Name) {
      uci::type::NotificationBaseType::AppliesTo& boundedList = accessor.getAppliesTo();
      const uci::type::NotificationBaseType::AppliesTo::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::SubjectType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::NotificationNarrative_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNotificationNarrative(*value);
      }
    }
  }
}

std::string NotificationBaseType::serialize(const uci::type::NotificationBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? NotificationBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::notificationBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, NotificationBaseType_Names::Extern_Type_Name);
    }
    NotificationID_Type::serialize(accessor.getNotificationID(), node, NotificationBaseType_Names::NotificationID_Name);
    NotificationStateEnum::serialize(accessor.getNotificationState(), node, NotificationBaseType_Names::NotificationState_Name, false);
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, NotificationBaseType_Names::Timestamp_Name);
    NotificationSourceType::serialize(accessor.getSource(), node, NotificationBaseType_Names::Source_Name);
    NotificationSeverityEnum::serialize(accessor.getSeverity(), node, NotificationBaseType_Names::Severity_Name, false);
    {
      const uci::type::NotificationBaseType::AppliesTo& boundedList = accessor.getAppliesTo();
      for (uci::type::NotificationBaseType::AppliesTo::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SubjectType::serialize(boundedList.at(i), node, NotificationBaseType_Names::AppliesTo_Name);
      }
    }
    if (accessor.hasNotificationNarrative()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getNotificationNarrative(), node, NotificationBaseType_Names::NotificationNarrative_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::NotificationBaseType& NotificationBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::NotificationBaseType>().release());
}

uci::type::NotificationBaseType& NotificationBaseType::create(const uci::type::NotificationBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::NotificationBaseType> newAccessor{boost::make_unique<asb_uci::type::NotificationBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void NotificationBaseType::destroy(uci::type::NotificationBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::NotificationBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

