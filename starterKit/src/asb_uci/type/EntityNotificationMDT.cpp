/** @file EntityNotificationMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EntityNotificationMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AssociatedMessageType.h"
#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/NotificationBaseType.h"
#include "asb_uci/type/NotificationPerspectiveEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AssociatedMessageType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/EntityNotificationMDT.h"
#include "uci/type/NotificationPerspectiveEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityNotificationMDT::EntityNotificationMDT()
  : entitySubjectID_Accessor{boost::make_unique<EntityID_Type>()},
    entityPerspective_Accessor{boost::make_unique<EntityPerspective>(1, 38)},
    associatedMessage_Accessor{boost::make_unique<AssociatedMessage>(0, SIZE_MAX)} {
}

EntityNotificationMDT::~EntityNotificationMDT() = default;

void EntityNotificationMDT::copy(const uci::type::EntityNotificationMDT& accessor) {
  copyImpl(accessor, false);
}

void EntityNotificationMDT::copyImpl(const uci::type::EntityNotificationMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    NotificationBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const EntityNotificationMDT&>(accessor);
    setEntitySubjectID(*(accessorImpl.entitySubjectID_Accessor));
    setEntityPerspective(*(accessorImpl.entityPerspective_Accessor));
    setAssociatedMessage(*(accessorImpl.associatedMessage_Accessor));
  }
}

void EntityNotificationMDT::reset() noexcept {
  NotificationBaseType::reset();
  if (entitySubjectID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    entitySubjectID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    entitySubjectID_Accessor->reset();
  }
  entityPerspective_Accessor->reset();
  associatedMessage_Accessor->reset();
}

const uci::type::EntityID_Type& EntityNotificationMDT::getEntitySubjectID() const {
  return *entitySubjectID_Accessor;
}

uci::type::EntityID_Type& EntityNotificationMDT::getEntitySubjectID() {
  return *entitySubjectID_Accessor;
}

uci::type::EntityNotificationMDT& EntityNotificationMDT::setEntitySubjectID(const uci::type::EntityID_Type& accessor) {
  enableEntitySubjectID(accessor.getAccessorType());
  if (&accessor != entitySubjectID_Accessor.get()) {
    entitySubjectID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& EntityNotificationMDT::enableEntitySubjectID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entitySubjectID_Accessor) || (entitySubjectID_Accessor->getAccessorType() != requestedType)) {
    entitySubjectID_Accessor = EntityID_Type::create(requestedType);
    if (!entitySubjectID_Accessor) {
      throw uci::base::UCIException("Error in enableEntitySubjectID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entitySubjectID_Accessor;
}

const uci::type::EntityNotificationMDT::EntityPerspective& EntityNotificationMDT::getEntityPerspective() const {
  return *entityPerspective_Accessor;
}

uci::type::EntityNotificationMDT::EntityPerspective& EntityNotificationMDT::getEntityPerspective() {
  return *entityPerspective_Accessor;
}

uci::type::EntityNotificationMDT& EntityNotificationMDT::setEntityPerspective(const uci::type::EntityNotificationMDT::EntityPerspective& accessor) {
  if (&accessor != entityPerspective_Accessor.get()) {
    entityPerspective_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityNotificationMDT::AssociatedMessage& EntityNotificationMDT::getAssociatedMessage() const {
  return *associatedMessage_Accessor;
}

uci::type::EntityNotificationMDT::AssociatedMessage& EntityNotificationMDT::getAssociatedMessage() {
  return *associatedMessage_Accessor;
}

uci::type::EntityNotificationMDT& EntityNotificationMDT::setAssociatedMessage(const uci::type::EntityNotificationMDT::AssociatedMessage& accessor) {
  if (&accessor != associatedMessage_Accessor.get()) {
    associatedMessage_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<EntityNotificationMDT> EntityNotificationMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityNotificationMDT : type};
  return (requestedType == uci::type::accessorType::entityNotificationMDT) ? boost::make_unique<EntityNotificationMDT>() : nullptr;
}

/**  */
namespace EntityNotificationMDT_Names {

constexpr const char* Extern_Type_Name{"EntityNotificationMDT"};
constexpr const char* EntitySubjectID_Name{"EntitySubjectID"};
constexpr const char* EntityPerspective_Name{"EntityPerspective"};
constexpr const char* AssociatedMessage_Name{"AssociatedMessage"};

} // namespace EntityNotificationMDT_Names

void EntityNotificationMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityNotificationMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityNotificationMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityNotificationMDT_Names::EntitySubjectID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntitySubjectID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityNotificationMDT_Names::EntityPerspective_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityNotificationMDT::EntityPerspective& boundedList = accessor.getEntityPerspective();
        const uci::type::EntityNotificationMDT::EntityPerspective::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityNotificationMDT_Names::AssociatedMessage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityNotificationMDT::AssociatedMessage& boundedList = accessor.getAssociatedMessage();
        const uci::type::EntityNotificationMDT::AssociatedMessage::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AssociatedMessageType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  NotificationBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string EntityNotificationMDT::serialize(const uci::type::EntityNotificationMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityNotificationMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityNotificationMDT_Names::Extern_Type_Name);
  }
  NotificationBaseType::serialize(accessor, node, "", false, false, false);
  EntityID_Type::serialize(accessor.getEntitySubjectID(), node, EntityNotificationMDT_Names::EntitySubjectID_Name);
  {
    const uci::type::EntityNotificationMDT::EntityPerspective& boundedList = accessor.getEntityPerspective();
    for (uci::type::EntityNotificationMDT::EntityPerspective::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      NotificationPerspectiveEnum::serialize(boundedList.at(i), node, EntityNotificationMDT_Names::EntityPerspective_Name, false);
    }
  }
  {
    const uci::type::EntityNotificationMDT::AssociatedMessage& boundedList = accessor.getAssociatedMessage();
    for (uci::type::EntityNotificationMDT::AssociatedMessage::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AssociatedMessageType::serialize(boundedList.at(i), node, EntityNotificationMDT_Names::AssociatedMessage_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityNotificationMDT& EntityNotificationMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityNotificationMDT>().release());
}

uci::type::EntityNotificationMDT& EntityNotificationMDT::create(const uci::type::EntityNotificationMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityNotificationMDT> newAccessor{boost::make_unique<asb_uci::type::EntityNotificationMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityNotificationMDT::destroy(uci::type::EntityNotificationMDT& accessor) {
  delete dynamic_cast<asb_uci::type::EntityNotificationMDT*>(&accessor);
}

} // namespace type

} // namespace uci

