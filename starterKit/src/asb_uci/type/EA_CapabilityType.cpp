/** @file EA_CapabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EA_CapabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityInitiationEnum.h"
#include "asb_uci/type/CommandableCapabilityDeclarationType.h"
#include "asb_uci/type/ComponentID_Type.h"
#include "asb_uci/type/EA_CapabilityOptionsType.h"
#include "asb_uci/type/EA_IndicatorEnum.h"
#include "asb_uci/type/EA_MessageOutputsEnum.h"
#include "asb_uci/type/EA_TechniqueGroupIdentifierType.h"
#include "asb_uci/type/EA_TechniqueType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityInitiationEnum.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/EA_CapabilityOptionsType.h"
#include "uci/type/EA_CapabilityType.h"
#include "uci/type/EA_IndicatorEnum.h"
#include "uci/type/EA_MessageOutputsEnum.h"
#include "uci/type/EA_TechniqueGroupIdentifierType.h"
#include "uci/type/EA_TechniqueType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EA_CapabilityType::EA_CapabilityType()
  : capabilityType_Accessor{boost::make_unique<CapabilityInitiationEnum>()},
    capabilityOptions_Accessor{boost::make_unique<EA_CapabilityOptionsType>()},
    technique_Accessor{boost::make_unique<Technique>(0, SIZE_MAX)},
    associatedComponentID_Accessor{boost::make_unique<AssociatedComponentID>(0, SIZE_MAX)} {
}

EA_CapabilityType::~EA_CapabilityType() = default;

void EA_CapabilityType::copy(const uci::type::EA_CapabilityType& accessor) {
  copyImpl(accessor, false);
}

void EA_CapabilityType::copyImpl(const uci::type::EA_CapabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CommandableCapabilityDeclarationType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const EA_CapabilityType&>(accessor);
    setCapabilityType(*(accessorImpl.capabilityType_Accessor));
    setCapabilityOptions(*(accessorImpl.capabilityOptions_Accessor));
    if (accessorImpl.eA_Indicator_Accessor) {
      setEA_Indicator(*(accessorImpl.eA_Indicator_Accessor));
    } else {
      eA_Indicator_Accessor.reset();
    }
    setTechnique(*(accessorImpl.technique_Accessor));
    setAssociatedComponentID(*(accessorImpl.associatedComponentID_Accessor));
    if (accessorImpl.messageOutput_Accessor) {
      setMessageOutput(*(accessorImpl.messageOutput_Accessor));
    } else {
      messageOutput_Accessor.reset();
    }
    if (accessorImpl.techniqueGroupIdentifier_Accessor) {
      setTechniqueGroupIdentifier(*(accessorImpl.techniqueGroupIdentifier_Accessor));
    } else {
      techniqueGroupIdentifier_Accessor.reset();
    }
  }
}

void EA_CapabilityType::reset() noexcept {
  CommandableCapabilityDeclarationType::reset();
  capabilityType_Accessor->reset();
  capabilityOptions_Accessor->reset();
  eA_Indicator_Accessor.reset();
  technique_Accessor->reset();
  associatedComponentID_Accessor->reset();
  messageOutput_Accessor.reset();
  techniqueGroupIdentifier_Accessor.reset();
}

const uci::type::CapabilityInitiationEnum& EA_CapabilityType::getCapabilityType() const {
  return *capabilityType_Accessor;
}

uci::type::CapabilityInitiationEnum& EA_CapabilityType::getCapabilityType() {
  return *capabilityType_Accessor;
}

uci::type::EA_CapabilityType& EA_CapabilityType::setCapabilityType(const uci::type::CapabilityInitiationEnum& accessor) {
  if (&accessor != capabilityType_Accessor.get()) {
    capabilityType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EA_CapabilityType& EA_CapabilityType::setCapabilityType(uci::type::CapabilityInitiationEnum::EnumerationItem value) {
  capabilityType_Accessor->setValue(value);
  return *this;
}


const uci::type::EA_CapabilityOptionsType& EA_CapabilityType::getCapabilityOptions() const {
  return *capabilityOptions_Accessor;
}

uci::type::EA_CapabilityOptionsType& EA_CapabilityType::getCapabilityOptions() {
  return *capabilityOptions_Accessor;
}

uci::type::EA_CapabilityType& EA_CapabilityType::setCapabilityOptions(const uci::type::EA_CapabilityOptionsType& accessor) {
  if (&accessor != capabilityOptions_Accessor.get()) {
    capabilityOptions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EA_IndicatorEnum& EA_CapabilityType::getEA_Indicator_() const {
  if (eA_Indicator_Accessor) {
    return *eA_Indicator_Accessor;
  }
  throw uci::base::UCIException("Error in getEA_Indicator(): An attempt was made to get an optional field that was not enabled, call hasEA_Indicator() to determine if it is safe to call getEA_Indicator()");
}

const uci::type::EA_IndicatorEnum& EA_CapabilityType::getEA_Indicator() const {
  return getEA_Indicator_();
}

uci::type::EA_IndicatorEnum& EA_CapabilityType::getEA_Indicator() {
  return getEA_Indicator_();
}

uci::type::EA_CapabilityType& EA_CapabilityType::setEA_Indicator(const uci::type::EA_IndicatorEnum& accessor) {
  enableEA_Indicator();
  if (&accessor != eA_Indicator_Accessor.get()) {
    eA_Indicator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EA_CapabilityType& EA_CapabilityType::setEA_Indicator(const uci::type::EA_IndicatorEnum::EnumerationItem value) {
  enableEA_Indicator().setValue(value);
  return *this;
}

bool EA_CapabilityType::hasEA_Indicator() const noexcept {
  return static_cast<bool>(eA_Indicator_Accessor);
}

uci::type::EA_IndicatorEnum& EA_CapabilityType::enableEA_Indicator(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_IndicatorEnum : type};
  if ((!eA_Indicator_Accessor) || (eA_Indicator_Accessor->getAccessorType() != requestedType)) {
    eA_Indicator_Accessor = EA_IndicatorEnum::create(requestedType);
    if (!eA_Indicator_Accessor) {
      throw uci::base::UCIException("Error in enableEA_Indicator(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eA_Indicator_Accessor;
}

uci::type::EA_CapabilityType& EA_CapabilityType::clearEA_Indicator() noexcept {
  eA_Indicator_Accessor.reset();
  return *this;
}

const uci::type::EA_CapabilityType::Technique& EA_CapabilityType::getTechnique() const {
  return *technique_Accessor;
}

uci::type::EA_CapabilityType::Technique& EA_CapabilityType::getTechnique() {
  return *technique_Accessor;
}

uci::type::EA_CapabilityType& EA_CapabilityType::setTechnique(const uci::type::EA_CapabilityType::Technique& accessor) {
  if (&accessor != technique_Accessor.get()) {
    technique_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EA_CapabilityType::AssociatedComponentID& EA_CapabilityType::getAssociatedComponentID() const {
  return *associatedComponentID_Accessor;
}

uci::type::EA_CapabilityType::AssociatedComponentID& EA_CapabilityType::getAssociatedComponentID() {
  return *associatedComponentID_Accessor;
}

uci::type::EA_CapabilityType& EA_CapabilityType::setAssociatedComponentID(const uci::type::EA_CapabilityType::AssociatedComponentID& accessor) {
  if (&accessor != associatedComponentID_Accessor.get()) {
    associatedComponentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EA_MessageOutputsEnum& EA_CapabilityType::getMessageOutput_() const {
  if (messageOutput_Accessor) {
    return *messageOutput_Accessor;
  }
  throw uci::base::UCIException("Error in getMessageOutput(): An attempt was made to get an optional field that was not enabled, call hasMessageOutput() to determine if it is safe to call getMessageOutput()");
}

const uci::type::EA_MessageOutputsEnum& EA_CapabilityType::getMessageOutput() const {
  return getMessageOutput_();
}

uci::type::EA_MessageOutputsEnum& EA_CapabilityType::getMessageOutput() {
  return getMessageOutput_();
}

uci::type::EA_CapabilityType& EA_CapabilityType::setMessageOutput(const uci::type::EA_MessageOutputsEnum& accessor) {
  enableMessageOutput();
  if (&accessor != messageOutput_Accessor.get()) {
    messageOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EA_CapabilityType& EA_CapabilityType::setMessageOutput(const uci::type::EA_MessageOutputsEnum::EnumerationItem value) {
  enableMessageOutput().setValue(value);
  return *this;
}

bool EA_CapabilityType::hasMessageOutput() const noexcept {
  return static_cast<bool>(messageOutput_Accessor);
}

uci::type::EA_MessageOutputsEnum& EA_CapabilityType::enableMessageOutput(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_MessageOutputsEnum : type};
  if ((!messageOutput_Accessor) || (messageOutput_Accessor->getAccessorType() != requestedType)) {
    messageOutput_Accessor = EA_MessageOutputsEnum::create(requestedType);
    if (!messageOutput_Accessor) {
      throw uci::base::UCIException("Error in enableMessageOutput(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *messageOutput_Accessor;
}

uci::type::EA_CapabilityType& EA_CapabilityType::clearMessageOutput() noexcept {
  messageOutput_Accessor.reset();
  return *this;
}

uci::type::EA_TechniqueGroupIdentifierType& EA_CapabilityType::getTechniqueGroupIdentifier_() const {
  if (techniqueGroupIdentifier_Accessor) {
    return *techniqueGroupIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getTechniqueGroupIdentifier(): An attempt was made to get an optional field that was not enabled, call hasTechniqueGroupIdentifier() to determine if it is safe to call getTechniqueGroupIdentifier()");
}

const uci::type::EA_TechniqueGroupIdentifierType& EA_CapabilityType::getTechniqueGroupIdentifier() const {
  return getTechniqueGroupIdentifier_();
}

uci::type::EA_TechniqueGroupIdentifierType& EA_CapabilityType::getTechniqueGroupIdentifier() {
  return getTechniqueGroupIdentifier_();
}

uci::type::EA_CapabilityType& EA_CapabilityType::setTechniqueGroupIdentifier(const uci::type::EA_TechniqueGroupIdentifierType& accessor) {
  enableTechniqueGroupIdentifier();
  if (&accessor != techniqueGroupIdentifier_Accessor.get()) {
    techniqueGroupIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_CapabilityType::hasTechniqueGroupIdentifier() const noexcept {
  return static_cast<bool>(techniqueGroupIdentifier_Accessor);
}

uci::type::EA_TechniqueGroupIdentifierType& EA_CapabilityType::enableTechniqueGroupIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_TechniqueGroupIdentifierType : type};
  if ((!techniqueGroupIdentifier_Accessor) || (techniqueGroupIdentifier_Accessor->getAccessorType() != requestedType)) {
    techniqueGroupIdentifier_Accessor = EA_TechniqueGroupIdentifierType::create(requestedType);
    if (!techniqueGroupIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enableTechniqueGroupIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *techniqueGroupIdentifier_Accessor;
}

uci::type::EA_CapabilityType& EA_CapabilityType::clearTechniqueGroupIdentifier() noexcept {
  techniqueGroupIdentifier_Accessor.reset();
  return *this;
}

std::unique_ptr<EA_CapabilityType> EA_CapabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_CapabilityType : type};
  return (requestedType == uci::type::accessorType::eA_CapabilityType) ? boost::make_unique<EA_CapabilityType>() : nullptr;
}

/**  */
namespace EA_CapabilityType_Names {

constexpr const char* Extern_Type_Name{"EA_CapabilityType"};
constexpr const char* CapabilityType_Name{"CapabilityType"};
constexpr const char* CapabilityOptions_Name{"CapabilityOptions"};
constexpr const char* EA_Indicator_Name{"EA_Indicator"};
constexpr const char* Technique_Name{"Technique"};
constexpr const char* AssociatedComponentID_Name{"AssociatedComponentID"};
constexpr const char* MessageOutput_Name{"MessageOutput"};
constexpr const char* TechniqueGroupIdentifier_Name{"TechniqueGroupIdentifier"};

} // namespace EA_CapabilityType_Names

void EA_CapabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_CapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EA_CapabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EA_CapabilityType_Names::CapabilityType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCapabilityType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EA_CapabilityType_Names::CapabilityOptions_Name) {
      EA_CapabilityOptionsType::deserialize(valueType.second, accessor.getCapabilityOptions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_CapabilityType_Names::EA_Indicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEA_Indicator().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EA_CapabilityType_Names::Technique_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EA_CapabilityType::Technique& boundedList = accessor.getTechnique();
        const uci::type::EA_CapabilityType::Technique::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EA_TechniqueType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EA_CapabilityType_Names::AssociatedComponentID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EA_CapabilityType::AssociatedComponentID& boundedList = accessor.getAssociatedComponentID();
        const uci::type::EA_CapabilityType::AssociatedComponentID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ComponentID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EA_CapabilityType_Names::MessageOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMessageOutput().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EA_CapabilityType_Names::TechniqueGroupIdentifier_Name) {
      EA_TechniqueGroupIdentifierType::deserialize(valueType.second, accessor.enableTechniqueGroupIdentifier(), nodeName, nsPrefix);
    }
  }
  CommandableCapabilityDeclarationType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string EA_CapabilityType::serialize(const uci::type::EA_CapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EA_CapabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EA_CapabilityType_Names::Extern_Type_Name);
  }
  CommandableCapabilityDeclarationType::serialize(accessor, node, "", false, false, false);
  CapabilityInitiationEnum::serialize(accessor.getCapabilityType(), node, EA_CapabilityType_Names::CapabilityType_Name, false);
  EA_CapabilityOptionsType::serialize(accessor.getCapabilityOptions(), node, EA_CapabilityType_Names::CapabilityOptions_Name);
  if (accessor.hasEA_Indicator()) {
    EA_IndicatorEnum::serialize(accessor.getEA_Indicator(), node, EA_CapabilityType_Names::EA_Indicator_Name, false);
  }
  {
    const uci::type::EA_CapabilityType::Technique& boundedList = accessor.getTechnique();
    for (uci::type::EA_CapabilityType::Technique::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EA_TechniqueType::serialize(boundedList.at(i), node, EA_CapabilityType_Names::Technique_Name);
    }
  }
  {
    const uci::type::EA_CapabilityType::AssociatedComponentID& boundedList = accessor.getAssociatedComponentID();
    for (uci::type::EA_CapabilityType::AssociatedComponentID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ComponentID_Type::serialize(boundedList.at(i), node, EA_CapabilityType_Names::AssociatedComponentID_Name);
    }
  }
  if (accessor.hasMessageOutput()) {
    EA_MessageOutputsEnum::serialize(accessor.getMessageOutput(), node, EA_CapabilityType_Names::MessageOutput_Name, false);
  }
  if (accessor.hasTechniqueGroupIdentifier()) {
    EA_TechniqueGroupIdentifierType::serialize(accessor.getTechniqueGroupIdentifier(), node, EA_CapabilityType_Names::TechniqueGroupIdentifier_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EA_CapabilityType& EA_CapabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EA_CapabilityType>().release());
}

uci::type::EA_CapabilityType& EA_CapabilityType::create(const uci::type::EA_CapabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EA_CapabilityType> newAccessor{boost::make_unique<asb_uci::type::EA_CapabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EA_CapabilityType::destroy(uci::type::EA_CapabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::EA_CapabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

