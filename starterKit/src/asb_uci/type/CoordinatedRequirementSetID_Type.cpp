/** @file CoordinatedRequirementSetID_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CoordinatedRequirementSetID_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CoordinatedRequirementSetID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CoordinatedRequirementSetID_Type::CoordinatedRequirementSetID_Type() = default;

CoordinatedRequirementSetID_Type::~CoordinatedRequirementSetID_Type() = default;

void CoordinatedRequirementSetID_Type::copy(const uci::type::CoordinatedRequirementSetID_Type& accessor) {
  copyImpl(accessor, false);
}

void CoordinatedRequirementSetID_Type::copyImpl(const uci::type::CoordinatedRequirementSetID_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ID_Type::copyImpl(accessor, false);
  }
}

void CoordinatedRequirementSetID_Type::reset() noexcept {
  ID_Type::reset();
}

std::unique_ptr<CoordinatedRequirementSetID_Type> CoordinatedRequirementSetID_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::coordinatedRequirementSetID_Type : type};
  return (requestedType == uci::type::accessorType::coordinatedRequirementSetID_Type) ? boost::make_unique<CoordinatedRequirementSetID_Type>() : nullptr;
}

/**  */
namespace CoordinatedRequirementSetID_Type_Names {

constexpr const char* Extern_Type_Name{"CoordinatedRequirementSetID_Type"};

} // namespace CoordinatedRequirementSetID_Type_Names

void CoordinatedRequirementSetID_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::CoordinatedRequirementSetID_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CoordinatedRequirementSetID_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    }
  }
  ID_Type::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CoordinatedRequirementSetID_Type::serialize(const uci::type::CoordinatedRequirementSetID_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CoordinatedRequirementSetID_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CoordinatedRequirementSetID_Type_Names::Extern_Type_Name);
  }
  ID_Type::serialize(accessor, node, "", false, false, false);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CoordinatedRequirementSetID_Type& CoordinatedRequirementSetID_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CoordinatedRequirementSetID_Type>().release());
}

uci::type::CoordinatedRequirementSetID_Type& CoordinatedRequirementSetID_Type::create(const uci::type::CoordinatedRequirementSetID_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CoordinatedRequirementSetID_Type> newAccessor{boost::make_unique<asb_uci::type::CoordinatedRequirementSetID_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CoordinatedRequirementSetID_Type::destroy(uci::type::CoordinatedRequirementSetID_Type& accessor) {
  delete dynamic_cast<asb_uci::type::CoordinatedRequirementSetID_Type*>(&accessor);
}

} // namespace type

} // namespace uci

