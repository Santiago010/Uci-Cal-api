/** @file PlannedCommActionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PlannedCommActionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommConfigurationID_Type.h"
#include "../../../include/asb_uci/type/CommConfigurationStateEnum.h"
#include "../../../include/asb_uci/type/PlannedCommCapabilityType.h"
#include "../../../include/asb_uci/type/PlannedSubsystemCommandType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommConfigurationID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommConfigurationStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlannedCommActionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlannedCommCapabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlannedSubsystemCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlannedCommActionType::PlannedCommActionType()
  : configurationID_Accessor{boost::make_unique<CommConfigurationID_Type>()},
    configurationState_Accessor{boost::make_unique<CommConfigurationStateEnum>()} {
}

PlannedCommActionType::~PlannedCommActionType() = default;

void PlannedCommActionType::copy(const uci::type::PlannedCommActionType& accessor) {
  copyImpl(accessor, false);
}

void PlannedCommActionType::copyImpl(const uci::type::PlannedCommActionType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::plannedCommActionType)) {
      const auto& accessorImpl = dynamic_cast<const PlannedCommActionType&>(accessor);
      setConfigurationID(*(accessorImpl.configurationID_Accessor));
      setConfigurationState(*(accessorImpl.configurationState_Accessor));
      if (accessorImpl.plannedSubsystemCommand_Accessor) {
        setPlannedSubsystemCommand(*(accessorImpl.plannedSubsystemCommand_Accessor));
      } else {
        plannedSubsystemCommand_Accessor.reset();
      }
      if (accessorImpl.plannedCommCapability_Accessor) {
        setPlannedCommCapability(*(accessorImpl.plannedCommCapability_Accessor));
      } else {
        plannedCommCapability_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void PlannedCommActionType::reset() noexcept {
  configurationID_Accessor->reset();
  configurationState_Accessor->reset();
  plannedSubsystemCommand_Accessor.reset();
  plannedCommCapability_Accessor.reset();
}

const uci::type::CommConfigurationID_Type& PlannedCommActionType::getConfigurationID() const {
  return *configurationID_Accessor;
}

uci::type::CommConfigurationID_Type& PlannedCommActionType::getConfigurationID() {
  return *configurationID_Accessor;
}

uci::type::PlannedCommActionType& PlannedCommActionType::setConfigurationID(const uci::type::CommConfigurationID_Type& accessor) {
  if (&accessor != configurationID_Accessor.get()) {
    configurationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommConfigurationStateEnum& PlannedCommActionType::getConfigurationState() const {
  return *configurationState_Accessor;
}

uci::type::CommConfigurationStateEnum& PlannedCommActionType::getConfigurationState() {
  return *configurationState_Accessor;
}

uci::type::PlannedCommActionType& PlannedCommActionType::setConfigurationState(const uci::type::CommConfigurationStateEnum& accessor) {
  if (&accessor != configurationState_Accessor.get()) {
    configurationState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlannedCommActionType& PlannedCommActionType::setConfigurationState(uci::type::CommConfigurationStateEnum::EnumerationItem value) {
  configurationState_Accessor->setValue(value);
  return *this;
}


uci::type::PlannedSubsystemCommandType& PlannedCommActionType::getPlannedSubsystemCommand_() const {
  if (plannedSubsystemCommand_Accessor) {
    return *plannedSubsystemCommand_Accessor;
  }
  throw uci::base::UCIException("Error in getPlannedSubsystemCommand(): An attempt was made to get an optional field that was not enabled, call hasPlannedSubsystemCommand() to determine if it is safe to call getPlannedSubsystemCommand()");
}

const uci::type::PlannedSubsystemCommandType& PlannedCommActionType::getPlannedSubsystemCommand() const {
  return getPlannedSubsystemCommand_();
}

uci::type::PlannedSubsystemCommandType& PlannedCommActionType::getPlannedSubsystemCommand() {
  return getPlannedSubsystemCommand_();
}

uci::type::PlannedCommActionType& PlannedCommActionType::setPlannedSubsystemCommand(const uci::type::PlannedSubsystemCommandType& accessor) {
  enablePlannedSubsystemCommand();
  if (&accessor != plannedSubsystemCommand_Accessor.get()) {
    plannedSubsystemCommand_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlannedCommActionType::hasPlannedSubsystemCommand() const noexcept {
  return static_cast<bool>(plannedSubsystemCommand_Accessor);
}

uci::type::PlannedSubsystemCommandType& PlannedCommActionType::enablePlannedSubsystemCommand(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::plannedSubsystemCommandType : type};
  if ((!plannedSubsystemCommand_Accessor) || (plannedSubsystemCommand_Accessor->getAccessorType() != requestedType)) {
    plannedSubsystemCommand_Accessor = PlannedSubsystemCommandType::create(requestedType);
    if (!plannedSubsystemCommand_Accessor) {
      throw uci::base::UCIException("Error in enablePlannedSubsystemCommand(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *plannedSubsystemCommand_Accessor;
}

uci::type::PlannedCommActionType& PlannedCommActionType::clearPlannedSubsystemCommand() noexcept {
  plannedSubsystemCommand_Accessor.reset();
  return *this;
}

uci::type::PlannedCommCapabilityType& PlannedCommActionType::getPlannedCommCapability_() const {
  if (plannedCommCapability_Accessor) {
    return *plannedCommCapability_Accessor;
  }
  throw uci::base::UCIException("Error in getPlannedCommCapability(): An attempt was made to get an optional field that was not enabled, call hasPlannedCommCapability() to determine if it is safe to call getPlannedCommCapability()");
}

const uci::type::PlannedCommCapabilityType& PlannedCommActionType::getPlannedCommCapability() const {
  return getPlannedCommCapability_();
}

uci::type::PlannedCommCapabilityType& PlannedCommActionType::getPlannedCommCapability() {
  return getPlannedCommCapability_();
}

uci::type::PlannedCommActionType& PlannedCommActionType::setPlannedCommCapability(const uci::type::PlannedCommCapabilityType& accessor) {
  enablePlannedCommCapability();
  if (&accessor != plannedCommCapability_Accessor.get()) {
    plannedCommCapability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlannedCommActionType::hasPlannedCommCapability() const noexcept {
  return static_cast<bool>(plannedCommCapability_Accessor);
}

uci::type::PlannedCommCapabilityType& PlannedCommActionType::enablePlannedCommCapability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::plannedCommCapabilityType : type};
  if ((!plannedCommCapability_Accessor) || (plannedCommCapability_Accessor->getAccessorType() != requestedType)) {
    plannedCommCapability_Accessor = PlannedCommCapabilityType::create(requestedType);
    if (!plannedCommCapability_Accessor) {
      throw uci::base::UCIException("Error in enablePlannedCommCapability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *plannedCommCapability_Accessor;
}

uci::type::PlannedCommActionType& PlannedCommActionType::clearPlannedCommCapability() noexcept {
  plannedCommCapability_Accessor.reset();
  return *this;
}

std::unique_ptr<PlannedCommActionType> PlannedCommActionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::plannedCommActionType : type};
  return std::unique_ptr<PlannedCommActionType>(dynamic_cast<PlannedCommActionType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace PlannedCommActionType_Names {

constexpr const char* Extern_Type_Name{"PlannedCommActionType"};
constexpr const char* ConfigurationID_Name{"ConfigurationID"};
constexpr const char* ConfigurationState_Name{"ConfigurationState"};
constexpr const char* PlannedSubsystemCommand_Name{"PlannedSubsystemCommand"};
constexpr const char* PlannedCommCapability_Name{"PlannedCommCapability"};

} // namespace PlannedCommActionType_Names

void PlannedCommActionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlannedCommActionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlannedCommActionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlannedCommActionType_Names::ConfigurationID_Name) {
      CommConfigurationID_Type::deserialize(valueType.second, accessor.getConfigurationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedCommActionType_Names::ConfigurationState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getConfigurationState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlannedCommActionType_Names::PlannedSubsystemCommand_Name) {
      PlannedSubsystemCommandType::deserialize(valueType.second, accessor.enablePlannedSubsystemCommand(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedCommActionType_Names::PlannedCommCapability_Name) {
      PlannedCommCapabilityType::deserialize(valueType.second, accessor.enablePlannedCommCapability(), nodeName, nsPrefix);
    }
  }
}

std::string PlannedCommActionType::serialize(const uci::type::PlannedCommActionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlannedCommActionType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::plannedCommActionType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlannedCommActionType_Names::Extern_Type_Name);
    }
    CommConfigurationID_Type::serialize(accessor.getConfigurationID(), node, PlannedCommActionType_Names::ConfigurationID_Name);
    CommConfigurationStateEnum::serialize(accessor.getConfigurationState(), node, PlannedCommActionType_Names::ConfigurationState_Name, false);
    if (accessor.hasPlannedSubsystemCommand()) {
      PlannedSubsystemCommandType::serialize(accessor.getPlannedSubsystemCommand(), node, PlannedCommActionType_Names::PlannedSubsystemCommand_Name);
    }
    if (accessor.hasPlannedCommCapability()) {
      PlannedCommCapabilityType::serialize(accessor.getPlannedCommCapability(), node, PlannedCommActionType_Names::PlannedCommCapability_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlannedCommActionType& PlannedCommActionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlannedCommActionType>().release());
}

uci::type::PlannedCommActionType& PlannedCommActionType::create(const uci::type::PlannedCommActionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlannedCommActionType> newAccessor{boost::make_unique<asb_uci::type::PlannedCommActionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlannedCommActionType::destroy(uci::type::PlannedCommActionType& accessor) {
  delete dynamic_cast<asb_uci::type::PlannedCommActionType*>(&accessor);
}

} // namespace type

} // namespace uci

