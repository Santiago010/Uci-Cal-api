/** @file VehicleIdentificationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/VehicleIdentificationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CallSignType.h"
#include "../../../include/asb_uci/type/DataLinkIdentifierPET.h"
#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/IFF_Type.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/VehicleUniqueIdentifierType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CallSignType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataLinkIdentifierPET.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VehicleIdentificationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VehicleUniqueIdentifierType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VehicleIdentificationType::VehicleIdentificationType()
  : callSign_Accessor{boost::make_unique<CallSign>(0, SIZE_MAX)},
    radarCrossSection_Accessor{boost::make_unique<RadarCrossSection>(0, SIZE_MAX)},
    dataLinkIdentifier_Accessor{boost::make_unique<DataLinkIdentifier>(0, SIZE_MAX)} {
}

VehicleIdentificationType::~VehicleIdentificationType() = default;

void VehicleIdentificationType::copy(const uci::type::VehicleIdentificationType& accessor) {
  copyImpl(accessor, false);
}

void VehicleIdentificationType::copyImpl(const uci::type::VehicleIdentificationType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::vehicleIdentificationType)) {
      const auto& accessorImpl = dynamic_cast<const VehicleIdentificationType&>(accessor);
      if (accessorImpl.systemID_Accessor) {
        setSystemID(*(accessorImpl.systemID_Accessor));
      } else {
        systemID_Accessor.reset();
      }
      if (accessorImpl.vehicleUniqueIdentifier_Accessor) {
        setVehicleUniqueIdentifier(*(accessorImpl.vehicleUniqueIdentifier_Accessor));
      } else {
        vehicleUniqueIdentifier_Accessor.reset();
      }
      if (accessorImpl.iFF_Accessor) {
        setIFF(*(accessorImpl.iFF_Accessor));
      } else {
        iFF_Accessor.reset();
      }
      setCallSign(*(accessorImpl.callSign_Accessor));
      setRadarCrossSection(*(accessorImpl.radarCrossSection_Accessor));
      setDataLinkIdentifier(*(accessorImpl.dataLinkIdentifier_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void VehicleIdentificationType::reset() noexcept {
  systemID_Accessor.reset();
  vehicleUniqueIdentifier_Accessor.reset();
  iFF_Accessor.reset();
  callSign_Accessor->reset();
  radarCrossSection_Accessor->reset();
  dataLinkIdentifier_Accessor->reset();
}

uci::type::SystemID_Type& VehicleIdentificationType::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): An attempt was made to get an optional field that was not enabled, call hasSystemID() to determine if it is safe to call getSystemID()");
}

const uci::type::SystemID_Type& VehicleIdentificationType::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& VehicleIdentificationType::getSystemID() {
  return getSystemID_();
}

uci::type::VehicleIdentificationType& VehicleIdentificationType::setSystemID(const uci::type::SystemID_Type& accessor) {
  enableSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VehicleIdentificationType::hasSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& VehicleIdentificationType::enableSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(requestedType);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::VehicleIdentificationType& VehicleIdentificationType::clearSystemID() noexcept {
  systemID_Accessor.reset();
  return *this;
}

uci::type::VehicleUniqueIdentifierType& VehicleIdentificationType::getVehicleUniqueIdentifier_() const {
  if (vehicleUniqueIdentifier_Accessor) {
    return *vehicleUniqueIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getVehicleUniqueIdentifier(): An attempt was made to get an optional field that was not enabled, call hasVehicleUniqueIdentifier() to determine if it is safe to call getVehicleUniqueIdentifier()");
}

const uci::type::VehicleUniqueIdentifierType& VehicleIdentificationType::getVehicleUniqueIdentifier() const {
  return getVehicleUniqueIdentifier_();
}

uci::type::VehicleUniqueIdentifierType& VehicleIdentificationType::getVehicleUniqueIdentifier() {
  return getVehicleUniqueIdentifier_();
}

uci::type::VehicleIdentificationType& VehicleIdentificationType::setVehicleUniqueIdentifier(const uci::type::VehicleUniqueIdentifierType& accessor) {
  enableVehicleUniqueIdentifier();
  if (&accessor != vehicleUniqueIdentifier_Accessor.get()) {
    vehicleUniqueIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VehicleIdentificationType::hasVehicleUniqueIdentifier() const noexcept {
  return static_cast<bool>(vehicleUniqueIdentifier_Accessor);
}

uci::type::VehicleUniqueIdentifierType& VehicleIdentificationType::enableVehicleUniqueIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleUniqueIdentifierType : type};
  if ((!vehicleUniqueIdentifier_Accessor) || (vehicleUniqueIdentifier_Accessor->getAccessorType() != requestedType)) {
    vehicleUniqueIdentifier_Accessor = VehicleUniqueIdentifierType::create(requestedType);
    if (!vehicleUniqueIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enableVehicleUniqueIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vehicleUniqueIdentifier_Accessor;
}

uci::type::VehicleIdentificationType& VehicleIdentificationType::clearVehicleUniqueIdentifier() noexcept {
  vehicleUniqueIdentifier_Accessor.reset();
  return *this;
}

uci::type::IFF_Type& VehicleIdentificationType::getIFF_() const {
  if (iFF_Accessor) {
    return *iFF_Accessor;
  }
  throw uci::base::UCIException("Error in getIFF(): An attempt was made to get an optional field that was not enabled, call hasIFF() to determine if it is safe to call getIFF()");
}

const uci::type::IFF_Type& VehicleIdentificationType::getIFF() const {
  return getIFF_();
}

uci::type::IFF_Type& VehicleIdentificationType::getIFF() {
  return getIFF_();
}

uci::type::VehicleIdentificationType& VehicleIdentificationType::setIFF(const uci::type::IFF_Type& accessor) {
  enableIFF();
  if (&accessor != iFF_Accessor.get()) {
    iFF_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VehicleIdentificationType::hasIFF() const noexcept {
  return static_cast<bool>(iFF_Accessor);
}

uci::type::IFF_Type& VehicleIdentificationType::enableIFF(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_Type : type};
  if ((!iFF_Accessor) || (iFF_Accessor->getAccessorType() != requestedType)) {
    iFF_Accessor = IFF_Type::create(requestedType);
    if (!iFF_Accessor) {
      throw uci::base::UCIException("Error in enableIFF(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *iFF_Accessor;
}

uci::type::VehicleIdentificationType& VehicleIdentificationType::clearIFF() noexcept {
  iFF_Accessor.reset();
  return *this;
}

const uci::type::VehicleIdentificationType::CallSign& VehicleIdentificationType::getCallSign() const {
  return *callSign_Accessor;
}

uci::type::VehicleIdentificationType::CallSign& VehicleIdentificationType::getCallSign() {
  return *callSign_Accessor;
}

uci::type::VehicleIdentificationType& VehicleIdentificationType::setCallSign(const uci::type::VehicleIdentificationType::CallSign& accessor) {
  if (&accessor != callSign_Accessor.get()) {
    callSign_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::VehicleIdentificationType::RadarCrossSection& VehicleIdentificationType::getRadarCrossSection() const {
  return *radarCrossSection_Accessor;
}

uci::type::VehicleIdentificationType::RadarCrossSection& VehicleIdentificationType::getRadarCrossSection() {
  return *radarCrossSection_Accessor;
}

uci::type::VehicleIdentificationType& VehicleIdentificationType::setRadarCrossSection(const uci::type::VehicleIdentificationType::RadarCrossSection& accessor) {
  if (&accessor != radarCrossSection_Accessor.get()) {
    radarCrossSection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::VehicleIdentificationType::DataLinkIdentifier& VehicleIdentificationType::getDataLinkIdentifier() const {
  return *dataLinkIdentifier_Accessor;
}

uci::type::VehicleIdentificationType::DataLinkIdentifier& VehicleIdentificationType::getDataLinkIdentifier() {
  return *dataLinkIdentifier_Accessor;
}

uci::type::VehicleIdentificationType& VehicleIdentificationType::setDataLinkIdentifier(const uci::type::VehicleIdentificationType::DataLinkIdentifier& accessor) {
  if (&accessor != dataLinkIdentifier_Accessor.get()) {
    dataLinkIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<VehicleIdentificationType> VehicleIdentificationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleIdentificationType : type};
  return std::unique_ptr<VehicleIdentificationType>(dynamic_cast<VehicleIdentificationType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace VehicleIdentificationType_Names {

constexpr const char* Extern_Type_Name{"VehicleIdentificationType"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* VehicleUniqueIdentifier_Name{"VehicleUniqueIdentifier"};
constexpr const char* IFF_Name{"IFF"};
constexpr const char* CallSign_Name{"CallSign"};
constexpr const char* RadarCrossSection_Name{"RadarCrossSection"};
constexpr const char* DataLinkIdentifier_Name{"DataLinkIdentifier"};

} // namespace VehicleIdentificationType_Names

void VehicleIdentificationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VehicleIdentificationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VehicleIdentificationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VehicleIdentificationType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VehicleIdentificationType_Names::VehicleUniqueIdentifier_Name) {
      VehicleUniqueIdentifierType::deserialize(valueType.second, accessor.enableVehicleUniqueIdentifier(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VehicleIdentificationType_Names::IFF_Name) {
      IFF_Type::deserialize(valueType.second, accessor.enableIFF(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VehicleIdentificationType_Names::CallSign_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::VehicleIdentificationType::CallSign& boundedList = accessor.getCallSign();
        const uci::type::VehicleIdentificationType::CallSign::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CallSignType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + VehicleIdentificationType_Names::RadarCrossSection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::VehicleIdentificationType::RadarCrossSection& boundedList = accessor.getRadarCrossSection();
        const uci::type::VehicleIdentificationType::RadarCrossSection::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + VehicleIdentificationType_Names::DataLinkIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::VehicleIdentificationType::DataLinkIdentifier& boundedList = accessor.getDataLinkIdentifier();
        const uci::type::VehicleIdentificationType::DataLinkIdentifier::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string VehicleIdentificationType::serialize(const uci::type::VehicleIdentificationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VehicleIdentificationType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::vehicleIdentificationType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, VehicleIdentificationType_Names::Extern_Type_Name);
    }
    if (accessor.hasSystemID()) {
      SystemID_Type::serialize(accessor.getSystemID(), node, VehicleIdentificationType_Names::SystemID_Name);
    }
    if (accessor.hasVehicleUniqueIdentifier()) {
      VehicleUniqueIdentifierType::serialize(accessor.getVehicleUniqueIdentifier(), node, VehicleIdentificationType_Names::VehicleUniqueIdentifier_Name);
    }
    if (accessor.hasIFF()) {
      IFF_Type::serialize(accessor.getIFF(), node, VehicleIdentificationType_Names::IFF_Name);
    }
    {
      const uci::type::VehicleIdentificationType::CallSign& boundedList = accessor.getCallSign();
      for (uci::type::VehicleIdentificationType::CallSign::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::CallSignType::serialize(boundedList.at(i), node, VehicleIdentificationType_Names::CallSign_Name);
      }
    }
    {
      const uci::type::VehicleIdentificationType::RadarCrossSection& boundedList = accessor.getRadarCrossSection();
      for (uci::type::VehicleIdentificationType::RadarCrossSection::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, VehicleIdentificationType_Names::RadarCrossSection_Name);
      }
    }
    {
      const uci::type::VehicleIdentificationType::DataLinkIdentifier& boundedList = accessor.getDataLinkIdentifier();
      for (uci::type::VehicleIdentificationType::DataLinkIdentifier::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::DataLinkIdentifierPET::serialize(boundedList.at(i), node, VehicleIdentificationType_Names::DataLinkIdentifier_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VehicleIdentificationType& VehicleIdentificationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VehicleIdentificationType>().release());
}

uci::type::VehicleIdentificationType& VehicleIdentificationType::create(const uci::type::VehicleIdentificationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VehicleIdentificationType> newAccessor{boost::make_unique<asb_uci::type::VehicleIdentificationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VehicleIdentificationType::destroy(uci::type::VehicleIdentificationType& accessor) {
  delete dynamic_cast<asb_uci::type::VehicleIdentificationType*>(&accessor);
}

} // namespace type

} // namespace uci

