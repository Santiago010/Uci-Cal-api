/** @file RadarAltimeterActivityMetricsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RadarAltimeterActivityMetricsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ConcurrentCollectionDetailsType.h"
#include "../../../include/asb_uci/type/RadarAltimeterActivityEstimatedPerformanceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ConcurrentCollectionDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadarAltimeterActivityEstimatedPerformanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadarAltimeterActivityMetricsType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RadarAltimeterActivityMetricsType::RadarAltimeterActivityMetricsType()
  : concurrentActivity_Accessor{boost::make_unique<ConcurrentActivity>(0, SIZE_MAX)},
    estimatedPerformance_Accessor{boost::make_unique<EstimatedPerformance>(0, 5)} {
}

RadarAltimeterActivityMetricsType::~RadarAltimeterActivityMetricsType() = default;

void RadarAltimeterActivityMetricsType::copy(const uci::type::RadarAltimeterActivityMetricsType& accessor) {
  copyImpl(accessor, false);
}

void RadarAltimeterActivityMetricsType::copyImpl(const uci::type::RadarAltimeterActivityMetricsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RadarAltimeterActivityMetricsType&>(accessor);
    if (accessorImpl.hasAttempts()) {
      setAttempts(accessorImpl.getAttempts());
    } else {
      clearAttempts();
    }
    if (accessorImpl.hasActualRevisitPeriod()) {
      setActualRevisitPeriod(accessorImpl.getActualRevisitPeriod());
    } else {
      clearActualRevisitPeriod();
    }
    if (accessorImpl.hasActualStartTime()) {
      setActualStartTime(accessorImpl.getActualStartTime());
    } else {
      clearActualStartTime();
    }
    if (accessorImpl.hasActualStopTime()) {
      setActualStopTime(accessorImpl.getActualStopTime());
    } else {
      clearActualStopTime();
    }
    setConcurrentActivity(*(accessorImpl.concurrentActivity_Accessor));
    if (accessorImpl.hasPercentRadarTimeline()) {
      setPercentRadarTimeline(accessorImpl.getPercentRadarTimeline());
    } else {
      clearPercentRadarTimeline();
    }
    if (accessorImpl.hasPercentageInFOV()) {
      setPercentageInFOV(accessorImpl.getPercentageInFOV());
    } else {
      clearPercentageInFOV();
    }
    if (accessorImpl.hasEstimatedERP()) {
      setEstimatedERP(accessorImpl.getEstimatedERP());
    } else {
      clearEstimatedERP();
    }
    setEstimatedPerformance(*(accessorImpl.estimatedPerformance_Accessor));
    if (accessorImpl.hasTimeToService()) {
      setTimeToService(accessorImpl.getTimeToService());
    } else {
      clearTimeToService();
    }
    if (accessorImpl.hasLastTimeToService()) {
      setLastTimeToService(accessorImpl.getLastTimeToService());
    } else {
      clearLastTimeToService();
    }
    if (accessorImpl.hasAverageTimeToService()) {
      setAverageTimeToService(accessorImpl.getAverageTimeToService());
    } else {
      clearAverageTimeToService();
    }
  }
}

void RadarAltimeterActivityMetricsType::reset() noexcept {
  clearAttempts();
  clearActualRevisitPeriod();
  clearActualStartTime();
  clearActualStopTime();
  concurrentActivity_Accessor->reset();
  clearPercentRadarTimeline();
  clearPercentageInFOV();
  clearEstimatedERP();
  estimatedPerformance_Accessor->reset();
  clearTimeToService();
  clearLastTimeToService();
  clearAverageTimeToService();
}

xs::UnsignedInt RadarAltimeterActivityMetricsType::getAttempts() const {
  if (attempts_Accessor) {
    return *attempts_Accessor;
  }
  throw uci::base::UCIException("Error in getAttempts(): An attempt was made to get an optional field that was not enabled, call hasAttempts() to determine if it is safe to call getAttempts()");
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::setAttempts(xs::UnsignedInt value) {
  attempts_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityMetricsType::hasAttempts() const noexcept {
  return attempts_Accessor.has_value();
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::clearAttempts() noexcept {
  attempts_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue RadarAltimeterActivityMetricsType::getActualRevisitPeriod() const {
  if (actualRevisitPeriod_Accessor) {
    return *actualRevisitPeriod_Accessor;
  }
  throw uci::base::UCIException("Error in getActualRevisitPeriod(): An attempt was made to get an optional field that was not enabled, call hasActualRevisitPeriod() to determine if it is safe to call getActualRevisitPeriod()");
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::setActualRevisitPeriod(uci::type::DurationTypeValue value) {
  actualRevisitPeriod_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityMetricsType::hasActualRevisitPeriod() const noexcept {
  return actualRevisitPeriod_Accessor.has_value();
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::clearActualRevisitPeriod() noexcept {
  actualRevisitPeriod_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue RadarAltimeterActivityMetricsType::getActualStartTime() const {
  if (actualStartTime_Accessor) {
    return *actualStartTime_Accessor;
  }
  throw uci::base::UCIException("Error in getActualStartTime(): An attempt was made to get an optional field that was not enabled, call hasActualStartTime() to determine if it is safe to call getActualStartTime()");
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::setActualStartTime(uci::type::DateTimeTypeValue value) {
  actualStartTime_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityMetricsType::hasActualStartTime() const noexcept {
  return actualStartTime_Accessor.has_value();
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::clearActualStartTime() noexcept {
  actualStartTime_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue RadarAltimeterActivityMetricsType::getActualStopTime() const {
  if (actualStopTime_Accessor) {
    return *actualStopTime_Accessor;
  }
  throw uci::base::UCIException("Error in getActualStopTime(): An attempt was made to get an optional field that was not enabled, call hasActualStopTime() to determine if it is safe to call getActualStopTime()");
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::setActualStopTime(uci::type::DateTimeTypeValue value) {
  actualStopTime_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityMetricsType::hasActualStopTime() const noexcept {
  return actualStopTime_Accessor.has_value();
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::clearActualStopTime() noexcept {
  actualStopTime_Accessor.reset();
  return *this;
}

const uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity& RadarAltimeterActivityMetricsType::getConcurrentActivity() const {
  return *concurrentActivity_Accessor;
}

uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity& RadarAltimeterActivityMetricsType::getConcurrentActivity() {
  return *concurrentActivity_Accessor;
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::setConcurrentActivity(const uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity& accessor) {
  if (&accessor != concurrentActivity_Accessor.get()) {
    concurrentActivity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PercentTypeValue RadarAltimeterActivityMetricsType::getPercentRadarTimeline() const {
  if (percentRadarTimeline_Accessor) {
    return *percentRadarTimeline_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentRadarTimeline(): An attempt was made to get an optional field that was not enabled, call hasPercentRadarTimeline() to determine if it is safe to call getPercentRadarTimeline()");
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::setPercentRadarTimeline(uci::type::PercentTypeValue value) {
  percentRadarTimeline_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityMetricsType::hasPercentRadarTimeline() const noexcept {
  return percentRadarTimeline_Accessor.has_value();
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::clearPercentRadarTimeline() noexcept {
  percentRadarTimeline_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue RadarAltimeterActivityMetricsType::getPercentageInFOV() const {
  if (percentageInFOV_Accessor) {
    return *percentageInFOV_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentageInFOV(): An attempt was made to get an optional field that was not enabled, call hasPercentageInFOV() to determine if it is safe to call getPercentageInFOV()");
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::setPercentageInFOV(uci::type::PercentTypeValue value) {
  percentageInFOV_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityMetricsType::hasPercentageInFOV() const noexcept {
  return percentageInFOV_Accessor.has_value();
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::clearPercentageInFOV() noexcept {
  percentageInFOV_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue RadarAltimeterActivityMetricsType::getEstimatedERP() const {
  if (estimatedERP_Accessor) {
    return *estimatedERP_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedERP(): An attempt was made to get an optional field that was not enabled, call hasEstimatedERP() to determine if it is safe to call getEstimatedERP()");
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::setEstimatedERP(uci::type::DecibelTypeValue value) {
  estimatedERP_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityMetricsType::hasEstimatedERP() const noexcept {
  return estimatedERP_Accessor.has_value();
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::clearEstimatedERP() noexcept {
  estimatedERP_Accessor.reset();
  return *this;
}

const uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance& RadarAltimeterActivityMetricsType::getEstimatedPerformance() const {
  return *estimatedPerformance_Accessor;
}

uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance& RadarAltimeterActivityMetricsType::getEstimatedPerformance() {
  return *estimatedPerformance_Accessor;
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::setEstimatedPerformance(const uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance& accessor) {
  if (&accessor != estimatedPerformance_Accessor.get()) {
    estimatedPerformance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DurationTypeValue RadarAltimeterActivityMetricsType::getTimeToService() const {
  if (timeToService_Accessor) {
    return *timeToService_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeToService(): An attempt was made to get an optional field that was not enabled, call hasTimeToService() to determine if it is safe to call getTimeToService()");
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::setTimeToService(uci::type::DurationTypeValue value) {
  timeToService_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityMetricsType::hasTimeToService() const noexcept {
  return timeToService_Accessor.has_value();
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::clearTimeToService() noexcept {
  timeToService_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue RadarAltimeterActivityMetricsType::getLastTimeToService() const {
  if (lastTimeToService_Accessor) {
    return *lastTimeToService_Accessor;
  }
  throw uci::base::UCIException("Error in getLastTimeToService(): An attempt was made to get an optional field that was not enabled, call hasLastTimeToService() to determine if it is safe to call getLastTimeToService()");
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::setLastTimeToService(uci::type::DurationTypeValue value) {
  lastTimeToService_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityMetricsType::hasLastTimeToService() const noexcept {
  return lastTimeToService_Accessor.has_value();
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::clearLastTimeToService() noexcept {
  lastTimeToService_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue RadarAltimeterActivityMetricsType::getAverageTimeToService() const {
  if (averageTimeToService_Accessor) {
    return *averageTimeToService_Accessor;
  }
  throw uci::base::UCIException("Error in getAverageTimeToService(): An attempt was made to get an optional field that was not enabled, call hasAverageTimeToService() to determine if it is safe to call getAverageTimeToService()");
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::setAverageTimeToService(uci::type::DurationTypeValue value) {
  averageTimeToService_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityMetricsType::hasAverageTimeToService() const noexcept {
  return averageTimeToService_Accessor.has_value();
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::clearAverageTimeToService() noexcept {
  averageTimeToService_Accessor.reset();
  return *this;
}

std::unique_ptr<RadarAltimeterActivityMetricsType> RadarAltimeterActivityMetricsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarAltimeterActivityMetricsType : type};
  return (requestedType == uci::type::accessorType::radarAltimeterActivityMetricsType) ? boost::make_unique<RadarAltimeterActivityMetricsType>() : nullptr;
}

/**  */
namespace RadarAltimeterActivityMetricsType_Names {

constexpr const char* Extern_Type_Name{"RadarAltimeterActivityMetricsType"};
constexpr const char* Attempts_Name{"Attempts"};
constexpr const char* ActualRevisitPeriod_Name{"ActualRevisitPeriod"};
constexpr const char* ActualStartTime_Name{"ActualStartTime"};
constexpr const char* ActualStopTime_Name{"ActualStopTime"};
constexpr const char* ConcurrentActivity_Name{"ConcurrentActivity"};
constexpr const char* PercentRadarTimeline_Name{"PercentRadarTimeline"};
constexpr const char* PercentageInFOV_Name{"PercentageInFOV"};
constexpr const char* EstimatedERP_Name{"EstimatedERP"};
constexpr const char* EstimatedPerformance_Name{"EstimatedPerformance"};
constexpr const char* TimeToService_Name{"TimeToService"};
constexpr const char* LastTimeToService_Name{"LastTimeToService"};
constexpr const char* AverageTimeToService_Name{"AverageTimeToService"};

} // namespace RadarAltimeterActivityMetricsType_Names

void RadarAltimeterActivityMetricsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RadarAltimeterActivityMetricsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RadarAltimeterActivityMetricsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::Attempts_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAttempts(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::ActualRevisitPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualRevisitPeriod(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::ActualStartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStartTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::ActualStopTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStopTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::ConcurrentActivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity& boundedList = accessor.getConcurrentActivity();
        const uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ConcurrentCollectionDetailsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::PercentRadarTimeline_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentRadarTimeline(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::PercentageInFOV_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentageInFOV(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::EstimatedERP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedERP(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::EstimatedPerformance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance& boundedList = accessor.getEstimatedPerformance();
        const uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RadarAltimeterActivityEstimatedPerformanceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::TimeToService_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeToService(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::LastTimeToService_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLastTimeToService(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::AverageTimeToService_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAverageTimeToService(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string RadarAltimeterActivityMetricsType::serialize(const uci::type::RadarAltimeterActivityMetricsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RadarAltimeterActivityMetricsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RadarAltimeterActivityMetricsType_Names::Extern_Type_Name);
  }
  if (accessor.hasAttempts()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAttempts(), node, RadarAltimeterActivityMetricsType_Names::Attempts_Name);
  }
  if (accessor.hasActualRevisitPeriod()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getActualRevisitPeriod(), node, RadarAltimeterActivityMetricsType_Names::ActualRevisitPeriod_Name);
  }
  if (accessor.hasActualStartTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStartTime(), node, RadarAltimeterActivityMetricsType_Names::ActualStartTime_Name);
  }
  if (accessor.hasActualStopTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStopTime(), node, RadarAltimeterActivityMetricsType_Names::ActualStopTime_Name);
  }
  {
    const uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity& boundedList = accessor.getConcurrentActivity();
    for (uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ConcurrentCollectionDetailsType::serialize(boundedList.at(i), node, RadarAltimeterActivityMetricsType_Names::ConcurrentActivity_Name);
    }
  }
  if (accessor.hasPercentRadarTimeline()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentRadarTimeline(), node, RadarAltimeterActivityMetricsType_Names::PercentRadarTimeline_Name);
  }
  if (accessor.hasPercentageInFOV()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentageInFOV(), node, RadarAltimeterActivityMetricsType_Names::PercentageInFOV_Name);
  }
  if (accessor.hasEstimatedERP()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedERP(), node, RadarAltimeterActivityMetricsType_Names::EstimatedERP_Name);
  }
  {
    const uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance& boundedList = accessor.getEstimatedPerformance();
    for (uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RadarAltimeterActivityEstimatedPerformanceType::serialize(boundedList.at(i), node, RadarAltimeterActivityMetricsType_Names::EstimatedPerformance_Name);
    }
  }
  if (accessor.hasTimeToService()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTimeToService(), node, RadarAltimeterActivityMetricsType_Names::TimeToService_Name);
  }
  if (accessor.hasLastTimeToService()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getLastTimeToService(), node, RadarAltimeterActivityMetricsType_Names::LastTimeToService_Name);
  }
  if (accessor.hasAverageTimeToService()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getAverageTimeToService(), node, RadarAltimeterActivityMetricsType_Names::AverageTimeToService_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RadarAltimeterActivityMetricsType>().release());
}

uci::type::RadarAltimeterActivityMetricsType& RadarAltimeterActivityMetricsType::create(const uci::type::RadarAltimeterActivityMetricsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RadarAltimeterActivityMetricsType> newAccessor{boost::make_unique<asb_uci::type::RadarAltimeterActivityMetricsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RadarAltimeterActivityMetricsType::destroy(uci::type::RadarAltimeterActivityMetricsType& accessor) {
  delete dynamic_cast<asb_uci::type::RadarAltimeterActivityMetricsType*>(&accessor);
}

} // namespace type

} // namespace uci

