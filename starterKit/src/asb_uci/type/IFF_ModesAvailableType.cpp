/** @file IFF_ModesAvailableType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/IFF_ModesAvailableType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/IFF_ModeS_SupportEnum.h"
#include "asb_uci/type/IFF_ModesEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/IFF_ADS_B_SubtypeType.h"
#include "uci/type/IFF_ADS_B_Type.h"
#include "uci/type/IFF_Mode5_FormatType.h"
#include "uci/type/IFF_ModeS_SupportEnum.h"
#include "uci/type/IFF_ModesAvailableType.h"
#include "uci/type/IFF_ModesEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IFF_ModesAvailableType::IFF_ModesAvailableType()
  : iFF_Modes_Accessor{boost::make_unique<IFF_Modes>(1, 7)},
    mode5_Format_Accessor{boost::make_unique<Mode5_Format>(0, 31)},
    modeS_RegistersSupported_Accessor{boost::make_unique<ModeS_RegistersSupported>(0, 4)},
    aDS_B_Type_Accessor{boost::make_unique<ADS_B_Type>(0, 31)},
    aDS_B_SubType_Accessor{boost::make_unique<ADS_B_SubType>(0, 7)} {
}

IFF_ModesAvailableType::~IFF_ModesAvailableType() = default;

void IFF_ModesAvailableType::copy(const uci::type::IFF_ModesAvailableType& accessor) {
  copyImpl(accessor, false);
}

void IFF_ModesAvailableType::copyImpl(const uci::type::IFF_ModesAvailableType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IFF_ModesAvailableType&>(accessor);
    setIFF_Modes(*(accessorImpl.iFF_Modes_Accessor));
    setMode5_Format(*(accessorImpl.mode5_Format_Accessor));
    setModeS_RegistersSupported(*(accessorImpl.modeS_RegistersSupported_Accessor));
    setADS_B_Type(*(accessorImpl.aDS_B_Type_Accessor));
    setADS_B_SubType(*(accessorImpl.aDS_B_SubType_Accessor));
  }
}

void IFF_ModesAvailableType::reset() noexcept {
  iFF_Modes_Accessor->reset();
  mode5_Format_Accessor->reset();
  modeS_RegistersSupported_Accessor->reset();
  aDS_B_Type_Accessor->reset();
  aDS_B_SubType_Accessor->reset();
}

const uci::type::IFF_ModesAvailableType::IFF_Modes& IFF_ModesAvailableType::getIFF_Modes() const {
  return *iFF_Modes_Accessor;
}

uci::type::IFF_ModesAvailableType::IFF_Modes& IFF_ModesAvailableType::getIFF_Modes() {
  return *iFF_Modes_Accessor;
}

uci::type::IFF_ModesAvailableType& IFF_ModesAvailableType::setIFF_Modes(const uci::type::IFF_ModesAvailableType::IFF_Modes& accessor) {
  if (&accessor != iFF_Modes_Accessor.get()) {
    iFF_Modes_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IFF_ModesAvailableType::Mode5_Format& IFF_ModesAvailableType::getMode5_Format() const {
  return *mode5_Format_Accessor;
}

uci::type::IFF_ModesAvailableType::Mode5_Format& IFF_ModesAvailableType::getMode5_Format() {
  return *mode5_Format_Accessor;
}

uci::type::IFF_ModesAvailableType& IFF_ModesAvailableType::setMode5_Format(const uci::type::IFF_ModesAvailableType::Mode5_Format& accessor) {
  if (&accessor != mode5_Format_Accessor.get()) {
    mode5_Format_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IFF_ModesAvailableType::ModeS_RegistersSupported& IFF_ModesAvailableType::getModeS_RegistersSupported() const {
  return *modeS_RegistersSupported_Accessor;
}

uci::type::IFF_ModesAvailableType::ModeS_RegistersSupported& IFF_ModesAvailableType::getModeS_RegistersSupported() {
  return *modeS_RegistersSupported_Accessor;
}

uci::type::IFF_ModesAvailableType& IFF_ModesAvailableType::setModeS_RegistersSupported(const uci::type::IFF_ModesAvailableType::ModeS_RegistersSupported& accessor) {
  if (&accessor != modeS_RegistersSupported_Accessor.get()) {
    modeS_RegistersSupported_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IFF_ModesAvailableType::ADS_B_Type& IFF_ModesAvailableType::getADS_B_Type() const {
  return *aDS_B_Type_Accessor;
}

uci::type::IFF_ModesAvailableType::ADS_B_Type& IFF_ModesAvailableType::getADS_B_Type() {
  return *aDS_B_Type_Accessor;
}

uci::type::IFF_ModesAvailableType& IFF_ModesAvailableType::setADS_B_Type(const uci::type::IFF_ModesAvailableType::ADS_B_Type& accessor) {
  if (&accessor != aDS_B_Type_Accessor.get()) {
    aDS_B_Type_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IFF_ModesAvailableType::ADS_B_SubType& IFF_ModesAvailableType::getADS_B_SubType() const {
  return *aDS_B_SubType_Accessor;
}

uci::type::IFF_ModesAvailableType::ADS_B_SubType& IFF_ModesAvailableType::getADS_B_SubType() {
  return *aDS_B_SubType_Accessor;
}

uci::type::IFF_ModesAvailableType& IFF_ModesAvailableType::setADS_B_SubType(const uci::type::IFF_ModesAvailableType::ADS_B_SubType& accessor) {
  if (&accessor != aDS_B_SubType_Accessor.get()) {
    aDS_B_SubType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<IFF_ModesAvailableType> IFF_ModesAvailableType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_ModesAvailableType : type};
  return (requestedType == uci::type::accessorType::iFF_ModesAvailableType) ? boost::make_unique<IFF_ModesAvailableType>() : nullptr;
}

/**  */
namespace IFF_ModesAvailableType_Names {

constexpr const char* Extern_Type_Name{"IFF_ModesAvailableType"};
constexpr const char* IFF_Modes_Name{"IFF_Modes"};
constexpr const char* Mode5_Format_Name{"Mode5_Format"};
constexpr const char* ModeS_RegistersSupported_Name{"ModeS_RegistersSupported"};
constexpr const char* ADS_B_Type_Name{"ADS_B_Type"};
constexpr const char* ADS_B_SubType_Name{"ADS_B_SubType"};

} // namespace IFF_ModesAvailableType_Names

void IFF_ModesAvailableType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IFF_ModesAvailableType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IFF_ModesAvailableType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IFF_ModesAvailableType_Names::IFF_Modes_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IFF_ModesAvailableType::IFF_Modes& boundedList = accessor.getIFF_Modes();
        const uci::type::IFF_ModesAvailableType::IFF_Modes::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_ModesAvailableType_Names::Mode5_Format_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IFF_ModesAvailableType::Mode5_Format& boundedList = accessor.getMode5_Format();
        const uci::type::IFF_ModesAvailableType::Mode5_Format::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedByteValue(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + IFF_ModesAvailableType_Names::ModeS_RegistersSupported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IFF_ModesAvailableType::ModeS_RegistersSupported& boundedList = accessor.getModeS_RegistersSupported();
        const uci::type::IFF_ModesAvailableType::ModeS_RegistersSupported::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_ModesAvailableType_Names::ADS_B_Type_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IFF_ModesAvailableType::ADS_B_Type& boundedList = accessor.getADS_B_Type();
        const uci::type::IFF_ModesAvailableType::ADS_B_Type::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedByteValue(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + IFF_ModesAvailableType_Names::ADS_B_SubType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IFF_ModesAvailableType::ADS_B_SubType& boundedList = accessor.getADS_B_SubType();
        const uci::type::IFF_ModesAvailableType::ADS_B_SubType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedByteValue(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    }
  }
}

std::string IFF_ModesAvailableType::serialize(const uci::type::IFF_ModesAvailableType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IFF_ModesAvailableType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IFF_ModesAvailableType_Names::Extern_Type_Name);
  }
  {
    const uci::type::IFF_ModesAvailableType::IFF_Modes& boundedList = accessor.getIFF_Modes();
    for (uci::type::IFF_ModesAvailableType::IFF_Modes::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      IFF_ModesEnum::serialize(boundedList.at(i), node, IFF_ModesAvailableType_Names::IFF_Modes_Name, false);
    }
  }
  {
    const uci::type::IFF_ModesAvailableType::Mode5_Format& boundedList = accessor.getMode5_Format();
    for (uci::type::IFF_ModesAvailableType::Mode5_Format::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeUnsignedByte(boundedList.at(i), node, IFF_ModesAvailableType_Names::Mode5_Format_Name);
    }
  }
  {
    const uci::type::IFF_ModesAvailableType::ModeS_RegistersSupported& boundedList = accessor.getModeS_RegistersSupported();
    for (uci::type::IFF_ModesAvailableType::ModeS_RegistersSupported::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      IFF_ModeS_SupportEnum::serialize(boundedList.at(i), node, IFF_ModesAvailableType_Names::ModeS_RegistersSupported_Name, false);
    }
  }
  {
    const uci::type::IFF_ModesAvailableType::ADS_B_Type& boundedList = accessor.getADS_B_Type();
    for (uci::type::IFF_ModesAvailableType::ADS_B_Type::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeUnsignedByte(boundedList.at(i), node, IFF_ModesAvailableType_Names::ADS_B_Type_Name);
    }
  }
  {
    const uci::type::IFF_ModesAvailableType::ADS_B_SubType& boundedList = accessor.getADS_B_SubType();
    for (uci::type::IFF_ModesAvailableType::ADS_B_SubType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeUnsignedByte(boundedList.at(i), node, IFF_ModesAvailableType_Names::ADS_B_SubType_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IFF_ModesAvailableType& IFF_ModesAvailableType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IFF_ModesAvailableType>().release());
}

uci::type::IFF_ModesAvailableType& IFF_ModesAvailableType::create(const uci::type::IFF_ModesAvailableType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IFF_ModesAvailableType> newAccessor{boost::make_unique<asb_uci::type::IFF_ModesAvailableType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IFF_ModesAvailableType::destroy(uci::type::IFF_ModesAvailableType& accessor) {
  delete dynamic_cast<asb_uci::type::IFF_ModesAvailableType*>(&accessor);
}

} // namespace type

} // namespace uci

