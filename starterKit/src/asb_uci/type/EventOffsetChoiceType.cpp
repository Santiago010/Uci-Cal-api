/** @file EventOffsetChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EventOffsetChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/LOS_InertialB_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AngleType.h"
#include "uci/type/DurationType.h"
#include "uci/type/EventOffsetChoiceType.h"
#include "uci/type/LOS_InertialB_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EventOffsetChoiceType::EventOffsetChoiceType() = default;

EventOffsetChoiceType::~EventOffsetChoiceType() = default;

void EventOffsetChoiceType::copy(const uci::type::EventOffsetChoiceType& accessor) {
  copyImpl(accessor, false);
}

void EventOffsetChoiceType::copyImpl(const uci::type::EventOffsetChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EventOffsetChoiceType&>(accessor);
    offsetTime_Accessor = (accessorImpl.offsetTime_Accessor ? accessorImpl.offsetTime_Accessor : boost::none);
    offsetAngle_Accessor = (accessorImpl.offsetAngle_Accessor ? accessorImpl.offsetAngle_Accessor : boost::none);
    if (accessorImpl.azEl_Accessor) {
      setAzEl(*(accessorImpl.azEl_Accessor));
    } else {
      azEl_Accessor.reset();
    }
  }
}

void EventOffsetChoiceType::reset() noexcept {
  offsetTime_Accessor.reset();
  offsetAngle_Accessor.reset();
  azEl_Accessor.reset();
}

uci::type::EventOffsetChoiceType::EventOffsetChoiceTypeChoice EventOffsetChoiceType::getEventOffsetChoiceTypeChoiceOrdinal() const noexcept {
  if (offsetTime_Accessor) {
    return EVENTOFFSETCHOICETYPE_CHOICE_OFFSETTIME;
  }
  if (offsetAngle_Accessor) {
    return EVENTOFFSETCHOICETYPE_CHOICE_OFFSETANGLE;
  }
  if (azEl_Accessor) {
    return EVENTOFFSETCHOICETYPE_CHOICE_AZEL;
  }
  return EVENTOFFSETCHOICETYPE_CHOICE_NONE;
}

uci::type::EventOffsetChoiceType& EventOffsetChoiceType::setEventOffsetChoiceTypeChoiceOrdinal(uci::type::EventOffsetChoiceType::EventOffsetChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EVENTOFFSETCHOICETYPE_CHOICE_OFFSETTIME:
      chooseOffsetTime();
      break;
    case EVENTOFFSETCHOICETYPE_CHOICE_OFFSETANGLE:
      chooseOffsetAngle();
      break;
    case EVENTOFFSETCHOICETYPE_CHOICE_AZEL:
      chooseAzEl("setEventOffsetChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEventOffsetChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::DurationTypeValue EventOffsetChoiceType::getOffsetTime() const {
  if (offsetTime_Accessor) {
    return *offsetTime_Accessor;
  }
  throw uci::base::UCIException("Error in getOffsetTime(): Unable to get OffsetTime, field not selected");
}

uci::type::EventOffsetChoiceType& EventOffsetChoiceType::setOffsetTime(uci::type::DurationTypeValue value) {
  chooseOffsetTime();
  offsetTime_Accessor = value;
  return *this;
}

bool EventOffsetChoiceType::isOffsetTime() const noexcept {
  return static_cast<bool>(offsetTime_Accessor);
}

void EventOffsetChoiceType::chooseOffsetTime() {
  offsetAngle_Accessor.reset();
  azEl_Accessor.reset();
  if (!offsetTime_Accessor) {
    offsetTime_Accessor = boost::optional<asb_xs::Duration>();
  }
}

uci::type::AngleTypeValue EventOffsetChoiceType::getOffsetAngle() const {
  if (offsetAngle_Accessor) {
    return *offsetAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getOffsetAngle(): Unable to get OffsetAngle, field not selected");
}

uci::type::EventOffsetChoiceType& EventOffsetChoiceType::setOffsetAngle(uci::type::AngleTypeValue value) {
  chooseOffsetAngle();
  offsetAngle_Accessor = value;
  return *this;
}

bool EventOffsetChoiceType::isOffsetAngle() const noexcept {
  return static_cast<bool>(offsetAngle_Accessor);
}

void EventOffsetChoiceType::chooseOffsetAngle() {
  offsetTime_Accessor.reset();
  azEl_Accessor.reset();
  if (!offsetAngle_Accessor) {
    offsetAngle_Accessor = boost::optional<asb_xs::Double>();
  }
}

uci::type::LOS_InertialB_Type& EventOffsetChoiceType::getAzEl_() const {
  if (azEl_Accessor) {
    return *azEl_Accessor;
  }
  throw uci::base::UCIException("Error in getAzEl(): Unable to get AzEl, field not selected");
}

const uci::type::LOS_InertialB_Type& EventOffsetChoiceType::getAzEl() const {
  return getAzEl_();
}

uci::type::LOS_InertialB_Type& EventOffsetChoiceType::getAzEl() {
  return getAzEl_();
}

uci::type::EventOffsetChoiceType& EventOffsetChoiceType::setAzEl(const uci::type::LOS_InertialB_Type& accessor) {
  chooseAzEl();
  if (&accessor != azEl_Accessor.get()) {
    azEl_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EventOffsetChoiceType::isAzEl() const noexcept {
  return static_cast<bool>(azEl_Accessor);
}

uci::type::LOS_InertialB_Type& EventOffsetChoiceType::chooseAzEl(const std::string& method, uci::base::accessorType::AccessorType type) {
  offsetTime_Accessor.reset();
  offsetAngle_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_InertialB_Type : type};
  if ((!azEl_Accessor) || (azEl_Accessor->getAccessorType() != requestedType)) {
    azEl_Accessor = LOS_InertialB_Type::create(type);
    if (!azEl_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *azEl_Accessor;
}

uci::type::LOS_InertialB_Type& EventOffsetChoiceType::chooseAzEl(uci::base::accessorType::AccessorType type) {
  return chooseAzEl("chooseAzEl", type);
}

std::unique_ptr<EventOffsetChoiceType> EventOffsetChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eventOffsetChoiceType : type};
  return (requestedType == uci::type::accessorType::eventOffsetChoiceType) ? boost::make_unique<EventOffsetChoiceType>() : nullptr;
}

/**  */
namespace EventOffsetChoiceType_Names {

constexpr const char* Extern_Type_Name{"EventOffsetChoiceType"};
constexpr const char* OffsetTime_Name{"OffsetTime"};
constexpr const char* OffsetAngle_Name{"OffsetAngle"};
constexpr const char* AzEl_Name{"AzEl"};

} // namespace EventOffsetChoiceType_Names

void EventOffsetChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EventOffsetChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EventOffsetChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EventOffsetChoiceType_Names::OffsetTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOffsetTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + EventOffsetChoiceType_Names::OffsetAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOffsetAngle(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EventOffsetChoiceType_Names::AzEl_Name) {
      LOS_InertialB_Type::deserialize(valueType.second, accessor.chooseAzEl(), nodeName, nsPrefix);
    }
  }
}

std::string EventOffsetChoiceType::serialize(const uci::type::EventOffsetChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EventOffsetChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EventOffsetChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isOffsetTime()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getOffsetTime(), node, EventOffsetChoiceType_Names::OffsetTime_Name);
  } else if (accessor.isOffsetAngle()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getOffsetAngle(), node, EventOffsetChoiceType_Names::OffsetAngle_Name);
  } else if (accessor.isAzEl()) {
    LOS_InertialB_Type::serialize(accessor.getAzEl(), node, EventOffsetChoiceType_Names::AzEl_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EventOffsetChoiceType& EventOffsetChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EventOffsetChoiceType>().release());
}

uci::type::EventOffsetChoiceType& EventOffsetChoiceType::create(const uci::type::EventOffsetChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EventOffsetChoiceType> newAccessor{boost::make_unique<asb_uci::type::EventOffsetChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EventOffsetChoiceType::destroy(uci::type::EventOffsetChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::EventOffsetChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

