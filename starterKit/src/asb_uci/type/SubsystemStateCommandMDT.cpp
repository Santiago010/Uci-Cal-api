/** @file SubsystemStateCommandMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SubsystemStateCommandMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/BIT_ID_Type.h"
#include "asb_uci/type/CalibrationID_Type.h"
#include "asb_uci/type/CommandBaseType.h"
#include "asb_uci/type/SubsystemEraseCommandEnum.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/type/SubsystemStateEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/BIT_ID_Type.h"
#include "uci/type/CalibrationID_Type.h"
#include "uci/type/SubsystemEraseCommandEnum.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SubsystemStateCommandMDT.h"
#include "uci/type/SubsystemStateEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemStateCommandMDT::SubsystemStateCommandMDT()
  : subsystemID_Accessor{boost::make_unique<SubsystemID_Type>()},
    commandedState_Accessor{boost::make_unique<SubsystemStateEnum>()},
    bIT_ID_Accessor{boost::make_unique<BIT_ID>(0, SIZE_MAX)} {
}

SubsystemStateCommandMDT::~SubsystemStateCommandMDT() = default;

void SubsystemStateCommandMDT::copy(const uci::type::SubsystemStateCommandMDT& accessor) {
  copyImpl(accessor, false);
}

void SubsystemStateCommandMDT::copyImpl(const uci::type::SubsystemStateCommandMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const SubsystemStateCommandMDT&>(accessor);
    setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    setCommandedState(*(accessorImpl.commandedState_Accessor));
    if (accessorImpl.eraseParameter_Accessor) {
      setEraseParameter(*(accessorImpl.eraseParameter_Accessor));
    } else {
      eraseParameter_Accessor.reset();
    }
    setBIT_ID(*(accessorImpl.bIT_ID_Accessor));
    if (accessorImpl.calibrationID_Accessor) {
      setCalibrationID(*(accessorImpl.calibrationID_Accessor));
    } else {
      calibrationID_Accessor.reset();
    }
  }
}

void SubsystemStateCommandMDT::reset() noexcept {
  CommandBaseType::reset();
  subsystemID_Accessor->reset();
  commandedState_Accessor->reset();
  eraseParameter_Accessor.reset();
  bIT_ID_Accessor->reset();
  calibrationID_Accessor.reset();
}

const uci::type::SubsystemID_Type& SubsystemStateCommandMDT::getSubsystemID() const {
  return *subsystemID_Accessor;
}

uci::type::SubsystemID_Type& SubsystemStateCommandMDT::getSubsystemID() {
  return *subsystemID_Accessor;
}

uci::type::SubsystemStateCommandMDT& SubsystemStateCommandMDT::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemStateEnum& SubsystemStateCommandMDT::getCommandedState() const {
  return *commandedState_Accessor;
}

uci::type::SubsystemStateEnum& SubsystemStateCommandMDT::getCommandedState() {
  return *commandedState_Accessor;
}

uci::type::SubsystemStateCommandMDT& SubsystemStateCommandMDT::setCommandedState(const uci::type::SubsystemStateEnum& accessor) {
  if (&accessor != commandedState_Accessor.get()) {
    commandedState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemStateCommandMDT& SubsystemStateCommandMDT::setCommandedState(uci::type::SubsystemStateEnum::EnumerationItem value) {
  commandedState_Accessor->setValue(value);
  return *this;
}


uci::type::SubsystemEraseCommandEnum& SubsystemStateCommandMDT::getEraseParameter_() const {
  if (eraseParameter_Accessor) {
    return *eraseParameter_Accessor;
  }
  throw uci::base::UCIException("Error in getEraseParameter(): An attempt was made to get an optional field that was not enabled, call hasEraseParameter() to determine if it is safe to call getEraseParameter()");
}

const uci::type::SubsystemEraseCommandEnum& SubsystemStateCommandMDT::getEraseParameter() const {
  return getEraseParameter_();
}

uci::type::SubsystemEraseCommandEnum& SubsystemStateCommandMDT::getEraseParameter() {
  return getEraseParameter_();
}

uci::type::SubsystemStateCommandMDT& SubsystemStateCommandMDT::setEraseParameter(const uci::type::SubsystemEraseCommandEnum& accessor) {
  enableEraseParameter();
  if (&accessor != eraseParameter_Accessor.get()) {
    eraseParameter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemStateCommandMDT& SubsystemStateCommandMDT::setEraseParameter(const uci::type::SubsystemEraseCommandEnum::EnumerationItem value) {
  enableEraseParameter().setValue(value);
  return *this;
}

bool SubsystemStateCommandMDT::hasEraseParameter() const noexcept {
  return static_cast<bool>(eraseParameter_Accessor);
}

uci::type::SubsystemEraseCommandEnum& SubsystemStateCommandMDT::enableEraseParameter(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemEraseCommandEnum : type};
  if ((!eraseParameter_Accessor) || (eraseParameter_Accessor->getAccessorType() != requestedType)) {
    eraseParameter_Accessor = SubsystemEraseCommandEnum::create(requestedType);
    if (!eraseParameter_Accessor) {
      throw uci::base::UCIException("Error in enableEraseParameter(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eraseParameter_Accessor;
}

uci::type::SubsystemStateCommandMDT& SubsystemStateCommandMDT::clearEraseParameter() noexcept {
  eraseParameter_Accessor.reset();
  return *this;
}

const uci::type::SubsystemStateCommandMDT::BIT_ID& SubsystemStateCommandMDT::getBIT_ID() const {
  return *bIT_ID_Accessor;
}

uci::type::SubsystemStateCommandMDT::BIT_ID& SubsystemStateCommandMDT::getBIT_ID() {
  return *bIT_ID_Accessor;
}

uci::type::SubsystemStateCommandMDT& SubsystemStateCommandMDT::setBIT_ID(const uci::type::SubsystemStateCommandMDT::BIT_ID& accessor) {
  if (&accessor != bIT_ID_Accessor.get()) {
    bIT_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CalibrationID_Type& SubsystemStateCommandMDT::getCalibrationID_() const {
  if (calibrationID_Accessor) {
    return *calibrationID_Accessor;
  }
  throw uci::base::UCIException("Error in getCalibrationID(): An attempt was made to get an optional field that was not enabled, call hasCalibrationID() to determine if it is safe to call getCalibrationID()");
}

const uci::type::CalibrationID_Type& SubsystemStateCommandMDT::getCalibrationID() const {
  return getCalibrationID_();
}

uci::type::CalibrationID_Type& SubsystemStateCommandMDT::getCalibrationID() {
  return getCalibrationID_();
}

uci::type::SubsystemStateCommandMDT& SubsystemStateCommandMDT::setCalibrationID(const uci::type::CalibrationID_Type& accessor) {
  enableCalibrationID();
  if (&accessor != calibrationID_Accessor.get()) {
    calibrationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubsystemStateCommandMDT::hasCalibrationID() const noexcept {
  return static_cast<bool>(calibrationID_Accessor);
}

uci::type::CalibrationID_Type& SubsystemStateCommandMDT::enableCalibrationID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::calibrationID_Type : type};
  if ((!calibrationID_Accessor) || (calibrationID_Accessor->getAccessorType() != requestedType)) {
    calibrationID_Accessor = CalibrationID_Type::create(requestedType);
    if (!calibrationID_Accessor) {
      throw uci::base::UCIException("Error in enableCalibrationID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *calibrationID_Accessor;
}

uci::type::SubsystemStateCommandMDT& SubsystemStateCommandMDT::clearCalibrationID() noexcept {
  calibrationID_Accessor.reset();
  return *this;
}

std::unique_ptr<SubsystemStateCommandMDT> SubsystemStateCommandMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemStateCommandMDT : type};
  return (requestedType == uci::type::accessorType::subsystemStateCommandMDT) ? boost::make_unique<SubsystemStateCommandMDT>() : nullptr;
}

/**  */
namespace SubsystemStateCommandMDT_Names {

constexpr const char* Extern_Type_Name{"SubsystemStateCommandMDT"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* CommandedState_Name{"CommandedState"};
constexpr const char* EraseParameter_Name{"EraseParameter"};
constexpr const char* BIT_ID_Name{"BIT_ID"};
constexpr const char* CalibrationID_Name{"CalibrationID"};

} // namespace SubsystemStateCommandMDT_Names

void SubsystemStateCommandMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemStateCommandMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemStateCommandMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemStateCommandMDT_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.getSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemStateCommandMDT_Names::CommandedState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCommandedState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemStateCommandMDT_Names::EraseParameter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEraseParameter().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemStateCommandMDT_Names::BIT_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemStateCommandMDT::BIT_ID& boundedList = accessor.getBIT_ID();
        const uci::type::SubsystemStateCommandMDT::BIT_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::BIT_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemStateCommandMDT_Names::CalibrationID_Name) {
      CalibrationID_Type::deserialize(valueType.second, accessor.enableCalibrationID(), nodeName, nsPrefix);
    }
  }
  CommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SubsystemStateCommandMDT::serialize(const uci::type::SubsystemStateCommandMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemStateCommandMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemStateCommandMDT_Names::Extern_Type_Name);
  }
  CommandBaseType::serialize(accessor, node, "", false, false, false);
  SubsystemID_Type::serialize(accessor.getSubsystemID(), node, SubsystemStateCommandMDT_Names::SubsystemID_Name);
  SubsystemStateEnum::serialize(accessor.getCommandedState(), node, SubsystemStateCommandMDT_Names::CommandedState_Name, false);
  if (accessor.hasEraseParameter()) {
    SubsystemEraseCommandEnum::serialize(accessor.getEraseParameter(), node, SubsystemStateCommandMDT_Names::EraseParameter_Name, false);
  }
  {
    const uci::type::SubsystemStateCommandMDT::BIT_ID& boundedList = accessor.getBIT_ID();
    for (uci::type::SubsystemStateCommandMDT::BIT_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::BIT_ID_Type::serialize(boundedList.at(i), node, SubsystemStateCommandMDT_Names::BIT_ID_Name);
    }
  }
  if (accessor.hasCalibrationID()) {
    CalibrationID_Type::serialize(accessor.getCalibrationID(), node, SubsystemStateCommandMDT_Names::CalibrationID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubsystemStateCommandMDT& SubsystemStateCommandMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubsystemStateCommandMDT>().release());
}

uci::type::SubsystemStateCommandMDT& SubsystemStateCommandMDT::create(const uci::type::SubsystemStateCommandMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubsystemStateCommandMDT> newAccessor{boost::make_unique<asb_uci::type::SubsystemStateCommandMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubsystemStateCommandMDT::destroy(uci::type::SubsystemStateCommandMDT& accessor) {
  delete dynamic_cast<asb_uci::type::SubsystemStateCommandMDT*>(&accessor);
}

} // namespace type

} // namespace uci

