/** @file OperatorNotificationActionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OperatorNotificationActionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OperatorActionAutonomousType.h"
#include "../../../include/asb_uci/type/OperatorActionControlledType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorActionAutonomousType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorActionControlledType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorNotificationActionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OperatorNotificationActionType::OperatorNotificationActionType() = default;

OperatorNotificationActionType::~OperatorNotificationActionType() = default;

void OperatorNotificationActionType::copy(const uci::type::OperatorNotificationActionType& accessor) {
  copyImpl(accessor, false);
}

void OperatorNotificationActionType::copyImpl(const uci::type::OperatorNotificationActionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OperatorNotificationActionType&>(accessor);
    if (accessorImpl.autonomousActions_Accessor) {
      setAutonomousActions(*(accessorImpl.autonomousActions_Accessor));
    } else {
      autonomousActions_Accessor.reset();
    }
    if (accessorImpl.controlledActions_Accessor) {
      setControlledActions(*(accessorImpl.controlledActions_Accessor));
    } else {
      controlledActions_Accessor.reset();
    }
  }
}

void OperatorNotificationActionType::reset() noexcept {
  autonomousActions_Accessor.reset();
  controlledActions_Accessor.reset();
}

uci::type::OperatorNotificationActionType::OperatorNotificationActionTypeChoice OperatorNotificationActionType::getOperatorNotificationActionTypeChoiceOrdinal() const noexcept {
  if (autonomousActions_Accessor) {
    return OPERATORNOTIFICATIONACTIONTYPE_CHOICE_AUTONOMOUSACTIONS;
  }
  if (controlledActions_Accessor) {
    return OPERATORNOTIFICATIONACTIONTYPE_CHOICE_CONTROLLEDACTIONS;
  }
  return OPERATORNOTIFICATIONACTIONTYPE_CHOICE_NONE;
}

uci::type::OperatorNotificationActionType& OperatorNotificationActionType::setOperatorNotificationActionTypeChoiceOrdinal(uci::type::OperatorNotificationActionType::OperatorNotificationActionTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case OPERATORNOTIFICATIONACTIONTYPE_CHOICE_AUTONOMOUSACTIONS:
      chooseAutonomousActions();
      break;
    case OPERATORNOTIFICATIONACTIONTYPE_CHOICE_CONTROLLEDACTIONS:
      chooseControlledActions("setOperatorNotificationActionTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOperatorNotificationActionTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OperatorNotificationActionType::AutonomousActions& OperatorNotificationActionType::getAutonomousActions_() const {
  if (autonomousActions_Accessor) {
    return *autonomousActions_Accessor;
  }
  throw uci::base::UCIException("Error in getAutonomousActions(): Unable to get AutonomousActions, field not selected");
}

const uci::type::OperatorNotificationActionType::AutonomousActions& OperatorNotificationActionType::getAutonomousActions() const {
  return getAutonomousActions_();
}

uci::type::OperatorNotificationActionType::AutonomousActions& OperatorNotificationActionType::getAutonomousActions() {
  return getAutonomousActions_();
}

uci::type::OperatorNotificationActionType& OperatorNotificationActionType::setAutonomousActions(const uci::type::OperatorNotificationActionType::AutonomousActions& accessor) {
  chooseAutonomousActions();
  if (&accessor != autonomousActions_Accessor.get()) {
    autonomousActions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OperatorNotificationActionType::isAutonomousActions() const noexcept {
  return static_cast<bool>(autonomousActions_Accessor);
}

uci::type::OperatorNotificationActionType::AutonomousActions& OperatorNotificationActionType::chooseAutonomousActions() {
  controlledActions_Accessor.reset();
  if (!autonomousActions_Accessor) {
    autonomousActions_Accessor = boost::make_unique<AutonomousActions>(1, SIZE_MAX);
  }
  return *autonomousActions_Accessor;
}

uci::type::OperatorActionControlledType& OperatorNotificationActionType::getControlledActions_() const {
  if (controlledActions_Accessor) {
    return *controlledActions_Accessor;
  }
  throw uci::base::UCIException("Error in getControlledActions(): Unable to get ControlledActions, field not selected");
}

const uci::type::OperatorActionControlledType& OperatorNotificationActionType::getControlledActions() const {
  return getControlledActions_();
}

uci::type::OperatorActionControlledType& OperatorNotificationActionType::getControlledActions() {
  return getControlledActions_();
}

uci::type::OperatorNotificationActionType& OperatorNotificationActionType::setControlledActions(const uci::type::OperatorActionControlledType& accessor) {
  chooseControlledActions();
  if (&accessor != controlledActions_Accessor.get()) {
    controlledActions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OperatorNotificationActionType::isControlledActions() const noexcept {
  return static_cast<bool>(controlledActions_Accessor);
}

uci::type::OperatorActionControlledType& OperatorNotificationActionType::chooseControlledActions(const std::string& method, uci::base::accessorType::AccessorType type) {
  autonomousActions_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorActionControlledType : type};
  if ((!controlledActions_Accessor) || (controlledActions_Accessor->getAccessorType() != requestedType)) {
    controlledActions_Accessor = OperatorActionControlledType::create(type);
    if (!controlledActions_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *controlledActions_Accessor;
}

uci::type::OperatorActionControlledType& OperatorNotificationActionType::chooseControlledActions(uci::base::accessorType::AccessorType type) {
  return chooseControlledActions("chooseControlledActions", type);
}

std::unique_ptr<OperatorNotificationActionType> OperatorNotificationActionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorNotificationActionType : type};
  return (requestedType == uci::type::accessorType::operatorNotificationActionType) ? boost::make_unique<OperatorNotificationActionType>() : nullptr;
}

/**  */
namespace OperatorNotificationActionType_Names {

constexpr const char* Extern_Type_Name{"OperatorNotificationActionType"};
constexpr const char* AutonomousActions_Name{"AutonomousActions"};
constexpr const char* ControlledActions_Name{"ControlledActions"};

} // namespace OperatorNotificationActionType_Names

void OperatorNotificationActionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OperatorNotificationActionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OperatorNotificationActionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OperatorNotificationActionType_Names::AutonomousActions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OperatorNotificationActionType::AutonomousActions& boundedList = accessor.chooseAutonomousActions();
        const uci::type::OperatorNotificationActionType::AutonomousActions::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OperatorActionAutonomousType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OperatorNotificationActionType_Names::ControlledActions_Name) {
      OperatorActionControlledType::deserialize(valueType.second, accessor.chooseControlledActions(), nodeName, nsPrefix);
    }
  }
}

std::string OperatorNotificationActionType::serialize(const uci::type::OperatorNotificationActionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OperatorNotificationActionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OperatorNotificationActionType_Names::Extern_Type_Name);
  }
  if (accessor.isAutonomousActions()) {
    {
      const uci::type::OperatorNotificationActionType::AutonomousActions& boundedList = accessor.getAutonomousActions();
      for (uci::type::OperatorNotificationActionType::AutonomousActions::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::OperatorActionAutonomousType::serialize(boundedList.at(i), node, OperatorNotificationActionType_Names::AutonomousActions_Name);
      }
    }
  } else if (accessor.isControlledActions()) {
    OperatorActionControlledType::serialize(accessor.getControlledActions(), node, OperatorNotificationActionType_Names::ControlledActions_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OperatorNotificationActionType& OperatorNotificationActionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OperatorNotificationActionType>().release());
}

uci::type::OperatorNotificationActionType& OperatorNotificationActionType::create(const uci::type::OperatorNotificationActionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OperatorNotificationActionType> newAccessor{boost::make_unique<asb_uci::type::OperatorNotificationActionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OperatorNotificationActionType::destroy(uci::type::OperatorNotificationActionType& accessor) {
  delete dynamic_cast<asb_uci::type::OperatorNotificationActionType*>(&accessor);
}

} // namespace type

} // namespace uci

