/** @file ComponentSettingsCommandMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ComponentSettingsCommandMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommandBaseType.h"
#include "asb_uci/type/ComponentID_Type.h"
#include "asb_uci/type/ComponentSettingEnum.h"
#include "asb_uci/type/ComponentSettingsParameterType.h"
#include "asb_uci/type/ComponentStateCommandEnum.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/ComponentSettingEnum.h"
#include "uci/type/ComponentSettingsCommandMDT.h"
#include "uci/type/ComponentSettingsParameterType.h"
#include "uci/type/ComponentStateCommandEnum.h"
#include "uci/type/ServiceID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ComponentSettingsCommandMDT::ComponentSettingsCommandMDT()
  : componentID_Accessor{boost::make_unique<ComponentID_Type>()},
    componentSetting_Accessor{boost::make_unique<ComponentSettingEnum>()},
    parameters_Accessor{boost::make_unique<Parameters>(0, SIZE_MAX)},
    commandedState_Accessor{boost::make_unique<ComponentStateCommandEnum>()} {
}

ComponentSettingsCommandMDT::~ComponentSettingsCommandMDT() = default;

void ComponentSettingsCommandMDT::copy(const uci::type::ComponentSettingsCommandMDT& accessor) {
  copyImpl(accessor, false);
}

void ComponentSettingsCommandMDT::copyImpl(const uci::type::ComponentSettingsCommandMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ComponentSettingsCommandMDT&>(accessor);
    if (accessorImpl.serviceID_Accessor) {
      setServiceID(*(accessorImpl.serviceID_Accessor));
    } else {
      serviceID_Accessor.reset();
    }
    setComponentID(*(accessorImpl.componentID_Accessor));
    setComponentSetting(*(accessorImpl.componentSetting_Accessor));
    setParameters(*(accessorImpl.parameters_Accessor));
    setCommandedState(*(accessorImpl.commandedState_Accessor));
  }
}

void ComponentSettingsCommandMDT::reset() noexcept {
  CommandBaseType::reset();
  serviceID_Accessor.reset();
  componentID_Accessor->reset();
  componentSetting_Accessor->reset();
  parameters_Accessor->reset();
  commandedState_Accessor->reset();
}

uci::type::ServiceID_Type& ComponentSettingsCommandMDT::getServiceID_() const {
  if (serviceID_Accessor) {
    return *serviceID_Accessor;
  }
  throw uci::base::UCIException("Error in getServiceID(): An attempt was made to get an optional field that was not enabled, call hasServiceID() to determine if it is safe to call getServiceID()");
}

const uci::type::ServiceID_Type& ComponentSettingsCommandMDT::getServiceID() const {
  return getServiceID_();
}

uci::type::ServiceID_Type& ComponentSettingsCommandMDT::getServiceID() {
  return getServiceID_();
}

uci::type::ComponentSettingsCommandMDT& ComponentSettingsCommandMDT::setServiceID(const uci::type::ServiceID_Type& accessor) {
  enableServiceID();
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ComponentSettingsCommandMDT::hasServiceID() const noexcept {
  return static_cast<bool>(serviceID_Accessor);
}

uci::type::ServiceID_Type& ComponentSettingsCommandMDT::enableServiceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceID_Type : type};
  if ((!serviceID_Accessor) || (serviceID_Accessor->getAccessorType() != requestedType)) {
    serviceID_Accessor = ServiceID_Type::create(requestedType);
    if (!serviceID_Accessor) {
      throw uci::base::UCIException("Error in enableServiceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *serviceID_Accessor;
}

uci::type::ComponentSettingsCommandMDT& ComponentSettingsCommandMDT::clearServiceID() noexcept {
  serviceID_Accessor.reset();
  return *this;
}

const uci::type::ComponentID_Type& ComponentSettingsCommandMDT::getComponentID() const {
  return *componentID_Accessor;
}

uci::type::ComponentID_Type& ComponentSettingsCommandMDT::getComponentID() {
  return *componentID_Accessor;
}

uci::type::ComponentSettingsCommandMDT& ComponentSettingsCommandMDT::setComponentID(const uci::type::ComponentID_Type& accessor) {
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ComponentSettingEnum& ComponentSettingsCommandMDT::getComponentSetting() const {
  return *componentSetting_Accessor;
}

uci::type::ComponentSettingEnum& ComponentSettingsCommandMDT::getComponentSetting() {
  return *componentSetting_Accessor;
}

uci::type::ComponentSettingsCommandMDT& ComponentSettingsCommandMDT::setComponentSetting(const uci::type::ComponentSettingEnum& accessor) {
  if (&accessor != componentSetting_Accessor.get()) {
    componentSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ComponentSettingsCommandMDT& ComponentSettingsCommandMDT::setComponentSetting(uci::type::ComponentSettingEnum::EnumerationItem value) {
  componentSetting_Accessor->setValue(value);
  return *this;
}


const uci::type::ComponentSettingsCommandMDT::Parameters& ComponentSettingsCommandMDT::getParameters() const {
  return *parameters_Accessor;
}

uci::type::ComponentSettingsCommandMDT::Parameters& ComponentSettingsCommandMDT::getParameters() {
  return *parameters_Accessor;
}

uci::type::ComponentSettingsCommandMDT& ComponentSettingsCommandMDT::setParameters(const uci::type::ComponentSettingsCommandMDT::Parameters& accessor) {
  if (&accessor != parameters_Accessor.get()) {
    parameters_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ComponentStateCommandEnum& ComponentSettingsCommandMDT::getCommandedState() const {
  return *commandedState_Accessor;
}

uci::type::ComponentStateCommandEnum& ComponentSettingsCommandMDT::getCommandedState() {
  return *commandedState_Accessor;
}

uci::type::ComponentSettingsCommandMDT& ComponentSettingsCommandMDT::setCommandedState(const uci::type::ComponentStateCommandEnum& accessor) {
  if (&accessor != commandedState_Accessor.get()) {
    commandedState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ComponentSettingsCommandMDT& ComponentSettingsCommandMDT::setCommandedState(uci::type::ComponentStateCommandEnum::EnumerationItem value) {
  commandedState_Accessor->setValue(value);
  return *this;
}


std::unique_ptr<ComponentSettingsCommandMDT> ComponentSettingsCommandMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentSettingsCommandMDT : type};
  return (requestedType == uci::type::accessorType::componentSettingsCommandMDT) ? boost::make_unique<ComponentSettingsCommandMDT>() : nullptr;
}

/**  */
namespace ComponentSettingsCommandMDT_Names {

constexpr const char* Extern_Type_Name{"ComponentSettingsCommandMDT"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* ComponentSetting_Name{"ComponentSetting"};
constexpr const char* Parameters_Name{"Parameters"};
constexpr const char* CommandedState_Name{"CommandedState"};

} // namespace ComponentSettingsCommandMDT_Names

void ComponentSettingsCommandMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ComponentSettingsCommandMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ComponentSettingsCommandMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ComponentSettingsCommandMDT_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.enableServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentSettingsCommandMDT_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.getComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentSettingsCommandMDT_Names::ComponentSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getComponentSetting().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ComponentSettingsCommandMDT_Names::Parameters_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ComponentSettingsCommandMDT::Parameters& boundedList = accessor.getParameters();
        const uci::type::ComponentSettingsCommandMDT::Parameters::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ComponentSettingsParameterType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ComponentSettingsCommandMDT_Names::CommandedState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCommandedState().setValueFromName(*value);
      }
    }
  }
  CommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ComponentSettingsCommandMDT::serialize(const uci::type::ComponentSettingsCommandMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ComponentSettingsCommandMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ComponentSettingsCommandMDT_Names::Extern_Type_Name);
  }
  CommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasServiceID()) {
    ServiceID_Type::serialize(accessor.getServiceID(), node, ComponentSettingsCommandMDT_Names::ServiceID_Name);
  }
  ComponentID_Type::serialize(accessor.getComponentID(), node, ComponentSettingsCommandMDT_Names::ComponentID_Name);
  ComponentSettingEnum::serialize(accessor.getComponentSetting(), node, ComponentSettingsCommandMDT_Names::ComponentSetting_Name, false);
  {
    const uci::type::ComponentSettingsCommandMDT::Parameters& boundedList = accessor.getParameters();
    for (uci::type::ComponentSettingsCommandMDT::Parameters::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ComponentSettingsParameterType::serialize(boundedList.at(i), node, ComponentSettingsCommandMDT_Names::Parameters_Name);
    }
  }
  ComponentStateCommandEnum::serialize(accessor.getCommandedState(), node, ComponentSettingsCommandMDT_Names::CommandedState_Name, false);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ComponentSettingsCommandMDT& ComponentSettingsCommandMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ComponentSettingsCommandMDT>().release());
}

uci::type::ComponentSettingsCommandMDT& ComponentSettingsCommandMDT::create(const uci::type::ComponentSettingsCommandMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ComponentSettingsCommandMDT> newAccessor{boost::make_unique<asb_uci::type::ComponentSettingsCommandMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ComponentSettingsCommandMDT::destroy(uci::type::ComponentSettingsCommandMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ComponentSettingsCommandMDT*>(&accessor);
}

} // namespace type

} // namespace uci

