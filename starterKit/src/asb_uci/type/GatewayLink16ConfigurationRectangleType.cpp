/** @file GatewayLink16ConfigurationRectangleType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/GatewayLink16ConfigurationRectangleType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/GatewayLink16ConfigurationClosedAreaType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AngleType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/GatewayLink16ConfigurationRectangleType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

GatewayLink16ConfigurationRectangleType::GatewayLink16ConfigurationRectangleType() = default;

GatewayLink16ConfigurationRectangleType::~GatewayLink16ConfigurationRectangleType() = default;

void GatewayLink16ConfigurationRectangleType::copy(const uci::type::GatewayLink16ConfigurationRectangleType& accessor) {
  copyImpl(accessor, false);
}

void GatewayLink16ConfigurationRectangleType::copyImpl(const uci::type::GatewayLink16ConfigurationRectangleType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    GatewayLink16ConfigurationClosedAreaType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const GatewayLink16ConfigurationRectangleType&>(accessor);
    setMajorAxis(accessorImpl.majorAxis_Accessor);
    setMinorAxis(accessorImpl.minorAxis_Accessor);
    setOrientation(accessorImpl.orientation_Accessor);
  }
}

void GatewayLink16ConfigurationRectangleType::reset() noexcept {
  GatewayLink16ConfigurationClosedAreaType::reset();
  majorAxis_Accessor = 0.0;
  minorAxis_Accessor = 0.0;
  orientation_Accessor = 0.0;
}

uci::type::DistanceTypeValue GatewayLink16ConfigurationRectangleType::getMajorAxis() const {
  return majorAxis_Accessor;
}

uci::type::GatewayLink16ConfigurationRectangleType& GatewayLink16ConfigurationRectangleType::setMajorAxis(uci::type::DistanceTypeValue value) {
  majorAxis_Accessor = value;
  return *this;
}


uci::type::DistanceTypeValue GatewayLink16ConfigurationRectangleType::getMinorAxis() const {
  return minorAxis_Accessor;
}

uci::type::GatewayLink16ConfigurationRectangleType& GatewayLink16ConfigurationRectangleType::setMinorAxis(uci::type::DistanceTypeValue value) {
  minorAxis_Accessor = value;
  return *this;
}


uci::type::AngleTypeValue GatewayLink16ConfigurationRectangleType::getOrientation() const {
  return orientation_Accessor;
}

uci::type::GatewayLink16ConfigurationRectangleType& GatewayLink16ConfigurationRectangleType::setOrientation(uci::type::AngleTypeValue value) {
  orientation_Accessor = value;
  return *this;
}


std::unique_ptr<GatewayLink16ConfigurationRectangleType> GatewayLink16ConfigurationRectangleType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationRectangleType : type};
  return (requestedType == uci::type::accessorType::gatewayLink16ConfigurationRectangleType) ? boost::make_unique<GatewayLink16ConfigurationRectangleType>() : nullptr;
}

/**  */
namespace GatewayLink16ConfigurationRectangleType_Names {

constexpr const char* Extern_Type_Name{"GatewayLink16ConfigurationRectangleType"};
constexpr const char* MajorAxis_Name{"MajorAxis"};
constexpr const char* MinorAxis_Name{"MinorAxis"};
constexpr const char* Orientation_Name{"Orientation"};

} // namespace GatewayLink16ConfigurationRectangleType_Names

void GatewayLink16ConfigurationRectangleType::deserialize(const boost::property_tree::ptree& propTree, uci::type::GatewayLink16ConfigurationRectangleType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = GatewayLink16ConfigurationRectangleType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationRectangleType_Names::MajorAxis_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMajorAxis(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationRectangleType_Names::MinorAxis_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinorAxis(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationRectangleType_Names::Orientation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOrientation(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
  GatewayLink16ConfigurationClosedAreaType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string GatewayLink16ConfigurationRectangleType::serialize(const uci::type::GatewayLink16ConfigurationRectangleType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? GatewayLink16ConfigurationRectangleType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, GatewayLink16ConfigurationRectangleType_Names::Extern_Type_Name);
  }
  GatewayLink16ConfigurationClosedAreaType::serialize(accessor, node, "", false, false, false);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMajorAxis(), node, GatewayLink16ConfigurationRectangleType_Names::MajorAxis_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinorAxis(), node, GatewayLink16ConfigurationRectangleType_Names::MinorAxis_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getOrientation(), node, GatewayLink16ConfigurationRectangleType_Names::Orientation_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::GatewayLink16ConfigurationRectangleType& GatewayLink16ConfigurationRectangleType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::GatewayLink16ConfigurationRectangleType>().release());
}

uci::type::GatewayLink16ConfigurationRectangleType& GatewayLink16ConfigurationRectangleType::create(const uci::type::GatewayLink16ConfigurationRectangleType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::GatewayLink16ConfigurationRectangleType> newAccessor{boost::make_unique<asb_uci::type::GatewayLink16ConfigurationRectangleType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void GatewayLink16ConfigurationRectangleType::destroy(uci::type::GatewayLink16ConfigurationRectangleType& accessor) {
  delete dynamic_cast<asb_uci::type::GatewayLink16ConfigurationRectangleType*>(&accessor);
}

} // namespace type

} // namespace uci

