/** @file RequirementTargetConstraintsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementTargetConstraintsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AnalyticConstraintsType.h"
#include "asb_uci/type/BehaviorType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AnalyticConstraintsType.h"
#include "uci/type/BehaviorType.h"
#include "uci/type/RequirementTargetConstraintsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementTargetConstraintsType::RequirementTargetConstraintsType() = default;

RequirementTargetConstraintsType::~RequirementTargetConstraintsType() = default;

void RequirementTargetConstraintsType::copy(const uci::type::RequirementTargetConstraintsType& accessor) {
  copyImpl(accessor, false);
}

void RequirementTargetConstraintsType::copyImpl(const uci::type::RequirementTargetConstraintsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementTargetConstraintsType&>(accessor);
    if (accessorImpl.behavior_Accessor) {
      setBehavior(*(accessorImpl.behavior_Accessor));
    } else {
      behavior_Accessor.reset();
    }
    if (accessorImpl.behaviorImpact_Accessor) {
      setBehaviorImpact(*(accessorImpl.behaviorImpact_Accessor));
    } else {
      behaviorImpact_Accessor.reset();
    }
  }
}

void RequirementTargetConstraintsType::reset() noexcept {
  behavior_Accessor.reset();
  behaviorImpact_Accessor.reset();
}

uci::type::BehaviorType& RequirementTargetConstraintsType::getBehavior_() const {
  if (behavior_Accessor) {
    return *behavior_Accessor;
  }
  throw uci::base::UCIException("Error in getBehavior(): An attempt was made to get an optional field that was not enabled, call hasBehavior() to determine if it is safe to call getBehavior()");
}

const uci::type::BehaviorType& RequirementTargetConstraintsType::getBehavior() const {
  return getBehavior_();
}

uci::type::BehaviorType& RequirementTargetConstraintsType::getBehavior() {
  return getBehavior_();
}

uci::type::RequirementTargetConstraintsType& RequirementTargetConstraintsType::setBehavior(const uci::type::BehaviorType& accessor) {
  enableBehavior();
  if (&accessor != behavior_Accessor.get()) {
    behavior_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementTargetConstraintsType::hasBehavior() const noexcept {
  return static_cast<bool>(behavior_Accessor);
}

uci::type::BehaviorType& RequirementTargetConstraintsType::enableBehavior(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::behaviorType : type};
  if ((!behavior_Accessor) || (behavior_Accessor->getAccessorType() != requestedType)) {
    behavior_Accessor = BehaviorType::create(requestedType);
    if (!behavior_Accessor) {
      throw uci::base::UCIException("Error in enableBehavior(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *behavior_Accessor;
}

uci::type::RequirementTargetConstraintsType& RequirementTargetConstraintsType::clearBehavior() noexcept {
  behavior_Accessor.reset();
  return *this;
}

uci::type::AnalyticConstraintsType& RequirementTargetConstraintsType::getBehaviorImpact_() const {
  if (behaviorImpact_Accessor) {
    return *behaviorImpact_Accessor;
  }
  throw uci::base::UCIException("Error in getBehaviorImpact(): An attempt was made to get an optional field that was not enabled, call hasBehaviorImpact() to determine if it is safe to call getBehaviorImpact()");
}

const uci::type::AnalyticConstraintsType& RequirementTargetConstraintsType::getBehaviorImpact() const {
  return getBehaviorImpact_();
}

uci::type::AnalyticConstraintsType& RequirementTargetConstraintsType::getBehaviorImpact() {
  return getBehaviorImpact_();
}

uci::type::RequirementTargetConstraintsType& RequirementTargetConstraintsType::setBehaviorImpact(const uci::type::AnalyticConstraintsType& accessor) {
  enableBehaviorImpact();
  if (&accessor != behaviorImpact_Accessor.get()) {
    behaviorImpact_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementTargetConstraintsType::hasBehaviorImpact() const noexcept {
  return static_cast<bool>(behaviorImpact_Accessor);
}

uci::type::AnalyticConstraintsType& RequirementTargetConstraintsType::enableBehaviorImpact(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::analyticConstraintsType : type};
  if ((!behaviorImpact_Accessor) || (behaviorImpact_Accessor->getAccessorType() != requestedType)) {
    behaviorImpact_Accessor = AnalyticConstraintsType::create(requestedType);
    if (!behaviorImpact_Accessor) {
      throw uci::base::UCIException("Error in enableBehaviorImpact(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *behaviorImpact_Accessor;
}

uci::type::RequirementTargetConstraintsType& RequirementTargetConstraintsType::clearBehaviorImpact() noexcept {
  behaviorImpact_Accessor.reset();
  return *this;
}

std::unique_ptr<RequirementTargetConstraintsType> RequirementTargetConstraintsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementTargetConstraintsType : type};
  return (requestedType == uci::type::accessorType::requirementTargetConstraintsType) ? boost::make_unique<RequirementTargetConstraintsType>() : nullptr;
}

/**  */
namespace RequirementTargetConstraintsType_Names {

constexpr const char* Extern_Type_Name{"RequirementTargetConstraintsType"};
constexpr const char* Behavior_Name{"Behavior"};
constexpr const char* BehaviorImpact_Name{"BehaviorImpact"};

} // namespace RequirementTargetConstraintsType_Names

void RequirementTargetConstraintsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementTargetConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementTargetConstraintsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementTargetConstraintsType_Names::Behavior_Name) {
      BehaviorType::deserialize(valueType.second, accessor.enableBehavior(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementTargetConstraintsType_Names::BehaviorImpact_Name) {
      AnalyticConstraintsType::deserialize(valueType.second, accessor.enableBehaviorImpact(), nodeName, nsPrefix);
    }
  }
}

std::string RequirementTargetConstraintsType::serialize(const uci::type::RequirementTargetConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementTargetConstraintsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementTargetConstraintsType_Names::Extern_Type_Name);
  }
  if (accessor.hasBehavior()) {
    BehaviorType::serialize(accessor.getBehavior(), node, RequirementTargetConstraintsType_Names::Behavior_Name);
  }
  if (accessor.hasBehaviorImpact()) {
    AnalyticConstraintsType::serialize(accessor.getBehaviorImpact(), node, RequirementTargetConstraintsType_Names::BehaviorImpact_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementTargetConstraintsType& RequirementTargetConstraintsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementTargetConstraintsType>().release());
}

uci::type::RequirementTargetConstraintsType& RequirementTargetConstraintsType::create(const uci::type::RequirementTargetConstraintsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementTargetConstraintsType> newAccessor{boost::make_unique<asb_uci::type::RequirementTargetConstraintsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementTargetConstraintsType::destroy(uci::type::RequirementTargetConstraintsType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementTargetConstraintsType*>(&accessor);
}

} // namespace type

} // namespace uci

