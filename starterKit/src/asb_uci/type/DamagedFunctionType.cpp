/** @file DamagedFunctionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DamagedFunctionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DamageLevelEnum.h"
#include "asb_uci/type/DamagedFunctionEnum.h"
#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DamageLevelEnum.h"
#include "uci/type/DamagedFunctionEnum.h"
#include "uci/type/DamagedFunctionType.h"
#include "uci/type/DurationType.h"
#include "uci/type/VisibleString1024Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DamagedFunctionType::DamagedFunctionType()
  : level_Accessor{boost::make_unique<DamageLevelEnum>()} {
}

DamagedFunctionType::~DamagedFunctionType() = default;

void DamagedFunctionType::copy(const uci::type::DamagedFunctionType& accessor) {
  copyImpl(accessor, false);
}

void DamagedFunctionType::copyImpl(const uci::type::DamagedFunctionType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::damagedFunctionType)) {
      const auto& accessorImpl = dynamic_cast<const DamagedFunctionType&>(accessor);
      if (accessorImpl.function_Accessor) {
        setFunction(*(accessorImpl.function_Accessor));
      } else {
        function_Accessor.reset();
      }
      setLevel(*(accessorImpl.level_Accessor));
      if (accessorImpl.hasDuration()) {
        setDuration(accessorImpl.getDuration());
      } else {
        clearDuration();
      }
      if (accessorImpl.details_Accessor) {
        setDetails(*(accessorImpl.details_Accessor));
      } else {
        details_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void DamagedFunctionType::reset() noexcept {
  function_Accessor.reset();
  level_Accessor->reset();
  clearDuration();
  details_Accessor.reset();
}

uci::type::DamagedFunctionEnum& DamagedFunctionType::getFunction_() const {
  if (function_Accessor) {
    return *function_Accessor;
  }
  throw uci::base::UCIException("Error in getFunction(): An attempt was made to get an optional field that was not enabled, call hasFunction() to determine if it is safe to call getFunction()");
}

const uci::type::DamagedFunctionEnum& DamagedFunctionType::getFunction() const {
  return getFunction_();
}

uci::type::DamagedFunctionEnum& DamagedFunctionType::getFunction() {
  return getFunction_();
}

uci::type::DamagedFunctionType& DamagedFunctionType::setFunction(const uci::type::DamagedFunctionEnum& accessor) {
  enableFunction();
  if (&accessor != function_Accessor.get()) {
    function_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DamagedFunctionType& DamagedFunctionType::setFunction(const uci::type::DamagedFunctionEnum::EnumerationItem value) {
  enableFunction().setValue(value);
  return *this;
}

bool DamagedFunctionType::hasFunction() const noexcept {
  return static_cast<bool>(function_Accessor);
}

uci::type::DamagedFunctionEnum& DamagedFunctionType::enableFunction(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damagedFunctionEnum : type};
  if ((!function_Accessor) || (function_Accessor->getAccessorType() != requestedType)) {
    function_Accessor = DamagedFunctionEnum::create(requestedType);
    if (!function_Accessor) {
      throw uci::base::UCIException("Error in enableFunction(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *function_Accessor;
}

uci::type::DamagedFunctionType& DamagedFunctionType::clearFunction() noexcept {
  function_Accessor.reset();
  return *this;
}

const uci::type::DamageLevelEnum& DamagedFunctionType::getLevel() const {
  return *level_Accessor;
}

uci::type::DamageLevelEnum& DamagedFunctionType::getLevel() {
  return *level_Accessor;
}

uci::type::DamagedFunctionType& DamagedFunctionType::setLevel(const uci::type::DamageLevelEnum& accessor) {
  if (&accessor != level_Accessor.get()) {
    level_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DamagedFunctionType& DamagedFunctionType::setLevel(uci::type::DamageLevelEnum::EnumerationItem value) {
  level_Accessor->setValue(value);
  return *this;
}


uci::type::DurationTypeValue DamagedFunctionType::getDuration() const {
  if (duration_Accessor) {
    return *duration_Accessor;
  }
  throw uci::base::UCIException("Error in getDuration(): An attempt was made to get an optional field that was not enabled, call hasDuration() to determine if it is safe to call getDuration()");
}

uci::type::DamagedFunctionType& DamagedFunctionType::setDuration(uci::type::DurationTypeValue value) {
  duration_Accessor = value;
  return *this;
}

bool DamagedFunctionType::hasDuration() const noexcept {
  return duration_Accessor.has_value();
}

uci::type::DamagedFunctionType& DamagedFunctionType::clearDuration() noexcept {
  duration_Accessor.reset();
  return *this;
}

uci::type::VisibleString1024Type& DamagedFunctionType::getDetails_() const {
  if (details_Accessor) {
    return *details_Accessor;
  }
  throw uci::base::UCIException("Error in getDetails(): An attempt was made to get an optional field that was not enabled, call hasDetails() to determine if it is safe to call getDetails()");
}

const uci::type::VisibleString1024Type& DamagedFunctionType::getDetails() const {
  return getDetails_();
}

uci::type::VisibleString1024Type& DamagedFunctionType::getDetails() {
  return getDetails_();
}

uci::type::DamagedFunctionType& DamagedFunctionType::setDetails(const uci::type::VisibleString1024Type& value) {
  return setDetails(value.c_str());
}

uci::type::DamagedFunctionType& DamagedFunctionType::setDetails(const std::string& value) {
  return setDetails(value.c_str());
}

uci::type::DamagedFunctionType& DamagedFunctionType::setDetails(const char* value) {
  enableDetails().setStringValue(value);
  return *this;
}

bool DamagedFunctionType::hasDetails() const noexcept {
  return static_cast<bool>(details_Accessor);
}

uci::type::VisibleString1024Type& DamagedFunctionType::enableDetails(uci::base::accessorType::AccessorType type) {
  if (!details_Accessor) {
    details_Accessor = VisibleString1024Type::create(type);
  }
  return *details_Accessor;
}

uci::type::DamagedFunctionType& DamagedFunctionType::clearDetails() noexcept {
  details_Accessor.reset();
  return *this;
}

std::unique_ptr<DamagedFunctionType> DamagedFunctionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damagedFunctionType : type};
  return std::unique_ptr<DamagedFunctionType>(dynamic_cast<DamagedFunctionType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace DamagedFunctionType_Names {

constexpr const char* Extern_Type_Name{"DamagedFunctionType"};
constexpr const char* Function_Name{"Function"};
constexpr const char* Level_Name{"Level"};
constexpr const char* Duration_Name{"Duration"};
constexpr const char* Details_Name{"Details"};

} // namespace DamagedFunctionType_Names

void DamagedFunctionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamagedFunctionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamagedFunctionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamagedFunctionType_Names::Function_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFunction().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DamagedFunctionType_Names::Level_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getLevel().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DamagedFunctionType_Names::Duration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + DamagedFunctionType_Names::Details_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDetails(*value);
      }
    }
  }
}

std::string DamagedFunctionType::serialize(const uci::type::DamagedFunctionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DamagedFunctionType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::damagedFunctionType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, DamagedFunctionType_Names::Extern_Type_Name);
    }
    if (accessor.hasFunction()) {
      DamagedFunctionEnum::serialize(accessor.getFunction(), node, DamagedFunctionType_Names::Function_Name, false);
    }
    DamageLevelEnum::serialize(accessor.getLevel(), node, DamagedFunctionType_Names::Level_Name, false);
    if (accessor.hasDuration()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getDuration(), node, DamagedFunctionType_Names::Duration_Name);
    }
    if (accessor.hasDetails()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getDetails(), node, DamagedFunctionType_Names::Details_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DamagedFunctionType& DamagedFunctionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DamagedFunctionType>().release());
}

uci::type::DamagedFunctionType& DamagedFunctionType::create(const uci::type::DamagedFunctionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DamagedFunctionType> newAccessor{boost::make_unique<asb_uci::type::DamagedFunctionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DamagedFunctionType::destroy(uci::type::DamagedFunctionType& accessor) {
  delete dynamic_cast<asb_uci::type::DamagedFunctionType*>(&accessor);
}

} // namespace type

} // namespace uci

