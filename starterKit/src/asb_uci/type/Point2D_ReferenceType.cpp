/** @file Point2D_ReferenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/Point2D_ReferenceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PointChoiceType.h"
#include "asb_uci/type/ReferenceObjectType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/Point2D_ReferenceType.h"
#include "uci/type/PointChoiceType.h"
#include "uci/type/ReferenceObjectType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

Point2D_ReferenceType::Point2D_ReferenceType()
  : pointChoice_Accessor{boost::make_unique<PointChoiceType>()} {
}

Point2D_ReferenceType::~Point2D_ReferenceType() = default;

void Point2D_ReferenceType::copy(const uci::type::Point2D_ReferenceType& accessor) {
  copyImpl(accessor, false);
}

void Point2D_ReferenceType::copyImpl(const uci::type::Point2D_ReferenceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const Point2D_ReferenceType&>(accessor);
    setPointChoice(*(accessorImpl.pointChoice_Accessor));
    if (accessorImpl.referenceObject_Accessor) {
      setReferenceObject(*(accessorImpl.referenceObject_Accessor));
    } else {
      referenceObject_Accessor.reset();
    }
  }
}

void Point2D_ReferenceType::reset() noexcept {
  pointChoice_Accessor->reset();
  referenceObject_Accessor.reset();
}

const uci::type::PointChoiceType& Point2D_ReferenceType::getPointChoice() const {
  return *pointChoice_Accessor;
}

uci::type::PointChoiceType& Point2D_ReferenceType::getPointChoice() {
  return *pointChoice_Accessor;
}

uci::type::Point2D_ReferenceType& Point2D_ReferenceType::setPointChoice(const uci::type::PointChoiceType& accessor) {
  if (&accessor != pointChoice_Accessor.get()) {
    pointChoice_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ReferenceObjectType& Point2D_ReferenceType::getReferenceObject_() const {
  if (referenceObject_Accessor) {
    return *referenceObject_Accessor;
  }
  throw uci::base::UCIException("Error in getReferenceObject(): An attempt was made to get an optional field that was not enabled, call hasReferenceObject() to determine if it is safe to call getReferenceObject()");
}

const uci::type::ReferenceObjectType& Point2D_ReferenceType::getReferenceObject() const {
  return getReferenceObject_();
}

uci::type::ReferenceObjectType& Point2D_ReferenceType::getReferenceObject() {
  return getReferenceObject_();
}

uci::type::Point2D_ReferenceType& Point2D_ReferenceType::setReferenceObject(const uci::type::ReferenceObjectType& accessor) {
  enableReferenceObject();
  if (&accessor != referenceObject_Accessor.get()) {
    referenceObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool Point2D_ReferenceType::hasReferenceObject() const noexcept {
  return static_cast<bool>(referenceObject_Accessor);
}

uci::type::ReferenceObjectType& Point2D_ReferenceType::enableReferenceObject(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::referenceObjectType : type};
  if ((!referenceObject_Accessor) || (referenceObject_Accessor->getAccessorType() != requestedType)) {
    referenceObject_Accessor = ReferenceObjectType::create(requestedType);
    if (!referenceObject_Accessor) {
      throw uci::base::UCIException("Error in enableReferenceObject(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *referenceObject_Accessor;
}

uci::type::Point2D_ReferenceType& Point2D_ReferenceType::clearReferenceObject() noexcept {
  referenceObject_Accessor.reset();
  return *this;
}

std::unique_ptr<Point2D_ReferenceType> Point2D_ReferenceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_ReferenceType : type};
  return (requestedType == uci::type::accessorType::point2D_ReferenceType) ? boost::make_unique<Point2D_ReferenceType>() : nullptr;
}

/**  */
namespace Point2D_ReferenceType_Names {

constexpr const char* Extern_Type_Name{"Point2D_ReferenceType"};
constexpr const char* PointChoice_Name{"PointChoice"};
constexpr const char* ReferenceObject_Name{"ReferenceObject"};

} // namespace Point2D_ReferenceType_Names

void Point2D_ReferenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::Point2D_ReferenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = Point2D_ReferenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + Point2D_ReferenceType_Names::PointChoice_Name) {
      PointChoiceType::deserialize(valueType.second, accessor.getPointChoice(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Point2D_ReferenceType_Names::ReferenceObject_Name) {
      ReferenceObjectType::deserialize(valueType.second, accessor.enableReferenceObject(), nodeName, nsPrefix);
    }
  }
}

std::string Point2D_ReferenceType::serialize(const uci::type::Point2D_ReferenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? Point2D_ReferenceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, Point2D_ReferenceType_Names::Extern_Type_Name);
  }
  PointChoiceType::serialize(accessor.getPointChoice(), node, Point2D_ReferenceType_Names::PointChoice_Name);
  if (accessor.hasReferenceObject()) {
    ReferenceObjectType::serialize(accessor.getReferenceObject(), node, Point2D_ReferenceType_Names::ReferenceObject_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::Point2D_ReferenceType& Point2D_ReferenceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::Point2D_ReferenceType>().release());
}

uci::type::Point2D_ReferenceType& Point2D_ReferenceType::create(const uci::type::Point2D_ReferenceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::Point2D_ReferenceType> newAccessor{boost::make_unique<asb_uci::type::Point2D_ReferenceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void Point2D_ReferenceType::destroy(uci::type::Point2D_ReferenceType& accessor) {
  delete dynamic_cast<asb_uci::type::Point2D_ReferenceType*>(&accessor);
}

} // namespace type

} // namespace uci

