/** @file OrbitalEphemerisSourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalEphemerisSourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityOrbitalEphemerisID_Type.h"
#include "asb_uci/type/OrbitalEphemerisChoiceType.h"
#include "asb_uci/type/SystemOrbitalEphemerisID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EntityOrbitalEphemerisID_Type.h"
#include "uci/type/OrbitalEphemerisChoiceType.h"
#include "uci/type/OrbitalEphemerisSourceType.h"
#include "uci/type/SystemOrbitalEphemerisID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalEphemerisSourceType::OrbitalEphemerisSourceType() = default;

OrbitalEphemerisSourceType::~OrbitalEphemerisSourceType() = default;

void OrbitalEphemerisSourceType::copy(const uci::type::OrbitalEphemerisSourceType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalEphemerisSourceType::copyImpl(const uci::type::OrbitalEphemerisSourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalEphemerisSourceType&>(accessor);
    if (accessorImpl.systemEphemerisID_Accessor) {
      setSystemEphemerisID(*(accessorImpl.systemEphemerisID_Accessor));
    } else {
      systemEphemerisID_Accessor.reset();
    }
    if (accessorImpl.entityEphemerisID_Accessor) {
      setEntityEphemerisID(*(accessorImpl.entityEphemerisID_Accessor));
    } else {
      entityEphemerisID_Accessor.reset();
    }
    if (accessorImpl.orbitalEphemeris_Accessor) {
      setOrbitalEphemeris(*(accessorImpl.orbitalEphemeris_Accessor));
    } else {
      orbitalEphemeris_Accessor.reset();
    }
  }
}

void OrbitalEphemerisSourceType::reset() noexcept {
  systemEphemerisID_Accessor.reset();
  entityEphemerisID_Accessor.reset();
  orbitalEphemeris_Accessor.reset();
}

uci::type::OrbitalEphemerisSourceType::OrbitalEphemerisSourceTypeChoice OrbitalEphemerisSourceType::getOrbitalEphemerisSourceTypeChoiceOrdinal() const noexcept {
  if (systemEphemerisID_Accessor) {
    return ORBITALEPHEMERISSOURCETYPE_CHOICE_SYSTEMEPHEMERISID;
  }
  if (entityEphemerisID_Accessor) {
    return ORBITALEPHEMERISSOURCETYPE_CHOICE_ENTITYEPHEMERISID;
  }
  if (orbitalEphemeris_Accessor) {
    return ORBITALEPHEMERISSOURCETYPE_CHOICE_ORBITALEPHEMERIS;
  }
  return ORBITALEPHEMERISSOURCETYPE_CHOICE_NONE;
}

uci::type::OrbitalEphemerisSourceType& OrbitalEphemerisSourceType::setOrbitalEphemerisSourceTypeChoiceOrdinal(uci::type::OrbitalEphemerisSourceType::OrbitalEphemerisSourceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITALEPHEMERISSOURCETYPE_CHOICE_SYSTEMEPHEMERISID:
      chooseSystemEphemerisID("setOrbitalEphemerisSourceTypeChoiceOrdinal", type);
      break;
    case ORBITALEPHEMERISSOURCETYPE_CHOICE_ENTITYEPHEMERISID:
      chooseEntityEphemerisID("setOrbitalEphemerisSourceTypeChoiceOrdinal", type);
      break;
    case ORBITALEPHEMERISSOURCETYPE_CHOICE_ORBITALEPHEMERIS:
      chooseOrbitalEphemeris("setOrbitalEphemerisSourceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitalEphemerisSourceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SystemOrbitalEphemerisID_Type& OrbitalEphemerisSourceType::getSystemEphemerisID_() const {
  if (systemEphemerisID_Accessor) {
    return *systemEphemerisID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemEphemerisID(): Unable to get SystemEphemerisID, field not selected");
}

const uci::type::SystemOrbitalEphemerisID_Type& OrbitalEphemerisSourceType::getSystemEphemerisID() const {
  return getSystemEphemerisID_();
}

uci::type::SystemOrbitalEphemerisID_Type& OrbitalEphemerisSourceType::getSystemEphemerisID() {
  return getSystemEphemerisID_();
}

uci::type::OrbitalEphemerisSourceType& OrbitalEphemerisSourceType::setSystemEphemerisID(const uci::type::SystemOrbitalEphemerisID_Type& accessor) {
  chooseSystemEphemerisID();
  if (&accessor != systemEphemerisID_Accessor.get()) {
    systemEphemerisID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalEphemerisSourceType::isSystemEphemerisID() const noexcept {
  return static_cast<bool>(systemEphemerisID_Accessor);
}

uci::type::SystemOrbitalEphemerisID_Type& OrbitalEphemerisSourceType::chooseSystemEphemerisID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityEphemerisID_Accessor.reset();
  orbitalEphemeris_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemOrbitalEphemerisID_Type : type};
  if ((!systemEphemerisID_Accessor) || (systemEphemerisID_Accessor->getAccessorType() != requestedType)) {
    systemEphemerisID_Accessor = SystemOrbitalEphemerisID_Type::create(type);
    if (!systemEphemerisID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemEphemerisID_Accessor;
}

uci::type::SystemOrbitalEphemerisID_Type& OrbitalEphemerisSourceType::chooseSystemEphemerisID(uci::base::accessorType::AccessorType type) {
  return chooseSystemEphemerisID("chooseSystemEphemerisID", type);
}

uci::type::EntityOrbitalEphemerisID_Type& OrbitalEphemerisSourceType::getEntityEphemerisID_() const {
  if (entityEphemerisID_Accessor) {
    return *entityEphemerisID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityEphemerisID(): Unable to get EntityEphemerisID, field not selected");
}

const uci::type::EntityOrbitalEphemerisID_Type& OrbitalEphemerisSourceType::getEntityEphemerisID() const {
  return getEntityEphemerisID_();
}

uci::type::EntityOrbitalEphemerisID_Type& OrbitalEphemerisSourceType::getEntityEphemerisID() {
  return getEntityEphemerisID_();
}

uci::type::OrbitalEphemerisSourceType& OrbitalEphemerisSourceType::setEntityEphemerisID(const uci::type::EntityOrbitalEphemerisID_Type& accessor) {
  chooseEntityEphemerisID();
  if (&accessor != entityEphemerisID_Accessor.get()) {
    entityEphemerisID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalEphemerisSourceType::isEntityEphemerisID() const noexcept {
  return static_cast<bool>(entityEphemerisID_Accessor);
}

uci::type::EntityOrbitalEphemerisID_Type& OrbitalEphemerisSourceType::chooseEntityEphemerisID(const std::string& method, uci::base::accessorType::AccessorType type) {
  systemEphemerisID_Accessor.reset();
  orbitalEphemeris_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityOrbitalEphemerisID_Type : type};
  if ((!entityEphemerisID_Accessor) || (entityEphemerisID_Accessor->getAccessorType() != requestedType)) {
    entityEphemerisID_Accessor = EntityOrbitalEphemerisID_Type::create(type);
    if (!entityEphemerisID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityEphemerisID_Accessor;
}

uci::type::EntityOrbitalEphemerisID_Type& OrbitalEphemerisSourceType::chooseEntityEphemerisID(uci::base::accessorType::AccessorType type) {
  return chooseEntityEphemerisID("chooseEntityEphemerisID", type);
}

uci::type::OrbitalEphemerisChoiceType& OrbitalEphemerisSourceType::getOrbitalEphemeris_() const {
  if (orbitalEphemeris_Accessor) {
    return *orbitalEphemeris_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalEphemeris(): Unable to get OrbitalEphemeris, field not selected");
}

const uci::type::OrbitalEphemerisChoiceType& OrbitalEphemerisSourceType::getOrbitalEphemeris() const {
  return getOrbitalEphemeris_();
}

uci::type::OrbitalEphemerisChoiceType& OrbitalEphemerisSourceType::getOrbitalEphemeris() {
  return getOrbitalEphemeris_();
}

uci::type::OrbitalEphemerisSourceType& OrbitalEphemerisSourceType::setOrbitalEphemeris(const uci::type::OrbitalEphemerisChoiceType& accessor) {
  chooseOrbitalEphemeris(accessor.getAccessorType());
  if (&accessor != orbitalEphemeris_Accessor.get()) {
    orbitalEphemeris_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalEphemerisSourceType::isOrbitalEphemeris() const noexcept {
  return static_cast<bool>(orbitalEphemeris_Accessor);
}

uci::type::OrbitalEphemerisChoiceType& OrbitalEphemerisSourceType::chooseOrbitalEphemeris(const std::string& method, uci::base::accessorType::AccessorType type) {
  systemEphemerisID_Accessor.reset();
  entityEphemerisID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalEphemerisChoiceType : type};
  if ((!orbitalEphemeris_Accessor) || (orbitalEphemeris_Accessor->getAccessorType() != requestedType)) {
    orbitalEphemeris_Accessor = OrbitalEphemerisChoiceType::create(type);
    if (!orbitalEphemeris_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalEphemeris_Accessor;
}

uci::type::OrbitalEphemerisChoiceType& OrbitalEphemerisSourceType::chooseOrbitalEphemeris(uci::base::accessorType::AccessorType type) {
  return chooseOrbitalEphemeris("chooseOrbitalEphemeris", type);
}

std::unique_ptr<OrbitalEphemerisSourceType> OrbitalEphemerisSourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalEphemerisSourceType : type};
  return (requestedType == uci::type::accessorType::orbitalEphemerisSourceType) ? boost::make_unique<OrbitalEphemerisSourceType>() : nullptr;
}

/**  */
namespace OrbitalEphemerisSourceType_Names {

constexpr const char* Extern_Type_Name{"OrbitalEphemerisSourceType"};
constexpr const char* SystemEphemerisID_Name{"SystemEphemerisID"};
constexpr const char* EntityEphemerisID_Name{"EntityEphemerisID"};
constexpr const char* OrbitalEphemeris_Name{"OrbitalEphemeris"};

} // namespace OrbitalEphemerisSourceType_Names

void OrbitalEphemerisSourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalEphemerisSourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalEphemerisSourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalEphemerisSourceType_Names::SystemEphemerisID_Name) {
      SystemOrbitalEphemerisID_Type::deserialize(valueType.second, accessor.chooseSystemEphemerisID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalEphemerisSourceType_Names::EntityEphemerisID_Name) {
      EntityOrbitalEphemerisID_Type::deserialize(valueType.second, accessor.chooseEntityEphemerisID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalEphemerisSourceType_Names::OrbitalEphemeris_Name) {
      OrbitalEphemerisChoiceType::deserialize(valueType.second, accessor.chooseOrbitalEphemeris(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalEphemerisSourceType::serialize(const uci::type::OrbitalEphemerisSourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalEphemerisSourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalEphemerisSourceType_Names::Extern_Type_Name);
  }
  if (accessor.isSystemEphemerisID()) {
    SystemOrbitalEphemerisID_Type::serialize(accessor.getSystemEphemerisID(), node, OrbitalEphemerisSourceType_Names::SystemEphemerisID_Name);
  } else if (accessor.isEntityEphemerisID()) {
    EntityOrbitalEphemerisID_Type::serialize(accessor.getEntityEphemerisID(), node, OrbitalEphemerisSourceType_Names::EntityEphemerisID_Name);
  } else if (accessor.isOrbitalEphemeris()) {
    OrbitalEphemerisChoiceType::serialize(accessor.getOrbitalEphemeris(), node, OrbitalEphemerisSourceType_Names::OrbitalEphemeris_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalEphemerisSourceType& OrbitalEphemerisSourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalEphemerisSourceType>().release());
}

uci::type::OrbitalEphemerisSourceType& OrbitalEphemerisSourceType::create(const uci::type::OrbitalEphemerisSourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalEphemerisSourceType> newAccessor{boost::make_unique<asb_uci::type::OrbitalEphemerisSourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalEphemerisSourceType::destroy(uci::type::OrbitalEphemerisSourceType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalEphemerisSourceType*>(&accessor);
}

} // namespace type

} // namespace uci

