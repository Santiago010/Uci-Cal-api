/** @file ThreatAssessmentRequestType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ThreatAssessmentRequestType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AssessmentSuppressionEnum.h"
#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/SystemRoutePlanSpecificationType.h"
#include "../../../include/asb_uci/type/ThreatCapabilityEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AssessmentSuppressionEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemRoutePlanSpecificationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ThreatAssessmentRequestType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ThreatCapabilityEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ThreatAssessmentRequestType::ThreatAssessmentRequestType()
  : threatCapability_Accessor{boost::make_unique<ThreatCapabilityEnum>()},
    threatSuppression_Accessor{boost::make_unique<AssessmentSuppressionEnum>()},
    threatEntityID_Accessor{boost::make_unique<ThreatEntityID>(0, SIZE_MAX)},
    systemToAssess_Accessor{boost::make_unique<SystemToAssess>(1, SIZE_MAX)},
    supportingSystem_Accessor{boost::make_unique<SupportingSystem>(0, SIZE_MAX)} {
}

ThreatAssessmentRequestType::~ThreatAssessmentRequestType() = default;

void ThreatAssessmentRequestType::copy(const uci::type::ThreatAssessmentRequestType& accessor) {
  copyImpl(accessor, false);
}

void ThreatAssessmentRequestType::copyImpl(const uci::type::ThreatAssessmentRequestType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::threatAssessmentRequestType)) {
      const auto& accessorImpl = dynamic_cast<const ThreatAssessmentRequestType&>(accessor);
      setThreatCapability(*(accessorImpl.threatCapability_Accessor));
      setThreatSuppression(*(accessorImpl.threatSuppression_Accessor));
      setThreatEntityID(*(accessorImpl.threatEntityID_Accessor));
      if (accessorImpl.hasAssessmentInterval()) {
        setAssessmentInterval(accessorImpl.getAssessmentInterval());
      } else {
        clearAssessmentInterval();
      }
      setSystemToAssess(*(accessorImpl.systemToAssess_Accessor));
      setSupportingSystem(*(accessorImpl.supportingSystem_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void ThreatAssessmentRequestType::reset() noexcept {
  threatCapability_Accessor->reset();
  threatSuppression_Accessor->reset();
  threatEntityID_Accessor->reset();
  clearAssessmentInterval();
  systemToAssess_Accessor->reset();
  supportingSystem_Accessor->reset();
}

const uci::type::ThreatCapabilityEnum& ThreatAssessmentRequestType::getThreatCapability() const {
  return *threatCapability_Accessor;
}

uci::type::ThreatCapabilityEnum& ThreatAssessmentRequestType::getThreatCapability() {
  return *threatCapability_Accessor;
}

uci::type::ThreatAssessmentRequestType& ThreatAssessmentRequestType::setThreatCapability(const uci::type::ThreatCapabilityEnum& accessor) {
  if (&accessor != threatCapability_Accessor.get()) {
    threatCapability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ThreatAssessmentRequestType& ThreatAssessmentRequestType::setThreatCapability(uci::type::ThreatCapabilityEnum::EnumerationItem value) {
  threatCapability_Accessor->setValue(value);
  return *this;
}


const uci::type::AssessmentSuppressionEnum& ThreatAssessmentRequestType::getThreatSuppression() const {
  return *threatSuppression_Accessor;
}

uci::type::AssessmentSuppressionEnum& ThreatAssessmentRequestType::getThreatSuppression() {
  return *threatSuppression_Accessor;
}

uci::type::ThreatAssessmentRequestType& ThreatAssessmentRequestType::setThreatSuppression(const uci::type::AssessmentSuppressionEnum& accessor) {
  if (&accessor != threatSuppression_Accessor.get()) {
    threatSuppression_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ThreatAssessmentRequestType& ThreatAssessmentRequestType::setThreatSuppression(uci::type::AssessmentSuppressionEnum::EnumerationItem value) {
  threatSuppression_Accessor->setValue(value);
  return *this;
}


const uci::type::ThreatAssessmentRequestType::ThreatEntityID& ThreatAssessmentRequestType::getThreatEntityID() const {
  return *threatEntityID_Accessor;
}

uci::type::ThreatAssessmentRequestType::ThreatEntityID& ThreatAssessmentRequestType::getThreatEntityID() {
  return *threatEntityID_Accessor;
}

uci::type::ThreatAssessmentRequestType& ThreatAssessmentRequestType::setThreatEntityID(const uci::type::ThreatAssessmentRequestType::ThreatEntityID& accessor) {
  if (&accessor != threatEntityID_Accessor.get()) {
    threatEntityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DurationTypeValue ThreatAssessmentRequestType::getAssessmentInterval() const {
  if (assessmentInterval_Accessor) {
    return *assessmentInterval_Accessor;
  }
  throw uci::base::UCIException("Error in getAssessmentInterval(): An attempt was made to get an optional field that was not enabled, call hasAssessmentInterval() to determine if it is safe to call getAssessmentInterval()");
}

uci::type::ThreatAssessmentRequestType& ThreatAssessmentRequestType::setAssessmentInterval(uci::type::DurationTypeValue value) {
  assessmentInterval_Accessor = value;
  return *this;
}

bool ThreatAssessmentRequestType::hasAssessmentInterval() const noexcept {
  return assessmentInterval_Accessor.has_value();
}

uci::type::ThreatAssessmentRequestType& ThreatAssessmentRequestType::clearAssessmentInterval() noexcept {
  assessmentInterval_Accessor.reset();
  return *this;
}

const uci::type::ThreatAssessmentRequestType::SystemToAssess& ThreatAssessmentRequestType::getSystemToAssess() const {
  return *systemToAssess_Accessor;
}

uci::type::ThreatAssessmentRequestType::SystemToAssess& ThreatAssessmentRequestType::getSystemToAssess() {
  return *systemToAssess_Accessor;
}

uci::type::ThreatAssessmentRequestType& ThreatAssessmentRequestType::setSystemToAssess(const uci::type::ThreatAssessmentRequestType::SystemToAssess& accessor) {
  if (&accessor != systemToAssess_Accessor.get()) {
    systemToAssess_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ThreatAssessmentRequestType::SupportingSystem& ThreatAssessmentRequestType::getSupportingSystem() const {
  return *supportingSystem_Accessor;
}

uci::type::ThreatAssessmentRequestType::SupportingSystem& ThreatAssessmentRequestType::getSupportingSystem() {
  return *supportingSystem_Accessor;
}

uci::type::ThreatAssessmentRequestType& ThreatAssessmentRequestType::setSupportingSystem(const uci::type::ThreatAssessmentRequestType::SupportingSystem& accessor) {
  if (&accessor != supportingSystem_Accessor.get()) {
    supportingSystem_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ThreatAssessmentRequestType> ThreatAssessmentRequestType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatAssessmentRequestType : type};
  return std::unique_ptr<ThreatAssessmentRequestType>(dynamic_cast<ThreatAssessmentRequestType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace ThreatAssessmentRequestType_Names {

constexpr const char* Extern_Type_Name{"ThreatAssessmentRequestType"};
constexpr const char* ThreatCapability_Name{"ThreatCapability"};
constexpr const char* ThreatSuppression_Name{"ThreatSuppression"};
constexpr const char* ThreatEntityID_Name{"ThreatEntityID"};
constexpr const char* AssessmentInterval_Name{"AssessmentInterval"};
constexpr const char* SystemToAssess_Name{"SystemToAssess"};
constexpr const char* SupportingSystem_Name{"SupportingSystem"};

} // namespace ThreatAssessmentRequestType_Names

void ThreatAssessmentRequestType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ThreatAssessmentRequestType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ThreatAssessmentRequestType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ThreatAssessmentRequestType_Names::ThreatCapability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getThreatCapability().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ThreatAssessmentRequestType_Names::ThreatSuppression_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getThreatSuppression().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ThreatAssessmentRequestType_Names::ThreatEntityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ThreatAssessmentRequestType::ThreatEntityID& boundedList = accessor.getThreatEntityID();
        const uci::type::ThreatAssessmentRequestType::ThreatEntityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ThreatAssessmentRequestType_Names::AssessmentInterval_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAssessmentInterval(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + ThreatAssessmentRequestType_Names::SystemToAssess_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ThreatAssessmentRequestType::SystemToAssess& boundedList = accessor.getSystemToAssess();
        const uci::type::ThreatAssessmentRequestType::SystemToAssess::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemRoutePlanSpecificationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ThreatAssessmentRequestType_Names::SupportingSystem_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ThreatAssessmentRequestType::SupportingSystem& boundedList = accessor.getSupportingSystem();
        const uci::type::ThreatAssessmentRequestType::SupportingSystem::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemRoutePlanSpecificationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ThreatAssessmentRequestType::serialize(const uci::type::ThreatAssessmentRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ThreatAssessmentRequestType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::threatAssessmentRequestType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, ThreatAssessmentRequestType_Names::Extern_Type_Name);
    }
    ThreatCapabilityEnum::serialize(accessor.getThreatCapability(), node, ThreatAssessmentRequestType_Names::ThreatCapability_Name, false);
    AssessmentSuppressionEnum::serialize(accessor.getThreatSuppression(), node, ThreatAssessmentRequestType_Names::ThreatSuppression_Name, false);
    {
      const uci::type::ThreatAssessmentRequestType::ThreatEntityID& boundedList = accessor.getThreatEntityID();
      for (uci::type::ThreatAssessmentRequestType::ThreatEntityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::EntityID_Type::serialize(boundedList.at(i), node, ThreatAssessmentRequestType_Names::ThreatEntityID_Name);
      }
    }
    if (accessor.hasAssessmentInterval()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getAssessmentInterval(), node, ThreatAssessmentRequestType_Names::AssessmentInterval_Name);
    }
    {
      const uci::type::ThreatAssessmentRequestType::SystemToAssess& boundedList = accessor.getSystemToAssess();
      for (uci::type::ThreatAssessmentRequestType::SystemToAssess::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SystemRoutePlanSpecificationType::serialize(boundedList.at(i), node, ThreatAssessmentRequestType_Names::SystemToAssess_Name);
      }
    }
    {
      const uci::type::ThreatAssessmentRequestType::SupportingSystem& boundedList = accessor.getSupportingSystem();
      for (uci::type::ThreatAssessmentRequestType::SupportingSystem::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SystemRoutePlanSpecificationType::serialize(boundedList.at(i), node, ThreatAssessmentRequestType_Names::SupportingSystem_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ThreatAssessmentRequestType& ThreatAssessmentRequestType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ThreatAssessmentRequestType>().release());
}

uci::type::ThreatAssessmentRequestType& ThreatAssessmentRequestType::create(const uci::type::ThreatAssessmentRequestType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ThreatAssessmentRequestType> newAccessor{boost::make_unique<asb_uci::type::ThreatAssessmentRequestType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ThreatAssessmentRequestType::destroy(uci::type::ThreatAssessmentRequestType& accessor) {
  delete dynamic_cast<asb_uci::type::ThreatAssessmentRequestType*>(&accessor);
}

} // namespace type

} // namespace uci

