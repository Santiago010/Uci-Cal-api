/** @file TraceabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/TraceabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ACTDF_TraceabilityType.h"
#include "../../../include/asb_uci/type/AOCO_TraceabilityType.h"
#include "../../../include/asb_uci/type/ATO_TraceabilityType.h"
#include "../../../include/asb_uci/type/CS_STO_TraceabilityType.h"
#include "../../../include/asb_uci/type/CollectionDeckTraceabilityType.h"
#include "../../../include/asb_uci/type/EEI_ID_Type.h"
#include "../../../include/asb_uci/type/RequirementInstanceID_ChoiceType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ACTDF_TraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AOCO_TraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ATO_TraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CS_STO_TraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CollectionDeckTraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EEI_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementInstanceID_ChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TraceabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TraceabilityType::TraceabilityType()
  : requirement_Accessor{boost::make_unique<Requirement>(0, SIZE_MAX)},
    collectionDeckTraceability_Accessor{boost::make_unique<CollectionDeckTraceability>(0, SIZE_MAX)},
    aCTDF_Traceability_Accessor{boost::make_unique<ACTDF_Traceability>(0, SIZE_MAX)},
    eEI_ID_Accessor{boost::make_unique<EEI_ID>(0, SIZE_MAX)},
    aTO_Traceability_Accessor{boost::make_unique<ATO_Traceability>(0, SIZE_MAX)} {
}

TraceabilityType::~TraceabilityType() = default;

void TraceabilityType::copy(const uci::type::TraceabilityType& accessor) {
  copyImpl(accessor, false);
}

void TraceabilityType::copyImpl(const uci::type::TraceabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const TraceabilityType&>(accessor);
    setRequirement(*(accessorImpl.requirement_Accessor));
    setCollectionDeckTraceability(*(accessorImpl.collectionDeckTraceability_Accessor));
    setACTDF_Traceability(*(accessorImpl.aCTDF_Traceability_Accessor));
    setEEI_ID(*(accessorImpl.eEI_ID_Accessor));
    setATO_Traceability(*(accessorImpl.aTO_Traceability_Accessor));
    if (accessorImpl.aOCO_Traceability_Accessor) {
      setAOCO_Traceability(*(accessorImpl.aOCO_Traceability_Accessor));
    } else {
      aOCO_Traceability_Accessor.reset();
    }
    if (accessorImpl.sTO_Traceability_Accessor) {
      setSTO_Traceability(*(accessorImpl.sTO_Traceability_Accessor));
    } else {
      sTO_Traceability_Accessor.reset();
    }
  }
}

void TraceabilityType::reset() noexcept {
  requirement_Accessor->reset();
  collectionDeckTraceability_Accessor->reset();
  aCTDF_Traceability_Accessor->reset();
  eEI_ID_Accessor->reset();
  aTO_Traceability_Accessor->reset();
  aOCO_Traceability_Accessor.reset();
  sTO_Traceability_Accessor.reset();
}

const uci::type::TraceabilityType::Requirement& TraceabilityType::getRequirement() const {
  return *requirement_Accessor;
}

uci::type::TraceabilityType::Requirement& TraceabilityType::getRequirement() {
  return *requirement_Accessor;
}

uci::type::TraceabilityType& TraceabilityType::setRequirement(const uci::type::TraceabilityType::Requirement& accessor) {
  if (&accessor != requirement_Accessor.get()) {
    requirement_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::TraceabilityType::CollectionDeckTraceability& TraceabilityType::getCollectionDeckTraceability() const {
  return *collectionDeckTraceability_Accessor;
}

uci::type::TraceabilityType::CollectionDeckTraceability& TraceabilityType::getCollectionDeckTraceability() {
  return *collectionDeckTraceability_Accessor;
}

uci::type::TraceabilityType& TraceabilityType::setCollectionDeckTraceability(const uci::type::TraceabilityType::CollectionDeckTraceability& accessor) {
  if (&accessor != collectionDeckTraceability_Accessor.get()) {
    collectionDeckTraceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::TraceabilityType::ACTDF_Traceability& TraceabilityType::getACTDF_Traceability() const {
  return *aCTDF_Traceability_Accessor;
}

uci::type::TraceabilityType::ACTDF_Traceability& TraceabilityType::getACTDF_Traceability() {
  return *aCTDF_Traceability_Accessor;
}

uci::type::TraceabilityType& TraceabilityType::setACTDF_Traceability(const uci::type::TraceabilityType::ACTDF_Traceability& accessor) {
  if (&accessor != aCTDF_Traceability_Accessor.get()) {
    aCTDF_Traceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::TraceabilityType::EEI_ID& TraceabilityType::getEEI_ID() const {
  return *eEI_ID_Accessor;
}

uci::type::TraceabilityType::EEI_ID& TraceabilityType::getEEI_ID() {
  return *eEI_ID_Accessor;
}

uci::type::TraceabilityType& TraceabilityType::setEEI_ID(const uci::type::TraceabilityType::EEI_ID& accessor) {
  if (&accessor != eEI_ID_Accessor.get()) {
    eEI_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::TraceabilityType::ATO_Traceability& TraceabilityType::getATO_Traceability() const {
  return *aTO_Traceability_Accessor;
}

uci::type::TraceabilityType::ATO_Traceability& TraceabilityType::getATO_Traceability() {
  return *aTO_Traceability_Accessor;
}

uci::type::TraceabilityType& TraceabilityType::setATO_Traceability(const uci::type::TraceabilityType::ATO_Traceability& accessor) {
  if (&accessor != aTO_Traceability_Accessor.get()) {
    aTO_Traceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AOCO_TraceabilityType& TraceabilityType::getAOCO_Traceability_() const {
  if (aOCO_Traceability_Accessor) {
    return *aOCO_Traceability_Accessor;
  }
  throw uci::base::UCIException("Error in getAOCO_Traceability(): An attempt was made to get an optional field that was not enabled, call hasAOCO_Traceability() to determine if it is safe to call getAOCO_Traceability()");
}

const uci::type::AOCO_TraceabilityType& TraceabilityType::getAOCO_Traceability() const {
  return getAOCO_Traceability_();
}

uci::type::AOCO_TraceabilityType& TraceabilityType::getAOCO_Traceability() {
  return getAOCO_Traceability_();
}

uci::type::TraceabilityType& TraceabilityType::setAOCO_Traceability(const uci::type::AOCO_TraceabilityType& accessor) {
  enableAOCO_Traceability();
  if (&accessor != aOCO_Traceability_Accessor.get()) {
    aOCO_Traceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TraceabilityType::hasAOCO_Traceability() const noexcept {
  return static_cast<bool>(aOCO_Traceability_Accessor);
}

uci::type::AOCO_TraceabilityType& TraceabilityType::enableAOCO_Traceability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aOCO_TraceabilityType : type};
  if ((!aOCO_Traceability_Accessor) || (aOCO_Traceability_Accessor->getAccessorType() != requestedType)) {
    aOCO_Traceability_Accessor = AOCO_TraceabilityType::create(requestedType);
    if (!aOCO_Traceability_Accessor) {
      throw uci::base::UCIException("Error in enableAOCO_Traceability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aOCO_Traceability_Accessor;
}

uci::type::TraceabilityType& TraceabilityType::clearAOCO_Traceability() noexcept {
  aOCO_Traceability_Accessor.reset();
  return *this;
}

uci::type::CS_STO_TraceabilityType& TraceabilityType::getSTO_Traceability_() const {
  if (sTO_Traceability_Accessor) {
    return *sTO_Traceability_Accessor;
  }
  throw uci::base::UCIException("Error in getSTO_Traceability(): An attempt was made to get an optional field that was not enabled, call hasSTO_Traceability() to determine if it is safe to call getSTO_Traceability()");
}

const uci::type::CS_STO_TraceabilityType& TraceabilityType::getSTO_Traceability() const {
  return getSTO_Traceability_();
}

uci::type::CS_STO_TraceabilityType& TraceabilityType::getSTO_Traceability() {
  return getSTO_Traceability_();
}

uci::type::TraceabilityType& TraceabilityType::setSTO_Traceability(const uci::type::CS_STO_TraceabilityType& accessor) {
  enableSTO_Traceability();
  if (&accessor != sTO_Traceability_Accessor.get()) {
    sTO_Traceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TraceabilityType::hasSTO_Traceability() const noexcept {
  return static_cast<bool>(sTO_Traceability_Accessor);
}

uci::type::CS_STO_TraceabilityType& TraceabilityType::enableSTO_Traceability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_STO_TraceabilityType : type};
  if ((!sTO_Traceability_Accessor) || (sTO_Traceability_Accessor->getAccessorType() != requestedType)) {
    sTO_Traceability_Accessor = CS_STO_TraceabilityType::create(requestedType);
    if (!sTO_Traceability_Accessor) {
      throw uci::base::UCIException("Error in enableSTO_Traceability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sTO_Traceability_Accessor;
}

uci::type::TraceabilityType& TraceabilityType::clearSTO_Traceability() noexcept {
  sTO_Traceability_Accessor.reset();
  return *this;
}

std::unique_ptr<TraceabilityType> TraceabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::traceabilityType : type};
  return (requestedType == uci::type::accessorType::traceabilityType) ? boost::make_unique<TraceabilityType>() : nullptr;
}

/**  */
namespace TraceabilityType_Names {

constexpr const char* Extern_Type_Name{"TraceabilityType"};
constexpr const char* Requirement_Name{"Requirement"};
constexpr const char* CollectionDeckTraceability_Name{"CollectionDeckTraceability"};
constexpr const char* ACTDF_Traceability_Name{"ACTDF_Traceability"};
constexpr const char* EEI_ID_Name{"EEI_ID"};
constexpr const char* ATO_Traceability_Name{"ATO_Traceability"};
constexpr const char* AOCO_Traceability_Name{"AOCO_Traceability"};
constexpr const char* STO_Traceability_Name{"STO_Traceability"};

} // namespace TraceabilityType_Names

void TraceabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TraceabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TraceabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TraceabilityType_Names::Requirement_Name) {
      uci::type::TraceabilityType::Requirement& boundedList = accessor.getRequirement();
      const uci::type::TraceabilityType::Requirement::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::RequirementInstanceID_ChoiceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TraceabilityType_Names::CollectionDeckTraceability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::TraceabilityType::CollectionDeckTraceability& boundedList = accessor.getCollectionDeckTraceability();
        const uci::type::TraceabilityType::CollectionDeckTraceability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CollectionDeckTraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + TraceabilityType_Names::ACTDF_Traceability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::TraceabilityType::ACTDF_Traceability& boundedList = accessor.getACTDF_Traceability();
        const uci::type::TraceabilityType::ACTDF_Traceability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + TraceabilityType_Names::EEI_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::TraceabilityType::EEI_ID& boundedList = accessor.getEEI_ID();
        const uci::type::TraceabilityType::EEI_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EEI_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + TraceabilityType_Names::ATO_Traceability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::TraceabilityType::ATO_Traceability& boundedList = accessor.getATO_Traceability();
        const uci::type::TraceabilityType::ATO_Traceability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + TraceabilityType_Names::AOCO_Traceability_Name) {
      AOCO_TraceabilityType::deserialize(valueType.second, accessor.enableAOCO_Traceability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TraceabilityType_Names::STO_Traceability_Name) {
      CS_STO_TraceabilityType::deserialize(valueType.second, accessor.enableSTO_Traceability(), nodeName, nsPrefix);
    }
  }
}

std::string TraceabilityType::serialize(const uci::type::TraceabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TraceabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, TraceabilityType_Names::Extern_Type_Name);
  }
  {
    const uci::type::TraceabilityType::Requirement& boundedList = accessor.getRequirement();
    for (uci::type::TraceabilityType::Requirement::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementInstanceID_ChoiceType::serialize(boundedList.at(i), node, TraceabilityType_Names::Requirement_Name);
    }
  }
  {
    const uci::type::TraceabilityType::CollectionDeckTraceability& boundedList = accessor.getCollectionDeckTraceability();
    for (uci::type::TraceabilityType::CollectionDeckTraceability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CollectionDeckTraceabilityType::serialize(boundedList.at(i), node, TraceabilityType_Names::CollectionDeckTraceability_Name);
    }
  }
  {
    const uci::type::TraceabilityType::ACTDF_Traceability& boundedList = accessor.getACTDF_Traceability();
    for (uci::type::TraceabilityType::ACTDF_Traceability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ACTDF_TraceabilityType::serialize(boundedList.at(i), node, TraceabilityType_Names::ACTDF_Traceability_Name);
    }
  }
  {
    const uci::type::TraceabilityType::EEI_ID& boundedList = accessor.getEEI_ID();
    for (uci::type::TraceabilityType::EEI_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EEI_ID_Type::serialize(boundedList.at(i), node, TraceabilityType_Names::EEI_ID_Name);
    }
  }
  {
    const uci::type::TraceabilityType::ATO_Traceability& boundedList = accessor.getATO_Traceability();
    for (uci::type::TraceabilityType::ATO_Traceability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ATO_TraceabilityType::serialize(boundedList.at(i), node, TraceabilityType_Names::ATO_Traceability_Name);
    }
  }
  if (accessor.hasAOCO_Traceability()) {
    AOCO_TraceabilityType::serialize(accessor.getAOCO_Traceability(), node, TraceabilityType_Names::AOCO_Traceability_Name);
  }
  if (accessor.hasSTO_Traceability()) {
    CS_STO_TraceabilityType::serialize(accessor.getSTO_Traceability(), node, TraceabilityType_Names::STO_Traceability_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TraceabilityType& TraceabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TraceabilityType>().release());
}

uci::type::TraceabilityType& TraceabilityType::create(const uci::type::TraceabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TraceabilityType> newAccessor{boost::make_unique<asb_uci::type::TraceabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TraceabilityType::destroy(uci::type::TraceabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::TraceabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

