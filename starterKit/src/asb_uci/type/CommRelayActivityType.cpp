/** @file CommRelayActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommRelayActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityBaseType.h"
#include "../../../include/asb_uci/type/FrequencySetType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommRelayActivityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencySetType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommRelayActivityType::CommRelayActivityType()
  : frequencySet_Accessor{boost::make_unique<FrequencySet>(0, SIZE_MAX)} {
}

CommRelayActivityType::~CommRelayActivityType() = default;

void CommRelayActivityType::copy(const uci::type::CommRelayActivityType& accessor) {
  copyImpl(accessor, false);
}

void CommRelayActivityType::copyImpl(const uci::type::CommRelayActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ActivityBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CommRelayActivityType&>(accessor);
    setFrequencySet(*(accessorImpl.frequencySet_Accessor));
    if (accessorImpl.hasActualStartTime()) {
      setActualStartTime(accessorImpl.getActualStartTime());
    } else {
      clearActualStartTime();
    }
    if (accessorImpl.hasActualEndTime()) {
      setActualEndTime(accessorImpl.getActualEndTime());
    } else {
      clearActualEndTime();
    }
  }
}

void CommRelayActivityType::reset() noexcept {
  ActivityBaseType::reset();
  frequencySet_Accessor->reset();
  clearActualStartTime();
  clearActualEndTime();
}

const uci::type::CommRelayActivityType::FrequencySet& CommRelayActivityType::getFrequencySet() const {
  return *frequencySet_Accessor;
}

uci::type::CommRelayActivityType::FrequencySet& CommRelayActivityType::getFrequencySet() {
  return *frequencySet_Accessor;
}

uci::type::CommRelayActivityType& CommRelayActivityType::setFrequencySet(const uci::type::CommRelayActivityType::FrequencySet& accessor) {
  if (&accessor != frequencySet_Accessor.get()) {
    frequencySet_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue CommRelayActivityType::getActualStartTime() const {
  if (actualStartTime_Accessor) {
    return *actualStartTime_Accessor;
  }
  throw uci::base::UCIException("Error in getActualStartTime(): An attempt was made to get an optional field that was not enabled, call hasActualStartTime() to determine if it is safe to call getActualStartTime()");
}

uci::type::CommRelayActivityType& CommRelayActivityType::setActualStartTime(uci::type::DateTimeTypeValue value) {
  actualStartTime_Accessor = value;
  return *this;
}

bool CommRelayActivityType::hasActualStartTime() const noexcept {
  return actualStartTime_Accessor.has_value();
}

uci::type::CommRelayActivityType& CommRelayActivityType::clearActualStartTime() noexcept {
  actualStartTime_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue CommRelayActivityType::getActualEndTime() const {
  if (actualEndTime_Accessor) {
    return *actualEndTime_Accessor;
  }
  throw uci::base::UCIException("Error in getActualEndTime(): An attempt was made to get an optional field that was not enabled, call hasActualEndTime() to determine if it is safe to call getActualEndTime()");
}

uci::type::CommRelayActivityType& CommRelayActivityType::setActualEndTime(uci::type::DateTimeTypeValue value) {
  actualEndTime_Accessor = value;
  return *this;
}

bool CommRelayActivityType::hasActualEndTime() const noexcept {
  return actualEndTime_Accessor.has_value();
}

uci::type::CommRelayActivityType& CommRelayActivityType::clearActualEndTime() noexcept {
  actualEndTime_Accessor.reset();
  return *this;
}

std::unique_ptr<CommRelayActivityType> CommRelayActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commRelayActivityType : type};
  return (requestedType == uci::type::accessorType::commRelayActivityType) ? boost::make_unique<CommRelayActivityType>() : nullptr;
}

/**  */
namespace CommRelayActivityType_Names {

constexpr const char* Extern_Type_Name{"CommRelayActivityType"};
constexpr const char* FrequencySet_Name{"FrequencySet"};
constexpr const char* ActualStartTime_Name{"ActualStartTime"};
constexpr const char* ActualEndTime_Name{"ActualEndTime"};

} // namespace CommRelayActivityType_Names

void CommRelayActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommRelayActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommRelayActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommRelayActivityType_Names::FrequencySet_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommRelayActivityType::FrequencySet& boundedList = accessor.getFrequencySet();
        const uci::type::CommRelayActivityType::FrequencySet::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FrequencySetType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommRelayActivityType_Names::ActualStartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStartTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + CommRelayActivityType_Names::ActualEndTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualEndTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    }
  }
  ActivityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CommRelayActivityType::serialize(const uci::type::CommRelayActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommRelayActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommRelayActivityType_Names::Extern_Type_Name);
  }
  ActivityBaseType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::CommRelayActivityType::FrequencySet& boundedList = accessor.getFrequencySet();
    for (uci::type::CommRelayActivityType::FrequencySet::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FrequencySetType::serialize(boundedList.at(i), node, CommRelayActivityType_Names::FrequencySet_Name);
    }
  }
  if (accessor.hasActualStartTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStartTime(), node, CommRelayActivityType_Names::ActualStartTime_Name);
  }
  if (accessor.hasActualEndTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualEndTime(), node, CommRelayActivityType_Names::ActualEndTime_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommRelayActivityType& CommRelayActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommRelayActivityType>().release());
}

uci::type::CommRelayActivityType& CommRelayActivityType::create(const uci::type::CommRelayActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommRelayActivityType> newAccessor{boost::make_unique<asb_uci::type::CommRelayActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommRelayActivityType::destroy(uci::type::CommRelayActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::CommRelayActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

