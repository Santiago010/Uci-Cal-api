/** @file SAR_CapabilityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SAR_CapabilityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AtmosphericPropagationLossType.h"
#include "../../../include/asb_uci/type/CapabilityCommandFrequencyType.h"
#include "../../../include/asb_uci/type/ECEF_UnitVectorType.h"
#include "../../../include/asb_uci/type/MultistaticModeType.h"
#include "../../../include/asb_uci/type/PairIdentifierEnum.h"
#include "../../../include/asb_uci/type/ProductOutputCommandImageryType.h"
#include "../../../include/asb_uci/type/RepetitionType.h"
#include "../../../include/asb_uci/type/SAR_CapabilityCommandSubCapabilityType.h"
#include "../../../include/asb_uci/type/SAR_CollectionConstraintsType.h"
#include "../../../include/asb_uci/type/SAR_CollectionOptionsType.h"
#include "../../../include/asb_uci/type/SAR_DesiredWaveformType.h"
#include "../../../include/asb_uci/type/SharedRF_ApertureCapabilityCommandBaseType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AtmosphericPropagationLossType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityCommandFrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_UnitVectorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MultistaticModeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PairIdentifierEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductOutputCommandImageryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RepetitionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SAR_CapabilityCommandSubCapabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SAR_CapabilityCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SAR_CollectionConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SAR_CollectionOptionsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SAR_DesiredWaveformType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SAR_CapabilityCommandType::SAR_CapabilityCommandType()
  : subCapability_Accessor{boost::make_unique<SAR_CapabilityCommandSubCapabilityType>()},
    atmosphericPropagation_Accessor{boost::make_unique<AtmosphericPropagation>(0, 12)},
    productOutput_Accessor{boost::make_unique<ProductOutput>(0, SIZE_MAX)} {
}

SAR_CapabilityCommandType::~SAR_CapabilityCommandType() = default;

void SAR_CapabilityCommandType::copy(const uci::type::SAR_CapabilityCommandType& accessor) {
  copyImpl(accessor, false);
}

void SAR_CapabilityCommandType::copyImpl(const uci::type::SAR_CapabilityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SharedRF_ApertureCapabilityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const SAR_CapabilityCommandType&>(accessor);
    setSubCapability(*(accessorImpl.subCapability_Accessor));
    if (accessorImpl.multistaticMode_Accessor) {
      setMultistaticMode(*(accessorImpl.multistaticMode_Accessor));
    } else {
      multistaticMode_Accessor.reset();
    }
    if (accessorImpl.frequency_Accessor) {
      setFrequency(*(accessorImpl.frequency_Accessor));
    } else {
      frequency_Accessor.reset();
    }
    if (accessorImpl.collectionOptions_Accessor) {
      setCollectionOptions(*(accessorImpl.collectionOptions_Accessor));
    } else {
      collectionOptions_Accessor.reset();
    }
    if (accessorImpl.collectionConstraints_Accessor) {
      setCollectionConstraints(*(accessorImpl.collectionConstraints_Accessor));
    } else {
      collectionConstraints_Accessor.reset();
    }
    if (accessorImpl.planeNormalUnitVector_Accessor) {
      setPlaneNormalUnitVector(*(accessorImpl.planeNormalUnitVector_Accessor));
    } else {
      planeNormalUnitVector_Accessor.reset();
    }
    if (accessorImpl.hasCoefficientOfTroposphericRefraction()) {
      setCoefficientOfTroposphericRefraction(accessorImpl.getCoefficientOfTroposphericRefraction());
    } else {
      clearCoefficientOfTroposphericRefraction();
    }
    setAtmosphericPropagation(*(accessorImpl.atmosphericPropagation_Accessor));
    if (accessorImpl.desiredWaveform_Accessor) {
      setDesiredWaveform(*(accessorImpl.desiredWaveform_Accessor));
    } else {
      desiredWaveform_Accessor.reset();
    }
    if (accessorImpl.pairIdentifier_Accessor) {
      setPairIdentifier(*(accessorImpl.pairIdentifier_Accessor));
    } else {
      pairIdentifier_Accessor.reset();
    }
    if (accessorImpl.repetition_Accessor) {
      setRepetition(*(accessorImpl.repetition_Accessor));
    } else {
      repetition_Accessor.reset();
    }
    setProductOutput(*(accessorImpl.productOutput_Accessor));
  }
}

void SAR_CapabilityCommandType::reset() noexcept {
  SharedRF_ApertureCapabilityCommandBaseType::reset();
  subCapability_Accessor->reset();
  multistaticMode_Accessor.reset();
  frequency_Accessor.reset();
  collectionOptions_Accessor.reset();
  collectionConstraints_Accessor.reset();
  planeNormalUnitVector_Accessor.reset();
  clearCoefficientOfTroposphericRefraction();
  atmosphericPropagation_Accessor->reset();
  desiredWaveform_Accessor.reset();
  pairIdentifier_Accessor.reset();
  repetition_Accessor.reset();
  productOutput_Accessor->reset();
}

const uci::type::SAR_CapabilityCommandSubCapabilityType& SAR_CapabilityCommandType::getSubCapability() const {
  return *subCapability_Accessor;
}

uci::type::SAR_CapabilityCommandSubCapabilityType& SAR_CapabilityCommandType::getSubCapability() {
  return *subCapability_Accessor;
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::setSubCapability(const uci::type::SAR_CapabilityCommandSubCapabilityType& accessor) {
  if (&accessor != subCapability_Accessor.get()) {
    subCapability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MultistaticModeType& SAR_CapabilityCommandType::getMultistaticMode_() const {
  if (multistaticMode_Accessor) {
    return *multistaticMode_Accessor;
  }
  throw uci::base::UCIException("Error in getMultistaticMode(): An attempt was made to get an optional field that was not enabled, call hasMultistaticMode() to determine if it is safe to call getMultistaticMode()");
}

const uci::type::MultistaticModeType& SAR_CapabilityCommandType::getMultistaticMode() const {
  return getMultistaticMode_();
}

uci::type::MultistaticModeType& SAR_CapabilityCommandType::getMultistaticMode() {
  return getMultistaticMode_();
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::setMultistaticMode(const uci::type::MultistaticModeType& accessor) {
  enableMultistaticMode();
  if (&accessor != multistaticMode_Accessor.get()) {
    multistaticMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CapabilityCommandType::hasMultistaticMode() const noexcept {
  return static_cast<bool>(multistaticMode_Accessor);
}

uci::type::MultistaticModeType& SAR_CapabilityCommandType::enableMultistaticMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::multistaticModeType : type};
  if ((!multistaticMode_Accessor) || (multistaticMode_Accessor->getAccessorType() != requestedType)) {
    multistaticMode_Accessor = MultistaticModeType::create(requestedType);
    if (!multistaticMode_Accessor) {
      throw uci::base::UCIException("Error in enableMultistaticMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *multistaticMode_Accessor;
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::clearMultistaticMode() noexcept {
  multistaticMode_Accessor.reset();
  return *this;
}

uci::type::CapabilityCommandFrequencyType& SAR_CapabilityCommandType::getFrequency_() const {
  if (frequency_Accessor) {
    return *frequency_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequency(): An attempt was made to get an optional field that was not enabled, call hasFrequency() to determine if it is safe to call getFrequency()");
}

const uci::type::CapabilityCommandFrequencyType& SAR_CapabilityCommandType::getFrequency() const {
  return getFrequency_();
}

uci::type::CapabilityCommandFrequencyType& SAR_CapabilityCommandType::getFrequency() {
  return getFrequency_();
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::setFrequency(const uci::type::CapabilityCommandFrequencyType& accessor) {
  enableFrequency();
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CapabilityCommandType::hasFrequency() const noexcept {
  return static_cast<bool>(frequency_Accessor);
}

uci::type::CapabilityCommandFrequencyType& SAR_CapabilityCommandType::enableFrequency(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandFrequencyType : type};
  if ((!frequency_Accessor) || (frequency_Accessor->getAccessorType() != requestedType)) {
    frequency_Accessor = CapabilityCommandFrequencyType::create(requestedType);
    if (!frequency_Accessor) {
      throw uci::base::UCIException("Error in enableFrequency(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *frequency_Accessor;
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::clearFrequency() noexcept {
  frequency_Accessor.reset();
  return *this;
}

uci::type::SAR_CollectionOptionsType& SAR_CapabilityCommandType::getCollectionOptions_() const {
  if (collectionOptions_Accessor) {
    return *collectionOptions_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionOptions(): An attempt was made to get an optional field that was not enabled, call hasCollectionOptions() to determine if it is safe to call getCollectionOptions()");
}

const uci::type::SAR_CollectionOptionsType& SAR_CapabilityCommandType::getCollectionOptions() const {
  return getCollectionOptions_();
}

uci::type::SAR_CollectionOptionsType& SAR_CapabilityCommandType::getCollectionOptions() {
  return getCollectionOptions_();
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::setCollectionOptions(const uci::type::SAR_CollectionOptionsType& accessor) {
  enableCollectionOptions();
  if (&accessor != collectionOptions_Accessor.get()) {
    collectionOptions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CapabilityCommandType::hasCollectionOptions() const noexcept {
  return static_cast<bool>(collectionOptions_Accessor);
}

uci::type::SAR_CollectionOptionsType& SAR_CapabilityCommandType::enableCollectionOptions(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_CollectionOptionsType : type};
  if ((!collectionOptions_Accessor) || (collectionOptions_Accessor->getAccessorType() != requestedType)) {
    collectionOptions_Accessor = SAR_CollectionOptionsType::create(requestedType);
    if (!collectionOptions_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionOptions(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionOptions_Accessor;
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::clearCollectionOptions() noexcept {
  collectionOptions_Accessor.reset();
  return *this;
}

uci::type::SAR_CollectionConstraintsType& SAR_CapabilityCommandType::getCollectionConstraints_() const {
  if (collectionConstraints_Accessor) {
    return *collectionConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionConstraints(): An attempt was made to get an optional field that was not enabled, call hasCollectionConstraints() to determine if it is safe to call getCollectionConstraints()");
}

const uci::type::SAR_CollectionConstraintsType& SAR_CapabilityCommandType::getCollectionConstraints() const {
  return getCollectionConstraints_();
}

uci::type::SAR_CollectionConstraintsType& SAR_CapabilityCommandType::getCollectionConstraints() {
  return getCollectionConstraints_();
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::setCollectionConstraints(const uci::type::SAR_CollectionConstraintsType& accessor) {
  enableCollectionConstraints();
  if (&accessor != collectionConstraints_Accessor.get()) {
    collectionConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CapabilityCommandType::hasCollectionConstraints() const noexcept {
  return static_cast<bool>(collectionConstraints_Accessor);
}

uci::type::SAR_CollectionConstraintsType& SAR_CapabilityCommandType::enableCollectionConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_CollectionConstraintsType : type};
  if ((!collectionConstraints_Accessor) || (collectionConstraints_Accessor->getAccessorType() != requestedType)) {
    collectionConstraints_Accessor = SAR_CollectionConstraintsType::create(requestedType);
    if (!collectionConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionConstraints_Accessor;
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::clearCollectionConstraints() noexcept {
  collectionConstraints_Accessor.reset();
  return *this;
}

uci::type::ECEF_UnitVectorType& SAR_CapabilityCommandType::getPlaneNormalUnitVector_() const {
  if (planeNormalUnitVector_Accessor) {
    return *planeNormalUnitVector_Accessor;
  }
  throw uci::base::UCIException("Error in getPlaneNormalUnitVector(): An attempt was made to get an optional field that was not enabled, call hasPlaneNormalUnitVector() to determine if it is safe to call getPlaneNormalUnitVector()");
}

const uci::type::ECEF_UnitVectorType& SAR_CapabilityCommandType::getPlaneNormalUnitVector() const {
  return getPlaneNormalUnitVector_();
}

uci::type::ECEF_UnitVectorType& SAR_CapabilityCommandType::getPlaneNormalUnitVector() {
  return getPlaneNormalUnitVector_();
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::setPlaneNormalUnitVector(const uci::type::ECEF_UnitVectorType& accessor) {
  enablePlaneNormalUnitVector();
  if (&accessor != planeNormalUnitVector_Accessor.get()) {
    planeNormalUnitVector_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CapabilityCommandType::hasPlaneNormalUnitVector() const noexcept {
  return static_cast<bool>(planeNormalUnitVector_Accessor);
}

uci::type::ECEF_UnitVectorType& SAR_CapabilityCommandType::enablePlaneNormalUnitVector(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_UnitVectorType : type};
  if ((!planeNormalUnitVector_Accessor) || (planeNormalUnitVector_Accessor->getAccessorType() != requestedType)) {
    planeNormalUnitVector_Accessor = ECEF_UnitVectorType::create(requestedType);
    if (!planeNormalUnitVector_Accessor) {
      throw uci::base::UCIException("Error in enablePlaneNormalUnitVector(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *planeNormalUnitVector_Accessor;
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::clearPlaneNormalUnitVector() noexcept {
  planeNormalUnitVector_Accessor.reset();
  return *this;
}

xs::Double SAR_CapabilityCommandType::getCoefficientOfTroposphericRefraction() const {
  if (coefficientOfTroposphericRefraction_Accessor) {
    return *coefficientOfTroposphericRefraction_Accessor;
  }
  throw uci::base::UCIException("Error in getCoefficientOfTroposphericRefraction(): An attempt was made to get an optional field that was not enabled, call hasCoefficientOfTroposphericRefraction() to determine if it is safe to call getCoefficientOfTroposphericRefraction()");
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::setCoefficientOfTroposphericRefraction(xs::Double value) {
  coefficientOfTroposphericRefraction_Accessor = value;
  return *this;
}

bool SAR_CapabilityCommandType::hasCoefficientOfTroposphericRefraction() const noexcept {
  return coefficientOfTroposphericRefraction_Accessor.has_value();
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::clearCoefficientOfTroposphericRefraction() noexcept {
  coefficientOfTroposphericRefraction_Accessor.reset();
  return *this;
}

const uci::type::SAR_CapabilityCommandType::AtmosphericPropagation& SAR_CapabilityCommandType::getAtmosphericPropagation() const {
  return *atmosphericPropagation_Accessor;
}

uci::type::SAR_CapabilityCommandType::AtmosphericPropagation& SAR_CapabilityCommandType::getAtmosphericPropagation() {
  return *atmosphericPropagation_Accessor;
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::setAtmosphericPropagation(const uci::type::SAR_CapabilityCommandType::AtmosphericPropagation& accessor) {
  if (&accessor != atmosphericPropagation_Accessor.get()) {
    atmosphericPropagation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SAR_DesiredWaveformType& SAR_CapabilityCommandType::getDesiredWaveform_() const {
  if (desiredWaveform_Accessor) {
    return *desiredWaveform_Accessor;
  }
  throw uci::base::UCIException("Error in getDesiredWaveform(): An attempt was made to get an optional field that was not enabled, call hasDesiredWaveform() to determine if it is safe to call getDesiredWaveform()");
}

const uci::type::SAR_DesiredWaveformType& SAR_CapabilityCommandType::getDesiredWaveform() const {
  return getDesiredWaveform_();
}

uci::type::SAR_DesiredWaveformType& SAR_CapabilityCommandType::getDesiredWaveform() {
  return getDesiredWaveform_();
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::setDesiredWaveform(const uci::type::SAR_DesiredWaveformType& accessor) {
  enableDesiredWaveform();
  if (&accessor != desiredWaveform_Accessor.get()) {
    desiredWaveform_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CapabilityCommandType::hasDesiredWaveform() const noexcept {
  return static_cast<bool>(desiredWaveform_Accessor);
}

uci::type::SAR_DesiredWaveformType& SAR_CapabilityCommandType::enableDesiredWaveform(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_DesiredWaveformType : type};
  if ((!desiredWaveform_Accessor) || (desiredWaveform_Accessor->getAccessorType() != requestedType)) {
    desiredWaveform_Accessor = SAR_DesiredWaveformType::create(requestedType);
    if (!desiredWaveform_Accessor) {
      throw uci::base::UCIException("Error in enableDesiredWaveform(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *desiredWaveform_Accessor;
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::clearDesiredWaveform() noexcept {
  desiredWaveform_Accessor.reset();
  return *this;
}

uci::type::PairIdentifierEnum& SAR_CapabilityCommandType::getPairIdentifier_() const {
  if (pairIdentifier_Accessor) {
    return *pairIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getPairIdentifier(): An attempt was made to get an optional field that was not enabled, call hasPairIdentifier() to determine if it is safe to call getPairIdentifier()");
}

const uci::type::PairIdentifierEnum& SAR_CapabilityCommandType::getPairIdentifier() const {
  return getPairIdentifier_();
}

uci::type::PairIdentifierEnum& SAR_CapabilityCommandType::getPairIdentifier() {
  return getPairIdentifier_();
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::setPairIdentifier(const uci::type::PairIdentifierEnum& accessor) {
  enablePairIdentifier();
  if (&accessor != pairIdentifier_Accessor.get()) {
    pairIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::setPairIdentifier(const uci::type::PairIdentifierEnum::EnumerationItem value) {
  enablePairIdentifier().setValue(value);
  return *this;
}

bool SAR_CapabilityCommandType::hasPairIdentifier() const noexcept {
  return static_cast<bool>(pairIdentifier_Accessor);
}

uci::type::PairIdentifierEnum& SAR_CapabilityCommandType::enablePairIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pairIdentifierEnum : type};
  if ((!pairIdentifier_Accessor) || (pairIdentifier_Accessor->getAccessorType() != requestedType)) {
    pairIdentifier_Accessor = PairIdentifierEnum::create(requestedType);
    if (!pairIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enablePairIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pairIdentifier_Accessor;
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::clearPairIdentifier() noexcept {
  pairIdentifier_Accessor.reset();
  return *this;
}

uci::type::RepetitionType& SAR_CapabilityCommandType::getRepetition_() const {
  if (repetition_Accessor) {
    return *repetition_Accessor;
  }
  throw uci::base::UCIException("Error in getRepetition(): An attempt was made to get an optional field that was not enabled, call hasRepetition() to determine if it is safe to call getRepetition()");
}

const uci::type::RepetitionType& SAR_CapabilityCommandType::getRepetition() const {
  return getRepetition_();
}

uci::type::RepetitionType& SAR_CapabilityCommandType::getRepetition() {
  return getRepetition_();
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::setRepetition(const uci::type::RepetitionType& accessor) {
  enableRepetition();
  if (&accessor != repetition_Accessor.get()) {
    repetition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CapabilityCommandType::hasRepetition() const noexcept {
  return static_cast<bool>(repetition_Accessor);
}

uci::type::RepetitionType& SAR_CapabilityCommandType::enableRepetition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionType : type};
  if ((!repetition_Accessor) || (repetition_Accessor->getAccessorType() != requestedType)) {
    repetition_Accessor = RepetitionType::create(requestedType);
    if (!repetition_Accessor) {
      throw uci::base::UCIException("Error in enableRepetition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *repetition_Accessor;
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::clearRepetition() noexcept {
  repetition_Accessor.reset();
  return *this;
}

const uci::type::SAR_CapabilityCommandType::ProductOutput& SAR_CapabilityCommandType::getProductOutput() const {
  return *productOutput_Accessor;
}

uci::type::SAR_CapabilityCommandType::ProductOutput& SAR_CapabilityCommandType::getProductOutput() {
  return *productOutput_Accessor;
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::setProductOutput(const uci::type::SAR_CapabilityCommandType::ProductOutput& accessor) {
  if (&accessor != productOutput_Accessor.get()) {
    productOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<SAR_CapabilityCommandType> SAR_CapabilityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_CapabilityCommandType : type};
  return (requestedType == uci::type::accessorType::sAR_CapabilityCommandType) ? boost::make_unique<SAR_CapabilityCommandType>() : nullptr;
}

/**  */
namespace SAR_CapabilityCommandType_Names {

constexpr const char* Extern_Type_Name{"SAR_CapabilityCommandType"};
constexpr const char* SubCapability_Name{"SubCapability"};
constexpr const char* MultistaticMode_Name{"MultistaticMode"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* CollectionOptions_Name{"CollectionOptions"};
constexpr const char* CollectionConstraints_Name{"CollectionConstraints"};
constexpr const char* PlaneNormalUnitVector_Name{"PlaneNormalUnitVector"};
constexpr const char* CoefficientOfTroposphericRefraction_Name{"CoefficientOfTroposphericRefraction"};
constexpr const char* AtmosphericPropagation_Name{"AtmosphericPropagation"};
constexpr const char* DesiredWaveform_Name{"DesiredWaveform"};
constexpr const char* PairIdentifier_Name{"PairIdentifier"};
constexpr const char* Repetition_Name{"Repetition"};
constexpr const char* ProductOutput_Name{"ProductOutput"};

} // namespace SAR_CapabilityCommandType_Names

void SAR_CapabilityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_CapabilityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SAR_CapabilityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::SubCapability_Name) {
      SAR_CapabilityCommandSubCapabilityType::deserialize(valueType.second, accessor.getSubCapability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::MultistaticMode_Name) {
      MultistaticModeType::deserialize(valueType.second, accessor.enableMultistaticMode(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::Frequency_Name) {
      CapabilityCommandFrequencyType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::CollectionOptions_Name) {
      SAR_CollectionOptionsType::deserialize(valueType.second, accessor.enableCollectionOptions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::CollectionConstraints_Name) {
      SAR_CollectionConstraintsType::deserialize(valueType.second, accessor.enableCollectionConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::PlaneNormalUnitVector_Name) {
      ECEF_UnitVectorType::deserialize(valueType.second, accessor.enablePlaneNormalUnitVector(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::CoefficientOfTroposphericRefraction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCoefficientOfTroposphericRefraction(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::AtmosphericPropagation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SAR_CapabilityCommandType::AtmosphericPropagation& boundedList = accessor.getAtmosphericPropagation();
        const uci::type::SAR_CapabilityCommandType::AtmosphericPropagation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AtmosphericPropagationLossType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::DesiredWaveform_Name) {
      SAR_DesiredWaveformType::deserialize(valueType.second, accessor.enableDesiredWaveform(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::PairIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePairIdentifier().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::Repetition_Name) {
      RepetitionType::deserialize(valueType.second, accessor.enableRepetition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::ProductOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SAR_CapabilityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
        const uci::type::SAR_CapabilityCommandType::ProductOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProductOutputCommandImageryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  SharedRF_ApertureCapabilityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SAR_CapabilityCommandType::serialize(const uci::type::SAR_CapabilityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SAR_CapabilityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SAR_CapabilityCommandType_Names::Extern_Type_Name);
  }
  SharedRF_ApertureCapabilityCommandBaseType::serialize(accessor, node, "", false, false, false);
  SAR_CapabilityCommandSubCapabilityType::serialize(accessor.getSubCapability(), node, SAR_CapabilityCommandType_Names::SubCapability_Name);
  if (accessor.hasMultistaticMode()) {
    MultistaticModeType::serialize(accessor.getMultistaticMode(), node, SAR_CapabilityCommandType_Names::MultistaticMode_Name);
  }
  if (accessor.hasFrequency()) {
    CapabilityCommandFrequencyType::serialize(accessor.getFrequency(), node, SAR_CapabilityCommandType_Names::Frequency_Name);
  }
  if (accessor.hasCollectionOptions()) {
    SAR_CollectionOptionsType::serialize(accessor.getCollectionOptions(), node, SAR_CapabilityCommandType_Names::CollectionOptions_Name);
  }
  if (accessor.hasCollectionConstraints()) {
    SAR_CollectionConstraintsType::serialize(accessor.getCollectionConstraints(), node, SAR_CapabilityCommandType_Names::CollectionConstraints_Name);
  }
  if (accessor.hasPlaneNormalUnitVector()) {
    ECEF_UnitVectorType::serialize(accessor.getPlaneNormalUnitVector(), node, SAR_CapabilityCommandType_Names::PlaneNormalUnitVector_Name);
  }
  if (accessor.hasCoefficientOfTroposphericRefraction()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCoefficientOfTroposphericRefraction(), node, SAR_CapabilityCommandType_Names::CoefficientOfTroposphericRefraction_Name);
  }
  {
    const uci::type::SAR_CapabilityCommandType::AtmosphericPropagation& boundedList = accessor.getAtmosphericPropagation();
    for (uci::type::SAR_CapabilityCommandType::AtmosphericPropagation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AtmosphericPropagationLossType::serialize(boundedList.at(i), node, SAR_CapabilityCommandType_Names::AtmosphericPropagation_Name);
    }
  }
  if (accessor.hasDesiredWaveform()) {
    SAR_DesiredWaveformType::serialize(accessor.getDesiredWaveform(), node, SAR_CapabilityCommandType_Names::DesiredWaveform_Name);
  }
  if (accessor.hasPairIdentifier()) {
    PairIdentifierEnum::serialize(accessor.getPairIdentifier(), node, SAR_CapabilityCommandType_Names::PairIdentifier_Name, false);
  }
  if (accessor.hasRepetition()) {
    RepetitionType::serialize(accessor.getRepetition(), node, SAR_CapabilityCommandType_Names::Repetition_Name);
  }
  {
    const uci::type::SAR_CapabilityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
    for (uci::type::SAR_CapabilityCommandType::ProductOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductOutputCommandImageryType::serialize(boundedList.at(i), node, SAR_CapabilityCommandType_Names::ProductOutput_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SAR_CapabilityCommandType>().release());
}

uci::type::SAR_CapabilityCommandType& SAR_CapabilityCommandType::create(const uci::type::SAR_CapabilityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SAR_CapabilityCommandType> newAccessor{boost::make_unique<asb_uci::type::SAR_CapabilityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SAR_CapabilityCommandType::destroy(uci::type::SAR_CapabilityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::SAR_CapabilityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

