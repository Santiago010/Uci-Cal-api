/** @file LogMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/LogMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/ComponentID_Type.h"
#include "asb_uci/type/LogSeverityEnum.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_uci/type/VisibleString256Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/LogMDT.h"
#include "uci/type/LogSeverityEnum.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/VisibleString1024Type.h"
#include "uci/type/VisibleString256Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LogMDT::LogMDT()
  : componentID_Accessor{boost::make_unique<ComponentID>(0, SIZE_MAX)},
    capabilityID_Accessor{boost::make_unique<CapabilityID>(0, SIZE_MAX)},
    severity_Accessor{boost::make_unique<LogSeverityEnum>()},
    label_Accessor{boost::make_unique<VisibleString256Type>()},
    details_Accessor{boost::make_unique<VisibleString1024Type>()} {
}

LogMDT::~LogMDT() = default;

void LogMDT::copy(const uci::type::LogMDT& accessor) {
  copyImpl(accessor, false);
}

void LogMDT::copyImpl(const uci::type::LogMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LogMDT&>(accessor);
    setTimestamp(accessorImpl.timestamp_Accessor);
    if (accessorImpl.hasServiceUpTime()) {
      setServiceUpTime(accessorImpl.getServiceUpTime());
    } else {
      clearServiceUpTime();
    }
    if (accessorImpl.serviceID_Accessor) {
      setServiceID(*(accessorImpl.serviceID_Accessor));
    } else {
      serviceID_Accessor.reset();
    }
    if (accessorImpl.subsystemID_Accessor) {
      setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    } else {
      subsystemID_Accessor.reset();
    }
    setComponentID(*(accessorImpl.componentID_Accessor));
    setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    setSeverity(*(accessorImpl.severity_Accessor));
    setLabel(*(accessorImpl.label_Accessor));
    setDetails(*(accessorImpl.details_Accessor));
    data_Accessor = (accessorImpl.data_Accessor ? boost::make_unique<asb_xs::HexBinary>(*(accessorImpl.data_Accessor)) : nullptr);
  }
}

void LogMDT::reset() noexcept {
  timestamp_Accessor = 0;
  clearServiceUpTime();
  serviceID_Accessor.reset();
  subsystemID_Accessor.reset();
  componentID_Accessor->reset();
  capabilityID_Accessor->reset();
  severity_Accessor->reset();
  label_Accessor->reset();
  details_Accessor->reset();
  data_Accessor.reset();
}

uci::type::DateTimeTypeValue LogMDT::getTimestamp() const {
  return timestamp_Accessor;
}

uci::type::LogMDT& LogMDT::setTimestamp(uci::type::DateTimeTypeValue value) {
  timestamp_Accessor = value;
  return *this;
}


xs::Duration LogMDT::getServiceUpTime() const {
  if (serviceUpTime_Accessor) {
    return *serviceUpTime_Accessor;
  }
  throw uci::base::UCIException("Error in getServiceUpTime(): An attempt was made to get an optional field that was not enabled, call hasServiceUpTime() to determine if it is safe to call getServiceUpTime()");
}

uci::type::LogMDT& LogMDT::setServiceUpTime(xs::Duration value) {
  serviceUpTime_Accessor = value;
  return *this;
}

bool LogMDT::hasServiceUpTime() const noexcept {
  return serviceUpTime_Accessor.has_value();
}

uci::type::LogMDT& LogMDT::clearServiceUpTime() noexcept {
  serviceUpTime_Accessor.reset();
  return *this;
}

uci::type::ServiceID_Type& LogMDT::getServiceID_() const {
  if (serviceID_Accessor) {
    return *serviceID_Accessor;
  }
  throw uci::base::UCIException("Error in getServiceID(): An attempt was made to get an optional field that was not enabled, call hasServiceID() to determine if it is safe to call getServiceID()");
}

const uci::type::ServiceID_Type& LogMDT::getServiceID() const {
  return getServiceID_();
}

uci::type::ServiceID_Type& LogMDT::getServiceID() {
  return getServiceID_();
}

uci::type::LogMDT& LogMDT::setServiceID(const uci::type::ServiceID_Type& accessor) {
  enableServiceID();
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LogMDT::hasServiceID() const noexcept {
  return static_cast<bool>(serviceID_Accessor);
}

uci::type::ServiceID_Type& LogMDT::enableServiceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceID_Type : type};
  if ((!serviceID_Accessor) || (serviceID_Accessor->getAccessorType() != requestedType)) {
    serviceID_Accessor = ServiceID_Type::create(requestedType);
    if (!serviceID_Accessor) {
      throw uci::base::UCIException("Error in enableServiceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *serviceID_Accessor;
}

uci::type::LogMDT& LogMDT::clearServiceID() noexcept {
  serviceID_Accessor.reset();
  return *this;
}

uci::type::SubsystemID_Type& LogMDT::getSubsystemID_() const {
  if (subsystemID_Accessor) {
    return *subsystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSubsystemID(): An attempt was made to get an optional field that was not enabled, call hasSubsystemID() to determine if it is safe to call getSubsystemID()");
}

const uci::type::SubsystemID_Type& LogMDT::getSubsystemID() const {
  return getSubsystemID_();
}

uci::type::SubsystemID_Type& LogMDT::getSubsystemID() {
  return getSubsystemID_();
}

uci::type::LogMDT& LogMDT::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  enableSubsystemID();
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LogMDT::hasSubsystemID() const noexcept {
  return static_cast<bool>(subsystemID_Accessor);
}

uci::type::SubsystemID_Type& LogMDT::enableSubsystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemID_Type : type};
  if ((!subsystemID_Accessor) || (subsystemID_Accessor->getAccessorType() != requestedType)) {
    subsystemID_Accessor = SubsystemID_Type::create(requestedType);
    if (!subsystemID_Accessor) {
      throw uci::base::UCIException("Error in enableSubsystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subsystemID_Accessor;
}

uci::type::LogMDT& LogMDT::clearSubsystemID() noexcept {
  subsystemID_Accessor.reset();
  return *this;
}

const uci::type::LogMDT::ComponentID& LogMDT::getComponentID() const {
  return *componentID_Accessor;
}

uci::type::LogMDT::ComponentID& LogMDT::getComponentID() {
  return *componentID_Accessor;
}

uci::type::LogMDT& LogMDT::setComponentID(const uci::type::LogMDT::ComponentID& accessor) {
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::LogMDT::CapabilityID& LogMDT::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::LogMDT::CapabilityID& LogMDT::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::LogMDT& LogMDT::setCapabilityID(const uci::type::LogMDT::CapabilityID& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::LogSeverityEnum& LogMDT::getSeverity() const {
  return *severity_Accessor;
}

uci::type::LogSeverityEnum& LogMDT::getSeverity() {
  return *severity_Accessor;
}

uci::type::LogMDT& LogMDT::setSeverity(const uci::type::LogSeverityEnum& accessor) {
  if (&accessor != severity_Accessor.get()) {
    severity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::LogMDT& LogMDT::setSeverity(uci::type::LogSeverityEnum::EnumerationItem value) {
  severity_Accessor->setValue(value);
  return *this;
}


const uci::type::VisibleString256Type& LogMDT::getLabel() const noexcept {
  return *label_Accessor;
}

uci::type::VisibleString256Type& LogMDT::getLabel() noexcept {
  return *label_Accessor;
}

uci::type::LogMDT& LogMDT::setLabel(const uci::type::VisibleString256Type& value) {
  return setLabel(value.c_str());
}

uci::type::LogMDT& LogMDT::setLabel(const std::string& value) {
  return setLabel(value.c_str());
}

uci::type::LogMDT& LogMDT::setLabel(const char* value) {
  label_Accessor->setStringValue(value);
  return *this;
}

const uci::type::VisibleString1024Type& LogMDT::getDetails() const noexcept {
  return *details_Accessor;
}

uci::type::VisibleString1024Type& LogMDT::getDetails() noexcept {
  return *details_Accessor;
}

uci::type::LogMDT& LogMDT::setDetails(const uci::type::VisibleString1024Type& value) {
  return setDetails(value.c_str());
}

uci::type::LogMDT& LogMDT::setDetails(const std::string& value) {
  return setDetails(value.c_str());
}

uci::type::LogMDT& LogMDT::setDetails(const char* value) {
  details_Accessor->setStringValue(value);
  return *this;
}

xs::HexBinary& LogMDT::getData_() const {
  if (data_Accessor) {
    return *data_Accessor;
  }
  throw uci::base::UCIException("Error in getData(): An attempt was made to get an optional field that was not enabled, call hasData() to determine if it is safe to call getData()");
}

const xs::HexBinary& LogMDT::getData() const {
  return getData_();
}

xs::HexBinary& LogMDT::getData() {
  return getData_();
}

uci::type::LogMDT& LogMDT::setData(const xs::HexBinary& value) {
  data_Accessor = boost::make_unique<asb_xs::HexBinary>(dynamic_cast<const asb_xs::HexBinary&>(value));
  return *this;
}

bool LogMDT::hasData() const noexcept {
  return static_cast<bool>(data_Accessor);
}

xs::HexBinary& LogMDT::enableData() {
  if (!data_Accessor) {
    data_Accessor = boost::make_unique<asb_xs::HexBinary>();
  }
  return *data_Accessor;
}

uci::type::LogMDT& LogMDT::clearData() noexcept {
  data_Accessor.reset();
  return *this;
}

std::unique_ptr<LogMDT> LogMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::logMDT : type};
  return (requestedType == uci::type::accessorType::logMDT) ? boost::make_unique<LogMDT>() : nullptr;
}

/**  */
namespace LogMDT_Names {

constexpr const char* Extern_Type_Name{"LogMDT"};
constexpr const char* Timestamp_Name{"Timestamp"};
constexpr const char* ServiceUpTime_Name{"ServiceUpTime"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* Severity_Name{"Severity"};
constexpr const char* Label_Name{"Label"};
constexpr const char* Details_Name{"Details"};
constexpr const char* Data_Name{"Data"};

} // namespace LogMDT_Names

void LogMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::LogMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LogMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LogMDT_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + LogMDT_Names::ServiceUpTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setServiceUpTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + LogMDT_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.enableServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LogMDT_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.enableSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LogMDT_Names::ComponentID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::LogMDT::ComponentID& boundedList = accessor.getComponentID();
        const uci::type::LogMDT::ComponentID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ComponentID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + LogMDT_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::LogMDT::CapabilityID& boundedList = accessor.getCapabilityID();
        const uci::type::LogMDT::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + LogMDT_Names::Severity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSeverity().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + LogMDT_Names::Label_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLabel(*value);
      }
    } else if (valueType.first == nsPrefix + LogMDT_Names::Details_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDetails(*value);
      }
    } else if (valueType.first == nsPrefix + LogMDT_Names::Data_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        asb_uci::util::SerializationHelpers::deserializeHexBinary(*value, accessor.enableData());
      }
    }
  }
}

std::string LogMDT::serialize(const uci::type::LogMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LogMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LogMDT_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, LogMDT_Names::Timestamp_Name);
  if (accessor.hasServiceUpTime()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getServiceUpTime(), node, LogMDT_Names::ServiceUpTime_Name);
  }
  if (accessor.hasServiceID()) {
    ServiceID_Type::serialize(accessor.getServiceID(), node, LogMDT_Names::ServiceID_Name);
  }
  if (accessor.hasSubsystemID()) {
    SubsystemID_Type::serialize(accessor.getSubsystemID(), node, LogMDT_Names::SubsystemID_Name);
  }
  {
    const uci::type::LogMDT::ComponentID& boundedList = accessor.getComponentID();
    for (uci::type::LogMDT::ComponentID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ComponentID_Type::serialize(boundedList.at(i), node, LogMDT_Names::ComponentID_Name);
    }
  }
  {
    const uci::type::LogMDT::CapabilityID& boundedList = accessor.getCapabilityID();
    for (uci::type::LogMDT::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityID_Type::serialize(boundedList.at(i), node, LogMDT_Names::CapabilityID_Name);
    }
  }
  LogSeverityEnum::serialize(accessor.getSeverity(), node, LogMDT_Names::Severity_Name, false);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getLabel(), node, LogMDT_Names::Label_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getDetails(), node, LogMDT_Names::Details_Name);
  if (accessor.hasData()) {
    asb_uci::util::SerializationHelpers::serializeHexBinary(accessor.getData(), node, LogMDT_Names::Data_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LogMDT& LogMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LogMDT>().release());
}

uci::type::LogMDT& LogMDT::create(const uci::type::LogMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LogMDT> newAccessor{boost::make_unique<asb_uci::type::LogMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LogMDT::destroy(uci::type::LogMDT& accessor) {
  delete dynamic_cast<asb_uci::type::LogMDT*>(&accessor);
}

} // namespace type

} // namespace uci

