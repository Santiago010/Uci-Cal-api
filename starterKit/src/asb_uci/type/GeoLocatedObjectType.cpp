/** @file GeoLocatedObjectType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/GeoLocatedObjectType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DMPI_ID_Type.h"
#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/OpLineID_Type.h"
#include "asb_uci/type/OpPointID_Type.h"
#include "asb_uci/type/OpVolumeID_Type.h"
#include "asb_uci/type/OpZoneID_Type.h"
#include "asb_uci/type/SignalReportID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DMPI_ID_Type.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/GeoLocatedObjectType.h"
#include "uci/type/OpLineID_Type.h"
#include "uci/type/OpPointID_Type.h"
#include "uci/type/OpVolumeID_Type.h"
#include "uci/type/OpZoneID_Type.h"
#include "uci/type/SignalReportID_Type.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

GeoLocatedObjectType::GeoLocatedObjectType() = default;

GeoLocatedObjectType::~GeoLocatedObjectType() = default;

void GeoLocatedObjectType::copy(const uci::type::GeoLocatedObjectType& accessor) {
  copyImpl(accessor, false);
}

void GeoLocatedObjectType::copyImpl(const uci::type::GeoLocatedObjectType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const GeoLocatedObjectType&>(accessor);
    if (accessorImpl.entityID_Accessor) {
      setEntityID(*(accessorImpl.entityID_Accessor));
    } else {
      entityID_Accessor.reset();
    }
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
    if (accessorImpl.opPointID_Accessor) {
      setOpPointID(*(accessorImpl.opPointID_Accessor));
    } else {
      opPointID_Accessor.reset();
    }
    if (accessorImpl.opLineID_Accessor) {
      setOpLineID(*(accessorImpl.opLineID_Accessor));
    } else {
      opLineID_Accessor.reset();
    }
    if (accessorImpl.opZoneID_Accessor) {
      setOpZoneID(*(accessorImpl.opZoneID_Accessor));
    } else {
      opZoneID_Accessor.reset();
    }
    if (accessorImpl.opVolumeID_Accessor) {
      setOpVolumeID(*(accessorImpl.opVolumeID_Accessor));
    } else {
      opVolumeID_Accessor.reset();
    }
    if (accessorImpl.dMPI_ID_Accessor) {
      setDMPI_ID(*(accessorImpl.dMPI_ID_Accessor));
    } else {
      dMPI_ID_Accessor.reset();
    }
    if (accessorImpl.signalReportID_Accessor) {
      setSignalReportID(*(accessorImpl.signalReportID_Accessor));
    } else {
      signalReportID_Accessor.reset();
    }
  }
}

void GeoLocatedObjectType::reset() noexcept {
  entityID_Accessor.reset();
  systemID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  dMPI_ID_Accessor.reset();
  signalReportID_Accessor.reset();
}

uci::type::GeoLocatedObjectType::GeoLocatedObjectTypeChoice GeoLocatedObjectType::getGeoLocatedObjectTypeChoiceOrdinal() const noexcept {
  if (entityID_Accessor) {
    return GEOLOCATEDOBJECTTYPE_CHOICE_ENTITYID;
  }
  if (systemID_Accessor) {
    return GEOLOCATEDOBJECTTYPE_CHOICE_SYSTEMID;
  }
  if (opPointID_Accessor) {
    return GEOLOCATEDOBJECTTYPE_CHOICE_OPPOINTID;
  }
  if (opLineID_Accessor) {
    return GEOLOCATEDOBJECTTYPE_CHOICE_OPLINEID;
  }
  if (opZoneID_Accessor) {
    return GEOLOCATEDOBJECTTYPE_CHOICE_OPZONEID;
  }
  if (opVolumeID_Accessor) {
    return GEOLOCATEDOBJECTTYPE_CHOICE_OPVOLUMEID;
  }
  if (dMPI_ID_Accessor) {
    return GEOLOCATEDOBJECTTYPE_CHOICE_DMPI_ID;
  }
  if (signalReportID_Accessor) {
    return GEOLOCATEDOBJECTTYPE_CHOICE_SIGNALREPORTID;
  }
  return GEOLOCATEDOBJECTTYPE_CHOICE_NONE;
}

uci::type::GeoLocatedObjectType& GeoLocatedObjectType::setGeoLocatedObjectTypeChoiceOrdinal(uci::type::GeoLocatedObjectType::GeoLocatedObjectTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case GEOLOCATEDOBJECTTYPE_CHOICE_ENTITYID:
      chooseEntityID("setGeoLocatedObjectTypeChoiceOrdinal", type);
      break;
    case GEOLOCATEDOBJECTTYPE_CHOICE_SYSTEMID:
      chooseSystemID("setGeoLocatedObjectTypeChoiceOrdinal", type);
      break;
    case GEOLOCATEDOBJECTTYPE_CHOICE_OPPOINTID:
      chooseOpPointID("setGeoLocatedObjectTypeChoiceOrdinal", type);
      break;
    case GEOLOCATEDOBJECTTYPE_CHOICE_OPLINEID:
      chooseOpLineID("setGeoLocatedObjectTypeChoiceOrdinal", type);
      break;
    case GEOLOCATEDOBJECTTYPE_CHOICE_OPZONEID:
      chooseOpZoneID("setGeoLocatedObjectTypeChoiceOrdinal", type);
      break;
    case GEOLOCATEDOBJECTTYPE_CHOICE_OPVOLUMEID:
      chooseOpVolumeID("setGeoLocatedObjectTypeChoiceOrdinal", type);
      break;
    case GEOLOCATEDOBJECTTYPE_CHOICE_DMPI_ID:
      chooseDMPI_ID("setGeoLocatedObjectTypeChoiceOrdinal", type);
      break;
    case GEOLOCATEDOBJECTTYPE_CHOICE_SIGNALREPORTID:
      chooseSignalReportID("setGeoLocatedObjectTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setGeoLocatedObjectTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EntityID_Type& GeoLocatedObjectType::getEntityID_() const {
  if (entityID_Accessor) {
    return *entityID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityID(): Unable to get EntityID, field not selected");
}

const uci::type::EntityID_Type& GeoLocatedObjectType::getEntityID() const {
  return getEntityID_();
}

uci::type::EntityID_Type& GeoLocatedObjectType::getEntityID() {
  return getEntityID_();
}

uci::type::GeoLocatedObjectType& GeoLocatedObjectType::setEntityID(const uci::type::EntityID_Type& accessor) {
  chooseEntityID("setEntityID", accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool GeoLocatedObjectType::isEntityID() const noexcept {
  return static_cast<bool>(entityID_Accessor);
}

uci::type::EntityID_Type& GeoLocatedObjectType::chooseEntityID(const std::string& method, uci::base::accessorType::AccessorType type) {
  systemID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  dMPI_ID_Accessor.reset();
  signalReportID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(type);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::EntityID_Type& GeoLocatedObjectType::chooseEntityID(uci::base::accessorType::AccessorType type) {
  return chooseEntityID("chooseEntityID", type);
}

uci::type::SystemID_Type& GeoLocatedObjectType::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): Unable to get SystemID, field not selected");
}

const uci::type::SystemID_Type& GeoLocatedObjectType::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& GeoLocatedObjectType::getSystemID() {
  return getSystemID_();
}

uci::type::GeoLocatedObjectType& GeoLocatedObjectType::setSystemID(const uci::type::SystemID_Type& accessor) {
  chooseSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GeoLocatedObjectType::isSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& GeoLocatedObjectType::chooseSystemID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  dMPI_ID_Accessor.reset();
  signalReportID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(type);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::SystemID_Type& GeoLocatedObjectType::chooseSystemID(uci::base::accessorType::AccessorType type) {
  return chooseSystemID("chooseSystemID", type);
}

uci::type::OpPointID_Type& GeoLocatedObjectType::getOpPointID_() const {
  if (opPointID_Accessor) {
    return *opPointID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpPointID(): Unable to get OpPointID, field not selected");
}

const uci::type::OpPointID_Type& GeoLocatedObjectType::getOpPointID() const {
  return getOpPointID_();
}

uci::type::OpPointID_Type& GeoLocatedObjectType::getOpPointID() {
  return getOpPointID_();
}

uci::type::GeoLocatedObjectType& GeoLocatedObjectType::setOpPointID(const uci::type::OpPointID_Type& accessor) {
  chooseOpPointID();
  if (&accessor != opPointID_Accessor.get()) {
    opPointID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GeoLocatedObjectType::isOpPointID() const noexcept {
  return static_cast<bool>(opPointID_Accessor);
}

uci::type::OpPointID_Type& GeoLocatedObjectType::chooseOpPointID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  systemID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  dMPI_ID_Accessor.reset();
  signalReportID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointID_Type : type};
  if ((!opPointID_Accessor) || (opPointID_Accessor->getAccessorType() != requestedType)) {
    opPointID_Accessor = OpPointID_Type::create(type);
    if (!opPointID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opPointID_Accessor;
}

uci::type::OpPointID_Type& GeoLocatedObjectType::chooseOpPointID(uci::base::accessorType::AccessorType type) {
  return chooseOpPointID("chooseOpPointID", type);
}

uci::type::OpLineID_Type& GeoLocatedObjectType::getOpLineID_() const {
  if (opLineID_Accessor) {
    return *opLineID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpLineID(): Unable to get OpLineID, field not selected");
}

const uci::type::OpLineID_Type& GeoLocatedObjectType::getOpLineID() const {
  return getOpLineID_();
}

uci::type::OpLineID_Type& GeoLocatedObjectType::getOpLineID() {
  return getOpLineID_();
}

uci::type::GeoLocatedObjectType& GeoLocatedObjectType::setOpLineID(const uci::type::OpLineID_Type& accessor) {
  chooseOpLineID();
  if (&accessor != opLineID_Accessor.get()) {
    opLineID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GeoLocatedObjectType::isOpLineID() const noexcept {
  return static_cast<bool>(opLineID_Accessor);
}

uci::type::OpLineID_Type& GeoLocatedObjectType::chooseOpLineID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  systemID_Accessor.reset();
  opPointID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  dMPI_ID_Accessor.reset();
  signalReportID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opLineID_Type : type};
  if ((!opLineID_Accessor) || (opLineID_Accessor->getAccessorType() != requestedType)) {
    opLineID_Accessor = OpLineID_Type::create(type);
    if (!opLineID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opLineID_Accessor;
}

uci::type::OpLineID_Type& GeoLocatedObjectType::chooseOpLineID(uci::base::accessorType::AccessorType type) {
  return chooseOpLineID("chooseOpLineID", type);
}

uci::type::OpZoneID_Type& GeoLocatedObjectType::getOpZoneID_() const {
  if (opZoneID_Accessor) {
    return *opZoneID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpZoneID(): Unable to get OpZoneID, field not selected");
}

const uci::type::OpZoneID_Type& GeoLocatedObjectType::getOpZoneID() const {
  return getOpZoneID_();
}

uci::type::OpZoneID_Type& GeoLocatedObjectType::getOpZoneID() {
  return getOpZoneID_();
}

uci::type::GeoLocatedObjectType& GeoLocatedObjectType::setOpZoneID(const uci::type::OpZoneID_Type& accessor) {
  chooseOpZoneID();
  if (&accessor != opZoneID_Accessor.get()) {
    opZoneID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GeoLocatedObjectType::isOpZoneID() const noexcept {
  return static_cast<bool>(opZoneID_Accessor);
}

uci::type::OpZoneID_Type& GeoLocatedObjectType::chooseOpZoneID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  systemID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opVolumeID_Accessor.reset();
  dMPI_ID_Accessor.reset();
  signalReportID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneID_Type : type};
  if ((!opZoneID_Accessor) || (opZoneID_Accessor->getAccessorType() != requestedType)) {
    opZoneID_Accessor = OpZoneID_Type::create(type);
    if (!opZoneID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opZoneID_Accessor;
}

uci::type::OpZoneID_Type& GeoLocatedObjectType::chooseOpZoneID(uci::base::accessorType::AccessorType type) {
  return chooseOpZoneID("chooseOpZoneID", type);
}

uci::type::OpVolumeID_Type& GeoLocatedObjectType::getOpVolumeID_() const {
  if (opVolumeID_Accessor) {
    return *opVolumeID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpVolumeID(): Unable to get OpVolumeID, field not selected");
}

const uci::type::OpVolumeID_Type& GeoLocatedObjectType::getOpVolumeID() const {
  return getOpVolumeID_();
}

uci::type::OpVolumeID_Type& GeoLocatedObjectType::getOpVolumeID() {
  return getOpVolumeID_();
}

uci::type::GeoLocatedObjectType& GeoLocatedObjectType::setOpVolumeID(const uci::type::OpVolumeID_Type& accessor) {
  chooseOpVolumeID();
  if (&accessor != opVolumeID_Accessor.get()) {
    opVolumeID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GeoLocatedObjectType::isOpVolumeID() const noexcept {
  return static_cast<bool>(opVolumeID_Accessor);
}

uci::type::OpVolumeID_Type& GeoLocatedObjectType::chooseOpVolumeID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  systemID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  dMPI_ID_Accessor.reset();
  signalReportID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opVolumeID_Type : type};
  if ((!opVolumeID_Accessor) || (opVolumeID_Accessor->getAccessorType() != requestedType)) {
    opVolumeID_Accessor = OpVolumeID_Type::create(type);
    if (!opVolumeID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opVolumeID_Accessor;
}

uci::type::OpVolumeID_Type& GeoLocatedObjectType::chooseOpVolumeID(uci::base::accessorType::AccessorType type) {
  return chooseOpVolumeID("chooseOpVolumeID", type);
}

uci::type::DMPI_ID_Type& GeoLocatedObjectType::getDMPI_ID_() const {
  if (dMPI_ID_Accessor) {
    return *dMPI_ID_Accessor;
  }
  throw uci::base::UCIException("Error in getDMPI_ID(): Unable to get DMPI_ID, field not selected");
}

const uci::type::DMPI_ID_Type& GeoLocatedObjectType::getDMPI_ID() const {
  return getDMPI_ID_();
}

uci::type::DMPI_ID_Type& GeoLocatedObjectType::getDMPI_ID() {
  return getDMPI_ID_();
}

uci::type::GeoLocatedObjectType& GeoLocatedObjectType::setDMPI_ID(const uci::type::DMPI_ID_Type& accessor) {
  chooseDMPI_ID();
  if (&accessor != dMPI_ID_Accessor.get()) {
    dMPI_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GeoLocatedObjectType::isDMPI_ID() const noexcept {
  return static_cast<bool>(dMPI_ID_Accessor);
}

uci::type::DMPI_ID_Type& GeoLocatedObjectType::chooseDMPI_ID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  systemID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  signalReportID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_ID_Type : type};
  if ((!dMPI_ID_Accessor) || (dMPI_ID_Accessor->getAccessorType() != requestedType)) {
    dMPI_ID_Accessor = DMPI_ID_Type::create(type);
    if (!dMPI_ID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dMPI_ID_Accessor;
}

uci::type::DMPI_ID_Type& GeoLocatedObjectType::chooseDMPI_ID(uci::base::accessorType::AccessorType type) {
  return chooseDMPI_ID("chooseDMPI_ID", type);
}

uci::type::SignalReportID_Type& GeoLocatedObjectType::getSignalReportID_() const {
  if (signalReportID_Accessor) {
    return *signalReportID_Accessor;
  }
  throw uci::base::UCIException("Error in getSignalReportID(): Unable to get SignalReportID, field not selected");
}

const uci::type::SignalReportID_Type& GeoLocatedObjectType::getSignalReportID() const {
  return getSignalReportID_();
}

uci::type::SignalReportID_Type& GeoLocatedObjectType::getSignalReportID() {
  return getSignalReportID_();
}

uci::type::GeoLocatedObjectType& GeoLocatedObjectType::setSignalReportID(const uci::type::SignalReportID_Type& accessor) {
  chooseSignalReportID();
  if (&accessor != signalReportID_Accessor.get()) {
    signalReportID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GeoLocatedObjectType::isSignalReportID() const noexcept {
  return static_cast<bool>(signalReportID_Accessor);
}

uci::type::SignalReportID_Type& GeoLocatedObjectType::chooseSignalReportID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  systemID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  dMPI_ID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalReportID_Type : type};
  if ((!signalReportID_Accessor) || (signalReportID_Accessor->getAccessorType() != requestedType)) {
    signalReportID_Accessor = SignalReportID_Type::create(type);
    if (!signalReportID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *signalReportID_Accessor;
}

uci::type::SignalReportID_Type& GeoLocatedObjectType::chooseSignalReportID(uci::base::accessorType::AccessorType type) {
  return chooseSignalReportID("chooseSignalReportID", type);
}

std::unique_ptr<GeoLocatedObjectType> GeoLocatedObjectType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::geoLocatedObjectType : type};
  return (requestedType == uci::type::accessorType::geoLocatedObjectType) ? boost::make_unique<GeoLocatedObjectType>() : nullptr;
}

/**  */
namespace GeoLocatedObjectType_Names {

constexpr const char* Extern_Type_Name{"GeoLocatedObjectType"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* OpPointID_Name{"OpPointID"};
constexpr const char* OpLineID_Name{"OpLineID"};
constexpr const char* OpZoneID_Name{"OpZoneID"};
constexpr const char* OpVolumeID_Name{"OpVolumeID"};
constexpr const char* DMPI_ID_Name{"DMPI_ID"};
constexpr const char* SignalReportID_Name{"SignalReportID"};

} // namespace GeoLocatedObjectType_Names

void GeoLocatedObjectType::deserialize(const boost::property_tree::ptree& propTree, uci::type::GeoLocatedObjectType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = GeoLocatedObjectType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + GeoLocatedObjectType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GeoLocatedObjectType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.chooseSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GeoLocatedObjectType_Names::OpPointID_Name) {
      OpPointID_Type::deserialize(valueType.second, accessor.chooseOpPointID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GeoLocatedObjectType_Names::OpLineID_Name) {
      OpLineID_Type::deserialize(valueType.second, accessor.chooseOpLineID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GeoLocatedObjectType_Names::OpZoneID_Name) {
      OpZoneID_Type::deserialize(valueType.second, accessor.chooseOpZoneID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GeoLocatedObjectType_Names::OpVolumeID_Name) {
      OpVolumeID_Type::deserialize(valueType.second, accessor.chooseOpVolumeID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GeoLocatedObjectType_Names::DMPI_ID_Name) {
      DMPI_ID_Type::deserialize(valueType.second, accessor.chooseDMPI_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GeoLocatedObjectType_Names::SignalReportID_Name) {
      SignalReportID_Type::deserialize(valueType.second, accessor.chooseSignalReportID(), nodeName, nsPrefix);
    }
  }
}

std::string GeoLocatedObjectType::serialize(const uci::type::GeoLocatedObjectType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? GeoLocatedObjectType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, GeoLocatedObjectType_Names::Extern_Type_Name);
  }
  if (accessor.isEntityID()) {
    EntityID_Type::serialize(accessor.getEntityID(), node, GeoLocatedObjectType_Names::EntityID_Name);
  } else if (accessor.isSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, GeoLocatedObjectType_Names::SystemID_Name);
  } else if (accessor.isOpPointID()) {
    OpPointID_Type::serialize(accessor.getOpPointID(), node, GeoLocatedObjectType_Names::OpPointID_Name);
  } else if (accessor.isOpLineID()) {
    OpLineID_Type::serialize(accessor.getOpLineID(), node, GeoLocatedObjectType_Names::OpLineID_Name);
  } else if (accessor.isOpZoneID()) {
    OpZoneID_Type::serialize(accessor.getOpZoneID(), node, GeoLocatedObjectType_Names::OpZoneID_Name);
  } else if (accessor.isOpVolumeID()) {
    OpVolumeID_Type::serialize(accessor.getOpVolumeID(), node, GeoLocatedObjectType_Names::OpVolumeID_Name);
  } else if (accessor.isDMPI_ID()) {
    DMPI_ID_Type::serialize(accessor.getDMPI_ID(), node, GeoLocatedObjectType_Names::DMPI_ID_Name);
  } else if (accessor.isSignalReportID()) {
    SignalReportID_Type::serialize(accessor.getSignalReportID(), node, GeoLocatedObjectType_Names::SignalReportID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::GeoLocatedObjectType& GeoLocatedObjectType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::GeoLocatedObjectType>().release());
}

uci::type::GeoLocatedObjectType& GeoLocatedObjectType::create(const uci::type::GeoLocatedObjectType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::GeoLocatedObjectType> newAccessor{boost::make_unique<asb_uci::type::GeoLocatedObjectType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void GeoLocatedObjectType::destroy(uci::type::GeoLocatedObjectType& accessor) {
  delete dynamic_cast<asb_uci::type::GeoLocatedObjectType*>(&accessor);
}

} // namespace type

} // namespace uci

