/** @file AnalysisRoutePathType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AnalysisRoutePathType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AnalysisRouteInformationType.h"
#include "asb_uci/type/AnalysisRouteSegmentType.h"
#include "asb_uci/type/PathID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AnalysisRouteInformationType.h"
#include "uci/type/AnalysisRoutePathType.h"
#include "uci/type/AnalysisRouteSegmentType.h"
#include "uci/type/PathID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AnalysisRoutePathType::AnalysisRoutePathType()
  : pathID_Accessor{boost::make_unique<PathID_Type>()},
    segmentAnalysisData_Accessor{boost::make_unique<SegmentAnalysisData>(1, SIZE_MAX)} {
}

AnalysisRoutePathType::~AnalysisRoutePathType() = default;

void AnalysisRoutePathType::copy(const uci::type::AnalysisRoutePathType& accessor) {
  copyImpl(accessor, false);
}

void AnalysisRoutePathType::copyImpl(const uci::type::AnalysisRoutePathType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AnalysisRoutePathType&>(accessor);
    setPathID(*(accessorImpl.pathID_Accessor));
    if (accessorImpl.pathAnalysis_Accessor) {
      setPathAnalysis(*(accessorImpl.pathAnalysis_Accessor));
    } else {
      pathAnalysis_Accessor.reset();
    }
    setSegmentAnalysisData(*(accessorImpl.segmentAnalysisData_Accessor));
  }
}

void AnalysisRoutePathType::reset() noexcept {
  pathID_Accessor->reset();
  pathAnalysis_Accessor.reset();
  segmentAnalysisData_Accessor->reset();
}

const uci::type::PathID_Type& AnalysisRoutePathType::getPathID() const {
  return *pathID_Accessor;
}

uci::type::PathID_Type& AnalysisRoutePathType::getPathID() {
  return *pathID_Accessor;
}

uci::type::AnalysisRoutePathType& AnalysisRoutePathType::setPathID(const uci::type::PathID_Type& accessor) {
  if (&accessor != pathID_Accessor.get()) {
    pathID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AnalysisRouteInformationType& AnalysisRoutePathType::getPathAnalysis_() const {
  if (pathAnalysis_Accessor) {
    return *pathAnalysis_Accessor;
  }
  throw uci::base::UCIException("Error in getPathAnalysis(): An attempt was made to get an optional field that was not enabled, call hasPathAnalysis() to determine if it is safe to call getPathAnalysis()");
}

const uci::type::AnalysisRouteInformationType& AnalysisRoutePathType::getPathAnalysis() const {
  return getPathAnalysis_();
}

uci::type::AnalysisRouteInformationType& AnalysisRoutePathType::getPathAnalysis() {
  return getPathAnalysis_();
}

uci::type::AnalysisRoutePathType& AnalysisRoutePathType::setPathAnalysis(const uci::type::AnalysisRouteInformationType& accessor) {
  enablePathAnalysis();
  if (&accessor != pathAnalysis_Accessor.get()) {
    pathAnalysis_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AnalysisRoutePathType::hasPathAnalysis() const noexcept {
  return static_cast<bool>(pathAnalysis_Accessor);
}

uci::type::AnalysisRouteInformationType& AnalysisRoutePathType::enablePathAnalysis(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::analysisRouteInformationType : type};
  if ((!pathAnalysis_Accessor) || (pathAnalysis_Accessor->getAccessorType() != requestedType)) {
    pathAnalysis_Accessor = AnalysisRouteInformationType::create(requestedType);
    if (!pathAnalysis_Accessor) {
      throw uci::base::UCIException("Error in enablePathAnalysis(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pathAnalysis_Accessor;
}

uci::type::AnalysisRoutePathType& AnalysisRoutePathType::clearPathAnalysis() noexcept {
  pathAnalysis_Accessor.reset();
  return *this;
}

const uci::type::AnalysisRoutePathType::SegmentAnalysisData& AnalysisRoutePathType::getSegmentAnalysisData() const {
  return *segmentAnalysisData_Accessor;
}

uci::type::AnalysisRoutePathType::SegmentAnalysisData& AnalysisRoutePathType::getSegmentAnalysisData() {
  return *segmentAnalysisData_Accessor;
}

uci::type::AnalysisRoutePathType& AnalysisRoutePathType::setSegmentAnalysisData(const uci::type::AnalysisRoutePathType::SegmentAnalysisData& accessor) {
  if (&accessor != segmentAnalysisData_Accessor.get()) {
    segmentAnalysisData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<AnalysisRoutePathType> AnalysisRoutePathType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::analysisRoutePathType : type};
  return (requestedType == uci::type::accessorType::analysisRoutePathType) ? boost::make_unique<AnalysisRoutePathType>() : nullptr;
}

/**  */
namespace AnalysisRoutePathType_Names {

constexpr const char* Extern_Type_Name{"AnalysisRoutePathType"};
constexpr const char* PathID_Name{"PathID"};
constexpr const char* PathAnalysis_Name{"PathAnalysis"};
constexpr const char* SegmentAnalysisData_Name{"SegmentAnalysisData"};

} // namespace AnalysisRoutePathType_Names

void AnalysisRoutePathType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AnalysisRoutePathType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AnalysisRoutePathType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AnalysisRoutePathType_Names::PathID_Name) {
      PathID_Type::deserialize(valueType.second, accessor.getPathID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AnalysisRoutePathType_Names::PathAnalysis_Name) {
      AnalysisRouteInformationType::deserialize(valueType.second, accessor.enablePathAnalysis(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AnalysisRoutePathType_Names::SegmentAnalysisData_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AnalysisRoutePathType::SegmentAnalysisData& boundedList = accessor.getSegmentAnalysisData();
        const uci::type::AnalysisRoutePathType::SegmentAnalysisData::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AnalysisRouteSegmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string AnalysisRoutePathType::serialize(const uci::type::AnalysisRoutePathType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AnalysisRoutePathType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AnalysisRoutePathType_Names::Extern_Type_Name);
  }
  PathID_Type::serialize(accessor.getPathID(), node, AnalysisRoutePathType_Names::PathID_Name);
  if (accessor.hasPathAnalysis()) {
    AnalysisRouteInformationType::serialize(accessor.getPathAnalysis(), node, AnalysisRoutePathType_Names::PathAnalysis_Name);
  }
  {
    const uci::type::AnalysisRoutePathType::SegmentAnalysisData& boundedList = accessor.getSegmentAnalysisData();
    for (uci::type::AnalysisRoutePathType::SegmentAnalysisData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AnalysisRouteSegmentType::serialize(boundedList.at(i), node, AnalysisRoutePathType_Names::SegmentAnalysisData_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AnalysisRoutePathType& AnalysisRoutePathType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AnalysisRoutePathType>().release());
}

uci::type::AnalysisRoutePathType& AnalysisRoutePathType::create(const uci::type::AnalysisRoutePathType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AnalysisRoutePathType> newAccessor{boost::make_unique<asb_uci::type::AnalysisRoutePathType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AnalysisRoutePathType::destroy(uci::type::AnalysisRoutePathType& accessor) {
  delete dynamic_cast<asb_uci::type::AnalysisRoutePathType*>(&accessor);
}

} // namespace type

} // namespace uci

