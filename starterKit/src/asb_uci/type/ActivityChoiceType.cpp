/** @file ActivityChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ActivityChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActionID_Type.h"
#include "../../../include/asb_uci/type/CapabilityCommandBaseType.h"
#include "../../../include/asb_uci/type/CommDataType.h"
#include "../../../include/asb_uci/type/EffectID_Type.h"
#include "../../../include/asb_uci/type/ResponseID_Type.h"
#include "../../../include/asb_uci/type/SupportCapabilityCommandBaseType.h"
#include "../../../include/asb_uci/type/TaskID_Type.h"
#include "../../../include/asb_uci/type/VehicleCommandDataType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActionID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityCommandBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EffectID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponseID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SupportCapabilityCommandBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TaskID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VehicleCommandDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ActivityChoiceType::ActivityChoiceType() = default;

ActivityChoiceType::~ActivityChoiceType() = default;

void ActivityChoiceType::copy(const uci::type::ActivityChoiceType& accessor) {
  copyImpl(accessor, false);
}

void ActivityChoiceType::copyImpl(const uci::type::ActivityChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ActivityChoiceType&>(accessor);
    if (accessorImpl.effectID_Accessor) {
      setEffectID(*(accessorImpl.effectID_Accessor));
    } else {
      effectID_Accessor.reset();
    }
    if (accessorImpl.actionID_Accessor) {
      setActionID(*(accessorImpl.actionID_Accessor));
    } else {
      actionID_Accessor.reset();
    }
    if (accessorImpl.taskID_Accessor) {
      setTaskID(*(accessorImpl.taskID_Accessor));
    } else {
      taskID_Accessor.reset();
    }
    if (accessorImpl.responseID_Accessor) {
      setResponseID(*(accessorImpl.responseID_Accessor));
    } else {
      responseID_Accessor.reset();
    }
    if (accessorImpl.capabilityCommand_Accessor) {
      setCapabilityCommand(*(accessorImpl.capabilityCommand_Accessor));
    } else {
      capabilityCommand_Accessor.reset();
    }
    if (accessorImpl.supportingCapabilityCommand_Accessor) {
      setSupportingCapabilityCommand(*(accessorImpl.supportingCapabilityCommand_Accessor));
    } else {
      supportingCapabilityCommand_Accessor.reset();
    }
    if (accessorImpl.vehicleSettings_Accessor) {
      setVehicleSettings(*(accessorImpl.vehicleSettings_Accessor));
    } else {
      vehicleSettings_Accessor.reset();
    }
    if (accessorImpl.commAction_Accessor) {
      setCommAction(*(accessorImpl.commAction_Accessor));
    } else {
      commAction_Accessor.reset();
    }
    if (accessorImpl.productTaskID_Accessor) {
      setProductTaskID(*(accessorImpl.productTaskID_Accessor));
    } else {
      productTaskID_Accessor.reset();
    }
  }
}

void ActivityChoiceType::reset() noexcept {
  effectID_Accessor.reset();
  actionID_Accessor.reset();
  taskID_Accessor.reset();
  responseID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  supportingCapabilityCommand_Accessor.reset();
  vehicleSettings_Accessor.reset();
  commAction_Accessor.reset();
  productTaskID_Accessor.reset();
}

uci::type::ActivityChoiceType::ActivityChoiceTypeChoice ActivityChoiceType::getActivityChoiceTypeChoiceOrdinal() const noexcept {
  if (effectID_Accessor) {
    return ACTIVITYCHOICETYPE_CHOICE_EFFECTID;
  }
  if (actionID_Accessor) {
    return ACTIVITYCHOICETYPE_CHOICE_ACTIONID;
  }
  if (taskID_Accessor) {
    return ACTIVITYCHOICETYPE_CHOICE_TASKID;
  }
  if (responseID_Accessor) {
    return ACTIVITYCHOICETYPE_CHOICE_RESPONSEID;
  }
  if (capabilityCommand_Accessor) {
    return ACTIVITYCHOICETYPE_CHOICE_CAPABILITYCOMMAND;
  }
  if (supportingCapabilityCommand_Accessor) {
    return ACTIVITYCHOICETYPE_CHOICE_SUPPORTINGCAPABILITYCOMMAND;
  }
  if (vehicleSettings_Accessor) {
    return ACTIVITYCHOICETYPE_CHOICE_VEHICLESETTINGS;
  }
  if (commAction_Accessor) {
    return ACTIVITYCHOICETYPE_CHOICE_COMMACTION;
  }
  if (productTaskID_Accessor) {
    return ACTIVITYCHOICETYPE_CHOICE_PRODUCTTASKID;
  }
  return ACTIVITYCHOICETYPE_CHOICE_NONE;
}

uci::type::ActivityChoiceType& ActivityChoiceType::setActivityChoiceTypeChoiceOrdinal(uci::type::ActivityChoiceType::ActivityChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ACTIVITYCHOICETYPE_CHOICE_EFFECTID:
      chooseEffectID("setActivityChoiceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYCHOICETYPE_CHOICE_ACTIONID:
      chooseActionID("setActivityChoiceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYCHOICETYPE_CHOICE_TASKID:
      chooseTaskID("setActivityChoiceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYCHOICETYPE_CHOICE_RESPONSEID:
      chooseResponseID("setActivityChoiceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYCHOICETYPE_CHOICE_CAPABILITYCOMMAND:
      chooseCapabilityCommand("setActivityChoiceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYCHOICETYPE_CHOICE_SUPPORTINGCAPABILITYCOMMAND:
      chooseSupportingCapabilityCommand("setActivityChoiceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYCHOICETYPE_CHOICE_VEHICLESETTINGS:
      chooseVehicleSettings("setActivityChoiceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYCHOICETYPE_CHOICE_COMMACTION:
      chooseCommAction("setActivityChoiceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYCHOICETYPE_CHOICE_PRODUCTTASKID:
      chooseProductTaskID("setActivityChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setActivityChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EffectID_Type& ActivityChoiceType::getEffectID_() const {
  if (effectID_Accessor) {
    return *effectID_Accessor;
  }
  throw uci::base::UCIException("Error in getEffectID(): Unable to get EffectID, field not selected");
}

const uci::type::EffectID_Type& ActivityChoiceType::getEffectID() const {
  return getEffectID_();
}

uci::type::EffectID_Type& ActivityChoiceType::getEffectID() {
  return getEffectID_();
}

uci::type::ActivityChoiceType& ActivityChoiceType::setEffectID(const uci::type::EffectID_Type& accessor) {
  chooseEffectID();
  if (&accessor != effectID_Accessor.get()) {
    effectID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityChoiceType::isEffectID() const noexcept {
  return static_cast<bool>(effectID_Accessor);
}

uci::type::EffectID_Type& ActivityChoiceType::chooseEffectID(const std::string& method, uci::base::accessorType::AccessorType type) {
  actionID_Accessor.reset();
  taskID_Accessor.reset();
  responseID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  supportingCapabilityCommand_Accessor.reset();
  vehicleSettings_Accessor.reset();
  commAction_Accessor.reset();
  productTaskID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectID_Type : type};
  if ((!effectID_Accessor) || (effectID_Accessor->getAccessorType() != requestedType)) {
    effectID_Accessor = EffectID_Type::create(type);
    if (!effectID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *effectID_Accessor;
}

uci::type::EffectID_Type& ActivityChoiceType::chooseEffectID(uci::base::accessorType::AccessorType type) {
  return chooseEffectID("chooseEffectID", type);
}

uci::type::ActionID_Type& ActivityChoiceType::getActionID_() const {
  if (actionID_Accessor) {
    return *actionID_Accessor;
  }
  throw uci::base::UCIException("Error in getActionID(): Unable to get ActionID, field not selected");
}

const uci::type::ActionID_Type& ActivityChoiceType::getActionID() const {
  return getActionID_();
}

uci::type::ActionID_Type& ActivityChoiceType::getActionID() {
  return getActionID_();
}

uci::type::ActivityChoiceType& ActivityChoiceType::setActionID(const uci::type::ActionID_Type& accessor) {
  chooseActionID();
  if (&accessor != actionID_Accessor.get()) {
    actionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityChoiceType::isActionID() const noexcept {
  return static_cast<bool>(actionID_Accessor);
}

uci::type::ActionID_Type& ActivityChoiceType::chooseActionID(const std::string& method, uci::base::accessorType::AccessorType type) {
  effectID_Accessor.reset();
  taskID_Accessor.reset();
  responseID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  supportingCapabilityCommand_Accessor.reset();
  vehicleSettings_Accessor.reset();
  commAction_Accessor.reset();
  productTaskID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionID_Type : type};
  if ((!actionID_Accessor) || (actionID_Accessor->getAccessorType() != requestedType)) {
    actionID_Accessor = ActionID_Type::create(type);
    if (!actionID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *actionID_Accessor;
}

uci::type::ActionID_Type& ActivityChoiceType::chooseActionID(uci::base::accessorType::AccessorType type) {
  return chooseActionID("chooseActionID", type);
}

uci::type::TaskID_Type& ActivityChoiceType::getTaskID_() const {
  if (taskID_Accessor) {
    return *taskID_Accessor;
  }
  throw uci::base::UCIException("Error in getTaskID(): Unable to get TaskID, field not selected");
}

const uci::type::TaskID_Type& ActivityChoiceType::getTaskID() const {
  return getTaskID_();
}

uci::type::TaskID_Type& ActivityChoiceType::getTaskID() {
  return getTaskID_();
}

uci::type::ActivityChoiceType& ActivityChoiceType::setTaskID(const uci::type::TaskID_Type& accessor) {
  chooseTaskID();
  if (&accessor != taskID_Accessor.get()) {
    taskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityChoiceType::isTaskID() const noexcept {
  return static_cast<bool>(taskID_Accessor);
}

uci::type::TaskID_Type& ActivityChoiceType::chooseTaskID(const std::string& method, uci::base::accessorType::AccessorType type) {
  effectID_Accessor.reset();
  actionID_Accessor.reset();
  responseID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  supportingCapabilityCommand_Accessor.reset();
  vehicleSettings_Accessor.reset();
  commAction_Accessor.reset();
  productTaskID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskID_Type : type};
  if ((!taskID_Accessor) || (taskID_Accessor->getAccessorType() != requestedType)) {
    taskID_Accessor = TaskID_Type::create(type);
    if (!taskID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taskID_Accessor;
}

uci::type::TaskID_Type& ActivityChoiceType::chooseTaskID(uci::base::accessorType::AccessorType type) {
  return chooseTaskID("chooseTaskID", type);
}

uci::type::ResponseID_Type& ActivityChoiceType::getResponseID_() const {
  if (responseID_Accessor) {
    return *responseID_Accessor;
  }
  throw uci::base::UCIException("Error in getResponseID(): Unable to get ResponseID, field not selected");
}

const uci::type::ResponseID_Type& ActivityChoiceType::getResponseID() const {
  return getResponseID_();
}

uci::type::ResponseID_Type& ActivityChoiceType::getResponseID() {
  return getResponseID_();
}

uci::type::ActivityChoiceType& ActivityChoiceType::setResponseID(const uci::type::ResponseID_Type& accessor) {
  chooseResponseID();
  if (&accessor != responseID_Accessor.get()) {
    responseID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityChoiceType::isResponseID() const noexcept {
  return static_cast<bool>(responseID_Accessor);
}

uci::type::ResponseID_Type& ActivityChoiceType::chooseResponseID(const std::string& method, uci::base::accessorType::AccessorType type) {
  effectID_Accessor.reset();
  actionID_Accessor.reset();
  taskID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  supportingCapabilityCommand_Accessor.reset();
  vehicleSettings_Accessor.reset();
  commAction_Accessor.reset();
  productTaskID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responseID_Type : type};
  if ((!responseID_Accessor) || (responseID_Accessor->getAccessorType() != requestedType)) {
    responseID_Accessor = ResponseID_Type::create(type);
    if (!responseID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *responseID_Accessor;
}

uci::type::ResponseID_Type& ActivityChoiceType::chooseResponseID(uci::base::accessorType::AccessorType type) {
  return chooseResponseID("chooseResponseID", type);
}

uci::type::CapabilityCommandBaseType& ActivityChoiceType::getCapabilityCommand_() const {
  if (capabilityCommand_Accessor) {
    return *capabilityCommand_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityCommand(): Unable to get CapabilityCommand, field not selected");
}

const uci::type::CapabilityCommandBaseType& ActivityChoiceType::getCapabilityCommand() const {
  return getCapabilityCommand_();
}

uci::type::CapabilityCommandBaseType& ActivityChoiceType::getCapabilityCommand() {
  return getCapabilityCommand_();
}

uci::type::ActivityChoiceType& ActivityChoiceType::setCapabilityCommand(const uci::type::CapabilityCommandBaseType& accessor) {
  chooseCapabilityCommand("setCapabilityCommand", accessor.getAccessorType());
  if (&accessor != capabilityCommand_Accessor.get()) {
    capabilityCommand_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ActivityChoiceType::isCapabilityCommand() const noexcept {
  return static_cast<bool>(capabilityCommand_Accessor);
}

uci::type::CapabilityCommandBaseType& ActivityChoiceType::chooseCapabilityCommand(const std::string& method, uci::base::accessorType::AccessorType type) {
  effectID_Accessor.reset();
  actionID_Accessor.reset();
  taskID_Accessor.reset();
  responseID_Accessor.reset();
  supportingCapabilityCommand_Accessor.reset();
  vehicleSettings_Accessor.reset();
  commAction_Accessor.reset();
  productTaskID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandBaseType : type};
  if ((!capabilityCommand_Accessor) || (capabilityCommand_Accessor->getAccessorType() != requestedType)) {
    capabilityCommand_Accessor = CapabilityCommandBaseType::create(type);
    if (!capabilityCommand_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityCommand_Accessor;
}

uci::type::CapabilityCommandBaseType& ActivityChoiceType::chooseCapabilityCommand(uci::base::accessorType::AccessorType type) {
  return chooseCapabilityCommand("chooseCapabilityCommand", type);
}

uci::type::SupportCapabilityCommandBaseType& ActivityChoiceType::getSupportingCapabilityCommand_() const {
  if (supportingCapabilityCommand_Accessor) {
    return *supportingCapabilityCommand_Accessor;
  }
  throw uci::base::UCIException("Error in getSupportingCapabilityCommand(): Unable to get SupportingCapabilityCommand, field not selected");
}

const uci::type::SupportCapabilityCommandBaseType& ActivityChoiceType::getSupportingCapabilityCommand() const {
  return getSupportingCapabilityCommand_();
}

uci::type::SupportCapabilityCommandBaseType& ActivityChoiceType::getSupportingCapabilityCommand() {
  return getSupportingCapabilityCommand_();
}

uci::type::ActivityChoiceType& ActivityChoiceType::setSupportingCapabilityCommand(const uci::type::SupportCapabilityCommandBaseType& accessor) {
  chooseSupportingCapabilityCommand("setSupportingCapabilityCommand", accessor.getAccessorType());
  if (&accessor != supportingCapabilityCommand_Accessor.get()) {
    supportingCapabilityCommand_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ActivityChoiceType::isSupportingCapabilityCommand() const noexcept {
  return static_cast<bool>(supportingCapabilityCommand_Accessor);
}

uci::type::SupportCapabilityCommandBaseType& ActivityChoiceType::chooseSupportingCapabilityCommand(const std::string& method, uci::base::accessorType::AccessorType type) {
  effectID_Accessor.reset();
  actionID_Accessor.reset();
  taskID_Accessor.reset();
  responseID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  vehicleSettings_Accessor.reset();
  commAction_Accessor.reset();
  productTaskID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::supportCapabilityCommandBaseType : type};
  if ((!supportingCapabilityCommand_Accessor) || (supportingCapabilityCommand_Accessor->getAccessorType() != requestedType)) {
    supportingCapabilityCommand_Accessor = SupportCapabilityCommandBaseType::create(type);
    if (!supportingCapabilityCommand_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *supportingCapabilityCommand_Accessor;
}

uci::type::SupportCapabilityCommandBaseType& ActivityChoiceType::chooseSupportingCapabilityCommand(uci::base::accessorType::AccessorType type) {
  return chooseSupportingCapabilityCommand("chooseSupportingCapabilityCommand", type);
}

uci::type::VehicleCommandDataType& ActivityChoiceType::getVehicleSettings_() const {
  if (vehicleSettings_Accessor) {
    return *vehicleSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getVehicleSettings(): Unable to get VehicleSettings, field not selected");
}

const uci::type::VehicleCommandDataType& ActivityChoiceType::getVehicleSettings() const {
  return getVehicleSettings_();
}

uci::type::VehicleCommandDataType& ActivityChoiceType::getVehicleSettings() {
  return getVehicleSettings_();
}

uci::type::ActivityChoiceType& ActivityChoiceType::setVehicleSettings(const uci::type::VehicleCommandDataType& accessor) {
  chooseVehicleSettings();
  if (&accessor != vehicleSettings_Accessor.get()) {
    vehicleSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityChoiceType::isVehicleSettings() const noexcept {
  return static_cast<bool>(vehicleSettings_Accessor);
}

uci::type::VehicleCommandDataType& ActivityChoiceType::chooseVehicleSettings(const std::string& method, uci::base::accessorType::AccessorType type) {
  effectID_Accessor.reset();
  actionID_Accessor.reset();
  taskID_Accessor.reset();
  responseID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  supportingCapabilityCommand_Accessor.reset();
  commAction_Accessor.reset();
  productTaskID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleCommandDataType : type};
  if ((!vehicleSettings_Accessor) || (vehicleSettings_Accessor->getAccessorType() != requestedType)) {
    vehicleSettings_Accessor = VehicleCommandDataType::create(type);
    if (!vehicleSettings_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vehicleSettings_Accessor;
}

uci::type::VehicleCommandDataType& ActivityChoiceType::chooseVehicleSettings(uci::base::accessorType::AccessorType type) {
  return chooseVehicleSettings("chooseVehicleSettings", type);
}

uci::type::CommDataType& ActivityChoiceType::getCommAction_() const {
  if (commAction_Accessor) {
    return *commAction_Accessor;
  }
  throw uci::base::UCIException("Error in getCommAction(): Unable to get CommAction, field not selected");
}

const uci::type::CommDataType& ActivityChoiceType::getCommAction() const {
  return getCommAction_();
}

uci::type::CommDataType& ActivityChoiceType::getCommAction() {
  return getCommAction_();
}

uci::type::ActivityChoiceType& ActivityChoiceType::setCommAction(const uci::type::CommDataType& accessor) {
  chooseCommAction("setCommAction", accessor.getAccessorType());
  if (&accessor != commAction_Accessor.get()) {
    commAction_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ActivityChoiceType::isCommAction() const noexcept {
  return static_cast<bool>(commAction_Accessor);
}

uci::type::CommDataType& ActivityChoiceType::chooseCommAction(const std::string& method, uci::base::accessorType::AccessorType type) {
  effectID_Accessor.reset();
  actionID_Accessor.reset();
  taskID_Accessor.reset();
  responseID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  supportingCapabilityCommand_Accessor.reset();
  vehicleSettings_Accessor.reset();
  productTaskID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commDataType : type};
  if ((!commAction_Accessor) || (commAction_Accessor->getAccessorType() != requestedType)) {
    commAction_Accessor = CommDataType::create(type);
    if (!commAction_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commAction_Accessor;
}

uci::type::CommDataType& ActivityChoiceType::chooseCommAction(uci::base::accessorType::AccessorType type) {
  return chooseCommAction("chooseCommAction", type);
}

uci::type::TaskID_Type& ActivityChoiceType::getProductTaskID_() const {
  if (productTaskID_Accessor) {
    return *productTaskID_Accessor;
  }
  throw uci::base::UCIException("Error in getProductTaskID(): Unable to get ProductTaskID, field not selected");
}

const uci::type::TaskID_Type& ActivityChoiceType::getProductTaskID() const {
  return getProductTaskID_();
}

uci::type::TaskID_Type& ActivityChoiceType::getProductTaskID() {
  return getProductTaskID_();
}

uci::type::ActivityChoiceType& ActivityChoiceType::setProductTaskID(const uci::type::TaskID_Type& accessor) {
  chooseProductTaskID();
  if (&accessor != productTaskID_Accessor.get()) {
    productTaskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityChoiceType::isProductTaskID() const noexcept {
  return static_cast<bool>(productTaskID_Accessor);
}

uci::type::TaskID_Type& ActivityChoiceType::chooseProductTaskID(const std::string& method, uci::base::accessorType::AccessorType type) {
  effectID_Accessor.reset();
  actionID_Accessor.reset();
  taskID_Accessor.reset();
  responseID_Accessor.reset();
  capabilityCommand_Accessor.reset();
  supportingCapabilityCommand_Accessor.reset();
  vehicleSettings_Accessor.reset();
  commAction_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskID_Type : type};
  if ((!productTaskID_Accessor) || (productTaskID_Accessor->getAccessorType() != requestedType)) {
    productTaskID_Accessor = TaskID_Type::create(type);
    if (!productTaskID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productTaskID_Accessor;
}

uci::type::TaskID_Type& ActivityChoiceType::chooseProductTaskID(uci::base::accessorType::AccessorType type) {
  return chooseProductTaskID("chooseProductTaskID", type);
}

std::unique_ptr<ActivityChoiceType> ActivityChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityChoiceType : type};
  return (requestedType == uci::type::accessorType::activityChoiceType) ? boost::make_unique<ActivityChoiceType>() : nullptr;
}

/**  */
namespace ActivityChoiceType_Names {

constexpr const char* Extern_Type_Name{"ActivityChoiceType"};
constexpr const char* EffectID_Name{"EffectID"};
constexpr const char* ActionID_Name{"ActionID"};
constexpr const char* TaskID_Name{"TaskID"};
constexpr const char* ResponseID_Name{"ResponseID"};
constexpr const char* CapabilityCommand_Name{"CapabilityCommand"};
constexpr const char* SupportingCapabilityCommand_Name{"SupportingCapabilityCommand"};
constexpr const char* VehicleSettings_Name{"VehicleSettings"};
constexpr const char* CommAction_Name{"CommAction"};
constexpr const char* ProductTaskID_Name{"ProductTaskID"};

} // namespace ActivityChoiceType_Names

void ActivityChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActivityChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActivityChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ActivityChoiceType_Names::EffectID_Name) {
      EffectID_Type::deserialize(valueType.second, accessor.chooseEffectID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityChoiceType_Names::ActionID_Name) {
      ActionID_Type::deserialize(valueType.second, accessor.chooseActionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityChoiceType_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.chooseTaskID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityChoiceType_Names::ResponseID_Name) {
      ResponseID_Type::deserialize(valueType.second, accessor.chooseResponseID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityChoiceType_Names::CapabilityCommand_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseCapabilityCommand(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityChoiceType_Names::SupportingCapabilityCommand_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseSupportingCapabilityCommand(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityChoiceType_Names::VehicleSettings_Name) {
      VehicleCommandDataType::deserialize(valueType.second, accessor.chooseVehicleSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityChoiceType_Names::CommAction_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseCommAction(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityChoiceType_Names::ProductTaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.chooseProductTaskID(), nodeName, nsPrefix);
    }
  }
}

std::string ActivityChoiceType::serialize(const uci::type::ActivityChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ActivityChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ActivityChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isEffectID()) {
    EffectID_Type::serialize(accessor.getEffectID(), node, ActivityChoiceType_Names::EffectID_Name);
  } else if (accessor.isActionID()) {
    ActionID_Type::serialize(accessor.getActionID(), node, ActivityChoiceType_Names::ActionID_Name);
  } else if (accessor.isTaskID()) {
    TaskID_Type::serialize(accessor.getTaskID(), node, ActivityChoiceType_Names::TaskID_Name);
  } else if (accessor.isResponseID()) {
    ResponseID_Type::serialize(accessor.getResponseID(), node, ActivityChoiceType_Names::ResponseID_Name);
  } else if (accessor.isCapabilityCommand()) {
    CapabilityCommandBaseType::serialize(accessor.getCapabilityCommand(), node, ActivityChoiceType_Names::CapabilityCommand_Name);
  } else if (accessor.isSupportingCapabilityCommand()) {
    SupportCapabilityCommandBaseType::serialize(accessor.getSupportingCapabilityCommand(), node, ActivityChoiceType_Names::SupportingCapabilityCommand_Name);
  } else if (accessor.isVehicleSettings()) {
    VehicleCommandDataType::serialize(accessor.getVehicleSettings(), node, ActivityChoiceType_Names::VehicleSettings_Name);
  } else if (accessor.isCommAction()) {
    CommDataType::serialize(accessor.getCommAction(), node, ActivityChoiceType_Names::CommAction_Name);
  } else if (accessor.isProductTaskID()) {
    TaskID_Type::serialize(accessor.getProductTaskID(), node, ActivityChoiceType_Names::ProductTaskID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ActivityChoiceType& ActivityChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ActivityChoiceType>().release());
}

uci::type::ActivityChoiceType& ActivityChoiceType::create(const uci::type::ActivityChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ActivityChoiceType> newAccessor{boost::make_unique<asb_uci::type::ActivityChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ActivityChoiceType::destroy(uci::type::ActivityChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::ActivityChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

