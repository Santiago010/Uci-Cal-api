/** @file CommLinkDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommLinkDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/LinkRatesType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommLinkDetailsType.h"
#include "uci/type/DataRateType.h"
#include "uci/type/LinkRatesType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommLinkDetailsType::CommLinkDetailsType() = default;

CommLinkDetailsType::~CommLinkDetailsType() = default;

void CommLinkDetailsType::copy(const uci::type::CommLinkDetailsType& accessor) {
  copyImpl(accessor, false);
}

void CommLinkDetailsType::copyImpl(const uci::type::CommLinkDetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommLinkDetailsType&>(accessor);
    if (accessorImpl.fullDuplex_Accessor) {
      setFullDuplex(*(accessorImpl.fullDuplex_Accessor));
    } else {
      fullDuplex_Accessor.reset();
    }
    txSimplex_Accessor = (accessorImpl.txSimplex_Accessor ? accessorImpl.txSimplex_Accessor : boost::none);
    if (accessorImpl.halfDuplex_Accessor) {
      setHalfDuplex(*(accessorImpl.halfDuplex_Accessor));
    } else {
      halfDuplex_Accessor.reset();
    }
    rxSimplex_Accessor = (accessorImpl.rxSimplex_Accessor ? accessorImpl.rxSimplex_Accessor : boost::none);
  }
}

void CommLinkDetailsType::reset() noexcept {
  fullDuplex_Accessor.reset();
  txSimplex_Accessor.reset();
  halfDuplex_Accessor.reset();
  rxSimplex_Accessor.reset();
}

uci::type::CommLinkDetailsType::CommLinkDetailsTypeChoice CommLinkDetailsType::getCommLinkDetailsTypeChoiceOrdinal() const noexcept {
  if (fullDuplex_Accessor) {
    return COMMLINKDETAILSTYPE_CHOICE_FULLDUPLEX;
  }
  if (txSimplex_Accessor) {
    return COMMLINKDETAILSTYPE_CHOICE_TXSIMPLEX;
  }
  if (halfDuplex_Accessor) {
    return COMMLINKDETAILSTYPE_CHOICE_HALFDUPLEX;
  }
  if (rxSimplex_Accessor) {
    return COMMLINKDETAILSTYPE_CHOICE_RXSIMPLEX;
  }
  return COMMLINKDETAILSTYPE_CHOICE_NONE;
}

uci::type::CommLinkDetailsType& CommLinkDetailsType::setCommLinkDetailsTypeChoiceOrdinal(uci::type::CommLinkDetailsType::CommLinkDetailsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case COMMLINKDETAILSTYPE_CHOICE_FULLDUPLEX:
      chooseFullDuplex("setCommLinkDetailsTypeChoiceOrdinal", type);
      break;
    case COMMLINKDETAILSTYPE_CHOICE_TXSIMPLEX:
      chooseTxSimplex();
      break;
    case COMMLINKDETAILSTYPE_CHOICE_HALFDUPLEX:
      chooseHalfDuplex("setCommLinkDetailsTypeChoiceOrdinal", type);
      break;
    case COMMLINKDETAILSTYPE_CHOICE_RXSIMPLEX:
      chooseRxSimplex();
      break;
    default:
      throw uci::base::UCIException("Error in setCommLinkDetailsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::LinkRatesType& CommLinkDetailsType::getFullDuplex_() const {
  if (fullDuplex_Accessor) {
    return *fullDuplex_Accessor;
  }
  throw uci::base::UCIException("Error in getFullDuplex(): Unable to get FullDuplex, field not selected");
}

const uci::type::LinkRatesType& CommLinkDetailsType::getFullDuplex() const {
  return getFullDuplex_();
}

uci::type::LinkRatesType& CommLinkDetailsType::getFullDuplex() {
  return getFullDuplex_();
}

uci::type::CommLinkDetailsType& CommLinkDetailsType::setFullDuplex(const uci::type::LinkRatesType& accessor) {
  chooseFullDuplex();
  if (&accessor != fullDuplex_Accessor.get()) {
    fullDuplex_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommLinkDetailsType::isFullDuplex() const noexcept {
  return static_cast<bool>(fullDuplex_Accessor);
}

uci::type::LinkRatesType& CommLinkDetailsType::chooseFullDuplex(const std::string& method, uci::base::accessorType::AccessorType type) {
  txSimplex_Accessor.reset();
  halfDuplex_Accessor.reset();
  rxSimplex_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::linkRatesType : type};
  if ((!fullDuplex_Accessor) || (fullDuplex_Accessor->getAccessorType() != requestedType)) {
    fullDuplex_Accessor = LinkRatesType::create(type);
    if (!fullDuplex_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fullDuplex_Accessor;
}

uci::type::LinkRatesType& CommLinkDetailsType::chooseFullDuplex(uci::base::accessorType::AccessorType type) {
  return chooseFullDuplex("chooseFullDuplex", type);
}

uci::type::DataRateTypeValue CommLinkDetailsType::getTxSimplex() const {
  if (txSimplex_Accessor) {
    return *txSimplex_Accessor;
  }
  throw uci::base::UCIException("Error in getTxSimplex(): Unable to get TxSimplex, field not selected");
}

uci::type::CommLinkDetailsType& CommLinkDetailsType::setTxSimplex(uci::type::DataRateTypeValue value) {
  chooseTxSimplex();
  txSimplex_Accessor = value;
  return *this;
}

bool CommLinkDetailsType::isTxSimplex() const noexcept {
  return static_cast<bool>(txSimplex_Accessor);
}

void CommLinkDetailsType::chooseTxSimplex() {
  fullDuplex_Accessor.reset();
  halfDuplex_Accessor.reset();
  rxSimplex_Accessor.reset();
  if (!txSimplex_Accessor) {
    txSimplex_Accessor = boost::optional<asb_xs::UnsignedInt>();
  }
}

uci::type::LinkRatesType& CommLinkDetailsType::getHalfDuplex_() const {
  if (halfDuplex_Accessor) {
    return *halfDuplex_Accessor;
  }
  throw uci::base::UCIException("Error in getHalfDuplex(): Unable to get HalfDuplex, field not selected");
}

const uci::type::LinkRatesType& CommLinkDetailsType::getHalfDuplex() const {
  return getHalfDuplex_();
}

uci::type::LinkRatesType& CommLinkDetailsType::getHalfDuplex() {
  return getHalfDuplex_();
}

uci::type::CommLinkDetailsType& CommLinkDetailsType::setHalfDuplex(const uci::type::LinkRatesType& accessor) {
  chooseHalfDuplex();
  if (&accessor != halfDuplex_Accessor.get()) {
    halfDuplex_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommLinkDetailsType::isHalfDuplex() const noexcept {
  return static_cast<bool>(halfDuplex_Accessor);
}

uci::type::LinkRatesType& CommLinkDetailsType::chooseHalfDuplex(const std::string& method, uci::base::accessorType::AccessorType type) {
  fullDuplex_Accessor.reset();
  txSimplex_Accessor.reset();
  rxSimplex_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::linkRatesType : type};
  if ((!halfDuplex_Accessor) || (halfDuplex_Accessor->getAccessorType() != requestedType)) {
    halfDuplex_Accessor = LinkRatesType::create(type);
    if (!halfDuplex_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *halfDuplex_Accessor;
}

uci::type::LinkRatesType& CommLinkDetailsType::chooseHalfDuplex(uci::base::accessorType::AccessorType type) {
  return chooseHalfDuplex("chooseHalfDuplex", type);
}

uci::type::DataRateTypeValue CommLinkDetailsType::getRxSimplex() const {
  if (rxSimplex_Accessor) {
    return *rxSimplex_Accessor;
  }
  throw uci::base::UCIException("Error in getRxSimplex(): Unable to get RxSimplex, field not selected");
}

uci::type::CommLinkDetailsType& CommLinkDetailsType::setRxSimplex(uci::type::DataRateTypeValue value) {
  chooseRxSimplex();
  rxSimplex_Accessor = value;
  return *this;
}

bool CommLinkDetailsType::isRxSimplex() const noexcept {
  return static_cast<bool>(rxSimplex_Accessor);
}

void CommLinkDetailsType::chooseRxSimplex() {
  fullDuplex_Accessor.reset();
  txSimplex_Accessor.reset();
  halfDuplex_Accessor.reset();
  if (!rxSimplex_Accessor) {
    rxSimplex_Accessor = boost::optional<asb_xs::UnsignedInt>();
  }
}

std::unique_ptr<CommLinkDetailsType> CommLinkDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLinkDetailsType : type};
  return (requestedType == uci::type::accessorType::commLinkDetailsType) ? boost::make_unique<CommLinkDetailsType>() : nullptr;
}

/**  */
namespace CommLinkDetailsType_Names {

constexpr const char* Extern_Type_Name{"CommLinkDetailsType"};
constexpr const char* FullDuplex_Name{"FullDuplex"};
constexpr const char* TxSimplex_Name{"TxSimplex"};
constexpr const char* HalfDuplex_Name{"HalfDuplex"};
constexpr const char* RxSimplex_Name{"RxSimplex"};

} // namespace CommLinkDetailsType_Names

void CommLinkDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommLinkDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommLinkDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommLinkDetailsType_Names::FullDuplex_Name) {
      LinkRatesType::deserialize(valueType.second, accessor.chooseFullDuplex(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommLinkDetailsType_Names::TxSimplex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTxSimplex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CommLinkDetailsType_Names::HalfDuplex_Name) {
      LinkRatesType::deserialize(valueType.second, accessor.chooseHalfDuplex(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommLinkDetailsType_Names::RxSimplex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRxSimplex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string CommLinkDetailsType::serialize(const uci::type::CommLinkDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommLinkDetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommLinkDetailsType_Names::Extern_Type_Name);
  }
  if (accessor.isFullDuplex()) {
    LinkRatesType::serialize(accessor.getFullDuplex(), node, CommLinkDetailsType_Names::FullDuplex_Name);
  } else if (accessor.isTxSimplex()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getTxSimplex(), node, CommLinkDetailsType_Names::TxSimplex_Name);
  } else if (accessor.isHalfDuplex()) {
    LinkRatesType::serialize(accessor.getHalfDuplex(), node, CommLinkDetailsType_Names::HalfDuplex_Name);
  } else if (accessor.isRxSimplex()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getRxSimplex(), node, CommLinkDetailsType_Names::RxSimplex_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommLinkDetailsType& CommLinkDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommLinkDetailsType>().release());
}

uci::type::CommLinkDetailsType& CommLinkDetailsType::create(const uci::type::CommLinkDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommLinkDetailsType> newAccessor{boost::make_unique<asb_uci::type::CommLinkDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommLinkDetailsType::destroy(uci::type::CommLinkDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::CommLinkDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

