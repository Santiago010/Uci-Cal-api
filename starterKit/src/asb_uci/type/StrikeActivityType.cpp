/** @file StrikeActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/StrikeActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AO_CodeType.h"
#include "asb_uci/type/ActivityBaseType.h"
#include "asb_uci/type/ConsentEnum.h"
#include "asb_uci/type/EnduranceFootprintType.h"
#include "asb_uci/type/GeoLocatedObjectType.h"
#include "asb_uci/type/LAR_ID_Type.h"
#include "asb_uci/type/MunitionInFlightType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AO_CodeType.h"
#include "uci/type/ConsentEnum.h"
#include "uci/type/DurationType.h"
#include "uci/type/EnduranceFootprintType.h"
#include "uci/type/GeoLocatedObjectType.h"
#include "uci/type/LAR_ID_Type.h"
#include "uci/type/MunitionInFlightType.h"
#include "uci/type/StrikeActivityType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StrikeActivityType::StrikeActivityType() = default;

StrikeActivityType::~StrikeActivityType() = default;

void StrikeActivityType::copy(const uci::type::StrikeActivityType& accessor) {
  copyImpl(accessor, false);
}

void StrikeActivityType::copyImpl(const uci::type::StrikeActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ActivityBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const StrikeActivityType&>(accessor);
    setSelectedForKeyLoad(accessorImpl.selectedForKeyLoad_Accessor);
    setWeaponArmed(accessorImpl.weaponArmed_Accessor);
    setReadyForRelease(accessorImpl.readyForRelease_Accessor);
    setSelectedForRelease(accessorImpl.selectedForRelease_Accessor);
    setSelectedForJettison(accessorImpl.selectedForJettison_Accessor);
    if (accessorImpl.assignedTarget_Accessor) {
      setAssignedTarget(*(accessorImpl.assignedTarget_Accessor));
    } else {
      assignedTarget_Accessor.reset();
    }
    if (accessorImpl.aO_Code_Accessor) {
      setAO_Code(*(accessorImpl.aO_Code_Accessor));
    } else {
      aO_Code_Accessor.reset();
    }
    if (accessorImpl.lAR_ID_Accessor) {
      setLAR_ID(*(accessorImpl.lAR_ID_Accessor));
    } else {
      lAR_ID_Accessor.reset();
    }
    if (accessorImpl.hasConsentRequired()) {
      setConsentRequired(accessorImpl.getConsentRequired());
    } else {
      clearConsentRequired();
    }
    if (accessorImpl.consentState_Accessor) {
      setConsentState(*(accessorImpl.consentState_Accessor));
    } else {
      consentState_Accessor.reset();
    }
    if (accessorImpl.kineticFootprint_Accessor) {
      setKineticFootprint(*(accessorImpl.kineticFootprint_Accessor));
    } else {
      kineticFootprint_Accessor.reset();
    }
    if (accessorImpl.hasTargetLockAcquired()) {
      setTargetLockAcquired(accessorImpl.getTargetLockAcquired());
    } else {
      clearTargetLockAcquired();
    }
    if (accessorImpl.munitionInFlight_Accessor) {
      setMunitionInFlight(*(accessorImpl.munitionInFlight_Accessor));
    } else {
      munitionInFlight_Accessor.reset();
    }
    if (accessorImpl.hasTimeToRelease()) {
      setTimeToRelease(accessorImpl.getTimeToRelease());
    } else {
      clearTimeToRelease();
    }
  }
}

void StrikeActivityType::reset() noexcept {
  ActivityBaseType::reset();
  selectedForKeyLoad_Accessor = false;
  weaponArmed_Accessor = false;
  readyForRelease_Accessor = false;
  selectedForRelease_Accessor = false;
  selectedForJettison_Accessor = false;
  assignedTarget_Accessor.reset();
  aO_Code_Accessor.reset();
  lAR_ID_Accessor.reset();
  clearConsentRequired();
  consentState_Accessor.reset();
  kineticFootprint_Accessor.reset();
  clearTargetLockAcquired();
  munitionInFlight_Accessor.reset();
  clearTimeToRelease();
}

xs::Boolean StrikeActivityType::getSelectedForKeyLoad() const {
  return selectedForKeyLoad_Accessor;
}

uci::type::StrikeActivityType& StrikeActivityType::setSelectedForKeyLoad(xs::Boolean value) {
  selectedForKeyLoad_Accessor = value;
  return *this;
}


xs::Boolean StrikeActivityType::getWeaponArmed() const {
  return weaponArmed_Accessor;
}

uci::type::StrikeActivityType& StrikeActivityType::setWeaponArmed(xs::Boolean value) {
  weaponArmed_Accessor = value;
  return *this;
}


xs::Boolean StrikeActivityType::getReadyForRelease() const {
  return readyForRelease_Accessor;
}

uci::type::StrikeActivityType& StrikeActivityType::setReadyForRelease(xs::Boolean value) {
  readyForRelease_Accessor = value;
  return *this;
}


xs::Boolean StrikeActivityType::getSelectedForRelease() const {
  return selectedForRelease_Accessor;
}

uci::type::StrikeActivityType& StrikeActivityType::setSelectedForRelease(xs::Boolean value) {
  selectedForRelease_Accessor = value;
  return *this;
}


xs::Boolean StrikeActivityType::getSelectedForJettison() const {
  return selectedForJettison_Accessor;
}

uci::type::StrikeActivityType& StrikeActivityType::setSelectedForJettison(xs::Boolean value) {
  selectedForJettison_Accessor = value;
  return *this;
}


uci::type::GeoLocatedObjectType& StrikeActivityType::getAssignedTarget_() const {
  if (assignedTarget_Accessor) {
    return *assignedTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getAssignedTarget(): An attempt was made to get an optional field that was not enabled, call hasAssignedTarget() to determine if it is safe to call getAssignedTarget()");
}

const uci::type::GeoLocatedObjectType& StrikeActivityType::getAssignedTarget() const {
  return getAssignedTarget_();
}

uci::type::GeoLocatedObjectType& StrikeActivityType::getAssignedTarget() {
  return getAssignedTarget_();
}

uci::type::StrikeActivityType& StrikeActivityType::setAssignedTarget(const uci::type::GeoLocatedObjectType& accessor) {
  enableAssignedTarget();
  if (&accessor != assignedTarget_Accessor.get()) {
    assignedTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeActivityType::hasAssignedTarget() const noexcept {
  return static_cast<bool>(assignedTarget_Accessor);
}

uci::type::GeoLocatedObjectType& StrikeActivityType::enableAssignedTarget(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::geoLocatedObjectType : type};
  if ((!assignedTarget_Accessor) || (assignedTarget_Accessor->getAccessorType() != requestedType)) {
    assignedTarget_Accessor = GeoLocatedObjectType::create(requestedType);
    if (!assignedTarget_Accessor) {
      throw uci::base::UCIException("Error in enableAssignedTarget(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *assignedTarget_Accessor;
}

uci::type::StrikeActivityType& StrikeActivityType::clearAssignedTarget() noexcept {
  assignedTarget_Accessor.reset();
  return *this;
}

uci::type::AO_CodeType& StrikeActivityType::getAO_Code_() const {
  if (aO_Code_Accessor) {
    return *aO_Code_Accessor;
  }
  throw uci::base::UCIException("Error in getAO_Code(): An attempt was made to get an optional field that was not enabled, call hasAO_Code() to determine if it is safe to call getAO_Code()");
}

const uci::type::AO_CodeType& StrikeActivityType::getAO_Code() const {
  return getAO_Code_();
}

uci::type::AO_CodeType& StrikeActivityType::getAO_Code() {
  return getAO_Code_();
}

uci::type::StrikeActivityType& StrikeActivityType::setAO_Code(const uci::type::AO_CodeType& accessor) {
  enableAO_Code();
  if (&accessor != aO_Code_Accessor.get()) {
    aO_Code_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeActivityType::hasAO_Code() const noexcept {
  return static_cast<bool>(aO_Code_Accessor);
}

uci::type::AO_CodeType& StrikeActivityType::enableAO_Code(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_CodeType : type};
  if ((!aO_Code_Accessor) || (aO_Code_Accessor->getAccessorType() != requestedType)) {
    aO_Code_Accessor = AO_CodeType::create(requestedType);
    if (!aO_Code_Accessor) {
      throw uci::base::UCIException("Error in enableAO_Code(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aO_Code_Accessor;
}

uci::type::StrikeActivityType& StrikeActivityType::clearAO_Code() noexcept {
  aO_Code_Accessor.reset();
  return *this;
}

uci::type::LAR_ID_Type& StrikeActivityType::getLAR_ID_() const {
  if (lAR_ID_Accessor) {
    return *lAR_ID_Accessor;
  }
  throw uci::base::UCIException("Error in getLAR_ID(): An attempt was made to get an optional field that was not enabled, call hasLAR_ID() to determine if it is safe to call getLAR_ID()");
}

const uci::type::LAR_ID_Type& StrikeActivityType::getLAR_ID() const {
  return getLAR_ID_();
}

uci::type::LAR_ID_Type& StrikeActivityType::getLAR_ID() {
  return getLAR_ID_();
}

uci::type::StrikeActivityType& StrikeActivityType::setLAR_ID(const uci::type::LAR_ID_Type& accessor) {
  enableLAR_ID();
  if (&accessor != lAR_ID_Accessor.get()) {
    lAR_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeActivityType::hasLAR_ID() const noexcept {
  return static_cast<bool>(lAR_ID_Accessor);
}

uci::type::LAR_ID_Type& StrikeActivityType::enableLAR_ID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lAR_ID_Type : type};
  if ((!lAR_ID_Accessor) || (lAR_ID_Accessor->getAccessorType() != requestedType)) {
    lAR_ID_Accessor = LAR_ID_Type::create(requestedType);
    if (!lAR_ID_Accessor) {
      throw uci::base::UCIException("Error in enableLAR_ID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lAR_ID_Accessor;
}

uci::type::StrikeActivityType& StrikeActivityType::clearLAR_ID() noexcept {
  lAR_ID_Accessor.reset();
  return *this;
}

xs::Boolean StrikeActivityType::getConsentRequired() const {
  if (consentRequired_Accessor) {
    return *consentRequired_Accessor;
  }
  throw uci::base::UCIException("Error in getConsentRequired(): An attempt was made to get an optional field that was not enabled, call hasConsentRequired() to determine if it is safe to call getConsentRequired()");
}

uci::type::StrikeActivityType& StrikeActivityType::setConsentRequired(xs::Boolean value) {
  consentRequired_Accessor = value;
  return *this;
}

bool StrikeActivityType::hasConsentRequired() const noexcept {
  return consentRequired_Accessor.has_value();
}

uci::type::StrikeActivityType& StrikeActivityType::clearConsentRequired() noexcept {
  consentRequired_Accessor.reset();
  return *this;
}

uci::type::ConsentEnum& StrikeActivityType::getConsentState_() const {
  if (consentState_Accessor) {
    return *consentState_Accessor;
  }
  throw uci::base::UCIException("Error in getConsentState(): An attempt was made to get an optional field that was not enabled, call hasConsentState() to determine if it is safe to call getConsentState()");
}

const uci::type::ConsentEnum& StrikeActivityType::getConsentState() const {
  return getConsentState_();
}

uci::type::ConsentEnum& StrikeActivityType::getConsentState() {
  return getConsentState_();
}

uci::type::StrikeActivityType& StrikeActivityType::setConsentState(const uci::type::ConsentEnum& accessor) {
  enableConsentState();
  if (&accessor != consentState_Accessor.get()) {
    consentState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::StrikeActivityType& StrikeActivityType::setConsentState(const uci::type::ConsentEnum::EnumerationItem value) {
  enableConsentState().setValue(value);
  return *this;
}

bool StrikeActivityType::hasConsentState() const noexcept {
  return static_cast<bool>(consentState_Accessor);
}

uci::type::ConsentEnum& StrikeActivityType::enableConsentState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::consentEnum : type};
  if ((!consentState_Accessor) || (consentState_Accessor->getAccessorType() != requestedType)) {
    consentState_Accessor = ConsentEnum::create(requestedType);
    if (!consentState_Accessor) {
      throw uci::base::UCIException("Error in enableConsentState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *consentState_Accessor;
}

uci::type::StrikeActivityType& StrikeActivityType::clearConsentState() noexcept {
  consentState_Accessor.reset();
  return *this;
}

uci::type::EnduranceFootprintType& StrikeActivityType::getKineticFootprint_() const {
  if (kineticFootprint_Accessor) {
    return *kineticFootprint_Accessor;
  }
  throw uci::base::UCIException("Error in getKineticFootprint(): An attempt was made to get an optional field that was not enabled, call hasKineticFootprint() to determine if it is safe to call getKineticFootprint()");
}

const uci::type::EnduranceFootprintType& StrikeActivityType::getKineticFootprint() const {
  return getKineticFootprint_();
}

uci::type::EnduranceFootprintType& StrikeActivityType::getKineticFootprint() {
  return getKineticFootprint_();
}

uci::type::StrikeActivityType& StrikeActivityType::setKineticFootprint(const uci::type::EnduranceFootprintType& accessor) {
  enableKineticFootprint();
  if (&accessor != kineticFootprint_Accessor.get()) {
    kineticFootprint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeActivityType::hasKineticFootprint() const noexcept {
  return static_cast<bool>(kineticFootprint_Accessor);
}

uci::type::EnduranceFootprintType& StrikeActivityType::enableKineticFootprint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::enduranceFootprintType : type};
  if ((!kineticFootprint_Accessor) || (kineticFootprint_Accessor->getAccessorType() != requestedType)) {
    kineticFootprint_Accessor = EnduranceFootprintType::create(requestedType);
    if (!kineticFootprint_Accessor) {
      throw uci::base::UCIException("Error in enableKineticFootprint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *kineticFootprint_Accessor;
}

uci::type::StrikeActivityType& StrikeActivityType::clearKineticFootprint() noexcept {
  kineticFootprint_Accessor.reset();
  return *this;
}

xs::Boolean StrikeActivityType::getTargetLockAcquired() const {
  if (targetLockAcquired_Accessor) {
    return *targetLockAcquired_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetLockAcquired(): An attempt was made to get an optional field that was not enabled, call hasTargetLockAcquired() to determine if it is safe to call getTargetLockAcquired()");
}

uci::type::StrikeActivityType& StrikeActivityType::setTargetLockAcquired(xs::Boolean value) {
  targetLockAcquired_Accessor = value;
  return *this;
}

bool StrikeActivityType::hasTargetLockAcquired() const noexcept {
  return targetLockAcquired_Accessor.has_value();
}

uci::type::StrikeActivityType& StrikeActivityType::clearTargetLockAcquired() noexcept {
  targetLockAcquired_Accessor.reset();
  return *this;
}

uci::type::MunitionInFlightType& StrikeActivityType::getMunitionInFlight_() const {
  if (munitionInFlight_Accessor) {
    return *munitionInFlight_Accessor;
  }
  throw uci::base::UCIException("Error in getMunitionInFlight(): An attempt was made to get an optional field that was not enabled, call hasMunitionInFlight() to determine if it is safe to call getMunitionInFlight()");
}

const uci::type::MunitionInFlightType& StrikeActivityType::getMunitionInFlight() const {
  return getMunitionInFlight_();
}

uci::type::MunitionInFlightType& StrikeActivityType::getMunitionInFlight() {
  return getMunitionInFlight_();
}

uci::type::StrikeActivityType& StrikeActivityType::setMunitionInFlight(const uci::type::MunitionInFlightType& accessor) {
  enableMunitionInFlight();
  if (&accessor != munitionInFlight_Accessor.get()) {
    munitionInFlight_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeActivityType::hasMunitionInFlight() const noexcept {
  return static_cast<bool>(munitionInFlight_Accessor);
}

uci::type::MunitionInFlightType& StrikeActivityType::enableMunitionInFlight(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::munitionInFlightType : type};
  if ((!munitionInFlight_Accessor) || (munitionInFlight_Accessor->getAccessorType() != requestedType)) {
    munitionInFlight_Accessor = MunitionInFlightType::create(requestedType);
    if (!munitionInFlight_Accessor) {
      throw uci::base::UCIException("Error in enableMunitionInFlight(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *munitionInFlight_Accessor;
}

uci::type::StrikeActivityType& StrikeActivityType::clearMunitionInFlight() noexcept {
  munitionInFlight_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue StrikeActivityType::getTimeToRelease() const {
  if (timeToRelease_Accessor) {
    return *timeToRelease_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeToRelease(): An attempt was made to get an optional field that was not enabled, call hasTimeToRelease() to determine if it is safe to call getTimeToRelease()");
}

uci::type::StrikeActivityType& StrikeActivityType::setTimeToRelease(uci::type::DurationTypeValue value) {
  timeToRelease_Accessor = value;
  return *this;
}

bool StrikeActivityType::hasTimeToRelease() const noexcept {
  return timeToRelease_Accessor.has_value();
}

uci::type::StrikeActivityType& StrikeActivityType::clearTimeToRelease() noexcept {
  timeToRelease_Accessor.reset();
  return *this;
}

std::unique_ptr<StrikeActivityType> StrikeActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeActivityType : type};
  return (requestedType == uci::type::accessorType::strikeActivityType) ? boost::make_unique<StrikeActivityType>() : nullptr;
}

/**  */
namespace StrikeActivityType_Names {

constexpr const char* Extern_Type_Name{"StrikeActivityType"};
constexpr const char* SelectedForKeyLoad_Name{"SelectedForKeyLoad"};
constexpr const char* WeaponArmed_Name{"WeaponArmed"};
constexpr const char* ReadyForRelease_Name{"ReadyForRelease"};
constexpr const char* SelectedForRelease_Name{"SelectedForRelease"};
constexpr const char* SelectedForJettison_Name{"SelectedForJettison"};
constexpr const char* AssignedTarget_Name{"AssignedTarget"};
constexpr const char* AO_Code_Name{"AO_Code"};
constexpr const char* LAR_ID_Name{"LAR_ID"};
constexpr const char* ConsentRequired_Name{"ConsentRequired"};
constexpr const char* ConsentState_Name{"ConsentState"};
constexpr const char* KineticFootprint_Name{"KineticFootprint"};
constexpr const char* TargetLockAcquired_Name{"TargetLockAcquired"};
constexpr const char* MunitionInFlight_Name{"MunitionInFlight"};
constexpr const char* TimeToRelease_Name{"TimeToRelease"};

} // namespace StrikeActivityType_Names

void StrikeActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StrikeActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StrikeActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::SelectedForKeyLoad_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectedForKeyLoad(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::WeaponArmed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWeaponArmed(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::ReadyForRelease_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReadyForRelease(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::SelectedForRelease_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectedForRelease(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::SelectedForJettison_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectedForJettison(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::AssignedTarget_Name) {
      GeoLocatedObjectType::deserialize(valueType.second, accessor.enableAssignedTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::AO_Code_Name) {
      AO_CodeType::deserialize(valueType.second, accessor.enableAO_Code(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::LAR_ID_Name) {
      LAR_ID_Type::deserialize(valueType.second, accessor.enableLAR_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::ConsentRequired_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConsentRequired(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::ConsentState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableConsentState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::KineticFootprint_Name) {
      EnduranceFootprintType::deserialize(valueType.second, accessor.enableKineticFootprint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::TargetLockAcquired_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetLockAcquired(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::MunitionInFlight_Name) {
      MunitionInFlightType::deserialize(valueType.second, accessor.enableMunitionInFlight(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::TimeToRelease_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeToRelease(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
  ActivityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string StrikeActivityType::serialize(const uci::type::StrikeActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StrikeActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StrikeActivityType_Names::Extern_Type_Name);
  }
  ActivityBaseType::serialize(accessor, node, "", false, false, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSelectedForKeyLoad(), node, StrikeActivityType_Names::SelectedForKeyLoad_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getWeaponArmed(), node, StrikeActivityType_Names::WeaponArmed_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getReadyForRelease(), node, StrikeActivityType_Names::ReadyForRelease_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSelectedForRelease(), node, StrikeActivityType_Names::SelectedForRelease_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSelectedForJettison(), node, StrikeActivityType_Names::SelectedForJettison_Name);
  if (accessor.hasAssignedTarget()) {
    GeoLocatedObjectType::serialize(accessor.getAssignedTarget(), node, StrikeActivityType_Names::AssignedTarget_Name);
  }
  if (accessor.hasAO_Code()) {
    AO_CodeType::serialize(accessor.getAO_Code(), node, StrikeActivityType_Names::AO_Code_Name);
  }
  if (accessor.hasLAR_ID()) {
    LAR_ID_Type::serialize(accessor.getLAR_ID(), node, StrikeActivityType_Names::LAR_ID_Name);
  }
  if (accessor.hasConsentRequired()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getConsentRequired(), node, StrikeActivityType_Names::ConsentRequired_Name);
  }
  if (accessor.hasConsentState()) {
    ConsentEnum::serialize(accessor.getConsentState(), node, StrikeActivityType_Names::ConsentState_Name, false);
  }
  if (accessor.hasKineticFootprint()) {
    EnduranceFootprintType::serialize(accessor.getKineticFootprint(), node, StrikeActivityType_Names::KineticFootprint_Name);
  }
  if (accessor.hasTargetLockAcquired()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getTargetLockAcquired(), node, StrikeActivityType_Names::TargetLockAcquired_Name);
  }
  if (accessor.hasMunitionInFlight()) {
    MunitionInFlightType::serialize(accessor.getMunitionInFlight(), node, StrikeActivityType_Names::MunitionInFlight_Name);
  }
  if (accessor.hasTimeToRelease()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTimeToRelease(), node, StrikeActivityType_Names::TimeToRelease_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StrikeActivityType& StrikeActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StrikeActivityType>().release());
}

uci::type::StrikeActivityType& StrikeActivityType::create(const uci::type::StrikeActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StrikeActivityType> newAccessor{boost::make_unique<asb_uci::type::StrikeActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StrikeActivityType::destroy(uci::type::StrikeActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::StrikeActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

