/** @file ComponentResourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ComponentResourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/SelectDigitalComponentResourceType.h"
#include "asb_uci/type/SelectRF_ComponentResourceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ComponentResourceType.h"
#include "uci/type/SelectDigitalComponentResourceType.h"
#include "uci/type/SelectRF_ComponentResourceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ComponentResourceType::ComponentResourceType() = default;

ComponentResourceType::~ComponentResourceType() = default;

void ComponentResourceType::copy(const uci::type::ComponentResourceType& accessor) {
  copyImpl(accessor, false);
}

void ComponentResourceType::copyImpl(const uci::type::ComponentResourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ComponentResourceType&>(accessor);
    if (accessorImpl.selectRF_Components_Accessor) {
      setSelectRF_Components(*(accessorImpl.selectRF_Components_Accessor));
    } else {
      selectRF_Components_Accessor.reset();
    }
    if (accessorImpl.selectDigitalComponents_Accessor) {
      setSelectDigitalComponents(*(accessorImpl.selectDigitalComponents_Accessor));
    } else {
      selectDigitalComponents_Accessor.reset();
    }
  }
}

void ComponentResourceType::reset() noexcept {
  selectRF_Components_Accessor.reset();
  selectDigitalComponents_Accessor.reset();
}

uci::type::ComponentResourceType::ComponentResourceTypeChoice ComponentResourceType::getComponentResourceTypeChoiceOrdinal() const noexcept {
  if (selectRF_Components_Accessor) {
    return COMPONENTRESOURCETYPE_CHOICE_SELECTRF_COMPONENTS;
  }
  if (selectDigitalComponents_Accessor) {
    return COMPONENTRESOURCETYPE_CHOICE_SELECTDIGITALCOMPONENTS;
  }
  return COMPONENTRESOURCETYPE_CHOICE_NONE;
}

uci::type::ComponentResourceType& ComponentResourceType::setComponentResourceTypeChoiceOrdinal(uci::type::ComponentResourceType::ComponentResourceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case COMPONENTRESOURCETYPE_CHOICE_SELECTRF_COMPONENTS:
      chooseSelectRF_Components("setComponentResourceTypeChoiceOrdinal", type);
      break;
    case COMPONENTRESOURCETYPE_CHOICE_SELECTDIGITALCOMPONENTS:
      chooseSelectDigitalComponents("setComponentResourceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setComponentResourceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SelectRF_ComponentResourceType& ComponentResourceType::getSelectRF_Components_() const {
  if (selectRF_Components_Accessor) {
    return *selectRF_Components_Accessor;
  }
  throw uci::base::UCIException("Error in getSelectRF_Components(): Unable to get SelectRF_Components, field not selected");
}

const uci::type::SelectRF_ComponentResourceType& ComponentResourceType::getSelectRF_Components() const {
  return getSelectRF_Components_();
}

uci::type::SelectRF_ComponentResourceType& ComponentResourceType::getSelectRF_Components() {
  return getSelectRF_Components_();
}

uci::type::ComponentResourceType& ComponentResourceType::setSelectRF_Components(const uci::type::SelectRF_ComponentResourceType& accessor) {
  chooseSelectRF_Components();
  if (&accessor != selectRF_Components_Accessor.get()) {
    selectRF_Components_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ComponentResourceType::isSelectRF_Components() const noexcept {
  return static_cast<bool>(selectRF_Components_Accessor);
}

uci::type::SelectRF_ComponentResourceType& ComponentResourceType::chooseSelectRF_Components(const std::string& method, uci::base::accessorType::AccessorType type) {
  selectDigitalComponents_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::selectRF_ComponentResourceType : type};
  if ((!selectRF_Components_Accessor) || (selectRF_Components_Accessor->getAccessorType() != requestedType)) {
    selectRF_Components_Accessor = SelectRF_ComponentResourceType::create(type);
    if (!selectRF_Components_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *selectRF_Components_Accessor;
}

uci::type::SelectRF_ComponentResourceType& ComponentResourceType::chooseSelectRF_Components(uci::base::accessorType::AccessorType type) {
  return chooseSelectRF_Components("chooseSelectRF_Components", type);
}

uci::type::SelectDigitalComponentResourceType& ComponentResourceType::getSelectDigitalComponents_() const {
  if (selectDigitalComponents_Accessor) {
    return *selectDigitalComponents_Accessor;
  }
  throw uci::base::UCIException("Error in getSelectDigitalComponents(): Unable to get SelectDigitalComponents, field not selected");
}

const uci::type::SelectDigitalComponentResourceType& ComponentResourceType::getSelectDigitalComponents() const {
  return getSelectDigitalComponents_();
}

uci::type::SelectDigitalComponentResourceType& ComponentResourceType::getSelectDigitalComponents() {
  return getSelectDigitalComponents_();
}

uci::type::ComponentResourceType& ComponentResourceType::setSelectDigitalComponents(const uci::type::SelectDigitalComponentResourceType& accessor) {
  chooseSelectDigitalComponents();
  if (&accessor != selectDigitalComponents_Accessor.get()) {
    selectDigitalComponents_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ComponentResourceType::isSelectDigitalComponents() const noexcept {
  return static_cast<bool>(selectDigitalComponents_Accessor);
}

uci::type::SelectDigitalComponentResourceType& ComponentResourceType::chooseSelectDigitalComponents(const std::string& method, uci::base::accessorType::AccessorType type) {
  selectRF_Components_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::selectDigitalComponentResourceType : type};
  if ((!selectDigitalComponents_Accessor) || (selectDigitalComponents_Accessor->getAccessorType() != requestedType)) {
    selectDigitalComponents_Accessor = SelectDigitalComponentResourceType::create(type);
    if (!selectDigitalComponents_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *selectDigitalComponents_Accessor;
}

uci::type::SelectDigitalComponentResourceType& ComponentResourceType::chooseSelectDigitalComponents(uci::base::accessorType::AccessorType type) {
  return chooseSelectDigitalComponents("chooseSelectDigitalComponents", type);
}

std::unique_ptr<ComponentResourceType> ComponentResourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentResourceType : type};
  return (requestedType == uci::type::accessorType::componentResourceType) ? boost::make_unique<ComponentResourceType>() : nullptr;
}

/**  */
namespace ComponentResourceType_Names {

constexpr const char* Extern_Type_Name{"ComponentResourceType"};
constexpr const char* SelectRF_Components_Name{"SelectRF_Components"};
constexpr const char* SelectDigitalComponents_Name{"SelectDigitalComponents"};

} // namespace ComponentResourceType_Names

void ComponentResourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ComponentResourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ComponentResourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ComponentResourceType_Names::SelectRF_Components_Name) {
      SelectRF_ComponentResourceType::deserialize(valueType.second, accessor.chooseSelectRF_Components(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentResourceType_Names::SelectDigitalComponents_Name) {
      SelectDigitalComponentResourceType::deserialize(valueType.second, accessor.chooseSelectDigitalComponents(), nodeName, nsPrefix);
    }
  }
}

std::string ComponentResourceType::serialize(const uci::type::ComponentResourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ComponentResourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ComponentResourceType_Names::Extern_Type_Name);
  }
  if (accessor.isSelectRF_Components()) {
    SelectRF_ComponentResourceType::serialize(accessor.getSelectRF_Components(), node, ComponentResourceType_Names::SelectRF_Components_Name);
  } else if (accessor.isSelectDigitalComponents()) {
    SelectDigitalComponentResourceType::serialize(accessor.getSelectDigitalComponents(), node, ComponentResourceType_Names::SelectDigitalComponents_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ComponentResourceType& ComponentResourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ComponentResourceType>().release());
}

uci::type::ComponentResourceType& ComponentResourceType::create(const uci::type::ComponentResourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ComponentResourceType> newAccessor{boost::make_unique<asb_uci::type::ComponentResourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ComponentResourceType::destroy(uci::type::ComponentResourceType& accessor) {
  delete dynamic_cast<asb_uci::type::ComponentResourceType*>(&accessor);
}

} // namespace type

} // namespace uci

