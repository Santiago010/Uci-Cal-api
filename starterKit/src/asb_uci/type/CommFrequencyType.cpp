/** @file CommFrequencyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommFrequencyType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommType.h"
#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommFrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommFrequencyType::CommFrequencyType()
  : commType_Accessor{boost::make_unique<CommType>()} {
}

CommFrequencyType::~CommFrequencyType() = default;

void CommFrequencyType::copy(const uci::type::CommFrequencyType& accessor) {
  copyImpl(accessor, false);
}

void CommFrequencyType::copyImpl(const uci::type::CommFrequencyType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommFrequencyType&>(accessor);
    setCommType(*(accessorImpl.commType_Accessor));
    if (accessorImpl.uplinkFrequencyRange_Accessor) {
      setUplinkFrequencyRange(*(accessorImpl.uplinkFrequencyRange_Accessor));
    } else {
      uplinkFrequencyRange_Accessor.reset();
    }
    if (accessorImpl.downlinkFrequencyRange_Accessor) {
      setDownlinkFrequencyRange(*(accessorImpl.downlinkFrequencyRange_Accessor));
    } else {
      downlinkFrequencyRange_Accessor.reset();
    }
  }
}

void CommFrequencyType::reset() noexcept {
  commType_Accessor->reset();
  uplinkFrequencyRange_Accessor.reset();
  downlinkFrequencyRange_Accessor.reset();
}

const uci::type::CommType& CommFrequencyType::getCommType() const {
  return *commType_Accessor;
}

uci::type::CommType& CommFrequencyType::getCommType() {
  return *commType_Accessor;
}

uci::type::CommFrequencyType& CommFrequencyType::setCommType(const uci::type::CommType& accessor) {
  if (&accessor != commType_Accessor.get()) {
    commType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FrequencyRangeType& CommFrequencyType::getUplinkFrequencyRange_() const {
  if (uplinkFrequencyRange_Accessor) {
    return *uplinkFrequencyRange_Accessor;
  }
  throw uci::base::UCIException("Error in getUplinkFrequencyRange(): An attempt was made to get an optional field that was not enabled, call hasUplinkFrequencyRange() to determine if it is safe to call getUplinkFrequencyRange()");
}

const uci::type::FrequencyRangeType& CommFrequencyType::getUplinkFrequencyRange() const {
  return getUplinkFrequencyRange_();
}

uci::type::FrequencyRangeType& CommFrequencyType::getUplinkFrequencyRange() {
  return getUplinkFrequencyRange_();
}

uci::type::CommFrequencyType& CommFrequencyType::setUplinkFrequencyRange(const uci::type::FrequencyRangeType& accessor) {
  enableUplinkFrequencyRange();
  if (&accessor != uplinkFrequencyRange_Accessor.get()) {
    uplinkFrequencyRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommFrequencyType::hasUplinkFrequencyRange() const noexcept {
  return static_cast<bool>(uplinkFrequencyRange_Accessor);
}

uci::type::FrequencyRangeType& CommFrequencyType::enableUplinkFrequencyRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyRangeType : type};
  if ((!uplinkFrequencyRange_Accessor) || (uplinkFrequencyRange_Accessor->getAccessorType() != requestedType)) {
    uplinkFrequencyRange_Accessor = FrequencyRangeType::create(requestedType);
    if (!uplinkFrequencyRange_Accessor) {
      throw uci::base::UCIException("Error in enableUplinkFrequencyRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *uplinkFrequencyRange_Accessor;
}

uci::type::CommFrequencyType& CommFrequencyType::clearUplinkFrequencyRange() noexcept {
  uplinkFrequencyRange_Accessor.reset();
  return *this;
}

uci::type::FrequencyRangeType& CommFrequencyType::getDownlinkFrequencyRange_() const {
  if (downlinkFrequencyRange_Accessor) {
    return *downlinkFrequencyRange_Accessor;
  }
  throw uci::base::UCIException("Error in getDownlinkFrequencyRange(): An attempt was made to get an optional field that was not enabled, call hasDownlinkFrequencyRange() to determine if it is safe to call getDownlinkFrequencyRange()");
}

const uci::type::FrequencyRangeType& CommFrequencyType::getDownlinkFrequencyRange() const {
  return getDownlinkFrequencyRange_();
}

uci::type::FrequencyRangeType& CommFrequencyType::getDownlinkFrequencyRange() {
  return getDownlinkFrequencyRange_();
}

uci::type::CommFrequencyType& CommFrequencyType::setDownlinkFrequencyRange(const uci::type::FrequencyRangeType& accessor) {
  enableDownlinkFrequencyRange();
  if (&accessor != downlinkFrequencyRange_Accessor.get()) {
    downlinkFrequencyRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommFrequencyType::hasDownlinkFrequencyRange() const noexcept {
  return static_cast<bool>(downlinkFrequencyRange_Accessor);
}

uci::type::FrequencyRangeType& CommFrequencyType::enableDownlinkFrequencyRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyRangeType : type};
  if ((!downlinkFrequencyRange_Accessor) || (downlinkFrequencyRange_Accessor->getAccessorType() != requestedType)) {
    downlinkFrequencyRange_Accessor = FrequencyRangeType::create(requestedType);
    if (!downlinkFrequencyRange_Accessor) {
      throw uci::base::UCIException("Error in enableDownlinkFrequencyRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *downlinkFrequencyRange_Accessor;
}

uci::type::CommFrequencyType& CommFrequencyType::clearDownlinkFrequencyRange() noexcept {
  downlinkFrequencyRange_Accessor.reset();
  return *this;
}

std::unique_ptr<CommFrequencyType> CommFrequencyType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commFrequencyType : type};
  return (requestedType == uci::type::accessorType::commFrequencyType) ? boost::make_unique<CommFrequencyType>() : nullptr;
}

/**  */
namespace CommFrequencyType_Names {

constexpr const char* Extern_Type_Name{"CommFrequencyType"};
constexpr const char* CommType_Name{"CommType"};
constexpr const char* UplinkFrequencyRange_Name{"UplinkFrequencyRange"};
constexpr const char* DownlinkFrequencyRange_Name{"DownlinkFrequencyRange"};

} // namespace CommFrequencyType_Names

void CommFrequencyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommFrequencyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommFrequencyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommFrequencyType_Names::CommType_Name) {
      CommType::deserialize(valueType.second, accessor.getCommType(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommFrequencyType_Names::UplinkFrequencyRange_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableUplinkFrequencyRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommFrequencyType_Names::DownlinkFrequencyRange_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableDownlinkFrequencyRange(), nodeName, nsPrefix);
    }
  }
}

std::string CommFrequencyType::serialize(const uci::type::CommFrequencyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommFrequencyType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommFrequencyType_Names::Extern_Type_Name);
  }
  CommType::serialize(accessor.getCommType(), node, CommFrequencyType_Names::CommType_Name);
  if (accessor.hasUplinkFrequencyRange()) {
    FrequencyRangeType::serialize(accessor.getUplinkFrequencyRange(), node, CommFrequencyType_Names::UplinkFrequencyRange_Name);
  }
  if (accessor.hasDownlinkFrequencyRange()) {
    FrequencyRangeType::serialize(accessor.getDownlinkFrequencyRange(), node, CommFrequencyType_Names::DownlinkFrequencyRange_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommFrequencyType& CommFrequencyType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommFrequencyType>().release());
}

uci::type::CommFrequencyType& CommFrequencyType::create(const uci::type::CommFrequencyType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommFrequencyType> newAccessor{boost::make_unique<asb_uci::type::CommFrequencyType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommFrequencyType::destroy(uci::type::CommFrequencyType& accessor) {
  delete dynamic_cast<asb_uci::type::CommFrequencyType*>(&accessor);
}

} // namespace type

} // namespace uci

