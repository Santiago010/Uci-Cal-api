/** @file CenterOfGravityAeroType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CenterOfGravityAeroType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CenterOfGravityAeroType.h"
#include "uci/type/DistanceOffsetType.h"
#include "uci/type/PercentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CenterOfGravityAeroType::CenterOfGravityAeroType() = default;

CenterOfGravityAeroType::~CenterOfGravityAeroType() = default;

void CenterOfGravityAeroType::copy(const uci::type::CenterOfGravityAeroType& accessor) {
  copyImpl(accessor, false);
}

void CenterOfGravityAeroType::copyImpl(const uci::type::CenterOfGravityAeroType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CenterOfGravityAeroType&>(accessor);
    if (accessorImpl.hasLateralCenterOfGravity()) {
      setLateralCenterOfGravity(accessorImpl.getLateralCenterOfGravity());
    } else {
      clearLateralCenterOfGravity();
    }
    if (accessorImpl.hasLongitudinalCenterOfGravity()) {
      setLongitudinalCenterOfGravity(accessorImpl.getLongitudinalCenterOfGravity());
    } else {
      clearLongitudinalCenterOfGravity();
    }
    if (accessorImpl.hasVerticalCenterOfGravity()) {
      setVerticalCenterOfGravity(accessorImpl.getVerticalCenterOfGravity());
    } else {
      clearVerticalCenterOfGravity();
    }
  }
}

void CenterOfGravityAeroType::reset() noexcept {
  clearLateralCenterOfGravity();
  clearLongitudinalCenterOfGravity();
  clearVerticalCenterOfGravity();
}

uci::type::DistanceOffsetTypeValue CenterOfGravityAeroType::getLateralCenterOfGravity() const {
  if (lateralCenterOfGravity_Accessor) {
    return *lateralCenterOfGravity_Accessor;
  }
  throw uci::base::UCIException("Error in getLateralCenterOfGravity(): An attempt was made to get an optional field that was not enabled, call hasLateralCenterOfGravity() to determine if it is safe to call getLateralCenterOfGravity()");
}

uci::type::CenterOfGravityAeroType& CenterOfGravityAeroType::setLateralCenterOfGravity(uci::type::DistanceOffsetTypeValue value) {
  lateralCenterOfGravity_Accessor = value;
  return *this;
}

bool CenterOfGravityAeroType::hasLateralCenterOfGravity() const noexcept {
  return lateralCenterOfGravity_Accessor.has_value();
}

uci::type::CenterOfGravityAeroType& CenterOfGravityAeroType::clearLateralCenterOfGravity() noexcept {
  lateralCenterOfGravity_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue CenterOfGravityAeroType::getLongitudinalCenterOfGravity() const {
  if (longitudinalCenterOfGravity_Accessor) {
    return *longitudinalCenterOfGravity_Accessor;
  }
  throw uci::base::UCIException("Error in getLongitudinalCenterOfGravity(): An attempt was made to get an optional field that was not enabled, call hasLongitudinalCenterOfGravity() to determine if it is safe to call getLongitudinalCenterOfGravity()");
}

uci::type::CenterOfGravityAeroType& CenterOfGravityAeroType::setLongitudinalCenterOfGravity(uci::type::PercentTypeValue value) {
  longitudinalCenterOfGravity_Accessor = value;
  return *this;
}

bool CenterOfGravityAeroType::hasLongitudinalCenterOfGravity() const noexcept {
  return longitudinalCenterOfGravity_Accessor.has_value();
}

uci::type::CenterOfGravityAeroType& CenterOfGravityAeroType::clearLongitudinalCenterOfGravity() noexcept {
  longitudinalCenterOfGravity_Accessor.reset();
  return *this;
}

uci::type::DistanceOffsetTypeValue CenterOfGravityAeroType::getVerticalCenterOfGravity() const {
  if (verticalCenterOfGravity_Accessor) {
    return *verticalCenterOfGravity_Accessor;
  }
  throw uci::base::UCIException("Error in getVerticalCenterOfGravity(): An attempt was made to get an optional field that was not enabled, call hasVerticalCenterOfGravity() to determine if it is safe to call getVerticalCenterOfGravity()");
}

uci::type::CenterOfGravityAeroType& CenterOfGravityAeroType::setVerticalCenterOfGravity(uci::type::DistanceOffsetTypeValue value) {
  verticalCenterOfGravity_Accessor = value;
  return *this;
}

bool CenterOfGravityAeroType::hasVerticalCenterOfGravity() const noexcept {
  return verticalCenterOfGravity_Accessor.has_value();
}

uci::type::CenterOfGravityAeroType& CenterOfGravityAeroType::clearVerticalCenterOfGravity() noexcept {
  verticalCenterOfGravity_Accessor.reset();
  return *this;
}

std::unique_ptr<CenterOfGravityAeroType> CenterOfGravityAeroType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::centerOfGravityAeroType : type};
  return (requestedType == uci::type::accessorType::centerOfGravityAeroType) ? boost::make_unique<CenterOfGravityAeroType>() : nullptr;
}

/**  */
namespace CenterOfGravityAeroType_Names {

constexpr const char* Extern_Type_Name{"CenterOfGravityAeroType"};
constexpr const char* LateralCenterOfGravity_Name{"LateralCenterOfGravity"};
constexpr const char* LongitudinalCenterOfGravity_Name{"LongitudinalCenterOfGravity"};
constexpr const char* VerticalCenterOfGravity_Name{"VerticalCenterOfGravity"};

} // namespace CenterOfGravityAeroType_Names

void CenterOfGravityAeroType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CenterOfGravityAeroType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CenterOfGravityAeroType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CenterOfGravityAeroType_Names::LateralCenterOfGravity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLateralCenterOfGravity(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CenterOfGravityAeroType_Names::LongitudinalCenterOfGravity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLongitudinalCenterOfGravity(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CenterOfGravityAeroType_Names::VerticalCenterOfGravity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVerticalCenterOfGravity(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string CenterOfGravityAeroType::serialize(const uci::type::CenterOfGravityAeroType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CenterOfGravityAeroType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CenterOfGravityAeroType_Names::Extern_Type_Name);
  }
  if (accessor.hasLateralCenterOfGravity()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLateralCenterOfGravity(), node, CenterOfGravityAeroType_Names::LateralCenterOfGravity_Name);
  }
  if (accessor.hasLongitudinalCenterOfGravity()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLongitudinalCenterOfGravity(), node, CenterOfGravityAeroType_Names::LongitudinalCenterOfGravity_Name);
  }
  if (accessor.hasVerticalCenterOfGravity()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVerticalCenterOfGravity(), node, CenterOfGravityAeroType_Names::VerticalCenterOfGravity_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CenterOfGravityAeroType& CenterOfGravityAeroType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CenterOfGravityAeroType>().release());
}

uci::type::CenterOfGravityAeroType& CenterOfGravityAeroType::create(const uci::type::CenterOfGravityAeroType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CenterOfGravityAeroType> newAccessor{boost::make_unique<asb_uci::type::CenterOfGravityAeroType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CenterOfGravityAeroType::destroy(uci::type::CenterOfGravityAeroType& accessor) {
  delete dynamic_cast<asb_uci::type::CenterOfGravityAeroType*>(&accessor);
}

} // namespace type

} // namespace uci

