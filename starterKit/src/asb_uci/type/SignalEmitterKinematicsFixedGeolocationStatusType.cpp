/** @file SignalEmitterKinematicsFixedGeolocationStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SignalEmitterKinematicsFixedGeolocationStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/SignalGeolocationControlEnum.h"
#include "asb_uci/type/SignalGeolocationMethodEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/SignalEmitterKinematicsFixedGeolocationStatusType.h"
#include "uci/type/SignalGeolocationControlEnum.h"
#include "uci/type/SignalGeolocationMethodEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SignalEmitterKinematicsFixedGeolocationStatusType::SignalEmitterKinematicsFixedGeolocationStatusType() = default;

SignalEmitterKinematicsFixedGeolocationStatusType::~SignalEmitterKinematicsFixedGeolocationStatusType() = default;

void SignalEmitterKinematicsFixedGeolocationStatusType::copy(const uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& accessor) {
  copyImpl(accessor, false);
}

void SignalEmitterKinematicsFixedGeolocationStatusType::copyImpl(const uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SignalEmitterKinematicsFixedGeolocationStatusType&>(accessor);
    if (accessorImpl.geolocationMethod_Accessor) {
      setGeolocationMethod(*(accessorImpl.geolocationMethod_Accessor));
    } else {
      geolocationMethod_Accessor.reset();
    }
    if (accessorImpl.geolocationControlState_Accessor) {
      setGeolocationControlState(*(accessorImpl.geolocationControlState_Accessor));
    } else {
      geolocationControlState_Accessor.reset();
    }
  }
}

void SignalEmitterKinematicsFixedGeolocationStatusType::reset() noexcept {
  geolocationMethod_Accessor.reset();
  geolocationControlState_Accessor.reset();
}

uci::type::SignalGeolocationMethodEnum& SignalEmitterKinematicsFixedGeolocationStatusType::getGeolocationMethod_() const {
  if (geolocationMethod_Accessor) {
    return *geolocationMethod_Accessor;
  }
  throw uci::base::UCIException("Error in getGeolocationMethod(): An attempt was made to get an optional field that was not enabled, call hasGeolocationMethod() to determine if it is safe to call getGeolocationMethod()");
}

const uci::type::SignalGeolocationMethodEnum& SignalEmitterKinematicsFixedGeolocationStatusType::getGeolocationMethod() const {
  return getGeolocationMethod_();
}

uci::type::SignalGeolocationMethodEnum& SignalEmitterKinematicsFixedGeolocationStatusType::getGeolocationMethod() {
  return getGeolocationMethod_();
}

uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& SignalEmitterKinematicsFixedGeolocationStatusType::setGeolocationMethod(const uci::type::SignalGeolocationMethodEnum& accessor) {
  enableGeolocationMethod();
  if (&accessor != geolocationMethod_Accessor.get()) {
    geolocationMethod_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& SignalEmitterKinematicsFixedGeolocationStatusType::setGeolocationMethod(const uci::type::SignalGeolocationMethodEnum::EnumerationItem value) {
  enableGeolocationMethod().setValue(value);
  return *this;
}

bool SignalEmitterKinematicsFixedGeolocationStatusType::hasGeolocationMethod() const noexcept {
  return static_cast<bool>(geolocationMethod_Accessor);
}

uci::type::SignalGeolocationMethodEnum& SignalEmitterKinematicsFixedGeolocationStatusType::enableGeolocationMethod(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalGeolocationMethodEnum : type};
  if ((!geolocationMethod_Accessor) || (geolocationMethod_Accessor->getAccessorType() != requestedType)) {
    geolocationMethod_Accessor = SignalGeolocationMethodEnum::create(requestedType);
    if (!geolocationMethod_Accessor) {
      throw uci::base::UCIException("Error in enableGeolocationMethod(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *geolocationMethod_Accessor;
}

uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& SignalEmitterKinematicsFixedGeolocationStatusType::clearGeolocationMethod() noexcept {
  geolocationMethod_Accessor.reset();
  return *this;
}

uci::type::SignalGeolocationControlEnum& SignalEmitterKinematicsFixedGeolocationStatusType::getGeolocationControlState_() const {
  if (geolocationControlState_Accessor) {
    return *geolocationControlState_Accessor;
  }
  throw uci::base::UCIException("Error in getGeolocationControlState(): An attempt was made to get an optional field that was not enabled, call hasGeolocationControlState() to determine if it is safe to call getGeolocationControlState()");
}

const uci::type::SignalGeolocationControlEnum& SignalEmitterKinematicsFixedGeolocationStatusType::getGeolocationControlState() const {
  return getGeolocationControlState_();
}

uci::type::SignalGeolocationControlEnum& SignalEmitterKinematicsFixedGeolocationStatusType::getGeolocationControlState() {
  return getGeolocationControlState_();
}

uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& SignalEmitterKinematicsFixedGeolocationStatusType::setGeolocationControlState(const uci::type::SignalGeolocationControlEnum& accessor) {
  enableGeolocationControlState();
  if (&accessor != geolocationControlState_Accessor.get()) {
    geolocationControlState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& SignalEmitterKinematicsFixedGeolocationStatusType::setGeolocationControlState(const uci::type::SignalGeolocationControlEnum::EnumerationItem value) {
  enableGeolocationControlState().setValue(value);
  return *this;
}

bool SignalEmitterKinematicsFixedGeolocationStatusType::hasGeolocationControlState() const noexcept {
  return static_cast<bool>(geolocationControlState_Accessor);
}

uci::type::SignalGeolocationControlEnum& SignalEmitterKinematicsFixedGeolocationStatusType::enableGeolocationControlState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalGeolocationControlEnum : type};
  if ((!geolocationControlState_Accessor) || (geolocationControlState_Accessor->getAccessorType() != requestedType)) {
    geolocationControlState_Accessor = SignalGeolocationControlEnum::create(requestedType);
    if (!geolocationControlState_Accessor) {
      throw uci::base::UCIException("Error in enableGeolocationControlState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *geolocationControlState_Accessor;
}

uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& SignalEmitterKinematicsFixedGeolocationStatusType::clearGeolocationControlState() noexcept {
  geolocationControlState_Accessor.reset();
  return *this;
}

std::unique_ptr<SignalEmitterKinematicsFixedGeolocationStatusType> SignalEmitterKinematicsFixedGeolocationStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalEmitterKinematicsFixedGeolocationStatusType : type};
  return (requestedType == uci::type::accessorType::signalEmitterKinematicsFixedGeolocationStatusType) ? boost::make_unique<SignalEmitterKinematicsFixedGeolocationStatusType>() : nullptr;
}

/**  */
namespace SignalEmitterKinematicsFixedGeolocationStatusType_Names {

constexpr const char* Extern_Type_Name{"SignalEmitterKinematicsFixedGeolocationStatusType"};
constexpr const char* GeolocationMethod_Name{"GeolocationMethod"};
constexpr const char* GeolocationControlState_Name{"GeolocationControlState"};

} // namespace SignalEmitterKinematicsFixedGeolocationStatusType_Names

void SignalEmitterKinematicsFixedGeolocationStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SignalEmitterKinematicsFixedGeolocationStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SignalEmitterKinematicsFixedGeolocationStatusType_Names::GeolocationMethod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableGeolocationMethod().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalEmitterKinematicsFixedGeolocationStatusType_Names::GeolocationControlState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableGeolocationControlState().setValueFromName(*value);
      }
    }
  }
}

std::string SignalEmitterKinematicsFixedGeolocationStatusType::serialize(const uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SignalEmitterKinematicsFixedGeolocationStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SignalEmitterKinematicsFixedGeolocationStatusType_Names::Extern_Type_Name);
  }
  if (accessor.hasGeolocationMethod()) {
    SignalGeolocationMethodEnum::serialize(accessor.getGeolocationMethod(), node, SignalEmitterKinematicsFixedGeolocationStatusType_Names::GeolocationMethod_Name, false);
  }
  if (accessor.hasGeolocationControlState()) {
    SignalGeolocationControlEnum::serialize(accessor.getGeolocationControlState(), node, SignalEmitterKinematicsFixedGeolocationStatusType_Names::GeolocationControlState_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& SignalEmitterKinematicsFixedGeolocationStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SignalEmitterKinematicsFixedGeolocationStatusType>().release());
}

uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& SignalEmitterKinematicsFixedGeolocationStatusType::create(const uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SignalEmitterKinematicsFixedGeolocationStatusType> newAccessor{boost::make_unique<asb_uci::type::SignalEmitterKinematicsFixedGeolocationStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SignalEmitterKinematicsFixedGeolocationStatusType::destroy(uci::type::SignalEmitterKinematicsFixedGeolocationStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::SignalEmitterKinematicsFixedGeolocationStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

