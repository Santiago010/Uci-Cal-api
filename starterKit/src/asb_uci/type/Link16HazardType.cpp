/** @file Link16HazardType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/Link16HazardType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/Link16HazardBurstEnum.h"
#include "../../../include/asb_uci/type/Link16HazardYieldEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16HazardBurstEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16HazardType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16HazardYieldEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

Link16HazardType::Link16HazardType() = default;

Link16HazardType::~Link16HazardType() = default;

void Link16HazardType::copy(const uci::type::Link16HazardType& accessor) {
  copyImpl(accessor, false);
}

void Link16HazardType::copyImpl(const uci::type::Link16HazardType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const Link16HazardType&>(accessor);
    if (accessorImpl.burst_Accessor) {
      setBurst(*(accessorImpl.burst_Accessor));
    } else {
      burst_Accessor.reset();
    }
    if (accessorImpl.yield_Accessor) {
      setYield(*(accessorImpl.yield_Accessor));
    } else {
      yield_Accessor.reset();
    }
  }
}

void Link16HazardType::reset() noexcept {
  burst_Accessor.reset();
  yield_Accessor.reset();
}

uci::type::Link16HazardBurstEnum& Link16HazardType::getBurst_() const {
  if (burst_Accessor) {
    return *burst_Accessor;
  }
  throw uci::base::UCIException("Error in getBurst(): An attempt was made to get an optional field that was not enabled, call hasBurst() to determine if it is safe to call getBurst()");
}

const uci::type::Link16HazardBurstEnum& Link16HazardType::getBurst() const {
  return getBurst_();
}

uci::type::Link16HazardBurstEnum& Link16HazardType::getBurst() {
  return getBurst_();
}

uci::type::Link16HazardType& Link16HazardType::setBurst(const uci::type::Link16HazardBurstEnum& accessor) {
  enableBurst();
  if (&accessor != burst_Accessor.get()) {
    burst_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::Link16HazardType& Link16HazardType::setBurst(const uci::type::Link16HazardBurstEnum::EnumerationItem value) {
  enableBurst().setValue(value);
  return *this;
}

bool Link16HazardType::hasBurst() const noexcept {
  return static_cast<bool>(burst_Accessor);
}

uci::type::Link16HazardBurstEnum& Link16HazardType::enableBurst(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::link16HazardBurstEnum : type};
  if ((!burst_Accessor) || (burst_Accessor->getAccessorType() != requestedType)) {
    burst_Accessor = Link16HazardBurstEnum::create(requestedType);
    if (!burst_Accessor) {
      throw uci::base::UCIException("Error in enableBurst(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *burst_Accessor;
}

uci::type::Link16HazardType& Link16HazardType::clearBurst() noexcept {
  burst_Accessor.reset();
  return *this;
}

uci::type::Link16HazardYieldEnum& Link16HazardType::getYield_() const {
  if (yield_Accessor) {
    return *yield_Accessor;
  }
  throw uci::base::UCIException("Error in getYield(): An attempt was made to get an optional field that was not enabled, call hasYield() to determine if it is safe to call getYield()");
}

const uci::type::Link16HazardYieldEnum& Link16HazardType::getYield() const {
  return getYield_();
}

uci::type::Link16HazardYieldEnum& Link16HazardType::getYield() {
  return getYield_();
}

uci::type::Link16HazardType& Link16HazardType::setYield(const uci::type::Link16HazardYieldEnum& accessor) {
  enableYield();
  if (&accessor != yield_Accessor.get()) {
    yield_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::Link16HazardType& Link16HazardType::setYield(const uci::type::Link16HazardYieldEnum::EnumerationItem value) {
  enableYield().setValue(value);
  return *this;
}

bool Link16HazardType::hasYield() const noexcept {
  return static_cast<bool>(yield_Accessor);
}

uci::type::Link16HazardYieldEnum& Link16HazardType::enableYield(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::link16HazardYieldEnum : type};
  if ((!yield_Accessor) || (yield_Accessor->getAccessorType() != requestedType)) {
    yield_Accessor = Link16HazardYieldEnum::create(requestedType);
    if (!yield_Accessor) {
      throw uci::base::UCIException("Error in enableYield(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *yield_Accessor;
}

uci::type::Link16HazardType& Link16HazardType::clearYield() noexcept {
  yield_Accessor.reset();
  return *this;
}

std::unique_ptr<Link16HazardType> Link16HazardType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::link16HazardType : type};
  return (requestedType == uci::type::accessorType::link16HazardType) ? boost::make_unique<Link16HazardType>() : nullptr;
}

/**  */
namespace Link16HazardType_Names {

constexpr const char* Extern_Type_Name{"Link16HazardType"};
constexpr const char* Burst_Name{"Burst"};
constexpr const char* Yield_Name{"Yield"};

} // namespace Link16HazardType_Names

void Link16HazardType::deserialize(const boost::property_tree::ptree& propTree, uci::type::Link16HazardType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = Link16HazardType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + Link16HazardType_Names::Burst_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableBurst().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + Link16HazardType_Names::Yield_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableYield().setValueFromName(*value);
      }
    }
  }
}

std::string Link16HazardType::serialize(const uci::type::Link16HazardType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? Link16HazardType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, Link16HazardType_Names::Extern_Type_Name);
  }
  if (accessor.hasBurst()) {
    Link16HazardBurstEnum::serialize(accessor.getBurst(), node, Link16HazardType_Names::Burst_Name, false);
  }
  if (accessor.hasYield()) {
    Link16HazardYieldEnum::serialize(accessor.getYield(), node, Link16HazardType_Names::Yield_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::Link16HazardType& Link16HazardType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::Link16HazardType>().release());
}

uci::type::Link16HazardType& Link16HazardType::create(const uci::type::Link16HazardType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::Link16HazardType> newAccessor{boost::make_unique<asb_uci::type::Link16HazardType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void Link16HazardType::destroy(uci::type::Link16HazardType& accessor) {
  delete dynamic_cast<asb_uci::type::Link16HazardType*>(&accessor);
}

} // namespace type

} // namespace uci

