/** @file ConeAngleSlantRangeCovarianceRatesType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ConeAngleSlantRangeCovarianceRatesType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ConeAngleSlantRangeCovarianceRatesType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ConeAngleSlantRangeCovarianceRatesType::ConeAngleSlantRangeCovarianceRatesType() = default;

ConeAngleSlantRangeCovarianceRatesType::~ConeAngleSlantRangeCovarianceRatesType() = default;

void ConeAngleSlantRangeCovarianceRatesType::copy(const uci::type::ConeAngleSlantRangeCovarianceRatesType& accessor) {
  copyImpl(accessor, false);
}

void ConeAngleSlantRangeCovarianceRatesType::copyImpl(const uci::type::ConeAngleSlantRangeCovarianceRatesType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ConeAngleSlantRangeCovarianceRatesType&>(accessor);
    if (accessorImpl.hasCosconeY_SlantRangeRate()) {
      setCosconeY_SlantRangeRate(accessorImpl.getCosconeY_SlantRangeRate());
    } else {
      clearCosconeY_SlantRangeRate();
    }
    if (accessorImpl.hasCosconeZ_SlantRangeRate()) {
      setCosconeZ_SlantRangeRate(accessorImpl.getCosconeZ_SlantRangeRate());
    } else {
      clearCosconeZ_SlantRangeRate();
    }
    if (accessorImpl.hasSlantRangeCosconeY_Rate()) {
      setSlantRangeCosconeY_Rate(accessorImpl.getSlantRangeCosconeY_Rate());
    } else {
      clearSlantRangeCosconeY_Rate();
    }
    if (accessorImpl.hasSlantRangeCosconeZ_Rate()) {
      setSlantRangeCosconeZ_Rate(accessorImpl.getSlantRangeCosconeZ_Rate());
    } else {
      clearSlantRangeCosconeZ_Rate();
    }
  }
}

void ConeAngleSlantRangeCovarianceRatesType::reset() noexcept {
  clearCosconeY_SlantRangeRate();
  clearCosconeZ_SlantRangeRate();
  clearSlantRangeCosconeY_Rate();
  clearSlantRangeCosconeZ_Rate();
}

xs::Double ConeAngleSlantRangeCovarianceRatesType::getCosconeY_SlantRangeRate() const {
  if (cosconeY_SlantRangeRate_Accessor) {
    return *cosconeY_SlantRangeRate_Accessor;
  }
  throw uci::base::UCIException("Error in getCosconeY_SlantRangeRate(): An attempt was made to get an optional field that was not enabled, call hasCosconeY_SlantRangeRate() to determine if it is safe to call getCosconeY_SlantRangeRate()");
}

uci::type::ConeAngleSlantRangeCovarianceRatesType& ConeAngleSlantRangeCovarianceRatesType::setCosconeY_SlantRangeRate(xs::Double value) {
  cosconeY_SlantRangeRate_Accessor = value;
  return *this;
}

bool ConeAngleSlantRangeCovarianceRatesType::hasCosconeY_SlantRangeRate() const noexcept {
  return cosconeY_SlantRangeRate_Accessor.has_value();
}

uci::type::ConeAngleSlantRangeCovarianceRatesType& ConeAngleSlantRangeCovarianceRatesType::clearCosconeY_SlantRangeRate() noexcept {
  cosconeY_SlantRangeRate_Accessor.reset();
  return *this;
}

xs::Double ConeAngleSlantRangeCovarianceRatesType::getCosconeZ_SlantRangeRate() const {
  if (cosconeZ_SlantRangeRate_Accessor) {
    return *cosconeZ_SlantRangeRate_Accessor;
  }
  throw uci::base::UCIException("Error in getCosconeZ_SlantRangeRate(): An attempt was made to get an optional field that was not enabled, call hasCosconeZ_SlantRangeRate() to determine if it is safe to call getCosconeZ_SlantRangeRate()");
}

uci::type::ConeAngleSlantRangeCovarianceRatesType& ConeAngleSlantRangeCovarianceRatesType::setCosconeZ_SlantRangeRate(xs::Double value) {
  cosconeZ_SlantRangeRate_Accessor = value;
  return *this;
}

bool ConeAngleSlantRangeCovarianceRatesType::hasCosconeZ_SlantRangeRate() const noexcept {
  return cosconeZ_SlantRangeRate_Accessor.has_value();
}

uci::type::ConeAngleSlantRangeCovarianceRatesType& ConeAngleSlantRangeCovarianceRatesType::clearCosconeZ_SlantRangeRate() noexcept {
  cosconeZ_SlantRangeRate_Accessor.reset();
  return *this;
}

xs::Double ConeAngleSlantRangeCovarianceRatesType::getSlantRangeCosconeY_Rate() const {
  if (slantRangeCosconeY_Rate_Accessor) {
    return *slantRangeCosconeY_Rate_Accessor;
  }
  throw uci::base::UCIException("Error in getSlantRangeCosconeY_Rate(): An attempt was made to get an optional field that was not enabled, call hasSlantRangeCosconeY_Rate() to determine if it is safe to call getSlantRangeCosconeY_Rate()");
}

uci::type::ConeAngleSlantRangeCovarianceRatesType& ConeAngleSlantRangeCovarianceRatesType::setSlantRangeCosconeY_Rate(xs::Double value) {
  slantRangeCosconeY_Rate_Accessor = value;
  return *this;
}

bool ConeAngleSlantRangeCovarianceRatesType::hasSlantRangeCosconeY_Rate() const noexcept {
  return slantRangeCosconeY_Rate_Accessor.has_value();
}

uci::type::ConeAngleSlantRangeCovarianceRatesType& ConeAngleSlantRangeCovarianceRatesType::clearSlantRangeCosconeY_Rate() noexcept {
  slantRangeCosconeY_Rate_Accessor.reset();
  return *this;
}

xs::Double ConeAngleSlantRangeCovarianceRatesType::getSlantRangeCosconeZ_Rate() const {
  if (slantRangeCosconeZ_Rate_Accessor) {
    return *slantRangeCosconeZ_Rate_Accessor;
  }
  throw uci::base::UCIException("Error in getSlantRangeCosconeZ_Rate(): An attempt was made to get an optional field that was not enabled, call hasSlantRangeCosconeZ_Rate() to determine if it is safe to call getSlantRangeCosconeZ_Rate()");
}

uci::type::ConeAngleSlantRangeCovarianceRatesType& ConeAngleSlantRangeCovarianceRatesType::setSlantRangeCosconeZ_Rate(xs::Double value) {
  slantRangeCosconeZ_Rate_Accessor = value;
  return *this;
}

bool ConeAngleSlantRangeCovarianceRatesType::hasSlantRangeCosconeZ_Rate() const noexcept {
  return slantRangeCosconeZ_Rate_Accessor.has_value();
}

uci::type::ConeAngleSlantRangeCovarianceRatesType& ConeAngleSlantRangeCovarianceRatesType::clearSlantRangeCosconeZ_Rate() noexcept {
  slantRangeCosconeZ_Rate_Accessor.reset();
  return *this;
}

std::unique_ptr<ConeAngleSlantRangeCovarianceRatesType> ConeAngleSlantRangeCovarianceRatesType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::coneAngleSlantRangeCovarianceRatesType : type};
  return (requestedType == uci::type::accessorType::coneAngleSlantRangeCovarianceRatesType) ? boost::make_unique<ConeAngleSlantRangeCovarianceRatesType>() : nullptr;
}

/**  */
namespace ConeAngleSlantRangeCovarianceRatesType_Names {

constexpr const char* Extern_Type_Name{"ConeAngleSlantRangeCovarianceRatesType"};
constexpr const char* CosconeY_SlantRangeRate_Name{"CosconeY_SlantRangeRate"};
constexpr const char* CosconeZ_SlantRangeRate_Name{"CosconeZ_SlantRangeRate"};
constexpr const char* SlantRangeCosconeY_Rate_Name{"SlantRangeCosconeY_Rate"};
constexpr const char* SlantRangeCosconeZ_Rate_Name{"SlantRangeCosconeZ_Rate"};

} // namespace ConeAngleSlantRangeCovarianceRatesType_Names

void ConeAngleSlantRangeCovarianceRatesType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ConeAngleSlantRangeCovarianceRatesType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ConeAngleSlantRangeCovarianceRatesType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ConeAngleSlantRangeCovarianceRatesType_Names::CosconeY_SlantRangeRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeY_SlantRangeRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ConeAngleSlantRangeCovarianceRatesType_Names::CosconeZ_SlantRangeRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeZ_SlantRangeRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ConeAngleSlantRangeCovarianceRatesType_Names::SlantRangeCosconeY_Rate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSlantRangeCosconeY_Rate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ConeAngleSlantRangeCovarianceRatesType_Names::SlantRangeCosconeZ_Rate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSlantRangeCosconeZ_Rate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string ConeAngleSlantRangeCovarianceRatesType::serialize(const uci::type::ConeAngleSlantRangeCovarianceRatesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ConeAngleSlantRangeCovarianceRatesType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ConeAngleSlantRangeCovarianceRatesType_Names::Extern_Type_Name);
  }
  if (accessor.hasCosconeY_SlantRangeRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeY_SlantRangeRate(), node, ConeAngleSlantRangeCovarianceRatesType_Names::CosconeY_SlantRangeRate_Name);
  }
  if (accessor.hasCosconeZ_SlantRangeRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeZ_SlantRangeRate(), node, ConeAngleSlantRangeCovarianceRatesType_Names::CosconeZ_SlantRangeRate_Name);
  }
  if (accessor.hasSlantRangeCosconeY_Rate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSlantRangeCosconeY_Rate(), node, ConeAngleSlantRangeCovarianceRatesType_Names::SlantRangeCosconeY_Rate_Name);
  }
  if (accessor.hasSlantRangeCosconeZ_Rate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSlantRangeCosconeZ_Rate(), node, ConeAngleSlantRangeCovarianceRatesType_Names::SlantRangeCosconeZ_Rate_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ConeAngleSlantRangeCovarianceRatesType& ConeAngleSlantRangeCovarianceRatesType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ConeAngleSlantRangeCovarianceRatesType>().release());
}

uci::type::ConeAngleSlantRangeCovarianceRatesType& ConeAngleSlantRangeCovarianceRatesType::create(const uci::type::ConeAngleSlantRangeCovarianceRatesType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ConeAngleSlantRangeCovarianceRatesType> newAccessor{boost::make_unique<asb_uci::type::ConeAngleSlantRangeCovarianceRatesType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ConeAngleSlantRangeCovarianceRatesType::destroy(uci::type::ConeAngleSlantRangeCovarianceRatesType& accessor) {
  delete dynamic_cast<asb_uci::type::ConeAngleSlantRangeCovarianceRatesType*>(&accessor);
}

} // namespace type

} // namespace uci

