/** @file OpBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OpBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CreationSourceEnum.h"
#include "asb_uci/type/DataLinkIdentifierPET.h"
#include "asb_uci/type/MissionTraceabilityType.h"
#include "asb_uci/type/OpDescriptionType.h"
#include "asb_uci/type/QualifyingTagsType.h"
#include "asb_uci/type/ScheduleType.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/type/SystemScheduleStateType.h"
#include "asb_uci/type/TimeFunctionType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CreationSourceEnum.h"
#include "uci/type/DataLinkIdentifierPET.h"
#include "uci/type/MissionTraceabilityType.h"
#include "uci/type/OpBaseType.h"
#include "uci/type/OpDescriptionType.h"
#include "uci/type/QualifyingTagsType.h"
#include "uci/type/ScheduleType.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/SystemScheduleStateType.h"
#include "uci/type/TimeFunctionType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpBaseType::OpBaseType()
  : associatedTime_Accessor{boost::make_unique<AssociatedTime>(0, 12)},
    dataLinkIdentifier_Accessor{boost::make_unique<DataLinkIdentifier>(0, SIZE_MAX)},
    systemID_Accessor{boost::make_unique<SystemID>(0, SIZE_MAX)},
    systemScheduleOverride_Accessor{boost::make_unique<SystemScheduleOverride>(0, SIZE_MAX)} {
}

OpBaseType::~OpBaseType() = default;

void OpBaseType::copy(const uci::type::OpBaseType& accessor) {
  copyImpl(accessor, false);
}

void OpBaseType::copyImpl(const uci::type::OpBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::opBaseType)) {
      const auto& accessorImpl = dynamic_cast<const OpBaseType&>(accessor);
      if (accessorImpl.opDescription_Accessor) {
        setOpDescription(*(accessorImpl.opDescription_Accessor));
      } else {
        opDescription_Accessor.reset();
      }
      if (accessorImpl.missionTraceability_Accessor) {
        setMissionTraceability(*(accessorImpl.missionTraceability_Accessor));
      } else {
        missionTraceability_Accessor.reset();
      }
      if (accessorImpl.source_Accessor) {
        setSource(*(accessorImpl.source_Accessor));
      } else {
        source_Accessor.reset();
      }
      if (accessorImpl.schedule_Accessor) {
        setSchedule(*(accessorImpl.schedule_Accessor));
      } else {
        schedule_Accessor.reset();
      }
      setAssociatedTime(*(accessorImpl.associatedTime_Accessor));
      setDataLinkIdentifier(*(accessorImpl.dataLinkIdentifier_Accessor));
      if (accessorImpl.hasPriority()) {
        setPriority(accessorImpl.getPriority());
      } else {
        clearPriority();
      }
      if (accessorImpl.qualifyingTags_Accessor) {
        setQualifyingTags(*(accessorImpl.qualifyingTags_Accessor));
      } else {
        qualifyingTags_Accessor.reset();
      }
      setSystemID(*(accessorImpl.systemID_Accessor));
      setSystemScheduleOverride(*(accessorImpl.systemScheduleOverride_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void OpBaseType::reset() noexcept {
  opDescription_Accessor.reset();
  missionTraceability_Accessor.reset();
  source_Accessor.reset();
  schedule_Accessor.reset();
  associatedTime_Accessor->reset();
  dataLinkIdentifier_Accessor->reset();
  clearPriority();
  qualifyingTags_Accessor.reset();
  systemID_Accessor->reset();
  systemScheduleOverride_Accessor->reset();
}

uci::type::OpDescriptionType& OpBaseType::getOpDescription_() const {
  if (opDescription_Accessor) {
    return *opDescription_Accessor;
  }
  throw uci::base::UCIException("Error in getOpDescription(): An attempt was made to get an optional field that was not enabled, call hasOpDescription() to determine if it is safe to call getOpDescription()");
}

const uci::type::OpDescriptionType& OpBaseType::getOpDescription() const {
  return getOpDescription_();
}

uci::type::OpDescriptionType& OpBaseType::getOpDescription() {
  return getOpDescription_();
}

uci::type::OpBaseType& OpBaseType::setOpDescription(const uci::type::OpDescriptionType& accessor) {
  enableOpDescription();
  if (&accessor != opDescription_Accessor.get()) {
    opDescription_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpBaseType::hasOpDescription() const noexcept {
  return static_cast<bool>(opDescription_Accessor);
}

uci::type::OpDescriptionType& OpBaseType::enableOpDescription(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opDescriptionType : type};
  if ((!opDescription_Accessor) || (opDescription_Accessor->getAccessorType() != requestedType)) {
    opDescription_Accessor = OpDescriptionType::create(requestedType);
    if (!opDescription_Accessor) {
      throw uci::base::UCIException("Error in enableOpDescription(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opDescription_Accessor;
}

uci::type::OpBaseType& OpBaseType::clearOpDescription() noexcept {
  opDescription_Accessor.reset();
  return *this;
}

uci::type::MissionTraceabilityType& OpBaseType::getMissionTraceability_() const {
  if (missionTraceability_Accessor) {
    return *missionTraceability_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionTraceability(): An attempt was made to get an optional field that was not enabled, call hasMissionTraceability() to determine if it is safe to call getMissionTraceability()");
}

const uci::type::MissionTraceabilityType& OpBaseType::getMissionTraceability() const {
  return getMissionTraceability_();
}

uci::type::MissionTraceabilityType& OpBaseType::getMissionTraceability() {
  return getMissionTraceability_();
}

uci::type::OpBaseType& OpBaseType::setMissionTraceability(const uci::type::MissionTraceabilityType& accessor) {
  enableMissionTraceability();
  if (&accessor != missionTraceability_Accessor.get()) {
    missionTraceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpBaseType::hasMissionTraceability() const noexcept {
  return static_cast<bool>(missionTraceability_Accessor);
}

uci::type::MissionTraceabilityType& OpBaseType::enableMissionTraceability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionTraceabilityType : type};
  if ((!missionTraceability_Accessor) || (missionTraceability_Accessor->getAccessorType() != requestedType)) {
    missionTraceability_Accessor = MissionTraceabilityType::create(requestedType);
    if (!missionTraceability_Accessor) {
      throw uci::base::UCIException("Error in enableMissionTraceability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionTraceability_Accessor;
}

uci::type::OpBaseType& OpBaseType::clearMissionTraceability() noexcept {
  missionTraceability_Accessor.reset();
  return *this;
}

uci::type::CreationSourceEnum& OpBaseType::getSource_() const {
  if (source_Accessor) {
    return *source_Accessor;
  }
  throw uci::base::UCIException("Error in getSource(): An attempt was made to get an optional field that was not enabled, call hasSource() to determine if it is safe to call getSource()");
}

const uci::type::CreationSourceEnum& OpBaseType::getSource() const {
  return getSource_();
}

uci::type::CreationSourceEnum& OpBaseType::getSource() {
  return getSource_();
}

uci::type::OpBaseType& OpBaseType::setSource(const uci::type::CreationSourceEnum& accessor) {
  enableSource();
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpBaseType& OpBaseType::setSource(const uci::type::CreationSourceEnum::EnumerationItem value) {
  enableSource().setValue(value);
  return *this;
}

bool OpBaseType::hasSource() const noexcept {
  return static_cast<bool>(source_Accessor);
}

uci::type::CreationSourceEnum& OpBaseType::enableSource(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::creationSourceEnum : type};
  if ((!source_Accessor) || (source_Accessor->getAccessorType() != requestedType)) {
    source_Accessor = CreationSourceEnum::create(requestedType);
    if (!source_Accessor) {
      throw uci::base::UCIException("Error in enableSource(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *source_Accessor;
}

uci::type::OpBaseType& OpBaseType::clearSource() noexcept {
  source_Accessor.reset();
  return *this;
}

uci::type::ScheduleType& OpBaseType::getSchedule_() const {
  if (schedule_Accessor) {
    return *schedule_Accessor;
  }
  throw uci::base::UCIException("Error in getSchedule(): An attempt was made to get an optional field that was not enabled, call hasSchedule() to determine if it is safe to call getSchedule()");
}

const uci::type::ScheduleType& OpBaseType::getSchedule() const {
  return getSchedule_();
}

uci::type::ScheduleType& OpBaseType::getSchedule() {
  return getSchedule_();
}

uci::type::OpBaseType& OpBaseType::setSchedule(const uci::type::ScheduleType& accessor) {
  enableSchedule();
  if (&accessor != schedule_Accessor.get()) {
    schedule_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpBaseType::hasSchedule() const noexcept {
  return static_cast<bool>(schedule_Accessor);
}

uci::type::ScheduleType& OpBaseType::enableSchedule(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::scheduleType : type};
  if ((!schedule_Accessor) || (schedule_Accessor->getAccessorType() != requestedType)) {
    schedule_Accessor = ScheduleType::create(requestedType);
    if (!schedule_Accessor) {
      throw uci::base::UCIException("Error in enableSchedule(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *schedule_Accessor;
}

uci::type::OpBaseType& OpBaseType::clearSchedule() noexcept {
  schedule_Accessor.reset();
  return *this;
}

const uci::type::OpBaseType::AssociatedTime& OpBaseType::getAssociatedTime() const {
  return *associatedTime_Accessor;
}

uci::type::OpBaseType::AssociatedTime& OpBaseType::getAssociatedTime() {
  return *associatedTime_Accessor;
}

uci::type::OpBaseType& OpBaseType::setAssociatedTime(const uci::type::OpBaseType::AssociatedTime& accessor) {
  if (&accessor != associatedTime_Accessor.get()) {
    associatedTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OpBaseType::DataLinkIdentifier& OpBaseType::getDataLinkIdentifier() const {
  return *dataLinkIdentifier_Accessor;
}

uci::type::OpBaseType::DataLinkIdentifier& OpBaseType::getDataLinkIdentifier() {
  return *dataLinkIdentifier_Accessor;
}

uci::type::OpBaseType& OpBaseType::setDataLinkIdentifier(const uci::type::OpBaseType::DataLinkIdentifier& accessor) {
  if (&accessor != dataLinkIdentifier_Accessor.get()) {
    dataLinkIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt OpBaseType::getPriority() const {
  if (priority_Accessor) {
    return *priority_Accessor;
  }
  throw uci::base::UCIException("Error in getPriority(): An attempt was made to get an optional field that was not enabled, call hasPriority() to determine if it is safe to call getPriority()");
}

uci::type::OpBaseType& OpBaseType::setPriority(xs::UnsignedInt value) {
  priority_Accessor = value;
  return *this;
}

bool OpBaseType::hasPriority() const noexcept {
  return priority_Accessor.has_value();
}

uci::type::OpBaseType& OpBaseType::clearPriority() noexcept {
  priority_Accessor.reset();
  return *this;
}

uci::type::QualifyingTagsType& OpBaseType::getQualifyingTags_() const {
  if (qualifyingTags_Accessor) {
    return *qualifyingTags_Accessor;
  }
  throw uci::base::UCIException("Error in getQualifyingTags(): An attempt was made to get an optional field that was not enabled, call hasQualifyingTags() to determine if it is safe to call getQualifyingTags()");
}

const uci::type::QualifyingTagsType& OpBaseType::getQualifyingTags() const {
  return getQualifyingTags_();
}

uci::type::QualifyingTagsType& OpBaseType::getQualifyingTags() {
  return getQualifyingTags_();
}

uci::type::OpBaseType& OpBaseType::setQualifyingTags(const uci::type::QualifyingTagsType& accessor) {
  enableQualifyingTags();
  if (&accessor != qualifyingTags_Accessor.get()) {
    qualifyingTags_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpBaseType::hasQualifyingTags() const noexcept {
  return static_cast<bool>(qualifyingTags_Accessor);
}

uci::type::QualifyingTagsType& OpBaseType::enableQualifyingTags(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::qualifyingTagsType : type};
  if ((!qualifyingTags_Accessor) || (qualifyingTags_Accessor->getAccessorType() != requestedType)) {
    qualifyingTags_Accessor = QualifyingTagsType::create(requestedType);
    if (!qualifyingTags_Accessor) {
      throw uci::base::UCIException("Error in enableQualifyingTags(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *qualifyingTags_Accessor;
}

uci::type::OpBaseType& OpBaseType::clearQualifyingTags() noexcept {
  qualifyingTags_Accessor.reset();
  return *this;
}

const uci::type::OpBaseType::SystemID& OpBaseType::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::OpBaseType::SystemID& OpBaseType::getSystemID() {
  return *systemID_Accessor;
}

uci::type::OpBaseType& OpBaseType::setSystemID(const uci::type::OpBaseType::SystemID& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OpBaseType::SystemScheduleOverride& OpBaseType::getSystemScheduleOverride() const {
  return *systemScheduleOverride_Accessor;
}

uci::type::OpBaseType::SystemScheduleOverride& OpBaseType::getSystemScheduleOverride() {
  return *systemScheduleOverride_Accessor;
}

uci::type::OpBaseType& OpBaseType::setSystemScheduleOverride(const uci::type::OpBaseType::SystemScheduleOverride& accessor) {
  if (&accessor != systemScheduleOverride_Accessor.get()) {
    systemScheduleOverride_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<OpBaseType> OpBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opBaseType : type};
  return std::unique_ptr<OpBaseType>(dynamic_cast<OpBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace OpBaseType_Names {

constexpr const char* Extern_Type_Name{"OpBaseType"};
constexpr const char* OpDescription_Name{"OpDescription"};
constexpr const char* MissionTraceability_Name{"MissionTraceability"};
constexpr const char* Source_Name{"Source"};
constexpr const char* Schedule_Name{"Schedule"};
constexpr const char* AssociatedTime_Name{"AssociatedTime"};
constexpr const char* DataLinkIdentifier_Name{"DataLinkIdentifier"};
constexpr const char* Priority_Name{"Priority"};
constexpr const char* QualifyingTags_Name{"QualifyingTags"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* SystemScheduleOverride_Name{"SystemScheduleOverride"};

} // namespace OpBaseType_Names

void OpBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpBaseType_Names::OpDescription_Name) {
      OpDescriptionType::deserialize(valueType.second, accessor.enableOpDescription(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpBaseType_Names::MissionTraceability_Name) {
      MissionTraceabilityType::deserialize(valueType.second, accessor.enableMissionTraceability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpBaseType_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OpBaseType_Names::Schedule_Name) {
      ScheduleType::deserialize(valueType.second, accessor.enableSchedule(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpBaseType_Names::AssociatedTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpBaseType::AssociatedTime& boundedList = accessor.getAssociatedTime();
        const uci::type::OpBaseType::AssociatedTime::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::TimeFunctionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpBaseType_Names::DataLinkIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpBaseType::DataLinkIdentifier& boundedList = accessor.getDataLinkIdentifier();
        const uci::type::OpBaseType::DataLinkIdentifier::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpBaseType_Names::Priority_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPriority(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + OpBaseType_Names::QualifyingTags_Name) {
      QualifyingTagsType::deserialize(valueType.second, accessor.enableQualifyingTags(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpBaseType_Names::SystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpBaseType::SystemID& boundedList = accessor.getSystemID();
        const uci::type::OpBaseType::SystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpBaseType_Names::SystemScheduleOverride_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpBaseType::SystemScheduleOverride& boundedList = accessor.getSystemScheduleOverride();
        const uci::type::OpBaseType::SystemScheduleOverride::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemScheduleStateType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string OpBaseType::serialize(const uci::type::OpBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::opBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpBaseType_Names::Extern_Type_Name);
    }
    if (accessor.hasOpDescription()) {
      OpDescriptionType::serialize(accessor.getOpDescription(), node, OpBaseType_Names::OpDescription_Name);
    }
    if (accessor.hasMissionTraceability()) {
      MissionTraceabilityType::serialize(accessor.getMissionTraceability(), node, OpBaseType_Names::MissionTraceability_Name);
    }
    if (accessor.hasSource()) {
      CreationSourceEnum::serialize(accessor.getSource(), node, OpBaseType_Names::Source_Name, false);
    }
    if (accessor.hasSchedule()) {
      ScheduleType::serialize(accessor.getSchedule(), node, OpBaseType_Names::Schedule_Name);
    }
    {
      const uci::type::OpBaseType::AssociatedTime& boundedList = accessor.getAssociatedTime();
      for (uci::type::OpBaseType::AssociatedTime::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::TimeFunctionType::serialize(boundedList.at(i), node, OpBaseType_Names::AssociatedTime_Name);
      }
    }
    {
      const uci::type::OpBaseType::DataLinkIdentifier& boundedList = accessor.getDataLinkIdentifier();
      for (uci::type::OpBaseType::DataLinkIdentifier::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::DataLinkIdentifierPET::serialize(boundedList.at(i), node, OpBaseType_Names::DataLinkIdentifier_Name);
      }
    }
    if (accessor.hasPriority()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getPriority(), node, OpBaseType_Names::Priority_Name);
    }
    if (accessor.hasQualifyingTags()) {
      QualifyingTagsType::serialize(accessor.getQualifyingTags(), node, OpBaseType_Names::QualifyingTags_Name);
    }
    {
      const uci::type::OpBaseType::SystemID& boundedList = accessor.getSystemID();
      for (uci::type::OpBaseType::SystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SystemID_Type::serialize(boundedList.at(i), node, OpBaseType_Names::SystemID_Name);
      }
    }
    {
      const uci::type::OpBaseType::SystemScheduleOverride& boundedList = accessor.getSystemScheduleOverride();
      for (uci::type::OpBaseType::SystemScheduleOverride::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SystemScheduleStateType::serialize(boundedList.at(i), node, OpBaseType_Names::SystemScheduleOverride_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OpBaseType& OpBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OpBaseType>().release());
}

uci::type::OpBaseType& OpBaseType::create(const uci::type::OpBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OpBaseType> newAccessor{boost::make_unique<asb_uci::type::OpBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OpBaseType::destroy(uci::type::OpBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::OpBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

