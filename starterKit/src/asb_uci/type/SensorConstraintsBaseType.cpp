/** @file SensorConstraintsBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SensorConstraintsBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CountryCodeType.h"
#include "../../../include/asb_uci/type/EntityBasingEnum.h"
#include "../../../include/asb_uci/type/IEEE_FrequencyBandEnum.h"
#include "../../../include/asb_uci/type/SensorCategoryEnum.h"
#include "../../../include/asb_uci/type/SensorSpectrumEnum.h"
#include "../../../include/asb_uci/type/SensorTypeEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CountryCodeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityBasingEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IEEE_FrequencyBandEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorCategoryEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorConstraintsBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorSpectrumEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorTypeEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SensorConstraintsBaseType::SensorConstraintsBaseType()
  : sensorType_Accessor{boost::make_unique<SensorType>(0, 8)},
    eOIR_Spectrum_Accessor{boost::make_unique<EOIR_Spectrum>(0, 14)},
    rF_Spectrum_Accessor{boost::make_unique<RF_Spectrum>(0, 12)},
    sensorCategory_Accessor{boost::make_unique<SensorCategory>(0, 10)},
    sensorSystemIdentity_Accessor{boost::make_unique<SensorSystemIdentity>(0, SIZE_MAX)},
    sensorBasing_Accessor{boost::make_unique<SensorBasing>(0, 11)} {
}

SensorConstraintsBaseType::~SensorConstraintsBaseType() = default;

void SensorConstraintsBaseType::copy(const uci::type::SensorConstraintsBaseType& accessor) {
  copyImpl(accessor, false);
}

void SensorConstraintsBaseType::copyImpl(const uci::type::SensorConstraintsBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::sensorConstraintsBaseType)) {
      const auto& accessorImpl = dynamic_cast<const SensorConstraintsBaseType&>(accessor);
      setSensorType(*(accessorImpl.sensorType_Accessor));
      setEOIR_Spectrum(*(accessorImpl.eOIR_Spectrum_Accessor));
      setRF_Spectrum(*(accessorImpl.rF_Spectrum_Accessor));
      setSensorCategory(*(accessorImpl.sensorCategory_Accessor));
      setSensorSystemIdentity(*(accessorImpl.sensorSystemIdentity_Accessor));
      setSensorBasing(*(accessorImpl.sensorBasing_Accessor));
      if (accessorImpl.ownerOperatorCountry_Accessor) {
        setOwnerOperatorCountry(*(accessorImpl.ownerOperatorCountry_Accessor));
      } else {
        ownerOperatorCountry_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void SensorConstraintsBaseType::reset() noexcept {
  sensorType_Accessor->reset();
  eOIR_Spectrum_Accessor->reset();
  rF_Spectrum_Accessor->reset();
  sensorCategory_Accessor->reset();
  sensorSystemIdentity_Accessor->reset();
  sensorBasing_Accessor->reset();
  ownerOperatorCountry_Accessor.reset();
}

const uci::type::SensorConstraintsBaseType::SensorType& SensorConstraintsBaseType::getSensorType() const {
  return *sensorType_Accessor;
}

uci::type::SensorConstraintsBaseType::SensorType& SensorConstraintsBaseType::getSensorType() {
  return *sensorType_Accessor;
}

uci::type::SensorConstraintsBaseType& SensorConstraintsBaseType::setSensorType(const uci::type::SensorConstraintsBaseType::SensorType& accessor) {
  if (&accessor != sensorType_Accessor.get()) {
    sensorType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SensorConstraintsBaseType::EOIR_Spectrum& SensorConstraintsBaseType::getEOIR_Spectrum() const {
  return *eOIR_Spectrum_Accessor;
}

uci::type::SensorConstraintsBaseType::EOIR_Spectrum& SensorConstraintsBaseType::getEOIR_Spectrum() {
  return *eOIR_Spectrum_Accessor;
}

uci::type::SensorConstraintsBaseType& SensorConstraintsBaseType::setEOIR_Spectrum(const uci::type::SensorConstraintsBaseType::EOIR_Spectrum& accessor) {
  if (&accessor != eOIR_Spectrum_Accessor.get()) {
    eOIR_Spectrum_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SensorConstraintsBaseType::RF_Spectrum& SensorConstraintsBaseType::getRF_Spectrum() const {
  return *rF_Spectrum_Accessor;
}

uci::type::SensorConstraintsBaseType::RF_Spectrum& SensorConstraintsBaseType::getRF_Spectrum() {
  return *rF_Spectrum_Accessor;
}

uci::type::SensorConstraintsBaseType& SensorConstraintsBaseType::setRF_Spectrum(const uci::type::SensorConstraintsBaseType::RF_Spectrum& accessor) {
  if (&accessor != rF_Spectrum_Accessor.get()) {
    rF_Spectrum_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SensorConstraintsBaseType::SensorCategory& SensorConstraintsBaseType::getSensorCategory() const {
  return *sensorCategory_Accessor;
}

uci::type::SensorConstraintsBaseType::SensorCategory& SensorConstraintsBaseType::getSensorCategory() {
  return *sensorCategory_Accessor;
}

uci::type::SensorConstraintsBaseType& SensorConstraintsBaseType::setSensorCategory(const uci::type::SensorConstraintsBaseType::SensorCategory& accessor) {
  if (&accessor != sensorCategory_Accessor.get()) {
    sensorCategory_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SensorConstraintsBaseType::SensorSystemIdentity& SensorConstraintsBaseType::getSensorSystemIdentity() const {
  return *sensorSystemIdentity_Accessor;
}

uci::type::SensorConstraintsBaseType::SensorSystemIdentity& SensorConstraintsBaseType::getSensorSystemIdentity() {
  return *sensorSystemIdentity_Accessor;
}

uci::type::SensorConstraintsBaseType& SensorConstraintsBaseType::setSensorSystemIdentity(const uci::type::SensorConstraintsBaseType::SensorSystemIdentity& accessor) {
  if (&accessor != sensorSystemIdentity_Accessor.get()) {
    sensorSystemIdentity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SensorConstraintsBaseType::SensorBasing& SensorConstraintsBaseType::getSensorBasing() const {
  return *sensorBasing_Accessor;
}

uci::type::SensorConstraintsBaseType::SensorBasing& SensorConstraintsBaseType::getSensorBasing() {
  return *sensorBasing_Accessor;
}

uci::type::SensorConstraintsBaseType& SensorConstraintsBaseType::setSensorBasing(const uci::type::SensorConstraintsBaseType::SensorBasing& accessor) {
  if (&accessor != sensorBasing_Accessor.get()) {
    sensorBasing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CountryCodeType& SensorConstraintsBaseType::getOwnerOperatorCountry_() const {
  if (ownerOperatorCountry_Accessor) {
    return *ownerOperatorCountry_Accessor;
  }
  throw uci::base::UCIException("Error in getOwnerOperatorCountry(): An attempt was made to get an optional field that was not enabled, call hasOwnerOperatorCountry() to determine if it is safe to call getOwnerOperatorCountry()");
}

const uci::type::CountryCodeType& SensorConstraintsBaseType::getOwnerOperatorCountry() const {
  return getOwnerOperatorCountry_();
}

uci::type::CountryCodeType& SensorConstraintsBaseType::getOwnerOperatorCountry() {
  return getOwnerOperatorCountry_();
}

uci::type::SensorConstraintsBaseType& SensorConstraintsBaseType::setOwnerOperatorCountry(const uci::type::CountryCodeType& accessor) {
  enableOwnerOperatorCountry();
  if (&accessor != ownerOperatorCountry_Accessor.get()) {
    ownerOperatorCountry_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorConstraintsBaseType::hasOwnerOperatorCountry() const noexcept {
  return static_cast<bool>(ownerOperatorCountry_Accessor);
}

uci::type::CountryCodeType& SensorConstraintsBaseType::enableOwnerOperatorCountry(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::countryCodeType : type};
  if ((!ownerOperatorCountry_Accessor) || (ownerOperatorCountry_Accessor->getAccessorType() != requestedType)) {
    ownerOperatorCountry_Accessor = CountryCodeType::create(requestedType);
    if (!ownerOperatorCountry_Accessor) {
      throw uci::base::UCIException("Error in enableOwnerOperatorCountry(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ownerOperatorCountry_Accessor;
}

uci::type::SensorConstraintsBaseType& SensorConstraintsBaseType::clearOwnerOperatorCountry() noexcept {
  ownerOperatorCountry_Accessor.reset();
  return *this;
}

std::unique_ptr<SensorConstraintsBaseType> SensorConstraintsBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorConstraintsBaseType : type};
  return std::unique_ptr<SensorConstraintsBaseType>(dynamic_cast<SensorConstraintsBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace SensorConstraintsBaseType_Names {

constexpr const char* Extern_Type_Name{"SensorConstraintsBaseType"};
constexpr const char* SensorType_Name{"SensorType"};
constexpr const char* EOIR_Spectrum_Name{"EOIR_Spectrum"};
constexpr const char* RF_Spectrum_Name{"RF_Spectrum"};
constexpr const char* SensorCategory_Name{"SensorCategory"};
constexpr const char* SensorSystemIdentity_Name{"SensorSystemIdentity"};
constexpr const char* SensorBasing_Name{"SensorBasing"};
constexpr const char* OwnerOperatorCountry_Name{"OwnerOperatorCountry"};

} // namespace SensorConstraintsBaseType_Names

void SensorConstraintsBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SensorConstraintsBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SensorConstraintsBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::SensorType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorConstraintsBaseType::SensorType& boundedList = accessor.getSensorType();
        const uci::type::SensorConstraintsBaseType::SensorType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::EOIR_Spectrum_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorConstraintsBaseType::EOIR_Spectrum& boundedList = accessor.getEOIR_Spectrum();
        const uci::type::SensorConstraintsBaseType::EOIR_Spectrum::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::RF_Spectrum_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorConstraintsBaseType::RF_Spectrum& boundedList = accessor.getRF_Spectrum();
        const uci::type::SensorConstraintsBaseType::RF_Spectrum::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::SensorCategory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorConstraintsBaseType::SensorCategory& boundedList = accessor.getSensorCategory();
        const uci::type::SensorConstraintsBaseType::SensorCategory::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::SensorSystemIdentity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorConstraintsBaseType::SensorSystemIdentity& boundedList = accessor.getSensorSystemIdentity();
        const uci::type::SensorConstraintsBaseType::SensorSystemIdentity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedShortValue(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::SensorBasing_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorConstraintsBaseType::SensorBasing& boundedList = accessor.getSensorBasing();
        const uci::type::SensorConstraintsBaseType::SensorBasing::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::OwnerOperatorCountry_Name) {
      CountryCodeType::deserialize(valueType.second, accessor.enableOwnerOperatorCountry(), nodeName, nsPrefix);
    }
  }
}

std::string SensorConstraintsBaseType::serialize(const uci::type::SensorConstraintsBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SensorConstraintsBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::sensorConstraintsBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, SensorConstraintsBaseType_Names::Extern_Type_Name);
    }
    {
      const uci::type::SensorConstraintsBaseType::SensorType& boundedList = accessor.getSensorType();
      for (uci::type::SensorConstraintsBaseType::SensorType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SensorTypeEnum::serialize(boundedList.at(i), node, SensorConstraintsBaseType_Names::SensorType_Name, false);
      }
    }
    {
      const uci::type::SensorConstraintsBaseType::EOIR_Spectrum& boundedList = accessor.getEOIR_Spectrum();
      for (uci::type::SensorConstraintsBaseType::EOIR_Spectrum::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SensorSpectrumEnum::serialize(boundedList.at(i), node, SensorConstraintsBaseType_Names::EOIR_Spectrum_Name, false);
      }
    }
    {
      const uci::type::SensorConstraintsBaseType::RF_Spectrum& boundedList = accessor.getRF_Spectrum();
      for (uci::type::SensorConstraintsBaseType::RF_Spectrum::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        IEEE_FrequencyBandEnum::serialize(boundedList.at(i), node, SensorConstraintsBaseType_Names::RF_Spectrum_Name, false);
      }
    }
    {
      const uci::type::SensorConstraintsBaseType::SensorCategory& boundedList = accessor.getSensorCategory();
      for (uci::type::SensorConstraintsBaseType::SensorCategory::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SensorCategoryEnum::serialize(boundedList.at(i), node, SensorConstraintsBaseType_Names::SensorCategory_Name, false);
      }
    }
    {
      const uci::type::SensorConstraintsBaseType::SensorSystemIdentity& boundedList = accessor.getSensorSystemIdentity();
      for (uci::type::SensorConstraintsBaseType::SensorSystemIdentity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::util::SerializationHelpers::serializeUnsignedShort(boundedList.at(i), node, SensorConstraintsBaseType_Names::SensorSystemIdentity_Name);
      }
    }
    {
      const uci::type::SensorConstraintsBaseType::SensorBasing& boundedList = accessor.getSensorBasing();
      for (uci::type::SensorConstraintsBaseType::SensorBasing::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        EntityBasingEnum::serialize(boundedList.at(i), node, SensorConstraintsBaseType_Names::SensorBasing_Name, false);
      }
    }
    if (accessor.hasOwnerOperatorCountry()) {
      CountryCodeType::serialize(accessor.getOwnerOperatorCountry(), node, SensorConstraintsBaseType_Names::OwnerOperatorCountry_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SensorConstraintsBaseType& SensorConstraintsBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SensorConstraintsBaseType>().release());
}

uci::type::SensorConstraintsBaseType& SensorConstraintsBaseType::create(const uci::type::SensorConstraintsBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SensorConstraintsBaseType> newAccessor{boost::make_unique<asb_uci::type::SensorConstraintsBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SensorConstraintsBaseType::destroy(uci::type::SensorConstraintsBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::SensorConstraintsBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

