/** @file OrbitalKinematicsStandardEphemerisType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitalKinematicsStandardEphemerisType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BCRS_KinematicsType.h"
#include "../../../include/asb_uci/type/GCRS_KinematicsType.h"
#include "../../../include/asb_uci/type/J2K_KinematicsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BCRS_KinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GCRS_KinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/J2K_KinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalKinematicsStandardEphemerisType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalKinematicsStandardEphemerisType::OrbitalKinematicsStandardEphemerisType() = default;

OrbitalKinematicsStandardEphemerisType::~OrbitalKinematicsStandardEphemerisType() = default;

void OrbitalKinematicsStandardEphemerisType::copy(const uci::type::OrbitalKinematicsStandardEphemerisType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalKinematicsStandardEphemerisType::copyImpl(const uci::type::OrbitalKinematicsStandardEphemerisType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalKinematicsStandardEphemerisType&>(accessor);
    if (accessorImpl.j2K_StateVector_Accessor) {
      setJ2K_StateVector(*(accessorImpl.j2K_StateVector_Accessor));
    } else {
      j2K_StateVector_Accessor.reset();
    }
    if (accessorImpl.gCRS_StateVector_Accessor) {
      setGCRS_StateVector(*(accessorImpl.gCRS_StateVector_Accessor));
    } else {
      gCRS_StateVector_Accessor.reset();
    }
    if (accessorImpl.bCRS_StateVector_Accessor) {
      setBCRS_StateVector(*(accessorImpl.bCRS_StateVector_Accessor));
    } else {
      bCRS_StateVector_Accessor.reset();
    }
  }
}

void OrbitalKinematicsStandardEphemerisType::reset() noexcept {
  j2K_StateVector_Accessor.reset();
  gCRS_StateVector_Accessor.reset();
  bCRS_StateVector_Accessor.reset();
}

uci::type::OrbitalKinematicsStandardEphemerisType::OrbitalKinematicsStandardEphemerisTypeChoice OrbitalKinematicsStandardEphemerisType::getOrbitalKinematicsStandardEphemerisTypeChoiceOrdinal() const noexcept {
  if (j2K_StateVector_Accessor) {
    return ORBITALKINEMATICSSTANDARDEPHEMERISTYPE_CHOICE_J2K_STATEVECTOR;
  }
  if (gCRS_StateVector_Accessor) {
    return ORBITALKINEMATICSSTANDARDEPHEMERISTYPE_CHOICE_GCRS_STATEVECTOR;
  }
  if (bCRS_StateVector_Accessor) {
    return ORBITALKINEMATICSSTANDARDEPHEMERISTYPE_CHOICE_BCRS_STATEVECTOR;
  }
  return ORBITALKINEMATICSSTANDARDEPHEMERISTYPE_CHOICE_NONE;
}

uci::type::OrbitalKinematicsStandardEphemerisType& OrbitalKinematicsStandardEphemerisType::setOrbitalKinematicsStandardEphemerisTypeChoiceOrdinal(uci::type::OrbitalKinematicsStandardEphemerisType::OrbitalKinematicsStandardEphemerisTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case ORBITALKINEMATICSSTANDARDEPHEMERISTYPE_CHOICE_J2K_STATEVECTOR:
      chooseJ2K_StateVector();
      break;
    case ORBITALKINEMATICSSTANDARDEPHEMERISTYPE_CHOICE_GCRS_STATEVECTOR:
      chooseGCRS_StateVector();
      break;
    case ORBITALKINEMATICSSTANDARDEPHEMERISTYPE_CHOICE_BCRS_STATEVECTOR:
      chooseBCRS_StateVector();
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitalKinematicsStandardEphemerisTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OrbitalKinematicsStandardEphemerisType::J2K_StateVector& OrbitalKinematicsStandardEphemerisType::getJ2K_StateVector_() const {
  if (j2K_StateVector_Accessor) {
    return *j2K_StateVector_Accessor;
  }
  throw uci::base::UCIException("Error in getJ2K_StateVector(): Unable to get J2K_StateVector, field not selected");
}

const uci::type::OrbitalKinematicsStandardEphemerisType::J2K_StateVector& OrbitalKinematicsStandardEphemerisType::getJ2K_StateVector() const {
  return getJ2K_StateVector_();
}

uci::type::OrbitalKinematicsStandardEphemerisType::J2K_StateVector& OrbitalKinematicsStandardEphemerisType::getJ2K_StateVector() {
  return getJ2K_StateVector_();
}

uci::type::OrbitalKinematicsStandardEphemerisType& OrbitalKinematicsStandardEphemerisType::setJ2K_StateVector(const uci::type::OrbitalKinematicsStandardEphemerisType::J2K_StateVector& accessor) {
  chooseJ2K_StateVector();
  if (&accessor != j2K_StateVector_Accessor.get()) {
    j2K_StateVector_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalKinematicsStandardEphemerisType::isJ2K_StateVector() const noexcept {
  return static_cast<bool>(j2K_StateVector_Accessor);
}

uci::type::OrbitalKinematicsStandardEphemerisType::J2K_StateVector& OrbitalKinematicsStandardEphemerisType::chooseJ2K_StateVector() {
  gCRS_StateVector_Accessor.reset();
  bCRS_StateVector_Accessor.reset();
  if (!j2K_StateVector_Accessor) {
    j2K_StateVector_Accessor = boost::make_unique<J2K_StateVector>(1, SIZE_MAX);
  }
  return *j2K_StateVector_Accessor;
}

uci::type::OrbitalKinematicsStandardEphemerisType::GCRS_StateVector& OrbitalKinematicsStandardEphemerisType::getGCRS_StateVector_() const {
  if (gCRS_StateVector_Accessor) {
    return *gCRS_StateVector_Accessor;
  }
  throw uci::base::UCIException("Error in getGCRS_StateVector(): Unable to get GCRS_StateVector, field not selected");
}

const uci::type::OrbitalKinematicsStandardEphemerisType::GCRS_StateVector& OrbitalKinematicsStandardEphemerisType::getGCRS_StateVector() const {
  return getGCRS_StateVector_();
}

uci::type::OrbitalKinematicsStandardEphemerisType::GCRS_StateVector& OrbitalKinematicsStandardEphemerisType::getGCRS_StateVector() {
  return getGCRS_StateVector_();
}

uci::type::OrbitalKinematicsStandardEphemerisType& OrbitalKinematicsStandardEphemerisType::setGCRS_StateVector(const uci::type::OrbitalKinematicsStandardEphemerisType::GCRS_StateVector& accessor) {
  chooseGCRS_StateVector();
  if (&accessor != gCRS_StateVector_Accessor.get()) {
    gCRS_StateVector_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalKinematicsStandardEphemerisType::isGCRS_StateVector() const noexcept {
  return static_cast<bool>(gCRS_StateVector_Accessor);
}

uci::type::OrbitalKinematicsStandardEphemerisType::GCRS_StateVector& OrbitalKinematicsStandardEphemerisType::chooseGCRS_StateVector() {
  j2K_StateVector_Accessor.reset();
  bCRS_StateVector_Accessor.reset();
  if (!gCRS_StateVector_Accessor) {
    gCRS_StateVector_Accessor = boost::make_unique<GCRS_StateVector>(1, SIZE_MAX);
  }
  return *gCRS_StateVector_Accessor;
}

uci::type::OrbitalKinematicsStandardEphemerisType::BCRS_StateVector& OrbitalKinematicsStandardEphemerisType::getBCRS_StateVector_() const {
  if (bCRS_StateVector_Accessor) {
    return *bCRS_StateVector_Accessor;
  }
  throw uci::base::UCIException("Error in getBCRS_StateVector(): Unable to get BCRS_StateVector, field not selected");
}

const uci::type::OrbitalKinematicsStandardEphemerisType::BCRS_StateVector& OrbitalKinematicsStandardEphemerisType::getBCRS_StateVector() const {
  return getBCRS_StateVector_();
}

uci::type::OrbitalKinematicsStandardEphemerisType::BCRS_StateVector& OrbitalKinematicsStandardEphemerisType::getBCRS_StateVector() {
  return getBCRS_StateVector_();
}

uci::type::OrbitalKinematicsStandardEphemerisType& OrbitalKinematicsStandardEphemerisType::setBCRS_StateVector(const uci::type::OrbitalKinematicsStandardEphemerisType::BCRS_StateVector& accessor) {
  chooseBCRS_StateVector();
  if (&accessor != bCRS_StateVector_Accessor.get()) {
    bCRS_StateVector_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalKinematicsStandardEphemerisType::isBCRS_StateVector() const noexcept {
  return static_cast<bool>(bCRS_StateVector_Accessor);
}

uci::type::OrbitalKinematicsStandardEphemerisType::BCRS_StateVector& OrbitalKinematicsStandardEphemerisType::chooseBCRS_StateVector() {
  j2K_StateVector_Accessor.reset();
  gCRS_StateVector_Accessor.reset();
  if (!bCRS_StateVector_Accessor) {
    bCRS_StateVector_Accessor = boost::make_unique<BCRS_StateVector>(1, SIZE_MAX);
  }
  return *bCRS_StateVector_Accessor;
}

std::unique_ptr<OrbitalKinematicsStandardEphemerisType> OrbitalKinematicsStandardEphemerisType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsStandardEphemerisType : type};
  return (requestedType == uci::type::accessorType::orbitalKinematicsStandardEphemerisType) ? boost::make_unique<OrbitalKinematicsStandardEphemerisType>() : nullptr;
}

/**  */
namespace OrbitalKinematicsStandardEphemerisType_Names {

constexpr const char* Extern_Type_Name{"OrbitalKinematicsStandardEphemerisType"};
constexpr const char* J2K_StateVector_Name{"J2K_StateVector"};
constexpr const char* GCRS_StateVector_Name{"GCRS_StateVector"};
constexpr const char* BCRS_StateVector_Name{"BCRS_StateVector"};

} // namespace OrbitalKinematicsStandardEphemerisType_Names

void OrbitalKinematicsStandardEphemerisType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalKinematicsStandardEphemerisType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalKinematicsStandardEphemerisType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalKinematicsStandardEphemerisType_Names::J2K_StateVector_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitalKinematicsStandardEphemerisType::J2K_StateVector& boundedList = accessor.chooseJ2K_StateVector();
        const uci::type::OrbitalKinematicsStandardEphemerisType::J2K_StateVector::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::J2K_KinematicsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitalKinematicsStandardEphemerisType_Names::GCRS_StateVector_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitalKinematicsStandardEphemerisType::GCRS_StateVector& boundedList = accessor.chooseGCRS_StateVector();
        const uci::type::OrbitalKinematicsStandardEphemerisType::GCRS_StateVector::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::GCRS_KinematicsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitalKinematicsStandardEphemerisType_Names::BCRS_StateVector_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitalKinematicsStandardEphemerisType::BCRS_StateVector& boundedList = accessor.chooseBCRS_StateVector();
        const uci::type::OrbitalKinematicsStandardEphemerisType::BCRS_StateVector::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::BCRS_KinematicsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string OrbitalKinematicsStandardEphemerisType::serialize(const uci::type::OrbitalKinematicsStandardEphemerisType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalKinematicsStandardEphemerisType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalKinematicsStandardEphemerisType_Names::Extern_Type_Name);
  }
  if (accessor.isJ2K_StateVector()) {
    {
      const uci::type::OrbitalKinematicsStandardEphemerisType::J2K_StateVector& boundedList = accessor.getJ2K_StateVector();
      for (uci::type::OrbitalKinematicsStandardEphemerisType::J2K_StateVector::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::J2K_KinematicsType::serialize(boundedList.at(i), node, OrbitalKinematicsStandardEphemerisType_Names::J2K_StateVector_Name);
      }
    }
  } else if (accessor.isGCRS_StateVector()) {
    {
      const uci::type::OrbitalKinematicsStandardEphemerisType::GCRS_StateVector& boundedList = accessor.getGCRS_StateVector();
      for (uci::type::OrbitalKinematicsStandardEphemerisType::GCRS_StateVector::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::GCRS_KinematicsType::serialize(boundedList.at(i), node, OrbitalKinematicsStandardEphemerisType_Names::GCRS_StateVector_Name);
      }
    }
  } else if (accessor.isBCRS_StateVector()) {
    {
      const uci::type::OrbitalKinematicsStandardEphemerisType::BCRS_StateVector& boundedList = accessor.getBCRS_StateVector();
      for (uci::type::OrbitalKinematicsStandardEphemerisType::BCRS_StateVector::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::BCRS_KinematicsType::serialize(boundedList.at(i), node, OrbitalKinematicsStandardEphemerisType_Names::BCRS_StateVector_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalKinematicsStandardEphemerisType& OrbitalKinematicsStandardEphemerisType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalKinematicsStandardEphemerisType>().release());
}

uci::type::OrbitalKinematicsStandardEphemerisType& OrbitalKinematicsStandardEphemerisType::create(const uci::type::OrbitalKinematicsStandardEphemerisType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalKinematicsStandardEphemerisType> newAccessor{boost::make_unique<asb_uci::type::OrbitalKinematicsStandardEphemerisType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalKinematicsStandardEphemerisType::destroy(uci::type::OrbitalKinematicsStandardEphemerisType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalKinematicsStandardEphemerisType*>(&accessor);
}

} // namespace type

} // namespace uci

