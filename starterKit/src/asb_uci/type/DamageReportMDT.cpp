/** @file DamageReportMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DamageReportMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DamageInformationSourceType.h"
#include "../../../include/asb_uci/type/DamageReportDetailType.h"
#include "../../../include/asb_uci/type/DamageReportID_Type.h"
#include "../../../include/asb_uci/type/DamageSubjectType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/ZoneType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageInformationSourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageReportDetailType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageReportID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageReportMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageSubjectType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DamageReportMDT::DamageReportMDT()
  : damageReportID_Accessor{boost::make_unique<DamageReportID_Type>()},
    subject_Accessor{boost::make_unique<DamageSubjectType>()},
    damageDetails_Accessor{boost::make_unique<DamageDetails>(1, SIZE_MAX)} {
}

DamageReportMDT::~DamageReportMDT() = default;

void DamageReportMDT::copy(const uci::type::DamageReportMDT& accessor) {
  copyImpl(accessor, false);
}

void DamageReportMDT::copyImpl(const uci::type::DamageReportMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DamageReportMDT&>(accessor);
    setDamageReportID(*(accessorImpl.damageReportID_Accessor));
    if (accessorImpl.reportingSystemID_Accessor) {
      setReportingSystemID(*(accessorImpl.reportingSystemID_Accessor));
    } else {
      reportingSystemID_Accessor.reset();
    }
    setSubject(*(accessorImpl.subject_Accessor));
    setReportCompletionTime(accessorImpl.reportCompletionTime_Accessor);
    if (accessorImpl.reportZone_Accessor) {
      setReportZone(*(accessorImpl.reportZone_Accessor));
    } else {
      reportZone_Accessor.reset();
    }
    setDamageDetails(*(accessorImpl.damageDetails_Accessor));
    if (accessorImpl.informationSource_Accessor) {
      setInformationSource(*(accessorImpl.informationSource_Accessor));
    } else {
      informationSource_Accessor.reset();
    }
  }
}

void DamageReportMDT::reset() noexcept {
  damageReportID_Accessor->reset();
  reportingSystemID_Accessor.reset();
  subject_Accessor->reset();
  reportCompletionTime_Accessor = 0;
  reportZone_Accessor.reset();
  damageDetails_Accessor->reset();
  informationSource_Accessor.reset();
}

const uci::type::DamageReportID_Type& DamageReportMDT::getDamageReportID() const {
  return *damageReportID_Accessor;
}

uci::type::DamageReportID_Type& DamageReportMDT::getDamageReportID() {
  return *damageReportID_Accessor;
}

uci::type::DamageReportMDT& DamageReportMDT::setDamageReportID(const uci::type::DamageReportID_Type& accessor) {
  if (&accessor != damageReportID_Accessor.get()) {
    damageReportID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemID_Type& DamageReportMDT::getReportingSystemID_() const {
  if (reportingSystemID_Accessor) {
    return *reportingSystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getReportingSystemID(): An attempt was made to get an optional field that was not enabled, call hasReportingSystemID() to determine if it is safe to call getReportingSystemID()");
}

const uci::type::SystemID_Type& DamageReportMDT::getReportingSystemID() const {
  return getReportingSystemID_();
}

uci::type::SystemID_Type& DamageReportMDT::getReportingSystemID() {
  return getReportingSystemID_();
}

uci::type::DamageReportMDT& DamageReportMDT::setReportingSystemID(const uci::type::SystemID_Type& accessor) {
  enableReportingSystemID();
  if (&accessor != reportingSystemID_Accessor.get()) {
    reportingSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageReportMDT::hasReportingSystemID() const noexcept {
  return static_cast<bool>(reportingSystemID_Accessor);
}

uci::type::SystemID_Type& DamageReportMDT::enableReportingSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!reportingSystemID_Accessor) || (reportingSystemID_Accessor->getAccessorType() != requestedType)) {
    reportingSystemID_Accessor = SystemID_Type::create(requestedType);
    if (!reportingSystemID_Accessor) {
      throw uci::base::UCIException("Error in enableReportingSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *reportingSystemID_Accessor;
}

uci::type::DamageReportMDT& DamageReportMDT::clearReportingSystemID() noexcept {
  reportingSystemID_Accessor.reset();
  return *this;
}

const uci::type::DamageSubjectType& DamageReportMDT::getSubject() const {
  return *subject_Accessor;
}

uci::type::DamageSubjectType& DamageReportMDT::getSubject() {
  return *subject_Accessor;
}

uci::type::DamageReportMDT& DamageReportMDT::setSubject(const uci::type::DamageSubjectType& accessor) {
  if (&accessor != subject_Accessor.get()) {
    subject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue DamageReportMDT::getReportCompletionTime() const {
  return reportCompletionTime_Accessor;
}

uci::type::DamageReportMDT& DamageReportMDT::setReportCompletionTime(uci::type::DateTimeTypeValue value) {
  reportCompletionTime_Accessor = value;
  return *this;
}


uci::type::ZoneType& DamageReportMDT::getReportZone_() const {
  if (reportZone_Accessor) {
    return *reportZone_Accessor;
  }
  throw uci::base::UCIException("Error in getReportZone(): An attempt was made to get an optional field that was not enabled, call hasReportZone() to determine if it is safe to call getReportZone()");
}

const uci::type::ZoneType& DamageReportMDT::getReportZone() const {
  return getReportZone_();
}

uci::type::ZoneType& DamageReportMDT::getReportZone() {
  return getReportZone_();
}

uci::type::DamageReportMDT& DamageReportMDT::setReportZone(const uci::type::ZoneType& accessor) {
  enableReportZone(accessor.getAccessorType());
  if (&accessor != reportZone_Accessor.get()) {
    reportZone_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DamageReportMDT::hasReportZone() const noexcept {
  return static_cast<bool>(reportZone_Accessor);
}

uci::type::ZoneType& DamageReportMDT::enableReportZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!reportZone_Accessor) || (reportZone_Accessor->getAccessorType() != requestedType)) {
    reportZone_Accessor = ZoneType::create(requestedType);
    if (!reportZone_Accessor) {
      throw uci::base::UCIException("Error in enableReportZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *reportZone_Accessor;
}

uci::type::DamageReportMDT& DamageReportMDT::clearReportZone() noexcept {
  reportZone_Accessor.reset();
  return *this;
}

const uci::type::DamageReportMDT::DamageDetails& DamageReportMDT::getDamageDetails() const {
  return *damageDetails_Accessor;
}

uci::type::DamageReportMDT::DamageDetails& DamageReportMDT::getDamageDetails() {
  return *damageDetails_Accessor;
}

uci::type::DamageReportMDT& DamageReportMDT::setDamageDetails(const uci::type::DamageReportMDT::DamageDetails& accessor) {
  if (&accessor != damageDetails_Accessor.get()) {
    damageDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DamageInformationSourceType& DamageReportMDT::getInformationSource_() const {
  if (informationSource_Accessor) {
    return *informationSource_Accessor;
  }
  throw uci::base::UCIException("Error in getInformationSource(): An attempt was made to get an optional field that was not enabled, call hasInformationSource() to determine if it is safe to call getInformationSource()");
}

const uci::type::DamageInformationSourceType& DamageReportMDT::getInformationSource() const {
  return getInformationSource_();
}

uci::type::DamageInformationSourceType& DamageReportMDT::getInformationSource() {
  return getInformationSource_();
}

uci::type::DamageReportMDT& DamageReportMDT::setInformationSource(const uci::type::DamageInformationSourceType& accessor) {
  enableInformationSource(accessor.getAccessorType());
  if (&accessor != informationSource_Accessor.get()) {
    informationSource_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DamageReportMDT::hasInformationSource() const noexcept {
  return static_cast<bool>(informationSource_Accessor);
}

uci::type::DamageInformationSourceType& DamageReportMDT::enableInformationSource(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageInformationSourceType : type};
  if ((!informationSource_Accessor) || (informationSource_Accessor->getAccessorType() != requestedType)) {
    informationSource_Accessor = DamageInformationSourceType::create(requestedType);
    if (!informationSource_Accessor) {
      throw uci::base::UCIException("Error in enableInformationSource(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *informationSource_Accessor;
}

uci::type::DamageReportMDT& DamageReportMDT::clearInformationSource() noexcept {
  informationSource_Accessor.reset();
  return *this;
}

std::unique_ptr<DamageReportMDT> DamageReportMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageReportMDT : type};
  return (requestedType == uci::type::accessorType::damageReportMDT) ? boost::make_unique<DamageReportMDT>() : nullptr;
}

/**  */
namespace DamageReportMDT_Names {

constexpr const char* Extern_Type_Name{"DamageReportMDT"};
constexpr const char* DamageReportID_Name{"DamageReportID"};
constexpr const char* ReportingSystemID_Name{"ReportingSystemID"};
constexpr const char* Subject_Name{"Subject"};
constexpr const char* ReportCompletionTime_Name{"ReportCompletionTime"};
constexpr const char* ReportZone_Name{"ReportZone"};
constexpr const char* DamageDetails_Name{"DamageDetails"};
constexpr const char* InformationSource_Name{"InformationSource"};

} // namespace DamageReportMDT_Names

void DamageReportMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageReportMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamageReportMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamageReportMDT_Names::DamageReportID_Name) {
      DamageReportID_Type::deserialize(valueType.second, accessor.getDamageReportID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageReportMDT_Names::ReportingSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableReportingSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageReportMDT_Names::Subject_Name) {
      DamageSubjectType::deserialize(valueType.second, accessor.getSubject(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageReportMDT_Names::ReportCompletionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReportCompletionTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + DamageReportMDT_Names::ReportZone_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableReportZone(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageReportMDT_Names::DamageDetails_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DamageReportMDT::DamageDetails& boundedList = accessor.getDamageDetails();
        const uci::type::DamageReportMDT::DamageDetails::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DamageReportDetailType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DamageReportMDT_Names::InformationSource_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableInformationSource(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string DamageReportMDT::serialize(const uci::type::DamageReportMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DamageReportMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DamageReportMDT_Names::Extern_Type_Name);
  }
  DamageReportID_Type::serialize(accessor.getDamageReportID(), node, DamageReportMDT_Names::DamageReportID_Name);
  if (accessor.hasReportingSystemID()) {
    SystemID_Type::serialize(accessor.getReportingSystemID(), node, DamageReportMDT_Names::ReportingSystemID_Name);
  }
  DamageSubjectType::serialize(accessor.getSubject(), node, DamageReportMDT_Names::Subject_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getReportCompletionTime(), node, DamageReportMDT_Names::ReportCompletionTime_Name);
  if (accessor.hasReportZone()) {
    ZoneType::serialize(accessor.getReportZone(), node, DamageReportMDT_Names::ReportZone_Name);
  }
  {
    const uci::type::DamageReportMDT::DamageDetails& boundedList = accessor.getDamageDetails();
    for (uci::type::DamageReportMDT::DamageDetails::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DamageReportDetailType::serialize(boundedList.at(i), node, DamageReportMDT_Names::DamageDetails_Name);
    }
  }
  if (accessor.hasInformationSource()) {
    DamageInformationSourceType::serialize(accessor.getInformationSource(), node, DamageReportMDT_Names::InformationSource_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DamageReportMDT& DamageReportMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DamageReportMDT>().release());
}

uci::type::DamageReportMDT& DamageReportMDT::create(const uci::type::DamageReportMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DamageReportMDT> newAccessor{boost::make_unique<asb_uci::type::DamageReportMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DamageReportMDT::destroy(uci::type::DamageReportMDT& accessor) {
  delete dynamic_cast<asb_uci::type::DamageReportMDT*>(&accessor);
}

} // namespace type

} // namespace uci

