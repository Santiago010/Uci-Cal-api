/** @file PlanScoresMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PlanScoresMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OpConstraintScoreType.h"
#include "../../../include/asb_uci/type/PlanScoresID_Type.h"
#include "../../../include/asb_uci/type/PlansReferenceType.h"
#include "../../../include/asb_uci/type/RequestID_Type.h"
#include "../../../include/asb_uci/type/ScoringProcessID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpConstraintScoreType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanScoresID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanScoresMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlansReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequestID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ScoringProcessID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanScoresMDT::PlanScoresMDT()
  : planScoresID_Accessor{boost::make_unique<PlanScoresID_Type>()},
    assessedPlans_Accessor{boost::make_unique<PlansReferenceType>()},
    scoringProcessID_Accessor{boost::make_unique<ScoringProcessID_Type>()},
    scoredOpConstraint_Accessor{boost::make_unique<ScoredOpConstraint>(1, 15)} {
}

PlanScoresMDT::~PlanScoresMDT() = default;

void PlanScoresMDT::copy(const uci::type::PlanScoresMDT& accessor) {
  copyImpl(accessor, false);
}

void PlanScoresMDT::copyImpl(const uci::type::PlanScoresMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlanScoresMDT&>(accessor);
    setPlanScoresID(*(accessorImpl.planScoresID_Accessor));
    if (accessorImpl.requestID_Accessor) {
      setRequestID(*(accessorImpl.requestID_Accessor));
    } else {
      requestID_Accessor.reset();
    }
    setAssessedPlans(*(accessorImpl.assessedPlans_Accessor));
    setAssessmentTime(accessorImpl.assessmentTime_Accessor);
    setScoringProcessID(*(accessorImpl.scoringProcessID_Accessor));
    setScoredOpConstraint(*(accessorImpl.scoredOpConstraint_Accessor));
  }
}

void PlanScoresMDT::reset() noexcept {
  planScoresID_Accessor->reset();
  requestID_Accessor.reset();
  assessedPlans_Accessor->reset();
  assessmentTime_Accessor = 0;
  scoringProcessID_Accessor->reset();
  scoredOpConstraint_Accessor->reset();
}

const uci::type::PlanScoresID_Type& PlanScoresMDT::getPlanScoresID() const {
  return *planScoresID_Accessor;
}

uci::type::PlanScoresID_Type& PlanScoresMDT::getPlanScoresID() {
  return *planScoresID_Accessor;
}

uci::type::PlanScoresMDT& PlanScoresMDT::setPlanScoresID(const uci::type::PlanScoresID_Type& accessor) {
  if (&accessor != planScoresID_Accessor.get()) {
    planScoresID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequestID_Type& PlanScoresMDT::getRequestID_() const {
  if (requestID_Accessor) {
    return *requestID_Accessor;
  }
  throw uci::base::UCIException("Error in getRequestID(): An attempt was made to get an optional field that was not enabled, call hasRequestID() to determine if it is safe to call getRequestID()");
}

const uci::type::RequestID_Type& PlanScoresMDT::getRequestID() const {
  return getRequestID_();
}

uci::type::RequestID_Type& PlanScoresMDT::getRequestID() {
  return getRequestID_();
}

uci::type::PlanScoresMDT& PlanScoresMDT::setRequestID(const uci::type::RequestID_Type& accessor) {
  enableRequestID();
  if (&accessor != requestID_Accessor.get()) {
    requestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanScoresMDT::hasRequestID() const noexcept {
  return static_cast<bool>(requestID_Accessor);
}

uci::type::RequestID_Type& PlanScoresMDT::enableRequestID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requestID_Type : type};
  if ((!requestID_Accessor) || (requestID_Accessor->getAccessorType() != requestedType)) {
    requestID_Accessor = RequestID_Type::create(requestedType);
    if (!requestID_Accessor) {
      throw uci::base::UCIException("Error in enableRequestID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requestID_Accessor;
}

uci::type::PlanScoresMDT& PlanScoresMDT::clearRequestID() noexcept {
  requestID_Accessor.reset();
  return *this;
}

const uci::type::PlansReferenceType& PlanScoresMDT::getAssessedPlans() const {
  return *assessedPlans_Accessor;
}

uci::type::PlansReferenceType& PlanScoresMDT::getAssessedPlans() {
  return *assessedPlans_Accessor;
}

uci::type::PlanScoresMDT& PlanScoresMDT::setAssessedPlans(const uci::type::PlansReferenceType& accessor) {
  if (&accessor != assessedPlans_Accessor.get()) {
    assessedPlans_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue PlanScoresMDT::getAssessmentTime() const {
  return assessmentTime_Accessor;
}

uci::type::PlanScoresMDT& PlanScoresMDT::setAssessmentTime(uci::type::DateTimeTypeValue value) {
  assessmentTime_Accessor = value;
  return *this;
}


const uci::type::ScoringProcessID_Type& PlanScoresMDT::getScoringProcessID() const {
  return *scoringProcessID_Accessor;
}

uci::type::ScoringProcessID_Type& PlanScoresMDT::getScoringProcessID() {
  return *scoringProcessID_Accessor;
}

uci::type::PlanScoresMDT& PlanScoresMDT::setScoringProcessID(const uci::type::ScoringProcessID_Type& accessor) {
  if (&accessor != scoringProcessID_Accessor.get()) {
    scoringProcessID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlanScoresMDT::ScoredOpConstraint& PlanScoresMDT::getScoredOpConstraint() const {
  return *scoredOpConstraint_Accessor;
}

uci::type::PlanScoresMDT::ScoredOpConstraint& PlanScoresMDT::getScoredOpConstraint() {
  return *scoredOpConstraint_Accessor;
}

uci::type::PlanScoresMDT& PlanScoresMDT::setScoredOpConstraint(const uci::type::PlanScoresMDT::ScoredOpConstraint& accessor) {
  if (&accessor != scoredOpConstraint_Accessor.get()) {
    scoredOpConstraint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PlanScoresMDT> PlanScoresMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planScoresMDT : type};
  return (requestedType == uci::type::accessorType::planScoresMDT) ? boost::make_unique<PlanScoresMDT>() : nullptr;
}

/**  */
namespace PlanScoresMDT_Names {

constexpr const char* Extern_Type_Name{"PlanScoresMDT"};
constexpr const char* PlanScoresID_Name{"PlanScoresID"};
constexpr const char* RequestID_Name{"RequestID"};
constexpr const char* AssessedPlans_Name{"AssessedPlans"};
constexpr const char* AssessmentTime_Name{"AssessmentTime"};
constexpr const char* ScoringProcessID_Name{"ScoringProcessID"};
constexpr const char* ScoredOpConstraint_Name{"ScoredOpConstraint"};

} // namespace PlanScoresMDT_Names

void PlanScoresMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanScoresMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanScoresMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanScoresMDT_Names::PlanScoresID_Name) {
      PlanScoresID_Type::deserialize(valueType.second, accessor.getPlanScoresID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanScoresMDT_Names::RequestID_Name) {
      RequestID_Type::deserialize(valueType.second, accessor.enableRequestID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanScoresMDT_Names::AssessedPlans_Name) {
      PlansReferenceType::deserialize(valueType.second, accessor.getAssessedPlans(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanScoresMDT_Names::AssessmentTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAssessmentTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + PlanScoresMDT_Names::ScoringProcessID_Name) {
      ScoringProcessID_Type::deserialize(valueType.second, accessor.getScoringProcessID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanScoresMDT_Names::ScoredOpConstraint_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanScoresMDT::ScoredOpConstraint& boundedList = accessor.getScoredOpConstraint();
        const uci::type::PlanScoresMDT::ScoredOpConstraint::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OpConstraintScoreType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PlanScoresMDT::serialize(const uci::type::PlanScoresMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanScoresMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanScoresMDT_Names::Extern_Type_Name);
  }
  PlanScoresID_Type::serialize(accessor.getPlanScoresID(), node, PlanScoresMDT_Names::PlanScoresID_Name);
  if (accessor.hasRequestID()) {
    RequestID_Type::serialize(accessor.getRequestID(), node, PlanScoresMDT_Names::RequestID_Name);
  }
  PlansReferenceType::serialize(accessor.getAssessedPlans(), node, PlanScoresMDT_Names::AssessedPlans_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getAssessmentTime(), node, PlanScoresMDT_Names::AssessmentTime_Name);
  ScoringProcessID_Type::serialize(accessor.getScoringProcessID(), node, PlanScoresMDT_Names::ScoringProcessID_Name);
  {
    const uci::type::PlanScoresMDT::ScoredOpConstraint& boundedList = accessor.getScoredOpConstraint();
    for (uci::type::PlanScoresMDT::ScoredOpConstraint::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OpConstraintScoreType::serialize(boundedList.at(i), node, PlanScoresMDT_Names::ScoredOpConstraint_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanScoresMDT& PlanScoresMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanScoresMDT>().release());
}

uci::type::PlanScoresMDT& PlanScoresMDT::create(const uci::type::PlanScoresMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanScoresMDT> newAccessor{boost::make_unique<asb_uci::type::PlanScoresMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanScoresMDT::destroy(uci::type::PlanScoresMDT& accessor) {
  delete dynamic_cast<asb_uci::type::PlanScoresMDT*>(&accessor);
}

} // namespace type

} // namespace uci

