/** @file QualifyingTagsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/QualifyingTagsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/SystemMessageIdentifierType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QualifyingTagsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemMessageIdentifierType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

QualifyingTagsType::QualifyingTagsType()
  : qualifyingSource_Accessor{boost::make_unique<SystemMessageIdentifierType>()} {
}

QualifyingTagsType::~QualifyingTagsType() = default;

void QualifyingTagsType::copy(const uci::type::QualifyingTagsType& accessor) {
  copyImpl(accessor, false);
}

void QualifyingTagsType::copyImpl(const uci::type::QualifyingTagsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const QualifyingTagsType&>(accessor);
    if (accessorImpl.hasQualifiedSpecial()) {
      setQualifiedSpecial(accessorImpl.getQualifiedSpecial());
    } else {
      clearQualifiedSpecial();
    }
    if (accessorImpl.processSpecial_Accessor) {
      setProcessSpecial(*(accessorImpl.processSpecial_Accessor));
    } else {
      processSpecial_Accessor.reset();
    }
    if (accessorImpl.filterOverride_Accessor) {
      setFilterOverride(*(accessorImpl.filterOverride_Accessor));
    } else {
      filterOverride_Accessor.reset();
    }
    if (accessorImpl.highInterest_Accessor) {
      setHighInterest(*(accessorImpl.highInterest_Accessor));
    } else {
      highInterest_Accessor.reset();
    }
    if (accessorImpl.retain_Accessor) {
      setRetain(*(accessorImpl.retain_Accessor));
    } else {
      retain_Accessor.reset();
    }
    setQualifyingSource(*(accessorImpl.qualifyingSource_Accessor));
  }
}

void QualifyingTagsType::reset() noexcept {
  clearQualifiedSpecial();
  processSpecial_Accessor.reset();
  filterOverride_Accessor.reset();
  highInterest_Accessor.reset();
  retain_Accessor.reset();
  qualifyingSource_Accessor->reset();
}

xs::UnsignedShort QualifyingTagsType::getQualifiedSpecial() const {
  if (qualifiedSpecial_Accessor) {
    return *qualifiedSpecial_Accessor;
  }
  throw uci::base::UCIException("Error in getQualifiedSpecial(): An attempt was made to get an optional field that was not enabled, call hasQualifiedSpecial() to determine if it is safe to call getQualifiedSpecial()");
}

uci::type::QualifyingTagsType& QualifyingTagsType::setQualifiedSpecial(xs::UnsignedShort value) {
  qualifiedSpecial_Accessor = value;
  return *this;
}

bool QualifyingTagsType::hasQualifiedSpecial() const noexcept {
  return qualifiedSpecial_Accessor.has_value();
}

uci::type::QualifyingTagsType& QualifyingTagsType::clearQualifiedSpecial() noexcept {
  qualifiedSpecial_Accessor.reset();
  return *this;
}

uci::type::EmptyType& QualifyingTagsType::getProcessSpecial_() const {
  if (processSpecial_Accessor) {
    return *processSpecial_Accessor;
  }
  throw uci::base::UCIException("Error in getProcessSpecial(): An attempt was made to get an optional field that was not enabled, call hasProcessSpecial() to determine if it is safe to call getProcessSpecial()");
}

const uci::type::EmptyType& QualifyingTagsType::getProcessSpecial() const {
  return getProcessSpecial_();
}

uci::type::EmptyType& QualifyingTagsType::getProcessSpecial() {
  return getProcessSpecial_();
}

uci::type::QualifyingTagsType& QualifyingTagsType::setProcessSpecial(const uci::type::EmptyType& value) {
  return setProcessSpecial(value.c_str());
}

uci::type::QualifyingTagsType& QualifyingTagsType::setProcessSpecial(const std::string& value) {
  return setProcessSpecial(value.c_str());
}

uci::type::QualifyingTagsType& QualifyingTagsType::setProcessSpecial(const char* value) {
  enableProcessSpecial().setStringValue(value);
  return *this;
}

bool QualifyingTagsType::hasProcessSpecial() const noexcept {
  return static_cast<bool>(processSpecial_Accessor);
}

uci::type::EmptyType& QualifyingTagsType::enableProcessSpecial(uci::base::accessorType::AccessorType type) {
  if (!processSpecial_Accessor) {
    processSpecial_Accessor = EmptyType::create(type);
  }
  return *processSpecial_Accessor;
}

uci::type::QualifyingTagsType& QualifyingTagsType::clearProcessSpecial() noexcept {
  processSpecial_Accessor.reset();
  return *this;
}

uci::type::EmptyType& QualifyingTagsType::getFilterOverride_() const {
  if (filterOverride_Accessor) {
    return *filterOverride_Accessor;
  }
  throw uci::base::UCIException("Error in getFilterOverride(): An attempt was made to get an optional field that was not enabled, call hasFilterOverride() to determine if it is safe to call getFilterOverride()");
}

const uci::type::EmptyType& QualifyingTagsType::getFilterOverride() const {
  return getFilterOverride_();
}

uci::type::EmptyType& QualifyingTagsType::getFilterOverride() {
  return getFilterOverride_();
}

uci::type::QualifyingTagsType& QualifyingTagsType::setFilterOverride(const uci::type::EmptyType& value) {
  return setFilterOverride(value.c_str());
}

uci::type::QualifyingTagsType& QualifyingTagsType::setFilterOverride(const std::string& value) {
  return setFilterOverride(value.c_str());
}

uci::type::QualifyingTagsType& QualifyingTagsType::setFilterOverride(const char* value) {
  enableFilterOverride().setStringValue(value);
  return *this;
}

bool QualifyingTagsType::hasFilterOverride() const noexcept {
  return static_cast<bool>(filterOverride_Accessor);
}

uci::type::EmptyType& QualifyingTagsType::enableFilterOverride(uci::base::accessorType::AccessorType type) {
  if (!filterOverride_Accessor) {
    filterOverride_Accessor = EmptyType::create(type);
  }
  return *filterOverride_Accessor;
}

uci::type::QualifyingTagsType& QualifyingTagsType::clearFilterOverride() noexcept {
  filterOverride_Accessor.reset();
  return *this;
}

uci::type::EmptyType& QualifyingTagsType::getHighInterest_() const {
  if (highInterest_Accessor) {
    return *highInterest_Accessor;
  }
  throw uci::base::UCIException("Error in getHighInterest(): An attempt was made to get an optional field that was not enabled, call hasHighInterest() to determine if it is safe to call getHighInterest()");
}

const uci::type::EmptyType& QualifyingTagsType::getHighInterest() const {
  return getHighInterest_();
}

uci::type::EmptyType& QualifyingTagsType::getHighInterest() {
  return getHighInterest_();
}

uci::type::QualifyingTagsType& QualifyingTagsType::setHighInterest(const uci::type::EmptyType& value) {
  return setHighInterest(value.c_str());
}

uci::type::QualifyingTagsType& QualifyingTagsType::setHighInterest(const std::string& value) {
  return setHighInterest(value.c_str());
}

uci::type::QualifyingTagsType& QualifyingTagsType::setHighInterest(const char* value) {
  enableHighInterest().setStringValue(value);
  return *this;
}

bool QualifyingTagsType::hasHighInterest() const noexcept {
  return static_cast<bool>(highInterest_Accessor);
}

uci::type::EmptyType& QualifyingTagsType::enableHighInterest(uci::base::accessorType::AccessorType type) {
  if (!highInterest_Accessor) {
    highInterest_Accessor = EmptyType::create(type);
  }
  return *highInterest_Accessor;
}

uci::type::QualifyingTagsType& QualifyingTagsType::clearHighInterest() noexcept {
  highInterest_Accessor.reset();
  return *this;
}

uci::type::EmptyType& QualifyingTagsType::getRetain_() const {
  if (retain_Accessor) {
    return *retain_Accessor;
  }
  throw uci::base::UCIException("Error in getRetain(): An attempt was made to get an optional field that was not enabled, call hasRetain() to determine if it is safe to call getRetain()");
}

const uci::type::EmptyType& QualifyingTagsType::getRetain() const {
  return getRetain_();
}

uci::type::EmptyType& QualifyingTagsType::getRetain() {
  return getRetain_();
}

uci::type::QualifyingTagsType& QualifyingTagsType::setRetain(const uci::type::EmptyType& value) {
  return setRetain(value.c_str());
}

uci::type::QualifyingTagsType& QualifyingTagsType::setRetain(const std::string& value) {
  return setRetain(value.c_str());
}

uci::type::QualifyingTagsType& QualifyingTagsType::setRetain(const char* value) {
  enableRetain().setStringValue(value);
  return *this;
}

bool QualifyingTagsType::hasRetain() const noexcept {
  return static_cast<bool>(retain_Accessor);
}

uci::type::EmptyType& QualifyingTagsType::enableRetain(uci::base::accessorType::AccessorType type) {
  if (!retain_Accessor) {
    retain_Accessor = EmptyType::create(type);
  }
  return *retain_Accessor;
}

uci::type::QualifyingTagsType& QualifyingTagsType::clearRetain() noexcept {
  retain_Accessor.reset();
  return *this;
}

const uci::type::SystemMessageIdentifierType& QualifyingTagsType::getQualifyingSource() const {
  return *qualifyingSource_Accessor;
}

uci::type::SystemMessageIdentifierType& QualifyingTagsType::getQualifyingSource() {
  return *qualifyingSource_Accessor;
}

uci::type::QualifyingTagsType& QualifyingTagsType::setQualifyingSource(const uci::type::SystemMessageIdentifierType& accessor) {
  if (&accessor != qualifyingSource_Accessor.get()) {
    qualifyingSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<QualifyingTagsType> QualifyingTagsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::qualifyingTagsType : type};
  return (requestedType == uci::type::accessorType::qualifyingTagsType) ? boost::make_unique<QualifyingTagsType>() : nullptr;
}

/**  */
namespace QualifyingTagsType_Names {

constexpr const char* Extern_Type_Name{"QualifyingTagsType"};
constexpr const char* QualifiedSpecial_Name{"QualifiedSpecial"};
constexpr const char* ProcessSpecial_Name{"ProcessSpecial"};
constexpr const char* FilterOverride_Name{"FilterOverride"};
constexpr const char* HighInterest_Name{"HighInterest"};
constexpr const char* Retain_Name{"Retain"};
constexpr const char* QualifyingSource_Name{"QualifyingSource"};

} // namespace QualifyingTagsType_Names

void QualifyingTagsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::QualifyingTagsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = QualifyingTagsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + QualifyingTagsType_Names::QualifiedSpecial_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setQualifiedSpecial(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + QualifyingTagsType_Names::ProcessSpecial_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProcessSpecial(*value);
      }
    } else if (valueType.first == nsPrefix + QualifyingTagsType_Names::FilterOverride_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFilterOverride(*value);
      }
    } else if (valueType.first == nsPrefix + QualifyingTagsType_Names::HighInterest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHighInterest(*value);
      }
    } else if (valueType.first == nsPrefix + QualifyingTagsType_Names::Retain_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRetain(*value);
      }
    } else if (valueType.first == nsPrefix + QualifyingTagsType_Names::QualifyingSource_Name) {
      SystemMessageIdentifierType::deserialize(valueType.second, accessor.getQualifyingSource(), nodeName, nsPrefix);
    }
  }
}

std::string QualifyingTagsType::serialize(const uci::type::QualifyingTagsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? QualifyingTagsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, QualifyingTagsType_Names::Extern_Type_Name);
  }
  if (accessor.hasQualifiedSpecial()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getQualifiedSpecial(), node, QualifyingTagsType_Names::QualifiedSpecial_Name);
  }
  if (accessor.hasProcessSpecial()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getProcessSpecial(), node, QualifyingTagsType_Names::ProcessSpecial_Name);
  }
  if (accessor.hasFilterOverride()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getFilterOverride(), node, QualifyingTagsType_Names::FilterOverride_Name);
  }
  if (accessor.hasHighInterest()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getHighInterest(), node, QualifyingTagsType_Names::HighInterest_Name);
  }
  if (accessor.hasRetain()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getRetain(), node, QualifyingTagsType_Names::Retain_Name);
  }
  SystemMessageIdentifierType::serialize(accessor.getQualifyingSource(), node, QualifyingTagsType_Names::QualifyingSource_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::QualifyingTagsType& QualifyingTagsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::QualifyingTagsType>().release());
}

uci::type::QualifyingTagsType& QualifyingTagsType::create(const uci::type::QualifyingTagsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::QualifyingTagsType> newAccessor{boost::make_unique<asb_uci::type::QualifyingTagsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void QualifyingTagsType::destroy(uci::type::QualifyingTagsType& accessor) {
  delete dynamic_cast<asb_uci::type::QualifyingTagsType*>(&accessor);
}

} // namespace type

} // namespace uci

