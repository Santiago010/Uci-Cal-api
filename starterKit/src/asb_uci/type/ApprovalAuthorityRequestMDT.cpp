/** @file ApprovalAuthorityRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ApprovalAuthorityRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ApprovalPolicyID_Type.h"
#include "../../../include/asb_uci/type/RequestBaseType.h"
#include "../../../include/asb_uci/type/ServiceID_Type.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApprovalAuthorityRequestMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApprovalPolicyID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ServiceID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ApprovalAuthorityRequestMDT::ApprovalAuthorityRequestMDT()
  : approverSystemID_Accessor{boost::make_unique<SystemID_Type>()},
    approveeSystemID_Accessor{boost::make_unique<ApproveeSystemID>(0, SIZE_MAX)},
    approvalPolicyID_Accessor{boost::make_unique<ApprovalPolicyID_Type>()} {
}

ApprovalAuthorityRequestMDT::~ApprovalAuthorityRequestMDT() = default;

void ApprovalAuthorityRequestMDT::copy(const uci::type::ApprovalAuthorityRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void ApprovalAuthorityRequestMDT::copyImpl(const uci::type::ApprovalAuthorityRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ApprovalAuthorityRequestMDT&>(accessor);
    setApproverSystemID(*(accessorImpl.approverSystemID_Accessor));
    if (accessorImpl.approverServiceID_Accessor) {
      setApproverServiceID(*(accessorImpl.approverServiceID_Accessor));
    } else {
      approverServiceID_Accessor.reset();
    }
    setApproveeSystemID(*(accessorImpl.approveeSystemID_Accessor));
    setApprovalPolicyID(*(accessorImpl.approvalPolicyID_Accessor));
  }
}

void ApprovalAuthorityRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  approverSystemID_Accessor->reset();
  approverServiceID_Accessor.reset();
  approveeSystemID_Accessor->reset();
  approvalPolicyID_Accessor->reset();
}

const uci::type::SystemID_Type& ApprovalAuthorityRequestMDT::getApproverSystemID() const {
  return *approverSystemID_Accessor;
}

uci::type::SystemID_Type& ApprovalAuthorityRequestMDT::getApproverSystemID() {
  return *approverSystemID_Accessor;
}

uci::type::ApprovalAuthorityRequestMDT& ApprovalAuthorityRequestMDT::setApproverSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != approverSystemID_Accessor.get()) {
    approverSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ServiceID_Type& ApprovalAuthorityRequestMDT::getApproverServiceID_() const {
  if (approverServiceID_Accessor) {
    return *approverServiceID_Accessor;
  }
  throw uci::base::UCIException("Error in getApproverServiceID(): An attempt was made to get an optional field that was not enabled, call hasApproverServiceID() to determine if it is safe to call getApproverServiceID()");
}

const uci::type::ServiceID_Type& ApprovalAuthorityRequestMDT::getApproverServiceID() const {
  return getApproverServiceID_();
}

uci::type::ServiceID_Type& ApprovalAuthorityRequestMDT::getApproverServiceID() {
  return getApproverServiceID_();
}

uci::type::ApprovalAuthorityRequestMDT& ApprovalAuthorityRequestMDT::setApproverServiceID(const uci::type::ServiceID_Type& accessor) {
  enableApproverServiceID();
  if (&accessor != approverServiceID_Accessor.get()) {
    approverServiceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ApprovalAuthorityRequestMDT::hasApproverServiceID() const noexcept {
  return static_cast<bool>(approverServiceID_Accessor);
}

uci::type::ServiceID_Type& ApprovalAuthorityRequestMDT::enableApproverServiceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceID_Type : type};
  if ((!approverServiceID_Accessor) || (approverServiceID_Accessor->getAccessorType() != requestedType)) {
    approverServiceID_Accessor = ServiceID_Type::create(requestedType);
    if (!approverServiceID_Accessor) {
      throw uci::base::UCIException("Error in enableApproverServiceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *approverServiceID_Accessor;
}

uci::type::ApprovalAuthorityRequestMDT& ApprovalAuthorityRequestMDT::clearApproverServiceID() noexcept {
  approverServiceID_Accessor.reset();
  return *this;
}

const uci::type::ApprovalAuthorityRequestMDT::ApproveeSystemID& ApprovalAuthorityRequestMDT::getApproveeSystemID() const {
  return *approveeSystemID_Accessor;
}

uci::type::ApprovalAuthorityRequestMDT::ApproveeSystemID& ApprovalAuthorityRequestMDT::getApproveeSystemID() {
  return *approveeSystemID_Accessor;
}

uci::type::ApprovalAuthorityRequestMDT& ApprovalAuthorityRequestMDT::setApproveeSystemID(const uci::type::ApprovalAuthorityRequestMDT::ApproveeSystemID& accessor) {
  if (&accessor != approveeSystemID_Accessor.get()) {
    approveeSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ApprovalPolicyID_Type& ApprovalAuthorityRequestMDT::getApprovalPolicyID() const {
  return *approvalPolicyID_Accessor;
}

uci::type::ApprovalPolicyID_Type& ApprovalAuthorityRequestMDT::getApprovalPolicyID() {
  return *approvalPolicyID_Accessor;
}

uci::type::ApprovalAuthorityRequestMDT& ApprovalAuthorityRequestMDT::setApprovalPolicyID(const uci::type::ApprovalPolicyID_Type& accessor) {
  if (&accessor != approvalPolicyID_Accessor.get()) {
    approvalPolicyID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ApprovalAuthorityRequestMDT> ApprovalAuthorityRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::approvalAuthorityRequestMDT : type};
  return (requestedType == uci::type::accessorType::approvalAuthorityRequestMDT) ? boost::make_unique<ApprovalAuthorityRequestMDT>() : nullptr;
}

/**  */
namespace ApprovalAuthorityRequestMDT_Names {

constexpr const char* Extern_Type_Name{"ApprovalAuthorityRequestMDT"};
constexpr const char* ApproverSystemID_Name{"ApproverSystemID"};
constexpr const char* ApproverServiceID_Name{"ApproverServiceID"};
constexpr const char* ApproveeSystemID_Name{"ApproveeSystemID"};
constexpr const char* ApprovalPolicyID_Name{"ApprovalPolicyID"};

} // namespace ApprovalAuthorityRequestMDT_Names

void ApprovalAuthorityRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ApprovalAuthorityRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ApprovalAuthorityRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ApprovalAuthorityRequestMDT_Names::ApproverSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getApproverSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ApprovalAuthorityRequestMDT_Names::ApproverServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.enableApproverServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ApprovalAuthorityRequestMDT_Names::ApproveeSystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ApprovalAuthorityRequestMDT::ApproveeSystemID& boundedList = accessor.getApproveeSystemID();
        const uci::type::ApprovalAuthorityRequestMDT::ApproveeSystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ApprovalAuthorityRequestMDT_Names::ApprovalPolicyID_Name) {
      ApprovalPolicyID_Type::deserialize(valueType.second, accessor.getApprovalPolicyID(), nodeName, nsPrefix);
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ApprovalAuthorityRequestMDT::serialize(const uci::type::ApprovalAuthorityRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ApprovalAuthorityRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ApprovalAuthorityRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  SystemID_Type::serialize(accessor.getApproverSystemID(), node, ApprovalAuthorityRequestMDT_Names::ApproverSystemID_Name);
  if (accessor.hasApproverServiceID()) {
    ServiceID_Type::serialize(accessor.getApproverServiceID(), node, ApprovalAuthorityRequestMDT_Names::ApproverServiceID_Name);
  }
  {
    const uci::type::ApprovalAuthorityRequestMDT::ApproveeSystemID& boundedList = accessor.getApproveeSystemID();
    for (uci::type::ApprovalAuthorityRequestMDT::ApproveeSystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SystemID_Type::serialize(boundedList.at(i), node, ApprovalAuthorityRequestMDT_Names::ApproveeSystemID_Name);
    }
  }
  ApprovalPolicyID_Type::serialize(accessor.getApprovalPolicyID(), node, ApprovalAuthorityRequestMDT_Names::ApprovalPolicyID_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ApprovalAuthorityRequestMDT& ApprovalAuthorityRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ApprovalAuthorityRequestMDT>().release());
}

uci::type::ApprovalAuthorityRequestMDT& ApprovalAuthorityRequestMDT::create(const uci::type::ApprovalAuthorityRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ApprovalAuthorityRequestMDT> newAccessor{boost::make_unique<asb_uci::type::ApprovalAuthorityRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ApprovalAuthorityRequestMDT::destroy(uci::type::ApprovalAuthorityRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ApprovalAuthorityRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

