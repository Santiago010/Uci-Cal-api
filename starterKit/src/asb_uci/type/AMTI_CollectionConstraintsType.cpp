/** @file AMTI_CollectionConstraintsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AMTI_CollectionConstraintsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CollectionConstraintsType.h"
#include "asb_uci/type/EmconConstraintType.h"
#include "asb_uci/type/SpeedRangeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AMTI_CollectionConstraintsType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/EmconConstraintType.h"
#include "uci/type/SpeedRangeType.h"
#include "uci/type/SpeedType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AMTI_CollectionConstraintsType::AMTI_CollectionConstraintsType()
  : targetRadialVelocity_Accessor{boost::make_unique<TargetRadialVelocity>(0, SIZE_MAX)} {
}

AMTI_CollectionConstraintsType::~AMTI_CollectionConstraintsType() = default;

void AMTI_CollectionConstraintsType::copy(const uci::type::AMTI_CollectionConstraintsType& accessor) {
  copyImpl(accessor, false);
}

void AMTI_CollectionConstraintsType::copyImpl(const uci::type::AMTI_CollectionConstraintsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CollectionConstraintsType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const AMTI_CollectionConstraintsType&>(accessor);
    if (accessorImpl.hasSurfaceMoverVelocityGate()) {
      setSurfaceMoverVelocityGate(accessorImpl.getSurfaceMoverVelocityGate());
    } else {
      clearSurfaceMoverVelocityGate();
    }
    if (accessorImpl.hasTargetRCS()) {
      setTargetRCS(accessorImpl.getTargetRCS());
    } else {
      clearTargetRCS();
    }
    if (accessorImpl.hasFalseAlarmLevel()) {
      setFalseAlarmLevel(accessorImpl.getFalseAlarmLevel());
    } else {
      clearFalseAlarmLevel();
    }
    if (accessorImpl.emcon_Accessor) {
      setEmcon(*(accessorImpl.emcon_Accessor));
    } else {
      emcon_Accessor.reset();
    }
    setTargetRadialVelocity(*(accessorImpl.targetRadialVelocity_Accessor));
  }
}

void AMTI_CollectionConstraintsType::reset() noexcept {
  CollectionConstraintsType::reset();
  clearSurfaceMoverVelocityGate();
  clearTargetRCS();
  clearFalseAlarmLevel();
  emcon_Accessor.reset();
  targetRadialVelocity_Accessor->reset();
}

uci::type::SpeedTypeValue AMTI_CollectionConstraintsType::getSurfaceMoverVelocityGate() const {
  if (surfaceMoverVelocityGate_Accessor) {
    return *surfaceMoverVelocityGate_Accessor;
  }
  throw uci::base::UCIException("Error in getSurfaceMoverVelocityGate(): An attempt was made to get an optional field that was not enabled, call hasSurfaceMoverVelocityGate() to determine if it is safe to call getSurfaceMoverVelocityGate()");
}

uci::type::AMTI_CollectionConstraintsType& AMTI_CollectionConstraintsType::setSurfaceMoverVelocityGate(uci::type::SpeedTypeValue value) {
  surfaceMoverVelocityGate_Accessor = value;
  return *this;
}

bool AMTI_CollectionConstraintsType::hasSurfaceMoverVelocityGate() const noexcept {
  return surfaceMoverVelocityGate_Accessor.has_value();
}

uci::type::AMTI_CollectionConstraintsType& AMTI_CollectionConstraintsType::clearSurfaceMoverVelocityGate() noexcept {
  surfaceMoverVelocityGate_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue AMTI_CollectionConstraintsType::getTargetRCS() const {
  if (targetRCS_Accessor) {
    return *targetRCS_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetRCS(): An attempt was made to get an optional field that was not enabled, call hasTargetRCS() to determine if it is safe to call getTargetRCS()");
}

uci::type::AMTI_CollectionConstraintsType& AMTI_CollectionConstraintsType::setTargetRCS(uci::type::DecibelTypeValue value) {
  targetRCS_Accessor = value;
  return *this;
}

bool AMTI_CollectionConstraintsType::hasTargetRCS() const noexcept {
  return targetRCS_Accessor.has_value();
}

uci::type::AMTI_CollectionConstraintsType& AMTI_CollectionConstraintsType::clearTargetRCS() noexcept {
  targetRCS_Accessor.reset();
  return *this;
}

xs::UnsignedByte AMTI_CollectionConstraintsType::getFalseAlarmLevel() const {
  if (falseAlarmLevel_Accessor) {
    return *falseAlarmLevel_Accessor;
  }
  throw uci::base::UCIException("Error in getFalseAlarmLevel(): An attempt was made to get an optional field that was not enabled, call hasFalseAlarmLevel() to determine if it is safe to call getFalseAlarmLevel()");
}

uci::type::AMTI_CollectionConstraintsType& AMTI_CollectionConstraintsType::setFalseAlarmLevel(xs::UnsignedByte value) {
  falseAlarmLevel_Accessor = value;
  return *this;
}

bool AMTI_CollectionConstraintsType::hasFalseAlarmLevel() const noexcept {
  return falseAlarmLevel_Accessor.has_value();
}

uci::type::AMTI_CollectionConstraintsType& AMTI_CollectionConstraintsType::clearFalseAlarmLevel() noexcept {
  falseAlarmLevel_Accessor.reset();
  return *this;
}

uci::type::EmconConstraintType& AMTI_CollectionConstraintsType::getEmcon_() const {
  if (emcon_Accessor) {
    return *emcon_Accessor;
  }
  throw uci::base::UCIException("Error in getEmcon(): An attempt was made to get an optional field that was not enabled, call hasEmcon() to determine if it is safe to call getEmcon()");
}

const uci::type::EmconConstraintType& AMTI_CollectionConstraintsType::getEmcon() const {
  return getEmcon_();
}

uci::type::EmconConstraintType& AMTI_CollectionConstraintsType::getEmcon() {
  return getEmcon_();
}

uci::type::AMTI_CollectionConstraintsType& AMTI_CollectionConstraintsType::setEmcon(const uci::type::EmconConstraintType& accessor) {
  enableEmcon();
  if (&accessor != emcon_Accessor.get()) {
    emcon_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AMTI_CollectionConstraintsType::hasEmcon() const noexcept {
  return static_cast<bool>(emcon_Accessor);
}

uci::type::EmconConstraintType& AMTI_CollectionConstraintsType::enableEmcon(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emconConstraintType : type};
  if ((!emcon_Accessor) || (emcon_Accessor->getAccessorType() != requestedType)) {
    emcon_Accessor = EmconConstraintType::create(requestedType);
    if (!emcon_Accessor) {
      throw uci::base::UCIException("Error in enableEmcon(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emcon_Accessor;
}

uci::type::AMTI_CollectionConstraintsType& AMTI_CollectionConstraintsType::clearEmcon() noexcept {
  emcon_Accessor.reset();
  return *this;
}

const uci::type::AMTI_CollectionConstraintsType::TargetRadialVelocity& AMTI_CollectionConstraintsType::getTargetRadialVelocity() const {
  return *targetRadialVelocity_Accessor;
}

uci::type::AMTI_CollectionConstraintsType::TargetRadialVelocity& AMTI_CollectionConstraintsType::getTargetRadialVelocity() {
  return *targetRadialVelocity_Accessor;
}

uci::type::AMTI_CollectionConstraintsType& AMTI_CollectionConstraintsType::setTargetRadialVelocity(const uci::type::AMTI_CollectionConstraintsType::TargetRadialVelocity& accessor) {
  if (&accessor != targetRadialVelocity_Accessor.get()) {
    targetRadialVelocity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<AMTI_CollectionConstraintsType> AMTI_CollectionConstraintsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aMTI_CollectionConstraintsType : type};
  return (requestedType == uci::type::accessorType::aMTI_CollectionConstraintsType) ? boost::make_unique<AMTI_CollectionConstraintsType>() : nullptr;
}

/**  */
namespace AMTI_CollectionConstraintsType_Names {

constexpr const char* Extern_Type_Name{"AMTI_CollectionConstraintsType"};
constexpr const char* SurfaceMoverVelocityGate_Name{"SurfaceMoverVelocityGate"};
constexpr const char* TargetRCS_Name{"TargetRCS"};
constexpr const char* FalseAlarmLevel_Name{"FalseAlarmLevel"};
constexpr const char* Emcon_Name{"Emcon"};
constexpr const char* TargetRadialVelocity_Name{"TargetRadialVelocity"};

} // namespace AMTI_CollectionConstraintsType_Names

void AMTI_CollectionConstraintsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AMTI_CollectionConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AMTI_CollectionConstraintsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AMTI_CollectionConstraintsType_Names::SurfaceMoverVelocityGate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSurfaceMoverVelocityGate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AMTI_CollectionConstraintsType_Names::TargetRCS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetRCS(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AMTI_CollectionConstraintsType_Names::FalseAlarmLevel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFalseAlarmLevel(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + AMTI_CollectionConstraintsType_Names::Emcon_Name) {
      EmconConstraintType::deserialize(valueType.second, accessor.enableEmcon(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_CollectionConstraintsType_Names::TargetRadialVelocity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AMTI_CollectionConstraintsType::TargetRadialVelocity& boundedList = accessor.getTargetRadialVelocity();
        const uci::type::AMTI_CollectionConstraintsType::TargetRadialVelocity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SpeedRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  CollectionConstraintsType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string AMTI_CollectionConstraintsType::serialize(const uci::type::AMTI_CollectionConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AMTI_CollectionConstraintsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AMTI_CollectionConstraintsType_Names::Extern_Type_Name);
  }
  CollectionConstraintsType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasSurfaceMoverVelocityGate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSurfaceMoverVelocityGate(), node, AMTI_CollectionConstraintsType_Names::SurfaceMoverVelocityGate_Name);
  }
  if (accessor.hasTargetRCS()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTargetRCS(), node, AMTI_CollectionConstraintsType_Names::TargetRCS_Name);
  }
  if (accessor.hasFalseAlarmLevel()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getFalseAlarmLevel(), node, AMTI_CollectionConstraintsType_Names::FalseAlarmLevel_Name);
  }
  if (accessor.hasEmcon()) {
    EmconConstraintType::serialize(accessor.getEmcon(), node, AMTI_CollectionConstraintsType_Names::Emcon_Name);
  }
  {
    const uci::type::AMTI_CollectionConstraintsType::TargetRadialVelocity& boundedList = accessor.getTargetRadialVelocity();
    for (uci::type::AMTI_CollectionConstraintsType::TargetRadialVelocity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SpeedRangeType::serialize(boundedList.at(i), node, AMTI_CollectionConstraintsType_Names::TargetRadialVelocity_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AMTI_CollectionConstraintsType& AMTI_CollectionConstraintsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AMTI_CollectionConstraintsType>().release());
}

uci::type::AMTI_CollectionConstraintsType& AMTI_CollectionConstraintsType::create(const uci::type::AMTI_CollectionConstraintsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AMTI_CollectionConstraintsType> newAccessor{boost::make_unique<asb_uci::type::AMTI_CollectionConstraintsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AMTI_CollectionConstraintsType::destroy(uci::type::AMTI_CollectionConstraintsType& accessor) {
  delete dynamic_cast<asb_uci::type::AMTI_CollectionConstraintsType*>(&accessor);
}

} // namespace type

} // namespace uci

