/** @file ECEF_StateCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ECEF_StateCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ECEF_AccelerationAccelerationCovarianceType.h"
#include "asb_uci/type/ECEF_PositionAccelerationCovarianceType.h"
#include "asb_uci/type/ECEF_PositionOrientationCovarianceType.h"
#include "asb_uci/type/ECEF_PositionPositionCovarianceType.h"
#include "asb_uci/type/ECEF_PositionVelocityCovarianceType.h"
#include "asb_uci/type/ECEF_VelocityAccelerationCovarianceType.h"
#include "asb_uci/type/ECEF_VelocityOrientationCovarianceType.h"
#include "asb_uci/type/ECEF_VelocityVelocityCovarianceType.h"
#include "asb_uci/type/OrientationCovarianceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ECEF_AccelerationAccelerationCovarianceType.h"
#include "uci/type/ECEF_PositionAccelerationCovarianceType.h"
#include "uci/type/ECEF_PositionOrientationCovarianceType.h"
#include "uci/type/ECEF_PositionPositionCovarianceType.h"
#include "uci/type/ECEF_PositionVelocityCovarianceType.h"
#include "uci/type/ECEF_StateCovarianceType.h"
#include "uci/type/ECEF_VelocityAccelerationCovarianceType.h"
#include "uci/type/ECEF_VelocityOrientationCovarianceType.h"
#include "uci/type/ECEF_VelocityVelocityCovarianceType.h"
#include "uci/type/OrientationCovarianceType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ECEF_StateCovarianceType::ECEF_StateCovarianceType() = default;

ECEF_StateCovarianceType::~ECEF_StateCovarianceType() = default;

void ECEF_StateCovarianceType::copy(const uci::type::ECEF_StateCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void ECEF_StateCovarianceType::copyImpl(const uci::type::ECEF_StateCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ECEF_StateCovarianceType&>(accessor);
    if (accessorImpl.hasTimeBiasError()) {
      setTimeBiasError(accessorImpl.getTimeBiasError());
    } else {
      clearTimeBiasError();
    }
    if (accessorImpl.positionPosition_Accessor) {
      setPositionPosition(*(accessorImpl.positionPosition_Accessor));
    } else {
      positionPosition_Accessor.reset();
    }
    if (accessorImpl.positionVelocity_Accessor) {
      setPositionVelocity(*(accessorImpl.positionVelocity_Accessor));
    } else {
      positionVelocity_Accessor.reset();
    }
    if (accessorImpl.velocityVelocity_Accessor) {
      setVelocityVelocity(*(accessorImpl.velocityVelocity_Accessor));
    } else {
      velocityVelocity_Accessor.reset();
    }
    if (accessorImpl.accelerationAcceleration_Accessor) {
      setAccelerationAcceleration(*(accessorImpl.accelerationAcceleration_Accessor));
    } else {
      accelerationAcceleration_Accessor.reset();
    }
    if (accessorImpl.positionAcceleration_Accessor) {
      setPositionAcceleration(*(accessorImpl.positionAcceleration_Accessor));
    } else {
      positionAcceleration_Accessor.reset();
    }
    if (accessorImpl.velocityAcceleration_Accessor) {
      setVelocityAcceleration(*(accessorImpl.velocityAcceleration_Accessor));
    } else {
      velocityAcceleration_Accessor.reset();
    }
    if (accessorImpl.orientationCovariance_Accessor) {
      setOrientationCovariance(*(accessorImpl.orientationCovariance_Accessor));
    } else {
      orientationCovariance_Accessor.reset();
    }
    if (accessorImpl.positionOrientationCovariance_Accessor) {
      setPositionOrientationCovariance(*(accessorImpl.positionOrientationCovariance_Accessor));
    } else {
      positionOrientationCovariance_Accessor.reset();
    }
    if (accessorImpl.velocityOrientationCovariance_Accessor) {
      setVelocityOrientationCovariance(*(accessorImpl.velocityOrientationCovariance_Accessor));
    } else {
      velocityOrientationCovariance_Accessor.reset();
    }
  }
}

void ECEF_StateCovarianceType::reset() noexcept {
  clearTimeBiasError();
  positionPosition_Accessor.reset();
  positionVelocity_Accessor.reset();
  velocityVelocity_Accessor.reset();
  accelerationAcceleration_Accessor.reset();
  positionAcceleration_Accessor.reset();
  velocityAcceleration_Accessor.reset();
  orientationCovariance_Accessor.reset();
  positionOrientationCovariance_Accessor.reset();
  velocityOrientationCovariance_Accessor.reset();
}

xs::Double ECEF_StateCovarianceType::getTimeBiasError() const {
  if (timeBiasError_Accessor) {
    return *timeBiasError_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeBiasError(): An attempt was made to get an optional field that was not enabled, call hasTimeBiasError() to determine if it is safe to call getTimeBiasError()");
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::setTimeBiasError(xs::Double value) {
  timeBiasError_Accessor = value;
  return *this;
}

bool ECEF_StateCovarianceType::hasTimeBiasError() const noexcept {
  return timeBiasError_Accessor.has_value();
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::clearTimeBiasError() noexcept {
  timeBiasError_Accessor.reset();
  return *this;
}

uci::type::ECEF_PositionPositionCovarianceType& ECEF_StateCovarianceType::getPositionPosition_() const {
  if (positionPosition_Accessor) {
    return *positionPosition_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionPosition(): An attempt was made to get an optional field that was not enabled, call hasPositionPosition() to determine if it is safe to call getPositionPosition()");
}

const uci::type::ECEF_PositionPositionCovarianceType& ECEF_StateCovarianceType::getPositionPosition() const {
  return getPositionPosition_();
}

uci::type::ECEF_PositionPositionCovarianceType& ECEF_StateCovarianceType::getPositionPosition() {
  return getPositionPosition_();
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::setPositionPosition(const uci::type::ECEF_PositionPositionCovarianceType& accessor) {
  enablePositionPosition();
  if (&accessor != positionPosition_Accessor.get()) {
    positionPosition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_StateCovarianceType::hasPositionPosition() const noexcept {
  return static_cast<bool>(positionPosition_Accessor);
}

uci::type::ECEF_PositionPositionCovarianceType& ECEF_StateCovarianceType::enablePositionPosition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_PositionPositionCovarianceType : type};
  if ((!positionPosition_Accessor) || (positionPosition_Accessor->getAccessorType() != requestedType)) {
    positionPosition_Accessor = ECEF_PositionPositionCovarianceType::create(requestedType);
    if (!positionPosition_Accessor) {
      throw uci::base::UCIException("Error in enablePositionPosition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionPosition_Accessor;
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::clearPositionPosition() noexcept {
  positionPosition_Accessor.reset();
  return *this;
}

uci::type::ECEF_PositionVelocityCovarianceType& ECEF_StateCovarianceType::getPositionVelocity_() const {
  if (positionVelocity_Accessor) {
    return *positionVelocity_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionVelocity(): An attempt was made to get an optional field that was not enabled, call hasPositionVelocity() to determine if it is safe to call getPositionVelocity()");
}

const uci::type::ECEF_PositionVelocityCovarianceType& ECEF_StateCovarianceType::getPositionVelocity() const {
  return getPositionVelocity_();
}

uci::type::ECEF_PositionVelocityCovarianceType& ECEF_StateCovarianceType::getPositionVelocity() {
  return getPositionVelocity_();
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::setPositionVelocity(const uci::type::ECEF_PositionVelocityCovarianceType& accessor) {
  enablePositionVelocity();
  if (&accessor != positionVelocity_Accessor.get()) {
    positionVelocity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_StateCovarianceType::hasPositionVelocity() const noexcept {
  return static_cast<bool>(positionVelocity_Accessor);
}

uci::type::ECEF_PositionVelocityCovarianceType& ECEF_StateCovarianceType::enablePositionVelocity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_PositionVelocityCovarianceType : type};
  if ((!positionVelocity_Accessor) || (positionVelocity_Accessor->getAccessorType() != requestedType)) {
    positionVelocity_Accessor = ECEF_PositionVelocityCovarianceType::create(requestedType);
    if (!positionVelocity_Accessor) {
      throw uci::base::UCIException("Error in enablePositionVelocity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionVelocity_Accessor;
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::clearPositionVelocity() noexcept {
  positionVelocity_Accessor.reset();
  return *this;
}

uci::type::ECEF_VelocityVelocityCovarianceType& ECEF_StateCovarianceType::getVelocityVelocity_() const {
  if (velocityVelocity_Accessor) {
    return *velocityVelocity_Accessor;
  }
  throw uci::base::UCIException("Error in getVelocityVelocity(): An attempt was made to get an optional field that was not enabled, call hasVelocityVelocity() to determine if it is safe to call getVelocityVelocity()");
}

const uci::type::ECEF_VelocityVelocityCovarianceType& ECEF_StateCovarianceType::getVelocityVelocity() const {
  return getVelocityVelocity_();
}

uci::type::ECEF_VelocityVelocityCovarianceType& ECEF_StateCovarianceType::getVelocityVelocity() {
  return getVelocityVelocity_();
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::setVelocityVelocity(const uci::type::ECEF_VelocityVelocityCovarianceType& accessor) {
  enableVelocityVelocity();
  if (&accessor != velocityVelocity_Accessor.get()) {
    velocityVelocity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_StateCovarianceType::hasVelocityVelocity() const noexcept {
  return static_cast<bool>(velocityVelocity_Accessor);
}

uci::type::ECEF_VelocityVelocityCovarianceType& ECEF_StateCovarianceType::enableVelocityVelocity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_VelocityVelocityCovarianceType : type};
  if ((!velocityVelocity_Accessor) || (velocityVelocity_Accessor->getAccessorType() != requestedType)) {
    velocityVelocity_Accessor = ECEF_VelocityVelocityCovarianceType::create(requestedType);
    if (!velocityVelocity_Accessor) {
      throw uci::base::UCIException("Error in enableVelocityVelocity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *velocityVelocity_Accessor;
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::clearVelocityVelocity() noexcept {
  velocityVelocity_Accessor.reset();
  return *this;
}

uci::type::ECEF_AccelerationAccelerationCovarianceType& ECEF_StateCovarianceType::getAccelerationAcceleration_() const {
  if (accelerationAcceleration_Accessor) {
    return *accelerationAcceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getAccelerationAcceleration(): An attempt was made to get an optional field that was not enabled, call hasAccelerationAcceleration() to determine if it is safe to call getAccelerationAcceleration()");
}

const uci::type::ECEF_AccelerationAccelerationCovarianceType& ECEF_StateCovarianceType::getAccelerationAcceleration() const {
  return getAccelerationAcceleration_();
}

uci::type::ECEF_AccelerationAccelerationCovarianceType& ECEF_StateCovarianceType::getAccelerationAcceleration() {
  return getAccelerationAcceleration_();
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::setAccelerationAcceleration(const uci::type::ECEF_AccelerationAccelerationCovarianceType& accessor) {
  enableAccelerationAcceleration();
  if (&accessor != accelerationAcceleration_Accessor.get()) {
    accelerationAcceleration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_StateCovarianceType::hasAccelerationAcceleration() const noexcept {
  return static_cast<bool>(accelerationAcceleration_Accessor);
}

uci::type::ECEF_AccelerationAccelerationCovarianceType& ECEF_StateCovarianceType::enableAccelerationAcceleration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_AccelerationAccelerationCovarianceType : type};
  if ((!accelerationAcceleration_Accessor) || (accelerationAcceleration_Accessor->getAccessorType() != requestedType)) {
    accelerationAcceleration_Accessor = ECEF_AccelerationAccelerationCovarianceType::create(requestedType);
    if (!accelerationAcceleration_Accessor) {
      throw uci::base::UCIException("Error in enableAccelerationAcceleration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *accelerationAcceleration_Accessor;
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::clearAccelerationAcceleration() noexcept {
  accelerationAcceleration_Accessor.reset();
  return *this;
}

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_StateCovarianceType::getPositionAcceleration_() const {
  if (positionAcceleration_Accessor) {
    return *positionAcceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionAcceleration(): An attempt was made to get an optional field that was not enabled, call hasPositionAcceleration() to determine if it is safe to call getPositionAcceleration()");
}

const uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_StateCovarianceType::getPositionAcceleration() const {
  return getPositionAcceleration_();
}

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_StateCovarianceType::getPositionAcceleration() {
  return getPositionAcceleration_();
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::setPositionAcceleration(const uci::type::ECEF_PositionAccelerationCovarianceType& accessor) {
  enablePositionAcceleration();
  if (&accessor != positionAcceleration_Accessor.get()) {
    positionAcceleration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_StateCovarianceType::hasPositionAcceleration() const noexcept {
  return static_cast<bool>(positionAcceleration_Accessor);
}

uci::type::ECEF_PositionAccelerationCovarianceType& ECEF_StateCovarianceType::enablePositionAcceleration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_PositionAccelerationCovarianceType : type};
  if ((!positionAcceleration_Accessor) || (positionAcceleration_Accessor->getAccessorType() != requestedType)) {
    positionAcceleration_Accessor = ECEF_PositionAccelerationCovarianceType::create(requestedType);
    if (!positionAcceleration_Accessor) {
      throw uci::base::UCIException("Error in enablePositionAcceleration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionAcceleration_Accessor;
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::clearPositionAcceleration() noexcept {
  positionAcceleration_Accessor.reset();
  return *this;
}

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_StateCovarianceType::getVelocityAcceleration_() const {
  if (velocityAcceleration_Accessor) {
    return *velocityAcceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getVelocityAcceleration(): An attempt was made to get an optional field that was not enabled, call hasVelocityAcceleration() to determine if it is safe to call getVelocityAcceleration()");
}

const uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_StateCovarianceType::getVelocityAcceleration() const {
  return getVelocityAcceleration_();
}

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_StateCovarianceType::getVelocityAcceleration() {
  return getVelocityAcceleration_();
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::setVelocityAcceleration(const uci::type::ECEF_VelocityAccelerationCovarianceType& accessor) {
  enableVelocityAcceleration();
  if (&accessor != velocityAcceleration_Accessor.get()) {
    velocityAcceleration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_StateCovarianceType::hasVelocityAcceleration() const noexcept {
  return static_cast<bool>(velocityAcceleration_Accessor);
}

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_StateCovarianceType::enableVelocityAcceleration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_VelocityAccelerationCovarianceType : type};
  if ((!velocityAcceleration_Accessor) || (velocityAcceleration_Accessor->getAccessorType() != requestedType)) {
    velocityAcceleration_Accessor = ECEF_VelocityAccelerationCovarianceType::create(requestedType);
    if (!velocityAcceleration_Accessor) {
      throw uci::base::UCIException("Error in enableVelocityAcceleration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *velocityAcceleration_Accessor;
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::clearVelocityAcceleration() noexcept {
  velocityAcceleration_Accessor.reset();
  return *this;
}

uci::type::OrientationCovarianceType& ECEF_StateCovarianceType::getOrientationCovariance_() const {
  if (orientationCovariance_Accessor) {
    return *orientationCovariance_Accessor;
  }
  throw uci::base::UCIException("Error in getOrientationCovariance(): An attempt was made to get an optional field that was not enabled, call hasOrientationCovariance() to determine if it is safe to call getOrientationCovariance()");
}

const uci::type::OrientationCovarianceType& ECEF_StateCovarianceType::getOrientationCovariance() const {
  return getOrientationCovariance_();
}

uci::type::OrientationCovarianceType& ECEF_StateCovarianceType::getOrientationCovariance() {
  return getOrientationCovariance_();
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::setOrientationCovariance(const uci::type::OrientationCovarianceType& accessor) {
  enableOrientationCovariance();
  if (&accessor != orientationCovariance_Accessor.get()) {
    orientationCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_StateCovarianceType::hasOrientationCovariance() const noexcept {
  return static_cast<bool>(orientationCovariance_Accessor);
}

uci::type::OrientationCovarianceType& ECEF_StateCovarianceType::enableOrientationCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orientationCovarianceType : type};
  if ((!orientationCovariance_Accessor) || (orientationCovariance_Accessor->getAccessorType() != requestedType)) {
    orientationCovariance_Accessor = OrientationCovarianceType::create(requestedType);
    if (!orientationCovariance_Accessor) {
      throw uci::base::UCIException("Error in enableOrientationCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orientationCovariance_Accessor;
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::clearOrientationCovariance() noexcept {
  orientationCovariance_Accessor.reset();
  return *this;
}

uci::type::ECEF_PositionOrientationCovarianceType& ECEF_StateCovarianceType::getPositionOrientationCovariance_() const {
  if (positionOrientationCovariance_Accessor) {
    return *positionOrientationCovariance_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionOrientationCovariance(): An attempt was made to get an optional field that was not enabled, call hasPositionOrientationCovariance() to determine if it is safe to call getPositionOrientationCovariance()");
}

const uci::type::ECEF_PositionOrientationCovarianceType& ECEF_StateCovarianceType::getPositionOrientationCovariance() const {
  return getPositionOrientationCovariance_();
}

uci::type::ECEF_PositionOrientationCovarianceType& ECEF_StateCovarianceType::getPositionOrientationCovariance() {
  return getPositionOrientationCovariance_();
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::setPositionOrientationCovariance(const uci::type::ECEF_PositionOrientationCovarianceType& accessor) {
  enablePositionOrientationCovariance();
  if (&accessor != positionOrientationCovariance_Accessor.get()) {
    positionOrientationCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_StateCovarianceType::hasPositionOrientationCovariance() const noexcept {
  return static_cast<bool>(positionOrientationCovariance_Accessor);
}

uci::type::ECEF_PositionOrientationCovarianceType& ECEF_StateCovarianceType::enablePositionOrientationCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_PositionOrientationCovarianceType : type};
  if ((!positionOrientationCovariance_Accessor) || (positionOrientationCovariance_Accessor->getAccessorType() != requestedType)) {
    positionOrientationCovariance_Accessor = ECEF_PositionOrientationCovarianceType::create(requestedType);
    if (!positionOrientationCovariance_Accessor) {
      throw uci::base::UCIException("Error in enablePositionOrientationCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionOrientationCovariance_Accessor;
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::clearPositionOrientationCovariance() noexcept {
  positionOrientationCovariance_Accessor.reset();
  return *this;
}

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_StateCovarianceType::getVelocityOrientationCovariance_() const {
  if (velocityOrientationCovariance_Accessor) {
    return *velocityOrientationCovariance_Accessor;
  }
  throw uci::base::UCIException("Error in getVelocityOrientationCovariance(): An attempt was made to get an optional field that was not enabled, call hasVelocityOrientationCovariance() to determine if it is safe to call getVelocityOrientationCovariance()");
}

const uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_StateCovarianceType::getVelocityOrientationCovariance() const {
  return getVelocityOrientationCovariance_();
}

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_StateCovarianceType::getVelocityOrientationCovariance() {
  return getVelocityOrientationCovariance_();
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::setVelocityOrientationCovariance(const uci::type::ECEF_VelocityOrientationCovarianceType& accessor) {
  enableVelocityOrientationCovariance();
  if (&accessor != velocityOrientationCovariance_Accessor.get()) {
    velocityOrientationCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_StateCovarianceType::hasVelocityOrientationCovariance() const noexcept {
  return static_cast<bool>(velocityOrientationCovariance_Accessor);
}

uci::type::ECEF_VelocityOrientationCovarianceType& ECEF_StateCovarianceType::enableVelocityOrientationCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_VelocityOrientationCovarianceType : type};
  if ((!velocityOrientationCovariance_Accessor) || (velocityOrientationCovariance_Accessor->getAccessorType() != requestedType)) {
    velocityOrientationCovariance_Accessor = ECEF_VelocityOrientationCovarianceType::create(requestedType);
    if (!velocityOrientationCovariance_Accessor) {
      throw uci::base::UCIException("Error in enableVelocityOrientationCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *velocityOrientationCovariance_Accessor;
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::clearVelocityOrientationCovariance() noexcept {
  velocityOrientationCovariance_Accessor.reset();
  return *this;
}

std::unique_ptr<ECEF_StateCovarianceType> ECEF_StateCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_StateCovarianceType : type};
  return (requestedType == uci::type::accessorType::eCEF_StateCovarianceType) ? boost::make_unique<ECEF_StateCovarianceType>() : nullptr;
}

/**  */
namespace ECEF_StateCovarianceType_Names {

constexpr const char* Extern_Type_Name{"ECEF_StateCovarianceType"};
constexpr const char* TimeBiasError_Name{"TimeBiasError"};
constexpr const char* PositionPosition_Name{"PositionPosition"};
constexpr const char* PositionVelocity_Name{"PositionVelocity"};
constexpr const char* VelocityVelocity_Name{"VelocityVelocity"};
constexpr const char* AccelerationAcceleration_Name{"AccelerationAcceleration"};
constexpr const char* PositionAcceleration_Name{"PositionAcceleration"};
constexpr const char* VelocityAcceleration_Name{"VelocityAcceleration"};
constexpr const char* OrientationCovariance_Name{"OrientationCovariance"};
constexpr const char* PositionOrientationCovariance_Name{"PositionOrientationCovariance"};
constexpr const char* VelocityOrientationCovariance_Name{"VelocityOrientationCovariance"};

} // namespace ECEF_StateCovarianceType_Names

void ECEF_StateCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ECEF_StateCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ECEF_StateCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::TimeBiasError_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeBiasError(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::PositionPosition_Name) {
      ECEF_PositionPositionCovarianceType::deserialize(valueType.second, accessor.enablePositionPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::PositionVelocity_Name) {
      ECEF_PositionVelocityCovarianceType::deserialize(valueType.second, accessor.enablePositionVelocity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::VelocityVelocity_Name) {
      ECEF_VelocityVelocityCovarianceType::deserialize(valueType.second, accessor.enableVelocityVelocity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::AccelerationAcceleration_Name) {
      ECEF_AccelerationAccelerationCovarianceType::deserialize(valueType.second, accessor.enableAccelerationAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::PositionAcceleration_Name) {
      ECEF_PositionAccelerationCovarianceType::deserialize(valueType.second, accessor.enablePositionAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::VelocityAcceleration_Name) {
      ECEF_VelocityAccelerationCovarianceType::deserialize(valueType.second, accessor.enableVelocityAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::OrientationCovariance_Name) {
      OrientationCovarianceType::deserialize(valueType.second, accessor.enableOrientationCovariance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::PositionOrientationCovariance_Name) {
      ECEF_PositionOrientationCovarianceType::deserialize(valueType.second, accessor.enablePositionOrientationCovariance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::VelocityOrientationCovariance_Name) {
      ECEF_VelocityOrientationCovarianceType::deserialize(valueType.second, accessor.enableVelocityOrientationCovariance(), nodeName, nsPrefix);
    }
  }
}

std::string ECEF_StateCovarianceType::serialize(const uci::type::ECEF_StateCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ECEF_StateCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ECEF_StateCovarianceType_Names::Extern_Type_Name);
  }
  if (accessor.hasTimeBiasError()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTimeBiasError(), node, ECEF_StateCovarianceType_Names::TimeBiasError_Name);
  }
  if (accessor.hasPositionPosition()) {
    ECEF_PositionPositionCovarianceType::serialize(accessor.getPositionPosition(), node, ECEF_StateCovarianceType_Names::PositionPosition_Name);
  }
  if (accessor.hasPositionVelocity()) {
    ECEF_PositionVelocityCovarianceType::serialize(accessor.getPositionVelocity(), node, ECEF_StateCovarianceType_Names::PositionVelocity_Name);
  }
  if (accessor.hasVelocityVelocity()) {
    ECEF_VelocityVelocityCovarianceType::serialize(accessor.getVelocityVelocity(), node, ECEF_StateCovarianceType_Names::VelocityVelocity_Name);
  }
  if (accessor.hasAccelerationAcceleration()) {
    ECEF_AccelerationAccelerationCovarianceType::serialize(accessor.getAccelerationAcceleration(), node, ECEF_StateCovarianceType_Names::AccelerationAcceleration_Name);
  }
  if (accessor.hasPositionAcceleration()) {
    ECEF_PositionAccelerationCovarianceType::serialize(accessor.getPositionAcceleration(), node, ECEF_StateCovarianceType_Names::PositionAcceleration_Name);
  }
  if (accessor.hasVelocityAcceleration()) {
    ECEF_VelocityAccelerationCovarianceType::serialize(accessor.getVelocityAcceleration(), node, ECEF_StateCovarianceType_Names::VelocityAcceleration_Name);
  }
  if (accessor.hasOrientationCovariance()) {
    OrientationCovarianceType::serialize(accessor.getOrientationCovariance(), node, ECEF_StateCovarianceType_Names::OrientationCovariance_Name);
  }
  if (accessor.hasPositionOrientationCovariance()) {
    ECEF_PositionOrientationCovarianceType::serialize(accessor.getPositionOrientationCovariance(), node, ECEF_StateCovarianceType_Names::PositionOrientationCovariance_Name);
  }
  if (accessor.hasVelocityOrientationCovariance()) {
    ECEF_VelocityOrientationCovarianceType::serialize(accessor.getVelocityOrientationCovariance(), node, ECEF_StateCovarianceType_Names::VelocityOrientationCovariance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ECEF_StateCovarianceType>().release());
}

uci::type::ECEF_StateCovarianceType& ECEF_StateCovarianceType::create(const uci::type::ECEF_StateCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ECEF_StateCovarianceType> newAccessor{boost::make_unique<asb_uci::type::ECEF_StateCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ECEF_StateCovarianceType::destroy(uci::type::ECEF_StateCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::ECEF_StateCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

