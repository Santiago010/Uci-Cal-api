/** @file PO_ComponentFocalPlaneArrayOperationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentFocalPlaneArrayOperationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentControllabilityA_Type.h"
#include "../../../include/asb_uci/type/DoubleMinMaxType.h"
#include "../../../include/asb_uci/type/DurationRangeType.h"
#include "../../../include/asb_uci/type/FocalPlaneArrayOperationNonUniformityCorrectionType.h"
#include "../../../include/asb_uci/type/PO_FPA_ChannelOperationEnum.h"
#include "../../../include/asb_uci/type/PixelScalingSettingsType.h"
#include "../../../include/asb_uci/type/UnsignedIntegerMinMaxType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentControllabilityA_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DoubleMinMaxType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FocalPlaneArrayOperationNonUniformityCorrectionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentFocalPlaneArrayOperationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_FPA_ChannelOperationEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PixelScalingSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/UnsignedIntegerMinMaxType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentFocalPlaneArrayOperationType::PO_ComponentFocalPlaneArrayOperationType()
  : operationType_Accessor{boost::make_unique<PO_FPA_ChannelOperationEnum>()} {
}

PO_ComponentFocalPlaneArrayOperationType::~PO_ComponentFocalPlaneArrayOperationType() = default;

void PO_ComponentFocalPlaneArrayOperationType::copy(const uci::type::PO_ComponentFocalPlaneArrayOperationType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentFocalPlaneArrayOperationType::copyImpl(const uci::type::PO_ComponentFocalPlaneArrayOperationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentFocalPlaneArrayOperationType&>(accessor);
    setOperationType(*(accessorImpl.operationType_Accessor));
    if (accessorImpl.pixelAggregationSettings_Accessor) {
      setPixelAggregationSettings(*(accessorImpl.pixelAggregationSettings_Accessor));
    } else {
      pixelAggregationSettings_Accessor.reset();
    }
    if (accessorImpl.timeDelayIntegrationSettings_Accessor) {
      setTimeDelayIntegrationSettings(*(accessorImpl.timeDelayIntegrationSettings_Accessor));
    } else {
      timeDelayIntegrationSettings_Accessor.reset();
    }
    if (accessorImpl.pixelScalingSettings_Accessor) {
      setPixelScalingSettings(*(accessorImpl.pixelScalingSettings_Accessor));
    } else {
      pixelScalingSettings_Accessor.reset();
    }
    if (accessorImpl.collectionTimeSettings_Accessor) {
      setCollectionTimeSettings(*(accessorImpl.collectionTimeSettings_Accessor));
    } else {
      collectionTimeSettings_Accessor.reset();
    }
    if (accessorImpl.nonUniformityCorrectionSettings_Accessor) {
      setNonUniformityCorrectionSettings(*(accessorImpl.nonUniformityCorrectionSettings_Accessor));
    } else {
      nonUniformityCorrectionSettings_Accessor.reset();
    }
    if (accessorImpl.controllability_Accessor) {
      setControllability(*(accessorImpl.controllability_Accessor));
    } else {
      controllability_Accessor.reset();
    }
  }
}

void PO_ComponentFocalPlaneArrayOperationType::reset() noexcept {
  operationType_Accessor->reset();
  pixelAggregationSettings_Accessor.reset();
  timeDelayIntegrationSettings_Accessor.reset();
  pixelScalingSettings_Accessor.reset();
  collectionTimeSettings_Accessor.reset();
  nonUniformityCorrectionSettings_Accessor.reset();
  controllability_Accessor.reset();
}

const uci::type::PO_FPA_ChannelOperationEnum& PO_ComponentFocalPlaneArrayOperationType::getOperationType() const {
  return *operationType_Accessor;
}

uci::type::PO_FPA_ChannelOperationEnum& PO_ComponentFocalPlaneArrayOperationType::getOperationType() {
  return *operationType_Accessor;
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::setOperationType(const uci::type::PO_FPA_ChannelOperationEnum& accessor) {
  if (&accessor != operationType_Accessor.get()) {
    operationType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::setOperationType(uci::type::PO_FPA_ChannelOperationEnum::EnumerationItem value) {
  operationType_Accessor->setValue(value);
  return *this;
}


uci::type::UnsignedIntegerMinMaxType& PO_ComponentFocalPlaneArrayOperationType::getPixelAggregationSettings_() const {
  if (pixelAggregationSettings_Accessor) {
    return *pixelAggregationSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getPixelAggregationSettings(): An attempt was made to get an optional field that was not enabled, call hasPixelAggregationSettings() to determine if it is safe to call getPixelAggregationSettings()");
}

const uci::type::UnsignedIntegerMinMaxType& PO_ComponentFocalPlaneArrayOperationType::getPixelAggregationSettings() const {
  return getPixelAggregationSettings_();
}

uci::type::UnsignedIntegerMinMaxType& PO_ComponentFocalPlaneArrayOperationType::getPixelAggregationSettings() {
  return getPixelAggregationSettings_();
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::setPixelAggregationSettings(const uci::type::UnsignedIntegerMinMaxType& accessor) {
  enablePixelAggregationSettings(accessor.getAccessorType());
  if (&accessor != pixelAggregationSettings_Accessor.get()) {
    pixelAggregationSettings_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PO_ComponentFocalPlaneArrayOperationType::hasPixelAggregationSettings() const noexcept {
  return static_cast<bool>(pixelAggregationSettings_Accessor);
}

uci::type::UnsignedIntegerMinMaxType& PO_ComponentFocalPlaneArrayOperationType::enablePixelAggregationSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::unsignedIntegerMinMaxType : type};
  if ((!pixelAggregationSettings_Accessor) || (pixelAggregationSettings_Accessor->getAccessorType() != requestedType)) {
    pixelAggregationSettings_Accessor = UnsignedIntegerMinMaxType::create(requestedType);
    if (!pixelAggregationSettings_Accessor) {
      throw uci::base::UCIException("Error in enablePixelAggregationSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pixelAggregationSettings_Accessor;
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::clearPixelAggregationSettings() noexcept {
  pixelAggregationSettings_Accessor.reset();
  return *this;
}

uci::type::DoubleMinMaxType& PO_ComponentFocalPlaneArrayOperationType::getTimeDelayIntegrationSettings_() const {
  if (timeDelayIntegrationSettings_Accessor) {
    return *timeDelayIntegrationSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeDelayIntegrationSettings(): An attempt was made to get an optional field that was not enabled, call hasTimeDelayIntegrationSettings() to determine if it is safe to call getTimeDelayIntegrationSettings()");
}

const uci::type::DoubleMinMaxType& PO_ComponentFocalPlaneArrayOperationType::getTimeDelayIntegrationSettings() const {
  return getTimeDelayIntegrationSettings_();
}

uci::type::DoubleMinMaxType& PO_ComponentFocalPlaneArrayOperationType::getTimeDelayIntegrationSettings() {
  return getTimeDelayIntegrationSettings_();
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::setTimeDelayIntegrationSettings(const uci::type::DoubleMinMaxType& accessor) {
  enableTimeDelayIntegrationSettings();
  if (&accessor != timeDelayIntegrationSettings_Accessor.get()) {
    timeDelayIntegrationSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentFocalPlaneArrayOperationType::hasTimeDelayIntegrationSettings() const noexcept {
  return static_cast<bool>(timeDelayIntegrationSettings_Accessor);
}

uci::type::DoubleMinMaxType& PO_ComponentFocalPlaneArrayOperationType::enableTimeDelayIntegrationSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::doubleMinMaxType : type};
  if ((!timeDelayIntegrationSettings_Accessor) || (timeDelayIntegrationSettings_Accessor->getAccessorType() != requestedType)) {
    timeDelayIntegrationSettings_Accessor = DoubleMinMaxType::create(requestedType);
    if (!timeDelayIntegrationSettings_Accessor) {
      throw uci::base::UCIException("Error in enableTimeDelayIntegrationSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timeDelayIntegrationSettings_Accessor;
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::clearTimeDelayIntegrationSettings() noexcept {
  timeDelayIntegrationSettings_Accessor.reset();
  return *this;
}

uci::type::PixelScalingSettingsType& PO_ComponentFocalPlaneArrayOperationType::getPixelScalingSettings_() const {
  if (pixelScalingSettings_Accessor) {
    return *pixelScalingSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getPixelScalingSettings(): An attempt was made to get an optional field that was not enabled, call hasPixelScalingSettings() to determine if it is safe to call getPixelScalingSettings()");
}

const uci::type::PixelScalingSettingsType& PO_ComponentFocalPlaneArrayOperationType::getPixelScalingSettings() const {
  return getPixelScalingSettings_();
}

uci::type::PixelScalingSettingsType& PO_ComponentFocalPlaneArrayOperationType::getPixelScalingSettings() {
  return getPixelScalingSettings_();
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::setPixelScalingSettings(const uci::type::PixelScalingSettingsType& accessor) {
  enablePixelScalingSettings();
  if (&accessor != pixelScalingSettings_Accessor.get()) {
    pixelScalingSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentFocalPlaneArrayOperationType::hasPixelScalingSettings() const noexcept {
  return static_cast<bool>(pixelScalingSettings_Accessor);
}

uci::type::PixelScalingSettingsType& PO_ComponentFocalPlaneArrayOperationType::enablePixelScalingSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pixelScalingSettingsType : type};
  if ((!pixelScalingSettings_Accessor) || (pixelScalingSettings_Accessor->getAccessorType() != requestedType)) {
    pixelScalingSettings_Accessor = PixelScalingSettingsType::create(requestedType);
    if (!pixelScalingSettings_Accessor) {
      throw uci::base::UCIException("Error in enablePixelScalingSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pixelScalingSettings_Accessor;
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::clearPixelScalingSettings() noexcept {
  pixelScalingSettings_Accessor.reset();
  return *this;
}

uci::type::DurationRangeType& PO_ComponentFocalPlaneArrayOperationType::getCollectionTimeSettings_() const {
  if (collectionTimeSettings_Accessor) {
    return *collectionTimeSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionTimeSettings(): An attempt was made to get an optional field that was not enabled, call hasCollectionTimeSettings() to determine if it is safe to call getCollectionTimeSettings()");
}

const uci::type::DurationRangeType& PO_ComponentFocalPlaneArrayOperationType::getCollectionTimeSettings() const {
  return getCollectionTimeSettings_();
}

uci::type::DurationRangeType& PO_ComponentFocalPlaneArrayOperationType::getCollectionTimeSettings() {
  return getCollectionTimeSettings_();
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::setCollectionTimeSettings(const uci::type::DurationRangeType& accessor) {
  enableCollectionTimeSettings();
  if (&accessor != collectionTimeSettings_Accessor.get()) {
    collectionTimeSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentFocalPlaneArrayOperationType::hasCollectionTimeSettings() const noexcept {
  return static_cast<bool>(collectionTimeSettings_Accessor);
}

uci::type::DurationRangeType& PO_ComponentFocalPlaneArrayOperationType::enableCollectionTimeSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::durationRangeType : type};
  if ((!collectionTimeSettings_Accessor) || (collectionTimeSettings_Accessor->getAccessorType() != requestedType)) {
    collectionTimeSettings_Accessor = DurationRangeType::create(requestedType);
    if (!collectionTimeSettings_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionTimeSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionTimeSettings_Accessor;
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::clearCollectionTimeSettings() noexcept {
  collectionTimeSettings_Accessor.reset();
  return *this;
}

uci::type::FocalPlaneArrayOperationNonUniformityCorrectionType& PO_ComponentFocalPlaneArrayOperationType::getNonUniformityCorrectionSettings_() const {
  if (nonUniformityCorrectionSettings_Accessor) {
    return *nonUniformityCorrectionSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getNonUniformityCorrectionSettings(): An attempt was made to get an optional field that was not enabled, call hasNonUniformityCorrectionSettings() to determine if it is safe to call getNonUniformityCorrectionSettings()");
}

const uci::type::FocalPlaneArrayOperationNonUniformityCorrectionType& PO_ComponentFocalPlaneArrayOperationType::getNonUniformityCorrectionSettings() const {
  return getNonUniformityCorrectionSettings_();
}

uci::type::FocalPlaneArrayOperationNonUniformityCorrectionType& PO_ComponentFocalPlaneArrayOperationType::getNonUniformityCorrectionSettings() {
  return getNonUniformityCorrectionSettings_();
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::setNonUniformityCorrectionSettings(const uci::type::FocalPlaneArrayOperationNonUniformityCorrectionType& accessor) {
  enableNonUniformityCorrectionSettings();
  if (&accessor != nonUniformityCorrectionSettings_Accessor.get()) {
    nonUniformityCorrectionSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentFocalPlaneArrayOperationType::hasNonUniformityCorrectionSettings() const noexcept {
  return static_cast<bool>(nonUniformityCorrectionSettings_Accessor);
}

uci::type::FocalPlaneArrayOperationNonUniformityCorrectionType& PO_ComponentFocalPlaneArrayOperationType::enableNonUniformityCorrectionSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::focalPlaneArrayOperationNonUniformityCorrectionType : type};
  if ((!nonUniformityCorrectionSettings_Accessor) || (nonUniformityCorrectionSettings_Accessor->getAccessorType() != requestedType)) {
    nonUniformityCorrectionSettings_Accessor = FocalPlaneArrayOperationNonUniformityCorrectionType::create(requestedType);
    if (!nonUniformityCorrectionSettings_Accessor) {
      throw uci::base::UCIException("Error in enableNonUniformityCorrectionSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nonUniformityCorrectionSettings_Accessor;
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::clearNonUniformityCorrectionSettings() noexcept {
  nonUniformityCorrectionSettings_Accessor.reset();
  return *this;
}

uci::type::ComponentControllabilityA_Type& PO_ComponentFocalPlaneArrayOperationType::getControllability_() const {
  if (controllability_Accessor) {
    return *controllability_Accessor;
  }
  throw uci::base::UCIException("Error in getControllability(): An attempt was made to get an optional field that was not enabled, call hasControllability() to determine if it is safe to call getControllability()");
}

const uci::type::ComponentControllabilityA_Type& PO_ComponentFocalPlaneArrayOperationType::getControllability() const {
  return getControllability_();
}

uci::type::ComponentControllabilityA_Type& PO_ComponentFocalPlaneArrayOperationType::getControllability() {
  return getControllability_();
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::setControllability(const uci::type::ComponentControllabilityA_Type& accessor) {
  enableControllability();
  if (&accessor != controllability_Accessor.get()) {
    controllability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentFocalPlaneArrayOperationType::hasControllability() const noexcept {
  return static_cast<bool>(controllability_Accessor);
}

uci::type::ComponentControllabilityA_Type& PO_ComponentFocalPlaneArrayOperationType::enableControllability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControllabilityA_Type : type};
  if ((!controllability_Accessor) || (controllability_Accessor->getAccessorType() != requestedType)) {
    controllability_Accessor = ComponentControllabilityA_Type::create(requestedType);
    if (!controllability_Accessor) {
      throw uci::base::UCIException("Error in enableControllability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *controllability_Accessor;
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::clearControllability() noexcept {
  controllability_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ComponentFocalPlaneArrayOperationType> PO_ComponentFocalPlaneArrayOperationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentFocalPlaneArrayOperationType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentFocalPlaneArrayOperationType) ? boost::make_unique<PO_ComponentFocalPlaneArrayOperationType>() : nullptr;
}

/**  */
namespace PO_ComponentFocalPlaneArrayOperationType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentFocalPlaneArrayOperationType"};
constexpr const char* OperationType_Name{"OperationType"};
constexpr const char* PixelAggregationSettings_Name{"PixelAggregationSettings"};
constexpr const char* TimeDelayIntegrationSettings_Name{"TimeDelayIntegrationSettings"};
constexpr const char* PixelScalingSettings_Name{"PixelScalingSettings"};
constexpr const char* CollectionTimeSettings_Name{"CollectionTimeSettings"};
constexpr const char* NonUniformityCorrectionSettings_Name{"NonUniformityCorrectionSettings"};
constexpr const char* Controllability_Name{"Controllability"};

} // namespace PO_ComponentFocalPlaneArrayOperationType_Names

void PO_ComponentFocalPlaneArrayOperationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentFocalPlaneArrayOperationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentFocalPlaneArrayOperationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentFocalPlaneArrayOperationType_Names::OperationType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getOperationType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentFocalPlaneArrayOperationType_Names::PixelAggregationSettings_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePixelAggregationSettings(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentFocalPlaneArrayOperationType_Names::TimeDelayIntegrationSettings_Name) {
      DoubleMinMaxType::deserialize(valueType.second, accessor.enableTimeDelayIntegrationSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentFocalPlaneArrayOperationType_Names::PixelScalingSettings_Name) {
      PixelScalingSettingsType::deserialize(valueType.second, accessor.enablePixelScalingSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentFocalPlaneArrayOperationType_Names::CollectionTimeSettings_Name) {
      DurationRangeType::deserialize(valueType.second, accessor.enableCollectionTimeSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentFocalPlaneArrayOperationType_Names::NonUniformityCorrectionSettings_Name) {
      FocalPlaneArrayOperationNonUniformityCorrectionType::deserialize(valueType.second, accessor.enableNonUniformityCorrectionSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentFocalPlaneArrayOperationType_Names::Controllability_Name) {
      ComponentControllabilityA_Type::deserialize(valueType.second, accessor.enableControllability(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentFocalPlaneArrayOperationType::serialize(const uci::type::PO_ComponentFocalPlaneArrayOperationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentFocalPlaneArrayOperationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentFocalPlaneArrayOperationType_Names::Extern_Type_Name);
  }
  PO_FPA_ChannelOperationEnum::serialize(accessor.getOperationType(), node, PO_ComponentFocalPlaneArrayOperationType_Names::OperationType_Name, false);
  if (accessor.hasPixelAggregationSettings()) {
    UnsignedIntegerMinMaxType::serialize(accessor.getPixelAggregationSettings(), node, PO_ComponentFocalPlaneArrayOperationType_Names::PixelAggregationSettings_Name);
  }
  if (accessor.hasTimeDelayIntegrationSettings()) {
    DoubleMinMaxType::serialize(accessor.getTimeDelayIntegrationSettings(), node, PO_ComponentFocalPlaneArrayOperationType_Names::TimeDelayIntegrationSettings_Name);
  }
  if (accessor.hasPixelScalingSettings()) {
    PixelScalingSettingsType::serialize(accessor.getPixelScalingSettings(), node, PO_ComponentFocalPlaneArrayOperationType_Names::PixelScalingSettings_Name);
  }
  if (accessor.hasCollectionTimeSettings()) {
    DurationRangeType::serialize(accessor.getCollectionTimeSettings(), node, PO_ComponentFocalPlaneArrayOperationType_Names::CollectionTimeSettings_Name);
  }
  if (accessor.hasNonUniformityCorrectionSettings()) {
    FocalPlaneArrayOperationNonUniformityCorrectionType::serialize(accessor.getNonUniformityCorrectionSettings(), node, PO_ComponentFocalPlaneArrayOperationType_Names::NonUniformityCorrectionSettings_Name);
  }
  if (accessor.hasControllability()) {
    ComponentControllabilityA_Type::serialize(accessor.getControllability(), node, PO_ComponentFocalPlaneArrayOperationType_Names::Controllability_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentFocalPlaneArrayOperationType>().release());
}

uci::type::PO_ComponentFocalPlaneArrayOperationType& PO_ComponentFocalPlaneArrayOperationType::create(const uci::type::PO_ComponentFocalPlaneArrayOperationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentFocalPlaneArrayOperationType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentFocalPlaneArrayOperationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentFocalPlaneArrayOperationType::destroy(uci::type::PO_ComponentFocalPlaneArrayOperationType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentFocalPlaneArrayOperationType*>(&accessor);
}

} // namespace type

} // namespace uci

