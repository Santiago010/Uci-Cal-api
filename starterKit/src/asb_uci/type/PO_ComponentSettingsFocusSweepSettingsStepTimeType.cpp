/** @file PO_ComponentSettingsFocusSweepSettingsStepTimeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentSettingsFocusSweepSettingsStepTimeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentSettingsFocusSweepSettingsStepTimeType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsFocusSweepSettingsStepTimeType::PO_ComponentSettingsFocusSweepSettingsStepTimeType() = default;

PO_ComponentSettingsFocusSweepSettingsStepTimeType::~PO_ComponentSettingsFocusSweepSettingsStepTimeType() = default;

void PO_ComponentSettingsFocusSweepSettingsStepTimeType::copy(const uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsFocusSweepSettingsStepTimeType::copyImpl(const uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsFocusSweepSettingsStepTimeType&>(accessor);
    numberOfLines_Accessor = (accessorImpl.numberOfLines_Accessor ? accessorImpl.numberOfLines_Accessor : boost::none);
    collectionTime_Accessor = (accessorImpl.collectionTime_Accessor ? accessorImpl.collectionTime_Accessor : boost::none);
  }
}

void PO_ComponentSettingsFocusSweepSettingsStepTimeType::reset() noexcept {
  numberOfLines_Accessor.reset();
  collectionTime_Accessor.reset();
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType::PO_ComponentSettingsFocusSweepSettingsStepTimeTypeChoice PO_ComponentSettingsFocusSweepSettingsStepTimeType::getPO_ComponentSettingsFocusSweepSettingsStepTimeTypeChoiceOrdinal() const noexcept {
  if (numberOfLines_Accessor) {
    return PO_COMPONENTSETTINGSFOCUSSWEEPSETTINGSSTEPTIMETYPE_CHOICE_NUMBEROFLINES;
  }
  if (collectionTime_Accessor) {
    return PO_COMPONENTSETTINGSFOCUSSWEEPSETTINGSSTEPTIMETYPE_CHOICE_COLLECTIONTIME;
  }
  return PO_COMPONENTSETTINGSFOCUSSWEEPSETTINGSSTEPTIMETYPE_CHOICE_NONE;
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& PO_ComponentSettingsFocusSweepSettingsStepTimeType::setPO_ComponentSettingsFocusSweepSettingsStepTimeTypeChoiceOrdinal(uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType::PO_ComponentSettingsFocusSweepSettingsStepTimeTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case PO_COMPONENTSETTINGSFOCUSSWEEPSETTINGSSTEPTIMETYPE_CHOICE_NUMBEROFLINES:
      chooseNumberOfLines();
      break;
    case PO_COMPONENTSETTINGSFOCUSSWEEPSETTINGSSTEPTIMETYPE_CHOICE_COLLECTIONTIME:
      chooseCollectionTime();
      break;
    default:
      throw uci::base::UCIException("Error in setPO_ComponentSettingsFocusSweepSettingsStepTimeTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

xs::UnsignedInt PO_ComponentSettingsFocusSweepSettingsStepTimeType::getNumberOfLines() const {
  if (numberOfLines_Accessor) {
    return *numberOfLines_Accessor;
  }
  throw uci::base::UCIException("Error in getNumberOfLines(): Unable to get NumberOfLines, field not selected");
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& PO_ComponentSettingsFocusSweepSettingsStepTimeType::setNumberOfLines(xs::UnsignedInt value) {
  chooseNumberOfLines();
  numberOfLines_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsFocusSweepSettingsStepTimeType::isNumberOfLines() const noexcept {
  return static_cast<bool>(numberOfLines_Accessor);
}

void PO_ComponentSettingsFocusSweepSettingsStepTimeType::chooseNumberOfLines() {
  collectionTime_Accessor.reset();
  if (!numberOfLines_Accessor) {
    numberOfLines_Accessor = boost::optional<asb_xs::UnsignedInt>();
  }
}

xs::Duration PO_ComponentSettingsFocusSweepSettingsStepTimeType::getCollectionTime() const {
  if (collectionTime_Accessor) {
    return *collectionTime_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionTime(): Unable to get CollectionTime, field not selected");
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& PO_ComponentSettingsFocusSweepSettingsStepTimeType::setCollectionTime(xs::Duration value) {
  chooseCollectionTime();
  collectionTime_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsFocusSweepSettingsStepTimeType::isCollectionTime() const noexcept {
  return static_cast<bool>(collectionTime_Accessor);
}

void PO_ComponentSettingsFocusSweepSettingsStepTimeType::chooseCollectionTime() {
  numberOfLines_Accessor.reset();
  if (!collectionTime_Accessor) {
    collectionTime_Accessor = boost::optional<asb_xs::Duration>();
  }
}

std::unique_ptr<PO_ComponentSettingsFocusSweepSettingsStepTimeType> PO_ComponentSettingsFocusSweepSettingsStepTimeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocusSweepSettingsStepTimeType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsFocusSweepSettingsStepTimeType) ? boost::make_unique<PO_ComponentSettingsFocusSweepSettingsStepTimeType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsFocusSweepSettingsStepTimeType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsFocusSweepSettingsStepTimeType"};
constexpr const char* NumberOfLines_Name{"NumberOfLines"};
constexpr const char* CollectionTime_Name{"CollectionTime"};

} // namespace PO_ComponentSettingsFocusSweepSettingsStepTimeType_Names

void PO_ComponentSettingsFocusSweepSettingsStepTimeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsFocusSweepSettingsStepTimeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocusSweepSettingsStepTimeType_Names::NumberOfLines_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfLines(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocusSweepSettingsStepTimeType_Names::CollectionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCollectionTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string PO_ComponentSettingsFocusSweepSettingsStepTimeType::serialize(const uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsFocusSweepSettingsStepTimeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsFocusSweepSettingsStepTimeType_Names::Extern_Type_Name);
  }
  if (accessor.isNumberOfLines()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumberOfLines(), node, PO_ComponentSettingsFocusSweepSettingsStepTimeType_Names::NumberOfLines_Name);
  } else if (accessor.isCollectionTime()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getCollectionTime(), node, PO_ComponentSettingsFocusSweepSettingsStepTimeType_Names::CollectionTime_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& PO_ComponentSettingsFocusSweepSettingsStepTimeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType>().release());
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& PO_ComponentSettingsFocusSweepSettingsStepTimeType::create(const uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsFocusSweepSettingsStepTimeType::destroy(uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType*>(&accessor);
}

} // namespace type

} // namespace uci

