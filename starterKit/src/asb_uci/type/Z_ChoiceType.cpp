/** @file Z_ChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/Z_ChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AltitudeOffsetReferenceType.h"
#include "../../../include/asb_uci/type/AltitudeReferenceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AltitudeOffsetReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AltitudeReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceOffsetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Z_ChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

Z_ChoiceType::Z_ChoiceType() = default;

Z_ChoiceType::~Z_ChoiceType() = default;

void Z_ChoiceType::copy(const uci::type::Z_ChoiceType& accessor) {
  copyImpl(accessor, false);
}

void Z_ChoiceType::copyImpl(const uci::type::Z_ChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const Z_ChoiceType&>(accessor);
    z_Accessor = (accessorImpl.z_Accessor ? accessorImpl.z_Accessor : boost::none);
    if (accessorImpl.altitudeOffset_Accessor) {
      setAltitudeOffset(*(accessorImpl.altitudeOffset_Accessor));
    } else {
      altitudeOffset_Accessor.reset();
    }
    if (accessorImpl.absoluteAltitude_Accessor) {
      setAbsoluteAltitude(*(accessorImpl.absoluteAltitude_Accessor));
    } else {
      absoluteAltitude_Accessor.reset();
    }
  }
}

void Z_ChoiceType::reset() noexcept {
  z_Accessor.reset();
  altitudeOffset_Accessor.reset();
  absoluteAltitude_Accessor.reset();
}

uci::type::Z_ChoiceType::Z_ChoiceTypeChoice Z_ChoiceType::getZ_ChoiceTypeChoiceOrdinal() const noexcept {
  if (z_Accessor) {
    return Z_CHOICETYPE_CHOICE_Z;
  }
  if (altitudeOffset_Accessor) {
    return Z_CHOICETYPE_CHOICE_ALTITUDEOFFSET;
  }
  if (absoluteAltitude_Accessor) {
    return Z_CHOICETYPE_CHOICE_ABSOLUTEALTITUDE;
  }
  return Z_CHOICETYPE_CHOICE_NONE;
}

uci::type::Z_ChoiceType& Z_ChoiceType::setZ_ChoiceTypeChoiceOrdinal(uci::type::Z_ChoiceType::Z_ChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case Z_CHOICETYPE_CHOICE_Z:
      chooseZ();
      break;
    case Z_CHOICETYPE_CHOICE_ALTITUDEOFFSET:
      chooseAltitudeOffset("setZ_ChoiceTypeChoiceOrdinal", type);
      break;
    case Z_CHOICETYPE_CHOICE_ABSOLUTEALTITUDE:
      chooseAbsoluteAltitude("setZ_ChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setZ_ChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::DistanceOffsetTypeValue Z_ChoiceType::getZ() const {
  if (z_Accessor) {
    return *z_Accessor;
  }
  throw uci::base::UCIException("Error in getZ(): Unable to get Z, field not selected");
}

uci::type::Z_ChoiceType& Z_ChoiceType::setZ(uci::type::DistanceOffsetTypeValue value) {
  chooseZ();
  z_Accessor = value;
  return *this;
}

bool Z_ChoiceType::isZ() const noexcept {
  return static_cast<bool>(z_Accessor);
}

void Z_ChoiceType::chooseZ() {
  altitudeOffset_Accessor.reset();
  absoluteAltitude_Accessor.reset();
  if (!z_Accessor) {
    z_Accessor = boost::optional<asb_xs::Double>();
  }
}

uci::type::AltitudeOffsetReferenceType& Z_ChoiceType::getAltitudeOffset_() const {
  if (altitudeOffset_Accessor) {
    return *altitudeOffset_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeOffset(): Unable to get AltitudeOffset, field not selected");
}

const uci::type::AltitudeOffsetReferenceType& Z_ChoiceType::getAltitudeOffset() const {
  return getAltitudeOffset_();
}

uci::type::AltitudeOffsetReferenceType& Z_ChoiceType::getAltitudeOffset() {
  return getAltitudeOffset_();
}

uci::type::Z_ChoiceType& Z_ChoiceType::setAltitudeOffset(const uci::type::AltitudeOffsetReferenceType& accessor) {
  chooseAltitudeOffset();
  if (&accessor != altitudeOffset_Accessor.get()) {
    altitudeOffset_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool Z_ChoiceType::isAltitudeOffset() const noexcept {
  return static_cast<bool>(altitudeOffset_Accessor);
}

uci::type::AltitudeOffsetReferenceType& Z_ChoiceType::chooseAltitudeOffset(const std::string& method, uci::base::accessorType::AccessorType type) {
  z_Accessor.reset();
  absoluteAltitude_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::altitudeOffsetReferenceType : type};
  if ((!altitudeOffset_Accessor) || (altitudeOffset_Accessor->getAccessorType() != requestedType)) {
    altitudeOffset_Accessor = AltitudeOffsetReferenceType::create(type);
    if (!altitudeOffset_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *altitudeOffset_Accessor;
}

uci::type::AltitudeOffsetReferenceType& Z_ChoiceType::chooseAltitudeOffset(uci::base::accessorType::AccessorType type) {
  return chooseAltitudeOffset("chooseAltitudeOffset", type);
}

uci::type::AltitudeReferenceType& Z_ChoiceType::getAbsoluteAltitude_() const {
  if (absoluteAltitude_Accessor) {
    return *absoluteAltitude_Accessor;
  }
  throw uci::base::UCIException("Error in getAbsoluteAltitude(): Unable to get AbsoluteAltitude, field not selected");
}

const uci::type::AltitudeReferenceType& Z_ChoiceType::getAbsoluteAltitude() const {
  return getAbsoluteAltitude_();
}

uci::type::AltitudeReferenceType& Z_ChoiceType::getAbsoluteAltitude() {
  return getAbsoluteAltitude_();
}

uci::type::Z_ChoiceType& Z_ChoiceType::setAbsoluteAltitude(const uci::type::AltitudeReferenceType& accessor) {
  chooseAbsoluteAltitude();
  if (&accessor != absoluteAltitude_Accessor.get()) {
    absoluteAltitude_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool Z_ChoiceType::isAbsoluteAltitude() const noexcept {
  return static_cast<bool>(absoluteAltitude_Accessor);
}

uci::type::AltitudeReferenceType& Z_ChoiceType::chooseAbsoluteAltitude(const std::string& method, uci::base::accessorType::AccessorType type) {
  z_Accessor.reset();
  altitudeOffset_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::altitudeReferenceType : type};
  if ((!absoluteAltitude_Accessor) || (absoluteAltitude_Accessor->getAccessorType() != requestedType)) {
    absoluteAltitude_Accessor = AltitudeReferenceType::create(type);
    if (!absoluteAltitude_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *absoluteAltitude_Accessor;
}

uci::type::AltitudeReferenceType& Z_ChoiceType::chooseAbsoluteAltitude(uci::base::accessorType::AccessorType type) {
  return chooseAbsoluteAltitude("chooseAbsoluteAltitude", type);
}

std::unique_ptr<Z_ChoiceType> Z_ChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::z_ChoiceType : type};
  return (requestedType == uci::type::accessorType::z_ChoiceType) ? boost::make_unique<Z_ChoiceType>() : nullptr;
}

/**  */
namespace Z_ChoiceType_Names {

constexpr const char* Extern_Type_Name{"Z_ChoiceType"};
constexpr const char* Z_Name{"Z"};
constexpr const char* AltitudeOffset_Name{"AltitudeOffset"};
constexpr const char* AbsoluteAltitude_Name{"AbsoluteAltitude"};

} // namespace Z_ChoiceType_Names

void Z_ChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::Z_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = Z_ChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + Z_ChoiceType_Names::Z_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setZ(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + Z_ChoiceType_Names::AltitudeOffset_Name) {
      AltitudeOffsetReferenceType::deserialize(valueType.second, accessor.chooseAltitudeOffset(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Z_ChoiceType_Names::AbsoluteAltitude_Name) {
      AltitudeReferenceType::deserialize(valueType.second, accessor.chooseAbsoluteAltitude(), nodeName, nsPrefix);
    }
  }
}

std::string Z_ChoiceType::serialize(const uci::type::Z_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? Z_ChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, Z_ChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isZ()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getZ(), node, Z_ChoiceType_Names::Z_Name);
  } else if (accessor.isAltitudeOffset()) {
    AltitudeOffsetReferenceType::serialize(accessor.getAltitudeOffset(), node, Z_ChoiceType_Names::AltitudeOffset_Name);
  } else if (accessor.isAbsoluteAltitude()) {
    AltitudeReferenceType::serialize(accessor.getAbsoluteAltitude(), node, Z_ChoiceType_Names::AbsoluteAltitude_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::Z_ChoiceType& Z_ChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::Z_ChoiceType>().release());
}

uci::type::Z_ChoiceType& Z_ChoiceType::create(const uci::type::Z_ChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::Z_ChoiceType> newAccessor{boost::make_unique<asb_uci::type::Z_ChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void Z_ChoiceType::destroy(uci::type::Z_ChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::Z_ChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

