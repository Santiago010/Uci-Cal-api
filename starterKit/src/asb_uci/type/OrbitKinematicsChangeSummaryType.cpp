/** @file OrbitKinematicsChangeSummaryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitKinematicsChangeSummaryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitKinematicsType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitKinematicsChangeSummaryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitKinematicsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitKinematicsChangeSummaryType::OrbitKinematicsChangeSummaryType() = default;

OrbitKinematicsChangeSummaryType::~OrbitKinematicsChangeSummaryType() = default;

void OrbitKinematicsChangeSummaryType::copy(const uci::type::OrbitKinematicsChangeSummaryType& accessor) {
  copyImpl(accessor, false);
}

void OrbitKinematicsChangeSummaryType::copyImpl(const uci::type::OrbitKinematicsChangeSummaryType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitKinematicsChangeSummaryType&>(accessor);
    if (accessorImpl.expectedOrbit_Accessor) {
      setExpectedOrbit(*(accessorImpl.expectedOrbit_Accessor));
    } else {
      expectedOrbit_Accessor.reset();
    }
    if (accessorImpl.actualOrbit_Accessor) {
      setActualOrbit(*(accessorImpl.actualOrbit_Accessor));
    } else {
      actualOrbit_Accessor.reset();
    }
  }
}

void OrbitKinematicsChangeSummaryType::reset() noexcept {
  expectedOrbit_Accessor.reset();
  actualOrbit_Accessor.reset();
}

uci::type::OrbitKinematicsType& OrbitKinematicsChangeSummaryType::getExpectedOrbit_() const {
  if (expectedOrbit_Accessor) {
    return *expectedOrbit_Accessor;
  }
  throw uci::base::UCIException("Error in getExpectedOrbit(): An attempt was made to get an optional field that was not enabled, call hasExpectedOrbit() to determine if it is safe to call getExpectedOrbit()");
}

const uci::type::OrbitKinematicsType& OrbitKinematicsChangeSummaryType::getExpectedOrbit() const {
  return getExpectedOrbit_();
}

uci::type::OrbitKinematicsType& OrbitKinematicsChangeSummaryType::getExpectedOrbit() {
  return getExpectedOrbit_();
}

uci::type::OrbitKinematicsChangeSummaryType& OrbitKinematicsChangeSummaryType::setExpectedOrbit(const uci::type::OrbitKinematicsType& accessor) {
  enableExpectedOrbit(accessor.getAccessorType());
  if (&accessor != expectedOrbit_Accessor.get()) {
    expectedOrbit_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OrbitKinematicsChangeSummaryType::hasExpectedOrbit() const noexcept {
  return static_cast<bool>(expectedOrbit_Accessor);
}

uci::type::OrbitKinematicsType& OrbitKinematicsChangeSummaryType::enableExpectedOrbit(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsType : type};
  if ((!expectedOrbit_Accessor) || (expectedOrbit_Accessor->getAccessorType() != requestedType)) {
    expectedOrbit_Accessor = OrbitKinematicsType::create(requestedType);
    if (!expectedOrbit_Accessor) {
      throw uci::base::UCIException("Error in enableExpectedOrbit(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *expectedOrbit_Accessor;
}

uci::type::OrbitKinematicsChangeSummaryType& OrbitKinematicsChangeSummaryType::clearExpectedOrbit() noexcept {
  expectedOrbit_Accessor.reset();
  return *this;
}

uci::type::OrbitKinematicsType& OrbitKinematicsChangeSummaryType::getActualOrbit_() const {
  if (actualOrbit_Accessor) {
    return *actualOrbit_Accessor;
  }
  throw uci::base::UCIException("Error in getActualOrbit(): An attempt was made to get an optional field that was not enabled, call hasActualOrbit() to determine if it is safe to call getActualOrbit()");
}

const uci::type::OrbitKinematicsType& OrbitKinematicsChangeSummaryType::getActualOrbit() const {
  return getActualOrbit_();
}

uci::type::OrbitKinematicsType& OrbitKinematicsChangeSummaryType::getActualOrbit() {
  return getActualOrbit_();
}

uci::type::OrbitKinematicsChangeSummaryType& OrbitKinematicsChangeSummaryType::setActualOrbit(const uci::type::OrbitKinematicsType& accessor) {
  enableActualOrbit(accessor.getAccessorType());
  if (&accessor != actualOrbit_Accessor.get()) {
    actualOrbit_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OrbitKinematicsChangeSummaryType::hasActualOrbit() const noexcept {
  return static_cast<bool>(actualOrbit_Accessor);
}

uci::type::OrbitKinematicsType& OrbitKinematicsChangeSummaryType::enableActualOrbit(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsType : type};
  if ((!actualOrbit_Accessor) || (actualOrbit_Accessor->getAccessorType() != requestedType)) {
    actualOrbit_Accessor = OrbitKinematicsType::create(requestedType);
    if (!actualOrbit_Accessor) {
      throw uci::base::UCIException("Error in enableActualOrbit(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *actualOrbit_Accessor;
}

uci::type::OrbitKinematicsChangeSummaryType& OrbitKinematicsChangeSummaryType::clearActualOrbit() noexcept {
  actualOrbit_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitKinematicsChangeSummaryType> OrbitKinematicsChangeSummaryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsChangeSummaryType : type};
  return (requestedType == uci::type::accessorType::orbitKinematicsChangeSummaryType) ? boost::make_unique<OrbitKinematicsChangeSummaryType>() : nullptr;
}

/**  */
namespace OrbitKinematicsChangeSummaryType_Names {

constexpr const char* Extern_Type_Name{"OrbitKinematicsChangeSummaryType"};
constexpr const char* ExpectedOrbit_Name{"ExpectedOrbit"};
constexpr const char* ActualOrbit_Name{"ActualOrbit"};

} // namespace OrbitKinematicsChangeSummaryType_Names

void OrbitKinematicsChangeSummaryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitKinematicsChangeSummaryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitKinematicsChangeSummaryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitKinematicsChangeSummaryType_Names::ExpectedOrbit_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableExpectedOrbit(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsChangeSummaryType_Names::ActualOrbit_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableActualOrbit(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string OrbitKinematicsChangeSummaryType::serialize(const uci::type::OrbitKinematicsChangeSummaryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitKinematicsChangeSummaryType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitKinematicsChangeSummaryType_Names::Extern_Type_Name);
  }
  if (accessor.hasExpectedOrbit()) {
    OrbitKinematicsType::serialize(accessor.getExpectedOrbit(), node, OrbitKinematicsChangeSummaryType_Names::ExpectedOrbit_Name);
  }
  if (accessor.hasActualOrbit()) {
    OrbitKinematicsType::serialize(accessor.getActualOrbit(), node, OrbitKinematicsChangeSummaryType_Names::ActualOrbit_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitKinematicsChangeSummaryType& OrbitKinematicsChangeSummaryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitKinematicsChangeSummaryType>().release());
}

uci::type::OrbitKinematicsChangeSummaryType& OrbitKinematicsChangeSummaryType::create(const uci::type::OrbitKinematicsChangeSummaryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitKinematicsChangeSummaryType> newAccessor{boost::make_unique<asb_uci::type::OrbitKinematicsChangeSummaryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitKinematicsChangeSummaryType::destroy(uci::type::OrbitKinematicsChangeSummaryType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitKinematicsChangeSummaryType*>(&accessor);
}

} // namespace type

} // namespace uci

