/** @file FaultDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/FaultDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_uci/type/VisibleString64Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/FaultDataType.h"
#include "uci/type/VisibleString1024Type.h"
#include "uci/type/VisibleString64Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FaultDataType::FaultDataType()
  : key_Accessor{boost::make_unique<VisibleString1024Type>()},
    value_Accessor{boost::make_unique<VisibleString1024Type>()},
    format_Accessor{boost::make_unique<VisibleString64Type>()} {
}

FaultDataType::~FaultDataType() = default;

void FaultDataType::copy(const uci::type::FaultDataType& accessor) {
  copyImpl(accessor, false);
}

void FaultDataType::copyImpl(const uci::type::FaultDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const FaultDataType&>(accessor);
    setKey(*(accessorImpl.key_Accessor));
    setValue(*(accessorImpl.value_Accessor));
    setFormat(*(accessorImpl.format_Accessor));
    if (accessorImpl.units_Accessor) {
      setUnits(*(accessorImpl.units_Accessor));
    } else {
      units_Accessor.reset();
    }
  }
}

void FaultDataType::reset() noexcept {
  key_Accessor->reset();
  value_Accessor->reset();
  format_Accessor->reset();
  units_Accessor.reset();
}

const uci::type::VisibleString1024Type& FaultDataType::getKey() const noexcept {
  return *key_Accessor;
}

uci::type::VisibleString1024Type& FaultDataType::getKey() noexcept {
  return *key_Accessor;
}

uci::type::FaultDataType& FaultDataType::setKey(const uci::type::VisibleString1024Type& value) {
  return setKey(value.c_str());
}

uci::type::FaultDataType& FaultDataType::setKey(const std::string& value) {
  return setKey(value.c_str());
}

uci::type::FaultDataType& FaultDataType::setKey(const char* value) {
  key_Accessor->setStringValue(value);
  return *this;
}

const uci::type::VisibleString1024Type& FaultDataType::getValue() const noexcept {
  return *value_Accessor;
}

uci::type::VisibleString1024Type& FaultDataType::getValue() noexcept {
  return *value_Accessor;
}

uci::type::FaultDataType& FaultDataType::setValue(const uci::type::VisibleString1024Type& value) {
  return setValue(value.c_str());
}

uci::type::FaultDataType& FaultDataType::setValue(const std::string& value) {
  return setValue(value.c_str());
}

uci::type::FaultDataType& FaultDataType::setValue(const char* value) {
  value_Accessor->setStringValue(value);
  return *this;
}

const uci::type::VisibleString64Type& FaultDataType::getFormat() const noexcept {
  return *format_Accessor;
}

uci::type::VisibleString64Type& FaultDataType::getFormat() noexcept {
  return *format_Accessor;
}

uci::type::FaultDataType& FaultDataType::setFormat(const uci::type::VisibleString64Type& value) {
  return setFormat(value.c_str());
}

uci::type::FaultDataType& FaultDataType::setFormat(const std::string& value) {
  return setFormat(value.c_str());
}

uci::type::FaultDataType& FaultDataType::setFormat(const char* value) {
  format_Accessor->setStringValue(value);
  return *this;
}

uci::type::VisibleString64Type& FaultDataType::getUnits_() const {
  if (units_Accessor) {
    return *units_Accessor;
  }
  throw uci::base::UCIException("Error in getUnits(): An attempt was made to get an optional field that was not enabled, call hasUnits() to determine if it is safe to call getUnits()");
}

const uci::type::VisibleString64Type& FaultDataType::getUnits() const {
  return getUnits_();
}

uci::type::VisibleString64Type& FaultDataType::getUnits() {
  return getUnits_();
}

uci::type::FaultDataType& FaultDataType::setUnits(const uci::type::VisibleString64Type& value) {
  return setUnits(value.c_str());
}

uci::type::FaultDataType& FaultDataType::setUnits(const std::string& value) {
  return setUnits(value.c_str());
}

uci::type::FaultDataType& FaultDataType::setUnits(const char* value) {
  enableUnits().setStringValue(value);
  return *this;
}

bool FaultDataType::hasUnits() const noexcept {
  return static_cast<bool>(units_Accessor);
}

uci::type::VisibleString64Type& FaultDataType::enableUnits(uci::base::accessorType::AccessorType type) {
  if (!units_Accessor) {
    units_Accessor = VisibleString64Type::create(type);
  }
  return *units_Accessor;
}

uci::type::FaultDataType& FaultDataType::clearUnits() noexcept {
  units_Accessor.reset();
  return *this;
}

std::unique_ptr<FaultDataType> FaultDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::faultDataType : type};
  return (requestedType == uci::type::accessorType::faultDataType) ? boost::make_unique<FaultDataType>() : nullptr;
}

/**  */
namespace FaultDataType_Names {

constexpr const char* Extern_Type_Name{"FaultDataType"};
constexpr const char* Key_Name{"Key"};
constexpr const char* Value_Name{"Value"};
constexpr const char* Format_Name{"Format"};
constexpr const char* Units_Name{"Units"};

} // namespace FaultDataType_Names

void FaultDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FaultDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FaultDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FaultDataType_Names::Key_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setKey(*value);
      }
    } else if (valueType.first == nsPrefix + FaultDataType_Names::Value_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setValue(*value);
      }
    } else if (valueType.first == nsPrefix + FaultDataType_Names::Format_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFormat(*value);
      }
    } else if (valueType.first == nsPrefix + FaultDataType_Names::Units_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnits(*value);
      }
    }
  }
}

std::string FaultDataType::serialize(const uci::type::FaultDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FaultDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FaultDataType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeString(accessor.getKey(), node, FaultDataType_Names::Key_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getValue(), node, FaultDataType_Names::Value_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getFormat(), node, FaultDataType_Names::Format_Name);
  if (accessor.hasUnits()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getUnits(), node, FaultDataType_Names::Units_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FaultDataType& FaultDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FaultDataType>().release());
}

uci::type::FaultDataType& FaultDataType::create(const uci::type::FaultDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FaultDataType> newAccessor{boost::make_unique<asb_uci::type::FaultDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FaultDataType::destroy(uci::type::FaultDataType& accessor) {
  delete dynamic_cast<asb_uci::type::FaultDataType*>(&accessor);
}

} // namespace type

} // namespace uci

