/** @file LOS_SlantRangeCovarianceRatesType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/LOS_SlantRangeCovarianceRatesType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/LOS_SlantRangeCovarianceRatesType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LOS_SlantRangeCovarianceRatesType::LOS_SlantRangeCovarianceRatesType() = default;

LOS_SlantRangeCovarianceRatesType::~LOS_SlantRangeCovarianceRatesType() = default;

void LOS_SlantRangeCovarianceRatesType::copy(const uci::type::LOS_SlantRangeCovarianceRatesType& accessor) {
  copyImpl(accessor, false);
}

void LOS_SlantRangeCovarianceRatesType::copyImpl(const uci::type::LOS_SlantRangeCovarianceRatesType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LOS_SlantRangeCovarianceRatesType&>(accessor);
    if (accessorImpl.hasSlantRangeAzimuthRate()) {
      setSlantRangeAzimuthRate(accessorImpl.getSlantRangeAzimuthRate());
    } else {
      clearSlantRangeAzimuthRate();
    }
    if (accessorImpl.hasSlantRangeElevationRate()) {
      setSlantRangeElevationRate(accessorImpl.getSlantRangeElevationRate());
    } else {
      clearSlantRangeElevationRate();
    }
    if (accessorImpl.hasAzimuthSlantRangeRate()) {
      setAzimuthSlantRangeRate(accessorImpl.getAzimuthSlantRangeRate());
    } else {
      clearAzimuthSlantRangeRate();
    }
    if (accessorImpl.hasElevationSlantRangeRate()) {
      setElevationSlantRangeRate(accessorImpl.getElevationSlantRangeRate());
    } else {
      clearElevationSlantRangeRate();
    }
  }
}

void LOS_SlantRangeCovarianceRatesType::reset() noexcept {
  clearSlantRangeAzimuthRate();
  clearSlantRangeElevationRate();
  clearAzimuthSlantRangeRate();
  clearElevationSlantRangeRate();
}

xs::Double LOS_SlantRangeCovarianceRatesType::getSlantRangeAzimuthRate() const {
  if (slantRangeAzimuthRate_Accessor) {
    return *slantRangeAzimuthRate_Accessor;
  }
  throw uci::base::UCIException("Error in getSlantRangeAzimuthRate(): An attempt was made to get an optional field that was not enabled, call hasSlantRangeAzimuthRate() to determine if it is safe to call getSlantRangeAzimuthRate()");
}

uci::type::LOS_SlantRangeCovarianceRatesType& LOS_SlantRangeCovarianceRatesType::setSlantRangeAzimuthRate(xs::Double value) {
  slantRangeAzimuthRate_Accessor = value;
  return *this;
}

bool LOS_SlantRangeCovarianceRatesType::hasSlantRangeAzimuthRate() const noexcept {
  return slantRangeAzimuthRate_Accessor.has_value();
}

uci::type::LOS_SlantRangeCovarianceRatesType& LOS_SlantRangeCovarianceRatesType::clearSlantRangeAzimuthRate() noexcept {
  slantRangeAzimuthRate_Accessor.reset();
  return *this;
}

xs::Double LOS_SlantRangeCovarianceRatesType::getSlantRangeElevationRate() const {
  if (slantRangeElevationRate_Accessor) {
    return *slantRangeElevationRate_Accessor;
  }
  throw uci::base::UCIException("Error in getSlantRangeElevationRate(): An attempt was made to get an optional field that was not enabled, call hasSlantRangeElevationRate() to determine if it is safe to call getSlantRangeElevationRate()");
}

uci::type::LOS_SlantRangeCovarianceRatesType& LOS_SlantRangeCovarianceRatesType::setSlantRangeElevationRate(xs::Double value) {
  slantRangeElevationRate_Accessor = value;
  return *this;
}

bool LOS_SlantRangeCovarianceRatesType::hasSlantRangeElevationRate() const noexcept {
  return slantRangeElevationRate_Accessor.has_value();
}

uci::type::LOS_SlantRangeCovarianceRatesType& LOS_SlantRangeCovarianceRatesType::clearSlantRangeElevationRate() noexcept {
  slantRangeElevationRate_Accessor.reset();
  return *this;
}

xs::Double LOS_SlantRangeCovarianceRatesType::getAzimuthSlantRangeRate() const {
  if (azimuthSlantRangeRate_Accessor) {
    return *azimuthSlantRangeRate_Accessor;
  }
  throw uci::base::UCIException("Error in getAzimuthSlantRangeRate(): An attempt was made to get an optional field that was not enabled, call hasAzimuthSlantRangeRate() to determine if it is safe to call getAzimuthSlantRangeRate()");
}

uci::type::LOS_SlantRangeCovarianceRatesType& LOS_SlantRangeCovarianceRatesType::setAzimuthSlantRangeRate(xs::Double value) {
  azimuthSlantRangeRate_Accessor = value;
  return *this;
}

bool LOS_SlantRangeCovarianceRatesType::hasAzimuthSlantRangeRate() const noexcept {
  return azimuthSlantRangeRate_Accessor.has_value();
}

uci::type::LOS_SlantRangeCovarianceRatesType& LOS_SlantRangeCovarianceRatesType::clearAzimuthSlantRangeRate() noexcept {
  azimuthSlantRangeRate_Accessor.reset();
  return *this;
}

xs::Double LOS_SlantRangeCovarianceRatesType::getElevationSlantRangeRate() const {
  if (elevationSlantRangeRate_Accessor) {
    return *elevationSlantRangeRate_Accessor;
  }
  throw uci::base::UCIException("Error in getElevationSlantRangeRate(): An attempt was made to get an optional field that was not enabled, call hasElevationSlantRangeRate() to determine if it is safe to call getElevationSlantRangeRate()");
}

uci::type::LOS_SlantRangeCovarianceRatesType& LOS_SlantRangeCovarianceRatesType::setElevationSlantRangeRate(xs::Double value) {
  elevationSlantRangeRate_Accessor = value;
  return *this;
}

bool LOS_SlantRangeCovarianceRatesType::hasElevationSlantRangeRate() const noexcept {
  return elevationSlantRangeRate_Accessor.has_value();
}

uci::type::LOS_SlantRangeCovarianceRatesType& LOS_SlantRangeCovarianceRatesType::clearElevationSlantRangeRate() noexcept {
  elevationSlantRangeRate_Accessor.reset();
  return *this;
}

std::unique_ptr<LOS_SlantRangeCovarianceRatesType> LOS_SlantRangeCovarianceRatesType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_SlantRangeCovarianceRatesType : type};
  return (requestedType == uci::type::accessorType::lOS_SlantRangeCovarianceRatesType) ? boost::make_unique<LOS_SlantRangeCovarianceRatesType>() : nullptr;
}

/**  */
namespace LOS_SlantRangeCovarianceRatesType_Names {

constexpr const char* Extern_Type_Name{"LOS_SlantRangeCovarianceRatesType"};
constexpr const char* SlantRangeAzimuthRate_Name{"SlantRangeAzimuthRate"};
constexpr const char* SlantRangeElevationRate_Name{"SlantRangeElevationRate"};
constexpr const char* AzimuthSlantRangeRate_Name{"AzimuthSlantRangeRate"};
constexpr const char* ElevationSlantRangeRate_Name{"ElevationSlantRangeRate"};

} // namespace LOS_SlantRangeCovarianceRatesType_Names

void LOS_SlantRangeCovarianceRatesType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LOS_SlantRangeCovarianceRatesType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LOS_SlantRangeCovarianceRatesType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LOS_SlantRangeCovarianceRatesType_Names::SlantRangeAzimuthRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSlantRangeAzimuthRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LOS_SlantRangeCovarianceRatesType_Names::SlantRangeElevationRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSlantRangeElevationRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LOS_SlantRangeCovarianceRatesType_Names::AzimuthSlantRangeRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzimuthSlantRangeRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LOS_SlantRangeCovarianceRatesType_Names::ElevationSlantRangeRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setElevationSlantRangeRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string LOS_SlantRangeCovarianceRatesType::serialize(const uci::type::LOS_SlantRangeCovarianceRatesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LOS_SlantRangeCovarianceRatesType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LOS_SlantRangeCovarianceRatesType_Names::Extern_Type_Name);
  }
  if (accessor.hasSlantRangeAzimuthRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSlantRangeAzimuthRate(), node, LOS_SlantRangeCovarianceRatesType_Names::SlantRangeAzimuthRate_Name);
  }
  if (accessor.hasSlantRangeElevationRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSlantRangeElevationRate(), node, LOS_SlantRangeCovarianceRatesType_Names::SlantRangeElevationRate_Name);
  }
  if (accessor.hasAzimuthSlantRangeRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAzimuthSlantRangeRate(), node, LOS_SlantRangeCovarianceRatesType_Names::AzimuthSlantRangeRate_Name);
  }
  if (accessor.hasElevationSlantRangeRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getElevationSlantRangeRate(), node, LOS_SlantRangeCovarianceRatesType_Names::ElevationSlantRangeRate_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LOS_SlantRangeCovarianceRatesType& LOS_SlantRangeCovarianceRatesType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LOS_SlantRangeCovarianceRatesType>().release());
}

uci::type::LOS_SlantRangeCovarianceRatesType& LOS_SlantRangeCovarianceRatesType::create(const uci::type::LOS_SlantRangeCovarianceRatesType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LOS_SlantRangeCovarianceRatesType> newAccessor{boost::make_unique<asb_uci::type::LOS_SlantRangeCovarianceRatesType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LOS_SlantRangeCovarianceRatesType::destroy(uci::type::LOS_SlantRangeCovarianceRatesType& accessor) {
  delete dynamic_cast<asb_uci::type::LOS_SlantRangeCovarianceRatesType*>(&accessor);
}

} // namespace type

} // namespace uci

