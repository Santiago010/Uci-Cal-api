/** @file ResourceRequestType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ResourceRequestType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentResourceType.h"
#include "../../../include/asb_uci/type/DependentActivityType.h"
#include "../../../include/asb_uci/type/RF_TypeEnum.h"
#include "../../../include/asb_uci/type/ResourceRequestPeriodType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentResourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DependentActivityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_TypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceRequestPeriodType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceRequestType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResourceRequestType::ResourceRequestType()
  : dependentActivity_Accessor{boost::make_unique<DependentActivity>(0, SIZE_MAX)},
    rF_Mode_Accessor{boost::make_unique<RF_TypeEnum>()},
    accessPeriod_Accessor{boost::make_unique<AccessPeriod>(0, SIZE_MAX)},
    selectResources_Accessor{boost::make_unique<ComponentResourceType>()} {
}

ResourceRequestType::~ResourceRequestType() = default;

void ResourceRequestType::copy(const uci::type::ResourceRequestType& accessor) {
  copyImpl(accessor, false);
}

void ResourceRequestType::copyImpl(const uci::type::ResourceRequestType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResourceRequestType&>(accessor);
    setDependentActivity(*(accessorImpl.dependentActivity_Accessor));
    setMaxPercentInterruption(accessorImpl.maxPercentInterruption_Accessor);
    setRF_Mode(*(accessorImpl.rF_Mode_Accessor));
    setAccessPeriod(*(accessorImpl.accessPeriod_Accessor));
    setSelectResources(*(accessorImpl.selectResources_Accessor));
  }
}

void ResourceRequestType::reset() noexcept {
  dependentActivity_Accessor->reset();
  maxPercentInterruption_Accessor = 0.0;
  rF_Mode_Accessor->reset();
  accessPeriod_Accessor->reset();
  selectResources_Accessor->reset();
}

const uci::type::ResourceRequestType::DependentActivity& ResourceRequestType::getDependentActivity() const {
  return *dependentActivity_Accessor;
}

uci::type::ResourceRequestType::DependentActivity& ResourceRequestType::getDependentActivity() {
  return *dependentActivity_Accessor;
}

uci::type::ResourceRequestType& ResourceRequestType::setDependentActivity(const uci::type::ResourceRequestType::DependentActivity& accessor) {
  if (&accessor != dependentActivity_Accessor.get()) {
    dependentActivity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PercentTypeValue ResourceRequestType::getMaxPercentInterruption() const {
  return maxPercentInterruption_Accessor;
}

uci::type::ResourceRequestType& ResourceRequestType::setMaxPercentInterruption(uci::type::PercentTypeValue value) {
  maxPercentInterruption_Accessor = value;
  return *this;
}


const uci::type::RF_TypeEnum& ResourceRequestType::getRF_Mode() const {
  return *rF_Mode_Accessor;
}

uci::type::RF_TypeEnum& ResourceRequestType::getRF_Mode() {
  return *rF_Mode_Accessor;
}

uci::type::ResourceRequestType& ResourceRequestType::setRF_Mode(const uci::type::RF_TypeEnum& accessor) {
  if (&accessor != rF_Mode_Accessor.get()) {
    rF_Mode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ResourceRequestType& ResourceRequestType::setRF_Mode(uci::type::RF_TypeEnum::EnumerationItem value) {
  rF_Mode_Accessor->setValue(value);
  return *this;
}


const uci::type::ResourceRequestType::AccessPeriod& ResourceRequestType::getAccessPeriod() const {
  return *accessPeriod_Accessor;
}

uci::type::ResourceRequestType::AccessPeriod& ResourceRequestType::getAccessPeriod() {
  return *accessPeriod_Accessor;
}

uci::type::ResourceRequestType& ResourceRequestType::setAccessPeriod(const uci::type::ResourceRequestType::AccessPeriod& accessor) {
  if (&accessor != accessPeriod_Accessor.get()) {
    accessPeriod_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ComponentResourceType& ResourceRequestType::getSelectResources() const {
  return *selectResources_Accessor;
}

uci::type::ComponentResourceType& ResourceRequestType::getSelectResources() {
  return *selectResources_Accessor;
}

uci::type::ResourceRequestType& ResourceRequestType::setSelectResources(const uci::type::ComponentResourceType& accessor) {
  if (&accessor != selectResources_Accessor.get()) {
    selectResources_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ResourceRequestType> ResourceRequestType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceRequestType : type};
  return (requestedType == uci::type::accessorType::resourceRequestType) ? boost::make_unique<ResourceRequestType>() : nullptr;
}

/**  */
namespace ResourceRequestType_Names {

constexpr const char* Extern_Type_Name{"ResourceRequestType"};
constexpr const char* DependentActivity_Name{"DependentActivity"};
constexpr const char* MaxPercentInterruption_Name{"MaxPercentInterruption"};
constexpr const char* RF_Mode_Name{"RF_Mode"};
constexpr const char* AccessPeriod_Name{"AccessPeriod"};
constexpr const char* SelectResources_Name{"SelectResources"};

} // namespace ResourceRequestType_Names

void ResourceRequestType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResourceRequestType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResourceRequestType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResourceRequestType_Names::DependentActivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResourceRequestType::DependentActivity& boundedList = accessor.getDependentActivity();
        const uci::type::ResourceRequestType::DependentActivity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DependentActivityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ResourceRequestType_Names::MaxPercentInterruption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxPercentInterruption(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceRequestType_Names::RF_Mode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRF_Mode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ResourceRequestType_Names::AccessPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResourceRequestType::AccessPeriod& boundedList = accessor.getAccessPeriod();
        const uci::type::ResourceRequestType::AccessPeriod::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ResourceRequestPeriodType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ResourceRequestType_Names::SelectResources_Name) {
      ComponentResourceType::deserialize(valueType.second, accessor.getSelectResources(), nodeName, nsPrefix);
    }
  }
}

std::string ResourceRequestType::serialize(const uci::type::ResourceRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResourceRequestType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResourceRequestType_Names::Extern_Type_Name);
  }
  {
    const uci::type::ResourceRequestType::DependentActivity& boundedList = accessor.getDependentActivity();
    for (uci::type::ResourceRequestType::DependentActivity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DependentActivityType::serialize(boundedList.at(i), node, ResourceRequestType_Names::DependentActivity_Name);
    }
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaxPercentInterruption(), node, ResourceRequestType_Names::MaxPercentInterruption_Name);
  RF_TypeEnum::serialize(accessor.getRF_Mode(), node, ResourceRequestType_Names::RF_Mode_Name, false);
  {
    const uci::type::ResourceRequestType::AccessPeriod& boundedList = accessor.getAccessPeriod();
    for (uci::type::ResourceRequestType::AccessPeriod::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ResourceRequestPeriodType::serialize(boundedList.at(i), node, ResourceRequestType_Names::AccessPeriod_Name);
    }
  }
  ComponentResourceType::serialize(accessor.getSelectResources(), node, ResourceRequestType_Names::SelectResources_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResourceRequestType& ResourceRequestType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResourceRequestType>().release());
}

uci::type::ResourceRequestType& ResourceRequestType::create(const uci::type::ResourceRequestType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResourceRequestType> newAccessor{boost::make_unique<asb_uci::type::ResourceRequestType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResourceRequestType::destroy(uci::type::ResourceRequestType& accessor) {
  delete dynamic_cast<asb_uci::type::ResourceRequestType*>(&accessor);
}

} // namespace type

} // namespace uci

