/** @file ProductGeospatialLocationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ProductGeospatialLocationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/Point2D_Type.h"
#include "asb_uci/type/RelativePositionType.h"
#include "asb_uci/type/ZoneType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/Point2D_Type.h"
#include "uci/type/ProductGeospatialLocationType.h"
#include "uci/type/RelativePositionType.h"
#include "uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductGeospatialLocationType::ProductGeospatialLocationType() = default;

ProductGeospatialLocationType::~ProductGeospatialLocationType() = default;

void ProductGeospatialLocationType::copy(const uci::type::ProductGeospatialLocationType& accessor) {
  copyImpl(accessor, false);
}

void ProductGeospatialLocationType::copyImpl(const uci::type::ProductGeospatialLocationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ProductGeospatialLocationType&>(accessor);
    if (accessorImpl.point2D_Accessor) {
      setPoint2D(*(accessorImpl.point2D_Accessor));
    } else {
      point2D_Accessor.reset();
    }
    if (accessorImpl.zone_Accessor) {
      setZone(*(accessorImpl.zone_Accessor));
    } else {
      zone_Accessor.reset();
    }
    if (accessorImpl.relativePosition_Accessor) {
      setRelativePosition(*(accessorImpl.relativePosition_Accessor));
    } else {
      relativePosition_Accessor.reset();
    }
  }
}

void ProductGeospatialLocationType::reset() noexcept {
  point2D_Accessor.reset();
  zone_Accessor.reset();
  relativePosition_Accessor.reset();
}

uci::type::ProductGeospatialLocationType::ProductGeospatialLocationTypeChoice ProductGeospatialLocationType::getProductGeospatialLocationTypeChoiceOrdinal() const noexcept {
  if (point2D_Accessor) {
    return PRODUCTGEOSPATIALLOCATIONTYPE_CHOICE_POINT2D;
  }
  if (zone_Accessor) {
    return PRODUCTGEOSPATIALLOCATIONTYPE_CHOICE_ZONE;
  }
  if (relativePosition_Accessor) {
    return PRODUCTGEOSPATIALLOCATIONTYPE_CHOICE_RELATIVEPOSITION;
  }
  return PRODUCTGEOSPATIALLOCATIONTYPE_CHOICE_NONE;
}

uci::type::ProductGeospatialLocationType& ProductGeospatialLocationType::setProductGeospatialLocationTypeChoiceOrdinal(uci::type::ProductGeospatialLocationType::ProductGeospatialLocationTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PRODUCTGEOSPATIALLOCATIONTYPE_CHOICE_POINT2D:
      choosePoint2D("setProductGeospatialLocationTypeChoiceOrdinal", type);
      break;
    case PRODUCTGEOSPATIALLOCATIONTYPE_CHOICE_ZONE:
      chooseZone("setProductGeospatialLocationTypeChoiceOrdinal", type);
      break;
    case PRODUCTGEOSPATIALLOCATIONTYPE_CHOICE_RELATIVEPOSITION:
      chooseRelativePosition("setProductGeospatialLocationTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setProductGeospatialLocationTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::Point2D_Type& ProductGeospatialLocationType::getPoint2D_() const {
  if (point2D_Accessor) {
    return *point2D_Accessor;
  }
  throw uci::base::UCIException("Error in getPoint2D(): Unable to get Point2D, field not selected");
}

const uci::type::Point2D_Type& ProductGeospatialLocationType::getPoint2D() const {
  return getPoint2D_();
}

uci::type::Point2D_Type& ProductGeospatialLocationType::getPoint2D() {
  return getPoint2D_();
}

uci::type::ProductGeospatialLocationType& ProductGeospatialLocationType::setPoint2D(const uci::type::Point2D_Type& accessor) {
  choosePoint2D("setPoint2D", accessor.getAccessorType());
  if (&accessor != point2D_Accessor.get()) {
    point2D_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ProductGeospatialLocationType::isPoint2D() const noexcept {
  return static_cast<bool>(point2D_Accessor);
}

uci::type::Point2D_Type& ProductGeospatialLocationType::choosePoint2D(const std::string& method, uci::base::accessorType::AccessorType type) {
  zone_Accessor.reset();
  relativePosition_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!point2D_Accessor) || (point2D_Accessor->getAccessorType() != requestedType)) {
    point2D_Accessor = Point2D_Type::create(type);
    if (!point2D_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *point2D_Accessor;
}

uci::type::Point2D_Type& ProductGeospatialLocationType::choosePoint2D(uci::base::accessorType::AccessorType type) {
  return choosePoint2D("choosePoint2D", type);
}

uci::type::ZoneType& ProductGeospatialLocationType::getZone_() const {
  if (zone_Accessor) {
    return *zone_Accessor;
  }
  throw uci::base::UCIException("Error in getZone(): Unable to get Zone, field not selected");
}

const uci::type::ZoneType& ProductGeospatialLocationType::getZone() const {
  return getZone_();
}

uci::type::ZoneType& ProductGeospatialLocationType::getZone() {
  return getZone_();
}

uci::type::ProductGeospatialLocationType& ProductGeospatialLocationType::setZone(const uci::type::ZoneType& accessor) {
  chooseZone("setZone", accessor.getAccessorType());
  if (&accessor != zone_Accessor.get()) {
    zone_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ProductGeospatialLocationType::isZone() const noexcept {
  return static_cast<bool>(zone_Accessor);
}

uci::type::ZoneType& ProductGeospatialLocationType::chooseZone(const std::string& method, uci::base::accessorType::AccessorType type) {
  point2D_Accessor.reset();
  relativePosition_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!zone_Accessor) || (zone_Accessor->getAccessorType() != requestedType)) {
    zone_Accessor = ZoneType::create(type);
    if (!zone_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *zone_Accessor;
}

uci::type::ZoneType& ProductGeospatialLocationType::chooseZone(uci::base::accessorType::AccessorType type) {
  return chooseZone("chooseZone", type);
}

uci::type::RelativePositionType& ProductGeospatialLocationType::getRelativePosition_() const {
  if (relativePosition_Accessor) {
    return *relativePosition_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativePosition(): Unable to get RelativePosition, field not selected");
}

const uci::type::RelativePositionType& ProductGeospatialLocationType::getRelativePosition() const {
  return getRelativePosition_();
}

uci::type::RelativePositionType& ProductGeospatialLocationType::getRelativePosition() {
  return getRelativePosition_();
}

uci::type::ProductGeospatialLocationType& ProductGeospatialLocationType::setRelativePosition(const uci::type::RelativePositionType& accessor) {
  chooseRelativePosition();
  if (&accessor != relativePosition_Accessor.get()) {
    relativePosition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductGeospatialLocationType::isRelativePosition() const noexcept {
  return static_cast<bool>(relativePosition_Accessor);
}

uci::type::RelativePositionType& ProductGeospatialLocationType::chooseRelativePosition(const std::string& method, uci::base::accessorType::AccessorType type) {
  point2D_Accessor.reset();
  zone_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativePositionType : type};
  if ((!relativePosition_Accessor) || (relativePosition_Accessor->getAccessorType() != requestedType)) {
    relativePosition_Accessor = RelativePositionType::create(type);
    if (!relativePosition_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativePosition_Accessor;
}

uci::type::RelativePositionType& ProductGeospatialLocationType::chooseRelativePosition(uci::base::accessorType::AccessorType type) {
  return chooseRelativePosition("chooseRelativePosition", type);
}

std::unique_ptr<ProductGeospatialLocationType> ProductGeospatialLocationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productGeospatialLocationType : type};
  return (requestedType == uci::type::accessorType::productGeospatialLocationType) ? boost::make_unique<ProductGeospatialLocationType>() : nullptr;
}

/**  */
namespace ProductGeospatialLocationType_Names {

constexpr const char* Extern_Type_Name{"ProductGeospatialLocationType"};
constexpr const char* Point2D_Name{"Point2D"};
constexpr const char* Zone_Name{"Zone"};
constexpr const char* RelativePosition_Name{"RelativePosition"};

} // namespace ProductGeospatialLocationType_Names

void ProductGeospatialLocationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductGeospatialLocationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductGeospatialLocationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductGeospatialLocationType_Names::Point2D_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.choosePoint2D(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductGeospatialLocationType_Names::Zone_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseZone(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductGeospatialLocationType_Names::RelativePosition_Name) {
      RelativePositionType::deserialize(valueType.second, accessor.chooseRelativePosition(), nodeName, nsPrefix);
    }
  }
}

std::string ProductGeospatialLocationType::serialize(const uci::type::ProductGeospatialLocationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductGeospatialLocationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductGeospatialLocationType_Names::Extern_Type_Name);
  }
  if (accessor.isPoint2D()) {
    Point2D_Type::serialize(accessor.getPoint2D(), node, ProductGeospatialLocationType_Names::Point2D_Name);
  } else if (accessor.isZone()) {
    ZoneType::serialize(accessor.getZone(), node, ProductGeospatialLocationType_Names::Zone_Name);
  } else if (accessor.isRelativePosition()) {
    RelativePositionType::serialize(accessor.getRelativePosition(), node, ProductGeospatialLocationType_Names::RelativePosition_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductGeospatialLocationType& ProductGeospatialLocationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductGeospatialLocationType>().release());
}

uci::type::ProductGeospatialLocationType& ProductGeospatialLocationType::create(const uci::type::ProductGeospatialLocationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductGeospatialLocationType> newAccessor{boost::make_unique<asb_uci::type::ProductGeospatialLocationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductGeospatialLocationType::destroy(uci::type::ProductGeospatialLocationType& accessor) {
  delete dynamic_cast<asb_uci::type::ProductGeospatialLocationType*>(&accessor);
}

} // namespace type

} // namespace uci

