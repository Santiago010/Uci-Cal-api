/** @file SubsystemMaintenanceStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SubsystemMaintenanceStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommandID_Type.h"
#include "../../../include/asb_uci/type/CompletionStatusType.h"
#include "../../../include/asb_uci/type/ProcessingStatusEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommandID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CompletionStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProcessingStatusEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemMaintenanceStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemMaintenanceStatusType::SubsystemMaintenanceStatusType()
  : commandID_Accessor{boost::make_unique<CommandID_Type>()},
    processingStatus_Accessor{boost::make_unique<ProcessingStatusEnum>()} {
}

SubsystemMaintenanceStatusType::~SubsystemMaintenanceStatusType() = default;

void SubsystemMaintenanceStatusType::copy(const uci::type::SubsystemMaintenanceStatusType& accessor) {
  copyImpl(accessor, false);
}

void SubsystemMaintenanceStatusType::copyImpl(const uci::type::SubsystemMaintenanceStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SubsystemMaintenanceStatusType&>(accessor);
    setCommandID(*(accessorImpl.commandID_Accessor));
    setProcessingStatus(*(accessorImpl.processingStatus_Accessor));
    if (accessorImpl.status_Accessor) {
      setStatus(*(accessorImpl.status_Accessor));
    } else {
      status_Accessor.reset();
    }
  }
}

void SubsystemMaintenanceStatusType::reset() noexcept {
  commandID_Accessor->reset();
  processingStatus_Accessor->reset();
  status_Accessor.reset();
}

const uci::type::CommandID_Type& SubsystemMaintenanceStatusType::getCommandID() const {
  return *commandID_Accessor;
}

uci::type::CommandID_Type& SubsystemMaintenanceStatusType::getCommandID() {
  return *commandID_Accessor;
}

uci::type::SubsystemMaintenanceStatusType& SubsystemMaintenanceStatusType::setCommandID(const uci::type::CommandID_Type& accessor) {
  if (&accessor != commandID_Accessor.get()) {
    commandID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ProcessingStatusEnum& SubsystemMaintenanceStatusType::getProcessingStatus() const {
  return *processingStatus_Accessor;
}

uci::type::ProcessingStatusEnum& SubsystemMaintenanceStatusType::getProcessingStatus() {
  return *processingStatus_Accessor;
}

uci::type::SubsystemMaintenanceStatusType& SubsystemMaintenanceStatusType::setProcessingStatus(const uci::type::ProcessingStatusEnum& accessor) {
  if (&accessor != processingStatus_Accessor.get()) {
    processingStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemMaintenanceStatusType& SubsystemMaintenanceStatusType::setProcessingStatus(uci::type::ProcessingStatusEnum::EnumerationItem value) {
  processingStatus_Accessor->setValue(value);
  return *this;
}


uci::type::CompletionStatusType& SubsystemMaintenanceStatusType::getStatus_() const {
  if (status_Accessor) {
    return *status_Accessor;
  }
  throw uci::base::UCIException("Error in getStatus(): An attempt was made to get an optional field that was not enabled, call hasStatus() to determine if it is safe to call getStatus()");
}

const uci::type::CompletionStatusType& SubsystemMaintenanceStatusType::getStatus() const {
  return getStatus_();
}

uci::type::CompletionStatusType& SubsystemMaintenanceStatusType::getStatus() {
  return getStatus_();
}

uci::type::SubsystemMaintenanceStatusType& SubsystemMaintenanceStatusType::setStatus(const uci::type::CompletionStatusType& accessor) {
  enableStatus();
  if (&accessor != status_Accessor.get()) {
    status_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubsystemMaintenanceStatusType::hasStatus() const noexcept {
  return static_cast<bool>(status_Accessor);
}

uci::type::CompletionStatusType& SubsystemMaintenanceStatusType::enableStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::completionStatusType : type};
  if ((!status_Accessor) || (status_Accessor->getAccessorType() != requestedType)) {
    status_Accessor = CompletionStatusType::create(requestedType);
    if (!status_Accessor) {
      throw uci::base::UCIException("Error in enableStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *status_Accessor;
}

uci::type::SubsystemMaintenanceStatusType& SubsystemMaintenanceStatusType::clearStatus() noexcept {
  status_Accessor.reset();
  return *this;
}

std::unique_ptr<SubsystemMaintenanceStatusType> SubsystemMaintenanceStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemMaintenanceStatusType : type};
  return (requestedType == uci::type::accessorType::subsystemMaintenanceStatusType) ? boost::make_unique<SubsystemMaintenanceStatusType>() : nullptr;
}

/**  */
namespace SubsystemMaintenanceStatusType_Names {

constexpr const char* Extern_Type_Name{"SubsystemMaintenanceStatusType"};
constexpr const char* CommandID_Name{"CommandID"};
constexpr const char* ProcessingStatus_Name{"ProcessingStatus"};
constexpr const char* Status_Name{"Status"};

} // namespace SubsystemMaintenanceStatusType_Names

void SubsystemMaintenanceStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemMaintenanceStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemMaintenanceStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceStatusType_Names::CommandID_Name) {
      CommandID_Type::deserialize(valueType.second, accessor.getCommandID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceStatusType_Names::ProcessingStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getProcessingStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceStatusType_Names::Status_Name) {
      CompletionStatusType::deserialize(valueType.second, accessor.enableStatus(), nodeName, nsPrefix);
    }
  }
}

std::string SubsystemMaintenanceStatusType::serialize(const uci::type::SubsystemMaintenanceStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemMaintenanceStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemMaintenanceStatusType_Names::Extern_Type_Name);
  }
  CommandID_Type::serialize(accessor.getCommandID(), node, SubsystemMaintenanceStatusType_Names::CommandID_Name);
  ProcessingStatusEnum::serialize(accessor.getProcessingStatus(), node, SubsystemMaintenanceStatusType_Names::ProcessingStatus_Name, false);
  if (accessor.hasStatus()) {
    CompletionStatusType::serialize(accessor.getStatus(), node, SubsystemMaintenanceStatusType_Names::Status_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubsystemMaintenanceStatusType& SubsystemMaintenanceStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubsystemMaintenanceStatusType>().release());
}

uci::type::SubsystemMaintenanceStatusType& SubsystemMaintenanceStatusType::create(const uci::type::SubsystemMaintenanceStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubsystemMaintenanceStatusType> newAccessor{boost::make_unique<asb_uci::type::SubsystemMaintenanceStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubsystemMaintenanceStatusType::destroy(uci::type::SubsystemMaintenanceStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::SubsystemMaintenanceStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

