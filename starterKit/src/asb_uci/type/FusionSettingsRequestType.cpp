/** @file FusionSettingsRequestType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/FusionSettingsRequestType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityStalenessThresholdsType.h"
#include "asb_uci/type/FusionSettingsType.h"
#include "asb_uci/type/FusionSourcesType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EntityStalenessThresholdsType.h"
#include "uci/type/FusionSettingsRequestType.h"
#include "uci/type/FusionSettingsType.h"
#include "uci/type/FusionSourcesType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FusionSettingsRequestType::FusionSettingsRequestType() = default;

FusionSettingsRequestType::~FusionSettingsRequestType() = default;

void FusionSettingsRequestType::copy(const uci::type::FusionSettingsRequestType& accessor) {
  copyImpl(accessor, false);
}

void FusionSettingsRequestType::copyImpl(const uci::type::FusionSettingsRequestType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const FusionSettingsRequestType&>(accessor);
    if (accessorImpl.setStalenessThresholds_Accessor) {
      setSetStalenessThresholds(*(accessorImpl.setStalenessThresholds_Accessor));
    } else {
      setStalenessThresholds_Accessor.reset();
    }
    if (accessorImpl.setMergeAndDropSettings_Accessor) {
      setSetMergeAndDropSettings(*(accessorImpl.setMergeAndDropSettings_Accessor));
    } else {
      setMergeAndDropSettings_Accessor.reset();
    }
    if (accessorImpl.setInputSources_Accessor) {
      setSetInputSources(*(accessorImpl.setInputSources_Accessor));
    } else {
      setInputSources_Accessor.reset();
    }
  }
}

void FusionSettingsRequestType::reset() noexcept {
  setStalenessThresholds_Accessor.reset();
  setMergeAndDropSettings_Accessor.reset();
  setInputSources_Accessor.reset();
}

uci::type::FusionSettingsRequestType::FusionSettingsRequestTypeChoice FusionSettingsRequestType::getFusionSettingsRequestTypeChoiceOrdinal() const noexcept {
  if (setStalenessThresholds_Accessor) {
    return FUSIONSETTINGSREQUESTTYPE_CHOICE_SETSTALENESSTHRESHOLDS;
  }
  if (setMergeAndDropSettings_Accessor) {
    return FUSIONSETTINGSREQUESTTYPE_CHOICE_SETMERGEANDDROPSETTINGS;
  }
  if (setInputSources_Accessor) {
    return FUSIONSETTINGSREQUESTTYPE_CHOICE_SETINPUTSOURCES;
  }
  return FUSIONSETTINGSREQUESTTYPE_CHOICE_NONE;
}

uci::type::FusionSettingsRequestType& FusionSettingsRequestType::setFusionSettingsRequestTypeChoiceOrdinal(uci::type::FusionSettingsRequestType::FusionSettingsRequestTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case FUSIONSETTINGSREQUESTTYPE_CHOICE_SETSTALENESSTHRESHOLDS:
      chooseSetStalenessThresholds("setFusionSettingsRequestTypeChoiceOrdinal", type);
      break;
    case FUSIONSETTINGSREQUESTTYPE_CHOICE_SETMERGEANDDROPSETTINGS:
      chooseSetMergeAndDropSettings("setFusionSettingsRequestTypeChoiceOrdinal", type);
      break;
    case FUSIONSETTINGSREQUESTTYPE_CHOICE_SETINPUTSOURCES:
      chooseSetInputSources("setFusionSettingsRequestTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setFusionSettingsRequestTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EntityStalenessThresholdsType& FusionSettingsRequestType::getSetStalenessThresholds_() const {
  if (setStalenessThresholds_Accessor) {
    return *setStalenessThresholds_Accessor;
  }
  throw uci::base::UCIException("Error in getSetStalenessThresholds(): Unable to get SetStalenessThresholds, field not selected");
}

const uci::type::EntityStalenessThresholdsType& FusionSettingsRequestType::getSetStalenessThresholds() const {
  return getSetStalenessThresholds_();
}

uci::type::EntityStalenessThresholdsType& FusionSettingsRequestType::getSetStalenessThresholds() {
  return getSetStalenessThresholds_();
}

uci::type::FusionSettingsRequestType& FusionSettingsRequestType::setSetStalenessThresholds(const uci::type::EntityStalenessThresholdsType& accessor) {
  chooseSetStalenessThresholds();
  if (&accessor != setStalenessThresholds_Accessor.get()) {
    setStalenessThresholds_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FusionSettingsRequestType::isSetStalenessThresholds() const noexcept {
  return static_cast<bool>(setStalenessThresholds_Accessor);
}

uci::type::EntityStalenessThresholdsType& FusionSettingsRequestType::chooseSetStalenessThresholds(const std::string& method, uci::base::accessorType::AccessorType type) {
  setMergeAndDropSettings_Accessor.reset();
  setInputSources_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityStalenessThresholdsType : type};
  if ((!setStalenessThresholds_Accessor) || (setStalenessThresholds_Accessor->getAccessorType() != requestedType)) {
    setStalenessThresholds_Accessor = EntityStalenessThresholdsType::create(type);
    if (!setStalenessThresholds_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *setStalenessThresholds_Accessor;
}

uci::type::EntityStalenessThresholdsType& FusionSettingsRequestType::chooseSetStalenessThresholds(uci::base::accessorType::AccessorType type) {
  return chooseSetStalenessThresholds("chooseSetStalenessThresholds", type);
}

uci::type::FusionSettingsType& FusionSettingsRequestType::getSetMergeAndDropSettings_() const {
  if (setMergeAndDropSettings_Accessor) {
    return *setMergeAndDropSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getSetMergeAndDropSettings(): Unable to get SetMergeAndDropSettings, field not selected");
}

const uci::type::FusionSettingsType& FusionSettingsRequestType::getSetMergeAndDropSettings() const {
  return getSetMergeAndDropSettings_();
}

uci::type::FusionSettingsType& FusionSettingsRequestType::getSetMergeAndDropSettings() {
  return getSetMergeAndDropSettings_();
}

uci::type::FusionSettingsRequestType& FusionSettingsRequestType::setSetMergeAndDropSettings(const uci::type::FusionSettingsType& accessor) {
  chooseSetMergeAndDropSettings();
  if (&accessor != setMergeAndDropSettings_Accessor.get()) {
    setMergeAndDropSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FusionSettingsRequestType::isSetMergeAndDropSettings() const noexcept {
  return static_cast<bool>(setMergeAndDropSettings_Accessor);
}

uci::type::FusionSettingsType& FusionSettingsRequestType::chooseSetMergeAndDropSettings(const std::string& method, uci::base::accessorType::AccessorType type) {
  setStalenessThresholds_Accessor.reset();
  setInputSources_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fusionSettingsType : type};
  if ((!setMergeAndDropSettings_Accessor) || (setMergeAndDropSettings_Accessor->getAccessorType() != requestedType)) {
    setMergeAndDropSettings_Accessor = FusionSettingsType::create(type);
    if (!setMergeAndDropSettings_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *setMergeAndDropSettings_Accessor;
}

uci::type::FusionSettingsType& FusionSettingsRequestType::chooseSetMergeAndDropSettings(uci::base::accessorType::AccessorType type) {
  return chooseSetMergeAndDropSettings("chooseSetMergeAndDropSettings", type);
}

uci::type::FusionSourcesType& FusionSettingsRequestType::getSetInputSources_() const {
  if (setInputSources_Accessor) {
    return *setInputSources_Accessor;
  }
  throw uci::base::UCIException("Error in getSetInputSources(): Unable to get SetInputSources, field not selected");
}

const uci::type::FusionSourcesType& FusionSettingsRequestType::getSetInputSources() const {
  return getSetInputSources_();
}

uci::type::FusionSourcesType& FusionSettingsRequestType::getSetInputSources() {
  return getSetInputSources_();
}

uci::type::FusionSettingsRequestType& FusionSettingsRequestType::setSetInputSources(const uci::type::FusionSourcesType& accessor) {
  chooseSetInputSources();
  if (&accessor != setInputSources_Accessor.get()) {
    setInputSources_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FusionSettingsRequestType::isSetInputSources() const noexcept {
  return static_cast<bool>(setInputSources_Accessor);
}

uci::type::FusionSourcesType& FusionSettingsRequestType::chooseSetInputSources(const std::string& method, uci::base::accessorType::AccessorType type) {
  setStalenessThresholds_Accessor.reset();
  setMergeAndDropSettings_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fusionSourcesType : type};
  if ((!setInputSources_Accessor) || (setInputSources_Accessor->getAccessorType() != requestedType)) {
    setInputSources_Accessor = FusionSourcesType::create(type);
    if (!setInputSources_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *setInputSources_Accessor;
}

uci::type::FusionSourcesType& FusionSettingsRequestType::chooseSetInputSources(uci::base::accessorType::AccessorType type) {
  return chooseSetInputSources("chooseSetInputSources", type);
}

std::unique_ptr<FusionSettingsRequestType> FusionSettingsRequestType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fusionSettingsRequestType : type};
  return (requestedType == uci::type::accessorType::fusionSettingsRequestType) ? boost::make_unique<FusionSettingsRequestType>() : nullptr;
}

/**  */
namespace FusionSettingsRequestType_Names {

constexpr const char* Extern_Type_Name{"FusionSettingsRequestType"};
constexpr const char* SetStalenessThresholds_Name{"SetStalenessThresholds"};
constexpr const char* SetMergeAndDropSettings_Name{"SetMergeAndDropSettings"};
constexpr const char* SetInputSources_Name{"SetInputSources"};

} // namespace FusionSettingsRequestType_Names

void FusionSettingsRequestType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FusionSettingsRequestType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FusionSettingsRequestType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FusionSettingsRequestType_Names::SetStalenessThresholds_Name) {
      EntityStalenessThresholdsType::deserialize(valueType.second, accessor.chooseSetStalenessThresholds(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FusionSettingsRequestType_Names::SetMergeAndDropSettings_Name) {
      FusionSettingsType::deserialize(valueType.second, accessor.chooseSetMergeAndDropSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FusionSettingsRequestType_Names::SetInputSources_Name) {
      FusionSourcesType::deserialize(valueType.second, accessor.chooseSetInputSources(), nodeName, nsPrefix);
    }
  }
}

std::string FusionSettingsRequestType::serialize(const uci::type::FusionSettingsRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FusionSettingsRequestType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FusionSettingsRequestType_Names::Extern_Type_Name);
  }
  if (accessor.isSetStalenessThresholds()) {
    EntityStalenessThresholdsType::serialize(accessor.getSetStalenessThresholds(), node, FusionSettingsRequestType_Names::SetStalenessThresholds_Name);
  } else if (accessor.isSetMergeAndDropSettings()) {
    FusionSettingsType::serialize(accessor.getSetMergeAndDropSettings(), node, FusionSettingsRequestType_Names::SetMergeAndDropSettings_Name);
  } else if (accessor.isSetInputSources()) {
    FusionSourcesType::serialize(accessor.getSetInputSources(), node, FusionSettingsRequestType_Names::SetInputSources_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FusionSettingsRequestType& FusionSettingsRequestType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FusionSettingsRequestType>().release());
}

uci::type::FusionSettingsRequestType& FusionSettingsRequestType::create(const uci::type::FusionSettingsRequestType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FusionSettingsRequestType> newAccessor{boost::make_unique<asb_uci::type::FusionSettingsRequestType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FusionSettingsRequestType::destroy(uci::type::FusionSettingsRequestType& accessor) {
  delete dynamic_cast<asb_uci::type::FusionSettingsRequestType*>(&accessor);
}

} // namespace type

} // namespace uci

