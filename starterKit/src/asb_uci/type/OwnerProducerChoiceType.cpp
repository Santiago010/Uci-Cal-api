/** @file OwnerProducerChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OwnerProducerChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/NATO_SpecialWordsType.h"
#include "../../../include/asb_uci/type/OwnerProducerEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NATO_SpecialWordsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OwnerProducerChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OwnerProducerEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OwnerProducerChoiceType::OwnerProducerChoiceType() = default;

OwnerProducerChoiceType::~OwnerProducerChoiceType() = default;

void OwnerProducerChoiceType::copy(const uci::type::OwnerProducerChoiceType& accessor) {
  copyImpl(accessor, false);
}

void OwnerProducerChoiceType::copyImpl(const uci::type::OwnerProducerChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OwnerProducerChoiceType&>(accessor);
    if (accessorImpl.governmentIdentifier_Accessor) {
      setGovernmentIdentifier(*(accessorImpl.governmentIdentifier_Accessor));
    } else {
      governmentIdentifier_Accessor.reset();
    }
    if (accessorImpl.nATO_SpecialWord_Accessor) {
      setNATO_SpecialWord(*(accessorImpl.nATO_SpecialWord_Accessor));
    } else {
      nATO_SpecialWord_Accessor.reset();
    }
  }
}

void OwnerProducerChoiceType::reset() noexcept {
  governmentIdentifier_Accessor.reset();
  nATO_SpecialWord_Accessor.reset();
}

uci::type::OwnerProducerChoiceType::OwnerProducerChoiceTypeChoice OwnerProducerChoiceType::getOwnerProducerChoiceTypeChoiceOrdinal() const noexcept {
  if (governmentIdentifier_Accessor) {
    return OWNERPRODUCERCHOICETYPE_CHOICE_GOVERNMENTIDENTIFIER;
  }
  if (nATO_SpecialWord_Accessor) {
    return OWNERPRODUCERCHOICETYPE_CHOICE_NATO_SPECIALWORD;
  }
  return OWNERPRODUCERCHOICETYPE_CHOICE_NONE;
}

uci::type::OwnerProducerChoiceType& OwnerProducerChoiceType::setOwnerProducerChoiceTypeChoiceOrdinal(uci::type::OwnerProducerChoiceType::OwnerProducerChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case OWNERPRODUCERCHOICETYPE_CHOICE_GOVERNMENTIDENTIFIER:
      chooseGovernmentIdentifier("setOwnerProducerChoiceTypeChoiceOrdinal", type);
      break;
    case OWNERPRODUCERCHOICETYPE_CHOICE_NATO_SPECIALWORD:
      chooseNATO_SpecialWord("setOwnerProducerChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOwnerProducerChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OwnerProducerEnum& OwnerProducerChoiceType::getGovernmentIdentifier_() const {
  if (governmentIdentifier_Accessor) {
    return *governmentIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getGovernmentIdentifier(): Unable to get GovernmentIdentifier, field not selected");
}

const uci::type::OwnerProducerEnum& OwnerProducerChoiceType::getGovernmentIdentifier() const {
  return getGovernmentIdentifier_();
}

uci::type::OwnerProducerEnum& OwnerProducerChoiceType::getGovernmentIdentifier() {
  return getGovernmentIdentifier_();
}

uci::type::OwnerProducerChoiceType& OwnerProducerChoiceType::setGovernmentIdentifier(const uci::type::OwnerProducerEnum& accessor) {
  chooseGovernmentIdentifier();
  if (&accessor != governmentIdentifier_Accessor.get()) {
    governmentIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OwnerProducerChoiceType& OwnerProducerChoiceType::setGovernmentIdentifier(uci::type::OwnerProducerEnum::EnumerationItem value) {
  chooseGovernmentIdentifier().setValue(value);
  return *this;
}

bool OwnerProducerChoiceType::isGovernmentIdentifier() const noexcept {
  return static_cast<bool>(governmentIdentifier_Accessor);
}

uci::type::OwnerProducerEnum& OwnerProducerChoiceType::chooseGovernmentIdentifier(const std::string& method, uci::base::accessorType::AccessorType type) {
  nATO_SpecialWord_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ownerProducerEnum : type};
  if ((!governmentIdentifier_Accessor) || (governmentIdentifier_Accessor->getAccessorType() != requestedType)) {
    governmentIdentifier_Accessor = OwnerProducerEnum::create(type);
    if (!governmentIdentifier_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *governmentIdentifier_Accessor;
}

uci::type::OwnerProducerEnum& OwnerProducerChoiceType::chooseGovernmentIdentifier(uci::base::accessorType::AccessorType type) {
  return chooseGovernmentIdentifier("chooseGovernmentIdentifier", type);
}

uci::type::NATO_SpecialWordsType& OwnerProducerChoiceType::getNATO_SpecialWord_() const {
  if (nATO_SpecialWord_Accessor) {
    return *nATO_SpecialWord_Accessor;
  }
  throw uci::base::UCIException("Error in getNATO_SpecialWord(): An attempt was made to get an optional field that was not enabled, call hasNATO_SpecialWord() to determine if it is safe to call getNATO_SpecialWord()");
}

const uci::type::NATO_SpecialWordsType& OwnerProducerChoiceType::getNATO_SpecialWord() const {
  return getNATO_SpecialWord_();
}

uci::type::NATO_SpecialWordsType& OwnerProducerChoiceType::getNATO_SpecialWord() {
  return getNATO_SpecialWord_();
}

uci::type::OwnerProducerChoiceType& OwnerProducerChoiceType::setNATO_SpecialWord(const uci::type::NATO_SpecialWordsType& value) {
  return setNATO_SpecialWord(value.c_str());
}

uci::type::OwnerProducerChoiceType& OwnerProducerChoiceType::setNATO_SpecialWord(const std::string& value) {
  return setNATO_SpecialWord(value.c_str());
}

uci::type::OwnerProducerChoiceType& OwnerProducerChoiceType::setNATO_SpecialWord(const char * value) {
  chooseNATO_SpecialWord().setStringValue(value);
  return *this;
}

bool OwnerProducerChoiceType::isNATO_SpecialWord() const noexcept {
  return static_cast<bool>(nATO_SpecialWord_Accessor);
}

uci::type::NATO_SpecialWordsType& OwnerProducerChoiceType::chooseNATO_SpecialWord(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  governmentIdentifier_Accessor.reset();
  if (!nATO_SpecialWord_Accessor) {
    nATO_SpecialWord_Accessor = NATO_SpecialWordsType::create(type);
  }
  return *nATO_SpecialWord_Accessor;
}

uci::type::NATO_SpecialWordsType& OwnerProducerChoiceType::chooseNATO_SpecialWord(uci::base::accessorType::AccessorType type) {
  return chooseNATO_SpecialWord("chooseNATO_SpecialWord", type);
}

std::unique_ptr<OwnerProducerChoiceType> OwnerProducerChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ownerProducerChoiceType : type};
  return (requestedType == uci::type::accessorType::ownerProducerChoiceType) ? boost::make_unique<OwnerProducerChoiceType>() : nullptr;
}

/**  */
namespace OwnerProducerChoiceType_Names {

constexpr const char* Extern_Type_Name{"OwnerProducerChoiceType"};
constexpr const char* GovernmentIdentifier_Name{"GovernmentIdentifier"};
constexpr const char* NATO_SpecialWord_Name{"NATO_SpecialWord"};

} // namespace OwnerProducerChoiceType_Names

void OwnerProducerChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OwnerProducerChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OwnerProducerChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OwnerProducerChoiceType_Names::GovernmentIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseGovernmentIdentifier().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OwnerProducerChoiceType_Names::NATO_SpecialWord_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseNATO_SpecialWord().setStringValue(*value);
      }
    }
  }
}

std::string OwnerProducerChoiceType::serialize(const uci::type::OwnerProducerChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OwnerProducerChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OwnerProducerChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isGovernmentIdentifier()) {
    OwnerProducerEnum::serialize(accessor.getGovernmentIdentifier(), node, OwnerProducerChoiceType_Names::GovernmentIdentifier_Name, false);
  } else if (accessor.isNATO_SpecialWord()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getNATO_SpecialWord(), node, OwnerProducerChoiceType_Names::NATO_SpecialWord_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OwnerProducerChoiceType& OwnerProducerChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OwnerProducerChoiceType>().release());
}

uci::type::OwnerProducerChoiceType& OwnerProducerChoiceType::create(const uci::type::OwnerProducerChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OwnerProducerChoiceType> newAccessor{boost::make_unique<asb_uci::type::OwnerProducerChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OwnerProducerChoiceType::destroy(uci::type::OwnerProducerChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::OwnerProducerChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

