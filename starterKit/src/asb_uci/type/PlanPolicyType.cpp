/** @file PlanPolicyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PlanPolicyType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ApprovalPolicyBaseType.h"
#include "../../../include/asb_uci/type/ByResultPolicyType.h"
#include "../../../include/asb_uci/type/ByTriggerPolicyType.h"
#include "../../../include/asb_uci/type/PlanPolicyApplicablePlanType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApprovalPolicyBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ByResultPolicyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ByTriggerPolicyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanPolicyApplicablePlanType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanPolicyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanPolicyType::PlanPolicyType()
  : applicablePlanningActivity_Accessor{boost::make_unique<ApplicablePlanningActivity>(1, SIZE_MAX)},
    byResultPolicy_Accessor{boost::make_unique<ByResultPolicy>(0, SIZE_MAX)},
    byTriggerPolicy_Accessor{boost::make_unique<ByTriggerPolicy>(0, SIZE_MAX)} {
}

PlanPolicyType::~PlanPolicyType() = default;

void PlanPolicyType::copy(const uci::type::PlanPolicyType& accessor) {
  copyImpl(accessor, false);
}

void PlanPolicyType::copyImpl(const uci::type::PlanPolicyType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlanPolicyType&>(accessor);
    setApplicablePlanningActivity(*(accessorImpl.applicablePlanningActivity_Accessor));
    if (accessorImpl.defaultPolicy_Accessor) {
      setDefaultPolicy(*(accessorImpl.defaultPolicy_Accessor));
    } else {
      defaultPolicy_Accessor.reset();
    }
    setByResultPolicy(*(accessorImpl.byResultPolicy_Accessor));
    setByTriggerPolicy(*(accessorImpl.byTriggerPolicy_Accessor));
  }
}

void PlanPolicyType::reset() noexcept {
  applicablePlanningActivity_Accessor->reset();
  defaultPolicy_Accessor.reset();
  byResultPolicy_Accessor->reset();
  byTriggerPolicy_Accessor->reset();
}

const uci::type::PlanPolicyType::ApplicablePlanningActivity& PlanPolicyType::getApplicablePlanningActivity() const {
  return *applicablePlanningActivity_Accessor;
}

uci::type::PlanPolicyType::ApplicablePlanningActivity& PlanPolicyType::getApplicablePlanningActivity() {
  return *applicablePlanningActivity_Accessor;
}

uci::type::PlanPolicyType& PlanPolicyType::setApplicablePlanningActivity(const uci::type::PlanPolicyType::ApplicablePlanningActivity& accessor) {
  if (&accessor != applicablePlanningActivity_Accessor.get()) {
    applicablePlanningActivity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ApprovalPolicyBaseType& PlanPolicyType::getDefaultPolicy_() const {
  if (defaultPolicy_Accessor) {
    return *defaultPolicy_Accessor;
  }
  throw uci::base::UCIException("Error in getDefaultPolicy(): An attempt was made to get an optional field that was not enabled, call hasDefaultPolicy() to determine if it is safe to call getDefaultPolicy()");
}

const uci::type::ApprovalPolicyBaseType& PlanPolicyType::getDefaultPolicy() const {
  return getDefaultPolicy_();
}

uci::type::ApprovalPolicyBaseType& PlanPolicyType::getDefaultPolicy() {
  return getDefaultPolicy_();
}

uci::type::PlanPolicyType& PlanPolicyType::setDefaultPolicy(const uci::type::ApprovalPolicyBaseType& accessor) {
  enableDefaultPolicy(accessor.getAccessorType());
  if (&accessor != defaultPolicy_Accessor.get()) {
    defaultPolicy_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PlanPolicyType::hasDefaultPolicy() const noexcept {
  return static_cast<bool>(defaultPolicy_Accessor);
}

uci::type::ApprovalPolicyBaseType& PlanPolicyType::enableDefaultPolicy(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::approvalPolicyBaseType : type};
  if ((!defaultPolicy_Accessor) || (defaultPolicy_Accessor->getAccessorType() != requestedType)) {
    defaultPolicy_Accessor = ApprovalPolicyBaseType::create(requestedType);
    if (!defaultPolicy_Accessor) {
      throw uci::base::UCIException("Error in enableDefaultPolicy(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *defaultPolicy_Accessor;
}

uci::type::PlanPolicyType& PlanPolicyType::clearDefaultPolicy() noexcept {
  defaultPolicy_Accessor.reset();
  return *this;
}

const uci::type::PlanPolicyType::ByResultPolicy& PlanPolicyType::getByResultPolicy() const {
  return *byResultPolicy_Accessor;
}

uci::type::PlanPolicyType::ByResultPolicy& PlanPolicyType::getByResultPolicy() {
  return *byResultPolicy_Accessor;
}

uci::type::PlanPolicyType& PlanPolicyType::setByResultPolicy(const uci::type::PlanPolicyType::ByResultPolicy& accessor) {
  if (&accessor != byResultPolicy_Accessor.get()) {
    byResultPolicy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlanPolicyType::ByTriggerPolicy& PlanPolicyType::getByTriggerPolicy() const {
  return *byTriggerPolicy_Accessor;
}

uci::type::PlanPolicyType::ByTriggerPolicy& PlanPolicyType::getByTriggerPolicy() {
  return *byTriggerPolicy_Accessor;
}

uci::type::PlanPolicyType& PlanPolicyType::setByTriggerPolicy(const uci::type::PlanPolicyType::ByTriggerPolicy& accessor) {
  if (&accessor != byTriggerPolicy_Accessor.get()) {
    byTriggerPolicy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PlanPolicyType> PlanPolicyType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planPolicyType : type};
  return (requestedType == uci::type::accessorType::planPolicyType) ? boost::make_unique<PlanPolicyType>() : nullptr;
}

/**  */
namespace PlanPolicyType_Names {

constexpr const char* Extern_Type_Name{"PlanPolicyType"};
constexpr const char* ApplicablePlanningActivity_Name{"ApplicablePlanningActivity"};
constexpr const char* DefaultPolicy_Name{"DefaultPolicy"};
constexpr const char* ByResultPolicy_Name{"ByResultPolicy"};
constexpr const char* ByTriggerPolicy_Name{"ByTriggerPolicy"};

} // namespace PlanPolicyType_Names

void PlanPolicyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanPolicyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanPolicyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanPolicyType_Names::ApplicablePlanningActivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanPolicyType::ApplicablePlanningActivity& boundedList = accessor.getApplicablePlanningActivity();
        const uci::type::PlanPolicyType::ApplicablePlanningActivity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PlanPolicyApplicablePlanType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanPolicyType_Names::DefaultPolicy_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDefaultPolicy(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanPolicyType_Names::ByResultPolicy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanPolicyType::ByResultPolicy& boundedList = accessor.getByResultPolicy();
        const uci::type::PlanPolicyType::ByResultPolicy::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ByResultPolicyType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanPolicyType_Names::ByTriggerPolicy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanPolicyType::ByTriggerPolicy& boundedList = accessor.getByTriggerPolicy();
        const uci::type::PlanPolicyType::ByTriggerPolicy::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ByTriggerPolicyType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PlanPolicyType::serialize(const uci::type::PlanPolicyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanPolicyType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanPolicyType_Names::Extern_Type_Name);
  }
  {
    const uci::type::PlanPolicyType::ApplicablePlanningActivity& boundedList = accessor.getApplicablePlanningActivity();
    for (uci::type::PlanPolicyType::ApplicablePlanningActivity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PlanPolicyApplicablePlanType::serialize(boundedList.at(i), node, PlanPolicyType_Names::ApplicablePlanningActivity_Name);
    }
  }
  if (accessor.hasDefaultPolicy()) {
    ApprovalPolicyBaseType::serialize(accessor.getDefaultPolicy(), node, PlanPolicyType_Names::DefaultPolicy_Name);
  }
  {
    const uci::type::PlanPolicyType::ByResultPolicy& boundedList = accessor.getByResultPolicy();
    for (uci::type::PlanPolicyType::ByResultPolicy::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ByResultPolicyType::serialize(boundedList.at(i), node, PlanPolicyType_Names::ByResultPolicy_Name);
    }
  }
  {
    const uci::type::PlanPolicyType::ByTriggerPolicy& boundedList = accessor.getByTriggerPolicy();
    for (uci::type::PlanPolicyType::ByTriggerPolicy::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ByTriggerPolicyType::serialize(boundedList.at(i), node, PlanPolicyType_Names::ByTriggerPolicy_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanPolicyType& PlanPolicyType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanPolicyType>().release());
}

uci::type::PlanPolicyType& PlanPolicyType::create(const uci::type::PlanPolicyType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanPolicyType> newAccessor{boost::make_unique<asb_uci::type::PlanPolicyType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanPolicyType::destroy(uci::type::PlanPolicyType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanPolicyType*>(&accessor);
}

} // namespace type

} // namespace uci

