/** @file LAR_RequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/LAR_RequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/LAR_DetailsType.h"
#include "../../../include/asb_uci/type/LAR_RelationEnum.h"
#include "../../../include/asb_uci/type/RequestBaseType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LAR_DetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LAR_RelationEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LAR_RequestMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LAR_RequestMDT::LAR_RequestMDT()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()},
    lAR_Type_Accessor{boost::make_unique<LAR_Type>(1, 4)},
    lAR_Details_Accessor{boost::make_unique<LAR_DetailsType>()} {
}

LAR_RequestMDT::~LAR_RequestMDT() = default;

void LAR_RequestMDT::copy(const uci::type::LAR_RequestMDT& accessor) {
  copyImpl(accessor, false);
}

void LAR_RequestMDT::copyImpl(const uci::type::LAR_RequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const LAR_RequestMDT&>(accessor);
    setSystemID(*(accessorImpl.systemID_Accessor));
    setResultsInNativeMessage(accessorImpl.resultsInNativeMessage_Accessor);
    setLAR_Type(*(accessorImpl.lAR_Type_Accessor));
    setLAR_Details(*(accessorImpl.lAR_Details_Accessor));
  }
}

void LAR_RequestMDT::reset() noexcept {
  RequestBaseType::reset();
  systemID_Accessor->reset();
  resultsInNativeMessage_Accessor = false;
  lAR_Type_Accessor->reset();
  lAR_Details_Accessor->reset();
}

const uci::type::SystemID_Type& LAR_RequestMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& LAR_RequestMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::LAR_RequestMDT& LAR_RequestMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean LAR_RequestMDT::getResultsInNativeMessage() const {
  return resultsInNativeMessage_Accessor;
}

uci::type::LAR_RequestMDT& LAR_RequestMDT::setResultsInNativeMessage(xs::Boolean value) {
  resultsInNativeMessage_Accessor = value;
  return *this;
}


const uci::type::LAR_RequestMDT::LAR_Type& LAR_RequestMDT::getLAR_Type() const {
  return *lAR_Type_Accessor;
}

uci::type::LAR_RequestMDT::LAR_Type& LAR_RequestMDT::getLAR_Type() {
  return *lAR_Type_Accessor;
}

uci::type::LAR_RequestMDT& LAR_RequestMDT::setLAR_Type(const uci::type::LAR_RequestMDT::LAR_Type& accessor) {
  if (&accessor != lAR_Type_Accessor.get()) {
    lAR_Type_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::LAR_DetailsType& LAR_RequestMDT::getLAR_Details() const {
  return *lAR_Details_Accessor;
}

uci::type::LAR_DetailsType& LAR_RequestMDT::getLAR_Details() {
  return *lAR_Details_Accessor;
}

uci::type::LAR_RequestMDT& LAR_RequestMDT::setLAR_Details(const uci::type::LAR_DetailsType& accessor) {
  if (&accessor != lAR_Details_Accessor.get()) {
    lAR_Details_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<LAR_RequestMDT> LAR_RequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lAR_RequestMDT : type};
  return (requestedType == uci::type::accessorType::lAR_RequestMDT) ? boost::make_unique<LAR_RequestMDT>() : nullptr;
}

/**  */
namespace LAR_RequestMDT_Names {

constexpr const char* Extern_Type_Name{"LAR_RequestMDT"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* ResultsInNativeMessage_Name{"ResultsInNativeMessage"};
constexpr const char* LAR_Type_Name{"LAR_Type"};
constexpr const char* LAR_Details_Name{"LAR_Details"};

} // namespace LAR_RequestMDT_Names

void LAR_RequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::LAR_RequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LAR_RequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LAR_RequestMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LAR_RequestMDT_Names::ResultsInNativeMessage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResultsInNativeMessage(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + LAR_RequestMDT_Names::LAR_Type_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::LAR_RequestMDT::LAR_Type& boundedList = accessor.getLAR_Type();
        const uci::type::LAR_RequestMDT::LAR_Type::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + LAR_RequestMDT_Names::LAR_Details_Name) {
      LAR_DetailsType::deserialize(valueType.second, accessor.getLAR_Details(), nodeName, nsPrefix);
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string LAR_RequestMDT::serialize(const uci::type::LAR_RequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LAR_RequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LAR_RequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  SystemID_Type::serialize(accessor.getSystemID(), node, LAR_RequestMDT_Names::SystemID_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getResultsInNativeMessage(), node, LAR_RequestMDT_Names::ResultsInNativeMessage_Name);
  {
    const uci::type::LAR_RequestMDT::LAR_Type& boundedList = accessor.getLAR_Type();
    for (uci::type::LAR_RequestMDT::LAR_Type::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      LAR_RelationEnum::serialize(boundedList.at(i), node, LAR_RequestMDT_Names::LAR_Type_Name, false);
    }
  }
  LAR_DetailsType::serialize(accessor.getLAR_Details(), node, LAR_RequestMDT_Names::LAR_Details_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LAR_RequestMDT& LAR_RequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LAR_RequestMDT>().release());
}

uci::type::LAR_RequestMDT& LAR_RequestMDT::create(const uci::type::LAR_RequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LAR_RequestMDT> newAccessor{boost::make_unique<asb_uci::type::LAR_RequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LAR_RequestMDT::destroy(uci::type::LAR_RequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::LAR_RequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

