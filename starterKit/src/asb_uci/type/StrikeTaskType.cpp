/** @file StrikeTaskType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/StrikeTaskType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AnglePairType.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/Point3D_Type.h"
#include "../../../include/asb_uci/type/StrikeTaskReleaseConstraintsType.h"
#include "../../../include/asb_uci/type/StrikeTaskWeaponListType.h"
#include "../../../include/asb_uci/type/TargetInformationType.h"
#include "../../../include/asb_uci/type/TargetType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnglePairType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point3D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StrikeTaskReleaseConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StrikeTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StrikeTaskWeaponListType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TargetInformationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TargetType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StrikeTaskType::StrikeTaskType()
  : target_Accessor{boost::make_unique<TargetType>()} {
}

StrikeTaskType::~StrikeTaskType() = default;

void StrikeTaskType::copy(const uci::type::StrikeTaskType& accessor) {
  copyImpl(accessor, false);
}

void StrikeTaskType::copyImpl(const uci::type::StrikeTaskType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const StrikeTaskType&>(accessor);
    setTarget(*(accessorImpl.target_Accessor));
    if (accessorImpl.targetInformation_Accessor) {
      setTargetInformation(*(accessorImpl.targetInformation_Accessor));
    } else {
      targetInformation_Accessor.reset();
    }
    if (accessorImpl.ingressConstraint_Accessor) {
      setIngressConstraint(*(accessorImpl.ingressConstraint_Accessor));
    } else {
      ingressConstraint_Accessor.reset();
    }
    if (accessorImpl.egressConstraint_Accessor) {
      setEgressConstraint(*(accessorImpl.egressConstraint_Accessor));
    } else {
      egressConstraint_Accessor.reset();
    }
    if (accessorImpl.initialPoint_Accessor) {
      setInitialPoint(*(accessorImpl.initialPoint_Accessor));
    } else {
      initialPoint_Accessor.reset();
    }
    if (accessorImpl.releaseConstraints_Accessor) {
      setReleaseConstraints(*(accessorImpl.releaseConstraints_Accessor));
    } else {
      releaseConstraints_Accessor.reset();
    }
    if (accessorImpl.weaponList_Accessor) {
      setWeaponList(*(accessorImpl.weaponList_Accessor));
    } else {
      weaponList_Accessor.reset();
    }
    if (accessorImpl.noStrike_Accessor) {
      setNoStrike(*(accessorImpl.noStrike_Accessor));
    } else {
      noStrike_Accessor.reset();
    }
  }
}

void StrikeTaskType::reset() noexcept {
  target_Accessor->reset();
  targetInformation_Accessor.reset();
  ingressConstraint_Accessor.reset();
  egressConstraint_Accessor.reset();
  initialPoint_Accessor.reset();
  releaseConstraints_Accessor.reset();
  weaponList_Accessor.reset();
  noStrike_Accessor.reset();
}

const uci::type::TargetType& StrikeTaskType::getTarget() const {
  return *target_Accessor;
}

uci::type::TargetType& StrikeTaskType::getTarget() {
  return *target_Accessor;
}

uci::type::StrikeTaskType& StrikeTaskType::setTarget(const uci::type::TargetType& accessor) {
  if (&accessor != target_Accessor.get()) {
    target_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TargetInformationType& StrikeTaskType::getTargetInformation_() const {
  if (targetInformation_Accessor) {
    return *targetInformation_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetInformation(): An attempt was made to get an optional field that was not enabled, call hasTargetInformation() to determine if it is safe to call getTargetInformation()");
}

const uci::type::TargetInformationType& StrikeTaskType::getTargetInformation() const {
  return getTargetInformation_();
}

uci::type::TargetInformationType& StrikeTaskType::getTargetInformation() {
  return getTargetInformation_();
}

uci::type::StrikeTaskType& StrikeTaskType::setTargetInformation(const uci::type::TargetInformationType& accessor) {
  enableTargetInformation();
  if (&accessor != targetInformation_Accessor.get()) {
    targetInformation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeTaskType::hasTargetInformation() const noexcept {
  return static_cast<bool>(targetInformation_Accessor);
}

uci::type::TargetInformationType& StrikeTaskType::enableTargetInformation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::targetInformationType : type};
  if ((!targetInformation_Accessor) || (targetInformation_Accessor->getAccessorType() != requestedType)) {
    targetInformation_Accessor = TargetInformationType::create(requestedType);
    if (!targetInformation_Accessor) {
      throw uci::base::UCIException("Error in enableTargetInformation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *targetInformation_Accessor;
}

uci::type::StrikeTaskType& StrikeTaskType::clearTargetInformation() noexcept {
  targetInformation_Accessor.reset();
  return *this;
}

uci::type::AnglePairType& StrikeTaskType::getIngressConstraint_() const {
  if (ingressConstraint_Accessor) {
    return *ingressConstraint_Accessor;
  }
  throw uci::base::UCIException("Error in getIngressConstraint(): An attempt was made to get an optional field that was not enabled, call hasIngressConstraint() to determine if it is safe to call getIngressConstraint()");
}

const uci::type::AnglePairType& StrikeTaskType::getIngressConstraint() const {
  return getIngressConstraint_();
}

uci::type::AnglePairType& StrikeTaskType::getIngressConstraint() {
  return getIngressConstraint_();
}

uci::type::StrikeTaskType& StrikeTaskType::setIngressConstraint(const uci::type::AnglePairType& accessor) {
  enableIngressConstraint(accessor.getAccessorType());
  if (&accessor != ingressConstraint_Accessor.get()) {
    ingressConstraint_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool StrikeTaskType::hasIngressConstraint() const noexcept {
  return static_cast<bool>(ingressConstraint_Accessor);
}

uci::type::AnglePairType& StrikeTaskType::enableIngressConstraint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::anglePairType : type};
  if ((!ingressConstraint_Accessor) || (ingressConstraint_Accessor->getAccessorType() != requestedType)) {
    ingressConstraint_Accessor = AnglePairType::create(requestedType);
    if (!ingressConstraint_Accessor) {
      throw uci::base::UCIException("Error in enableIngressConstraint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ingressConstraint_Accessor;
}

uci::type::StrikeTaskType& StrikeTaskType::clearIngressConstraint() noexcept {
  ingressConstraint_Accessor.reset();
  return *this;
}

uci::type::AnglePairType& StrikeTaskType::getEgressConstraint_() const {
  if (egressConstraint_Accessor) {
    return *egressConstraint_Accessor;
  }
  throw uci::base::UCIException("Error in getEgressConstraint(): An attempt was made to get an optional field that was not enabled, call hasEgressConstraint() to determine if it is safe to call getEgressConstraint()");
}

const uci::type::AnglePairType& StrikeTaskType::getEgressConstraint() const {
  return getEgressConstraint_();
}

uci::type::AnglePairType& StrikeTaskType::getEgressConstraint() {
  return getEgressConstraint_();
}

uci::type::StrikeTaskType& StrikeTaskType::setEgressConstraint(const uci::type::AnglePairType& accessor) {
  enableEgressConstraint(accessor.getAccessorType());
  if (&accessor != egressConstraint_Accessor.get()) {
    egressConstraint_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool StrikeTaskType::hasEgressConstraint() const noexcept {
  return static_cast<bool>(egressConstraint_Accessor);
}

uci::type::AnglePairType& StrikeTaskType::enableEgressConstraint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::anglePairType : type};
  if ((!egressConstraint_Accessor) || (egressConstraint_Accessor->getAccessorType() != requestedType)) {
    egressConstraint_Accessor = AnglePairType::create(requestedType);
    if (!egressConstraint_Accessor) {
      throw uci::base::UCIException("Error in enableEgressConstraint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *egressConstraint_Accessor;
}

uci::type::StrikeTaskType& StrikeTaskType::clearEgressConstraint() noexcept {
  egressConstraint_Accessor.reset();
  return *this;
}

uci::type::Point3D_Type& StrikeTaskType::getInitialPoint_() const {
  if (initialPoint_Accessor) {
    return *initialPoint_Accessor;
  }
  throw uci::base::UCIException("Error in getInitialPoint(): An attempt was made to get an optional field that was not enabled, call hasInitialPoint() to determine if it is safe to call getInitialPoint()");
}

const uci::type::Point3D_Type& StrikeTaskType::getInitialPoint() const {
  return getInitialPoint_();
}

uci::type::Point3D_Type& StrikeTaskType::getInitialPoint() {
  return getInitialPoint_();
}

uci::type::StrikeTaskType& StrikeTaskType::setInitialPoint(const uci::type::Point3D_Type& accessor) {
  enableInitialPoint(accessor.getAccessorType());
  if (&accessor != initialPoint_Accessor.get()) {
    initialPoint_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool StrikeTaskType::hasInitialPoint() const noexcept {
  return static_cast<bool>(initialPoint_Accessor);
}

uci::type::Point3D_Type& StrikeTaskType::enableInitialPoint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!initialPoint_Accessor) || (initialPoint_Accessor->getAccessorType() != requestedType)) {
    initialPoint_Accessor = Point3D_Type::create(requestedType);
    if (!initialPoint_Accessor) {
      throw uci::base::UCIException("Error in enableInitialPoint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *initialPoint_Accessor;
}

uci::type::StrikeTaskType& StrikeTaskType::clearInitialPoint() noexcept {
  initialPoint_Accessor.reset();
  return *this;
}

uci::type::StrikeTaskReleaseConstraintsType& StrikeTaskType::getReleaseConstraints_() const {
  if (releaseConstraints_Accessor) {
    return *releaseConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getReleaseConstraints(): An attempt was made to get an optional field that was not enabled, call hasReleaseConstraints() to determine if it is safe to call getReleaseConstraints()");
}

const uci::type::StrikeTaskReleaseConstraintsType& StrikeTaskType::getReleaseConstraints() const {
  return getReleaseConstraints_();
}

uci::type::StrikeTaskReleaseConstraintsType& StrikeTaskType::getReleaseConstraints() {
  return getReleaseConstraints_();
}

uci::type::StrikeTaskType& StrikeTaskType::setReleaseConstraints(const uci::type::StrikeTaskReleaseConstraintsType& accessor) {
  enableReleaseConstraints();
  if (&accessor != releaseConstraints_Accessor.get()) {
    releaseConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeTaskType::hasReleaseConstraints() const noexcept {
  return static_cast<bool>(releaseConstraints_Accessor);
}

uci::type::StrikeTaskReleaseConstraintsType& StrikeTaskType::enableReleaseConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeTaskReleaseConstraintsType : type};
  if ((!releaseConstraints_Accessor) || (releaseConstraints_Accessor->getAccessorType() != requestedType)) {
    releaseConstraints_Accessor = StrikeTaskReleaseConstraintsType::create(requestedType);
    if (!releaseConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableReleaseConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *releaseConstraints_Accessor;
}

uci::type::StrikeTaskType& StrikeTaskType::clearReleaseConstraints() noexcept {
  releaseConstraints_Accessor.reset();
  return *this;
}

uci::type::StrikeTaskWeaponListType& StrikeTaskType::getWeaponList_() const {
  if (weaponList_Accessor) {
    return *weaponList_Accessor;
  }
  throw uci::base::UCIException("Error in getWeaponList(): An attempt was made to get an optional field that was not enabled, call hasWeaponList() to determine if it is safe to call getWeaponList()");
}

const uci::type::StrikeTaskWeaponListType& StrikeTaskType::getWeaponList() const {
  return getWeaponList_();
}

uci::type::StrikeTaskWeaponListType& StrikeTaskType::getWeaponList() {
  return getWeaponList_();
}

uci::type::StrikeTaskType& StrikeTaskType::setWeaponList(const uci::type::StrikeTaskWeaponListType& accessor) {
  enableWeaponList();
  if (&accessor != weaponList_Accessor.get()) {
    weaponList_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeTaskType::hasWeaponList() const noexcept {
  return static_cast<bool>(weaponList_Accessor);
}

uci::type::StrikeTaskWeaponListType& StrikeTaskType::enableWeaponList(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeTaskWeaponListType : type};
  if ((!weaponList_Accessor) || (weaponList_Accessor->getAccessorType() != requestedType)) {
    weaponList_Accessor = StrikeTaskWeaponListType::create(requestedType);
    if (!weaponList_Accessor) {
      throw uci::base::UCIException("Error in enableWeaponList(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weaponList_Accessor;
}

uci::type::StrikeTaskType& StrikeTaskType::clearWeaponList() noexcept {
  weaponList_Accessor.reset();
  return *this;
}

uci::type::EmptyType& StrikeTaskType::getNoStrike_() const {
  if (noStrike_Accessor) {
    return *noStrike_Accessor;
  }
  throw uci::base::UCIException("Error in getNoStrike(): An attempt was made to get an optional field that was not enabled, call hasNoStrike() to determine if it is safe to call getNoStrike()");
}

const uci::type::EmptyType& StrikeTaskType::getNoStrike() const {
  return getNoStrike_();
}

uci::type::EmptyType& StrikeTaskType::getNoStrike() {
  return getNoStrike_();
}

uci::type::StrikeTaskType& StrikeTaskType::setNoStrike(const uci::type::EmptyType& value) {
  return setNoStrike(value.c_str());
}

uci::type::StrikeTaskType& StrikeTaskType::setNoStrike(const std::string& value) {
  return setNoStrike(value.c_str());
}

uci::type::StrikeTaskType& StrikeTaskType::setNoStrike(const char* value) {
  enableNoStrike().setStringValue(value);
  return *this;
}

bool StrikeTaskType::hasNoStrike() const noexcept {
  return static_cast<bool>(noStrike_Accessor);
}

uci::type::EmptyType& StrikeTaskType::enableNoStrike(uci::base::accessorType::AccessorType type) {
  if (!noStrike_Accessor) {
    noStrike_Accessor = EmptyType::create(type);
  }
  return *noStrike_Accessor;
}

uci::type::StrikeTaskType& StrikeTaskType::clearNoStrike() noexcept {
  noStrike_Accessor.reset();
  return *this;
}

std::unique_ptr<StrikeTaskType> StrikeTaskType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeTaskType : type};
  return (requestedType == uci::type::accessorType::strikeTaskType) ? boost::make_unique<StrikeTaskType>() : nullptr;
}

/**  */
namespace StrikeTaskType_Names {

constexpr const char* Extern_Type_Name{"StrikeTaskType"};
constexpr const char* Target_Name{"Target"};
constexpr const char* TargetInformation_Name{"TargetInformation"};
constexpr const char* IngressConstraint_Name{"IngressConstraint"};
constexpr const char* EgressConstraint_Name{"EgressConstraint"};
constexpr const char* InitialPoint_Name{"InitialPoint"};
constexpr const char* ReleaseConstraints_Name{"ReleaseConstraints"};
constexpr const char* WeaponList_Name{"WeaponList"};
constexpr const char* NoStrike_Name{"NoStrike"};

} // namespace StrikeTaskType_Names

void StrikeTaskType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StrikeTaskType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StrikeTaskType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StrikeTaskType_Names::Target_Name) {
      TargetType::deserialize(valueType.second, accessor.getTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeTaskType_Names::TargetInformation_Name) {
      TargetInformationType::deserialize(valueType.second, accessor.enableTargetInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeTaskType_Names::IngressConstraint_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableIngressConstraint(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeTaskType_Names::EgressConstraint_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEgressConstraint(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeTaskType_Names::InitialPoint_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableInitialPoint(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeTaskType_Names::ReleaseConstraints_Name) {
      StrikeTaskReleaseConstraintsType::deserialize(valueType.second, accessor.enableReleaseConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeTaskType_Names::WeaponList_Name) {
      StrikeTaskWeaponListType::deserialize(valueType.second, accessor.enableWeaponList(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeTaskType_Names::NoStrike_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNoStrike(*value);
      }
    }
  }
}

std::string StrikeTaskType::serialize(const uci::type::StrikeTaskType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StrikeTaskType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StrikeTaskType_Names::Extern_Type_Name);
  }
  TargetType::serialize(accessor.getTarget(), node, StrikeTaskType_Names::Target_Name);
  if (accessor.hasTargetInformation()) {
    TargetInformationType::serialize(accessor.getTargetInformation(), node, StrikeTaskType_Names::TargetInformation_Name);
  }
  if (accessor.hasIngressConstraint()) {
    AnglePairType::serialize(accessor.getIngressConstraint(), node, StrikeTaskType_Names::IngressConstraint_Name);
  }
  if (accessor.hasEgressConstraint()) {
    AnglePairType::serialize(accessor.getEgressConstraint(), node, StrikeTaskType_Names::EgressConstraint_Name);
  }
  if (accessor.hasInitialPoint()) {
    Point3D_Type::serialize(accessor.getInitialPoint(), node, StrikeTaskType_Names::InitialPoint_Name);
  }
  if (accessor.hasReleaseConstraints()) {
    StrikeTaskReleaseConstraintsType::serialize(accessor.getReleaseConstraints(), node, StrikeTaskType_Names::ReleaseConstraints_Name);
  }
  if (accessor.hasWeaponList()) {
    StrikeTaskWeaponListType::serialize(accessor.getWeaponList(), node, StrikeTaskType_Names::WeaponList_Name);
  }
  if (accessor.hasNoStrike()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getNoStrike(), node, StrikeTaskType_Names::NoStrike_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StrikeTaskType& StrikeTaskType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StrikeTaskType>().release());
}

uci::type::StrikeTaskType& StrikeTaskType::create(const uci::type::StrikeTaskType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StrikeTaskType> newAccessor{boost::make_unique<asb_uci::type::StrikeTaskType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StrikeTaskType::destroy(uci::type::StrikeTaskType& accessor) {
  delete dynamic_cast<asb_uci::type::StrikeTaskType*>(&accessor);
}

} // namespace type

} // namespace uci

