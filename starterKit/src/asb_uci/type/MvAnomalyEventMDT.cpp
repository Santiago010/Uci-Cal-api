/** @file MvAnomalyEventMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MvAnomalyEventMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/MvAnomalyEventID_Type.h"
#include "../../../include/asb_uci/type/MvObservationType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MvAnomalyEventID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MvAnomalyEventMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MvObservationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisualMagnitudeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MvAnomalyEventMDT::MvAnomalyEventMDT()
  : mvAnomalyEventID_Accessor{boost::make_unique<MvAnomalyEventID_Type>()},
    observation_Accessor{boost::make_unique<MvObservationType>()} {
}

MvAnomalyEventMDT::~MvAnomalyEventMDT() = default;

void MvAnomalyEventMDT::copy(const uci::type::MvAnomalyEventMDT& accessor) {
  copyImpl(accessor, false);
}

void MvAnomalyEventMDT::copyImpl(const uci::type::MvAnomalyEventMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const MvAnomalyEventMDT&>(accessor);
    setMvAnomalyEventID(*(accessorImpl.mvAnomalyEventID_Accessor));
    setObservation(*(accessorImpl.observation_Accessor));
    if (accessorImpl.hasMvExpected()) {
      setMvExpected(accessorImpl.getMvExpected());
    } else {
      clearMvExpected();
    }
    if (accessorImpl.hasMvVariance()) {
      setMvVariance(accessorImpl.getMvVariance());
    } else {
      clearMvVariance();
    }
  }
}

void MvAnomalyEventMDT::reset() noexcept {
  DataRecordBaseType::reset();
  mvAnomalyEventID_Accessor->reset();
  observation_Accessor->reset();
  clearMvExpected();
  clearMvVariance();
}

const uci::type::MvAnomalyEventID_Type& MvAnomalyEventMDT::getMvAnomalyEventID() const {
  return *mvAnomalyEventID_Accessor;
}

uci::type::MvAnomalyEventID_Type& MvAnomalyEventMDT::getMvAnomalyEventID() {
  return *mvAnomalyEventID_Accessor;
}

uci::type::MvAnomalyEventMDT& MvAnomalyEventMDT::setMvAnomalyEventID(const uci::type::MvAnomalyEventID_Type& accessor) {
  if (&accessor != mvAnomalyEventID_Accessor.get()) {
    mvAnomalyEventID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MvObservationType& MvAnomalyEventMDT::getObservation() const {
  return *observation_Accessor;
}

uci::type::MvObservationType& MvAnomalyEventMDT::getObservation() {
  return *observation_Accessor;
}

uci::type::MvAnomalyEventMDT& MvAnomalyEventMDT::setObservation(const uci::type::MvObservationType& accessor) {
  if (&accessor != observation_Accessor.get()) {
    observation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VisualMagnitudeTypeValue MvAnomalyEventMDT::getMvExpected() const {
  if (mvExpected_Accessor) {
    return *mvExpected_Accessor;
  }
  throw uci::base::UCIException("Error in getMvExpected(): An attempt was made to get an optional field that was not enabled, call hasMvExpected() to determine if it is safe to call getMvExpected()");
}

uci::type::MvAnomalyEventMDT& MvAnomalyEventMDT::setMvExpected(uci::type::VisualMagnitudeTypeValue value) {
  mvExpected_Accessor = value;
  return *this;
}

bool MvAnomalyEventMDT::hasMvExpected() const noexcept {
  return mvExpected_Accessor.has_value();
}

uci::type::MvAnomalyEventMDT& MvAnomalyEventMDT::clearMvExpected() noexcept {
  mvExpected_Accessor.reset();
  return *this;
}

uci::type::VisualMagnitudeTypeValue MvAnomalyEventMDT::getMvVariance() const {
  if (mvVariance_Accessor) {
    return *mvVariance_Accessor;
  }
  throw uci::base::UCIException("Error in getMvVariance(): An attempt was made to get an optional field that was not enabled, call hasMvVariance() to determine if it is safe to call getMvVariance()");
}

uci::type::MvAnomalyEventMDT& MvAnomalyEventMDT::setMvVariance(uci::type::VisualMagnitudeTypeValue value) {
  mvVariance_Accessor = value;
  return *this;
}

bool MvAnomalyEventMDT::hasMvVariance() const noexcept {
  return mvVariance_Accessor.has_value();
}

uci::type::MvAnomalyEventMDT& MvAnomalyEventMDT::clearMvVariance() noexcept {
  mvVariance_Accessor.reset();
  return *this;
}

std::unique_ptr<MvAnomalyEventMDT> MvAnomalyEventMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mvAnomalyEventMDT : type};
  return (requestedType == uci::type::accessorType::mvAnomalyEventMDT) ? boost::make_unique<MvAnomalyEventMDT>() : nullptr;
}

/**  */
namespace MvAnomalyEventMDT_Names {

constexpr const char* Extern_Type_Name{"MvAnomalyEventMDT"};
constexpr const char* MvAnomalyEventID_Name{"MvAnomalyEventID"};
constexpr const char* Observation_Name{"Observation"};
constexpr const char* MvExpected_Name{"MvExpected"};
constexpr const char* MvVariance_Name{"MvVariance"};

} // namespace MvAnomalyEventMDT_Names

void MvAnomalyEventMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::MvAnomalyEventMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MvAnomalyEventMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MvAnomalyEventMDT_Names::MvAnomalyEventID_Name) {
      MvAnomalyEventID_Type::deserialize(valueType.second, accessor.getMvAnomalyEventID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MvAnomalyEventMDT_Names::Observation_Name) {
      MvObservationType::deserialize(valueType.second, accessor.getObservation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MvAnomalyEventMDT_Names::MvExpected_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMvExpected(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MvAnomalyEventMDT_Names::MvVariance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMvVariance(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string MvAnomalyEventMDT::serialize(const uci::type::MvAnomalyEventMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MvAnomalyEventMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MvAnomalyEventMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  MvAnomalyEventID_Type::serialize(accessor.getMvAnomalyEventID(), node, MvAnomalyEventMDT_Names::MvAnomalyEventID_Name);
  MvObservationType::serialize(accessor.getObservation(), node, MvAnomalyEventMDT_Names::Observation_Name);
  if (accessor.hasMvExpected()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMvExpected(), node, MvAnomalyEventMDT_Names::MvExpected_Name);
  }
  if (accessor.hasMvVariance()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMvVariance(), node, MvAnomalyEventMDT_Names::MvVariance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MvAnomalyEventMDT& MvAnomalyEventMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MvAnomalyEventMDT>().release());
}

uci::type::MvAnomalyEventMDT& MvAnomalyEventMDT::create(const uci::type::MvAnomalyEventMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MvAnomalyEventMDT> newAccessor{boost::make_unique<asb_uci::type::MvAnomalyEventMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MvAnomalyEventMDT::destroy(uci::type::MvAnomalyEventMDT& accessor) {
  delete dynamic_cast<asb_uci::type::MvAnomalyEventMDT*>(&accessor);
}

} // namespace type

} // namespace uci

