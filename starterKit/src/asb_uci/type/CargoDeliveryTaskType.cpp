/** @file CargoDeliveryTaskType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CargoDeliveryTaskType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CargoTransitionType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CargoDeliveryTaskType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CargoTransitionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CargoDeliveryTaskType::CargoDeliveryTaskType() = default;

CargoDeliveryTaskType::~CargoDeliveryTaskType() = default;

void CargoDeliveryTaskType::copy(const uci::type::CargoDeliveryTaskType& accessor) {
  copyImpl(accessor, false);
}

void CargoDeliveryTaskType::copyImpl(const uci::type::CargoDeliveryTaskType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CargoDeliveryTaskType&>(accessor);
    if (accessorImpl.pickup_Accessor) {
      setPickup(*(accessorImpl.pickup_Accessor));
    } else {
      pickup_Accessor.reset();
    }
    if (accessorImpl.dropoff_Accessor) {
      setDropoff(*(accessorImpl.dropoff_Accessor));
    } else {
      dropoff_Accessor.reset();
    }
  }
}

void CargoDeliveryTaskType::reset() noexcept {
  pickup_Accessor.reset();
  dropoff_Accessor.reset();
}

uci::type::CargoDeliveryTaskType::CargoDeliveryTaskTypeChoice CargoDeliveryTaskType::getCargoDeliveryTaskTypeChoiceOrdinal() const noexcept {
  if (pickup_Accessor) {
    return CARGODELIVERYTASKTYPE_CHOICE_PICKUP;
  }
  if (dropoff_Accessor) {
    return CARGODELIVERYTASKTYPE_CHOICE_DROPOFF;
  }
  return CARGODELIVERYTASKTYPE_CHOICE_NONE;
}

uci::type::CargoDeliveryTaskType& CargoDeliveryTaskType::setCargoDeliveryTaskTypeChoiceOrdinal(uci::type::CargoDeliveryTaskType::CargoDeliveryTaskTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case CARGODELIVERYTASKTYPE_CHOICE_PICKUP:
      choosePickup("setCargoDeliveryTaskTypeChoiceOrdinal", type);
      break;
    case CARGODELIVERYTASKTYPE_CHOICE_DROPOFF:
      chooseDropoff();
      break;
    default:
      throw uci::base::UCIException("Error in setCargoDeliveryTaskTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::CargoTransitionType& CargoDeliveryTaskType::getPickup_() const {
  if (pickup_Accessor) {
    return *pickup_Accessor;
  }
  throw uci::base::UCIException("Error in getPickup(): Unable to get Pickup, field not selected");
}

const uci::type::CargoTransitionType& CargoDeliveryTaskType::getPickup() const {
  return getPickup_();
}

uci::type::CargoTransitionType& CargoDeliveryTaskType::getPickup() {
  return getPickup_();
}

uci::type::CargoDeliveryTaskType& CargoDeliveryTaskType::setPickup(const uci::type::CargoTransitionType& accessor) {
  choosePickup();
  if (&accessor != pickup_Accessor.get()) {
    pickup_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CargoDeliveryTaskType::isPickup() const noexcept {
  return static_cast<bool>(pickup_Accessor);
}

uci::type::CargoTransitionType& CargoDeliveryTaskType::choosePickup(const std::string& method, uci::base::accessorType::AccessorType type) {
  dropoff_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cargoTransitionType : type};
  if ((!pickup_Accessor) || (pickup_Accessor->getAccessorType() != requestedType)) {
    pickup_Accessor = CargoTransitionType::create(type);
    if (!pickup_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pickup_Accessor;
}

uci::type::CargoTransitionType& CargoDeliveryTaskType::choosePickup(uci::base::accessorType::AccessorType type) {
  return choosePickup("choosePickup", type);
}

uci::type::CargoDeliveryTaskType::Dropoff& CargoDeliveryTaskType::getDropoff_() const {
  if (dropoff_Accessor) {
    return *dropoff_Accessor;
  }
  throw uci::base::UCIException("Error in getDropoff(): Unable to get Dropoff, field not selected");
}

const uci::type::CargoDeliveryTaskType::Dropoff& CargoDeliveryTaskType::getDropoff() const {
  return getDropoff_();
}

uci::type::CargoDeliveryTaskType::Dropoff& CargoDeliveryTaskType::getDropoff() {
  return getDropoff_();
}

uci::type::CargoDeliveryTaskType& CargoDeliveryTaskType::setDropoff(const uci::type::CargoDeliveryTaskType::Dropoff& accessor) {
  chooseDropoff();
  if (&accessor != dropoff_Accessor.get()) {
    dropoff_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CargoDeliveryTaskType::isDropoff() const noexcept {
  return static_cast<bool>(dropoff_Accessor);
}

uci::type::CargoDeliveryTaskType::Dropoff& CargoDeliveryTaskType::chooseDropoff() {
  pickup_Accessor.reset();
  if (!dropoff_Accessor) {
    dropoff_Accessor = boost::make_unique<Dropoff>(1, SIZE_MAX);
  }
  return *dropoff_Accessor;
}

std::unique_ptr<CargoDeliveryTaskType> CargoDeliveryTaskType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cargoDeliveryTaskType : type};
  return (requestedType == uci::type::accessorType::cargoDeliveryTaskType) ? boost::make_unique<CargoDeliveryTaskType>() : nullptr;
}

/**  */
namespace CargoDeliveryTaskType_Names {

constexpr const char* Extern_Type_Name{"CargoDeliveryTaskType"};
constexpr const char* Pickup_Name{"Pickup"};
constexpr const char* Dropoff_Name{"Dropoff"};

} // namespace CargoDeliveryTaskType_Names

void CargoDeliveryTaskType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CargoDeliveryTaskType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CargoDeliveryTaskType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CargoDeliveryTaskType_Names::Pickup_Name) {
      CargoTransitionType::deserialize(valueType.second, accessor.choosePickup(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CargoDeliveryTaskType_Names::Dropoff_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CargoDeliveryTaskType::Dropoff& boundedList = accessor.chooseDropoff();
        const uci::type::CargoDeliveryTaskType::Dropoff::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CargoTransitionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CargoDeliveryTaskType::serialize(const uci::type::CargoDeliveryTaskType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CargoDeliveryTaskType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CargoDeliveryTaskType_Names::Extern_Type_Name);
  }
  if (accessor.isPickup()) {
    CargoTransitionType::serialize(accessor.getPickup(), node, CargoDeliveryTaskType_Names::Pickup_Name);
  } else if (accessor.isDropoff()) {
    {
      const uci::type::CargoDeliveryTaskType::Dropoff& boundedList = accessor.getDropoff();
      for (uci::type::CargoDeliveryTaskType::Dropoff::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::CargoTransitionType::serialize(boundedList.at(i), node, CargoDeliveryTaskType_Names::Dropoff_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CargoDeliveryTaskType& CargoDeliveryTaskType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CargoDeliveryTaskType>().release());
}

uci::type::CargoDeliveryTaskType& CargoDeliveryTaskType::create(const uci::type::CargoDeliveryTaskType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CargoDeliveryTaskType> newAccessor{boost::make_unique<asb_uci::type::CargoDeliveryTaskType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CargoDeliveryTaskType::destroy(uci::type::CargoDeliveryTaskType& accessor) {
  delete dynamic_cast<asb_uci::type::CargoDeliveryTaskType*>(&accessor);
}

} // namespace type

} // namespace uci

