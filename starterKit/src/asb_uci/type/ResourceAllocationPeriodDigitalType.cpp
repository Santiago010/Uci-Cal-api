/** @file ResourceAllocationPeriodDigitalType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ResourceAllocationPeriodDigitalType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceAllocationPeriodDigitalType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResourceAllocationPeriodDigitalType::ResourceAllocationPeriodDigitalType() = default;

ResourceAllocationPeriodDigitalType::~ResourceAllocationPeriodDigitalType() = default;

void ResourceAllocationPeriodDigitalType::copy(const uci::type::ResourceAllocationPeriodDigitalType& accessor) {
  copyImpl(accessor, false);
}

void ResourceAllocationPeriodDigitalType::copyImpl(const uci::type::ResourceAllocationPeriodDigitalType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResourceAllocationPeriodDigitalType&>(accessor);
    setAccessPeriodIndex(accessorImpl.accessPeriodIndex_Accessor);
    setPercentAccessLimit(accessorImpl.percentAccessLimit_Accessor);
    if (accessorImpl.hasPeriodPercentAccessExpected()) {
      setPeriodPercentAccessExpected(accessorImpl.getPeriodPercentAccessExpected());
    } else {
      clearPeriodPercentAccessExpected();
    }
    if (accessorImpl.hasPeriodMaxAccessDuration()) {
      setPeriodMaxAccessDuration(accessorImpl.getPeriodMaxAccessDuration());
    } else {
      clearPeriodMaxAccessDuration();
    }
  }
}

void ResourceAllocationPeriodDigitalType::reset() noexcept {
  accessPeriodIndex_Accessor = 0;
  percentAccessLimit_Accessor = 0.0;
  clearPeriodPercentAccessExpected();
  clearPeriodMaxAccessDuration();
}

xs::UnsignedInt ResourceAllocationPeriodDigitalType::getAccessPeriodIndex() const {
  return accessPeriodIndex_Accessor;
}

uci::type::ResourceAllocationPeriodDigitalType& ResourceAllocationPeriodDigitalType::setAccessPeriodIndex(xs::UnsignedInt value) {
  accessPeriodIndex_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue ResourceAllocationPeriodDigitalType::getPercentAccessLimit() const {
  return percentAccessLimit_Accessor;
}

uci::type::ResourceAllocationPeriodDigitalType& ResourceAllocationPeriodDigitalType::setPercentAccessLimit(uci::type::PercentTypeValue value) {
  percentAccessLimit_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue ResourceAllocationPeriodDigitalType::getPeriodPercentAccessExpected() const {
  if (periodPercentAccessExpected_Accessor) {
    return *periodPercentAccessExpected_Accessor;
  }
  throw uci::base::UCIException("Error in getPeriodPercentAccessExpected(): An attempt was made to get an optional field that was not enabled, call hasPeriodPercentAccessExpected() to determine if it is safe to call getPeriodPercentAccessExpected()");
}

uci::type::ResourceAllocationPeriodDigitalType& ResourceAllocationPeriodDigitalType::setPeriodPercentAccessExpected(uci::type::PercentTypeValue value) {
  periodPercentAccessExpected_Accessor = value;
  return *this;
}

bool ResourceAllocationPeriodDigitalType::hasPeriodPercentAccessExpected() const noexcept {
  return periodPercentAccessExpected_Accessor.has_value();
}

uci::type::ResourceAllocationPeriodDigitalType& ResourceAllocationPeriodDigitalType::clearPeriodPercentAccessExpected() noexcept {
  periodPercentAccessExpected_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue ResourceAllocationPeriodDigitalType::getPeriodMaxAccessDuration() const {
  if (periodMaxAccessDuration_Accessor) {
    return *periodMaxAccessDuration_Accessor;
  }
  throw uci::base::UCIException("Error in getPeriodMaxAccessDuration(): An attempt was made to get an optional field that was not enabled, call hasPeriodMaxAccessDuration() to determine if it is safe to call getPeriodMaxAccessDuration()");
}

uci::type::ResourceAllocationPeriodDigitalType& ResourceAllocationPeriodDigitalType::setPeriodMaxAccessDuration(uci::type::DurationTypeValue value) {
  periodMaxAccessDuration_Accessor = value;
  return *this;
}

bool ResourceAllocationPeriodDigitalType::hasPeriodMaxAccessDuration() const noexcept {
  return periodMaxAccessDuration_Accessor.has_value();
}

uci::type::ResourceAllocationPeriodDigitalType& ResourceAllocationPeriodDigitalType::clearPeriodMaxAccessDuration() noexcept {
  periodMaxAccessDuration_Accessor.reset();
  return *this;
}

std::unique_ptr<ResourceAllocationPeriodDigitalType> ResourceAllocationPeriodDigitalType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceAllocationPeriodDigitalType : type};
  return (requestedType == uci::type::accessorType::resourceAllocationPeriodDigitalType) ? boost::make_unique<ResourceAllocationPeriodDigitalType>() : nullptr;
}

/**  */
namespace ResourceAllocationPeriodDigitalType_Names {

constexpr const char* Extern_Type_Name{"ResourceAllocationPeriodDigitalType"};
constexpr const char* AccessPeriodIndex_Name{"AccessPeriodIndex"};
constexpr const char* PercentAccessLimit_Name{"PercentAccessLimit"};
constexpr const char* PeriodPercentAccessExpected_Name{"PeriodPercentAccessExpected"};
constexpr const char* PeriodMaxAccessDuration_Name{"PeriodMaxAccessDuration"};

} // namespace ResourceAllocationPeriodDigitalType_Names

void ResourceAllocationPeriodDigitalType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResourceAllocationPeriodDigitalType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResourceAllocationPeriodDigitalType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResourceAllocationPeriodDigitalType_Names::AccessPeriodIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAccessPeriodIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceAllocationPeriodDigitalType_Names::PercentAccessLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentAccessLimit(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceAllocationPeriodDigitalType_Names::PeriodPercentAccessExpected_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeriodPercentAccessExpected(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceAllocationPeriodDigitalType_Names::PeriodMaxAccessDuration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeriodMaxAccessDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string ResourceAllocationPeriodDigitalType::serialize(const uci::type::ResourceAllocationPeriodDigitalType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResourceAllocationPeriodDigitalType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResourceAllocationPeriodDigitalType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAccessPeriodIndex(), node, ResourceAllocationPeriodDigitalType_Names::AccessPeriodIndex_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentAccessLimit(), node, ResourceAllocationPeriodDigitalType_Names::PercentAccessLimit_Name);
  if (accessor.hasPeriodPercentAccessExpected()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPeriodPercentAccessExpected(), node, ResourceAllocationPeriodDigitalType_Names::PeriodPercentAccessExpected_Name);
  }
  if (accessor.hasPeriodMaxAccessDuration()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPeriodMaxAccessDuration(), node, ResourceAllocationPeriodDigitalType_Names::PeriodMaxAccessDuration_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResourceAllocationPeriodDigitalType& ResourceAllocationPeriodDigitalType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResourceAllocationPeriodDigitalType>().release());
}

uci::type::ResourceAllocationPeriodDigitalType& ResourceAllocationPeriodDigitalType::create(const uci::type::ResourceAllocationPeriodDigitalType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResourceAllocationPeriodDigitalType> newAccessor{boost::make_unique<asb_uci::type::ResourceAllocationPeriodDigitalType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResourceAllocationPeriodDigitalType::destroy(uci::type::ResourceAllocationPeriodDigitalType& accessor) {
  delete dynamic_cast<asb_uci::type::ResourceAllocationPeriodDigitalType*>(&accessor);
}

} // namespace type

} // namespace uci

