/** @file FixedPositionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/FixedPositionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/Point2D_ReportedType.h"
#include "../../../include/asb_uci/type/UncertaintyType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FixedPositionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point2D_ReportedType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/UncertaintyType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FixedPositionType::FixedPositionType()
  : fixedPoint_Accessor{boost::make_unique<Point2D_ReportedType>()} {
}

FixedPositionType::~FixedPositionType() = default;

void FixedPositionType::copy(const uci::type::FixedPositionType& accessor) {
  copyImpl(accessor, false);
}

void FixedPositionType::copyImpl(const uci::type::FixedPositionType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::fixedPositionType)) {
      const auto& accessorImpl = dynamic_cast<const FixedPositionType&>(accessor);
      setFixedPoint(*(accessorImpl.fixedPoint_Accessor));
      if (accessorImpl.uncertainty_Accessor) {
        setUncertainty(*(accessorImpl.uncertainty_Accessor));
      } else {
        uncertainty_Accessor.reset();
      }
      if (accessorImpl.hasDatumError()) {
        setDatumError(accessorImpl.getDatumError());
      } else {
        clearDatumError();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void FixedPositionType::reset() noexcept {
  fixedPoint_Accessor->reset();
  uncertainty_Accessor.reset();
  clearDatumError();
}

const uci::type::Point2D_ReportedType& FixedPositionType::getFixedPoint() const {
  return *fixedPoint_Accessor;
}

uci::type::Point2D_ReportedType& FixedPositionType::getFixedPoint() {
  return *fixedPoint_Accessor;
}

uci::type::FixedPositionType& FixedPositionType::setFixedPoint(const uci::type::Point2D_ReportedType& accessor) {
  if (&accessor != fixedPoint_Accessor.get()) {
    fixedPoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::UncertaintyType& FixedPositionType::getUncertainty_() const {
  if (uncertainty_Accessor) {
    return *uncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getUncertainty(): An attempt was made to get an optional field that was not enabled, call hasUncertainty() to determine if it is safe to call getUncertainty()");
}

const uci::type::UncertaintyType& FixedPositionType::getUncertainty() const {
  return getUncertainty_();
}

uci::type::UncertaintyType& FixedPositionType::getUncertainty() {
  return getUncertainty_();
}

uci::type::FixedPositionType& FixedPositionType::setUncertainty(const uci::type::UncertaintyType& accessor) {
  enableUncertainty();
  if (&accessor != uncertainty_Accessor.get()) {
    uncertainty_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FixedPositionType::hasUncertainty() const noexcept {
  return static_cast<bool>(uncertainty_Accessor);
}

uci::type::UncertaintyType& FixedPositionType::enableUncertainty(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::uncertaintyType : type};
  if ((!uncertainty_Accessor) || (uncertainty_Accessor->getAccessorType() != requestedType)) {
    uncertainty_Accessor = UncertaintyType::create(requestedType);
    if (!uncertainty_Accessor) {
      throw uci::base::UCIException("Error in enableUncertainty(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *uncertainty_Accessor;
}

uci::type::FixedPositionType& FixedPositionType::clearUncertainty() noexcept {
  uncertainty_Accessor.reset();
  return *this;
}

xs::Double FixedPositionType::getDatumError() const {
  if (datumError_Accessor) {
    return *datumError_Accessor;
  }
  throw uci::base::UCIException("Error in getDatumError(): An attempt was made to get an optional field that was not enabled, call hasDatumError() to determine if it is safe to call getDatumError()");
}

uci::type::FixedPositionType& FixedPositionType::setDatumError(xs::Double value) {
  datumError_Accessor = value;
  return *this;
}

bool FixedPositionType::hasDatumError() const noexcept {
  return datumError_Accessor.has_value();
}

uci::type::FixedPositionType& FixedPositionType::clearDatumError() noexcept {
  datumError_Accessor.reset();
  return *this;
}

std::unique_ptr<FixedPositionType> FixedPositionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fixedPositionType : type};
  return std::unique_ptr<FixedPositionType>(dynamic_cast<FixedPositionType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace FixedPositionType_Names {

constexpr const char* Extern_Type_Name{"FixedPositionType"};
constexpr const char* FixedPoint_Name{"FixedPoint"};
constexpr const char* Uncertainty_Name{"Uncertainty"};
constexpr const char* DatumError_Name{"DatumError"};

} // namespace FixedPositionType_Names

void FixedPositionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FixedPositionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FixedPositionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FixedPositionType_Names::FixedPoint_Name) {
      Point2D_ReportedType::deserialize(valueType.second, accessor.getFixedPoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FixedPositionType_Names::Uncertainty_Name) {
      UncertaintyType::deserialize(valueType.second, accessor.enableUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FixedPositionType_Names::DatumError_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDatumError(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string FixedPositionType::serialize(const uci::type::FixedPositionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FixedPositionType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::fixedPositionType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, FixedPositionType_Names::Extern_Type_Name);
    }
    Point2D_ReportedType::serialize(accessor.getFixedPoint(), node, FixedPositionType_Names::FixedPoint_Name);
    if (accessor.hasUncertainty()) {
      UncertaintyType::serialize(accessor.getUncertainty(), node, FixedPositionType_Names::Uncertainty_Name);
    }
    if (accessor.hasDatumError()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDatumError(), node, FixedPositionType_Names::DatumError_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FixedPositionType& FixedPositionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FixedPositionType>().release());
}

uci::type::FixedPositionType& FixedPositionType::create(const uci::type::FixedPositionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FixedPositionType> newAccessor{boost::make_unique<asb_uci::type::FixedPositionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FixedPositionType::destroy(uci::type::FixedPositionType& accessor) {
  delete dynamic_cast<asb_uci::type::FixedPositionType*>(&accessor);
}

} // namespace type

} // namespace uci

