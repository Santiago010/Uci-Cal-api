/** @file IdentityKindAssetType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/IdentityKindAssetType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AssetType.h"
#include "../../../include/asb_uci/type/IdentityType.h"
#include "../../../include/asb_uci/type/RequirementPlanningCandidateType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AssetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IdentityKindAssetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IdentityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementPlanningCandidateType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IdentityKindAssetType::IdentityKindAssetType() = default;

IdentityKindAssetType::~IdentityKindAssetType() = default;

void IdentityKindAssetType::copy(const uci::type::IdentityKindAssetType& accessor) {
  copyImpl(accessor, false);
}

void IdentityKindAssetType::copyImpl(const uci::type::IdentityKindAssetType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IdentityKindAssetType&>(accessor);
    if (accessorImpl.byInstance_Accessor) {
      setByInstance(*(accessorImpl.byInstance_Accessor));
    } else {
      byInstance_Accessor.reset();
    }
    if (accessorImpl.byIdentity_Accessor) {
      setByIdentity(*(accessorImpl.byIdentity_Accessor));
    } else {
      byIdentity_Accessor.reset();
    }
    if (accessorImpl.byPlan_Accessor) {
      setByPlan(*(accessorImpl.byPlan_Accessor));
    } else {
      byPlan_Accessor.reset();
    }
  }
}

void IdentityKindAssetType::reset() noexcept {
  byInstance_Accessor.reset();
  byIdentity_Accessor.reset();
  byPlan_Accessor.reset();
}

uci::type::IdentityKindAssetType::IdentityKindAssetTypeChoice IdentityKindAssetType::getIdentityKindAssetTypeChoiceOrdinal() const noexcept {
  if (byInstance_Accessor) {
    return IDENTITYKINDASSETTYPE_CHOICE_BYINSTANCE;
  }
  if (byIdentity_Accessor) {
    return IDENTITYKINDASSETTYPE_CHOICE_BYIDENTITY;
  }
  if (byPlan_Accessor) {
    return IDENTITYKINDASSETTYPE_CHOICE_BYPLAN;
  }
  return IDENTITYKINDASSETTYPE_CHOICE_NONE;
}

uci::type::IdentityKindAssetType& IdentityKindAssetType::setIdentityKindAssetTypeChoiceOrdinal(uci::type::IdentityKindAssetType::IdentityKindAssetTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case IDENTITYKINDASSETTYPE_CHOICE_BYINSTANCE:
      chooseByInstance("setIdentityKindAssetTypeChoiceOrdinal", type);
      break;
    case IDENTITYKINDASSETTYPE_CHOICE_BYIDENTITY:
      chooseByIdentity("setIdentityKindAssetTypeChoiceOrdinal", type);
      break;
    case IDENTITYKINDASSETTYPE_CHOICE_BYPLAN:
      chooseByPlan("setIdentityKindAssetTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setIdentityKindAssetTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AssetType& IdentityKindAssetType::getByInstance_() const {
  if (byInstance_Accessor) {
    return *byInstance_Accessor;
  }
  throw uci::base::UCIException("Error in getByInstance(): Unable to get ByInstance, field not selected");
}

const uci::type::AssetType& IdentityKindAssetType::getByInstance() const {
  return getByInstance_();
}

uci::type::AssetType& IdentityKindAssetType::getByInstance() {
  return getByInstance_();
}

uci::type::IdentityKindAssetType& IdentityKindAssetType::setByInstance(const uci::type::AssetType& accessor) {
  chooseByInstance(accessor.getAccessorType());
  if (&accessor != byInstance_Accessor.get()) {
    byInstance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IdentityKindAssetType::isByInstance() const noexcept {
  return static_cast<bool>(byInstance_Accessor);
}

uci::type::AssetType& IdentityKindAssetType::chooseByInstance(const std::string& method, uci::base::accessorType::AccessorType type) {
  byIdentity_Accessor.reset();
  byPlan_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::assetType : type};
  if ((!byInstance_Accessor) || (byInstance_Accessor->getAccessorType() != requestedType)) {
    byInstance_Accessor = AssetType::create(type);
    if (!byInstance_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byInstance_Accessor;
}

uci::type::AssetType& IdentityKindAssetType::chooseByInstance(uci::base::accessorType::AccessorType type) {
  return chooseByInstance("chooseByInstance", type);
}

uci::type::IdentityType& IdentityKindAssetType::getByIdentity_() const {
  if (byIdentity_Accessor) {
    return *byIdentity_Accessor;
  }
  throw uci::base::UCIException("Error in getByIdentity(): Unable to get ByIdentity, field not selected");
}

const uci::type::IdentityType& IdentityKindAssetType::getByIdentity() const {
  return getByIdentity_();
}

uci::type::IdentityType& IdentityKindAssetType::getByIdentity() {
  return getByIdentity_();
}

uci::type::IdentityKindAssetType& IdentityKindAssetType::setByIdentity(const uci::type::IdentityType& accessor) {
  chooseByIdentity("setByIdentity", accessor.getAccessorType());
  if (&accessor != byIdentity_Accessor.get()) {
    byIdentity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool IdentityKindAssetType::isByIdentity() const noexcept {
  return static_cast<bool>(byIdentity_Accessor);
}

uci::type::IdentityType& IdentityKindAssetType::chooseByIdentity(const std::string& method, uci::base::accessorType::AccessorType type) {
  byInstance_Accessor.reset();
  byPlan_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::identityType : type};
  if ((!byIdentity_Accessor) || (byIdentity_Accessor->getAccessorType() != requestedType)) {
    byIdentity_Accessor = IdentityType::create(type);
    if (!byIdentity_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byIdentity_Accessor;
}

uci::type::IdentityType& IdentityKindAssetType::chooseByIdentity(uci::base::accessorType::AccessorType type) {
  return chooseByIdentity("chooseByIdentity", type);
}

uci::type::RequirementPlanningCandidateType& IdentityKindAssetType::getByPlan_() const {
  if (byPlan_Accessor) {
    return *byPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getByPlan(): Unable to get ByPlan, field not selected");
}

const uci::type::RequirementPlanningCandidateType& IdentityKindAssetType::getByPlan() const {
  return getByPlan_();
}

uci::type::RequirementPlanningCandidateType& IdentityKindAssetType::getByPlan() {
  return getByPlan_();
}

uci::type::IdentityKindAssetType& IdentityKindAssetType::setByPlan(const uci::type::RequirementPlanningCandidateType& accessor) {
  chooseByPlan();
  if (&accessor != byPlan_Accessor.get()) {
    byPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IdentityKindAssetType::isByPlan() const noexcept {
  return static_cast<bool>(byPlan_Accessor);
}

uci::type::RequirementPlanningCandidateType& IdentityKindAssetType::chooseByPlan(const std::string& method, uci::base::accessorType::AccessorType type) {
  byInstance_Accessor.reset();
  byIdentity_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementPlanningCandidateType : type};
  if ((!byPlan_Accessor) || (byPlan_Accessor->getAccessorType() != requestedType)) {
    byPlan_Accessor = RequirementPlanningCandidateType::create(type);
    if (!byPlan_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byPlan_Accessor;
}

uci::type::RequirementPlanningCandidateType& IdentityKindAssetType::chooseByPlan(uci::base::accessorType::AccessorType type) {
  return chooseByPlan("chooseByPlan", type);
}

std::unique_ptr<IdentityKindAssetType> IdentityKindAssetType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::identityKindAssetType : type};
  return (requestedType == uci::type::accessorType::identityKindAssetType) ? boost::make_unique<IdentityKindAssetType>() : nullptr;
}

/**  */
namespace IdentityKindAssetType_Names {

constexpr const char* Extern_Type_Name{"IdentityKindAssetType"};
constexpr const char* ByInstance_Name{"ByInstance"};
constexpr const char* ByIdentity_Name{"ByIdentity"};
constexpr const char* ByPlan_Name{"ByPlan"};

} // namespace IdentityKindAssetType_Names

void IdentityKindAssetType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IdentityKindAssetType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IdentityKindAssetType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IdentityKindAssetType_Names::ByInstance_Name) {
      AssetType::deserialize(valueType.second, accessor.chooseByInstance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IdentityKindAssetType_Names::ByIdentity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseByIdentity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IdentityKindAssetType_Names::ByPlan_Name) {
      RequirementPlanningCandidateType::deserialize(valueType.second, accessor.chooseByPlan(), nodeName, nsPrefix);
    }
  }
}

std::string IdentityKindAssetType::serialize(const uci::type::IdentityKindAssetType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IdentityKindAssetType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IdentityKindAssetType_Names::Extern_Type_Name);
  }
  if (accessor.isByInstance()) {
    AssetType::serialize(accessor.getByInstance(), node, IdentityKindAssetType_Names::ByInstance_Name);
  } else if (accessor.isByIdentity()) {
    IdentityType::serialize(accessor.getByIdentity(), node, IdentityKindAssetType_Names::ByIdentity_Name);
  } else if (accessor.isByPlan()) {
    RequirementPlanningCandidateType::serialize(accessor.getByPlan(), node, IdentityKindAssetType_Names::ByPlan_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IdentityKindAssetType& IdentityKindAssetType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IdentityKindAssetType>().release());
}

uci::type::IdentityKindAssetType& IdentityKindAssetType::create(const uci::type::IdentityKindAssetType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IdentityKindAssetType> newAccessor{boost::make_unique<asb_uci::type::IdentityKindAssetType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IdentityKindAssetType::destroy(uci::type::IdentityKindAssetType& accessor) {
  delete dynamic_cast<asb_uci::type::IdentityKindAssetType*>(&accessor);
}

} // namespace type

} // namespace uci

