/** @file ConcurrentTaskReferenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ConcurrentTaskReferenceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OffsetTimeType.h"
#include "asb_uci/type/TaskID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ConcurrentTaskReferenceType.h"
#include "uci/type/OffsetTimeType.h"
#include "uci/type/TaskID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ConcurrentTaskReferenceType::ConcurrentTaskReferenceType()
  : concurrentTaskID_Accessor{boost::make_unique<TaskID_Type>()} {
}

ConcurrentTaskReferenceType::~ConcurrentTaskReferenceType() = default;

void ConcurrentTaskReferenceType::copy(const uci::type::ConcurrentTaskReferenceType& accessor) {
  copyImpl(accessor, false);
}

void ConcurrentTaskReferenceType::copyImpl(const uci::type::ConcurrentTaskReferenceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ConcurrentTaskReferenceType&>(accessor);
    setConcurrentTaskID(*(accessorImpl.concurrentTaskID_Accessor));
    if (accessorImpl.relativeStartTime_Accessor) {
      setRelativeStartTime(*(accessorImpl.relativeStartTime_Accessor));
    } else {
      relativeStartTime_Accessor.reset();
    }
    if (accessorImpl.relativeCompletionTime_Accessor) {
      setRelativeCompletionTime(*(accessorImpl.relativeCompletionTime_Accessor));
    } else {
      relativeCompletionTime_Accessor.reset();
    }
    setTaskRequired(accessorImpl.taskRequired_Accessor);
  }
}

void ConcurrentTaskReferenceType::reset() noexcept {
  concurrentTaskID_Accessor->reset();
  relativeStartTime_Accessor.reset();
  relativeCompletionTime_Accessor.reset();
  taskRequired_Accessor = false;
}

const uci::type::TaskID_Type& ConcurrentTaskReferenceType::getConcurrentTaskID() const {
  return *concurrentTaskID_Accessor;
}

uci::type::TaskID_Type& ConcurrentTaskReferenceType::getConcurrentTaskID() {
  return *concurrentTaskID_Accessor;
}

uci::type::ConcurrentTaskReferenceType& ConcurrentTaskReferenceType::setConcurrentTaskID(const uci::type::TaskID_Type& accessor) {
  if (&accessor != concurrentTaskID_Accessor.get()) {
    concurrentTaskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OffsetTimeType& ConcurrentTaskReferenceType::getRelativeStartTime_() const {
  if (relativeStartTime_Accessor) {
    return *relativeStartTime_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeStartTime(): An attempt was made to get an optional field that was not enabled, call hasRelativeStartTime() to determine if it is safe to call getRelativeStartTime()");
}

const uci::type::OffsetTimeType& ConcurrentTaskReferenceType::getRelativeStartTime() const {
  return getRelativeStartTime_();
}

uci::type::OffsetTimeType& ConcurrentTaskReferenceType::getRelativeStartTime() {
  return getRelativeStartTime_();
}

uci::type::ConcurrentTaskReferenceType& ConcurrentTaskReferenceType::setRelativeStartTime(const uci::type::OffsetTimeType& accessor) {
  enableRelativeStartTime();
  if (&accessor != relativeStartTime_Accessor.get()) {
    relativeStartTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ConcurrentTaskReferenceType::hasRelativeStartTime() const noexcept {
  return static_cast<bool>(relativeStartTime_Accessor);
}

uci::type::OffsetTimeType& ConcurrentTaskReferenceType::enableRelativeStartTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::offsetTimeType : type};
  if ((!relativeStartTime_Accessor) || (relativeStartTime_Accessor->getAccessorType() != requestedType)) {
    relativeStartTime_Accessor = OffsetTimeType::create(requestedType);
    if (!relativeStartTime_Accessor) {
      throw uci::base::UCIException("Error in enableRelativeStartTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativeStartTime_Accessor;
}

uci::type::ConcurrentTaskReferenceType& ConcurrentTaskReferenceType::clearRelativeStartTime() noexcept {
  relativeStartTime_Accessor.reset();
  return *this;
}

uci::type::OffsetTimeType& ConcurrentTaskReferenceType::getRelativeCompletionTime_() const {
  if (relativeCompletionTime_Accessor) {
    return *relativeCompletionTime_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeCompletionTime(): An attempt was made to get an optional field that was not enabled, call hasRelativeCompletionTime() to determine if it is safe to call getRelativeCompletionTime()");
}

const uci::type::OffsetTimeType& ConcurrentTaskReferenceType::getRelativeCompletionTime() const {
  return getRelativeCompletionTime_();
}

uci::type::OffsetTimeType& ConcurrentTaskReferenceType::getRelativeCompletionTime() {
  return getRelativeCompletionTime_();
}

uci::type::ConcurrentTaskReferenceType& ConcurrentTaskReferenceType::setRelativeCompletionTime(const uci::type::OffsetTimeType& accessor) {
  enableRelativeCompletionTime();
  if (&accessor != relativeCompletionTime_Accessor.get()) {
    relativeCompletionTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ConcurrentTaskReferenceType::hasRelativeCompletionTime() const noexcept {
  return static_cast<bool>(relativeCompletionTime_Accessor);
}

uci::type::OffsetTimeType& ConcurrentTaskReferenceType::enableRelativeCompletionTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::offsetTimeType : type};
  if ((!relativeCompletionTime_Accessor) || (relativeCompletionTime_Accessor->getAccessorType() != requestedType)) {
    relativeCompletionTime_Accessor = OffsetTimeType::create(requestedType);
    if (!relativeCompletionTime_Accessor) {
      throw uci::base::UCIException("Error in enableRelativeCompletionTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativeCompletionTime_Accessor;
}

uci::type::ConcurrentTaskReferenceType& ConcurrentTaskReferenceType::clearRelativeCompletionTime() noexcept {
  relativeCompletionTime_Accessor.reset();
  return *this;
}

xs::Boolean ConcurrentTaskReferenceType::getTaskRequired() const {
  return taskRequired_Accessor;
}

uci::type::ConcurrentTaskReferenceType& ConcurrentTaskReferenceType::setTaskRequired(xs::Boolean value) {
  taskRequired_Accessor = value;
  return *this;
}


std::unique_ptr<ConcurrentTaskReferenceType> ConcurrentTaskReferenceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::concurrentTaskReferenceType : type};
  return (requestedType == uci::type::accessorType::concurrentTaskReferenceType) ? boost::make_unique<ConcurrentTaskReferenceType>() : nullptr;
}

/**  */
namespace ConcurrentTaskReferenceType_Names {

constexpr const char* Extern_Type_Name{"ConcurrentTaskReferenceType"};
constexpr const char* ConcurrentTaskID_Name{"ConcurrentTaskID"};
constexpr const char* RelativeStartTime_Name{"RelativeStartTime"};
constexpr const char* RelativeCompletionTime_Name{"RelativeCompletionTime"};
constexpr const char* TaskRequired_Name{"TaskRequired"};

} // namespace ConcurrentTaskReferenceType_Names

void ConcurrentTaskReferenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ConcurrentTaskReferenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ConcurrentTaskReferenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ConcurrentTaskReferenceType_Names::ConcurrentTaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.getConcurrentTaskID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ConcurrentTaskReferenceType_Names::RelativeStartTime_Name) {
      OffsetTimeType::deserialize(valueType.second, accessor.enableRelativeStartTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ConcurrentTaskReferenceType_Names::RelativeCompletionTime_Name) {
      OffsetTimeType::deserialize(valueType.second, accessor.enableRelativeCompletionTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ConcurrentTaskReferenceType_Names::TaskRequired_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTaskRequired(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string ConcurrentTaskReferenceType::serialize(const uci::type::ConcurrentTaskReferenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ConcurrentTaskReferenceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ConcurrentTaskReferenceType_Names::Extern_Type_Name);
  }
  TaskID_Type::serialize(accessor.getConcurrentTaskID(), node, ConcurrentTaskReferenceType_Names::ConcurrentTaskID_Name);
  if (accessor.hasRelativeStartTime()) {
    OffsetTimeType::serialize(accessor.getRelativeStartTime(), node, ConcurrentTaskReferenceType_Names::RelativeStartTime_Name);
  }
  if (accessor.hasRelativeCompletionTime()) {
    OffsetTimeType::serialize(accessor.getRelativeCompletionTime(), node, ConcurrentTaskReferenceType_Names::RelativeCompletionTime_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getTaskRequired(), node, ConcurrentTaskReferenceType_Names::TaskRequired_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ConcurrentTaskReferenceType& ConcurrentTaskReferenceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ConcurrentTaskReferenceType>().release());
}

uci::type::ConcurrentTaskReferenceType& ConcurrentTaskReferenceType::create(const uci::type::ConcurrentTaskReferenceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ConcurrentTaskReferenceType> newAccessor{boost::make_unique<asb_uci::type::ConcurrentTaskReferenceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ConcurrentTaskReferenceType::destroy(uci::type::ConcurrentTaskReferenceType& accessor) {
  delete dynamic_cast<asb_uci::type::ConcurrentTaskReferenceType*>(&accessor);
}

} // namespace type

} // namespace uci

