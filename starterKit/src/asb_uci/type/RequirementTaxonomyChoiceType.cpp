/** @file RequirementTaxonomyChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementTaxonomyChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActionTypeEnum.h"
#include "asb_uci/type/CapabilityTypeEnum.h"
#include "asb_uci/type/EffectTypeEnum.h"
#include "asb_uci/type/ResponseTypeEnum.h"
#include "asb_uci/type/TaskTypeEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActionTypeEnum.h"
#include "uci/type/CapabilityTypeEnum.h"
#include "uci/type/EffectTypeEnum.h"
#include "uci/type/RequirementTaxonomyChoiceType.h"
#include "uci/type/ResponseTypeEnum.h"
#include "uci/type/TaskTypeEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementTaxonomyChoiceType::RequirementTaxonomyChoiceType() = default;

RequirementTaxonomyChoiceType::~RequirementTaxonomyChoiceType() = default;

void RequirementTaxonomyChoiceType::copy(const uci::type::RequirementTaxonomyChoiceType& accessor) {
  copyImpl(accessor, false);
}

void RequirementTaxonomyChoiceType::copyImpl(const uci::type::RequirementTaxonomyChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementTaxonomyChoiceType&>(accessor);
    if (accessorImpl.effect_Accessor) {
      setEffect(*(accessorImpl.effect_Accessor));
    } else {
      effect_Accessor.reset();
    }
    if (accessorImpl.action_Accessor) {
      setAction(*(accessorImpl.action_Accessor));
    } else {
      action_Accessor.reset();
    }
    if (accessorImpl.task_Accessor) {
      setTask(*(accessorImpl.task_Accessor));
    } else {
      task_Accessor.reset();
    }
    if (accessorImpl.capabilityCommand_Accessor) {
      setCapabilityCommand(*(accessorImpl.capabilityCommand_Accessor));
    } else {
      capabilityCommand_Accessor.reset();
    }
    if (accessorImpl.response_Accessor) {
      setResponse(*(accessorImpl.response_Accessor));
    } else {
      response_Accessor.reset();
    }
  }
}

void RequirementTaxonomyChoiceType::reset() noexcept {
  effect_Accessor.reset();
  action_Accessor.reset();
  task_Accessor.reset();
  capabilityCommand_Accessor.reset();
  response_Accessor.reset();
}

uci::type::RequirementTaxonomyChoiceType::RequirementTaxonomyChoiceTypeChoice RequirementTaxonomyChoiceType::getRequirementTaxonomyChoiceTypeChoiceOrdinal() const noexcept {
  if (effect_Accessor) {
    return REQUIREMENTTAXONOMYCHOICETYPE_CHOICE_EFFECT;
  }
  if (action_Accessor) {
    return REQUIREMENTTAXONOMYCHOICETYPE_CHOICE_ACTION;
  }
  if (task_Accessor) {
    return REQUIREMENTTAXONOMYCHOICETYPE_CHOICE_TASK;
  }
  if (capabilityCommand_Accessor) {
    return REQUIREMENTTAXONOMYCHOICETYPE_CHOICE_CAPABILITYCOMMAND;
  }
  if (response_Accessor) {
    return REQUIREMENTTAXONOMYCHOICETYPE_CHOICE_RESPONSE;
  }
  return REQUIREMENTTAXONOMYCHOICETYPE_CHOICE_NONE;
}

uci::type::RequirementTaxonomyChoiceType& RequirementTaxonomyChoiceType::setRequirementTaxonomyChoiceTypeChoiceOrdinal(uci::type::RequirementTaxonomyChoiceType::RequirementTaxonomyChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case REQUIREMENTTAXONOMYCHOICETYPE_CHOICE_EFFECT:
      chooseEffect("setRequirementTaxonomyChoiceTypeChoiceOrdinal", type);
      break;
    case REQUIREMENTTAXONOMYCHOICETYPE_CHOICE_ACTION:
      chooseAction("setRequirementTaxonomyChoiceTypeChoiceOrdinal", type);
      break;
    case REQUIREMENTTAXONOMYCHOICETYPE_CHOICE_TASK:
      chooseTask("setRequirementTaxonomyChoiceTypeChoiceOrdinal", type);
      break;
    case REQUIREMENTTAXONOMYCHOICETYPE_CHOICE_CAPABILITYCOMMAND:
      chooseCapabilityCommand("setRequirementTaxonomyChoiceTypeChoiceOrdinal", type);
      break;
    case REQUIREMENTTAXONOMYCHOICETYPE_CHOICE_RESPONSE:
      chooseResponse("setRequirementTaxonomyChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setRequirementTaxonomyChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EffectTypeEnum& RequirementTaxonomyChoiceType::getEffect_() const {
  if (effect_Accessor) {
    return *effect_Accessor;
  }
  throw uci::base::UCIException("Error in getEffect(): Unable to get Effect, field not selected");
}

const uci::type::EffectTypeEnum& RequirementTaxonomyChoiceType::getEffect() const {
  return getEffect_();
}

uci::type::EffectTypeEnum& RequirementTaxonomyChoiceType::getEffect() {
  return getEffect_();
}

uci::type::RequirementTaxonomyChoiceType& RequirementTaxonomyChoiceType::setEffect(const uci::type::EffectTypeEnum& accessor) {
  chooseEffect();
  if (&accessor != effect_Accessor.get()) {
    effect_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementTaxonomyChoiceType& RequirementTaxonomyChoiceType::setEffect(uci::type::EffectTypeEnum::EnumerationItem value) {
  chooseEffect().setValue(value);
  return *this;
}

bool RequirementTaxonomyChoiceType::isEffect() const noexcept {
  return static_cast<bool>(effect_Accessor);
}

uci::type::EffectTypeEnum& RequirementTaxonomyChoiceType::chooseEffect(const std::string& method, uci::base::accessorType::AccessorType type) {
  action_Accessor.reset();
  task_Accessor.reset();
  capabilityCommand_Accessor.reset();
  response_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectTypeEnum : type};
  if ((!effect_Accessor) || (effect_Accessor->getAccessorType() != requestedType)) {
    effect_Accessor = EffectTypeEnum::create(type);
    if (!effect_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *effect_Accessor;
}

uci::type::EffectTypeEnum& RequirementTaxonomyChoiceType::chooseEffect(uci::base::accessorType::AccessorType type) {
  return chooseEffect("chooseEffect", type);
}

uci::type::ActionTypeEnum& RequirementTaxonomyChoiceType::getAction_() const {
  if (action_Accessor) {
    return *action_Accessor;
  }
  throw uci::base::UCIException("Error in getAction(): Unable to get Action, field not selected");
}

const uci::type::ActionTypeEnum& RequirementTaxonomyChoiceType::getAction() const {
  return getAction_();
}

uci::type::ActionTypeEnum& RequirementTaxonomyChoiceType::getAction() {
  return getAction_();
}

uci::type::RequirementTaxonomyChoiceType& RequirementTaxonomyChoiceType::setAction(const uci::type::ActionTypeEnum& accessor) {
  chooseAction();
  if (&accessor != action_Accessor.get()) {
    action_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementTaxonomyChoiceType& RequirementTaxonomyChoiceType::setAction(uci::type::ActionTypeEnum::EnumerationItem value) {
  chooseAction().setValue(value);
  return *this;
}

bool RequirementTaxonomyChoiceType::isAction() const noexcept {
  return static_cast<bool>(action_Accessor);
}

uci::type::ActionTypeEnum& RequirementTaxonomyChoiceType::chooseAction(const std::string& method, uci::base::accessorType::AccessorType type) {
  effect_Accessor.reset();
  task_Accessor.reset();
  capabilityCommand_Accessor.reset();
  response_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionTypeEnum : type};
  if ((!action_Accessor) || (action_Accessor->getAccessorType() != requestedType)) {
    action_Accessor = ActionTypeEnum::create(type);
    if (!action_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *action_Accessor;
}

uci::type::ActionTypeEnum& RequirementTaxonomyChoiceType::chooseAction(uci::base::accessorType::AccessorType type) {
  return chooseAction("chooseAction", type);
}

uci::type::TaskTypeEnum& RequirementTaxonomyChoiceType::getTask_() const {
  if (task_Accessor) {
    return *task_Accessor;
  }
  throw uci::base::UCIException("Error in getTask(): Unable to get Task, field not selected");
}

const uci::type::TaskTypeEnum& RequirementTaxonomyChoiceType::getTask() const {
  return getTask_();
}

uci::type::TaskTypeEnum& RequirementTaxonomyChoiceType::getTask() {
  return getTask_();
}

uci::type::RequirementTaxonomyChoiceType& RequirementTaxonomyChoiceType::setTask(const uci::type::TaskTypeEnum& accessor) {
  chooseTask();
  if (&accessor != task_Accessor.get()) {
    task_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementTaxonomyChoiceType& RequirementTaxonomyChoiceType::setTask(uci::type::TaskTypeEnum::EnumerationItem value) {
  chooseTask().setValue(value);
  return *this;
}

bool RequirementTaxonomyChoiceType::isTask() const noexcept {
  return static_cast<bool>(task_Accessor);
}

uci::type::TaskTypeEnum& RequirementTaxonomyChoiceType::chooseTask(const std::string& method, uci::base::accessorType::AccessorType type) {
  effect_Accessor.reset();
  action_Accessor.reset();
  capabilityCommand_Accessor.reset();
  response_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskTypeEnum : type};
  if ((!task_Accessor) || (task_Accessor->getAccessorType() != requestedType)) {
    task_Accessor = TaskTypeEnum::create(type);
    if (!task_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *task_Accessor;
}

uci::type::TaskTypeEnum& RequirementTaxonomyChoiceType::chooseTask(uci::base::accessorType::AccessorType type) {
  return chooseTask("chooseTask", type);
}

uci::type::CapabilityTypeEnum& RequirementTaxonomyChoiceType::getCapabilityCommand_() const {
  if (capabilityCommand_Accessor) {
    return *capabilityCommand_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityCommand(): Unable to get CapabilityCommand, field not selected");
}

const uci::type::CapabilityTypeEnum& RequirementTaxonomyChoiceType::getCapabilityCommand() const {
  return getCapabilityCommand_();
}

uci::type::CapabilityTypeEnum& RequirementTaxonomyChoiceType::getCapabilityCommand() {
  return getCapabilityCommand_();
}

uci::type::RequirementTaxonomyChoiceType& RequirementTaxonomyChoiceType::setCapabilityCommand(const uci::type::CapabilityTypeEnum& accessor) {
  chooseCapabilityCommand();
  if (&accessor != capabilityCommand_Accessor.get()) {
    capabilityCommand_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementTaxonomyChoiceType& RequirementTaxonomyChoiceType::setCapabilityCommand(uci::type::CapabilityTypeEnum::EnumerationItem value) {
  chooseCapabilityCommand().setValue(value);
  return *this;
}

bool RequirementTaxonomyChoiceType::isCapabilityCommand() const noexcept {
  return static_cast<bool>(capabilityCommand_Accessor);
}

uci::type::CapabilityTypeEnum& RequirementTaxonomyChoiceType::chooseCapabilityCommand(const std::string& method, uci::base::accessorType::AccessorType type) {
  effect_Accessor.reset();
  action_Accessor.reset();
  task_Accessor.reset();
  response_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityTypeEnum : type};
  if ((!capabilityCommand_Accessor) || (capabilityCommand_Accessor->getAccessorType() != requestedType)) {
    capabilityCommand_Accessor = CapabilityTypeEnum::create(type);
    if (!capabilityCommand_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityCommand_Accessor;
}

uci::type::CapabilityTypeEnum& RequirementTaxonomyChoiceType::chooseCapabilityCommand(uci::base::accessorType::AccessorType type) {
  return chooseCapabilityCommand("chooseCapabilityCommand", type);
}

uci::type::ResponseTypeEnum& RequirementTaxonomyChoiceType::getResponse_() const {
  if (response_Accessor) {
    return *response_Accessor;
  }
  throw uci::base::UCIException("Error in getResponse(): Unable to get Response, field not selected");
}

const uci::type::ResponseTypeEnum& RequirementTaxonomyChoiceType::getResponse() const {
  return getResponse_();
}

uci::type::ResponseTypeEnum& RequirementTaxonomyChoiceType::getResponse() {
  return getResponse_();
}

uci::type::RequirementTaxonomyChoiceType& RequirementTaxonomyChoiceType::setResponse(const uci::type::ResponseTypeEnum& accessor) {
  chooseResponse();
  if (&accessor != response_Accessor.get()) {
    response_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementTaxonomyChoiceType& RequirementTaxonomyChoiceType::setResponse(uci::type::ResponseTypeEnum::EnumerationItem value) {
  chooseResponse().setValue(value);
  return *this;
}

bool RequirementTaxonomyChoiceType::isResponse() const noexcept {
  return static_cast<bool>(response_Accessor);
}

uci::type::ResponseTypeEnum& RequirementTaxonomyChoiceType::chooseResponse(const std::string& method, uci::base::accessorType::AccessorType type) {
  effect_Accessor.reset();
  action_Accessor.reset();
  task_Accessor.reset();
  capabilityCommand_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responseTypeEnum : type};
  if ((!response_Accessor) || (response_Accessor->getAccessorType() != requestedType)) {
    response_Accessor = ResponseTypeEnum::create(type);
    if (!response_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *response_Accessor;
}

uci::type::ResponseTypeEnum& RequirementTaxonomyChoiceType::chooseResponse(uci::base::accessorType::AccessorType type) {
  return chooseResponse("chooseResponse", type);
}

std::unique_ptr<RequirementTaxonomyChoiceType> RequirementTaxonomyChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementTaxonomyChoiceType : type};
  return (requestedType == uci::type::accessorType::requirementTaxonomyChoiceType) ? boost::make_unique<RequirementTaxonomyChoiceType>() : nullptr;
}

/**  */
namespace RequirementTaxonomyChoiceType_Names {

constexpr const char* Extern_Type_Name{"RequirementTaxonomyChoiceType"};
constexpr const char* Effect_Name{"Effect"};
constexpr const char* Action_Name{"Action"};
constexpr const char* Task_Name{"Task"};
constexpr const char* CapabilityCommand_Name{"CapabilityCommand"};
constexpr const char* Response_Name{"Response"};

} // namespace RequirementTaxonomyChoiceType_Names

void RequirementTaxonomyChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementTaxonomyChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementTaxonomyChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementTaxonomyChoiceType_Names::Effect_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseEffect().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementTaxonomyChoiceType_Names::Action_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseAction().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementTaxonomyChoiceType_Names::Task_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseTask().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementTaxonomyChoiceType_Names::CapabilityCommand_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseCapabilityCommand().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementTaxonomyChoiceType_Names::Response_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseResponse().setValueFromName(*value);
      }
    }
  }
}

std::string RequirementTaxonomyChoiceType::serialize(const uci::type::RequirementTaxonomyChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementTaxonomyChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementTaxonomyChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isEffect()) {
    EffectTypeEnum::serialize(accessor.getEffect(), node, RequirementTaxonomyChoiceType_Names::Effect_Name, false);
  } else if (accessor.isAction()) {
    ActionTypeEnum::serialize(accessor.getAction(), node, RequirementTaxonomyChoiceType_Names::Action_Name, false);
  } else if (accessor.isTask()) {
    TaskTypeEnum::serialize(accessor.getTask(), node, RequirementTaxonomyChoiceType_Names::Task_Name, false);
  } else if (accessor.isCapabilityCommand()) {
    CapabilityTypeEnum::serialize(accessor.getCapabilityCommand(), node, RequirementTaxonomyChoiceType_Names::CapabilityCommand_Name, false);
  } else if (accessor.isResponse()) {
    ResponseTypeEnum::serialize(accessor.getResponse(), node, RequirementTaxonomyChoiceType_Names::Response_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementTaxonomyChoiceType& RequirementTaxonomyChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementTaxonomyChoiceType>().release());
}

uci::type::RequirementTaxonomyChoiceType& RequirementTaxonomyChoiceType::create(const uci::type::RequirementTaxonomyChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementTaxonomyChoiceType> newAccessor{boost::make_unique<asb_uci::type::RequirementTaxonomyChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementTaxonomyChoiceType::destroy(uci::type::RequirementTaxonomyChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementTaxonomyChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

