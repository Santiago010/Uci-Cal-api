/** @file VideoOutputSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/VideoOutputSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/VideoEncoderOutputType.h"
#include "asb_uci/type/VideoEncoderSettingsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/VideoEncoderOutputType.h"
#include "uci/type/VideoEncoderSettingsType.h"
#include "uci/type/VideoOutputSettingsType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VideoOutputSettingsType::VideoOutputSettingsType()
  : sourceChannel_Accessor{boost::make_unique<SourceChannel>(0, SIZE_MAX)},
    output_Accessor{boost::make_unique<Output>(1, SIZE_MAX)},
    encoderSettings_Accessor{boost::make_unique<VideoEncoderSettingsType>()} {
}

VideoOutputSettingsType::~VideoOutputSettingsType() = default;

void VideoOutputSettingsType::copy(const uci::type::VideoOutputSettingsType& accessor) {
  copyImpl(accessor, false);
}

void VideoOutputSettingsType::copyImpl(const uci::type::VideoOutputSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VideoOutputSettingsType&>(accessor);
    setEnable(accessorImpl.enable_Accessor);
    setSourceChannel(*(accessorImpl.sourceChannel_Accessor));
    setOutput(*(accessorImpl.output_Accessor));
    setEncoderSettings(*(accessorImpl.encoderSettings_Accessor));
  }
}

void VideoOutputSettingsType::reset() noexcept {
  enable_Accessor = false;
  sourceChannel_Accessor->reset();
  output_Accessor->reset();
  encoderSettings_Accessor->reset();
}

xs::Boolean VideoOutputSettingsType::getEnable() const {
  return enable_Accessor;
}

uci::type::VideoOutputSettingsType& VideoOutputSettingsType::setEnable(xs::Boolean value) {
  enable_Accessor = value;
  return *this;
}


const uci::type::VideoOutputSettingsType::SourceChannel& VideoOutputSettingsType::getSourceChannel() const {
  return *sourceChannel_Accessor;
}

uci::type::VideoOutputSettingsType::SourceChannel& VideoOutputSettingsType::getSourceChannel() {
  return *sourceChannel_Accessor;
}

uci::type::VideoOutputSettingsType& VideoOutputSettingsType::setSourceChannel(const uci::type::VideoOutputSettingsType::SourceChannel& accessor) {
  if (&accessor != sourceChannel_Accessor.get()) {
    sourceChannel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::VideoOutputSettingsType::Output& VideoOutputSettingsType::getOutput() const {
  return *output_Accessor;
}

uci::type::VideoOutputSettingsType::Output& VideoOutputSettingsType::getOutput() {
  return *output_Accessor;
}

uci::type::VideoOutputSettingsType& VideoOutputSettingsType::setOutput(const uci::type::VideoOutputSettingsType::Output& accessor) {
  if (&accessor != output_Accessor.get()) {
    output_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::VideoEncoderSettingsType& VideoOutputSettingsType::getEncoderSettings() const {
  return *encoderSettings_Accessor;
}

uci::type::VideoEncoderSettingsType& VideoOutputSettingsType::getEncoderSettings() {
  return *encoderSettings_Accessor;
}

uci::type::VideoOutputSettingsType& VideoOutputSettingsType::setEncoderSettings(const uci::type::VideoEncoderSettingsType& accessor) {
  if (&accessor != encoderSettings_Accessor.get()) {
    encoderSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<VideoOutputSettingsType> VideoOutputSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::videoOutputSettingsType : type};
  return (requestedType == uci::type::accessorType::videoOutputSettingsType) ? boost::make_unique<VideoOutputSettingsType>() : nullptr;
}

/**  */
namespace VideoOutputSettingsType_Names {

constexpr const char* Extern_Type_Name{"VideoOutputSettingsType"};
constexpr const char* Enable_Name{"Enable"};
constexpr const char* SourceChannel_Name{"SourceChannel"};
constexpr const char* Output_Name{"Output"};
constexpr const char* EncoderSettings_Name{"EncoderSettings"};

} // namespace VideoOutputSettingsType_Names

void VideoOutputSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VideoOutputSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VideoOutputSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VideoOutputSettingsType_Names::Enable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEnable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + VideoOutputSettingsType_Names::SourceChannel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::VideoOutputSettingsType::SourceChannel& boundedList = accessor.getSourceChannel();
        const uci::type::VideoOutputSettingsType::SourceChannel::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedShortValue(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + VideoOutputSettingsType_Names::Output_Name) {
      uci::type::VideoOutputSettingsType::Output& boundedList = accessor.getOutput();
      const uci::type::VideoOutputSettingsType::Output::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::VideoEncoderOutputType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VideoOutputSettingsType_Names::EncoderSettings_Name) {
      VideoEncoderSettingsType::deserialize(valueType.second, accessor.getEncoderSettings(), nodeName, nsPrefix);
    }
  }
}

std::string VideoOutputSettingsType::serialize(const uci::type::VideoOutputSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VideoOutputSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VideoOutputSettingsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getEnable(), node, VideoOutputSettingsType_Names::Enable_Name);
  {
    const uci::type::VideoOutputSettingsType::SourceChannel& boundedList = accessor.getSourceChannel();
    for (uci::type::VideoOutputSettingsType::SourceChannel::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeUnsignedShort(boundedList.at(i), node, VideoOutputSettingsType_Names::SourceChannel_Name);
    }
  }
  {
    const uci::type::VideoOutputSettingsType::Output& boundedList = accessor.getOutput();
    for (uci::type::VideoOutputSettingsType::Output::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::VideoEncoderOutputType::serialize(boundedList.at(i), node, VideoOutputSettingsType_Names::Output_Name);
    }
  }
  VideoEncoderSettingsType::serialize(accessor.getEncoderSettings(), node, VideoOutputSettingsType_Names::EncoderSettings_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VideoOutputSettingsType& VideoOutputSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VideoOutputSettingsType>().release());
}

uci::type::VideoOutputSettingsType& VideoOutputSettingsType::create(const uci::type::VideoOutputSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VideoOutputSettingsType> newAccessor{boost::make_unique<asb_uci::type::VideoOutputSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VideoOutputSettingsType::destroy(uci::type::VideoOutputSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::VideoOutputSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

