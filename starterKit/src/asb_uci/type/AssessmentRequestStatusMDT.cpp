/** @file AssessmentRequestStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AssessmentRequestStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AssessmentType.h"
#include "../../../include/asb_uci/type/CompletionStatusType.h"
#include "../../../include/asb_uci/type/IncompleteProcessingType.h"
#include "../../../include/asb_uci/type/RequestStatusBaseType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AssessmentRequestStatusMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AssessmentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CompletionStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IncompleteProcessingType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AssessmentRequestStatusMDT::AssessmentRequestStatusMDT()
  : incompleteAssessment_Accessor{boost::make_unique<IncompleteAssessment>(0, SIZE_MAX)} {
}

AssessmentRequestStatusMDT::~AssessmentRequestStatusMDT() = default;

void AssessmentRequestStatusMDT::copy(const uci::type::AssessmentRequestStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void AssessmentRequestStatusMDT::copyImpl(const uci::type::AssessmentRequestStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestStatusBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const AssessmentRequestStatusMDT&>(accessor);
    if (accessorImpl.completionStatus_Accessor) {
      setCompletionStatus(*(accessorImpl.completionStatus_Accessor));
    } else {
      completionStatus_Accessor.reset();
    }
    if (accessorImpl.assessment_Accessor) {
      setAssessment(*(accessorImpl.assessment_Accessor));
    } else {
      assessment_Accessor.reset();
    }
    setIncompleteAssessment(*(accessorImpl.incompleteAssessment_Accessor));
  }
}

void AssessmentRequestStatusMDT::reset() noexcept {
  RequestStatusBaseType::reset();
  completionStatus_Accessor.reset();
  assessment_Accessor.reset();
  incompleteAssessment_Accessor->reset();
}

uci::type::CompletionStatusType& AssessmentRequestStatusMDT::getCompletionStatus_() const {
  if (completionStatus_Accessor) {
    return *completionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getCompletionStatus(): An attempt was made to get an optional field that was not enabled, call hasCompletionStatus() to determine if it is safe to call getCompletionStatus()");
}

const uci::type::CompletionStatusType& AssessmentRequestStatusMDT::getCompletionStatus() const {
  return getCompletionStatus_();
}

uci::type::CompletionStatusType& AssessmentRequestStatusMDT::getCompletionStatus() {
  return getCompletionStatus_();
}

uci::type::AssessmentRequestStatusMDT& AssessmentRequestStatusMDT::setCompletionStatus(const uci::type::CompletionStatusType& accessor) {
  enableCompletionStatus();
  if (&accessor != completionStatus_Accessor.get()) {
    completionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentRequestStatusMDT::hasCompletionStatus() const noexcept {
  return static_cast<bool>(completionStatus_Accessor);
}

uci::type::CompletionStatusType& AssessmentRequestStatusMDT::enableCompletionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::completionStatusType : type};
  if ((!completionStatus_Accessor) || (completionStatus_Accessor->getAccessorType() != requestedType)) {
    completionStatus_Accessor = CompletionStatusType::create(requestedType);
    if (!completionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableCompletionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *completionStatus_Accessor;
}

uci::type::AssessmentRequestStatusMDT& AssessmentRequestStatusMDT::clearCompletionStatus() noexcept {
  completionStatus_Accessor.reset();
  return *this;
}

uci::type::AssessmentType& AssessmentRequestStatusMDT::getAssessment_() const {
  if (assessment_Accessor) {
    return *assessment_Accessor;
  }
  throw uci::base::UCIException("Error in getAssessment(): An attempt was made to get an optional field that was not enabled, call hasAssessment() to determine if it is safe to call getAssessment()");
}

const uci::type::AssessmentType& AssessmentRequestStatusMDT::getAssessment() const {
  return getAssessment_();
}

uci::type::AssessmentType& AssessmentRequestStatusMDT::getAssessment() {
  return getAssessment_();
}

uci::type::AssessmentRequestStatusMDT& AssessmentRequestStatusMDT::setAssessment(const uci::type::AssessmentType& accessor) {
  enableAssessment();
  if (&accessor != assessment_Accessor.get()) {
    assessment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssessmentRequestStatusMDT::hasAssessment() const noexcept {
  return static_cast<bool>(assessment_Accessor);
}

uci::type::AssessmentType& AssessmentRequestStatusMDT::enableAssessment(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::assessmentType : type};
  if ((!assessment_Accessor) || (assessment_Accessor->getAccessorType() != requestedType)) {
    assessment_Accessor = AssessmentType::create(requestedType);
    if (!assessment_Accessor) {
      throw uci::base::UCIException("Error in enableAssessment(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *assessment_Accessor;
}

uci::type::AssessmentRequestStatusMDT& AssessmentRequestStatusMDT::clearAssessment() noexcept {
  assessment_Accessor.reset();
  return *this;
}

const uci::type::AssessmentRequestStatusMDT::IncompleteAssessment& AssessmentRequestStatusMDT::getIncompleteAssessment() const {
  return *incompleteAssessment_Accessor;
}

uci::type::AssessmentRequestStatusMDT::IncompleteAssessment& AssessmentRequestStatusMDT::getIncompleteAssessment() {
  return *incompleteAssessment_Accessor;
}

uci::type::AssessmentRequestStatusMDT& AssessmentRequestStatusMDT::setIncompleteAssessment(const uci::type::AssessmentRequestStatusMDT::IncompleteAssessment& accessor) {
  if (&accessor != incompleteAssessment_Accessor.get()) {
    incompleteAssessment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<AssessmentRequestStatusMDT> AssessmentRequestStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::assessmentRequestStatusMDT : type};
  return (requestedType == uci::type::accessorType::assessmentRequestStatusMDT) ? boost::make_unique<AssessmentRequestStatusMDT>() : nullptr;
}

/**  */
namespace AssessmentRequestStatusMDT_Names {

constexpr const char* Extern_Type_Name{"AssessmentRequestStatusMDT"};
constexpr const char* CompletionStatus_Name{"CompletionStatus"};
constexpr const char* Assessment_Name{"Assessment"};
constexpr const char* IncompleteAssessment_Name{"IncompleteAssessment"};

} // namespace AssessmentRequestStatusMDT_Names

void AssessmentRequestStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::AssessmentRequestStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AssessmentRequestStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AssessmentRequestStatusMDT_Names::CompletionStatus_Name) {
      CompletionStatusType::deserialize(valueType.second, accessor.enableCompletionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestStatusMDT_Names::Assessment_Name) {
      AssessmentType::deserialize(valueType.second, accessor.enableAssessment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestStatusMDT_Names::IncompleteAssessment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AssessmentRequestStatusMDT::IncompleteAssessment& boundedList = accessor.getIncompleteAssessment();
        const uci::type::AssessmentRequestStatusMDT::IncompleteAssessment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::IncompleteProcessingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  RequestStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string AssessmentRequestStatusMDT::serialize(const uci::type::AssessmentRequestStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AssessmentRequestStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AssessmentRequestStatusMDT_Names::Extern_Type_Name);
  }
  RequestStatusBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasCompletionStatus()) {
    CompletionStatusType::serialize(accessor.getCompletionStatus(), node, AssessmentRequestStatusMDT_Names::CompletionStatus_Name);
  }
  if (accessor.hasAssessment()) {
    AssessmentType::serialize(accessor.getAssessment(), node, AssessmentRequestStatusMDT_Names::Assessment_Name);
  }
  {
    const uci::type::AssessmentRequestStatusMDT::IncompleteAssessment& boundedList = accessor.getIncompleteAssessment();
    for (uci::type::AssessmentRequestStatusMDT::IncompleteAssessment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::IncompleteProcessingType::serialize(boundedList.at(i), node, AssessmentRequestStatusMDT_Names::IncompleteAssessment_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AssessmentRequestStatusMDT& AssessmentRequestStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AssessmentRequestStatusMDT>().release());
}

uci::type::AssessmentRequestStatusMDT& AssessmentRequestStatusMDT::create(const uci::type::AssessmentRequestStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AssessmentRequestStatusMDT> newAccessor{boost::make_unique<asb_uci::type::AssessmentRequestStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AssessmentRequestStatusMDT::destroy(uci::type::AssessmentRequestStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::AssessmentRequestStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

