/** @file RepetitionTimeBasedType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RepetitionTimeBasedType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/RepetitionContinuousType.h"
#include "../../../include/asb_uci/type/RepetitionFiniteType.h"
#include "../../../include/asb_uci/type/RepetitionPeriodicType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RepetitionContinuousType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RepetitionFiniteType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RepetitionPeriodicType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RepetitionTimeBasedType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RepetitionTimeBasedType::RepetitionTimeBasedType() = default;

RepetitionTimeBasedType::~RepetitionTimeBasedType() = default;

void RepetitionTimeBasedType::copy(const uci::type::RepetitionTimeBasedType& accessor) {
  copyImpl(accessor, false);
}

void RepetitionTimeBasedType::copyImpl(const uci::type::RepetitionTimeBasedType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RepetitionTimeBasedType&>(accessor);
    if (accessorImpl.continuous_Accessor) {
      setContinuous(*(accessorImpl.continuous_Accessor));
    } else {
      continuous_Accessor.reset();
    }
    if (accessorImpl.finite_Accessor) {
      setFinite(*(accessorImpl.finite_Accessor));
    } else {
      finite_Accessor.reset();
    }
    if (accessorImpl.periodic_Accessor) {
      setPeriodic(*(accessorImpl.periodic_Accessor));
    } else {
      periodic_Accessor.reset();
    }
  }
}

void RepetitionTimeBasedType::reset() noexcept {
  continuous_Accessor.reset();
  finite_Accessor.reset();
  periodic_Accessor.reset();
}

uci::type::RepetitionTimeBasedType::RepetitionTimeBasedTypeChoice RepetitionTimeBasedType::getRepetitionTimeBasedTypeChoiceOrdinal() const noexcept {
  if (continuous_Accessor) {
    return REPETITIONTIMEBASEDTYPE_CHOICE_CONTINUOUS;
  }
  if (finite_Accessor) {
    return REPETITIONTIMEBASEDTYPE_CHOICE_FINITE;
  }
  if (periodic_Accessor) {
    return REPETITIONTIMEBASEDTYPE_CHOICE_PERIODIC;
  }
  return REPETITIONTIMEBASEDTYPE_CHOICE_NONE;
}

uci::type::RepetitionTimeBasedType& RepetitionTimeBasedType::setRepetitionTimeBasedTypeChoiceOrdinal(uci::type::RepetitionTimeBasedType::RepetitionTimeBasedTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case REPETITIONTIMEBASEDTYPE_CHOICE_CONTINUOUS:
      chooseContinuous("setRepetitionTimeBasedTypeChoiceOrdinal", type);
      break;
    case REPETITIONTIMEBASEDTYPE_CHOICE_FINITE:
      chooseFinite("setRepetitionTimeBasedTypeChoiceOrdinal", type);
      break;
    case REPETITIONTIMEBASEDTYPE_CHOICE_PERIODIC:
      choosePeriodic("setRepetitionTimeBasedTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setRepetitionTimeBasedTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::RepetitionContinuousType& RepetitionTimeBasedType::getContinuous_() const {
  if (continuous_Accessor) {
    return *continuous_Accessor;
  }
  throw uci::base::UCIException("Error in getContinuous(): Unable to get Continuous, field not selected");
}

const uci::type::RepetitionContinuousType& RepetitionTimeBasedType::getContinuous() const {
  return getContinuous_();
}

uci::type::RepetitionContinuousType& RepetitionTimeBasedType::getContinuous() {
  return getContinuous_();
}

uci::type::RepetitionTimeBasedType& RepetitionTimeBasedType::setContinuous(const uci::type::RepetitionContinuousType& accessor) {
  chooseContinuous();
  if (&accessor != continuous_Accessor.get()) {
    continuous_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RepetitionTimeBasedType::isContinuous() const noexcept {
  return static_cast<bool>(continuous_Accessor);
}

uci::type::RepetitionContinuousType& RepetitionTimeBasedType::chooseContinuous(const std::string& method, uci::base::accessorType::AccessorType type) {
  finite_Accessor.reset();
  periodic_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionContinuousType : type};
  if ((!continuous_Accessor) || (continuous_Accessor->getAccessorType() != requestedType)) {
    continuous_Accessor = RepetitionContinuousType::create(type);
    if (!continuous_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *continuous_Accessor;
}

uci::type::RepetitionContinuousType& RepetitionTimeBasedType::chooseContinuous(uci::base::accessorType::AccessorType type) {
  return chooseContinuous("chooseContinuous", type);
}

uci::type::RepetitionFiniteType& RepetitionTimeBasedType::getFinite_() const {
  if (finite_Accessor) {
    return *finite_Accessor;
  }
  throw uci::base::UCIException("Error in getFinite(): Unable to get Finite, field not selected");
}

const uci::type::RepetitionFiniteType& RepetitionTimeBasedType::getFinite() const {
  return getFinite_();
}

uci::type::RepetitionFiniteType& RepetitionTimeBasedType::getFinite() {
  return getFinite_();
}

uci::type::RepetitionTimeBasedType& RepetitionTimeBasedType::setFinite(const uci::type::RepetitionFiniteType& accessor) {
  chooseFinite();
  if (&accessor != finite_Accessor.get()) {
    finite_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RepetitionTimeBasedType::isFinite() const noexcept {
  return static_cast<bool>(finite_Accessor);
}

uci::type::RepetitionFiniteType& RepetitionTimeBasedType::chooseFinite(const std::string& method, uci::base::accessorType::AccessorType type) {
  continuous_Accessor.reset();
  periodic_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionFiniteType : type};
  if ((!finite_Accessor) || (finite_Accessor->getAccessorType() != requestedType)) {
    finite_Accessor = RepetitionFiniteType::create(type);
    if (!finite_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *finite_Accessor;
}

uci::type::RepetitionFiniteType& RepetitionTimeBasedType::chooseFinite(uci::base::accessorType::AccessorType type) {
  return chooseFinite("chooseFinite", type);
}

uci::type::RepetitionPeriodicType& RepetitionTimeBasedType::getPeriodic_() const {
  if (periodic_Accessor) {
    return *periodic_Accessor;
  }
  throw uci::base::UCIException("Error in getPeriodic(): Unable to get Periodic, field not selected");
}

const uci::type::RepetitionPeriodicType& RepetitionTimeBasedType::getPeriodic() const {
  return getPeriodic_();
}

uci::type::RepetitionPeriodicType& RepetitionTimeBasedType::getPeriodic() {
  return getPeriodic_();
}

uci::type::RepetitionTimeBasedType& RepetitionTimeBasedType::setPeriodic(const uci::type::RepetitionPeriodicType& accessor) {
  choosePeriodic();
  if (&accessor != periodic_Accessor.get()) {
    periodic_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RepetitionTimeBasedType::isPeriodic() const noexcept {
  return static_cast<bool>(periodic_Accessor);
}

uci::type::RepetitionPeriodicType& RepetitionTimeBasedType::choosePeriodic(const std::string& method, uci::base::accessorType::AccessorType type) {
  continuous_Accessor.reset();
  finite_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionPeriodicType : type};
  if ((!periodic_Accessor) || (periodic_Accessor->getAccessorType() != requestedType)) {
    periodic_Accessor = RepetitionPeriodicType::create(type);
    if (!periodic_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *periodic_Accessor;
}

uci::type::RepetitionPeriodicType& RepetitionTimeBasedType::choosePeriodic(uci::base::accessorType::AccessorType type) {
  return choosePeriodic("choosePeriodic", type);
}

std::unique_ptr<RepetitionTimeBasedType> RepetitionTimeBasedType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionTimeBasedType : type};
  return (requestedType == uci::type::accessorType::repetitionTimeBasedType) ? boost::make_unique<RepetitionTimeBasedType>() : nullptr;
}

/**  */
namespace RepetitionTimeBasedType_Names {

constexpr const char* Extern_Type_Name{"RepetitionTimeBasedType"};
constexpr const char* Continuous_Name{"Continuous"};
constexpr const char* Finite_Name{"Finite"};
constexpr const char* Periodic_Name{"Periodic"};

} // namespace RepetitionTimeBasedType_Names

void RepetitionTimeBasedType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RepetitionTimeBasedType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RepetitionTimeBasedType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RepetitionTimeBasedType_Names::Continuous_Name) {
      RepetitionContinuousType::deserialize(valueType.second, accessor.chooseContinuous(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RepetitionTimeBasedType_Names::Finite_Name) {
      RepetitionFiniteType::deserialize(valueType.second, accessor.chooseFinite(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RepetitionTimeBasedType_Names::Periodic_Name) {
      RepetitionPeriodicType::deserialize(valueType.second, accessor.choosePeriodic(), nodeName, nsPrefix);
    }
  }
}

std::string RepetitionTimeBasedType::serialize(const uci::type::RepetitionTimeBasedType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RepetitionTimeBasedType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RepetitionTimeBasedType_Names::Extern_Type_Name);
  }
  if (accessor.isContinuous()) {
    RepetitionContinuousType::serialize(accessor.getContinuous(), node, RepetitionTimeBasedType_Names::Continuous_Name);
  } else if (accessor.isFinite()) {
    RepetitionFiniteType::serialize(accessor.getFinite(), node, RepetitionTimeBasedType_Names::Finite_Name);
  } else if (accessor.isPeriodic()) {
    RepetitionPeriodicType::serialize(accessor.getPeriodic(), node, RepetitionTimeBasedType_Names::Periodic_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RepetitionTimeBasedType& RepetitionTimeBasedType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RepetitionTimeBasedType>().release());
}

uci::type::RepetitionTimeBasedType& RepetitionTimeBasedType::create(const uci::type::RepetitionTimeBasedType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RepetitionTimeBasedType> newAccessor{boost::make_unique<asb_uci::type::RepetitionTimeBasedType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RepetitionTimeBasedType::destroy(uci::type::RepetitionTimeBasedType& accessor) {
  delete dynamic_cast<asb_uci::type::RepetitionTimeBasedType*>(&accessor);
}

} // namespace type

} // namespace uci

