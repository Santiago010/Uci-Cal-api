/** @file PO_ComponentStatusLensAssemblyFocusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentStatusLensAssemblyFocusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/IncrementalChangeEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IncrementalChangeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentStatusLensAssemblyFocusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentStatusLensAssemblyFocusType::PO_ComponentStatusLensAssemblyFocusType() = default;

PO_ComponentStatusLensAssemblyFocusType::~PO_ComponentStatusLensAssemblyFocusType() = default;

void PO_ComponentStatusLensAssemblyFocusType::copy(const uci::type::PO_ComponentStatusLensAssemblyFocusType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentStatusLensAssemblyFocusType::copyImpl(const uci::type::PO_ComponentStatusLensAssemblyFocusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentStatusLensAssemblyFocusType&>(accessor);
    focusSetting_Accessor = (accessorImpl.focusSetting_Accessor ? accessorImpl.focusSetting_Accessor : boost::none);
    autoFocus_Accessor = (accessorImpl.autoFocus_Accessor ? accessorImpl.autoFocus_Accessor : boost::none);
    autoFocusZoom_Accessor = (accessorImpl.autoFocusZoom_Accessor ? accessorImpl.autoFocusZoom_Accessor : boost::none);
    if (accessorImpl.changeType_Accessor) {
      setChangeType(*(accessorImpl.changeType_Accessor));
    } else {
      changeType_Accessor.reset();
    }
  }
}

void PO_ComponentStatusLensAssemblyFocusType::reset() noexcept {
  focusSetting_Accessor.reset();
  autoFocus_Accessor.reset();
  autoFocusZoom_Accessor.reset();
  changeType_Accessor.reset();
}

uci::type::PO_ComponentStatusLensAssemblyFocusType::PO_ComponentStatusLensAssemblyFocusTypeChoice PO_ComponentStatusLensAssemblyFocusType::getPO_ComponentStatusLensAssemblyFocusTypeChoiceOrdinal() const noexcept {
  if (focusSetting_Accessor) {
    return PO_COMPONENTSTATUSLENSASSEMBLYFOCUSTYPE_CHOICE_FOCUSSETTING;
  }
  if (autoFocus_Accessor) {
    return PO_COMPONENTSTATUSLENSASSEMBLYFOCUSTYPE_CHOICE_AUTOFOCUS;
  }
  if (autoFocusZoom_Accessor) {
    return PO_COMPONENTSTATUSLENSASSEMBLYFOCUSTYPE_CHOICE_AUTOFOCUSZOOM;
  }
  if (changeType_Accessor) {
    return PO_COMPONENTSTATUSLENSASSEMBLYFOCUSTYPE_CHOICE_CHANGETYPE;
  }
  return PO_COMPONENTSTATUSLENSASSEMBLYFOCUSTYPE_CHOICE_NONE;
}

uci::type::PO_ComponentStatusLensAssemblyFocusType& PO_ComponentStatusLensAssemblyFocusType::setPO_ComponentStatusLensAssemblyFocusTypeChoiceOrdinal(uci::type::PO_ComponentStatusLensAssemblyFocusType::PO_ComponentStatusLensAssemblyFocusTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PO_COMPONENTSTATUSLENSASSEMBLYFOCUSTYPE_CHOICE_FOCUSSETTING:
      chooseFocusSetting();
      break;
    case PO_COMPONENTSTATUSLENSASSEMBLYFOCUSTYPE_CHOICE_AUTOFOCUS:
      chooseAutoFocus();
      break;
    case PO_COMPONENTSTATUSLENSASSEMBLYFOCUSTYPE_CHOICE_AUTOFOCUSZOOM:
      chooseAutoFocusZoom();
      break;
    case PO_COMPONENTSTATUSLENSASSEMBLYFOCUSTYPE_CHOICE_CHANGETYPE:
      chooseChangeType("setPO_ComponentStatusLensAssemblyFocusTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPO_ComponentStatusLensAssemblyFocusTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PercentTypeValue PO_ComponentStatusLensAssemblyFocusType::getFocusSetting() const {
  if (focusSetting_Accessor) {
    return *focusSetting_Accessor;
  }
  throw uci::base::UCIException("Error in getFocusSetting(): Unable to get FocusSetting, field not selected");
}

uci::type::PO_ComponentStatusLensAssemblyFocusType& PO_ComponentStatusLensAssemblyFocusType::setFocusSetting(uci::type::PercentTypeValue value) {
  chooseFocusSetting();
  focusSetting_Accessor = value;
  return *this;
}

bool PO_ComponentStatusLensAssemblyFocusType::isFocusSetting() const noexcept {
  return static_cast<bool>(focusSetting_Accessor);
}

void PO_ComponentStatusLensAssemblyFocusType::chooseFocusSetting() {
  autoFocus_Accessor.reset();
  autoFocusZoom_Accessor.reset();
  changeType_Accessor.reset();
  if (!focusSetting_Accessor) {
    focusSetting_Accessor = boost::optional<asb_xs::Double>();
  }
}

xs::Boolean PO_ComponentStatusLensAssemblyFocusType::getAutoFocus() const {
  if (autoFocus_Accessor) {
    return *autoFocus_Accessor;
  }
  throw uci::base::UCIException("Error in getAutoFocus(): Unable to get AutoFocus, field not selected");
}

uci::type::PO_ComponentStatusLensAssemblyFocusType& PO_ComponentStatusLensAssemblyFocusType::setAutoFocus(xs::Boolean value) {
  chooseAutoFocus();
  autoFocus_Accessor = value;
  return *this;
}

bool PO_ComponentStatusLensAssemblyFocusType::isAutoFocus() const noexcept {
  return static_cast<bool>(autoFocus_Accessor);
}

void PO_ComponentStatusLensAssemblyFocusType::chooseAutoFocus() {
  focusSetting_Accessor.reset();
  autoFocusZoom_Accessor.reset();
  changeType_Accessor.reset();
  if (!autoFocus_Accessor) {
    autoFocus_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

xs::Boolean PO_ComponentStatusLensAssemblyFocusType::getAutoFocusZoom() const {
  if (autoFocusZoom_Accessor) {
    return *autoFocusZoom_Accessor;
  }
  throw uci::base::UCIException("Error in getAutoFocusZoom(): Unable to get AutoFocusZoom, field not selected");
}

uci::type::PO_ComponentStatusLensAssemblyFocusType& PO_ComponentStatusLensAssemblyFocusType::setAutoFocusZoom(xs::Boolean value) {
  chooseAutoFocusZoom();
  autoFocusZoom_Accessor = value;
  return *this;
}

bool PO_ComponentStatusLensAssemblyFocusType::isAutoFocusZoom() const noexcept {
  return static_cast<bool>(autoFocusZoom_Accessor);
}

void PO_ComponentStatusLensAssemblyFocusType::chooseAutoFocusZoom() {
  focusSetting_Accessor.reset();
  autoFocus_Accessor.reset();
  changeType_Accessor.reset();
  if (!autoFocusZoom_Accessor) {
    autoFocusZoom_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

uci::type::IncrementalChangeEnum& PO_ComponentStatusLensAssemblyFocusType::getChangeType_() const {
  if (changeType_Accessor) {
    return *changeType_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeType(): Unable to get ChangeType, field not selected");
}

const uci::type::IncrementalChangeEnum& PO_ComponentStatusLensAssemblyFocusType::getChangeType() const {
  return getChangeType_();
}

uci::type::IncrementalChangeEnum& PO_ComponentStatusLensAssemblyFocusType::getChangeType() {
  return getChangeType_();
}

uci::type::PO_ComponentStatusLensAssemblyFocusType& PO_ComponentStatusLensAssemblyFocusType::setChangeType(const uci::type::IncrementalChangeEnum& accessor) {
  chooseChangeType();
  if (&accessor != changeType_Accessor.get()) {
    changeType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_ComponentStatusLensAssemblyFocusType& PO_ComponentStatusLensAssemblyFocusType::setChangeType(uci::type::IncrementalChangeEnum::EnumerationItem value) {
  chooseChangeType().setValue(value);
  return *this;
}

bool PO_ComponentStatusLensAssemblyFocusType::isChangeType() const noexcept {
  return static_cast<bool>(changeType_Accessor);
}

uci::type::IncrementalChangeEnum& PO_ComponentStatusLensAssemblyFocusType::chooseChangeType(const std::string& method, uci::base::accessorType::AccessorType type) {
  focusSetting_Accessor.reset();
  autoFocus_Accessor.reset();
  autoFocusZoom_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::incrementalChangeEnum : type};
  if ((!changeType_Accessor) || (changeType_Accessor->getAccessorType() != requestedType)) {
    changeType_Accessor = IncrementalChangeEnum::create(type);
    if (!changeType_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeType_Accessor;
}

uci::type::IncrementalChangeEnum& PO_ComponentStatusLensAssemblyFocusType::chooseChangeType(uci::base::accessorType::AccessorType type) {
  return chooseChangeType("chooseChangeType", type);
}

std::unique_ptr<PO_ComponentStatusLensAssemblyFocusType> PO_ComponentStatusLensAssemblyFocusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusLensAssemblyFocusType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentStatusLensAssemblyFocusType) ? boost::make_unique<PO_ComponentStatusLensAssemblyFocusType>() : nullptr;
}

/**  */
namespace PO_ComponentStatusLensAssemblyFocusType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentStatusLensAssemblyFocusType"};
constexpr const char* FocusSetting_Name{"FocusSetting"};
constexpr const char* AutoFocus_Name{"AutoFocus"};
constexpr const char* AutoFocusZoom_Name{"AutoFocusZoom"};
constexpr const char* ChangeType_Name{"ChangeType"};

} // namespace PO_ComponentStatusLensAssemblyFocusType_Names

void PO_ComponentStatusLensAssemblyFocusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentStatusLensAssemblyFocusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentStatusLensAssemblyFocusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentStatusLensAssemblyFocusType_Names::FocusSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFocusSetting(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusLensAssemblyFocusType_Names::AutoFocus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAutoFocus(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusLensAssemblyFocusType_Names::AutoFocusZoom_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAutoFocusZoom(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusLensAssemblyFocusType_Names::ChangeType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseChangeType().setValueFromName(*value);
      }
    }
  }
}

std::string PO_ComponentStatusLensAssemblyFocusType::serialize(const uci::type::PO_ComponentStatusLensAssemblyFocusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentStatusLensAssemblyFocusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentStatusLensAssemblyFocusType_Names::Extern_Type_Name);
  }
  if (accessor.isFocusSetting()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFocusSetting(), node, PO_ComponentStatusLensAssemblyFocusType_Names::FocusSetting_Name);
  } else if (accessor.isAutoFocus()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAutoFocus(), node, PO_ComponentStatusLensAssemblyFocusType_Names::AutoFocus_Name);
  } else if (accessor.isAutoFocusZoom()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAutoFocusZoom(), node, PO_ComponentStatusLensAssemblyFocusType_Names::AutoFocusZoom_Name);
  } else if (accessor.isChangeType()) {
    IncrementalChangeEnum::serialize(accessor.getChangeType(), node, PO_ComponentStatusLensAssemblyFocusType_Names::ChangeType_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentStatusLensAssemblyFocusType& PO_ComponentStatusLensAssemblyFocusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentStatusLensAssemblyFocusType>().release());
}

uci::type::PO_ComponentStatusLensAssemblyFocusType& PO_ComponentStatusLensAssemblyFocusType::create(const uci::type::PO_ComponentStatusLensAssemblyFocusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentStatusLensAssemblyFocusType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentStatusLensAssemblyFocusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentStatusLensAssemblyFocusType::destroy(uci::type::PO_ComponentStatusLensAssemblyFocusType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentStatusLensAssemblyFocusType*>(&accessor);
}

} // namespace type

} // namespace uci

