/** @file TurretReportDynamicPointingType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/TurretReportDynamicPointingType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AngleRateType.h"
#include "uci/type/AngleType.h"
#include "uci/type/TurretReportDynamicPointingType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TurretReportDynamicPointingType::TurretReportDynamicPointingType() = default;

TurretReportDynamicPointingType::~TurretReportDynamicPointingType() = default;

void TurretReportDynamicPointingType::copy(const uci::type::TurretReportDynamicPointingType& accessor) {
  copyImpl(accessor, false);
}

void TurretReportDynamicPointingType::copyImpl(const uci::type::TurretReportDynamicPointingType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const TurretReportDynamicPointingType&>(accessor);
    setHeading(accessorImpl.heading_Accessor);
    setPitch(accessorImpl.pitch_Accessor);
    if (accessorImpl.hasHeadingRate()) {
      setHeadingRate(accessorImpl.getHeadingRate());
    } else {
      clearHeadingRate();
    }
    if (accessorImpl.hasPitchRate()) {
      setPitchRate(accessorImpl.getPitchRate());
    } else {
      clearPitchRate();
    }
  }
}

void TurretReportDynamicPointingType::reset() noexcept {
  heading_Accessor = 0.0;
  pitch_Accessor = 0.0;
  clearHeadingRate();
  clearPitchRate();
}

uci::type::AngleTypeValue TurretReportDynamicPointingType::getHeading() const {
  return heading_Accessor;
}

uci::type::TurretReportDynamicPointingType& TurretReportDynamicPointingType::setHeading(uci::type::AngleTypeValue value) {
  heading_Accessor = value;
  return *this;
}


uci::type::AngleTypeValue TurretReportDynamicPointingType::getPitch() const {
  return pitch_Accessor;
}

uci::type::TurretReportDynamicPointingType& TurretReportDynamicPointingType::setPitch(uci::type::AngleTypeValue value) {
  pitch_Accessor = value;
  return *this;
}


uci::type::AngleRateTypeValue TurretReportDynamicPointingType::getHeadingRate() const {
  if (headingRate_Accessor) {
    return *headingRate_Accessor;
  }
  throw uci::base::UCIException("Error in getHeadingRate(): An attempt was made to get an optional field that was not enabled, call hasHeadingRate() to determine if it is safe to call getHeadingRate()");
}

uci::type::TurretReportDynamicPointingType& TurretReportDynamicPointingType::setHeadingRate(uci::type::AngleRateTypeValue value) {
  headingRate_Accessor = value;
  return *this;
}

bool TurretReportDynamicPointingType::hasHeadingRate() const noexcept {
  return headingRate_Accessor.has_value();
}

uci::type::TurretReportDynamicPointingType& TurretReportDynamicPointingType::clearHeadingRate() noexcept {
  headingRate_Accessor.reset();
  return *this;
}

uci::type::AngleRateTypeValue TurretReportDynamicPointingType::getPitchRate() const {
  if (pitchRate_Accessor) {
    return *pitchRate_Accessor;
  }
  throw uci::base::UCIException("Error in getPitchRate(): An attempt was made to get an optional field that was not enabled, call hasPitchRate() to determine if it is safe to call getPitchRate()");
}

uci::type::TurretReportDynamicPointingType& TurretReportDynamicPointingType::setPitchRate(uci::type::AngleRateTypeValue value) {
  pitchRate_Accessor = value;
  return *this;
}

bool TurretReportDynamicPointingType::hasPitchRate() const noexcept {
  return pitchRate_Accessor.has_value();
}

uci::type::TurretReportDynamicPointingType& TurretReportDynamicPointingType::clearPitchRate() noexcept {
  pitchRate_Accessor.reset();
  return *this;
}

std::unique_ptr<TurretReportDynamicPointingType> TurretReportDynamicPointingType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::turretReportDynamicPointingType : type};
  return (requestedType == uci::type::accessorType::turretReportDynamicPointingType) ? boost::make_unique<TurretReportDynamicPointingType>() : nullptr;
}

/**  */
namespace TurretReportDynamicPointingType_Names {

constexpr const char* Extern_Type_Name{"TurretReportDynamicPointingType"};
constexpr const char* Heading_Name{"Heading"};
constexpr const char* Pitch_Name{"Pitch"};
constexpr const char* HeadingRate_Name{"HeadingRate"};
constexpr const char* PitchRate_Name{"PitchRate"};

} // namespace TurretReportDynamicPointingType_Names

void TurretReportDynamicPointingType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TurretReportDynamicPointingType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TurretReportDynamicPointingType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TurretReportDynamicPointingType_Names::Heading_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHeading(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TurretReportDynamicPointingType_Names::Pitch_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPitch(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TurretReportDynamicPointingType_Names::HeadingRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHeadingRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TurretReportDynamicPointingType_Names::PitchRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPitchRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string TurretReportDynamicPointingType::serialize(const uci::type::TurretReportDynamicPointingType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TurretReportDynamicPointingType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, TurretReportDynamicPointingType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getHeading(), node, TurretReportDynamicPointingType_Names::Heading_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPitch(), node, TurretReportDynamicPointingType_Names::Pitch_Name);
  if (accessor.hasHeadingRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getHeadingRate(), node, TurretReportDynamicPointingType_Names::HeadingRate_Name);
  }
  if (accessor.hasPitchRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPitchRate(), node, TurretReportDynamicPointingType_Names::PitchRate_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TurretReportDynamicPointingType& TurretReportDynamicPointingType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TurretReportDynamicPointingType>().release());
}

uci::type::TurretReportDynamicPointingType& TurretReportDynamicPointingType::create(const uci::type::TurretReportDynamicPointingType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TurretReportDynamicPointingType> newAccessor{boost::make_unique<asb_uci::type::TurretReportDynamicPointingType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TurretReportDynamicPointingType::destroy(uci::type::TurretReportDynamicPointingType& accessor) {
  delete dynamic_cast<asb_uci::type::TurretReportDynamicPointingType*>(&accessor);
}

} // namespace type

} // namespace uci

