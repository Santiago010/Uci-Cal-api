/** @file PulseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PulseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentID_Type.h"
#include "../../../include/asb_uci/type/DateTimeSigmaType.h"
#include "../../../include/asb_uci/type/ModulationOnPulseDataType.h"
#include "../../../include/asb_uci/type/SignalRelativeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeSigmaType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MilliwattPowerRatioType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ModulationOnPulseDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PulseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SignalRelativeType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PulseType::PulseType()
  : componentID_Accessor{boost::make_unique<ComponentID_Type>()},
    timestamp_Accessor{boost::make_unique<DateTimeSigmaType>()},
    relativeLOS_Accessor{boost::make_unique<RelativeLOS>(0, SIZE_MAX)} {
}

PulseType::~PulseType() = default;

void PulseType::copy(const uci::type::PulseType& accessor) {
  copyImpl(accessor, false);
}

void PulseType::copyImpl(const uci::type::PulseType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PulseType&>(accessor);
    setComponentID(*(accessorImpl.componentID_Accessor));
    setTimestamp(*(accessorImpl.timestamp_Accessor));
    setFrequency(accessorImpl.frequency_Accessor);
    if (accessorImpl.hasFrequencyDeviation()) {
      setFrequencyDeviation(accessorImpl.getFrequencyDeviation());
    } else {
      clearFrequencyDeviation();
    }
    if (accessorImpl.hasAmplitude()) {
      setAmplitude(accessorImpl.getAmplitude());
    } else {
      clearAmplitude();
    }
    if (accessorImpl.hasRelativeAmplitude()) {
      setRelativeAmplitude(accessorImpl.getRelativeAmplitude());
    } else {
      clearRelativeAmplitude();
    }
    if (accessorImpl.hasPulseWidth()) {
      setPulseWidth(accessorImpl.getPulseWidth());
    } else {
      clearPulseWidth();
    }
    if (accessorImpl.hasPulseWidthDeviation()) {
      setPulseWidthDeviation(accessorImpl.getPulseWidthDeviation());
    } else {
      clearPulseWidthDeviation();
    }
    if (accessorImpl.hasPulseWidthChopped()) {
      setPulseWidthChopped(accessorImpl.getPulseWidthChopped());
    } else {
      clearPulseWidthChopped();
    }
    if (accessorImpl.hasPulseOnPulse()) {
      setPulseOnPulse(accessorImpl.getPulseOnPulse());
    } else {
      clearPulseOnPulse();
    }
    if (accessorImpl.hasSNR()) {
      setSNR(accessorImpl.getSNR());
    } else {
      clearSNR();
    }
    setRelativeLOS(*(accessorImpl.relativeLOS_Accessor));
    if (accessorImpl.modulationOnPulse_Accessor) {
      setModulationOnPulse(*(accessorImpl.modulationOnPulse_Accessor));
    } else {
      modulationOnPulse_Accessor.reset();
    }
    if (accessorImpl.hasDynamicRangeExceeded()) {
      setDynamicRangeExceeded(accessorImpl.getDynamicRangeExceeded());
    } else {
      clearDynamicRangeExceeded();
    }
    if (accessorImpl.hasThresholdDetection()) {
      setThresholdDetection(accessorImpl.getThresholdDetection());
    } else {
      clearThresholdDetection();
    }
    if (accessorImpl.hasHighPowerCorruption()) {
      setHighPowerCorruption(accessorImpl.getHighPowerCorruption());
    } else {
      clearHighPowerCorruption();
    }
    if (accessorImpl.hasOnboardInterference()) {
      setOnboardInterference(accessorImpl.getOnboardInterference());
    } else {
      clearOnboardInterference();
    }
  }
}

void PulseType::reset() noexcept {
  componentID_Accessor->reset();
  timestamp_Accessor->reset();
  frequency_Accessor = 0.0;
  clearFrequencyDeviation();
  clearAmplitude();
  clearRelativeAmplitude();
  clearPulseWidth();
  clearPulseWidthDeviation();
  clearPulseWidthChopped();
  clearPulseOnPulse();
  clearSNR();
  relativeLOS_Accessor->reset();
  modulationOnPulse_Accessor.reset();
  clearDynamicRangeExceeded();
  clearThresholdDetection();
  clearHighPowerCorruption();
  clearOnboardInterference();
}

const uci::type::ComponentID_Type& PulseType::getComponentID() const {
  return *componentID_Accessor;
}

uci::type::ComponentID_Type& PulseType::getComponentID() {
  return *componentID_Accessor;
}

uci::type::PulseType& PulseType::setComponentID(const uci::type::ComponentID_Type& accessor) {
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DateTimeSigmaType& PulseType::getTimestamp() const {
  return *timestamp_Accessor;
}

uci::type::DateTimeSigmaType& PulseType::getTimestamp() {
  return *timestamp_Accessor;
}

uci::type::PulseType& PulseType::setTimestamp(const uci::type::DateTimeSigmaType& accessor) {
  if (&accessor != timestamp_Accessor.get()) {
    timestamp_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FrequencyTypeValue PulseType::getFrequency() const {
  return frequency_Accessor;
}

uci::type::PulseType& PulseType::setFrequency(uci::type::FrequencyTypeValue value) {
  frequency_Accessor = value;
  return *this;
}


uci::type::FrequencyTypeValue PulseType::getFrequencyDeviation() const {
  if (frequencyDeviation_Accessor) {
    return *frequencyDeviation_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequencyDeviation(): An attempt was made to get an optional field that was not enabled, call hasFrequencyDeviation() to determine if it is safe to call getFrequencyDeviation()");
}

uci::type::PulseType& PulseType::setFrequencyDeviation(uci::type::FrequencyTypeValue value) {
  frequencyDeviation_Accessor = value;
  return *this;
}

bool PulseType::hasFrequencyDeviation() const noexcept {
  return frequencyDeviation_Accessor.has_value();
}

uci::type::PulseType& PulseType::clearFrequencyDeviation() noexcept {
  frequencyDeviation_Accessor.reset();
  return *this;
}

uci::type::MilliwattPowerRatioTypeValue PulseType::getAmplitude() const {
  if (amplitude_Accessor) {
    return *amplitude_Accessor;
  }
  throw uci::base::UCIException("Error in getAmplitude(): An attempt was made to get an optional field that was not enabled, call hasAmplitude() to determine if it is safe to call getAmplitude()");
}

uci::type::PulseType& PulseType::setAmplitude(uci::type::MilliwattPowerRatioTypeValue value) {
  amplitude_Accessor = value;
  return *this;
}

bool PulseType::hasAmplitude() const noexcept {
  return amplitude_Accessor.has_value();
}

uci::type::PulseType& PulseType::clearAmplitude() noexcept {
  amplitude_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue PulseType::getRelativeAmplitude() const {
  if (relativeAmplitude_Accessor) {
    return *relativeAmplitude_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeAmplitude(): An attempt was made to get an optional field that was not enabled, call hasRelativeAmplitude() to determine if it is safe to call getRelativeAmplitude()");
}

uci::type::PulseType& PulseType::setRelativeAmplitude(uci::type::DecibelTypeValue value) {
  relativeAmplitude_Accessor = value;
  return *this;
}

bool PulseType::hasRelativeAmplitude() const noexcept {
  return relativeAmplitude_Accessor.has_value();
}

uci::type::PulseType& PulseType::clearRelativeAmplitude() noexcept {
  relativeAmplitude_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue PulseType::getPulseWidth() const {
  if (pulseWidth_Accessor) {
    return *pulseWidth_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidth(): An attempt was made to get an optional field that was not enabled, call hasPulseWidth() to determine if it is safe to call getPulseWidth()");
}

uci::type::PulseType& PulseType::setPulseWidth(uci::type::DurationTypeValue value) {
  pulseWidth_Accessor = value;
  return *this;
}

bool PulseType::hasPulseWidth() const noexcept {
  return pulseWidth_Accessor.has_value();
}

uci::type::PulseType& PulseType::clearPulseWidth() noexcept {
  pulseWidth_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue PulseType::getPulseWidthDeviation() const {
  if (pulseWidthDeviation_Accessor) {
    return *pulseWidthDeviation_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidthDeviation(): An attempt was made to get an optional field that was not enabled, call hasPulseWidthDeviation() to determine if it is safe to call getPulseWidthDeviation()");
}

uci::type::PulseType& PulseType::setPulseWidthDeviation(uci::type::DurationTypeValue value) {
  pulseWidthDeviation_Accessor = value;
  return *this;
}

bool PulseType::hasPulseWidthDeviation() const noexcept {
  return pulseWidthDeviation_Accessor.has_value();
}

uci::type::PulseType& PulseType::clearPulseWidthDeviation() noexcept {
  pulseWidthDeviation_Accessor.reset();
  return *this;
}

xs::Boolean PulseType::getPulseWidthChopped() const {
  if (pulseWidthChopped_Accessor) {
    return *pulseWidthChopped_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidthChopped(): An attempt was made to get an optional field that was not enabled, call hasPulseWidthChopped() to determine if it is safe to call getPulseWidthChopped()");
}

uci::type::PulseType& PulseType::setPulseWidthChopped(xs::Boolean value) {
  pulseWidthChopped_Accessor = value;
  return *this;
}

bool PulseType::hasPulseWidthChopped() const noexcept {
  return pulseWidthChopped_Accessor.has_value();
}

uci::type::PulseType& PulseType::clearPulseWidthChopped() noexcept {
  pulseWidthChopped_Accessor.reset();
  return *this;
}

xs::Boolean PulseType::getPulseOnPulse() const {
  if (pulseOnPulse_Accessor) {
    return *pulseOnPulse_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseOnPulse(): An attempt was made to get an optional field that was not enabled, call hasPulseOnPulse() to determine if it is safe to call getPulseOnPulse()");
}

uci::type::PulseType& PulseType::setPulseOnPulse(xs::Boolean value) {
  pulseOnPulse_Accessor = value;
  return *this;
}

bool PulseType::hasPulseOnPulse() const noexcept {
  return pulseOnPulse_Accessor.has_value();
}

uci::type::PulseType& PulseType::clearPulseOnPulse() noexcept {
  pulseOnPulse_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue PulseType::getSNR() const {
  if (sNR_Accessor) {
    return *sNR_Accessor;
  }
  throw uci::base::UCIException("Error in getSNR(): An attempt was made to get an optional field that was not enabled, call hasSNR() to determine if it is safe to call getSNR()");
}

uci::type::PulseType& PulseType::setSNR(uci::type::DecibelTypeValue value) {
  sNR_Accessor = value;
  return *this;
}

bool PulseType::hasSNR() const noexcept {
  return sNR_Accessor.has_value();
}

uci::type::PulseType& PulseType::clearSNR() noexcept {
  sNR_Accessor.reset();
  return *this;
}

const uci::type::PulseType::RelativeLOS& PulseType::getRelativeLOS() const {
  return *relativeLOS_Accessor;
}

uci::type::PulseType::RelativeLOS& PulseType::getRelativeLOS() {
  return *relativeLOS_Accessor;
}

uci::type::PulseType& PulseType::setRelativeLOS(const uci::type::PulseType::RelativeLOS& accessor) {
  if (&accessor != relativeLOS_Accessor.get()) {
    relativeLOS_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ModulationOnPulseDataType& PulseType::getModulationOnPulse_() const {
  if (modulationOnPulse_Accessor) {
    return *modulationOnPulse_Accessor;
  }
  throw uci::base::UCIException("Error in getModulationOnPulse(): An attempt was made to get an optional field that was not enabled, call hasModulationOnPulse() to determine if it is safe to call getModulationOnPulse()");
}

const uci::type::ModulationOnPulseDataType& PulseType::getModulationOnPulse() const {
  return getModulationOnPulse_();
}

uci::type::ModulationOnPulseDataType& PulseType::getModulationOnPulse() {
  return getModulationOnPulse_();
}

uci::type::PulseType& PulseType::setModulationOnPulse(const uci::type::ModulationOnPulseDataType& accessor) {
  enableModulationOnPulse();
  if (&accessor != modulationOnPulse_Accessor.get()) {
    modulationOnPulse_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PulseType::hasModulationOnPulse() const noexcept {
  return static_cast<bool>(modulationOnPulse_Accessor);
}

uci::type::ModulationOnPulseDataType& PulseType::enableModulationOnPulse(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::modulationOnPulseDataType : type};
  if ((!modulationOnPulse_Accessor) || (modulationOnPulse_Accessor->getAccessorType() != requestedType)) {
    modulationOnPulse_Accessor = ModulationOnPulseDataType::create(requestedType);
    if (!modulationOnPulse_Accessor) {
      throw uci::base::UCIException("Error in enableModulationOnPulse(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modulationOnPulse_Accessor;
}

uci::type::PulseType& PulseType::clearModulationOnPulse() noexcept {
  modulationOnPulse_Accessor.reset();
  return *this;
}

xs::Boolean PulseType::getDynamicRangeExceeded() const {
  if (dynamicRangeExceeded_Accessor) {
    return *dynamicRangeExceeded_Accessor;
  }
  throw uci::base::UCIException("Error in getDynamicRangeExceeded(): An attempt was made to get an optional field that was not enabled, call hasDynamicRangeExceeded() to determine if it is safe to call getDynamicRangeExceeded()");
}

uci::type::PulseType& PulseType::setDynamicRangeExceeded(xs::Boolean value) {
  dynamicRangeExceeded_Accessor = value;
  return *this;
}

bool PulseType::hasDynamicRangeExceeded() const noexcept {
  return dynamicRangeExceeded_Accessor.has_value();
}

uci::type::PulseType& PulseType::clearDynamicRangeExceeded() noexcept {
  dynamicRangeExceeded_Accessor.reset();
  return *this;
}

xs::Boolean PulseType::getThresholdDetection() const {
  if (thresholdDetection_Accessor) {
    return *thresholdDetection_Accessor;
  }
  throw uci::base::UCIException("Error in getThresholdDetection(): An attempt was made to get an optional field that was not enabled, call hasThresholdDetection() to determine if it is safe to call getThresholdDetection()");
}

uci::type::PulseType& PulseType::setThresholdDetection(xs::Boolean value) {
  thresholdDetection_Accessor = value;
  return *this;
}

bool PulseType::hasThresholdDetection() const noexcept {
  return thresholdDetection_Accessor.has_value();
}

uci::type::PulseType& PulseType::clearThresholdDetection() noexcept {
  thresholdDetection_Accessor.reset();
  return *this;
}

xs::Boolean PulseType::getHighPowerCorruption() const {
  if (highPowerCorruption_Accessor) {
    return *highPowerCorruption_Accessor;
  }
  throw uci::base::UCIException("Error in getHighPowerCorruption(): An attempt was made to get an optional field that was not enabled, call hasHighPowerCorruption() to determine if it is safe to call getHighPowerCorruption()");
}

uci::type::PulseType& PulseType::setHighPowerCorruption(xs::Boolean value) {
  highPowerCorruption_Accessor = value;
  return *this;
}

bool PulseType::hasHighPowerCorruption() const noexcept {
  return highPowerCorruption_Accessor.has_value();
}

uci::type::PulseType& PulseType::clearHighPowerCorruption() noexcept {
  highPowerCorruption_Accessor.reset();
  return *this;
}

xs::Boolean PulseType::getOnboardInterference() const {
  if (onboardInterference_Accessor) {
    return *onboardInterference_Accessor;
  }
  throw uci::base::UCIException("Error in getOnboardInterference(): An attempt was made to get an optional field that was not enabled, call hasOnboardInterference() to determine if it is safe to call getOnboardInterference()");
}

uci::type::PulseType& PulseType::setOnboardInterference(xs::Boolean value) {
  onboardInterference_Accessor = value;
  return *this;
}

bool PulseType::hasOnboardInterference() const noexcept {
  return onboardInterference_Accessor.has_value();
}

uci::type::PulseType& PulseType::clearOnboardInterference() noexcept {
  onboardInterference_Accessor.reset();
  return *this;
}

std::unique_ptr<PulseType> PulseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pulseType : type};
  return (requestedType == uci::type::accessorType::pulseType) ? boost::make_unique<PulseType>() : nullptr;
}

/**  */
namespace PulseType_Names {

constexpr const char* Extern_Type_Name{"PulseType"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* Timestamp_Name{"Timestamp"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* FrequencyDeviation_Name{"FrequencyDeviation"};
constexpr const char* Amplitude_Name{"Amplitude"};
constexpr const char* RelativeAmplitude_Name{"RelativeAmplitude"};
constexpr const char* PulseWidth_Name{"PulseWidth"};
constexpr const char* PulseWidthDeviation_Name{"PulseWidthDeviation"};
constexpr const char* PulseWidthChopped_Name{"PulseWidthChopped"};
constexpr const char* PulseOnPulse_Name{"PulseOnPulse"};
constexpr const char* SNR_Name{"SNR"};
constexpr const char* RelativeLOS_Name{"RelativeLOS"};
constexpr const char* ModulationOnPulse_Name{"ModulationOnPulse"};
constexpr const char* DynamicRangeExceeded_Name{"DynamicRangeExceeded"};
constexpr const char* ThresholdDetection_Name{"ThresholdDetection"};
constexpr const char* HighPowerCorruption_Name{"HighPowerCorruption"};
constexpr const char* OnboardInterference_Name{"OnboardInterference"};

} // namespace PulseType_Names

void PulseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PulseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PulseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PulseType_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.getComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PulseType_Names::Timestamp_Name) {
      DateTimeSigmaType::deserialize(valueType.second, accessor.getTimestamp(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PulseType_Names::Frequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequency(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::FrequencyDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyDeviation(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::Amplitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAmplitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::RelativeAmplitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRelativeAmplitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::PulseWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidth(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::PulseWidthDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthDeviation(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::PulseWidthChopped_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthChopped(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::PulseOnPulse_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseOnPulse(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::SNR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSNR(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::RelativeLOS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PulseType::RelativeLOS& boundedList = accessor.getRelativeLOS();
        const uci::type::PulseType::RelativeLOS::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SignalRelativeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::ModulationOnPulse_Name) {
      ModulationOnPulseDataType::deserialize(valueType.second, accessor.enableModulationOnPulse(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PulseType_Names::DynamicRangeExceeded_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDynamicRangeExceeded(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::ThresholdDetection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setThresholdDetection(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::HighPowerCorruption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHighPowerCorruption(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::OnboardInterference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOnboardInterference(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string PulseType::serialize(const uci::type::PulseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PulseType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PulseType_Names::Extern_Type_Name);
  }
  ComponentID_Type::serialize(accessor.getComponentID(), node, PulseType_Names::ComponentID_Name);
  DateTimeSigmaType::serialize(accessor.getTimestamp(), node, PulseType_Names::Timestamp_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequency(), node, PulseType_Names::Frequency_Name);
  if (accessor.hasFrequencyDeviation()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyDeviation(), node, PulseType_Names::FrequencyDeviation_Name);
  }
  if (accessor.hasAmplitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAmplitude(), node, PulseType_Names::Amplitude_Name);
  }
  if (accessor.hasRelativeAmplitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRelativeAmplitude(), node, PulseType_Names::RelativeAmplitude_Name);
  }
  if (accessor.hasPulseWidth()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidth(), node, PulseType_Names::PulseWidth_Name);
  }
  if (accessor.hasPulseWidthDeviation()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthDeviation(), node, PulseType_Names::PulseWidthDeviation_Name);
  }
  if (accessor.hasPulseWidthChopped()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPulseWidthChopped(), node, PulseType_Names::PulseWidthChopped_Name);
  }
  if (accessor.hasPulseOnPulse()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPulseOnPulse(), node, PulseType_Names::PulseOnPulse_Name);
  }
  if (accessor.hasSNR()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSNR(), node, PulseType_Names::SNR_Name);
  }
  {
    const uci::type::PulseType::RelativeLOS& boundedList = accessor.getRelativeLOS();
    for (uci::type::PulseType::RelativeLOS::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SignalRelativeType::serialize(boundedList.at(i), node, PulseType_Names::RelativeLOS_Name);
    }
  }
  if (accessor.hasModulationOnPulse()) {
    ModulationOnPulseDataType::serialize(accessor.getModulationOnPulse(), node, PulseType_Names::ModulationOnPulse_Name);
  }
  if (accessor.hasDynamicRangeExceeded()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getDynamicRangeExceeded(), node, PulseType_Names::DynamicRangeExceeded_Name);
  }
  if (accessor.hasThresholdDetection()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getThresholdDetection(), node, PulseType_Names::ThresholdDetection_Name);
  }
  if (accessor.hasHighPowerCorruption()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getHighPowerCorruption(), node, PulseType_Names::HighPowerCorruption_Name);
  }
  if (accessor.hasOnboardInterference()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getOnboardInterference(), node, PulseType_Names::OnboardInterference_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PulseType& PulseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PulseType>().release());
}

uci::type::PulseType& PulseType::create(const uci::type::PulseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PulseType> newAccessor{boost::make_unique<asb_uci::type::PulseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PulseType::destroy(uci::type::PulseType& accessor) {
  delete dynamic_cast<asb_uci::type::PulseType*>(&accessor);
}

} // namespace type

} // namespace uci

