/** @file ControlTransferChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ControlTransferChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ControlStatusMissionControlType.h"
#include "asb_uci/type/EmptyType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ControlStatusMissionControlType.h"
#include "uci/type/ControlTransferChoiceType.h"
#include "uci/type/EmptyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ControlTransferChoiceType::ControlTransferChoiceType() = default;

ControlTransferChoiceType::~ControlTransferChoiceType() = default;

void ControlTransferChoiceType::copy(const uci::type::ControlTransferChoiceType& accessor) {
  copyImpl(accessor, false);
}

void ControlTransferChoiceType::copyImpl(const uci::type::ControlTransferChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ControlTransferChoiceType&>(accessor);
    if (accessorImpl.inProgress_Accessor) {
      setInProgress(*(accessorImpl.inProgress_Accessor));
    } else {
      inProgress_Accessor.reset();
    }
    if (accessorImpl.newMissionControl_Accessor) {
      setNewMissionControl(*(accessorImpl.newMissionControl_Accessor));
    } else {
      newMissionControl_Accessor.reset();
    }
  }
}

void ControlTransferChoiceType::reset() noexcept {
  inProgress_Accessor.reset();
  newMissionControl_Accessor.reset();
}

uci::type::ControlTransferChoiceType::ControlTransferChoiceTypeChoice ControlTransferChoiceType::getControlTransferChoiceTypeChoiceOrdinal() const noexcept {
  if (inProgress_Accessor) {
    return CONTROLTRANSFERCHOICETYPE_CHOICE_INPROGRESS;
  }
  if (newMissionControl_Accessor) {
    return CONTROLTRANSFERCHOICETYPE_CHOICE_NEWMISSIONCONTROL;
  }
  return CONTROLTRANSFERCHOICETYPE_CHOICE_NONE;
}

uci::type::ControlTransferChoiceType& ControlTransferChoiceType::setControlTransferChoiceTypeChoiceOrdinal(uci::type::ControlTransferChoiceType::ControlTransferChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case CONTROLTRANSFERCHOICETYPE_CHOICE_INPROGRESS:
      chooseInProgress("setControlTransferChoiceTypeChoiceOrdinal", type);
      break;
    case CONTROLTRANSFERCHOICETYPE_CHOICE_NEWMISSIONCONTROL:
      chooseNewMissionControl("setControlTransferChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setControlTransferChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EmptyType& ControlTransferChoiceType::getInProgress_() const {
  if (inProgress_Accessor) {
    return *inProgress_Accessor;
  }
  throw uci::base::UCIException("Error in getInProgress(): An attempt was made to get an optional field that was not enabled, call hasInProgress() to determine if it is safe to call getInProgress()");
}

const uci::type::EmptyType& ControlTransferChoiceType::getInProgress() const {
  return getInProgress_();
}

uci::type::EmptyType& ControlTransferChoiceType::getInProgress() {
  return getInProgress_();
}

uci::type::ControlTransferChoiceType& ControlTransferChoiceType::setInProgress(const uci::type::EmptyType& value) {
  return setInProgress(value.c_str());
}

uci::type::ControlTransferChoiceType& ControlTransferChoiceType::setInProgress(const std::string& value) {
  return setInProgress(value.c_str());
}

uci::type::ControlTransferChoiceType& ControlTransferChoiceType::setInProgress(const char * value) {
  chooseInProgress().setStringValue(value);
  return *this;
}

bool ControlTransferChoiceType::isInProgress() const noexcept {
  return static_cast<bool>(inProgress_Accessor);
}

uci::type::EmptyType& ControlTransferChoiceType::chooseInProgress(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  newMissionControl_Accessor.reset();
  if (!inProgress_Accessor) {
    inProgress_Accessor = EmptyType::create(type);
  }
  return *inProgress_Accessor;
}

uci::type::EmptyType& ControlTransferChoiceType::chooseInProgress(uci::base::accessorType::AccessorType type) {
  return chooseInProgress("chooseInProgress", type);
}

uci::type::ControlStatusMissionControlType& ControlTransferChoiceType::getNewMissionControl_() const {
  if (newMissionControl_Accessor) {
    return *newMissionControl_Accessor;
  }
  throw uci::base::UCIException("Error in getNewMissionControl(): Unable to get NewMissionControl, field not selected");
}

const uci::type::ControlStatusMissionControlType& ControlTransferChoiceType::getNewMissionControl() const {
  return getNewMissionControl_();
}

uci::type::ControlStatusMissionControlType& ControlTransferChoiceType::getNewMissionControl() {
  return getNewMissionControl_();
}

uci::type::ControlTransferChoiceType& ControlTransferChoiceType::setNewMissionControl(const uci::type::ControlStatusMissionControlType& accessor) {
  chooseNewMissionControl();
  if (&accessor != newMissionControl_Accessor.get()) {
    newMissionControl_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ControlTransferChoiceType::isNewMissionControl() const noexcept {
  return static_cast<bool>(newMissionControl_Accessor);
}

uci::type::ControlStatusMissionControlType& ControlTransferChoiceType::chooseNewMissionControl(const std::string& method, uci::base::accessorType::AccessorType type) {
  inProgress_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::controlStatusMissionControlType : type};
  if ((!newMissionControl_Accessor) || (newMissionControl_Accessor->getAccessorType() != requestedType)) {
    newMissionControl_Accessor = ControlStatusMissionControlType::create(type);
    if (!newMissionControl_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *newMissionControl_Accessor;
}

uci::type::ControlStatusMissionControlType& ControlTransferChoiceType::chooseNewMissionControl(uci::base::accessorType::AccessorType type) {
  return chooseNewMissionControl("chooseNewMissionControl", type);
}

std::unique_ptr<ControlTransferChoiceType> ControlTransferChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::controlTransferChoiceType : type};
  return (requestedType == uci::type::accessorType::controlTransferChoiceType) ? boost::make_unique<ControlTransferChoiceType>() : nullptr;
}

/**  */
namespace ControlTransferChoiceType_Names {

constexpr const char* Extern_Type_Name{"ControlTransferChoiceType"};
constexpr const char* InProgress_Name{"InProgress"};
constexpr const char* NewMissionControl_Name{"NewMissionControl"};

} // namespace ControlTransferChoiceType_Names

void ControlTransferChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ControlTransferChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ControlTransferChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ControlTransferChoiceType_Names::InProgress_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseInProgress().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + ControlTransferChoiceType_Names::NewMissionControl_Name) {
      ControlStatusMissionControlType::deserialize(valueType.second, accessor.chooseNewMissionControl(), nodeName, nsPrefix);
    }
  }
}

std::string ControlTransferChoiceType::serialize(const uci::type::ControlTransferChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ControlTransferChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ControlTransferChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isInProgress()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getInProgress(), node, ControlTransferChoiceType_Names::InProgress_Name);
  } else if (accessor.isNewMissionControl()) {
    ControlStatusMissionControlType::serialize(accessor.getNewMissionControl(), node, ControlTransferChoiceType_Names::NewMissionControl_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ControlTransferChoiceType& ControlTransferChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ControlTransferChoiceType>().release());
}

uci::type::ControlTransferChoiceType& ControlTransferChoiceType::create(const uci::type::ControlTransferChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ControlTransferChoiceType> newAccessor{boost::make_unique<asb_uci::type::ControlTransferChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ControlTransferChoiceType::destroy(uci::type::ControlTransferChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::ControlTransferChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

