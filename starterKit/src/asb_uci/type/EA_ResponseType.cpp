/** @file EA_ResponseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EA_ResponseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EA_TaskEscortType.h"
#include "asb_uci/type/EA_TaskProtectedAssetsType.h"
#include "asb_uci/type/EA_TaskThreatsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EA_ResponseType.h"
#include "uci/type/EA_TaskEscortType.h"
#include "uci/type/EA_TaskProtectedAssetsType.h"
#include "uci/type/EA_TaskThreatsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EA_ResponseType::EA_ResponseType() = default;

EA_ResponseType::~EA_ResponseType() = default;

void EA_ResponseType::copy(const uci::type::EA_ResponseType& accessor) {
  copyImpl(accessor, false);
}

void EA_ResponseType::copyImpl(const uci::type::EA_ResponseType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EA_ResponseType&>(accessor);
    if (accessorImpl.routeRequirements_Accessor) {
      setRouteRequirements(*(accessorImpl.routeRequirements_Accessor));
    } else {
      routeRequirements_Accessor.reset();
    }
    if (accessorImpl.protectedAssets_Accessor) {
      setProtectedAssets(*(accessorImpl.protectedAssets_Accessor));
    } else {
      protectedAssets_Accessor.reset();
    }
    if (accessorImpl.threats_Accessor) {
      setThreats(*(accessorImpl.threats_Accessor));
    } else {
      threats_Accessor.reset();
    }
  }
}

void EA_ResponseType::reset() noexcept {
  routeRequirements_Accessor.reset();
  protectedAssets_Accessor.reset();
  threats_Accessor.reset();
}

uci::type::EA_TaskEscortType& EA_ResponseType::getRouteRequirements_() const {
  if (routeRequirements_Accessor) {
    return *routeRequirements_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteRequirements(): An attempt was made to get an optional field that was not enabled, call hasRouteRequirements() to determine if it is safe to call getRouteRequirements()");
}

const uci::type::EA_TaskEscortType& EA_ResponseType::getRouteRequirements() const {
  return getRouteRequirements_();
}

uci::type::EA_TaskEscortType& EA_ResponseType::getRouteRequirements() {
  return getRouteRequirements_();
}

uci::type::EA_ResponseType& EA_ResponseType::setRouteRequirements(const uci::type::EA_TaskEscortType& accessor) {
  enableRouteRequirements();
  if (&accessor != routeRequirements_Accessor.get()) {
    routeRequirements_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_ResponseType::hasRouteRequirements() const noexcept {
  return static_cast<bool>(routeRequirements_Accessor);
}

uci::type::EA_TaskEscortType& EA_ResponseType::enableRouteRequirements(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_TaskEscortType : type};
  if ((!routeRequirements_Accessor) || (routeRequirements_Accessor->getAccessorType() != requestedType)) {
    routeRequirements_Accessor = EA_TaskEscortType::create(requestedType);
    if (!routeRequirements_Accessor) {
      throw uci::base::UCIException("Error in enableRouteRequirements(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeRequirements_Accessor;
}

uci::type::EA_ResponseType& EA_ResponseType::clearRouteRequirements() noexcept {
  routeRequirements_Accessor.reset();
  return *this;
}

uci::type::EA_TaskProtectedAssetsType& EA_ResponseType::getProtectedAssets_() const {
  if (protectedAssets_Accessor) {
    return *protectedAssets_Accessor;
  }
  throw uci::base::UCIException("Error in getProtectedAssets(): An attempt was made to get an optional field that was not enabled, call hasProtectedAssets() to determine if it is safe to call getProtectedAssets()");
}

const uci::type::EA_TaskProtectedAssetsType& EA_ResponseType::getProtectedAssets() const {
  return getProtectedAssets_();
}

uci::type::EA_TaskProtectedAssetsType& EA_ResponseType::getProtectedAssets() {
  return getProtectedAssets_();
}

uci::type::EA_ResponseType& EA_ResponseType::setProtectedAssets(const uci::type::EA_TaskProtectedAssetsType& accessor) {
  enableProtectedAssets();
  if (&accessor != protectedAssets_Accessor.get()) {
    protectedAssets_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_ResponseType::hasProtectedAssets() const noexcept {
  return static_cast<bool>(protectedAssets_Accessor);
}

uci::type::EA_TaskProtectedAssetsType& EA_ResponseType::enableProtectedAssets(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_TaskProtectedAssetsType : type};
  if ((!protectedAssets_Accessor) || (protectedAssets_Accessor->getAccessorType() != requestedType)) {
    protectedAssets_Accessor = EA_TaskProtectedAssetsType::create(requestedType);
    if (!protectedAssets_Accessor) {
      throw uci::base::UCIException("Error in enableProtectedAssets(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *protectedAssets_Accessor;
}

uci::type::EA_ResponseType& EA_ResponseType::clearProtectedAssets() noexcept {
  protectedAssets_Accessor.reset();
  return *this;
}

uci::type::EA_TaskThreatsType& EA_ResponseType::getThreats_() const {
  if (threats_Accessor) {
    return *threats_Accessor;
  }
  throw uci::base::UCIException("Error in getThreats(): An attempt was made to get an optional field that was not enabled, call hasThreats() to determine if it is safe to call getThreats()");
}

const uci::type::EA_TaskThreatsType& EA_ResponseType::getThreats() const {
  return getThreats_();
}

uci::type::EA_TaskThreatsType& EA_ResponseType::getThreats() {
  return getThreats_();
}

uci::type::EA_ResponseType& EA_ResponseType::setThreats(const uci::type::EA_TaskThreatsType& accessor) {
  enableThreats();
  if (&accessor != threats_Accessor.get()) {
    threats_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_ResponseType::hasThreats() const noexcept {
  return static_cast<bool>(threats_Accessor);
}

uci::type::EA_TaskThreatsType& EA_ResponseType::enableThreats(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_TaskThreatsType : type};
  if ((!threats_Accessor) || (threats_Accessor->getAccessorType() != requestedType)) {
    threats_Accessor = EA_TaskThreatsType::create(requestedType);
    if (!threats_Accessor) {
      throw uci::base::UCIException("Error in enableThreats(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *threats_Accessor;
}

uci::type::EA_ResponseType& EA_ResponseType::clearThreats() noexcept {
  threats_Accessor.reset();
  return *this;
}

std::unique_ptr<EA_ResponseType> EA_ResponseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_ResponseType : type};
  return (requestedType == uci::type::accessorType::eA_ResponseType) ? boost::make_unique<EA_ResponseType>() : nullptr;
}

/**  */
namespace EA_ResponseType_Names {

constexpr const char* Extern_Type_Name{"EA_ResponseType"};
constexpr const char* RouteRequirements_Name{"RouteRequirements"};
constexpr const char* ProtectedAssets_Name{"ProtectedAssets"};
constexpr const char* Threats_Name{"Threats"};

} // namespace EA_ResponseType_Names

void EA_ResponseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_ResponseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EA_ResponseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EA_ResponseType_Names::RouteRequirements_Name) {
      EA_TaskEscortType::deserialize(valueType.second, accessor.enableRouteRequirements(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_ResponseType_Names::ProtectedAssets_Name) {
      EA_TaskProtectedAssetsType::deserialize(valueType.second, accessor.enableProtectedAssets(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_ResponseType_Names::Threats_Name) {
      EA_TaskThreatsType::deserialize(valueType.second, accessor.enableThreats(), nodeName, nsPrefix);
    }
  }
}

std::string EA_ResponseType::serialize(const uci::type::EA_ResponseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EA_ResponseType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EA_ResponseType_Names::Extern_Type_Name);
  }
  if (accessor.hasRouteRequirements()) {
    EA_TaskEscortType::serialize(accessor.getRouteRequirements(), node, EA_ResponseType_Names::RouteRequirements_Name);
  }
  if (accessor.hasProtectedAssets()) {
    EA_TaskProtectedAssetsType::serialize(accessor.getProtectedAssets(), node, EA_ResponseType_Names::ProtectedAssets_Name);
  }
  if (accessor.hasThreats()) {
    EA_TaskThreatsType::serialize(accessor.getThreats(), node, EA_ResponseType_Names::Threats_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EA_ResponseType& EA_ResponseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EA_ResponseType>().release());
}

uci::type::EA_ResponseType& EA_ResponseType::create(const uci::type::EA_ResponseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EA_ResponseType> newAccessor{boost::make_unique<asb_uci::type::EA_ResponseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EA_ResponseType::destroy(uci::type::EA_ResponseType& accessor) {
  delete dynamic_cast<asb_uci::type::EA_ResponseType*>(&accessor);
}

} // namespace type

} // namespace uci

