/** @file ActionMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ActionMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActionID_Type.h"
#include "asb_uci/type/ActionTypeEnum.h"
#include "asb_uci/type/IdentityKindInstanceType.h"
#include "asb_uci/type/RequirementConstraintsType.h"
#include "asb_uci/type/RequirementGuidanceType.h"
#include "asb_uci/type/RequirementMetadataType.h"
#include "asb_uci/type/RequirementTargetConstraintsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActionID_Type.h"
#include "uci/type/ActionMDT.h"
#include "uci/type/ActionTypeEnum.h"
#include "uci/type/IdentityKindInstanceType.h"
#include "uci/type/RequirementConstraintsType.h"
#include "uci/type/RequirementGuidanceType.h"
#include "uci/type/RequirementMetadataType.h"
#include "uci/type/RequirementTargetConstraintsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ActionMDT::ActionMDT()
  : actionID_Accessor{boost::make_unique<ActionID_Type>()},
    actionType_Accessor{boost::make_unique<ActionTypeEnum>()},
    targetObject_Accessor{boost::make_unique<TargetObject>(0, SIZE_MAX)},
    secondaryObject_Accessor{boost::make_unique<SecondaryObject>(0, SIZE_MAX)} {
}

ActionMDT::~ActionMDT() = default;

void ActionMDT::copy(const uci::type::ActionMDT& accessor) {
  copyImpl(accessor, false);
}

void ActionMDT::copyImpl(const uci::type::ActionMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ActionMDT&>(accessor);
    setActionID(*(accessorImpl.actionID_Accessor));
    setActionType(*(accessorImpl.actionType_Accessor));
    if (accessorImpl.actionConstraints_Accessor) {
      setActionConstraints(*(accessorImpl.actionConstraints_Accessor));
    } else {
      actionConstraints_Accessor.reset();
    }
    if (accessorImpl.actionGuidance_Accessor) {
      setActionGuidance(*(accessorImpl.actionGuidance_Accessor));
    } else {
      actionGuidance_Accessor.reset();
    }
    setTargetObject(*(accessorImpl.targetObject_Accessor));
    if (accessorImpl.targetObjectConstraints_Accessor) {
      setTargetObjectConstraints(*(accessorImpl.targetObjectConstraints_Accessor));
    } else {
      targetObjectConstraints_Accessor.reset();
    }
    setSecondaryObject(*(accessorImpl.secondaryObject_Accessor));
    if (accessorImpl.metadata_Accessor) {
      setMetadata(*(accessorImpl.metadata_Accessor));
    } else {
      metadata_Accessor.reset();
    }
  }
}

void ActionMDT::reset() noexcept {
  actionID_Accessor->reset();
  actionType_Accessor->reset();
  actionConstraints_Accessor.reset();
  actionGuidance_Accessor.reset();
  targetObject_Accessor->reset();
  targetObjectConstraints_Accessor.reset();
  secondaryObject_Accessor->reset();
  metadata_Accessor.reset();
}

const uci::type::ActionID_Type& ActionMDT::getActionID() const {
  return *actionID_Accessor;
}

uci::type::ActionID_Type& ActionMDT::getActionID() {
  return *actionID_Accessor;
}

uci::type::ActionMDT& ActionMDT::setActionID(const uci::type::ActionID_Type& accessor) {
  if (&accessor != actionID_Accessor.get()) {
    actionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ActionTypeEnum& ActionMDT::getActionType() const {
  return *actionType_Accessor;
}

uci::type::ActionTypeEnum& ActionMDT::getActionType() {
  return *actionType_Accessor;
}

uci::type::ActionMDT& ActionMDT::setActionType(const uci::type::ActionTypeEnum& accessor) {
  if (&accessor != actionType_Accessor.get()) {
    actionType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ActionMDT& ActionMDT::setActionType(uci::type::ActionTypeEnum::EnumerationItem value) {
  actionType_Accessor->setValue(value);
  return *this;
}


uci::type::RequirementConstraintsType& ActionMDT::getActionConstraints_() const {
  if (actionConstraints_Accessor) {
    return *actionConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getActionConstraints(): An attempt was made to get an optional field that was not enabled, call hasActionConstraints() to determine if it is safe to call getActionConstraints()");
}

const uci::type::RequirementConstraintsType& ActionMDT::getActionConstraints() const {
  return getActionConstraints_();
}

uci::type::RequirementConstraintsType& ActionMDT::getActionConstraints() {
  return getActionConstraints_();
}

uci::type::ActionMDT& ActionMDT::setActionConstraints(const uci::type::RequirementConstraintsType& accessor) {
  enableActionConstraints();
  if (&accessor != actionConstraints_Accessor.get()) {
    actionConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActionMDT::hasActionConstraints() const noexcept {
  return static_cast<bool>(actionConstraints_Accessor);
}

uci::type::RequirementConstraintsType& ActionMDT::enableActionConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementConstraintsType : type};
  if ((!actionConstraints_Accessor) || (actionConstraints_Accessor->getAccessorType() != requestedType)) {
    actionConstraints_Accessor = RequirementConstraintsType::create(requestedType);
    if (!actionConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableActionConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *actionConstraints_Accessor;
}

uci::type::ActionMDT& ActionMDT::clearActionConstraints() noexcept {
  actionConstraints_Accessor.reset();
  return *this;
}

uci::type::RequirementGuidanceType& ActionMDT::getActionGuidance_() const {
  if (actionGuidance_Accessor) {
    return *actionGuidance_Accessor;
  }
  throw uci::base::UCIException("Error in getActionGuidance(): An attempt was made to get an optional field that was not enabled, call hasActionGuidance() to determine if it is safe to call getActionGuidance()");
}

const uci::type::RequirementGuidanceType& ActionMDT::getActionGuidance() const {
  return getActionGuidance_();
}

uci::type::RequirementGuidanceType& ActionMDT::getActionGuidance() {
  return getActionGuidance_();
}

uci::type::ActionMDT& ActionMDT::setActionGuidance(const uci::type::RequirementGuidanceType& accessor) {
  enableActionGuidance();
  if (&accessor != actionGuidance_Accessor.get()) {
    actionGuidance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActionMDT::hasActionGuidance() const noexcept {
  return static_cast<bool>(actionGuidance_Accessor);
}

uci::type::RequirementGuidanceType& ActionMDT::enableActionGuidance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementGuidanceType : type};
  if ((!actionGuidance_Accessor) || (actionGuidance_Accessor->getAccessorType() != requestedType)) {
    actionGuidance_Accessor = RequirementGuidanceType::create(requestedType);
    if (!actionGuidance_Accessor) {
      throw uci::base::UCIException("Error in enableActionGuidance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *actionGuidance_Accessor;
}

uci::type::ActionMDT& ActionMDT::clearActionGuidance() noexcept {
  actionGuidance_Accessor.reset();
  return *this;
}

const uci::type::ActionMDT::TargetObject& ActionMDT::getTargetObject() const {
  return *targetObject_Accessor;
}

uci::type::ActionMDT::TargetObject& ActionMDT::getTargetObject() {
  return *targetObject_Accessor;
}

uci::type::ActionMDT& ActionMDT::setTargetObject(const uci::type::ActionMDT::TargetObject& accessor) {
  if (&accessor != targetObject_Accessor.get()) {
    targetObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementTargetConstraintsType& ActionMDT::getTargetObjectConstraints_() const {
  if (targetObjectConstraints_Accessor) {
    return *targetObjectConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetObjectConstraints(): An attempt was made to get an optional field that was not enabled, call hasTargetObjectConstraints() to determine if it is safe to call getTargetObjectConstraints()");
}

const uci::type::RequirementTargetConstraintsType& ActionMDT::getTargetObjectConstraints() const {
  return getTargetObjectConstraints_();
}

uci::type::RequirementTargetConstraintsType& ActionMDT::getTargetObjectConstraints() {
  return getTargetObjectConstraints_();
}

uci::type::ActionMDT& ActionMDT::setTargetObjectConstraints(const uci::type::RequirementTargetConstraintsType& accessor) {
  enableTargetObjectConstraints();
  if (&accessor != targetObjectConstraints_Accessor.get()) {
    targetObjectConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActionMDT::hasTargetObjectConstraints() const noexcept {
  return static_cast<bool>(targetObjectConstraints_Accessor);
}

uci::type::RequirementTargetConstraintsType& ActionMDT::enableTargetObjectConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementTargetConstraintsType : type};
  if ((!targetObjectConstraints_Accessor) || (targetObjectConstraints_Accessor->getAccessorType() != requestedType)) {
    targetObjectConstraints_Accessor = RequirementTargetConstraintsType::create(requestedType);
    if (!targetObjectConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableTargetObjectConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *targetObjectConstraints_Accessor;
}

uci::type::ActionMDT& ActionMDT::clearTargetObjectConstraints() noexcept {
  targetObjectConstraints_Accessor.reset();
  return *this;
}

const uci::type::ActionMDT::SecondaryObject& ActionMDT::getSecondaryObject() const {
  return *secondaryObject_Accessor;
}

uci::type::ActionMDT::SecondaryObject& ActionMDT::getSecondaryObject() {
  return *secondaryObject_Accessor;
}

uci::type::ActionMDT& ActionMDT::setSecondaryObject(const uci::type::ActionMDT::SecondaryObject& accessor) {
  if (&accessor != secondaryObject_Accessor.get()) {
    secondaryObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementMetadataType& ActionMDT::getMetadata_() const {
  if (metadata_Accessor) {
    return *metadata_Accessor;
  }
  throw uci::base::UCIException("Error in getMetadata(): An attempt was made to get an optional field that was not enabled, call hasMetadata() to determine if it is safe to call getMetadata()");
}

const uci::type::RequirementMetadataType& ActionMDT::getMetadata() const {
  return getMetadata_();
}

uci::type::RequirementMetadataType& ActionMDT::getMetadata() {
  return getMetadata_();
}

uci::type::ActionMDT& ActionMDT::setMetadata(const uci::type::RequirementMetadataType& accessor) {
  enableMetadata();
  if (&accessor != metadata_Accessor.get()) {
    metadata_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActionMDT::hasMetadata() const noexcept {
  return static_cast<bool>(metadata_Accessor);
}

uci::type::RequirementMetadataType& ActionMDT::enableMetadata(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementMetadataType : type};
  if ((!metadata_Accessor) || (metadata_Accessor->getAccessorType() != requestedType)) {
    metadata_Accessor = RequirementMetadataType::create(requestedType);
    if (!metadata_Accessor) {
      throw uci::base::UCIException("Error in enableMetadata(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *metadata_Accessor;
}

uci::type::ActionMDT& ActionMDT::clearMetadata() noexcept {
  metadata_Accessor.reset();
  return *this;
}

std::unique_ptr<ActionMDT> ActionMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionMDT : type};
  return (requestedType == uci::type::accessorType::actionMDT) ? boost::make_unique<ActionMDT>() : nullptr;
}

/**  */
namespace ActionMDT_Names {

constexpr const char* Extern_Type_Name{"ActionMDT"};
constexpr const char* ActionID_Name{"ActionID"};
constexpr const char* ActionType_Name{"ActionType"};
constexpr const char* ActionConstraints_Name{"ActionConstraints"};
constexpr const char* ActionGuidance_Name{"ActionGuidance"};
constexpr const char* TargetObject_Name{"TargetObject"};
constexpr const char* TargetObjectConstraints_Name{"TargetObjectConstraints"};
constexpr const char* SecondaryObject_Name{"SecondaryObject"};
constexpr const char* Metadata_Name{"Metadata"};

} // namespace ActionMDT_Names

void ActionMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActionMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActionMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ActionMDT_Names::ActionID_Name) {
      ActionID_Type::deserialize(valueType.second, accessor.getActionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActionMDT_Names::ActionType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getActionType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ActionMDT_Names::ActionConstraints_Name) {
      RequirementConstraintsType::deserialize(valueType.second, accessor.enableActionConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActionMDT_Names::ActionGuidance_Name) {
      RequirementGuidanceType::deserialize(valueType.second, accessor.enableActionGuidance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActionMDT_Names::TargetObject_Name) {
      uci::type::ActionMDT::TargetObject& boundedList = accessor.getTargetObject();
      const uci::type::ActionMDT::TargetObject::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::IdentityKindInstanceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActionMDT_Names::TargetObjectConstraints_Name) {
      RequirementTargetConstraintsType::deserialize(valueType.second, accessor.enableTargetObjectConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActionMDT_Names::SecondaryObject_Name) {
      uci::type::ActionMDT::SecondaryObject& boundedList = accessor.getSecondaryObject();
      const uci::type::ActionMDT::SecondaryObject::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::IdentityKindInstanceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActionMDT_Names::Metadata_Name) {
      RequirementMetadataType::deserialize(valueType.second, accessor.enableMetadata(), nodeName, nsPrefix);
    }
  }
}

std::string ActionMDT::serialize(const uci::type::ActionMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ActionMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ActionMDT_Names::Extern_Type_Name);
  }
  ActionID_Type::serialize(accessor.getActionID(), node, ActionMDT_Names::ActionID_Name);
  ActionTypeEnum::serialize(accessor.getActionType(), node, ActionMDT_Names::ActionType_Name, false);
  if (accessor.hasActionConstraints()) {
    RequirementConstraintsType::serialize(accessor.getActionConstraints(), node, ActionMDT_Names::ActionConstraints_Name);
  }
  if (accessor.hasActionGuidance()) {
    RequirementGuidanceType::serialize(accessor.getActionGuidance(), node, ActionMDT_Names::ActionGuidance_Name);
  }
  {
    const uci::type::ActionMDT::TargetObject& boundedList = accessor.getTargetObject();
    for (uci::type::ActionMDT::TargetObject::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::IdentityKindInstanceType::serialize(boundedList.at(i), node, ActionMDT_Names::TargetObject_Name);
    }
  }
  if (accessor.hasTargetObjectConstraints()) {
    RequirementTargetConstraintsType::serialize(accessor.getTargetObjectConstraints(), node, ActionMDT_Names::TargetObjectConstraints_Name);
  }
  {
    const uci::type::ActionMDT::SecondaryObject& boundedList = accessor.getSecondaryObject();
    for (uci::type::ActionMDT::SecondaryObject::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::IdentityKindInstanceType::serialize(boundedList.at(i), node, ActionMDT_Names::SecondaryObject_Name);
    }
  }
  if (accessor.hasMetadata()) {
    RequirementMetadataType::serialize(accessor.getMetadata(), node, ActionMDT_Names::Metadata_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ActionMDT& ActionMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ActionMDT>().release());
}

uci::type::ActionMDT& ActionMDT::create(const uci::type::ActionMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ActionMDT> newAccessor{boost::make_unique<asb_uci::type::ActionMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ActionMDT::destroy(uci::type::ActionMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ActionMDT*>(&accessor);
}

} // namespace type

} // namespace uci

