/** @file StalenessDomainMobilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/StalenessDomainMobilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EnvironmentEnum.h"
#include "asb_uci/type/MobilityEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EnvironmentEnum.h"
#include "uci/type/MobilityEnum.h"
#include "uci/type/StalenessDomainMobilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StalenessDomainMobilityType::StalenessDomainMobilityType() = default;

StalenessDomainMobilityType::~StalenessDomainMobilityType() = default;

void StalenessDomainMobilityType::copy(const uci::type::StalenessDomainMobilityType& accessor) {
  copyImpl(accessor, false);
}

void StalenessDomainMobilityType::copyImpl(const uci::type::StalenessDomainMobilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const StalenessDomainMobilityType&>(accessor);
    if (accessorImpl.domain_Accessor) {
      setDomain(*(accessorImpl.domain_Accessor));
    } else {
      domain_Accessor.reset();
    }
    if (accessorImpl.mobility_Accessor) {
      setMobility(*(accessorImpl.mobility_Accessor));
    } else {
      mobility_Accessor.reset();
    }
  }
}

void StalenessDomainMobilityType::reset() noexcept {
  domain_Accessor.reset();
  mobility_Accessor.reset();
}

uci::type::EnvironmentEnum& StalenessDomainMobilityType::getDomain_() const {
  if (domain_Accessor) {
    return *domain_Accessor;
  }
  throw uci::base::UCIException("Error in getDomain(): An attempt was made to get an optional field that was not enabled, call hasDomain() to determine if it is safe to call getDomain()");
}

const uci::type::EnvironmentEnum& StalenessDomainMobilityType::getDomain() const {
  return getDomain_();
}

uci::type::EnvironmentEnum& StalenessDomainMobilityType::getDomain() {
  return getDomain_();
}

uci::type::StalenessDomainMobilityType& StalenessDomainMobilityType::setDomain(const uci::type::EnvironmentEnum& accessor) {
  enableDomain();
  if (&accessor != domain_Accessor.get()) {
    domain_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::StalenessDomainMobilityType& StalenessDomainMobilityType::setDomain(const uci::type::EnvironmentEnum::EnumerationItem value) {
  enableDomain().setValue(value);
  return *this;
}

bool StalenessDomainMobilityType::hasDomain() const noexcept {
  return static_cast<bool>(domain_Accessor);
}

uci::type::EnvironmentEnum& StalenessDomainMobilityType::enableDomain(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::environmentEnum : type};
  if ((!domain_Accessor) || (domain_Accessor->getAccessorType() != requestedType)) {
    domain_Accessor = EnvironmentEnum::create(requestedType);
    if (!domain_Accessor) {
      throw uci::base::UCIException("Error in enableDomain(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *domain_Accessor;
}

uci::type::StalenessDomainMobilityType& StalenessDomainMobilityType::clearDomain() noexcept {
  domain_Accessor.reset();
  return *this;
}

uci::type::MobilityEnum& StalenessDomainMobilityType::getMobility_() const {
  if (mobility_Accessor) {
    return *mobility_Accessor;
  }
  throw uci::base::UCIException("Error in getMobility(): An attempt was made to get an optional field that was not enabled, call hasMobility() to determine if it is safe to call getMobility()");
}

const uci::type::MobilityEnum& StalenessDomainMobilityType::getMobility() const {
  return getMobility_();
}

uci::type::MobilityEnum& StalenessDomainMobilityType::getMobility() {
  return getMobility_();
}

uci::type::StalenessDomainMobilityType& StalenessDomainMobilityType::setMobility(const uci::type::MobilityEnum& accessor) {
  enableMobility();
  if (&accessor != mobility_Accessor.get()) {
    mobility_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::StalenessDomainMobilityType& StalenessDomainMobilityType::setMobility(const uci::type::MobilityEnum::EnumerationItem value) {
  enableMobility().setValue(value);
  return *this;
}

bool StalenessDomainMobilityType::hasMobility() const noexcept {
  return static_cast<bool>(mobility_Accessor);
}

uci::type::MobilityEnum& StalenessDomainMobilityType::enableMobility(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mobilityEnum : type};
  if ((!mobility_Accessor) || (mobility_Accessor->getAccessorType() != requestedType)) {
    mobility_Accessor = MobilityEnum::create(requestedType);
    if (!mobility_Accessor) {
      throw uci::base::UCIException("Error in enableMobility(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mobility_Accessor;
}

uci::type::StalenessDomainMobilityType& StalenessDomainMobilityType::clearMobility() noexcept {
  mobility_Accessor.reset();
  return *this;
}

std::unique_ptr<StalenessDomainMobilityType> StalenessDomainMobilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::stalenessDomainMobilityType : type};
  return (requestedType == uci::type::accessorType::stalenessDomainMobilityType) ? boost::make_unique<StalenessDomainMobilityType>() : nullptr;
}

/**  */
namespace StalenessDomainMobilityType_Names {

constexpr const char* Extern_Type_Name{"StalenessDomainMobilityType"};
constexpr const char* Domain_Name{"Domain"};
constexpr const char* Mobility_Name{"Mobility"};

} // namespace StalenessDomainMobilityType_Names

void StalenessDomainMobilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StalenessDomainMobilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StalenessDomainMobilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StalenessDomainMobilityType_Names::Domain_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableDomain().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + StalenessDomainMobilityType_Names::Mobility_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMobility().setValueFromName(*value);
      }
    }
  }
}

std::string StalenessDomainMobilityType::serialize(const uci::type::StalenessDomainMobilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StalenessDomainMobilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StalenessDomainMobilityType_Names::Extern_Type_Name);
  }
  if (accessor.hasDomain()) {
    EnvironmentEnum::serialize(accessor.getDomain(), node, StalenessDomainMobilityType_Names::Domain_Name, false);
  }
  if (accessor.hasMobility()) {
    MobilityEnum::serialize(accessor.getMobility(), node, StalenessDomainMobilityType_Names::Mobility_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StalenessDomainMobilityType& StalenessDomainMobilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StalenessDomainMobilityType>().release());
}

uci::type::StalenessDomainMobilityType& StalenessDomainMobilityType::create(const uci::type::StalenessDomainMobilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StalenessDomainMobilityType> newAccessor{boost::make_unique<asb_uci::type::StalenessDomainMobilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StalenessDomainMobilityType::destroy(uci::type::StalenessDomainMobilityType& accessor) {
  delete dynamic_cast<asb_uci::type::StalenessDomainMobilityType*>(&accessor);
}

} // namespace type

} // namespace uci

