/** @file GatewayActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/GatewayActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityBaseType.h"
#include "../../../include/asb_uci/type/CommConnectionStateEnum.h"
#include "../../../include/asb_uci/type/CommProfileID_Type.h"
#include "../../../include/asb_uci/type/DataDeliveryType.h"
#include "../../../include/asb_uci/type/GatewayConfigurationType.h"
#include "../../../include/asb_uci/type/GatewayControlType.h"
#include "../../../include/asb_uci/type/GatewayLinkStatisticsType.h"
#include "../../../include/asb_uci/type/VerboseStatusType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommConnectionStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommProfileID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataDeliveryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayActivityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayConfigurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayControlType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayLinkStatisticsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VerboseStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

GatewayActivityType::GatewayActivityType()
  : gatewayConfiguration_Accessor{boost::make_unique<GatewayConfiguration>(0, SIZE_MAX)},
    assuredTransmission_Accessor{boost::make_unique<AssuredTransmission>(0, SIZE_MAX)},
    assuredDelivery_Accessor{boost::make_unique<AssuredDelivery>(0, SIZE_MAX)},
    linkStatistics_Accessor{boost::make_unique<LinkStatistics>(0, SIZE_MAX)} {
}

GatewayActivityType::~GatewayActivityType() = default;

void GatewayActivityType::copy(const uci::type::GatewayActivityType& accessor) {
  copyImpl(accessor, false);
}

void GatewayActivityType::copyImpl(const uci::type::GatewayActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ActivityBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const GatewayActivityType&>(accessor);
    if (accessorImpl.connectionStatus_Accessor) {
      setConnectionStatus(*(accessorImpl.connectionStatus_Accessor));
    } else {
      connectionStatus_Accessor.reset();
    }
    if (accessorImpl.commonSettingsStatus_Accessor) {
      setCommonSettingsStatus(*(accessorImpl.commonSettingsStatus_Accessor));
    } else {
      commonSettingsStatus_Accessor.reset();
    }
    setGatewayConfiguration(*(accessorImpl.gatewayConfiguration_Accessor));
    setAssuredTransmission(*(accessorImpl.assuredTransmission_Accessor));
    setAssuredDelivery(*(accessorImpl.assuredDelivery_Accessor));
    if (accessorImpl.currentProfileID_Accessor) {
      setCurrentProfileID(*(accessorImpl.currentProfileID_Accessor));
    } else {
      currentProfileID_Accessor.reset();
    }
    setLinkStatistics(*(accessorImpl.linkStatistics_Accessor));
    if (accessorImpl.verboseStatus_Accessor) {
      setVerboseStatus(*(accessorImpl.verboseStatus_Accessor));
    } else {
      verboseStatus_Accessor.reset();
    }
  }
}

void GatewayActivityType::reset() noexcept {
  ActivityBaseType::reset();
  connectionStatus_Accessor.reset();
  commonSettingsStatus_Accessor.reset();
  gatewayConfiguration_Accessor->reset();
  assuredTransmission_Accessor->reset();
  assuredDelivery_Accessor->reset();
  currentProfileID_Accessor.reset();
  linkStatistics_Accessor->reset();
  verboseStatus_Accessor.reset();
}

uci::type::CommConnectionStateEnum& GatewayActivityType::getConnectionStatus_() const {
  if (connectionStatus_Accessor) {
    return *connectionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getConnectionStatus(): An attempt was made to get an optional field that was not enabled, call hasConnectionStatus() to determine if it is safe to call getConnectionStatus()");
}

const uci::type::CommConnectionStateEnum& GatewayActivityType::getConnectionStatus() const {
  return getConnectionStatus_();
}

uci::type::CommConnectionStateEnum& GatewayActivityType::getConnectionStatus() {
  return getConnectionStatus_();
}

uci::type::GatewayActivityType& GatewayActivityType::setConnectionStatus(const uci::type::CommConnectionStateEnum& accessor) {
  enableConnectionStatus();
  if (&accessor != connectionStatus_Accessor.get()) {
    connectionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::GatewayActivityType& GatewayActivityType::setConnectionStatus(const uci::type::CommConnectionStateEnum::EnumerationItem value) {
  enableConnectionStatus().setValue(value);
  return *this;
}

bool GatewayActivityType::hasConnectionStatus() const noexcept {
  return static_cast<bool>(connectionStatus_Accessor);
}

uci::type::CommConnectionStateEnum& GatewayActivityType::enableConnectionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commConnectionStateEnum : type};
  if ((!connectionStatus_Accessor) || (connectionStatus_Accessor->getAccessorType() != requestedType)) {
    connectionStatus_Accessor = CommConnectionStateEnum::create(requestedType);
    if (!connectionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableConnectionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *connectionStatus_Accessor;
}

uci::type::GatewayActivityType& GatewayActivityType::clearConnectionStatus() noexcept {
  connectionStatus_Accessor.reset();
  return *this;
}

uci::type::GatewayControlType& GatewayActivityType::getCommonSettingsStatus_() const {
  if (commonSettingsStatus_Accessor) {
    return *commonSettingsStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getCommonSettingsStatus(): An attempt was made to get an optional field that was not enabled, call hasCommonSettingsStatus() to determine if it is safe to call getCommonSettingsStatus()");
}

const uci::type::GatewayControlType& GatewayActivityType::getCommonSettingsStatus() const {
  return getCommonSettingsStatus_();
}

uci::type::GatewayControlType& GatewayActivityType::getCommonSettingsStatus() {
  return getCommonSettingsStatus_();
}

uci::type::GatewayActivityType& GatewayActivityType::setCommonSettingsStatus(const uci::type::GatewayControlType& accessor) {
  enableCommonSettingsStatus();
  if (&accessor != commonSettingsStatus_Accessor.get()) {
    commonSettingsStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayActivityType::hasCommonSettingsStatus() const noexcept {
  return static_cast<bool>(commonSettingsStatus_Accessor);
}

uci::type::GatewayControlType& GatewayActivityType::enableCommonSettingsStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayControlType : type};
  if ((!commonSettingsStatus_Accessor) || (commonSettingsStatus_Accessor->getAccessorType() != requestedType)) {
    commonSettingsStatus_Accessor = GatewayControlType::create(requestedType);
    if (!commonSettingsStatus_Accessor) {
      throw uci::base::UCIException("Error in enableCommonSettingsStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commonSettingsStatus_Accessor;
}

uci::type::GatewayActivityType& GatewayActivityType::clearCommonSettingsStatus() noexcept {
  commonSettingsStatus_Accessor.reset();
  return *this;
}

const uci::type::GatewayActivityType::GatewayConfiguration& GatewayActivityType::getGatewayConfiguration() const {
  return *gatewayConfiguration_Accessor;
}

uci::type::GatewayActivityType::GatewayConfiguration& GatewayActivityType::getGatewayConfiguration() {
  return *gatewayConfiguration_Accessor;
}

uci::type::GatewayActivityType& GatewayActivityType::setGatewayConfiguration(const uci::type::GatewayActivityType::GatewayConfiguration& accessor) {
  if (&accessor != gatewayConfiguration_Accessor.get()) {
    gatewayConfiguration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::GatewayActivityType::AssuredTransmission& GatewayActivityType::getAssuredTransmission() const {
  return *assuredTransmission_Accessor;
}

uci::type::GatewayActivityType::AssuredTransmission& GatewayActivityType::getAssuredTransmission() {
  return *assuredTransmission_Accessor;
}

uci::type::GatewayActivityType& GatewayActivityType::setAssuredTransmission(const uci::type::GatewayActivityType::AssuredTransmission& accessor) {
  if (&accessor != assuredTransmission_Accessor.get()) {
    assuredTransmission_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::GatewayActivityType::AssuredDelivery& GatewayActivityType::getAssuredDelivery() const {
  return *assuredDelivery_Accessor;
}

uci::type::GatewayActivityType::AssuredDelivery& GatewayActivityType::getAssuredDelivery() {
  return *assuredDelivery_Accessor;
}

uci::type::GatewayActivityType& GatewayActivityType::setAssuredDelivery(const uci::type::GatewayActivityType::AssuredDelivery& accessor) {
  if (&accessor != assuredDelivery_Accessor.get()) {
    assuredDelivery_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommProfileID_Type& GatewayActivityType::getCurrentProfileID_() const {
  if (currentProfileID_Accessor) {
    return *currentProfileID_Accessor;
  }
  throw uci::base::UCIException("Error in getCurrentProfileID(): An attempt was made to get an optional field that was not enabled, call hasCurrentProfileID() to determine if it is safe to call getCurrentProfileID()");
}

const uci::type::CommProfileID_Type& GatewayActivityType::getCurrentProfileID() const {
  return getCurrentProfileID_();
}

uci::type::CommProfileID_Type& GatewayActivityType::getCurrentProfileID() {
  return getCurrentProfileID_();
}

uci::type::GatewayActivityType& GatewayActivityType::setCurrentProfileID(const uci::type::CommProfileID_Type& accessor) {
  enableCurrentProfileID();
  if (&accessor != currentProfileID_Accessor.get()) {
    currentProfileID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayActivityType::hasCurrentProfileID() const noexcept {
  return static_cast<bool>(currentProfileID_Accessor);
}

uci::type::CommProfileID_Type& GatewayActivityType::enableCurrentProfileID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commProfileID_Type : type};
  if ((!currentProfileID_Accessor) || (currentProfileID_Accessor->getAccessorType() != requestedType)) {
    currentProfileID_Accessor = CommProfileID_Type::create(requestedType);
    if (!currentProfileID_Accessor) {
      throw uci::base::UCIException("Error in enableCurrentProfileID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *currentProfileID_Accessor;
}

uci::type::GatewayActivityType& GatewayActivityType::clearCurrentProfileID() noexcept {
  currentProfileID_Accessor.reset();
  return *this;
}

const uci::type::GatewayActivityType::LinkStatistics& GatewayActivityType::getLinkStatistics() const {
  return *linkStatistics_Accessor;
}

uci::type::GatewayActivityType::LinkStatistics& GatewayActivityType::getLinkStatistics() {
  return *linkStatistics_Accessor;
}

uci::type::GatewayActivityType& GatewayActivityType::setLinkStatistics(const uci::type::GatewayActivityType::LinkStatistics& accessor) {
  if (&accessor != linkStatistics_Accessor.get()) {
    linkStatistics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VerboseStatusType& GatewayActivityType::getVerboseStatus_() const {
  if (verboseStatus_Accessor) {
    return *verboseStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getVerboseStatus(): An attempt was made to get an optional field that was not enabled, call hasVerboseStatus() to determine if it is safe to call getVerboseStatus()");
}

const uci::type::VerboseStatusType& GatewayActivityType::getVerboseStatus() const {
  return getVerboseStatus_();
}

uci::type::VerboseStatusType& GatewayActivityType::getVerboseStatus() {
  return getVerboseStatus_();
}

uci::type::GatewayActivityType& GatewayActivityType::setVerboseStatus(const uci::type::VerboseStatusType& accessor) {
  enableVerboseStatus();
  if (&accessor != verboseStatus_Accessor.get()) {
    verboseStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayActivityType::hasVerboseStatus() const noexcept {
  return static_cast<bool>(verboseStatus_Accessor);
}

uci::type::VerboseStatusType& GatewayActivityType::enableVerboseStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::verboseStatusType : type};
  if ((!verboseStatus_Accessor) || (verboseStatus_Accessor->getAccessorType() != requestedType)) {
    verboseStatus_Accessor = VerboseStatusType::create(requestedType);
    if (!verboseStatus_Accessor) {
      throw uci::base::UCIException("Error in enableVerboseStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *verboseStatus_Accessor;
}

uci::type::GatewayActivityType& GatewayActivityType::clearVerboseStatus() noexcept {
  verboseStatus_Accessor.reset();
  return *this;
}

std::unique_ptr<GatewayActivityType> GatewayActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayActivityType : type};
  return (requestedType == uci::type::accessorType::gatewayActivityType) ? boost::make_unique<GatewayActivityType>() : nullptr;
}

/**  */
namespace GatewayActivityType_Names {

constexpr const char* Extern_Type_Name{"GatewayActivityType"};
constexpr const char* ConnectionStatus_Name{"ConnectionStatus"};
constexpr const char* CommonSettingsStatus_Name{"CommonSettingsStatus"};
constexpr const char* GatewayConfiguration_Name{"GatewayConfiguration"};
constexpr const char* AssuredTransmission_Name{"AssuredTransmission"};
constexpr const char* AssuredDelivery_Name{"AssuredDelivery"};
constexpr const char* CurrentProfileID_Name{"CurrentProfileID"};
constexpr const char* LinkStatistics_Name{"LinkStatistics"};
constexpr const char* VerboseStatus_Name{"VerboseStatus"};

} // namespace GatewayActivityType_Names

void GatewayActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::GatewayActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = GatewayActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + GatewayActivityType_Names::ConnectionStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableConnectionStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + GatewayActivityType_Names::CommonSettingsStatus_Name) {
      GatewayControlType::deserialize(valueType.second, accessor.enableCommonSettingsStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayActivityType_Names::GatewayConfiguration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::GatewayActivityType::GatewayConfiguration& boundedList = accessor.getGatewayConfiguration();
        const uci::type::GatewayActivityType::GatewayConfiguration::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::GatewayConfigurationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + GatewayActivityType_Names::AssuredTransmission_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::GatewayActivityType::AssuredTransmission& boundedList = accessor.getAssuredTransmission();
        const uci::type::GatewayActivityType::AssuredTransmission::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DataDeliveryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + GatewayActivityType_Names::AssuredDelivery_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::GatewayActivityType::AssuredDelivery& boundedList = accessor.getAssuredDelivery();
        const uci::type::GatewayActivityType::AssuredDelivery::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DataDeliveryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + GatewayActivityType_Names::CurrentProfileID_Name) {
      CommProfileID_Type::deserialize(valueType.second, accessor.enableCurrentProfileID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayActivityType_Names::LinkStatistics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::GatewayActivityType::LinkStatistics& boundedList = accessor.getLinkStatistics();
        const uci::type::GatewayActivityType::LinkStatistics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::GatewayLinkStatisticsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + GatewayActivityType_Names::VerboseStatus_Name) {
      VerboseStatusType::deserialize(valueType.second, accessor.enableVerboseStatus(), nodeName, nsPrefix);
    }
  }
  ActivityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string GatewayActivityType::serialize(const uci::type::GatewayActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? GatewayActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, GatewayActivityType_Names::Extern_Type_Name);
  }
  ActivityBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasConnectionStatus()) {
    CommConnectionStateEnum::serialize(accessor.getConnectionStatus(), node, GatewayActivityType_Names::ConnectionStatus_Name, false);
  }
  if (accessor.hasCommonSettingsStatus()) {
    GatewayControlType::serialize(accessor.getCommonSettingsStatus(), node, GatewayActivityType_Names::CommonSettingsStatus_Name);
  }
  {
    const uci::type::GatewayActivityType::GatewayConfiguration& boundedList = accessor.getGatewayConfiguration();
    for (uci::type::GatewayActivityType::GatewayConfiguration::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::GatewayConfigurationType::serialize(boundedList.at(i), node, GatewayActivityType_Names::GatewayConfiguration_Name);
    }
  }
  {
    const uci::type::GatewayActivityType::AssuredTransmission& boundedList = accessor.getAssuredTransmission();
    for (uci::type::GatewayActivityType::AssuredTransmission::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DataDeliveryType::serialize(boundedList.at(i), node, GatewayActivityType_Names::AssuredTransmission_Name);
    }
  }
  {
    const uci::type::GatewayActivityType::AssuredDelivery& boundedList = accessor.getAssuredDelivery();
    for (uci::type::GatewayActivityType::AssuredDelivery::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DataDeliveryType::serialize(boundedList.at(i), node, GatewayActivityType_Names::AssuredDelivery_Name);
    }
  }
  if (accessor.hasCurrentProfileID()) {
    CommProfileID_Type::serialize(accessor.getCurrentProfileID(), node, GatewayActivityType_Names::CurrentProfileID_Name);
  }
  {
    const uci::type::GatewayActivityType::LinkStatistics& boundedList = accessor.getLinkStatistics();
    for (uci::type::GatewayActivityType::LinkStatistics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::GatewayLinkStatisticsType::serialize(boundedList.at(i), node, GatewayActivityType_Names::LinkStatistics_Name);
    }
  }
  if (accessor.hasVerboseStatus()) {
    VerboseStatusType::serialize(accessor.getVerboseStatus(), node, GatewayActivityType_Names::VerboseStatus_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::GatewayActivityType& GatewayActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::GatewayActivityType>().release());
}

uci::type::GatewayActivityType& GatewayActivityType::create(const uci::type::GatewayActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::GatewayActivityType> newAccessor{boost::make_unique<asb_uci::type::GatewayActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void GatewayActivityType::destroy(uci::type::GatewayActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::GatewayActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

