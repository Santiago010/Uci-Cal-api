/** @file ApprovalPolicyBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ApprovalPolicyBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ApprovalRequirementEnum.h"
#include "../../../include/asb_uci/type/DefaultResponseType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApprovalPolicyBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApprovalRequirementEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DefaultResponseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ApprovalPolicyBaseType::ApprovalPolicyBaseType()
  : policy_Accessor{boost::make_unique<ApprovalRequirementEnum>()} {
}

ApprovalPolicyBaseType::~ApprovalPolicyBaseType() = default;

void ApprovalPolicyBaseType::copy(const uci::type::ApprovalPolicyBaseType& accessor) {
  copyImpl(accessor, false);
}

void ApprovalPolicyBaseType::copyImpl(const uci::type::ApprovalPolicyBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::approvalPolicyBaseType)) {
      const auto& accessorImpl = dynamic_cast<const ApprovalPolicyBaseType&>(accessor);
      setPolicy(*(accessorImpl.policy_Accessor));
      if (accessorImpl.timeoutPolicy_Accessor) {
        setTimeoutPolicy(*(accessorImpl.timeoutPolicy_Accessor));
      } else {
        timeoutPolicy_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void ApprovalPolicyBaseType::reset() noexcept {
  policy_Accessor->reset();
  timeoutPolicy_Accessor.reset();
}

const uci::type::ApprovalRequirementEnum& ApprovalPolicyBaseType::getPolicy() const {
  return *policy_Accessor;
}

uci::type::ApprovalRequirementEnum& ApprovalPolicyBaseType::getPolicy() {
  return *policy_Accessor;
}

uci::type::ApprovalPolicyBaseType& ApprovalPolicyBaseType::setPolicy(const uci::type::ApprovalRequirementEnum& accessor) {
  if (&accessor != policy_Accessor.get()) {
    policy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ApprovalPolicyBaseType& ApprovalPolicyBaseType::setPolicy(uci::type::ApprovalRequirementEnum::EnumerationItem value) {
  policy_Accessor->setValue(value);
  return *this;
}


uci::type::DefaultResponseType& ApprovalPolicyBaseType::getTimeoutPolicy_() const {
  if (timeoutPolicy_Accessor) {
    return *timeoutPolicy_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeoutPolicy(): An attempt was made to get an optional field that was not enabled, call hasTimeoutPolicy() to determine if it is safe to call getTimeoutPolicy()");
}

const uci::type::DefaultResponseType& ApprovalPolicyBaseType::getTimeoutPolicy() const {
  return getTimeoutPolicy_();
}

uci::type::DefaultResponseType& ApprovalPolicyBaseType::getTimeoutPolicy() {
  return getTimeoutPolicy_();
}

uci::type::ApprovalPolicyBaseType& ApprovalPolicyBaseType::setTimeoutPolicy(const uci::type::DefaultResponseType& accessor) {
  enableTimeoutPolicy();
  if (&accessor != timeoutPolicy_Accessor.get()) {
    timeoutPolicy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ApprovalPolicyBaseType::hasTimeoutPolicy() const noexcept {
  return static_cast<bool>(timeoutPolicy_Accessor);
}

uci::type::DefaultResponseType& ApprovalPolicyBaseType::enableTimeoutPolicy(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::defaultResponseType : type};
  if ((!timeoutPolicy_Accessor) || (timeoutPolicy_Accessor->getAccessorType() != requestedType)) {
    timeoutPolicy_Accessor = DefaultResponseType::create(requestedType);
    if (!timeoutPolicy_Accessor) {
      throw uci::base::UCIException("Error in enableTimeoutPolicy(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timeoutPolicy_Accessor;
}

uci::type::ApprovalPolicyBaseType& ApprovalPolicyBaseType::clearTimeoutPolicy() noexcept {
  timeoutPolicy_Accessor.reset();
  return *this;
}

std::unique_ptr<ApprovalPolicyBaseType> ApprovalPolicyBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::approvalPolicyBaseType : type};
  return std::unique_ptr<ApprovalPolicyBaseType>(dynamic_cast<ApprovalPolicyBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace ApprovalPolicyBaseType_Names {

constexpr const char* Extern_Type_Name{"ApprovalPolicyBaseType"};
constexpr const char* Policy_Name{"Policy"};
constexpr const char* TimeoutPolicy_Name{"TimeoutPolicy"};

} // namespace ApprovalPolicyBaseType_Names

void ApprovalPolicyBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ApprovalPolicyBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ApprovalPolicyBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ApprovalPolicyBaseType_Names::Policy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPolicy().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ApprovalPolicyBaseType_Names::TimeoutPolicy_Name) {
      DefaultResponseType::deserialize(valueType.second, accessor.enableTimeoutPolicy(), nodeName, nsPrefix);
    }
  }
}

std::string ApprovalPolicyBaseType::serialize(const uci::type::ApprovalPolicyBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ApprovalPolicyBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::approvalPolicyBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, ApprovalPolicyBaseType_Names::Extern_Type_Name);
    }
    ApprovalRequirementEnum::serialize(accessor.getPolicy(), node, ApprovalPolicyBaseType_Names::Policy_Name, false);
    if (accessor.hasTimeoutPolicy()) {
      DefaultResponseType::serialize(accessor.getTimeoutPolicy(), node, ApprovalPolicyBaseType_Names::TimeoutPolicy_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ApprovalPolicyBaseType& ApprovalPolicyBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ApprovalPolicyBaseType>().release());
}

uci::type::ApprovalPolicyBaseType& ApprovalPolicyBaseType::create(const uci::type::ApprovalPolicyBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ApprovalPolicyBaseType> newAccessor{boost::make_unique<asb_uci::type::ApprovalPolicyBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ApprovalPolicyBaseType::destroy(uci::type::ApprovalPolicyBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::ApprovalPolicyBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

