/** @file RF_ResourceAllocationRequestDigitalRemovalType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RF_ResourceAllocationRequestDigitalRemovalType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/MFA_AddressType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MFA_AddressType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_ResourceAllocationRequestDigitalRemovalType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RF_ResourceAllocationRequestDigitalRemovalType::RF_ResourceAllocationRequestDigitalRemovalType()
  : mFA_Address_Accessor{boost::make_unique<MFA_Address>(1, SIZE_MAX)} {
}

RF_ResourceAllocationRequestDigitalRemovalType::~RF_ResourceAllocationRequestDigitalRemovalType() = default;

void RF_ResourceAllocationRequestDigitalRemovalType::copy(const uci::type::RF_ResourceAllocationRequestDigitalRemovalType& accessor) {
  copyImpl(accessor, false);
}

void RF_ResourceAllocationRequestDigitalRemovalType::copyImpl(const uci::type::RF_ResourceAllocationRequestDigitalRemovalType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RF_ResourceAllocationRequestDigitalRemovalType&>(accessor);
    if (accessorImpl.hasStreamIndex()) {
      setStreamIndex(accessorImpl.getStreamIndex());
    } else {
      clearStreamIndex();
    }
    setMFA_Address(*(accessorImpl.mFA_Address_Accessor));
  }
}

void RF_ResourceAllocationRequestDigitalRemovalType::reset() noexcept {
  clearStreamIndex();
  mFA_Address_Accessor->reset();
}

xs::UnsignedInt RF_ResourceAllocationRequestDigitalRemovalType::getStreamIndex() const {
  if (streamIndex_Accessor) {
    return *streamIndex_Accessor;
  }
  throw uci::base::UCIException("Error in getStreamIndex(): An attempt was made to get an optional field that was not enabled, call hasStreamIndex() to determine if it is safe to call getStreamIndex()");
}

uci::type::RF_ResourceAllocationRequestDigitalRemovalType& RF_ResourceAllocationRequestDigitalRemovalType::setStreamIndex(xs::UnsignedInt value) {
  streamIndex_Accessor = value;
  return *this;
}

bool RF_ResourceAllocationRequestDigitalRemovalType::hasStreamIndex() const noexcept {
  return streamIndex_Accessor.has_value();
}

uci::type::RF_ResourceAllocationRequestDigitalRemovalType& RF_ResourceAllocationRequestDigitalRemovalType::clearStreamIndex() noexcept {
  streamIndex_Accessor.reset();
  return *this;
}

const uci::type::RF_ResourceAllocationRequestDigitalRemovalType::MFA_Address& RF_ResourceAllocationRequestDigitalRemovalType::getMFA_Address() const {
  return *mFA_Address_Accessor;
}

uci::type::RF_ResourceAllocationRequestDigitalRemovalType::MFA_Address& RF_ResourceAllocationRequestDigitalRemovalType::getMFA_Address() {
  return *mFA_Address_Accessor;
}

uci::type::RF_ResourceAllocationRequestDigitalRemovalType& RF_ResourceAllocationRequestDigitalRemovalType::setMFA_Address(const uci::type::RF_ResourceAllocationRequestDigitalRemovalType::MFA_Address& accessor) {
  if (&accessor != mFA_Address_Accessor.get()) {
    mFA_Address_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RF_ResourceAllocationRequestDigitalRemovalType> RF_ResourceAllocationRequestDigitalRemovalType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_ResourceAllocationRequestDigitalRemovalType : type};
  return (requestedType == uci::type::accessorType::rF_ResourceAllocationRequestDigitalRemovalType) ? boost::make_unique<RF_ResourceAllocationRequestDigitalRemovalType>() : nullptr;
}

/**  */
namespace RF_ResourceAllocationRequestDigitalRemovalType_Names {

constexpr const char* Extern_Type_Name{"RF_ResourceAllocationRequestDigitalRemovalType"};
constexpr const char* StreamIndex_Name{"StreamIndex"};
constexpr const char* MFA_Address_Name{"MFA_Address"};

} // namespace RF_ResourceAllocationRequestDigitalRemovalType_Names

void RF_ResourceAllocationRequestDigitalRemovalType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_ResourceAllocationRequestDigitalRemovalType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RF_ResourceAllocationRequestDigitalRemovalType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RF_ResourceAllocationRequestDigitalRemovalType_Names::StreamIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStreamIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + RF_ResourceAllocationRequestDigitalRemovalType_Names::MFA_Address_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_ResourceAllocationRequestDigitalRemovalType::MFA_Address& boundedList = accessor.getMFA_Address();
        const uci::type::RF_ResourceAllocationRequestDigitalRemovalType::MFA_Address::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MFA_AddressType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string RF_ResourceAllocationRequestDigitalRemovalType::serialize(const uci::type::RF_ResourceAllocationRequestDigitalRemovalType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RF_ResourceAllocationRequestDigitalRemovalType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RF_ResourceAllocationRequestDigitalRemovalType_Names::Extern_Type_Name);
  }
  if (accessor.hasStreamIndex()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getStreamIndex(), node, RF_ResourceAllocationRequestDigitalRemovalType_Names::StreamIndex_Name);
  }
  {
    const uci::type::RF_ResourceAllocationRequestDigitalRemovalType::MFA_Address& boundedList = accessor.getMFA_Address();
    for (uci::type::RF_ResourceAllocationRequestDigitalRemovalType::MFA_Address::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::MFA_AddressType::serialize(boundedList.at(i), node, RF_ResourceAllocationRequestDigitalRemovalType_Names::MFA_Address_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RF_ResourceAllocationRequestDigitalRemovalType& RF_ResourceAllocationRequestDigitalRemovalType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RF_ResourceAllocationRequestDigitalRemovalType>().release());
}

uci::type::RF_ResourceAllocationRequestDigitalRemovalType& RF_ResourceAllocationRequestDigitalRemovalType::create(const uci::type::RF_ResourceAllocationRequestDigitalRemovalType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RF_ResourceAllocationRequestDigitalRemovalType> newAccessor{boost::make_unique<asb_uci::type::RF_ResourceAllocationRequestDigitalRemovalType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RF_ResourceAllocationRequestDigitalRemovalType::destroy(uci::type::RF_ResourceAllocationRequestDigitalRemovalType& accessor) {
  delete dynamic_cast<asb_uci::type::RF_ResourceAllocationRequestDigitalRemovalType*>(&accessor);
}

} // namespace type

} // namespace uci

