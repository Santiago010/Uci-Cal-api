/** @file VulnerabilityMetricsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/VulnerabilityMetricsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/RouteVulnerabilityType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RouteVulnerabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VulnerabilityMetricsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VulnerabilityMetricsType::VulnerabilityMetricsType() = default;

VulnerabilityMetricsType::~VulnerabilityMetricsType() = default;

void VulnerabilityMetricsType::copy(const uci::type::VulnerabilityMetricsType& accessor) {
  copyImpl(accessor, false);
}

void VulnerabilityMetricsType::copyImpl(const uci::type::VulnerabilityMetricsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VulnerabilityMetricsType&>(accessor);
    if (accessorImpl.acquisitionMetrics_Accessor) {
      setAcquisitionMetrics(*(accessorImpl.acquisitionMetrics_Accessor));
    } else {
      acquisitionMetrics_Accessor.reset();
    }
    if (accessorImpl.trackMetrics_Accessor) {
      setTrackMetrics(*(accessorImpl.trackMetrics_Accessor));
    } else {
      trackMetrics_Accessor.reset();
    }
    if (accessorImpl.launchMetrics_Accessor) {
      setLaunchMetrics(*(accessorImpl.launchMetrics_Accessor));
    } else {
      launchMetrics_Accessor.reset();
    }
    if (accessorImpl.interceptMetrics_Accessor) {
      setInterceptMetrics(*(accessorImpl.interceptMetrics_Accessor));
    } else {
      interceptMetrics_Accessor.reset();
    }
    if (accessorImpl.hasProbabilityOfSurvival()) {
      setProbabilityOfSurvival(accessorImpl.getProbabilityOfSurvival());
    } else {
      clearProbabilityOfSurvival();
    }
    if (accessorImpl.hasExposureEventProbabilityThreshold()) {
      setExposureEventProbabilityThreshold(accessorImpl.getExposureEventProbabilityThreshold());
    } else {
      clearExposureEventProbabilityThreshold();
    }
  }
}

void VulnerabilityMetricsType::reset() noexcept {
  acquisitionMetrics_Accessor.reset();
  trackMetrics_Accessor.reset();
  launchMetrics_Accessor.reset();
  interceptMetrics_Accessor.reset();
  clearProbabilityOfSurvival();
  clearExposureEventProbabilityThreshold();
}

uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::getAcquisitionMetrics_() const {
  if (acquisitionMetrics_Accessor) {
    return *acquisitionMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getAcquisitionMetrics(): An attempt was made to get an optional field that was not enabled, call hasAcquisitionMetrics() to determine if it is safe to call getAcquisitionMetrics()");
}

const uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::getAcquisitionMetrics() const {
  return getAcquisitionMetrics_();
}

uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::getAcquisitionMetrics() {
  return getAcquisitionMetrics_();
}

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::setAcquisitionMetrics(const uci::type::RouteVulnerabilityType& accessor) {
  enableAcquisitionMetrics();
  if (&accessor != acquisitionMetrics_Accessor.get()) {
    acquisitionMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VulnerabilityMetricsType::hasAcquisitionMetrics() const noexcept {
  return static_cast<bool>(acquisitionMetrics_Accessor);
}

uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::enableAcquisitionMetrics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeVulnerabilityType : type};
  if ((!acquisitionMetrics_Accessor) || (acquisitionMetrics_Accessor->getAccessorType() != requestedType)) {
    acquisitionMetrics_Accessor = RouteVulnerabilityType::create(requestedType);
    if (!acquisitionMetrics_Accessor) {
      throw uci::base::UCIException("Error in enableAcquisitionMetrics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *acquisitionMetrics_Accessor;
}

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::clearAcquisitionMetrics() noexcept {
  acquisitionMetrics_Accessor.reset();
  return *this;
}

uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::getTrackMetrics_() const {
  if (trackMetrics_Accessor) {
    return *trackMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getTrackMetrics(): An attempt was made to get an optional field that was not enabled, call hasTrackMetrics() to determine if it is safe to call getTrackMetrics()");
}

const uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::getTrackMetrics() const {
  return getTrackMetrics_();
}

uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::getTrackMetrics() {
  return getTrackMetrics_();
}

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::setTrackMetrics(const uci::type::RouteVulnerabilityType& accessor) {
  enableTrackMetrics();
  if (&accessor != trackMetrics_Accessor.get()) {
    trackMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VulnerabilityMetricsType::hasTrackMetrics() const noexcept {
  return static_cast<bool>(trackMetrics_Accessor);
}

uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::enableTrackMetrics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeVulnerabilityType : type};
  if ((!trackMetrics_Accessor) || (trackMetrics_Accessor->getAccessorType() != requestedType)) {
    trackMetrics_Accessor = RouteVulnerabilityType::create(requestedType);
    if (!trackMetrics_Accessor) {
      throw uci::base::UCIException("Error in enableTrackMetrics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *trackMetrics_Accessor;
}

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::clearTrackMetrics() noexcept {
  trackMetrics_Accessor.reset();
  return *this;
}

uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::getLaunchMetrics_() const {
  if (launchMetrics_Accessor) {
    return *launchMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getLaunchMetrics(): An attempt was made to get an optional field that was not enabled, call hasLaunchMetrics() to determine if it is safe to call getLaunchMetrics()");
}

const uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::getLaunchMetrics() const {
  return getLaunchMetrics_();
}

uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::getLaunchMetrics() {
  return getLaunchMetrics_();
}

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::setLaunchMetrics(const uci::type::RouteVulnerabilityType& accessor) {
  enableLaunchMetrics();
  if (&accessor != launchMetrics_Accessor.get()) {
    launchMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VulnerabilityMetricsType::hasLaunchMetrics() const noexcept {
  return static_cast<bool>(launchMetrics_Accessor);
}

uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::enableLaunchMetrics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeVulnerabilityType : type};
  if ((!launchMetrics_Accessor) || (launchMetrics_Accessor->getAccessorType() != requestedType)) {
    launchMetrics_Accessor = RouteVulnerabilityType::create(requestedType);
    if (!launchMetrics_Accessor) {
      throw uci::base::UCIException("Error in enableLaunchMetrics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *launchMetrics_Accessor;
}

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::clearLaunchMetrics() noexcept {
  launchMetrics_Accessor.reset();
  return *this;
}

uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::getInterceptMetrics_() const {
  if (interceptMetrics_Accessor) {
    return *interceptMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getInterceptMetrics(): An attempt was made to get an optional field that was not enabled, call hasInterceptMetrics() to determine if it is safe to call getInterceptMetrics()");
}

const uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::getInterceptMetrics() const {
  return getInterceptMetrics_();
}

uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::getInterceptMetrics() {
  return getInterceptMetrics_();
}

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::setInterceptMetrics(const uci::type::RouteVulnerabilityType& accessor) {
  enableInterceptMetrics();
  if (&accessor != interceptMetrics_Accessor.get()) {
    interceptMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VulnerabilityMetricsType::hasInterceptMetrics() const noexcept {
  return static_cast<bool>(interceptMetrics_Accessor);
}

uci::type::RouteVulnerabilityType& VulnerabilityMetricsType::enableInterceptMetrics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeVulnerabilityType : type};
  if ((!interceptMetrics_Accessor) || (interceptMetrics_Accessor->getAccessorType() != requestedType)) {
    interceptMetrics_Accessor = RouteVulnerabilityType::create(requestedType);
    if (!interceptMetrics_Accessor) {
      throw uci::base::UCIException("Error in enableInterceptMetrics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *interceptMetrics_Accessor;
}

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::clearInterceptMetrics() noexcept {
  interceptMetrics_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue VulnerabilityMetricsType::getProbabilityOfSurvival() const {
  if (probabilityOfSurvival_Accessor) {
    return *probabilityOfSurvival_Accessor;
  }
  throw uci::base::UCIException("Error in getProbabilityOfSurvival(): An attempt was made to get an optional field that was not enabled, call hasProbabilityOfSurvival() to determine if it is safe to call getProbabilityOfSurvival()");
}

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::setProbabilityOfSurvival(uci::type::PercentTypeValue value) {
  probabilityOfSurvival_Accessor = value;
  return *this;
}

bool VulnerabilityMetricsType::hasProbabilityOfSurvival() const noexcept {
  return probabilityOfSurvival_Accessor.has_value();
}

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::clearProbabilityOfSurvival() noexcept {
  probabilityOfSurvival_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue VulnerabilityMetricsType::getExposureEventProbabilityThreshold() const {
  if (exposureEventProbabilityThreshold_Accessor) {
    return *exposureEventProbabilityThreshold_Accessor;
  }
  throw uci::base::UCIException("Error in getExposureEventProbabilityThreshold(): An attempt was made to get an optional field that was not enabled, call hasExposureEventProbabilityThreshold() to determine if it is safe to call getExposureEventProbabilityThreshold()");
}

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::setExposureEventProbabilityThreshold(uci::type::PercentTypeValue value) {
  exposureEventProbabilityThreshold_Accessor = value;
  return *this;
}

bool VulnerabilityMetricsType::hasExposureEventProbabilityThreshold() const noexcept {
  return exposureEventProbabilityThreshold_Accessor.has_value();
}

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::clearExposureEventProbabilityThreshold() noexcept {
  exposureEventProbabilityThreshold_Accessor.reset();
  return *this;
}

std::unique_ptr<VulnerabilityMetricsType> VulnerabilityMetricsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vulnerabilityMetricsType : type};
  return (requestedType == uci::type::accessorType::vulnerabilityMetricsType) ? boost::make_unique<VulnerabilityMetricsType>() : nullptr;
}

/**  */
namespace VulnerabilityMetricsType_Names {

constexpr const char* Extern_Type_Name{"VulnerabilityMetricsType"};
constexpr const char* AcquisitionMetrics_Name{"AcquisitionMetrics"};
constexpr const char* TrackMetrics_Name{"TrackMetrics"};
constexpr const char* LaunchMetrics_Name{"LaunchMetrics"};
constexpr const char* InterceptMetrics_Name{"InterceptMetrics"};
constexpr const char* ProbabilityOfSurvival_Name{"ProbabilityOfSurvival"};
constexpr const char* ExposureEventProbabilityThreshold_Name{"ExposureEventProbabilityThreshold"};

} // namespace VulnerabilityMetricsType_Names

void VulnerabilityMetricsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VulnerabilityMetricsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VulnerabilityMetricsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VulnerabilityMetricsType_Names::AcquisitionMetrics_Name) {
      RouteVulnerabilityType::deserialize(valueType.second, accessor.enableAcquisitionMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VulnerabilityMetricsType_Names::TrackMetrics_Name) {
      RouteVulnerabilityType::deserialize(valueType.second, accessor.enableTrackMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VulnerabilityMetricsType_Names::LaunchMetrics_Name) {
      RouteVulnerabilityType::deserialize(valueType.second, accessor.enableLaunchMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VulnerabilityMetricsType_Names::InterceptMetrics_Name) {
      RouteVulnerabilityType::deserialize(valueType.second, accessor.enableInterceptMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VulnerabilityMetricsType_Names::ProbabilityOfSurvival_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProbabilityOfSurvival(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VulnerabilityMetricsType_Names::ExposureEventProbabilityThreshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setExposureEventProbabilityThreshold(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string VulnerabilityMetricsType::serialize(const uci::type::VulnerabilityMetricsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VulnerabilityMetricsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VulnerabilityMetricsType_Names::Extern_Type_Name);
  }
  if (accessor.hasAcquisitionMetrics()) {
    RouteVulnerabilityType::serialize(accessor.getAcquisitionMetrics(), node, VulnerabilityMetricsType_Names::AcquisitionMetrics_Name);
  }
  if (accessor.hasTrackMetrics()) {
    RouteVulnerabilityType::serialize(accessor.getTrackMetrics(), node, VulnerabilityMetricsType_Names::TrackMetrics_Name);
  }
  if (accessor.hasLaunchMetrics()) {
    RouteVulnerabilityType::serialize(accessor.getLaunchMetrics(), node, VulnerabilityMetricsType_Names::LaunchMetrics_Name);
  }
  if (accessor.hasInterceptMetrics()) {
    RouteVulnerabilityType::serialize(accessor.getInterceptMetrics(), node, VulnerabilityMetricsType_Names::InterceptMetrics_Name);
  }
  if (accessor.hasProbabilityOfSurvival()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getProbabilityOfSurvival(), node, VulnerabilityMetricsType_Names::ProbabilityOfSurvival_Name);
  }
  if (accessor.hasExposureEventProbabilityThreshold()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getExposureEventProbabilityThreshold(), node, VulnerabilityMetricsType_Names::ExposureEventProbabilityThreshold_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VulnerabilityMetricsType>().release());
}

uci::type::VulnerabilityMetricsType& VulnerabilityMetricsType::create(const uci::type::VulnerabilityMetricsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VulnerabilityMetricsType> newAccessor{boost::make_unique<asb_uci::type::VulnerabilityMetricsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VulnerabilityMetricsType::destroy(uci::type::VulnerabilityMetricsType& accessor) {
  delete dynamic_cast<asb_uci::type::VulnerabilityMetricsType*>(&accessor);
}

} // namespace type

} // namespace uci

