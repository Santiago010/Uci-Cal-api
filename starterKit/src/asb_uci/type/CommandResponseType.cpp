/** @file CommandResponseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommandResponseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AMTI_CommandResponseType.h"
#include "../../../include/asb_uci/type/AO_CommandResponseType.h"
#include "../../../include/asb_uci/type/AirSampleCommandResponseType.h"
#include "../../../include/asb_uci/type/COMINT_CommandResponseType.h"
#include "../../../include/asb_uci/type/CommRelayCommandResponseType.h"
#include "../../../include/asb_uci/type/EA_CommandResponseType.h"
#include "../../../include/asb_uci/type/ESM_CommandResponseType.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/PO_CommandResponseType.h"
#include "../../../include/asb_uci/type/SAR_CommandResponseType.h"
#include "../../../include/asb_uci/type/SMTI_CommandResponseType.h"
#include "../../../include/asb_uci/type/StrikeWeaponCommandType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AMTI_CommandResponseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AO_CommandResponseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirSampleCommandResponseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/COMINT_CommandResponseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommRelayCommandResponseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommandResponseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EA_CommandResponseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_CommandResponseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_CommandResponseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SAR_CommandResponseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SMTI_CommandResponseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StrikeWeaponCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommandResponseType::CommandResponseType() = default;

CommandResponseType::~CommandResponseType() = default;

void CommandResponseType::copy(const uci::type::CommandResponseType& accessor) {
  copyImpl(accessor, false);
}

void CommandResponseType::copyImpl(const uci::type::CommandResponseType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommandResponseType&>(accessor);
    if (accessorImpl.airSample_Accessor) {
      setAirSample(*(accessorImpl.airSample_Accessor));
    } else {
      airSample_Accessor.reset();
    }
    if (accessorImpl.aMTI_Accessor) {
      setAMTI(*(accessorImpl.aMTI_Accessor));
    } else {
      aMTI_Accessor.reset();
    }
    if (accessorImpl.aO_Accessor) {
      setAO(*(accessorImpl.aO_Accessor));
    } else {
      aO_Accessor.reset();
    }
    if (accessorImpl.cOMINT_Accessor) {
      setCOMINT(*(accessorImpl.cOMINT_Accessor));
    } else {
      cOMINT_Accessor.reset();
    }
    if (accessorImpl.commRelay_Accessor) {
      setCommRelay(*(accessorImpl.commRelay_Accessor));
    } else {
      commRelay_Accessor.reset();
    }
    if (accessorImpl.eA_Accessor) {
      setEA(*(accessorImpl.eA_Accessor));
    } else {
      eA_Accessor.reset();
    }
    if (accessorImpl.eSM_Accessor) {
      setESM(*(accessorImpl.eSM_Accessor));
    } else {
      eSM_Accessor.reset();
    }
    if (accessorImpl.pO_Accessor) {
      setPO(*(accessorImpl.pO_Accessor));
    } else {
      pO_Accessor.reset();
    }
    if (accessorImpl.sAR_Accessor) {
      setSAR(*(accessorImpl.sAR_Accessor));
    } else {
      sAR_Accessor.reset();
    }
    if (accessorImpl.sMTI_Accessor) {
      setSMTI(*(accessorImpl.sMTI_Accessor));
    } else {
      sMTI_Accessor.reset();
    }
    if (accessorImpl.strike_Accessor) {
      setStrike(*(accessorImpl.strike_Accessor));
    } else {
      strike_Accessor.reset();
    }
    if (accessorImpl.weatherRadar_Accessor) {
      setWeatherRadar(*(accessorImpl.weatherRadar_Accessor));
    } else {
      weatherRadar_Accessor.reset();
    }
  }
}

void CommandResponseType::reset() noexcept {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  pO_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  weatherRadar_Accessor.reset();
}

uci::type::CommandResponseType::CommandResponseTypeChoice CommandResponseType::getCommandResponseTypeChoiceOrdinal() const noexcept {
  if (airSample_Accessor) {
    return COMMANDRESPONSETYPE_CHOICE_AIRSAMPLE;
  }
  if (aMTI_Accessor) {
    return COMMANDRESPONSETYPE_CHOICE_AMTI;
  }
  if (aO_Accessor) {
    return COMMANDRESPONSETYPE_CHOICE_AO;
  }
  if (cOMINT_Accessor) {
    return COMMANDRESPONSETYPE_CHOICE_COMINT;
  }
  if (commRelay_Accessor) {
    return COMMANDRESPONSETYPE_CHOICE_COMMRELAY;
  }
  if (eA_Accessor) {
    return COMMANDRESPONSETYPE_CHOICE_EA;
  }
  if (eSM_Accessor) {
    return COMMANDRESPONSETYPE_CHOICE_ESM;
  }
  if (pO_Accessor) {
    return COMMANDRESPONSETYPE_CHOICE_PO;
  }
  if (sAR_Accessor) {
    return COMMANDRESPONSETYPE_CHOICE_SAR;
  }
  if (sMTI_Accessor) {
    return COMMANDRESPONSETYPE_CHOICE_SMTI;
  }
  if (strike_Accessor) {
    return COMMANDRESPONSETYPE_CHOICE_STRIKE;
  }
  if (weatherRadar_Accessor) {
    return COMMANDRESPONSETYPE_CHOICE_WEATHERRADAR;
  }
  return COMMANDRESPONSETYPE_CHOICE_NONE;
}

uci::type::CommandResponseType& CommandResponseType::setCommandResponseTypeChoiceOrdinal(uci::type::CommandResponseType::CommandResponseTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case COMMANDRESPONSETYPE_CHOICE_AIRSAMPLE:
      chooseAirSample("setCommandResponseTypeChoiceOrdinal", type);
      break;
    case COMMANDRESPONSETYPE_CHOICE_AMTI:
      chooseAMTI("setCommandResponseTypeChoiceOrdinal", type);
      break;
    case COMMANDRESPONSETYPE_CHOICE_AO:
      chooseAO("setCommandResponseTypeChoiceOrdinal", type);
      break;
    case COMMANDRESPONSETYPE_CHOICE_COMINT:
      chooseCOMINT("setCommandResponseTypeChoiceOrdinal", type);
      break;
    case COMMANDRESPONSETYPE_CHOICE_COMMRELAY:
      chooseCommRelay("setCommandResponseTypeChoiceOrdinal", type);
      break;
    case COMMANDRESPONSETYPE_CHOICE_EA:
      chooseEA("setCommandResponseTypeChoiceOrdinal", type);
      break;
    case COMMANDRESPONSETYPE_CHOICE_ESM:
      chooseESM("setCommandResponseTypeChoiceOrdinal", type);
      break;
    case COMMANDRESPONSETYPE_CHOICE_PO:
      choosePO("setCommandResponseTypeChoiceOrdinal", type);
      break;
    case COMMANDRESPONSETYPE_CHOICE_SAR:
      chooseSAR("setCommandResponseTypeChoiceOrdinal", type);
      break;
    case COMMANDRESPONSETYPE_CHOICE_SMTI:
      chooseSMTI("setCommandResponseTypeChoiceOrdinal", type);
      break;
    case COMMANDRESPONSETYPE_CHOICE_STRIKE:
      chooseStrike("setCommandResponseTypeChoiceOrdinal", type);
      break;
    case COMMANDRESPONSETYPE_CHOICE_WEATHERRADAR:
      chooseWeatherRadar("setCommandResponseTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setCommandResponseTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AirSampleCommandResponseType& CommandResponseType::getAirSample_() const {
  if (airSample_Accessor) {
    return *airSample_Accessor;
  }
  throw uci::base::UCIException("Error in getAirSample(): Unable to get AirSample, field not selected");
}

const uci::type::AirSampleCommandResponseType& CommandResponseType::getAirSample() const {
  return getAirSample_();
}

uci::type::AirSampleCommandResponseType& CommandResponseType::getAirSample() {
  return getAirSample_();
}

uci::type::CommandResponseType& CommandResponseType::setAirSample(const uci::type::AirSampleCommandResponseType& accessor) {
  chooseAirSample();
  if (&accessor != airSample_Accessor.get()) {
    airSample_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommandResponseType::isAirSample() const noexcept {
  return static_cast<bool>(airSample_Accessor);
}

uci::type::AirSampleCommandResponseType& CommandResponseType::chooseAirSample(const std::string& method, uci::base::accessorType::AccessorType type) {
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  pO_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airSampleCommandResponseType : type};
  if ((!airSample_Accessor) || (airSample_Accessor->getAccessorType() != requestedType)) {
    airSample_Accessor = AirSampleCommandResponseType::create(type);
    if (!airSample_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *airSample_Accessor;
}

uci::type::AirSampleCommandResponseType& CommandResponseType::chooseAirSample(uci::base::accessorType::AccessorType type) {
  return chooseAirSample("chooseAirSample", type);
}

uci::type::AMTI_CommandResponseType& CommandResponseType::getAMTI_() const {
  if (aMTI_Accessor) {
    return *aMTI_Accessor;
  }
  throw uci::base::UCIException("Error in getAMTI(): Unable to get AMTI, field not selected");
}

const uci::type::AMTI_CommandResponseType& CommandResponseType::getAMTI() const {
  return getAMTI_();
}

uci::type::AMTI_CommandResponseType& CommandResponseType::getAMTI() {
  return getAMTI_();
}

uci::type::CommandResponseType& CommandResponseType::setAMTI(const uci::type::AMTI_CommandResponseType& accessor) {
  chooseAMTI();
  if (&accessor != aMTI_Accessor.get()) {
    aMTI_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommandResponseType::isAMTI() const noexcept {
  return static_cast<bool>(aMTI_Accessor);
}

uci::type::AMTI_CommandResponseType& CommandResponseType::chooseAMTI(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aO_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  pO_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aMTI_CommandResponseType : type};
  if ((!aMTI_Accessor) || (aMTI_Accessor->getAccessorType() != requestedType)) {
    aMTI_Accessor = AMTI_CommandResponseType::create(type);
    if (!aMTI_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aMTI_Accessor;
}

uci::type::AMTI_CommandResponseType& CommandResponseType::chooseAMTI(uci::base::accessorType::AccessorType type) {
  return chooseAMTI("chooseAMTI", type);
}

uci::type::AO_CommandResponseType& CommandResponseType::getAO_() const {
  if (aO_Accessor) {
    return *aO_Accessor;
  }
  throw uci::base::UCIException("Error in getAO(): Unable to get AO, field not selected");
}

const uci::type::AO_CommandResponseType& CommandResponseType::getAO() const {
  return getAO_();
}

uci::type::AO_CommandResponseType& CommandResponseType::getAO() {
  return getAO_();
}

uci::type::CommandResponseType& CommandResponseType::setAO(const uci::type::AO_CommandResponseType& accessor) {
  chooseAO();
  if (&accessor != aO_Accessor.get()) {
    aO_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommandResponseType::isAO() const noexcept {
  return static_cast<bool>(aO_Accessor);
}

uci::type::AO_CommandResponseType& CommandResponseType::chooseAO(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  pO_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_CommandResponseType : type};
  if ((!aO_Accessor) || (aO_Accessor->getAccessorType() != requestedType)) {
    aO_Accessor = AO_CommandResponseType::create(type);
    if (!aO_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aO_Accessor;
}

uci::type::AO_CommandResponseType& CommandResponseType::chooseAO(uci::base::accessorType::AccessorType type) {
  return chooseAO("chooseAO", type);
}

uci::type::COMINT_CommandResponseType& CommandResponseType::getCOMINT_() const {
  if (cOMINT_Accessor) {
    return *cOMINT_Accessor;
  }
  throw uci::base::UCIException("Error in getCOMINT(): Unable to get COMINT, field not selected");
}

const uci::type::COMINT_CommandResponseType& CommandResponseType::getCOMINT() const {
  return getCOMINT_();
}

uci::type::COMINT_CommandResponseType& CommandResponseType::getCOMINT() {
  return getCOMINT_();
}

uci::type::CommandResponseType& CommandResponseType::setCOMINT(const uci::type::COMINT_CommandResponseType& accessor) {
  chooseCOMINT();
  if (&accessor != cOMINT_Accessor.get()) {
    cOMINT_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommandResponseType::isCOMINT() const noexcept {
  return static_cast<bool>(cOMINT_Accessor);
}

uci::type::COMINT_CommandResponseType& CommandResponseType::chooseCOMINT(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  commRelay_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  pO_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_CommandResponseType : type};
  if ((!cOMINT_Accessor) || (cOMINT_Accessor->getAccessorType() != requestedType)) {
    cOMINT_Accessor = COMINT_CommandResponseType::create(type);
    if (!cOMINT_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *cOMINT_Accessor;
}

uci::type::COMINT_CommandResponseType& CommandResponseType::chooseCOMINT(uci::base::accessorType::AccessorType type) {
  return chooseCOMINT("chooseCOMINT", type);
}

uci::type::CommRelayCommandResponseType& CommandResponseType::getCommRelay_() const {
  if (commRelay_Accessor) {
    return *commRelay_Accessor;
  }
  throw uci::base::UCIException("Error in getCommRelay(): Unable to get CommRelay, field not selected");
}

const uci::type::CommRelayCommandResponseType& CommandResponseType::getCommRelay() const {
  return getCommRelay_();
}

uci::type::CommRelayCommandResponseType& CommandResponseType::getCommRelay() {
  return getCommRelay_();
}

uci::type::CommandResponseType& CommandResponseType::setCommRelay(const uci::type::CommRelayCommandResponseType& accessor) {
  chooseCommRelay();
  if (&accessor != commRelay_Accessor.get()) {
    commRelay_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommandResponseType::isCommRelay() const noexcept {
  return static_cast<bool>(commRelay_Accessor);
}

uci::type::CommRelayCommandResponseType& CommandResponseType::chooseCommRelay(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cOMINT_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  pO_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commRelayCommandResponseType : type};
  if ((!commRelay_Accessor) || (commRelay_Accessor->getAccessorType() != requestedType)) {
    commRelay_Accessor = CommRelayCommandResponseType::create(type);
    if (!commRelay_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commRelay_Accessor;
}

uci::type::CommRelayCommandResponseType& CommandResponseType::chooseCommRelay(uci::base::accessorType::AccessorType type) {
  return chooseCommRelay("chooseCommRelay", type);
}

uci::type::EA_CommandResponseType& CommandResponseType::getEA_() const {
  if (eA_Accessor) {
    return *eA_Accessor;
  }
  throw uci::base::UCIException("Error in getEA(): Unable to get EA, field not selected");
}

const uci::type::EA_CommandResponseType& CommandResponseType::getEA() const {
  return getEA_();
}

uci::type::EA_CommandResponseType& CommandResponseType::getEA() {
  return getEA_();
}

uci::type::CommandResponseType& CommandResponseType::setEA(const uci::type::EA_CommandResponseType& accessor) {
  chooseEA();
  if (&accessor != eA_Accessor.get()) {
    eA_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommandResponseType::isEA() const noexcept {
  return static_cast<bool>(eA_Accessor);
}

uci::type::EA_CommandResponseType& CommandResponseType::chooseEA(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  eSM_Accessor.reset();
  pO_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_CommandResponseType : type};
  if ((!eA_Accessor) || (eA_Accessor->getAccessorType() != requestedType)) {
    eA_Accessor = EA_CommandResponseType::create(type);
    if (!eA_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eA_Accessor;
}

uci::type::EA_CommandResponseType& CommandResponseType::chooseEA(uci::base::accessorType::AccessorType type) {
  return chooseEA("chooseEA", type);
}

uci::type::ESM_CommandResponseType& CommandResponseType::getESM_() const {
  if (eSM_Accessor) {
    return *eSM_Accessor;
  }
  throw uci::base::UCIException("Error in getESM(): Unable to get ESM, field not selected");
}

const uci::type::ESM_CommandResponseType& CommandResponseType::getESM() const {
  return getESM_();
}

uci::type::ESM_CommandResponseType& CommandResponseType::getESM() {
  return getESM_();
}

uci::type::CommandResponseType& CommandResponseType::setESM(const uci::type::ESM_CommandResponseType& accessor) {
  chooseESM();
  if (&accessor != eSM_Accessor.get()) {
    eSM_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommandResponseType::isESM() const noexcept {
  return static_cast<bool>(eSM_Accessor);
}

uci::type::ESM_CommandResponseType& CommandResponseType::chooseESM(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  eA_Accessor.reset();
  pO_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_CommandResponseType : type};
  if ((!eSM_Accessor) || (eSM_Accessor->getAccessorType() != requestedType)) {
    eSM_Accessor = ESM_CommandResponseType::create(type);
    if (!eSM_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eSM_Accessor;
}

uci::type::ESM_CommandResponseType& CommandResponseType::chooseESM(uci::base::accessorType::AccessorType type) {
  return chooseESM("chooseESM", type);
}

uci::type::PO_CommandResponseType& CommandResponseType::getPO_() const {
  if (pO_Accessor) {
    return *pO_Accessor;
  }
  throw uci::base::UCIException("Error in getPO(): Unable to get PO, field not selected");
}

const uci::type::PO_CommandResponseType& CommandResponseType::getPO() const {
  return getPO_();
}

uci::type::PO_CommandResponseType& CommandResponseType::getPO() {
  return getPO_();
}

uci::type::CommandResponseType& CommandResponseType::setPO(const uci::type::PO_CommandResponseType& accessor) {
  choosePO();
  if (&accessor != pO_Accessor.get()) {
    pO_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommandResponseType::isPO() const noexcept {
  return static_cast<bool>(pO_Accessor);
}

uci::type::PO_CommandResponseType& CommandResponseType::choosePO(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_CommandResponseType : type};
  if ((!pO_Accessor) || (pO_Accessor->getAccessorType() != requestedType)) {
    pO_Accessor = PO_CommandResponseType::create(type);
    if (!pO_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pO_Accessor;
}

uci::type::PO_CommandResponseType& CommandResponseType::choosePO(uci::base::accessorType::AccessorType type) {
  return choosePO("choosePO", type);
}

uci::type::SAR_CommandResponseType& CommandResponseType::getSAR_() const {
  if (sAR_Accessor) {
    return *sAR_Accessor;
  }
  throw uci::base::UCIException("Error in getSAR(): Unable to get SAR, field not selected");
}

const uci::type::SAR_CommandResponseType& CommandResponseType::getSAR() const {
  return getSAR_();
}

uci::type::SAR_CommandResponseType& CommandResponseType::getSAR() {
  return getSAR_();
}

uci::type::CommandResponseType& CommandResponseType::setSAR(const uci::type::SAR_CommandResponseType& accessor) {
  chooseSAR();
  if (&accessor != sAR_Accessor.get()) {
    sAR_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommandResponseType::isSAR() const noexcept {
  return static_cast<bool>(sAR_Accessor);
}

uci::type::SAR_CommandResponseType& CommandResponseType::chooseSAR(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  pO_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_CommandResponseType : type};
  if ((!sAR_Accessor) || (sAR_Accessor->getAccessorType() != requestedType)) {
    sAR_Accessor = SAR_CommandResponseType::create(type);
    if (!sAR_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sAR_Accessor;
}

uci::type::SAR_CommandResponseType& CommandResponseType::chooseSAR(uci::base::accessorType::AccessorType type) {
  return chooseSAR("chooseSAR", type);
}

uci::type::SMTI_CommandResponseType& CommandResponseType::getSMTI_() const {
  if (sMTI_Accessor) {
    return *sMTI_Accessor;
  }
  throw uci::base::UCIException("Error in getSMTI(): Unable to get SMTI, field not selected");
}

const uci::type::SMTI_CommandResponseType& CommandResponseType::getSMTI() const {
  return getSMTI_();
}

uci::type::SMTI_CommandResponseType& CommandResponseType::getSMTI() {
  return getSMTI_();
}

uci::type::CommandResponseType& CommandResponseType::setSMTI(const uci::type::SMTI_CommandResponseType& accessor) {
  chooseSMTI();
  if (&accessor != sMTI_Accessor.get()) {
    sMTI_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommandResponseType::isSMTI() const noexcept {
  return static_cast<bool>(sMTI_Accessor);
}

uci::type::SMTI_CommandResponseType& CommandResponseType::chooseSMTI(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  pO_Accessor.reset();
  sAR_Accessor.reset();
  strike_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sMTI_CommandResponseType : type};
  if ((!sMTI_Accessor) || (sMTI_Accessor->getAccessorType() != requestedType)) {
    sMTI_Accessor = SMTI_CommandResponseType::create(type);
    if (!sMTI_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sMTI_Accessor;
}

uci::type::SMTI_CommandResponseType& CommandResponseType::chooseSMTI(uci::base::accessorType::AccessorType type) {
  return chooseSMTI("chooseSMTI", type);
}

uci::type::StrikeWeaponCommandType& CommandResponseType::getStrike_() const {
  if (strike_Accessor) {
    return *strike_Accessor;
  }
  throw uci::base::UCIException("Error in getStrike(): Unable to get Strike, field not selected");
}

const uci::type::StrikeWeaponCommandType& CommandResponseType::getStrike() const {
  return getStrike_();
}

uci::type::StrikeWeaponCommandType& CommandResponseType::getStrike() {
  return getStrike_();
}

uci::type::CommandResponseType& CommandResponseType::setStrike(const uci::type::StrikeWeaponCommandType& accessor) {
  chooseStrike(accessor.getAccessorType());
  if (&accessor != strike_Accessor.get()) {
    strike_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommandResponseType::isStrike() const noexcept {
  return static_cast<bool>(strike_Accessor);
}

uci::type::StrikeWeaponCommandType& CommandResponseType::chooseStrike(const std::string& method, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  pO_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  weatherRadar_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeWeaponCommandType : type};
  if ((!strike_Accessor) || (strike_Accessor->getAccessorType() != requestedType)) {
    strike_Accessor = StrikeWeaponCommandType::create(type);
    if (!strike_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *strike_Accessor;
}

uci::type::StrikeWeaponCommandType& CommandResponseType::chooseStrike(uci::base::accessorType::AccessorType type) {
  return chooseStrike("chooseStrike", type);
}

uci::type::EmptyType& CommandResponseType::getWeatherRadar_() const {
  if (weatherRadar_Accessor) {
    return *weatherRadar_Accessor;
  }
  throw uci::base::UCIException("Error in getWeatherRadar(): An attempt was made to get an optional field that was not enabled, call hasWeatherRadar() to determine if it is safe to call getWeatherRadar()");
}

const uci::type::EmptyType& CommandResponseType::getWeatherRadar() const {
  return getWeatherRadar_();
}

uci::type::EmptyType& CommandResponseType::getWeatherRadar() {
  return getWeatherRadar_();
}

uci::type::CommandResponseType& CommandResponseType::setWeatherRadar(const uci::type::EmptyType& value) {
  return setWeatherRadar(value.c_str());
}

uci::type::CommandResponseType& CommandResponseType::setWeatherRadar(const std::string& value) {
  return setWeatherRadar(value.c_str());
}

uci::type::CommandResponseType& CommandResponseType::setWeatherRadar(const char * value) {
  chooseWeatherRadar().setStringValue(value);
  return *this;
}

bool CommandResponseType::isWeatherRadar() const noexcept {
  return static_cast<bool>(weatherRadar_Accessor);
}

uci::type::EmptyType& CommandResponseType::chooseWeatherRadar(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  airSample_Accessor.reset();
  aMTI_Accessor.reset();
  aO_Accessor.reset();
  cOMINT_Accessor.reset();
  commRelay_Accessor.reset();
  eA_Accessor.reset();
  eSM_Accessor.reset();
  pO_Accessor.reset();
  sAR_Accessor.reset();
  sMTI_Accessor.reset();
  strike_Accessor.reset();
  if (!weatherRadar_Accessor) {
    weatherRadar_Accessor = EmptyType::create(type);
  }
  return *weatherRadar_Accessor;
}

uci::type::EmptyType& CommandResponseType::chooseWeatherRadar(uci::base::accessorType::AccessorType type) {
  return chooseWeatherRadar("chooseWeatherRadar", type);
}

std::unique_ptr<CommandResponseType> CommandResponseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commandResponseType : type};
  return (requestedType == uci::type::accessorType::commandResponseType) ? boost::make_unique<CommandResponseType>() : nullptr;
}

/**  */
namespace CommandResponseType_Names {

constexpr const char* Extern_Type_Name{"CommandResponseType"};
constexpr const char* AirSample_Name{"AirSample"};
constexpr const char* AMTI_Name{"AMTI"};
constexpr const char* AO_Name{"AO"};
constexpr const char* COMINT_Name{"COMINT"};
constexpr const char* CommRelay_Name{"CommRelay"};
constexpr const char* EA_Name{"EA"};
constexpr const char* ESM_Name{"ESM"};
constexpr const char* PO_Name{"PO"};
constexpr const char* SAR_Name{"SAR"};
constexpr const char* SMTI_Name{"SMTI"};
constexpr const char* Strike_Name{"Strike"};
constexpr const char* WeatherRadar_Name{"WeatherRadar"};

} // namespace CommandResponseType_Names

void CommandResponseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommandResponseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommandResponseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::AirSample_Name) {
      AirSampleCommandResponseType::deserialize(valueType.second, accessor.chooseAirSample(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::AMTI_Name) {
      AMTI_CommandResponseType::deserialize(valueType.second, accessor.chooseAMTI(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::AO_Name) {
      AO_CommandResponseType::deserialize(valueType.second, accessor.chooseAO(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::COMINT_Name) {
      COMINT_CommandResponseType::deserialize(valueType.second, accessor.chooseCOMINT(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::CommRelay_Name) {
      CommRelayCommandResponseType::deserialize(valueType.second, accessor.chooseCommRelay(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::EA_Name) {
      EA_CommandResponseType::deserialize(valueType.second, accessor.chooseEA(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::ESM_Name) {
      ESM_CommandResponseType::deserialize(valueType.second, accessor.chooseESM(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::PO_Name) {
      PO_CommandResponseType::deserialize(valueType.second, accessor.choosePO(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::SAR_Name) {
      SAR_CommandResponseType::deserialize(valueType.second, accessor.chooseSAR(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::SMTI_Name) {
      SMTI_CommandResponseType::deserialize(valueType.second, accessor.chooseSMTI(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::Strike_Name) {
      StrikeWeaponCommandType::deserialize(valueType.second, accessor.chooseStrike(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::WeatherRadar_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseWeatherRadar().setStringValue(*value);
      }
    }
  }
}

std::string CommandResponseType::serialize(const uci::type::CommandResponseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommandResponseType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommandResponseType_Names::Extern_Type_Name);
  }
  if (accessor.isAirSample()) {
    AirSampleCommandResponseType::serialize(accessor.getAirSample(), node, CommandResponseType_Names::AirSample_Name);
  } else if (accessor.isAMTI()) {
    AMTI_CommandResponseType::serialize(accessor.getAMTI(), node, CommandResponseType_Names::AMTI_Name);
  } else if (accessor.isAO()) {
    AO_CommandResponseType::serialize(accessor.getAO(), node, CommandResponseType_Names::AO_Name);
  } else if (accessor.isCOMINT()) {
    COMINT_CommandResponseType::serialize(accessor.getCOMINT(), node, CommandResponseType_Names::COMINT_Name);
  } else if (accessor.isCommRelay()) {
    CommRelayCommandResponseType::serialize(accessor.getCommRelay(), node, CommandResponseType_Names::CommRelay_Name);
  } else if (accessor.isEA()) {
    EA_CommandResponseType::serialize(accessor.getEA(), node, CommandResponseType_Names::EA_Name);
  } else if (accessor.isESM()) {
    ESM_CommandResponseType::serialize(accessor.getESM(), node, CommandResponseType_Names::ESM_Name);
  } else if (accessor.isPO()) {
    PO_CommandResponseType::serialize(accessor.getPO(), node, CommandResponseType_Names::PO_Name);
  } else if (accessor.isSAR()) {
    SAR_CommandResponseType::serialize(accessor.getSAR(), node, CommandResponseType_Names::SAR_Name);
  } else if (accessor.isSMTI()) {
    SMTI_CommandResponseType::serialize(accessor.getSMTI(), node, CommandResponseType_Names::SMTI_Name);
  } else if (accessor.isStrike()) {
    StrikeWeaponCommandType::serialize(accessor.getStrike(), node, CommandResponseType_Names::Strike_Name);
  } else if (accessor.isWeatherRadar()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getWeatherRadar(), node, CommandResponseType_Names::WeatherRadar_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommandResponseType& CommandResponseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommandResponseType>().release());
}

uci::type::CommandResponseType& CommandResponseType::create(const uci::type::CommandResponseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommandResponseType> newAccessor{boost::make_unique<asb_uci::type::CommandResponseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommandResponseType::destroy(uci::type::CommandResponseType& accessor) {
  delete dynamic_cast<asb_uci::type::CommandResponseType*>(&accessor);
}

} // namespace type

} // namespace uci

