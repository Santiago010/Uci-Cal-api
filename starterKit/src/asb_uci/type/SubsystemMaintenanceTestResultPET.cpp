/** @file SubsystemMaintenanceTestResultPET.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SubsystemMaintenanceTestResultPET.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/CommandID_Type.h"
#include "../../../include/asb_uci/type/SubsystemID_Type.h"
#include "../../../include/asb_uci/type/SubsystemMaintenanceID_Type.h"
#include "../../../include/asb_uci/type/SubsystemMaintenanceResultEventType.h"
#include "../../../include/asb_uci/type/SubsystemMaintenanceResultStatusType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommandID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemMaintenanceID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemMaintenanceResultEventType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemMaintenanceResultStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemMaintenanceTestResultPET.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemMaintenanceTestResultPET::SubsystemMaintenanceTestResultPET()
  : testID_Accessor{boost::make_unique<SubsystemMaintenanceID_Type>()},
    subsystemComponentID_Accessor{boost::make_unique<SubsystemComponentID>(0, SIZE_MAX)},
    capabilityID_Accessor{boost::make_unique<CapabilityID>(0, SIZE_MAX)},
    testResultStatus_Accessor{boost::make_unique<SubsystemMaintenanceResultStatusType>()},
    eventResult_Accessor{boost::make_unique<EventResult>(0, SIZE_MAX)} {
}

SubsystemMaintenanceTestResultPET::~SubsystemMaintenanceTestResultPET() = default;

void SubsystemMaintenanceTestResultPET::copy(const uci::type::SubsystemMaintenanceTestResultPET& accessor) {
  copyImpl(accessor, false);
}

void SubsystemMaintenanceTestResultPET::copyImpl(const uci::type::SubsystemMaintenanceTestResultPET& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::subsystemMaintenanceTestResultPET)) {
      const auto& accessorImpl = dynamic_cast<const SubsystemMaintenanceTestResultPET&>(accessor);
      if (accessorImpl.commandID_Accessor) {
        setCommandID(*(accessorImpl.commandID_Accessor));
      } else {
        commandID_Accessor.reset();
      }
      setTestID(*(accessorImpl.testID_Accessor));
      setSubsystemComponentID(*(accessorImpl.subsystemComponentID_Accessor));
      setCapabilityID(*(accessorImpl.capabilityID_Accessor));
      setTestResultStatus(*(accessorImpl.testResultStatus_Accessor));
      setEventResult(*(accessorImpl.eventResult_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void SubsystemMaintenanceTestResultPET::reset() noexcept {
  commandID_Accessor.reset();
  testID_Accessor->reset();
  subsystemComponentID_Accessor->reset();
  capabilityID_Accessor->reset();
  testResultStatus_Accessor->reset();
  eventResult_Accessor->reset();
}

uci::type::CommandID_Type& SubsystemMaintenanceTestResultPET::getCommandID_() const {
  if (commandID_Accessor) {
    return *commandID_Accessor;
  }
  throw uci::base::UCIException("Error in getCommandID(): An attempt was made to get an optional field that was not enabled, call hasCommandID() to determine if it is safe to call getCommandID()");
}

const uci::type::CommandID_Type& SubsystemMaintenanceTestResultPET::getCommandID() const {
  return getCommandID_();
}

uci::type::CommandID_Type& SubsystemMaintenanceTestResultPET::getCommandID() {
  return getCommandID_();
}

uci::type::SubsystemMaintenanceTestResultPET& SubsystemMaintenanceTestResultPET::setCommandID(const uci::type::CommandID_Type& accessor) {
  enableCommandID();
  if (&accessor != commandID_Accessor.get()) {
    commandID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubsystemMaintenanceTestResultPET::hasCommandID() const noexcept {
  return static_cast<bool>(commandID_Accessor);
}

uci::type::CommandID_Type& SubsystemMaintenanceTestResultPET::enableCommandID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commandID_Type : type};
  if ((!commandID_Accessor) || (commandID_Accessor->getAccessorType() != requestedType)) {
    commandID_Accessor = CommandID_Type::create(requestedType);
    if (!commandID_Accessor) {
      throw uci::base::UCIException("Error in enableCommandID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commandID_Accessor;
}

uci::type::SubsystemMaintenanceTestResultPET& SubsystemMaintenanceTestResultPET::clearCommandID() noexcept {
  commandID_Accessor.reset();
  return *this;
}

const uci::type::SubsystemMaintenanceID_Type& SubsystemMaintenanceTestResultPET::getTestID() const {
  return *testID_Accessor;
}

uci::type::SubsystemMaintenanceID_Type& SubsystemMaintenanceTestResultPET::getTestID() {
  return *testID_Accessor;
}

uci::type::SubsystemMaintenanceTestResultPET& SubsystemMaintenanceTestResultPET::setTestID(const uci::type::SubsystemMaintenanceID_Type& accessor) {
  if (&accessor != testID_Accessor.get()) {
    testID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemMaintenanceTestResultPET::SubsystemComponentID& SubsystemMaintenanceTestResultPET::getSubsystemComponentID() const {
  return *subsystemComponentID_Accessor;
}

uci::type::SubsystemMaintenanceTestResultPET::SubsystemComponentID& SubsystemMaintenanceTestResultPET::getSubsystemComponentID() {
  return *subsystemComponentID_Accessor;
}

uci::type::SubsystemMaintenanceTestResultPET& SubsystemMaintenanceTestResultPET::setSubsystemComponentID(const uci::type::SubsystemMaintenanceTestResultPET::SubsystemComponentID& accessor) {
  if (&accessor != subsystemComponentID_Accessor.get()) {
    subsystemComponentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemMaintenanceTestResultPET::CapabilityID& SubsystemMaintenanceTestResultPET::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::SubsystemMaintenanceTestResultPET::CapabilityID& SubsystemMaintenanceTestResultPET::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::SubsystemMaintenanceTestResultPET& SubsystemMaintenanceTestResultPET::setCapabilityID(const uci::type::SubsystemMaintenanceTestResultPET::CapabilityID& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemMaintenanceResultStatusType& SubsystemMaintenanceTestResultPET::getTestResultStatus() const {
  return *testResultStatus_Accessor;
}

uci::type::SubsystemMaintenanceResultStatusType& SubsystemMaintenanceTestResultPET::getTestResultStatus() {
  return *testResultStatus_Accessor;
}

uci::type::SubsystemMaintenanceTestResultPET& SubsystemMaintenanceTestResultPET::setTestResultStatus(const uci::type::SubsystemMaintenanceResultStatusType& accessor) {
  if (&accessor != testResultStatus_Accessor.get()) {
    testResultStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemMaintenanceTestResultPET::EventResult& SubsystemMaintenanceTestResultPET::getEventResult() const {
  return *eventResult_Accessor;
}

uci::type::SubsystemMaintenanceTestResultPET::EventResult& SubsystemMaintenanceTestResultPET::getEventResult() {
  return *eventResult_Accessor;
}

uci::type::SubsystemMaintenanceTestResultPET& SubsystemMaintenanceTestResultPET::setEventResult(const uci::type::SubsystemMaintenanceTestResultPET::EventResult& accessor) {
  if (&accessor != eventResult_Accessor.get()) {
    eventResult_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<SubsystemMaintenanceTestResultPET> SubsystemMaintenanceTestResultPET::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemMaintenanceTestResultPET : type};
  return std::unique_ptr<SubsystemMaintenanceTestResultPET>(dynamic_cast<SubsystemMaintenanceTestResultPET*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace SubsystemMaintenanceTestResultPET_Names {

constexpr const char* Extern_Type_Name{"SubsystemMaintenanceTestResultPET"};
constexpr const char* CommandID_Name{"CommandID"};
constexpr const char* TestID_Name{"TestID"};
constexpr const char* SubsystemComponentID_Name{"SubsystemComponentID"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* TestResultStatus_Name{"TestResultStatus"};
constexpr const char* EventResult_Name{"EventResult"};

} // namespace SubsystemMaintenanceTestResultPET_Names

void SubsystemMaintenanceTestResultPET::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemMaintenanceTestResultPET& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemMaintenanceTestResultPET_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceTestResultPET_Names::CommandID_Name) {
      CommandID_Type::deserialize(valueType.second, accessor.enableCommandID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceTestResultPET_Names::TestID_Name) {
      SubsystemMaintenanceID_Type::deserialize(valueType.second, accessor.getTestID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceTestResultPET_Names::SubsystemComponentID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemMaintenanceTestResultPET::SubsystemComponentID& boundedList = accessor.getSubsystemComponentID();
        const uci::type::SubsystemMaintenanceTestResultPET::SubsystemComponentID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SubsystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceTestResultPET_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemMaintenanceTestResultPET::CapabilityID& boundedList = accessor.getCapabilityID();
        const uci::type::SubsystemMaintenanceTestResultPET::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceTestResultPET_Names::TestResultStatus_Name) {
      SubsystemMaintenanceResultStatusType::deserialize(valueType.second, accessor.getTestResultStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceTestResultPET_Names::EventResult_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemMaintenanceTestResultPET::EventResult& boundedList = accessor.getEventResult();
        const uci::type::SubsystemMaintenanceTestResultPET::EventResult::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SubsystemMaintenanceResultEventType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string SubsystemMaintenanceTestResultPET::serialize(const uci::type::SubsystemMaintenanceTestResultPET& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemMaintenanceTestResultPET_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::subsystemMaintenanceTestResultPET)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemMaintenanceTestResultPET_Names::Extern_Type_Name);
    }
    if (accessor.hasCommandID()) {
      CommandID_Type::serialize(accessor.getCommandID(), node, SubsystemMaintenanceTestResultPET_Names::CommandID_Name);
    }
    SubsystemMaintenanceID_Type::serialize(accessor.getTestID(), node, SubsystemMaintenanceTestResultPET_Names::TestID_Name);
    {
      const uci::type::SubsystemMaintenanceTestResultPET::SubsystemComponentID& boundedList = accessor.getSubsystemComponentID();
      for (uci::type::SubsystemMaintenanceTestResultPET::SubsystemComponentID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SubsystemID_Type::serialize(boundedList.at(i), node, SubsystemMaintenanceTestResultPET_Names::SubsystemComponentID_Name);
      }
    }
    {
      const uci::type::SubsystemMaintenanceTestResultPET::CapabilityID& boundedList = accessor.getCapabilityID();
      for (uci::type::SubsystemMaintenanceTestResultPET::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::CapabilityID_Type::serialize(boundedList.at(i), node, SubsystemMaintenanceTestResultPET_Names::CapabilityID_Name);
      }
    }
    SubsystemMaintenanceResultStatusType::serialize(accessor.getTestResultStatus(), node, SubsystemMaintenanceTestResultPET_Names::TestResultStatus_Name);
    {
      const uci::type::SubsystemMaintenanceTestResultPET::EventResult& boundedList = accessor.getEventResult();
      for (uci::type::SubsystemMaintenanceTestResultPET::EventResult::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SubsystemMaintenanceResultEventType::serialize(boundedList.at(i), node, SubsystemMaintenanceTestResultPET_Names::EventResult_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

