/** @file WeatherRadarCapabilityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/WeatherRadarCapabilityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AirVolumeSensorReferencedType.h"
#include "asb_uci/type/CapabilityCommandBaseType.h"
#include "asb_uci/type/CapabilityCommandFrequencyType.h"
#include "asb_uci/type/CollectionPolicyEnum.h"
#include "asb_uci/type/ElectronicProtectionOptionsEnableType.h"
#include "asb_uci/type/EmconConstraintType.h"
#include "asb_uci/type/ProductOutputCommandBasicType.h"
#include "asb_uci/type/RepetitionType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AirVolumeSensorReferencedType.h"
#include "uci/type/CapabilityCommandFrequencyType.h"
#include "uci/type/CollectionPolicyEnum.h"
#include "uci/type/ElectronicProtectionOptionsEnableType.h"
#include "uci/type/EmconConstraintType.h"
#include "uci/type/ProductOutputCommandBasicType.h"
#include "uci/type/RepetitionType.h"
#include "uci/type/WeatherRadarCapabilityCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WeatherRadarCapabilityCommandType::WeatherRadarCapabilityCommandType()
  : airVolume_Accessor{boost::make_unique<AirVolumeSensorReferencedType>()},
    productOutput_Accessor{boost::make_unique<ProductOutput>(0, SIZE_MAX)},
    electronicProtectionOptionsOverride_Accessor{boost::make_unique<ElectronicProtectionOptionsOverride>(0, SIZE_MAX)} {
}

WeatherRadarCapabilityCommandType::~WeatherRadarCapabilityCommandType() = default;

void WeatherRadarCapabilityCommandType::copy(const uci::type::WeatherRadarCapabilityCommandType& accessor) {
  copyImpl(accessor, false);
}

void WeatherRadarCapabilityCommandType::copyImpl(const uci::type::WeatherRadarCapabilityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CapabilityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const WeatherRadarCapabilityCommandType&>(accessor);
    setAirVolume(*(accessorImpl.airVolume_Accessor));
    if (accessorImpl.frequency_Accessor) {
      setFrequency(*(accessorImpl.frequency_Accessor));
    } else {
      frequency_Accessor.reset();
    }
    if (accessorImpl.collectionPolicy_Accessor) {
      setCollectionPolicy(*(accessorImpl.collectionPolicy_Accessor));
    } else {
      collectionPolicy_Accessor.reset();
    }
    if (accessorImpl.repetition_Accessor) {
      setRepetition(*(accessorImpl.repetition_Accessor));
    } else {
      repetition_Accessor.reset();
    }
    setProductOutput(*(accessorImpl.productOutput_Accessor));
    if (accessorImpl.emcon_Accessor) {
      setEmcon(*(accessorImpl.emcon_Accessor));
    } else {
      emcon_Accessor.reset();
    }
    setElectronicProtectionOptionsOverride(*(accessorImpl.electronicProtectionOptionsOverride_Accessor));
  }
}

void WeatherRadarCapabilityCommandType::reset() noexcept {
  CapabilityCommandBaseType::reset();
  airVolume_Accessor->reset();
  frequency_Accessor.reset();
  collectionPolicy_Accessor.reset();
  repetition_Accessor.reset();
  productOutput_Accessor->reset();
  emcon_Accessor.reset();
  electronicProtectionOptionsOverride_Accessor->reset();
}

const uci::type::AirVolumeSensorReferencedType& WeatherRadarCapabilityCommandType::getAirVolume() const {
  return *airVolume_Accessor;
}

uci::type::AirVolumeSensorReferencedType& WeatherRadarCapabilityCommandType::getAirVolume() {
  return *airVolume_Accessor;
}

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::setAirVolume(const uci::type::AirVolumeSensorReferencedType& accessor) {
  if (&accessor != airVolume_Accessor.get()) {
    airVolume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CapabilityCommandFrequencyType& WeatherRadarCapabilityCommandType::getFrequency_() const {
  if (frequency_Accessor) {
    return *frequency_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequency(): An attempt was made to get an optional field that was not enabled, call hasFrequency() to determine if it is safe to call getFrequency()");
}

const uci::type::CapabilityCommandFrequencyType& WeatherRadarCapabilityCommandType::getFrequency() const {
  return getFrequency_();
}

uci::type::CapabilityCommandFrequencyType& WeatherRadarCapabilityCommandType::getFrequency() {
  return getFrequency_();
}

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::setFrequency(const uci::type::CapabilityCommandFrequencyType& accessor) {
  enableFrequency();
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeatherRadarCapabilityCommandType::hasFrequency() const noexcept {
  return static_cast<bool>(frequency_Accessor);
}

uci::type::CapabilityCommandFrequencyType& WeatherRadarCapabilityCommandType::enableFrequency(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandFrequencyType : type};
  if ((!frequency_Accessor) || (frequency_Accessor->getAccessorType() != requestedType)) {
    frequency_Accessor = CapabilityCommandFrequencyType::create(requestedType);
    if (!frequency_Accessor) {
      throw uci::base::UCIException("Error in enableFrequency(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *frequency_Accessor;
}

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::clearFrequency() noexcept {
  frequency_Accessor.reset();
  return *this;
}

uci::type::CollectionPolicyEnum& WeatherRadarCapabilityCommandType::getCollectionPolicy_() const {
  if (collectionPolicy_Accessor) {
    return *collectionPolicy_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionPolicy(): An attempt was made to get an optional field that was not enabled, call hasCollectionPolicy() to determine if it is safe to call getCollectionPolicy()");
}

const uci::type::CollectionPolicyEnum& WeatherRadarCapabilityCommandType::getCollectionPolicy() const {
  return getCollectionPolicy_();
}

uci::type::CollectionPolicyEnum& WeatherRadarCapabilityCommandType::getCollectionPolicy() {
  return getCollectionPolicy_();
}

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::setCollectionPolicy(const uci::type::CollectionPolicyEnum& accessor) {
  enableCollectionPolicy();
  if (&accessor != collectionPolicy_Accessor.get()) {
    collectionPolicy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::setCollectionPolicy(const uci::type::CollectionPolicyEnum::EnumerationItem value) {
  enableCollectionPolicy().setValue(value);
  return *this;
}

bool WeatherRadarCapabilityCommandType::hasCollectionPolicy() const noexcept {
  return static_cast<bool>(collectionPolicy_Accessor);
}

uci::type::CollectionPolicyEnum& WeatherRadarCapabilityCommandType::enableCollectionPolicy(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::collectionPolicyEnum : type};
  if ((!collectionPolicy_Accessor) || (collectionPolicy_Accessor->getAccessorType() != requestedType)) {
    collectionPolicy_Accessor = CollectionPolicyEnum::create(requestedType);
    if (!collectionPolicy_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionPolicy(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionPolicy_Accessor;
}

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::clearCollectionPolicy() noexcept {
  collectionPolicy_Accessor.reset();
  return *this;
}

uci::type::RepetitionType& WeatherRadarCapabilityCommandType::getRepetition_() const {
  if (repetition_Accessor) {
    return *repetition_Accessor;
  }
  throw uci::base::UCIException("Error in getRepetition(): An attempt was made to get an optional field that was not enabled, call hasRepetition() to determine if it is safe to call getRepetition()");
}

const uci::type::RepetitionType& WeatherRadarCapabilityCommandType::getRepetition() const {
  return getRepetition_();
}

uci::type::RepetitionType& WeatherRadarCapabilityCommandType::getRepetition() {
  return getRepetition_();
}

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::setRepetition(const uci::type::RepetitionType& accessor) {
  enableRepetition();
  if (&accessor != repetition_Accessor.get()) {
    repetition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeatherRadarCapabilityCommandType::hasRepetition() const noexcept {
  return static_cast<bool>(repetition_Accessor);
}

uci::type::RepetitionType& WeatherRadarCapabilityCommandType::enableRepetition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionType : type};
  if ((!repetition_Accessor) || (repetition_Accessor->getAccessorType() != requestedType)) {
    repetition_Accessor = RepetitionType::create(requestedType);
    if (!repetition_Accessor) {
      throw uci::base::UCIException("Error in enableRepetition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *repetition_Accessor;
}

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::clearRepetition() noexcept {
  repetition_Accessor.reset();
  return *this;
}

const uci::type::WeatherRadarCapabilityCommandType::ProductOutput& WeatherRadarCapabilityCommandType::getProductOutput() const {
  return *productOutput_Accessor;
}

uci::type::WeatherRadarCapabilityCommandType::ProductOutput& WeatherRadarCapabilityCommandType::getProductOutput() {
  return *productOutput_Accessor;
}

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::setProductOutput(const uci::type::WeatherRadarCapabilityCommandType::ProductOutput& accessor) {
  if (&accessor != productOutput_Accessor.get()) {
    productOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EmconConstraintType& WeatherRadarCapabilityCommandType::getEmcon_() const {
  if (emcon_Accessor) {
    return *emcon_Accessor;
  }
  throw uci::base::UCIException("Error in getEmcon(): An attempt was made to get an optional field that was not enabled, call hasEmcon() to determine if it is safe to call getEmcon()");
}

const uci::type::EmconConstraintType& WeatherRadarCapabilityCommandType::getEmcon() const {
  return getEmcon_();
}

uci::type::EmconConstraintType& WeatherRadarCapabilityCommandType::getEmcon() {
  return getEmcon_();
}

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::setEmcon(const uci::type::EmconConstraintType& accessor) {
  enableEmcon();
  if (&accessor != emcon_Accessor.get()) {
    emcon_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeatherRadarCapabilityCommandType::hasEmcon() const noexcept {
  return static_cast<bool>(emcon_Accessor);
}

uci::type::EmconConstraintType& WeatherRadarCapabilityCommandType::enableEmcon(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emconConstraintType : type};
  if ((!emcon_Accessor) || (emcon_Accessor->getAccessorType() != requestedType)) {
    emcon_Accessor = EmconConstraintType::create(requestedType);
    if (!emcon_Accessor) {
      throw uci::base::UCIException("Error in enableEmcon(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emcon_Accessor;
}

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::clearEmcon() noexcept {
  emcon_Accessor.reset();
  return *this;
}

const uci::type::WeatherRadarCapabilityCommandType::ElectronicProtectionOptionsOverride& WeatherRadarCapabilityCommandType::getElectronicProtectionOptionsOverride() const {
  return *electronicProtectionOptionsOverride_Accessor;
}

uci::type::WeatherRadarCapabilityCommandType::ElectronicProtectionOptionsOverride& WeatherRadarCapabilityCommandType::getElectronicProtectionOptionsOverride() {
  return *electronicProtectionOptionsOverride_Accessor;
}

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::setElectronicProtectionOptionsOverride(const uci::type::WeatherRadarCapabilityCommandType::ElectronicProtectionOptionsOverride& accessor) {
  if (&accessor != electronicProtectionOptionsOverride_Accessor.get()) {
    electronicProtectionOptionsOverride_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<WeatherRadarCapabilityCommandType> WeatherRadarCapabilityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherRadarCapabilityCommandType : type};
  return (requestedType == uci::type::accessorType::weatherRadarCapabilityCommandType) ? boost::make_unique<WeatherRadarCapabilityCommandType>() : nullptr;
}

/**  */
namespace WeatherRadarCapabilityCommandType_Names {

constexpr const char* Extern_Type_Name{"WeatherRadarCapabilityCommandType"};
constexpr const char* AirVolume_Name{"AirVolume"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* CollectionPolicy_Name{"CollectionPolicy"};
constexpr const char* Repetition_Name{"Repetition"};
constexpr const char* ProductOutput_Name{"ProductOutput"};
constexpr const char* Emcon_Name{"Emcon"};
constexpr const char* ElectronicProtectionOptionsOverride_Name{"ElectronicProtectionOptionsOverride"};

} // namespace WeatherRadarCapabilityCommandType_Names

void WeatherRadarCapabilityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherRadarCapabilityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeatherRadarCapabilityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WeatherRadarCapabilityCommandType_Names::AirVolume_Name) {
      AirVolumeSensorReferencedType::deserialize(valueType.second, accessor.getAirVolume(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarCapabilityCommandType_Names::Frequency_Name) {
      CapabilityCommandFrequencyType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarCapabilityCommandType_Names::CollectionPolicy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCollectionPolicy().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherRadarCapabilityCommandType_Names::Repetition_Name) {
      RepetitionType::deserialize(valueType.second, accessor.enableRepetition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarCapabilityCommandType_Names::ProductOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WeatherRadarCapabilityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
        const uci::type::WeatherRadarCapabilityCommandType::ProductOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + WeatherRadarCapabilityCommandType_Names::Emcon_Name) {
      EmconConstraintType::deserialize(valueType.second, accessor.enableEmcon(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarCapabilityCommandType_Names::ElectronicProtectionOptionsOverride_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WeatherRadarCapabilityCommandType::ElectronicProtectionOptionsOverride& boundedList = accessor.getElectronicProtectionOptionsOverride();
        const uci::type::WeatherRadarCapabilityCommandType::ElectronicProtectionOptionsOverride::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ElectronicProtectionOptionsEnableType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  CapabilityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string WeatherRadarCapabilityCommandType::serialize(const uci::type::WeatherRadarCapabilityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WeatherRadarCapabilityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WeatherRadarCapabilityCommandType_Names::Extern_Type_Name);
  }
  CapabilityCommandBaseType::serialize(accessor, node, "", false, false, false);
  AirVolumeSensorReferencedType::serialize(accessor.getAirVolume(), node, WeatherRadarCapabilityCommandType_Names::AirVolume_Name);
  if (accessor.hasFrequency()) {
    CapabilityCommandFrequencyType::serialize(accessor.getFrequency(), node, WeatherRadarCapabilityCommandType_Names::Frequency_Name);
  }
  if (accessor.hasCollectionPolicy()) {
    CollectionPolicyEnum::serialize(accessor.getCollectionPolicy(), node, WeatherRadarCapabilityCommandType_Names::CollectionPolicy_Name, false);
  }
  if (accessor.hasRepetition()) {
    RepetitionType::serialize(accessor.getRepetition(), node, WeatherRadarCapabilityCommandType_Names::Repetition_Name);
  }
  {
    const uci::type::WeatherRadarCapabilityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
    for (uci::type::WeatherRadarCapabilityCommandType::ProductOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductOutputCommandBasicType::serialize(boundedList.at(i), node, WeatherRadarCapabilityCommandType_Names::ProductOutput_Name);
    }
  }
  if (accessor.hasEmcon()) {
    EmconConstraintType::serialize(accessor.getEmcon(), node, WeatherRadarCapabilityCommandType_Names::Emcon_Name);
  }
  {
    const uci::type::WeatherRadarCapabilityCommandType::ElectronicProtectionOptionsOverride& boundedList = accessor.getElectronicProtectionOptionsOverride();
    for (uci::type::WeatherRadarCapabilityCommandType::ElectronicProtectionOptionsOverride::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ElectronicProtectionOptionsEnableType::serialize(boundedList.at(i), node, WeatherRadarCapabilityCommandType_Names::ElectronicProtectionOptionsOverride_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WeatherRadarCapabilityCommandType>().release());
}

uci::type::WeatherRadarCapabilityCommandType& WeatherRadarCapabilityCommandType::create(const uci::type::WeatherRadarCapabilityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WeatherRadarCapabilityCommandType> newAccessor{boost::make_unique<asb_uci::type::WeatherRadarCapabilityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WeatherRadarCapabilityCommandType::destroy(uci::type::WeatherRadarCapabilityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::WeatherRadarCapabilityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

