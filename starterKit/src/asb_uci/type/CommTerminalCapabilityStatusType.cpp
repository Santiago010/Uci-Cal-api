/** @file CommTerminalCapabilityStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommTerminalCapabilityStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AvailableConnectionType.h"
#include "asb_uci/type/CapabilityStatusType.h"
#include "asb_uci/type/MDF_StatusType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AvailableConnectionType.h"
#include "uci/type/CommTerminalCapabilityStatusType.h"
#include "uci/type/MDF_StatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommTerminalCapabilityStatusType::CommTerminalCapabilityStatusType() = default;

CommTerminalCapabilityStatusType::~CommTerminalCapabilityStatusType() = default;

void CommTerminalCapabilityStatusType::copy(const uci::type::CommTerminalCapabilityStatusType& accessor) {
  copyImpl(accessor, false);
}

void CommTerminalCapabilityStatusType::copyImpl(const uci::type::CommTerminalCapabilityStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CapabilityStatusType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CommTerminalCapabilityStatusType&>(accessor);
    if (accessorImpl.mDF_Status_Accessor) {
      setMDF_Status(*(accessorImpl.mDF_Status_Accessor));
    } else {
      mDF_Status_Accessor.reset();
    }
    if (accessorImpl.availableConnections_Accessor) {
      setAvailableConnections(*(accessorImpl.availableConnections_Accessor));
    } else {
      availableConnections_Accessor.reset();
    }
  }
}

void CommTerminalCapabilityStatusType::reset() noexcept {
  CapabilityStatusType::reset();
  mDF_Status_Accessor.reset();
  availableConnections_Accessor.reset();
}

uci::type::MDF_StatusType& CommTerminalCapabilityStatusType::getMDF_Status_() const {
  if (mDF_Status_Accessor) {
    return *mDF_Status_Accessor;
  }
  throw uci::base::UCIException("Error in getMDF_Status(): An attempt was made to get an optional field that was not enabled, call hasMDF_Status() to determine if it is safe to call getMDF_Status()");
}

const uci::type::MDF_StatusType& CommTerminalCapabilityStatusType::getMDF_Status() const {
  return getMDF_Status_();
}

uci::type::MDF_StatusType& CommTerminalCapabilityStatusType::getMDF_Status() {
  return getMDF_Status_();
}

uci::type::CommTerminalCapabilityStatusType& CommTerminalCapabilityStatusType::setMDF_Status(const uci::type::MDF_StatusType& accessor) {
  enableMDF_Status();
  if (&accessor != mDF_Status_Accessor.get()) {
    mDF_Status_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalCapabilityStatusType::hasMDF_Status() const noexcept {
  return static_cast<bool>(mDF_Status_Accessor);
}

uci::type::MDF_StatusType& CommTerminalCapabilityStatusType::enableMDF_Status(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mDF_StatusType : type};
  if ((!mDF_Status_Accessor) || (mDF_Status_Accessor->getAccessorType() != requestedType)) {
    mDF_Status_Accessor = MDF_StatusType::create(requestedType);
    if (!mDF_Status_Accessor) {
      throw uci::base::UCIException("Error in enableMDF_Status(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mDF_Status_Accessor;
}

uci::type::CommTerminalCapabilityStatusType& CommTerminalCapabilityStatusType::clearMDF_Status() noexcept {
  mDF_Status_Accessor.reset();
  return *this;
}

uci::type::AvailableConnectionType& CommTerminalCapabilityStatusType::getAvailableConnections_() const {
  if (availableConnections_Accessor) {
    return *availableConnections_Accessor;
  }
  throw uci::base::UCIException("Error in getAvailableConnections(): An attempt was made to get an optional field that was not enabled, call hasAvailableConnections() to determine if it is safe to call getAvailableConnections()");
}

const uci::type::AvailableConnectionType& CommTerminalCapabilityStatusType::getAvailableConnections() const {
  return getAvailableConnections_();
}

uci::type::AvailableConnectionType& CommTerminalCapabilityStatusType::getAvailableConnections() {
  return getAvailableConnections_();
}

uci::type::CommTerminalCapabilityStatusType& CommTerminalCapabilityStatusType::setAvailableConnections(const uci::type::AvailableConnectionType& accessor) {
  enableAvailableConnections();
  if (&accessor != availableConnections_Accessor.get()) {
    availableConnections_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalCapabilityStatusType::hasAvailableConnections() const noexcept {
  return static_cast<bool>(availableConnections_Accessor);
}

uci::type::AvailableConnectionType& CommTerminalCapabilityStatusType::enableAvailableConnections(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::availableConnectionType : type};
  if ((!availableConnections_Accessor) || (availableConnections_Accessor->getAccessorType() != requestedType)) {
    availableConnections_Accessor = AvailableConnectionType::create(requestedType);
    if (!availableConnections_Accessor) {
      throw uci::base::UCIException("Error in enableAvailableConnections(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *availableConnections_Accessor;
}

uci::type::CommTerminalCapabilityStatusType& CommTerminalCapabilityStatusType::clearAvailableConnections() noexcept {
  availableConnections_Accessor.reset();
  return *this;
}

std::unique_ptr<CommTerminalCapabilityStatusType> CommTerminalCapabilityStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commTerminalCapabilityStatusType : type};
  return (requestedType == uci::type::accessorType::commTerminalCapabilityStatusType) ? boost::make_unique<CommTerminalCapabilityStatusType>() : nullptr;
}

/**  */
namespace CommTerminalCapabilityStatusType_Names {

constexpr const char* Extern_Type_Name{"CommTerminalCapabilityStatusType"};
constexpr const char* MDF_Status_Name{"MDF_Status"};
constexpr const char* AvailableConnections_Name{"AvailableConnections"};

} // namespace CommTerminalCapabilityStatusType_Names

void CommTerminalCapabilityStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommTerminalCapabilityStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommTerminalCapabilityStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityStatusType_Names::MDF_Status_Name) {
      MDF_StatusType::deserialize(valueType.second, accessor.enableMDF_Status(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityStatusType_Names::AvailableConnections_Name) {
      AvailableConnectionType::deserialize(valueType.second, accessor.enableAvailableConnections(), nodeName, nsPrefix);
    }
  }
  CapabilityStatusType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CommTerminalCapabilityStatusType::serialize(const uci::type::CommTerminalCapabilityStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommTerminalCapabilityStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommTerminalCapabilityStatusType_Names::Extern_Type_Name);
  }
  CapabilityStatusType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasMDF_Status()) {
    MDF_StatusType::serialize(accessor.getMDF_Status(), node, CommTerminalCapabilityStatusType_Names::MDF_Status_Name);
  }
  if (accessor.hasAvailableConnections()) {
    AvailableConnectionType::serialize(accessor.getAvailableConnections(), node, CommTerminalCapabilityStatusType_Names::AvailableConnections_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommTerminalCapabilityStatusType& CommTerminalCapabilityStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommTerminalCapabilityStatusType>().release());
}

uci::type::CommTerminalCapabilityStatusType& CommTerminalCapabilityStatusType::create(const uci::type::CommTerminalCapabilityStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommTerminalCapabilityStatusType> newAccessor{boost::make_unique<asb_uci::type::CommTerminalCapabilityStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommTerminalCapabilityStatusType::destroy(uci::type::CommTerminalCapabilityStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::CommTerminalCapabilityStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

