/** @file OrbitChangeActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitChangeActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityBaseType.h"
#include "../../../include/asb_uci/type/ManeuverSummaryType.h"
#include "../../../include/asb_uci/type/OrbitKinematicsChangeSummaryType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ManeuverSummaryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitChangeActivityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitKinematicsChangeSummaryType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitChangeActivityType::OrbitChangeActivityType() = default;

OrbitChangeActivityType::~OrbitChangeActivityType() = default;

void OrbitChangeActivityType::copy(const uci::type::OrbitChangeActivityType& accessor) {
  copyImpl(accessor, false);
}

void OrbitChangeActivityType::copyImpl(const uci::type::OrbitChangeActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ActivityBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const OrbitChangeActivityType&>(accessor);
    if (accessorImpl.maneuverSummary_Accessor) {
      setManeuverSummary(*(accessorImpl.maneuverSummary_Accessor));
    } else {
      maneuverSummary_Accessor.reset();
    }
    if (accessorImpl.orbitChangeSummary_Accessor) {
      setOrbitChangeSummary(*(accessorImpl.orbitChangeSummary_Accessor));
    } else {
      orbitChangeSummary_Accessor.reset();
    }
  }
}

void OrbitChangeActivityType::reset() noexcept {
  ActivityBaseType::reset();
  maneuverSummary_Accessor.reset();
  orbitChangeSummary_Accessor.reset();
}

uci::type::ManeuverSummaryType& OrbitChangeActivityType::getManeuverSummary_() const {
  if (maneuverSummary_Accessor) {
    return *maneuverSummary_Accessor;
  }
  throw uci::base::UCIException("Error in getManeuverSummary(): An attempt was made to get an optional field that was not enabled, call hasManeuverSummary() to determine if it is safe to call getManeuverSummary()");
}

const uci::type::ManeuverSummaryType& OrbitChangeActivityType::getManeuverSummary() const {
  return getManeuverSummary_();
}

uci::type::ManeuverSummaryType& OrbitChangeActivityType::getManeuverSummary() {
  return getManeuverSummary_();
}

uci::type::OrbitChangeActivityType& OrbitChangeActivityType::setManeuverSummary(const uci::type::ManeuverSummaryType& accessor) {
  enableManeuverSummary();
  if (&accessor != maneuverSummary_Accessor.get()) {
    maneuverSummary_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitChangeActivityType::hasManeuverSummary() const noexcept {
  return static_cast<bool>(maneuverSummary_Accessor);
}

uci::type::ManeuverSummaryType& OrbitChangeActivityType::enableManeuverSummary(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::maneuverSummaryType : type};
  if ((!maneuverSummary_Accessor) || (maneuverSummary_Accessor->getAccessorType() != requestedType)) {
    maneuverSummary_Accessor = ManeuverSummaryType::create(requestedType);
    if (!maneuverSummary_Accessor) {
      throw uci::base::UCIException("Error in enableManeuverSummary(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *maneuverSummary_Accessor;
}

uci::type::OrbitChangeActivityType& OrbitChangeActivityType::clearManeuverSummary() noexcept {
  maneuverSummary_Accessor.reset();
  return *this;
}

uci::type::OrbitKinematicsChangeSummaryType& OrbitChangeActivityType::getOrbitChangeSummary_() const {
  if (orbitChangeSummary_Accessor) {
    return *orbitChangeSummary_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitChangeSummary(): An attempt was made to get an optional field that was not enabled, call hasOrbitChangeSummary() to determine if it is safe to call getOrbitChangeSummary()");
}

const uci::type::OrbitKinematicsChangeSummaryType& OrbitChangeActivityType::getOrbitChangeSummary() const {
  return getOrbitChangeSummary_();
}

uci::type::OrbitKinematicsChangeSummaryType& OrbitChangeActivityType::getOrbitChangeSummary() {
  return getOrbitChangeSummary_();
}

uci::type::OrbitChangeActivityType& OrbitChangeActivityType::setOrbitChangeSummary(const uci::type::OrbitKinematicsChangeSummaryType& accessor) {
  enableOrbitChangeSummary();
  if (&accessor != orbitChangeSummary_Accessor.get()) {
    orbitChangeSummary_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitChangeActivityType::hasOrbitChangeSummary() const noexcept {
  return static_cast<bool>(orbitChangeSummary_Accessor);
}

uci::type::OrbitKinematicsChangeSummaryType& OrbitChangeActivityType::enableOrbitChangeSummary(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsChangeSummaryType : type};
  if ((!orbitChangeSummary_Accessor) || (orbitChangeSummary_Accessor->getAccessorType() != requestedType)) {
    orbitChangeSummary_Accessor = OrbitKinematicsChangeSummaryType::create(requestedType);
    if (!orbitChangeSummary_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitChangeSummary(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitChangeSummary_Accessor;
}

uci::type::OrbitChangeActivityType& OrbitChangeActivityType::clearOrbitChangeSummary() noexcept {
  orbitChangeSummary_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitChangeActivityType> OrbitChangeActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitChangeActivityType : type};
  return (requestedType == uci::type::accessorType::orbitChangeActivityType) ? boost::make_unique<OrbitChangeActivityType>() : nullptr;
}

/**  */
namespace OrbitChangeActivityType_Names {

constexpr const char* Extern_Type_Name{"OrbitChangeActivityType"};
constexpr const char* ManeuverSummary_Name{"ManeuverSummary"};
constexpr const char* OrbitChangeSummary_Name{"OrbitChangeSummary"};

} // namespace OrbitChangeActivityType_Names

void OrbitChangeActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitChangeActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitChangeActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitChangeActivityType_Names::ManeuverSummary_Name) {
      ManeuverSummaryType::deserialize(valueType.second, accessor.enableManeuverSummary(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitChangeActivityType_Names::OrbitChangeSummary_Name) {
      OrbitKinematicsChangeSummaryType::deserialize(valueType.second, accessor.enableOrbitChangeSummary(), nodeName, nsPrefix);
    }
  }
  ActivityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string OrbitChangeActivityType::serialize(const uci::type::OrbitChangeActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitChangeActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitChangeActivityType_Names::Extern_Type_Name);
  }
  ActivityBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasManeuverSummary()) {
    ManeuverSummaryType::serialize(accessor.getManeuverSummary(), node, OrbitChangeActivityType_Names::ManeuverSummary_Name);
  }
  if (accessor.hasOrbitChangeSummary()) {
    OrbitKinematicsChangeSummaryType::serialize(accessor.getOrbitChangeSummary(), node, OrbitChangeActivityType_Names::OrbitChangeSummary_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitChangeActivityType& OrbitChangeActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitChangeActivityType>().release());
}

uci::type::OrbitChangeActivityType& OrbitChangeActivityType::create(const uci::type::OrbitChangeActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitChangeActivityType> newAccessor{boost::make_unique<asb_uci::type::OrbitChangeActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitChangeActivityType::destroy(uci::type::OrbitChangeActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitChangeActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

