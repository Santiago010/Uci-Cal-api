/** @file StrikeWeaponCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/StrikeWeaponCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AO_CodeType.h"
#include "asb_uci/type/GeoLocatedObjectType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AO_CodeType.h"
#include "uci/type/GeoLocatedObjectType.h"
#include "uci/type/StrikeWeaponCommandType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StrikeWeaponCommandType::StrikeWeaponCommandType() = default;

StrikeWeaponCommandType::~StrikeWeaponCommandType() = default;

void StrikeWeaponCommandType::copy(const uci::type::StrikeWeaponCommandType& accessor) {
  copyImpl(accessor, false);
}

void StrikeWeaponCommandType::copyImpl(const uci::type::StrikeWeaponCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const StrikeWeaponCommandType&>(accessor);
    selectForKeyLoad_Accessor = (accessorImpl.selectForKeyLoad_Accessor ? accessorImpl.selectForKeyLoad_Accessor : boost::none);
    if (accessorImpl.assignTarget_Accessor) {
      setAssignTarget(*(accessorImpl.assignTarget_Accessor));
    } else {
      assignTarget_Accessor.reset();
    }
    weaponArm_Accessor = (accessorImpl.weaponArm_Accessor ? accessorImpl.weaponArm_Accessor : boost::none);
    selectForJettison_Accessor = (accessorImpl.selectForJettison_Accessor ? accessorImpl.selectForJettison_Accessor : boost::none);
    generateDynamicLAR_Accessor = (accessorImpl.generateDynamicLAR_Accessor ? accessorImpl.generateDynamicLAR_Accessor : boost::none);
    selectForRelease_Accessor = (accessorImpl.selectForRelease_Accessor ? accessorImpl.selectForRelease_Accessor : boost::none);
    if (accessorImpl.selectAO_Code_Accessor) {
      setSelectAO_Code(*(accessorImpl.selectAO_Code_Accessor));
    } else {
      selectAO_Code_Accessor.reset();
    }
  }
}

void StrikeWeaponCommandType::reset() noexcept {
  selectForKeyLoad_Accessor.reset();
  assignTarget_Accessor.reset();
  weaponArm_Accessor.reset();
  selectForJettison_Accessor.reset();
  generateDynamicLAR_Accessor.reset();
  selectForRelease_Accessor.reset();
  selectAO_Code_Accessor.reset();
}

uci::type::StrikeWeaponCommandType::StrikeWeaponCommandTypeChoice StrikeWeaponCommandType::getStrikeWeaponCommandTypeChoiceOrdinal() const noexcept {
  if (selectForKeyLoad_Accessor) {
    return STRIKEWEAPONCOMMANDTYPE_CHOICE_SELECTFORKEYLOAD;
  }
  if (assignTarget_Accessor) {
    return STRIKEWEAPONCOMMANDTYPE_CHOICE_ASSIGNTARGET;
  }
  if (weaponArm_Accessor) {
    return STRIKEWEAPONCOMMANDTYPE_CHOICE_WEAPONARM;
  }
  if (selectForJettison_Accessor) {
    return STRIKEWEAPONCOMMANDTYPE_CHOICE_SELECTFORJETTISON;
  }
  if (generateDynamicLAR_Accessor) {
    return STRIKEWEAPONCOMMANDTYPE_CHOICE_GENERATEDYNAMICLAR;
  }
  if (selectForRelease_Accessor) {
    return STRIKEWEAPONCOMMANDTYPE_CHOICE_SELECTFORRELEASE;
  }
  if (selectAO_Code_Accessor) {
    return STRIKEWEAPONCOMMANDTYPE_CHOICE_SELECTAO_CODE;
  }
  return STRIKEWEAPONCOMMANDTYPE_CHOICE_NONE;
}

uci::type::StrikeWeaponCommandType& StrikeWeaponCommandType::setStrikeWeaponCommandTypeChoiceOrdinal(uci::type::StrikeWeaponCommandType::StrikeWeaponCommandTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case STRIKEWEAPONCOMMANDTYPE_CHOICE_SELECTFORKEYLOAD:
      chooseSelectForKeyLoad();
      break;
    case STRIKEWEAPONCOMMANDTYPE_CHOICE_ASSIGNTARGET:
      chooseAssignTarget("setStrikeWeaponCommandTypeChoiceOrdinal", type);
      break;
    case STRIKEWEAPONCOMMANDTYPE_CHOICE_WEAPONARM:
      chooseWeaponArm();
      break;
    case STRIKEWEAPONCOMMANDTYPE_CHOICE_SELECTFORJETTISON:
      chooseSelectForJettison();
      break;
    case STRIKEWEAPONCOMMANDTYPE_CHOICE_GENERATEDYNAMICLAR:
      chooseGenerateDynamicLAR();
      break;
    case STRIKEWEAPONCOMMANDTYPE_CHOICE_SELECTFORRELEASE:
      chooseSelectForRelease();
      break;
    case STRIKEWEAPONCOMMANDTYPE_CHOICE_SELECTAO_CODE:
      chooseSelectAO_Code("setStrikeWeaponCommandTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setStrikeWeaponCommandTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

xs::Boolean StrikeWeaponCommandType::getSelectForKeyLoad() const {
  if (selectForKeyLoad_Accessor) {
    return *selectForKeyLoad_Accessor;
  }
  throw uci::base::UCIException("Error in getSelectForKeyLoad(): Unable to get SelectForKeyLoad, field not selected");
}

uci::type::StrikeWeaponCommandType& StrikeWeaponCommandType::setSelectForKeyLoad(xs::Boolean value) {
  chooseSelectForKeyLoad();
  selectForKeyLoad_Accessor = value;
  return *this;
}

bool StrikeWeaponCommandType::isSelectForKeyLoad() const noexcept {
  return static_cast<bool>(selectForKeyLoad_Accessor);
}

void StrikeWeaponCommandType::chooseSelectForKeyLoad() {
  assignTarget_Accessor.reset();
  weaponArm_Accessor.reset();
  selectForJettison_Accessor.reset();
  generateDynamicLAR_Accessor.reset();
  selectForRelease_Accessor.reset();
  selectAO_Code_Accessor.reset();
  if (!selectForKeyLoad_Accessor) {
    selectForKeyLoad_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

uci::type::GeoLocatedObjectType& StrikeWeaponCommandType::getAssignTarget_() const {
  if (assignTarget_Accessor) {
    return *assignTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getAssignTarget(): Unable to get AssignTarget, field not selected");
}

const uci::type::GeoLocatedObjectType& StrikeWeaponCommandType::getAssignTarget() const {
  return getAssignTarget_();
}

uci::type::GeoLocatedObjectType& StrikeWeaponCommandType::getAssignTarget() {
  return getAssignTarget_();
}

uci::type::StrikeWeaponCommandType& StrikeWeaponCommandType::setAssignTarget(const uci::type::GeoLocatedObjectType& accessor) {
  chooseAssignTarget(accessor.getAccessorType());
  if (&accessor != assignTarget_Accessor.get()) {
    assignTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeWeaponCommandType::isAssignTarget() const noexcept {
  return static_cast<bool>(assignTarget_Accessor);
}

uci::type::GeoLocatedObjectType& StrikeWeaponCommandType::chooseAssignTarget(const std::string& method, uci::base::accessorType::AccessorType type) {
  selectForKeyLoad_Accessor.reset();
  weaponArm_Accessor.reset();
  selectForJettison_Accessor.reset();
  generateDynamicLAR_Accessor.reset();
  selectForRelease_Accessor.reset();
  selectAO_Code_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::geoLocatedObjectType : type};
  if ((!assignTarget_Accessor) || (assignTarget_Accessor->getAccessorType() != requestedType)) {
    assignTarget_Accessor = GeoLocatedObjectType::create(type);
    if (!assignTarget_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *assignTarget_Accessor;
}

uci::type::GeoLocatedObjectType& StrikeWeaponCommandType::chooseAssignTarget(uci::base::accessorType::AccessorType type) {
  return chooseAssignTarget("chooseAssignTarget", type);
}

xs::Boolean StrikeWeaponCommandType::getWeaponArm() const {
  if (weaponArm_Accessor) {
    return *weaponArm_Accessor;
  }
  throw uci::base::UCIException("Error in getWeaponArm(): Unable to get WeaponArm, field not selected");
}

uci::type::StrikeWeaponCommandType& StrikeWeaponCommandType::setWeaponArm(xs::Boolean value) {
  chooseWeaponArm();
  weaponArm_Accessor = value;
  return *this;
}

bool StrikeWeaponCommandType::isWeaponArm() const noexcept {
  return static_cast<bool>(weaponArm_Accessor);
}

void StrikeWeaponCommandType::chooseWeaponArm() {
  selectForKeyLoad_Accessor.reset();
  assignTarget_Accessor.reset();
  selectForJettison_Accessor.reset();
  generateDynamicLAR_Accessor.reset();
  selectForRelease_Accessor.reset();
  selectAO_Code_Accessor.reset();
  if (!weaponArm_Accessor) {
    weaponArm_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

xs::Boolean StrikeWeaponCommandType::getSelectForJettison() const {
  if (selectForJettison_Accessor) {
    return *selectForJettison_Accessor;
  }
  throw uci::base::UCIException("Error in getSelectForJettison(): Unable to get SelectForJettison, field not selected");
}

uci::type::StrikeWeaponCommandType& StrikeWeaponCommandType::setSelectForJettison(xs::Boolean value) {
  chooseSelectForJettison();
  selectForJettison_Accessor = value;
  return *this;
}

bool StrikeWeaponCommandType::isSelectForJettison() const noexcept {
  return static_cast<bool>(selectForJettison_Accessor);
}

void StrikeWeaponCommandType::chooseSelectForJettison() {
  selectForKeyLoad_Accessor.reset();
  assignTarget_Accessor.reset();
  weaponArm_Accessor.reset();
  generateDynamicLAR_Accessor.reset();
  selectForRelease_Accessor.reset();
  selectAO_Code_Accessor.reset();
  if (!selectForJettison_Accessor) {
    selectForJettison_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

xs::Boolean StrikeWeaponCommandType::getGenerateDynamicLAR() const {
  if (generateDynamicLAR_Accessor) {
    return *generateDynamicLAR_Accessor;
  }
  throw uci::base::UCIException("Error in getGenerateDynamicLAR(): Unable to get GenerateDynamicLAR, field not selected");
}

uci::type::StrikeWeaponCommandType& StrikeWeaponCommandType::setGenerateDynamicLAR(xs::Boolean value) {
  chooseGenerateDynamicLAR();
  generateDynamicLAR_Accessor = value;
  return *this;
}

bool StrikeWeaponCommandType::isGenerateDynamicLAR() const noexcept {
  return static_cast<bool>(generateDynamicLAR_Accessor);
}

void StrikeWeaponCommandType::chooseGenerateDynamicLAR() {
  selectForKeyLoad_Accessor.reset();
  assignTarget_Accessor.reset();
  weaponArm_Accessor.reset();
  selectForJettison_Accessor.reset();
  selectForRelease_Accessor.reset();
  selectAO_Code_Accessor.reset();
  if (!generateDynamicLAR_Accessor) {
    generateDynamicLAR_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

xs::Boolean StrikeWeaponCommandType::getSelectForRelease() const {
  if (selectForRelease_Accessor) {
    return *selectForRelease_Accessor;
  }
  throw uci::base::UCIException("Error in getSelectForRelease(): Unable to get SelectForRelease, field not selected");
}

uci::type::StrikeWeaponCommandType& StrikeWeaponCommandType::setSelectForRelease(xs::Boolean value) {
  chooseSelectForRelease();
  selectForRelease_Accessor = value;
  return *this;
}

bool StrikeWeaponCommandType::isSelectForRelease() const noexcept {
  return static_cast<bool>(selectForRelease_Accessor);
}

void StrikeWeaponCommandType::chooseSelectForRelease() {
  selectForKeyLoad_Accessor.reset();
  assignTarget_Accessor.reset();
  weaponArm_Accessor.reset();
  selectForJettison_Accessor.reset();
  generateDynamicLAR_Accessor.reset();
  selectAO_Code_Accessor.reset();
  if (!selectForRelease_Accessor) {
    selectForRelease_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

uci::type::AO_CodeType& StrikeWeaponCommandType::getSelectAO_Code_() const {
  if (selectAO_Code_Accessor) {
    return *selectAO_Code_Accessor;
  }
  throw uci::base::UCIException("Error in getSelectAO_Code(): Unable to get SelectAO_Code, field not selected");
}

const uci::type::AO_CodeType& StrikeWeaponCommandType::getSelectAO_Code() const {
  return getSelectAO_Code_();
}

uci::type::AO_CodeType& StrikeWeaponCommandType::getSelectAO_Code() {
  return getSelectAO_Code_();
}

uci::type::StrikeWeaponCommandType& StrikeWeaponCommandType::setSelectAO_Code(const uci::type::AO_CodeType& accessor) {
  chooseSelectAO_Code();
  if (&accessor != selectAO_Code_Accessor.get()) {
    selectAO_Code_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrikeWeaponCommandType::isSelectAO_Code() const noexcept {
  return static_cast<bool>(selectAO_Code_Accessor);
}

uci::type::AO_CodeType& StrikeWeaponCommandType::chooseSelectAO_Code(const std::string& method, uci::base::accessorType::AccessorType type) {
  selectForKeyLoad_Accessor.reset();
  assignTarget_Accessor.reset();
  weaponArm_Accessor.reset();
  selectForJettison_Accessor.reset();
  generateDynamicLAR_Accessor.reset();
  selectForRelease_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_CodeType : type};
  if ((!selectAO_Code_Accessor) || (selectAO_Code_Accessor->getAccessorType() != requestedType)) {
    selectAO_Code_Accessor = AO_CodeType::create(type);
    if (!selectAO_Code_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *selectAO_Code_Accessor;
}

uci::type::AO_CodeType& StrikeWeaponCommandType::chooseSelectAO_Code(uci::base::accessorType::AccessorType type) {
  return chooseSelectAO_Code("chooseSelectAO_Code", type);
}

std::unique_ptr<StrikeWeaponCommandType> StrikeWeaponCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeWeaponCommandType : type};
  return (requestedType == uci::type::accessorType::strikeWeaponCommandType) ? boost::make_unique<StrikeWeaponCommandType>() : nullptr;
}

/**  */
namespace StrikeWeaponCommandType_Names {

constexpr const char* Extern_Type_Name{"StrikeWeaponCommandType"};
constexpr const char* SelectForKeyLoad_Name{"SelectForKeyLoad"};
constexpr const char* AssignTarget_Name{"AssignTarget"};
constexpr const char* WeaponArm_Name{"WeaponArm"};
constexpr const char* SelectForJettison_Name{"SelectForJettison"};
constexpr const char* GenerateDynamicLAR_Name{"GenerateDynamicLAR"};
constexpr const char* SelectForRelease_Name{"SelectForRelease"};
constexpr const char* SelectAO_Code_Name{"SelectAO_Code"};

} // namespace StrikeWeaponCommandType_Names

void StrikeWeaponCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StrikeWeaponCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StrikeWeaponCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StrikeWeaponCommandType_Names::SelectForKeyLoad_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectForKeyLoad(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeWeaponCommandType_Names::AssignTarget_Name) {
      GeoLocatedObjectType::deserialize(valueType.second, accessor.chooseAssignTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeWeaponCommandType_Names::WeaponArm_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWeaponArm(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeWeaponCommandType_Names::SelectForJettison_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectForJettison(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeWeaponCommandType_Names::GenerateDynamicLAR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGenerateDynamicLAR(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeWeaponCommandType_Names::SelectForRelease_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectForRelease(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeWeaponCommandType_Names::SelectAO_Code_Name) {
      AO_CodeType::deserialize(valueType.second, accessor.chooseSelectAO_Code(), nodeName, nsPrefix);
    }
  }
}

std::string StrikeWeaponCommandType::serialize(const uci::type::StrikeWeaponCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StrikeWeaponCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StrikeWeaponCommandType_Names::Extern_Type_Name);
  }
  if (accessor.isSelectForKeyLoad()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSelectForKeyLoad(), node, StrikeWeaponCommandType_Names::SelectForKeyLoad_Name);
  } else if (accessor.isAssignTarget()) {
    GeoLocatedObjectType::serialize(accessor.getAssignTarget(), node, StrikeWeaponCommandType_Names::AssignTarget_Name);
  } else if (accessor.isWeaponArm()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getWeaponArm(), node, StrikeWeaponCommandType_Names::WeaponArm_Name);
  } else if (accessor.isSelectForJettison()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSelectForJettison(), node, StrikeWeaponCommandType_Names::SelectForJettison_Name);
  } else if (accessor.isGenerateDynamicLAR()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getGenerateDynamicLAR(), node, StrikeWeaponCommandType_Names::GenerateDynamicLAR_Name);
  } else if (accessor.isSelectForRelease()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSelectForRelease(), node, StrikeWeaponCommandType_Names::SelectForRelease_Name);
  } else if (accessor.isSelectAO_Code()) {
    AO_CodeType::serialize(accessor.getSelectAO_Code(), node, StrikeWeaponCommandType_Names::SelectAO_Code_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StrikeWeaponCommandType& StrikeWeaponCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StrikeWeaponCommandType>().release());
}

uci::type::StrikeWeaponCommandType& StrikeWeaponCommandType::create(const uci::type::StrikeWeaponCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StrikeWeaponCommandType> newAccessor{boost::make_unique<asb_uci::type::StrikeWeaponCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StrikeWeaponCommandType::destroy(uci::type::StrikeWeaponCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::StrikeWeaponCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

