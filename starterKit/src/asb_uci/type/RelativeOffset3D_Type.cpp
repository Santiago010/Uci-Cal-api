/** @file RelativeOffset3D_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RelativeOffset3D_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OffsetXY_Enum.h"
#include "asb_uci/type/RotationEnum.h"
#include "asb_uci/type/Z_ChoiceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DistanceOffsetType.h"
#include "uci/type/OffsetXY_Enum.h"
#include "uci/type/RelativeOffset3D_Type.h"
#include "uci/type/RotationEnum.h"
#include "uci/type/Z_ChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RelativeOffset3D_Type::RelativeOffset3D_Type()
  : rotation_Accessor{boost::make_unique<RotationEnum>()},
    xY_Offsets_Accessor{boost::make_unique<OffsetXY_Enum>()},
    z_Accessor{boost::make_unique<Z_ChoiceType>()} {
}

RelativeOffset3D_Type::~RelativeOffset3D_Type() = default;

void RelativeOffset3D_Type::copy(const uci::type::RelativeOffset3D_Type& accessor) {
  copyImpl(accessor, false);
}

void RelativeOffset3D_Type::copyImpl(const uci::type::RelativeOffset3D_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RelativeOffset3D_Type&>(accessor);
    setRotation(*(accessorImpl.rotation_Accessor));
    setXY_Offsets(*(accessorImpl.xY_Offsets_Accessor));
    setX(accessorImpl.x_Accessor);
    setY(accessorImpl.y_Accessor);
    setZ(*(accessorImpl.z_Accessor));
  }
}

void RelativeOffset3D_Type::reset() noexcept {
  rotation_Accessor->reset();
  xY_Offsets_Accessor->reset();
  x_Accessor = 0.0;
  y_Accessor = 0.0;
  z_Accessor->reset();
}

const uci::type::RotationEnum& RelativeOffset3D_Type::getRotation() const {
  return *rotation_Accessor;
}

uci::type::RotationEnum& RelativeOffset3D_Type::getRotation() {
  return *rotation_Accessor;
}

uci::type::RelativeOffset3D_Type& RelativeOffset3D_Type::setRotation(const uci::type::RotationEnum& accessor) {
  if (&accessor != rotation_Accessor.get()) {
    rotation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RelativeOffset3D_Type& RelativeOffset3D_Type::setRotation(uci::type::RotationEnum::EnumerationItem value) {
  rotation_Accessor->setValue(value);
  return *this;
}


const uci::type::OffsetXY_Enum& RelativeOffset3D_Type::getXY_Offsets() const {
  return *xY_Offsets_Accessor;
}

uci::type::OffsetXY_Enum& RelativeOffset3D_Type::getXY_Offsets() {
  return *xY_Offsets_Accessor;
}

uci::type::RelativeOffset3D_Type& RelativeOffset3D_Type::setXY_Offsets(const uci::type::OffsetXY_Enum& accessor) {
  if (&accessor != xY_Offsets_Accessor.get()) {
    xY_Offsets_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RelativeOffset3D_Type& RelativeOffset3D_Type::setXY_Offsets(uci::type::OffsetXY_Enum::EnumerationItem value) {
  xY_Offsets_Accessor->setValue(value);
  return *this;
}


uci::type::DistanceOffsetTypeValue RelativeOffset3D_Type::getX() const {
  return x_Accessor;
}

uci::type::RelativeOffset3D_Type& RelativeOffset3D_Type::setX(uci::type::DistanceOffsetTypeValue value) {
  x_Accessor = value;
  return *this;
}


uci::type::DistanceOffsetTypeValue RelativeOffset3D_Type::getY() const {
  return y_Accessor;
}

uci::type::RelativeOffset3D_Type& RelativeOffset3D_Type::setY(uci::type::DistanceOffsetTypeValue value) {
  y_Accessor = value;
  return *this;
}


const uci::type::Z_ChoiceType& RelativeOffset3D_Type::getZ() const {
  return *z_Accessor;
}

uci::type::Z_ChoiceType& RelativeOffset3D_Type::getZ() {
  return *z_Accessor;
}

uci::type::RelativeOffset3D_Type& RelativeOffset3D_Type::setZ(const uci::type::Z_ChoiceType& accessor) {
  if (&accessor != z_Accessor.get()) {
    z_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RelativeOffset3D_Type> RelativeOffset3D_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativeOffset3D_Type : type};
  return (requestedType == uci::type::accessorType::relativeOffset3D_Type) ? boost::make_unique<RelativeOffset3D_Type>() : nullptr;
}

/**  */
namespace RelativeOffset3D_Type_Names {

constexpr const char* Extern_Type_Name{"RelativeOffset3D_Type"};
constexpr const char* Rotation_Name{"Rotation"};
constexpr const char* XY_Offsets_Name{"XY_Offsets"};
constexpr const char* X_Name{"X"};
constexpr const char* Y_Name{"Y"};
constexpr const char* Z_Name{"Z"};

} // namespace RelativeOffset3D_Type_Names

void RelativeOffset3D_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::RelativeOffset3D_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RelativeOffset3D_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RelativeOffset3D_Type_Names::Rotation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRotation().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RelativeOffset3D_Type_Names::XY_Offsets_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getXY_Offsets().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RelativeOffset3D_Type_Names::X_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setX(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RelativeOffset3D_Type_Names::Y_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setY(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RelativeOffset3D_Type_Names::Z_Name) {
      Z_ChoiceType::deserialize(valueType.second, accessor.getZ(), nodeName, nsPrefix);
    }
  }
}

std::string RelativeOffset3D_Type::serialize(const uci::type::RelativeOffset3D_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RelativeOffset3D_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RelativeOffset3D_Type_Names::Extern_Type_Name);
  }
  RotationEnum::serialize(accessor.getRotation(), node, RelativeOffset3D_Type_Names::Rotation_Name, false);
  OffsetXY_Enum::serialize(accessor.getXY_Offsets(), node, RelativeOffset3D_Type_Names::XY_Offsets_Name, false);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getX(), node, RelativeOffset3D_Type_Names::X_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getY(), node, RelativeOffset3D_Type_Names::Y_Name);
  Z_ChoiceType::serialize(accessor.getZ(), node, RelativeOffset3D_Type_Names::Z_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RelativeOffset3D_Type& RelativeOffset3D_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RelativeOffset3D_Type>().release());
}

uci::type::RelativeOffset3D_Type& RelativeOffset3D_Type::create(const uci::type::RelativeOffset3D_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RelativeOffset3D_Type> newAccessor{boost::make_unique<asb_uci::type::RelativeOffset3D_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RelativeOffset3D_Type::destroy(uci::type::RelativeOffset3D_Type& accessor) {
  delete dynamic_cast<asb_uci::type::RelativeOffset3D_Type*>(&accessor);
}

} // namespace type

} // namespace uci

