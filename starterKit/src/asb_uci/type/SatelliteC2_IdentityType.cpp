/** @file SatelliteC2_IdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SatelliteC2_IdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EOB_IdentityType.h"
#include "../../../include/asb_uci/type/FacilityIdentificationType.h"
#include "../../../include/asb_uci/type/StandardIdentityType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_IdentityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FacilityIdentificationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SatelliteC2_IdentityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StandardIdentityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SatelliteC2_IdentityType::SatelliteC2_IdentityType() = default;

SatelliteC2_IdentityType::~SatelliteC2_IdentityType() = default;

void SatelliteC2_IdentityType::copy(const uci::type::SatelliteC2_IdentityType& accessor) {
  copyImpl(accessor, false);
}

void SatelliteC2_IdentityType::copyImpl(const uci::type::SatelliteC2_IdentityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SatelliteC2_IdentityType&>(accessor);
    if (accessorImpl.standard_Accessor) {
      setStandard(*(accessorImpl.standard_Accessor));
    } else {
      standard_Accessor.reset();
    }
    if (accessorImpl.specificFacility_Accessor) {
      setSpecificFacility(*(accessorImpl.specificFacility_Accessor));
    } else {
      specificFacility_Accessor.reset();
    }
    if (accessorImpl.eOB_Accessor) {
      setEOB(*(accessorImpl.eOB_Accessor));
    } else {
      eOB_Accessor.reset();
    }
  }
}

void SatelliteC2_IdentityType::reset() noexcept {
  standard_Accessor.reset();
  specificFacility_Accessor.reset();
  eOB_Accessor.reset();
}

uci::type::StandardIdentityType& SatelliteC2_IdentityType::getStandard_() const {
  if (standard_Accessor) {
    return *standard_Accessor;
  }
  throw uci::base::UCIException("Error in getStandard(): An attempt was made to get an optional field that was not enabled, call hasStandard() to determine if it is safe to call getStandard()");
}

const uci::type::StandardIdentityType& SatelliteC2_IdentityType::getStandard() const {
  return getStandard_();
}

uci::type::StandardIdentityType& SatelliteC2_IdentityType::getStandard() {
  return getStandard_();
}

uci::type::SatelliteC2_IdentityType& SatelliteC2_IdentityType::setStandard(const uci::type::StandardIdentityType& accessor) {
  enableStandard(accessor.getAccessorType());
  if (&accessor != standard_Accessor.get()) {
    standard_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SatelliteC2_IdentityType::hasStandard() const noexcept {
  return static_cast<bool>(standard_Accessor);
}

uci::type::StandardIdentityType& SatelliteC2_IdentityType::enableStandard(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::standardIdentityType : type};
  if ((!standard_Accessor) || (standard_Accessor->getAccessorType() != requestedType)) {
    standard_Accessor = StandardIdentityType::create(requestedType);
    if (!standard_Accessor) {
      throw uci::base::UCIException("Error in enableStandard(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *standard_Accessor;
}

uci::type::SatelliteC2_IdentityType& SatelliteC2_IdentityType::clearStandard() noexcept {
  standard_Accessor.reset();
  return *this;
}

uci::type::FacilityIdentificationType& SatelliteC2_IdentityType::getSpecificFacility_() const {
  if (specificFacility_Accessor) {
    return *specificFacility_Accessor;
  }
  throw uci::base::UCIException("Error in getSpecificFacility(): An attempt was made to get an optional field that was not enabled, call hasSpecificFacility() to determine if it is safe to call getSpecificFacility()");
}

const uci::type::FacilityIdentificationType& SatelliteC2_IdentityType::getSpecificFacility() const {
  return getSpecificFacility_();
}

uci::type::FacilityIdentificationType& SatelliteC2_IdentityType::getSpecificFacility() {
  return getSpecificFacility_();
}

uci::type::SatelliteC2_IdentityType& SatelliteC2_IdentityType::setSpecificFacility(const uci::type::FacilityIdentificationType& accessor) {
  enableSpecificFacility();
  if (&accessor != specificFacility_Accessor.get()) {
    specificFacility_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SatelliteC2_IdentityType::hasSpecificFacility() const noexcept {
  return static_cast<bool>(specificFacility_Accessor);
}

uci::type::FacilityIdentificationType& SatelliteC2_IdentityType::enableSpecificFacility(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::facilityIdentificationType : type};
  if ((!specificFacility_Accessor) || (specificFacility_Accessor->getAccessorType() != requestedType)) {
    specificFacility_Accessor = FacilityIdentificationType::create(requestedType);
    if (!specificFacility_Accessor) {
      throw uci::base::UCIException("Error in enableSpecificFacility(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *specificFacility_Accessor;
}

uci::type::SatelliteC2_IdentityType& SatelliteC2_IdentityType::clearSpecificFacility() noexcept {
  specificFacility_Accessor.reset();
  return *this;
}

uci::type::EOB_IdentityType& SatelliteC2_IdentityType::getEOB_() const {
  if (eOB_Accessor) {
    return *eOB_Accessor;
  }
  throw uci::base::UCIException("Error in getEOB(): An attempt was made to get an optional field that was not enabled, call hasEOB() to determine if it is safe to call getEOB()");
}

const uci::type::EOB_IdentityType& SatelliteC2_IdentityType::getEOB() const {
  return getEOB_();
}

uci::type::EOB_IdentityType& SatelliteC2_IdentityType::getEOB() {
  return getEOB_();
}

uci::type::SatelliteC2_IdentityType& SatelliteC2_IdentityType::setEOB(const uci::type::EOB_IdentityType& accessor) {
  enableEOB();
  if (&accessor != eOB_Accessor.get()) {
    eOB_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SatelliteC2_IdentityType::hasEOB() const noexcept {
  return static_cast<bool>(eOB_Accessor);
}

uci::type::EOB_IdentityType& SatelliteC2_IdentityType::enableEOB(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_IdentityType : type};
  if ((!eOB_Accessor) || (eOB_Accessor->getAccessorType() != requestedType)) {
    eOB_Accessor = EOB_IdentityType::create(requestedType);
    if (!eOB_Accessor) {
      throw uci::base::UCIException("Error in enableEOB(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eOB_Accessor;
}

uci::type::SatelliteC2_IdentityType& SatelliteC2_IdentityType::clearEOB() noexcept {
  eOB_Accessor.reset();
  return *this;
}

std::unique_ptr<SatelliteC2_IdentityType> SatelliteC2_IdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteC2_IdentityType : type};
  return (requestedType == uci::type::accessorType::satelliteC2_IdentityType) ? boost::make_unique<SatelliteC2_IdentityType>() : nullptr;
}

/**  */
namespace SatelliteC2_IdentityType_Names {

constexpr const char* Extern_Type_Name{"SatelliteC2_IdentityType"};
constexpr const char* Standard_Name{"Standard"};
constexpr const char* SpecificFacility_Name{"SpecificFacility"};
constexpr const char* EOB_Name{"EOB"};

} // namespace SatelliteC2_IdentityType_Names

void SatelliteC2_IdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SatelliteC2_IdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SatelliteC2_IdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SatelliteC2_IdentityType_Names::Standard_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableStandard(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SatelliteC2_IdentityType_Names::SpecificFacility_Name) {
      FacilityIdentificationType::deserialize(valueType.second, accessor.enableSpecificFacility(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SatelliteC2_IdentityType_Names::EOB_Name) {
      EOB_IdentityType::deserialize(valueType.second, accessor.enableEOB(), nodeName, nsPrefix);
    }
  }
}

std::string SatelliteC2_IdentityType::serialize(const uci::type::SatelliteC2_IdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SatelliteC2_IdentityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SatelliteC2_IdentityType_Names::Extern_Type_Name);
  }
  if (accessor.hasStandard()) {
    StandardIdentityType::serialize(accessor.getStandard(), node, SatelliteC2_IdentityType_Names::Standard_Name);
  }
  if (accessor.hasSpecificFacility()) {
    FacilityIdentificationType::serialize(accessor.getSpecificFacility(), node, SatelliteC2_IdentityType_Names::SpecificFacility_Name);
  }
  if (accessor.hasEOB()) {
    EOB_IdentityType::serialize(accessor.getEOB(), node, SatelliteC2_IdentityType_Names::EOB_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SatelliteC2_IdentityType& SatelliteC2_IdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SatelliteC2_IdentityType>().release());
}

uci::type::SatelliteC2_IdentityType& SatelliteC2_IdentityType::create(const uci::type::SatelliteC2_IdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SatelliteC2_IdentityType> newAccessor{boost::make_unique<asb_uci::type::SatelliteC2_IdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SatelliteC2_IdentityType::destroy(uci::type::SatelliteC2_IdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::SatelliteC2_IdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

