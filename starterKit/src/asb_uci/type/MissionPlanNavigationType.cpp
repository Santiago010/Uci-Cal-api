/** @file MissionPlanNavigationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MissionPlanNavigationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AltitudeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanNavigationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpeedType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MissionPlanNavigationType::MissionPlanNavigationType() = default;

MissionPlanNavigationType::~MissionPlanNavigationType() = default;

void MissionPlanNavigationType::copy(const uci::type::MissionPlanNavigationType& accessor) {
  copyImpl(accessor, false);
}

void MissionPlanNavigationType::copyImpl(const uci::type::MissionPlanNavigationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MissionPlanNavigationType&>(accessor);
    if (accessorImpl.hasSpeedOverride()) {
      setSpeedOverride(accessorImpl.getSpeedOverride());
    } else {
      clearSpeedOverride();
    }
    if (accessorImpl.hasAltitudeOverride()) {
      setAltitudeOverride(accessorImpl.getAltitudeOverride());
    } else {
      clearAltitudeOverride();
    }
  }
}

void MissionPlanNavigationType::reset() noexcept {
  clearSpeedOverride();
  clearAltitudeOverride();
}

uci::type::SpeedTypeValue MissionPlanNavigationType::getSpeedOverride() const {
  if (speedOverride_Accessor) {
    return *speedOverride_Accessor;
  }
  throw uci::base::UCIException("Error in getSpeedOverride(): An attempt was made to get an optional field that was not enabled, call hasSpeedOverride() to determine if it is safe to call getSpeedOverride()");
}

uci::type::MissionPlanNavigationType& MissionPlanNavigationType::setSpeedOverride(uci::type::SpeedTypeValue value) {
  speedOverride_Accessor = value;
  return *this;
}

bool MissionPlanNavigationType::hasSpeedOverride() const noexcept {
  return speedOverride_Accessor.has_value();
}

uci::type::MissionPlanNavigationType& MissionPlanNavigationType::clearSpeedOverride() noexcept {
  speedOverride_Accessor.reset();
  return *this;
}

uci::type::AltitudeTypeValue MissionPlanNavigationType::getAltitudeOverride() const {
  if (altitudeOverride_Accessor) {
    return *altitudeOverride_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeOverride(): An attempt was made to get an optional field that was not enabled, call hasAltitudeOverride() to determine if it is safe to call getAltitudeOverride()");
}

uci::type::MissionPlanNavigationType& MissionPlanNavigationType::setAltitudeOverride(uci::type::AltitudeTypeValue value) {
  altitudeOverride_Accessor = value;
  return *this;
}

bool MissionPlanNavigationType::hasAltitudeOverride() const noexcept {
  return altitudeOverride_Accessor.has_value();
}

uci::type::MissionPlanNavigationType& MissionPlanNavigationType::clearAltitudeOverride() noexcept {
  altitudeOverride_Accessor.reset();
  return *this;
}

std::unique_ptr<MissionPlanNavigationType> MissionPlanNavigationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanNavigationType : type};
  return (requestedType == uci::type::accessorType::missionPlanNavigationType) ? boost::make_unique<MissionPlanNavigationType>() : nullptr;
}

/**  */
namespace MissionPlanNavigationType_Names {

constexpr const char* Extern_Type_Name{"MissionPlanNavigationType"};
constexpr const char* SpeedOverride_Name{"SpeedOverride"};
constexpr const char* AltitudeOverride_Name{"AltitudeOverride"};

} // namespace MissionPlanNavigationType_Names

void MissionPlanNavigationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionPlanNavigationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionPlanNavigationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MissionPlanNavigationType_Names::SpeedOverride_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpeedOverride(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MissionPlanNavigationType_Names::AltitudeOverride_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAltitudeOverride(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string MissionPlanNavigationType::serialize(const uci::type::MissionPlanNavigationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MissionPlanNavigationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MissionPlanNavigationType_Names::Extern_Type_Name);
  }
  if (accessor.hasSpeedOverride()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSpeedOverride(), node, MissionPlanNavigationType_Names::SpeedOverride_Name);
  }
  if (accessor.hasAltitudeOverride()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAltitudeOverride(), node, MissionPlanNavigationType_Names::AltitudeOverride_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MissionPlanNavigationType& MissionPlanNavigationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MissionPlanNavigationType>().release());
}

uci::type::MissionPlanNavigationType& MissionPlanNavigationType::create(const uci::type::MissionPlanNavigationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MissionPlanNavigationType> newAccessor{boost::make_unique<asb_uci::type::MissionPlanNavigationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MissionPlanNavigationType::destroy(uci::type::MissionPlanNavigationType& accessor) {
  delete dynamic_cast<asb_uci::type::MissionPlanNavigationType*>(&accessor);
}

} // namespace type

} // namespace uci

