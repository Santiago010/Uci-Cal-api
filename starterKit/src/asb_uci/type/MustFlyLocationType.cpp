/** @file MustFlyLocationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MustFlyLocationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/LineTargetType.h"
#include "../../../include/asb_uci/type/OpLineID_Type.h"
#include "../../../include/asb_uci/type/OpPointID_Type.h"
#include "../../../include/asb_uci/type/OpVolumeID_Type.h"
#include "../../../include/asb_uci/type/OpVolumeType.h"
#include "../../../include/asb_uci/type/OpZoneID_Type.h"
#include "../../../include/asb_uci/type/Point3D_Type.h"
#include "../../../include/asb_uci/type/ZoneExternalType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LineTargetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MustFlyLocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpLineID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpVolumeID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpVolumeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpZoneID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point3D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ZoneExternalType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MustFlyLocationType::MustFlyLocationType() = default;

MustFlyLocationType::~MustFlyLocationType() = default;

void MustFlyLocationType::copy(const uci::type::MustFlyLocationType& accessor) {
  copyImpl(accessor, false);
}

void MustFlyLocationType::copyImpl(const uci::type::MustFlyLocationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MustFlyLocationType&>(accessor);
    if (accessorImpl.entityID_Accessor) {
      setEntityID(*(accessorImpl.entityID_Accessor));
    } else {
      entityID_Accessor.reset();
    }
    if (accessorImpl.opPointID_Accessor) {
      setOpPointID(*(accessorImpl.opPointID_Accessor));
    } else {
      opPointID_Accessor.reset();
    }
    if (accessorImpl.opLineID_Accessor) {
      setOpLineID(*(accessorImpl.opLineID_Accessor));
    } else {
      opLineID_Accessor.reset();
    }
    if (accessorImpl.opZoneID_Accessor) {
      setOpZoneID(*(accessorImpl.opZoneID_Accessor));
    } else {
      opZoneID_Accessor.reset();
    }
    if (accessorImpl.opVolumeID_Accessor) {
      setOpVolumeID(*(accessorImpl.opVolumeID_Accessor));
    } else {
      opVolumeID_Accessor.reset();
    }
    if (accessorImpl.point_Accessor) {
      setPoint(*(accessorImpl.point_Accessor));
    } else {
      point_Accessor.reset();
    }
    if (accessorImpl.zoneTarget_Accessor) {
      setZoneTarget(*(accessorImpl.zoneTarget_Accessor));
    } else {
      zoneTarget_Accessor.reset();
    }
    if (accessorImpl.lineTarget_Accessor) {
      setLineTarget(*(accessorImpl.lineTarget_Accessor));
    } else {
      lineTarget_Accessor.reset();
    }
    if (accessorImpl.volumeTarget_Accessor) {
      setVolumeTarget(*(accessorImpl.volumeTarget_Accessor));
    } else {
      volumeTarget_Accessor.reset();
    }
  }
}

void MustFlyLocationType::reset() noexcept {
  entityID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  point_Accessor.reset();
  zoneTarget_Accessor.reset();
  lineTarget_Accessor.reset();
  volumeTarget_Accessor.reset();
}

uci::type::MustFlyLocationType::MustFlyLocationTypeChoice MustFlyLocationType::getMustFlyLocationTypeChoiceOrdinal() const noexcept {
  if (entityID_Accessor) {
    return MUSTFLYLOCATIONTYPE_CHOICE_ENTITYID;
  }
  if (opPointID_Accessor) {
    return MUSTFLYLOCATIONTYPE_CHOICE_OPPOINTID;
  }
  if (opLineID_Accessor) {
    return MUSTFLYLOCATIONTYPE_CHOICE_OPLINEID;
  }
  if (opZoneID_Accessor) {
    return MUSTFLYLOCATIONTYPE_CHOICE_OPZONEID;
  }
  if (opVolumeID_Accessor) {
    return MUSTFLYLOCATIONTYPE_CHOICE_OPVOLUMEID;
  }
  if (point_Accessor) {
    return MUSTFLYLOCATIONTYPE_CHOICE_POINT;
  }
  if (zoneTarget_Accessor) {
    return MUSTFLYLOCATIONTYPE_CHOICE_ZONETARGET;
  }
  if (lineTarget_Accessor) {
    return MUSTFLYLOCATIONTYPE_CHOICE_LINETARGET;
  }
  if (volumeTarget_Accessor) {
    return MUSTFLYLOCATIONTYPE_CHOICE_VOLUMETARGET;
  }
  return MUSTFLYLOCATIONTYPE_CHOICE_NONE;
}

uci::type::MustFlyLocationType& MustFlyLocationType::setMustFlyLocationTypeChoiceOrdinal(uci::type::MustFlyLocationType::MustFlyLocationTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case MUSTFLYLOCATIONTYPE_CHOICE_ENTITYID:
      chooseEntityID("setMustFlyLocationTypeChoiceOrdinal", type);
      break;
    case MUSTFLYLOCATIONTYPE_CHOICE_OPPOINTID:
      chooseOpPointID("setMustFlyLocationTypeChoiceOrdinal", type);
      break;
    case MUSTFLYLOCATIONTYPE_CHOICE_OPLINEID:
      chooseOpLineID("setMustFlyLocationTypeChoiceOrdinal", type);
      break;
    case MUSTFLYLOCATIONTYPE_CHOICE_OPZONEID:
      chooseOpZoneID("setMustFlyLocationTypeChoiceOrdinal", type);
      break;
    case MUSTFLYLOCATIONTYPE_CHOICE_OPVOLUMEID:
      chooseOpVolumeID("setMustFlyLocationTypeChoiceOrdinal", type);
      break;
    case MUSTFLYLOCATIONTYPE_CHOICE_POINT:
      choosePoint("setMustFlyLocationTypeChoiceOrdinal", type);
      break;
    case MUSTFLYLOCATIONTYPE_CHOICE_ZONETARGET:
      chooseZoneTarget("setMustFlyLocationTypeChoiceOrdinal", type);
      break;
    case MUSTFLYLOCATIONTYPE_CHOICE_LINETARGET:
      chooseLineTarget("setMustFlyLocationTypeChoiceOrdinal", type);
      break;
    case MUSTFLYLOCATIONTYPE_CHOICE_VOLUMETARGET:
      chooseVolumeTarget("setMustFlyLocationTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setMustFlyLocationTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EntityID_Type& MustFlyLocationType::getEntityID_() const {
  if (entityID_Accessor) {
    return *entityID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityID(): Unable to get EntityID, field not selected");
}

const uci::type::EntityID_Type& MustFlyLocationType::getEntityID() const {
  return getEntityID_();
}

uci::type::EntityID_Type& MustFlyLocationType::getEntityID() {
  return getEntityID_();
}

uci::type::MustFlyLocationType& MustFlyLocationType::setEntityID(const uci::type::EntityID_Type& accessor) {
  chooseEntityID("setEntityID", accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool MustFlyLocationType::isEntityID() const noexcept {
  return static_cast<bool>(entityID_Accessor);
}

uci::type::EntityID_Type& MustFlyLocationType::chooseEntityID(const std::string& method, uci::base::accessorType::AccessorType type) {
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  point_Accessor.reset();
  zoneTarget_Accessor.reset();
  lineTarget_Accessor.reset();
  volumeTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(type);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::EntityID_Type& MustFlyLocationType::chooseEntityID(uci::base::accessorType::AccessorType type) {
  return chooseEntityID("chooseEntityID", type);
}

uci::type::OpPointID_Type& MustFlyLocationType::getOpPointID_() const {
  if (opPointID_Accessor) {
    return *opPointID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpPointID(): Unable to get OpPointID, field not selected");
}

const uci::type::OpPointID_Type& MustFlyLocationType::getOpPointID() const {
  return getOpPointID_();
}

uci::type::OpPointID_Type& MustFlyLocationType::getOpPointID() {
  return getOpPointID_();
}

uci::type::MustFlyLocationType& MustFlyLocationType::setOpPointID(const uci::type::OpPointID_Type& accessor) {
  chooseOpPointID();
  if (&accessor != opPointID_Accessor.get()) {
    opPointID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MustFlyLocationType::isOpPointID() const noexcept {
  return static_cast<bool>(opPointID_Accessor);
}

uci::type::OpPointID_Type& MustFlyLocationType::chooseOpPointID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  point_Accessor.reset();
  zoneTarget_Accessor.reset();
  lineTarget_Accessor.reset();
  volumeTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointID_Type : type};
  if ((!opPointID_Accessor) || (opPointID_Accessor->getAccessorType() != requestedType)) {
    opPointID_Accessor = OpPointID_Type::create(type);
    if (!opPointID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opPointID_Accessor;
}

uci::type::OpPointID_Type& MustFlyLocationType::chooseOpPointID(uci::base::accessorType::AccessorType type) {
  return chooseOpPointID("chooseOpPointID", type);
}

uci::type::OpLineID_Type& MustFlyLocationType::getOpLineID_() const {
  if (opLineID_Accessor) {
    return *opLineID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpLineID(): Unable to get OpLineID, field not selected");
}

const uci::type::OpLineID_Type& MustFlyLocationType::getOpLineID() const {
  return getOpLineID_();
}

uci::type::OpLineID_Type& MustFlyLocationType::getOpLineID() {
  return getOpLineID_();
}

uci::type::MustFlyLocationType& MustFlyLocationType::setOpLineID(const uci::type::OpLineID_Type& accessor) {
  chooseOpLineID();
  if (&accessor != opLineID_Accessor.get()) {
    opLineID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MustFlyLocationType::isOpLineID() const noexcept {
  return static_cast<bool>(opLineID_Accessor);
}

uci::type::OpLineID_Type& MustFlyLocationType::chooseOpLineID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  opPointID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  point_Accessor.reset();
  zoneTarget_Accessor.reset();
  lineTarget_Accessor.reset();
  volumeTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opLineID_Type : type};
  if ((!opLineID_Accessor) || (opLineID_Accessor->getAccessorType() != requestedType)) {
    opLineID_Accessor = OpLineID_Type::create(type);
    if (!opLineID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opLineID_Accessor;
}

uci::type::OpLineID_Type& MustFlyLocationType::chooseOpLineID(uci::base::accessorType::AccessorType type) {
  return chooseOpLineID("chooseOpLineID", type);
}

uci::type::OpZoneID_Type& MustFlyLocationType::getOpZoneID_() const {
  if (opZoneID_Accessor) {
    return *opZoneID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpZoneID(): Unable to get OpZoneID, field not selected");
}

const uci::type::OpZoneID_Type& MustFlyLocationType::getOpZoneID() const {
  return getOpZoneID_();
}

uci::type::OpZoneID_Type& MustFlyLocationType::getOpZoneID() {
  return getOpZoneID_();
}

uci::type::MustFlyLocationType& MustFlyLocationType::setOpZoneID(const uci::type::OpZoneID_Type& accessor) {
  chooseOpZoneID();
  if (&accessor != opZoneID_Accessor.get()) {
    opZoneID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MustFlyLocationType::isOpZoneID() const noexcept {
  return static_cast<bool>(opZoneID_Accessor);
}

uci::type::OpZoneID_Type& MustFlyLocationType::chooseOpZoneID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opVolumeID_Accessor.reset();
  point_Accessor.reset();
  zoneTarget_Accessor.reset();
  lineTarget_Accessor.reset();
  volumeTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneID_Type : type};
  if ((!opZoneID_Accessor) || (opZoneID_Accessor->getAccessorType() != requestedType)) {
    opZoneID_Accessor = OpZoneID_Type::create(type);
    if (!opZoneID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opZoneID_Accessor;
}

uci::type::OpZoneID_Type& MustFlyLocationType::chooseOpZoneID(uci::base::accessorType::AccessorType type) {
  return chooseOpZoneID("chooseOpZoneID", type);
}

uci::type::OpVolumeID_Type& MustFlyLocationType::getOpVolumeID_() const {
  if (opVolumeID_Accessor) {
    return *opVolumeID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpVolumeID(): Unable to get OpVolumeID, field not selected");
}

const uci::type::OpVolumeID_Type& MustFlyLocationType::getOpVolumeID() const {
  return getOpVolumeID_();
}

uci::type::OpVolumeID_Type& MustFlyLocationType::getOpVolumeID() {
  return getOpVolumeID_();
}

uci::type::MustFlyLocationType& MustFlyLocationType::setOpVolumeID(const uci::type::OpVolumeID_Type& accessor) {
  chooseOpVolumeID();
  if (&accessor != opVolumeID_Accessor.get()) {
    opVolumeID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MustFlyLocationType::isOpVolumeID() const noexcept {
  return static_cast<bool>(opVolumeID_Accessor);
}

uci::type::OpVolumeID_Type& MustFlyLocationType::chooseOpVolumeID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  point_Accessor.reset();
  zoneTarget_Accessor.reset();
  lineTarget_Accessor.reset();
  volumeTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opVolumeID_Type : type};
  if ((!opVolumeID_Accessor) || (opVolumeID_Accessor->getAccessorType() != requestedType)) {
    opVolumeID_Accessor = OpVolumeID_Type::create(type);
    if (!opVolumeID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opVolumeID_Accessor;
}

uci::type::OpVolumeID_Type& MustFlyLocationType::chooseOpVolumeID(uci::base::accessorType::AccessorType type) {
  return chooseOpVolumeID("chooseOpVolumeID", type);
}

uci::type::Point3D_Type& MustFlyLocationType::getPoint_() const {
  if (point_Accessor) {
    return *point_Accessor;
  }
  throw uci::base::UCIException("Error in getPoint(): Unable to get Point, field not selected");
}

const uci::type::Point3D_Type& MustFlyLocationType::getPoint() const {
  return getPoint_();
}

uci::type::Point3D_Type& MustFlyLocationType::getPoint() {
  return getPoint_();
}

uci::type::MustFlyLocationType& MustFlyLocationType::setPoint(const uci::type::Point3D_Type& accessor) {
  choosePoint("setPoint", accessor.getAccessorType());
  if (&accessor != point_Accessor.get()) {
    point_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool MustFlyLocationType::isPoint() const noexcept {
  return static_cast<bool>(point_Accessor);
}

uci::type::Point3D_Type& MustFlyLocationType::choosePoint(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  zoneTarget_Accessor.reset();
  lineTarget_Accessor.reset();
  volumeTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!point_Accessor) || (point_Accessor->getAccessorType() != requestedType)) {
    point_Accessor = Point3D_Type::create(type);
    if (!point_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *point_Accessor;
}

uci::type::Point3D_Type& MustFlyLocationType::choosePoint(uci::base::accessorType::AccessorType type) {
  return choosePoint("choosePoint", type);
}

uci::type::ZoneExternalType& MustFlyLocationType::getZoneTarget_() const {
  if (zoneTarget_Accessor) {
    return *zoneTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getZoneTarget(): Unable to get ZoneTarget, field not selected");
}

const uci::type::ZoneExternalType& MustFlyLocationType::getZoneTarget() const {
  return getZoneTarget_();
}

uci::type::ZoneExternalType& MustFlyLocationType::getZoneTarget() {
  return getZoneTarget_();
}

uci::type::MustFlyLocationType& MustFlyLocationType::setZoneTarget(const uci::type::ZoneExternalType& accessor) {
  chooseZoneTarget();
  if (&accessor != zoneTarget_Accessor.get()) {
    zoneTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MustFlyLocationType::isZoneTarget() const noexcept {
  return static_cast<bool>(zoneTarget_Accessor);
}

uci::type::ZoneExternalType& MustFlyLocationType::chooseZoneTarget(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  point_Accessor.reset();
  lineTarget_Accessor.reset();
  volumeTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneExternalType : type};
  if ((!zoneTarget_Accessor) || (zoneTarget_Accessor->getAccessorType() != requestedType)) {
    zoneTarget_Accessor = ZoneExternalType::create(type);
    if (!zoneTarget_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *zoneTarget_Accessor;
}

uci::type::ZoneExternalType& MustFlyLocationType::chooseZoneTarget(uci::base::accessorType::AccessorType type) {
  return chooseZoneTarget("chooseZoneTarget", type);
}

uci::type::LineTargetType& MustFlyLocationType::getLineTarget_() const {
  if (lineTarget_Accessor) {
    return *lineTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getLineTarget(): Unable to get LineTarget, field not selected");
}

const uci::type::LineTargetType& MustFlyLocationType::getLineTarget() const {
  return getLineTarget_();
}

uci::type::LineTargetType& MustFlyLocationType::getLineTarget() {
  return getLineTarget_();
}

uci::type::MustFlyLocationType& MustFlyLocationType::setLineTarget(const uci::type::LineTargetType& accessor) {
  chooseLineTarget();
  if (&accessor != lineTarget_Accessor.get()) {
    lineTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MustFlyLocationType::isLineTarget() const noexcept {
  return static_cast<bool>(lineTarget_Accessor);
}

uci::type::LineTargetType& MustFlyLocationType::chooseLineTarget(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  point_Accessor.reset();
  zoneTarget_Accessor.reset();
  volumeTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lineTargetType : type};
  if ((!lineTarget_Accessor) || (lineTarget_Accessor->getAccessorType() != requestedType)) {
    lineTarget_Accessor = LineTargetType::create(type);
    if (!lineTarget_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lineTarget_Accessor;
}

uci::type::LineTargetType& MustFlyLocationType::chooseLineTarget(uci::base::accessorType::AccessorType type) {
  return chooseLineTarget("chooseLineTarget", type);
}

uci::type::OpVolumeType& MustFlyLocationType::getVolumeTarget_() const {
  if (volumeTarget_Accessor) {
    return *volumeTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getVolumeTarget(): Unable to get VolumeTarget, field not selected");
}

const uci::type::OpVolumeType& MustFlyLocationType::getVolumeTarget() const {
  return getVolumeTarget_();
}

uci::type::OpVolumeType& MustFlyLocationType::getVolumeTarget() {
  return getVolumeTarget_();
}

uci::type::MustFlyLocationType& MustFlyLocationType::setVolumeTarget(const uci::type::OpVolumeType& accessor) {
  chooseVolumeTarget(accessor.getAccessorType());
  if (&accessor != volumeTarget_Accessor.get()) {
    volumeTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MustFlyLocationType::isVolumeTarget() const noexcept {
  return static_cast<bool>(volumeTarget_Accessor);
}

uci::type::OpVolumeType& MustFlyLocationType::chooseVolumeTarget(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  opPointID_Accessor.reset();
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  point_Accessor.reset();
  zoneTarget_Accessor.reset();
  lineTarget_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opVolumeType : type};
  if ((!volumeTarget_Accessor) || (volumeTarget_Accessor->getAccessorType() != requestedType)) {
    volumeTarget_Accessor = OpVolumeType::create(type);
    if (!volumeTarget_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *volumeTarget_Accessor;
}

uci::type::OpVolumeType& MustFlyLocationType::chooseVolumeTarget(uci::base::accessorType::AccessorType type) {
  return chooseVolumeTarget("chooseVolumeTarget", type);
}

std::unique_ptr<MustFlyLocationType> MustFlyLocationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mustFlyLocationType : type};
  return (requestedType == uci::type::accessorType::mustFlyLocationType) ? boost::make_unique<MustFlyLocationType>() : nullptr;
}

/**  */
namespace MustFlyLocationType_Names {

constexpr const char* Extern_Type_Name{"MustFlyLocationType"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* OpPointID_Name{"OpPointID"};
constexpr const char* OpLineID_Name{"OpLineID"};
constexpr const char* OpZoneID_Name{"OpZoneID"};
constexpr const char* OpVolumeID_Name{"OpVolumeID"};
constexpr const char* Point_Name{"Point"};
constexpr const char* ZoneTarget_Name{"ZoneTarget"};
constexpr const char* LineTarget_Name{"LineTarget"};
constexpr const char* VolumeTarget_Name{"VolumeTarget"};

} // namespace MustFlyLocationType_Names

void MustFlyLocationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MustFlyLocationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MustFlyLocationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MustFlyLocationType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MustFlyLocationType_Names::OpPointID_Name) {
      OpPointID_Type::deserialize(valueType.second, accessor.chooseOpPointID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MustFlyLocationType_Names::OpLineID_Name) {
      OpLineID_Type::deserialize(valueType.second, accessor.chooseOpLineID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MustFlyLocationType_Names::OpZoneID_Name) {
      OpZoneID_Type::deserialize(valueType.second, accessor.chooseOpZoneID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MustFlyLocationType_Names::OpVolumeID_Name) {
      OpVolumeID_Type::deserialize(valueType.second, accessor.chooseOpVolumeID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MustFlyLocationType_Names::Point_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.choosePoint(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MustFlyLocationType_Names::ZoneTarget_Name) {
      ZoneExternalType::deserialize(valueType.second, accessor.chooseZoneTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MustFlyLocationType_Names::LineTarget_Name) {
      LineTargetType::deserialize(valueType.second, accessor.chooseLineTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MustFlyLocationType_Names::VolumeTarget_Name) {
      OpVolumeType::deserialize(valueType.second, accessor.chooseVolumeTarget(), nodeName, nsPrefix);
    }
  }
}

std::string MustFlyLocationType::serialize(const uci::type::MustFlyLocationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MustFlyLocationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MustFlyLocationType_Names::Extern_Type_Name);
  }
  if (accessor.isEntityID()) {
    EntityID_Type::serialize(accessor.getEntityID(), node, MustFlyLocationType_Names::EntityID_Name);
  } else if (accessor.isOpPointID()) {
    OpPointID_Type::serialize(accessor.getOpPointID(), node, MustFlyLocationType_Names::OpPointID_Name);
  } else if (accessor.isOpLineID()) {
    OpLineID_Type::serialize(accessor.getOpLineID(), node, MustFlyLocationType_Names::OpLineID_Name);
  } else if (accessor.isOpZoneID()) {
    OpZoneID_Type::serialize(accessor.getOpZoneID(), node, MustFlyLocationType_Names::OpZoneID_Name);
  } else if (accessor.isOpVolumeID()) {
    OpVolumeID_Type::serialize(accessor.getOpVolumeID(), node, MustFlyLocationType_Names::OpVolumeID_Name);
  } else if (accessor.isPoint()) {
    Point3D_Type::serialize(accessor.getPoint(), node, MustFlyLocationType_Names::Point_Name);
  } else if (accessor.isZoneTarget()) {
    ZoneExternalType::serialize(accessor.getZoneTarget(), node, MustFlyLocationType_Names::ZoneTarget_Name);
  } else if (accessor.isLineTarget()) {
    LineTargetType::serialize(accessor.getLineTarget(), node, MustFlyLocationType_Names::LineTarget_Name);
  } else if (accessor.isVolumeTarget()) {
    OpVolumeType::serialize(accessor.getVolumeTarget(), node, MustFlyLocationType_Names::VolumeTarget_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MustFlyLocationType& MustFlyLocationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MustFlyLocationType>().release());
}

uci::type::MustFlyLocationType& MustFlyLocationType::create(const uci::type::MustFlyLocationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MustFlyLocationType> newAccessor{boost::make_unique<asb_uci::type::MustFlyLocationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MustFlyLocationType::destroy(uci::type::MustFlyLocationType& accessor) {
  delete dynamic_cast<asb_uci::type::MustFlyLocationType*>(&accessor);
}

} // namespace type

} // namespace uci

