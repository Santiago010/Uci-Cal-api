/** @file RepetitionEventType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RepetitionEventType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitalEventEnum.h"
#include "asb_uci/type/RepetitionPositionChangeType.h"
#include "asb_uci/type/RouteEventEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/OrbitalEventEnum.h"
#include "uci/type/RepetitionEventType.h"
#include "uci/type/RepetitionPositionChangeType.h"
#include "uci/type/RouteEventEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RepetitionEventType::RepetitionEventType() = default;

RepetitionEventType::~RepetitionEventType() = default;

void RepetitionEventType::copy(const uci::type::RepetitionEventType& accessor) {
  copyImpl(accessor, false);
}

void RepetitionEventType::copyImpl(const uci::type::RepetitionEventType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RepetitionEventType&>(accessor);
    if (accessorImpl.positionChange_Accessor) {
      setPositionChange(*(accessorImpl.positionChange_Accessor));
    } else {
      positionChange_Accessor.reset();
    }
    if (accessorImpl.routeEvent_Accessor) {
      setRouteEvent(*(accessorImpl.routeEvent_Accessor));
    } else {
      routeEvent_Accessor.reset();
    }
    if (accessorImpl.orbitalEvent_Accessor) {
      setOrbitalEvent(*(accessorImpl.orbitalEvent_Accessor));
    } else {
      orbitalEvent_Accessor.reset();
    }
  }
}

void RepetitionEventType::reset() noexcept {
  positionChange_Accessor.reset();
  routeEvent_Accessor.reset();
  orbitalEvent_Accessor.reset();
}

uci::type::RepetitionEventType::RepetitionEventTypeChoice RepetitionEventType::getRepetitionEventTypeChoiceOrdinal() const noexcept {
  if (positionChange_Accessor) {
    return REPETITIONEVENTTYPE_CHOICE_POSITIONCHANGE;
  }
  if (routeEvent_Accessor) {
    return REPETITIONEVENTTYPE_CHOICE_ROUTEEVENT;
  }
  if (orbitalEvent_Accessor) {
    return REPETITIONEVENTTYPE_CHOICE_ORBITALEVENT;
  }
  return REPETITIONEVENTTYPE_CHOICE_NONE;
}

uci::type::RepetitionEventType& RepetitionEventType::setRepetitionEventTypeChoiceOrdinal(uci::type::RepetitionEventType::RepetitionEventTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case REPETITIONEVENTTYPE_CHOICE_POSITIONCHANGE:
      choosePositionChange("setRepetitionEventTypeChoiceOrdinal", type);
      break;
    case REPETITIONEVENTTYPE_CHOICE_ROUTEEVENT:
      chooseRouteEvent("setRepetitionEventTypeChoiceOrdinal", type);
      break;
    case REPETITIONEVENTTYPE_CHOICE_ORBITALEVENT:
      chooseOrbitalEvent("setRepetitionEventTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setRepetitionEventTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::RepetitionPositionChangeType& RepetitionEventType::getPositionChange_() const {
  if (positionChange_Accessor) {
    return *positionChange_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionChange(): Unable to get PositionChange, field not selected");
}

const uci::type::RepetitionPositionChangeType& RepetitionEventType::getPositionChange() const {
  return getPositionChange_();
}

uci::type::RepetitionPositionChangeType& RepetitionEventType::getPositionChange() {
  return getPositionChange_();
}

uci::type::RepetitionEventType& RepetitionEventType::setPositionChange(const uci::type::RepetitionPositionChangeType& accessor) {
  choosePositionChange(accessor.getAccessorType());
  if (&accessor != positionChange_Accessor.get()) {
    positionChange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RepetitionEventType::isPositionChange() const noexcept {
  return static_cast<bool>(positionChange_Accessor);
}

uci::type::RepetitionPositionChangeType& RepetitionEventType::choosePositionChange(const std::string& method, uci::base::accessorType::AccessorType type) {
  routeEvent_Accessor.reset();
  orbitalEvent_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionPositionChangeType : type};
  if ((!positionChange_Accessor) || (positionChange_Accessor->getAccessorType() != requestedType)) {
    positionChange_Accessor = RepetitionPositionChangeType::create(type);
    if (!positionChange_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionChange_Accessor;
}

uci::type::RepetitionPositionChangeType& RepetitionEventType::choosePositionChange(uci::base::accessorType::AccessorType type) {
  return choosePositionChange("choosePositionChange", type);
}

uci::type::RouteEventEnum& RepetitionEventType::getRouteEvent_() const {
  if (routeEvent_Accessor) {
    return *routeEvent_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteEvent(): Unable to get RouteEvent, field not selected");
}

const uci::type::RouteEventEnum& RepetitionEventType::getRouteEvent() const {
  return getRouteEvent_();
}

uci::type::RouteEventEnum& RepetitionEventType::getRouteEvent() {
  return getRouteEvent_();
}

uci::type::RepetitionEventType& RepetitionEventType::setRouteEvent(const uci::type::RouteEventEnum& accessor) {
  chooseRouteEvent();
  if (&accessor != routeEvent_Accessor.get()) {
    routeEvent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RepetitionEventType& RepetitionEventType::setRouteEvent(uci::type::RouteEventEnum::EnumerationItem value) {
  chooseRouteEvent().setValue(value);
  return *this;
}

bool RepetitionEventType::isRouteEvent() const noexcept {
  return static_cast<bool>(routeEvent_Accessor);
}

uci::type::RouteEventEnum& RepetitionEventType::chooseRouteEvent(const std::string& method, uci::base::accessorType::AccessorType type) {
  positionChange_Accessor.reset();
  orbitalEvent_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeEventEnum : type};
  if ((!routeEvent_Accessor) || (routeEvent_Accessor->getAccessorType() != requestedType)) {
    routeEvent_Accessor = RouteEventEnum::create(type);
    if (!routeEvent_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeEvent_Accessor;
}

uci::type::RouteEventEnum& RepetitionEventType::chooseRouteEvent(uci::base::accessorType::AccessorType type) {
  return chooseRouteEvent("chooseRouteEvent", type);
}

uci::type::OrbitalEventEnum& RepetitionEventType::getOrbitalEvent_() const {
  if (orbitalEvent_Accessor) {
    return *orbitalEvent_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalEvent(): Unable to get OrbitalEvent, field not selected");
}

const uci::type::OrbitalEventEnum& RepetitionEventType::getOrbitalEvent() const {
  return getOrbitalEvent_();
}

uci::type::OrbitalEventEnum& RepetitionEventType::getOrbitalEvent() {
  return getOrbitalEvent_();
}

uci::type::RepetitionEventType& RepetitionEventType::setOrbitalEvent(const uci::type::OrbitalEventEnum& accessor) {
  chooseOrbitalEvent();
  if (&accessor != orbitalEvent_Accessor.get()) {
    orbitalEvent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RepetitionEventType& RepetitionEventType::setOrbitalEvent(uci::type::OrbitalEventEnum::EnumerationItem value) {
  chooseOrbitalEvent().setValue(value);
  return *this;
}

bool RepetitionEventType::isOrbitalEvent() const noexcept {
  return static_cast<bool>(orbitalEvent_Accessor);
}

uci::type::OrbitalEventEnum& RepetitionEventType::chooseOrbitalEvent(const std::string& method, uci::base::accessorType::AccessorType type) {
  positionChange_Accessor.reset();
  routeEvent_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalEventEnum : type};
  if ((!orbitalEvent_Accessor) || (orbitalEvent_Accessor->getAccessorType() != requestedType)) {
    orbitalEvent_Accessor = OrbitalEventEnum::create(type);
    if (!orbitalEvent_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalEvent_Accessor;
}

uci::type::OrbitalEventEnum& RepetitionEventType::chooseOrbitalEvent(uci::base::accessorType::AccessorType type) {
  return chooseOrbitalEvent("chooseOrbitalEvent", type);
}

std::unique_ptr<RepetitionEventType> RepetitionEventType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionEventType : type};
  return (requestedType == uci::type::accessorType::repetitionEventType) ? boost::make_unique<RepetitionEventType>() : nullptr;
}

/**  */
namespace RepetitionEventType_Names {

constexpr const char* Extern_Type_Name{"RepetitionEventType"};
constexpr const char* PositionChange_Name{"PositionChange"};
constexpr const char* RouteEvent_Name{"RouteEvent"};
constexpr const char* OrbitalEvent_Name{"OrbitalEvent"};

} // namespace RepetitionEventType_Names

void RepetitionEventType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RepetitionEventType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RepetitionEventType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RepetitionEventType_Names::PositionChange_Name) {
      RepetitionPositionChangeType::deserialize(valueType.second, accessor.choosePositionChange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RepetitionEventType_Names::RouteEvent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseRouteEvent().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RepetitionEventType_Names::OrbitalEvent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseOrbitalEvent().setValueFromName(*value);
      }
    }
  }
}

std::string RepetitionEventType::serialize(const uci::type::RepetitionEventType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RepetitionEventType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RepetitionEventType_Names::Extern_Type_Name);
  }
  if (accessor.isPositionChange()) {
    RepetitionPositionChangeType::serialize(accessor.getPositionChange(), node, RepetitionEventType_Names::PositionChange_Name);
  } else if (accessor.isRouteEvent()) {
    RouteEventEnum::serialize(accessor.getRouteEvent(), node, RepetitionEventType_Names::RouteEvent_Name, false);
  } else if (accessor.isOrbitalEvent()) {
    OrbitalEventEnum::serialize(accessor.getOrbitalEvent(), node, RepetitionEventType_Names::OrbitalEvent_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RepetitionEventType& RepetitionEventType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RepetitionEventType>().release());
}

uci::type::RepetitionEventType& RepetitionEventType::create(const uci::type::RepetitionEventType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RepetitionEventType> newAccessor{boost::make_unique<asb_uci::type::RepetitionEventType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RepetitionEventType::destroy(uci::type::RepetitionEventType& accessor) {
  delete dynamic_cast<asb_uci::type::RepetitionEventType*>(&accessor);
}

} // namespace type

} // namespace uci

