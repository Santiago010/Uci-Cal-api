/** @file CapabilityRF_ProfileStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CapabilityRF_ProfileStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/RF_ProfileID_Type.h"
#include "../../../include/asb_uci/type/TimedZoneType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityRF_ProfileStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_ProfileID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TimedZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CapabilityRF_ProfileStatusType::CapabilityRF_ProfileStatusType()
  : rF_ProfileID_Accessor{boost::make_unique<RF_ProfileID_Type>()} {
}

CapabilityRF_ProfileStatusType::~CapabilityRF_ProfileStatusType() = default;

void CapabilityRF_ProfileStatusType::copy(const uci::type::CapabilityRF_ProfileStatusType& accessor) {
  copyImpl(accessor, false);
}

void CapabilityRF_ProfileStatusType::copyImpl(const uci::type::CapabilityRF_ProfileStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CapabilityRF_ProfileStatusType&>(accessor);
    setRF_ProfileID(*(accessorImpl.rF_ProfileID_Accessor));
    if (accessorImpl.timedZone_Accessor) {
      setTimedZone(*(accessorImpl.timedZone_Accessor));
    } else {
      timedZone_Accessor.reset();
    }
    if (accessorImpl.hasExpires()) {
      setExpires(accessorImpl.getExpires());
    } else {
      clearExpires();
    }
  }
}

void CapabilityRF_ProfileStatusType::reset() noexcept {
  rF_ProfileID_Accessor->reset();
  timedZone_Accessor.reset();
  clearExpires();
}

const uci::type::RF_ProfileID_Type& CapabilityRF_ProfileStatusType::getRF_ProfileID() const {
  return *rF_ProfileID_Accessor;
}

uci::type::RF_ProfileID_Type& CapabilityRF_ProfileStatusType::getRF_ProfileID() {
  return *rF_ProfileID_Accessor;
}

uci::type::CapabilityRF_ProfileStatusType& CapabilityRF_ProfileStatusType::setRF_ProfileID(const uci::type::RF_ProfileID_Type& accessor) {
  if (&accessor != rF_ProfileID_Accessor.get()) {
    rF_ProfileID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TimedZoneType& CapabilityRF_ProfileStatusType::getTimedZone_() const {
  if (timedZone_Accessor) {
    return *timedZone_Accessor;
  }
  throw uci::base::UCIException("Error in getTimedZone(): An attempt was made to get an optional field that was not enabled, call hasTimedZone() to determine if it is safe to call getTimedZone()");
}

const uci::type::TimedZoneType& CapabilityRF_ProfileStatusType::getTimedZone() const {
  return getTimedZone_();
}

uci::type::TimedZoneType& CapabilityRF_ProfileStatusType::getTimedZone() {
  return getTimedZone_();
}

uci::type::CapabilityRF_ProfileStatusType& CapabilityRF_ProfileStatusType::setTimedZone(const uci::type::TimedZoneType& accessor) {
  enableTimedZone();
  if (&accessor != timedZone_Accessor.get()) {
    timedZone_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CapabilityRF_ProfileStatusType::hasTimedZone() const noexcept {
  return static_cast<bool>(timedZone_Accessor);
}

uci::type::TimedZoneType& CapabilityRF_ProfileStatusType::enableTimedZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::timedZoneType : type};
  if ((!timedZone_Accessor) || (timedZone_Accessor->getAccessorType() != requestedType)) {
    timedZone_Accessor = TimedZoneType::create(requestedType);
    if (!timedZone_Accessor) {
      throw uci::base::UCIException("Error in enableTimedZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timedZone_Accessor;
}

uci::type::CapabilityRF_ProfileStatusType& CapabilityRF_ProfileStatusType::clearTimedZone() noexcept {
  timedZone_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue CapabilityRF_ProfileStatusType::getExpires() const {
  if (expires_Accessor) {
    return *expires_Accessor;
  }
  throw uci::base::UCIException("Error in getExpires(): An attempt was made to get an optional field that was not enabled, call hasExpires() to determine if it is safe to call getExpires()");
}

uci::type::CapabilityRF_ProfileStatusType& CapabilityRF_ProfileStatusType::setExpires(uci::type::DateTimeTypeValue value) {
  expires_Accessor = value;
  return *this;
}

bool CapabilityRF_ProfileStatusType::hasExpires() const noexcept {
  return expires_Accessor.has_value();
}

uci::type::CapabilityRF_ProfileStatusType& CapabilityRF_ProfileStatusType::clearExpires() noexcept {
  expires_Accessor.reset();
  return *this;
}

std::unique_ptr<CapabilityRF_ProfileStatusType> CapabilityRF_ProfileStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityRF_ProfileStatusType : type};
  return (requestedType == uci::type::accessorType::capabilityRF_ProfileStatusType) ? boost::make_unique<CapabilityRF_ProfileStatusType>() : nullptr;
}

/**  */
namespace CapabilityRF_ProfileStatusType_Names {

constexpr const char* Extern_Type_Name{"CapabilityRF_ProfileStatusType"};
constexpr const char* RF_ProfileID_Name{"RF_ProfileID"};
constexpr const char* TimedZone_Name{"TimedZone"};
constexpr const char* Expires_Name{"Expires"};

} // namespace CapabilityRF_ProfileStatusType_Names

void CapabilityRF_ProfileStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityRF_ProfileStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilityRF_ProfileStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilityRF_ProfileStatusType_Names::RF_ProfileID_Name) {
      RF_ProfileID_Type::deserialize(valueType.second, accessor.getRF_ProfileID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityRF_ProfileStatusType_Names::TimedZone_Name) {
      TimedZoneType::deserialize(valueType.second, accessor.enableTimedZone(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityRF_ProfileStatusType_Names::Expires_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setExpires(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    }
  }
}

std::string CapabilityRF_ProfileStatusType::serialize(const uci::type::CapabilityRF_ProfileStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CapabilityRF_ProfileStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilityRF_ProfileStatusType_Names::Extern_Type_Name);
  }
  RF_ProfileID_Type::serialize(accessor.getRF_ProfileID(), node, CapabilityRF_ProfileStatusType_Names::RF_ProfileID_Name);
  if (accessor.hasTimedZone()) {
    TimedZoneType::serialize(accessor.getTimedZone(), node, CapabilityRF_ProfileStatusType_Names::TimedZone_Name);
  }
  if (accessor.hasExpires()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getExpires(), node, CapabilityRF_ProfileStatusType_Names::Expires_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CapabilityRF_ProfileStatusType& CapabilityRF_ProfileStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CapabilityRF_ProfileStatusType>().release());
}

uci::type::CapabilityRF_ProfileStatusType& CapabilityRF_ProfileStatusType::create(const uci::type::CapabilityRF_ProfileStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CapabilityRF_ProfileStatusType> newAccessor{boost::make_unique<asb_uci::type::CapabilityRF_ProfileStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CapabilityRF_ProfileStatusType::destroy(uci::type::CapabilityRF_ProfileStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::CapabilityRF_ProfileStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

