/** @file PathSegmentSpeedChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PathSegmentSpeedChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PathSegmentSpeedValueType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MachType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PathSegmentSpeedChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PathSegmentSpeedValueType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PathSegmentSpeedChoiceType::PathSegmentSpeedChoiceType() = default;

PathSegmentSpeedChoiceType::~PathSegmentSpeedChoiceType() = default;

void PathSegmentSpeedChoiceType::copy(const uci::type::PathSegmentSpeedChoiceType& accessor) {
  copyImpl(accessor, false);
}

void PathSegmentSpeedChoiceType::copyImpl(const uci::type::PathSegmentSpeedChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PathSegmentSpeedChoiceType&>(accessor);
    if (accessorImpl.speedValue_Accessor) {
      setSpeedValue(*(accessorImpl.speedValue_Accessor));
    } else {
      speedValue_Accessor.reset();
    }
    machValue_Accessor = (accessorImpl.machValue_Accessor ? accessorImpl.machValue_Accessor : boost::none);
  }
}

void PathSegmentSpeedChoiceType::reset() noexcept {
  speedValue_Accessor.reset();
  machValue_Accessor.reset();
}

uci::type::PathSegmentSpeedChoiceType::PathSegmentSpeedChoiceTypeChoice PathSegmentSpeedChoiceType::getPathSegmentSpeedChoiceTypeChoiceOrdinal() const noexcept {
  if (speedValue_Accessor) {
    return PATHSEGMENTSPEEDCHOICETYPE_CHOICE_SPEEDVALUE;
  }
  if (machValue_Accessor) {
    return PATHSEGMENTSPEEDCHOICETYPE_CHOICE_MACHVALUE;
  }
  return PATHSEGMENTSPEEDCHOICETYPE_CHOICE_NONE;
}

uci::type::PathSegmentSpeedChoiceType& PathSegmentSpeedChoiceType::setPathSegmentSpeedChoiceTypeChoiceOrdinal(uci::type::PathSegmentSpeedChoiceType::PathSegmentSpeedChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PATHSEGMENTSPEEDCHOICETYPE_CHOICE_SPEEDVALUE:
      chooseSpeedValue("setPathSegmentSpeedChoiceTypeChoiceOrdinal", type);
      break;
    case PATHSEGMENTSPEEDCHOICETYPE_CHOICE_MACHVALUE:
      chooseMachValue();
      break;
    default:
      throw uci::base::UCIException("Error in setPathSegmentSpeedChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PathSegmentSpeedValueType& PathSegmentSpeedChoiceType::getSpeedValue_() const {
  if (speedValue_Accessor) {
    return *speedValue_Accessor;
  }
  throw uci::base::UCIException("Error in getSpeedValue(): Unable to get SpeedValue, field not selected");
}

const uci::type::PathSegmentSpeedValueType& PathSegmentSpeedChoiceType::getSpeedValue() const {
  return getSpeedValue_();
}

uci::type::PathSegmentSpeedValueType& PathSegmentSpeedChoiceType::getSpeedValue() {
  return getSpeedValue_();
}

uci::type::PathSegmentSpeedChoiceType& PathSegmentSpeedChoiceType::setSpeedValue(const uci::type::PathSegmentSpeedValueType& accessor) {
  chooseSpeedValue();
  if (&accessor != speedValue_Accessor.get()) {
    speedValue_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathSegmentSpeedChoiceType::isSpeedValue() const noexcept {
  return static_cast<bool>(speedValue_Accessor);
}

uci::type::PathSegmentSpeedValueType& PathSegmentSpeedChoiceType::chooseSpeedValue(const std::string& method, uci::base::accessorType::AccessorType type) {
  machValue_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pathSegmentSpeedValueType : type};
  if ((!speedValue_Accessor) || (speedValue_Accessor->getAccessorType() != requestedType)) {
    speedValue_Accessor = PathSegmentSpeedValueType::create(type);
    if (!speedValue_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *speedValue_Accessor;
}

uci::type::PathSegmentSpeedValueType& PathSegmentSpeedChoiceType::chooseSpeedValue(uci::base::accessorType::AccessorType type) {
  return chooseSpeedValue("chooseSpeedValue", type);
}

uci::type::MachTypeValue PathSegmentSpeedChoiceType::getMachValue() const {
  if (machValue_Accessor) {
    return *machValue_Accessor;
  }
  throw uci::base::UCIException("Error in getMachValue(): Unable to get MachValue, field not selected");
}

uci::type::PathSegmentSpeedChoiceType& PathSegmentSpeedChoiceType::setMachValue(uci::type::MachTypeValue value) {
  chooseMachValue();
  machValue_Accessor = value;
  return *this;
}

bool PathSegmentSpeedChoiceType::isMachValue() const noexcept {
  return static_cast<bool>(machValue_Accessor);
}

void PathSegmentSpeedChoiceType::chooseMachValue() {
  speedValue_Accessor.reset();
  if (!machValue_Accessor) {
    machValue_Accessor = boost::optional<asb_xs::Double>();
  }
}

std::unique_ptr<PathSegmentSpeedChoiceType> PathSegmentSpeedChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pathSegmentSpeedChoiceType : type};
  return (requestedType == uci::type::accessorType::pathSegmentSpeedChoiceType) ? boost::make_unique<PathSegmentSpeedChoiceType>() : nullptr;
}

/**  */
namespace PathSegmentSpeedChoiceType_Names {

constexpr const char* Extern_Type_Name{"PathSegmentSpeedChoiceType"};
constexpr const char* SpeedValue_Name{"SpeedValue"};
constexpr const char* MachValue_Name{"MachValue"};

} // namespace PathSegmentSpeedChoiceType_Names

void PathSegmentSpeedChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PathSegmentSpeedChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PathSegmentSpeedChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PathSegmentSpeedChoiceType_Names::SpeedValue_Name) {
      PathSegmentSpeedValueType::deserialize(valueType.second, accessor.chooseSpeedValue(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentSpeedChoiceType_Names::MachValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMachValue(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string PathSegmentSpeedChoiceType::serialize(const uci::type::PathSegmentSpeedChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PathSegmentSpeedChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PathSegmentSpeedChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isSpeedValue()) {
    PathSegmentSpeedValueType::serialize(accessor.getSpeedValue(), node, PathSegmentSpeedChoiceType_Names::SpeedValue_Name);
  } else if (accessor.isMachValue()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMachValue(), node, PathSegmentSpeedChoiceType_Names::MachValue_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PathSegmentSpeedChoiceType& PathSegmentSpeedChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PathSegmentSpeedChoiceType>().release());
}

uci::type::PathSegmentSpeedChoiceType& PathSegmentSpeedChoiceType::create(const uci::type::PathSegmentSpeedChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PathSegmentSpeedChoiceType> newAccessor{boost::make_unique<asb_uci::type::PathSegmentSpeedChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PathSegmentSpeedChoiceType::destroy(uci::type::PathSegmentSpeedChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::PathSegmentSpeedChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

