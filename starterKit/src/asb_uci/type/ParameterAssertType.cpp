/** @file ParameterAssertType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ParameterAssertType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ID_Type.h"
#include "asb_uci/type/ParameterID_Type.h"
#include "asb_uci/type/ParameterValueType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ID_Type.h"
#include "uci/type/ParameterAssertType.h"
#include "uci/type/ParameterID_Type.h"
#include "uci/type/ParameterValueType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ParameterAssertType::ParameterAssertType()
  : parameterID_Accessor{boost::make_unique<ParameterID_Type>()},
    newValue_Accessor{boost::make_unique<ParameterValueType>()} {
}

ParameterAssertType::~ParameterAssertType() = default;

void ParameterAssertType::copy(const uci::type::ParameterAssertType& accessor) {
  copyImpl(accessor, false);
}

void ParameterAssertType::copyImpl(const uci::type::ParameterAssertType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ParameterAssertType&>(accessor);
    setParameterID(*(accessorImpl.parameterID_Accessor));
    setNewValue(*(accessorImpl.newValue_Accessor));
    if (accessorImpl.objectID_Accessor) {
      setObjectID(*(accessorImpl.objectID_Accessor));
    } else {
      objectID_Accessor.reset();
    }
  }
}

void ParameterAssertType::reset() noexcept {
  parameterID_Accessor->reset();
  newValue_Accessor->reset();
  objectID_Accessor.reset();
}

const uci::type::ParameterID_Type& ParameterAssertType::getParameterID() const {
  return *parameterID_Accessor;
}

uci::type::ParameterID_Type& ParameterAssertType::getParameterID() {
  return *parameterID_Accessor;
}

uci::type::ParameterAssertType& ParameterAssertType::setParameterID(const uci::type::ParameterID_Type& accessor) {
  if (&accessor != parameterID_Accessor.get()) {
    parameterID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ParameterValueType& ParameterAssertType::getNewValue() const {
  return *newValue_Accessor;
}

uci::type::ParameterValueType& ParameterAssertType::getNewValue() {
  return *newValue_Accessor;
}

uci::type::ParameterAssertType& ParameterAssertType::setNewValue(const uci::type::ParameterValueType& accessor) {
  if (&accessor != newValue_Accessor.get()) {
    newValue_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ID_Type& ParameterAssertType::getObjectID_() const {
  if (objectID_Accessor) {
    return *objectID_Accessor;
  }
  throw uci::base::UCIException("Error in getObjectID(): An attempt was made to get an optional field that was not enabled, call hasObjectID() to determine if it is safe to call getObjectID()");
}

const uci::type::ID_Type& ParameterAssertType::getObjectID() const {
  return getObjectID_();
}

uci::type::ID_Type& ParameterAssertType::getObjectID() {
  return getObjectID_();
}

uci::type::ParameterAssertType& ParameterAssertType::setObjectID(const uci::type::ID_Type& accessor) {
  enableObjectID(accessor.getAccessorType());
  if (&accessor != objectID_Accessor.get()) {
    objectID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ParameterAssertType::hasObjectID() const noexcept {
  return static_cast<bool>(objectID_Accessor);
}

uci::type::ID_Type& ParameterAssertType::enableObjectID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iD_Type : type};
  if ((!objectID_Accessor) || (objectID_Accessor->getAccessorType() != requestedType)) {
    objectID_Accessor = ID_Type::create(requestedType);
    if (!objectID_Accessor) {
      throw uci::base::UCIException("Error in enableObjectID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *objectID_Accessor;
}

uci::type::ParameterAssertType& ParameterAssertType::clearObjectID() noexcept {
  objectID_Accessor.reset();
  return *this;
}

std::unique_ptr<ParameterAssertType> ParameterAssertType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::parameterAssertType : type};
  return (requestedType == uci::type::accessorType::parameterAssertType) ? boost::make_unique<ParameterAssertType>() : nullptr;
}

/**  */
namespace ParameterAssertType_Names {

constexpr const char* Extern_Type_Name{"ParameterAssertType"};
constexpr const char* ParameterID_Name{"ParameterID"};
constexpr const char* NewValue_Name{"NewValue"};
constexpr const char* ObjectID_Name{"ObjectID"};

} // namespace ParameterAssertType_Names

void ParameterAssertType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ParameterAssertType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ParameterAssertType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ParameterAssertType_Names::ParameterID_Name) {
      ParameterID_Type::deserialize(valueType.second, accessor.getParameterID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ParameterAssertType_Names::NewValue_Name) {
      ParameterValueType::deserialize(valueType.second, accessor.getNewValue(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ParameterAssertType_Names::ObjectID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableObjectID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string ParameterAssertType::serialize(const uci::type::ParameterAssertType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ParameterAssertType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ParameterAssertType_Names::Extern_Type_Name);
  }
  ParameterID_Type::serialize(accessor.getParameterID(), node, ParameterAssertType_Names::ParameterID_Name);
  ParameterValueType::serialize(accessor.getNewValue(), node, ParameterAssertType_Names::NewValue_Name);
  if (accessor.hasObjectID()) {
    ID_Type::serialize(accessor.getObjectID(), node, ParameterAssertType_Names::ObjectID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ParameterAssertType& ParameterAssertType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ParameterAssertType>().release());
}

uci::type::ParameterAssertType& ParameterAssertType::create(const uci::type::ParameterAssertType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ParameterAssertType> newAccessor{boost::make_unique<asb_uci::type::ParameterAssertType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ParameterAssertType::destroy(uci::type::ParameterAssertType& accessor) {
  delete dynamic_cast<asb_uci::type::ParameterAssertType*>(&accessor);
}

} // namespace type

} // namespace uci

