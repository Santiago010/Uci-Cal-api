/** @file EnduranceBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EnduranceBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EnduranceBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MassType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EnduranceBaseType::EnduranceBaseType() = default;

EnduranceBaseType::~EnduranceBaseType() = default;

void EnduranceBaseType::copy(const uci::type::EnduranceBaseType& accessor) {
  copyImpl(accessor, false);
}

void EnduranceBaseType::copyImpl(const uci::type::EnduranceBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::enduranceBaseType)) {
      const auto& accessorImpl = dynamic_cast<const EnduranceBaseType&>(accessor);
      if (accessorImpl.hasFuel()) {
        setFuel(accessorImpl.getFuel());
      } else {
        clearFuel();
      }
      if (accessorImpl.hasDuration()) {
        setDuration(accessorImpl.getDuration());
      } else {
        clearDuration();
      }
      if (accessorImpl.hasDurationEnd()) {
        setDurationEnd(accessorImpl.getDurationEnd());
      } else {
        clearDurationEnd();
      }
      if (accessorImpl.hasPercent()) {
        setPercent(accessorImpl.getPercent());
      } else {
        clearPercent();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void EnduranceBaseType::reset() noexcept {
  clearFuel();
  clearDuration();
  clearDurationEnd();
  clearPercent();
}

uci::type::MassTypeValue EnduranceBaseType::getFuel() const {
  if (fuel_Accessor) {
    return *fuel_Accessor;
  }
  throw uci::base::UCIException("Error in getFuel(): An attempt was made to get an optional field that was not enabled, call hasFuel() to determine if it is safe to call getFuel()");
}

uci::type::EnduranceBaseType& EnduranceBaseType::setFuel(uci::type::MassTypeValue value) {
  fuel_Accessor = value;
  return *this;
}

bool EnduranceBaseType::hasFuel() const noexcept {
  return fuel_Accessor.has_value();
}

uci::type::EnduranceBaseType& EnduranceBaseType::clearFuel() noexcept {
  fuel_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue EnduranceBaseType::getDuration() const {
  if (duration_Accessor) {
    return *duration_Accessor;
  }
  throw uci::base::UCIException("Error in getDuration(): An attempt was made to get an optional field that was not enabled, call hasDuration() to determine if it is safe to call getDuration()");
}

uci::type::EnduranceBaseType& EnduranceBaseType::setDuration(uci::type::DurationTypeValue value) {
  duration_Accessor = value;
  return *this;
}

bool EnduranceBaseType::hasDuration() const noexcept {
  return duration_Accessor.has_value();
}

uci::type::EnduranceBaseType& EnduranceBaseType::clearDuration() noexcept {
  duration_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue EnduranceBaseType::getDurationEnd() const {
  if (durationEnd_Accessor) {
    return *durationEnd_Accessor;
  }
  throw uci::base::UCIException("Error in getDurationEnd(): An attempt was made to get an optional field that was not enabled, call hasDurationEnd() to determine if it is safe to call getDurationEnd()");
}

uci::type::EnduranceBaseType& EnduranceBaseType::setDurationEnd(uci::type::DateTimeTypeValue value) {
  durationEnd_Accessor = value;
  return *this;
}

bool EnduranceBaseType::hasDurationEnd() const noexcept {
  return durationEnd_Accessor.has_value();
}

uci::type::EnduranceBaseType& EnduranceBaseType::clearDurationEnd() noexcept {
  durationEnd_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue EnduranceBaseType::getPercent() const {
  if (percent_Accessor) {
    return *percent_Accessor;
  }
  throw uci::base::UCIException("Error in getPercent(): An attempt was made to get an optional field that was not enabled, call hasPercent() to determine if it is safe to call getPercent()");
}

uci::type::EnduranceBaseType& EnduranceBaseType::setPercent(uci::type::PercentTypeValue value) {
  percent_Accessor = value;
  return *this;
}

bool EnduranceBaseType::hasPercent() const noexcept {
  return percent_Accessor.has_value();
}

uci::type::EnduranceBaseType& EnduranceBaseType::clearPercent() noexcept {
  percent_Accessor.reset();
  return *this;
}

std::unique_ptr<EnduranceBaseType> EnduranceBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::enduranceBaseType : type};
  return std::unique_ptr<EnduranceBaseType>(dynamic_cast<EnduranceBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace EnduranceBaseType_Names {

constexpr const char* Extern_Type_Name{"EnduranceBaseType"};
constexpr const char* Fuel_Name{"Fuel"};
constexpr const char* Duration_Name{"Duration"};
constexpr const char* DurationEnd_Name{"DurationEnd"};
constexpr const char* Percent_Name{"Percent"};

} // namespace EnduranceBaseType_Names

void EnduranceBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EnduranceBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EnduranceBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EnduranceBaseType_Names::Fuel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFuel(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EnduranceBaseType_Names::Duration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + EnduranceBaseType_Names::DurationEnd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDurationEnd(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + EnduranceBaseType_Names::Percent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercent(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string EnduranceBaseType::serialize(const uci::type::EnduranceBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EnduranceBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::enduranceBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, EnduranceBaseType_Names::Extern_Type_Name);
    }
    if (accessor.hasFuel()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFuel(), node, EnduranceBaseType_Names::Fuel_Name);
    }
    if (accessor.hasDuration()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getDuration(), node, EnduranceBaseType_Names::Duration_Name);
    }
    if (accessor.hasDurationEnd()) {
      asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getDurationEnd(), node, EnduranceBaseType_Names::DurationEnd_Name);
    }
    if (accessor.hasPercent()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercent(), node, EnduranceBaseType_Names::Percent_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EnduranceBaseType& EnduranceBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EnduranceBaseType>().release());
}

uci::type::EnduranceBaseType& EnduranceBaseType::create(const uci::type::EnduranceBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EnduranceBaseType> newAccessor{boost::make_unique<asb_uci::type::EnduranceBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EnduranceBaseType::destroy(uci::type::EnduranceBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::EnduranceBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

