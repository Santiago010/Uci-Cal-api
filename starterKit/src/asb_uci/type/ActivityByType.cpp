/** @file ActivityByType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ActivityByType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivitySubCategoryEnum.h"
#include "asb_uci/type/EnvironmentEnum.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityByType.h"
#include "uci/type/ActivitySubCategoryEnum.h"
#include "uci/type/EnvironmentEnum.h"
#include "uci/type/ForeignKeyType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ActivityByType::ActivityByType()
  : activityCategory_Accessor{boost::make_unique<EnvironmentEnum>()} {
}

ActivityByType::~ActivityByType() = default;

void ActivityByType::copy(const uci::type::ActivityByType& accessor) {
  copyImpl(accessor, false);
}

void ActivityByType::copyImpl(const uci::type::ActivityByType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ActivityByType&>(accessor);
    setActivity(accessorImpl.activity_Accessor);
    if (accessorImpl.hasActivityAmplification()) {
      setActivityAmplification(accessorImpl.getActivityAmplification());
    } else {
      clearActivityAmplification();
    }
    setActivityCategory(*(accessorImpl.activityCategory_Accessor));
    if (accessorImpl.customActivity_Accessor) {
      setCustomActivity(*(accessorImpl.customActivity_Accessor));
    } else {
      customActivity_Accessor.reset();
    }
    if (accessorImpl.activitySubCategory_Accessor) {
      setActivitySubCategory(*(accessorImpl.activitySubCategory_Accessor));
    } else {
      activitySubCategory_Accessor.reset();
    }
  }
}

void ActivityByType::reset() noexcept {
  activity_Accessor = 0;
  clearActivityAmplification();
  activityCategory_Accessor->reset();
  customActivity_Accessor.reset();
  activitySubCategory_Accessor.reset();
}

xs::UnsignedInt ActivityByType::getActivity() const {
  return activity_Accessor;
}

uci::type::ActivityByType& ActivityByType::setActivity(xs::UnsignedInt value) {
  activity_Accessor = value;
  return *this;
}


xs::UnsignedInt ActivityByType::getActivityAmplification() const {
  if (activityAmplification_Accessor) {
    return *activityAmplification_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityAmplification(): An attempt was made to get an optional field that was not enabled, call hasActivityAmplification() to determine if it is safe to call getActivityAmplification()");
}

uci::type::ActivityByType& ActivityByType::setActivityAmplification(xs::UnsignedInt value) {
  activityAmplification_Accessor = value;
  return *this;
}

bool ActivityByType::hasActivityAmplification() const noexcept {
  return activityAmplification_Accessor.has_value();
}

uci::type::ActivityByType& ActivityByType::clearActivityAmplification() noexcept {
  activityAmplification_Accessor.reset();
  return *this;
}

const uci::type::EnvironmentEnum& ActivityByType::getActivityCategory() const {
  return *activityCategory_Accessor;
}

uci::type::EnvironmentEnum& ActivityByType::getActivityCategory() {
  return *activityCategory_Accessor;
}

uci::type::ActivityByType& ActivityByType::setActivityCategory(const uci::type::EnvironmentEnum& accessor) {
  if (&accessor != activityCategory_Accessor.get()) {
    activityCategory_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ActivityByType& ActivityByType::setActivityCategory(uci::type::EnvironmentEnum::EnumerationItem value) {
  activityCategory_Accessor->setValue(value);
  return *this;
}


uci::type::ForeignKeyType& ActivityByType::getCustomActivity_() const {
  if (customActivity_Accessor) {
    return *customActivity_Accessor;
  }
  throw uci::base::UCIException("Error in getCustomActivity(): An attempt was made to get an optional field that was not enabled, call hasCustomActivity() to determine if it is safe to call getCustomActivity()");
}

const uci::type::ForeignKeyType& ActivityByType::getCustomActivity() const {
  return getCustomActivity_();
}

uci::type::ForeignKeyType& ActivityByType::getCustomActivity() {
  return getCustomActivity_();
}

uci::type::ActivityByType& ActivityByType::setCustomActivity(const uci::type::ForeignKeyType& accessor) {
  enableCustomActivity(accessor.getAccessorType());
  if (&accessor != customActivity_Accessor.get()) {
    customActivity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ActivityByType::hasCustomActivity() const noexcept {
  return static_cast<bool>(customActivity_Accessor);
}

uci::type::ForeignKeyType& ActivityByType::enableCustomActivity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!customActivity_Accessor) || (customActivity_Accessor->getAccessorType() != requestedType)) {
    customActivity_Accessor = ForeignKeyType::create(requestedType);
    if (!customActivity_Accessor) {
      throw uci::base::UCIException("Error in enableCustomActivity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *customActivity_Accessor;
}

uci::type::ActivityByType& ActivityByType::clearCustomActivity() noexcept {
  customActivity_Accessor.reset();
  return *this;
}

uci::type::ActivitySubCategoryEnum& ActivityByType::getActivitySubCategory_() const {
  if (activitySubCategory_Accessor) {
    return *activitySubCategory_Accessor;
  }
  throw uci::base::UCIException("Error in getActivitySubCategory(): An attempt was made to get an optional field that was not enabled, call hasActivitySubCategory() to determine if it is safe to call getActivitySubCategory()");
}

const uci::type::ActivitySubCategoryEnum& ActivityByType::getActivitySubCategory() const {
  return getActivitySubCategory_();
}

uci::type::ActivitySubCategoryEnum& ActivityByType::getActivitySubCategory() {
  return getActivitySubCategory_();
}

uci::type::ActivityByType& ActivityByType::setActivitySubCategory(const uci::type::ActivitySubCategoryEnum& accessor) {
  enableActivitySubCategory();
  if (&accessor != activitySubCategory_Accessor.get()) {
    activitySubCategory_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ActivityByType& ActivityByType::setActivitySubCategory(const uci::type::ActivitySubCategoryEnum::EnumerationItem value) {
  enableActivitySubCategory().setValue(value);
  return *this;
}

bool ActivityByType::hasActivitySubCategory() const noexcept {
  return static_cast<bool>(activitySubCategory_Accessor);
}

uci::type::ActivitySubCategoryEnum& ActivityByType::enableActivitySubCategory(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activitySubCategoryEnum : type};
  if ((!activitySubCategory_Accessor) || (activitySubCategory_Accessor->getAccessorType() != requestedType)) {
    activitySubCategory_Accessor = ActivitySubCategoryEnum::create(requestedType);
    if (!activitySubCategory_Accessor) {
      throw uci::base::UCIException("Error in enableActivitySubCategory(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activitySubCategory_Accessor;
}

uci::type::ActivityByType& ActivityByType::clearActivitySubCategory() noexcept {
  activitySubCategory_Accessor.reset();
  return *this;
}

std::unique_ptr<ActivityByType> ActivityByType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityByType : type};
  return (requestedType == uci::type::accessorType::activityByType) ? boost::make_unique<ActivityByType>() : nullptr;
}

/**  */
namespace ActivityByType_Names {

constexpr const char* Extern_Type_Name{"ActivityByType"};
constexpr const char* Activity_Name{"Activity"};
constexpr const char* ActivityAmplification_Name{"ActivityAmplification"};
constexpr const char* ActivityCategory_Name{"ActivityCategory"};
constexpr const char* CustomActivity_Name{"CustomActivity"};
constexpr const char* ActivitySubCategory_Name{"ActivitySubCategory"};

} // namespace ActivityByType_Names

void ActivityByType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActivityByType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActivityByType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ActivityByType_Names::Activity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActivity(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ActivityByType_Names::ActivityAmplification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActivityAmplification(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ActivityByType_Names::ActivityCategory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getActivityCategory().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ActivityByType_Names::CustomActivity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableCustomActivity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityByType_Names::ActivitySubCategory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableActivitySubCategory().setValueFromName(*value);
      }
    }
  }
}

std::string ActivityByType::serialize(const uci::type::ActivityByType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ActivityByType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ActivityByType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getActivity(), node, ActivityByType_Names::Activity_Name);
  if (accessor.hasActivityAmplification()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getActivityAmplification(), node, ActivityByType_Names::ActivityAmplification_Name);
  }
  EnvironmentEnum::serialize(accessor.getActivityCategory(), node, ActivityByType_Names::ActivityCategory_Name, false);
  if (accessor.hasCustomActivity()) {
    ForeignKeyType::serialize(accessor.getCustomActivity(), node, ActivityByType_Names::CustomActivity_Name);
  }
  if (accessor.hasActivitySubCategory()) {
    ActivitySubCategoryEnum::serialize(accessor.getActivitySubCategory(), node, ActivityByType_Names::ActivitySubCategory_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ActivityByType& ActivityByType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ActivityByType>().release());
}

uci::type::ActivityByType& ActivityByType::create(const uci::type::ActivityByType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ActivityByType> newAccessor{boost::make_unique<asb_uci::type::ActivityByType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ActivityByType::destroy(uci::type::ActivityByType& accessor) {
  delete dynamic_cast<asb_uci::type::ActivityByType*>(&accessor);
}

} // namespace type

} // namespace uci

