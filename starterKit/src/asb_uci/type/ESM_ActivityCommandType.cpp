/** @file ESM_ActivityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ESM_ActivityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityCommandFrequencyType.h"
#include "../../../include/asb_uci/type/DependentActivityType.h"
#include "../../../include/asb_uci/type/ESM_ChangeDwellType.h"
#include "../../../include/asb_uci/type/ESM_ChangeGeolocationType.h"
#include "../../../include/asb_uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "../../../include/asb_uci/type/SubCapabilityDetailsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityCommandFrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DependentActivityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_ActivityCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_ChangeDwellType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_ChangeGeolocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubCapabilityDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ESM_ActivityCommandType::ESM_ActivityCommandType()
  : eSM_ChangeDwell_Accessor{boost::make_unique<ESM_ChangeDwell>(0, SIZE_MAX)} {
}

ESM_ActivityCommandType::~ESM_ActivityCommandType() = default;

void ESM_ActivityCommandType::copy(const uci::type::ESM_ActivityCommandType& accessor) {
  copyImpl(accessor, false);
}

void ESM_ActivityCommandType::copyImpl(const uci::type::ESM_ActivityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SharedRF_ApertureActivityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ESM_ActivityCommandType&>(accessor);
    setESM_ChangeDwell(*(accessorImpl.eSM_ChangeDwell_Accessor));
    if (accessorImpl.eSM_ChangeGeolocation_Accessor) {
      setESM_ChangeGeolocation(*(accessorImpl.eSM_ChangeGeolocation_Accessor));
    } else {
      eSM_ChangeGeolocation_Accessor.reset();
    }
    if (accessorImpl.changeDependentActivity_Accessor) {
      setChangeDependentActivity(*(accessorImpl.changeDependentActivity_Accessor));
    } else {
      changeDependentActivity_Accessor.reset();
    }
    if (accessorImpl.eSM_ChangeSubCapabilityDetails_Accessor) {
      setESM_ChangeSubCapabilityDetails(*(accessorImpl.eSM_ChangeSubCapabilityDetails_Accessor));
    } else {
      eSM_ChangeSubCapabilityDetails_Accessor.reset();
    }
    if (accessorImpl.hasSpectralDensityReporting()) {
      setSpectralDensityReporting(accessorImpl.getSpectralDensityReporting());
    } else {
      clearSpectralDensityReporting();
    }
    if (accessorImpl.frequency_Accessor) {
      setFrequency(*(accessorImpl.frequency_Accessor));
    } else {
      frequency_Accessor.reset();
    }
  }
}

void ESM_ActivityCommandType::reset() noexcept {
  SharedRF_ApertureActivityCommandBaseType::reset();
  eSM_ChangeDwell_Accessor->reset();
  eSM_ChangeGeolocation_Accessor.reset();
  changeDependentActivity_Accessor.reset();
  eSM_ChangeSubCapabilityDetails_Accessor.reset();
  clearSpectralDensityReporting();
  frequency_Accessor.reset();
}

const uci::type::ESM_ActivityCommandType::ESM_ChangeDwell& ESM_ActivityCommandType::getESM_ChangeDwell() const {
  return *eSM_ChangeDwell_Accessor;
}

uci::type::ESM_ActivityCommandType::ESM_ChangeDwell& ESM_ActivityCommandType::getESM_ChangeDwell() {
  return *eSM_ChangeDwell_Accessor;
}

uci::type::ESM_ActivityCommandType& ESM_ActivityCommandType::setESM_ChangeDwell(const uci::type::ESM_ActivityCommandType::ESM_ChangeDwell& accessor) {
  if (&accessor != eSM_ChangeDwell_Accessor.get()) {
    eSM_ChangeDwell_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ESM_ChangeGeolocationType& ESM_ActivityCommandType::getESM_ChangeGeolocation_() const {
  if (eSM_ChangeGeolocation_Accessor) {
    return *eSM_ChangeGeolocation_Accessor;
  }
  throw uci::base::UCIException("Error in getESM_ChangeGeolocation(): An attempt was made to get an optional field that was not enabled, call hasESM_ChangeGeolocation() to determine if it is safe to call getESM_ChangeGeolocation()");
}

const uci::type::ESM_ChangeGeolocationType& ESM_ActivityCommandType::getESM_ChangeGeolocation() const {
  return getESM_ChangeGeolocation_();
}

uci::type::ESM_ChangeGeolocationType& ESM_ActivityCommandType::getESM_ChangeGeolocation() {
  return getESM_ChangeGeolocation_();
}

uci::type::ESM_ActivityCommandType& ESM_ActivityCommandType::setESM_ChangeGeolocation(const uci::type::ESM_ChangeGeolocationType& accessor) {
  enableESM_ChangeGeolocation();
  if (&accessor != eSM_ChangeGeolocation_Accessor.get()) {
    eSM_ChangeGeolocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_ActivityCommandType::hasESM_ChangeGeolocation() const noexcept {
  return static_cast<bool>(eSM_ChangeGeolocation_Accessor);
}

uci::type::ESM_ChangeGeolocationType& ESM_ActivityCommandType::enableESM_ChangeGeolocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_ChangeGeolocationType : type};
  if ((!eSM_ChangeGeolocation_Accessor) || (eSM_ChangeGeolocation_Accessor->getAccessorType() != requestedType)) {
    eSM_ChangeGeolocation_Accessor = ESM_ChangeGeolocationType::create(requestedType);
    if (!eSM_ChangeGeolocation_Accessor) {
      throw uci::base::UCIException("Error in enableESM_ChangeGeolocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eSM_ChangeGeolocation_Accessor;
}

uci::type::ESM_ActivityCommandType& ESM_ActivityCommandType::clearESM_ChangeGeolocation() noexcept {
  eSM_ChangeGeolocation_Accessor.reset();
  return *this;
}

uci::type::DependentActivityType& ESM_ActivityCommandType::getChangeDependentActivity_() const {
  if (changeDependentActivity_Accessor) {
    return *changeDependentActivity_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeDependentActivity(): An attempt was made to get an optional field that was not enabled, call hasChangeDependentActivity() to determine if it is safe to call getChangeDependentActivity()");
}

const uci::type::DependentActivityType& ESM_ActivityCommandType::getChangeDependentActivity() const {
  return getChangeDependentActivity_();
}

uci::type::DependentActivityType& ESM_ActivityCommandType::getChangeDependentActivity() {
  return getChangeDependentActivity_();
}

uci::type::ESM_ActivityCommandType& ESM_ActivityCommandType::setChangeDependentActivity(const uci::type::DependentActivityType& accessor) {
  enableChangeDependentActivity();
  if (&accessor != changeDependentActivity_Accessor.get()) {
    changeDependentActivity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_ActivityCommandType::hasChangeDependentActivity() const noexcept {
  return static_cast<bool>(changeDependentActivity_Accessor);
}

uci::type::DependentActivityType& ESM_ActivityCommandType::enableChangeDependentActivity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dependentActivityType : type};
  if ((!changeDependentActivity_Accessor) || (changeDependentActivity_Accessor->getAccessorType() != requestedType)) {
    changeDependentActivity_Accessor = DependentActivityType::create(requestedType);
    if (!changeDependentActivity_Accessor) {
      throw uci::base::UCIException("Error in enableChangeDependentActivity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeDependentActivity_Accessor;
}

uci::type::ESM_ActivityCommandType& ESM_ActivityCommandType::clearChangeDependentActivity() noexcept {
  changeDependentActivity_Accessor.reset();
  return *this;
}

uci::type::SubCapabilityDetailsType& ESM_ActivityCommandType::getESM_ChangeSubCapabilityDetails_() const {
  if (eSM_ChangeSubCapabilityDetails_Accessor) {
    return *eSM_ChangeSubCapabilityDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getESM_ChangeSubCapabilityDetails(): An attempt was made to get an optional field that was not enabled, call hasESM_ChangeSubCapabilityDetails() to determine if it is safe to call getESM_ChangeSubCapabilityDetails()");
}

const uci::type::SubCapabilityDetailsType& ESM_ActivityCommandType::getESM_ChangeSubCapabilityDetails() const {
  return getESM_ChangeSubCapabilityDetails_();
}

uci::type::SubCapabilityDetailsType& ESM_ActivityCommandType::getESM_ChangeSubCapabilityDetails() {
  return getESM_ChangeSubCapabilityDetails_();
}

uci::type::ESM_ActivityCommandType& ESM_ActivityCommandType::setESM_ChangeSubCapabilityDetails(const uci::type::SubCapabilityDetailsType& accessor) {
  enableESM_ChangeSubCapabilityDetails();
  if (&accessor != eSM_ChangeSubCapabilityDetails_Accessor.get()) {
    eSM_ChangeSubCapabilityDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_ActivityCommandType::hasESM_ChangeSubCapabilityDetails() const noexcept {
  return static_cast<bool>(eSM_ChangeSubCapabilityDetails_Accessor);
}

uci::type::SubCapabilityDetailsType& ESM_ActivityCommandType::enableESM_ChangeSubCapabilityDetails(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subCapabilityDetailsType : type};
  if ((!eSM_ChangeSubCapabilityDetails_Accessor) || (eSM_ChangeSubCapabilityDetails_Accessor->getAccessorType() != requestedType)) {
    eSM_ChangeSubCapabilityDetails_Accessor = SubCapabilityDetailsType::create(requestedType);
    if (!eSM_ChangeSubCapabilityDetails_Accessor) {
      throw uci::base::UCIException("Error in enableESM_ChangeSubCapabilityDetails(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eSM_ChangeSubCapabilityDetails_Accessor;
}

uci::type::ESM_ActivityCommandType& ESM_ActivityCommandType::clearESM_ChangeSubCapabilityDetails() noexcept {
  eSM_ChangeSubCapabilityDetails_Accessor.reset();
  return *this;
}

xs::Boolean ESM_ActivityCommandType::getSpectralDensityReporting() const {
  if (spectralDensityReporting_Accessor) {
    return *spectralDensityReporting_Accessor;
  }
  throw uci::base::UCIException("Error in getSpectralDensityReporting(): An attempt was made to get an optional field that was not enabled, call hasSpectralDensityReporting() to determine if it is safe to call getSpectralDensityReporting()");
}

uci::type::ESM_ActivityCommandType& ESM_ActivityCommandType::setSpectralDensityReporting(xs::Boolean value) {
  spectralDensityReporting_Accessor = value;
  return *this;
}

bool ESM_ActivityCommandType::hasSpectralDensityReporting() const noexcept {
  return spectralDensityReporting_Accessor.has_value();
}

uci::type::ESM_ActivityCommandType& ESM_ActivityCommandType::clearSpectralDensityReporting() noexcept {
  spectralDensityReporting_Accessor.reset();
  return *this;
}

uci::type::CapabilityCommandFrequencyType& ESM_ActivityCommandType::getFrequency_() const {
  if (frequency_Accessor) {
    return *frequency_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequency(): An attempt was made to get an optional field that was not enabled, call hasFrequency() to determine if it is safe to call getFrequency()");
}

const uci::type::CapabilityCommandFrequencyType& ESM_ActivityCommandType::getFrequency() const {
  return getFrequency_();
}

uci::type::CapabilityCommandFrequencyType& ESM_ActivityCommandType::getFrequency() {
  return getFrequency_();
}

uci::type::ESM_ActivityCommandType& ESM_ActivityCommandType::setFrequency(const uci::type::CapabilityCommandFrequencyType& accessor) {
  enableFrequency();
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_ActivityCommandType::hasFrequency() const noexcept {
  return static_cast<bool>(frequency_Accessor);
}

uci::type::CapabilityCommandFrequencyType& ESM_ActivityCommandType::enableFrequency(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandFrequencyType : type};
  if ((!frequency_Accessor) || (frequency_Accessor->getAccessorType() != requestedType)) {
    frequency_Accessor = CapabilityCommandFrequencyType::create(requestedType);
    if (!frequency_Accessor) {
      throw uci::base::UCIException("Error in enableFrequency(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *frequency_Accessor;
}

uci::type::ESM_ActivityCommandType& ESM_ActivityCommandType::clearFrequency() noexcept {
  frequency_Accessor.reset();
  return *this;
}

std::unique_ptr<ESM_ActivityCommandType> ESM_ActivityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_ActivityCommandType : type};
  return (requestedType == uci::type::accessorType::eSM_ActivityCommandType) ? boost::make_unique<ESM_ActivityCommandType>() : nullptr;
}

/**  */
namespace ESM_ActivityCommandType_Names {

constexpr const char* Extern_Type_Name{"ESM_ActivityCommandType"};
constexpr const char* ESM_ChangeDwell_Name{"ESM_ChangeDwell"};
constexpr const char* ESM_ChangeGeolocation_Name{"ESM_ChangeGeolocation"};
constexpr const char* ChangeDependentActivity_Name{"ChangeDependentActivity"};
constexpr const char* ESM_ChangeSubCapabilityDetails_Name{"ESM_ChangeSubCapabilityDetails"};
constexpr const char* SpectralDensityReporting_Name{"SpectralDensityReporting"};
constexpr const char* Frequency_Name{"Frequency"};

} // namespace ESM_ActivityCommandType_Names

void ESM_ActivityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ESM_ActivityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ESM_ActivityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ESM_ActivityCommandType_Names::ESM_ChangeDwell_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ESM_ActivityCommandType::ESM_ChangeDwell& boundedList = accessor.getESM_ChangeDwell();
        const uci::type::ESM_ActivityCommandType::ESM_ChangeDwell::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ESM_ChangeDwellType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ESM_ActivityCommandType_Names::ESM_ChangeGeolocation_Name) {
      ESM_ChangeGeolocationType::deserialize(valueType.second, accessor.enableESM_ChangeGeolocation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_ActivityCommandType_Names::ChangeDependentActivity_Name) {
      DependentActivityType::deserialize(valueType.second, accessor.enableChangeDependentActivity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_ActivityCommandType_Names::ESM_ChangeSubCapabilityDetails_Name) {
      SubCapabilityDetailsType::deserialize(valueType.second, accessor.enableESM_ChangeSubCapabilityDetails(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_ActivityCommandType_Names::SpectralDensityReporting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpectralDensityReporting(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_ActivityCommandType_Names::Frequency_Name) {
      CapabilityCommandFrequencyType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    }
  }
  SharedRF_ApertureActivityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ESM_ActivityCommandType::serialize(const uci::type::ESM_ActivityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ESM_ActivityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ESM_ActivityCommandType_Names::Extern_Type_Name);
  }
  SharedRF_ApertureActivityCommandBaseType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::ESM_ActivityCommandType::ESM_ChangeDwell& boundedList = accessor.getESM_ChangeDwell();
    for (uci::type::ESM_ActivityCommandType::ESM_ChangeDwell::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ESM_ChangeDwellType::serialize(boundedList.at(i), node, ESM_ActivityCommandType_Names::ESM_ChangeDwell_Name);
    }
  }
  if (accessor.hasESM_ChangeGeolocation()) {
    ESM_ChangeGeolocationType::serialize(accessor.getESM_ChangeGeolocation(), node, ESM_ActivityCommandType_Names::ESM_ChangeGeolocation_Name);
  }
  if (accessor.hasChangeDependentActivity()) {
    DependentActivityType::serialize(accessor.getChangeDependentActivity(), node, ESM_ActivityCommandType_Names::ChangeDependentActivity_Name);
  }
  if (accessor.hasESM_ChangeSubCapabilityDetails()) {
    SubCapabilityDetailsType::serialize(accessor.getESM_ChangeSubCapabilityDetails(), node, ESM_ActivityCommandType_Names::ESM_ChangeSubCapabilityDetails_Name);
  }
  if (accessor.hasSpectralDensityReporting()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSpectralDensityReporting(), node, ESM_ActivityCommandType_Names::SpectralDensityReporting_Name);
  }
  if (accessor.hasFrequency()) {
    CapabilityCommandFrequencyType::serialize(accessor.getFrequency(), node, ESM_ActivityCommandType_Names::Frequency_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ESM_ActivityCommandType& ESM_ActivityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ESM_ActivityCommandType>().release());
}

uci::type::ESM_ActivityCommandType& ESM_ActivityCommandType::create(const uci::type::ESM_ActivityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ESM_ActivityCommandType> newAccessor{boost::make_unique<asb_uci::type::ESM_ActivityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ESM_ActivityCommandType::destroy(uci::type::ESM_ActivityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::ESM_ActivityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

