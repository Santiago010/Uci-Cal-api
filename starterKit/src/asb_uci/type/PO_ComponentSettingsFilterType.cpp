/** @file PO_ComponentSettingsFilterType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentSettingsFilterType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentControlsA_Type.h"
#include "../../../include/asb_uci/type/PO_ComponentSettingsBandpassFrequencyType.h"
#include "../../../include/asb_uci/type/PO_FPA_ID_Type.h"
#include "../../../include/asb_uci/type/PO_FilterID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentControlsA_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentSettingsBandpassFrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentSettingsFilterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_FPA_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_FilterID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsFilterType::PO_ComponentSettingsFilterType()
  : filterID_Accessor{boost::make_unique<PO_FilterID_Type>()},
    fPA_ID_Accessor{boost::make_unique<FPA_ID>(0, SIZE_MAX)},
    bandpassFrequency_Accessor{boost::make_unique<BandpassFrequency>(0, SIZE_MAX)} {
}

PO_ComponentSettingsFilterType::~PO_ComponentSettingsFilterType() = default;

void PO_ComponentSettingsFilterType::copy(const uci::type::PO_ComponentSettingsFilterType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsFilterType::copyImpl(const uci::type::PO_ComponentSettingsFilterType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsFilterType&>(accessor);
    setFilterID(*(accessorImpl.filterID_Accessor));
    setFPA_ID(*(accessorImpl.fPA_ID_Accessor));
    if (accessorImpl.filterControls_Accessor) {
      setFilterControls(*(accessorImpl.filterControls_Accessor));
    } else {
      filterControls_Accessor.reset();
    }
    setBandpassFrequency(*(accessorImpl.bandpassFrequency_Accessor));
  }
}

void PO_ComponentSettingsFilterType::reset() noexcept {
  filterID_Accessor->reset();
  fPA_ID_Accessor->reset();
  filterControls_Accessor.reset();
  bandpassFrequency_Accessor->reset();
}

const uci::type::PO_FilterID_Type& PO_ComponentSettingsFilterType::getFilterID() const {
  return *filterID_Accessor;
}

uci::type::PO_FilterID_Type& PO_ComponentSettingsFilterType::getFilterID() {
  return *filterID_Accessor;
}

uci::type::PO_ComponentSettingsFilterType& PO_ComponentSettingsFilterType::setFilterID(const uci::type::PO_FilterID_Type& accessor) {
  if (&accessor != filterID_Accessor.get()) {
    filterID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentSettingsFilterType::FPA_ID& PO_ComponentSettingsFilterType::getFPA_ID() const {
  return *fPA_ID_Accessor;
}

uci::type::PO_ComponentSettingsFilterType::FPA_ID& PO_ComponentSettingsFilterType::getFPA_ID() {
  return *fPA_ID_Accessor;
}

uci::type::PO_ComponentSettingsFilterType& PO_ComponentSettingsFilterType::setFPA_ID(const uci::type::PO_ComponentSettingsFilterType::FPA_ID& accessor) {
  if (&accessor != fPA_ID_Accessor.get()) {
    fPA_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ComponentControlsA_Type& PO_ComponentSettingsFilterType::getFilterControls_() const {
  if (filterControls_Accessor) {
    return *filterControls_Accessor;
  }
  throw uci::base::UCIException("Error in getFilterControls(): An attempt was made to get an optional field that was not enabled, call hasFilterControls() to determine if it is safe to call getFilterControls()");
}

const uci::type::ComponentControlsA_Type& PO_ComponentSettingsFilterType::getFilterControls() const {
  return getFilterControls_();
}

uci::type::ComponentControlsA_Type& PO_ComponentSettingsFilterType::getFilterControls() {
  return getFilterControls_();
}

uci::type::PO_ComponentSettingsFilterType& PO_ComponentSettingsFilterType::setFilterControls(const uci::type::ComponentControlsA_Type& accessor) {
  enableFilterControls();
  if (&accessor != filterControls_Accessor.get()) {
    filterControls_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFilterType::hasFilterControls() const noexcept {
  return static_cast<bool>(filterControls_Accessor);
}

uci::type::ComponentControlsA_Type& PO_ComponentSettingsFilterType::enableFilterControls(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControlsA_Type : type};
  if ((!filterControls_Accessor) || (filterControls_Accessor->getAccessorType() != requestedType)) {
    filterControls_Accessor = ComponentControlsA_Type::create(requestedType);
    if (!filterControls_Accessor) {
      throw uci::base::UCIException("Error in enableFilterControls(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *filterControls_Accessor;
}

uci::type::PO_ComponentSettingsFilterType& PO_ComponentSettingsFilterType::clearFilterControls() noexcept {
  filterControls_Accessor.reset();
  return *this;
}

const uci::type::PO_ComponentSettingsFilterType::BandpassFrequency& PO_ComponentSettingsFilterType::getBandpassFrequency() const {
  return *bandpassFrequency_Accessor;
}

uci::type::PO_ComponentSettingsFilterType::BandpassFrequency& PO_ComponentSettingsFilterType::getBandpassFrequency() {
  return *bandpassFrequency_Accessor;
}

uci::type::PO_ComponentSettingsFilterType& PO_ComponentSettingsFilterType::setBandpassFrequency(const uci::type::PO_ComponentSettingsFilterType::BandpassFrequency& accessor) {
  if (&accessor != bandpassFrequency_Accessor.get()) {
    bandpassFrequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PO_ComponentSettingsFilterType> PO_ComponentSettingsFilterType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFilterType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsFilterType) ? boost::make_unique<PO_ComponentSettingsFilterType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsFilterType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsFilterType"};
constexpr const char* FilterID_Name{"FilterID"};
constexpr const char* FPA_ID_Name{"FPA_ID"};
constexpr const char* FilterControls_Name{"FilterControls"};
constexpr const char* BandpassFrequency_Name{"BandpassFrequency"};

} // namespace PO_ComponentSettingsFilterType_Names

void PO_ComponentSettingsFilterType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsFilterType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsFilterType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFilterType_Names::FilterID_Name) {
      PO_FilterID_Type::deserialize(valueType.second, accessor.getFilterID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFilterType_Names::FPA_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentSettingsFilterType::FPA_ID& boundedList = accessor.getFPA_ID();
        const uci::type::PO_ComponentSettingsFilterType::FPA_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_FPA_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFilterType_Names::FilterControls_Name) {
      ComponentControlsA_Type::deserialize(valueType.second, accessor.enableFilterControls(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFilterType_Names::BandpassFrequency_Name) {
      uci::type::PO_ComponentSettingsFilterType::BandpassFrequency& boundedList = accessor.getBandpassFrequency();
      const uci::type::PO_ComponentSettingsFilterType::BandpassFrequency::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::PO_ComponentSettingsBandpassFrequencyType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentSettingsFilterType::serialize(const uci::type::PO_ComponentSettingsFilterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsFilterType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsFilterType_Names::Extern_Type_Name);
  }
  PO_FilterID_Type::serialize(accessor.getFilterID(), node, PO_ComponentSettingsFilterType_Names::FilterID_Name);
  {
    const uci::type::PO_ComponentSettingsFilterType::FPA_ID& boundedList = accessor.getFPA_ID();
    for (uci::type::PO_ComponentSettingsFilterType::FPA_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_FPA_ID_Type::serialize(boundedList.at(i), node, PO_ComponentSettingsFilterType_Names::FPA_ID_Name);
    }
  }
  if (accessor.hasFilterControls()) {
    ComponentControlsA_Type::serialize(accessor.getFilterControls(), node, PO_ComponentSettingsFilterType_Names::FilterControls_Name);
  }
  {
    const uci::type::PO_ComponentSettingsFilterType::BandpassFrequency& boundedList = accessor.getBandpassFrequency();
    for (uci::type::PO_ComponentSettingsFilterType::BandpassFrequency::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ComponentSettingsBandpassFrequencyType::serialize(boundedList.at(i), node, PO_ComponentSettingsFilterType_Names::BandpassFrequency_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsFilterType& PO_ComponentSettingsFilterType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsFilterType>().release());
}

uci::type::PO_ComponentSettingsFilterType& PO_ComponentSettingsFilterType::create(const uci::type::PO_ComponentSettingsFilterType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsFilterType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsFilterType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsFilterType::destroy(uci::type::PO_ComponentSettingsFilterType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsFilterType*>(&accessor);
}

} // namespace type

} // namespace uci

