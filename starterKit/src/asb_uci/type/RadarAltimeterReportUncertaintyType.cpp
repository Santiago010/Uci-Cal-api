/** @file RadarAltimeterReportUncertaintyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RadarAltimeterReportUncertaintyType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/UncertaintyEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/RadarAltimeterReportUncertaintyType.h"
#include "uci/type/SpeedType.h"
#include "uci/type/TimeType.h"
#include "uci/type/UncertaintyEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RadarAltimeterReportUncertaintyType::RadarAltimeterReportUncertaintyType() = default;

RadarAltimeterReportUncertaintyType::~RadarAltimeterReportUncertaintyType() = default;

void RadarAltimeterReportUncertaintyType::copy(const uci::type::RadarAltimeterReportUncertaintyType& accessor) {
  copyImpl(accessor, false);
}

void RadarAltimeterReportUncertaintyType::copyImpl(const uci::type::RadarAltimeterReportUncertaintyType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RadarAltimeterReportUncertaintyType&>(accessor);
    if (accessorImpl.hasHeightUncertainty()) {
      setHeightUncertainty(accessorImpl.getHeightUncertainty());
    } else {
      clearHeightUncertainty();
    }
    if (accessorImpl.hasVerticalClosingVelocityUncertainty()) {
      setVerticalClosingVelocityUncertainty(accessorImpl.getVerticalClosingVelocityUncertainty());
    } else {
      clearVerticalClosingVelocityUncertainty();
    }
    if (accessorImpl.hasUncertaintyTimeWindow()) {
      setUncertaintyTimeWindow(accessorImpl.getUncertaintyTimeWindow());
    } else {
      clearUncertaintyTimeWindow();
    }
    if (accessorImpl.uncertaintyCalculation_Accessor) {
      setUncertaintyCalculation(*(accessorImpl.uncertaintyCalculation_Accessor));
    } else {
      uncertaintyCalculation_Accessor.reset();
    }
  }
}

void RadarAltimeterReportUncertaintyType::reset() noexcept {
  clearHeightUncertainty();
  clearVerticalClosingVelocityUncertainty();
  clearUncertaintyTimeWindow();
  uncertaintyCalculation_Accessor.reset();
}

uci::type::DistanceTypeValue RadarAltimeterReportUncertaintyType::getHeightUncertainty() const {
  if (heightUncertainty_Accessor) {
    return *heightUncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getHeightUncertainty(): An attempt was made to get an optional field that was not enabled, call hasHeightUncertainty() to determine if it is safe to call getHeightUncertainty()");
}

uci::type::RadarAltimeterReportUncertaintyType& RadarAltimeterReportUncertaintyType::setHeightUncertainty(uci::type::DistanceTypeValue value) {
  heightUncertainty_Accessor = value;
  return *this;
}

bool RadarAltimeterReportUncertaintyType::hasHeightUncertainty() const noexcept {
  return heightUncertainty_Accessor.has_value();
}

uci::type::RadarAltimeterReportUncertaintyType& RadarAltimeterReportUncertaintyType::clearHeightUncertainty() noexcept {
  heightUncertainty_Accessor.reset();
  return *this;
}

uci::type::SpeedTypeValue RadarAltimeterReportUncertaintyType::getVerticalClosingVelocityUncertainty() const {
  if (verticalClosingVelocityUncertainty_Accessor) {
    return *verticalClosingVelocityUncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getVerticalClosingVelocityUncertainty(): An attempt was made to get an optional field that was not enabled, call hasVerticalClosingVelocityUncertainty() to determine if it is safe to call getVerticalClosingVelocityUncertainty()");
}

uci::type::RadarAltimeterReportUncertaintyType& RadarAltimeterReportUncertaintyType::setVerticalClosingVelocityUncertainty(uci::type::SpeedTypeValue value) {
  verticalClosingVelocityUncertainty_Accessor = value;
  return *this;
}

bool RadarAltimeterReportUncertaintyType::hasVerticalClosingVelocityUncertainty() const noexcept {
  return verticalClosingVelocityUncertainty_Accessor.has_value();
}

uci::type::RadarAltimeterReportUncertaintyType& RadarAltimeterReportUncertaintyType::clearVerticalClosingVelocityUncertainty() noexcept {
  verticalClosingVelocityUncertainty_Accessor.reset();
  return *this;
}

uci::type::TimeTypeValue RadarAltimeterReportUncertaintyType::getUncertaintyTimeWindow() const {
  if (uncertaintyTimeWindow_Accessor) {
    return *uncertaintyTimeWindow_Accessor;
  }
  throw uci::base::UCIException("Error in getUncertaintyTimeWindow(): An attempt was made to get an optional field that was not enabled, call hasUncertaintyTimeWindow() to determine if it is safe to call getUncertaintyTimeWindow()");
}

uci::type::RadarAltimeterReportUncertaintyType& RadarAltimeterReportUncertaintyType::setUncertaintyTimeWindow(uci::type::TimeTypeValue value) {
  uncertaintyTimeWindow_Accessor = value;
  return *this;
}

bool RadarAltimeterReportUncertaintyType::hasUncertaintyTimeWindow() const noexcept {
  return uncertaintyTimeWindow_Accessor.has_value();
}

uci::type::RadarAltimeterReportUncertaintyType& RadarAltimeterReportUncertaintyType::clearUncertaintyTimeWindow() noexcept {
  uncertaintyTimeWindow_Accessor.reset();
  return *this;
}

uci::type::UncertaintyEnum& RadarAltimeterReportUncertaintyType::getUncertaintyCalculation_() const {
  if (uncertaintyCalculation_Accessor) {
    return *uncertaintyCalculation_Accessor;
  }
  throw uci::base::UCIException("Error in getUncertaintyCalculation(): An attempt was made to get an optional field that was not enabled, call hasUncertaintyCalculation() to determine if it is safe to call getUncertaintyCalculation()");
}

const uci::type::UncertaintyEnum& RadarAltimeterReportUncertaintyType::getUncertaintyCalculation() const {
  return getUncertaintyCalculation_();
}

uci::type::UncertaintyEnum& RadarAltimeterReportUncertaintyType::getUncertaintyCalculation() {
  return getUncertaintyCalculation_();
}

uci::type::RadarAltimeterReportUncertaintyType& RadarAltimeterReportUncertaintyType::setUncertaintyCalculation(const uci::type::UncertaintyEnum& accessor) {
  enableUncertaintyCalculation();
  if (&accessor != uncertaintyCalculation_Accessor.get()) {
    uncertaintyCalculation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RadarAltimeterReportUncertaintyType& RadarAltimeterReportUncertaintyType::setUncertaintyCalculation(const uci::type::UncertaintyEnum::EnumerationItem value) {
  enableUncertaintyCalculation().setValue(value);
  return *this;
}

bool RadarAltimeterReportUncertaintyType::hasUncertaintyCalculation() const noexcept {
  return static_cast<bool>(uncertaintyCalculation_Accessor);
}

uci::type::UncertaintyEnum& RadarAltimeterReportUncertaintyType::enableUncertaintyCalculation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::uncertaintyEnum : type};
  if ((!uncertaintyCalculation_Accessor) || (uncertaintyCalculation_Accessor->getAccessorType() != requestedType)) {
    uncertaintyCalculation_Accessor = UncertaintyEnum::create(requestedType);
    if (!uncertaintyCalculation_Accessor) {
      throw uci::base::UCIException("Error in enableUncertaintyCalculation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *uncertaintyCalculation_Accessor;
}

uci::type::RadarAltimeterReportUncertaintyType& RadarAltimeterReportUncertaintyType::clearUncertaintyCalculation() noexcept {
  uncertaintyCalculation_Accessor.reset();
  return *this;
}

std::unique_ptr<RadarAltimeterReportUncertaintyType> RadarAltimeterReportUncertaintyType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarAltimeterReportUncertaintyType : type};
  return (requestedType == uci::type::accessorType::radarAltimeterReportUncertaintyType) ? boost::make_unique<RadarAltimeterReportUncertaintyType>() : nullptr;
}

/**  */
namespace RadarAltimeterReportUncertaintyType_Names {

constexpr const char* Extern_Type_Name{"RadarAltimeterReportUncertaintyType"};
constexpr const char* HeightUncertainty_Name{"HeightUncertainty"};
constexpr const char* VerticalClosingVelocityUncertainty_Name{"VerticalClosingVelocityUncertainty"};
constexpr const char* UncertaintyTimeWindow_Name{"UncertaintyTimeWindow"};
constexpr const char* UncertaintyCalculation_Name{"UncertaintyCalculation"};

} // namespace RadarAltimeterReportUncertaintyType_Names

void RadarAltimeterReportUncertaintyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RadarAltimeterReportUncertaintyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RadarAltimeterReportUncertaintyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RadarAltimeterReportUncertaintyType_Names::HeightUncertainty_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHeightUncertainty(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterReportUncertaintyType_Names::VerticalClosingVelocityUncertainty_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVerticalClosingVelocityUncertainty(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterReportUncertaintyType_Names::UncertaintyTimeWindow_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUncertaintyTimeWindow(asb_uci::util::SerializationHelpers::deserializeTime(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterReportUncertaintyType_Names::UncertaintyCalculation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableUncertaintyCalculation().setValueFromName(*value);
      }
    }
  }
}

std::string RadarAltimeterReportUncertaintyType::serialize(const uci::type::RadarAltimeterReportUncertaintyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RadarAltimeterReportUncertaintyType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RadarAltimeterReportUncertaintyType_Names::Extern_Type_Name);
  }
  if (accessor.hasHeightUncertainty()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getHeightUncertainty(), node, RadarAltimeterReportUncertaintyType_Names::HeightUncertainty_Name);
  }
  if (accessor.hasVerticalClosingVelocityUncertainty()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVerticalClosingVelocityUncertainty(), node, RadarAltimeterReportUncertaintyType_Names::VerticalClosingVelocityUncertainty_Name);
  }
  if (accessor.hasUncertaintyTimeWindow()) {
    asb_uci::util::SerializationHelpers::serializeTime(accessor.getUncertaintyTimeWindow(), node, RadarAltimeterReportUncertaintyType_Names::UncertaintyTimeWindow_Name);
  }
  if (accessor.hasUncertaintyCalculation()) {
    UncertaintyEnum::serialize(accessor.getUncertaintyCalculation(), node, RadarAltimeterReportUncertaintyType_Names::UncertaintyCalculation_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RadarAltimeterReportUncertaintyType& RadarAltimeterReportUncertaintyType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RadarAltimeterReportUncertaintyType>().release());
}

uci::type::RadarAltimeterReportUncertaintyType& RadarAltimeterReportUncertaintyType::create(const uci::type::RadarAltimeterReportUncertaintyType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RadarAltimeterReportUncertaintyType> newAccessor{boost::make_unique<asb_uci::type::RadarAltimeterReportUncertaintyType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RadarAltimeterReportUncertaintyType::destroy(uci::type::RadarAltimeterReportUncertaintyType& accessor) {
  delete dynamic_cast<asb_uci::type::RadarAltimeterReportUncertaintyType*>(&accessor);
}

} // namespace type

} // namespace uci

