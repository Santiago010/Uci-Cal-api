/** @file EntityManagementMergeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EntityManagementMergeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityFusionSimpleEligibilityEnum.h"
#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/MergeEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EntityFusionSimpleEligibilityEnum.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/EntityManagementMergeType.h"
#include "uci/type/MergeEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityManagementMergeType::EntityManagementMergeType()
  : contributorID_Accessor{boost::make_unique<ContributorID>(1, SIZE_MAX)},
    resultingFusionEligibility_Accessor{boost::make_unique<EntityFusionSimpleEligibilityEnum>()} {
}

EntityManagementMergeType::~EntityManagementMergeType() = default;

void EntityManagementMergeType::copy(const uci::type::EntityManagementMergeType& accessor) {
  copyImpl(accessor, false);
}

void EntityManagementMergeType::copyImpl(const uci::type::EntityManagementMergeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityManagementMergeType&>(accessor);
    setContributorID(*(accessorImpl.contributorID_Accessor));
    if (accessorImpl.mergeToID_Accessor) {
      setMergeToID(*(accessorImpl.mergeToID_Accessor));
    } else {
      mergeToID_Accessor.reset();
    }
    setResultingFusionEligibility(*(accessorImpl.resultingFusionEligibility_Accessor));
    if (accessorImpl.mergeCharacteristics_Accessor) {
      setMergeCharacteristics(*(accessorImpl.mergeCharacteristics_Accessor));
    } else {
      mergeCharacteristics_Accessor.reset();
    }
  }
}

void EntityManagementMergeType::reset() noexcept {
  contributorID_Accessor->reset();
  mergeToID_Accessor.reset();
  resultingFusionEligibility_Accessor->reset();
  mergeCharacteristics_Accessor.reset();
}

const uci::type::EntityManagementMergeType::ContributorID& EntityManagementMergeType::getContributorID() const {
  return *contributorID_Accessor;
}

uci::type::EntityManagementMergeType::ContributorID& EntityManagementMergeType::getContributorID() {
  return *contributorID_Accessor;
}

uci::type::EntityManagementMergeType& EntityManagementMergeType::setContributorID(const uci::type::EntityManagementMergeType::ContributorID& accessor) {
  if (&accessor != contributorID_Accessor.get()) {
    contributorID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityID_Type& EntityManagementMergeType::getMergeToID_() const {
  if (mergeToID_Accessor) {
    return *mergeToID_Accessor;
  }
  throw uci::base::UCIException("Error in getMergeToID(): An attempt was made to get an optional field that was not enabled, call hasMergeToID() to determine if it is safe to call getMergeToID()");
}

const uci::type::EntityID_Type& EntityManagementMergeType::getMergeToID() const {
  return getMergeToID_();
}

uci::type::EntityID_Type& EntityManagementMergeType::getMergeToID() {
  return getMergeToID_();
}

uci::type::EntityManagementMergeType& EntityManagementMergeType::setMergeToID(const uci::type::EntityID_Type& accessor) {
  enableMergeToID(accessor.getAccessorType());
  if (&accessor != mergeToID_Accessor.get()) {
    mergeToID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EntityManagementMergeType::hasMergeToID() const noexcept {
  return static_cast<bool>(mergeToID_Accessor);
}

uci::type::EntityID_Type& EntityManagementMergeType::enableMergeToID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!mergeToID_Accessor) || (mergeToID_Accessor->getAccessorType() != requestedType)) {
    mergeToID_Accessor = EntityID_Type::create(requestedType);
    if (!mergeToID_Accessor) {
      throw uci::base::UCIException("Error in enableMergeToID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mergeToID_Accessor;
}

uci::type::EntityManagementMergeType& EntityManagementMergeType::clearMergeToID() noexcept {
  mergeToID_Accessor.reset();
  return *this;
}

const uci::type::EntityFusionSimpleEligibilityEnum& EntityManagementMergeType::getResultingFusionEligibility() const {
  return *resultingFusionEligibility_Accessor;
}

uci::type::EntityFusionSimpleEligibilityEnum& EntityManagementMergeType::getResultingFusionEligibility() {
  return *resultingFusionEligibility_Accessor;
}

uci::type::EntityManagementMergeType& EntityManagementMergeType::setResultingFusionEligibility(const uci::type::EntityFusionSimpleEligibilityEnum& accessor) {
  if (&accessor != resultingFusionEligibility_Accessor.get()) {
    resultingFusionEligibility_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityManagementMergeType& EntityManagementMergeType::setResultingFusionEligibility(uci::type::EntityFusionSimpleEligibilityEnum::EnumerationItem value) {
  resultingFusionEligibility_Accessor->setValue(value);
  return *this;
}


uci::type::MergeEnum& EntityManagementMergeType::getMergeCharacteristics_() const {
  if (mergeCharacteristics_Accessor) {
    return *mergeCharacteristics_Accessor;
  }
  throw uci::base::UCIException("Error in getMergeCharacteristics(): An attempt was made to get an optional field that was not enabled, call hasMergeCharacteristics() to determine if it is safe to call getMergeCharacteristics()");
}

const uci::type::MergeEnum& EntityManagementMergeType::getMergeCharacteristics() const {
  return getMergeCharacteristics_();
}

uci::type::MergeEnum& EntityManagementMergeType::getMergeCharacteristics() {
  return getMergeCharacteristics_();
}

uci::type::EntityManagementMergeType& EntityManagementMergeType::setMergeCharacteristics(const uci::type::MergeEnum& accessor) {
  enableMergeCharacteristics();
  if (&accessor != mergeCharacteristics_Accessor.get()) {
    mergeCharacteristics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityManagementMergeType& EntityManagementMergeType::setMergeCharacteristics(const uci::type::MergeEnum::EnumerationItem value) {
  enableMergeCharacteristics().setValue(value);
  return *this;
}

bool EntityManagementMergeType::hasMergeCharacteristics() const noexcept {
  return static_cast<bool>(mergeCharacteristics_Accessor);
}

uci::type::MergeEnum& EntityManagementMergeType::enableMergeCharacteristics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mergeEnum : type};
  if ((!mergeCharacteristics_Accessor) || (mergeCharacteristics_Accessor->getAccessorType() != requestedType)) {
    mergeCharacteristics_Accessor = MergeEnum::create(requestedType);
    if (!mergeCharacteristics_Accessor) {
      throw uci::base::UCIException("Error in enableMergeCharacteristics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mergeCharacteristics_Accessor;
}

uci::type::EntityManagementMergeType& EntityManagementMergeType::clearMergeCharacteristics() noexcept {
  mergeCharacteristics_Accessor.reset();
  return *this;
}

std::unique_ptr<EntityManagementMergeType> EntityManagementMergeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityManagementMergeType : type};
  return (requestedType == uci::type::accessorType::entityManagementMergeType) ? boost::make_unique<EntityManagementMergeType>() : nullptr;
}

/**  */
namespace EntityManagementMergeType_Names {

constexpr const char* Extern_Type_Name{"EntityManagementMergeType"};
constexpr const char* ContributorID_Name{"ContributorID"};
constexpr const char* MergeToID_Name{"MergeToID"};
constexpr const char* ResultingFusionEligibility_Name{"ResultingFusionEligibility"};
constexpr const char* MergeCharacteristics_Name{"MergeCharacteristics"};

} // namespace EntityManagementMergeType_Names

void EntityManagementMergeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityManagementMergeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityManagementMergeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityManagementMergeType_Names::ContributorID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityManagementMergeType::ContributorID& boundedList = accessor.getContributorID();
        const uci::type::EntityManagementMergeType::ContributorID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityManagementMergeType_Names::MergeToID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableMergeToID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityManagementMergeType_Names::ResultingFusionEligibility_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getResultingFusionEligibility().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityManagementMergeType_Names::MergeCharacteristics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMergeCharacteristics().setValueFromName(*value);
      }
    }
  }
}

std::string EntityManagementMergeType::serialize(const uci::type::EntityManagementMergeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityManagementMergeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityManagementMergeType_Names::Extern_Type_Name);
  }
  {
    const uci::type::EntityManagementMergeType::ContributorID& boundedList = accessor.getContributorID();
    for (uci::type::EntityManagementMergeType::ContributorID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EntityID_Type::serialize(boundedList.at(i), node, EntityManagementMergeType_Names::ContributorID_Name);
    }
  }
  if (accessor.hasMergeToID()) {
    EntityID_Type::serialize(accessor.getMergeToID(), node, EntityManagementMergeType_Names::MergeToID_Name);
  }
  EntityFusionSimpleEligibilityEnum::serialize(accessor.getResultingFusionEligibility(), node, EntityManagementMergeType_Names::ResultingFusionEligibility_Name, false);
  if (accessor.hasMergeCharacteristics()) {
    MergeEnum::serialize(accessor.getMergeCharacteristics(), node, EntityManagementMergeType_Names::MergeCharacteristics_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityManagementMergeType& EntityManagementMergeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityManagementMergeType>().release());
}

uci::type::EntityManagementMergeType& EntityManagementMergeType::create(const uci::type::EntityManagementMergeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityManagementMergeType> newAccessor{boost::make_unique<asb_uci::type::EntityManagementMergeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityManagementMergeType::destroy(uci::type::EntityManagementMergeType& accessor) {
  delete dynamic_cast<asb_uci::type::EntityManagementMergeType*>(&accessor);
}

} // namespace type

} // namespace uci

