/** @file TransitionStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/TransitionStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityTransitionEnum.h"
#include "../../../include/asb_uci/type/DateTimeRangeType.h"
#include "../../../include/asb_uci/type/KinematicsMultiStandardType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityTransitionEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/KinematicsMultiStandardType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TransitionStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TransitionStatusType::TransitionStatusType()
  : transition_Accessor{boost::make_unique<ActivityTransitionEnum>()},
    transitionTime_Accessor{boost::make_unique<DateTimeRangeType>()} {
}

TransitionStatusType::~TransitionStatusType() = default;

void TransitionStatusType::copy(const uci::type::TransitionStatusType& accessor) {
  copyImpl(accessor, false);
}

void TransitionStatusType::copyImpl(const uci::type::TransitionStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const TransitionStatusType&>(accessor);
    setTransition(*(accessorImpl.transition_Accessor));
    setTransitionTime(*(accessorImpl.transitionTime_Accessor));
    if (accessorImpl.transitionLocation_Accessor) {
      setTransitionLocation(*(accessorImpl.transitionLocation_Accessor));
    } else {
      transitionLocation_Accessor.reset();
    }
    if (accessorImpl.resultTime_Accessor) {
      setResultTime(*(accessorImpl.resultTime_Accessor));
    } else {
      resultTime_Accessor.reset();
    }
  }
}

void TransitionStatusType::reset() noexcept {
  transition_Accessor->reset();
  transitionTime_Accessor->reset();
  transitionLocation_Accessor.reset();
  resultTime_Accessor.reset();
}

const uci::type::ActivityTransitionEnum& TransitionStatusType::getTransition() const {
  return *transition_Accessor;
}

uci::type::ActivityTransitionEnum& TransitionStatusType::getTransition() {
  return *transition_Accessor;
}

uci::type::TransitionStatusType& TransitionStatusType::setTransition(const uci::type::ActivityTransitionEnum& accessor) {
  if (&accessor != transition_Accessor.get()) {
    transition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TransitionStatusType& TransitionStatusType::setTransition(uci::type::ActivityTransitionEnum::EnumerationItem value) {
  transition_Accessor->setValue(value);
  return *this;
}


const uci::type::DateTimeRangeType& TransitionStatusType::getTransitionTime() const {
  return *transitionTime_Accessor;
}

uci::type::DateTimeRangeType& TransitionStatusType::getTransitionTime() {
  return *transitionTime_Accessor;
}

uci::type::TransitionStatusType& TransitionStatusType::setTransitionTime(const uci::type::DateTimeRangeType& accessor) {
  if (&accessor != transitionTime_Accessor.get()) {
    transitionTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::KinematicsMultiStandardType& TransitionStatusType::getTransitionLocation_() const {
  if (transitionLocation_Accessor) {
    return *transitionLocation_Accessor;
  }
  throw uci::base::UCIException("Error in getTransitionLocation(): An attempt was made to get an optional field that was not enabled, call hasTransitionLocation() to determine if it is safe to call getTransitionLocation()");
}

const uci::type::KinematicsMultiStandardType& TransitionStatusType::getTransitionLocation() const {
  return getTransitionLocation_();
}

uci::type::KinematicsMultiStandardType& TransitionStatusType::getTransitionLocation() {
  return getTransitionLocation_();
}

uci::type::TransitionStatusType& TransitionStatusType::setTransitionLocation(const uci::type::KinematicsMultiStandardType& accessor) {
  enableTransitionLocation();
  if (&accessor != transitionLocation_Accessor.get()) {
    transitionLocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TransitionStatusType::hasTransitionLocation() const noexcept {
  return static_cast<bool>(transitionLocation_Accessor);
}

uci::type::KinematicsMultiStandardType& TransitionStatusType::enableTransitionLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::kinematicsMultiStandardType : type};
  if ((!transitionLocation_Accessor) || (transitionLocation_Accessor->getAccessorType() != requestedType)) {
    transitionLocation_Accessor = KinematicsMultiStandardType::create(requestedType);
    if (!transitionLocation_Accessor) {
      throw uci::base::UCIException("Error in enableTransitionLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *transitionLocation_Accessor;
}

uci::type::TransitionStatusType& TransitionStatusType::clearTransitionLocation() noexcept {
  transitionLocation_Accessor.reset();
  return *this;
}

uci::type::DateTimeRangeType& TransitionStatusType::getResultTime_() const {
  if (resultTime_Accessor) {
    return *resultTime_Accessor;
  }
  throw uci::base::UCIException("Error in getResultTime(): An attempt was made to get an optional field that was not enabled, call hasResultTime() to determine if it is safe to call getResultTime()");
}

const uci::type::DateTimeRangeType& TransitionStatusType::getResultTime() const {
  return getResultTime_();
}

uci::type::DateTimeRangeType& TransitionStatusType::getResultTime() {
  return getResultTime_();
}

uci::type::TransitionStatusType& TransitionStatusType::setResultTime(const uci::type::DateTimeRangeType& accessor) {
  enableResultTime();
  if (&accessor != resultTime_Accessor.get()) {
    resultTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TransitionStatusType::hasResultTime() const noexcept {
  return static_cast<bool>(resultTime_Accessor);
}

uci::type::DateTimeRangeType& TransitionStatusType::enableResultTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!resultTime_Accessor) || (resultTime_Accessor->getAccessorType() != requestedType)) {
    resultTime_Accessor = DateTimeRangeType::create(requestedType);
    if (!resultTime_Accessor) {
      throw uci::base::UCIException("Error in enableResultTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *resultTime_Accessor;
}

uci::type::TransitionStatusType& TransitionStatusType::clearResultTime() noexcept {
  resultTime_Accessor.reset();
  return *this;
}

std::unique_ptr<TransitionStatusType> TransitionStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::transitionStatusType : type};
  return (requestedType == uci::type::accessorType::transitionStatusType) ? boost::make_unique<TransitionStatusType>() : nullptr;
}

/**  */
namespace TransitionStatusType_Names {

constexpr const char* Extern_Type_Name{"TransitionStatusType"};
constexpr const char* Transition_Name{"Transition"};
constexpr const char* TransitionTime_Name{"TransitionTime"};
constexpr const char* TransitionLocation_Name{"TransitionLocation"};
constexpr const char* ResultTime_Name{"ResultTime"};

} // namespace TransitionStatusType_Names

void TransitionStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TransitionStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TransitionStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TransitionStatusType_Names::Transition_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getTransition().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + TransitionStatusType_Names::TransitionTime_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.getTransitionTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TransitionStatusType_Names::TransitionLocation_Name) {
      KinematicsMultiStandardType::deserialize(valueType.second, accessor.enableTransitionLocation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TransitionStatusType_Names::ResultTime_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableResultTime(), nodeName, nsPrefix);
    }
  }
}

std::string TransitionStatusType::serialize(const uci::type::TransitionStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TransitionStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, TransitionStatusType_Names::Extern_Type_Name);
  }
  ActivityTransitionEnum::serialize(accessor.getTransition(), node, TransitionStatusType_Names::Transition_Name, false);
  DateTimeRangeType::serialize(accessor.getTransitionTime(), node, TransitionStatusType_Names::TransitionTime_Name);
  if (accessor.hasTransitionLocation()) {
    KinematicsMultiStandardType::serialize(accessor.getTransitionLocation(), node, TransitionStatusType_Names::TransitionLocation_Name);
  }
  if (accessor.hasResultTime()) {
    DateTimeRangeType::serialize(accessor.getResultTime(), node, TransitionStatusType_Names::ResultTime_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TransitionStatusType& TransitionStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TransitionStatusType>().release());
}

uci::type::TransitionStatusType& TransitionStatusType::create(const uci::type::TransitionStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TransitionStatusType> newAccessor{boost::make_unique<asb_uci::type::TransitionStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TransitionStatusType::destroy(uci::type::TransitionStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::TransitionStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

