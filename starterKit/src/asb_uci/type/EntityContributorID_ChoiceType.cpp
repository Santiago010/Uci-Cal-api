/** @file EntityContributorID_ChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EntityContributorID_ChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EOB_EmitterID_Type.h"
#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/MeasurementID_Type.h"
#include "asb_uci/type/SOB_C2_RecordID_Type.h"
#include "asb_uci/type/SOB_SatelliteRecordID_Type.h"
#include "asb_uci/type/SignalID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EOB_EmitterID_Type.h"
#include "uci/type/EntityContributorID_ChoiceType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/MeasurementID_Type.h"
#include "uci/type/SOB_C2_RecordID_Type.h"
#include "uci/type/SOB_SatelliteRecordID_Type.h"
#include "uci/type/SignalID_Type.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityContributorID_ChoiceType::EntityContributorID_ChoiceType() = default;

EntityContributorID_ChoiceType::~EntityContributorID_ChoiceType() = default;

void EntityContributorID_ChoiceType::copy(const uci::type::EntityContributorID_ChoiceType& accessor) {
  copyImpl(accessor, false);
}

void EntityContributorID_ChoiceType::copyImpl(const uci::type::EntityContributorID_ChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityContributorID_ChoiceType&>(accessor);
    if (accessorImpl.entityID_Accessor) {
      setEntityID(*(accessorImpl.entityID_Accessor));
    } else {
      entityID_Accessor.reset();
    }
    if (accessorImpl.eOB_EmitterID_Accessor) {
      setEOB_EmitterID(*(accessorImpl.eOB_EmitterID_Accessor));
    } else {
      eOB_EmitterID_Accessor.reset();
    }
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
    if (accessorImpl.signalID_Accessor) {
      setSignalID(*(accessorImpl.signalID_Accessor));
    } else {
      signalID_Accessor.reset();
    }
    if (accessorImpl.sOB_C2_RecordID_Accessor) {
      setSOB_C2_RecordID(*(accessorImpl.sOB_C2_RecordID_Accessor));
    } else {
      sOB_C2_RecordID_Accessor.reset();
    }
    if (accessorImpl.sOB_SatelliteRecordID_Accessor) {
      setSOB_SatelliteRecordID(*(accessorImpl.sOB_SatelliteRecordID_Accessor));
    } else {
      sOB_SatelliteRecordID_Accessor.reset();
    }
    if (accessorImpl.measurementID_Accessor) {
      setMeasurementID(*(accessorImpl.measurementID_Accessor));
    } else {
      measurementID_Accessor.reset();
    }
  }
}

void EntityContributorID_ChoiceType::reset() noexcept {
  entityID_Accessor.reset();
  eOB_EmitterID_Accessor.reset();
  systemID_Accessor.reset();
  signalID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  measurementID_Accessor.reset();
}

uci::type::EntityContributorID_ChoiceType::EntityContributorID_ChoiceTypeChoice EntityContributorID_ChoiceType::getEntityContributorID_ChoiceTypeChoiceOrdinal() const noexcept {
  if (entityID_Accessor) {
    return ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_ENTITYID;
  }
  if (eOB_EmitterID_Accessor) {
    return ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_EOB_EMITTERID;
  }
  if (systemID_Accessor) {
    return ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_SYSTEMID;
  }
  if (signalID_Accessor) {
    return ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_SIGNALID;
  }
  if (sOB_C2_RecordID_Accessor) {
    return ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_SOB_C2_RECORDID;
  }
  if (sOB_SatelliteRecordID_Accessor) {
    return ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_SOB_SATELLITERECORDID;
  }
  if (measurementID_Accessor) {
    return ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_MEASUREMENTID;
  }
  return ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_NONE;
}

uci::type::EntityContributorID_ChoiceType& EntityContributorID_ChoiceType::setEntityContributorID_ChoiceTypeChoiceOrdinal(uci::type::EntityContributorID_ChoiceType::EntityContributorID_ChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_ENTITYID:
      chooseEntityID("setEntityContributorID_ChoiceTypeChoiceOrdinal", type);
      break;
    case ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_EOB_EMITTERID:
      chooseEOB_EmitterID("setEntityContributorID_ChoiceTypeChoiceOrdinal", type);
      break;
    case ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_SYSTEMID:
      chooseSystemID("setEntityContributorID_ChoiceTypeChoiceOrdinal", type);
      break;
    case ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_SIGNALID:
      chooseSignalID("setEntityContributorID_ChoiceTypeChoiceOrdinal", type);
      break;
    case ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_SOB_C2_RECORDID:
      chooseSOB_C2_RecordID("setEntityContributorID_ChoiceTypeChoiceOrdinal", type);
      break;
    case ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_SOB_SATELLITERECORDID:
      chooseSOB_SatelliteRecordID("setEntityContributorID_ChoiceTypeChoiceOrdinal", type);
      break;
    case ENTITYCONTRIBUTORID_CHOICETYPE_CHOICE_MEASUREMENTID:
      chooseMeasurementID("setEntityContributorID_ChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEntityContributorID_ChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EntityID_Type& EntityContributorID_ChoiceType::getEntityID_() const {
  if (entityID_Accessor) {
    return *entityID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityID(): Unable to get EntityID, field not selected");
}

const uci::type::EntityID_Type& EntityContributorID_ChoiceType::getEntityID() const {
  return getEntityID_();
}

uci::type::EntityID_Type& EntityContributorID_ChoiceType::getEntityID() {
  return getEntityID_();
}

uci::type::EntityContributorID_ChoiceType& EntityContributorID_ChoiceType::setEntityID(const uci::type::EntityID_Type& accessor) {
  chooseEntityID("setEntityID", accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EntityContributorID_ChoiceType::isEntityID() const noexcept {
  return static_cast<bool>(entityID_Accessor);
}

uci::type::EntityID_Type& EntityContributorID_ChoiceType::chooseEntityID(const std::string& method, uci::base::accessorType::AccessorType type) {
  eOB_EmitterID_Accessor.reset();
  systemID_Accessor.reset();
  signalID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  measurementID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(type);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::EntityID_Type& EntityContributorID_ChoiceType::chooseEntityID(uci::base::accessorType::AccessorType type) {
  return chooseEntityID("chooseEntityID", type);
}

uci::type::EOB_EmitterID_Type& EntityContributorID_ChoiceType::getEOB_EmitterID_() const {
  if (eOB_EmitterID_Accessor) {
    return *eOB_EmitterID_Accessor;
  }
  throw uci::base::UCIException("Error in getEOB_EmitterID(): Unable to get EOB_EmitterID, field not selected");
}

const uci::type::EOB_EmitterID_Type& EntityContributorID_ChoiceType::getEOB_EmitterID() const {
  return getEOB_EmitterID_();
}

uci::type::EOB_EmitterID_Type& EntityContributorID_ChoiceType::getEOB_EmitterID() {
  return getEOB_EmitterID_();
}

uci::type::EntityContributorID_ChoiceType& EntityContributorID_ChoiceType::setEOB_EmitterID(const uci::type::EOB_EmitterID_Type& accessor) {
  chooseEOB_EmitterID();
  if (&accessor != eOB_EmitterID_Accessor.get()) {
    eOB_EmitterID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityContributorID_ChoiceType::isEOB_EmitterID() const noexcept {
  return static_cast<bool>(eOB_EmitterID_Accessor);
}

uci::type::EOB_EmitterID_Type& EntityContributorID_ChoiceType::chooseEOB_EmitterID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  systemID_Accessor.reset();
  signalID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  measurementID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_EmitterID_Type : type};
  if ((!eOB_EmitterID_Accessor) || (eOB_EmitterID_Accessor->getAccessorType() != requestedType)) {
    eOB_EmitterID_Accessor = EOB_EmitterID_Type::create(type);
    if (!eOB_EmitterID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eOB_EmitterID_Accessor;
}

uci::type::EOB_EmitterID_Type& EntityContributorID_ChoiceType::chooseEOB_EmitterID(uci::base::accessorType::AccessorType type) {
  return chooseEOB_EmitterID("chooseEOB_EmitterID", type);
}

uci::type::SystemID_Type& EntityContributorID_ChoiceType::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): Unable to get SystemID, field not selected");
}

const uci::type::SystemID_Type& EntityContributorID_ChoiceType::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& EntityContributorID_ChoiceType::getSystemID() {
  return getSystemID_();
}

uci::type::EntityContributorID_ChoiceType& EntityContributorID_ChoiceType::setSystemID(const uci::type::SystemID_Type& accessor) {
  chooseSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityContributorID_ChoiceType::isSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& EntityContributorID_ChoiceType::chooseSystemID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  eOB_EmitterID_Accessor.reset();
  signalID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  measurementID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(type);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::SystemID_Type& EntityContributorID_ChoiceType::chooseSystemID(uci::base::accessorType::AccessorType type) {
  return chooseSystemID("chooseSystemID", type);
}

uci::type::SignalID_Type& EntityContributorID_ChoiceType::getSignalID_() const {
  if (signalID_Accessor) {
    return *signalID_Accessor;
  }
  throw uci::base::UCIException("Error in getSignalID(): Unable to get SignalID, field not selected");
}

const uci::type::SignalID_Type& EntityContributorID_ChoiceType::getSignalID() const {
  return getSignalID_();
}

uci::type::SignalID_Type& EntityContributorID_ChoiceType::getSignalID() {
  return getSignalID_();
}

uci::type::EntityContributorID_ChoiceType& EntityContributorID_ChoiceType::setSignalID(const uci::type::SignalID_Type& accessor) {
  chooseSignalID();
  if (&accessor != signalID_Accessor.get()) {
    signalID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityContributorID_ChoiceType::isSignalID() const noexcept {
  return static_cast<bool>(signalID_Accessor);
}

uci::type::SignalID_Type& EntityContributorID_ChoiceType::chooseSignalID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  eOB_EmitterID_Accessor.reset();
  systemID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  measurementID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalID_Type : type};
  if ((!signalID_Accessor) || (signalID_Accessor->getAccessorType() != requestedType)) {
    signalID_Accessor = SignalID_Type::create(type);
    if (!signalID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *signalID_Accessor;
}

uci::type::SignalID_Type& EntityContributorID_ChoiceType::chooseSignalID(uci::base::accessorType::AccessorType type) {
  return chooseSignalID("chooseSignalID", type);
}

uci::type::SOB_C2_RecordID_Type& EntityContributorID_ChoiceType::getSOB_C2_RecordID_() const {
  if (sOB_C2_RecordID_Accessor) {
    return *sOB_C2_RecordID_Accessor;
  }
  throw uci::base::UCIException("Error in getSOB_C2_RecordID(): Unable to get SOB_C2_RecordID, field not selected");
}

const uci::type::SOB_C2_RecordID_Type& EntityContributorID_ChoiceType::getSOB_C2_RecordID() const {
  return getSOB_C2_RecordID_();
}

uci::type::SOB_C2_RecordID_Type& EntityContributorID_ChoiceType::getSOB_C2_RecordID() {
  return getSOB_C2_RecordID_();
}

uci::type::EntityContributorID_ChoiceType& EntityContributorID_ChoiceType::setSOB_C2_RecordID(const uci::type::SOB_C2_RecordID_Type& accessor) {
  chooseSOB_C2_RecordID();
  if (&accessor != sOB_C2_RecordID_Accessor.get()) {
    sOB_C2_RecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityContributorID_ChoiceType::isSOB_C2_RecordID() const noexcept {
  return static_cast<bool>(sOB_C2_RecordID_Accessor);
}

uci::type::SOB_C2_RecordID_Type& EntityContributorID_ChoiceType::chooseSOB_C2_RecordID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  eOB_EmitterID_Accessor.reset();
  systemID_Accessor.reset();
  signalID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  measurementID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_C2_RecordID_Type : type};
  if ((!sOB_C2_RecordID_Accessor) || (sOB_C2_RecordID_Accessor->getAccessorType() != requestedType)) {
    sOB_C2_RecordID_Accessor = SOB_C2_RecordID_Type::create(type);
    if (!sOB_C2_RecordID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sOB_C2_RecordID_Accessor;
}

uci::type::SOB_C2_RecordID_Type& EntityContributorID_ChoiceType::chooseSOB_C2_RecordID(uci::base::accessorType::AccessorType type) {
  return chooseSOB_C2_RecordID("chooseSOB_C2_RecordID", type);
}

uci::type::SOB_SatelliteRecordID_Type& EntityContributorID_ChoiceType::getSOB_SatelliteRecordID_() const {
  if (sOB_SatelliteRecordID_Accessor) {
    return *sOB_SatelliteRecordID_Accessor;
  }
  throw uci::base::UCIException("Error in getSOB_SatelliteRecordID(): Unable to get SOB_SatelliteRecordID, field not selected");
}

const uci::type::SOB_SatelliteRecordID_Type& EntityContributorID_ChoiceType::getSOB_SatelliteRecordID() const {
  return getSOB_SatelliteRecordID_();
}

uci::type::SOB_SatelliteRecordID_Type& EntityContributorID_ChoiceType::getSOB_SatelliteRecordID() {
  return getSOB_SatelliteRecordID_();
}

uci::type::EntityContributorID_ChoiceType& EntityContributorID_ChoiceType::setSOB_SatelliteRecordID(const uci::type::SOB_SatelliteRecordID_Type& accessor) {
  chooseSOB_SatelliteRecordID();
  if (&accessor != sOB_SatelliteRecordID_Accessor.get()) {
    sOB_SatelliteRecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityContributorID_ChoiceType::isSOB_SatelliteRecordID() const noexcept {
  return static_cast<bool>(sOB_SatelliteRecordID_Accessor);
}

uci::type::SOB_SatelliteRecordID_Type& EntityContributorID_ChoiceType::chooseSOB_SatelliteRecordID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  eOB_EmitterID_Accessor.reset();
  systemID_Accessor.reset();
  signalID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  measurementID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_SatelliteRecordID_Type : type};
  if ((!sOB_SatelliteRecordID_Accessor) || (sOB_SatelliteRecordID_Accessor->getAccessorType() != requestedType)) {
    sOB_SatelliteRecordID_Accessor = SOB_SatelliteRecordID_Type::create(type);
    if (!sOB_SatelliteRecordID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sOB_SatelliteRecordID_Accessor;
}

uci::type::SOB_SatelliteRecordID_Type& EntityContributorID_ChoiceType::chooseSOB_SatelliteRecordID(uci::base::accessorType::AccessorType type) {
  return chooseSOB_SatelliteRecordID("chooseSOB_SatelliteRecordID", type);
}

uci::type::MeasurementID_Type& EntityContributorID_ChoiceType::getMeasurementID_() const {
  if (measurementID_Accessor) {
    return *measurementID_Accessor;
  }
  throw uci::base::UCIException("Error in getMeasurementID(): Unable to get MeasurementID, field not selected");
}

const uci::type::MeasurementID_Type& EntityContributorID_ChoiceType::getMeasurementID() const {
  return getMeasurementID_();
}

uci::type::MeasurementID_Type& EntityContributorID_ChoiceType::getMeasurementID() {
  return getMeasurementID_();
}

uci::type::EntityContributorID_ChoiceType& EntityContributorID_ChoiceType::setMeasurementID(const uci::type::MeasurementID_Type& accessor) {
  chooseMeasurementID();
  if (&accessor != measurementID_Accessor.get()) {
    measurementID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityContributorID_ChoiceType::isMeasurementID() const noexcept {
  return static_cast<bool>(measurementID_Accessor);
}

uci::type::MeasurementID_Type& EntityContributorID_ChoiceType::chooseMeasurementID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  eOB_EmitterID_Accessor.reset();
  systemID_Accessor.reset();
  signalID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::measurementID_Type : type};
  if ((!measurementID_Accessor) || (measurementID_Accessor->getAccessorType() != requestedType)) {
    measurementID_Accessor = MeasurementID_Type::create(type);
    if (!measurementID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *measurementID_Accessor;
}

uci::type::MeasurementID_Type& EntityContributorID_ChoiceType::chooseMeasurementID(uci::base::accessorType::AccessorType type) {
  return chooseMeasurementID("chooseMeasurementID", type);
}

std::unique_ptr<EntityContributorID_ChoiceType> EntityContributorID_ChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityContributorID_ChoiceType : type};
  return (requestedType == uci::type::accessorType::entityContributorID_ChoiceType) ? boost::make_unique<EntityContributorID_ChoiceType>() : nullptr;
}

/**  */
namespace EntityContributorID_ChoiceType_Names {

constexpr const char* Extern_Type_Name{"EntityContributorID_ChoiceType"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* EOB_EmitterID_Name{"EOB_EmitterID"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* SignalID_Name{"SignalID"};
constexpr const char* SOB_C2_RecordID_Name{"SOB_C2_RecordID"};
constexpr const char* SOB_SatelliteRecordID_Name{"SOB_SatelliteRecordID"};
constexpr const char* MeasurementID_Name{"MeasurementID"};

} // namespace EntityContributorID_ChoiceType_Names

void EntityContributorID_ChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityContributorID_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityContributorID_ChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityContributorID_ChoiceType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityContributorID_ChoiceType_Names::EOB_EmitterID_Name) {
      EOB_EmitterID_Type::deserialize(valueType.second, accessor.chooseEOB_EmitterID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityContributorID_ChoiceType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.chooseSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityContributorID_ChoiceType_Names::SignalID_Name) {
      SignalID_Type::deserialize(valueType.second, accessor.chooseSignalID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityContributorID_ChoiceType_Names::SOB_C2_RecordID_Name) {
      SOB_C2_RecordID_Type::deserialize(valueType.second, accessor.chooseSOB_C2_RecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityContributorID_ChoiceType_Names::SOB_SatelliteRecordID_Name) {
      SOB_SatelliteRecordID_Type::deserialize(valueType.second, accessor.chooseSOB_SatelliteRecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityContributorID_ChoiceType_Names::MeasurementID_Name) {
      MeasurementID_Type::deserialize(valueType.second, accessor.chooseMeasurementID(), nodeName, nsPrefix);
    }
  }
}

std::string EntityContributorID_ChoiceType::serialize(const uci::type::EntityContributorID_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityContributorID_ChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityContributorID_ChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isEntityID()) {
    EntityID_Type::serialize(accessor.getEntityID(), node, EntityContributorID_ChoiceType_Names::EntityID_Name);
  } else if (accessor.isEOB_EmitterID()) {
    EOB_EmitterID_Type::serialize(accessor.getEOB_EmitterID(), node, EntityContributorID_ChoiceType_Names::EOB_EmitterID_Name);
  } else if (accessor.isSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, EntityContributorID_ChoiceType_Names::SystemID_Name);
  } else if (accessor.isSignalID()) {
    SignalID_Type::serialize(accessor.getSignalID(), node, EntityContributorID_ChoiceType_Names::SignalID_Name);
  } else if (accessor.isSOB_C2_RecordID()) {
    SOB_C2_RecordID_Type::serialize(accessor.getSOB_C2_RecordID(), node, EntityContributorID_ChoiceType_Names::SOB_C2_RecordID_Name);
  } else if (accessor.isSOB_SatelliteRecordID()) {
    SOB_SatelliteRecordID_Type::serialize(accessor.getSOB_SatelliteRecordID(), node, EntityContributorID_ChoiceType_Names::SOB_SatelliteRecordID_Name);
  } else if (accessor.isMeasurementID()) {
    MeasurementID_Type::serialize(accessor.getMeasurementID(), node, EntityContributorID_ChoiceType_Names::MeasurementID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityContributorID_ChoiceType& EntityContributorID_ChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityContributorID_ChoiceType>().release());
}

uci::type::EntityContributorID_ChoiceType& EntityContributorID_ChoiceType::create(const uci::type::EntityContributorID_ChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityContributorID_ChoiceType> newAccessor{boost::make_unique<asb_uci::type::EntityContributorID_ChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityContributorID_ChoiceType::destroy(uci::type::EntityContributorID_ChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::EntityContributorID_ChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

