/** @file DataPortType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DataPortType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommUserIO_ID_Type.h"
#include "asb_uci/type/CommUserLinkID_Type.h"
#include "asb_uci/type/SupportCapabilityID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommUserIO_ID_Type.h"
#include "uci/type/CommUserLinkID_Type.h"
#include "uci/type/DataPortType.h"
#include "uci/type/SupportCapabilityID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DataPortType::DataPortType() = default;

DataPortType::~DataPortType() = default;

void DataPortType::copy(const uci::type::DataPortType& accessor) {
  copyImpl(accessor, false);
}

void DataPortType::copyImpl(const uci::type::DataPortType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DataPortType&>(accessor);
    if (accessorImpl.userIO_ID_Accessor) {
      setUserIO_ID(*(accessorImpl.userIO_ID_Accessor));
    } else {
      userIO_ID_Accessor.reset();
    }
    if (accessorImpl.rF_UserLinkID_Accessor) {
      setRF_UserLinkID(*(accessorImpl.rF_UserLinkID_Accessor));
    } else {
      rF_UserLinkID_Accessor.reset();
    }
    if (accessorImpl.cryptoID_Accessor) {
      setCryptoID(*(accessorImpl.cryptoID_Accessor));
    } else {
      cryptoID_Accessor.reset();
    }
  }
}

void DataPortType::reset() noexcept {
  userIO_ID_Accessor.reset();
  rF_UserLinkID_Accessor.reset();
  cryptoID_Accessor.reset();
}

uci::type::DataPortType::DataPortTypeChoice DataPortType::getDataPortTypeChoiceOrdinal() const noexcept {
  if (userIO_ID_Accessor) {
    return DATAPORTTYPE_CHOICE_USERIO_ID;
  }
  if (rF_UserLinkID_Accessor) {
    return DATAPORTTYPE_CHOICE_RF_USERLINKID;
  }
  if (cryptoID_Accessor) {
    return DATAPORTTYPE_CHOICE_CRYPTOID;
  }
  return DATAPORTTYPE_CHOICE_NONE;
}

uci::type::DataPortType& DataPortType::setDataPortTypeChoiceOrdinal(uci::type::DataPortType::DataPortTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case DATAPORTTYPE_CHOICE_USERIO_ID:
      chooseUserIO_ID("setDataPortTypeChoiceOrdinal", type);
      break;
    case DATAPORTTYPE_CHOICE_RF_USERLINKID:
      chooseRF_UserLinkID("setDataPortTypeChoiceOrdinal", type);
      break;
    case DATAPORTTYPE_CHOICE_CRYPTOID:
      chooseCryptoID("setDataPortTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setDataPortTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::CommUserIO_ID_Type& DataPortType::getUserIO_ID_() const {
  if (userIO_ID_Accessor) {
    return *userIO_ID_Accessor;
  }
  throw uci::base::UCIException("Error in getUserIO_ID(): Unable to get UserIO_ID, field not selected");
}

const uci::type::CommUserIO_ID_Type& DataPortType::getUserIO_ID() const {
  return getUserIO_ID_();
}

uci::type::CommUserIO_ID_Type& DataPortType::getUserIO_ID() {
  return getUserIO_ID_();
}

uci::type::DataPortType& DataPortType::setUserIO_ID(const uci::type::CommUserIO_ID_Type& accessor) {
  chooseUserIO_ID();
  if (&accessor != userIO_ID_Accessor.get()) {
    userIO_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataPortType::isUserIO_ID() const noexcept {
  return static_cast<bool>(userIO_ID_Accessor);
}

uci::type::CommUserIO_ID_Type& DataPortType::chooseUserIO_ID(const std::string& method, uci::base::accessorType::AccessorType type) {
  rF_UserLinkID_Accessor.reset();
  cryptoID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commUserIO_ID_Type : type};
  if ((!userIO_ID_Accessor) || (userIO_ID_Accessor->getAccessorType() != requestedType)) {
    userIO_ID_Accessor = CommUserIO_ID_Type::create(type);
    if (!userIO_ID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *userIO_ID_Accessor;
}

uci::type::CommUserIO_ID_Type& DataPortType::chooseUserIO_ID(uci::base::accessorType::AccessorType type) {
  return chooseUserIO_ID("chooseUserIO_ID", type);
}

uci::type::CommUserLinkID_Type& DataPortType::getRF_UserLinkID_() const {
  if (rF_UserLinkID_Accessor) {
    return *rF_UserLinkID_Accessor;
  }
  throw uci::base::UCIException("Error in getRF_UserLinkID(): Unable to get RF_UserLinkID, field not selected");
}

const uci::type::CommUserLinkID_Type& DataPortType::getRF_UserLinkID() const {
  return getRF_UserLinkID_();
}

uci::type::CommUserLinkID_Type& DataPortType::getRF_UserLinkID() {
  return getRF_UserLinkID_();
}

uci::type::DataPortType& DataPortType::setRF_UserLinkID(const uci::type::CommUserLinkID_Type& accessor) {
  chooseRF_UserLinkID();
  if (&accessor != rF_UserLinkID_Accessor.get()) {
    rF_UserLinkID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataPortType::isRF_UserLinkID() const noexcept {
  return static_cast<bool>(rF_UserLinkID_Accessor);
}

uci::type::CommUserLinkID_Type& DataPortType::chooseRF_UserLinkID(const std::string& method, uci::base::accessorType::AccessorType type) {
  userIO_ID_Accessor.reset();
  cryptoID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commUserLinkID_Type : type};
  if ((!rF_UserLinkID_Accessor) || (rF_UserLinkID_Accessor->getAccessorType() != requestedType)) {
    rF_UserLinkID_Accessor = CommUserLinkID_Type::create(type);
    if (!rF_UserLinkID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rF_UserLinkID_Accessor;
}

uci::type::CommUserLinkID_Type& DataPortType::chooseRF_UserLinkID(uci::base::accessorType::AccessorType type) {
  return chooseRF_UserLinkID("chooseRF_UserLinkID", type);
}

uci::type::SupportCapabilityID_Type& DataPortType::getCryptoID_() const {
  if (cryptoID_Accessor) {
    return *cryptoID_Accessor;
  }
  throw uci::base::UCIException("Error in getCryptoID(): Unable to get CryptoID, field not selected");
}

const uci::type::SupportCapabilityID_Type& DataPortType::getCryptoID() const {
  return getCryptoID_();
}

uci::type::SupportCapabilityID_Type& DataPortType::getCryptoID() {
  return getCryptoID_();
}

uci::type::DataPortType& DataPortType::setCryptoID(const uci::type::SupportCapabilityID_Type& accessor) {
  chooseCryptoID();
  if (&accessor != cryptoID_Accessor.get()) {
    cryptoID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataPortType::isCryptoID() const noexcept {
  return static_cast<bool>(cryptoID_Accessor);
}

uci::type::SupportCapabilityID_Type& DataPortType::chooseCryptoID(const std::string& method, uci::base::accessorType::AccessorType type) {
  userIO_ID_Accessor.reset();
  rF_UserLinkID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::supportCapabilityID_Type : type};
  if ((!cryptoID_Accessor) || (cryptoID_Accessor->getAccessorType() != requestedType)) {
    cryptoID_Accessor = SupportCapabilityID_Type::create(type);
    if (!cryptoID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *cryptoID_Accessor;
}

uci::type::SupportCapabilityID_Type& DataPortType::chooseCryptoID(uci::base::accessorType::AccessorType type) {
  return chooseCryptoID("chooseCryptoID", type);
}

std::unique_ptr<DataPortType> DataPortType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataPortType : type};
  return (requestedType == uci::type::accessorType::dataPortType) ? boost::make_unique<DataPortType>() : nullptr;
}

/**  */
namespace DataPortType_Names {

constexpr const char* Extern_Type_Name{"DataPortType"};
constexpr const char* UserIO_ID_Name{"UserIO_ID"};
constexpr const char* RF_UserLinkID_Name{"RF_UserLinkID"};
constexpr const char* CryptoID_Name{"CryptoID"};

} // namespace DataPortType_Names

void DataPortType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DataPortType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DataPortType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DataPortType_Names::UserIO_ID_Name) {
      CommUserIO_ID_Type::deserialize(valueType.second, accessor.chooseUserIO_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataPortType_Names::RF_UserLinkID_Name) {
      CommUserLinkID_Type::deserialize(valueType.second, accessor.chooseRF_UserLinkID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataPortType_Names::CryptoID_Name) {
      SupportCapabilityID_Type::deserialize(valueType.second, accessor.chooseCryptoID(), nodeName, nsPrefix);
    }
  }
}

std::string DataPortType::serialize(const uci::type::DataPortType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DataPortType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DataPortType_Names::Extern_Type_Name);
  }
  if (accessor.isUserIO_ID()) {
    CommUserIO_ID_Type::serialize(accessor.getUserIO_ID(), node, DataPortType_Names::UserIO_ID_Name);
  } else if (accessor.isRF_UserLinkID()) {
    CommUserLinkID_Type::serialize(accessor.getRF_UserLinkID(), node, DataPortType_Names::RF_UserLinkID_Name);
  } else if (accessor.isCryptoID()) {
    SupportCapabilityID_Type::serialize(accessor.getCryptoID(), node, DataPortType_Names::CryptoID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DataPortType& DataPortType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DataPortType>().release());
}

uci::type::DataPortType& DataPortType::create(const uci::type::DataPortType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DataPortType> newAccessor{boost::make_unique<asb_uci::type::DataPortType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DataPortType::destroy(uci::type::DataPortType& accessor) {
  delete dynamic_cast<asb_uci::type::DataPortType*>(&accessor);
}

} // namespace type

} // namespace uci

