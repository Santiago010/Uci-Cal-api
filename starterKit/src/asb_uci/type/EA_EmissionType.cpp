/** @file EA_EmissionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EA_EmissionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EA_TargetType.h"
#include "asb_uci/type/EA_TechniqueIdentifierType.h"
#include "asb_uci/type/FrequencyRangeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/EA_EmissionType.h"
#include "uci/type/EA_TargetType.h"
#include "uci/type/EA_TechniqueIdentifierType.h"
#include "uci/type/FrequencyRangeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EA_EmissionType::EA_EmissionType()
  : target_Accessor{boost::make_unique<Target>(0, SIZE_MAX)} {
}

EA_EmissionType::~EA_EmissionType() = default;

void EA_EmissionType::copy(const uci::type::EA_EmissionType& accessor) {
  copyImpl(accessor, false);
}

void EA_EmissionType::copyImpl(const uci::type::EA_EmissionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EA_EmissionType&>(accessor);
    if (accessorImpl.techniqueIdentifier_Accessor) {
      setTechniqueIdentifier(*(accessorImpl.techniqueIdentifier_Accessor));
    } else {
      techniqueIdentifier_Accessor.reset();
    }
    if (accessorImpl.frequency_Accessor) {
      setFrequency(*(accessorImpl.frequency_Accessor));
    } else {
      frequency_Accessor.reset();
    }
    setTarget(*(accessorImpl.target_Accessor));
    if (accessorImpl.hasChannelAttenuation()) {
      setChannelAttenuation(accessorImpl.getChannelAttenuation());
    } else {
      clearChannelAttenuation();
    }
  }
}

void EA_EmissionType::reset() noexcept {
  techniqueIdentifier_Accessor.reset();
  frequency_Accessor.reset();
  target_Accessor->reset();
  clearChannelAttenuation();
}

uci::type::EA_TechniqueIdentifierType& EA_EmissionType::getTechniqueIdentifier_() const {
  if (techniqueIdentifier_Accessor) {
    return *techniqueIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getTechniqueIdentifier(): An attempt was made to get an optional field that was not enabled, call hasTechniqueIdentifier() to determine if it is safe to call getTechniqueIdentifier()");
}

const uci::type::EA_TechniqueIdentifierType& EA_EmissionType::getTechniqueIdentifier() const {
  return getTechniqueIdentifier_();
}

uci::type::EA_TechniqueIdentifierType& EA_EmissionType::getTechniqueIdentifier() {
  return getTechniqueIdentifier_();
}

uci::type::EA_EmissionType& EA_EmissionType::setTechniqueIdentifier(const uci::type::EA_TechniqueIdentifierType& accessor) {
  enableTechniqueIdentifier();
  if (&accessor != techniqueIdentifier_Accessor.get()) {
    techniqueIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_EmissionType::hasTechniqueIdentifier() const noexcept {
  return static_cast<bool>(techniqueIdentifier_Accessor);
}

uci::type::EA_TechniqueIdentifierType& EA_EmissionType::enableTechniqueIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_TechniqueIdentifierType : type};
  if ((!techniqueIdentifier_Accessor) || (techniqueIdentifier_Accessor->getAccessorType() != requestedType)) {
    techniqueIdentifier_Accessor = EA_TechniqueIdentifierType::create(requestedType);
    if (!techniqueIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enableTechniqueIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *techniqueIdentifier_Accessor;
}

uci::type::EA_EmissionType& EA_EmissionType::clearTechniqueIdentifier() noexcept {
  techniqueIdentifier_Accessor.reset();
  return *this;
}

uci::type::FrequencyRangeType& EA_EmissionType::getFrequency_() const {
  if (frequency_Accessor) {
    return *frequency_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequency(): An attempt was made to get an optional field that was not enabled, call hasFrequency() to determine if it is safe to call getFrequency()");
}

const uci::type::FrequencyRangeType& EA_EmissionType::getFrequency() const {
  return getFrequency_();
}

uci::type::FrequencyRangeType& EA_EmissionType::getFrequency() {
  return getFrequency_();
}

uci::type::EA_EmissionType& EA_EmissionType::setFrequency(const uci::type::FrequencyRangeType& accessor) {
  enableFrequency();
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_EmissionType::hasFrequency() const noexcept {
  return static_cast<bool>(frequency_Accessor);
}

uci::type::FrequencyRangeType& EA_EmissionType::enableFrequency(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyRangeType : type};
  if ((!frequency_Accessor) || (frequency_Accessor->getAccessorType() != requestedType)) {
    frequency_Accessor = FrequencyRangeType::create(requestedType);
    if (!frequency_Accessor) {
      throw uci::base::UCIException("Error in enableFrequency(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *frequency_Accessor;
}

uci::type::EA_EmissionType& EA_EmissionType::clearFrequency() noexcept {
  frequency_Accessor.reset();
  return *this;
}

const uci::type::EA_EmissionType::Target& EA_EmissionType::getTarget() const {
  return *target_Accessor;
}

uci::type::EA_EmissionType::Target& EA_EmissionType::getTarget() {
  return *target_Accessor;
}

uci::type::EA_EmissionType& EA_EmissionType::setTarget(const uci::type::EA_EmissionType::Target& accessor) {
  if (&accessor != target_Accessor.get()) {
    target_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DecibelTypeValue EA_EmissionType::getChannelAttenuation() const {
  if (channelAttenuation_Accessor) {
    return *channelAttenuation_Accessor;
  }
  throw uci::base::UCIException("Error in getChannelAttenuation(): An attempt was made to get an optional field that was not enabled, call hasChannelAttenuation() to determine if it is safe to call getChannelAttenuation()");
}

uci::type::EA_EmissionType& EA_EmissionType::setChannelAttenuation(uci::type::DecibelTypeValue value) {
  channelAttenuation_Accessor = value;
  return *this;
}

bool EA_EmissionType::hasChannelAttenuation() const noexcept {
  return channelAttenuation_Accessor.has_value();
}

uci::type::EA_EmissionType& EA_EmissionType::clearChannelAttenuation() noexcept {
  channelAttenuation_Accessor.reset();
  return *this;
}

std::unique_ptr<EA_EmissionType> EA_EmissionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_EmissionType : type};
  return (requestedType == uci::type::accessorType::eA_EmissionType) ? boost::make_unique<EA_EmissionType>() : nullptr;
}

/**  */
namespace EA_EmissionType_Names {

constexpr const char* Extern_Type_Name{"EA_EmissionType"};
constexpr const char* TechniqueIdentifier_Name{"TechniqueIdentifier"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* Target_Name{"Target"};
constexpr const char* ChannelAttenuation_Name{"ChannelAttenuation"};

} // namespace EA_EmissionType_Names

void EA_EmissionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_EmissionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EA_EmissionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EA_EmissionType_Names::TechniqueIdentifier_Name) {
      EA_TechniqueIdentifierType::deserialize(valueType.second, accessor.enableTechniqueIdentifier(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_EmissionType_Names::Frequency_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_EmissionType_Names::Target_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EA_EmissionType::Target& boundedList = accessor.getTarget();
        const uci::type::EA_EmissionType::Target::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EA_TargetType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EA_EmissionType_Names::ChannelAttenuation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setChannelAttenuation(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string EA_EmissionType::serialize(const uci::type::EA_EmissionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EA_EmissionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EA_EmissionType_Names::Extern_Type_Name);
  }
  if (accessor.hasTechniqueIdentifier()) {
    EA_TechniqueIdentifierType::serialize(accessor.getTechniqueIdentifier(), node, EA_EmissionType_Names::TechniqueIdentifier_Name);
  }
  if (accessor.hasFrequency()) {
    FrequencyRangeType::serialize(accessor.getFrequency(), node, EA_EmissionType_Names::Frequency_Name);
  }
  {
    const uci::type::EA_EmissionType::Target& boundedList = accessor.getTarget();
    for (uci::type::EA_EmissionType::Target::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EA_TargetType::serialize(boundedList.at(i), node, EA_EmissionType_Names::Target_Name);
    }
  }
  if (accessor.hasChannelAttenuation()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getChannelAttenuation(), node, EA_EmissionType_Names::ChannelAttenuation_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EA_EmissionType& EA_EmissionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EA_EmissionType>().release());
}

uci::type::EA_EmissionType& EA_EmissionType::create(const uci::type::EA_EmissionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EA_EmissionType> newAccessor{boost::make_unique<asb_uci::type::EA_EmissionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EA_EmissionType::destroy(uci::type::EA_EmissionType& accessor) {
  delete dynamic_cast<asb_uci::type::EA_EmissionType*>(&accessor);
}

} // namespace type

} // namespace uci

