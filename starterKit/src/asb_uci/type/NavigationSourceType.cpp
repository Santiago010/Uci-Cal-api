/** @file NavigationSourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/NavigationSourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AutopilotModeEnum.h"
#include "asb_uci/type/EmptyType.h"
#include "asb_uci/type/MissionPlanNavigationType.h"
#include "asb_uci/type/Point3D_Type.h"
#include "asb_uci/type/RelativeNavigationType.h"
#include "asb_uci/type/SlavedNavigationType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AutopilotModeEnum.h"
#include "uci/type/EmptyType.h"
#include "uci/type/MissionPlanNavigationType.h"
#include "uci/type/NavigationSourceType.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/RelativeNavigationType.h"
#include "uci/type/SlavedNavigationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

NavigationSourceType::NavigationSourceType() = default;

NavigationSourceType::~NavigationSourceType() = default;

void NavigationSourceType::copy(const uci::type::NavigationSourceType& accessor) {
  copyImpl(accessor, false);
}

void NavigationSourceType::copyImpl(const uci::type::NavigationSourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const NavigationSourceType&>(accessor);
    if (accessorImpl.missionPlanNavigation_Accessor) {
      setMissionPlanNavigation(*(accessorImpl.missionPlanNavigation_Accessor));
    } else {
      missionPlanNavigation_Accessor.reset();
    }
    if (accessorImpl.fixedNavigation_Accessor) {
      setFixedNavigation(*(accessorImpl.fixedNavigation_Accessor));
    } else {
      fixedNavigation_Accessor.reset();
    }
    if (accessorImpl.manualNavigation_Accessor) {
      setManualNavigation(*(accessorImpl.manualNavigation_Accessor));
    } else {
      manualNavigation_Accessor.reset();
    }
    if (accessorImpl.autoPilotNavigation_Accessor) {
      setAutoPilotNavigation(*(accessorImpl.autoPilotNavigation_Accessor));
    } else {
      autoPilotNavigation_Accessor.reset();
    }
    if (accessorImpl.relativeNavigation_Accessor) {
      setRelativeNavigation(*(accessorImpl.relativeNavigation_Accessor));
    } else {
      relativeNavigation_Accessor.reset();
    }
    if (accessorImpl.slavedNavigation_Accessor) {
      setSlavedNavigation(*(accessorImpl.slavedNavigation_Accessor));
    } else {
      slavedNavigation_Accessor.reset();
    }
  }
}

void NavigationSourceType::reset() noexcept {
  missionPlanNavigation_Accessor.reset();
  fixedNavigation_Accessor.reset();
  manualNavigation_Accessor.reset();
  autoPilotNavigation_Accessor.reset();
  relativeNavigation_Accessor.reset();
  slavedNavigation_Accessor.reset();
}

uci::type::NavigationSourceType::NavigationSourceTypeChoice NavigationSourceType::getNavigationSourceTypeChoiceOrdinal() const noexcept {
  if (missionPlanNavigation_Accessor) {
    return NAVIGATIONSOURCETYPE_CHOICE_MISSIONPLANNAVIGATION;
  }
  if (fixedNavigation_Accessor) {
    return NAVIGATIONSOURCETYPE_CHOICE_FIXEDNAVIGATION;
  }
  if (manualNavigation_Accessor) {
    return NAVIGATIONSOURCETYPE_CHOICE_MANUALNAVIGATION;
  }
  if (autoPilotNavigation_Accessor) {
    return NAVIGATIONSOURCETYPE_CHOICE_AUTOPILOTNAVIGATION;
  }
  if (relativeNavigation_Accessor) {
    return NAVIGATIONSOURCETYPE_CHOICE_RELATIVENAVIGATION;
  }
  if (slavedNavigation_Accessor) {
    return NAVIGATIONSOURCETYPE_CHOICE_SLAVEDNAVIGATION;
  }
  return NAVIGATIONSOURCETYPE_CHOICE_NONE;
}

uci::type::NavigationSourceType& NavigationSourceType::setNavigationSourceTypeChoiceOrdinal(uci::type::NavigationSourceType::NavigationSourceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case NAVIGATIONSOURCETYPE_CHOICE_MISSIONPLANNAVIGATION:
      chooseMissionPlanNavigation("setNavigationSourceTypeChoiceOrdinal", type);
      break;
    case NAVIGATIONSOURCETYPE_CHOICE_FIXEDNAVIGATION:
      chooseFixedNavigation("setNavigationSourceTypeChoiceOrdinal", type);
      break;
    case NAVIGATIONSOURCETYPE_CHOICE_MANUALNAVIGATION:
      chooseManualNavigation("setNavigationSourceTypeChoiceOrdinal", type);
      break;
    case NAVIGATIONSOURCETYPE_CHOICE_AUTOPILOTNAVIGATION:
      chooseAutoPilotNavigation("setNavigationSourceTypeChoiceOrdinal", type);
      break;
    case NAVIGATIONSOURCETYPE_CHOICE_RELATIVENAVIGATION:
      chooseRelativeNavigation("setNavigationSourceTypeChoiceOrdinal", type);
      break;
    case NAVIGATIONSOURCETYPE_CHOICE_SLAVEDNAVIGATION:
      chooseSlavedNavigation("setNavigationSourceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setNavigationSourceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::MissionPlanNavigationType& NavigationSourceType::getMissionPlanNavigation_() const {
  if (missionPlanNavigation_Accessor) {
    return *missionPlanNavigation_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionPlanNavigation(): Unable to get MissionPlanNavigation, field not selected");
}

const uci::type::MissionPlanNavigationType& NavigationSourceType::getMissionPlanNavigation() const {
  return getMissionPlanNavigation_();
}

uci::type::MissionPlanNavigationType& NavigationSourceType::getMissionPlanNavigation() {
  return getMissionPlanNavigation_();
}

uci::type::NavigationSourceType& NavigationSourceType::setMissionPlanNavigation(const uci::type::MissionPlanNavigationType& accessor) {
  chooseMissionPlanNavigation();
  if (&accessor != missionPlanNavigation_Accessor.get()) {
    missionPlanNavigation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NavigationSourceType::isMissionPlanNavigation() const noexcept {
  return static_cast<bool>(missionPlanNavigation_Accessor);
}

uci::type::MissionPlanNavigationType& NavigationSourceType::chooseMissionPlanNavigation(const std::string& method, uci::base::accessorType::AccessorType type) {
  fixedNavigation_Accessor.reset();
  manualNavigation_Accessor.reset();
  autoPilotNavigation_Accessor.reset();
  relativeNavigation_Accessor.reset();
  slavedNavigation_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanNavigationType : type};
  if ((!missionPlanNavigation_Accessor) || (missionPlanNavigation_Accessor->getAccessorType() != requestedType)) {
    missionPlanNavigation_Accessor = MissionPlanNavigationType::create(type);
    if (!missionPlanNavigation_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionPlanNavigation_Accessor;
}

uci::type::MissionPlanNavigationType& NavigationSourceType::chooseMissionPlanNavigation(uci::base::accessorType::AccessorType type) {
  return chooseMissionPlanNavigation("chooseMissionPlanNavigation", type);
}

uci::type::Point3D_Type& NavigationSourceType::getFixedNavigation_() const {
  if (fixedNavigation_Accessor) {
    return *fixedNavigation_Accessor;
  }
  throw uci::base::UCIException("Error in getFixedNavigation(): Unable to get FixedNavigation, field not selected");
}

const uci::type::Point3D_Type& NavigationSourceType::getFixedNavigation() const {
  return getFixedNavigation_();
}

uci::type::Point3D_Type& NavigationSourceType::getFixedNavigation() {
  return getFixedNavigation_();
}

uci::type::NavigationSourceType& NavigationSourceType::setFixedNavigation(const uci::type::Point3D_Type& accessor) {
  chooseFixedNavigation("setFixedNavigation", accessor.getAccessorType());
  if (&accessor != fixedNavigation_Accessor.get()) {
    fixedNavigation_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool NavigationSourceType::isFixedNavigation() const noexcept {
  return static_cast<bool>(fixedNavigation_Accessor);
}

uci::type::Point3D_Type& NavigationSourceType::chooseFixedNavigation(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanNavigation_Accessor.reset();
  manualNavigation_Accessor.reset();
  autoPilotNavigation_Accessor.reset();
  relativeNavigation_Accessor.reset();
  slavedNavigation_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!fixedNavigation_Accessor) || (fixedNavigation_Accessor->getAccessorType() != requestedType)) {
    fixedNavigation_Accessor = Point3D_Type::create(type);
    if (!fixedNavigation_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fixedNavigation_Accessor;
}

uci::type::Point3D_Type& NavigationSourceType::chooseFixedNavigation(uci::base::accessorType::AccessorType type) {
  return chooseFixedNavigation("chooseFixedNavigation", type);
}

uci::type::EmptyType& NavigationSourceType::getManualNavigation_() const {
  if (manualNavigation_Accessor) {
    return *manualNavigation_Accessor;
  }
  throw uci::base::UCIException("Error in getManualNavigation(): An attempt was made to get an optional field that was not enabled, call hasManualNavigation() to determine if it is safe to call getManualNavigation()");
}

const uci::type::EmptyType& NavigationSourceType::getManualNavigation() const {
  return getManualNavigation_();
}

uci::type::EmptyType& NavigationSourceType::getManualNavigation() {
  return getManualNavigation_();
}

uci::type::NavigationSourceType& NavigationSourceType::setManualNavigation(const uci::type::EmptyType& value) {
  return setManualNavigation(value.c_str());
}

uci::type::NavigationSourceType& NavigationSourceType::setManualNavigation(const std::string& value) {
  return setManualNavigation(value.c_str());
}

uci::type::NavigationSourceType& NavigationSourceType::setManualNavigation(const char * value) {
  chooseManualNavigation().setStringValue(value);
  return *this;
}

bool NavigationSourceType::isManualNavigation() const noexcept {
  return static_cast<bool>(manualNavigation_Accessor);
}

uci::type::EmptyType& NavigationSourceType::chooseManualNavigation(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  missionPlanNavigation_Accessor.reset();
  fixedNavigation_Accessor.reset();
  autoPilotNavigation_Accessor.reset();
  relativeNavigation_Accessor.reset();
  slavedNavigation_Accessor.reset();
  if (!manualNavigation_Accessor) {
    manualNavigation_Accessor = EmptyType::create(type);
  }
  return *manualNavigation_Accessor;
}

uci::type::EmptyType& NavigationSourceType::chooseManualNavigation(uci::base::accessorType::AccessorType type) {
  return chooseManualNavigation("chooseManualNavigation", type);
}

uci::type::AutopilotModeEnum& NavigationSourceType::getAutoPilotNavigation_() const {
  if (autoPilotNavigation_Accessor) {
    return *autoPilotNavigation_Accessor;
  }
  throw uci::base::UCIException("Error in getAutoPilotNavigation(): Unable to get AutoPilotNavigation, field not selected");
}

const uci::type::AutopilotModeEnum& NavigationSourceType::getAutoPilotNavigation() const {
  return getAutoPilotNavigation_();
}

uci::type::AutopilotModeEnum& NavigationSourceType::getAutoPilotNavigation() {
  return getAutoPilotNavigation_();
}

uci::type::NavigationSourceType& NavigationSourceType::setAutoPilotNavigation(const uci::type::AutopilotModeEnum& accessor) {
  chooseAutoPilotNavigation();
  if (&accessor != autoPilotNavigation_Accessor.get()) {
    autoPilotNavigation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::NavigationSourceType& NavigationSourceType::setAutoPilotNavigation(uci::type::AutopilotModeEnum::EnumerationItem value) {
  chooseAutoPilotNavigation().setValue(value);
  return *this;
}

bool NavigationSourceType::isAutoPilotNavigation() const noexcept {
  return static_cast<bool>(autoPilotNavigation_Accessor);
}

uci::type::AutopilotModeEnum& NavigationSourceType::chooseAutoPilotNavigation(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanNavigation_Accessor.reset();
  fixedNavigation_Accessor.reset();
  manualNavigation_Accessor.reset();
  relativeNavigation_Accessor.reset();
  slavedNavigation_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::autopilotModeEnum : type};
  if ((!autoPilotNavigation_Accessor) || (autoPilotNavigation_Accessor->getAccessorType() != requestedType)) {
    autoPilotNavigation_Accessor = AutopilotModeEnum::create(type);
    if (!autoPilotNavigation_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *autoPilotNavigation_Accessor;
}

uci::type::AutopilotModeEnum& NavigationSourceType::chooseAutoPilotNavigation(uci::base::accessorType::AccessorType type) {
  return chooseAutoPilotNavigation("chooseAutoPilotNavigation", type);
}

uci::type::RelativeNavigationType& NavigationSourceType::getRelativeNavigation_() const {
  if (relativeNavigation_Accessor) {
    return *relativeNavigation_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeNavigation(): Unable to get RelativeNavigation, field not selected");
}

const uci::type::RelativeNavigationType& NavigationSourceType::getRelativeNavigation() const {
  return getRelativeNavigation_();
}

uci::type::RelativeNavigationType& NavigationSourceType::getRelativeNavigation() {
  return getRelativeNavigation_();
}

uci::type::NavigationSourceType& NavigationSourceType::setRelativeNavigation(const uci::type::RelativeNavigationType& accessor) {
  chooseRelativeNavigation();
  if (&accessor != relativeNavigation_Accessor.get()) {
    relativeNavigation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NavigationSourceType::isRelativeNavigation() const noexcept {
  return static_cast<bool>(relativeNavigation_Accessor);
}

uci::type::RelativeNavigationType& NavigationSourceType::chooseRelativeNavigation(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanNavigation_Accessor.reset();
  fixedNavigation_Accessor.reset();
  manualNavigation_Accessor.reset();
  autoPilotNavigation_Accessor.reset();
  slavedNavigation_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativeNavigationType : type};
  if ((!relativeNavigation_Accessor) || (relativeNavigation_Accessor->getAccessorType() != requestedType)) {
    relativeNavigation_Accessor = RelativeNavigationType::create(type);
    if (!relativeNavigation_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativeNavigation_Accessor;
}

uci::type::RelativeNavigationType& NavigationSourceType::chooseRelativeNavigation(uci::base::accessorType::AccessorType type) {
  return chooseRelativeNavigation("chooseRelativeNavigation", type);
}

uci::type::SlavedNavigationType& NavigationSourceType::getSlavedNavigation_() const {
  if (slavedNavigation_Accessor) {
    return *slavedNavigation_Accessor;
  }
  throw uci::base::UCIException("Error in getSlavedNavigation(): Unable to get SlavedNavigation, field not selected");
}

const uci::type::SlavedNavigationType& NavigationSourceType::getSlavedNavigation() const {
  return getSlavedNavigation_();
}

uci::type::SlavedNavigationType& NavigationSourceType::getSlavedNavigation() {
  return getSlavedNavigation_();
}

uci::type::NavigationSourceType& NavigationSourceType::setSlavedNavigation(const uci::type::SlavedNavigationType& accessor) {
  chooseSlavedNavigation();
  if (&accessor != slavedNavigation_Accessor.get()) {
    slavedNavigation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NavigationSourceType::isSlavedNavigation() const noexcept {
  return static_cast<bool>(slavedNavigation_Accessor);
}

uci::type::SlavedNavigationType& NavigationSourceType::chooseSlavedNavigation(const std::string& method, uci::base::accessorType::AccessorType type) {
  missionPlanNavigation_Accessor.reset();
  fixedNavigation_Accessor.reset();
  manualNavigation_Accessor.reset();
  autoPilotNavigation_Accessor.reset();
  relativeNavigation_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::slavedNavigationType : type};
  if ((!slavedNavigation_Accessor) || (slavedNavigation_Accessor->getAccessorType() != requestedType)) {
    slavedNavigation_Accessor = SlavedNavigationType::create(type);
    if (!slavedNavigation_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *slavedNavigation_Accessor;
}

uci::type::SlavedNavigationType& NavigationSourceType::chooseSlavedNavigation(uci::base::accessorType::AccessorType type) {
  return chooseSlavedNavigation("chooseSlavedNavigation", type);
}

std::unique_ptr<NavigationSourceType> NavigationSourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::navigationSourceType : type};
  return (requestedType == uci::type::accessorType::navigationSourceType) ? boost::make_unique<NavigationSourceType>() : nullptr;
}

/**  */
namespace NavigationSourceType_Names {

constexpr const char* Extern_Type_Name{"NavigationSourceType"};
constexpr const char* MissionPlanNavigation_Name{"MissionPlanNavigation"};
constexpr const char* FixedNavigation_Name{"FixedNavigation"};
constexpr const char* ManualNavigation_Name{"ManualNavigation"};
constexpr const char* AutoPilotNavigation_Name{"AutoPilotNavigation"};
constexpr const char* RelativeNavigation_Name{"RelativeNavigation"};
constexpr const char* SlavedNavigation_Name{"SlavedNavigation"};

} // namespace NavigationSourceType_Names

void NavigationSourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::NavigationSourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = NavigationSourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + NavigationSourceType_Names::MissionPlanNavigation_Name) {
      MissionPlanNavigationType::deserialize(valueType.second, accessor.chooseMissionPlanNavigation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NavigationSourceType_Names::FixedNavigation_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseFixedNavigation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NavigationSourceType_Names::ManualNavigation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseManualNavigation().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + NavigationSourceType_Names::AutoPilotNavigation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseAutoPilotNavigation().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + NavigationSourceType_Names::RelativeNavigation_Name) {
      RelativeNavigationType::deserialize(valueType.second, accessor.chooseRelativeNavigation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NavigationSourceType_Names::SlavedNavigation_Name) {
      SlavedNavigationType::deserialize(valueType.second, accessor.chooseSlavedNavigation(), nodeName, nsPrefix);
    }
  }
}

std::string NavigationSourceType::serialize(const uci::type::NavigationSourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? NavigationSourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, NavigationSourceType_Names::Extern_Type_Name);
  }
  if (accessor.isMissionPlanNavigation()) {
    MissionPlanNavigationType::serialize(accessor.getMissionPlanNavigation(), node, NavigationSourceType_Names::MissionPlanNavigation_Name);
  } else if (accessor.isFixedNavigation()) {
    Point3D_Type::serialize(accessor.getFixedNavigation(), node, NavigationSourceType_Names::FixedNavigation_Name);
  } else if (accessor.isManualNavigation()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getManualNavigation(), node, NavigationSourceType_Names::ManualNavigation_Name);
  } else if (accessor.isAutoPilotNavigation()) {
    AutopilotModeEnum::serialize(accessor.getAutoPilotNavigation(), node, NavigationSourceType_Names::AutoPilotNavigation_Name, false);
  } else if (accessor.isRelativeNavigation()) {
    RelativeNavigationType::serialize(accessor.getRelativeNavigation(), node, NavigationSourceType_Names::RelativeNavigation_Name);
  } else if (accessor.isSlavedNavigation()) {
    SlavedNavigationType::serialize(accessor.getSlavedNavigation(), node, NavigationSourceType_Names::SlavedNavigation_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::NavigationSourceType& NavigationSourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::NavigationSourceType>().release());
}

uci::type::NavigationSourceType& NavigationSourceType::create(const uci::type::NavigationSourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::NavigationSourceType> newAccessor{boost::make_unique<asb_uci::type::NavigationSourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void NavigationSourceType::destroy(uci::type::NavigationSourceType& accessor) {
  delete dynamic_cast<asb_uci::type::NavigationSourceType*>(&accessor);
}

} // namespace type

} // namespace uci

