/** @file CloudsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CloudsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/WeatherCloudCoverEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AltitudeType.h"
#include "uci/type/CloudsType.h"
#include "uci/type/OktaType.h"
#include "uci/type/WeatherCloudCoverEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CloudsType::CloudsType() = default;

CloudsType::~CloudsType() = default;

void CloudsType::copy(const uci::type::CloudsType& accessor) {
  copyImpl(accessor, false);
}

void CloudsType::copyImpl(const uci::type::CloudsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CloudsType&>(accessor);
    if (accessorImpl.cloudCover_Accessor) {
      setCloudCover(*(accessorImpl.cloudCover_Accessor));
    } else {
      cloudCover_Accessor.reset();
    }
    if (accessorImpl.hasCloudCoverAmplification()) {
      setCloudCoverAmplification(accessorImpl.getCloudCoverAmplification());
    } else {
      clearCloudCoverAmplification();
    }
    if (accessorImpl.hasCloudFloor()) {
      setCloudFloor(accessorImpl.getCloudFloor());
    } else {
      clearCloudFloor();
    }
    if (accessorImpl.hasCloudCeiling()) {
      setCloudCeiling(accessorImpl.getCloudCeiling());
    } else {
      clearCloudCeiling();
    }
  }
}

void CloudsType::reset() noexcept {
  cloudCover_Accessor.reset();
  clearCloudCoverAmplification();
  clearCloudFloor();
  clearCloudCeiling();
}

uci::type::WeatherCloudCoverEnum& CloudsType::getCloudCover_() const {
  if (cloudCover_Accessor) {
    return *cloudCover_Accessor;
  }
  throw uci::base::UCIException("Error in getCloudCover(): An attempt was made to get an optional field that was not enabled, call hasCloudCover() to determine if it is safe to call getCloudCover()");
}

const uci::type::WeatherCloudCoverEnum& CloudsType::getCloudCover() const {
  return getCloudCover_();
}

uci::type::WeatherCloudCoverEnum& CloudsType::getCloudCover() {
  return getCloudCover_();
}

uci::type::CloudsType& CloudsType::setCloudCover(const uci::type::WeatherCloudCoverEnum& accessor) {
  enableCloudCover();
  if (&accessor != cloudCover_Accessor.get()) {
    cloudCover_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CloudsType& CloudsType::setCloudCover(const uci::type::WeatherCloudCoverEnum::EnumerationItem value) {
  enableCloudCover().setValue(value);
  return *this;
}

bool CloudsType::hasCloudCover() const noexcept {
  return static_cast<bool>(cloudCover_Accessor);
}

uci::type::WeatherCloudCoverEnum& CloudsType::enableCloudCover(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherCloudCoverEnum : type};
  if ((!cloudCover_Accessor) || (cloudCover_Accessor->getAccessorType() != requestedType)) {
    cloudCover_Accessor = WeatherCloudCoverEnum::create(requestedType);
    if (!cloudCover_Accessor) {
      throw uci::base::UCIException("Error in enableCloudCover(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *cloudCover_Accessor;
}

uci::type::CloudsType& CloudsType::clearCloudCover() noexcept {
  cloudCover_Accessor.reset();
  return *this;
}

uci::type::OktaTypeValue CloudsType::getCloudCoverAmplification() const {
  if (cloudCoverAmplification_Accessor) {
    return *cloudCoverAmplification_Accessor;
  }
  throw uci::base::UCIException("Error in getCloudCoverAmplification(): An attempt was made to get an optional field that was not enabled, call hasCloudCoverAmplification() to determine if it is safe to call getCloudCoverAmplification()");
}

uci::type::CloudsType& CloudsType::setCloudCoverAmplification(uci::type::OktaTypeValue value) {
  cloudCoverAmplification_Accessor = value;
  return *this;
}

bool CloudsType::hasCloudCoverAmplification() const noexcept {
  return cloudCoverAmplification_Accessor.has_value();
}

uci::type::CloudsType& CloudsType::clearCloudCoverAmplification() noexcept {
  cloudCoverAmplification_Accessor.reset();
  return *this;
}

uci::type::AltitudeTypeValue CloudsType::getCloudFloor() const {
  if (cloudFloor_Accessor) {
    return *cloudFloor_Accessor;
  }
  throw uci::base::UCIException("Error in getCloudFloor(): An attempt was made to get an optional field that was not enabled, call hasCloudFloor() to determine if it is safe to call getCloudFloor()");
}

uci::type::CloudsType& CloudsType::setCloudFloor(uci::type::AltitudeTypeValue value) {
  cloudFloor_Accessor = value;
  return *this;
}

bool CloudsType::hasCloudFloor() const noexcept {
  return cloudFloor_Accessor.has_value();
}

uci::type::CloudsType& CloudsType::clearCloudFloor() noexcept {
  cloudFloor_Accessor.reset();
  return *this;
}

uci::type::AltitudeTypeValue CloudsType::getCloudCeiling() const {
  if (cloudCeiling_Accessor) {
    return *cloudCeiling_Accessor;
  }
  throw uci::base::UCIException("Error in getCloudCeiling(): An attempt was made to get an optional field that was not enabled, call hasCloudCeiling() to determine if it is safe to call getCloudCeiling()");
}

uci::type::CloudsType& CloudsType::setCloudCeiling(uci::type::AltitudeTypeValue value) {
  cloudCeiling_Accessor = value;
  return *this;
}

bool CloudsType::hasCloudCeiling() const noexcept {
  return cloudCeiling_Accessor.has_value();
}

uci::type::CloudsType& CloudsType::clearCloudCeiling() noexcept {
  cloudCeiling_Accessor.reset();
  return *this;
}

std::unique_ptr<CloudsType> CloudsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cloudsType : type};
  return (requestedType == uci::type::accessorType::cloudsType) ? boost::make_unique<CloudsType>() : nullptr;
}

/**  */
namespace CloudsType_Names {

constexpr const char* Extern_Type_Name{"CloudsType"};
constexpr const char* CloudCover_Name{"CloudCover"};
constexpr const char* CloudCoverAmplification_Name{"CloudCoverAmplification"};
constexpr const char* CloudFloor_Name{"CloudFloor"};
constexpr const char* CloudCeiling_Name{"CloudCeiling"};

} // namespace CloudsType_Names

void CloudsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CloudsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CloudsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CloudsType_Names::CloudCover_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCloudCover().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CloudsType_Names::CloudCoverAmplification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCloudCoverAmplification(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CloudsType_Names::CloudFloor_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCloudFloor(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CloudsType_Names::CloudCeiling_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCloudCeiling(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string CloudsType::serialize(const uci::type::CloudsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CloudsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CloudsType_Names::Extern_Type_Name);
  }
  if (accessor.hasCloudCover()) {
    WeatherCloudCoverEnum::serialize(accessor.getCloudCover(), node, CloudsType_Names::CloudCover_Name, false);
  }
  if (accessor.hasCloudCoverAmplification()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getCloudCoverAmplification(), node, CloudsType_Names::CloudCoverAmplification_Name);
  }
  if (accessor.hasCloudFloor()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCloudFloor(), node, CloudsType_Names::CloudFloor_Name);
  }
  if (accessor.hasCloudCeiling()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCloudCeiling(), node, CloudsType_Names::CloudCeiling_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CloudsType& CloudsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CloudsType>().release());
}

uci::type::CloudsType& CloudsType::create(const uci::type::CloudsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CloudsType> newAccessor{boost::make_unique<asb_uci::type::CloudsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CloudsType::destroy(uci::type::CloudsType& accessor) {
  delete dynamic_cast<asb_uci::type::CloudsType*>(&accessor);
}

} // namespace type

} // namespace uci

