/** @file AperturePointingOptionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AperturePointingOptionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BeamPointingReferenceType.h"
#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/FieldOfRegardType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AperturePointingOptionsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamPointingReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FieldOfRegardType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AperturePointingOptionsType::AperturePointingOptionsType() = default;

AperturePointingOptionsType::~AperturePointingOptionsType() = default;

void AperturePointingOptionsType::copy(const uci::type::AperturePointingOptionsType& accessor) {
  copyImpl(accessor, false);
}

void AperturePointingOptionsType::copyImpl(const uci::type::AperturePointingOptionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AperturePointingOptionsType&>(accessor);
    if (accessorImpl.fieldOfRegard_Accessor) {
      setFieldOfRegard(*(accessorImpl.fieldOfRegard_Accessor));
    } else {
      fieldOfRegard_Accessor.reset();
    }
    installationIndex_Accessor = (accessorImpl.installationIndex_Accessor ? accessorImpl.installationIndex_Accessor : boost::none);
    if (accessorImpl.requestBeamPointingReference_Accessor) {
      setRequestBeamPointingReference(*(accessorImpl.requestBeamPointingReference_Accessor));
    } else {
      requestBeamPointingReference_Accessor.reset();
    }
    if (accessorImpl.requestEntityReferenceID_Accessor) {
      setRequestEntityReferenceID(*(accessorImpl.requestEntityReferenceID_Accessor));
    } else {
      requestEntityReferenceID_Accessor.reset();
    }
  }
}

void AperturePointingOptionsType::reset() noexcept {
  fieldOfRegard_Accessor.reset();
  installationIndex_Accessor.reset();
  requestBeamPointingReference_Accessor.reset();
  requestEntityReferenceID_Accessor.reset();
}

uci::type::AperturePointingOptionsType::AperturePointingOptionsTypeChoice AperturePointingOptionsType::getAperturePointingOptionsTypeChoiceOrdinal() const noexcept {
  if (fieldOfRegard_Accessor) {
    return APERTUREPOINTINGOPTIONSTYPE_CHOICE_FIELDOFREGARD;
  }
  if (installationIndex_Accessor) {
    return APERTUREPOINTINGOPTIONSTYPE_CHOICE_INSTALLATIONINDEX;
  }
  if (requestBeamPointingReference_Accessor) {
    return APERTUREPOINTINGOPTIONSTYPE_CHOICE_REQUESTBEAMPOINTINGREFERENCE;
  }
  if (requestEntityReferenceID_Accessor) {
    return APERTUREPOINTINGOPTIONSTYPE_CHOICE_REQUESTENTITYREFERENCEID;
  }
  return APERTUREPOINTINGOPTIONSTYPE_CHOICE_NONE;
}

uci::type::AperturePointingOptionsType& AperturePointingOptionsType::setAperturePointingOptionsTypeChoiceOrdinal(uci::type::AperturePointingOptionsType::AperturePointingOptionsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case APERTUREPOINTINGOPTIONSTYPE_CHOICE_FIELDOFREGARD:
      chooseFieldOfRegard("setAperturePointingOptionsTypeChoiceOrdinal", type);
      break;
    case APERTUREPOINTINGOPTIONSTYPE_CHOICE_INSTALLATIONINDEX:
      chooseInstallationIndex();
      break;
    case APERTUREPOINTINGOPTIONSTYPE_CHOICE_REQUESTBEAMPOINTINGREFERENCE:
      chooseRequestBeamPointingReference("setAperturePointingOptionsTypeChoiceOrdinal", type);
      break;
    case APERTUREPOINTINGOPTIONSTYPE_CHOICE_REQUESTENTITYREFERENCEID:
      chooseRequestEntityReferenceID("setAperturePointingOptionsTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setAperturePointingOptionsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::FieldOfRegardType& AperturePointingOptionsType::getFieldOfRegard_() const {
  if (fieldOfRegard_Accessor) {
    return *fieldOfRegard_Accessor;
  }
  throw uci::base::UCIException("Error in getFieldOfRegard(): Unable to get FieldOfRegard, field not selected");
}

const uci::type::FieldOfRegardType& AperturePointingOptionsType::getFieldOfRegard() const {
  return getFieldOfRegard_();
}

uci::type::FieldOfRegardType& AperturePointingOptionsType::getFieldOfRegard() {
  return getFieldOfRegard_();
}

uci::type::AperturePointingOptionsType& AperturePointingOptionsType::setFieldOfRegard(const uci::type::FieldOfRegardType& accessor) {
  chooseFieldOfRegard();
  if (&accessor != fieldOfRegard_Accessor.get()) {
    fieldOfRegard_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AperturePointingOptionsType::isFieldOfRegard() const noexcept {
  return static_cast<bool>(fieldOfRegard_Accessor);
}

uci::type::FieldOfRegardType& AperturePointingOptionsType::chooseFieldOfRegard(const std::string& method, uci::base::accessorType::AccessorType type) {
  installationIndex_Accessor.reset();
  requestBeamPointingReference_Accessor.reset();
  requestEntityReferenceID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fieldOfRegardType : type};
  if ((!fieldOfRegard_Accessor) || (fieldOfRegard_Accessor->getAccessorType() != requestedType)) {
    fieldOfRegard_Accessor = FieldOfRegardType::create(type);
    if (!fieldOfRegard_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fieldOfRegard_Accessor;
}

uci::type::FieldOfRegardType& AperturePointingOptionsType::chooseFieldOfRegard(uci::base::accessorType::AccessorType type) {
  return chooseFieldOfRegard("chooseFieldOfRegard", type);
}

xs::UnsignedInt AperturePointingOptionsType::getInstallationIndex() const {
  if (installationIndex_Accessor) {
    return *installationIndex_Accessor;
  }
  throw uci::base::UCIException("Error in getInstallationIndex(): Unable to get InstallationIndex, field not selected");
}

uci::type::AperturePointingOptionsType& AperturePointingOptionsType::setInstallationIndex(xs::UnsignedInt value) {
  chooseInstallationIndex();
  installationIndex_Accessor = value;
  return *this;
}

bool AperturePointingOptionsType::isInstallationIndex() const noexcept {
  return static_cast<bool>(installationIndex_Accessor);
}

void AperturePointingOptionsType::chooseInstallationIndex() {
  fieldOfRegard_Accessor.reset();
  requestBeamPointingReference_Accessor.reset();
  requestEntityReferenceID_Accessor.reset();
  if (!installationIndex_Accessor) {
    installationIndex_Accessor = boost::optional<asb_xs::UnsignedInt>();
  }
}

uci::type::BeamPointingReferenceType& AperturePointingOptionsType::getRequestBeamPointingReference_() const {
  if (requestBeamPointingReference_Accessor) {
    return *requestBeamPointingReference_Accessor;
  }
  throw uci::base::UCIException("Error in getRequestBeamPointingReference(): Unable to get RequestBeamPointingReference, field not selected");
}

const uci::type::BeamPointingReferenceType& AperturePointingOptionsType::getRequestBeamPointingReference() const {
  return getRequestBeamPointingReference_();
}

uci::type::BeamPointingReferenceType& AperturePointingOptionsType::getRequestBeamPointingReference() {
  return getRequestBeamPointingReference_();
}

uci::type::AperturePointingOptionsType& AperturePointingOptionsType::setRequestBeamPointingReference(const uci::type::BeamPointingReferenceType& accessor) {
  chooseRequestBeamPointingReference(accessor.getAccessorType());
  if (&accessor != requestBeamPointingReference_Accessor.get()) {
    requestBeamPointingReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AperturePointingOptionsType::isRequestBeamPointingReference() const noexcept {
  return static_cast<bool>(requestBeamPointingReference_Accessor);
}

uci::type::BeamPointingReferenceType& AperturePointingOptionsType::chooseRequestBeamPointingReference(const std::string& method, uci::base::accessorType::AccessorType type) {
  fieldOfRegard_Accessor.reset();
  installationIndex_Accessor.reset();
  requestEntityReferenceID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::beamPointingReferenceType : type};
  if ((!requestBeamPointingReference_Accessor) || (requestBeamPointingReference_Accessor->getAccessorType() != requestedType)) {
    requestBeamPointingReference_Accessor = BeamPointingReferenceType::create(type);
    if (!requestBeamPointingReference_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requestBeamPointingReference_Accessor;
}

uci::type::BeamPointingReferenceType& AperturePointingOptionsType::chooseRequestBeamPointingReference(uci::base::accessorType::AccessorType type) {
  return chooseRequestBeamPointingReference("chooseRequestBeamPointingReference", type);
}

uci::type::EntityID_Type& AperturePointingOptionsType::getRequestEntityReferenceID_() const {
  if (requestEntityReferenceID_Accessor) {
    return *requestEntityReferenceID_Accessor;
  }
  throw uci::base::UCIException("Error in getRequestEntityReferenceID(): Unable to get RequestEntityReferenceID, field not selected");
}

const uci::type::EntityID_Type& AperturePointingOptionsType::getRequestEntityReferenceID() const {
  return getRequestEntityReferenceID_();
}

uci::type::EntityID_Type& AperturePointingOptionsType::getRequestEntityReferenceID() {
  return getRequestEntityReferenceID_();
}

uci::type::AperturePointingOptionsType& AperturePointingOptionsType::setRequestEntityReferenceID(const uci::type::EntityID_Type& accessor) {
  chooseRequestEntityReferenceID("setRequestEntityReferenceID", accessor.getAccessorType());
  if (&accessor != requestEntityReferenceID_Accessor.get()) {
    requestEntityReferenceID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AperturePointingOptionsType::isRequestEntityReferenceID() const noexcept {
  return static_cast<bool>(requestEntityReferenceID_Accessor);
}

uci::type::EntityID_Type& AperturePointingOptionsType::chooseRequestEntityReferenceID(const std::string& method, uci::base::accessorType::AccessorType type) {
  fieldOfRegard_Accessor.reset();
  installationIndex_Accessor.reset();
  requestBeamPointingReference_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!requestEntityReferenceID_Accessor) || (requestEntityReferenceID_Accessor->getAccessorType() != requestedType)) {
    requestEntityReferenceID_Accessor = EntityID_Type::create(type);
    if (!requestEntityReferenceID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requestEntityReferenceID_Accessor;
}

uci::type::EntityID_Type& AperturePointingOptionsType::chooseRequestEntityReferenceID(uci::base::accessorType::AccessorType type) {
  return chooseRequestEntityReferenceID("chooseRequestEntityReferenceID", type);
}

std::unique_ptr<AperturePointingOptionsType> AperturePointingOptionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aperturePointingOptionsType : type};
  return (requestedType == uci::type::accessorType::aperturePointingOptionsType) ? boost::make_unique<AperturePointingOptionsType>() : nullptr;
}

/**  */
namespace AperturePointingOptionsType_Names {

constexpr const char* Extern_Type_Name{"AperturePointingOptionsType"};
constexpr const char* FieldOfRegard_Name{"FieldOfRegard"};
constexpr const char* InstallationIndex_Name{"InstallationIndex"};
constexpr const char* RequestBeamPointingReference_Name{"RequestBeamPointingReference"};
constexpr const char* RequestEntityReferenceID_Name{"RequestEntityReferenceID"};

} // namespace AperturePointingOptionsType_Names

void AperturePointingOptionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AperturePointingOptionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AperturePointingOptionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AperturePointingOptionsType_Names::FieldOfRegard_Name) {
      FieldOfRegardType::deserialize(valueType.second, accessor.chooseFieldOfRegard(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AperturePointingOptionsType_Names::InstallationIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInstallationIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + AperturePointingOptionsType_Names::RequestBeamPointingReference_Name) {
      BeamPointingReferenceType::deserialize(valueType.second, accessor.chooseRequestBeamPointingReference(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AperturePointingOptionsType_Names::RequestEntityReferenceID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseRequestEntityReferenceID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string AperturePointingOptionsType::serialize(const uci::type::AperturePointingOptionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AperturePointingOptionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AperturePointingOptionsType_Names::Extern_Type_Name);
  }
  if (accessor.isFieldOfRegard()) {
    FieldOfRegardType::serialize(accessor.getFieldOfRegard(), node, AperturePointingOptionsType_Names::FieldOfRegard_Name);
  } else if (accessor.isInstallationIndex()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getInstallationIndex(), node, AperturePointingOptionsType_Names::InstallationIndex_Name);
  } else if (accessor.isRequestBeamPointingReference()) {
    BeamPointingReferenceType::serialize(accessor.getRequestBeamPointingReference(), node, AperturePointingOptionsType_Names::RequestBeamPointingReference_Name);
  } else if (accessor.isRequestEntityReferenceID()) {
    EntityID_Type::serialize(accessor.getRequestEntityReferenceID(), node, AperturePointingOptionsType_Names::RequestEntityReferenceID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AperturePointingOptionsType& AperturePointingOptionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AperturePointingOptionsType>().release());
}

uci::type::AperturePointingOptionsType& AperturePointingOptionsType::create(const uci::type::AperturePointingOptionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AperturePointingOptionsType> newAccessor{boost::make_unique<asb_uci::type::AperturePointingOptionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AperturePointingOptionsType::destroy(uci::type::AperturePointingOptionsType& accessor) {
  delete dynamic_cast<asb_uci::type::AperturePointingOptionsType*>(&accessor);
}

} // namespace type

} // namespace uci

