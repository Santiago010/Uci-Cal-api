/** @file IP_ConnectionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/IP_ConnectionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/IP_ConnectionChoiceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IP_ConnectionChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IP_ConnectionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IP_ConnectionType::IP_ConnectionType() = default;

IP_ConnectionType::~IP_ConnectionType() = default;

void IP_ConnectionType::copy(const uci::type::IP_ConnectionType& accessor) {
  copyImpl(accessor, false);
}

void IP_ConnectionType::copyImpl(const uci::type::IP_ConnectionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IP_ConnectionType&>(accessor);
    if (accessorImpl.server_Accessor) {
      setServer(*(accessorImpl.server_Accessor));
    } else {
      server_Accessor.reset();
    }
    if (accessorImpl.client_Accessor) {
      setClient(*(accessorImpl.client_Accessor));
    } else {
      client_Accessor.reset();
    }
    if (accessorImpl.multicast_Accessor) {
      setMulticast(*(accessorImpl.multicast_Accessor));
    } else {
      multicast_Accessor.reset();
    }
  }
}

void IP_ConnectionType::reset() noexcept {
  server_Accessor.reset();
  client_Accessor.reset();
  multicast_Accessor.reset();
}

uci::type::IP_ConnectionType::IP_ConnectionTypeChoice IP_ConnectionType::getIP_ConnectionTypeChoiceOrdinal() const noexcept {
  if (server_Accessor) {
    return IP_CONNECTIONTYPE_CHOICE_SERVER;
  }
  if (client_Accessor) {
    return IP_CONNECTIONTYPE_CHOICE_CLIENT;
  }
  if (multicast_Accessor) {
    return IP_CONNECTIONTYPE_CHOICE_MULTICAST;
  }
  return IP_CONNECTIONTYPE_CHOICE_NONE;
}

uci::type::IP_ConnectionType& IP_ConnectionType::setIP_ConnectionTypeChoiceOrdinal(uci::type::IP_ConnectionType::IP_ConnectionTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case IP_CONNECTIONTYPE_CHOICE_SERVER:
      chooseServer("setIP_ConnectionTypeChoiceOrdinal", type);
      break;
    case IP_CONNECTIONTYPE_CHOICE_CLIENT:
      chooseClient("setIP_ConnectionTypeChoiceOrdinal", type);
      break;
    case IP_CONNECTIONTYPE_CHOICE_MULTICAST:
      chooseMulticast("setIP_ConnectionTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setIP_ConnectionTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::IP_ConnectionChoiceType& IP_ConnectionType::getServer_() const {
  if (server_Accessor) {
    return *server_Accessor;
  }
  throw uci::base::UCIException("Error in getServer(): Unable to get Server, field not selected");
}

const uci::type::IP_ConnectionChoiceType& IP_ConnectionType::getServer() const {
  return getServer_();
}

uci::type::IP_ConnectionChoiceType& IP_ConnectionType::getServer() {
  return getServer_();
}

uci::type::IP_ConnectionType& IP_ConnectionType::setServer(const uci::type::IP_ConnectionChoiceType& accessor) {
  chooseServer(accessor.getAccessorType());
  if (&accessor != server_Accessor.get()) {
    server_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IP_ConnectionType::isServer() const noexcept {
  return static_cast<bool>(server_Accessor);
}

uci::type::IP_ConnectionChoiceType& IP_ConnectionType::chooseServer(const std::string& method, uci::base::accessorType::AccessorType type) {
  client_Accessor.reset();
  multicast_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iP_ConnectionChoiceType : type};
  if ((!server_Accessor) || (server_Accessor->getAccessorType() != requestedType)) {
    server_Accessor = IP_ConnectionChoiceType::create(type);
    if (!server_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *server_Accessor;
}

uci::type::IP_ConnectionChoiceType& IP_ConnectionType::chooseServer(uci::base::accessorType::AccessorType type) {
  return chooseServer("chooseServer", type);
}

uci::type::IP_ConnectionChoiceType& IP_ConnectionType::getClient_() const {
  if (client_Accessor) {
    return *client_Accessor;
  }
  throw uci::base::UCIException("Error in getClient(): Unable to get Client, field not selected");
}

const uci::type::IP_ConnectionChoiceType& IP_ConnectionType::getClient() const {
  return getClient_();
}

uci::type::IP_ConnectionChoiceType& IP_ConnectionType::getClient() {
  return getClient_();
}

uci::type::IP_ConnectionType& IP_ConnectionType::setClient(const uci::type::IP_ConnectionChoiceType& accessor) {
  chooseClient(accessor.getAccessorType());
  if (&accessor != client_Accessor.get()) {
    client_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IP_ConnectionType::isClient() const noexcept {
  return static_cast<bool>(client_Accessor);
}

uci::type::IP_ConnectionChoiceType& IP_ConnectionType::chooseClient(const std::string& method, uci::base::accessorType::AccessorType type) {
  server_Accessor.reset();
  multicast_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iP_ConnectionChoiceType : type};
  if ((!client_Accessor) || (client_Accessor->getAccessorType() != requestedType)) {
    client_Accessor = IP_ConnectionChoiceType::create(type);
    if (!client_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *client_Accessor;
}

uci::type::IP_ConnectionChoiceType& IP_ConnectionType::chooseClient(uci::base::accessorType::AccessorType type) {
  return chooseClient("chooseClient", type);
}

uci::type::IP_ConnectionChoiceType& IP_ConnectionType::getMulticast_() const {
  if (multicast_Accessor) {
    return *multicast_Accessor;
  }
  throw uci::base::UCIException("Error in getMulticast(): Unable to get Multicast, field not selected");
}

const uci::type::IP_ConnectionChoiceType& IP_ConnectionType::getMulticast() const {
  return getMulticast_();
}

uci::type::IP_ConnectionChoiceType& IP_ConnectionType::getMulticast() {
  return getMulticast_();
}

uci::type::IP_ConnectionType& IP_ConnectionType::setMulticast(const uci::type::IP_ConnectionChoiceType& accessor) {
  chooseMulticast(accessor.getAccessorType());
  if (&accessor != multicast_Accessor.get()) {
    multicast_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IP_ConnectionType::isMulticast() const noexcept {
  return static_cast<bool>(multicast_Accessor);
}

uci::type::IP_ConnectionChoiceType& IP_ConnectionType::chooseMulticast(const std::string& method, uci::base::accessorType::AccessorType type) {
  server_Accessor.reset();
  client_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iP_ConnectionChoiceType : type};
  if ((!multicast_Accessor) || (multicast_Accessor->getAccessorType() != requestedType)) {
    multicast_Accessor = IP_ConnectionChoiceType::create(type);
    if (!multicast_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *multicast_Accessor;
}

uci::type::IP_ConnectionChoiceType& IP_ConnectionType::chooseMulticast(uci::base::accessorType::AccessorType type) {
  return chooseMulticast("chooseMulticast", type);
}

std::unique_ptr<IP_ConnectionType> IP_ConnectionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iP_ConnectionType : type};
  return (requestedType == uci::type::accessorType::iP_ConnectionType) ? boost::make_unique<IP_ConnectionType>() : nullptr;
}

/**  */
namespace IP_ConnectionType_Names {

constexpr const char* Extern_Type_Name{"IP_ConnectionType"};
constexpr const char* Server_Name{"Server"};
constexpr const char* Client_Name{"Client"};
constexpr const char* Multicast_Name{"Multicast"};

} // namespace IP_ConnectionType_Names

void IP_ConnectionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IP_ConnectionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IP_ConnectionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IP_ConnectionType_Names::Server_Name) {
      IP_ConnectionChoiceType::deserialize(valueType.second, accessor.chooseServer(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IP_ConnectionType_Names::Client_Name) {
      IP_ConnectionChoiceType::deserialize(valueType.second, accessor.chooseClient(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IP_ConnectionType_Names::Multicast_Name) {
      IP_ConnectionChoiceType::deserialize(valueType.second, accessor.chooseMulticast(), nodeName, nsPrefix);
    }
  }
}

std::string IP_ConnectionType::serialize(const uci::type::IP_ConnectionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IP_ConnectionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IP_ConnectionType_Names::Extern_Type_Name);
  }
  if (accessor.isServer()) {
    IP_ConnectionChoiceType::serialize(accessor.getServer(), node, IP_ConnectionType_Names::Server_Name);
  } else if (accessor.isClient()) {
    IP_ConnectionChoiceType::serialize(accessor.getClient(), node, IP_ConnectionType_Names::Client_Name);
  } else if (accessor.isMulticast()) {
    IP_ConnectionChoiceType::serialize(accessor.getMulticast(), node, IP_ConnectionType_Names::Multicast_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IP_ConnectionType& IP_ConnectionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IP_ConnectionType>().release());
}

uci::type::IP_ConnectionType& IP_ConnectionType::create(const uci::type::IP_ConnectionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IP_ConnectionType> newAccessor{boost::make_unique<asb_uci::type::IP_ConnectionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IP_ConnectionType::destroy(uci::type::IP_ConnectionType& accessor) {
  delete dynamic_cast<asb_uci::type::IP_ConnectionType*>(&accessor);
}

} // namespace type

} // namespace uci

