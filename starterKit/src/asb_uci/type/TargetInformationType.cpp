/** @file TargetInformationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/TargetInformationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/TargetDefensesEnum.h"
#include "asb_uci/type/TargetTypeEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/TargetDefensesEnum.h"
#include "uci/type/TargetInformationType.h"
#include "uci/type/TargetTypeEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TargetInformationType::TargetInformationType() = default;

TargetInformationType::~TargetInformationType() = default;

void TargetInformationType::copy(const uci::type::TargetInformationType& accessor) {
  copyImpl(accessor, false);
}

void TargetInformationType::copyImpl(const uci::type::TargetInformationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const TargetInformationType&>(accessor);
    if (accessorImpl.hasNumberOfDMPIs()) {
      setNumberOfDMPIs(accessorImpl.getNumberOfDMPIs());
    } else {
      clearNumberOfDMPIs();
    }
    if (accessorImpl.targetType_Accessor) {
      setTargetType(*(accessorImpl.targetType_Accessor));
    } else {
      targetType_Accessor.reset();
    }
    if (accessorImpl.targetDefenses_Accessor) {
      setTargetDefenses(*(accessorImpl.targetDefenses_Accessor));
    } else {
      targetDefenses_Accessor.reset();
    }
  }
}

void TargetInformationType::reset() noexcept {
  clearNumberOfDMPIs();
  targetType_Accessor.reset();
  targetDefenses_Accessor.reset();
}

xs::UnsignedInt TargetInformationType::getNumberOfDMPIs() const {
  if (numberOfDMPIs_Accessor) {
    return *numberOfDMPIs_Accessor;
  }
  throw uci::base::UCIException("Error in getNumberOfDMPIs(): An attempt was made to get an optional field that was not enabled, call hasNumberOfDMPIs() to determine if it is safe to call getNumberOfDMPIs()");
}

uci::type::TargetInformationType& TargetInformationType::setNumberOfDMPIs(xs::UnsignedInt value) {
  numberOfDMPIs_Accessor = value;
  return *this;
}

bool TargetInformationType::hasNumberOfDMPIs() const noexcept {
  return numberOfDMPIs_Accessor.has_value();
}

uci::type::TargetInformationType& TargetInformationType::clearNumberOfDMPIs() noexcept {
  numberOfDMPIs_Accessor.reset();
  return *this;
}

uci::type::TargetTypeEnum& TargetInformationType::getTargetType_() const {
  if (targetType_Accessor) {
    return *targetType_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetType(): An attempt was made to get an optional field that was not enabled, call hasTargetType() to determine if it is safe to call getTargetType()");
}

const uci::type::TargetTypeEnum& TargetInformationType::getTargetType() const {
  return getTargetType_();
}

uci::type::TargetTypeEnum& TargetInformationType::getTargetType() {
  return getTargetType_();
}

uci::type::TargetInformationType& TargetInformationType::setTargetType(const uci::type::TargetTypeEnum& accessor) {
  enableTargetType();
  if (&accessor != targetType_Accessor.get()) {
    targetType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TargetInformationType& TargetInformationType::setTargetType(const uci::type::TargetTypeEnum::EnumerationItem value) {
  enableTargetType().setValue(value);
  return *this;
}

bool TargetInformationType::hasTargetType() const noexcept {
  return static_cast<bool>(targetType_Accessor);
}

uci::type::TargetTypeEnum& TargetInformationType::enableTargetType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::targetTypeEnum : type};
  if ((!targetType_Accessor) || (targetType_Accessor->getAccessorType() != requestedType)) {
    targetType_Accessor = TargetTypeEnum::create(requestedType);
    if (!targetType_Accessor) {
      throw uci::base::UCIException("Error in enableTargetType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *targetType_Accessor;
}

uci::type::TargetInformationType& TargetInformationType::clearTargetType() noexcept {
  targetType_Accessor.reset();
  return *this;
}

uci::type::TargetDefensesEnum& TargetInformationType::getTargetDefenses_() const {
  if (targetDefenses_Accessor) {
    return *targetDefenses_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetDefenses(): An attempt was made to get an optional field that was not enabled, call hasTargetDefenses() to determine if it is safe to call getTargetDefenses()");
}

const uci::type::TargetDefensesEnum& TargetInformationType::getTargetDefenses() const {
  return getTargetDefenses_();
}

uci::type::TargetDefensesEnum& TargetInformationType::getTargetDefenses() {
  return getTargetDefenses_();
}

uci::type::TargetInformationType& TargetInformationType::setTargetDefenses(const uci::type::TargetDefensesEnum& accessor) {
  enableTargetDefenses();
  if (&accessor != targetDefenses_Accessor.get()) {
    targetDefenses_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TargetInformationType& TargetInformationType::setTargetDefenses(const uci::type::TargetDefensesEnum::EnumerationItem value) {
  enableTargetDefenses().setValue(value);
  return *this;
}

bool TargetInformationType::hasTargetDefenses() const noexcept {
  return static_cast<bool>(targetDefenses_Accessor);
}

uci::type::TargetDefensesEnum& TargetInformationType::enableTargetDefenses(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::targetDefensesEnum : type};
  if ((!targetDefenses_Accessor) || (targetDefenses_Accessor->getAccessorType() != requestedType)) {
    targetDefenses_Accessor = TargetDefensesEnum::create(requestedType);
    if (!targetDefenses_Accessor) {
      throw uci::base::UCIException("Error in enableTargetDefenses(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *targetDefenses_Accessor;
}

uci::type::TargetInformationType& TargetInformationType::clearTargetDefenses() noexcept {
  targetDefenses_Accessor.reset();
  return *this;
}

std::unique_ptr<TargetInformationType> TargetInformationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::targetInformationType : type};
  return (requestedType == uci::type::accessorType::targetInformationType) ? boost::make_unique<TargetInformationType>() : nullptr;
}

/**  */
namespace TargetInformationType_Names {

constexpr const char* Extern_Type_Name{"TargetInformationType"};
constexpr const char* NumberOfDMPIs_Name{"NumberOfDMPIs"};
constexpr const char* TargetType_Name{"TargetType"};
constexpr const char* TargetDefenses_Name{"TargetDefenses"};

} // namespace TargetInformationType_Names

void TargetInformationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TargetInformationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TargetInformationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TargetInformationType_Names::NumberOfDMPIs_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfDMPIs(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + TargetInformationType_Names::TargetType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTargetType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + TargetInformationType_Names::TargetDefenses_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTargetDefenses().setValueFromName(*value);
      }
    }
  }
}

std::string TargetInformationType::serialize(const uci::type::TargetInformationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TargetInformationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, TargetInformationType_Names::Extern_Type_Name);
  }
  if (accessor.hasNumberOfDMPIs()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumberOfDMPIs(), node, TargetInformationType_Names::NumberOfDMPIs_Name);
  }
  if (accessor.hasTargetType()) {
    TargetTypeEnum::serialize(accessor.getTargetType(), node, TargetInformationType_Names::TargetType_Name, false);
  }
  if (accessor.hasTargetDefenses()) {
    TargetDefensesEnum::serialize(accessor.getTargetDefenses(), node, TargetInformationType_Names::TargetDefenses_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TargetInformationType& TargetInformationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TargetInformationType>().release());
}

uci::type::TargetInformationType& TargetInformationType::create(const uci::type::TargetInformationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TargetInformationType> newAccessor{boost::make_unique<asb_uci::type::TargetInformationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TargetInformationType::destroy(uci::type::TargetInformationType& accessor) {
  delete dynamic_cast<asb_uci::type::TargetInformationType*>(&accessor);
}

} // namespace type

} // namespace uci

