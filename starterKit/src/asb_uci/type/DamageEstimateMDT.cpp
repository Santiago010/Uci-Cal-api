/** @file DamageEstimateMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DamageEstimateMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DMPI_ViolationType.h"
#include "../../../include/asb_uci/type/DamageCategoryEnum.h"
#include "../../../include/asb_uci/type/DamageEstimateDetailsType.h"
#include "../../../include/asb_uci/type/DamageEstimateID_Type.h"
#include "../../../include/asb_uci/type/DamageInformationWeatherSourceType.h"
#include "../../../include/asb_uci/type/DamageSummaryType.h"
#include "../../../include/asb_uci/type/Point3D_Type.h"
#include "../../../include/asb_uci/type/TaskID_Type.h"
#include "../../../include/asb_uci/type/VisibleString1024Type.h"
#include "../../../include/asb_uci/type/ZoneType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_ViolationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageCategoryEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageEstimateDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageEstimateID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageEstimateMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageInformationWeatherSourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageSummaryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point3D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TaskID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString1024Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DamageEstimateMDT::DamageEstimateMDT()
  : damageEstimateID_Accessor{boost::make_unique<DamageEstimateID_Type>()},
    estimateType_Accessor{boost::make_unique<DamageCategoryEnum>()},
    taskID_Accessor{boost::make_unique<TaskID_Type>()},
    violation_Accessor{boost::make_unique<Violation>(0, SIZE_MAX)} {
}

DamageEstimateMDT::~DamageEstimateMDT() = default;

void DamageEstimateMDT::copy(const uci::type::DamageEstimateMDT& accessor) {
  copyImpl(accessor, false);
}

void DamageEstimateMDT::copyImpl(const uci::type::DamageEstimateMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DamageEstimateMDT&>(accessor);
    setDamageEstimateID(*(accessorImpl.damageEstimateID_Accessor));
    setEstimateType(*(accessorImpl.estimateType_Accessor));
    setTaskID(*(accessorImpl.taskID_Accessor));
    if (accessorImpl.releasePoint_Accessor) {
      setReleasePoint(*(accessorImpl.releasePoint_Accessor));
    } else {
      releasePoint_Accessor.reset();
    }
    setCompletionTime(accessorImpl.completionTime_Accessor);
    if (accessorImpl.estimateZone_Accessor) {
      setEstimateZone(*(accessorImpl.estimateZone_Accessor));
    } else {
      estimateZone_Accessor.reset();
    }
    setReportingThreshold(accessorImpl.reportingThreshold_Accessor);
    if (accessorImpl.details_Accessor) {
      setDetails(*(accessorImpl.details_Accessor));
    } else {
      details_Accessor.reset();
    }
    setViolation(*(accessorImpl.violation_Accessor));
    if (accessorImpl.summary_Accessor) {
      setSummary(*(accessorImpl.summary_Accessor));
    } else {
      summary_Accessor.reset();
    }
    if (accessorImpl.estimateNarrative_Accessor) {
      setEstimateNarrative(*(accessorImpl.estimateNarrative_Accessor));
    } else {
      estimateNarrative_Accessor.reset();
    }
    if (accessorImpl.informationSource_Accessor) {
      setInformationSource(*(accessorImpl.informationSource_Accessor));
    } else {
      informationSource_Accessor.reset();
    }
  }
}

void DamageEstimateMDT::reset() noexcept {
  damageEstimateID_Accessor->reset();
  estimateType_Accessor->reset();
  taskID_Accessor->reset();
  releasePoint_Accessor.reset();
  completionTime_Accessor = 0;
  estimateZone_Accessor.reset();
  reportingThreshold_Accessor = 0.0;
  details_Accessor.reset();
  violation_Accessor->reset();
  summary_Accessor.reset();
  estimateNarrative_Accessor.reset();
  informationSource_Accessor.reset();
}

const uci::type::DamageEstimateID_Type& DamageEstimateMDT::getDamageEstimateID() const {
  return *damageEstimateID_Accessor;
}

uci::type::DamageEstimateID_Type& DamageEstimateMDT::getDamageEstimateID() {
  return *damageEstimateID_Accessor;
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setDamageEstimateID(const uci::type::DamageEstimateID_Type& accessor) {
  if (&accessor != damageEstimateID_Accessor.get()) {
    damageEstimateID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DamageCategoryEnum& DamageEstimateMDT::getEstimateType() const {
  return *estimateType_Accessor;
}

uci::type::DamageCategoryEnum& DamageEstimateMDT::getEstimateType() {
  return *estimateType_Accessor;
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setEstimateType(const uci::type::DamageCategoryEnum& accessor) {
  if (&accessor != estimateType_Accessor.get()) {
    estimateType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setEstimateType(uci::type::DamageCategoryEnum::EnumerationItem value) {
  estimateType_Accessor->setValue(value);
  return *this;
}


const uci::type::TaskID_Type& DamageEstimateMDT::getTaskID() const {
  return *taskID_Accessor;
}

uci::type::TaskID_Type& DamageEstimateMDT::getTaskID() {
  return *taskID_Accessor;
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setTaskID(const uci::type::TaskID_Type& accessor) {
  if (&accessor != taskID_Accessor.get()) {
    taskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::Point3D_Type& DamageEstimateMDT::getReleasePoint_() const {
  if (releasePoint_Accessor) {
    return *releasePoint_Accessor;
  }
  throw uci::base::UCIException("Error in getReleasePoint(): An attempt was made to get an optional field that was not enabled, call hasReleasePoint() to determine if it is safe to call getReleasePoint()");
}

const uci::type::Point3D_Type& DamageEstimateMDT::getReleasePoint() const {
  return getReleasePoint_();
}

uci::type::Point3D_Type& DamageEstimateMDT::getReleasePoint() {
  return getReleasePoint_();
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setReleasePoint(const uci::type::Point3D_Type& accessor) {
  enableReleasePoint(accessor.getAccessorType());
  if (&accessor != releasePoint_Accessor.get()) {
    releasePoint_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DamageEstimateMDT::hasReleasePoint() const noexcept {
  return static_cast<bool>(releasePoint_Accessor);
}

uci::type::Point3D_Type& DamageEstimateMDT::enableReleasePoint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!releasePoint_Accessor) || (releasePoint_Accessor->getAccessorType() != requestedType)) {
    releasePoint_Accessor = Point3D_Type::create(requestedType);
    if (!releasePoint_Accessor) {
      throw uci::base::UCIException("Error in enableReleasePoint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *releasePoint_Accessor;
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::clearReleasePoint() noexcept {
  releasePoint_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue DamageEstimateMDT::getCompletionTime() const {
  return completionTime_Accessor;
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setCompletionTime(uci::type::DateTimeTypeValue value) {
  completionTime_Accessor = value;
  return *this;
}


uci::type::ZoneType& DamageEstimateMDT::getEstimateZone_() const {
  if (estimateZone_Accessor) {
    return *estimateZone_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimateZone(): An attempt was made to get an optional field that was not enabled, call hasEstimateZone() to determine if it is safe to call getEstimateZone()");
}

const uci::type::ZoneType& DamageEstimateMDT::getEstimateZone() const {
  return getEstimateZone_();
}

uci::type::ZoneType& DamageEstimateMDT::getEstimateZone() {
  return getEstimateZone_();
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setEstimateZone(const uci::type::ZoneType& accessor) {
  enableEstimateZone(accessor.getAccessorType());
  if (&accessor != estimateZone_Accessor.get()) {
    estimateZone_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DamageEstimateMDT::hasEstimateZone() const noexcept {
  return static_cast<bool>(estimateZone_Accessor);
}

uci::type::ZoneType& DamageEstimateMDT::enableEstimateZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!estimateZone_Accessor) || (estimateZone_Accessor->getAccessorType() != requestedType)) {
    estimateZone_Accessor = ZoneType::create(requestedType);
    if (!estimateZone_Accessor) {
      throw uci::base::UCIException("Error in enableEstimateZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *estimateZone_Accessor;
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::clearEstimateZone() noexcept {
  estimateZone_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue DamageEstimateMDT::getReportingThreshold() const {
  return reportingThreshold_Accessor;
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setReportingThreshold(uci::type::PercentTypeValue value) {
  reportingThreshold_Accessor = value;
  return *this;
}


uci::type::DamageEstimateDetailsType& DamageEstimateMDT::getDetails_() const {
  if (details_Accessor) {
    return *details_Accessor;
  }
  throw uci::base::UCIException("Error in getDetails(): An attempt was made to get an optional field that was not enabled, call hasDetails() to determine if it is safe to call getDetails()");
}

const uci::type::DamageEstimateDetailsType& DamageEstimateMDT::getDetails() const {
  return getDetails_();
}

uci::type::DamageEstimateDetailsType& DamageEstimateMDT::getDetails() {
  return getDetails_();
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setDetails(const uci::type::DamageEstimateDetailsType& accessor) {
  enableDetails();
  if (&accessor != details_Accessor.get()) {
    details_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageEstimateMDT::hasDetails() const noexcept {
  return static_cast<bool>(details_Accessor);
}

uci::type::DamageEstimateDetailsType& DamageEstimateMDT::enableDetails(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageEstimateDetailsType : type};
  if ((!details_Accessor) || (details_Accessor->getAccessorType() != requestedType)) {
    details_Accessor = DamageEstimateDetailsType::create(requestedType);
    if (!details_Accessor) {
      throw uci::base::UCIException("Error in enableDetails(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *details_Accessor;
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::clearDetails() noexcept {
  details_Accessor.reset();
  return *this;
}

const uci::type::DamageEstimateMDT::Violation& DamageEstimateMDT::getViolation() const {
  return *violation_Accessor;
}

uci::type::DamageEstimateMDT::Violation& DamageEstimateMDT::getViolation() {
  return *violation_Accessor;
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setViolation(const uci::type::DamageEstimateMDT::Violation& accessor) {
  if (&accessor != violation_Accessor.get()) {
    violation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DamageSummaryType& DamageEstimateMDT::getSummary_() const {
  if (summary_Accessor) {
    return *summary_Accessor;
  }
  throw uci::base::UCIException("Error in getSummary(): An attempt was made to get an optional field that was not enabled, call hasSummary() to determine if it is safe to call getSummary()");
}

const uci::type::DamageSummaryType& DamageEstimateMDT::getSummary() const {
  return getSummary_();
}

uci::type::DamageSummaryType& DamageEstimateMDT::getSummary() {
  return getSummary_();
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setSummary(const uci::type::DamageSummaryType& accessor) {
  enableSummary();
  if (&accessor != summary_Accessor.get()) {
    summary_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageEstimateMDT::hasSummary() const noexcept {
  return static_cast<bool>(summary_Accessor);
}

uci::type::DamageSummaryType& DamageEstimateMDT::enableSummary(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageSummaryType : type};
  if ((!summary_Accessor) || (summary_Accessor->getAccessorType() != requestedType)) {
    summary_Accessor = DamageSummaryType::create(requestedType);
    if (!summary_Accessor) {
      throw uci::base::UCIException("Error in enableSummary(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *summary_Accessor;
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::clearSummary() noexcept {
  summary_Accessor.reset();
  return *this;
}

uci::type::VisibleString1024Type& DamageEstimateMDT::getEstimateNarrative_() const {
  if (estimateNarrative_Accessor) {
    return *estimateNarrative_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimateNarrative(): An attempt was made to get an optional field that was not enabled, call hasEstimateNarrative() to determine if it is safe to call getEstimateNarrative()");
}

const uci::type::VisibleString1024Type& DamageEstimateMDT::getEstimateNarrative() const {
  return getEstimateNarrative_();
}

uci::type::VisibleString1024Type& DamageEstimateMDT::getEstimateNarrative() {
  return getEstimateNarrative_();
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setEstimateNarrative(const uci::type::VisibleString1024Type& value) {
  return setEstimateNarrative(value.c_str());
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setEstimateNarrative(const std::string& value) {
  return setEstimateNarrative(value.c_str());
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setEstimateNarrative(const char* value) {
  enableEstimateNarrative().setStringValue(value);
  return *this;
}

bool DamageEstimateMDT::hasEstimateNarrative() const noexcept {
  return static_cast<bool>(estimateNarrative_Accessor);
}

uci::type::VisibleString1024Type& DamageEstimateMDT::enableEstimateNarrative(uci::base::accessorType::AccessorType type) {
  if (!estimateNarrative_Accessor) {
    estimateNarrative_Accessor = VisibleString1024Type::create(type);
  }
  return *estimateNarrative_Accessor;
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::clearEstimateNarrative() noexcept {
  estimateNarrative_Accessor.reset();
  return *this;
}

uci::type::DamageInformationWeatherSourceType& DamageEstimateMDT::getInformationSource_() const {
  if (informationSource_Accessor) {
    return *informationSource_Accessor;
  }
  throw uci::base::UCIException("Error in getInformationSource(): An attempt was made to get an optional field that was not enabled, call hasInformationSource() to determine if it is safe to call getInformationSource()");
}

const uci::type::DamageInformationWeatherSourceType& DamageEstimateMDT::getInformationSource() const {
  return getInformationSource_();
}

uci::type::DamageInformationWeatherSourceType& DamageEstimateMDT::getInformationSource() {
  return getInformationSource_();
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::setInformationSource(const uci::type::DamageInformationWeatherSourceType& accessor) {
  enableInformationSource();
  if (&accessor != informationSource_Accessor.get()) {
    informationSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageEstimateMDT::hasInformationSource() const noexcept {
  return static_cast<bool>(informationSource_Accessor);
}

uci::type::DamageInformationWeatherSourceType& DamageEstimateMDT::enableInformationSource(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageInformationWeatherSourceType : type};
  if ((!informationSource_Accessor) || (informationSource_Accessor->getAccessorType() != requestedType)) {
    informationSource_Accessor = DamageInformationWeatherSourceType::create(requestedType);
    if (!informationSource_Accessor) {
      throw uci::base::UCIException("Error in enableInformationSource(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *informationSource_Accessor;
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::clearInformationSource() noexcept {
  informationSource_Accessor.reset();
  return *this;
}

std::unique_ptr<DamageEstimateMDT> DamageEstimateMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageEstimateMDT : type};
  return (requestedType == uci::type::accessorType::damageEstimateMDT) ? boost::make_unique<DamageEstimateMDT>() : nullptr;
}

/**  */
namespace DamageEstimateMDT_Names {

constexpr const char* Extern_Type_Name{"DamageEstimateMDT"};
constexpr const char* DamageEstimateID_Name{"DamageEstimateID"};
constexpr const char* EstimateType_Name{"EstimateType"};
constexpr const char* TaskID_Name{"TaskID"};
constexpr const char* ReleasePoint_Name{"ReleasePoint"};
constexpr const char* CompletionTime_Name{"CompletionTime"};
constexpr const char* EstimateZone_Name{"EstimateZone"};
constexpr const char* ReportingThreshold_Name{"ReportingThreshold"};
constexpr const char* Details_Name{"Details"};
constexpr const char* Violation_Name{"Violation"};
constexpr const char* Summary_Name{"Summary"};
constexpr const char* EstimateNarrative_Name{"EstimateNarrative"};
constexpr const char* InformationSource_Name{"InformationSource"};

} // namespace DamageEstimateMDT_Names

void DamageEstimateMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageEstimateMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamageEstimateMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::DamageEstimateID_Name) {
      DamageEstimateID_Type::deserialize(valueType.second, accessor.getDamageEstimateID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::EstimateType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEstimateType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.getTaskID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::ReleasePoint_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableReleasePoint(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::CompletionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCompletionTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::EstimateZone_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEstimateZone(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::ReportingThreshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReportingThreshold(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::Details_Name) {
      DamageEstimateDetailsType::deserialize(valueType.second, accessor.enableDetails(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::Violation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DamageEstimateMDT::Violation& boundedList = accessor.getViolation();
        const uci::type::DamageEstimateMDT::Violation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DMPI_ViolationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::Summary_Name) {
      DamageSummaryType::deserialize(valueType.second, accessor.enableSummary(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::EstimateNarrative_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimateNarrative(*value);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::InformationSource_Name) {
      DamageInformationWeatherSourceType::deserialize(valueType.second, accessor.enableInformationSource(), nodeName, nsPrefix);
    }
  }
}

std::string DamageEstimateMDT::serialize(const uci::type::DamageEstimateMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DamageEstimateMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DamageEstimateMDT_Names::Extern_Type_Name);
  }
  DamageEstimateID_Type::serialize(accessor.getDamageEstimateID(), node, DamageEstimateMDT_Names::DamageEstimateID_Name);
  DamageCategoryEnum::serialize(accessor.getEstimateType(), node, DamageEstimateMDT_Names::EstimateType_Name, false);
  TaskID_Type::serialize(accessor.getTaskID(), node, DamageEstimateMDT_Names::TaskID_Name);
  if (accessor.hasReleasePoint()) {
    Point3D_Type::serialize(accessor.getReleasePoint(), node, DamageEstimateMDT_Names::ReleasePoint_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getCompletionTime(), node, DamageEstimateMDT_Names::CompletionTime_Name);
  if (accessor.hasEstimateZone()) {
    ZoneType::serialize(accessor.getEstimateZone(), node, DamageEstimateMDT_Names::EstimateZone_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getReportingThreshold(), node, DamageEstimateMDT_Names::ReportingThreshold_Name);
  if (accessor.hasDetails()) {
    DamageEstimateDetailsType::serialize(accessor.getDetails(), node, DamageEstimateMDT_Names::Details_Name);
  }
  {
    const uci::type::DamageEstimateMDT::Violation& boundedList = accessor.getViolation();
    for (uci::type::DamageEstimateMDT::Violation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DMPI_ViolationType::serialize(boundedList.at(i), node, DamageEstimateMDT_Names::Violation_Name);
    }
  }
  if (accessor.hasSummary()) {
    DamageSummaryType::serialize(accessor.getSummary(), node, DamageEstimateMDT_Names::Summary_Name);
  }
  if (accessor.hasEstimateNarrative()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getEstimateNarrative(), node, DamageEstimateMDT_Names::EstimateNarrative_Name);
  }
  if (accessor.hasInformationSource()) {
    DamageInformationWeatherSourceType::serialize(accessor.getInformationSource(), node, DamageEstimateMDT_Names::InformationSource_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DamageEstimateMDT& DamageEstimateMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DamageEstimateMDT>().release());
}

uci::type::DamageEstimateMDT& DamageEstimateMDT::create(const uci::type::DamageEstimateMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DamageEstimateMDT> newAccessor{boost::make_unique<asb_uci::type::DamageEstimateMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DamageEstimateMDT::destroy(uci::type::DamageEstimateMDT& accessor) {
  delete dynamic_cast<asb_uci::type::DamageEstimateMDT*>(&accessor);
}

} // namespace type

} // namespace uci

