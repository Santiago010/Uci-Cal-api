/** @file PathConstraintsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PathConstraintsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/SegmentRangeType.h"
#include "../../../include/asb_uci/type/TimeWindowType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PathConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SegmentRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TimeWindowType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PathConstraintsType::PathConstraintsType() = default;

PathConstraintsType::~PathConstraintsType() = default;

void PathConstraintsType::copy(const uci::type::PathConstraintsType& accessor) {
  copyImpl(accessor, false);
}

void PathConstraintsType::copyImpl(const uci::type::PathConstraintsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PathConstraintsType&>(accessor);
    if (accessorImpl.segmentWindow_Accessor) {
      setSegmentWindow(*(accessorImpl.segmentWindow_Accessor));
    } else {
      segmentWindow_Accessor.reset();
    }
    if (accessorImpl.timeWindow_Accessor) {
      setTimeWindow(*(accessorImpl.timeWindow_Accessor));
    } else {
      timeWindow_Accessor.reset();
    }
  }
}

void PathConstraintsType::reset() noexcept {
  segmentWindow_Accessor.reset();
  timeWindow_Accessor.reset();
}

uci::type::PathConstraintsType::PathConstraintsTypeChoice PathConstraintsType::getPathConstraintsTypeChoiceOrdinal() const noexcept {
  if (segmentWindow_Accessor) {
    return PATHCONSTRAINTSTYPE_CHOICE_SEGMENTWINDOW;
  }
  if (timeWindow_Accessor) {
    return PATHCONSTRAINTSTYPE_CHOICE_TIMEWINDOW;
  }
  return PATHCONSTRAINTSTYPE_CHOICE_NONE;
}

uci::type::PathConstraintsType& PathConstraintsType::setPathConstraintsTypeChoiceOrdinal(uci::type::PathConstraintsType::PathConstraintsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PATHCONSTRAINTSTYPE_CHOICE_SEGMENTWINDOW:
      chooseSegmentWindow("setPathConstraintsTypeChoiceOrdinal", type);
      break;
    case PATHCONSTRAINTSTYPE_CHOICE_TIMEWINDOW:
      chooseTimeWindow("setPathConstraintsTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPathConstraintsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SegmentRangeType& PathConstraintsType::getSegmentWindow_() const {
  if (segmentWindow_Accessor) {
    return *segmentWindow_Accessor;
  }
  throw uci::base::UCIException("Error in getSegmentWindow(): Unable to get SegmentWindow, field not selected");
}

const uci::type::SegmentRangeType& PathConstraintsType::getSegmentWindow() const {
  return getSegmentWindow_();
}

uci::type::SegmentRangeType& PathConstraintsType::getSegmentWindow() {
  return getSegmentWindow_();
}

uci::type::PathConstraintsType& PathConstraintsType::setSegmentWindow(const uci::type::SegmentRangeType& accessor) {
  chooseSegmentWindow();
  if (&accessor != segmentWindow_Accessor.get()) {
    segmentWindow_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathConstraintsType::isSegmentWindow() const noexcept {
  return static_cast<bool>(segmentWindow_Accessor);
}

uci::type::SegmentRangeType& PathConstraintsType::chooseSegmentWindow(const std::string& method, uci::base::accessorType::AccessorType type) {
  timeWindow_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::segmentRangeType : type};
  if ((!segmentWindow_Accessor) || (segmentWindow_Accessor->getAccessorType() != requestedType)) {
    segmentWindow_Accessor = SegmentRangeType::create(type);
    if (!segmentWindow_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *segmentWindow_Accessor;
}

uci::type::SegmentRangeType& PathConstraintsType::chooseSegmentWindow(uci::base::accessorType::AccessorType type) {
  return chooseSegmentWindow("chooseSegmentWindow", type);
}

uci::type::TimeWindowType& PathConstraintsType::getTimeWindow_() const {
  if (timeWindow_Accessor) {
    return *timeWindow_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeWindow(): Unable to get TimeWindow, field not selected");
}

const uci::type::TimeWindowType& PathConstraintsType::getTimeWindow() const {
  return getTimeWindow_();
}

uci::type::TimeWindowType& PathConstraintsType::getTimeWindow() {
  return getTimeWindow_();
}

uci::type::PathConstraintsType& PathConstraintsType::setTimeWindow(const uci::type::TimeWindowType& accessor) {
  chooseTimeWindow();
  if (&accessor != timeWindow_Accessor.get()) {
    timeWindow_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathConstraintsType::isTimeWindow() const noexcept {
  return static_cast<bool>(timeWindow_Accessor);
}

uci::type::TimeWindowType& PathConstraintsType::chooseTimeWindow(const std::string& method, uci::base::accessorType::AccessorType type) {
  segmentWindow_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::timeWindowType : type};
  if ((!timeWindow_Accessor) || (timeWindow_Accessor->getAccessorType() != requestedType)) {
    timeWindow_Accessor = TimeWindowType::create(type);
    if (!timeWindow_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timeWindow_Accessor;
}

uci::type::TimeWindowType& PathConstraintsType::chooseTimeWindow(uci::base::accessorType::AccessorType type) {
  return chooseTimeWindow("chooseTimeWindow", type);
}

std::unique_ptr<PathConstraintsType> PathConstraintsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pathConstraintsType : type};
  return (requestedType == uci::type::accessorType::pathConstraintsType) ? boost::make_unique<PathConstraintsType>() : nullptr;
}

/**  */
namespace PathConstraintsType_Names {

constexpr const char* Extern_Type_Name{"PathConstraintsType"};
constexpr const char* SegmentWindow_Name{"SegmentWindow"};
constexpr const char* TimeWindow_Name{"TimeWindow"};

} // namespace PathConstraintsType_Names

void PathConstraintsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PathConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PathConstraintsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PathConstraintsType_Names::SegmentWindow_Name) {
      SegmentRangeType::deserialize(valueType.second, accessor.chooseSegmentWindow(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathConstraintsType_Names::TimeWindow_Name) {
      TimeWindowType::deserialize(valueType.second, accessor.chooseTimeWindow(), nodeName, nsPrefix);
    }
  }
}

std::string PathConstraintsType::serialize(const uci::type::PathConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PathConstraintsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PathConstraintsType_Names::Extern_Type_Name);
  }
  if (accessor.isSegmentWindow()) {
    SegmentRangeType::serialize(accessor.getSegmentWindow(), node, PathConstraintsType_Names::SegmentWindow_Name);
  } else if (accessor.isTimeWindow()) {
    TimeWindowType::serialize(accessor.getTimeWindow(), node, PathConstraintsType_Names::TimeWindow_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PathConstraintsType& PathConstraintsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PathConstraintsType>().release());
}

uci::type::PathConstraintsType& PathConstraintsType::create(const uci::type::PathConstraintsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PathConstraintsType> newAccessor{boost::make_unique<asb_uci::type::PathConstraintsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PathConstraintsType::destroy(uci::type::PathConstraintsType& accessor) {
  delete dynamic_cast<asb_uci::type::PathConstraintsType*>(&accessor);
}

} // namespace type

} // namespace uci

