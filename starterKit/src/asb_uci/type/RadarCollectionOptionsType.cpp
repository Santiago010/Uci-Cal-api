/** @file RadarCollectionOptionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RadarCollectionOptionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CollectionPolicyEnum.h"
#include "../../../include/asb_uci/type/ElectronicProtectionOptionsEnableType.h"
#include "../../../include/asb_uci/type/RadarSpoilTaperType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CollectionPolicyEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ElectronicProtectionOptionsEnableType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadarCollectionOptionsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadarSpoilTaperType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RadarCollectionOptionsType::RadarCollectionOptionsType()
  : electronicProtectionOptionsOverride_Accessor{boost::make_unique<ElectronicProtectionOptionsOverride>(0, SIZE_MAX)} {
}

RadarCollectionOptionsType::~RadarCollectionOptionsType() = default;

void RadarCollectionOptionsType::copy(const uci::type::RadarCollectionOptionsType& accessor) {
  copyImpl(accessor, false);
}

void RadarCollectionOptionsType::copyImpl(const uci::type::RadarCollectionOptionsType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::radarCollectionOptionsType)) {
      const auto& accessorImpl = dynamic_cast<const RadarCollectionOptionsType&>(accessor);
      if (accessorImpl.collectionPolicy_Accessor) {
        setCollectionPolicy(*(accessorImpl.collectionPolicy_Accessor));
      } else {
        collectionPolicy_Accessor.reset();
      }
      if (accessorImpl.forceRxSpoilTaper_Accessor) {
        setForceRxSpoilTaper(*(accessorImpl.forceRxSpoilTaper_Accessor));
      } else {
        forceRxSpoilTaper_Accessor.reset();
      }
      if (accessorImpl.forceTxSpoilTaper_Accessor) {
        setForceTxSpoilTaper(*(accessorImpl.forceTxSpoilTaper_Accessor));
      } else {
        forceTxSpoilTaper_Accessor.reset();
      }
      if (accessorImpl.hasConcurrentOperationAccepted()) {
        setConcurrentOperationAccepted(accessorImpl.getConcurrentOperationAccepted());
      } else {
        clearConcurrentOperationAccepted();
      }
      setElectronicProtectionOptionsOverride(*(accessorImpl.electronicProtectionOptionsOverride_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void RadarCollectionOptionsType::reset() noexcept {
  collectionPolicy_Accessor.reset();
  forceRxSpoilTaper_Accessor.reset();
  forceTxSpoilTaper_Accessor.reset();
  clearConcurrentOperationAccepted();
  electronicProtectionOptionsOverride_Accessor->reset();
}

uci::type::CollectionPolicyEnum& RadarCollectionOptionsType::getCollectionPolicy_() const {
  if (collectionPolicy_Accessor) {
    return *collectionPolicy_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionPolicy(): An attempt was made to get an optional field that was not enabled, call hasCollectionPolicy() to determine if it is safe to call getCollectionPolicy()");
}

const uci::type::CollectionPolicyEnum& RadarCollectionOptionsType::getCollectionPolicy() const {
  return getCollectionPolicy_();
}

uci::type::CollectionPolicyEnum& RadarCollectionOptionsType::getCollectionPolicy() {
  return getCollectionPolicy_();
}

uci::type::RadarCollectionOptionsType& RadarCollectionOptionsType::setCollectionPolicy(const uci::type::CollectionPolicyEnum& accessor) {
  enableCollectionPolicy();
  if (&accessor != collectionPolicy_Accessor.get()) {
    collectionPolicy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RadarCollectionOptionsType& RadarCollectionOptionsType::setCollectionPolicy(const uci::type::CollectionPolicyEnum::EnumerationItem value) {
  enableCollectionPolicy().setValue(value);
  return *this;
}

bool RadarCollectionOptionsType::hasCollectionPolicy() const noexcept {
  return static_cast<bool>(collectionPolicy_Accessor);
}

uci::type::CollectionPolicyEnum& RadarCollectionOptionsType::enableCollectionPolicy(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::collectionPolicyEnum : type};
  if ((!collectionPolicy_Accessor) || (collectionPolicy_Accessor->getAccessorType() != requestedType)) {
    collectionPolicy_Accessor = CollectionPolicyEnum::create(requestedType);
    if (!collectionPolicy_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionPolicy(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionPolicy_Accessor;
}

uci::type::RadarCollectionOptionsType& RadarCollectionOptionsType::clearCollectionPolicy() noexcept {
  collectionPolicy_Accessor.reset();
  return *this;
}

uci::type::RadarSpoilTaperType& RadarCollectionOptionsType::getForceRxSpoilTaper_() const {
  if (forceRxSpoilTaper_Accessor) {
    return *forceRxSpoilTaper_Accessor;
  }
  throw uci::base::UCIException("Error in getForceRxSpoilTaper(): An attempt was made to get an optional field that was not enabled, call hasForceRxSpoilTaper() to determine if it is safe to call getForceRxSpoilTaper()");
}

const uci::type::RadarSpoilTaperType& RadarCollectionOptionsType::getForceRxSpoilTaper() const {
  return getForceRxSpoilTaper_();
}

uci::type::RadarSpoilTaperType& RadarCollectionOptionsType::getForceRxSpoilTaper() {
  return getForceRxSpoilTaper_();
}

uci::type::RadarCollectionOptionsType& RadarCollectionOptionsType::setForceRxSpoilTaper(const uci::type::RadarSpoilTaperType& accessor) {
  enableForceRxSpoilTaper();
  if (&accessor != forceRxSpoilTaper_Accessor.get()) {
    forceRxSpoilTaper_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RadarCollectionOptionsType::hasForceRxSpoilTaper() const noexcept {
  return static_cast<bool>(forceRxSpoilTaper_Accessor);
}

uci::type::RadarSpoilTaperType& RadarCollectionOptionsType::enableForceRxSpoilTaper(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarSpoilTaperType : type};
  if ((!forceRxSpoilTaper_Accessor) || (forceRxSpoilTaper_Accessor->getAccessorType() != requestedType)) {
    forceRxSpoilTaper_Accessor = RadarSpoilTaperType::create(requestedType);
    if (!forceRxSpoilTaper_Accessor) {
      throw uci::base::UCIException("Error in enableForceRxSpoilTaper(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *forceRxSpoilTaper_Accessor;
}

uci::type::RadarCollectionOptionsType& RadarCollectionOptionsType::clearForceRxSpoilTaper() noexcept {
  forceRxSpoilTaper_Accessor.reset();
  return *this;
}

uci::type::RadarSpoilTaperType& RadarCollectionOptionsType::getForceTxSpoilTaper_() const {
  if (forceTxSpoilTaper_Accessor) {
    return *forceTxSpoilTaper_Accessor;
  }
  throw uci::base::UCIException("Error in getForceTxSpoilTaper(): An attempt was made to get an optional field that was not enabled, call hasForceTxSpoilTaper() to determine if it is safe to call getForceTxSpoilTaper()");
}

const uci::type::RadarSpoilTaperType& RadarCollectionOptionsType::getForceTxSpoilTaper() const {
  return getForceTxSpoilTaper_();
}

uci::type::RadarSpoilTaperType& RadarCollectionOptionsType::getForceTxSpoilTaper() {
  return getForceTxSpoilTaper_();
}

uci::type::RadarCollectionOptionsType& RadarCollectionOptionsType::setForceTxSpoilTaper(const uci::type::RadarSpoilTaperType& accessor) {
  enableForceTxSpoilTaper();
  if (&accessor != forceTxSpoilTaper_Accessor.get()) {
    forceTxSpoilTaper_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RadarCollectionOptionsType::hasForceTxSpoilTaper() const noexcept {
  return static_cast<bool>(forceTxSpoilTaper_Accessor);
}

uci::type::RadarSpoilTaperType& RadarCollectionOptionsType::enableForceTxSpoilTaper(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarSpoilTaperType : type};
  if ((!forceTxSpoilTaper_Accessor) || (forceTxSpoilTaper_Accessor->getAccessorType() != requestedType)) {
    forceTxSpoilTaper_Accessor = RadarSpoilTaperType::create(requestedType);
    if (!forceTxSpoilTaper_Accessor) {
      throw uci::base::UCIException("Error in enableForceTxSpoilTaper(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *forceTxSpoilTaper_Accessor;
}

uci::type::RadarCollectionOptionsType& RadarCollectionOptionsType::clearForceTxSpoilTaper() noexcept {
  forceTxSpoilTaper_Accessor.reset();
  return *this;
}

xs::Boolean RadarCollectionOptionsType::getConcurrentOperationAccepted() const {
  if (concurrentOperationAccepted_Accessor) {
    return *concurrentOperationAccepted_Accessor;
  }
  throw uci::base::UCIException("Error in getConcurrentOperationAccepted(): An attempt was made to get an optional field that was not enabled, call hasConcurrentOperationAccepted() to determine if it is safe to call getConcurrentOperationAccepted()");
}

uci::type::RadarCollectionOptionsType& RadarCollectionOptionsType::setConcurrentOperationAccepted(xs::Boolean value) {
  concurrentOperationAccepted_Accessor = value;
  return *this;
}

bool RadarCollectionOptionsType::hasConcurrentOperationAccepted() const noexcept {
  return concurrentOperationAccepted_Accessor.has_value();
}

uci::type::RadarCollectionOptionsType& RadarCollectionOptionsType::clearConcurrentOperationAccepted() noexcept {
  concurrentOperationAccepted_Accessor.reset();
  return *this;
}

const uci::type::RadarCollectionOptionsType::ElectronicProtectionOptionsOverride& RadarCollectionOptionsType::getElectronicProtectionOptionsOverride() const {
  return *electronicProtectionOptionsOverride_Accessor;
}

uci::type::RadarCollectionOptionsType::ElectronicProtectionOptionsOverride& RadarCollectionOptionsType::getElectronicProtectionOptionsOverride() {
  return *electronicProtectionOptionsOverride_Accessor;
}

uci::type::RadarCollectionOptionsType& RadarCollectionOptionsType::setElectronicProtectionOptionsOverride(const uci::type::RadarCollectionOptionsType::ElectronicProtectionOptionsOverride& accessor) {
  if (&accessor != electronicProtectionOptionsOverride_Accessor.get()) {
    electronicProtectionOptionsOverride_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RadarCollectionOptionsType> RadarCollectionOptionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarCollectionOptionsType : type};
  return std::unique_ptr<RadarCollectionOptionsType>(dynamic_cast<RadarCollectionOptionsType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace RadarCollectionOptionsType_Names {

constexpr const char* Extern_Type_Name{"RadarCollectionOptionsType"};
constexpr const char* CollectionPolicy_Name{"CollectionPolicy"};
constexpr const char* ForceRxSpoilTaper_Name{"ForceRxSpoilTaper"};
constexpr const char* ForceTxSpoilTaper_Name{"ForceTxSpoilTaper"};
constexpr const char* ConcurrentOperationAccepted_Name{"ConcurrentOperationAccepted"};
constexpr const char* ElectronicProtectionOptionsOverride_Name{"ElectronicProtectionOptionsOverride"};

} // namespace RadarCollectionOptionsType_Names

void RadarCollectionOptionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RadarCollectionOptionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RadarCollectionOptionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RadarCollectionOptionsType_Names::CollectionPolicy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCollectionPolicy().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RadarCollectionOptionsType_Names::ForceRxSpoilTaper_Name) {
      RadarSpoilTaperType::deserialize(valueType.second, accessor.enableForceRxSpoilTaper(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RadarCollectionOptionsType_Names::ForceTxSpoilTaper_Name) {
      RadarSpoilTaperType::deserialize(valueType.second, accessor.enableForceTxSpoilTaper(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RadarCollectionOptionsType_Names::ConcurrentOperationAccepted_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConcurrentOperationAccepted(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RadarCollectionOptionsType_Names::ElectronicProtectionOptionsOverride_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RadarCollectionOptionsType::ElectronicProtectionOptionsOverride& boundedList = accessor.getElectronicProtectionOptionsOverride();
        const uci::type::RadarCollectionOptionsType::ElectronicProtectionOptionsOverride::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ElectronicProtectionOptionsEnableType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string RadarCollectionOptionsType::serialize(const uci::type::RadarCollectionOptionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RadarCollectionOptionsType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::radarCollectionOptionsType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, RadarCollectionOptionsType_Names::Extern_Type_Name);
    }
    if (accessor.hasCollectionPolicy()) {
      CollectionPolicyEnum::serialize(accessor.getCollectionPolicy(), node, RadarCollectionOptionsType_Names::CollectionPolicy_Name, false);
    }
    if (accessor.hasForceRxSpoilTaper()) {
      RadarSpoilTaperType::serialize(accessor.getForceRxSpoilTaper(), node, RadarCollectionOptionsType_Names::ForceRxSpoilTaper_Name);
    }
    if (accessor.hasForceTxSpoilTaper()) {
      RadarSpoilTaperType::serialize(accessor.getForceTxSpoilTaper(), node, RadarCollectionOptionsType_Names::ForceTxSpoilTaper_Name);
    }
    if (accessor.hasConcurrentOperationAccepted()) {
      asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getConcurrentOperationAccepted(), node, RadarCollectionOptionsType_Names::ConcurrentOperationAccepted_Name);
    }
    {
      const uci::type::RadarCollectionOptionsType::ElectronicProtectionOptionsOverride& boundedList = accessor.getElectronicProtectionOptionsOverride();
      for (uci::type::RadarCollectionOptionsType::ElectronicProtectionOptionsOverride::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ElectronicProtectionOptionsEnableType::serialize(boundedList.at(i), node, RadarCollectionOptionsType_Names::ElectronicProtectionOptionsOverride_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RadarCollectionOptionsType& RadarCollectionOptionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RadarCollectionOptionsType>().release());
}

uci::type::RadarCollectionOptionsType& RadarCollectionOptionsType::create(const uci::type::RadarCollectionOptionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RadarCollectionOptionsType> newAccessor{boost::make_unique<asb_uci::type::RadarCollectionOptionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RadarCollectionOptionsType::destroy(uci::type::RadarCollectionOptionsType& accessor) {
  delete dynamic_cast<asb_uci::type::RadarCollectionOptionsType*>(&accessor);
}

} // namespace type

} // namespace uci

