/** @file FlightTaskType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/FlightTaskType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/FlightTaskBaseType.h"
#include "asb_uci/type/LoiterType.h"
#include "asb_uci/type/MustFlyType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/FlightTaskType.h"
#include "uci/type/LoiterType.h"
#include "uci/type/MustFlyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FlightTaskType::FlightTaskType() = default;

FlightTaskType::~FlightTaskType() = default;

void FlightTaskType::copy(const uci::type::FlightTaskType& accessor) {
  copyImpl(accessor, false);
}

void FlightTaskType::copyImpl(const uci::type::FlightTaskType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    FlightTaskBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const FlightTaskType&>(accessor);
    if (accessorImpl.loiter_Accessor) {
      setLoiter(*(accessorImpl.loiter_Accessor));
    } else {
      loiter_Accessor.reset();
    }
    if (accessorImpl.mustFly_Accessor) {
      setMustFly(*(accessorImpl.mustFly_Accessor));
    } else {
      mustFly_Accessor.reset();
    }
  }
}

void FlightTaskType::reset() noexcept {
  FlightTaskBaseType::reset();
  loiter_Accessor.reset();
  mustFly_Accessor.reset();
}

uci::type::LoiterType& FlightTaskType::getLoiter_() const {
  if (loiter_Accessor) {
    return *loiter_Accessor;
  }
  throw uci::base::UCIException("Error in getLoiter(): An attempt was made to get an optional field that was not enabled, call hasLoiter() to determine if it is safe to call getLoiter()");
}

const uci::type::LoiterType& FlightTaskType::getLoiter() const {
  return getLoiter_();
}

uci::type::LoiterType& FlightTaskType::getLoiter() {
  return getLoiter_();
}

uci::type::FlightTaskType& FlightTaskType::setLoiter(const uci::type::LoiterType& accessor) {
  enableLoiter();
  if (&accessor != loiter_Accessor.get()) {
    loiter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FlightTaskType::hasLoiter() const noexcept {
  return static_cast<bool>(loiter_Accessor);
}

uci::type::LoiterType& FlightTaskType::enableLoiter(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::loiterType : type};
  if ((!loiter_Accessor) || (loiter_Accessor->getAccessorType() != requestedType)) {
    loiter_Accessor = LoiterType::create(requestedType);
    if (!loiter_Accessor) {
      throw uci::base::UCIException("Error in enableLoiter(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *loiter_Accessor;
}

uci::type::FlightTaskType& FlightTaskType::clearLoiter() noexcept {
  loiter_Accessor.reset();
  return *this;
}

uci::type::MustFlyType& FlightTaskType::getMustFly_() const {
  if (mustFly_Accessor) {
    return *mustFly_Accessor;
  }
  throw uci::base::UCIException("Error in getMustFly(): An attempt was made to get an optional field that was not enabled, call hasMustFly() to determine if it is safe to call getMustFly()");
}

const uci::type::MustFlyType& FlightTaskType::getMustFly() const {
  return getMustFly_();
}

uci::type::MustFlyType& FlightTaskType::getMustFly() {
  return getMustFly_();
}

uci::type::FlightTaskType& FlightTaskType::setMustFly(const uci::type::MustFlyType& accessor) {
  enableMustFly();
  if (&accessor != mustFly_Accessor.get()) {
    mustFly_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FlightTaskType::hasMustFly() const noexcept {
  return static_cast<bool>(mustFly_Accessor);
}

uci::type::MustFlyType& FlightTaskType::enableMustFly(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mustFlyType : type};
  if ((!mustFly_Accessor) || (mustFly_Accessor->getAccessorType() != requestedType)) {
    mustFly_Accessor = MustFlyType::create(requestedType);
    if (!mustFly_Accessor) {
      throw uci::base::UCIException("Error in enableMustFly(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mustFly_Accessor;
}

uci::type::FlightTaskType& FlightTaskType::clearMustFly() noexcept {
  mustFly_Accessor.reset();
  return *this;
}

std::unique_ptr<FlightTaskType> FlightTaskType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::flightTaskType : type};
  return (requestedType == uci::type::accessorType::flightTaskType) ? boost::make_unique<FlightTaskType>() : nullptr;
}

/**  */
namespace FlightTaskType_Names {

constexpr const char* Extern_Type_Name{"FlightTaskType"};
constexpr const char* Loiter_Name{"Loiter"};
constexpr const char* MustFly_Name{"MustFly"};

} // namespace FlightTaskType_Names

void FlightTaskType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FlightTaskType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FlightTaskType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FlightTaskType_Names::Loiter_Name) {
      LoiterType::deserialize(valueType.second, accessor.enableLoiter(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FlightTaskType_Names::MustFly_Name) {
      MustFlyType::deserialize(valueType.second, accessor.enableMustFly(), nodeName, nsPrefix);
    }
  }
  FlightTaskBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string FlightTaskType::serialize(const uci::type::FlightTaskType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FlightTaskType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FlightTaskType_Names::Extern_Type_Name);
  }
  FlightTaskBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasLoiter()) {
    LoiterType::serialize(accessor.getLoiter(), node, FlightTaskType_Names::Loiter_Name);
  }
  if (accessor.hasMustFly()) {
    MustFlyType::serialize(accessor.getMustFly(), node, FlightTaskType_Names::MustFly_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FlightTaskType& FlightTaskType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FlightTaskType>().release());
}

uci::type::FlightTaskType& FlightTaskType::create(const uci::type::FlightTaskType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FlightTaskType> newAccessor{boost::make_unique<asb_uci::type::FlightTaskType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FlightTaskType::destroy(uci::type::FlightTaskType& accessor) {
  delete dynamic_cast<asb_uci::type::FlightTaskType*>(&accessor);
}

} // namespace type

} // namespace uci

