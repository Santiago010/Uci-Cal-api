/** @file ElementDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ElementDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PulseDataID_Type.h"
#include "../../../include/asb_uci/type/RF_TypeEnum.h"
#include "../../../include/asb_uci/type/SensorKinematicsChoiceType.h"
#include "../../../include/asb_uci/type/SignalID_Type.h"
#include "../../../include/asb_uci/type/SourceKinematicsElementIdentityType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ElementDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PulseDataID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_TypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorKinematicsChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SignalID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SourceKinematicsElementIdentityType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ElementDetailsType::ElementDetailsType()
  : kinematics_Accessor{boost::make_unique<Kinematics>(0, SIZE_MAX)},
    pulseDataID_Accessor{boost::make_unique<PulseDataID>(0, SIZE_MAX)},
    signalID_Accessor{boost::make_unique<SignalID>(0, SIZE_MAX)} {
}

ElementDetailsType::~ElementDetailsType() = default;

void ElementDetailsType::copy(const uci::type::ElementDetailsType& accessor) {
  copyImpl(accessor, false);
}

void ElementDetailsType::copyImpl(const uci::type::ElementDetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ElementDetailsType&>(accessor);
    setKinematics(*(accessorImpl.kinematics_Accessor));
    if (accessorImpl.hasRelativeMeasurementReference()) {
      setRelativeMeasurementReference(accessorImpl.getRelativeMeasurementReference());
    } else {
      clearRelativeMeasurementReference();
    }
    if (accessorImpl.sourceElementIdentifier_Accessor) {
      setSourceElementIdentifier(*(accessorImpl.sourceElementIdentifier_Accessor));
    } else {
      sourceElementIdentifier_Accessor.reset();
    }
    setPulseDataID(*(accessorImpl.pulseDataID_Accessor));
    setSignalID(*(accessorImpl.signalID_Accessor));
    if (accessorImpl.rxTxType_Accessor) {
      setRxTxType(*(accessorImpl.rxTxType_Accessor));
    } else {
      rxTxType_Accessor.reset();
    }
  }
}

void ElementDetailsType::reset() noexcept {
  kinematics_Accessor->reset();
  clearRelativeMeasurementReference();
  sourceElementIdentifier_Accessor.reset();
  pulseDataID_Accessor->reset();
  signalID_Accessor->reset();
  rxTxType_Accessor.reset();
}

const uci::type::ElementDetailsType::Kinematics& ElementDetailsType::getKinematics() const {
  return *kinematics_Accessor;
}

uci::type::ElementDetailsType::Kinematics& ElementDetailsType::getKinematics() {
  return *kinematics_Accessor;
}

uci::type::ElementDetailsType& ElementDetailsType::setKinematics(const uci::type::ElementDetailsType::Kinematics& accessor) {
  if (&accessor != kinematics_Accessor.get()) {
    kinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean ElementDetailsType::getRelativeMeasurementReference() const {
  if (relativeMeasurementReference_Accessor) {
    return *relativeMeasurementReference_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeMeasurementReference(): An attempt was made to get an optional field that was not enabled, call hasRelativeMeasurementReference() to determine if it is safe to call getRelativeMeasurementReference()");
}

uci::type::ElementDetailsType& ElementDetailsType::setRelativeMeasurementReference(xs::Boolean value) {
  relativeMeasurementReference_Accessor = value;
  return *this;
}

bool ElementDetailsType::hasRelativeMeasurementReference() const noexcept {
  return relativeMeasurementReference_Accessor.has_value();
}

uci::type::ElementDetailsType& ElementDetailsType::clearRelativeMeasurementReference() noexcept {
  relativeMeasurementReference_Accessor.reset();
  return *this;
}

uci::type::SourceKinematicsElementIdentityType& ElementDetailsType::getSourceElementIdentifier_() const {
  if (sourceElementIdentifier_Accessor) {
    return *sourceElementIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceElementIdentifier(): An attempt was made to get an optional field that was not enabled, call hasSourceElementIdentifier() to determine if it is safe to call getSourceElementIdentifier()");
}

const uci::type::SourceKinematicsElementIdentityType& ElementDetailsType::getSourceElementIdentifier() const {
  return getSourceElementIdentifier_();
}

uci::type::SourceKinematicsElementIdentityType& ElementDetailsType::getSourceElementIdentifier() {
  return getSourceElementIdentifier_();
}

uci::type::ElementDetailsType& ElementDetailsType::setSourceElementIdentifier(const uci::type::SourceKinematicsElementIdentityType& accessor) {
  enableSourceElementIdentifier();
  if (&accessor != sourceElementIdentifier_Accessor.get()) {
    sourceElementIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ElementDetailsType::hasSourceElementIdentifier() const noexcept {
  return static_cast<bool>(sourceElementIdentifier_Accessor);
}

uci::type::SourceKinematicsElementIdentityType& ElementDetailsType::enableSourceElementIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceKinematicsElementIdentityType : type};
  if ((!sourceElementIdentifier_Accessor) || (sourceElementIdentifier_Accessor->getAccessorType() != requestedType)) {
    sourceElementIdentifier_Accessor = SourceKinematicsElementIdentityType::create(requestedType);
    if (!sourceElementIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enableSourceElementIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceElementIdentifier_Accessor;
}

uci::type::ElementDetailsType& ElementDetailsType::clearSourceElementIdentifier() noexcept {
  sourceElementIdentifier_Accessor.reset();
  return *this;
}

const uci::type::ElementDetailsType::PulseDataID& ElementDetailsType::getPulseDataID() const {
  return *pulseDataID_Accessor;
}

uci::type::ElementDetailsType::PulseDataID& ElementDetailsType::getPulseDataID() {
  return *pulseDataID_Accessor;
}

uci::type::ElementDetailsType& ElementDetailsType::setPulseDataID(const uci::type::ElementDetailsType::PulseDataID& accessor) {
  if (&accessor != pulseDataID_Accessor.get()) {
    pulseDataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ElementDetailsType::SignalID& ElementDetailsType::getSignalID() const {
  return *signalID_Accessor;
}

uci::type::ElementDetailsType::SignalID& ElementDetailsType::getSignalID() {
  return *signalID_Accessor;
}

uci::type::ElementDetailsType& ElementDetailsType::setSignalID(const uci::type::ElementDetailsType::SignalID& accessor) {
  if (&accessor != signalID_Accessor.get()) {
    signalID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RF_TypeEnum& ElementDetailsType::getRxTxType_() const {
  if (rxTxType_Accessor) {
    return *rxTxType_Accessor;
  }
  throw uci::base::UCIException("Error in getRxTxType(): An attempt was made to get an optional field that was not enabled, call hasRxTxType() to determine if it is safe to call getRxTxType()");
}

const uci::type::RF_TypeEnum& ElementDetailsType::getRxTxType() const {
  return getRxTxType_();
}

uci::type::RF_TypeEnum& ElementDetailsType::getRxTxType() {
  return getRxTxType_();
}

uci::type::ElementDetailsType& ElementDetailsType::setRxTxType(const uci::type::RF_TypeEnum& accessor) {
  enableRxTxType();
  if (&accessor != rxTxType_Accessor.get()) {
    rxTxType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ElementDetailsType& ElementDetailsType::setRxTxType(const uci::type::RF_TypeEnum::EnumerationItem value) {
  enableRxTxType().setValue(value);
  return *this;
}

bool ElementDetailsType::hasRxTxType() const noexcept {
  return static_cast<bool>(rxTxType_Accessor);
}

uci::type::RF_TypeEnum& ElementDetailsType::enableRxTxType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_TypeEnum : type};
  if ((!rxTxType_Accessor) || (rxTxType_Accessor->getAccessorType() != requestedType)) {
    rxTxType_Accessor = RF_TypeEnum::create(requestedType);
    if (!rxTxType_Accessor) {
      throw uci::base::UCIException("Error in enableRxTxType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rxTxType_Accessor;
}

uci::type::ElementDetailsType& ElementDetailsType::clearRxTxType() noexcept {
  rxTxType_Accessor.reset();
  return *this;
}

std::unique_ptr<ElementDetailsType> ElementDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::elementDetailsType : type};
  return (requestedType == uci::type::accessorType::elementDetailsType) ? boost::make_unique<ElementDetailsType>() : nullptr;
}

/**  */
namespace ElementDetailsType_Names {

constexpr const char* Extern_Type_Name{"ElementDetailsType"};
constexpr const char* Kinematics_Name{"Kinematics"};
constexpr const char* RelativeMeasurementReference_Name{"RelativeMeasurementReference"};
constexpr const char* SourceElementIdentifier_Name{"SourceElementIdentifier"};
constexpr const char* PulseDataID_Name{"PulseDataID"};
constexpr const char* SignalID_Name{"SignalID"};
constexpr const char* RxTxType_Name{"RxTxType"};

} // namespace ElementDetailsType_Names

void ElementDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ElementDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ElementDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ElementDetailsType_Names::Kinematics_Name) {
      uci::type::ElementDetailsType::Kinematics& boundedList = accessor.getKinematics();
      const uci::type::ElementDetailsType::Kinematics::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::SensorKinematicsChoiceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ElementDetailsType_Names::RelativeMeasurementReference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRelativeMeasurementReference(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ElementDetailsType_Names::SourceElementIdentifier_Name) {
      SourceKinematicsElementIdentityType::deserialize(valueType.second, accessor.enableSourceElementIdentifier(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ElementDetailsType_Names::PulseDataID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ElementDetailsType::PulseDataID& boundedList = accessor.getPulseDataID();
        const uci::type::ElementDetailsType::PulseDataID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PulseDataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ElementDetailsType_Names::SignalID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ElementDetailsType::SignalID& boundedList = accessor.getSignalID();
        const uci::type::ElementDetailsType::SignalID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SignalID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ElementDetailsType_Names::RxTxType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRxTxType().setValueFromName(*value);
      }
    }
  }
}

std::string ElementDetailsType::serialize(const uci::type::ElementDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ElementDetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ElementDetailsType_Names::Extern_Type_Name);
  }
  {
    const uci::type::ElementDetailsType::Kinematics& boundedList = accessor.getKinematics();
    for (uci::type::ElementDetailsType::Kinematics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SensorKinematicsChoiceType::serialize(boundedList.at(i), node, ElementDetailsType_Names::Kinematics_Name);
    }
  }
  if (accessor.hasRelativeMeasurementReference()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getRelativeMeasurementReference(), node, ElementDetailsType_Names::RelativeMeasurementReference_Name);
  }
  if (accessor.hasSourceElementIdentifier()) {
    SourceKinematicsElementIdentityType::serialize(accessor.getSourceElementIdentifier(), node, ElementDetailsType_Names::SourceElementIdentifier_Name);
  }
  {
    const uci::type::ElementDetailsType::PulseDataID& boundedList = accessor.getPulseDataID();
    for (uci::type::ElementDetailsType::PulseDataID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PulseDataID_Type::serialize(boundedList.at(i), node, ElementDetailsType_Names::PulseDataID_Name);
    }
  }
  {
    const uci::type::ElementDetailsType::SignalID& boundedList = accessor.getSignalID();
    for (uci::type::ElementDetailsType::SignalID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SignalID_Type::serialize(boundedList.at(i), node, ElementDetailsType_Names::SignalID_Name);
    }
  }
  if (accessor.hasRxTxType()) {
    RF_TypeEnum::serialize(accessor.getRxTxType(), node, ElementDetailsType_Names::RxTxType_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ElementDetailsType& ElementDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ElementDetailsType>().release());
}

uci::type::ElementDetailsType& ElementDetailsType::create(const uci::type::ElementDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ElementDetailsType> newAccessor{boost::make_unique<asb_uci::type::ElementDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ElementDetailsType::destroy(uci::type::ElementDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::ElementDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

