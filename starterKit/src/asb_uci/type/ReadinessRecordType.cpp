/** @file ReadinessRecordType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ReadinessRecordType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OpVolumeType.h"
#include "../../../include/asb_uci/type/ReadinessItemStatusType.h"
#include "../../../include/asb_uci/type/ReadinessTimeSpanType.h"
#include "../../../include/asb_uci/type/ZoneType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpVolumeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ReadinessItemStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ReadinessRecordType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ReadinessTimeSpanType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ReadinessRecordType::ReadinessRecordType()
  : item_Accessor{boost::make_unique<Item>(1, 7)},
    timeSpan_Accessor{boost::make_unique<ReadinessTimeSpanType>()} {
}

ReadinessRecordType::~ReadinessRecordType() = default;

void ReadinessRecordType::copy(const uci::type::ReadinessRecordType& accessor) {
  copyImpl(accessor, false);
}

void ReadinessRecordType::copyImpl(const uci::type::ReadinessRecordType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ReadinessRecordType&>(accessor);
    setItem(*(accessorImpl.item_Accessor));
    setTimeSpan(*(accessorImpl.timeSpan_Accessor));
    if (accessorImpl.geoZone_Accessor) {
      setGeoZone(*(accessorImpl.geoZone_Accessor));
    } else {
      geoZone_Accessor.reset();
    }
    if (accessorImpl.orbitalZone_Accessor) {
      setOrbitalZone(*(accessorImpl.orbitalZone_Accessor));
    } else {
      orbitalZone_Accessor.reset();
    }
  }
}

void ReadinessRecordType::reset() noexcept {
  item_Accessor->reset();
  timeSpan_Accessor->reset();
  geoZone_Accessor.reset();
  orbitalZone_Accessor.reset();
}

const uci::type::ReadinessRecordType::Item& ReadinessRecordType::getItem() const {
  return *item_Accessor;
}

uci::type::ReadinessRecordType::Item& ReadinessRecordType::getItem() {
  return *item_Accessor;
}

uci::type::ReadinessRecordType& ReadinessRecordType::setItem(const uci::type::ReadinessRecordType::Item& accessor) {
  if (&accessor != item_Accessor.get()) {
    item_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ReadinessTimeSpanType& ReadinessRecordType::getTimeSpan() const {
  return *timeSpan_Accessor;
}

uci::type::ReadinessTimeSpanType& ReadinessRecordType::getTimeSpan() {
  return *timeSpan_Accessor;
}

uci::type::ReadinessRecordType& ReadinessRecordType::setTimeSpan(const uci::type::ReadinessTimeSpanType& accessor) {
  if (&accessor != timeSpan_Accessor.get()) {
    timeSpan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ZoneType& ReadinessRecordType::getGeoZone_() const {
  if (geoZone_Accessor) {
    return *geoZone_Accessor;
  }
  throw uci::base::UCIException("Error in getGeoZone(): An attempt was made to get an optional field that was not enabled, call hasGeoZone() to determine if it is safe to call getGeoZone()");
}

const uci::type::ZoneType& ReadinessRecordType::getGeoZone() const {
  return getGeoZone_();
}

uci::type::ZoneType& ReadinessRecordType::getGeoZone() {
  return getGeoZone_();
}

uci::type::ReadinessRecordType& ReadinessRecordType::setGeoZone(const uci::type::ZoneType& accessor) {
  enableGeoZone(accessor.getAccessorType());
  if (&accessor != geoZone_Accessor.get()) {
    geoZone_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ReadinessRecordType::hasGeoZone() const noexcept {
  return static_cast<bool>(geoZone_Accessor);
}

uci::type::ZoneType& ReadinessRecordType::enableGeoZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!geoZone_Accessor) || (geoZone_Accessor->getAccessorType() != requestedType)) {
    geoZone_Accessor = ZoneType::create(requestedType);
    if (!geoZone_Accessor) {
      throw uci::base::UCIException("Error in enableGeoZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *geoZone_Accessor;
}

uci::type::ReadinessRecordType& ReadinessRecordType::clearGeoZone() noexcept {
  geoZone_Accessor.reset();
  return *this;
}

uci::type::OpVolumeType& ReadinessRecordType::getOrbitalZone_() const {
  if (orbitalZone_Accessor) {
    return *orbitalZone_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalZone(): An attempt was made to get an optional field that was not enabled, call hasOrbitalZone() to determine if it is safe to call getOrbitalZone()");
}

const uci::type::OpVolumeType& ReadinessRecordType::getOrbitalZone() const {
  return getOrbitalZone_();
}

uci::type::OpVolumeType& ReadinessRecordType::getOrbitalZone() {
  return getOrbitalZone_();
}

uci::type::ReadinessRecordType& ReadinessRecordType::setOrbitalZone(const uci::type::OpVolumeType& accessor) {
  enableOrbitalZone();
  if (&accessor != orbitalZone_Accessor.get()) {
    orbitalZone_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ReadinessRecordType::hasOrbitalZone() const noexcept {
  return static_cast<bool>(orbitalZone_Accessor);
}

uci::type::OpVolumeType& ReadinessRecordType::enableOrbitalZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opVolumeType : type};
  if ((!orbitalZone_Accessor) || (orbitalZone_Accessor->getAccessorType() != requestedType)) {
    orbitalZone_Accessor = OpVolumeType::create(requestedType);
    if (!orbitalZone_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitalZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalZone_Accessor;
}

uci::type::ReadinessRecordType& ReadinessRecordType::clearOrbitalZone() noexcept {
  orbitalZone_Accessor.reset();
  return *this;
}

std::unique_ptr<ReadinessRecordType> ReadinessRecordType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::readinessRecordType : type};
  return (requestedType == uci::type::accessorType::readinessRecordType) ? boost::make_unique<ReadinessRecordType>() : nullptr;
}

/**  */
namespace ReadinessRecordType_Names {

constexpr const char* Extern_Type_Name{"ReadinessRecordType"};
constexpr const char* Item_Name{"Item"};
constexpr const char* TimeSpan_Name{"TimeSpan"};
constexpr const char* GeoZone_Name{"GeoZone"};
constexpr const char* OrbitalZone_Name{"OrbitalZone"};

} // namespace ReadinessRecordType_Names

void ReadinessRecordType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ReadinessRecordType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ReadinessRecordType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ReadinessRecordType_Names::Item_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ReadinessRecordType::Item& boundedList = accessor.getItem();
        const uci::type::ReadinessRecordType::Item::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ReadinessItemStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ReadinessRecordType_Names::TimeSpan_Name) {
      ReadinessTimeSpanType::deserialize(valueType.second, accessor.getTimeSpan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ReadinessRecordType_Names::GeoZone_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableGeoZone(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ReadinessRecordType_Names::OrbitalZone_Name) {
      OpVolumeType::deserialize(valueType.second, accessor.enableOrbitalZone(), nodeName, nsPrefix);
    }
  }
}

std::string ReadinessRecordType::serialize(const uci::type::ReadinessRecordType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ReadinessRecordType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ReadinessRecordType_Names::Extern_Type_Name);
  }
  {
    const uci::type::ReadinessRecordType::Item& boundedList = accessor.getItem();
    for (uci::type::ReadinessRecordType::Item::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ReadinessItemStatusType::serialize(boundedList.at(i), node, ReadinessRecordType_Names::Item_Name);
    }
  }
  ReadinessTimeSpanType::serialize(accessor.getTimeSpan(), node, ReadinessRecordType_Names::TimeSpan_Name);
  if (accessor.hasGeoZone()) {
    ZoneType::serialize(accessor.getGeoZone(), node, ReadinessRecordType_Names::GeoZone_Name);
  }
  if (accessor.hasOrbitalZone()) {
    OpVolumeType::serialize(accessor.getOrbitalZone(), node, ReadinessRecordType_Names::OrbitalZone_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ReadinessRecordType& ReadinessRecordType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ReadinessRecordType>().release());
}

uci::type::ReadinessRecordType& ReadinessRecordType::create(const uci::type::ReadinessRecordType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ReadinessRecordType> newAccessor{boost::make_unique<asb_uci::type::ReadinessRecordType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ReadinessRecordType::destroy(uci::type::ReadinessRecordType& accessor) {
  delete dynamic_cast<asb_uci::type::ReadinessRecordType*>(&accessor);
}

} // namespace type

} // namespace uci

