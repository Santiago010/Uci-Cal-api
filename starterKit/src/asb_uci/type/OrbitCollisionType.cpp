/** @file OrbitCollisionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitCollisionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitConflictObjectType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DoubleNonNegativeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitCollisionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitConflictObjectType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/UnitIntervalDoubleType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitCollisionType::OrbitCollisionType()
  : collisionObject_Accessor{boost::make_unique<CollisionObject>(1, SIZE_MAX)} {
}

OrbitCollisionType::~OrbitCollisionType() = default;

void OrbitCollisionType::copy(const uci::type::OrbitCollisionType& accessor) {
  copyImpl(accessor, false);
}

void OrbitCollisionType::copyImpl(const uci::type::OrbitCollisionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitCollisionType&>(accessor);
    setCollisionObject(*(accessorImpl.collisionObject_Accessor));
    if (accessorImpl.hasPercentageOfPartialCollision()) {
      setPercentageOfPartialCollision(accessorImpl.getPercentageOfPartialCollision());
    } else {
      clearPercentageOfPartialCollision();
    }
    if (accessorImpl.hasAbsoluteRisk()) {
      setAbsoluteRisk(accessorImpl.getAbsoluteRisk());
    } else {
      clearAbsoluteRisk();
    }
    if (accessorImpl.hasRelativeRisk()) {
      setRelativeRisk(accessorImpl.getRelativeRisk());
    } else {
      clearRelativeRisk();
    }
  }
}

void OrbitCollisionType::reset() noexcept {
  collisionObject_Accessor->reset();
  clearPercentageOfPartialCollision();
  clearAbsoluteRisk();
  clearRelativeRisk();
}

const uci::type::OrbitCollisionType::CollisionObject& OrbitCollisionType::getCollisionObject() const {
  return *collisionObject_Accessor;
}

uci::type::OrbitCollisionType::CollisionObject& OrbitCollisionType::getCollisionObject() {
  return *collisionObject_Accessor;
}

uci::type::OrbitCollisionType& OrbitCollisionType::setCollisionObject(const uci::type::OrbitCollisionType::CollisionObject& accessor) {
  if (&accessor != collisionObject_Accessor.get()) {
    collisionObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PercentTypeValue OrbitCollisionType::getPercentageOfPartialCollision() const {
  if (percentageOfPartialCollision_Accessor) {
    return *percentageOfPartialCollision_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentageOfPartialCollision(): An attempt was made to get an optional field that was not enabled, call hasPercentageOfPartialCollision() to determine if it is safe to call getPercentageOfPartialCollision()");
}

uci::type::OrbitCollisionType& OrbitCollisionType::setPercentageOfPartialCollision(uci::type::PercentTypeValue value) {
  percentageOfPartialCollision_Accessor = value;
  return *this;
}

bool OrbitCollisionType::hasPercentageOfPartialCollision() const noexcept {
  return percentageOfPartialCollision_Accessor.has_value();
}

uci::type::OrbitCollisionType& OrbitCollisionType::clearPercentageOfPartialCollision() noexcept {
  percentageOfPartialCollision_Accessor.reset();
  return *this;
}

uci::type::UnitIntervalDoubleTypeValue OrbitCollisionType::getAbsoluteRisk() const {
  if (absoluteRisk_Accessor) {
    return *absoluteRisk_Accessor;
  }
  throw uci::base::UCIException("Error in getAbsoluteRisk(): An attempt was made to get an optional field that was not enabled, call hasAbsoluteRisk() to determine if it is safe to call getAbsoluteRisk()");
}

uci::type::OrbitCollisionType& OrbitCollisionType::setAbsoluteRisk(uci::type::UnitIntervalDoubleTypeValue value) {
  absoluteRisk_Accessor = value;
  return *this;
}

bool OrbitCollisionType::hasAbsoluteRisk() const noexcept {
  return absoluteRisk_Accessor.has_value();
}

uci::type::OrbitCollisionType& OrbitCollisionType::clearAbsoluteRisk() noexcept {
  absoluteRisk_Accessor.reset();
  return *this;
}

uci::type::DoubleNonNegativeTypeValue OrbitCollisionType::getRelativeRisk() const {
  if (relativeRisk_Accessor) {
    return *relativeRisk_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeRisk(): An attempt was made to get an optional field that was not enabled, call hasRelativeRisk() to determine if it is safe to call getRelativeRisk()");
}

uci::type::OrbitCollisionType& OrbitCollisionType::setRelativeRisk(uci::type::DoubleNonNegativeTypeValue value) {
  relativeRisk_Accessor = value;
  return *this;
}

bool OrbitCollisionType::hasRelativeRisk() const noexcept {
  return relativeRisk_Accessor.has_value();
}

uci::type::OrbitCollisionType& OrbitCollisionType::clearRelativeRisk() noexcept {
  relativeRisk_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitCollisionType> OrbitCollisionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitCollisionType : type};
  return (requestedType == uci::type::accessorType::orbitCollisionType) ? boost::make_unique<OrbitCollisionType>() : nullptr;
}

/**  */
namespace OrbitCollisionType_Names {

constexpr const char* Extern_Type_Name{"OrbitCollisionType"};
constexpr const char* CollisionObject_Name{"CollisionObject"};
constexpr const char* PercentageOfPartialCollision_Name{"PercentageOfPartialCollision"};
constexpr const char* AbsoluteRisk_Name{"AbsoluteRisk"};
constexpr const char* RelativeRisk_Name{"RelativeRisk"};

} // namespace OrbitCollisionType_Names

void OrbitCollisionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitCollisionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitCollisionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitCollisionType_Names::CollisionObject_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitCollisionType::CollisionObject& boundedList = accessor.getCollisionObject();
        const uci::type::OrbitCollisionType::CollisionObject::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitConflictObjectType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitCollisionType_Names::PercentageOfPartialCollision_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentageOfPartialCollision(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitCollisionType_Names::AbsoluteRisk_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAbsoluteRisk(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitCollisionType_Names::RelativeRisk_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRelativeRisk(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string OrbitCollisionType::serialize(const uci::type::OrbitCollisionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitCollisionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitCollisionType_Names::Extern_Type_Name);
  }
  {
    const uci::type::OrbitCollisionType::CollisionObject& boundedList = accessor.getCollisionObject();
    for (uci::type::OrbitCollisionType::CollisionObject::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitConflictObjectType::serialize(boundedList.at(i), node, OrbitCollisionType_Names::CollisionObject_Name);
    }
  }
  if (accessor.hasPercentageOfPartialCollision()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentageOfPartialCollision(), node, OrbitCollisionType_Names::PercentageOfPartialCollision_Name);
  }
  if (accessor.hasAbsoluteRisk()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAbsoluteRisk(), node, OrbitCollisionType_Names::AbsoluteRisk_Name);
  }
  if (accessor.hasRelativeRisk()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRelativeRisk(), node, OrbitCollisionType_Names::RelativeRisk_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitCollisionType& OrbitCollisionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitCollisionType>().release());
}

uci::type::OrbitCollisionType& OrbitCollisionType::create(const uci::type::OrbitCollisionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitCollisionType> newAccessor{boost::make_unique<asb_uci::type::OrbitCollisionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitCollisionType::destroy(uci::type::OrbitCollisionType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitCollisionType*>(&accessor);
}

} // namespace type

} // namespace uci

