/** @file PO_ComponentSettingsFocalPlaneArrayOpticalBandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_ComponentSettingsFocalPlaneArrayOpticalBandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ComponentControlsB_Type.h"
#include "asb_uci/type/FrequencyRangeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ComponentControlsB_Type.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayOpticalBandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsFocalPlaneArrayOpticalBandType::PO_ComponentSettingsFocalPlaneArrayOpticalBandType() = default;

PO_ComponentSettingsFocalPlaneArrayOpticalBandType::~PO_ComponentSettingsFocalPlaneArrayOpticalBandType() = default;

void PO_ComponentSettingsFocalPlaneArrayOpticalBandType::copy(const uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsFocalPlaneArrayOpticalBandType::copyImpl(const uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsFocalPlaneArrayOpticalBandType&>(accessor);
    if (accessorImpl.bandSetting_Accessor) {
      setBandSetting(*(accessorImpl.bandSetting_Accessor));
    } else {
      bandSetting_Accessor.reset();
    }
    if (accessorImpl.bandControls_Accessor) {
      setBandControls(*(accessorImpl.bandControls_Accessor));
    } else {
      bandControls_Accessor.reset();
    }
  }
}

void PO_ComponentSettingsFocalPlaneArrayOpticalBandType::reset() noexcept {
  bandSetting_Accessor.reset();
  bandControls_Accessor.reset();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType::PO_ComponentSettingsFocalPlaneArrayOpticalBandTypeChoice PO_ComponentSettingsFocalPlaneArrayOpticalBandType::getPO_ComponentSettingsFocalPlaneArrayOpticalBandTypeChoiceOrdinal() const noexcept {
  if (bandSetting_Accessor) {
    return PO_COMPONENTSETTINGSFOCALPLANEARRAYOPTICALBANDTYPE_CHOICE_BANDSETTING;
  }
  if (bandControls_Accessor) {
    return PO_COMPONENTSETTINGSFOCALPLANEARRAYOPTICALBANDTYPE_CHOICE_BANDCONTROLS;
  }
  return PO_COMPONENTSETTINGSFOCALPLANEARRAYOPTICALBANDTYPE_CHOICE_NONE;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::setPO_ComponentSettingsFocalPlaneArrayOpticalBandTypeChoiceOrdinal(uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType::PO_ComponentSettingsFocalPlaneArrayOpticalBandTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PO_COMPONENTSETTINGSFOCALPLANEARRAYOPTICALBANDTYPE_CHOICE_BANDSETTING:
      chooseBandSetting("setPO_ComponentSettingsFocalPlaneArrayOpticalBandTypeChoiceOrdinal", type);
      break;
    case PO_COMPONENTSETTINGSFOCALPLANEARRAYOPTICALBANDTYPE_CHOICE_BANDCONTROLS:
      chooseBandControls("setPO_ComponentSettingsFocalPlaneArrayOpticalBandTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPO_ComponentSettingsFocalPlaneArrayOpticalBandTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::FrequencyRangeType& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::getBandSetting_() const {
  if (bandSetting_Accessor) {
    return *bandSetting_Accessor;
  }
  throw uci::base::UCIException("Error in getBandSetting(): Unable to get BandSetting, field not selected");
}

const uci::type::FrequencyRangeType& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::getBandSetting() const {
  return getBandSetting_();
}

uci::type::FrequencyRangeType& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::getBandSetting() {
  return getBandSetting_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::setBandSetting(const uci::type::FrequencyRangeType& accessor) {
  chooseBandSetting();
  if (&accessor != bandSetting_Accessor.get()) {
    bandSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayOpticalBandType::isBandSetting() const noexcept {
  return static_cast<bool>(bandSetting_Accessor);
}

uci::type::FrequencyRangeType& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::chooseBandSetting(const std::string& method, uci::base::accessorType::AccessorType type) {
  bandControls_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyRangeType : type};
  if ((!bandSetting_Accessor) || (bandSetting_Accessor->getAccessorType() != requestedType)) {
    bandSetting_Accessor = FrequencyRangeType::create(type);
    if (!bandSetting_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *bandSetting_Accessor;
}

uci::type::FrequencyRangeType& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::chooseBandSetting(uci::base::accessorType::AccessorType type) {
  return chooseBandSetting("chooseBandSetting", type);
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::getBandControls_() const {
  if (bandControls_Accessor) {
    return *bandControls_Accessor;
  }
  throw uci::base::UCIException("Error in getBandControls(): Unable to get BandControls, field not selected");
}

const uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::getBandControls() const {
  return getBandControls_();
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::getBandControls() {
  return getBandControls_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::setBandControls(const uci::type::ComponentControlsB_Type& accessor) {
  chooseBandControls();
  if (&accessor != bandControls_Accessor.get()) {
    bandControls_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayOpticalBandType::isBandControls() const noexcept {
  return static_cast<bool>(bandControls_Accessor);
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::chooseBandControls(const std::string& method, uci::base::accessorType::AccessorType type) {
  bandSetting_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControlsB_Type : type};
  if ((!bandControls_Accessor) || (bandControls_Accessor->getAccessorType() != requestedType)) {
    bandControls_Accessor = ComponentControlsB_Type::create(type);
    if (!bandControls_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *bandControls_Accessor;
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::chooseBandControls(uci::base::accessorType::AccessorType type) {
  return chooseBandControls("chooseBandControls", type);
}

std::unique_ptr<PO_ComponentSettingsFocalPlaneArrayOpticalBandType> PO_ComponentSettingsFocalPlaneArrayOpticalBandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayOpticalBandType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayOpticalBandType) ? boost::make_unique<PO_ComponentSettingsFocalPlaneArrayOpticalBandType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsFocalPlaneArrayOpticalBandType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsFocalPlaneArrayOpticalBandType"};
constexpr const char* BandSetting_Name{"BandSetting"};
constexpr const char* BandControls_Name{"BandControls"};

} // namespace PO_ComponentSettingsFocalPlaneArrayOpticalBandType_Names

void PO_ComponentSettingsFocalPlaneArrayOpticalBandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsFocalPlaneArrayOpticalBandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayOpticalBandType_Names::BandSetting_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.chooseBandSetting(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayOpticalBandType_Names::BandControls_Name) {
      ComponentControlsB_Type::deserialize(valueType.second, accessor.chooseBandControls(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentSettingsFocalPlaneArrayOpticalBandType::serialize(const uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsFocalPlaneArrayOpticalBandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsFocalPlaneArrayOpticalBandType_Names::Extern_Type_Name);
  }
  if (accessor.isBandSetting()) {
    FrequencyRangeType::serialize(accessor.getBandSetting(), node, PO_ComponentSettingsFocalPlaneArrayOpticalBandType_Names::BandSetting_Name);
  } else if (accessor.isBandControls()) {
    ComponentControlsB_Type::serialize(accessor.getBandControls(), node, PO_ComponentSettingsFocalPlaneArrayOpticalBandType_Names::BandControls_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType>().release());
}

uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& PO_ComponentSettingsFocalPlaneArrayOpticalBandType::create(const uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsFocalPlaneArrayOpticalBandType::destroy(uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType*>(&accessor);
}

} // namespace type

} // namespace uci

