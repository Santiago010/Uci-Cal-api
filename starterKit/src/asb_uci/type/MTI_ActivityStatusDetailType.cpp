/** @file MTI_ActivityStatusDetailType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MTI_ActivityStatusDetailType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AreaChoiceType.h"
#include "../../../include/asb_uci/type/EstimatedPerformanceType.h"
#include "../../../include/asb_uci/type/MTI_ActivityStatusBaseType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AreaChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EstimatedPerformanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MTI_ActivityStatusDetailType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MTI_ActivityStatusDetailType::MTI_ActivityStatusDetailType()
  : estimatedPerformance_Accessor{boost::make_unique<EstimatedPerformance>(0, 5)} {
}

MTI_ActivityStatusDetailType::~MTI_ActivityStatusDetailType() = default;

void MTI_ActivityStatusDetailType::copy(const uci::type::MTI_ActivityStatusDetailType& accessor) {
  copyImpl(accessor, false);
}

void MTI_ActivityStatusDetailType::copyImpl(const uci::type::MTI_ActivityStatusDetailType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    MTI_ActivityStatusBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const MTI_ActivityStatusDetailType&>(accessor);
    if (accessorImpl.hasEstimatedERP()) {
      setEstimatedERP(accessorImpl.getEstimatedERP());
    } else {
      clearEstimatedERP();
    }
    if (accessorImpl.hasProductsProduced()) {
      setProductsProduced(accessorImpl.getProductsProduced());
    } else {
      clearProductsProduced();
    }
    if (accessorImpl.hasHitsReported()) {
      setHitsReported(accessorImpl.getHitsReported());
    } else {
      clearHitsReported();
    }
    setEstimatedPerformance(*(accessorImpl.estimatedPerformance_Accessor));
    if (accessorImpl.targetAreaScanned_Accessor) {
      setTargetAreaScanned(*(accessorImpl.targetAreaScanned_Accessor));
    } else {
      targetAreaScanned_Accessor.reset();
    }
    if (accessorImpl.hasTimeToService()) {
      setTimeToService(accessorImpl.getTimeToService());
    } else {
      clearTimeToService();
    }
    if (accessorImpl.hasAverageTimeToService()) {
      setAverageTimeToService(accessorImpl.getAverageTimeToService());
    } else {
      clearAverageTimeToService();
    }
  }
}

void MTI_ActivityStatusDetailType::reset() noexcept {
  MTI_ActivityStatusBaseType::reset();
  clearEstimatedERP();
  clearProductsProduced();
  clearHitsReported();
  estimatedPerformance_Accessor->reset();
  targetAreaScanned_Accessor.reset();
  clearTimeToService();
  clearAverageTimeToService();
}

uci::type::DecibelTypeValue MTI_ActivityStatusDetailType::getEstimatedERP() const {
  if (estimatedERP_Accessor) {
    return *estimatedERP_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedERP(): An attempt was made to get an optional field that was not enabled, call hasEstimatedERP() to determine if it is safe to call getEstimatedERP()");
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::setEstimatedERP(uci::type::DecibelTypeValue value) {
  estimatedERP_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusDetailType::hasEstimatedERP() const noexcept {
  return estimatedERP_Accessor.has_value();
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::clearEstimatedERP() noexcept {
  estimatedERP_Accessor.reset();
  return *this;
}

xs::UnsignedInt MTI_ActivityStatusDetailType::getProductsProduced() const {
  if (productsProduced_Accessor) {
    return *productsProduced_Accessor;
  }
  throw uci::base::UCIException("Error in getProductsProduced(): An attempt was made to get an optional field that was not enabled, call hasProductsProduced() to determine if it is safe to call getProductsProduced()");
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::setProductsProduced(xs::UnsignedInt value) {
  productsProduced_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusDetailType::hasProductsProduced() const noexcept {
  return productsProduced_Accessor.has_value();
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::clearProductsProduced() noexcept {
  productsProduced_Accessor.reset();
  return *this;
}

xs::UnsignedInt MTI_ActivityStatusDetailType::getHitsReported() const {
  if (hitsReported_Accessor) {
    return *hitsReported_Accessor;
  }
  throw uci::base::UCIException("Error in getHitsReported(): An attempt was made to get an optional field that was not enabled, call hasHitsReported() to determine if it is safe to call getHitsReported()");
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::setHitsReported(xs::UnsignedInt value) {
  hitsReported_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusDetailType::hasHitsReported() const noexcept {
  return hitsReported_Accessor.has_value();
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::clearHitsReported() noexcept {
  hitsReported_Accessor.reset();
  return *this;
}

const uci::type::MTI_ActivityStatusDetailType::EstimatedPerformance& MTI_ActivityStatusDetailType::getEstimatedPerformance() const {
  return *estimatedPerformance_Accessor;
}

uci::type::MTI_ActivityStatusDetailType::EstimatedPerformance& MTI_ActivityStatusDetailType::getEstimatedPerformance() {
  return *estimatedPerformance_Accessor;
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::setEstimatedPerformance(const uci::type::MTI_ActivityStatusDetailType::EstimatedPerformance& accessor) {
  if (&accessor != estimatedPerformance_Accessor.get()) {
    estimatedPerformance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AreaChoiceType& MTI_ActivityStatusDetailType::getTargetAreaScanned_() const {
  if (targetAreaScanned_Accessor) {
    return *targetAreaScanned_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetAreaScanned(): An attempt was made to get an optional field that was not enabled, call hasTargetAreaScanned() to determine if it is safe to call getTargetAreaScanned()");
}

const uci::type::AreaChoiceType& MTI_ActivityStatusDetailType::getTargetAreaScanned() const {
  return getTargetAreaScanned_();
}

uci::type::AreaChoiceType& MTI_ActivityStatusDetailType::getTargetAreaScanned() {
  return getTargetAreaScanned_();
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::setTargetAreaScanned(const uci::type::AreaChoiceType& accessor) {
  enableTargetAreaScanned();
  if (&accessor != targetAreaScanned_Accessor.get()) {
    targetAreaScanned_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MTI_ActivityStatusDetailType::hasTargetAreaScanned() const noexcept {
  return static_cast<bool>(targetAreaScanned_Accessor);
}

uci::type::AreaChoiceType& MTI_ActivityStatusDetailType::enableTargetAreaScanned(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::areaChoiceType : type};
  if ((!targetAreaScanned_Accessor) || (targetAreaScanned_Accessor->getAccessorType() != requestedType)) {
    targetAreaScanned_Accessor = AreaChoiceType::create(requestedType);
    if (!targetAreaScanned_Accessor) {
      throw uci::base::UCIException("Error in enableTargetAreaScanned(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *targetAreaScanned_Accessor;
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::clearTargetAreaScanned() noexcept {
  targetAreaScanned_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue MTI_ActivityStatusDetailType::getTimeToService() const {
  if (timeToService_Accessor) {
    return *timeToService_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeToService(): An attempt was made to get an optional field that was not enabled, call hasTimeToService() to determine if it is safe to call getTimeToService()");
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::setTimeToService(uci::type::DurationTypeValue value) {
  timeToService_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusDetailType::hasTimeToService() const noexcept {
  return timeToService_Accessor.has_value();
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::clearTimeToService() noexcept {
  timeToService_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue MTI_ActivityStatusDetailType::getAverageTimeToService() const {
  if (averageTimeToService_Accessor) {
    return *averageTimeToService_Accessor;
  }
  throw uci::base::UCIException("Error in getAverageTimeToService(): An attempt was made to get an optional field that was not enabled, call hasAverageTimeToService() to determine if it is safe to call getAverageTimeToService()");
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::setAverageTimeToService(uci::type::DurationTypeValue value) {
  averageTimeToService_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusDetailType::hasAverageTimeToService() const noexcept {
  return averageTimeToService_Accessor.has_value();
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::clearAverageTimeToService() noexcept {
  averageTimeToService_Accessor.reset();
  return *this;
}

std::unique_ptr<MTI_ActivityStatusDetailType> MTI_ActivityStatusDetailType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mTI_ActivityStatusDetailType : type};
  return (requestedType == uci::type::accessorType::mTI_ActivityStatusDetailType) ? boost::make_unique<MTI_ActivityStatusDetailType>() : nullptr;
}

/**  */
namespace MTI_ActivityStatusDetailType_Names {

constexpr const char* Extern_Type_Name{"MTI_ActivityStatusDetailType"};
constexpr const char* EstimatedERP_Name{"EstimatedERP"};
constexpr const char* ProductsProduced_Name{"ProductsProduced"};
constexpr const char* HitsReported_Name{"HitsReported"};
constexpr const char* EstimatedPerformance_Name{"EstimatedPerformance"};
constexpr const char* TargetAreaScanned_Name{"TargetAreaScanned"};
constexpr const char* TimeToService_Name{"TimeToService"};
constexpr const char* AverageTimeToService_Name{"AverageTimeToService"};

} // namespace MTI_ActivityStatusDetailType_Names

void MTI_ActivityStatusDetailType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MTI_ActivityStatusDetailType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MTI_ActivityStatusDetailType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusDetailType_Names::EstimatedERP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedERP(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusDetailType_Names::ProductsProduced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProductsProduced(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusDetailType_Names::HitsReported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHitsReported(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusDetailType_Names::EstimatedPerformance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MTI_ActivityStatusDetailType::EstimatedPerformance& boundedList = accessor.getEstimatedPerformance();
        const uci::type::MTI_ActivityStatusDetailType::EstimatedPerformance::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EstimatedPerformanceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusDetailType_Names::TargetAreaScanned_Name) {
      AreaChoiceType::deserialize(valueType.second, accessor.enableTargetAreaScanned(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusDetailType_Names::TimeToService_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeToService(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusDetailType_Names::AverageTimeToService_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAverageTimeToService(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
  MTI_ActivityStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string MTI_ActivityStatusDetailType::serialize(const uci::type::MTI_ActivityStatusDetailType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MTI_ActivityStatusDetailType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MTI_ActivityStatusDetailType_Names::Extern_Type_Name);
  }
  MTI_ActivityStatusBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasEstimatedERP()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedERP(), node, MTI_ActivityStatusDetailType_Names::EstimatedERP_Name);
  }
  if (accessor.hasProductsProduced()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getProductsProduced(), node, MTI_ActivityStatusDetailType_Names::ProductsProduced_Name);
  }
  if (accessor.hasHitsReported()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHitsReported(), node, MTI_ActivityStatusDetailType_Names::HitsReported_Name);
  }
  {
    const uci::type::MTI_ActivityStatusDetailType::EstimatedPerformance& boundedList = accessor.getEstimatedPerformance();
    for (uci::type::MTI_ActivityStatusDetailType::EstimatedPerformance::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EstimatedPerformanceType::serialize(boundedList.at(i), node, MTI_ActivityStatusDetailType_Names::EstimatedPerformance_Name);
    }
  }
  if (accessor.hasTargetAreaScanned()) {
    AreaChoiceType::serialize(accessor.getTargetAreaScanned(), node, MTI_ActivityStatusDetailType_Names::TargetAreaScanned_Name);
  }
  if (accessor.hasTimeToService()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTimeToService(), node, MTI_ActivityStatusDetailType_Names::TimeToService_Name);
  }
  if (accessor.hasAverageTimeToService()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getAverageTimeToService(), node, MTI_ActivityStatusDetailType_Names::AverageTimeToService_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MTI_ActivityStatusDetailType>().release());
}

uci::type::MTI_ActivityStatusDetailType& MTI_ActivityStatusDetailType::create(const uci::type::MTI_ActivityStatusDetailType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MTI_ActivityStatusDetailType> newAccessor{boost::make_unique<asb_uci::type::MTI_ActivityStatusDetailType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MTI_ActivityStatusDetailType::destroy(uci::type::MTI_ActivityStatusDetailType& accessor) {
  delete dynamic_cast<asb_uci::type::MTI_ActivityStatusDetailType*>(&accessor);
}

} // namespace type

} // namespace uci

