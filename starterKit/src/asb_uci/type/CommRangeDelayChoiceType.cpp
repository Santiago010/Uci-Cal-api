/** @file CommRangeDelayChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommRangeDelayChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EmptyType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommRangeDelayChoiceType.h"
#include "uci/type/DurationType.h"
#include "uci/type/EmptyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommRangeDelayChoiceType::CommRangeDelayChoiceType() = default;

CommRangeDelayChoiceType::~CommRangeDelayChoiceType() = default;

void CommRangeDelayChoiceType::copy(const uci::type::CommRangeDelayChoiceType& accessor) {
  copyImpl(accessor, false);
}

void CommRangeDelayChoiceType::copyImpl(const uci::type::CommRangeDelayChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommRangeDelayChoiceType&>(accessor);
    if (accessorImpl.active_Accessor) {
      setActive(*(accessorImpl.active_Accessor));
    } else {
      active_Accessor.reset();
    }
    passive_Accessor = (accessorImpl.passive_Accessor ? accessorImpl.passive_Accessor : boost::none);
  }
}

void CommRangeDelayChoiceType::reset() noexcept {
  active_Accessor.reset();
  passive_Accessor.reset();
}

uci::type::CommRangeDelayChoiceType::CommRangeDelayChoiceTypeChoice CommRangeDelayChoiceType::getCommRangeDelayChoiceTypeChoiceOrdinal() const noexcept {
  if (active_Accessor) {
    return COMMRANGEDELAYCHOICETYPE_CHOICE_ACTIVE;
  }
  if (passive_Accessor) {
    return COMMRANGEDELAYCHOICETYPE_CHOICE_PASSIVE;
  }
  return COMMRANGEDELAYCHOICETYPE_CHOICE_NONE;
}

uci::type::CommRangeDelayChoiceType& CommRangeDelayChoiceType::setCommRangeDelayChoiceTypeChoiceOrdinal(uci::type::CommRangeDelayChoiceType::CommRangeDelayChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case COMMRANGEDELAYCHOICETYPE_CHOICE_ACTIVE:
      chooseActive("setCommRangeDelayChoiceTypeChoiceOrdinal", type);
      break;
    case COMMRANGEDELAYCHOICETYPE_CHOICE_PASSIVE:
      choosePassive();
      break;
    default:
      throw uci::base::UCIException("Error in setCommRangeDelayChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EmptyType& CommRangeDelayChoiceType::getActive_() const {
  if (active_Accessor) {
    return *active_Accessor;
  }
  throw uci::base::UCIException("Error in getActive(): An attempt was made to get an optional field that was not enabled, call hasActive() to determine if it is safe to call getActive()");
}

const uci::type::EmptyType& CommRangeDelayChoiceType::getActive() const {
  return getActive_();
}

uci::type::EmptyType& CommRangeDelayChoiceType::getActive() {
  return getActive_();
}

uci::type::CommRangeDelayChoiceType& CommRangeDelayChoiceType::setActive(const uci::type::EmptyType& value) {
  return setActive(value.c_str());
}

uci::type::CommRangeDelayChoiceType& CommRangeDelayChoiceType::setActive(const std::string& value) {
  return setActive(value.c_str());
}

uci::type::CommRangeDelayChoiceType& CommRangeDelayChoiceType::setActive(const char * value) {
  chooseActive().setStringValue(value);
  return *this;
}

bool CommRangeDelayChoiceType::isActive() const noexcept {
  return static_cast<bool>(active_Accessor);
}

uci::type::EmptyType& CommRangeDelayChoiceType::chooseActive(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  passive_Accessor.reset();
  if (!active_Accessor) {
    active_Accessor = EmptyType::create(type);
  }
  return *active_Accessor;
}

uci::type::EmptyType& CommRangeDelayChoiceType::chooseActive(uci::base::accessorType::AccessorType type) {
  return chooseActive("chooseActive", type);
}

uci::type::DurationTypeValue CommRangeDelayChoiceType::getPassive() const {
  if (passive_Accessor) {
    return *passive_Accessor;
  }
  throw uci::base::UCIException("Error in getPassive(): Unable to get Passive, field not selected");
}

uci::type::CommRangeDelayChoiceType& CommRangeDelayChoiceType::setPassive(uci::type::DurationTypeValue value) {
  choosePassive();
  passive_Accessor = value;
  return *this;
}

bool CommRangeDelayChoiceType::isPassive() const noexcept {
  return static_cast<bool>(passive_Accessor);
}

void CommRangeDelayChoiceType::choosePassive() {
  active_Accessor.reset();
  if (!passive_Accessor) {
    passive_Accessor = boost::optional<asb_xs::Duration>();
  }
}

std::unique_ptr<CommRangeDelayChoiceType> CommRangeDelayChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commRangeDelayChoiceType : type};
  return (requestedType == uci::type::accessorType::commRangeDelayChoiceType) ? boost::make_unique<CommRangeDelayChoiceType>() : nullptr;
}

/**  */
namespace CommRangeDelayChoiceType_Names {

constexpr const char* Extern_Type_Name{"CommRangeDelayChoiceType"};
constexpr const char* Active_Name{"Active"};
constexpr const char* Passive_Name{"Passive"};

} // namespace CommRangeDelayChoiceType_Names

void CommRangeDelayChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommRangeDelayChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommRangeDelayChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommRangeDelayChoiceType_Names::Active_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseActive().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CommRangeDelayChoiceType_Names::Passive_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPassive(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string CommRangeDelayChoiceType::serialize(const uci::type::CommRangeDelayChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommRangeDelayChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommRangeDelayChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isActive()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getActive(), node, CommRangeDelayChoiceType_Names::Active_Name);
  } else if (accessor.isPassive()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPassive(), node, CommRangeDelayChoiceType_Names::Passive_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommRangeDelayChoiceType& CommRangeDelayChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommRangeDelayChoiceType>().release());
}

uci::type::CommRangeDelayChoiceType& CommRangeDelayChoiceType::create(const uci::type::CommRangeDelayChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommRangeDelayChoiceType> newAccessor{boost::make_unique<asb_uci::type::CommRangeDelayChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommRangeDelayChoiceType::destroy(uci::type::CommRangeDelayChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::CommRangeDelayChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

