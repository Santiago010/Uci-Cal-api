/** @file EmitterIdentityConfidenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EmitterIdentityConfidenceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EmitterIdentityType.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmitterIdentityConfidenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmitterIdentityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EmitterIdentityConfidenceType::EmitterIdentityConfidenceType()
  : emitterCategory_Accessor{boost::make_unique<EmitterIdentityType>()} {
}

EmitterIdentityConfidenceType::~EmitterIdentityConfidenceType() = default;

void EmitterIdentityConfidenceType::copy(const uci::type::EmitterIdentityConfidenceType& accessor) {
  copyImpl(accessor, false);
}

void EmitterIdentityConfidenceType::copyImpl(const uci::type::EmitterIdentityConfidenceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EmitterIdentityConfidenceType&>(accessor);
    setEmitterCategory(*(accessorImpl.emitterCategory_Accessor));
    setConfidence(accessorImpl.confidence_Accessor);
    if (accessorImpl.hasMatchingParameterCount()) {
      setMatchingParameterCount(accessorImpl.getMatchingParameterCount());
    } else {
      clearMatchingParameterCount();
    }
    if (accessorImpl.operatorEvaluated_Accessor) {
      setOperatorEvaluated(*(accessorImpl.operatorEvaluated_Accessor));
    } else {
      operatorEvaluated_Accessor.reset();
    }
  }
}

void EmitterIdentityConfidenceType::reset() noexcept {
  emitterCategory_Accessor->reset();
  confidence_Accessor = 0.0;
  clearMatchingParameterCount();
  operatorEvaluated_Accessor.reset();
}

const uci::type::EmitterIdentityType& EmitterIdentityConfidenceType::getEmitterCategory() const {
  return *emitterCategory_Accessor;
}

uci::type::EmitterIdentityType& EmitterIdentityConfidenceType::getEmitterCategory() {
  return *emitterCategory_Accessor;
}

uci::type::EmitterIdentityConfidenceType& EmitterIdentityConfidenceType::setEmitterCategory(const uci::type::EmitterIdentityType& accessor) {
  if (&accessor != emitterCategory_Accessor.get()) {
    emitterCategory_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PercentTypeValue EmitterIdentityConfidenceType::getConfidence() const {
  return confidence_Accessor;
}

uci::type::EmitterIdentityConfidenceType& EmitterIdentityConfidenceType::setConfidence(uci::type::PercentTypeValue value) {
  confidence_Accessor = value;
  return *this;
}


xs::UnsignedInt EmitterIdentityConfidenceType::getMatchingParameterCount() const {
  if (matchingParameterCount_Accessor) {
    return *matchingParameterCount_Accessor;
  }
  throw uci::base::UCIException("Error in getMatchingParameterCount(): An attempt was made to get an optional field that was not enabled, call hasMatchingParameterCount() to determine if it is safe to call getMatchingParameterCount()");
}

uci::type::EmitterIdentityConfidenceType& EmitterIdentityConfidenceType::setMatchingParameterCount(xs::UnsignedInt value) {
  matchingParameterCount_Accessor = value;
  return *this;
}

bool EmitterIdentityConfidenceType::hasMatchingParameterCount() const noexcept {
  return matchingParameterCount_Accessor.has_value();
}

uci::type::EmitterIdentityConfidenceType& EmitterIdentityConfidenceType::clearMatchingParameterCount() noexcept {
  matchingParameterCount_Accessor.reset();
  return *this;
}

uci::type::EmptyType& EmitterIdentityConfidenceType::getOperatorEvaluated_() const {
  if (operatorEvaluated_Accessor) {
    return *operatorEvaluated_Accessor;
  }
  throw uci::base::UCIException("Error in getOperatorEvaluated(): An attempt was made to get an optional field that was not enabled, call hasOperatorEvaluated() to determine if it is safe to call getOperatorEvaluated()");
}

const uci::type::EmptyType& EmitterIdentityConfidenceType::getOperatorEvaluated() const {
  return getOperatorEvaluated_();
}

uci::type::EmptyType& EmitterIdentityConfidenceType::getOperatorEvaluated() {
  return getOperatorEvaluated_();
}

uci::type::EmitterIdentityConfidenceType& EmitterIdentityConfidenceType::setOperatorEvaluated(const uci::type::EmptyType& value) {
  return setOperatorEvaluated(value.c_str());
}

uci::type::EmitterIdentityConfidenceType& EmitterIdentityConfidenceType::setOperatorEvaluated(const std::string& value) {
  return setOperatorEvaluated(value.c_str());
}

uci::type::EmitterIdentityConfidenceType& EmitterIdentityConfidenceType::setOperatorEvaluated(const char* value) {
  enableOperatorEvaluated().setStringValue(value);
  return *this;
}

bool EmitterIdentityConfidenceType::hasOperatorEvaluated() const noexcept {
  return static_cast<bool>(operatorEvaluated_Accessor);
}

uci::type::EmptyType& EmitterIdentityConfidenceType::enableOperatorEvaluated(uci::base::accessorType::AccessorType type) {
  if (!operatorEvaluated_Accessor) {
    operatorEvaluated_Accessor = EmptyType::create(type);
  }
  return *operatorEvaluated_Accessor;
}

uci::type::EmitterIdentityConfidenceType& EmitterIdentityConfidenceType::clearOperatorEvaluated() noexcept {
  operatorEvaluated_Accessor.reset();
  return *this;
}

std::unique_ptr<EmitterIdentityConfidenceType> EmitterIdentityConfidenceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emitterIdentityConfidenceType : type};
  return (requestedType == uci::type::accessorType::emitterIdentityConfidenceType) ? boost::make_unique<EmitterIdentityConfidenceType>() : nullptr;
}

/**  */
namespace EmitterIdentityConfidenceType_Names {

constexpr const char* Extern_Type_Name{"EmitterIdentityConfidenceType"};
constexpr const char* EmitterCategory_Name{"EmitterCategory"};
constexpr const char* Confidence_Name{"Confidence"};
constexpr const char* MatchingParameterCount_Name{"MatchingParameterCount"};
constexpr const char* OperatorEvaluated_Name{"OperatorEvaluated"};

} // namespace EmitterIdentityConfidenceType_Names

void EmitterIdentityConfidenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EmitterIdentityConfidenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EmitterIdentityConfidenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EmitterIdentityConfidenceType_Names::EmitterCategory_Name) {
      EmitterIdentityType::deserialize(valueType.second, accessor.getEmitterCategory(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmitterIdentityConfidenceType_Names::Confidence_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConfidence(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EmitterIdentityConfidenceType_Names::MatchingParameterCount_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMatchingParameterCount(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + EmitterIdentityConfidenceType_Names::OperatorEvaluated_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOperatorEvaluated(*value);
      }
    }
  }
}

std::string EmitterIdentityConfidenceType::serialize(const uci::type::EmitterIdentityConfidenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EmitterIdentityConfidenceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EmitterIdentityConfidenceType_Names::Extern_Type_Name);
  }
  EmitterIdentityType::serialize(accessor.getEmitterCategory(), node, EmitterIdentityConfidenceType_Names::EmitterCategory_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getConfidence(), node, EmitterIdentityConfidenceType_Names::Confidence_Name);
  if (accessor.hasMatchingParameterCount()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getMatchingParameterCount(), node, EmitterIdentityConfidenceType_Names::MatchingParameterCount_Name);
  }
  if (accessor.hasOperatorEvaluated()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getOperatorEvaluated(), node, EmitterIdentityConfidenceType_Names::OperatorEvaluated_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EmitterIdentityConfidenceType& EmitterIdentityConfidenceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EmitterIdentityConfidenceType>().release());
}

uci::type::EmitterIdentityConfidenceType& EmitterIdentityConfidenceType::create(const uci::type::EmitterIdentityConfidenceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EmitterIdentityConfidenceType> newAccessor{boost::make_unique<asb_uci::type::EmitterIdentityConfidenceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EmitterIdentityConfidenceType::destroy(uci::type::EmitterIdentityConfidenceType& accessor) {
  delete dynamic_cast<asb_uci::type::EmitterIdentityConfidenceType*>(&accessor);
}

} // namespace type

} // namespace uci

