/** @file CapabilitySpecificationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CapabilitySpecificationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/MDF_ID_Type.h"
#include "../../../include/asb_uci/type/SupportCapabilityID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilitySpecificationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MDF_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SupportCapabilityID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CapabilitySpecificationType::CapabilitySpecificationType()
  : capabilityID_Accessor{boost::make_unique<CapabilityID_Type>()},
    supportCapabilityID_Accessor{boost::make_unique<SupportCapabilityID>(0, SIZE_MAX)} {
}

CapabilitySpecificationType::~CapabilitySpecificationType() = default;

void CapabilitySpecificationType::copy(const uci::type::CapabilitySpecificationType& accessor) {
  copyImpl(accessor, false);
}

void CapabilitySpecificationType::copyImpl(const uci::type::CapabilitySpecificationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CapabilitySpecificationType&>(accessor);
    setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    setSupportCapabilityID(*(accessorImpl.supportCapabilityID_Accessor));
    if (accessorImpl.mDF_ID_Accessor) {
      setMDF_ID(*(accessorImpl.mDF_ID_Accessor));
    } else {
      mDF_ID_Accessor.reset();
    }
  }
}

void CapabilitySpecificationType::reset() noexcept {
  capabilityID_Accessor->reset();
  supportCapabilityID_Accessor->reset();
  mDF_ID_Accessor.reset();
}

const uci::type::CapabilityID_Type& CapabilitySpecificationType::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::CapabilityID_Type& CapabilitySpecificationType::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::CapabilitySpecificationType& CapabilitySpecificationType::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilitySpecificationType::SupportCapabilityID& CapabilitySpecificationType::getSupportCapabilityID() const {
  return *supportCapabilityID_Accessor;
}

uci::type::CapabilitySpecificationType::SupportCapabilityID& CapabilitySpecificationType::getSupportCapabilityID() {
  return *supportCapabilityID_Accessor;
}

uci::type::CapabilitySpecificationType& CapabilitySpecificationType::setSupportCapabilityID(const uci::type::CapabilitySpecificationType::SupportCapabilityID& accessor) {
  if (&accessor != supportCapabilityID_Accessor.get()) {
    supportCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MDF_ID_Type& CapabilitySpecificationType::getMDF_ID_() const {
  if (mDF_ID_Accessor) {
    return *mDF_ID_Accessor;
  }
  throw uci::base::UCIException("Error in getMDF_ID(): An attempt was made to get an optional field that was not enabled, call hasMDF_ID() to determine if it is safe to call getMDF_ID()");
}

const uci::type::MDF_ID_Type& CapabilitySpecificationType::getMDF_ID() const {
  return getMDF_ID_();
}

uci::type::MDF_ID_Type& CapabilitySpecificationType::getMDF_ID() {
  return getMDF_ID_();
}

uci::type::CapabilitySpecificationType& CapabilitySpecificationType::setMDF_ID(const uci::type::MDF_ID_Type& accessor) {
  enableMDF_ID();
  if (&accessor != mDF_ID_Accessor.get()) {
    mDF_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CapabilitySpecificationType::hasMDF_ID() const noexcept {
  return static_cast<bool>(mDF_ID_Accessor);
}

uci::type::MDF_ID_Type& CapabilitySpecificationType::enableMDF_ID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mDF_ID_Type : type};
  if ((!mDF_ID_Accessor) || (mDF_ID_Accessor->getAccessorType() != requestedType)) {
    mDF_ID_Accessor = MDF_ID_Type::create(requestedType);
    if (!mDF_ID_Accessor) {
      throw uci::base::UCIException("Error in enableMDF_ID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mDF_ID_Accessor;
}

uci::type::CapabilitySpecificationType& CapabilitySpecificationType::clearMDF_ID() noexcept {
  mDF_ID_Accessor.reset();
  return *this;
}

std::unique_ptr<CapabilitySpecificationType> CapabilitySpecificationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilitySpecificationType : type};
  return (requestedType == uci::type::accessorType::capabilitySpecificationType) ? boost::make_unique<CapabilitySpecificationType>() : nullptr;
}

/**  */
namespace CapabilitySpecificationType_Names {

constexpr const char* Extern_Type_Name{"CapabilitySpecificationType"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* SupportCapabilityID_Name{"SupportCapabilityID"};
constexpr const char* MDF_ID_Name{"MDF_ID"};

} // namespace CapabilitySpecificationType_Names

void CapabilitySpecificationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilitySpecificationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilitySpecificationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilitySpecificationType_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.getCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilitySpecificationType_Names::SupportCapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilitySpecificationType::SupportCapabilityID& boundedList = accessor.getSupportCapabilityID();
        const uci::type::CapabilitySpecificationType::SupportCapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SupportCapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilitySpecificationType_Names::MDF_ID_Name) {
      MDF_ID_Type::deserialize(valueType.second, accessor.enableMDF_ID(), nodeName, nsPrefix);
    }
  }
}

std::string CapabilitySpecificationType::serialize(const uci::type::CapabilitySpecificationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CapabilitySpecificationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilitySpecificationType_Names::Extern_Type_Name);
  }
  CapabilityID_Type::serialize(accessor.getCapabilityID(), node, CapabilitySpecificationType_Names::CapabilityID_Name);
  {
    const uci::type::CapabilitySpecificationType::SupportCapabilityID& boundedList = accessor.getSupportCapabilityID();
    for (uci::type::CapabilitySpecificationType::SupportCapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SupportCapabilityID_Type::serialize(boundedList.at(i), node, CapabilitySpecificationType_Names::SupportCapabilityID_Name);
    }
  }
  if (accessor.hasMDF_ID()) {
    MDF_ID_Type::serialize(accessor.getMDF_ID(), node, CapabilitySpecificationType_Names::MDF_ID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CapabilitySpecificationType& CapabilitySpecificationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CapabilitySpecificationType>().release());
}

uci::type::CapabilitySpecificationType& CapabilitySpecificationType::create(const uci::type::CapabilitySpecificationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CapabilitySpecificationType> newAccessor{boost::make_unique<asb_uci::type::CapabilitySpecificationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CapabilitySpecificationType::destroy(uci::type::CapabilitySpecificationType& accessor) {
  delete dynamic_cast<asb_uci::type::CapabilitySpecificationType*>(&accessor);
}

} // namespace type

} // namespace uci

