/** @file ActivityCommandBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ActivityCommandBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityID_Type.h"
#include "../../../include/asb_uci/type/CapabilityCommandStateEnum.h"
#include "../../../include/asb_uci/type/CommandBaseType.h"
#include "../../../include/asb_uci/type/ComparableRankingType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityCommandBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityCommandStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComparableRankingType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ActivityCommandBaseType::ActivityCommandBaseType()
  : activityID_Accessor{boost::make_unique<ActivityID_Type>()} {
}

ActivityCommandBaseType::~ActivityCommandBaseType() = default;

void ActivityCommandBaseType::copy(const uci::type::ActivityCommandBaseType& accessor) {
  copyImpl(accessor, false);
}

void ActivityCommandBaseType::copyImpl(const uci::type::ActivityCommandBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::activityCommandBaseType)) {
      CommandBaseType::copyImpl(accessor, false);
      const auto& accessorImpl = dynamic_cast<const ActivityCommandBaseType&>(accessor);
      setActivityID(*(accessorImpl.activityID_Accessor));
      if (accessorImpl.changeActivityRank_Accessor) {
        setChangeActivityRank(*(accessorImpl.changeActivityRank_Accessor));
      } else {
        changeActivityRank_Accessor.reset();
      }
      if (accessorImpl.changeActivityState_Accessor) {
        setChangeActivityState(*(accessorImpl.changeActivityState_Accessor));
      } else {
        changeActivityState_Accessor.reset();
      }
      if (accessorImpl.hasDeleteActivity()) {
        setDeleteActivity(accessorImpl.getDeleteActivity());
      } else {
        clearDeleteActivity();
      }
      if (accessorImpl.hasUnassignActivity()) {
        setUnassignActivity(accessorImpl.getUnassignActivity());
      } else {
        clearUnassignActivity();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void ActivityCommandBaseType::reset() noexcept {
  CommandBaseType::reset();
  activityID_Accessor->reset();
  changeActivityRank_Accessor.reset();
  changeActivityState_Accessor.reset();
  clearDeleteActivity();
  clearUnassignActivity();
}

const uci::type::ActivityID_Type& ActivityCommandBaseType::getActivityID() const {
  return *activityID_Accessor;
}

uci::type::ActivityID_Type& ActivityCommandBaseType::getActivityID() {
  return *activityID_Accessor;
}

uci::type::ActivityCommandBaseType& ActivityCommandBaseType::setActivityID(const uci::type::ActivityID_Type& accessor) {
  if (&accessor != activityID_Accessor.get()) {
    activityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ComparableRankingType& ActivityCommandBaseType::getChangeActivityRank_() const {
  if (changeActivityRank_Accessor) {
    return *changeActivityRank_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeActivityRank(): An attempt was made to get an optional field that was not enabled, call hasChangeActivityRank() to determine if it is safe to call getChangeActivityRank()");
}

const uci::type::ComparableRankingType& ActivityCommandBaseType::getChangeActivityRank() const {
  return getChangeActivityRank_();
}

uci::type::ComparableRankingType& ActivityCommandBaseType::getChangeActivityRank() {
  return getChangeActivityRank_();
}

uci::type::ActivityCommandBaseType& ActivityCommandBaseType::setChangeActivityRank(const uci::type::ComparableRankingType& accessor) {
  enableChangeActivityRank();
  if (&accessor != changeActivityRank_Accessor.get()) {
    changeActivityRank_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityCommandBaseType::hasChangeActivityRank() const noexcept {
  return static_cast<bool>(changeActivityRank_Accessor);
}

uci::type::ComparableRankingType& ActivityCommandBaseType::enableChangeActivityRank(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::comparableRankingType : type};
  if ((!changeActivityRank_Accessor) || (changeActivityRank_Accessor->getAccessorType() != requestedType)) {
    changeActivityRank_Accessor = ComparableRankingType::create(requestedType);
    if (!changeActivityRank_Accessor) {
      throw uci::base::UCIException("Error in enableChangeActivityRank(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeActivityRank_Accessor;
}

uci::type::ActivityCommandBaseType& ActivityCommandBaseType::clearChangeActivityRank() noexcept {
  changeActivityRank_Accessor.reset();
  return *this;
}

uci::type::CapabilityCommandStateEnum& ActivityCommandBaseType::getChangeActivityState_() const {
  if (changeActivityState_Accessor) {
    return *changeActivityState_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeActivityState(): An attempt was made to get an optional field that was not enabled, call hasChangeActivityState() to determine if it is safe to call getChangeActivityState()");
}

const uci::type::CapabilityCommandStateEnum& ActivityCommandBaseType::getChangeActivityState() const {
  return getChangeActivityState_();
}

uci::type::CapabilityCommandStateEnum& ActivityCommandBaseType::getChangeActivityState() {
  return getChangeActivityState_();
}

uci::type::ActivityCommandBaseType& ActivityCommandBaseType::setChangeActivityState(const uci::type::CapabilityCommandStateEnum& accessor) {
  enableChangeActivityState();
  if (&accessor != changeActivityState_Accessor.get()) {
    changeActivityState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ActivityCommandBaseType& ActivityCommandBaseType::setChangeActivityState(const uci::type::CapabilityCommandStateEnum::EnumerationItem value) {
  enableChangeActivityState().setValue(value);
  return *this;
}

bool ActivityCommandBaseType::hasChangeActivityState() const noexcept {
  return static_cast<bool>(changeActivityState_Accessor);
}

uci::type::CapabilityCommandStateEnum& ActivityCommandBaseType::enableChangeActivityState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandStateEnum : type};
  if ((!changeActivityState_Accessor) || (changeActivityState_Accessor->getAccessorType() != requestedType)) {
    changeActivityState_Accessor = CapabilityCommandStateEnum::create(requestedType);
    if (!changeActivityState_Accessor) {
      throw uci::base::UCIException("Error in enableChangeActivityState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeActivityState_Accessor;
}

uci::type::ActivityCommandBaseType& ActivityCommandBaseType::clearChangeActivityState() noexcept {
  changeActivityState_Accessor.reset();
  return *this;
}

xs::Boolean ActivityCommandBaseType::getDeleteActivity() const {
  if (deleteActivity_Accessor) {
    return *deleteActivity_Accessor;
  }
  throw uci::base::UCIException("Error in getDeleteActivity(): An attempt was made to get an optional field that was not enabled, call hasDeleteActivity() to determine if it is safe to call getDeleteActivity()");
}

uci::type::ActivityCommandBaseType& ActivityCommandBaseType::setDeleteActivity(xs::Boolean value) {
  deleteActivity_Accessor = value;
  return *this;
}

bool ActivityCommandBaseType::hasDeleteActivity() const noexcept {
  return deleteActivity_Accessor.has_value();
}

uci::type::ActivityCommandBaseType& ActivityCommandBaseType::clearDeleteActivity() noexcept {
  deleteActivity_Accessor.reset();
  return *this;
}

xs::Boolean ActivityCommandBaseType::getUnassignActivity() const {
  if (unassignActivity_Accessor) {
    return *unassignActivity_Accessor;
  }
  throw uci::base::UCIException("Error in getUnassignActivity(): An attempt was made to get an optional field that was not enabled, call hasUnassignActivity() to determine if it is safe to call getUnassignActivity()");
}

uci::type::ActivityCommandBaseType& ActivityCommandBaseType::setUnassignActivity(xs::Boolean value) {
  unassignActivity_Accessor = value;
  return *this;
}

bool ActivityCommandBaseType::hasUnassignActivity() const noexcept {
  return unassignActivity_Accessor.has_value();
}

uci::type::ActivityCommandBaseType& ActivityCommandBaseType::clearUnassignActivity() noexcept {
  unassignActivity_Accessor.reset();
  return *this;
}

std::unique_ptr<ActivityCommandBaseType> ActivityCommandBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityCommandBaseType : type};
  return std::unique_ptr<ActivityCommandBaseType>(dynamic_cast<ActivityCommandBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace ActivityCommandBaseType_Names {

constexpr const char* Extern_Type_Name{"ActivityCommandBaseType"};
constexpr const char* ActivityID_Name{"ActivityID"};
constexpr const char* ChangeActivityRank_Name{"ChangeActivityRank"};
constexpr const char* ChangeActivityState_Name{"ChangeActivityState"};
constexpr const char* DeleteActivity_Name{"DeleteActivity"};
constexpr const char* UnassignActivity_Name{"UnassignActivity"};

} // namespace ActivityCommandBaseType_Names

void ActivityCommandBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActivityCommandBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActivityCommandBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ActivityCommandBaseType_Names::ActivityID_Name) {
      ActivityID_Type::deserialize(valueType.second, accessor.getActivityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityCommandBaseType_Names::ChangeActivityRank_Name) {
      ComparableRankingType::deserialize(valueType.second, accessor.enableChangeActivityRank(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityCommandBaseType_Names::ChangeActivityState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableChangeActivityState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ActivityCommandBaseType_Names::DeleteActivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDeleteActivity(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ActivityCommandBaseType_Names::UnassignActivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnassignActivity(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
  CommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ActivityCommandBaseType::serialize(const uci::type::ActivityCommandBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ActivityCommandBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::activityCommandBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, ActivityCommandBaseType_Names::Extern_Type_Name);
    }
    CommandBaseType::serialize(accessor, node, "", false, false, false);
    ActivityID_Type::serialize(accessor.getActivityID(), node, ActivityCommandBaseType_Names::ActivityID_Name);
    if (accessor.hasChangeActivityRank()) {
      ComparableRankingType::serialize(accessor.getChangeActivityRank(), node, ActivityCommandBaseType_Names::ChangeActivityRank_Name);
    }
    if (accessor.hasChangeActivityState()) {
      CapabilityCommandStateEnum::serialize(accessor.getChangeActivityState(), node, ActivityCommandBaseType_Names::ChangeActivityState_Name, false);
    }
    if (accessor.hasDeleteActivity()) {
      asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getDeleteActivity(), node, ActivityCommandBaseType_Names::DeleteActivity_Name);
    }
    if (accessor.hasUnassignActivity()) {
      asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getUnassignActivity(), node, ActivityCommandBaseType_Names::UnassignActivity_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ActivityCommandBaseType& ActivityCommandBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ActivityCommandBaseType>().release());
}

uci::type::ActivityCommandBaseType& ActivityCommandBaseType::create(const uci::type::ActivityCommandBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ActivityCommandBaseType> newAccessor{boost::make_unique<asb_uci::type::ActivityCommandBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ActivityCommandBaseType::destroy(uci::type::ActivityCommandBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::ActivityCommandBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

