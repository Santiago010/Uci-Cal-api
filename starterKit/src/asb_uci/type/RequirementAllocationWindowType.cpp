/** @file RequirementAllocationWindowType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementAllocationWindowType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DurationRangeType.h"
#include "asb_uci/type/RequirementAllocationWindowID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DurationRangeType.h"
#include "uci/type/RequirementAllocationWindowID_Type.h"
#include "uci/type/RequirementAllocationWindowType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementAllocationWindowType::RequirementAllocationWindowType()
  : windowID_Accessor{boost::make_unique<RequirementAllocationWindowID_Type>()} {
}

RequirementAllocationWindowType::~RequirementAllocationWindowType() = default;

void RequirementAllocationWindowType::copy(const uci::type::RequirementAllocationWindowType& accessor) {
  copyImpl(accessor, false);
}

void RequirementAllocationWindowType::copyImpl(const uci::type::RequirementAllocationWindowType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementAllocationWindowType&>(accessor);
    setWindowID(*(accessorImpl.windowID_Accessor));
    setBegin(accessorImpl.begin_Accessor);
    setEnd(accessorImpl.end_Accessor);
    if (accessorImpl.duration_Accessor) {
      setDuration(*(accessorImpl.duration_Accessor));
    } else {
      duration_Accessor.reset();
    }
  }
}

void RequirementAllocationWindowType::reset() noexcept {
  windowID_Accessor->reset();
  begin_Accessor = 0;
  end_Accessor = 0;
  duration_Accessor.reset();
}

const uci::type::RequirementAllocationWindowID_Type& RequirementAllocationWindowType::getWindowID() const {
  return *windowID_Accessor;
}

uci::type::RequirementAllocationWindowID_Type& RequirementAllocationWindowType::getWindowID() {
  return *windowID_Accessor;
}

uci::type::RequirementAllocationWindowType& RequirementAllocationWindowType::setWindowID(const uci::type::RequirementAllocationWindowID_Type& accessor) {
  if (&accessor != windowID_Accessor.get()) {
    windowID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue RequirementAllocationWindowType::getBegin() const {
  return begin_Accessor;
}

uci::type::RequirementAllocationWindowType& RequirementAllocationWindowType::setBegin(uci::type::DateTimeTypeValue value) {
  begin_Accessor = value;
  return *this;
}


uci::type::DateTimeTypeValue RequirementAllocationWindowType::getEnd() const {
  return end_Accessor;
}

uci::type::RequirementAllocationWindowType& RequirementAllocationWindowType::setEnd(uci::type::DateTimeTypeValue value) {
  end_Accessor = value;
  return *this;
}


uci::type::DurationRangeType& RequirementAllocationWindowType::getDuration_() const {
  if (duration_Accessor) {
    return *duration_Accessor;
  }
  throw uci::base::UCIException("Error in getDuration(): An attempt was made to get an optional field that was not enabled, call hasDuration() to determine if it is safe to call getDuration()");
}

const uci::type::DurationRangeType& RequirementAllocationWindowType::getDuration() const {
  return getDuration_();
}

uci::type::DurationRangeType& RequirementAllocationWindowType::getDuration() {
  return getDuration_();
}

uci::type::RequirementAllocationWindowType& RequirementAllocationWindowType::setDuration(const uci::type::DurationRangeType& accessor) {
  enableDuration();
  if (&accessor != duration_Accessor.get()) {
    duration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementAllocationWindowType::hasDuration() const noexcept {
  return static_cast<bool>(duration_Accessor);
}

uci::type::DurationRangeType& RequirementAllocationWindowType::enableDuration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::durationRangeType : type};
  if ((!duration_Accessor) || (duration_Accessor->getAccessorType() != requestedType)) {
    duration_Accessor = DurationRangeType::create(requestedType);
    if (!duration_Accessor) {
      throw uci::base::UCIException("Error in enableDuration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *duration_Accessor;
}

uci::type::RequirementAllocationWindowType& RequirementAllocationWindowType::clearDuration() noexcept {
  duration_Accessor.reset();
  return *this;
}

std::unique_ptr<RequirementAllocationWindowType> RequirementAllocationWindowType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementAllocationWindowType : type};
  return (requestedType == uci::type::accessorType::requirementAllocationWindowType) ? boost::make_unique<RequirementAllocationWindowType>() : nullptr;
}

/**  */
namespace RequirementAllocationWindowType_Names {

constexpr const char* Extern_Type_Name{"RequirementAllocationWindowType"};
constexpr const char* WindowID_Name{"WindowID"};
constexpr const char* Begin_Name{"Begin"};
constexpr const char* End_Name{"End"};
constexpr const char* Duration_Name{"Duration"};

} // namespace RequirementAllocationWindowType_Names

void RequirementAllocationWindowType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementAllocationWindowType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementAllocationWindowType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementAllocationWindowType_Names::WindowID_Name) {
      RequirementAllocationWindowID_Type::deserialize(valueType.second, accessor.getWindowID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementAllocationWindowType_Names::Begin_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBegin(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + RequirementAllocationWindowType_Names::End_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEnd(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + RequirementAllocationWindowType_Names::Duration_Name) {
      DurationRangeType::deserialize(valueType.second, accessor.enableDuration(), nodeName, nsPrefix);
    }
  }
}

std::string RequirementAllocationWindowType::serialize(const uci::type::RequirementAllocationWindowType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementAllocationWindowType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementAllocationWindowType_Names::Extern_Type_Name);
  }
  RequirementAllocationWindowID_Type::serialize(accessor.getWindowID(), node, RequirementAllocationWindowType_Names::WindowID_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getBegin(), node, RequirementAllocationWindowType_Names::Begin_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEnd(), node, RequirementAllocationWindowType_Names::End_Name);
  if (accessor.hasDuration()) {
    DurationRangeType::serialize(accessor.getDuration(), node, RequirementAllocationWindowType_Names::Duration_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementAllocationWindowType& RequirementAllocationWindowType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementAllocationWindowType>().release());
}

uci::type::RequirementAllocationWindowType& RequirementAllocationWindowType::create(const uci::type::RequirementAllocationWindowType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementAllocationWindowType> newAccessor{boost::make_unique<asb_uci::type::RequirementAllocationWindowType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementAllocationWindowType::destroy(uci::type::RequirementAllocationWindowType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementAllocationWindowType*>(&accessor);
}

} // namespace type

} // namespace uci

