/** @file RefuelingStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RefuelingStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentStateEnum.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RefuelingStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RefuelingStatusType::RefuelingStatusType() = default;

RefuelingStatusType::~RefuelingStatusType() = default;

void RefuelingStatusType::copy(const uci::type::RefuelingStatusType& accessor) {
  copyImpl(accessor, false);
}

void RefuelingStatusType::copyImpl(const uci::type::RefuelingStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RefuelingStatusType&>(accessor);
    if (accessorImpl.refuelingLatched_Accessor) {
      setRefuelingLatched(*(accessorImpl.refuelingLatched_Accessor));
    } else {
      refuelingLatched_Accessor.reset();
    }
    if (accessorImpl.refuelingFuelLinePresent_Accessor) {
      setRefuelingFuelLinePresent(*(accessorImpl.refuelingFuelLinePresent_Accessor));
    } else {
      refuelingFuelLinePresent_Accessor.reset();
    }
    if (accessorImpl.refuelingPumpState_Accessor) {
      setRefuelingPumpState(*(accessorImpl.refuelingPumpState_Accessor));
    } else {
      refuelingPumpState_Accessor.reset();
    }
  }
}

void RefuelingStatusType::reset() noexcept {
  refuelingLatched_Accessor.reset();
  refuelingFuelLinePresent_Accessor.reset();
  refuelingPumpState_Accessor.reset();
}

uci::type::EmptyType& RefuelingStatusType::getRefuelingLatched_() const {
  if (refuelingLatched_Accessor) {
    return *refuelingLatched_Accessor;
  }
  throw uci::base::UCIException("Error in getRefuelingLatched(): An attempt was made to get an optional field that was not enabled, call hasRefuelingLatched() to determine if it is safe to call getRefuelingLatched()");
}

const uci::type::EmptyType& RefuelingStatusType::getRefuelingLatched() const {
  return getRefuelingLatched_();
}

uci::type::EmptyType& RefuelingStatusType::getRefuelingLatched() {
  return getRefuelingLatched_();
}

uci::type::RefuelingStatusType& RefuelingStatusType::setRefuelingLatched(const uci::type::EmptyType& value) {
  return setRefuelingLatched(value.c_str());
}

uci::type::RefuelingStatusType& RefuelingStatusType::setRefuelingLatched(const std::string& value) {
  return setRefuelingLatched(value.c_str());
}

uci::type::RefuelingStatusType& RefuelingStatusType::setRefuelingLatched(const char* value) {
  enableRefuelingLatched().setStringValue(value);
  return *this;
}

bool RefuelingStatusType::hasRefuelingLatched() const noexcept {
  return static_cast<bool>(refuelingLatched_Accessor);
}

uci::type::EmptyType& RefuelingStatusType::enableRefuelingLatched(uci::base::accessorType::AccessorType type) {
  if (!refuelingLatched_Accessor) {
    refuelingLatched_Accessor = EmptyType::create(type);
  }
  return *refuelingLatched_Accessor;
}

uci::type::RefuelingStatusType& RefuelingStatusType::clearRefuelingLatched() noexcept {
  refuelingLatched_Accessor.reset();
  return *this;
}

uci::type::EmptyType& RefuelingStatusType::getRefuelingFuelLinePresent_() const {
  if (refuelingFuelLinePresent_Accessor) {
    return *refuelingFuelLinePresent_Accessor;
  }
  throw uci::base::UCIException("Error in getRefuelingFuelLinePresent(): An attempt was made to get an optional field that was not enabled, call hasRefuelingFuelLinePresent() to determine if it is safe to call getRefuelingFuelLinePresent()");
}

const uci::type::EmptyType& RefuelingStatusType::getRefuelingFuelLinePresent() const {
  return getRefuelingFuelLinePresent_();
}

uci::type::EmptyType& RefuelingStatusType::getRefuelingFuelLinePresent() {
  return getRefuelingFuelLinePresent_();
}

uci::type::RefuelingStatusType& RefuelingStatusType::setRefuelingFuelLinePresent(const uci::type::EmptyType& value) {
  return setRefuelingFuelLinePresent(value.c_str());
}

uci::type::RefuelingStatusType& RefuelingStatusType::setRefuelingFuelLinePresent(const std::string& value) {
  return setRefuelingFuelLinePresent(value.c_str());
}

uci::type::RefuelingStatusType& RefuelingStatusType::setRefuelingFuelLinePresent(const char* value) {
  enableRefuelingFuelLinePresent().setStringValue(value);
  return *this;
}

bool RefuelingStatusType::hasRefuelingFuelLinePresent() const noexcept {
  return static_cast<bool>(refuelingFuelLinePresent_Accessor);
}

uci::type::EmptyType& RefuelingStatusType::enableRefuelingFuelLinePresent(uci::base::accessorType::AccessorType type) {
  if (!refuelingFuelLinePresent_Accessor) {
    refuelingFuelLinePresent_Accessor = EmptyType::create(type);
  }
  return *refuelingFuelLinePresent_Accessor;
}

uci::type::RefuelingStatusType& RefuelingStatusType::clearRefuelingFuelLinePresent() noexcept {
  refuelingFuelLinePresent_Accessor.reset();
  return *this;
}

uci::type::ComponentStateEnum& RefuelingStatusType::getRefuelingPumpState_() const {
  if (refuelingPumpState_Accessor) {
    return *refuelingPumpState_Accessor;
  }
  throw uci::base::UCIException("Error in getRefuelingPumpState(): An attempt was made to get an optional field that was not enabled, call hasRefuelingPumpState() to determine if it is safe to call getRefuelingPumpState()");
}

const uci::type::ComponentStateEnum& RefuelingStatusType::getRefuelingPumpState() const {
  return getRefuelingPumpState_();
}

uci::type::ComponentStateEnum& RefuelingStatusType::getRefuelingPumpState() {
  return getRefuelingPumpState_();
}

uci::type::RefuelingStatusType& RefuelingStatusType::setRefuelingPumpState(const uci::type::ComponentStateEnum& accessor) {
  enableRefuelingPumpState();
  if (&accessor != refuelingPumpState_Accessor.get()) {
    refuelingPumpState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RefuelingStatusType& RefuelingStatusType::setRefuelingPumpState(const uci::type::ComponentStateEnum::EnumerationItem value) {
  enableRefuelingPumpState().setValue(value);
  return *this;
}

bool RefuelingStatusType::hasRefuelingPumpState() const noexcept {
  return static_cast<bool>(refuelingPumpState_Accessor);
}

uci::type::ComponentStateEnum& RefuelingStatusType::enableRefuelingPumpState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentStateEnum : type};
  if ((!refuelingPumpState_Accessor) || (refuelingPumpState_Accessor->getAccessorType() != requestedType)) {
    refuelingPumpState_Accessor = ComponentStateEnum::create(requestedType);
    if (!refuelingPumpState_Accessor) {
      throw uci::base::UCIException("Error in enableRefuelingPumpState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *refuelingPumpState_Accessor;
}

uci::type::RefuelingStatusType& RefuelingStatusType::clearRefuelingPumpState() noexcept {
  refuelingPumpState_Accessor.reset();
  return *this;
}

std::unique_ptr<RefuelingStatusType> RefuelingStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelingStatusType : type};
  return (requestedType == uci::type::accessorType::refuelingStatusType) ? boost::make_unique<RefuelingStatusType>() : nullptr;
}

/**  */
namespace RefuelingStatusType_Names {

constexpr const char* Extern_Type_Name{"RefuelingStatusType"};
constexpr const char* RefuelingLatched_Name{"RefuelingLatched"};
constexpr const char* RefuelingFuelLinePresent_Name{"RefuelingFuelLinePresent"};
constexpr const char* RefuelingPumpState_Name{"RefuelingPumpState"};

} // namespace RefuelingStatusType_Names

void RefuelingStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RefuelingStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RefuelingStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RefuelingStatusType_Names::RefuelingLatched_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRefuelingLatched(*value);
      }
    } else if (valueType.first == nsPrefix + RefuelingStatusType_Names::RefuelingFuelLinePresent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRefuelingFuelLinePresent(*value);
      }
    } else if (valueType.first == nsPrefix + RefuelingStatusType_Names::RefuelingPumpState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRefuelingPumpState().setValueFromName(*value);
      }
    }
  }
}

std::string RefuelingStatusType::serialize(const uci::type::RefuelingStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RefuelingStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RefuelingStatusType_Names::Extern_Type_Name);
  }
  if (accessor.hasRefuelingLatched()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getRefuelingLatched(), node, RefuelingStatusType_Names::RefuelingLatched_Name);
  }
  if (accessor.hasRefuelingFuelLinePresent()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getRefuelingFuelLinePresent(), node, RefuelingStatusType_Names::RefuelingFuelLinePresent_Name);
  }
  if (accessor.hasRefuelingPumpState()) {
    ComponentStateEnum::serialize(accessor.getRefuelingPumpState(), node, RefuelingStatusType_Names::RefuelingPumpState_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RefuelingStatusType& RefuelingStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RefuelingStatusType>().release());
}

uci::type::RefuelingStatusType& RefuelingStatusType::create(const uci::type::RefuelingStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RefuelingStatusType> newAccessor{boost::make_unique<asb_uci::type::RefuelingStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RefuelingStatusType::destroy(uci::type::RefuelingStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::RefuelingStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

