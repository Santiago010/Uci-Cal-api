/** @file LOS_MeasurementWithUncertaintyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/LOS_MeasurementWithUncertaintyType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/ComponentID_Type.h"
#include "asb_uci/type/LOS_MeasurementEnum.h"
#include "asb_uci/type/LOS_MeasurementType.h"
#include "asb_uci/type/LOS_MeasurementUncertaintyErrorSourcesType.h"
#include "asb_uci/type/MeasurementTypeEnum.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/LOS_MeasurementEnum.h"
#include "uci/type/LOS_MeasurementType.h"
#include "uci/type/LOS_MeasurementUncertaintyErrorSourcesType.h"
#include "uci/type/LOS_MeasurementWithUncertaintyType.h"
#include "uci/type/MeasurementTypeEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LOS_MeasurementWithUncertaintyType::LOS_MeasurementWithUncertaintyType()
  : reference_Accessor{boost::make_unique<LOS_MeasurementEnum>()},
    measurementType_Accessor{boost::make_unique<MeasurementType>(0, 9)},
    measurement_Accessor{boost::make_unique<LOS_MeasurementType>()} {
}

LOS_MeasurementWithUncertaintyType::~LOS_MeasurementWithUncertaintyType() = default;

void LOS_MeasurementWithUncertaintyType::copy(const uci::type::LOS_MeasurementWithUncertaintyType& accessor) {
  copyImpl(accessor, false);
}

void LOS_MeasurementWithUncertaintyType::copyImpl(const uci::type::LOS_MeasurementWithUncertaintyType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::lOS_MeasurementWithUncertaintyType)) {
      const auto& accessorImpl = dynamic_cast<const LOS_MeasurementWithUncertaintyType&>(accessor);
      setTimestamp(accessorImpl.timestamp_Accessor);
      setReference(*(accessorImpl.reference_Accessor));
      if (accessorImpl.capabilityID_Accessor) {
        setCapabilityID(*(accessorImpl.capabilityID_Accessor));
      } else {
        capabilityID_Accessor.reset();
      }
      if (accessorImpl.componentID_Accessor) {
        setComponentID(*(accessorImpl.componentID_Accessor));
      } else {
        componentID_Accessor.reset();
      }
      setMeasurementType(*(accessorImpl.measurementType_Accessor));
      setMeasurement(*(accessorImpl.measurement_Accessor));
      if (accessorImpl.uncertainty_Accessor) {
        setUncertainty(*(accessorImpl.uncertainty_Accessor));
      } else {
        uncertainty_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void LOS_MeasurementWithUncertaintyType::reset() noexcept {
  timestamp_Accessor = 0;
  reference_Accessor->reset();
  capabilityID_Accessor.reset();
  componentID_Accessor.reset();
  measurementType_Accessor->reset();
  measurement_Accessor->reset();
  uncertainty_Accessor.reset();
}

uci::type::DateTimeTypeValue LOS_MeasurementWithUncertaintyType::getTimestamp() const {
  return timestamp_Accessor;
}

uci::type::LOS_MeasurementWithUncertaintyType& LOS_MeasurementWithUncertaintyType::setTimestamp(uci::type::DateTimeTypeValue value) {
  timestamp_Accessor = value;
  return *this;
}


const uci::type::LOS_MeasurementEnum& LOS_MeasurementWithUncertaintyType::getReference() const {
  return *reference_Accessor;
}

uci::type::LOS_MeasurementEnum& LOS_MeasurementWithUncertaintyType::getReference() {
  return *reference_Accessor;
}

uci::type::LOS_MeasurementWithUncertaintyType& LOS_MeasurementWithUncertaintyType::setReference(const uci::type::LOS_MeasurementEnum& accessor) {
  if (&accessor != reference_Accessor.get()) {
    reference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::LOS_MeasurementWithUncertaintyType& LOS_MeasurementWithUncertaintyType::setReference(uci::type::LOS_MeasurementEnum::EnumerationItem value) {
  reference_Accessor->setValue(value);
  return *this;
}


uci::type::CapabilityID_Type& LOS_MeasurementWithUncertaintyType::getCapabilityID_() const {
  if (capabilityID_Accessor) {
    return *capabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasCapabilityID() to determine if it is safe to call getCapabilityID()");
}

const uci::type::CapabilityID_Type& LOS_MeasurementWithUncertaintyType::getCapabilityID() const {
  return getCapabilityID_();
}

uci::type::CapabilityID_Type& LOS_MeasurementWithUncertaintyType::getCapabilityID() {
  return getCapabilityID_();
}

uci::type::LOS_MeasurementWithUncertaintyType& LOS_MeasurementWithUncertaintyType::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableCapabilityID();
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementWithUncertaintyType::hasCapabilityID() const noexcept {
  return static_cast<bool>(capabilityID_Accessor);
}

uci::type::CapabilityID_Type& LOS_MeasurementWithUncertaintyType::enableCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!capabilityID_Accessor) || (capabilityID_Accessor->getAccessorType() != requestedType)) {
    capabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!capabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityID_Accessor;
}

uci::type::LOS_MeasurementWithUncertaintyType& LOS_MeasurementWithUncertaintyType::clearCapabilityID() noexcept {
  capabilityID_Accessor.reset();
  return *this;
}

uci::type::ComponentID_Type& LOS_MeasurementWithUncertaintyType::getComponentID_() const {
  if (componentID_Accessor) {
    return *componentID_Accessor;
  }
  throw uci::base::UCIException("Error in getComponentID(): An attempt was made to get an optional field that was not enabled, call hasComponentID() to determine if it is safe to call getComponentID()");
}

const uci::type::ComponentID_Type& LOS_MeasurementWithUncertaintyType::getComponentID() const {
  return getComponentID_();
}

uci::type::ComponentID_Type& LOS_MeasurementWithUncertaintyType::getComponentID() {
  return getComponentID_();
}

uci::type::LOS_MeasurementWithUncertaintyType& LOS_MeasurementWithUncertaintyType::setComponentID(const uci::type::ComponentID_Type& accessor) {
  enableComponentID();
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementWithUncertaintyType::hasComponentID() const noexcept {
  return static_cast<bool>(componentID_Accessor);
}

uci::type::ComponentID_Type& LOS_MeasurementWithUncertaintyType::enableComponentID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentID_Type : type};
  if ((!componentID_Accessor) || (componentID_Accessor->getAccessorType() != requestedType)) {
    componentID_Accessor = ComponentID_Type::create(requestedType);
    if (!componentID_Accessor) {
      throw uci::base::UCIException("Error in enableComponentID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *componentID_Accessor;
}

uci::type::LOS_MeasurementWithUncertaintyType& LOS_MeasurementWithUncertaintyType::clearComponentID() noexcept {
  componentID_Accessor.reset();
  return *this;
}

const uci::type::LOS_MeasurementWithUncertaintyType::MeasurementType& LOS_MeasurementWithUncertaintyType::getMeasurementType() const {
  return *measurementType_Accessor;
}

uci::type::LOS_MeasurementWithUncertaintyType::MeasurementType& LOS_MeasurementWithUncertaintyType::getMeasurementType() {
  return *measurementType_Accessor;
}

uci::type::LOS_MeasurementWithUncertaintyType& LOS_MeasurementWithUncertaintyType::setMeasurementType(const uci::type::LOS_MeasurementWithUncertaintyType::MeasurementType& accessor) {
  if (&accessor != measurementType_Accessor.get()) {
    measurementType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::LOS_MeasurementType& LOS_MeasurementWithUncertaintyType::getMeasurement() const {
  return *measurement_Accessor;
}

uci::type::LOS_MeasurementType& LOS_MeasurementWithUncertaintyType::getMeasurement() {
  return *measurement_Accessor;
}

uci::type::LOS_MeasurementWithUncertaintyType& LOS_MeasurementWithUncertaintyType::setMeasurement(const uci::type::LOS_MeasurementType& accessor) {
  if (&accessor != measurement_Accessor.get()) {
    measurement_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::LOS_MeasurementUncertaintyErrorSourcesType& LOS_MeasurementWithUncertaintyType::getUncertainty_() const {
  if (uncertainty_Accessor) {
    return *uncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getUncertainty(): An attempt was made to get an optional field that was not enabled, call hasUncertainty() to determine if it is safe to call getUncertainty()");
}

const uci::type::LOS_MeasurementUncertaintyErrorSourcesType& LOS_MeasurementWithUncertaintyType::getUncertainty() const {
  return getUncertainty_();
}

uci::type::LOS_MeasurementUncertaintyErrorSourcesType& LOS_MeasurementWithUncertaintyType::getUncertainty() {
  return getUncertainty_();
}

uci::type::LOS_MeasurementWithUncertaintyType& LOS_MeasurementWithUncertaintyType::setUncertainty(const uci::type::LOS_MeasurementUncertaintyErrorSourcesType& accessor) {
  enableUncertainty();
  if (&accessor != uncertainty_Accessor.get()) {
    uncertainty_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementWithUncertaintyType::hasUncertainty() const noexcept {
  return static_cast<bool>(uncertainty_Accessor);
}

uci::type::LOS_MeasurementUncertaintyErrorSourcesType& LOS_MeasurementWithUncertaintyType::enableUncertainty(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_MeasurementUncertaintyErrorSourcesType : type};
  if ((!uncertainty_Accessor) || (uncertainty_Accessor->getAccessorType() != requestedType)) {
    uncertainty_Accessor = LOS_MeasurementUncertaintyErrorSourcesType::create(requestedType);
    if (!uncertainty_Accessor) {
      throw uci::base::UCIException("Error in enableUncertainty(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *uncertainty_Accessor;
}

uci::type::LOS_MeasurementWithUncertaintyType& LOS_MeasurementWithUncertaintyType::clearUncertainty() noexcept {
  uncertainty_Accessor.reset();
  return *this;
}

std::unique_ptr<LOS_MeasurementWithUncertaintyType> LOS_MeasurementWithUncertaintyType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_MeasurementWithUncertaintyType : type};
  return std::unique_ptr<LOS_MeasurementWithUncertaintyType>(dynamic_cast<LOS_MeasurementWithUncertaintyType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace LOS_MeasurementWithUncertaintyType_Names {

constexpr const char* Extern_Type_Name{"LOS_MeasurementWithUncertaintyType"};
constexpr const char* Timestamp_Name{"Timestamp"};
constexpr const char* Reference_Name{"Reference"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* MeasurementType_Name{"MeasurementType"};
constexpr const char* Measurement_Name{"Measurement"};
constexpr const char* Uncertainty_Name{"Uncertainty"};

} // namespace LOS_MeasurementWithUncertaintyType_Names

void LOS_MeasurementWithUncertaintyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LOS_MeasurementWithUncertaintyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LOS_MeasurementWithUncertaintyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LOS_MeasurementWithUncertaintyType_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + LOS_MeasurementWithUncertaintyType_Names::Reference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getReference().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + LOS_MeasurementWithUncertaintyType_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementWithUncertaintyType_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.enableComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementWithUncertaintyType_Names::MeasurementType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::LOS_MeasurementWithUncertaintyType::MeasurementType& boundedList = accessor.getMeasurementType();
        const uci::type::LOS_MeasurementWithUncertaintyType::MeasurementType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + LOS_MeasurementWithUncertaintyType_Names::Measurement_Name) {
      LOS_MeasurementType::deserialize(valueType.second, accessor.getMeasurement(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementWithUncertaintyType_Names::Uncertainty_Name) {
      LOS_MeasurementUncertaintyErrorSourcesType::deserialize(valueType.second, accessor.enableUncertainty(), nodeName, nsPrefix);
    }
  }
}

std::string LOS_MeasurementWithUncertaintyType::serialize(const uci::type::LOS_MeasurementWithUncertaintyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LOS_MeasurementWithUncertaintyType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::lOS_MeasurementWithUncertaintyType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, LOS_MeasurementWithUncertaintyType_Names::Extern_Type_Name);
    }
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, LOS_MeasurementWithUncertaintyType_Names::Timestamp_Name);
    LOS_MeasurementEnum::serialize(accessor.getReference(), node, LOS_MeasurementWithUncertaintyType_Names::Reference_Name, false);
    if (accessor.hasCapabilityID()) {
      CapabilityID_Type::serialize(accessor.getCapabilityID(), node, LOS_MeasurementWithUncertaintyType_Names::CapabilityID_Name);
    }
    if (accessor.hasComponentID()) {
      ComponentID_Type::serialize(accessor.getComponentID(), node, LOS_MeasurementWithUncertaintyType_Names::ComponentID_Name);
    }
    {
      const uci::type::LOS_MeasurementWithUncertaintyType::MeasurementType& boundedList = accessor.getMeasurementType();
      for (uci::type::LOS_MeasurementWithUncertaintyType::MeasurementType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        MeasurementTypeEnum::serialize(boundedList.at(i), node, LOS_MeasurementWithUncertaintyType_Names::MeasurementType_Name, false);
      }
    }
    LOS_MeasurementType::serialize(accessor.getMeasurement(), node, LOS_MeasurementWithUncertaintyType_Names::Measurement_Name);
    if (accessor.hasUncertainty()) {
      LOS_MeasurementUncertaintyErrorSourcesType::serialize(accessor.getUncertainty(), node, LOS_MeasurementWithUncertaintyType_Names::Uncertainty_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LOS_MeasurementWithUncertaintyType& LOS_MeasurementWithUncertaintyType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LOS_MeasurementWithUncertaintyType>().release());
}

uci::type::LOS_MeasurementWithUncertaintyType& LOS_MeasurementWithUncertaintyType::create(const uci::type::LOS_MeasurementWithUncertaintyType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LOS_MeasurementWithUncertaintyType> newAccessor{boost::make_unique<asb_uci::type::LOS_MeasurementWithUncertaintyType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LOS_MeasurementWithUncertaintyType::destroy(uci::type::LOS_MeasurementWithUncertaintyType& accessor) {
  delete dynamic_cast<asb_uci::type::LOS_MeasurementWithUncertaintyType*>(&accessor);
}

} // namespace type

} // namespace uci

