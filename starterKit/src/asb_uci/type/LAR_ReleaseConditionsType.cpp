/** @file LAR_ReleaseConditionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/LAR_ReleaseConditionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/Velocity2D_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AltitudeType.h"
#include "uci/type/AngleType.h"
#include "uci/type/LAR_ReleaseConditionsType.h"
#include "uci/type/Velocity2D_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LAR_ReleaseConditionsType::LAR_ReleaseConditionsType() = default;

LAR_ReleaseConditionsType::~LAR_ReleaseConditionsType() = default;

void LAR_ReleaseConditionsType::copy(const uci::type::LAR_ReleaseConditionsType& accessor) {
  copyImpl(accessor, false);
}

void LAR_ReleaseConditionsType::copyImpl(const uci::type::LAR_ReleaseConditionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LAR_ReleaseConditionsType&>(accessor);
    setValidAltitude(accessorImpl.validAltitude_Accessor);
    setValidVelocity(accessorImpl.validVelocity_Accessor);
    setValidHeading(accessorImpl.validHeading_Accessor);
    if (accessorImpl.hasAltitudeDelta()) {
      setAltitudeDelta(accessorImpl.getAltitudeDelta());
    } else {
      clearAltitudeDelta();
    }
    if (accessorImpl.velocityDelta_Accessor) {
      setVelocityDelta(*(accessorImpl.velocityDelta_Accessor));
    } else {
      velocityDelta_Accessor.reset();
    }
    if (accessorImpl.hasHeadingDelta()) {
      setHeadingDelta(accessorImpl.getHeadingDelta());
    } else {
      clearHeadingDelta();
    }
  }
}

void LAR_ReleaseConditionsType::reset() noexcept {
  validAltitude_Accessor = false;
  validVelocity_Accessor = false;
  validHeading_Accessor = false;
  clearAltitudeDelta();
  velocityDelta_Accessor.reset();
  clearHeadingDelta();
}

xs::Boolean LAR_ReleaseConditionsType::getValidAltitude() const {
  return validAltitude_Accessor;
}

uci::type::LAR_ReleaseConditionsType& LAR_ReleaseConditionsType::setValidAltitude(xs::Boolean value) {
  validAltitude_Accessor = value;
  return *this;
}


xs::Boolean LAR_ReleaseConditionsType::getValidVelocity() const {
  return validVelocity_Accessor;
}

uci::type::LAR_ReleaseConditionsType& LAR_ReleaseConditionsType::setValidVelocity(xs::Boolean value) {
  validVelocity_Accessor = value;
  return *this;
}


xs::Boolean LAR_ReleaseConditionsType::getValidHeading() const {
  return validHeading_Accessor;
}

uci::type::LAR_ReleaseConditionsType& LAR_ReleaseConditionsType::setValidHeading(xs::Boolean value) {
  validHeading_Accessor = value;
  return *this;
}


uci::type::AltitudeTypeValue LAR_ReleaseConditionsType::getAltitudeDelta() const {
  if (altitudeDelta_Accessor) {
    return *altitudeDelta_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeDelta(): An attempt was made to get an optional field that was not enabled, call hasAltitudeDelta() to determine if it is safe to call getAltitudeDelta()");
}

uci::type::LAR_ReleaseConditionsType& LAR_ReleaseConditionsType::setAltitudeDelta(uci::type::AltitudeTypeValue value) {
  altitudeDelta_Accessor = value;
  return *this;
}

bool LAR_ReleaseConditionsType::hasAltitudeDelta() const noexcept {
  return altitudeDelta_Accessor.has_value();
}

uci::type::LAR_ReleaseConditionsType& LAR_ReleaseConditionsType::clearAltitudeDelta() noexcept {
  altitudeDelta_Accessor.reset();
  return *this;
}

uci::type::Velocity2D_Type& LAR_ReleaseConditionsType::getVelocityDelta_() const {
  if (velocityDelta_Accessor) {
    return *velocityDelta_Accessor;
  }
  throw uci::base::UCIException("Error in getVelocityDelta(): An attempt was made to get an optional field that was not enabled, call hasVelocityDelta() to determine if it is safe to call getVelocityDelta()");
}

const uci::type::Velocity2D_Type& LAR_ReleaseConditionsType::getVelocityDelta() const {
  return getVelocityDelta_();
}

uci::type::Velocity2D_Type& LAR_ReleaseConditionsType::getVelocityDelta() {
  return getVelocityDelta_();
}

uci::type::LAR_ReleaseConditionsType& LAR_ReleaseConditionsType::setVelocityDelta(const uci::type::Velocity2D_Type& accessor) {
  enableVelocityDelta(accessor.getAccessorType());
  if (&accessor != velocityDelta_Accessor.get()) {
    velocityDelta_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool LAR_ReleaseConditionsType::hasVelocityDelta() const noexcept {
  return static_cast<bool>(velocityDelta_Accessor);
}

uci::type::Velocity2D_Type& LAR_ReleaseConditionsType::enableVelocityDelta(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::velocity2D_Type : type};
  if ((!velocityDelta_Accessor) || (velocityDelta_Accessor->getAccessorType() != requestedType)) {
    velocityDelta_Accessor = Velocity2D_Type::create(requestedType);
    if (!velocityDelta_Accessor) {
      throw uci::base::UCIException("Error in enableVelocityDelta(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *velocityDelta_Accessor;
}

uci::type::LAR_ReleaseConditionsType& LAR_ReleaseConditionsType::clearVelocityDelta() noexcept {
  velocityDelta_Accessor.reset();
  return *this;
}

uci::type::AngleTypeValue LAR_ReleaseConditionsType::getHeadingDelta() const {
  if (headingDelta_Accessor) {
    return *headingDelta_Accessor;
  }
  throw uci::base::UCIException("Error in getHeadingDelta(): An attempt was made to get an optional field that was not enabled, call hasHeadingDelta() to determine if it is safe to call getHeadingDelta()");
}

uci::type::LAR_ReleaseConditionsType& LAR_ReleaseConditionsType::setHeadingDelta(uci::type::AngleTypeValue value) {
  headingDelta_Accessor = value;
  return *this;
}

bool LAR_ReleaseConditionsType::hasHeadingDelta() const noexcept {
  return headingDelta_Accessor.has_value();
}

uci::type::LAR_ReleaseConditionsType& LAR_ReleaseConditionsType::clearHeadingDelta() noexcept {
  headingDelta_Accessor.reset();
  return *this;
}

std::unique_ptr<LAR_ReleaseConditionsType> LAR_ReleaseConditionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lAR_ReleaseConditionsType : type};
  return (requestedType == uci::type::accessorType::lAR_ReleaseConditionsType) ? boost::make_unique<LAR_ReleaseConditionsType>() : nullptr;
}

/**  */
namespace LAR_ReleaseConditionsType_Names {

constexpr const char* Extern_Type_Name{"LAR_ReleaseConditionsType"};
constexpr const char* ValidAltitude_Name{"ValidAltitude"};
constexpr const char* ValidVelocity_Name{"ValidVelocity"};
constexpr const char* ValidHeading_Name{"ValidHeading"};
constexpr const char* AltitudeDelta_Name{"AltitudeDelta"};
constexpr const char* VelocityDelta_Name{"VelocityDelta"};
constexpr const char* HeadingDelta_Name{"HeadingDelta"};

} // namespace LAR_ReleaseConditionsType_Names

void LAR_ReleaseConditionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LAR_ReleaseConditionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LAR_ReleaseConditionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LAR_ReleaseConditionsType_Names::ValidAltitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setValidAltitude(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + LAR_ReleaseConditionsType_Names::ValidVelocity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setValidVelocity(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + LAR_ReleaseConditionsType_Names::ValidHeading_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setValidHeading(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + LAR_ReleaseConditionsType_Names::AltitudeDelta_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAltitudeDelta(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LAR_ReleaseConditionsType_Names::VelocityDelta_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableVelocityDelta(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LAR_ReleaseConditionsType_Names::HeadingDelta_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHeadingDelta(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string LAR_ReleaseConditionsType::serialize(const uci::type::LAR_ReleaseConditionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LAR_ReleaseConditionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LAR_ReleaseConditionsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getValidAltitude(), node, LAR_ReleaseConditionsType_Names::ValidAltitude_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getValidVelocity(), node, LAR_ReleaseConditionsType_Names::ValidVelocity_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getValidHeading(), node, LAR_ReleaseConditionsType_Names::ValidHeading_Name);
  if (accessor.hasAltitudeDelta()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAltitudeDelta(), node, LAR_ReleaseConditionsType_Names::AltitudeDelta_Name);
  }
  if (accessor.hasVelocityDelta()) {
    Velocity2D_Type::serialize(accessor.getVelocityDelta(), node, LAR_ReleaseConditionsType_Names::VelocityDelta_Name);
  }
  if (accessor.hasHeadingDelta()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getHeadingDelta(), node, LAR_ReleaseConditionsType_Names::HeadingDelta_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LAR_ReleaseConditionsType& LAR_ReleaseConditionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LAR_ReleaseConditionsType>().release());
}

uci::type::LAR_ReleaseConditionsType& LAR_ReleaseConditionsType::create(const uci::type::LAR_ReleaseConditionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LAR_ReleaseConditionsType> newAccessor{boost::make_unique<asb_uci::type::LAR_ReleaseConditionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LAR_ReleaseConditionsType::destroy(uci::type::LAR_ReleaseConditionsType& accessor) {
  delete dynamic_cast<asb_uci::type::LAR_ReleaseConditionsType*>(&accessor);
}

} // namespace type

} // namespace uci

