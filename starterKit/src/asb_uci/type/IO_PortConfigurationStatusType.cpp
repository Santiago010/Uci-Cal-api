/** @file IO_PortConfigurationStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/IO_PortConfigurationStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommPortSettingsType.h"
#include "../../../include/asb_uci/type/EthernetSettingsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommPortSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EthernetSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IO_PortConfigurationStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IO_PortConfigurationStatusType::IO_PortConfigurationStatusType() = default;

IO_PortConfigurationStatusType::~IO_PortConfigurationStatusType() = default;

void IO_PortConfigurationStatusType::copy(const uci::type::IO_PortConfigurationStatusType& accessor) {
  copyImpl(accessor, false);
}

void IO_PortConfigurationStatusType::copyImpl(const uci::type::IO_PortConfigurationStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IO_PortConfigurationStatusType&>(accessor);
    if (accessorImpl.ethernetSettings_Accessor) {
      setEthernetSettings(*(accessorImpl.ethernetSettings_Accessor));
    } else {
      ethernetSettings_Accessor.reset();
    }
    if (accessorImpl.serialPortSettings_Accessor) {
      setSerialPortSettings(*(accessorImpl.serialPortSettings_Accessor));
    } else {
      serialPortSettings_Accessor.reset();
    }
  }
}

void IO_PortConfigurationStatusType::reset() noexcept {
  ethernetSettings_Accessor.reset();
  serialPortSettings_Accessor.reset();
}

uci::type::IO_PortConfigurationStatusType::IO_PortConfigurationStatusTypeChoice IO_PortConfigurationStatusType::getIO_PortConfigurationStatusTypeChoiceOrdinal() const noexcept {
  if (ethernetSettings_Accessor) {
    return IO_PORTCONFIGURATIONSTATUSTYPE_CHOICE_ETHERNETSETTINGS;
  }
  if (serialPortSettings_Accessor) {
    return IO_PORTCONFIGURATIONSTATUSTYPE_CHOICE_SERIALPORTSETTINGS;
  }
  return IO_PORTCONFIGURATIONSTATUSTYPE_CHOICE_NONE;
}

uci::type::IO_PortConfigurationStatusType& IO_PortConfigurationStatusType::setIO_PortConfigurationStatusTypeChoiceOrdinal(uci::type::IO_PortConfigurationStatusType::IO_PortConfigurationStatusTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case IO_PORTCONFIGURATIONSTATUSTYPE_CHOICE_ETHERNETSETTINGS:
      chooseEthernetSettings("setIO_PortConfigurationStatusTypeChoiceOrdinal", type);
      break;
    case IO_PORTCONFIGURATIONSTATUSTYPE_CHOICE_SERIALPORTSETTINGS:
      chooseSerialPortSettings("setIO_PortConfigurationStatusTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setIO_PortConfigurationStatusTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EthernetSettingsType& IO_PortConfigurationStatusType::getEthernetSettings_() const {
  if (ethernetSettings_Accessor) {
    return *ethernetSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getEthernetSettings(): Unable to get EthernetSettings, field not selected");
}

const uci::type::EthernetSettingsType& IO_PortConfigurationStatusType::getEthernetSettings() const {
  return getEthernetSettings_();
}

uci::type::EthernetSettingsType& IO_PortConfigurationStatusType::getEthernetSettings() {
  return getEthernetSettings_();
}

uci::type::IO_PortConfigurationStatusType& IO_PortConfigurationStatusType::setEthernetSettings(const uci::type::EthernetSettingsType& accessor) {
  chooseEthernetSettings(accessor.getAccessorType());
  if (&accessor != ethernetSettings_Accessor.get()) {
    ethernetSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IO_PortConfigurationStatusType::isEthernetSettings() const noexcept {
  return static_cast<bool>(ethernetSettings_Accessor);
}

uci::type::EthernetSettingsType& IO_PortConfigurationStatusType::chooseEthernetSettings(const std::string& method, uci::base::accessorType::AccessorType type) {
  serialPortSettings_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ethernetSettingsType : type};
  if ((!ethernetSettings_Accessor) || (ethernetSettings_Accessor->getAccessorType() != requestedType)) {
    ethernetSettings_Accessor = EthernetSettingsType::create(type);
    if (!ethernetSettings_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ethernetSettings_Accessor;
}

uci::type::EthernetSettingsType& IO_PortConfigurationStatusType::chooseEthernetSettings(uci::base::accessorType::AccessorType type) {
  return chooseEthernetSettings("chooseEthernetSettings", type);
}

uci::type::CommPortSettingsType& IO_PortConfigurationStatusType::getSerialPortSettings_() const {
  if (serialPortSettings_Accessor) {
    return *serialPortSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getSerialPortSettings(): Unable to get SerialPortSettings, field not selected");
}

const uci::type::CommPortSettingsType& IO_PortConfigurationStatusType::getSerialPortSettings() const {
  return getSerialPortSettings_();
}

uci::type::CommPortSettingsType& IO_PortConfigurationStatusType::getSerialPortSettings() {
  return getSerialPortSettings_();
}

uci::type::IO_PortConfigurationStatusType& IO_PortConfigurationStatusType::setSerialPortSettings(const uci::type::CommPortSettingsType& accessor) {
  chooseSerialPortSettings();
  if (&accessor != serialPortSettings_Accessor.get()) {
    serialPortSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IO_PortConfigurationStatusType::isSerialPortSettings() const noexcept {
  return static_cast<bool>(serialPortSettings_Accessor);
}

uci::type::CommPortSettingsType& IO_PortConfigurationStatusType::chooseSerialPortSettings(const std::string& method, uci::base::accessorType::AccessorType type) {
  ethernetSettings_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commPortSettingsType : type};
  if ((!serialPortSettings_Accessor) || (serialPortSettings_Accessor->getAccessorType() != requestedType)) {
    serialPortSettings_Accessor = CommPortSettingsType::create(type);
    if (!serialPortSettings_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *serialPortSettings_Accessor;
}

uci::type::CommPortSettingsType& IO_PortConfigurationStatusType::chooseSerialPortSettings(uci::base::accessorType::AccessorType type) {
  return chooseSerialPortSettings("chooseSerialPortSettings", type);
}

std::unique_ptr<IO_PortConfigurationStatusType> IO_PortConfigurationStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iO_PortConfigurationStatusType : type};
  return (requestedType == uci::type::accessorType::iO_PortConfigurationStatusType) ? boost::make_unique<IO_PortConfigurationStatusType>() : nullptr;
}

/**  */
namespace IO_PortConfigurationStatusType_Names {

constexpr const char* Extern_Type_Name{"IO_PortConfigurationStatusType"};
constexpr const char* EthernetSettings_Name{"EthernetSettings"};
constexpr const char* SerialPortSettings_Name{"SerialPortSettings"};

} // namespace IO_PortConfigurationStatusType_Names

void IO_PortConfigurationStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IO_PortConfigurationStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IO_PortConfigurationStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IO_PortConfigurationStatusType_Names::EthernetSettings_Name) {
      EthernetSettingsType::deserialize(valueType.second, accessor.chooseEthernetSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IO_PortConfigurationStatusType_Names::SerialPortSettings_Name) {
      CommPortSettingsType::deserialize(valueType.second, accessor.chooseSerialPortSettings(), nodeName, nsPrefix);
    }
  }
}

std::string IO_PortConfigurationStatusType::serialize(const uci::type::IO_PortConfigurationStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IO_PortConfigurationStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IO_PortConfigurationStatusType_Names::Extern_Type_Name);
  }
  if (accessor.isEthernetSettings()) {
    EthernetSettingsType::serialize(accessor.getEthernetSettings(), node, IO_PortConfigurationStatusType_Names::EthernetSettings_Name);
  } else if (accessor.isSerialPortSettings()) {
    CommPortSettingsType::serialize(accessor.getSerialPortSettings(), node, IO_PortConfigurationStatusType_Names::SerialPortSettings_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IO_PortConfigurationStatusType& IO_PortConfigurationStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IO_PortConfigurationStatusType>().release());
}

uci::type::IO_PortConfigurationStatusType& IO_PortConfigurationStatusType::create(const uci::type::IO_PortConfigurationStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IO_PortConfigurationStatusType> newAccessor{boost::make_unique<asb_uci::type::IO_PortConfigurationStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IO_PortConfigurationStatusType::destroy(uci::type::IO_PortConfigurationStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::IO_PortConfigurationStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

