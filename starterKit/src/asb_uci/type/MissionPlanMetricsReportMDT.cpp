/** @file MissionPlanMetricsReportMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MissionPlanMetricsReportMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CompletedRequirementMetricsType.h"
#include "../../../include/asb_uci/type/MissionPlanID_Type.h"
#include "../../../include/asb_uci/type/MissionPlanMetricsReportID_Type.h"
#include "../../../include/asb_uci/type/RequirementMetricsReportType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CompletedRequirementMetricsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanMetricsReportID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanMetricsReportMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementMetricsReportType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MissionPlanMetricsReportMDT::MissionPlanMetricsReportMDT()
  : missionPlanMetricsReportID_Accessor{boost::make_unique<MissionPlanMetricsReportID_Type>()},
    missionPlanID_Accessor{boost::make_unique<MissionPlanID_Type>()},
    completedRequirementMetrics_Accessor{boost::make_unique<CompletedRequirementMetrics>(0, SIZE_MAX)},
    canceledRequirementMetrics_Accessor{boost::make_unique<CanceledRequirementMetrics>(0, SIZE_MAX)},
    activeRequirementMetrics_Accessor{boost::make_unique<ActiveRequirementMetrics>(0, SIZE_MAX)} {
}

MissionPlanMetricsReportMDT::~MissionPlanMetricsReportMDT() = default;

void MissionPlanMetricsReportMDT::copy(const uci::type::MissionPlanMetricsReportMDT& accessor) {
  copyImpl(accessor, false);
}

void MissionPlanMetricsReportMDT::copyImpl(const uci::type::MissionPlanMetricsReportMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MissionPlanMetricsReportMDT&>(accessor);
    setMissionPlanMetricsReportID(*(accessorImpl.missionPlanMetricsReportID_Accessor));
    setMissionPlanID(*(accessorImpl.missionPlanID_Accessor));
    setNumberOfReplans(accessorImpl.numberOfReplans_Accessor);
    setCompletedRequirementMetrics(*(accessorImpl.completedRequirementMetrics_Accessor));
    setCanceledRequirementMetrics(*(accessorImpl.canceledRequirementMetrics_Accessor));
    setActiveRequirementMetrics(*(accessorImpl.activeRequirementMetrics_Accessor));
  }
}

void MissionPlanMetricsReportMDT::reset() noexcept {
  missionPlanMetricsReportID_Accessor->reset();
  missionPlanID_Accessor->reset();
  numberOfReplans_Accessor = 0;
  completedRequirementMetrics_Accessor->reset();
  canceledRequirementMetrics_Accessor->reset();
  activeRequirementMetrics_Accessor->reset();
}

const uci::type::MissionPlanMetricsReportID_Type& MissionPlanMetricsReportMDT::getMissionPlanMetricsReportID() const {
  return *missionPlanMetricsReportID_Accessor;
}

uci::type::MissionPlanMetricsReportID_Type& MissionPlanMetricsReportMDT::getMissionPlanMetricsReportID() {
  return *missionPlanMetricsReportID_Accessor;
}

uci::type::MissionPlanMetricsReportMDT& MissionPlanMetricsReportMDT::setMissionPlanMetricsReportID(const uci::type::MissionPlanMetricsReportID_Type& accessor) {
  if (&accessor != missionPlanMetricsReportID_Accessor.get()) {
    missionPlanMetricsReportID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanID_Type& MissionPlanMetricsReportMDT::getMissionPlanID() const {
  return *missionPlanID_Accessor;
}

uci::type::MissionPlanID_Type& MissionPlanMetricsReportMDT::getMissionPlanID() {
  return *missionPlanID_Accessor;
}

uci::type::MissionPlanMetricsReportMDT& MissionPlanMetricsReportMDT::setMissionPlanID(const uci::type::MissionPlanID_Type& accessor) {
  if (&accessor != missionPlanID_Accessor.get()) {
    missionPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt MissionPlanMetricsReportMDT::getNumberOfReplans() const {
  return numberOfReplans_Accessor;
}

uci::type::MissionPlanMetricsReportMDT& MissionPlanMetricsReportMDT::setNumberOfReplans(xs::UnsignedInt value) {
  numberOfReplans_Accessor = value;
  return *this;
}


const uci::type::MissionPlanMetricsReportMDT::CompletedRequirementMetrics& MissionPlanMetricsReportMDT::getCompletedRequirementMetrics() const {
  return *completedRequirementMetrics_Accessor;
}

uci::type::MissionPlanMetricsReportMDT::CompletedRequirementMetrics& MissionPlanMetricsReportMDT::getCompletedRequirementMetrics() {
  return *completedRequirementMetrics_Accessor;
}

uci::type::MissionPlanMetricsReportMDT& MissionPlanMetricsReportMDT::setCompletedRequirementMetrics(const uci::type::MissionPlanMetricsReportMDT::CompletedRequirementMetrics& accessor) {
  if (&accessor != completedRequirementMetrics_Accessor.get()) {
    completedRequirementMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanMetricsReportMDT::CanceledRequirementMetrics& MissionPlanMetricsReportMDT::getCanceledRequirementMetrics() const {
  return *canceledRequirementMetrics_Accessor;
}

uci::type::MissionPlanMetricsReportMDT::CanceledRequirementMetrics& MissionPlanMetricsReportMDT::getCanceledRequirementMetrics() {
  return *canceledRequirementMetrics_Accessor;
}

uci::type::MissionPlanMetricsReportMDT& MissionPlanMetricsReportMDT::setCanceledRequirementMetrics(const uci::type::MissionPlanMetricsReportMDT::CanceledRequirementMetrics& accessor) {
  if (&accessor != canceledRequirementMetrics_Accessor.get()) {
    canceledRequirementMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanMetricsReportMDT::ActiveRequirementMetrics& MissionPlanMetricsReportMDT::getActiveRequirementMetrics() const {
  return *activeRequirementMetrics_Accessor;
}

uci::type::MissionPlanMetricsReportMDT::ActiveRequirementMetrics& MissionPlanMetricsReportMDT::getActiveRequirementMetrics() {
  return *activeRequirementMetrics_Accessor;
}

uci::type::MissionPlanMetricsReportMDT& MissionPlanMetricsReportMDT::setActiveRequirementMetrics(const uci::type::MissionPlanMetricsReportMDT::ActiveRequirementMetrics& accessor) {
  if (&accessor != activeRequirementMetrics_Accessor.get()) {
    activeRequirementMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<MissionPlanMetricsReportMDT> MissionPlanMetricsReportMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanMetricsReportMDT : type};
  return (requestedType == uci::type::accessorType::missionPlanMetricsReportMDT) ? boost::make_unique<MissionPlanMetricsReportMDT>() : nullptr;
}

/**  */
namespace MissionPlanMetricsReportMDT_Names {

constexpr const char* Extern_Type_Name{"MissionPlanMetricsReportMDT"};
constexpr const char* MissionPlanMetricsReportID_Name{"MissionPlanMetricsReportID"};
constexpr const char* MissionPlanID_Name{"MissionPlanID"};
constexpr const char* NumberOfReplans_Name{"NumberOfReplans"};
constexpr const char* CompletedRequirementMetrics_Name{"CompletedRequirementMetrics"};
constexpr const char* CanceledRequirementMetrics_Name{"CanceledRequirementMetrics"};
constexpr const char* ActiveRequirementMetrics_Name{"ActiveRequirementMetrics"};

} // namespace MissionPlanMetricsReportMDT_Names

void MissionPlanMetricsReportMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionPlanMetricsReportMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionPlanMetricsReportMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MissionPlanMetricsReportMDT_Names::MissionPlanMetricsReportID_Name) {
      MissionPlanMetricsReportID_Type::deserialize(valueType.second, accessor.getMissionPlanMetricsReportID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanMetricsReportMDT_Names::MissionPlanID_Name) {
      MissionPlanID_Type::deserialize(valueType.second, accessor.getMissionPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanMetricsReportMDT_Names::NumberOfReplans_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfReplans(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + MissionPlanMetricsReportMDT_Names::CompletedRequirementMetrics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanMetricsReportMDT::CompletedRequirementMetrics& boundedList = accessor.getCompletedRequirementMetrics();
        const uci::type::MissionPlanMetricsReportMDT::CompletedRequirementMetrics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CompletedRequirementMetricsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanMetricsReportMDT_Names::CanceledRequirementMetrics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanMetricsReportMDT::CanceledRequirementMetrics& boundedList = accessor.getCanceledRequirementMetrics();
        const uci::type::MissionPlanMetricsReportMDT::CanceledRequirementMetrics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanMetricsReportMDT_Names::ActiveRequirementMetrics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanMetricsReportMDT::ActiveRequirementMetrics& boundedList = accessor.getActiveRequirementMetrics();
        const uci::type::MissionPlanMetricsReportMDT::ActiveRequirementMetrics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string MissionPlanMetricsReportMDT::serialize(const uci::type::MissionPlanMetricsReportMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MissionPlanMetricsReportMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MissionPlanMetricsReportMDT_Names::Extern_Type_Name);
  }
  MissionPlanMetricsReportID_Type::serialize(accessor.getMissionPlanMetricsReportID(), node, MissionPlanMetricsReportMDT_Names::MissionPlanMetricsReportID_Name);
  MissionPlanID_Type::serialize(accessor.getMissionPlanID(), node, MissionPlanMetricsReportMDT_Names::MissionPlanID_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumberOfReplans(), node, MissionPlanMetricsReportMDT_Names::NumberOfReplans_Name);
  {
    const uci::type::MissionPlanMetricsReportMDT::CompletedRequirementMetrics& boundedList = accessor.getCompletedRequirementMetrics();
    for (uci::type::MissionPlanMetricsReportMDT::CompletedRequirementMetrics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CompletedRequirementMetricsType::serialize(boundedList.at(i), node, MissionPlanMetricsReportMDT_Names::CompletedRequirementMetrics_Name);
    }
  }
  {
    const uci::type::MissionPlanMetricsReportMDT::CanceledRequirementMetrics& boundedList = accessor.getCanceledRequirementMetrics();
    for (uci::type::MissionPlanMetricsReportMDT::CanceledRequirementMetrics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementMetricsReportType::serialize(boundedList.at(i), node, MissionPlanMetricsReportMDT_Names::CanceledRequirementMetrics_Name);
    }
  }
  {
    const uci::type::MissionPlanMetricsReportMDT::ActiveRequirementMetrics& boundedList = accessor.getActiveRequirementMetrics();
    for (uci::type::MissionPlanMetricsReportMDT::ActiveRequirementMetrics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementMetricsReportType::serialize(boundedList.at(i), node, MissionPlanMetricsReportMDT_Names::ActiveRequirementMetrics_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MissionPlanMetricsReportMDT& MissionPlanMetricsReportMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MissionPlanMetricsReportMDT>().release());
}

uci::type::MissionPlanMetricsReportMDT& MissionPlanMetricsReportMDT::create(const uci::type::MissionPlanMetricsReportMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MissionPlanMetricsReportMDT> newAccessor{boost::make_unique<asb_uci::type::MissionPlanMetricsReportMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MissionPlanMetricsReportMDT::destroy(uci::type::MissionPlanMetricsReportMDT& accessor) {
  delete dynamic_cast<asb_uci::type::MissionPlanMetricsReportMDT*>(&accessor);
}

} // namespace type

} // namespace uci

