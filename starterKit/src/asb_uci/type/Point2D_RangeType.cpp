/** @file Point2D_RangeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/Point2D_RangeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/Point2D_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/Point2D_RangeType.h"
#include "uci/type/Point2D_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

Point2D_RangeType::Point2D_RangeType()
  : begin_Accessor{boost::make_unique<Point2D_Type>()},
    end_Accessor{boost::make_unique<Point2D_Type>()} {
}

Point2D_RangeType::~Point2D_RangeType() = default;

void Point2D_RangeType::copy(const uci::type::Point2D_RangeType& accessor) {
  copyImpl(accessor, false);
}

void Point2D_RangeType::copyImpl(const uci::type::Point2D_RangeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const Point2D_RangeType&>(accessor);
    setBegin(*(accessorImpl.begin_Accessor));
    setEnd(*(accessorImpl.end_Accessor));
  }
}

void Point2D_RangeType::reset() noexcept {
  if (begin_Accessor->getAccessorType() != uci::type::accessorType::point2D_Type) {
    begin_Accessor = boost::make_unique<Point2D_Type>();
  } else {
    begin_Accessor->reset();
  }
  if (end_Accessor->getAccessorType() != uci::type::accessorType::point2D_Type) {
    end_Accessor = boost::make_unique<Point2D_Type>();
  } else {
    end_Accessor->reset();
  }
}

const uci::type::Point2D_Type& Point2D_RangeType::getBegin() const {
  return *begin_Accessor;
}

uci::type::Point2D_Type& Point2D_RangeType::getBegin() {
  return *begin_Accessor;
}

uci::type::Point2D_RangeType& Point2D_RangeType::setBegin(const uci::type::Point2D_Type& accessor) {
  enableBegin(accessor.getAccessorType());
  if (&accessor != begin_Accessor.get()) {
    begin_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point2D_Type& Point2D_RangeType::enableBegin(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!begin_Accessor) || (begin_Accessor->getAccessorType() != requestedType)) {
    begin_Accessor = Point2D_Type::create(requestedType);
    if (!begin_Accessor) {
      throw uci::base::UCIException("Error in enableBegin(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *begin_Accessor;
}

const uci::type::Point2D_Type& Point2D_RangeType::getEnd() const {
  return *end_Accessor;
}

uci::type::Point2D_Type& Point2D_RangeType::getEnd() {
  return *end_Accessor;
}

uci::type::Point2D_RangeType& Point2D_RangeType::setEnd(const uci::type::Point2D_Type& accessor) {
  enableEnd(accessor.getAccessorType());
  if (&accessor != end_Accessor.get()) {
    end_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point2D_Type& Point2D_RangeType::enableEnd(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!end_Accessor) || (end_Accessor->getAccessorType() != requestedType)) {
    end_Accessor = Point2D_Type::create(requestedType);
    if (!end_Accessor) {
      throw uci::base::UCIException("Error in enableEnd(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *end_Accessor;
}

std::unique_ptr<Point2D_RangeType> Point2D_RangeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_RangeType : type};
  return (requestedType == uci::type::accessorType::point2D_RangeType) ? boost::make_unique<Point2D_RangeType>() : nullptr;
}

/**  */
namespace Point2D_RangeType_Names {

constexpr const char* Extern_Type_Name{"Point2D_RangeType"};
constexpr const char* Begin_Name{"Begin"};
constexpr const char* End_Name{"End"};

} // namespace Point2D_RangeType_Names

void Point2D_RangeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::Point2D_RangeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = Point2D_RangeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + Point2D_RangeType_Names::Begin_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableBegin(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Point2D_RangeType_Names::End_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEnd(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string Point2D_RangeType::serialize(const uci::type::Point2D_RangeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? Point2D_RangeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, Point2D_RangeType_Names::Extern_Type_Name);
  }
  Point2D_Type::serialize(accessor.getBegin(), node, Point2D_RangeType_Names::Begin_Name);
  Point2D_Type::serialize(accessor.getEnd(), node, Point2D_RangeType_Names::End_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::Point2D_RangeType& Point2D_RangeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::Point2D_RangeType>().release());
}

uci::type::Point2D_RangeType& Point2D_RangeType::create(const uci::type::Point2D_RangeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::Point2D_RangeType> newAccessor{boost::make_unique<asb_uci::type::Point2D_RangeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void Point2D_RangeType::destroy(uci::type::Point2D_RangeType& accessor) {
  delete dynamic_cast<asb_uci::type::Point2D_RangeType*>(&accessor);
}

} // namespace type

} // namespace uci

