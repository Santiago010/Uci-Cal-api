/** @file ModulationOnPulseDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ModulationOnPulseDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/type/ModulationOnPulseDataBaseType.h"
#include "../../../include/asb_uci/type/PMOP_SequenceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ModulationOnPulseDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PMOP_SequenceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ModulationOnPulseDataType::ModulationOnPulseDataType() = default;

ModulationOnPulseDataType::~ModulationOnPulseDataType() = default;

void ModulationOnPulseDataType::copy(const uci::type::ModulationOnPulseDataType& accessor) {
  copyImpl(accessor, false);
}

void ModulationOnPulseDataType::copyImpl(const uci::type::ModulationOnPulseDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ModulationOnPulseDataBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ModulationOnPulseDataType&>(accessor);
    if (accessorImpl.hasFMOP_Span()) {
      setFMOP_Span(accessorImpl.getFMOP_Span());
    } else {
      clearFMOP_Span();
    }
    if (accessorImpl.fMOP_Range_Accessor) {
      setFMOP_Range(*(accessorImpl.fMOP_Range_Accessor));
    } else {
      fMOP_Range_Accessor.reset();
    }
    if (accessorImpl.hasPMOP_BitDuration()) {
      setPMOP_BitDuration(accessorImpl.getPMOP_BitDuration());
    } else {
      clearPMOP_BitDuration();
    }
    if (accessorImpl.pMOP_Sequence_Accessor) {
      setPMOP_Sequence(*(accessorImpl.pMOP_Sequence_Accessor));
    } else {
      pMOP_Sequence_Accessor.reset();
    }
  }
}

void ModulationOnPulseDataType::reset() noexcept {
  ModulationOnPulseDataBaseType::reset();
  clearFMOP_Span();
  fMOP_Range_Accessor.reset();
  clearPMOP_BitDuration();
  pMOP_Sequence_Accessor.reset();
}

uci::type::DurationTypeValue ModulationOnPulseDataType::getFMOP_Span() const {
  if (fMOP_Span_Accessor) {
    return *fMOP_Span_Accessor;
  }
  throw uci::base::UCIException("Error in getFMOP_Span(): An attempt was made to get an optional field that was not enabled, call hasFMOP_Span() to determine if it is safe to call getFMOP_Span()");
}

uci::type::ModulationOnPulseDataType& ModulationOnPulseDataType::setFMOP_Span(uci::type::DurationTypeValue value) {
  fMOP_Span_Accessor = value;
  return *this;
}

bool ModulationOnPulseDataType::hasFMOP_Span() const noexcept {
  return fMOP_Span_Accessor.has_value();
}

uci::type::ModulationOnPulseDataType& ModulationOnPulseDataType::clearFMOP_Span() noexcept {
  fMOP_Span_Accessor.reset();
  return *this;
}

uci::type::FrequencyRangeType& ModulationOnPulseDataType::getFMOP_Range_() const {
  if (fMOP_Range_Accessor) {
    return *fMOP_Range_Accessor;
  }
  throw uci::base::UCIException("Error in getFMOP_Range(): An attempt was made to get an optional field that was not enabled, call hasFMOP_Range() to determine if it is safe to call getFMOP_Range()");
}

const uci::type::FrequencyRangeType& ModulationOnPulseDataType::getFMOP_Range() const {
  return getFMOP_Range_();
}

uci::type::FrequencyRangeType& ModulationOnPulseDataType::getFMOP_Range() {
  return getFMOP_Range_();
}

uci::type::ModulationOnPulseDataType& ModulationOnPulseDataType::setFMOP_Range(const uci::type::FrequencyRangeType& accessor) {
  enableFMOP_Range();
  if (&accessor != fMOP_Range_Accessor.get()) {
    fMOP_Range_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ModulationOnPulseDataType::hasFMOP_Range() const noexcept {
  return static_cast<bool>(fMOP_Range_Accessor);
}

uci::type::FrequencyRangeType& ModulationOnPulseDataType::enableFMOP_Range(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyRangeType : type};
  if ((!fMOP_Range_Accessor) || (fMOP_Range_Accessor->getAccessorType() != requestedType)) {
    fMOP_Range_Accessor = FrequencyRangeType::create(requestedType);
    if (!fMOP_Range_Accessor) {
      throw uci::base::UCIException("Error in enableFMOP_Range(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fMOP_Range_Accessor;
}

uci::type::ModulationOnPulseDataType& ModulationOnPulseDataType::clearFMOP_Range() noexcept {
  fMOP_Range_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue ModulationOnPulseDataType::getPMOP_BitDuration() const {
  if (pMOP_BitDuration_Accessor) {
    return *pMOP_BitDuration_Accessor;
  }
  throw uci::base::UCIException("Error in getPMOP_BitDuration(): An attempt was made to get an optional field that was not enabled, call hasPMOP_BitDuration() to determine if it is safe to call getPMOP_BitDuration()");
}

uci::type::ModulationOnPulseDataType& ModulationOnPulseDataType::setPMOP_BitDuration(uci::type::DurationTypeValue value) {
  pMOP_BitDuration_Accessor = value;
  return *this;
}

bool ModulationOnPulseDataType::hasPMOP_BitDuration() const noexcept {
  return pMOP_BitDuration_Accessor.has_value();
}

uci::type::ModulationOnPulseDataType& ModulationOnPulseDataType::clearPMOP_BitDuration() noexcept {
  pMOP_BitDuration_Accessor.reset();
  return *this;
}

uci::type::PMOP_SequenceType& ModulationOnPulseDataType::getPMOP_Sequence_() const {
  if (pMOP_Sequence_Accessor) {
    return *pMOP_Sequence_Accessor;
  }
  throw uci::base::UCIException("Error in getPMOP_Sequence(): An attempt was made to get an optional field that was not enabled, call hasPMOP_Sequence() to determine if it is safe to call getPMOP_Sequence()");
}

const uci::type::PMOP_SequenceType& ModulationOnPulseDataType::getPMOP_Sequence() const {
  return getPMOP_Sequence_();
}

uci::type::PMOP_SequenceType& ModulationOnPulseDataType::getPMOP_Sequence() {
  return getPMOP_Sequence_();
}

uci::type::ModulationOnPulseDataType& ModulationOnPulseDataType::setPMOP_Sequence(const uci::type::PMOP_SequenceType& accessor) {
  enablePMOP_Sequence();
  if (&accessor != pMOP_Sequence_Accessor.get()) {
    pMOP_Sequence_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ModulationOnPulseDataType::hasPMOP_Sequence() const noexcept {
  return static_cast<bool>(pMOP_Sequence_Accessor);
}

uci::type::PMOP_SequenceType& ModulationOnPulseDataType::enablePMOP_Sequence(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pMOP_SequenceType : type};
  if ((!pMOP_Sequence_Accessor) || (pMOP_Sequence_Accessor->getAccessorType() != requestedType)) {
    pMOP_Sequence_Accessor = PMOP_SequenceType::create(requestedType);
    if (!pMOP_Sequence_Accessor) {
      throw uci::base::UCIException("Error in enablePMOP_Sequence(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pMOP_Sequence_Accessor;
}

uci::type::ModulationOnPulseDataType& ModulationOnPulseDataType::clearPMOP_Sequence() noexcept {
  pMOP_Sequence_Accessor.reset();
  return *this;
}

std::unique_ptr<ModulationOnPulseDataType> ModulationOnPulseDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::modulationOnPulseDataType : type};
  return (requestedType == uci::type::accessorType::modulationOnPulseDataType) ? boost::make_unique<ModulationOnPulseDataType>() : nullptr;
}

/**  */
namespace ModulationOnPulseDataType_Names {

constexpr const char* Extern_Type_Name{"ModulationOnPulseDataType"};
constexpr const char* FMOP_Span_Name{"FMOP_Span"};
constexpr const char* FMOP_Range_Name{"FMOP_Range"};
constexpr const char* PMOP_BitDuration_Name{"PMOP_BitDuration"};
constexpr const char* PMOP_Sequence_Name{"PMOP_Sequence"};

} // namespace ModulationOnPulseDataType_Names

void ModulationOnPulseDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ModulationOnPulseDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ModulationOnPulseDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ModulationOnPulseDataType_Names::FMOP_Span_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFMOP_Span(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + ModulationOnPulseDataType_Names::FMOP_Range_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableFMOP_Range(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ModulationOnPulseDataType_Names::PMOP_BitDuration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPMOP_BitDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + ModulationOnPulseDataType_Names::PMOP_Sequence_Name) {
      PMOP_SequenceType::deserialize(valueType.second, accessor.enablePMOP_Sequence(), nodeName, nsPrefix);
    }
  }
  ModulationOnPulseDataBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ModulationOnPulseDataType::serialize(const uci::type::ModulationOnPulseDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ModulationOnPulseDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ModulationOnPulseDataType_Names::Extern_Type_Name);
  }
  ModulationOnPulseDataBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasFMOP_Span()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getFMOP_Span(), node, ModulationOnPulseDataType_Names::FMOP_Span_Name);
  }
  if (accessor.hasFMOP_Range()) {
    FrequencyRangeType::serialize(accessor.getFMOP_Range(), node, ModulationOnPulseDataType_Names::FMOP_Range_Name);
  }
  if (accessor.hasPMOP_BitDuration()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPMOP_BitDuration(), node, ModulationOnPulseDataType_Names::PMOP_BitDuration_Name);
  }
  if (accessor.hasPMOP_Sequence()) {
    PMOP_SequenceType::serialize(accessor.getPMOP_Sequence(), node, ModulationOnPulseDataType_Names::PMOP_Sequence_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ModulationOnPulseDataType& ModulationOnPulseDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ModulationOnPulseDataType>().release());
}

uci::type::ModulationOnPulseDataType& ModulationOnPulseDataType::create(const uci::type::ModulationOnPulseDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ModulationOnPulseDataType> newAccessor{boost::make_unique<asb_uci::type::ModulationOnPulseDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ModulationOnPulseDataType::destroy(uci::type::ModulationOnPulseDataType& accessor) {
  delete dynamic_cast<asb_uci::type::ModulationOnPulseDataType*>(&accessor);
}

} // namespace type

} // namespace uci

