/** @file MTI_TargetClassType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MTI_TargetClassType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/MTI_TargetClassEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MTI_TargetClassEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MTI_TargetClassType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MTI_TargetClassType::MTI_TargetClassType() = default;

MTI_TargetClassType::~MTI_TargetClassType() = default;

void MTI_TargetClassType::copy(const uci::type::MTI_TargetClassType& accessor) {
  copyImpl(accessor, false);
}

void MTI_TargetClassType::copyImpl(const uci::type::MTI_TargetClassType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MTI_TargetClassType&>(accessor);
    if (accessorImpl.mTI_TargetClass_Accessor) {
      setMTI_TargetClass(*(accessorImpl.mTI_TargetClass_Accessor));
    } else {
      mTI_TargetClass_Accessor.reset();
    }
    if (accessorImpl.foreignClass_Accessor) {
      setForeignClass(*(accessorImpl.foreignClass_Accessor));
    } else {
      foreignClass_Accessor.reset();
    }
  }
}

void MTI_TargetClassType::reset() noexcept {
  mTI_TargetClass_Accessor.reset();
  foreignClass_Accessor.reset();
}

uci::type::MTI_TargetClassType::MTI_TargetClassTypeChoice MTI_TargetClassType::getMTI_TargetClassTypeChoiceOrdinal() const noexcept {
  if (mTI_TargetClass_Accessor) {
    return MTI_TARGETCLASSTYPE_CHOICE_MTI_TARGETCLASS;
  }
  if (foreignClass_Accessor) {
    return MTI_TARGETCLASSTYPE_CHOICE_FOREIGNCLASS;
  }
  return MTI_TARGETCLASSTYPE_CHOICE_NONE;
}

uci::type::MTI_TargetClassType& MTI_TargetClassType::setMTI_TargetClassTypeChoiceOrdinal(uci::type::MTI_TargetClassType::MTI_TargetClassTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case MTI_TARGETCLASSTYPE_CHOICE_MTI_TARGETCLASS:
      chooseMTI_TargetClass("setMTI_TargetClassTypeChoiceOrdinal", type);
      break;
    case MTI_TARGETCLASSTYPE_CHOICE_FOREIGNCLASS:
      chooseForeignClass("setMTI_TargetClassTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setMTI_TargetClassTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::MTI_TargetClassEnum& MTI_TargetClassType::getMTI_TargetClass_() const {
  if (mTI_TargetClass_Accessor) {
    return *mTI_TargetClass_Accessor;
  }
  throw uci::base::UCIException("Error in getMTI_TargetClass(): Unable to get MTI_TargetClass, field not selected");
}

const uci::type::MTI_TargetClassEnum& MTI_TargetClassType::getMTI_TargetClass() const {
  return getMTI_TargetClass_();
}

uci::type::MTI_TargetClassEnum& MTI_TargetClassType::getMTI_TargetClass() {
  return getMTI_TargetClass_();
}

uci::type::MTI_TargetClassType& MTI_TargetClassType::setMTI_TargetClass(const uci::type::MTI_TargetClassEnum& accessor) {
  chooseMTI_TargetClass();
  if (&accessor != mTI_TargetClass_Accessor.get()) {
    mTI_TargetClass_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MTI_TargetClassType& MTI_TargetClassType::setMTI_TargetClass(uci::type::MTI_TargetClassEnum::EnumerationItem value) {
  chooseMTI_TargetClass().setValue(value);
  return *this;
}

bool MTI_TargetClassType::isMTI_TargetClass() const noexcept {
  return static_cast<bool>(mTI_TargetClass_Accessor);
}

uci::type::MTI_TargetClassEnum& MTI_TargetClassType::chooseMTI_TargetClass(const std::string& method, uci::base::accessorType::AccessorType type) {
  foreignClass_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mTI_TargetClassEnum : type};
  if ((!mTI_TargetClass_Accessor) || (mTI_TargetClass_Accessor->getAccessorType() != requestedType)) {
    mTI_TargetClass_Accessor = MTI_TargetClassEnum::create(type);
    if (!mTI_TargetClass_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mTI_TargetClass_Accessor;
}

uci::type::MTI_TargetClassEnum& MTI_TargetClassType::chooseMTI_TargetClass(uci::base::accessorType::AccessorType type) {
  return chooseMTI_TargetClass("chooseMTI_TargetClass", type);
}

uci::type::ForeignKeyType& MTI_TargetClassType::getForeignClass_() const {
  if (foreignClass_Accessor) {
    return *foreignClass_Accessor;
  }
  throw uci::base::UCIException("Error in getForeignClass(): Unable to get ForeignClass, field not selected");
}

const uci::type::ForeignKeyType& MTI_TargetClassType::getForeignClass() const {
  return getForeignClass_();
}

uci::type::ForeignKeyType& MTI_TargetClassType::getForeignClass() {
  return getForeignClass_();
}

uci::type::MTI_TargetClassType& MTI_TargetClassType::setForeignClass(const uci::type::ForeignKeyType& accessor) {
  chooseForeignClass("setForeignClass", accessor.getAccessorType());
  if (&accessor != foreignClass_Accessor.get()) {
    foreignClass_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool MTI_TargetClassType::isForeignClass() const noexcept {
  return static_cast<bool>(foreignClass_Accessor);
}

uci::type::ForeignKeyType& MTI_TargetClassType::chooseForeignClass(const std::string& method, uci::base::accessorType::AccessorType type) {
  mTI_TargetClass_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!foreignClass_Accessor) || (foreignClass_Accessor->getAccessorType() != requestedType)) {
    foreignClass_Accessor = ForeignKeyType::create(type);
    if (!foreignClass_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *foreignClass_Accessor;
}

uci::type::ForeignKeyType& MTI_TargetClassType::chooseForeignClass(uci::base::accessorType::AccessorType type) {
  return chooseForeignClass("chooseForeignClass", type);
}

std::unique_ptr<MTI_TargetClassType> MTI_TargetClassType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mTI_TargetClassType : type};
  return (requestedType == uci::type::accessorType::mTI_TargetClassType) ? boost::make_unique<MTI_TargetClassType>() : nullptr;
}

/**  */
namespace MTI_TargetClassType_Names {

constexpr const char* Extern_Type_Name{"MTI_TargetClassType"};
constexpr const char* MTI_TargetClass_Name{"MTI_TargetClass"};
constexpr const char* ForeignClass_Name{"ForeignClass"};

} // namespace MTI_TargetClassType_Names

void MTI_TargetClassType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MTI_TargetClassType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MTI_TargetClassType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MTI_TargetClassType_Names::MTI_TargetClass_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseMTI_TargetClass().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MTI_TargetClassType_Names::ForeignClass_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseForeignClass(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string MTI_TargetClassType::serialize(const uci::type::MTI_TargetClassType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MTI_TargetClassType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MTI_TargetClassType_Names::Extern_Type_Name);
  }
  if (accessor.isMTI_TargetClass()) {
    MTI_TargetClassEnum::serialize(accessor.getMTI_TargetClass(), node, MTI_TargetClassType_Names::MTI_TargetClass_Name, false);
  } else if (accessor.isForeignClass()) {
    ForeignKeyType::serialize(accessor.getForeignClass(), node, MTI_TargetClassType_Names::ForeignClass_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MTI_TargetClassType& MTI_TargetClassType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MTI_TargetClassType>().release());
}

uci::type::MTI_TargetClassType& MTI_TargetClassType::create(const uci::type::MTI_TargetClassType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MTI_TargetClassType> newAccessor{boost::make_unique<asb_uci::type::MTI_TargetClassType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MTI_TargetClassType::destroy(uci::type::MTI_TargetClassType& accessor) {
  delete dynamic_cast<asb_uci::type::MTI_TargetClassType*>(&accessor);
}

} // namespace type

} // namespace uci

