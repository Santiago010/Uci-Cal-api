/** @file AreaConstraintsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AreaConstraintsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AltitudeConstraintsType.h"
#include "asb_uci/type/DistanceConstraintsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AltitudeConstraintsType.h"
#include "uci/type/AreaConstraintsType.h"
#include "uci/type/DistanceConstraintsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AreaConstraintsType::AreaConstraintsType() = default;

AreaConstraintsType::~AreaConstraintsType() = default;

void AreaConstraintsType::copy(const uci::type::AreaConstraintsType& accessor) {
  copyImpl(accessor, false);
}

void AreaConstraintsType::copyImpl(const uci::type::AreaConstraintsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AreaConstraintsType&>(accessor);
    if (accessorImpl.distanceConstraints_Accessor) {
      setDistanceConstraints(*(accessorImpl.distanceConstraints_Accessor));
    } else {
      distanceConstraints_Accessor.reset();
    }
    if (accessorImpl.altitudeConstraints_Accessor) {
      setAltitudeConstraints(*(accessorImpl.altitudeConstraints_Accessor));
    } else {
      altitudeConstraints_Accessor.reset();
    }
  }
}

void AreaConstraintsType::reset() noexcept {
  distanceConstraints_Accessor.reset();
  altitudeConstraints_Accessor.reset();
}

uci::type::DistanceConstraintsType& AreaConstraintsType::getDistanceConstraints_() const {
  if (distanceConstraints_Accessor) {
    return *distanceConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getDistanceConstraints(): An attempt was made to get an optional field that was not enabled, call hasDistanceConstraints() to determine if it is safe to call getDistanceConstraints()");
}

const uci::type::DistanceConstraintsType& AreaConstraintsType::getDistanceConstraints() const {
  return getDistanceConstraints_();
}

uci::type::DistanceConstraintsType& AreaConstraintsType::getDistanceConstraints() {
  return getDistanceConstraints_();
}

uci::type::AreaConstraintsType& AreaConstraintsType::setDistanceConstraints(const uci::type::DistanceConstraintsType& accessor) {
  enableDistanceConstraints();
  if (&accessor != distanceConstraints_Accessor.get()) {
    distanceConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AreaConstraintsType::hasDistanceConstraints() const noexcept {
  return static_cast<bool>(distanceConstraints_Accessor);
}

uci::type::DistanceConstraintsType& AreaConstraintsType::enableDistanceConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::distanceConstraintsType : type};
  if ((!distanceConstraints_Accessor) || (distanceConstraints_Accessor->getAccessorType() != requestedType)) {
    distanceConstraints_Accessor = DistanceConstraintsType::create(requestedType);
    if (!distanceConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableDistanceConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *distanceConstraints_Accessor;
}

uci::type::AreaConstraintsType& AreaConstraintsType::clearDistanceConstraints() noexcept {
  distanceConstraints_Accessor.reset();
  return *this;
}

uci::type::AltitudeConstraintsType& AreaConstraintsType::getAltitudeConstraints_() const {
  if (altitudeConstraints_Accessor) {
    return *altitudeConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeConstraints(): An attempt was made to get an optional field that was not enabled, call hasAltitudeConstraints() to determine if it is safe to call getAltitudeConstraints()");
}

const uci::type::AltitudeConstraintsType& AreaConstraintsType::getAltitudeConstraints() const {
  return getAltitudeConstraints_();
}

uci::type::AltitudeConstraintsType& AreaConstraintsType::getAltitudeConstraints() {
  return getAltitudeConstraints_();
}

uci::type::AreaConstraintsType& AreaConstraintsType::setAltitudeConstraints(const uci::type::AltitudeConstraintsType& accessor) {
  enableAltitudeConstraints();
  if (&accessor != altitudeConstraints_Accessor.get()) {
    altitudeConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AreaConstraintsType::hasAltitudeConstraints() const noexcept {
  return static_cast<bool>(altitudeConstraints_Accessor);
}

uci::type::AltitudeConstraintsType& AreaConstraintsType::enableAltitudeConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::altitudeConstraintsType : type};
  if ((!altitudeConstraints_Accessor) || (altitudeConstraints_Accessor->getAccessorType() != requestedType)) {
    altitudeConstraints_Accessor = AltitudeConstraintsType::create(requestedType);
    if (!altitudeConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableAltitudeConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *altitudeConstraints_Accessor;
}

uci::type::AreaConstraintsType& AreaConstraintsType::clearAltitudeConstraints() noexcept {
  altitudeConstraints_Accessor.reset();
  return *this;
}

std::unique_ptr<AreaConstraintsType> AreaConstraintsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::areaConstraintsType : type};
  return (requestedType == uci::type::accessorType::areaConstraintsType) ? boost::make_unique<AreaConstraintsType>() : nullptr;
}

/**  */
namespace AreaConstraintsType_Names {

constexpr const char* Extern_Type_Name{"AreaConstraintsType"};
constexpr const char* DistanceConstraints_Name{"DistanceConstraints"};
constexpr const char* AltitudeConstraints_Name{"AltitudeConstraints"};

} // namespace AreaConstraintsType_Names

void AreaConstraintsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AreaConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AreaConstraintsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AreaConstraintsType_Names::DistanceConstraints_Name) {
      DistanceConstraintsType::deserialize(valueType.second, accessor.enableDistanceConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AreaConstraintsType_Names::AltitudeConstraints_Name) {
      AltitudeConstraintsType::deserialize(valueType.second, accessor.enableAltitudeConstraints(), nodeName, nsPrefix);
    }
  }
}

std::string AreaConstraintsType::serialize(const uci::type::AreaConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AreaConstraintsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AreaConstraintsType_Names::Extern_Type_Name);
  }
  if (accessor.hasDistanceConstraints()) {
    DistanceConstraintsType::serialize(accessor.getDistanceConstraints(), node, AreaConstraintsType_Names::DistanceConstraints_Name);
  }
  if (accessor.hasAltitudeConstraints()) {
    AltitudeConstraintsType::serialize(accessor.getAltitudeConstraints(), node, AreaConstraintsType_Names::AltitudeConstraints_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AreaConstraintsType& AreaConstraintsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AreaConstraintsType>().release());
}

uci::type::AreaConstraintsType& AreaConstraintsType::create(const uci::type::AreaConstraintsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AreaConstraintsType> newAccessor{boost::make_unique<asb_uci::type::AreaConstraintsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AreaConstraintsType::destroy(uci::type::AreaConstraintsType& accessor) {
  delete dynamic_cast<asb_uci::type::AreaConstraintsType*>(&accessor);
}

} // namespace type

} // namespace uci

