/** @file ECEF_KinematicsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ECEF_KinematicsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ECEF_AccelerationType.h"
#include "../../../include/asb_uci/type/ECEF_PositionType.h"
#include "../../../include/asb_uci/type/ECEF_StateCovarianceType.h"
#include "../../../include/asb_uci/type/ECEF_VelocityType.h"
#include "../../../include/asb_uci/type/OrientationType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_AccelerationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_KinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_PositionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_StateCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_VelocityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrientationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ECEF_KinematicsType::ECEF_KinematicsType()
  : position_Accessor{boost::make_unique<ECEF_PositionType>()} {
}

ECEF_KinematicsType::~ECEF_KinematicsType() = default;

void ECEF_KinematicsType::copy(const uci::type::ECEF_KinematicsType& accessor) {
  copyImpl(accessor, false);
}

void ECEF_KinematicsType::copyImpl(const uci::type::ECEF_KinematicsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ECEF_KinematicsType&>(accessor);
    setTimeValid(accessorImpl.timeValid_Accessor);
    setPosition(*(accessorImpl.position_Accessor));
    if (accessorImpl.velocity_Accessor) {
      setVelocity(*(accessorImpl.velocity_Accessor));
    } else {
      velocity_Accessor.reset();
    }
    if (accessorImpl.acceleration_Accessor) {
      setAcceleration(*(accessorImpl.acceleration_Accessor));
    } else {
      acceleration_Accessor.reset();
    }
    if (accessorImpl.orientation_Accessor) {
      setOrientation(*(accessorImpl.orientation_Accessor));
    } else {
      orientation_Accessor.reset();
    }
    if (accessorImpl.stateCovariance_Accessor) {
      setStateCovariance(*(accessorImpl.stateCovariance_Accessor));
    } else {
      stateCovariance_Accessor.reset();
    }
  }
}

void ECEF_KinematicsType::reset() noexcept {
  timeValid_Accessor = 0;
  position_Accessor->reset();
  velocity_Accessor.reset();
  acceleration_Accessor.reset();
  orientation_Accessor.reset();
  stateCovariance_Accessor.reset();
}

uci::type::DateTimeTypeValue ECEF_KinematicsType::getTimeValid() const {
  return timeValid_Accessor;
}

uci::type::ECEF_KinematicsType& ECEF_KinematicsType::setTimeValid(uci::type::DateTimeTypeValue value) {
  timeValid_Accessor = value;
  return *this;
}


const uci::type::ECEF_PositionType& ECEF_KinematicsType::getPosition() const {
  return *position_Accessor;
}

uci::type::ECEF_PositionType& ECEF_KinematicsType::getPosition() {
  return *position_Accessor;
}

uci::type::ECEF_KinematicsType& ECEF_KinematicsType::setPosition(const uci::type::ECEF_PositionType& accessor) {
  if (&accessor != position_Accessor.get()) {
    position_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ECEF_VelocityType& ECEF_KinematicsType::getVelocity_() const {
  if (velocity_Accessor) {
    return *velocity_Accessor;
  }
  throw uci::base::UCIException("Error in getVelocity(): An attempt was made to get an optional field that was not enabled, call hasVelocity() to determine if it is safe to call getVelocity()");
}

const uci::type::ECEF_VelocityType& ECEF_KinematicsType::getVelocity() const {
  return getVelocity_();
}

uci::type::ECEF_VelocityType& ECEF_KinematicsType::getVelocity() {
  return getVelocity_();
}

uci::type::ECEF_KinematicsType& ECEF_KinematicsType::setVelocity(const uci::type::ECEF_VelocityType& accessor) {
  enableVelocity();
  if (&accessor != velocity_Accessor.get()) {
    velocity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_KinematicsType::hasVelocity() const noexcept {
  return static_cast<bool>(velocity_Accessor);
}

uci::type::ECEF_VelocityType& ECEF_KinematicsType::enableVelocity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_VelocityType : type};
  if ((!velocity_Accessor) || (velocity_Accessor->getAccessorType() != requestedType)) {
    velocity_Accessor = ECEF_VelocityType::create(requestedType);
    if (!velocity_Accessor) {
      throw uci::base::UCIException("Error in enableVelocity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *velocity_Accessor;
}

uci::type::ECEF_KinematicsType& ECEF_KinematicsType::clearVelocity() noexcept {
  velocity_Accessor.reset();
  return *this;
}

uci::type::ECEF_AccelerationType& ECEF_KinematicsType::getAcceleration_() const {
  if (acceleration_Accessor) {
    return *acceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getAcceleration(): An attempt was made to get an optional field that was not enabled, call hasAcceleration() to determine if it is safe to call getAcceleration()");
}

const uci::type::ECEF_AccelerationType& ECEF_KinematicsType::getAcceleration() const {
  return getAcceleration_();
}

uci::type::ECEF_AccelerationType& ECEF_KinematicsType::getAcceleration() {
  return getAcceleration_();
}

uci::type::ECEF_KinematicsType& ECEF_KinematicsType::setAcceleration(const uci::type::ECEF_AccelerationType& accessor) {
  enableAcceleration();
  if (&accessor != acceleration_Accessor.get()) {
    acceleration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_KinematicsType::hasAcceleration() const noexcept {
  return static_cast<bool>(acceleration_Accessor);
}

uci::type::ECEF_AccelerationType& ECEF_KinematicsType::enableAcceleration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_AccelerationType : type};
  if ((!acceleration_Accessor) || (acceleration_Accessor->getAccessorType() != requestedType)) {
    acceleration_Accessor = ECEF_AccelerationType::create(requestedType);
    if (!acceleration_Accessor) {
      throw uci::base::UCIException("Error in enableAcceleration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *acceleration_Accessor;
}

uci::type::ECEF_KinematicsType& ECEF_KinematicsType::clearAcceleration() noexcept {
  acceleration_Accessor.reset();
  return *this;
}

uci::type::OrientationType& ECEF_KinematicsType::getOrientation_() const {
  if (orientation_Accessor) {
    return *orientation_Accessor;
  }
  throw uci::base::UCIException("Error in getOrientation(): An attempt was made to get an optional field that was not enabled, call hasOrientation() to determine if it is safe to call getOrientation()");
}

const uci::type::OrientationType& ECEF_KinematicsType::getOrientation() const {
  return getOrientation_();
}

uci::type::OrientationType& ECEF_KinematicsType::getOrientation() {
  return getOrientation_();
}

uci::type::ECEF_KinematicsType& ECEF_KinematicsType::setOrientation(const uci::type::OrientationType& accessor) {
  enableOrientation();
  if (&accessor != orientation_Accessor.get()) {
    orientation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_KinematicsType::hasOrientation() const noexcept {
  return static_cast<bool>(orientation_Accessor);
}

uci::type::OrientationType& ECEF_KinematicsType::enableOrientation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orientationType : type};
  if ((!orientation_Accessor) || (orientation_Accessor->getAccessorType() != requestedType)) {
    orientation_Accessor = OrientationType::create(requestedType);
    if (!orientation_Accessor) {
      throw uci::base::UCIException("Error in enableOrientation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orientation_Accessor;
}

uci::type::ECEF_KinematicsType& ECEF_KinematicsType::clearOrientation() noexcept {
  orientation_Accessor.reset();
  return *this;
}

uci::type::ECEF_StateCovarianceType& ECEF_KinematicsType::getStateCovariance_() const {
  if (stateCovariance_Accessor) {
    return *stateCovariance_Accessor;
  }
  throw uci::base::UCIException("Error in getStateCovariance(): An attempt was made to get an optional field that was not enabled, call hasStateCovariance() to determine if it is safe to call getStateCovariance()");
}

const uci::type::ECEF_StateCovarianceType& ECEF_KinematicsType::getStateCovariance() const {
  return getStateCovariance_();
}

uci::type::ECEF_StateCovarianceType& ECEF_KinematicsType::getStateCovariance() {
  return getStateCovariance_();
}

uci::type::ECEF_KinematicsType& ECEF_KinematicsType::setStateCovariance(const uci::type::ECEF_StateCovarianceType& accessor) {
  enableStateCovariance();
  if (&accessor != stateCovariance_Accessor.get()) {
    stateCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ECEF_KinematicsType::hasStateCovariance() const noexcept {
  return static_cast<bool>(stateCovariance_Accessor);
}

uci::type::ECEF_StateCovarianceType& ECEF_KinematicsType::enableStateCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_StateCovarianceType : type};
  if ((!stateCovariance_Accessor) || (stateCovariance_Accessor->getAccessorType() != requestedType)) {
    stateCovariance_Accessor = ECEF_StateCovarianceType::create(requestedType);
    if (!stateCovariance_Accessor) {
      throw uci::base::UCIException("Error in enableStateCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *stateCovariance_Accessor;
}

uci::type::ECEF_KinematicsType& ECEF_KinematicsType::clearStateCovariance() noexcept {
  stateCovariance_Accessor.reset();
  return *this;
}

std::unique_ptr<ECEF_KinematicsType> ECEF_KinematicsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_KinematicsType : type};
  return (requestedType == uci::type::accessorType::eCEF_KinematicsType) ? boost::make_unique<ECEF_KinematicsType>() : nullptr;
}

/**  */
namespace ECEF_KinematicsType_Names {

constexpr const char* Extern_Type_Name{"ECEF_KinematicsType"};
constexpr const char* TimeValid_Name{"TimeValid"};
constexpr const char* Position_Name{"Position"};
constexpr const char* Velocity_Name{"Velocity"};
constexpr const char* Acceleration_Name{"Acceleration"};
constexpr const char* Orientation_Name{"Orientation"};
constexpr const char* StateCovariance_Name{"StateCovariance"};

} // namespace ECEF_KinematicsType_Names

void ECEF_KinematicsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ECEF_KinematicsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ECEF_KinematicsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ECEF_KinematicsType_Names::TimeValid_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeValid(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_KinematicsType_Names::Position_Name) {
      ECEF_PositionType::deserialize(valueType.second, accessor.getPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_KinematicsType_Names::Velocity_Name) {
      ECEF_VelocityType::deserialize(valueType.second, accessor.enableVelocity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_KinematicsType_Names::Acceleration_Name) {
      ECEF_AccelerationType::deserialize(valueType.second, accessor.enableAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_KinematicsType_Names::Orientation_Name) {
      OrientationType::deserialize(valueType.second, accessor.enableOrientation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_KinematicsType_Names::StateCovariance_Name) {
      ECEF_StateCovarianceType::deserialize(valueType.second, accessor.enableStateCovariance(), nodeName, nsPrefix);
    }
  }
}

std::string ECEF_KinematicsType::serialize(const uci::type::ECEF_KinematicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ECEF_KinematicsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ECEF_KinematicsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimeValid(), node, ECEF_KinematicsType_Names::TimeValid_Name);
  ECEF_PositionType::serialize(accessor.getPosition(), node, ECEF_KinematicsType_Names::Position_Name);
  if (accessor.hasVelocity()) {
    ECEF_VelocityType::serialize(accessor.getVelocity(), node, ECEF_KinematicsType_Names::Velocity_Name);
  }
  if (accessor.hasAcceleration()) {
    ECEF_AccelerationType::serialize(accessor.getAcceleration(), node, ECEF_KinematicsType_Names::Acceleration_Name);
  }
  if (accessor.hasOrientation()) {
    OrientationType::serialize(accessor.getOrientation(), node, ECEF_KinematicsType_Names::Orientation_Name);
  }
  if (accessor.hasStateCovariance()) {
    ECEF_StateCovarianceType::serialize(accessor.getStateCovariance(), node, ECEF_KinematicsType_Names::StateCovariance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ECEF_KinematicsType& ECEF_KinematicsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ECEF_KinematicsType>().release());
}

uci::type::ECEF_KinematicsType& ECEF_KinematicsType::create(const uci::type::ECEF_KinematicsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ECEF_KinematicsType> newAccessor{boost::make_unique<asb_uci::type::ECEF_KinematicsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ECEF_KinematicsType::destroy(uci::type::ECEF_KinematicsType& accessor) {
  delete dynamic_cast<asb_uci::type::ECEF_KinematicsType*>(&accessor);
}

} // namespace type

} // namespace uci

