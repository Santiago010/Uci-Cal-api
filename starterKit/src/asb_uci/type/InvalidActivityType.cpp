/** @file InvalidActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/InvalidActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CannotComplyType.h"
#include "asb_uci/type/PlannedActivityID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CannotComplyType.h"
#include "uci/type/InvalidActivityType.h"
#include "uci/type/PlannedActivityID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

InvalidActivityType::InvalidActivityType()
  : invalidActivityID_Accessor{boost::make_unique<PlannedActivityID_Type>()} {
}

InvalidActivityType::~InvalidActivityType() = default;

void InvalidActivityType::copy(const uci::type::InvalidActivityType& accessor) {
  copyImpl(accessor, false);
}

void InvalidActivityType::copyImpl(const uci::type::InvalidActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const InvalidActivityType&>(accessor);
    setInvalidActivityID(*(accessorImpl.invalidActivityID_Accessor));
    if (accessorImpl.invalidReason_Accessor) {
      setInvalidReason(*(accessorImpl.invalidReason_Accessor));
    } else {
      invalidReason_Accessor.reset();
    }
  }
}

void InvalidActivityType::reset() noexcept {
  invalidActivityID_Accessor->reset();
  invalidReason_Accessor.reset();
}

const uci::type::PlannedActivityID_Type& InvalidActivityType::getInvalidActivityID() const {
  return *invalidActivityID_Accessor;
}

uci::type::PlannedActivityID_Type& InvalidActivityType::getInvalidActivityID() {
  return *invalidActivityID_Accessor;
}

uci::type::InvalidActivityType& InvalidActivityType::setInvalidActivityID(const uci::type::PlannedActivityID_Type& accessor) {
  if (&accessor != invalidActivityID_Accessor.get()) {
    invalidActivityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CannotComplyType& InvalidActivityType::getInvalidReason_() const {
  if (invalidReason_Accessor) {
    return *invalidReason_Accessor;
  }
  throw uci::base::UCIException("Error in getInvalidReason(): An attempt was made to get an optional field that was not enabled, call hasInvalidReason() to determine if it is safe to call getInvalidReason()");
}

const uci::type::CannotComplyType& InvalidActivityType::getInvalidReason() const {
  return getInvalidReason_();
}

uci::type::CannotComplyType& InvalidActivityType::getInvalidReason() {
  return getInvalidReason_();
}

uci::type::InvalidActivityType& InvalidActivityType::setInvalidReason(const uci::type::CannotComplyType& accessor) {
  enableInvalidReason(accessor.getAccessorType());
  if (&accessor != invalidReason_Accessor.get()) {
    invalidReason_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool InvalidActivityType::hasInvalidReason() const noexcept {
  return static_cast<bool>(invalidReason_Accessor);
}

uci::type::CannotComplyType& InvalidActivityType::enableInvalidReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!invalidReason_Accessor) || (invalidReason_Accessor->getAccessorType() != requestedType)) {
    invalidReason_Accessor = CannotComplyType::create(requestedType);
    if (!invalidReason_Accessor) {
      throw uci::base::UCIException("Error in enableInvalidReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *invalidReason_Accessor;
}

uci::type::InvalidActivityType& InvalidActivityType::clearInvalidReason() noexcept {
  invalidReason_Accessor.reset();
  return *this;
}

std::unique_ptr<InvalidActivityType> InvalidActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::invalidActivityType : type};
  return (requestedType == uci::type::accessorType::invalidActivityType) ? boost::make_unique<InvalidActivityType>() : nullptr;
}

/**  */
namespace InvalidActivityType_Names {

constexpr const char* Extern_Type_Name{"InvalidActivityType"};
constexpr const char* InvalidActivityID_Name{"InvalidActivityID"};
constexpr const char* InvalidReason_Name{"InvalidReason"};

} // namespace InvalidActivityType_Names

void InvalidActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::InvalidActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = InvalidActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + InvalidActivityType_Names::InvalidActivityID_Name) {
      PlannedActivityID_Type::deserialize(valueType.second, accessor.getInvalidActivityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InvalidActivityType_Names::InvalidReason_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableInvalidReason(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string InvalidActivityType::serialize(const uci::type::InvalidActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? InvalidActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, InvalidActivityType_Names::Extern_Type_Name);
  }
  PlannedActivityID_Type::serialize(accessor.getInvalidActivityID(), node, InvalidActivityType_Names::InvalidActivityID_Name);
  if (accessor.hasInvalidReason()) {
    CannotComplyType::serialize(accessor.getInvalidReason(), node, InvalidActivityType_Names::InvalidReason_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::InvalidActivityType& InvalidActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::InvalidActivityType>().release());
}

uci::type::InvalidActivityType& InvalidActivityType::create(const uci::type::InvalidActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::InvalidActivityType> newAccessor{boost::make_unique<asb_uci::type::InvalidActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void InvalidActivityType::destroy(uci::type::InvalidActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::InvalidActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

