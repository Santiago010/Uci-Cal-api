/** @file MissileEmitterIdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MissileEmitterIdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/MissileEmitterModeEnum.h"
#include "asb_uci/type/NotationType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/MissileEmitterIdentityType.h"
#include "uci/type/MissileEmitterModeEnum.h"
#include "uci/type/NotationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MissileEmitterIdentityType::MissileEmitterIdentityType() = default;

MissileEmitterIdentityType::~MissileEmitterIdentityType() = default;

void MissileEmitterIdentityType::copy(const uci::type::MissileEmitterIdentityType& accessor) {
  copyImpl(accessor, false);
}

void MissileEmitterIdentityType::copyImpl(const uci::type::MissileEmitterIdentityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MissileEmitterIdentityType&>(accessor);
    if (accessorImpl.eLNOT_Identifier_Accessor) {
      setELNOT_Identifier(*(accessorImpl.eLNOT_Identifier_Accessor));
    } else {
      eLNOT_Identifier_Accessor.reset();
    }
    if (accessorImpl.missileMode_Accessor) {
      setMissileMode(*(accessorImpl.missileMode_Accessor));
    } else {
      missileMode_Accessor.reset();
    }
    if (accessorImpl.emitterIndex_Accessor) {
      setEmitterIndex(*(accessorImpl.emitterIndex_Accessor));
    } else {
      emitterIndex_Accessor.reset();
    }
  }
}

void MissileEmitterIdentityType::reset() noexcept {
  eLNOT_Identifier_Accessor.reset();
  missileMode_Accessor.reset();
  emitterIndex_Accessor.reset();
}

uci::type::NotationType& MissileEmitterIdentityType::getELNOT_Identifier_() const {
  if (eLNOT_Identifier_Accessor) {
    return *eLNOT_Identifier_Accessor;
  }
  throw uci::base::UCIException("Error in getELNOT_Identifier(): An attempt was made to get an optional field that was not enabled, call hasELNOT_Identifier() to determine if it is safe to call getELNOT_Identifier()");
}

const uci::type::NotationType& MissileEmitterIdentityType::getELNOT_Identifier() const {
  return getELNOT_Identifier_();
}

uci::type::NotationType& MissileEmitterIdentityType::getELNOT_Identifier() {
  return getELNOT_Identifier_();
}

uci::type::MissileEmitterIdentityType& MissileEmitterIdentityType::setELNOT_Identifier(const uci::type::NotationType& value) {
  return setELNOT_Identifier(value.c_str());
}

uci::type::MissileEmitterIdentityType& MissileEmitterIdentityType::setELNOT_Identifier(const std::string& value) {
  return setELNOT_Identifier(value.c_str());
}

uci::type::MissileEmitterIdentityType& MissileEmitterIdentityType::setELNOT_Identifier(const char* value) {
  enableELNOT_Identifier().setStringValue(value);
  return *this;
}

bool MissileEmitterIdentityType::hasELNOT_Identifier() const noexcept {
  return static_cast<bool>(eLNOT_Identifier_Accessor);
}

uci::type::NotationType& MissileEmitterIdentityType::enableELNOT_Identifier(uci::base::accessorType::AccessorType type) {
  if (!eLNOT_Identifier_Accessor) {
    eLNOT_Identifier_Accessor = NotationType::create(type);
  }
  return *eLNOT_Identifier_Accessor;
}

uci::type::MissileEmitterIdentityType& MissileEmitterIdentityType::clearELNOT_Identifier() noexcept {
  eLNOT_Identifier_Accessor.reset();
  return *this;
}

uci::type::MissileEmitterModeEnum& MissileEmitterIdentityType::getMissileMode_() const {
  if (missileMode_Accessor) {
    return *missileMode_Accessor;
  }
  throw uci::base::UCIException("Error in getMissileMode(): An attempt was made to get an optional field that was not enabled, call hasMissileMode() to determine if it is safe to call getMissileMode()");
}

const uci::type::MissileEmitterModeEnum& MissileEmitterIdentityType::getMissileMode() const {
  return getMissileMode_();
}

uci::type::MissileEmitterModeEnum& MissileEmitterIdentityType::getMissileMode() {
  return getMissileMode_();
}

uci::type::MissileEmitterIdentityType& MissileEmitterIdentityType::setMissileMode(const uci::type::MissileEmitterModeEnum& accessor) {
  enableMissileMode();
  if (&accessor != missileMode_Accessor.get()) {
    missileMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MissileEmitterIdentityType& MissileEmitterIdentityType::setMissileMode(const uci::type::MissileEmitterModeEnum::EnumerationItem value) {
  enableMissileMode().setValue(value);
  return *this;
}

bool MissileEmitterIdentityType::hasMissileMode() const noexcept {
  return static_cast<bool>(missileMode_Accessor);
}

uci::type::MissileEmitterModeEnum& MissileEmitterIdentityType::enableMissileMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missileEmitterModeEnum : type};
  if ((!missileMode_Accessor) || (missileMode_Accessor->getAccessorType() != requestedType)) {
    missileMode_Accessor = MissileEmitterModeEnum::create(requestedType);
    if (!missileMode_Accessor) {
      throw uci::base::UCIException("Error in enableMissileMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missileMode_Accessor;
}

uci::type::MissileEmitterIdentityType& MissileEmitterIdentityType::clearMissileMode() noexcept {
  missileMode_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& MissileEmitterIdentityType::getEmitterIndex_() const {
  if (emitterIndex_Accessor) {
    return *emitterIndex_Accessor;
  }
  throw uci::base::UCIException("Error in getEmitterIndex(): An attempt was made to get an optional field that was not enabled, call hasEmitterIndex() to determine if it is safe to call getEmitterIndex()");
}

const uci::type::ForeignKeyType& MissileEmitterIdentityType::getEmitterIndex() const {
  return getEmitterIndex_();
}

uci::type::ForeignKeyType& MissileEmitterIdentityType::getEmitterIndex() {
  return getEmitterIndex_();
}

uci::type::MissileEmitterIdentityType& MissileEmitterIdentityType::setEmitterIndex(const uci::type::ForeignKeyType& accessor) {
  enableEmitterIndex(accessor.getAccessorType());
  if (&accessor != emitterIndex_Accessor.get()) {
    emitterIndex_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool MissileEmitterIdentityType::hasEmitterIndex() const noexcept {
  return static_cast<bool>(emitterIndex_Accessor);
}

uci::type::ForeignKeyType& MissileEmitterIdentityType::enableEmitterIndex(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!emitterIndex_Accessor) || (emitterIndex_Accessor->getAccessorType() != requestedType)) {
    emitterIndex_Accessor = ForeignKeyType::create(requestedType);
    if (!emitterIndex_Accessor) {
      throw uci::base::UCIException("Error in enableEmitterIndex(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emitterIndex_Accessor;
}

uci::type::MissileEmitterIdentityType& MissileEmitterIdentityType::clearEmitterIndex() noexcept {
  emitterIndex_Accessor.reset();
  return *this;
}

std::unique_ptr<MissileEmitterIdentityType> MissileEmitterIdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missileEmitterIdentityType : type};
  return (requestedType == uci::type::accessorType::missileEmitterIdentityType) ? boost::make_unique<MissileEmitterIdentityType>() : nullptr;
}

/**  */
namespace MissileEmitterIdentityType_Names {

constexpr const char* Extern_Type_Name{"MissileEmitterIdentityType"};
constexpr const char* ELNOT_Identifier_Name{"ELNOT_Identifier"};
constexpr const char* MissileMode_Name{"MissileMode"};
constexpr const char* EmitterIndex_Name{"EmitterIndex"};

} // namespace MissileEmitterIdentityType_Names

void MissileEmitterIdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissileEmitterIdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissileEmitterIdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MissileEmitterIdentityType_Names::ELNOT_Identifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setELNOT_Identifier(*value);
      }
    } else if (valueType.first == nsPrefix + MissileEmitterIdentityType_Names::MissileMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMissileMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MissileEmitterIdentityType_Names::EmitterIndex_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEmitterIndex(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string MissileEmitterIdentityType::serialize(const uci::type::MissileEmitterIdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MissileEmitterIdentityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MissileEmitterIdentityType_Names::Extern_Type_Name);
  }
  if (accessor.hasELNOT_Identifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getELNOT_Identifier(), node, MissileEmitterIdentityType_Names::ELNOT_Identifier_Name);
  }
  if (accessor.hasMissileMode()) {
    MissileEmitterModeEnum::serialize(accessor.getMissileMode(), node, MissileEmitterIdentityType_Names::MissileMode_Name, false);
  }
  if (accessor.hasEmitterIndex()) {
    ForeignKeyType::serialize(accessor.getEmitterIndex(), node, MissileEmitterIdentityType_Names::EmitterIndex_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MissileEmitterIdentityType& MissileEmitterIdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MissileEmitterIdentityType>().release());
}

uci::type::MissileEmitterIdentityType& MissileEmitterIdentityType::create(const uci::type::MissileEmitterIdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MissileEmitterIdentityType> newAccessor{boost::make_unique<asb_uci::type::MissileEmitterIdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MissileEmitterIdentityType::destroy(uci::type::MissileEmitterIdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::MissileEmitterIdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

