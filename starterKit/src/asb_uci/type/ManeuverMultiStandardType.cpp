/** @file ManeuverMultiStandardType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ManeuverMultiStandardType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitManeuverType.h"
#include "asb_uci/type/RouteType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ManeuverMultiStandardType.h"
#include "uci/type/OrbitManeuverType.h"
#include "uci/type/RouteType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ManeuverMultiStandardType::ManeuverMultiStandardType() = default;

ManeuverMultiStandardType::~ManeuverMultiStandardType() = default;

void ManeuverMultiStandardType::copy(const uci::type::ManeuverMultiStandardType& accessor) {
  copyImpl(accessor, false);
}

void ManeuverMultiStandardType::copyImpl(const uci::type::ManeuverMultiStandardType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ManeuverMultiStandardType&>(accessor);
    if (accessorImpl.orbitManeuver_Accessor) {
      setOrbitManeuver(*(accessorImpl.orbitManeuver_Accessor));
    } else {
      orbitManeuver_Accessor.reset();
    }
    if (accessorImpl.routeManeuver_Accessor) {
      setRouteManeuver(*(accessorImpl.routeManeuver_Accessor));
    } else {
      routeManeuver_Accessor.reset();
    }
  }
}

void ManeuverMultiStandardType::reset() noexcept {
  orbitManeuver_Accessor.reset();
  routeManeuver_Accessor.reset();
}

uci::type::OrbitManeuverType& ManeuverMultiStandardType::getOrbitManeuver_() const {
  if (orbitManeuver_Accessor) {
    return *orbitManeuver_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitManeuver(): An attempt was made to get an optional field that was not enabled, call hasOrbitManeuver() to determine if it is safe to call getOrbitManeuver()");
}

const uci::type::OrbitManeuverType& ManeuverMultiStandardType::getOrbitManeuver() const {
  return getOrbitManeuver_();
}

uci::type::OrbitManeuverType& ManeuverMultiStandardType::getOrbitManeuver() {
  return getOrbitManeuver_();
}

uci::type::ManeuverMultiStandardType& ManeuverMultiStandardType::setOrbitManeuver(const uci::type::OrbitManeuverType& accessor) {
  enableOrbitManeuver();
  if (&accessor != orbitManeuver_Accessor.get()) {
    orbitManeuver_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ManeuverMultiStandardType::hasOrbitManeuver() const noexcept {
  return static_cast<bool>(orbitManeuver_Accessor);
}

uci::type::OrbitManeuverType& ManeuverMultiStandardType::enableOrbitManeuver(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitManeuverType : type};
  if ((!orbitManeuver_Accessor) || (orbitManeuver_Accessor->getAccessorType() != requestedType)) {
    orbitManeuver_Accessor = OrbitManeuverType::create(requestedType);
    if (!orbitManeuver_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitManeuver(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitManeuver_Accessor;
}

uci::type::ManeuverMultiStandardType& ManeuverMultiStandardType::clearOrbitManeuver() noexcept {
  orbitManeuver_Accessor.reset();
  return *this;
}

uci::type::RouteType& ManeuverMultiStandardType::getRouteManeuver_() const {
  if (routeManeuver_Accessor) {
    return *routeManeuver_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteManeuver(): An attempt was made to get an optional field that was not enabled, call hasRouteManeuver() to determine if it is safe to call getRouteManeuver()");
}

const uci::type::RouteType& ManeuverMultiStandardType::getRouteManeuver() const {
  return getRouteManeuver_();
}

uci::type::RouteType& ManeuverMultiStandardType::getRouteManeuver() {
  return getRouteManeuver_();
}

uci::type::ManeuverMultiStandardType& ManeuverMultiStandardType::setRouteManeuver(const uci::type::RouteType& accessor) {
  enableRouteManeuver();
  if (&accessor != routeManeuver_Accessor.get()) {
    routeManeuver_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ManeuverMultiStandardType::hasRouteManeuver() const noexcept {
  return static_cast<bool>(routeManeuver_Accessor);
}

uci::type::RouteType& ManeuverMultiStandardType::enableRouteManeuver(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeType : type};
  if ((!routeManeuver_Accessor) || (routeManeuver_Accessor->getAccessorType() != requestedType)) {
    routeManeuver_Accessor = RouteType::create(requestedType);
    if (!routeManeuver_Accessor) {
      throw uci::base::UCIException("Error in enableRouteManeuver(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeManeuver_Accessor;
}

uci::type::ManeuverMultiStandardType& ManeuverMultiStandardType::clearRouteManeuver() noexcept {
  routeManeuver_Accessor.reset();
  return *this;
}

std::unique_ptr<ManeuverMultiStandardType> ManeuverMultiStandardType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::maneuverMultiStandardType : type};
  return (requestedType == uci::type::accessorType::maneuverMultiStandardType) ? boost::make_unique<ManeuverMultiStandardType>() : nullptr;
}

/**  */
namespace ManeuverMultiStandardType_Names {

constexpr const char* Extern_Type_Name{"ManeuverMultiStandardType"};
constexpr const char* OrbitManeuver_Name{"OrbitManeuver"};
constexpr const char* RouteManeuver_Name{"RouteManeuver"};

} // namespace ManeuverMultiStandardType_Names

void ManeuverMultiStandardType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ManeuverMultiStandardType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ManeuverMultiStandardType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ManeuverMultiStandardType_Names::OrbitManeuver_Name) {
      OrbitManeuverType::deserialize(valueType.second, accessor.enableOrbitManeuver(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ManeuverMultiStandardType_Names::RouteManeuver_Name) {
      RouteType::deserialize(valueType.second, accessor.enableRouteManeuver(), nodeName, nsPrefix);
    }
  }
}

std::string ManeuverMultiStandardType::serialize(const uci::type::ManeuverMultiStandardType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ManeuverMultiStandardType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ManeuverMultiStandardType_Names::Extern_Type_Name);
  }
  if (accessor.hasOrbitManeuver()) {
    OrbitManeuverType::serialize(accessor.getOrbitManeuver(), node, ManeuverMultiStandardType_Names::OrbitManeuver_Name);
  }
  if (accessor.hasRouteManeuver()) {
    RouteType::serialize(accessor.getRouteManeuver(), node, ManeuverMultiStandardType_Names::RouteManeuver_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ManeuverMultiStandardType& ManeuverMultiStandardType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ManeuverMultiStandardType>().release());
}

uci::type::ManeuverMultiStandardType& ManeuverMultiStandardType::create(const uci::type::ManeuverMultiStandardType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ManeuverMultiStandardType> newAccessor{boost::make_unique<asb_uci::type::ManeuverMultiStandardType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ManeuverMultiStandardType::destroy(uci::type::ManeuverMultiStandardType& accessor) {
  delete dynamic_cast<asb_uci::type::ManeuverMultiStandardType*>(&accessor);
}

} // namespace type

} // namespace uci

