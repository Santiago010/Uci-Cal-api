/** @file MvObservationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MvObservationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/KinematicsChoiceType.h"
#include "asb_uci/type/ObservationMeasurementID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AngleType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/KinematicsChoiceType.h"
#include "uci/type/MvObservationType.h"
#include "uci/type/ObservationMeasurementID_Type.h"
#include "uci/type/PercentType.h"
#include "uci/type/VisualMagnitudeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MvObservationType::MvObservationType()
  : entityID_Accessor{boost::make_unique<EntityID_Type>()},
    observationMeasurementID_Accessor{boost::make_unique<ObservationMeasurementID>(0, SIZE_MAX)} {
}

MvObservationType::~MvObservationType() = default;

void MvObservationType::copy(const uci::type::MvObservationType& accessor) {
  copyImpl(accessor, false);
}

void MvObservationType::copyImpl(const uci::type::MvObservationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MvObservationType&>(accessor);
    setEntityID(*(accessorImpl.entityID_Accessor));
    setObservationTime(accessorImpl.observationTime_Accessor);
    setObservationMeasurementID(*(accessorImpl.observationMeasurementID_Accessor));
    if (accessorImpl.sensorLocation_Accessor) {
      setSensorLocation(*(accessorImpl.sensorLocation_Accessor));
    } else {
      sensorLocation_Accessor.reset();
    }
    if (accessorImpl.hasVisualMagnitude()) {
      setVisualMagnitude(accessorImpl.getVisualMagnitude());
    } else {
      clearVisualMagnitude();
    }
    if (accessorImpl.hasRightAscension()) {
      setRightAscension(accessorImpl.getRightAscension());
    } else {
      clearRightAscension();
    }
    if (accessorImpl.hasDeclination()) {
      setDeclination(accessorImpl.getDeclination());
    } else {
      clearDeclination();
    }
    if (accessorImpl.hasProbability()) {
      setProbability(accessorImpl.getProbability());
    } else {
      clearProbability();
    }
  }
}

void MvObservationType::reset() noexcept {
  if (entityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    entityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    entityID_Accessor->reset();
  }
  observationTime_Accessor = 0;
  observationMeasurementID_Accessor->reset();
  sensorLocation_Accessor.reset();
  clearVisualMagnitude();
  clearRightAscension();
  clearDeclination();
  clearProbability();
}

const uci::type::EntityID_Type& MvObservationType::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityID_Type& MvObservationType::getEntityID() {
  return *entityID_Accessor;
}

uci::type::MvObservationType& MvObservationType::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& MvObservationType::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::DateTimeTypeValue MvObservationType::getObservationTime() const {
  return observationTime_Accessor;
}

uci::type::MvObservationType& MvObservationType::setObservationTime(uci::type::DateTimeTypeValue value) {
  observationTime_Accessor = value;
  return *this;
}


const uci::type::MvObservationType::ObservationMeasurementID& MvObservationType::getObservationMeasurementID() const {
  return *observationMeasurementID_Accessor;
}

uci::type::MvObservationType::ObservationMeasurementID& MvObservationType::getObservationMeasurementID() {
  return *observationMeasurementID_Accessor;
}

uci::type::MvObservationType& MvObservationType::setObservationMeasurementID(const uci::type::MvObservationType::ObservationMeasurementID& accessor) {
  if (&accessor != observationMeasurementID_Accessor.get()) {
    observationMeasurementID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::KinematicsChoiceType& MvObservationType::getSensorLocation_() const {
  if (sensorLocation_Accessor) {
    return *sensorLocation_Accessor;
  }
  throw uci::base::UCIException("Error in getSensorLocation(): An attempt was made to get an optional field that was not enabled, call hasSensorLocation() to determine if it is safe to call getSensorLocation()");
}

const uci::type::KinematicsChoiceType& MvObservationType::getSensorLocation() const {
  return getSensorLocation_();
}

uci::type::KinematicsChoiceType& MvObservationType::getSensorLocation() {
  return getSensorLocation_();
}

uci::type::MvObservationType& MvObservationType::setSensorLocation(const uci::type::KinematicsChoiceType& accessor) {
  enableSensorLocation();
  if (&accessor != sensorLocation_Accessor.get()) {
    sensorLocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MvObservationType::hasSensorLocation() const noexcept {
  return static_cast<bool>(sensorLocation_Accessor);
}

uci::type::KinematicsChoiceType& MvObservationType::enableSensorLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::kinematicsChoiceType : type};
  if ((!sensorLocation_Accessor) || (sensorLocation_Accessor->getAccessorType() != requestedType)) {
    sensorLocation_Accessor = KinematicsChoiceType::create(requestedType);
    if (!sensorLocation_Accessor) {
      throw uci::base::UCIException("Error in enableSensorLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sensorLocation_Accessor;
}

uci::type::MvObservationType& MvObservationType::clearSensorLocation() noexcept {
  sensorLocation_Accessor.reset();
  return *this;
}

uci::type::VisualMagnitudeTypeValue MvObservationType::getVisualMagnitude() const {
  if (visualMagnitude_Accessor) {
    return *visualMagnitude_Accessor;
  }
  throw uci::base::UCIException("Error in getVisualMagnitude(): An attempt was made to get an optional field that was not enabled, call hasVisualMagnitude() to determine if it is safe to call getVisualMagnitude()");
}

uci::type::MvObservationType& MvObservationType::setVisualMagnitude(uci::type::VisualMagnitudeTypeValue value) {
  visualMagnitude_Accessor = value;
  return *this;
}

bool MvObservationType::hasVisualMagnitude() const noexcept {
  return visualMagnitude_Accessor.has_value();
}

uci::type::MvObservationType& MvObservationType::clearVisualMagnitude() noexcept {
  visualMagnitude_Accessor.reset();
  return *this;
}

uci::type::AngleTypeValue MvObservationType::getRightAscension() const {
  if (rightAscension_Accessor) {
    return *rightAscension_Accessor;
  }
  throw uci::base::UCIException("Error in getRightAscension(): An attempt was made to get an optional field that was not enabled, call hasRightAscension() to determine if it is safe to call getRightAscension()");
}

uci::type::MvObservationType& MvObservationType::setRightAscension(uci::type::AngleTypeValue value) {
  rightAscension_Accessor = value;
  return *this;
}

bool MvObservationType::hasRightAscension() const noexcept {
  return rightAscension_Accessor.has_value();
}

uci::type::MvObservationType& MvObservationType::clearRightAscension() noexcept {
  rightAscension_Accessor.reset();
  return *this;
}

uci::type::AngleTypeValue MvObservationType::getDeclination() const {
  if (declination_Accessor) {
    return *declination_Accessor;
  }
  throw uci::base::UCIException("Error in getDeclination(): An attempt was made to get an optional field that was not enabled, call hasDeclination() to determine if it is safe to call getDeclination()");
}

uci::type::MvObservationType& MvObservationType::setDeclination(uci::type::AngleTypeValue value) {
  declination_Accessor = value;
  return *this;
}

bool MvObservationType::hasDeclination() const noexcept {
  return declination_Accessor.has_value();
}

uci::type::MvObservationType& MvObservationType::clearDeclination() noexcept {
  declination_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue MvObservationType::getProbability() const {
  if (probability_Accessor) {
    return *probability_Accessor;
  }
  throw uci::base::UCIException("Error in getProbability(): An attempt was made to get an optional field that was not enabled, call hasProbability() to determine if it is safe to call getProbability()");
}

uci::type::MvObservationType& MvObservationType::setProbability(uci::type::PercentTypeValue value) {
  probability_Accessor = value;
  return *this;
}

bool MvObservationType::hasProbability() const noexcept {
  return probability_Accessor.has_value();
}

uci::type::MvObservationType& MvObservationType::clearProbability() noexcept {
  probability_Accessor.reset();
  return *this;
}

std::unique_ptr<MvObservationType> MvObservationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mvObservationType : type};
  return (requestedType == uci::type::accessorType::mvObservationType) ? boost::make_unique<MvObservationType>() : nullptr;
}

/**  */
namespace MvObservationType_Names {

constexpr const char* Extern_Type_Name{"MvObservationType"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* ObservationTime_Name{"ObservationTime"};
constexpr const char* ObservationMeasurementID_Name{"ObservationMeasurementID"};
constexpr const char* SensorLocation_Name{"SensorLocation"};
constexpr const char* VisualMagnitude_Name{"VisualMagnitude"};
constexpr const char* RightAscension_Name{"RightAscension"};
constexpr const char* Declination_Name{"Declination"};
constexpr const char* Probability_Name{"Probability"};

} // namespace MvObservationType_Names

void MvObservationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MvObservationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MvObservationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MvObservationType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MvObservationType_Names::ObservationTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setObservationTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + MvObservationType_Names::ObservationMeasurementID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MvObservationType::ObservationMeasurementID& boundedList = accessor.getObservationMeasurementID();
        const uci::type::MvObservationType::ObservationMeasurementID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ObservationMeasurementID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MvObservationType_Names::SensorLocation_Name) {
      KinematicsChoiceType::deserialize(valueType.second, accessor.enableSensorLocation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MvObservationType_Names::VisualMagnitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVisualMagnitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MvObservationType_Names::RightAscension_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRightAscension(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MvObservationType_Names::Declination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDeclination(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MvObservationType_Names::Probability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProbability(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string MvObservationType::serialize(const uci::type::MvObservationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MvObservationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MvObservationType_Names::Extern_Type_Name);
  }
  EntityID_Type::serialize(accessor.getEntityID(), node, MvObservationType_Names::EntityID_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getObservationTime(), node, MvObservationType_Names::ObservationTime_Name);
  {
    const uci::type::MvObservationType::ObservationMeasurementID& boundedList = accessor.getObservationMeasurementID();
    for (uci::type::MvObservationType::ObservationMeasurementID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ObservationMeasurementID_Type::serialize(boundedList.at(i), node, MvObservationType_Names::ObservationMeasurementID_Name);
    }
  }
  if (accessor.hasSensorLocation()) {
    KinematicsChoiceType::serialize(accessor.getSensorLocation(), node, MvObservationType_Names::SensorLocation_Name);
  }
  if (accessor.hasVisualMagnitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVisualMagnitude(), node, MvObservationType_Names::VisualMagnitude_Name);
  }
  if (accessor.hasRightAscension()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRightAscension(), node, MvObservationType_Names::RightAscension_Name);
  }
  if (accessor.hasDeclination()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDeclination(), node, MvObservationType_Names::Declination_Name);
  }
  if (accessor.hasProbability()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getProbability(), node, MvObservationType_Names::Probability_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MvObservationType& MvObservationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MvObservationType>().release());
}

uci::type::MvObservationType& MvObservationType::create(const uci::type::MvObservationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MvObservationType> newAccessor{boost::make_unique<asb_uci::type::MvObservationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MvObservationType::destroy(uci::type::MvObservationType& accessor) {
  delete dynamic_cast<asb_uci::type::MvObservationType*>(&accessor);
}

} // namespace type

} // namespace uci

