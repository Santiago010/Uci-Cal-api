/** @file IFF_Mode5Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/IFF_Mode5Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/InterrogationStatusEnum.h"
#include "asb_uci/type/Mode1FourCharacterCodeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/IFF_Mode5Type.h"
#include "uci/type/InterrogationStatusEnum.h"
#include "uci/type/Mode1FourCharacterCodeType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IFF_Mode5Type::IFF_Mode5Type() = default;

IFF_Mode5Type::~IFF_Mode5Type() = default;

void IFF_Mode5Type::copy(const uci::type::IFF_Mode5Type& accessor) {
  copyImpl(accessor, false);
}

void IFF_Mode5Type::copyImpl(const uci::type::IFF_Mode5Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IFF_Mode5Type&>(accessor);
    setNationalOrigin(accessorImpl.nationalOrigin_Accessor);
    setPIN(accessorImpl.pIN_Accessor);
    if (accessorImpl.mode5Indicator_Accessor) {
      setMode5Indicator(*(accessorImpl.mode5Indicator_Accessor));
    } else {
      mode5Indicator_Accessor.reset();
    }
    if (accessorImpl.mode1Code_Accessor) {
      setMode1Code(*(accessorImpl.mode1Code_Accessor));
    } else {
      mode1Code_Accessor.reset();
    }
  }
}

void IFF_Mode5Type::reset() noexcept {
  nationalOrigin_Accessor = 0;
  pIN_Accessor = 0;
  mode5Indicator_Accessor.reset();
  mode1Code_Accessor.reset();
}

xs::Int IFF_Mode5Type::getNationalOrigin() const {
  return nationalOrigin_Accessor;
}

uci::type::IFF_Mode5Type& IFF_Mode5Type::setNationalOrigin(xs::Int value) {
  nationalOrigin_Accessor = value;
  return *this;
}


xs::Int IFF_Mode5Type::getPIN() const {
  return pIN_Accessor;
}

uci::type::IFF_Mode5Type& IFF_Mode5Type::setPIN(xs::Int value) {
  pIN_Accessor = value;
  return *this;
}


uci::type::InterrogationStatusEnum& IFF_Mode5Type::getMode5Indicator_() const {
  if (mode5Indicator_Accessor) {
    return *mode5Indicator_Accessor;
  }
  throw uci::base::UCIException("Error in getMode5Indicator(): An attempt was made to get an optional field that was not enabled, call hasMode5Indicator() to determine if it is safe to call getMode5Indicator()");
}

const uci::type::InterrogationStatusEnum& IFF_Mode5Type::getMode5Indicator() const {
  return getMode5Indicator_();
}

uci::type::InterrogationStatusEnum& IFF_Mode5Type::getMode5Indicator() {
  return getMode5Indicator_();
}

uci::type::IFF_Mode5Type& IFF_Mode5Type::setMode5Indicator(const uci::type::InterrogationStatusEnum& accessor) {
  enableMode5Indicator();
  if (&accessor != mode5Indicator_Accessor.get()) {
    mode5Indicator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IFF_Mode5Type& IFF_Mode5Type::setMode5Indicator(const uci::type::InterrogationStatusEnum::EnumerationItem value) {
  enableMode5Indicator().setValue(value);
  return *this;
}

bool IFF_Mode5Type::hasMode5Indicator() const noexcept {
  return static_cast<bool>(mode5Indicator_Accessor);
}

uci::type::InterrogationStatusEnum& IFF_Mode5Type::enableMode5Indicator(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::interrogationStatusEnum : type};
  if ((!mode5Indicator_Accessor) || (mode5Indicator_Accessor->getAccessorType() != requestedType)) {
    mode5Indicator_Accessor = InterrogationStatusEnum::create(requestedType);
    if (!mode5Indicator_Accessor) {
      throw uci::base::UCIException("Error in enableMode5Indicator(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mode5Indicator_Accessor;
}

uci::type::IFF_Mode5Type& IFF_Mode5Type::clearMode5Indicator() noexcept {
  mode5Indicator_Accessor.reset();
  return *this;
}

uci::type::Mode1FourCharacterCodeType& IFF_Mode5Type::getMode1Code_() const {
  if (mode1Code_Accessor) {
    return *mode1Code_Accessor;
  }
  throw uci::base::UCIException("Error in getMode1Code(): An attempt was made to get an optional field that was not enabled, call hasMode1Code() to determine if it is safe to call getMode1Code()");
}

const uci::type::Mode1FourCharacterCodeType& IFF_Mode5Type::getMode1Code() const {
  return getMode1Code_();
}

uci::type::Mode1FourCharacterCodeType& IFF_Mode5Type::getMode1Code() {
  return getMode1Code_();
}

uci::type::IFF_Mode5Type& IFF_Mode5Type::setMode1Code(const uci::type::Mode1FourCharacterCodeType& value) {
  return setMode1Code(value.c_str());
}

uci::type::IFF_Mode5Type& IFF_Mode5Type::setMode1Code(const std::string& value) {
  return setMode1Code(value.c_str());
}

uci::type::IFF_Mode5Type& IFF_Mode5Type::setMode1Code(const char* value) {
  enableMode1Code().setStringValue(value);
  return *this;
}

bool IFF_Mode5Type::hasMode1Code() const noexcept {
  return static_cast<bool>(mode1Code_Accessor);
}

uci::type::Mode1FourCharacterCodeType& IFF_Mode5Type::enableMode1Code(uci::base::accessorType::AccessorType type) {
  if (!mode1Code_Accessor) {
    mode1Code_Accessor = Mode1FourCharacterCodeType::create(type);
  }
  return *mode1Code_Accessor;
}

uci::type::IFF_Mode5Type& IFF_Mode5Type::clearMode1Code() noexcept {
  mode1Code_Accessor.reset();
  return *this;
}

std::unique_ptr<IFF_Mode5Type> IFF_Mode5Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_Mode5Type : type};
  return (requestedType == uci::type::accessorType::iFF_Mode5Type) ? boost::make_unique<IFF_Mode5Type>() : nullptr;
}

/**  */
namespace IFF_Mode5Type_Names {

constexpr const char* Extern_Type_Name{"IFF_Mode5Type"};
constexpr const char* NationalOrigin_Name{"NationalOrigin"};
constexpr const char* PIN_Name{"PIN"};
constexpr const char* Mode5Indicator_Name{"Mode5Indicator"};
constexpr const char* Mode1Code_Name{"Mode1Code"};

} // namespace IFF_Mode5Type_Names

void IFF_Mode5Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::IFF_Mode5Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IFF_Mode5Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IFF_Mode5Type_Names::NationalOrigin_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNationalOrigin(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + IFF_Mode5Type_Names::PIN_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPIN(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + IFF_Mode5Type_Names::Mode5Indicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMode5Indicator().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_Mode5Type_Names::Mode1Code_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMode1Code(*value);
      }
    }
  }
}

std::string IFF_Mode5Type::serialize(const uci::type::IFF_Mode5Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IFF_Mode5Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IFF_Mode5Type_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeInt(accessor.getNationalOrigin(), node, IFF_Mode5Type_Names::NationalOrigin_Name);
  asb_uci::util::SerializationHelpers::serializeInt(accessor.getPIN(), node, IFF_Mode5Type_Names::PIN_Name);
  if (accessor.hasMode5Indicator()) {
    InterrogationStatusEnum::serialize(accessor.getMode5Indicator(), node, IFF_Mode5Type_Names::Mode5Indicator_Name, false);
  }
  if (accessor.hasMode1Code()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMode1Code(), node, IFF_Mode5Type_Names::Mode1Code_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IFF_Mode5Type& IFF_Mode5Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IFF_Mode5Type>().release());
}

uci::type::IFF_Mode5Type& IFF_Mode5Type::create(const uci::type::IFF_Mode5Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IFF_Mode5Type> newAccessor{boost::make_unique<asb_uci::type::IFF_Mode5Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IFF_Mode5Type::destroy(uci::type::IFF_Mode5Type& accessor) {
  delete dynamic_cast<asb_uci::type::IFF_Mode5Type*>(&accessor);
}

} // namespace type

} // namespace uci

