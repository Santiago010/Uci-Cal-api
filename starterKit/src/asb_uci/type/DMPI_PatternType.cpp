/** @file DMPI_PatternType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DMPI_PatternType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DMPI_ID_Type.h"
#include "../../../include/asb_uci/type/Point3D_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_PatternType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point3D_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DMPI_PatternType::DMPI_PatternType()
  : dMPI_ID_Accessor{boost::make_unique<DMPI_ID>(1, SIZE_MAX)},
    patternCenterLocation_Accessor{boost::make_unique<Point3D_Type>()} {
}

DMPI_PatternType::~DMPI_PatternType() = default;

void DMPI_PatternType::copy(const uci::type::DMPI_PatternType& accessor) {
  copyImpl(accessor, false);
}

void DMPI_PatternType::copyImpl(const uci::type::DMPI_PatternType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::dMPI_PatternType)) {
      const auto& accessorImpl = dynamic_cast<const DMPI_PatternType&>(accessor);
      setDMPI_ID(*(accessorImpl.dMPI_ID_Accessor));
      setPatternCenterLocation(*(accessorImpl.patternCenterLocation_Accessor));
      setPatternOrientation(accessorImpl.patternOrientation_Accessor);
      setIncludeDMPI_AtCenter(accessorImpl.includeDMPI_AtCenter_Accessor);
      if (accessorImpl.centerDMPI_ID_Accessor) {
        setCenterDMPI_ID(*(accessorImpl.centerDMPI_ID_Accessor));
      } else {
        centerDMPI_ID_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void DMPI_PatternType::reset() noexcept {
  dMPI_ID_Accessor->reset();
  if (patternCenterLocation_Accessor->getAccessorType() != uci::type::accessorType::point3D_Type) {
    patternCenterLocation_Accessor = boost::make_unique<Point3D_Type>();
  } else {
    patternCenterLocation_Accessor->reset();
  }
  patternOrientation_Accessor = 0.0;
  includeDMPI_AtCenter_Accessor = false;
  centerDMPI_ID_Accessor.reset();
}

const uci::type::DMPI_PatternType::DMPI_ID& DMPI_PatternType::getDMPI_ID() const {
  return *dMPI_ID_Accessor;
}

uci::type::DMPI_PatternType::DMPI_ID& DMPI_PatternType::getDMPI_ID() {
  return *dMPI_ID_Accessor;
}

uci::type::DMPI_PatternType& DMPI_PatternType::setDMPI_ID(const uci::type::DMPI_PatternType::DMPI_ID& accessor) {
  if (&accessor != dMPI_ID_Accessor.get()) {
    dMPI_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::Point3D_Type& DMPI_PatternType::getPatternCenterLocation() const {
  return *patternCenterLocation_Accessor;
}

uci::type::Point3D_Type& DMPI_PatternType::getPatternCenterLocation() {
  return *patternCenterLocation_Accessor;
}

uci::type::DMPI_PatternType& DMPI_PatternType::setPatternCenterLocation(const uci::type::Point3D_Type& accessor) {
  enablePatternCenterLocation(accessor.getAccessorType());
  if (&accessor != patternCenterLocation_Accessor.get()) {
    patternCenterLocation_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point3D_Type& DMPI_PatternType::enablePatternCenterLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!patternCenterLocation_Accessor) || (patternCenterLocation_Accessor->getAccessorType() != requestedType)) {
    patternCenterLocation_Accessor = Point3D_Type::create(requestedType);
    if (!patternCenterLocation_Accessor) {
      throw uci::base::UCIException("Error in enablePatternCenterLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *patternCenterLocation_Accessor;
}

uci::type::AngleTypeValue DMPI_PatternType::getPatternOrientation() const {
  return patternOrientation_Accessor;
}

uci::type::DMPI_PatternType& DMPI_PatternType::setPatternOrientation(uci::type::AngleTypeValue value) {
  patternOrientation_Accessor = value;
  return *this;
}


xs::Boolean DMPI_PatternType::getIncludeDMPI_AtCenter() const {
  return includeDMPI_AtCenter_Accessor;
}

uci::type::DMPI_PatternType& DMPI_PatternType::setIncludeDMPI_AtCenter(xs::Boolean value) {
  includeDMPI_AtCenter_Accessor = value;
  return *this;
}


uci::type::DMPI_ID_Type& DMPI_PatternType::getCenterDMPI_ID_() const {
  if (centerDMPI_ID_Accessor) {
    return *centerDMPI_ID_Accessor;
  }
  throw uci::base::UCIException("Error in getCenterDMPI_ID(): An attempt was made to get an optional field that was not enabled, call hasCenterDMPI_ID() to determine if it is safe to call getCenterDMPI_ID()");
}

const uci::type::DMPI_ID_Type& DMPI_PatternType::getCenterDMPI_ID() const {
  return getCenterDMPI_ID_();
}

uci::type::DMPI_ID_Type& DMPI_PatternType::getCenterDMPI_ID() {
  return getCenterDMPI_ID_();
}

uci::type::DMPI_PatternType& DMPI_PatternType::setCenterDMPI_ID(const uci::type::DMPI_ID_Type& accessor) {
  enableCenterDMPI_ID();
  if (&accessor != centerDMPI_ID_Accessor.get()) {
    centerDMPI_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_PatternType::hasCenterDMPI_ID() const noexcept {
  return static_cast<bool>(centerDMPI_ID_Accessor);
}

uci::type::DMPI_ID_Type& DMPI_PatternType::enableCenterDMPI_ID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_ID_Type : type};
  if ((!centerDMPI_ID_Accessor) || (centerDMPI_ID_Accessor->getAccessorType() != requestedType)) {
    centerDMPI_ID_Accessor = DMPI_ID_Type::create(requestedType);
    if (!centerDMPI_ID_Accessor) {
      throw uci::base::UCIException("Error in enableCenterDMPI_ID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *centerDMPI_ID_Accessor;
}

uci::type::DMPI_PatternType& DMPI_PatternType::clearCenterDMPI_ID() noexcept {
  centerDMPI_ID_Accessor.reset();
  return *this;
}

std::unique_ptr<DMPI_PatternType> DMPI_PatternType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_PatternType : type};
  return std::unique_ptr<DMPI_PatternType>(dynamic_cast<DMPI_PatternType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace DMPI_PatternType_Names {

constexpr const char* Extern_Type_Name{"DMPI_PatternType"};
constexpr const char* DMPI_ID_Name{"DMPI_ID"};
constexpr const char* PatternCenterLocation_Name{"PatternCenterLocation"};
constexpr const char* PatternOrientation_Name{"PatternOrientation"};
constexpr const char* IncludeDMPI_AtCenter_Name{"IncludeDMPI_AtCenter"};
constexpr const char* CenterDMPI_ID_Name{"CenterDMPI_ID"};

} // namespace DMPI_PatternType_Names

void DMPI_PatternType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DMPI_PatternType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DMPI_PatternType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DMPI_PatternType_Names::DMPI_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DMPI_PatternType::DMPI_ID& boundedList = accessor.getDMPI_ID();
        const uci::type::DMPI_PatternType::DMPI_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DMPI_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DMPI_PatternType_Names::PatternCenterLocation_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePatternCenterLocation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_PatternType_Names::PatternOrientation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPatternOrientation(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DMPI_PatternType_Names::IncludeDMPI_AtCenter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIncludeDMPI_AtCenter(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + DMPI_PatternType_Names::CenterDMPI_ID_Name) {
      DMPI_ID_Type::deserialize(valueType.second, accessor.enableCenterDMPI_ID(), nodeName, nsPrefix);
    }
  }
}

std::string DMPI_PatternType::serialize(const uci::type::DMPI_PatternType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DMPI_PatternType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::dMPI_PatternType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, DMPI_PatternType_Names::Extern_Type_Name);
    }
    {
      const uci::type::DMPI_PatternType::DMPI_ID& boundedList = accessor.getDMPI_ID();
      for (uci::type::DMPI_PatternType::DMPI_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::DMPI_ID_Type::serialize(boundedList.at(i), node, DMPI_PatternType_Names::DMPI_ID_Name);
      }
    }
    Point3D_Type::serialize(accessor.getPatternCenterLocation(), node, DMPI_PatternType_Names::PatternCenterLocation_Name);
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPatternOrientation(), node, DMPI_PatternType_Names::PatternOrientation_Name);
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getIncludeDMPI_AtCenter(), node, DMPI_PatternType_Names::IncludeDMPI_AtCenter_Name);
    if (accessor.hasCenterDMPI_ID()) {
      DMPI_ID_Type::serialize(accessor.getCenterDMPI_ID(), node, DMPI_PatternType_Names::CenterDMPI_ID_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DMPI_PatternType& DMPI_PatternType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DMPI_PatternType>().release());
}

uci::type::DMPI_PatternType& DMPI_PatternType::create(const uci::type::DMPI_PatternType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DMPI_PatternType> newAccessor{boost::make_unique<asb_uci::type::DMPI_PatternType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DMPI_PatternType::destroy(uci::type::DMPI_PatternType& accessor) {
  delete dynamic_cast<asb_uci::type::DMPI_PatternType*>(&accessor);
}

} // namespace type

} // namespace uci

