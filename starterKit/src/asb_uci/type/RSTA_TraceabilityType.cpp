/** @file RSTA_TraceabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RSTA_TraceabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/RSTA_TraceabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RSTA_TraceabilityType::RSTA_TraceabilityType()
  : rSTA_Key_Accessor{boost::make_unique<ForeignKeyType>()} {
}

RSTA_TraceabilityType::~RSTA_TraceabilityType() = default;

void RSTA_TraceabilityType::copy(const uci::type::RSTA_TraceabilityType& accessor) {
  copyImpl(accessor, false);
}

void RSTA_TraceabilityType::copyImpl(const uci::type::RSTA_TraceabilityType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::rSTA_TraceabilityType)) {
      const auto& accessorImpl = dynamic_cast<const RSTA_TraceabilityType&>(accessor);
      setRSTA_Key(*(accessorImpl.rSTA_Key_Accessor));
      if (accessorImpl.rSTA_ItemKey_Accessor) {
        setRSTA_ItemKey(*(accessorImpl.rSTA_ItemKey_Accessor));
      } else {
        rSTA_ItemKey_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void RSTA_TraceabilityType::reset() noexcept {
  if (rSTA_Key_Accessor->getAccessorType() != uci::type::accessorType::foreignKeyType) {
    rSTA_Key_Accessor = boost::make_unique<ForeignKeyType>();
  } else {
    rSTA_Key_Accessor->reset();
  }
  rSTA_ItemKey_Accessor.reset();
}

const uci::type::ForeignKeyType& RSTA_TraceabilityType::getRSTA_Key() const {
  return *rSTA_Key_Accessor;
}

uci::type::ForeignKeyType& RSTA_TraceabilityType::getRSTA_Key() {
  return *rSTA_Key_Accessor;
}

uci::type::RSTA_TraceabilityType& RSTA_TraceabilityType::setRSTA_Key(const uci::type::ForeignKeyType& accessor) {
  enableRSTA_Key(accessor.getAccessorType());
  if (&accessor != rSTA_Key_Accessor.get()) {
    rSTA_Key_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ForeignKeyType& RSTA_TraceabilityType::enableRSTA_Key(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!rSTA_Key_Accessor) || (rSTA_Key_Accessor->getAccessorType() != requestedType)) {
    rSTA_Key_Accessor = ForeignKeyType::create(requestedType);
    if (!rSTA_Key_Accessor) {
      throw uci::base::UCIException("Error in enableRSTA_Key(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rSTA_Key_Accessor;
}

uci::type::ForeignKeyType& RSTA_TraceabilityType::getRSTA_ItemKey_() const {
  if (rSTA_ItemKey_Accessor) {
    return *rSTA_ItemKey_Accessor;
  }
  throw uci::base::UCIException("Error in getRSTA_ItemKey(): An attempt was made to get an optional field that was not enabled, call hasRSTA_ItemKey() to determine if it is safe to call getRSTA_ItemKey()");
}

const uci::type::ForeignKeyType& RSTA_TraceabilityType::getRSTA_ItemKey() const {
  return getRSTA_ItemKey_();
}

uci::type::ForeignKeyType& RSTA_TraceabilityType::getRSTA_ItemKey() {
  return getRSTA_ItemKey_();
}

uci::type::RSTA_TraceabilityType& RSTA_TraceabilityType::setRSTA_ItemKey(const uci::type::ForeignKeyType& accessor) {
  enableRSTA_ItemKey(accessor.getAccessorType());
  if (&accessor != rSTA_ItemKey_Accessor.get()) {
    rSTA_ItemKey_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RSTA_TraceabilityType::hasRSTA_ItemKey() const noexcept {
  return static_cast<bool>(rSTA_ItemKey_Accessor);
}

uci::type::ForeignKeyType& RSTA_TraceabilityType::enableRSTA_ItemKey(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!rSTA_ItemKey_Accessor) || (rSTA_ItemKey_Accessor->getAccessorType() != requestedType)) {
    rSTA_ItemKey_Accessor = ForeignKeyType::create(requestedType);
    if (!rSTA_ItemKey_Accessor) {
      throw uci::base::UCIException("Error in enableRSTA_ItemKey(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rSTA_ItemKey_Accessor;
}

uci::type::RSTA_TraceabilityType& RSTA_TraceabilityType::clearRSTA_ItemKey() noexcept {
  rSTA_ItemKey_Accessor.reset();
  return *this;
}

std::unique_ptr<RSTA_TraceabilityType> RSTA_TraceabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rSTA_TraceabilityType : type};
  return std::unique_ptr<RSTA_TraceabilityType>(dynamic_cast<RSTA_TraceabilityType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace RSTA_TraceabilityType_Names {

constexpr const char* Extern_Type_Name{"RSTA_TraceabilityType"};
constexpr const char* RSTA_Key_Name{"RSTA_Key"};
constexpr const char* RSTA_ItemKey_Name{"RSTA_ItemKey"};

} // namespace RSTA_TraceabilityType_Names

void RSTA_TraceabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RSTA_TraceabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RSTA_TraceabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RSTA_TraceabilityType_Names::RSTA_Key_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRSTA_Key(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RSTA_TraceabilityType_Names::RSTA_ItemKey_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRSTA_ItemKey(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string RSTA_TraceabilityType::serialize(const uci::type::RSTA_TraceabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RSTA_TraceabilityType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::rSTA_TraceabilityType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, RSTA_TraceabilityType_Names::Extern_Type_Name);
    }
    ForeignKeyType::serialize(accessor.getRSTA_Key(), node, RSTA_TraceabilityType_Names::RSTA_Key_Name);
    if (accessor.hasRSTA_ItemKey()) {
      ForeignKeyType::serialize(accessor.getRSTA_ItemKey(), node, RSTA_TraceabilityType_Names::RSTA_ItemKey_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RSTA_TraceabilityType& RSTA_TraceabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RSTA_TraceabilityType>().release());
}

uci::type::RSTA_TraceabilityType& RSTA_TraceabilityType::create(const uci::type::RSTA_TraceabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RSTA_TraceabilityType> newAccessor{boost::make_unique<asb_uci::type::RSTA_TraceabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RSTA_TraceabilityType::destroy(uci::type::RSTA_TraceabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::RSTA_TraceabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

