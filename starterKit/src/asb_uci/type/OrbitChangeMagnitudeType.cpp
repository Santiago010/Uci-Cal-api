/** @file OrbitChangeMagnitudeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitChangeMagnitudeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitRegimeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleHalfPositiveType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DoubleNonNegativeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitChangeMagnitudeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitRegimeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitChangeMagnitudeType::OrbitChangeMagnitudeType()
  : destinationOrbit_Accessor{boost::make_unique<DestinationOrbit>(0, 11)} {
}

OrbitChangeMagnitudeType::~OrbitChangeMagnitudeType() = default;

void OrbitChangeMagnitudeType::copy(const uci::type::OrbitChangeMagnitudeType& accessor) {
  copyImpl(accessor, false);
}

void OrbitChangeMagnitudeType::copyImpl(const uci::type::OrbitChangeMagnitudeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitChangeMagnitudeType&>(accessor);
    if (accessorImpl.hasSemimajorAxisChange()) {
      setSemimajorAxisChange(accessorImpl.getSemimajorAxisChange());
    } else {
      clearSemimajorAxisChange();
    }
    if (accessorImpl.hasInclinationChange()) {
      setInclinationChange(accessorImpl.getInclinationChange());
    } else {
      clearInclinationChange();
    }
    if (accessorImpl.hasLongitudeChange()) {
      setLongitudeChange(accessorImpl.getLongitudeChange());
    } else {
      clearLongitudeChange();
    }
    setDestinationOrbit(*(accessorImpl.destinationOrbit_Accessor));
    if (accessorImpl.hasEccentricityChange()) {
      setEccentricityChange(accessorImpl.getEccentricityChange());
    } else {
      clearEccentricityChange();
    }
  }
}

void OrbitChangeMagnitudeType::reset() noexcept {
  clearSemimajorAxisChange();
  clearInclinationChange();
  clearLongitudeChange();
  destinationOrbit_Accessor->reset();
  clearEccentricityChange();
}

uci::type::DistanceTypeValue OrbitChangeMagnitudeType::getSemimajorAxisChange() const {
  if (semimajorAxisChange_Accessor) {
    return *semimajorAxisChange_Accessor;
  }
  throw uci::base::UCIException("Error in getSemimajorAxisChange(): An attempt was made to get an optional field that was not enabled, call hasSemimajorAxisChange() to determine if it is safe to call getSemimajorAxisChange()");
}

uci::type::OrbitChangeMagnitudeType& OrbitChangeMagnitudeType::setSemimajorAxisChange(uci::type::DistanceTypeValue value) {
  semimajorAxisChange_Accessor = value;
  return *this;
}

bool OrbitChangeMagnitudeType::hasSemimajorAxisChange() const noexcept {
  return semimajorAxisChange_Accessor.has_value();
}

uci::type::OrbitChangeMagnitudeType& OrbitChangeMagnitudeType::clearSemimajorAxisChange() noexcept {
  semimajorAxisChange_Accessor.reset();
  return *this;
}

uci::type::AngleHalfPositiveTypeValue OrbitChangeMagnitudeType::getInclinationChange() const {
  if (inclinationChange_Accessor) {
    return *inclinationChange_Accessor;
  }
  throw uci::base::UCIException("Error in getInclinationChange(): An attempt was made to get an optional field that was not enabled, call hasInclinationChange() to determine if it is safe to call getInclinationChange()");
}

uci::type::OrbitChangeMagnitudeType& OrbitChangeMagnitudeType::setInclinationChange(uci::type::AngleHalfPositiveTypeValue value) {
  inclinationChange_Accessor = value;
  return *this;
}

bool OrbitChangeMagnitudeType::hasInclinationChange() const noexcept {
  return inclinationChange_Accessor.has_value();
}

uci::type::OrbitChangeMagnitudeType& OrbitChangeMagnitudeType::clearInclinationChange() noexcept {
  inclinationChange_Accessor.reset();
  return *this;
}

uci::type::AngleTypeValue OrbitChangeMagnitudeType::getLongitudeChange() const {
  if (longitudeChange_Accessor) {
    return *longitudeChange_Accessor;
  }
  throw uci::base::UCIException("Error in getLongitudeChange(): An attempt was made to get an optional field that was not enabled, call hasLongitudeChange() to determine if it is safe to call getLongitudeChange()");
}

uci::type::OrbitChangeMagnitudeType& OrbitChangeMagnitudeType::setLongitudeChange(uci::type::AngleTypeValue value) {
  longitudeChange_Accessor = value;
  return *this;
}

bool OrbitChangeMagnitudeType::hasLongitudeChange() const noexcept {
  return longitudeChange_Accessor.has_value();
}

uci::type::OrbitChangeMagnitudeType& OrbitChangeMagnitudeType::clearLongitudeChange() noexcept {
  longitudeChange_Accessor.reset();
  return *this;
}

const uci::type::OrbitChangeMagnitudeType::DestinationOrbit& OrbitChangeMagnitudeType::getDestinationOrbit() const {
  return *destinationOrbit_Accessor;
}

uci::type::OrbitChangeMagnitudeType::DestinationOrbit& OrbitChangeMagnitudeType::getDestinationOrbit() {
  return *destinationOrbit_Accessor;
}

uci::type::OrbitChangeMagnitudeType& OrbitChangeMagnitudeType::setDestinationOrbit(const uci::type::OrbitChangeMagnitudeType::DestinationOrbit& accessor) {
  if (&accessor != destinationOrbit_Accessor.get()) {
    destinationOrbit_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DoubleNonNegativeTypeValue OrbitChangeMagnitudeType::getEccentricityChange() const {
  if (eccentricityChange_Accessor) {
    return *eccentricityChange_Accessor;
  }
  throw uci::base::UCIException("Error in getEccentricityChange(): An attempt was made to get an optional field that was not enabled, call hasEccentricityChange() to determine if it is safe to call getEccentricityChange()");
}

uci::type::OrbitChangeMagnitudeType& OrbitChangeMagnitudeType::setEccentricityChange(uci::type::DoubleNonNegativeTypeValue value) {
  eccentricityChange_Accessor = value;
  return *this;
}

bool OrbitChangeMagnitudeType::hasEccentricityChange() const noexcept {
  return eccentricityChange_Accessor.has_value();
}

uci::type::OrbitChangeMagnitudeType& OrbitChangeMagnitudeType::clearEccentricityChange() noexcept {
  eccentricityChange_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitChangeMagnitudeType> OrbitChangeMagnitudeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitChangeMagnitudeType : type};
  return (requestedType == uci::type::accessorType::orbitChangeMagnitudeType) ? boost::make_unique<OrbitChangeMagnitudeType>() : nullptr;
}

/**  */
namespace OrbitChangeMagnitudeType_Names {

constexpr const char* Extern_Type_Name{"OrbitChangeMagnitudeType"};
constexpr const char* SemimajorAxisChange_Name{"SemimajorAxisChange"};
constexpr const char* InclinationChange_Name{"InclinationChange"};
constexpr const char* LongitudeChange_Name{"LongitudeChange"};
constexpr const char* DestinationOrbit_Name{"DestinationOrbit"};
constexpr const char* EccentricityChange_Name{"EccentricityChange"};

} // namespace OrbitChangeMagnitudeType_Names

void OrbitChangeMagnitudeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitChangeMagnitudeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitChangeMagnitudeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitChangeMagnitudeType_Names::SemimajorAxisChange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSemimajorAxisChange(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitChangeMagnitudeType_Names::InclinationChange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInclinationChange(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitChangeMagnitudeType_Names::LongitudeChange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLongitudeChange(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitChangeMagnitudeType_Names::DestinationOrbit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitChangeMagnitudeType::DestinationOrbit& boundedList = accessor.getDestinationOrbit();
        const uci::type::OrbitChangeMagnitudeType::DestinationOrbit::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitRegimeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitChangeMagnitudeType_Names::EccentricityChange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEccentricityChange(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string OrbitChangeMagnitudeType::serialize(const uci::type::OrbitChangeMagnitudeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitChangeMagnitudeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitChangeMagnitudeType_Names::Extern_Type_Name);
  }
  if (accessor.hasSemimajorAxisChange()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSemimajorAxisChange(), node, OrbitChangeMagnitudeType_Names::SemimajorAxisChange_Name);
  }
  if (accessor.hasInclinationChange()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getInclinationChange(), node, OrbitChangeMagnitudeType_Names::InclinationChange_Name);
  }
  if (accessor.hasLongitudeChange()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLongitudeChange(), node, OrbitChangeMagnitudeType_Names::LongitudeChange_Name);
  }
  {
    const uci::type::OrbitChangeMagnitudeType::DestinationOrbit& boundedList = accessor.getDestinationOrbit();
    for (uci::type::OrbitChangeMagnitudeType::DestinationOrbit::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitRegimeType::serialize(boundedList.at(i), node, OrbitChangeMagnitudeType_Names::DestinationOrbit_Name);
    }
  }
  if (accessor.hasEccentricityChange()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEccentricityChange(), node, OrbitChangeMagnitudeType_Names::EccentricityChange_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitChangeMagnitudeType& OrbitChangeMagnitudeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitChangeMagnitudeType>().release());
}

uci::type::OrbitChangeMagnitudeType& OrbitChangeMagnitudeType::create(const uci::type::OrbitChangeMagnitudeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitChangeMagnitudeType> newAccessor{boost::make_unique<asb_uci::type::OrbitChangeMagnitudeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitChangeMagnitudeType::destroy(uci::type::OrbitChangeMagnitudeType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitChangeMagnitudeType*>(&accessor);
}

} // namespace type

} // namespace uci

