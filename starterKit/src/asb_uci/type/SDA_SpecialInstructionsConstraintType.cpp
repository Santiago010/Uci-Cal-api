/** @file SDA_SpecialInstructionsConstraintType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SDA_SpecialInstructionsConstraintType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/SDA_SpecialInstructionsSetType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SDA_SpecialInstructionsConstraintType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SDA_SpecialInstructionsSetType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SDA_SpecialInstructionsConstraintType::SDA_SpecialInstructionsConstraintType() = default;

SDA_SpecialInstructionsConstraintType::~SDA_SpecialInstructionsConstraintType() = default;

void SDA_SpecialInstructionsConstraintType::copy(const uci::type::SDA_SpecialInstructionsConstraintType& accessor) {
  copyImpl(accessor, false);
}

void SDA_SpecialInstructionsConstraintType::copyImpl(const uci::type::SDA_SpecialInstructionsConstraintType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SDA_SpecialInstructionsConstraintType&>(accessor);
    if (accessorImpl.all_Accessor) {
      setAll(*(accessorImpl.all_Accessor));
    } else {
      all_Accessor.reset();
    }
    if (accessorImpl.any_Accessor) {
      setAny(*(accessorImpl.any_Accessor));
    } else {
      any_Accessor.reset();
    }
  }
}

void SDA_SpecialInstructionsConstraintType::reset() noexcept {
  all_Accessor.reset();
  any_Accessor.reset();
}

uci::type::SDA_SpecialInstructionsConstraintType::SDA_SpecialInstructionsConstraintTypeChoice SDA_SpecialInstructionsConstraintType::getSDA_SpecialInstructionsConstraintTypeChoiceOrdinal() const noexcept {
  if (all_Accessor) {
    return SDA_SPECIALINSTRUCTIONSCONSTRAINTTYPE_CHOICE_ALL;
  }
  if (any_Accessor) {
    return SDA_SPECIALINSTRUCTIONSCONSTRAINTTYPE_CHOICE_ANY;
  }
  return SDA_SPECIALINSTRUCTIONSCONSTRAINTTYPE_CHOICE_NONE;
}

uci::type::SDA_SpecialInstructionsConstraintType& SDA_SpecialInstructionsConstraintType::setSDA_SpecialInstructionsConstraintTypeChoiceOrdinal(uci::type::SDA_SpecialInstructionsConstraintType::SDA_SpecialInstructionsConstraintTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case SDA_SPECIALINSTRUCTIONSCONSTRAINTTYPE_CHOICE_ALL:
      chooseAll("setSDA_SpecialInstructionsConstraintTypeChoiceOrdinal", type);
      break;
    case SDA_SPECIALINSTRUCTIONSCONSTRAINTTYPE_CHOICE_ANY:
      chooseAny("setSDA_SpecialInstructionsConstraintTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setSDA_SpecialInstructionsConstraintTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SDA_SpecialInstructionsSetType& SDA_SpecialInstructionsConstraintType::getAll_() const {
  if (all_Accessor) {
    return *all_Accessor;
  }
  throw uci::base::UCIException("Error in getAll(): Unable to get All, field not selected");
}

const uci::type::SDA_SpecialInstructionsSetType& SDA_SpecialInstructionsConstraintType::getAll() const {
  return getAll_();
}

uci::type::SDA_SpecialInstructionsSetType& SDA_SpecialInstructionsConstraintType::getAll() {
  return getAll_();
}

uci::type::SDA_SpecialInstructionsConstraintType& SDA_SpecialInstructionsConstraintType::setAll(const uci::type::SDA_SpecialInstructionsSetType& accessor) {
  chooseAll();
  if (&accessor != all_Accessor.get()) {
    all_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SDA_SpecialInstructionsConstraintType::isAll() const noexcept {
  return static_cast<bool>(all_Accessor);
}

uci::type::SDA_SpecialInstructionsSetType& SDA_SpecialInstructionsConstraintType::chooseAll(const std::string& method, uci::base::accessorType::AccessorType type) {
  any_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sDA_SpecialInstructionsSetType : type};
  if ((!all_Accessor) || (all_Accessor->getAccessorType() != requestedType)) {
    all_Accessor = SDA_SpecialInstructionsSetType::create(type);
    if (!all_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *all_Accessor;
}

uci::type::SDA_SpecialInstructionsSetType& SDA_SpecialInstructionsConstraintType::chooseAll(uci::base::accessorType::AccessorType type) {
  return chooseAll("chooseAll", type);
}

uci::type::SDA_SpecialInstructionsSetType& SDA_SpecialInstructionsConstraintType::getAny_() const {
  if (any_Accessor) {
    return *any_Accessor;
  }
  throw uci::base::UCIException("Error in getAny(): Unable to get Any, field not selected");
}

const uci::type::SDA_SpecialInstructionsSetType& SDA_SpecialInstructionsConstraintType::getAny() const {
  return getAny_();
}

uci::type::SDA_SpecialInstructionsSetType& SDA_SpecialInstructionsConstraintType::getAny() {
  return getAny_();
}

uci::type::SDA_SpecialInstructionsConstraintType& SDA_SpecialInstructionsConstraintType::setAny(const uci::type::SDA_SpecialInstructionsSetType& accessor) {
  chooseAny();
  if (&accessor != any_Accessor.get()) {
    any_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SDA_SpecialInstructionsConstraintType::isAny() const noexcept {
  return static_cast<bool>(any_Accessor);
}

uci::type::SDA_SpecialInstructionsSetType& SDA_SpecialInstructionsConstraintType::chooseAny(const std::string& method, uci::base::accessorType::AccessorType type) {
  all_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sDA_SpecialInstructionsSetType : type};
  if ((!any_Accessor) || (any_Accessor->getAccessorType() != requestedType)) {
    any_Accessor = SDA_SpecialInstructionsSetType::create(type);
    if (!any_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *any_Accessor;
}

uci::type::SDA_SpecialInstructionsSetType& SDA_SpecialInstructionsConstraintType::chooseAny(uci::base::accessorType::AccessorType type) {
  return chooseAny("chooseAny", type);
}

std::unique_ptr<SDA_SpecialInstructionsConstraintType> SDA_SpecialInstructionsConstraintType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sDA_SpecialInstructionsConstraintType : type};
  return (requestedType == uci::type::accessorType::sDA_SpecialInstructionsConstraintType) ? boost::make_unique<SDA_SpecialInstructionsConstraintType>() : nullptr;
}

/**  */
namespace SDA_SpecialInstructionsConstraintType_Names {

constexpr const char* Extern_Type_Name{"SDA_SpecialInstructionsConstraintType"};
constexpr const char* All_Name{"All"};
constexpr const char* Any_Name{"Any"};

} // namespace SDA_SpecialInstructionsConstraintType_Names

void SDA_SpecialInstructionsConstraintType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SDA_SpecialInstructionsConstraintType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SDA_SpecialInstructionsConstraintType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SDA_SpecialInstructionsConstraintType_Names::All_Name) {
      SDA_SpecialInstructionsSetType::deserialize(valueType.second, accessor.chooseAll(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SDA_SpecialInstructionsConstraintType_Names::Any_Name) {
      SDA_SpecialInstructionsSetType::deserialize(valueType.second, accessor.chooseAny(), nodeName, nsPrefix);
    }
  }
}

std::string SDA_SpecialInstructionsConstraintType::serialize(const uci::type::SDA_SpecialInstructionsConstraintType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SDA_SpecialInstructionsConstraintType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SDA_SpecialInstructionsConstraintType_Names::Extern_Type_Name);
  }
  if (accessor.isAll()) {
    SDA_SpecialInstructionsSetType::serialize(accessor.getAll(), node, SDA_SpecialInstructionsConstraintType_Names::All_Name);
  } else if (accessor.isAny()) {
    SDA_SpecialInstructionsSetType::serialize(accessor.getAny(), node, SDA_SpecialInstructionsConstraintType_Names::Any_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SDA_SpecialInstructionsConstraintType& SDA_SpecialInstructionsConstraintType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SDA_SpecialInstructionsConstraintType>().release());
}

uci::type::SDA_SpecialInstructionsConstraintType& SDA_SpecialInstructionsConstraintType::create(const uci::type::SDA_SpecialInstructionsConstraintType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SDA_SpecialInstructionsConstraintType> newAccessor{boost::make_unique<asb_uci::type::SDA_SpecialInstructionsConstraintType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SDA_SpecialInstructionsConstraintType::destroy(uci::type::SDA_SpecialInstructionsConstraintType& accessor) {
  delete dynamic_cast<asb_uci::type::SDA_SpecialInstructionsConstraintType*>(&accessor);
}

} // namespace type

} // namespace uci

