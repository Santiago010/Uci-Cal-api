/** @file PO_CapabilityMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_CapabilityMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityBaseType.h"
#include "../../../include/asb_uci/type/FOR_Type.h"
#include "../../../include/asb_uci/type/PO_CapabilityType.h"
#include "../../../include/asb_uci/type/PO_CollectionConstraintsType.h"
#include "../../../include/asb_uci/type/PO_ComponentType.h"
#include "../../../include/asb_uci/type/PO_SubCapabilityType.h"
#include "../../../include/asb_uci/type/PO_TrackCapabilityType.h"
#include "../../../include/asb_uci/type/PointingTypeEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FOR_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_CapabilityMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_CapabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_CollectionConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_SubCapabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TrackCapabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PointingTypeEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_CapabilityMDT::PO_CapabilityMDT()
  : capability_Accessor{boost::make_unique<Capability>(1, SIZE_MAX)},
    pointingCapability_Accessor{boost::make_unique<PointingCapability>(0, 6)},
    subCapability_Accessor{boost::make_unique<SubCapability>(0, SIZE_MAX)},
    pO_Component_Accessor{boost::make_unique<PO_Component>(0, SIZE_MAX)},
    trackOption_Accessor{boost::make_unique<TrackOption>(0, SIZE_MAX)},
    collectionConstraints_Accessor{boost::make_unique<CollectionConstraints>(0, 10)} {
}

PO_CapabilityMDT::~PO_CapabilityMDT() = default;

void PO_CapabilityMDT::copy(const uci::type::PO_CapabilityMDT& accessor) {
  copyImpl(accessor, false);
}

void PO_CapabilityMDT::copyImpl(const uci::type::PO_CapabilityMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CapabilityBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const PO_CapabilityMDT&>(accessor);
    setCapability(*(accessorImpl.capability_Accessor));
    setPointingCapability(*(accessorImpl.pointingCapability_Accessor));
    setSubCapability(*(accessorImpl.subCapability_Accessor));
    setPO_Component(*(accessorImpl.pO_Component_Accessor));
    setTrackOption(*(accessorImpl.trackOption_Accessor));
    setCollectionConstraints(*(accessorImpl.collectionConstraints_Accessor));
    if (accessorImpl.capabilityFOR_Accessor) {
      setCapabilityFOR(*(accessorImpl.capabilityFOR_Accessor));
    } else {
      capabilityFOR_Accessor.reset();
    }
    if (accessorImpl.capabilityThermalBlankingFOR_Accessor) {
      setCapabilityThermalBlankingFOR(*(accessorImpl.capabilityThermalBlankingFOR_Accessor));
    } else {
      capabilityThermalBlankingFOR_Accessor.reset();
    }
  }
}

void PO_CapabilityMDT::reset() noexcept {
  CapabilityBaseType::reset();
  capability_Accessor->reset();
  pointingCapability_Accessor->reset();
  subCapability_Accessor->reset();
  pO_Component_Accessor->reset();
  trackOption_Accessor->reset();
  collectionConstraints_Accessor->reset();
  capabilityFOR_Accessor.reset();
  capabilityThermalBlankingFOR_Accessor.reset();
}

const uci::type::PO_CapabilityMDT::Capability& PO_CapabilityMDT::getCapability() const {
  return *capability_Accessor;
}

uci::type::PO_CapabilityMDT::Capability& PO_CapabilityMDT::getCapability() {
  return *capability_Accessor;
}

uci::type::PO_CapabilityMDT& PO_CapabilityMDT::setCapability(const uci::type::PO_CapabilityMDT::Capability& accessor) {
  if (&accessor != capability_Accessor.get()) {
    capability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_CapabilityMDT::PointingCapability& PO_CapabilityMDT::getPointingCapability() const {
  return *pointingCapability_Accessor;
}

uci::type::PO_CapabilityMDT::PointingCapability& PO_CapabilityMDT::getPointingCapability() {
  return *pointingCapability_Accessor;
}

uci::type::PO_CapabilityMDT& PO_CapabilityMDT::setPointingCapability(const uci::type::PO_CapabilityMDT::PointingCapability& accessor) {
  if (&accessor != pointingCapability_Accessor.get()) {
    pointingCapability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_CapabilityMDT::SubCapability& PO_CapabilityMDT::getSubCapability() const {
  return *subCapability_Accessor;
}

uci::type::PO_CapabilityMDT::SubCapability& PO_CapabilityMDT::getSubCapability() {
  return *subCapability_Accessor;
}

uci::type::PO_CapabilityMDT& PO_CapabilityMDT::setSubCapability(const uci::type::PO_CapabilityMDT::SubCapability& accessor) {
  if (&accessor != subCapability_Accessor.get()) {
    subCapability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_CapabilityMDT::PO_Component& PO_CapabilityMDT::getPO_Component() const {
  return *pO_Component_Accessor;
}

uci::type::PO_CapabilityMDT::PO_Component& PO_CapabilityMDT::getPO_Component() {
  return *pO_Component_Accessor;
}

uci::type::PO_CapabilityMDT& PO_CapabilityMDT::setPO_Component(const uci::type::PO_CapabilityMDT::PO_Component& accessor) {
  if (&accessor != pO_Component_Accessor.get()) {
    pO_Component_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_CapabilityMDT::TrackOption& PO_CapabilityMDT::getTrackOption() const {
  return *trackOption_Accessor;
}

uci::type::PO_CapabilityMDT::TrackOption& PO_CapabilityMDT::getTrackOption() {
  return *trackOption_Accessor;
}

uci::type::PO_CapabilityMDT& PO_CapabilityMDT::setTrackOption(const uci::type::PO_CapabilityMDT::TrackOption& accessor) {
  if (&accessor != trackOption_Accessor.get()) {
    trackOption_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_CapabilityMDT::CollectionConstraints& PO_CapabilityMDT::getCollectionConstraints() const {
  return *collectionConstraints_Accessor;
}

uci::type::PO_CapabilityMDT::CollectionConstraints& PO_CapabilityMDT::getCollectionConstraints() {
  return *collectionConstraints_Accessor;
}

uci::type::PO_CapabilityMDT& PO_CapabilityMDT::setCollectionConstraints(const uci::type::PO_CapabilityMDT::CollectionConstraints& accessor) {
  if (&accessor != collectionConstraints_Accessor.get()) {
    collectionConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FOR_Type& PO_CapabilityMDT::getCapabilityFOR_() const {
  if (capabilityFOR_Accessor) {
    return *capabilityFOR_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityFOR(): An attempt was made to get an optional field that was not enabled, call hasCapabilityFOR() to determine if it is safe to call getCapabilityFOR()");
}

const uci::type::FOR_Type& PO_CapabilityMDT::getCapabilityFOR() const {
  return getCapabilityFOR_();
}

uci::type::FOR_Type& PO_CapabilityMDT::getCapabilityFOR() {
  return getCapabilityFOR_();
}

uci::type::PO_CapabilityMDT& PO_CapabilityMDT::setCapabilityFOR(const uci::type::FOR_Type& accessor) {
  enableCapabilityFOR();
  if (&accessor != capabilityFOR_Accessor.get()) {
    capabilityFOR_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CapabilityMDT::hasCapabilityFOR() const noexcept {
  return static_cast<bool>(capabilityFOR_Accessor);
}

uci::type::FOR_Type& PO_CapabilityMDT::enableCapabilityFOR(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fOR_Type : type};
  if ((!capabilityFOR_Accessor) || (capabilityFOR_Accessor->getAccessorType() != requestedType)) {
    capabilityFOR_Accessor = FOR_Type::create(requestedType);
    if (!capabilityFOR_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityFOR(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityFOR_Accessor;
}

uci::type::PO_CapabilityMDT& PO_CapabilityMDT::clearCapabilityFOR() noexcept {
  capabilityFOR_Accessor.reset();
  return *this;
}

uci::type::FOR_Type& PO_CapabilityMDT::getCapabilityThermalBlankingFOR_() const {
  if (capabilityThermalBlankingFOR_Accessor) {
    return *capabilityThermalBlankingFOR_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityThermalBlankingFOR(): An attempt was made to get an optional field that was not enabled, call hasCapabilityThermalBlankingFOR() to determine if it is safe to call getCapabilityThermalBlankingFOR()");
}

const uci::type::FOR_Type& PO_CapabilityMDT::getCapabilityThermalBlankingFOR() const {
  return getCapabilityThermalBlankingFOR_();
}

uci::type::FOR_Type& PO_CapabilityMDT::getCapabilityThermalBlankingFOR() {
  return getCapabilityThermalBlankingFOR_();
}

uci::type::PO_CapabilityMDT& PO_CapabilityMDT::setCapabilityThermalBlankingFOR(const uci::type::FOR_Type& accessor) {
  enableCapabilityThermalBlankingFOR();
  if (&accessor != capabilityThermalBlankingFOR_Accessor.get()) {
    capabilityThermalBlankingFOR_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CapabilityMDT::hasCapabilityThermalBlankingFOR() const noexcept {
  return static_cast<bool>(capabilityThermalBlankingFOR_Accessor);
}

uci::type::FOR_Type& PO_CapabilityMDT::enableCapabilityThermalBlankingFOR(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fOR_Type : type};
  if ((!capabilityThermalBlankingFOR_Accessor) || (capabilityThermalBlankingFOR_Accessor->getAccessorType() != requestedType)) {
    capabilityThermalBlankingFOR_Accessor = FOR_Type::create(requestedType);
    if (!capabilityThermalBlankingFOR_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityThermalBlankingFOR(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityThermalBlankingFOR_Accessor;
}

uci::type::PO_CapabilityMDT& PO_CapabilityMDT::clearCapabilityThermalBlankingFOR() noexcept {
  capabilityThermalBlankingFOR_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_CapabilityMDT> PO_CapabilityMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_CapabilityMDT : type};
  return (requestedType == uci::type::accessorType::pO_CapabilityMDT) ? boost::make_unique<PO_CapabilityMDT>() : nullptr;
}

/**  */
namespace PO_CapabilityMDT_Names {

constexpr const char* Extern_Type_Name{"PO_CapabilityMDT"};
constexpr const char* Capability_Name{"Capability"};
constexpr const char* PointingCapability_Name{"PointingCapability"};
constexpr const char* SubCapability_Name{"SubCapability"};
constexpr const char* PO_Component_Name{"PO_Component"};
constexpr const char* TrackOption_Name{"TrackOption"};
constexpr const char* CollectionConstraints_Name{"CollectionConstraints"};
constexpr const char* CapabilityFOR_Name{"CapabilityFOR"};
constexpr const char* CapabilityThermalBlankingFOR_Name{"CapabilityThermalBlankingFOR"};

} // namespace PO_CapabilityMDT_Names

void PO_CapabilityMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_CapabilityMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_CapabilityMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_CapabilityMDT_Names::Capability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityMDT::Capability& boundedList = accessor.getCapability();
        const uci::type::PO_CapabilityMDT::Capability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_CapabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityMDT_Names::PointingCapability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityMDT::PointingCapability& boundedList = accessor.getPointingCapability();
        const uci::type::PO_CapabilityMDT::PointingCapability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityMDT_Names::SubCapability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityMDT::SubCapability& boundedList = accessor.getSubCapability();
        const uci::type::PO_CapabilityMDT::SubCapability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_SubCapabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityMDT_Names::PO_Component_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityMDT::PO_Component& boundedList = accessor.getPO_Component();
        const uci::type::PO_CapabilityMDT::PO_Component::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ComponentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityMDT_Names::TrackOption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityMDT::TrackOption& boundedList = accessor.getTrackOption();
        const uci::type::PO_CapabilityMDT::TrackOption::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_TrackCapabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityMDT_Names::CollectionConstraints_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityMDT::CollectionConstraints& boundedList = accessor.getCollectionConstraints();
        const uci::type::PO_CapabilityMDT::CollectionConstraints::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_CollectionConstraintsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityMDT_Names::CapabilityFOR_Name) {
      FOR_Type::deserialize(valueType.second, accessor.enableCapabilityFOR(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CapabilityMDT_Names::CapabilityThermalBlankingFOR_Name) {
      FOR_Type::deserialize(valueType.second, accessor.enableCapabilityThermalBlankingFOR(), nodeName, nsPrefix);
    }
  }
  CapabilityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string PO_CapabilityMDT::serialize(const uci::type::PO_CapabilityMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_CapabilityMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_CapabilityMDT_Names::Extern_Type_Name);
  }
  CapabilityBaseType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::PO_CapabilityMDT::Capability& boundedList = accessor.getCapability();
    for (uci::type::PO_CapabilityMDT::Capability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_CapabilityType::serialize(boundedList.at(i), node, PO_CapabilityMDT_Names::Capability_Name);
    }
  }
  {
    const uci::type::PO_CapabilityMDT::PointingCapability& boundedList = accessor.getPointingCapability();
    for (uci::type::PO_CapabilityMDT::PointingCapability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PointingTypeEnum::serialize(boundedList.at(i), node, PO_CapabilityMDT_Names::PointingCapability_Name, false);
    }
  }
  {
    const uci::type::PO_CapabilityMDT::SubCapability& boundedList = accessor.getSubCapability();
    for (uci::type::PO_CapabilityMDT::SubCapability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_SubCapabilityType::serialize(boundedList.at(i), node, PO_CapabilityMDT_Names::SubCapability_Name);
    }
  }
  {
    const uci::type::PO_CapabilityMDT::PO_Component& boundedList = accessor.getPO_Component();
    for (uci::type::PO_CapabilityMDT::PO_Component::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ComponentType::serialize(boundedList.at(i), node, PO_CapabilityMDT_Names::PO_Component_Name);
    }
  }
  {
    const uci::type::PO_CapabilityMDT::TrackOption& boundedList = accessor.getTrackOption();
    for (uci::type::PO_CapabilityMDT::TrackOption::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_TrackCapabilityType::serialize(boundedList.at(i), node, PO_CapabilityMDT_Names::TrackOption_Name);
    }
  }
  {
    const uci::type::PO_CapabilityMDT::CollectionConstraints& boundedList = accessor.getCollectionConstraints();
    for (uci::type::PO_CapabilityMDT::CollectionConstraints::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_CollectionConstraintsType::serialize(boundedList.at(i), node, PO_CapabilityMDT_Names::CollectionConstraints_Name);
    }
  }
  if (accessor.hasCapabilityFOR()) {
    FOR_Type::serialize(accessor.getCapabilityFOR(), node, PO_CapabilityMDT_Names::CapabilityFOR_Name);
  }
  if (accessor.hasCapabilityThermalBlankingFOR()) {
    FOR_Type::serialize(accessor.getCapabilityThermalBlankingFOR(), node, PO_CapabilityMDT_Names::CapabilityThermalBlankingFOR_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_CapabilityMDT& PO_CapabilityMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_CapabilityMDT>().release());
}

uci::type::PO_CapabilityMDT& PO_CapabilityMDT::create(const uci::type::PO_CapabilityMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_CapabilityMDT> newAccessor{boost::make_unique<asb_uci::type::PO_CapabilityMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_CapabilityMDT::destroy(uci::type::PO_CapabilityMDT& accessor) {
  delete dynamic_cast<asb_uci::type::PO_CapabilityMDT*>(&accessor);
}

} // namespace type

} // namespace uci

