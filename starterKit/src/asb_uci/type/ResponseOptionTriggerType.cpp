/** @file ResponseOptionTriggerType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ResponseOptionTriggerType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AccessAssessmentFilterType.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/EntityFilterType.h"
#include "../../../include/asb_uci/type/OperatorLocationOfInterestClauseType.h"
#include "../../../include/asb_uci/type/QueryMessageType.h"
#include "../../../include/asb_uci/type/RequirementFilterType.h"
#include "../../../include/asb_uci/type/SystemFilterType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AccessAssessmentFilterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityFilterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorLocationOfInterestClauseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QueryMessageType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementFilterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponseOptionTriggerType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemFilterType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResponseOptionTriggerType::ResponseOptionTriggerType() = default;

ResponseOptionTriggerType::~ResponseOptionTriggerType() = default;

void ResponseOptionTriggerType::copy(const uci::type::ResponseOptionTriggerType& accessor) {
  copyImpl(accessor, false);
}

void ResponseOptionTriggerType::copyImpl(const uci::type::ResponseOptionTriggerType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResponseOptionTriggerType&>(accessor);
    if (accessorImpl.entity_Accessor) {
      setEntity(*(accessorImpl.entity_Accessor));
    } else {
      entity_Accessor.reset();
    }
    if (accessorImpl.system_Accessor) {
      setSystem(*(accessorImpl.system_Accessor));
    } else {
      system_Accessor.reset();
    }
    if (accessorImpl.requirement_Accessor) {
      setRequirement(*(accessorImpl.requirement_Accessor));
    } else {
      requirement_Accessor.reset();
    }
    if (accessorImpl.accessAssessment_Accessor) {
      setAccessAssessment(*(accessorImpl.accessAssessment_Accessor));
    } else {
      accessAssessment_Accessor.reset();
    }
    if (accessorImpl.oLOI_Accessor) {
      setOLOI(*(accessorImpl.oLOI_Accessor));
    } else {
      oLOI_Accessor.reset();
    }
    if (accessorImpl.responseCommand_Accessor) {
      setResponseCommand(*(accessorImpl.responseCommand_Accessor));
    } else {
      responseCommand_Accessor.reset();
    }
    if (accessorImpl.anyMessage_Accessor) {
      setAnyMessage(*(accessorImpl.anyMessage_Accessor));
    } else {
      anyMessage_Accessor.reset();
    }
  }
}

void ResponseOptionTriggerType::reset() noexcept {
  entity_Accessor.reset();
  system_Accessor.reset();
  requirement_Accessor.reset();
  accessAssessment_Accessor.reset();
  oLOI_Accessor.reset();
  responseCommand_Accessor.reset();
  anyMessage_Accessor.reset();
}

uci::type::ResponseOptionTriggerType::ResponseOptionTriggerTypeChoice ResponseOptionTriggerType::getResponseOptionTriggerTypeChoiceOrdinal() const noexcept {
  if (entity_Accessor) {
    return RESPONSEOPTIONTRIGGERTYPE_CHOICE_ENTITY;
  }
  if (system_Accessor) {
    return RESPONSEOPTIONTRIGGERTYPE_CHOICE_SYSTEM;
  }
  if (requirement_Accessor) {
    return RESPONSEOPTIONTRIGGERTYPE_CHOICE_REQUIREMENT;
  }
  if (accessAssessment_Accessor) {
    return RESPONSEOPTIONTRIGGERTYPE_CHOICE_ACCESSASSESSMENT;
  }
  if (oLOI_Accessor) {
    return RESPONSEOPTIONTRIGGERTYPE_CHOICE_OLOI;
  }
  if (responseCommand_Accessor) {
    return RESPONSEOPTIONTRIGGERTYPE_CHOICE_RESPONSECOMMAND;
  }
  if (anyMessage_Accessor) {
    return RESPONSEOPTIONTRIGGERTYPE_CHOICE_ANYMESSAGE;
  }
  return RESPONSEOPTIONTRIGGERTYPE_CHOICE_NONE;
}

uci::type::ResponseOptionTriggerType& ResponseOptionTriggerType::setResponseOptionTriggerTypeChoiceOrdinal(uci::type::ResponseOptionTriggerType::ResponseOptionTriggerTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case RESPONSEOPTIONTRIGGERTYPE_CHOICE_ENTITY:
      chooseEntity("setResponseOptionTriggerTypeChoiceOrdinal", type);
      break;
    case RESPONSEOPTIONTRIGGERTYPE_CHOICE_SYSTEM:
      chooseSystem("setResponseOptionTriggerTypeChoiceOrdinal", type);
      break;
    case RESPONSEOPTIONTRIGGERTYPE_CHOICE_REQUIREMENT:
      chooseRequirement("setResponseOptionTriggerTypeChoiceOrdinal", type);
      break;
    case RESPONSEOPTIONTRIGGERTYPE_CHOICE_ACCESSASSESSMENT:
      chooseAccessAssessment("setResponseOptionTriggerTypeChoiceOrdinal", type);
      break;
    case RESPONSEOPTIONTRIGGERTYPE_CHOICE_OLOI:
      chooseOLOI("setResponseOptionTriggerTypeChoiceOrdinal", type);
      break;
    case RESPONSEOPTIONTRIGGERTYPE_CHOICE_RESPONSECOMMAND:
      chooseResponseCommand("setResponseOptionTriggerTypeChoiceOrdinal", type);
      break;
    case RESPONSEOPTIONTRIGGERTYPE_CHOICE_ANYMESSAGE:
      chooseAnyMessage("setResponseOptionTriggerTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setResponseOptionTriggerTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EntityFilterType& ResponseOptionTriggerType::getEntity_() const {
  if (entity_Accessor) {
    return *entity_Accessor;
  }
  throw uci::base::UCIException("Error in getEntity(): Unable to get Entity, field not selected");
}

const uci::type::EntityFilterType& ResponseOptionTriggerType::getEntity() const {
  return getEntity_();
}

uci::type::EntityFilterType& ResponseOptionTriggerType::getEntity() {
  return getEntity_();
}

uci::type::ResponseOptionTriggerType& ResponseOptionTriggerType::setEntity(const uci::type::EntityFilterType& accessor) {
  chooseEntity();
  if (&accessor != entity_Accessor.get()) {
    entity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseOptionTriggerType::isEntity() const noexcept {
  return static_cast<bool>(entity_Accessor);
}

uci::type::EntityFilterType& ResponseOptionTriggerType::chooseEntity(const std::string& method, uci::base::accessorType::AccessorType type) {
  system_Accessor.reset();
  requirement_Accessor.reset();
  accessAssessment_Accessor.reset();
  oLOI_Accessor.reset();
  responseCommand_Accessor.reset();
  anyMessage_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityFilterType : type};
  if ((!entity_Accessor) || (entity_Accessor->getAccessorType() != requestedType)) {
    entity_Accessor = EntityFilterType::create(type);
    if (!entity_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entity_Accessor;
}

uci::type::EntityFilterType& ResponseOptionTriggerType::chooseEntity(uci::base::accessorType::AccessorType type) {
  return chooseEntity("chooseEntity", type);
}

uci::type::SystemFilterType& ResponseOptionTriggerType::getSystem_() const {
  if (system_Accessor) {
    return *system_Accessor;
  }
  throw uci::base::UCIException("Error in getSystem(): Unable to get System, field not selected");
}

const uci::type::SystemFilterType& ResponseOptionTriggerType::getSystem() const {
  return getSystem_();
}

uci::type::SystemFilterType& ResponseOptionTriggerType::getSystem() {
  return getSystem_();
}

uci::type::ResponseOptionTriggerType& ResponseOptionTriggerType::setSystem(const uci::type::SystemFilterType& accessor) {
  chooseSystem();
  if (&accessor != system_Accessor.get()) {
    system_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseOptionTriggerType::isSystem() const noexcept {
  return static_cast<bool>(system_Accessor);
}

uci::type::SystemFilterType& ResponseOptionTriggerType::chooseSystem(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  requirement_Accessor.reset();
  accessAssessment_Accessor.reset();
  oLOI_Accessor.reset();
  responseCommand_Accessor.reset();
  anyMessage_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemFilterType : type};
  if ((!system_Accessor) || (system_Accessor->getAccessorType() != requestedType)) {
    system_Accessor = SystemFilterType::create(type);
    if (!system_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *system_Accessor;
}

uci::type::SystemFilterType& ResponseOptionTriggerType::chooseSystem(uci::base::accessorType::AccessorType type) {
  return chooseSystem("chooseSystem", type);
}

uci::type::RequirementFilterType& ResponseOptionTriggerType::getRequirement_() const {
  if (requirement_Accessor) {
    return *requirement_Accessor;
  }
  throw uci::base::UCIException("Error in getRequirement(): Unable to get Requirement, field not selected");
}

const uci::type::RequirementFilterType& ResponseOptionTriggerType::getRequirement() const {
  return getRequirement_();
}

uci::type::RequirementFilterType& ResponseOptionTriggerType::getRequirement() {
  return getRequirement_();
}

uci::type::ResponseOptionTriggerType& ResponseOptionTriggerType::setRequirement(const uci::type::RequirementFilterType& accessor) {
  chooseRequirement();
  if (&accessor != requirement_Accessor.get()) {
    requirement_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseOptionTriggerType::isRequirement() const noexcept {
  return static_cast<bool>(requirement_Accessor);
}

uci::type::RequirementFilterType& ResponseOptionTriggerType::chooseRequirement(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  accessAssessment_Accessor.reset();
  oLOI_Accessor.reset();
  responseCommand_Accessor.reset();
  anyMessage_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementFilterType : type};
  if ((!requirement_Accessor) || (requirement_Accessor->getAccessorType() != requestedType)) {
    requirement_Accessor = RequirementFilterType::create(type);
    if (!requirement_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requirement_Accessor;
}

uci::type::RequirementFilterType& ResponseOptionTriggerType::chooseRequirement(uci::base::accessorType::AccessorType type) {
  return chooseRequirement("chooseRequirement", type);
}

uci::type::AccessAssessmentFilterType& ResponseOptionTriggerType::getAccessAssessment_() const {
  if (accessAssessment_Accessor) {
    return *accessAssessment_Accessor;
  }
  throw uci::base::UCIException("Error in getAccessAssessment(): Unable to get AccessAssessment, field not selected");
}

const uci::type::AccessAssessmentFilterType& ResponseOptionTriggerType::getAccessAssessment() const {
  return getAccessAssessment_();
}

uci::type::AccessAssessmentFilterType& ResponseOptionTriggerType::getAccessAssessment() {
  return getAccessAssessment_();
}

uci::type::ResponseOptionTriggerType& ResponseOptionTriggerType::setAccessAssessment(const uci::type::AccessAssessmentFilterType& accessor) {
  chooseAccessAssessment();
  if (&accessor != accessAssessment_Accessor.get()) {
    accessAssessment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseOptionTriggerType::isAccessAssessment() const noexcept {
  return static_cast<bool>(accessAssessment_Accessor);
}

uci::type::AccessAssessmentFilterType& ResponseOptionTriggerType::chooseAccessAssessment(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  requirement_Accessor.reset();
  oLOI_Accessor.reset();
  responseCommand_Accessor.reset();
  anyMessage_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::accessAssessmentFilterType : type};
  if ((!accessAssessment_Accessor) || (accessAssessment_Accessor->getAccessorType() != requestedType)) {
    accessAssessment_Accessor = AccessAssessmentFilterType::create(type);
    if (!accessAssessment_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *accessAssessment_Accessor;
}

uci::type::AccessAssessmentFilterType& ResponseOptionTriggerType::chooseAccessAssessment(uci::base::accessorType::AccessorType type) {
  return chooseAccessAssessment("chooseAccessAssessment", type);
}

uci::type::OperatorLocationOfInterestClauseType& ResponseOptionTriggerType::getOLOI_() const {
  if (oLOI_Accessor) {
    return *oLOI_Accessor;
  }
  throw uci::base::UCIException("Error in getOLOI(): Unable to get OLOI, field not selected");
}

const uci::type::OperatorLocationOfInterestClauseType& ResponseOptionTriggerType::getOLOI() const {
  return getOLOI_();
}

uci::type::OperatorLocationOfInterestClauseType& ResponseOptionTriggerType::getOLOI() {
  return getOLOI_();
}

uci::type::ResponseOptionTriggerType& ResponseOptionTriggerType::setOLOI(const uci::type::OperatorLocationOfInterestClauseType& accessor) {
  chooseOLOI();
  if (&accessor != oLOI_Accessor.get()) {
    oLOI_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseOptionTriggerType::isOLOI() const noexcept {
  return static_cast<bool>(oLOI_Accessor);
}

uci::type::OperatorLocationOfInterestClauseType& ResponseOptionTriggerType::chooseOLOI(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  requirement_Accessor.reset();
  accessAssessment_Accessor.reset();
  responseCommand_Accessor.reset();
  anyMessage_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorLocationOfInterestClauseType : type};
  if ((!oLOI_Accessor) || (oLOI_Accessor->getAccessorType() != requestedType)) {
    oLOI_Accessor = OperatorLocationOfInterestClauseType::create(type);
    if (!oLOI_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *oLOI_Accessor;
}

uci::type::OperatorLocationOfInterestClauseType& ResponseOptionTriggerType::chooseOLOI(uci::base::accessorType::AccessorType type) {
  return chooseOLOI("chooseOLOI", type);
}

uci::type::EmptyType& ResponseOptionTriggerType::getResponseCommand_() const {
  if (responseCommand_Accessor) {
    return *responseCommand_Accessor;
  }
  throw uci::base::UCIException("Error in getResponseCommand(): An attempt was made to get an optional field that was not enabled, call hasResponseCommand() to determine if it is safe to call getResponseCommand()");
}

const uci::type::EmptyType& ResponseOptionTriggerType::getResponseCommand() const {
  return getResponseCommand_();
}

uci::type::EmptyType& ResponseOptionTriggerType::getResponseCommand() {
  return getResponseCommand_();
}

uci::type::ResponseOptionTriggerType& ResponseOptionTriggerType::setResponseCommand(const uci::type::EmptyType& value) {
  return setResponseCommand(value.c_str());
}

uci::type::ResponseOptionTriggerType& ResponseOptionTriggerType::setResponseCommand(const std::string& value) {
  return setResponseCommand(value.c_str());
}

uci::type::ResponseOptionTriggerType& ResponseOptionTriggerType::setResponseCommand(const char * value) {
  chooseResponseCommand().setStringValue(value);
  return *this;
}

bool ResponseOptionTriggerType::isResponseCommand() const noexcept {
  return static_cast<bool>(responseCommand_Accessor);
}

uci::type::EmptyType& ResponseOptionTriggerType::chooseResponseCommand(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  requirement_Accessor.reset();
  accessAssessment_Accessor.reset();
  oLOI_Accessor.reset();
  anyMessage_Accessor.reset();
  if (!responseCommand_Accessor) {
    responseCommand_Accessor = EmptyType::create(type);
  }
  return *responseCommand_Accessor;
}

uci::type::EmptyType& ResponseOptionTriggerType::chooseResponseCommand(uci::base::accessorType::AccessorType type) {
  return chooseResponseCommand("chooseResponseCommand", type);
}

uci::type::QueryMessageType& ResponseOptionTriggerType::getAnyMessage_() const {
  if (anyMessage_Accessor) {
    return *anyMessage_Accessor;
  }
  throw uci::base::UCIException("Error in getAnyMessage(): Unable to get AnyMessage, field not selected");
}

const uci::type::QueryMessageType& ResponseOptionTriggerType::getAnyMessage() const {
  return getAnyMessage_();
}

uci::type::QueryMessageType& ResponseOptionTriggerType::getAnyMessage() {
  return getAnyMessage_();
}

uci::type::ResponseOptionTriggerType& ResponseOptionTriggerType::setAnyMessage(const uci::type::QueryMessageType& accessor) {
  chooseAnyMessage();
  if (&accessor != anyMessage_Accessor.get()) {
    anyMessage_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseOptionTriggerType::isAnyMessage() const noexcept {
  return static_cast<bool>(anyMessage_Accessor);
}

uci::type::QueryMessageType& ResponseOptionTriggerType::chooseAnyMessage(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  requirement_Accessor.reset();
  accessAssessment_Accessor.reset();
  oLOI_Accessor.reset();
  responseCommand_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryMessageType : type};
  if ((!anyMessage_Accessor) || (anyMessage_Accessor->getAccessorType() != requestedType)) {
    anyMessage_Accessor = QueryMessageType::create(type);
    if (!anyMessage_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *anyMessage_Accessor;
}

uci::type::QueryMessageType& ResponseOptionTriggerType::chooseAnyMessage(uci::base::accessorType::AccessorType type) {
  return chooseAnyMessage("chooseAnyMessage", type);
}

std::unique_ptr<ResponseOptionTriggerType> ResponseOptionTriggerType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responseOptionTriggerType : type};
  return (requestedType == uci::type::accessorType::responseOptionTriggerType) ? boost::make_unique<ResponseOptionTriggerType>() : nullptr;
}

/**  */
namespace ResponseOptionTriggerType_Names {

constexpr const char* Extern_Type_Name{"ResponseOptionTriggerType"};
constexpr const char* Entity_Name{"Entity"};
constexpr const char* System_Name{"System"};
constexpr const char* Requirement_Name{"Requirement"};
constexpr const char* AccessAssessment_Name{"AccessAssessment"};
constexpr const char* OLOI_Name{"OLOI"};
constexpr const char* ResponseCommand_Name{"ResponseCommand"};
constexpr const char* AnyMessage_Name{"AnyMessage"};

} // namespace ResponseOptionTriggerType_Names

void ResponseOptionTriggerType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResponseOptionTriggerType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResponseOptionTriggerType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResponseOptionTriggerType_Names::Entity_Name) {
      EntityFilterType::deserialize(valueType.second, accessor.chooseEntity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseOptionTriggerType_Names::System_Name) {
      SystemFilterType::deserialize(valueType.second, accessor.chooseSystem(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseOptionTriggerType_Names::Requirement_Name) {
      RequirementFilterType::deserialize(valueType.second, accessor.chooseRequirement(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseOptionTriggerType_Names::AccessAssessment_Name) {
      AccessAssessmentFilterType::deserialize(valueType.second, accessor.chooseAccessAssessment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseOptionTriggerType_Names::OLOI_Name) {
      OperatorLocationOfInterestClauseType::deserialize(valueType.second, accessor.chooseOLOI(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseOptionTriggerType_Names::ResponseCommand_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseResponseCommand().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + ResponseOptionTriggerType_Names::AnyMessage_Name) {
      QueryMessageType::deserialize(valueType.second, accessor.chooseAnyMessage(), nodeName, nsPrefix);
    }
  }
}

std::string ResponseOptionTriggerType::serialize(const uci::type::ResponseOptionTriggerType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResponseOptionTriggerType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResponseOptionTriggerType_Names::Extern_Type_Name);
  }
  if (accessor.isEntity()) {
    EntityFilterType::serialize(accessor.getEntity(), node, ResponseOptionTriggerType_Names::Entity_Name);
  } else if (accessor.isSystem()) {
    SystemFilterType::serialize(accessor.getSystem(), node, ResponseOptionTriggerType_Names::System_Name);
  } else if (accessor.isRequirement()) {
    RequirementFilterType::serialize(accessor.getRequirement(), node, ResponseOptionTriggerType_Names::Requirement_Name);
  } else if (accessor.isAccessAssessment()) {
    AccessAssessmentFilterType::serialize(accessor.getAccessAssessment(), node, ResponseOptionTriggerType_Names::AccessAssessment_Name);
  } else if (accessor.isOLOI()) {
    OperatorLocationOfInterestClauseType::serialize(accessor.getOLOI(), node, ResponseOptionTriggerType_Names::OLOI_Name);
  } else if (accessor.isResponseCommand()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getResponseCommand(), node, ResponseOptionTriggerType_Names::ResponseCommand_Name);
  } else if (accessor.isAnyMessage()) {
    QueryMessageType::serialize(accessor.getAnyMessage(), node, ResponseOptionTriggerType_Names::AnyMessage_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResponseOptionTriggerType& ResponseOptionTriggerType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResponseOptionTriggerType>().release());
}

uci::type::ResponseOptionTriggerType& ResponseOptionTriggerType::create(const uci::type::ResponseOptionTriggerType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResponseOptionTriggerType> newAccessor{boost::make_unique<asb_uci::type::ResponseOptionTriggerType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResponseOptionTriggerType::destroy(uci::type::ResponseOptionTriggerType& accessor) {
  delete dynamic_cast<asb_uci::type::ResponseOptionTriggerType*>(&accessor);
}

} // namespace type

} // namespace uci

