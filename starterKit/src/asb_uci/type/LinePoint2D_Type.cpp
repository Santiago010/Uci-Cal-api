/** @file LinePoint2D_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/LinePoint2D_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/Point2D_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LinePoint2D_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LinePoint2D_Type::LinePoint2D_Type() = default;

LinePoint2D_Type::~LinePoint2D_Type() = default;

void LinePoint2D_Type::copy(const uci::type::LinePoint2D_Type& accessor) {
  copyImpl(accessor, false);
}

void LinePoint2D_Type::copyImpl(const uci::type::LinePoint2D_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    Point2D_Type::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const LinePoint2D_Type&>(accessor);
    if (accessorImpl.hasLeftWidth()) {
      setLeftWidth(accessorImpl.getLeftWidth());
    } else {
      clearLeftWidth();
    }
    if (accessorImpl.hasRightWidth()) {
      setRightWidth(accessorImpl.getRightWidth());
    } else {
      clearRightWidth();
    }
  }
}

void LinePoint2D_Type::reset() noexcept {
  Point2D_Type::reset();
  clearLeftWidth();
  clearRightWidth();
}

uci::type::DistanceTypeValue LinePoint2D_Type::getLeftWidth() const {
  if (leftWidth_Accessor) {
    return *leftWidth_Accessor;
  }
  throw uci::base::UCIException("Error in getLeftWidth(): An attempt was made to get an optional field that was not enabled, call hasLeftWidth() to determine if it is safe to call getLeftWidth()");
}

uci::type::LinePoint2D_Type& LinePoint2D_Type::setLeftWidth(uci::type::DistanceTypeValue value) {
  leftWidth_Accessor = value;
  return *this;
}

bool LinePoint2D_Type::hasLeftWidth() const noexcept {
  return leftWidth_Accessor.has_value();
}

uci::type::LinePoint2D_Type& LinePoint2D_Type::clearLeftWidth() noexcept {
  leftWidth_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue LinePoint2D_Type::getRightWidth() const {
  if (rightWidth_Accessor) {
    return *rightWidth_Accessor;
  }
  throw uci::base::UCIException("Error in getRightWidth(): An attempt was made to get an optional field that was not enabled, call hasRightWidth() to determine if it is safe to call getRightWidth()");
}

uci::type::LinePoint2D_Type& LinePoint2D_Type::setRightWidth(uci::type::DistanceTypeValue value) {
  rightWidth_Accessor = value;
  return *this;
}

bool LinePoint2D_Type::hasRightWidth() const noexcept {
  return rightWidth_Accessor.has_value();
}

uci::type::LinePoint2D_Type& LinePoint2D_Type::clearRightWidth() noexcept {
  rightWidth_Accessor.reset();
  return *this;
}

std::unique_ptr<LinePoint2D_Type> LinePoint2D_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::linePoint2D_Type : type};
  return (requestedType == uci::type::accessorType::linePoint2D_Type) ? boost::make_unique<LinePoint2D_Type>() : nullptr;
}

/**  */
namespace LinePoint2D_Type_Names {

constexpr const char* Extern_Type_Name{"LinePoint2D_Type"};
constexpr const char* LeftWidth_Name{"LeftWidth"};
constexpr const char* RightWidth_Name{"RightWidth"};

} // namespace LinePoint2D_Type_Names

void LinePoint2D_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::LinePoint2D_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LinePoint2D_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LinePoint2D_Type_Names::LeftWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLeftWidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LinePoint2D_Type_Names::RightWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRightWidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
  Point2D_Type::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string LinePoint2D_Type::serialize(const uci::type::LinePoint2D_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LinePoint2D_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LinePoint2D_Type_Names::Extern_Type_Name);
  }
  Point2D_Type::serialize(accessor, node, "", false, false, false);
  if (accessor.hasLeftWidth()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLeftWidth(), node, LinePoint2D_Type_Names::LeftWidth_Name);
  }
  if (accessor.hasRightWidth()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRightWidth(), node, LinePoint2D_Type_Names::RightWidth_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LinePoint2D_Type& LinePoint2D_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LinePoint2D_Type>().release());
}

uci::type::LinePoint2D_Type& LinePoint2D_Type::create(const uci::type::LinePoint2D_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LinePoint2D_Type> newAccessor{boost::make_unique<asb_uci::type::LinePoint2D_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LinePoint2D_Type::destroy(uci::type::LinePoint2D_Type& accessor) {
  delete dynamic_cast<asb_uci::type::LinePoint2D_Type*>(&accessor);
}

} // namespace type

} // namespace uci

