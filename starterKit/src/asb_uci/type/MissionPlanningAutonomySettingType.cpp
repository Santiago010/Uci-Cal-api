/** @file MissionPlanningAutonomySettingType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MissionPlanningAutonomySettingType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/MissionPlanningAutonomyResponseChoiceType.h"
#include "asb_uci/type/PlanningByCaseTriggerType.h"
#include "asb_uci/type/PlanningProcessID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DurationType.h"
#include "uci/type/MissionPlanningAutonomyResponseChoiceType.h"
#include "uci/type/MissionPlanningAutonomySettingType.h"
#include "uci/type/PlanningByCaseTriggerType.h"
#include "uci/type/PlanningProcessID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MissionPlanningAutonomySettingType::MissionPlanningAutonomySettingType()
  : trigger_Accessor{boost::make_unique<PlanningByCaseTriggerType>()},
    autonomousPlanningResponseChoice_Accessor{boost::make_unique<MissionPlanningAutonomyResponseChoiceType>()} {
}

MissionPlanningAutonomySettingType::~MissionPlanningAutonomySettingType() = default;

void MissionPlanningAutonomySettingType::copy(const uci::type::MissionPlanningAutonomySettingType& accessor) {
  copyImpl(accessor, false);
}

void MissionPlanningAutonomySettingType::copyImpl(const uci::type::MissionPlanningAutonomySettingType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MissionPlanningAutonomySettingType&>(accessor);
    setTrigger(*(accessorImpl.trigger_Accessor));
    setAutonomousPlanningResponseChoice(*(accessorImpl.autonomousPlanningResponseChoice_Accessor));
    if (accessorImpl.planningProcessID_Accessor) {
      setPlanningProcessID(*(accessorImpl.planningProcessID_Accessor));
    } else {
      planningProcessID_Accessor.reset();
    }
    if (accessorImpl.hasMinimumResponseInterval()) {
      setMinimumResponseInterval(accessorImpl.getMinimumResponseInterval());
    } else {
      clearMinimumResponseInterval();
    }
  }
}

void MissionPlanningAutonomySettingType::reset() noexcept {
  trigger_Accessor->reset();
  autonomousPlanningResponseChoice_Accessor->reset();
  planningProcessID_Accessor.reset();
  clearMinimumResponseInterval();
}

const uci::type::PlanningByCaseTriggerType& MissionPlanningAutonomySettingType::getTrigger() const {
  return *trigger_Accessor;
}

uci::type::PlanningByCaseTriggerType& MissionPlanningAutonomySettingType::getTrigger() {
  return *trigger_Accessor;
}

uci::type::MissionPlanningAutonomySettingType& MissionPlanningAutonomySettingType::setTrigger(const uci::type::PlanningByCaseTriggerType& accessor) {
  if (&accessor != trigger_Accessor.get()) {
    trigger_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanningAutonomyResponseChoiceType& MissionPlanningAutonomySettingType::getAutonomousPlanningResponseChoice() const {
  return *autonomousPlanningResponseChoice_Accessor;
}

uci::type::MissionPlanningAutonomyResponseChoiceType& MissionPlanningAutonomySettingType::getAutonomousPlanningResponseChoice() {
  return *autonomousPlanningResponseChoice_Accessor;
}

uci::type::MissionPlanningAutonomySettingType& MissionPlanningAutonomySettingType::setAutonomousPlanningResponseChoice(const uci::type::MissionPlanningAutonomyResponseChoiceType& accessor) {
  if (&accessor != autonomousPlanningResponseChoice_Accessor.get()) {
    autonomousPlanningResponseChoice_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanningProcessID_Type& MissionPlanningAutonomySettingType::getPlanningProcessID_() const {
  if (planningProcessID_Accessor) {
    return *planningProcessID_Accessor;
  }
  throw uci::base::UCIException("Error in getPlanningProcessID(): An attempt was made to get an optional field that was not enabled, call hasPlanningProcessID() to determine if it is safe to call getPlanningProcessID()");
}

const uci::type::PlanningProcessID_Type& MissionPlanningAutonomySettingType::getPlanningProcessID() const {
  return getPlanningProcessID_();
}

uci::type::PlanningProcessID_Type& MissionPlanningAutonomySettingType::getPlanningProcessID() {
  return getPlanningProcessID_();
}

uci::type::MissionPlanningAutonomySettingType& MissionPlanningAutonomySettingType::setPlanningProcessID(const uci::type::PlanningProcessID_Type& accessor) {
  enablePlanningProcessID();
  if (&accessor != planningProcessID_Accessor.get()) {
    planningProcessID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionPlanningAutonomySettingType::hasPlanningProcessID() const noexcept {
  return static_cast<bool>(planningProcessID_Accessor);
}

uci::type::PlanningProcessID_Type& MissionPlanningAutonomySettingType::enablePlanningProcessID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planningProcessID_Type : type};
  if ((!planningProcessID_Accessor) || (planningProcessID_Accessor->getAccessorType() != requestedType)) {
    planningProcessID_Accessor = PlanningProcessID_Type::create(requestedType);
    if (!planningProcessID_Accessor) {
      throw uci::base::UCIException("Error in enablePlanningProcessID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *planningProcessID_Accessor;
}

uci::type::MissionPlanningAutonomySettingType& MissionPlanningAutonomySettingType::clearPlanningProcessID() noexcept {
  planningProcessID_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue MissionPlanningAutonomySettingType::getMinimumResponseInterval() const {
  if (minimumResponseInterval_Accessor) {
    return *minimumResponseInterval_Accessor;
  }
  throw uci::base::UCIException("Error in getMinimumResponseInterval(): An attempt was made to get an optional field that was not enabled, call hasMinimumResponseInterval() to determine if it is safe to call getMinimumResponseInterval()");
}

uci::type::MissionPlanningAutonomySettingType& MissionPlanningAutonomySettingType::setMinimumResponseInterval(uci::type::DurationTypeValue value) {
  minimumResponseInterval_Accessor = value;
  return *this;
}

bool MissionPlanningAutonomySettingType::hasMinimumResponseInterval() const noexcept {
  return minimumResponseInterval_Accessor.has_value();
}

uci::type::MissionPlanningAutonomySettingType& MissionPlanningAutonomySettingType::clearMinimumResponseInterval() noexcept {
  minimumResponseInterval_Accessor.reset();
  return *this;
}

std::unique_ptr<MissionPlanningAutonomySettingType> MissionPlanningAutonomySettingType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanningAutonomySettingType : type};
  return (requestedType == uci::type::accessorType::missionPlanningAutonomySettingType) ? boost::make_unique<MissionPlanningAutonomySettingType>() : nullptr;
}

/**  */
namespace MissionPlanningAutonomySettingType_Names {

constexpr const char* Extern_Type_Name{"MissionPlanningAutonomySettingType"};
constexpr const char* Trigger_Name{"Trigger"};
constexpr const char* AutonomousPlanningResponseChoice_Name{"AutonomousPlanningResponseChoice"};
constexpr const char* PlanningProcessID_Name{"PlanningProcessID"};
constexpr const char* MinimumResponseInterval_Name{"MinimumResponseInterval"};

} // namespace MissionPlanningAutonomySettingType_Names

void MissionPlanningAutonomySettingType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionPlanningAutonomySettingType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionPlanningAutonomySettingType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MissionPlanningAutonomySettingType_Names::Trigger_Name) {
      PlanningByCaseTriggerType::deserialize(valueType.second, accessor.getTrigger(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanningAutonomySettingType_Names::AutonomousPlanningResponseChoice_Name) {
      MissionPlanningAutonomyResponseChoiceType::deserialize(valueType.second, accessor.getAutonomousPlanningResponseChoice(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanningAutonomySettingType_Names::PlanningProcessID_Name) {
      PlanningProcessID_Type::deserialize(valueType.second, accessor.enablePlanningProcessID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionPlanningAutonomySettingType_Names::MinimumResponseInterval_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumResponseInterval(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string MissionPlanningAutonomySettingType::serialize(const uci::type::MissionPlanningAutonomySettingType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MissionPlanningAutonomySettingType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MissionPlanningAutonomySettingType_Names::Extern_Type_Name);
  }
  PlanningByCaseTriggerType::serialize(accessor.getTrigger(), node, MissionPlanningAutonomySettingType_Names::Trigger_Name);
  MissionPlanningAutonomyResponseChoiceType::serialize(accessor.getAutonomousPlanningResponseChoice(), node, MissionPlanningAutonomySettingType_Names::AutonomousPlanningResponseChoice_Name);
  if (accessor.hasPlanningProcessID()) {
    PlanningProcessID_Type::serialize(accessor.getPlanningProcessID(), node, MissionPlanningAutonomySettingType_Names::PlanningProcessID_Name);
  }
  if (accessor.hasMinimumResponseInterval()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getMinimumResponseInterval(), node, MissionPlanningAutonomySettingType_Names::MinimumResponseInterval_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MissionPlanningAutonomySettingType& MissionPlanningAutonomySettingType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MissionPlanningAutonomySettingType>().release());
}

uci::type::MissionPlanningAutonomySettingType& MissionPlanningAutonomySettingType::create(const uci::type::MissionPlanningAutonomySettingType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MissionPlanningAutonomySettingType> newAccessor{boost::make_unique<asb_uci::type::MissionPlanningAutonomySettingType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MissionPlanningAutonomySettingType::destroy(uci::type::MissionPlanningAutonomySettingType& accessor) {
  delete dynamic_cast<asb_uci::type::MissionPlanningAutonomySettingType*>(&accessor);
}

} // namespace type

} // namespace uci

