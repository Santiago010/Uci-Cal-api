/** @file AccessEventFilterType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AccessEventFilterType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AccessEffortEnum.h"
#include "../../../include/asb_uci/type/DateTimeRangeType.h"
#include "../../../include/asb_uci/type/DistanceConstraintsType.h"
#include "../../../include/asb_uci/type/DurationRangeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AccessEffortEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AccessEventFilterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationRangeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AccessEventFilterType::AccessEventFilterType() = default;

AccessEventFilterType::~AccessEventFilterType() = default;

void AccessEventFilterType::copy(const uci::type::AccessEventFilterType& accessor) {
  copyImpl(accessor, false);
}

void AccessEventFilterType::copyImpl(const uci::type::AccessEventFilterType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AccessEventFilterType&>(accessor);
    if (accessorImpl.effort_Accessor) {
      setEffort(*(accessorImpl.effort_Accessor));
    } else {
      effort_Accessor.reset();
    }
    if (accessorImpl.timeRange_Accessor) {
      setTimeRange(*(accessorImpl.timeRange_Accessor));
    } else {
      timeRange_Accessor.reset();
    }
    if (accessorImpl.durationRange_Accessor) {
      setDurationRange(*(accessorImpl.durationRange_Accessor));
    } else {
      durationRange_Accessor.reset();
    }
    if (accessorImpl.objectSeparationRange_Accessor) {
      setObjectSeparationRange(*(accessorImpl.objectSeparationRange_Accessor));
    } else {
      objectSeparationRange_Accessor.reset();
    }
    if (accessorImpl.unambiguousTimeRange_Accessor) {
      setUnambiguousTimeRange(*(accessorImpl.unambiguousTimeRange_Accessor));
    } else {
      unambiguousTimeRange_Accessor.reset();
    }
  }
}

void AccessEventFilterType::reset() noexcept {
  effort_Accessor.reset();
  timeRange_Accessor.reset();
  durationRange_Accessor.reset();
  objectSeparationRange_Accessor.reset();
  unambiguousTimeRange_Accessor.reset();
}

uci::type::AccessEffortEnum& AccessEventFilterType::getEffort_() const {
  if (effort_Accessor) {
    return *effort_Accessor;
  }
  throw uci::base::UCIException("Error in getEffort(): An attempt was made to get an optional field that was not enabled, call hasEffort() to determine if it is safe to call getEffort()");
}

const uci::type::AccessEffortEnum& AccessEventFilterType::getEffort() const {
  return getEffort_();
}

uci::type::AccessEffortEnum& AccessEventFilterType::getEffort() {
  return getEffort_();
}

uci::type::AccessEventFilterType& AccessEventFilterType::setEffort(const uci::type::AccessEffortEnum& accessor) {
  enableEffort();
  if (&accessor != effort_Accessor.get()) {
    effort_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AccessEventFilterType& AccessEventFilterType::setEffort(const uci::type::AccessEffortEnum::EnumerationItem value) {
  enableEffort().setValue(value);
  return *this;
}

bool AccessEventFilterType::hasEffort() const noexcept {
  return static_cast<bool>(effort_Accessor);
}

uci::type::AccessEffortEnum& AccessEventFilterType::enableEffort(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::accessEffortEnum : type};
  if ((!effort_Accessor) || (effort_Accessor->getAccessorType() != requestedType)) {
    effort_Accessor = AccessEffortEnum::create(requestedType);
    if (!effort_Accessor) {
      throw uci::base::UCIException("Error in enableEffort(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *effort_Accessor;
}

uci::type::AccessEventFilterType& AccessEventFilterType::clearEffort() noexcept {
  effort_Accessor.reset();
  return *this;
}

uci::type::DateTimeRangeType& AccessEventFilterType::getTimeRange_() const {
  if (timeRange_Accessor) {
    return *timeRange_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeRange(): An attempt was made to get an optional field that was not enabled, call hasTimeRange() to determine if it is safe to call getTimeRange()");
}

const uci::type::DateTimeRangeType& AccessEventFilterType::getTimeRange() const {
  return getTimeRange_();
}

uci::type::DateTimeRangeType& AccessEventFilterType::getTimeRange() {
  return getTimeRange_();
}

uci::type::AccessEventFilterType& AccessEventFilterType::setTimeRange(const uci::type::DateTimeRangeType& accessor) {
  enableTimeRange();
  if (&accessor != timeRange_Accessor.get()) {
    timeRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AccessEventFilterType::hasTimeRange() const noexcept {
  return static_cast<bool>(timeRange_Accessor);
}

uci::type::DateTimeRangeType& AccessEventFilterType::enableTimeRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!timeRange_Accessor) || (timeRange_Accessor->getAccessorType() != requestedType)) {
    timeRange_Accessor = DateTimeRangeType::create(requestedType);
    if (!timeRange_Accessor) {
      throw uci::base::UCIException("Error in enableTimeRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timeRange_Accessor;
}

uci::type::AccessEventFilterType& AccessEventFilterType::clearTimeRange() noexcept {
  timeRange_Accessor.reset();
  return *this;
}

uci::type::DurationRangeType& AccessEventFilterType::getDurationRange_() const {
  if (durationRange_Accessor) {
    return *durationRange_Accessor;
  }
  throw uci::base::UCIException("Error in getDurationRange(): An attempt was made to get an optional field that was not enabled, call hasDurationRange() to determine if it is safe to call getDurationRange()");
}

const uci::type::DurationRangeType& AccessEventFilterType::getDurationRange() const {
  return getDurationRange_();
}

uci::type::DurationRangeType& AccessEventFilterType::getDurationRange() {
  return getDurationRange_();
}

uci::type::AccessEventFilterType& AccessEventFilterType::setDurationRange(const uci::type::DurationRangeType& accessor) {
  enableDurationRange();
  if (&accessor != durationRange_Accessor.get()) {
    durationRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AccessEventFilterType::hasDurationRange() const noexcept {
  return static_cast<bool>(durationRange_Accessor);
}

uci::type::DurationRangeType& AccessEventFilterType::enableDurationRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::durationRangeType : type};
  if ((!durationRange_Accessor) || (durationRange_Accessor->getAccessorType() != requestedType)) {
    durationRange_Accessor = DurationRangeType::create(requestedType);
    if (!durationRange_Accessor) {
      throw uci::base::UCIException("Error in enableDurationRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *durationRange_Accessor;
}

uci::type::AccessEventFilterType& AccessEventFilterType::clearDurationRange() noexcept {
  durationRange_Accessor.reset();
  return *this;
}

uci::type::DistanceConstraintsType& AccessEventFilterType::getObjectSeparationRange_() const {
  if (objectSeparationRange_Accessor) {
    return *objectSeparationRange_Accessor;
  }
  throw uci::base::UCIException("Error in getObjectSeparationRange(): An attempt was made to get an optional field that was not enabled, call hasObjectSeparationRange() to determine if it is safe to call getObjectSeparationRange()");
}

const uci::type::DistanceConstraintsType& AccessEventFilterType::getObjectSeparationRange() const {
  return getObjectSeparationRange_();
}

uci::type::DistanceConstraintsType& AccessEventFilterType::getObjectSeparationRange() {
  return getObjectSeparationRange_();
}

uci::type::AccessEventFilterType& AccessEventFilterType::setObjectSeparationRange(const uci::type::DistanceConstraintsType& accessor) {
  enableObjectSeparationRange();
  if (&accessor != objectSeparationRange_Accessor.get()) {
    objectSeparationRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AccessEventFilterType::hasObjectSeparationRange() const noexcept {
  return static_cast<bool>(objectSeparationRange_Accessor);
}

uci::type::DistanceConstraintsType& AccessEventFilterType::enableObjectSeparationRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::distanceConstraintsType : type};
  if ((!objectSeparationRange_Accessor) || (objectSeparationRange_Accessor->getAccessorType() != requestedType)) {
    objectSeparationRange_Accessor = DistanceConstraintsType::create(requestedType);
    if (!objectSeparationRange_Accessor) {
      throw uci::base::UCIException("Error in enableObjectSeparationRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *objectSeparationRange_Accessor;
}

uci::type::AccessEventFilterType& AccessEventFilterType::clearObjectSeparationRange() noexcept {
  objectSeparationRange_Accessor.reset();
  return *this;
}

uci::type::DateTimeRangeType& AccessEventFilterType::getUnambiguousTimeRange_() const {
  if (unambiguousTimeRange_Accessor) {
    return *unambiguousTimeRange_Accessor;
  }
  throw uci::base::UCIException("Error in getUnambiguousTimeRange(): An attempt was made to get an optional field that was not enabled, call hasUnambiguousTimeRange() to determine if it is safe to call getUnambiguousTimeRange()");
}

const uci::type::DateTimeRangeType& AccessEventFilterType::getUnambiguousTimeRange() const {
  return getUnambiguousTimeRange_();
}

uci::type::DateTimeRangeType& AccessEventFilterType::getUnambiguousTimeRange() {
  return getUnambiguousTimeRange_();
}

uci::type::AccessEventFilterType& AccessEventFilterType::setUnambiguousTimeRange(const uci::type::DateTimeRangeType& accessor) {
  enableUnambiguousTimeRange();
  if (&accessor != unambiguousTimeRange_Accessor.get()) {
    unambiguousTimeRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AccessEventFilterType::hasUnambiguousTimeRange() const noexcept {
  return static_cast<bool>(unambiguousTimeRange_Accessor);
}

uci::type::DateTimeRangeType& AccessEventFilterType::enableUnambiguousTimeRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!unambiguousTimeRange_Accessor) || (unambiguousTimeRange_Accessor->getAccessorType() != requestedType)) {
    unambiguousTimeRange_Accessor = DateTimeRangeType::create(requestedType);
    if (!unambiguousTimeRange_Accessor) {
      throw uci::base::UCIException("Error in enableUnambiguousTimeRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *unambiguousTimeRange_Accessor;
}

uci::type::AccessEventFilterType& AccessEventFilterType::clearUnambiguousTimeRange() noexcept {
  unambiguousTimeRange_Accessor.reset();
  return *this;
}

std::unique_ptr<AccessEventFilterType> AccessEventFilterType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::accessEventFilterType : type};
  return (requestedType == uci::type::accessorType::accessEventFilterType) ? boost::make_unique<AccessEventFilterType>() : nullptr;
}

/**  */
namespace AccessEventFilterType_Names {

constexpr const char* Extern_Type_Name{"AccessEventFilterType"};
constexpr const char* Effort_Name{"Effort"};
constexpr const char* TimeRange_Name{"TimeRange"};
constexpr const char* DurationRange_Name{"DurationRange"};
constexpr const char* ObjectSeparationRange_Name{"ObjectSeparationRange"};
constexpr const char* UnambiguousTimeRange_Name{"UnambiguousTimeRange"};

} // namespace AccessEventFilterType_Names

void AccessEventFilterType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AccessEventFilterType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AccessEventFilterType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AccessEventFilterType_Names::Effort_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEffort().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AccessEventFilterType_Names::TimeRange_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableTimeRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AccessEventFilterType_Names::DurationRange_Name) {
      DurationRangeType::deserialize(valueType.second, accessor.enableDurationRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AccessEventFilterType_Names::ObjectSeparationRange_Name) {
      DistanceConstraintsType::deserialize(valueType.second, accessor.enableObjectSeparationRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AccessEventFilterType_Names::UnambiguousTimeRange_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableUnambiguousTimeRange(), nodeName, nsPrefix);
    }
  }
}

std::string AccessEventFilterType::serialize(const uci::type::AccessEventFilterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AccessEventFilterType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AccessEventFilterType_Names::Extern_Type_Name);
  }
  if (accessor.hasEffort()) {
    AccessEffortEnum::serialize(accessor.getEffort(), node, AccessEventFilterType_Names::Effort_Name, false);
  }
  if (accessor.hasTimeRange()) {
    DateTimeRangeType::serialize(accessor.getTimeRange(), node, AccessEventFilterType_Names::TimeRange_Name);
  }
  if (accessor.hasDurationRange()) {
    DurationRangeType::serialize(accessor.getDurationRange(), node, AccessEventFilterType_Names::DurationRange_Name);
  }
  if (accessor.hasObjectSeparationRange()) {
    DistanceConstraintsType::serialize(accessor.getObjectSeparationRange(), node, AccessEventFilterType_Names::ObjectSeparationRange_Name);
  }
  if (accessor.hasUnambiguousTimeRange()) {
    DateTimeRangeType::serialize(accessor.getUnambiguousTimeRange(), node, AccessEventFilterType_Names::UnambiguousTimeRange_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AccessEventFilterType& AccessEventFilterType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AccessEventFilterType>().release());
}

uci::type::AccessEventFilterType& AccessEventFilterType::create(const uci::type::AccessEventFilterType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AccessEventFilterType> newAccessor{boost::make_unique<asb_uci::type::AccessEventFilterType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AccessEventFilterType::destroy(uci::type::AccessEventFilterType& accessor) {
  delete dynamic_cast<asb_uci::type::AccessEventFilterType*>(&accessor);
}

} // namespace type

} // namespace uci

