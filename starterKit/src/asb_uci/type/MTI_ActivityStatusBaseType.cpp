/** @file MTI_ActivityStatusBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MTI_ActivityStatusBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ConcurrentCollectionDetailsType.h"
#include "asb_uci/type/RelativeDirectionEnum.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ConcurrentCollectionDetailsType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DurationType.h"
#include "uci/type/MTI_ActivityStatusBaseType.h"
#include "uci/type/PercentType.h"
#include "uci/type/RelativeDirectionEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MTI_ActivityStatusBaseType::MTI_ActivityStatusBaseType()
  : concurrentActivity_Accessor{boost::make_unique<ConcurrentActivity>(0, SIZE_MAX)} {
}

MTI_ActivityStatusBaseType::~MTI_ActivityStatusBaseType() = default;

void MTI_ActivityStatusBaseType::copy(const uci::type::MTI_ActivityStatusBaseType& accessor) {
  copyImpl(accessor, false);
}

void MTI_ActivityStatusBaseType::copyImpl(const uci::type::MTI_ActivityStatusBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::mTI_ActivityStatusBaseType)) {
      const auto& accessorImpl = dynamic_cast<const MTI_ActivityStatusBaseType&>(accessor);
      if (accessorImpl.hasNumberOfTimesSearched()) {
        setNumberOfTimesSearched(accessorImpl.getNumberOfTimesSearched());
      } else {
        clearNumberOfTimesSearched();
      }
      if (accessorImpl.hasTimeLastSearched()) {
        setTimeLastSearched(accessorImpl.getTimeLastSearched());
      } else {
        clearTimeLastSearched();
      }
      if (accessorImpl.hasAttempts()) {
        setAttempts(accessorImpl.getAttempts());
      } else {
        clearAttempts();
      }
      if (accessorImpl.hasActualRevisitPeriod()) {
        setActualRevisitPeriod(accessorImpl.getActualRevisitPeriod());
      } else {
        clearActualRevisitPeriod();
      }
      if (accessorImpl.hasPercentageInFOR()) {
        setPercentageInFOR(accessorImpl.getPercentageInFOR());
      } else {
        clearPercentageInFOR();
      }
      if (accessorImpl.hasActualStartTime()) {
        setActualStartTime(accessorImpl.getActualStartTime());
      } else {
        clearActualStartTime();
      }
      if (accessorImpl.hasActualStopTime()) {
        setActualStopTime(accessorImpl.getActualStopTime());
      } else {
        clearActualStopTime();
      }
      if (accessorImpl.hasPercentSearched()) {
        setPercentSearched(accessorImpl.getPercentSearched());
      } else {
        clearPercentSearched();
      }
      if (accessorImpl.hasEntitiesReported()) {
        setEntitiesReported(accessorImpl.getEntitiesReported());
      } else {
        clearEntitiesReported();
      }
      if (accessorImpl.hasCueAcquired()) {
        setCueAcquired(accessorImpl.getCueAcquired());
      } else {
        clearCueAcquired();
      }
      setConcurrentActivity(*(accessorImpl.concurrentActivity_Accessor));
      if (accessorImpl.hasPercentOccluded()) {
        setPercentOccluded(accessorImpl.getPercentOccluded());
      } else {
        clearPercentOccluded();
      }
      if (accessorImpl.hasPercentRadarTimeline()) {
        setPercentRadarTimeline(accessorImpl.getPercentRadarTimeline());
      } else {
        clearPercentRadarTimeline();
      }
      if (accessorImpl.hasPercentageInFOV()) {
        setPercentageInFOV(accessorImpl.getPercentageInFOV());
      } else {
        clearPercentageInFOV();
      }
      if (accessorImpl.relativeDirectionOfTarget_Accessor) {
        setRelativeDirectionOfTarget(*(accessorImpl.relativeDirectionOfTarget_Accessor));
      } else {
        relativeDirectionOfTarget_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void MTI_ActivityStatusBaseType::reset() noexcept {
  clearNumberOfTimesSearched();
  clearTimeLastSearched();
  clearAttempts();
  clearActualRevisitPeriod();
  clearPercentageInFOR();
  clearActualStartTime();
  clearActualStopTime();
  clearPercentSearched();
  clearEntitiesReported();
  clearCueAcquired();
  concurrentActivity_Accessor->reset();
  clearPercentOccluded();
  clearPercentRadarTimeline();
  clearPercentageInFOV();
  relativeDirectionOfTarget_Accessor.reset();
}

xs::UnsignedInt MTI_ActivityStatusBaseType::getNumberOfTimesSearched() const {
  if (numberOfTimesSearched_Accessor) {
    return *numberOfTimesSearched_Accessor;
  }
  throw uci::base::UCIException("Error in getNumberOfTimesSearched(): An attempt was made to get an optional field that was not enabled, call hasNumberOfTimesSearched() to determine if it is safe to call getNumberOfTimesSearched()");
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setNumberOfTimesSearched(xs::UnsignedInt value) {
  numberOfTimesSearched_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusBaseType::hasNumberOfTimesSearched() const noexcept {
  return numberOfTimesSearched_Accessor.has_value();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearNumberOfTimesSearched() noexcept {
  numberOfTimesSearched_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue MTI_ActivityStatusBaseType::getTimeLastSearched() const {
  if (timeLastSearched_Accessor) {
    return *timeLastSearched_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeLastSearched(): An attempt was made to get an optional field that was not enabled, call hasTimeLastSearched() to determine if it is safe to call getTimeLastSearched()");
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setTimeLastSearched(uci::type::DateTimeTypeValue value) {
  timeLastSearched_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusBaseType::hasTimeLastSearched() const noexcept {
  return timeLastSearched_Accessor.has_value();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearTimeLastSearched() noexcept {
  timeLastSearched_Accessor.reset();
  return *this;
}

xs::UnsignedInt MTI_ActivityStatusBaseType::getAttempts() const {
  if (attempts_Accessor) {
    return *attempts_Accessor;
  }
  throw uci::base::UCIException("Error in getAttempts(): An attempt was made to get an optional field that was not enabled, call hasAttempts() to determine if it is safe to call getAttempts()");
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setAttempts(xs::UnsignedInt value) {
  attempts_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusBaseType::hasAttempts() const noexcept {
  return attempts_Accessor.has_value();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearAttempts() noexcept {
  attempts_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue MTI_ActivityStatusBaseType::getActualRevisitPeriod() const {
  if (actualRevisitPeriod_Accessor) {
    return *actualRevisitPeriod_Accessor;
  }
  throw uci::base::UCIException("Error in getActualRevisitPeriod(): An attempt was made to get an optional field that was not enabled, call hasActualRevisitPeriod() to determine if it is safe to call getActualRevisitPeriod()");
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setActualRevisitPeriod(uci::type::DurationTypeValue value) {
  actualRevisitPeriod_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusBaseType::hasActualRevisitPeriod() const noexcept {
  return actualRevisitPeriod_Accessor.has_value();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearActualRevisitPeriod() noexcept {
  actualRevisitPeriod_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue MTI_ActivityStatusBaseType::getPercentageInFOR() const {
  if (percentageInFOR_Accessor) {
    return *percentageInFOR_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentageInFOR(): An attempt was made to get an optional field that was not enabled, call hasPercentageInFOR() to determine if it is safe to call getPercentageInFOR()");
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setPercentageInFOR(uci::type::PercentTypeValue value) {
  percentageInFOR_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusBaseType::hasPercentageInFOR() const noexcept {
  return percentageInFOR_Accessor.has_value();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearPercentageInFOR() noexcept {
  percentageInFOR_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue MTI_ActivityStatusBaseType::getActualStartTime() const {
  if (actualStartTime_Accessor) {
    return *actualStartTime_Accessor;
  }
  throw uci::base::UCIException("Error in getActualStartTime(): An attempt was made to get an optional field that was not enabled, call hasActualStartTime() to determine if it is safe to call getActualStartTime()");
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setActualStartTime(uci::type::DateTimeTypeValue value) {
  actualStartTime_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusBaseType::hasActualStartTime() const noexcept {
  return actualStartTime_Accessor.has_value();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearActualStartTime() noexcept {
  actualStartTime_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue MTI_ActivityStatusBaseType::getActualStopTime() const {
  if (actualStopTime_Accessor) {
    return *actualStopTime_Accessor;
  }
  throw uci::base::UCIException("Error in getActualStopTime(): An attempt was made to get an optional field that was not enabled, call hasActualStopTime() to determine if it is safe to call getActualStopTime()");
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setActualStopTime(uci::type::DateTimeTypeValue value) {
  actualStopTime_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusBaseType::hasActualStopTime() const noexcept {
  return actualStopTime_Accessor.has_value();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearActualStopTime() noexcept {
  actualStopTime_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue MTI_ActivityStatusBaseType::getPercentSearched() const {
  if (percentSearched_Accessor) {
    return *percentSearched_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentSearched(): An attempt was made to get an optional field that was not enabled, call hasPercentSearched() to determine if it is safe to call getPercentSearched()");
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setPercentSearched(uci::type::PercentTypeValue value) {
  percentSearched_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusBaseType::hasPercentSearched() const noexcept {
  return percentSearched_Accessor.has_value();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearPercentSearched() noexcept {
  percentSearched_Accessor.reset();
  return *this;
}

xs::UnsignedInt MTI_ActivityStatusBaseType::getEntitiesReported() const {
  if (entitiesReported_Accessor) {
    return *entitiesReported_Accessor;
  }
  throw uci::base::UCIException("Error in getEntitiesReported(): An attempt was made to get an optional field that was not enabled, call hasEntitiesReported() to determine if it is safe to call getEntitiesReported()");
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setEntitiesReported(xs::UnsignedInt value) {
  entitiesReported_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusBaseType::hasEntitiesReported() const noexcept {
  return entitiesReported_Accessor.has_value();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearEntitiesReported() noexcept {
  entitiesReported_Accessor.reset();
  return *this;
}

xs::Boolean MTI_ActivityStatusBaseType::getCueAcquired() const {
  if (cueAcquired_Accessor) {
    return *cueAcquired_Accessor;
  }
  throw uci::base::UCIException("Error in getCueAcquired(): An attempt was made to get an optional field that was not enabled, call hasCueAcquired() to determine if it is safe to call getCueAcquired()");
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setCueAcquired(xs::Boolean value) {
  cueAcquired_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusBaseType::hasCueAcquired() const noexcept {
  return cueAcquired_Accessor.has_value();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearCueAcquired() noexcept {
  cueAcquired_Accessor.reset();
  return *this;
}

const uci::type::MTI_ActivityStatusBaseType::ConcurrentActivity& MTI_ActivityStatusBaseType::getConcurrentActivity() const {
  return *concurrentActivity_Accessor;
}

uci::type::MTI_ActivityStatusBaseType::ConcurrentActivity& MTI_ActivityStatusBaseType::getConcurrentActivity() {
  return *concurrentActivity_Accessor;
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setConcurrentActivity(const uci::type::MTI_ActivityStatusBaseType::ConcurrentActivity& accessor) {
  if (&accessor != concurrentActivity_Accessor.get()) {
    concurrentActivity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PercentTypeValue MTI_ActivityStatusBaseType::getPercentOccluded() const {
  if (percentOccluded_Accessor) {
    return *percentOccluded_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentOccluded(): An attempt was made to get an optional field that was not enabled, call hasPercentOccluded() to determine if it is safe to call getPercentOccluded()");
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setPercentOccluded(uci::type::PercentTypeValue value) {
  percentOccluded_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusBaseType::hasPercentOccluded() const noexcept {
  return percentOccluded_Accessor.has_value();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearPercentOccluded() noexcept {
  percentOccluded_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue MTI_ActivityStatusBaseType::getPercentRadarTimeline() const {
  if (percentRadarTimeline_Accessor) {
    return *percentRadarTimeline_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentRadarTimeline(): An attempt was made to get an optional field that was not enabled, call hasPercentRadarTimeline() to determine if it is safe to call getPercentRadarTimeline()");
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setPercentRadarTimeline(uci::type::PercentTypeValue value) {
  percentRadarTimeline_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusBaseType::hasPercentRadarTimeline() const noexcept {
  return percentRadarTimeline_Accessor.has_value();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearPercentRadarTimeline() noexcept {
  percentRadarTimeline_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue MTI_ActivityStatusBaseType::getPercentageInFOV() const {
  if (percentageInFOV_Accessor) {
    return *percentageInFOV_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentageInFOV(): An attempt was made to get an optional field that was not enabled, call hasPercentageInFOV() to determine if it is safe to call getPercentageInFOV()");
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setPercentageInFOV(uci::type::PercentTypeValue value) {
  percentageInFOV_Accessor = value;
  return *this;
}

bool MTI_ActivityStatusBaseType::hasPercentageInFOV() const noexcept {
  return percentageInFOV_Accessor.has_value();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearPercentageInFOV() noexcept {
  percentageInFOV_Accessor.reset();
  return *this;
}

uci::type::RelativeDirectionEnum& MTI_ActivityStatusBaseType::getRelativeDirectionOfTarget_() const {
  if (relativeDirectionOfTarget_Accessor) {
    return *relativeDirectionOfTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeDirectionOfTarget(): An attempt was made to get an optional field that was not enabled, call hasRelativeDirectionOfTarget() to determine if it is safe to call getRelativeDirectionOfTarget()");
}

const uci::type::RelativeDirectionEnum& MTI_ActivityStatusBaseType::getRelativeDirectionOfTarget() const {
  return getRelativeDirectionOfTarget_();
}

uci::type::RelativeDirectionEnum& MTI_ActivityStatusBaseType::getRelativeDirectionOfTarget() {
  return getRelativeDirectionOfTarget_();
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setRelativeDirectionOfTarget(const uci::type::RelativeDirectionEnum& accessor) {
  enableRelativeDirectionOfTarget();
  if (&accessor != relativeDirectionOfTarget_Accessor.get()) {
    relativeDirectionOfTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::setRelativeDirectionOfTarget(const uci::type::RelativeDirectionEnum::EnumerationItem value) {
  enableRelativeDirectionOfTarget().setValue(value);
  return *this;
}

bool MTI_ActivityStatusBaseType::hasRelativeDirectionOfTarget() const noexcept {
  return static_cast<bool>(relativeDirectionOfTarget_Accessor);
}

uci::type::RelativeDirectionEnum& MTI_ActivityStatusBaseType::enableRelativeDirectionOfTarget(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativeDirectionEnum : type};
  if ((!relativeDirectionOfTarget_Accessor) || (relativeDirectionOfTarget_Accessor->getAccessorType() != requestedType)) {
    relativeDirectionOfTarget_Accessor = RelativeDirectionEnum::create(requestedType);
    if (!relativeDirectionOfTarget_Accessor) {
      throw uci::base::UCIException("Error in enableRelativeDirectionOfTarget(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativeDirectionOfTarget_Accessor;
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::clearRelativeDirectionOfTarget() noexcept {
  relativeDirectionOfTarget_Accessor.reset();
  return *this;
}

std::unique_ptr<MTI_ActivityStatusBaseType> MTI_ActivityStatusBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mTI_ActivityStatusBaseType : type};
  return std::unique_ptr<MTI_ActivityStatusBaseType>(dynamic_cast<MTI_ActivityStatusBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace MTI_ActivityStatusBaseType_Names {

constexpr const char* Extern_Type_Name{"MTI_ActivityStatusBaseType"};
constexpr const char* NumberOfTimesSearched_Name{"NumberOfTimesSearched"};
constexpr const char* TimeLastSearched_Name{"TimeLastSearched"};
constexpr const char* Attempts_Name{"Attempts"};
constexpr const char* ActualRevisitPeriod_Name{"ActualRevisitPeriod"};
constexpr const char* PercentageInFOR_Name{"PercentageInFOR"};
constexpr const char* ActualStartTime_Name{"ActualStartTime"};
constexpr const char* ActualStopTime_Name{"ActualStopTime"};
constexpr const char* PercentSearched_Name{"PercentSearched"};
constexpr const char* EntitiesReported_Name{"EntitiesReported"};
constexpr const char* CueAcquired_Name{"CueAcquired"};
constexpr const char* ConcurrentActivity_Name{"ConcurrentActivity"};
constexpr const char* PercentOccluded_Name{"PercentOccluded"};
constexpr const char* PercentRadarTimeline_Name{"PercentRadarTimeline"};
constexpr const char* PercentageInFOV_Name{"PercentageInFOV"};
constexpr const char* RelativeDirectionOfTarget_Name{"RelativeDirectionOfTarget"};

} // namespace MTI_ActivityStatusBaseType_Names

void MTI_ActivityStatusBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MTI_ActivityStatusBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MTI_ActivityStatusBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::NumberOfTimesSearched_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfTimesSearched(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::TimeLastSearched_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeLastSearched(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::Attempts_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAttempts(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::ActualRevisitPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualRevisitPeriod(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::PercentageInFOR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentageInFOR(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::ActualStartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStartTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::ActualStopTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStopTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::PercentSearched_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentSearched(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::EntitiesReported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEntitiesReported(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::CueAcquired_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCueAcquired(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::ConcurrentActivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MTI_ActivityStatusBaseType::ConcurrentActivity& boundedList = accessor.getConcurrentActivity();
        const uci::type::MTI_ActivityStatusBaseType::ConcurrentActivity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ConcurrentCollectionDetailsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::PercentOccluded_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentOccluded(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::PercentRadarTimeline_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentRadarTimeline(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::PercentageInFOV_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentageInFOV(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::RelativeDirectionOfTarget_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRelativeDirectionOfTarget().setValueFromName(*value);
      }
    }
  }
}

std::string MTI_ActivityStatusBaseType::serialize(const uci::type::MTI_ActivityStatusBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MTI_ActivityStatusBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::mTI_ActivityStatusBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, MTI_ActivityStatusBaseType_Names::Extern_Type_Name);
    }
    if (accessor.hasNumberOfTimesSearched()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumberOfTimesSearched(), node, MTI_ActivityStatusBaseType_Names::NumberOfTimesSearched_Name);
    }
    if (accessor.hasTimeLastSearched()) {
      asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimeLastSearched(), node, MTI_ActivityStatusBaseType_Names::TimeLastSearched_Name);
    }
    if (accessor.hasAttempts()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAttempts(), node, MTI_ActivityStatusBaseType_Names::Attempts_Name);
    }
    if (accessor.hasActualRevisitPeriod()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getActualRevisitPeriod(), node, MTI_ActivityStatusBaseType_Names::ActualRevisitPeriod_Name);
    }
    if (accessor.hasPercentageInFOR()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentageInFOR(), node, MTI_ActivityStatusBaseType_Names::PercentageInFOR_Name);
    }
    if (accessor.hasActualStartTime()) {
      asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStartTime(), node, MTI_ActivityStatusBaseType_Names::ActualStartTime_Name);
    }
    if (accessor.hasActualStopTime()) {
      asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStopTime(), node, MTI_ActivityStatusBaseType_Names::ActualStopTime_Name);
    }
    if (accessor.hasPercentSearched()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentSearched(), node, MTI_ActivityStatusBaseType_Names::PercentSearched_Name);
    }
    if (accessor.hasEntitiesReported()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getEntitiesReported(), node, MTI_ActivityStatusBaseType_Names::EntitiesReported_Name);
    }
    if (accessor.hasCueAcquired()) {
      asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getCueAcquired(), node, MTI_ActivityStatusBaseType_Names::CueAcquired_Name);
    }
    {
      const uci::type::MTI_ActivityStatusBaseType::ConcurrentActivity& boundedList = accessor.getConcurrentActivity();
      for (uci::type::MTI_ActivityStatusBaseType::ConcurrentActivity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ConcurrentCollectionDetailsType::serialize(boundedList.at(i), node, MTI_ActivityStatusBaseType_Names::ConcurrentActivity_Name);
      }
    }
    if (accessor.hasPercentOccluded()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentOccluded(), node, MTI_ActivityStatusBaseType_Names::PercentOccluded_Name);
    }
    if (accessor.hasPercentRadarTimeline()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentRadarTimeline(), node, MTI_ActivityStatusBaseType_Names::PercentRadarTimeline_Name);
    }
    if (accessor.hasPercentageInFOV()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentageInFOV(), node, MTI_ActivityStatusBaseType_Names::PercentageInFOV_Name);
    }
    if (accessor.hasRelativeDirectionOfTarget()) {
      RelativeDirectionEnum::serialize(accessor.getRelativeDirectionOfTarget(), node, MTI_ActivityStatusBaseType_Names::RelativeDirectionOfTarget_Name, false);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MTI_ActivityStatusBaseType>().release());
}

uci::type::MTI_ActivityStatusBaseType& MTI_ActivityStatusBaseType::create(const uci::type::MTI_ActivityStatusBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MTI_ActivityStatusBaseType> newAccessor{boost::make_unique<asb_uci::type::MTI_ActivityStatusBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MTI_ActivityStatusBaseType::destroy(uci::type::MTI_ActivityStatusBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::MTI_ActivityStatusBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

