/** @file OpConstraintWeightingType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OpConstraintWeightingType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/FileLocationID_Type.h"
#include "asb_uci/type/OpConstraintEnum.h"
#include "asb_uci/type/OpConstraintTypeEnum.h"
#include "asb_uci/type/OpConstraintWeightingValueType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/FileLocationID_Type.h"
#include "uci/type/OpConstraintEnum.h"
#include "uci/type/OpConstraintTypeEnum.h"
#include "uci/type/OpConstraintWeightingType.h"
#include "uci/type/OpConstraintWeightingValueType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpConstraintWeightingType::OpConstraintWeightingType()
  : constraint_Accessor{boost::make_unique<OpConstraintEnum>()},
    constraintType_Accessor{boost::make_unique<OpConstraintTypeEnum>()},
    weighting_Accessor{boost::make_unique<OpConstraintWeightingValueType>()} {
}

OpConstraintWeightingType::~OpConstraintWeightingType() = default;

void OpConstraintWeightingType::copy(const uci::type::OpConstraintWeightingType& accessor) {
  copyImpl(accessor, false);
}

void OpConstraintWeightingType::copyImpl(const uci::type::OpConstraintWeightingType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OpConstraintWeightingType&>(accessor);
    setConstraint(*(accessorImpl.constraint_Accessor));
    setConstraintType(*(accessorImpl.constraintType_Accessor));
    setWeighting(*(accessorImpl.weighting_Accessor));
    if (accessorImpl.amplificationID_Accessor) {
      setAmplificationID(*(accessorImpl.amplificationID_Accessor));
    } else {
      amplificationID_Accessor.reset();
    }
  }
}

void OpConstraintWeightingType::reset() noexcept {
  constraint_Accessor->reset();
  constraintType_Accessor->reset();
  weighting_Accessor->reset();
  amplificationID_Accessor.reset();
}

const uci::type::OpConstraintEnum& OpConstraintWeightingType::getConstraint() const {
  return *constraint_Accessor;
}

uci::type::OpConstraintEnum& OpConstraintWeightingType::getConstraint() {
  return *constraint_Accessor;
}

uci::type::OpConstraintWeightingType& OpConstraintWeightingType::setConstraint(const uci::type::OpConstraintEnum& accessor) {
  if (&accessor != constraint_Accessor.get()) {
    constraint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpConstraintWeightingType& OpConstraintWeightingType::setConstraint(uci::type::OpConstraintEnum::EnumerationItem value) {
  constraint_Accessor->setValue(value);
  return *this;
}


const uci::type::OpConstraintTypeEnum& OpConstraintWeightingType::getConstraintType() const {
  return *constraintType_Accessor;
}

uci::type::OpConstraintTypeEnum& OpConstraintWeightingType::getConstraintType() {
  return *constraintType_Accessor;
}

uci::type::OpConstraintWeightingType& OpConstraintWeightingType::setConstraintType(const uci::type::OpConstraintTypeEnum& accessor) {
  if (&accessor != constraintType_Accessor.get()) {
    constraintType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpConstraintWeightingType& OpConstraintWeightingType::setConstraintType(uci::type::OpConstraintTypeEnum::EnumerationItem value) {
  constraintType_Accessor->setValue(value);
  return *this;
}


const uci::type::OpConstraintWeightingValueType& OpConstraintWeightingType::getWeighting() const {
  return *weighting_Accessor;
}

uci::type::OpConstraintWeightingValueType& OpConstraintWeightingType::getWeighting() {
  return *weighting_Accessor;
}

uci::type::OpConstraintWeightingType& OpConstraintWeightingType::setWeighting(const uci::type::OpConstraintWeightingValueType& accessor) {
  if (&accessor != weighting_Accessor.get()) {
    weighting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FileLocationID_Type& OpConstraintWeightingType::getAmplificationID_() const {
  if (amplificationID_Accessor) {
    return *amplificationID_Accessor;
  }
  throw uci::base::UCIException("Error in getAmplificationID(): An attempt was made to get an optional field that was not enabled, call hasAmplificationID() to determine if it is safe to call getAmplificationID()");
}

const uci::type::FileLocationID_Type& OpConstraintWeightingType::getAmplificationID() const {
  return getAmplificationID_();
}

uci::type::FileLocationID_Type& OpConstraintWeightingType::getAmplificationID() {
  return getAmplificationID_();
}

uci::type::OpConstraintWeightingType& OpConstraintWeightingType::setAmplificationID(const uci::type::FileLocationID_Type& accessor) {
  enableAmplificationID();
  if (&accessor != amplificationID_Accessor.get()) {
    amplificationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpConstraintWeightingType::hasAmplificationID() const noexcept {
  return static_cast<bool>(amplificationID_Accessor);
}

uci::type::FileLocationID_Type& OpConstraintWeightingType::enableAmplificationID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileLocationID_Type : type};
  if ((!amplificationID_Accessor) || (amplificationID_Accessor->getAccessorType() != requestedType)) {
    amplificationID_Accessor = FileLocationID_Type::create(requestedType);
    if (!amplificationID_Accessor) {
      throw uci::base::UCIException("Error in enableAmplificationID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *amplificationID_Accessor;
}

uci::type::OpConstraintWeightingType& OpConstraintWeightingType::clearAmplificationID() noexcept {
  amplificationID_Accessor.reset();
  return *this;
}

std::unique_ptr<OpConstraintWeightingType> OpConstraintWeightingType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opConstraintWeightingType : type};
  return (requestedType == uci::type::accessorType::opConstraintWeightingType) ? boost::make_unique<OpConstraintWeightingType>() : nullptr;
}

/**  */
namespace OpConstraintWeightingType_Names {

constexpr const char* Extern_Type_Name{"OpConstraintWeightingType"};
constexpr const char* Constraint_Name{"Constraint"};
constexpr const char* ConstraintType_Name{"ConstraintType"};
constexpr const char* Weighting_Name{"Weighting"};
constexpr const char* AmplificationID_Name{"AmplificationID"};

} // namespace OpConstraintWeightingType_Names

void OpConstraintWeightingType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpConstraintWeightingType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpConstraintWeightingType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpConstraintWeightingType_Names::Constraint_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getConstraint().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OpConstraintWeightingType_Names::ConstraintType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getConstraintType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OpConstraintWeightingType_Names::Weighting_Name) {
      OpConstraintWeightingValueType::deserialize(valueType.second, accessor.getWeighting(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpConstraintWeightingType_Names::AmplificationID_Name) {
      FileLocationID_Type::deserialize(valueType.second, accessor.enableAmplificationID(), nodeName, nsPrefix);
    }
  }
}

std::string OpConstraintWeightingType::serialize(const uci::type::OpConstraintWeightingType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpConstraintWeightingType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpConstraintWeightingType_Names::Extern_Type_Name);
  }
  OpConstraintEnum::serialize(accessor.getConstraint(), node, OpConstraintWeightingType_Names::Constraint_Name, false);
  OpConstraintTypeEnum::serialize(accessor.getConstraintType(), node, OpConstraintWeightingType_Names::ConstraintType_Name, false);
  OpConstraintWeightingValueType::serialize(accessor.getWeighting(), node, OpConstraintWeightingType_Names::Weighting_Name);
  if (accessor.hasAmplificationID()) {
    FileLocationID_Type::serialize(accessor.getAmplificationID(), node, OpConstraintWeightingType_Names::AmplificationID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OpConstraintWeightingType& OpConstraintWeightingType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OpConstraintWeightingType>().release());
}

uci::type::OpConstraintWeightingType& OpConstraintWeightingType::create(const uci::type::OpConstraintWeightingType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OpConstraintWeightingType> newAccessor{boost::make_unique<asb_uci::type::OpConstraintWeightingType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OpConstraintWeightingType::destroy(uci::type::OpConstraintWeightingType& accessor) {
  delete dynamic_cast<asb_uci::type::OpConstraintWeightingType*>(&accessor);
}

} // namespace type

} // namespace uci

