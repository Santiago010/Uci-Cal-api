/** @file CommCDL_ControlType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommCDL_ControlType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommCDL_RemoteMessageProcessingEnum.h"
#include "asb_uci/type/DataPortType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommCDL_ControlType.h"
#include "uci/type/CommCDL_RemoteMessageProcessingEnum.h"
#include "uci/type/DataPortType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommCDL_ControlType::CommCDL_ControlType() = default;

CommCDL_ControlType::~CommCDL_ControlType() = default;

void CommCDL_ControlType::copy(const uci::type::CommCDL_ControlType& accessor) {
  copyImpl(accessor, false);
}

void CommCDL_ControlType::copyImpl(const uci::type::CommCDL_ControlType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommCDL_ControlType&>(accessor);
    if (accessorImpl.hasLinkChannelPriority()) {
      setLinkChannelPriority(accessorImpl.getLinkChannelPriority());
    } else {
      clearLinkChannelPriority();
    }
    if (accessorImpl.rF_CommandProcessing_Accessor) {
      setRF_CommandProcessing(*(accessorImpl.rF_CommandProcessing_Accessor));
    } else {
      rF_CommandProcessing_Accessor.reset();
    }
    if (accessorImpl.hasUDP_MonitorPeriod()) {
      setUDP_MonitorPeriod(accessorImpl.getUDP_MonitorPeriod());
    } else {
      clearUDP_MonitorPeriod();
    }
    if (accessorImpl.lAN_PortSettings_Accessor) {
      setLAN_PortSettings(*(accessorImpl.lAN_PortSettings_Accessor));
    } else {
      lAN_PortSettings_Accessor.reset();
    }
  }
}

void CommCDL_ControlType::reset() noexcept {
  clearLinkChannelPriority();
  rF_CommandProcessing_Accessor.reset();
  clearUDP_MonitorPeriod();
  lAN_PortSettings_Accessor.reset();
}

xs::UnsignedByte CommCDL_ControlType::getLinkChannelPriority() const {
  if (linkChannelPriority_Accessor) {
    return *linkChannelPriority_Accessor;
  }
  throw uci::base::UCIException("Error in getLinkChannelPriority(): An attempt was made to get an optional field that was not enabled, call hasLinkChannelPriority() to determine if it is safe to call getLinkChannelPriority()");
}

uci::type::CommCDL_ControlType& CommCDL_ControlType::setLinkChannelPriority(xs::UnsignedByte value) {
  linkChannelPriority_Accessor = value;
  return *this;
}

bool CommCDL_ControlType::hasLinkChannelPriority() const noexcept {
  return linkChannelPriority_Accessor.has_value();
}

uci::type::CommCDL_ControlType& CommCDL_ControlType::clearLinkChannelPriority() noexcept {
  linkChannelPriority_Accessor.reset();
  return *this;
}

uci::type::CommCDL_RemoteMessageProcessingEnum& CommCDL_ControlType::getRF_CommandProcessing_() const {
  if (rF_CommandProcessing_Accessor) {
    return *rF_CommandProcessing_Accessor;
  }
  throw uci::base::UCIException("Error in getRF_CommandProcessing(): An attempt was made to get an optional field that was not enabled, call hasRF_CommandProcessing() to determine if it is safe to call getRF_CommandProcessing()");
}

const uci::type::CommCDL_RemoteMessageProcessingEnum& CommCDL_ControlType::getRF_CommandProcessing() const {
  return getRF_CommandProcessing_();
}

uci::type::CommCDL_RemoteMessageProcessingEnum& CommCDL_ControlType::getRF_CommandProcessing() {
  return getRF_CommandProcessing_();
}

uci::type::CommCDL_ControlType& CommCDL_ControlType::setRF_CommandProcessing(const uci::type::CommCDL_RemoteMessageProcessingEnum& accessor) {
  enableRF_CommandProcessing();
  if (&accessor != rF_CommandProcessing_Accessor.get()) {
    rF_CommandProcessing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommCDL_ControlType& CommCDL_ControlType::setRF_CommandProcessing(const uci::type::CommCDL_RemoteMessageProcessingEnum::EnumerationItem value) {
  enableRF_CommandProcessing().setValue(value);
  return *this;
}

bool CommCDL_ControlType::hasRF_CommandProcessing() const noexcept {
  return static_cast<bool>(rF_CommandProcessing_Accessor);
}

uci::type::CommCDL_RemoteMessageProcessingEnum& CommCDL_ControlType::enableRF_CommandProcessing(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commCDL_RemoteMessageProcessingEnum : type};
  if ((!rF_CommandProcessing_Accessor) || (rF_CommandProcessing_Accessor->getAccessorType() != requestedType)) {
    rF_CommandProcessing_Accessor = CommCDL_RemoteMessageProcessingEnum::create(requestedType);
    if (!rF_CommandProcessing_Accessor) {
      throw uci::base::UCIException("Error in enableRF_CommandProcessing(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rF_CommandProcessing_Accessor;
}

uci::type::CommCDL_ControlType& CommCDL_ControlType::clearRF_CommandProcessing() noexcept {
  rF_CommandProcessing_Accessor.reset();
  return *this;
}

xs::UnsignedByte CommCDL_ControlType::getUDP_MonitorPeriod() const {
  if (uDP_MonitorPeriod_Accessor) {
    return *uDP_MonitorPeriod_Accessor;
  }
  throw uci::base::UCIException("Error in getUDP_MonitorPeriod(): An attempt was made to get an optional field that was not enabled, call hasUDP_MonitorPeriod() to determine if it is safe to call getUDP_MonitorPeriod()");
}

uci::type::CommCDL_ControlType& CommCDL_ControlType::setUDP_MonitorPeriod(xs::UnsignedByte value) {
  uDP_MonitorPeriod_Accessor = value;
  return *this;
}

bool CommCDL_ControlType::hasUDP_MonitorPeriod() const noexcept {
  return uDP_MonitorPeriod_Accessor.has_value();
}

uci::type::CommCDL_ControlType& CommCDL_ControlType::clearUDP_MonitorPeriod() noexcept {
  uDP_MonitorPeriod_Accessor.reset();
  return *this;
}

uci::type::DataPortType& CommCDL_ControlType::getLAN_PortSettings_() const {
  if (lAN_PortSettings_Accessor) {
    return *lAN_PortSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getLAN_PortSettings(): An attempt was made to get an optional field that was not enabled, call hasLAN_PortSettings() to determine if it is safe to call getLAN_PortSettings()");
}

const uci::type::DataPortType& CommCDL_ControlType::getLAN_PortSettings() const {
  return getLAN_PortSettings_();
}

uci::type::DataPortType& CommCDL_ControlType::getLAN_PortSettings() {
  return getLAN_PortSettings_();
}

uci::type::CommCDL_ControlType& CommCDL_ControlType::setLAN_PortSettings(const uci::type::DataPortType& accessor) {
  enableLAN_PortSettings();
  if (&accessor != lAN_PortSettings_Accessor.get()) {
    lAN_PortSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommCDL_ControlType::hasLAN_PortSettings() const noexcept {
  return static_cast<bool>(lAN_PortSettings_Accessor);
}

uci::type::DataPortType& CommCDL_ControlType::enableLAN_PortSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataPortType : type};
  if ((!lAN_PortSettings_Accessor) || (lAN_PortSettings_Accessor->getAccessorType() != requestedType)) {
    lAN_PortSettings_Accessor = DataPortType::create(requestedType);
    if (!lAN_PortSettings_Accessor) {
      throw uci::base::UCIException("Error in enableLAN_PortSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lAN_PortSettings_Accessor;
}

uci::type::CommCDL_ControlType& CommCDL_ControlType::clearLAN_PortSettings() noexcept {
  lAN_PortSettings_Accessor.reset();
  return *this;
}

std::unique_ptr<CommCDL_ControlType> CommCDL_ControlType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commCDL_ControlType : type};
  return (requestedType == uci::type::accessorType::commCDL_ControlType) ? boost::make_unique<CommCDL_ControlType>() : nullptr;
}

/**  */
namespace CommCDL_ControlType_Names {

constexpr const char* Extern_Type_Name{"CommCDL_ControlType"};
constexpr const char* LinkChannelPriority_Name{"LinkChannelPriority"};
constexpr const char* RF_CommandProcessing_Name{"RF_CommandProcessing"};
constexpr const char* UDP_MonitorPeriod_Name{"UDP_MonitorPeriod"};
constexpr const char* LAN_PortSettings_Name{"LAN_PortSettings"};

} // namespace CommCDL_ControlType_Names

void CommCDL_ControlType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommCDL_ControlType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommCDL_ControlType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommCDL_ControlType_Names::LinkChannelPriority_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLinkChannelPriority(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommCDL_ControlType_Names::RF_CommandProcessing_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRF_CommandProcessing().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommCDL_ControlType_Names::UDP_MonitorPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUDP_MonitorPeriod(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommCDL_ControlType_Names::LAN_PortSettings_Name) {
      DataPortType::deserialize(valueType.second, accessor.enableLAN_PortSettings(), nodeName, nsPrefix);
    }
  }
}

std::string CommCDL_ControlType::serialize(const uci::type::CommCDL_ControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommCDL_ControlType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommCDL_ControlType_Names::Extern_Type_Name);
  }
  if (accessor.hasLinkChannelPriority()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getLinkChannelPriority(), node, CommCDL_ControlType_Names::LinkChannelPriority_Name);
  }
  if (accessor.hasRF_CommandProcessing()) {
    CommCDL_RemoteMessageProcessingEnum::serialize(accessor.getRF_CommandProcessing(), node, CommCDL_ControlType_Names::RF_CommandProcessing_Name, false);
  }
  if (accessor.hasUDP_MonitorPeriod()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getUDP_MonitorPeriod(), node, CommCDL_ControlType_Names::UDP_MonitorPeriod_Name);
  }
  if (accessor.hasLAN_PortSettings()) {
    DataPortType::serialize(accessor.getLAN_PortSettings(), node, CommCDL_ControlType_Names::LAN_PortSettings_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommCDL_ControlType& CommCDL_ControlType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommCDL_ControlType>().release());
}

uci::type::CommCDL_ControlType& CommCDL_ControlType::create(const uci::type::CommCDL_ControlType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommCDL_ControlType> newAccessor{boost::make_unique<asb_uci::type::CommCDL_ControlType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommCDL_ControlType::destroy(uci::type::CommCDL_ControlType& accessor) {
  delete dynamic_cast<asb_uci::type::CommCDL_ControlType*>(&accessor);
}

} // namespace type

} // namespace uci

