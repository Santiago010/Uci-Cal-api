/** @file ATR_ProcessingParametersType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ATR_ProcessingParametersType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityIdentityType.h"
#include "asb_uci/type/MDF_CommandType.h"
#include "asb_uci/type/ProcessingParametersPET.h"
#include "asb_uci/type/ProductOutputType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ATR_ProcessingParametersType.h"
#include "uci/type/EntityIdentityType.h"
#include "uci/type/MDF_CommandType.h"
#include "uci/type/ProductOutputType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ATR_ProcessingParametersType::ATR_ProcessingParametersType()
  : findTarget_Accessor{boost::make_unique<FindTarget>(1, SIZE_MAX)},
    productOutput_Accessor{boost::make_unique<ProductOutput>(0, SIZE_MAX)} {
}

ATR_ProcessingParametersType::~ATR_ProcessingParametersType() = default;

void ATR_ProcessingParametersType::copy(const uci::type::ATR_ProcessingParametersType& accessor) {
  copyImpl(accessor, false);
}

void ATR_ProcessingParametersType::copyImpl(const uci::type::ATR_ProcessingParametersType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ProcessingParametersPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ATR_ProcessingParametersType&>(accessor);
    setFindTarget(*(accessorImpl.findTarget_Accessor));
    setProductOutput(*(accessorImpl.productOutput_Accessor));
    if (accessorImpl.use_MDF_Accessor) {
      setUse_MDF(*(accessorImpl.use_MDF_Accessor));
    } else {
      use_MDF_Accessor.reset();
    }
  }
}

void ATR_ProcessingParametersType::reset() noexcept {
  ProcessingParametersPET::reset();
  findTarget_Accessor->reset();
  productOutput_Accessor->reset();
  use_MDF_Accessor.reset();
}

const uci::type::ATR_ProcessingParametersType::FindTarget& ATR_ProcessingParametersType::getFindTarget() const {
  return *findTarget_Accessor;
}

uci::type::ATR_ProcessingParametersType::FindTarget& ATR_ProcessingParametersType::getFindTarget() {
  return *findTarget_Accessor;
}

uci::type::ATR_ProcessingParametersType& ATR_ProcessingParametersType::setFindTarget(const uci::type::ATR_ProcessingParametersType::FindTarget& accessor) {
  if (&accessor != findTarget_Accessor.get()) {
    findTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ATR_ProcessingParametersType::ProductOutput& ATR_ProcessingParametersType::getProductOutput() const {
  return *productOutput_Accessor;
}

uci::type::ATR_ProcessingParametersType::ProductOutput& ATR_ProcessingParametersType::getProductOutput() {
  return *productOutput_Accessor;
}

uci::type::ATR_ProcessingParametersType& ATR_ProcessingParametersType::setProductOutput(const uci::type::ATR_ProcessingParametersType::ProductOutput& accessor) {
  if (&accessor != productOutput_Accessor.get()) {
    productOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MDF_CommandType& ATR_ProcessingParametersType::getUse_MDF_() const {
  if (use_MDF_Accessor) {
    return *use_MDF_Accessor;
  }
  throw uci::base::UCIException("Error in getUse_MDF(): An attempt was made to get an optional field that was not enabled, call hasUse_MDF() to determine if it is safe to call getUse_MDF()");
}

const uci::type::MDF_CommandType& ATR_ProcessingParametersType::getUse_MDF() const {
  return getUse_MDF_();
}

uci::type::MDF_CommandType& ATR_ProcessingParametersType::getUse_MDF() {
  return getUse_MDF_();
}

uci::type::ATR_ProcessingParametersType& ATR_ProcessingParametersType::setUse_MDF(const uci::type::MDF_CommandType& accessor) {
  enableUse_MDF();
  if (&accessor != use_MDF_Accessor.get()) {
    use_MDF_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ATR_ProcessingParametersType::hasUse_MDF() const noexcept {
  return static_cast<bool>(use_MDF_Accessor);
}

uci::type::MDF_CommandType& ATR_ProcessingParametersType::enableUse_MDF(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mDF_CommandType : type};
  if ((!use_MDF_Accessor) || (use_MDF_Accessor->getAccessorType() != requestedType)) {
    use_MDF_Accessor = MDF_CommandType::create(requestedType);
    if (!use_MDF_Accessor) {
      throw uci::base::UCIException("Error in enableUse_MDF(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *use_MDF_Accessor;
}

uci::type::ATR_ProcessingParametersType& ATR_ProcessingParametersType::clearUse_MDF() noexcept {
  use_MDF_Accessor.reset();
  return *this;
}

std::unique_ptr<ATR_ProcessingParametersType> ATR_ProcessingParametersType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aTR_ProcessingParametersType : type};
  return (requestedType == uci::type::accessorType::aTR_ProcessingParametersType) ? boost::make_unique<ATR_ProcessingParametersType>() : nullptr;
}

/**  */
namespace ATR_ProcessingParametersType_Names {

constexpr const char* Extern_Type_Name{"ATR_ProcessingParametersType"};
constexpr const char* FindTarget_Name{"FindTarget"};
constexpr const char* ProductOutput_Name{"ProductOutput"};
constexpr const char* Use_MDF_Name{"Use_MDF"};

} // namespace ATR_ProcessingParametersType_Names

void ATR_ProcessingParametersType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ATR_ProcessingParametersType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ATR_ProcessingParametersType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ATR_ProcessingParametersType_Names::FindTarget_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ATR_ProcessingParametersType::FindTarget& boundedList = accessor.getFindTarget();
        const uci::type::ATR_ProcessingParametersType::FindTarget::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EntityIdentityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ATR_ProcessingParametersType_Names::ProductOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ATR_ProcessingParametersType::ProductOutput& boundedList = accessor.getProductOutput();
        const uci::type::ATR_ProcessingParametersType::ProductOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ATR_ProcessingParametersType_Names::Use_MDF_Name) {
      MDF_CommandType::deserialize(valueType.second, accessor.enableUse_MDF(), nodeName, nsPrefix);
    }
  }
  ProcessingParametersPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ATR_ProcessingParametersType::serialize(const uci::type::ATR_ProcessingParametersType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ATR_ProcessingParametersType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ATR_ProcessingParametersType_Names::Extern_Type_Name);
  }
  ProcessingParametersPET::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::ATR_ProcessingParametersType::FindTarget& boundedList = accessor.getFindTarget();
    for (uci::type::ATR_ProcessingParametersType::FindTarget::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EntityIdentityType::serialize(boundedList.at(i), node, ATR_ProcessingParametersType_Names::FindTarget_Name);
    }
  }
  {
    const uci::type::ATR_ProcessingParametersType::ProductOutput& boundedList = accessor.getProductOutput();
    for (uci::type::ATR_ProcessingParametersType::ProductOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductOutputType::serialize(boundedList.at(i), node, ATR_ProcessingParametersType_Names::ProductOutput_Name);
    }
  }
  if (accessor.hasUse_MDF()) {
    MDF_CommandType::serialize(accessor.getUse_MDF(), node, ATR_ProcessingParametersType_Names::Use_MDF_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ATR_ProcessingParametersType& ATR_ProcessingParametersType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ATR_ProcessingParametersType>().release());
}

uci::type::ATR_ProcessingParametersType& ATR_ProcessingParametersType::create(const uci::type::ATR_ProcessingParametersType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ATR_ProcessingParametersType> newAccessor{boost::make_unique<asb_uci::type::ATR_ProcessingParametersType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ATR_ProcessingParametersType::destroy(uci::type::ATR_ProcessingParametersType& accessor) {
  delete dynamic_cast<asb_uci::type::ATR_ProcessingParametersType*>(&accessor);
}

} // namespace type

} // namespace uci

