/** @file DisseminationProductType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DisseminationProductType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DisseminationByType.h"
#include "../../../include/asb_uci/type/ProductReferenceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DisseminationByType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DisseminationProductType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductReferenceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DisseminationProductType::DisseminationProductType() = default;

DisseminationProductType::~DisseminationProductType() = default;

void DisseminationProductType::copy(const uci::type::DisseminationProductType& accessor) {
  copyImpl(accessor, false);
}

void DisseminationProductType::copyImpl(const uci::type::DisseminationProductType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DisseminationProductType&>(accessor);
    if (accessorImpl.byReference_Accessor) {
      setByReference(*(accessorImpl.byReference_Accessor));
    } else {
      byReference_Accessor.reset();
    }
    if (accessorImpl.byType_Accessor) {
      setByType(*(accessorImpl.byType_Accessor));
    } else {
      byType_Accessor.reset();
    }
  }
}

void DisseminationProductType::reset() noexcept {
  byReference_Accessor.reset();
  byType_Accessor.reset();
}

uci::type::DisseminationProductType::DisseminationProductTypeChoice DisseminationProductType::getDisseminationProductTypeChoiceOrdinal() const noexcept {
  if (byReference_Accessor) {
    return DISSEMINATIONPRODUCTTYPE_CHOICE_BYREFERENCE;
  }
  if (byType_Accessor) {
    return DISSEMINATIONPRODUCTTYPE_CHOICE_BYTYPE;
  }
  return DISSEMINATIONPRODUCTTYPE_CHOICE_NONE;
}

uci::type::DisseminationProductType& DisseminationProductType::setDisseminationProductTypeChoiceOrdinal(uci::type::DisseminationProductType::DisseminationProductTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case DISSEMINATIONPRODUCTTYPE_CHOICE_BYREFERENCE:
      chooseByReference("setDisseminationProductTypeChoiceOrdinal", type);
      break;
    case DISSEMINATIONPRODUCTTYPE_CHOICE_BYTYPE:
      chooseByType("setDisseminationProductTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setDisseminationProductTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ProductReferenceType& DisseminationProductType::getByReference_() const {
  if (byReference_Accessor) {
    return *byReference_Accessor;
  }
  throw uci::base::UCIException("Error in getByReference(): Unable to get ByReference, field not selected");
}

const uci::type::ProductReferenceType& DisseminationProductType::getByReference() const {
  return getByReference_();
}

uci::type::ProductReferenceType& DisseminationProductType::getByReference() {
  return getByReference_();
}

uci::type::DisseminationProductType& DisseminationProductType::setByReference(const uci::type::ProductReferenceType& accessor) {
  chooseByReference(accessor.getAccessorType());
  if (&accessor != byReference_Accessor.get()) {
    byReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DisseminationProductType::isByReference() const noexcept {
  return static_cast<bool>(byReference_Accessor);
}

uci::type::ProductReferenceType& DisseminationProductType::chooseByReference(const std::string& method, uci::base::accessorType::AccessorType type) {
  byType_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productReferenceType : type};
  if ((!byReference_Accessor) || (byReference_Accessor->getAccessorType() != requestedType)) {
    byReference_Accessor = ProductReferenceType::create(type);
    if (!byReference_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byReference_Accessor;
}

uci::type::ProductReferenceType& DisseminationProductType::chooseByReference(uci::base::accessorType::AccessorType type) {
  return chooseByReference("chooseByReference", type);
}

uci::type::DisseminationByType& DisseminationProductType::getByType_() const {
  if (byType_Accessor) {
    return *byType_Accessor;
  }
  throw uci::base::UCIException("Error in getByType(): Unable to get ByType, field not selected");
}

const uci::type::DisseminationByType& DisseminationProductType::getByType() const {
  return getByType_();
}

uci::type::DisseminationByType& DisseminationProductType::getByType() {
  return getByType_();
}

uci::type::DisseminationProductType& DisseminationProductType::setByType(const uci::type::DisseminationByType& accessor) {
  chooseByType();
  if (&accessor != byType_Accessor.get()) {
    byType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DisseminationProductType::isByType() const noexcept {
  return static_cast<bool>(byType_Accessor);
}

uci::type::DisseminationByType& DisseminationProductType::chooseByType(const std::string& method, uci::base::accessorType::AccessorType type) {
  byReference_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::disseminationByType : type};
  if ((!byType_Accessor) || (byType_Accessor->getAccessorType() != requestedType)) {
    byType_Accessor = DisseminationByType::create(type);
    if (!byType_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byType_Accessor;
}

uci::type::DisseminationByType& DisseminationProductType::chooseByType(uci::base::accessorType::AccessorType type) {
  return chooseByType("chooseByType", type);
}

std::unique_ptr<DisseminationProductType> DisseminationProductType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::disseminationProductType : type};
  return (requestedType == uci::type::accessorType::disseminationProductType) ? boost::make_unique<DisseminationProductType>() : nullptr;
}

/**  */
namespace DisseminationProductType_Names {

constexpr const char* Extern_Type_Name{"DisseminationProductType"};
constexpr const char* ByReference_Name{"ByReference"};
constexpr const char* ByType_Name{"ByType"};

} // namespace DisseminationProductType_Names

void DisseminationProductType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DisseminationProductType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DisseminationProductType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DisseminationProductType_Names::ByReference_Name) {
      ProductReferenceType::deserialize(valueType.second, accessor.chooseByReference(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DisseminationProductType_Names::ByType_Name) {
      DisseminationByType::deserialize(valueType.second, accessor.chooseByType(), nodeName, nsPrefix);
    }
  }
}

std::string DisseminationProductType::serialize(const uci::type::DisseminationProductType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DisseminationProductType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DisseminationProductType_Names::Extern_Type_Name);
  }
  if (accessor.isByReference()) {
    ProductReferenceType::serialize(accessor.getByReference(), node, DisseminationProductType_Names::ByReference_Name);
  } else if (accessor.isByType()) {
    DisseminationByType::serialize(accessor.getByType(), node, DisseminationProductType_Names::ByType_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DisseminationProductType& DisseminationProductType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DisseminationProductType>().release());
}

uci::type::DisseminationProductType& DisseminationProductType::create(const uci::type::DisseminationProductType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DisseminationProductType> newAccessor{boost::make_unique<asb_uci::type::DisseminationProductType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DisseminationProductType::destroy(uci::type::DisseminationProductType& accessor) {
  delete dynamic_cast<asb_uci::type::DisseminationProductType*>(&accessor);
}

} // namespace type

} // namespace uci

