/** @file CargoTransitionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CargoTransitionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CargoDeliverySubCapabilityEnum.h"
#include "asb_uci/type/CargoID_Type.h"
#include "asb_uci/type/Point3D_Type.h"
#include "asb_uci/type/SectorType.h"
#include "asb_uci/type/VehicleControlStrategyEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CargoDeliverySubCapabilityEnum.h"
#include "uci/type/CargoID_Type.h"
#include "uci/type/CargoTransitionType.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/SectorType.h"
#include "uci/type/VehicleControlStrategyEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CargoTransitionType::CargoTransitionType()
  : cargoID_Accessor{boost::make_unique<CargoID>(1, SIZE_MAX)},
    vehicleControlStrategy_Accessor{boost::make_unique<VehicleControlStrategyEnum>()},
    loadUnloadStrategy_Accessor{boost::make_unique<CargoDeliverySubCapabilityEnum>()},
    transitionLocation_Accessor{boost::make_unique<TransitionLocation>(1, 2)} {
}

CargoTransitionType::~CargoTransitionType() = default;

void CargoTransitionType::copy(const uci::type::CargoTransitionType& accessor) {
  copyImpl(accessor, false);
}

void CargoTransitionType::copyImpl(const uci::type::CargoTransitionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CargoTransitionType&>(accessor);
    setCargoID(*(accessorImpl.cargoID_Accessor));
    setVehicleControlStrategy(*(accessorImpl.vehicleControlStrategy_Accessor));
    setLoadUnloadStrategy(*(accessorImpl.loadUnloadStrategy_Accessor));
    setTransitionLocation(*(accessorImpl.transitionLocation_Accessor));
    if (accessorImpl.egressConstraint_Accessor) {
      setEgressConstraint(*(accessorImpl.egressConstraint_Accessor));
    } else {
      egressConstraint_Accessor.reset();
    }
    if (accessorImpl.ingressConstraint_Accessor) {
      setIngressConstraint(*(accessorImpl.ingressConstraint_Accessor));
    } else {
      ingressConstraint_Accessor.reset();
    }
  }
}

void CargoTransitionType::reset() noexcept {
  cargoID_Accessor->reset();
  vehicleControlStrategy_Accessor->reset();
  loadUnloadStrategy_Accessor->reset();
  transitionLocation_Accessor->reset();
  egressConstraint_Accessor.reset();
  ingressConstraint_Accessor.reset();
}

const uci::type::CargoTransitionType::CargoID& CargoTransitionType::getCargoID() const {
  return *cargoID_Accessor;
}

uci::type::CargoTransitionType::CargoID& CargoTransitionType::getCargoID() {
  return *cargoID_Accessor;
}

uci::type::CargoTransitionType& CargoTransitionType::setCargoID(const uci::type::CargoTransitionType::CargoID& accessor) {
  if (&accessor != cargoID_Accessor.get()) {
    cargoID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::VehicleControlStrategyEnum& CargoTransitionType::getVehicleControlStrategy() const {
  return *vehicleControlStrategy_Accessor;
}

uci::type::VehicleControlStrategyEnum& CargoTransitionType::getVehicleControlStrategy() {
  return *vehicleControlStrategy_Accessor;
}

uci::type::CargoTransitionType& CargoTransitionType::setVehicleControlStrategy(const uci::type::VehicleControlStrategyEnum& accessor) {
  if (&accessor != vehicleControlStrategy_Accessor.get()) {
    vehicleControlStrategy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CargoTransitionType& CargoTransitionType::setVehicleControlStrategy(uci::type::VehicleControlStrategyEnum::EnumerationItem value) {
  vehicleControlStrategy_Accessor->setValue(value);
  return *this;
}


const uci::type::CargoDeliverySubCapabilityEnum& CargoTransitionType::getLoadUnloadStrategy() const {
  return *loadUnloadStrategy_Accessor;
}

uci::type::CargoDeliverySubCapabilityEnum& CargoTransitionType::getLoadUnloadStrategy() {
  return *loadUnloadStrategy_Accessor;
}

uci::type::CargoTransitionType& CargoTransitionType::setLoadUnloadStrategy(const uci::type::CargoDeliverySubCapabilityEnum& accessor) {
  if (&accessor != loadUnloadStrategy_Accessor.get()) {
    loadUnloadStrategy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CargoTransitionType& CargoTransitionType::setLoadUnloadStrategy(uci::type::CargoDeliverySubCapabilityEnum::EnumerationItem value) {
  loadUnloadStrategy_Accessor->setValue(value);
  return *this;
}


const uci::type::CargoTransitionType::TransitionLocation& CargoTransitionType::getTransitionLocation() const {
  return *transitionLocation_Accessor;
}

uci::type::CargoTransitionType::TransitionLocation& CargoTransitionType::getTransitionLocation() {
  return *transitionLocation_Accessor;
}

uci::type::CargoTransitionType& CargoTransitionType::setTransitionLocation(const uci::type::CargoTransitionType::TransitionLocation& accessor) {
  if (&accessor != transitionLocation_Accessor.get()) {
    transitionLocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SectorType& CargoTransitionType::getEgressConstraint_() const {
  if (egressConstraint_Accessor) {
    return *egressConstraint_Accessor;
  }
  throw uci::base::UCIException("Error in getEgressConstraint(): An attempt was made to get an optional field that was not enabled, call hasEgressConstraint() to determine if it is safe to call getEgressConstraint()");
}

const uci::type::SectorType& CargoTransitionType::getEgressConstraint() const {
  return getEgressConstraint_();
}

uci::type::SectorType& CargoTransitionType::getEgressConstraint() {
  return getEgressConstraint_();
}

uci::type::CargoTransitionType& CargoTransitionType::setEgressConstraint(const uci::type::SectorType& accessor) {
  enableEgressConstraint();
  if (&accessor != egressConstraint_Accessor.get()) {
    egressConstraint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CargoTransitionType::hasEgressConstraint() const noexcept {
  return static_cast<bool>(egressConstraint_Accessor);
}

uci::type::SectorType& CargoTransitionType::enableEgressConstraint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sectorType : type};
  if ((!egressConstraint_Accessor) || (egressConstraint_Accessor->getAccessorType() != requestedType)) {
    egressConstraint_Accessor = SectorType::create(requestedType);
    if (!egressConstraint_Accessor) {
      throw uci::base::UCIException("Error in enableEgressConstraint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *egressConstraint_Accessor;
}

uci::type::CargoTransitionType& CargoTransitionType::clearEgressConstraint() noexcept {
  egressConstraint_Accessor.reset();
  return *this;
}

uci::type::SectorType& CargoTransitionType::getIngressConstraint_() const {
  if (ingressConstraint_Accessor) {
    return *ingressConstraint_Accessor;
  }
  throw uci::base::UCIException("Error in getIngressConstraint(): An attempt was made to get an optional field that was not enabled, call hasIngressConstraint() to determine if it is safe to call getIngressConstraint()");
}

const uci::type::SectorType& CargoTransitionType::getIngressConstraint() const {
  return getIngressConstraint_();
}

uci::type::SectorType& CargoTransitionType::getIngressConstraint() {
  return getIngressConstraint_();
}

uci::type::CargoTransitionType& CargoTransitionType::setIngressConstraint(const uci::type::SectorType& accessor) {
  enableIngressConstraint();
  if (&accessor != ingressConstraint_Accessor.get()) {
    ingressConstraint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CargoTransitionType::hasIngressConstraint() const noexcept {
  return static_cast<bool>(ingressConstraint_Accessor);
}

uci::type::SectorType& CargoTransitionType::enableIngressConstraint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sectorType : type};
  if ((!ingressConstraint_Accessor) || (ingressConstraint_Accessor->getAccessorType() != requestedType)) {
    ingressConstraint_Accessor = SectorType::create(requestedType);
    if (!ingressConstraint_Accessor) {
      throw uci::base::UCIException("Error in enableIngressConstraint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ingressConstraint_Accessor;
}

uci::type::CargoTransitionType& CargoTransitionType::clearIngressConstraint() noexcept {
  ingressConstraint_Accessor.reset();
  return *this;
}

std::unique_ptr<CargoTransitionType> CargoTransitionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cargoTransitionType : type};
  return (requestedType == uci::type::accessorType::cargoTransitionType) ? boost::make_unique<CargoTransitionType>() : nullptr;
}

/**  */
namespace CargoTransitionType_Names {

constexpr const char* Extern_Type_Name{"CargoTransitionType"};
constexpr const char* CargoID_Name{"CargoID"};
constexpr const char* VehicleControlStrategy_Name{"VehicleControlStrategy"};
constexpr const char* LoadUnloadStrategy_Name{"LoadUnloadStrategy"};
constexpr const char* TransitionLocation_Name{"TransitionLocation"};
constexpr const char* EgressConstraint_Name{"EgressConstraint"};
constexpr const char* IngressConstraint_Name{"IngressConstraint"};

} // namespace CargoTransitionType_Names

void CargoTransitionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CargoTransitionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CargoTransitionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CargoTransitionType_Names::CargoID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CargoTransitionType::CargoID& boundedList = accessor.getCargoID();
        const uci::type::CargoTransitionType::CargoID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CargoID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CargoTransitionType_Names::VehicleControlStrategy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getVehicleControlStrategy().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CargoTransitionType_Names::LoadUnloadStrategy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getLoadUnloadStrategy().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CargoTransitionType_Names::TransitionLocation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CargoTransitionType::TransitionLocation& boundedList = accessor.getTransitionLocation();
        const uci::type::CargoTransitionType::TransitionLocation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CargoTransitionType_Names::EgressConstraint_Name) {
      SectorType::deserialize(valueType.second, accessor.enableEgressConstraint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CargoTransitionType_Names::IngressConstraint_Name) {
      SectorType::deserialize(valueType.second, accessor.enableIngressConstraint(), nodeName, nsPrefix);
    }
  }
}

std::string CargoTransitionType::serialize(const uci::type::CargoTransitionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CargoTransitionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CargoTransitionType_Names::Extern_Type_Name);
  }
  {
    const uci::type::CargoTransitionType::CargoID& boundedList = accessor.getCargoID();
    for (uci::type::CargoTransitionType::CargoID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CargoID_Type::serialize(boundedList.at(i), node, CargoTransitionType_Names::CargoID_Name);
    }
  }
  VehicleControlStrategyEnum::serialize(accessor.getVehicleControlStrategy(), node, CargoTransitionType_Names::VehicleControlStrategy_Name, false);
  CargoDeliverySubCapabilityEnum::serialize(accessor.getLoadUnloadStrategy(), node, CargoTransitionType_Names::LoadUnloadStrategy_Name, false);
  {
    const uci::type::CargoTransitionType::TransitionLocation& boundedList = accessor.getTransitionLocation();
    for (uci::type::CargoTransitionType::TransitionLocation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::Point3D_Type::serialize(boundedList.at(i), node, CargoTransitionType_Names::TransitionLocation_Name);
    }
  }
  if (accessor.hasEgressConstraint()) {
    SectorType::serialize(accessor.getEgressConstraint(), node, CargoTransitionType_Names::EgressConstraint_Name);
  }
  if (accessor.hasIngressConstraint()) {
    SectorType::serialize(accessor.getIngressConstraint(), node, CargoTransitionType_Names::IngressConstraint_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CargoTransitionType& CargoTransitionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CargoTransitionType>().release());
}

uci::type::CargoTransitionType& CargoTransitionType::create(const uci::type::CargoTransitionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CargoTransitionType> newAccessor{boost::make_unique<asb_uci::type::CargoTransitionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CargoTransitionType::destroy(uci::type::CargoTransitionType& accessor) {
  delete dynamic_cast<asb_uci::type::CargoTransitionType*>(&accessor);
}

} // namespace type

} // namespace uci

