/** @file VelocityAccelerationCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/VelocityAccelerationCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/VelocityAccelerationCovarianceType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VelocityAccelerationCovarianceType::VelocityAccelerationCovarianceType() = default;

VelocityAccelerationCovarianceType::~VelocityAccelerationCovarianceType() = default;

void VelocityAccelerationCovarianceType::copy(const uci::type::VelocityAccelerationCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void VelocityAccelerationCovarianceType::copyImpl(const uci::type::VelocityAccelerationCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VelocityAccelerationCovarianceType&>(accessor);
    setVnAn(accessorImpl.vnAn_Accessor);
    setVnAe(accessorImpl.vnAe_Accessor);
    if (accessorImpl.hasVnAd()) {
      setVnAd(accessorImpl.getVnAd());
    } else {
      clearVnAd();
    }
    setVeAn(accessorImpl.veAn_Accessor);
    setVeAe(accessorImpl.veAe_Accessor);
    if (accessorImpl.hasVeAd()) {
      setVeAd(accessorImpl.getVeAd());
    } else {
      clearVeAd();
    }
    if (accessorImpl.hasVdAn()) {
      setVdAn(accessorImpl.getVdAn());
    } else {
      clearVdAn();
    }
    if (accessorImpl.hasVdAe()) {
      setVdAe(accessorImpl.getVdAe());
    } else {
      clearVdAe();
    }
    if (accessorImpl.hasVdAd()) {
      setVdAd(accessorImpl.getVdAd());
    } else {
      clearVdAd();
    }
  }
}

void VelocityAccelerationCovarianceType::reset() noexcept {
  vnAn_Accessor = 0.0;
  vnAe_Accessor = 0.0;
  clearVnAd();
  veAn_Accessor = 0.0;
  veAe_Accessor = 0.0;
  clearVeAd();
  clearVdAn();
  clearVdAe();
  clearVdAd();
}

xs::Double VelocityAccelerationCovarianceType::getVnAn() const {
  return vnAn_Accessor;
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::setVnAn(xs::Double value) {
  vnAn_Accessor = value;
  return *this;
}


xs::Double VelocityAccelerationCovarianceType::getVnAe() const {
  return vnAe_Accessor;
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::setVnAe(xs::Double value) {
  vnAe_Accessor = value;
  return *this;
}


xs::Double VelocityAccelerationCovarianceType::getVnAd() const {
  if (vnAd_Accessor) {
    return *vnAd_Accessor;
  }
  throw uci::base::UCIException("Error in getVnAd(): An attempt was made to get an optional field that was not enabled, call hasVnAd() to determine if it is safe to call getVnAd()");
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::setVnAd(xs::Double value) {
  vnAd_Accessor = value;
  return *this;
}

bool VelocityAccelerationCovarianceType::hasVnAd() const noexcept {
  return vnAd_Accessor.has_value();
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::clearVnAd() noexcept {
  vnAd_Accessor.reset();
  return *this;
}

xs::Double VelocityAccelerationCovarianceType::getVeAn() const {
  return veAn_Accessor;
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::setVeAn(xs::Double value) {
  veAn_Accessor = value;
  return *this;
}


xs::Double VelocityAccelerationCovarianceType::getVeAe() const {
  return veAe_Accessor;
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::setVeAe(xs::Double value) {
  veAe_Accessor = value;
  return *this;
}


xs::Double VelocityAccelerationCovarianceType::getVeAd() const {
  if (veAd_Accessor) {
    return *veAd_Accessor;
  }
  throw uci::base::UCIException("Error in getVeAd(): An attempt was made to get an optional field that was not enabled, call hasVeAd() to determine if it is safe to call getVeAd()");
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::setVeAd(xs::Double value) {
  veAd_Accessor = value;
  return *this;
}

bool VelocityAccelerationCovarianceType::hasVeAd() const noexcept {
  return veAd_Accessor.has_value();
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::clearVeAd() noexcept {
  veAd_Accessor.reset();
  return *this;
}

xs::Double VelocityAccelerationCovarianceType::getVdAn() const {
  if (vdAn_Accessor) {
    return *vdAn_Accessor;
  }
  throw uci::base::UCIException("Error in getVdAn(): An attempt was made to get an optional field that was not enabled, call hasVdAn() to determine if it is safe to call getVdAn()");
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::setVdAn(xs::Double value) {
  vdAn_Accessor = value;
  return *this;
}

bool VelocityAccelerationCovarianceType::hasVdAn() const noexcept {
  return vdAn_Accessor.has_value();
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::clearVdAn() noexcept {
  vdAn_Accessor.reset();
  return *this;
}

xs::Double VelocityAccelerationCovarianceType::getVdAe() const {
  if (vdAe_Accessor) {
    return *vdAe_Accessor;
  }
  throw uci::base::UCIException("Error in getVdAe(): An attempt was made to get an optional field that was not enabled, call hasVdAe() to determine if it is safe to call getVdAe()");
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::setVdAe(xs::Double value) {
  vdAe_Accessor = value;
  return *this;
}

bool VelocityAccelerationCovarianceType::hasVdAe() const noexcept {
  return vdAe_Accessor.has_value();
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::clearVdAe() noexcept {
  vdAe_Accessor.reset();
  return *this;
}

xs::Double VelocityAccelerationCovarianceType::getVdAd() const {
  if (vdAd_Accessor) {
    return *vdAd_Accessor;
  }
  throw uci::base::UCIException("Error in getVdAd(): An attempt was made to get an optional field that was not enabled, call hasVdAd() to determine if it is safe to call getVdAd()");
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::setVdAd(xs::Double value) {
  vdAd_Accessor = value;
  return *this;
}

bool VelocityAccelerationCovarianceType::hasVdAd() const noexcept {
  return vdAd_Accessor.has_value();
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::clearVdAd() noexcept {
  vdAd_Accessor.reset();
  return *this;
}

std::unique_ptr<VelocityAccelerationCovarianceType> VelocityAccelerationCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::velocityAccelerationCovarianceType : type};
  return (requestedType == uci::type::accessorType::velocityAccelerationCovarianceType) ? boost::make_unique<VelocityAccelerationCovarianceType>() : nullptr;
}

/**  */
namespace VelocityAccelerationCovarianceType_Names {

constexpr const char* Extern_Type_Name{"VelocityAccelerationCovarianceType"};
constexpr const char* VnAn_Name{"VnAn"};
constexpr const char* VnAe_Name{"VnAe"};
constexpr const char* VnAd_Name{"VnAd"};
constexpr const char* VeAn_Name{"VeAn"};
constexpr const char* VeAe_Name{"VeAe"};
constexpr const char* VeAd_Name{"VeAd"};
constexpr const char* VdAn_Name{"VdAn"};
constexpr const char* VdAe_Name{"VdAe"};
constexpr const char* VdAd_Name{"VdAd"};

} // namespace VelocityAccelerationCovarianceType_Names

void VelocityAccelerationCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VelocityAccelerationCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VelocityAccelerationCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VelocityAccelerationCovarianceType_Names::VnAn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVnAn(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityAccelerationCovarianceType_Names::VnAe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVnAe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityAccelerationCovarianceType_Names::VnAd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVnAd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityAccelerationCovarianceType_Names::VeAn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVeAn(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityAccelerationCovarianceType_Names::VeAe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVeAe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityAccelerationCovarianceType_Names::VeAd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVeAd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityAccelerationCovarianceType_Names::VdAn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVdAn(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityAccelerationCovarianceType_Names::VdAe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVdAe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityAccelerationCovarianceType_Names::VdAd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVdAd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string VelocityAccelerationCovarianceType::serialize(const uci::type::VelocityAccelerationCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VelocityAccelerationCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VelocityAccelerationCovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVnAn(), node, VelocityAccelerationCovarianceType_Names::VnAn_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVnAe(), node, VelocityAccelerationCovarianceType_Names::VnAe_Name);
  if (accessor.hasVnAd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVnAd(), node, VelocityAccelerationCovarianceType_Names::VnAd_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVeAn(), node, VelocityAccelerationCovarianceType_Names::VeAn_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVeAe(), node, VelocityAccelerationCovarianceType_Names::VeAe_Name);
  if (accessor.hasVeAd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVeAd(), node, VelocityAccelerationCovarianceType_Names::VeAd_Name);
  }
  if (accessor.hasVdAn()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVdAn(), node, VelocityAccelerationCovarianceType_Names::VdAn_Name);
  }
  if (accessor.hasVdAe()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVdAe(), node, VelocityAccelerationCovarianceType_Names::VdAe_Name);
  }
  if (accessor.hasVdAd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVdAd(), node, VelocityAccelerationCovarianceType_Names::VdAd_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VelocityAccelerationCovarianceType>().release());
}

uci::type::VelocityAccelerationCovarianceType& VelocityAccelerationCovarianceType::create(const uci::type::VelocityAccelerationCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VelocityAccelerationCovarianceType> newAccessor{boost::make_unique<asb_uci::type::VelocityAccelerationCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VelocityAccelerationCovarianceType::destroy(uci::type::VelocityAccelerationCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::VelocityAccelerationCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

