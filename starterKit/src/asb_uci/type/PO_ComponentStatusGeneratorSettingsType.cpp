/** @file PO_ComponentStatusGeneratorSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_ComponentStatusGeneratorSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DoubleMinMaxType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DoubleMinMaxType.h"
#include "uci/type/PO_ComponentStatusGeneratorSettingsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentStatusGeneratorSettingsType::PO_ComponentStatusGeneratorSettingsType()
  : visibleImageSetting_Accessor{boost::make_unique<VisibleImageSetting>(0, SIZE_MAX)},
    infraredImageSetting_Accessor{boost::make_unique<InfraredImageSetting>(0, SIZE_MAX)},
    hyperspectralImageSetting_Accessor{boost::make_unique<HyperspectralImageSetting>(0, SIZE_MAX)},
    imageSetting_Accessor{boost::make_unique<ImageSetting>(0, SIZE_MAX)},
    videoClipVisibleSetting_Accessor{boost::make_unique<VideoClipVisibleSetting>(0, SIZE_MAX)},
    videoClipInfraredSetting_Accessor{boost::make_unique<VideoClipInfraredSetting>(0, SIZE_MAX)},
    videoClipHyperspectralSetting_Accessor{boost::make_unique<VideoClipHyperspectralSetting>(0, SIZE_MAX)},
    videoClipSetting_Accessor{boost::make_unique<VideoClipSetting>(0, SIZE_MAX)},
    videoStreamVisibleSetting_Accessor{boost::make_unique<VideoStreamVisibleSetting>(0, SIZE_MAX)},
    videoStreamInfraredSetting_Accessor{boost::make_unique<VideoStreamInfraredSetting>(0, SIZE_MAX)},
    videoStreamHyperspectralSetting_Accessor{boost::make_unique<VideoStreamHyperspectralSetting>(0, SIZE_MAX)},
    videoStreamSetting_Accessor{boost::make_unique<VideoStreamSetting>(0, SIZE_MAX)} {
}

PO_ComponentStatusGeneratorSettingsType::~PO_ComponentStatusGeneratorSettingsType() = default;

void PO_ComponentStatusGeneratorSettingsType::copy(const uci::type::PO_ComponentStatusGeneratorSettingsType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentStatusGeneratorSettingsType::copyImpl(const uci::type::PO_ComponentStatusGeneratorSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentStatusGeneratorSettingsType&>(accessor);
    setVisibleImageSetting(*(accessorImpl.visibleImageSetting_Accessor));
    setInfraredImageSetting(*(accessorImpl.infraredImageSetting_Accessor));
    setHyperspectralImageSetting(*(accessorImpl.hyperspectralImageSetting_Accessor));
    setImageSetting(*(accessorImpl.imageSetting_Accessor));
    setVideoClipVisibleSetting(*(accessorImpl.videoClipVisibleSetting_Accessor));
    setVideoClipInfraredSetting(*(accessorImpl.videoClipInfraredSetting_Accessor));
    setVideoClipHyperspectralSetting(*(accessorImpl.videoClipHyperspectralSetting_Accessor));
    setVideoClipSetting(*(accessorImpl.videoClipSetting_Accessor));
    setVideoStreamVisibleSetting(*(accessorImpl.videoStreamVisibleSetting_Accessor));
    setVideoStreamInfraredSetting(*(accessorImpl.videoStreamInfraredSetting_Accessor));
    setVideoStreamHyperspectralSetting(*(accessorImpl.videoStreamHyperspectralSetting_Accessor));
    setVideoStreamSetting(*(accessorImpl.videoStreamSetting_Accessor));
  }
}

void PO_ComponentStatusGeneratorSettingsType::reset() noexcept {
  visibleImageSetting_Accessor->reset();
  infraredImageSetting_Accessor->reset();
  hyperspectralImageSetting_Accessor->reset();
  imageSetting_Accessor->reset();
  videoClipVisibleSetting_Accessor->reset();
  videoClipInfraredSetting_Accessor->reset();
  videoClipHyperspectralSetting_Accessor->reset();
  videoClipSetting_Accessor->reset();
  videoStreamVisibleSetting_Accessor->reset();
  videoStreamInfraredSetting_Accessor->reset();
  videoStreamHyperspectralSetting_Accessor->reset();
  videoStreamSetting_Accessor->reset();
}

const uci::type::PO_ComponentStatusGeneratorSettingsType::VisibleImageSetting& PO_ComponentStatusGeneratorSettingsType::getVisibleImageSetting() const {
  return *visibleImageSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType::VisibleImageSetting& PO_ComponentStatusGeneratorSettingsType::getVisibleImageSetting() {
  return *visibleImageSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::setVisibleImageSetting(const uci::type::PO_ComponentStatusGeneratorSettingsType::VisibleImageSetting& accessor) {
  if (&accessor != visibleImageSetting_Accessor.get()) {
    visibleImageSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusGeneratorSettingsType::InfraredImageSetting& PO_ComponentStatusGeneratorSettingsType::getInfraredImageSetting() const {
  return *infraredImageSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType::InfraredImageSetting& PO_ComponentStatusGeneratorSettingsType::getInfraredImageSetting() {
  return *infraredImageSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::setInfraredImageSetting(const uci::type::PO_ComponentStatusGeneratorSettingsType::InfraredImageSetting& accessor) {
  if (&accessor != infraredImageSetting_Accessor.get()) {
    infraredImageSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusGeneratorSettingsType::HyperspectralImageSetting& PO_ComponentStatusGeneratorSettingsType::getHyperspectralImageSetting() const {
  return *hyperspectralImageSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType::HyperspectralImageSetting& PO_ComponentStatusGeneratorSettingsType::getHyperspectralImageSetting() {
  return *hyperspectralImageSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::setHyperspectralImageSetting(const uci::type::PO_ComponentStatusGeneratorSettingsType::HyperspectralImageSetting& accessor) {
  if (&accessor != hyperspectralImageSetting_Accessor.get()) {
    hyperspectralImageSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusGeneratorSettingsType::ImageSetting& PO_ComponentStatusGeneratorSettingsType::getImageSetting() const {
  return *imageSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType::ImageSetting& PO_ComponentStatusGeneratorSettingsType::getImageSetting() {
  return *imageSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::setImageSetting(const uci::type::PO_ComponentStatusGeneratorSettingsType::ImageSetting& accessor) {
  if (&accessor != imageSetting_Accessor.get()) {
    imageSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipVisibleSetting& PO_ComponentStatusGeneratorSettingsType::getVideoClipVisibleSetting() const {
  return *videoClipVisibleSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipVisibleSetting& PO_ComponentStatusGeneratorSettingsType::getVideoClipVisibleSetting() {
  return *videoClipVisibleSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::setVideoClipVisibleSetting(const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipVisibleSetting& accessor) {
  if (&accessor != videoClipVisibleSetting_Accessor.get()) {
    videoClipVisibleSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipInfraredSetting& PO_ComponentStatusGeneratorSettingsType::getVideoClipInfraredSetting() const {
  return *videoClipInfraredSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipInfraredSetting& PO_ComponentStatusGeneratorSettingsType::getVideoClipInfraredSetting() {
  return *videoClipInfraredSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::setVideoClipInfraredSetting(const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipInfraredSetting& accessor) {
  if (&accessor != videoClipInfraredSetting_Accessor.get()) {
    videoClipInfraredSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipHyperspectralSetting& PO_ComponentStatusGeneratorSettingsType::getVideoClipHyperspectralSetting() const {
  return *videoClipHyperspectralSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipHyperspectralSetting& PO_ComponentStatusGeneratorSettingsType::getVideoClipHyperspectralSetting() {
  return *videoClipHyperspectralSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::setVideoClipHyperspectralSetting(const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipHyperspectralSetting& accessor) {
  if (&accessor != videoClipHyperspectralSetting_Accessor.get()) {
    videoClipHyperspectralSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipSetting& PO_ComponentStatusGeneratorSettingsType::getVideoClipSetting() const {
  return *videoClipSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipSetting& PO_ComponentStatusGeneratorSettingsType::getVideoClipSetting() {
  return *videoClipSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::setVideoClipSetting(const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipSetting& accessor) {
  if (&accessor != videoClipSetting_Accessor.get()) {
    videoClipSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamVisibleSetting& PO_ComponentStatusGeneratorSettingsType::getVideoStreamVisibleSetting() const {
  return *videoStreamVisibleSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamVisibleSetting& PO_ComponentStatusGeneratorSettingsType::getVideoStreamVisibleSetting() {
  return *videoStreamVisibleSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::setVideoStreamVisibleSetting(const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamVisibleSetting& accessor) {
  if (&accessor != videoStreamVisibleSetting_Accessor.get()) {
    videoStreamVisibleSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamInfraredSetting& PO_ComponentStatusGeneratorSettingsType::getVideoStreamInfraredSetting() const {
  return *videoStreamInfraredSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamInfraredSetting& PO_ComponentStatusGeneratorSettingsType::getVideoStreamInfraredSetting() {
  return *videoStreamInfraredSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::setVideoStreamInfraredSetting(const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamInfraredSetting& accessor) {
  if (&accessor != videoStreamInfraredSetting_Accessor.get()) {
    videoStreamInfraredSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamHyperspectralSetting& PO_ComponentStatusGeneratorSettingsType::getVideoStreamHyperspectralSetting() const {
  return *videoStreamHyperspectralSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamHyperspectralSetting& PO_ComponentStatusGeneratorSettingsType::getVideoStreamHyperspectralSetting() {
  return *videoStreamHyperspectralSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::setVideoStreamHyperspectralSetting(const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamHyperspectralSetting& accessor) {
  if (&accessor != videoStreamHyperspectralSetting_Accessor.get()) {
    videoStreamHyperspectralSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamSetting& PO_ComponentStatusGeneratorSettingsType::getVideoStreamSetting() const {
  return *videoStreamSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamSetting& PO_ComponentStatusGeneratorSettingsType::getVideoStreamSetting() {
  return *videoStreamSetting_Accessor;
}

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::setVideoStreamSetting(const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamSetting& accessor) {
  if (&accessor != videoStreamSetting_Accessor.get()) {
    videoStreamSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PO_ComponentStatusGeneratorSettingsType> PO_ComponentStatusGeneratorSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusGeneratorSettingsType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentStatusGeneratorSettingsType) ? boost::make_unique<PO_ComponentStatusGeneratorSettingsType>() : nullptr;
}

/**  */
namespace PO_ComponentStatusGeneratorSettingsType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentStatusGeneratorSettingsType"};
constexpr const char* VisibleImageSetting_Name{"VisibleImageSetting"};
constexpr const char* InfraredImageSetting_Name{"InfraredImageSetting"};
constexpr const char* HyperspectralImageSetting_Name{"HyperspectralImageSetting"};
constexpr const char* ImageSetting_Name{"ImageSetting"};
constexpr const char* VideoClipVisibleSetting_Name{"VideoClipVisibleSetting"};
constexpr const char* VideoClipInfraredSetting_Name{"VideoClipInfraredSetting"};
constexpr const char* VideoClipHyperspectralSetting_Name{"VideoClipHyperspectralSetting"};
constexpr const char* VideoClipSetting_Name{"VideoClipSetting"};
constexpr const char* VideoStreamVisibleSetting_Name{"VideoStreamVisibleSetting"};
constexpr const char* VideoStreamInfraredSetting_Name{"VideoStreamInfraredSetting"};
constexpr const char* VideoStreamHyperspectralSetting_Name{"VideoStreamHyperspectralSetting"};
constexpr const char* VideoStreamSetting_Name{"VideoStreamSetting"};

} // namespace PO_ComponentStatusGeneratorSettingsType_Names

void PO_ComponentStatusGeneratorSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentStatusGeneratorSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentStatusGeneratorSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VisibleImageSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VisibleImageSetting& boundedList = accessor.getVisibleImageSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VisibleImageSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::InfraredImageSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::InfraredImageSetting& boundedList = accessor.getInfraredImageSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::InfraredImageSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::HyperspectralImageSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::HyperspectralImageSetting& boundedList = accessor.getHyperspectralImageSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::HyperspectralImageSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::ImageSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::ImageSetting& boundedList = accessor.getImageSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::ImageSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoClipVisibleSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipVisibleSetting& boundedList = accessor.getVideoClipVisibleSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipVisibleSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoClipInfraredSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipInfraredSetting& boundedList = accessor.getVideoClipInfraredSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipInfraredSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoClipHyperspectralSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipHyperspectralSetting& boundedList = accessor.getVideoClipHyperspectralSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipHyperspectralSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoClipSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipSetting& boundedList = accessor.getVideoClipSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamVisibleSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamVisibleSetting& boundedList = accessor.getVideoStreamVisibleSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamVisibleSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamInfraredSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamInfraredSetting& boundedList = accessor.getVideoStreamInfraredSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamInfraredSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamHyperspectralSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamHyperspectralSetting& boundedList = accessor.getVideoStreamHyperspectralSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamHyperspectralSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamSetting& boundedList = accessor.getVideoStreamSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PO_ComponentStatusGeneratorSettingsType::serialize(const uci::type::PO_ComponentStatusGeneratorSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentStatusGeneratorSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentStatusGeneratorSettingsType_Names::Extern_Type_Name);
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VisibleImageSetting& boundedList = accessor.getVisibleImageSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VisibleImageSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VisibleImageSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::InfraredImageSetting& boundedList = accessor.getInfraredImageSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::InfraredImageSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::InfraredImageSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::HyperspectralImageSetting& boundedList = accessor.getHyperspectralImageSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::HyperspectralImageSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::HyperspectralImageSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::ImageSetting& boundedList = accessor.getImageSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::ImageSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::ImageSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipVisibleSetting& boundedList = accessor.getVideoClipVisibleSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipVisibleSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoClipVisibleSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipInfraredSetting& boundedList = accessor.getVideoClipInfraredSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipInfraredSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoClipInfraredSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipHyperspectralSetting& boundedList = accessor.getVideoClipHyperspectralSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipHyperspectralSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoClipHyperspectralSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipSetting& boundedList = accessor.getVideoClipSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoClipSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamVisibleSetting& boundedList = accessor.getVideoStreamVisibleSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamVisibleSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamVisibleSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamInfraredSetting& boundedList = accessor.getVideoStreamInfraredSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamInfraredSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamInfraredSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamHyperspectralSetting& boundedList = accessor.getVideoStreamHyperspectralSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamHyperspectralSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamHyperspectralSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamSetting& boundedList = accessor.getVideoStreamSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamSetting_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentStatusGeneratorSettingsType>().release());
}

uci::type::PO_ComponentStatusGeneratorSettingsType& PO_ComponentStatusGeneratorSettingsType::create(const uci::type::PO_ComponentStatusGeneratorSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentStatusGeneratorSettingsType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentStatusGeneratorSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentStatusGeneratorSettingsType::destroy(uci::type::PO_ComponentStatusGeneratorSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentStatusGeneratorSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

