/** @file RadarAltimeterReportResolutionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RadarAltimeterReportResolutionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleHalfType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadarAltimeterReportResolutionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpeedType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RadarAltimeterReportResolutionType::RadarAltimeterReportResolutionType() = default;

RadarAltimeterReportResolutionType::~RadarAltimeterReportResolutionType() = default;

void RadarAltimeterReportResolutionType::copy(const uci::type::RadarAltimeterReportResolutionType& accessor) {
  copyImpl(accessor, false);
}

void RadarAltimeterReportResolutionType::copyImpl(const uci::type::RadarAltimeterReportResolutionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RadarAltimeterReportResolutionType&>(accessor);
    if (accessorImpl.hasZX_Resolution()) {
      setZX_Resolution(accessorImpl.getZX_Resolution());
    } else {
      clearZX_Resolution();
    }
    if (accessorImpl.hasYZ_Resolution()) {
      setYZ_Resolution(accessorImpl.getYZ_Resolution());
    } else {
      clearYZ_Resolution();
    }
    if (accessorImpl.hasHeightResolution()) {
      setHeightResolution(accessorImpl.getHeightResolution());
    } else {
      clearHeightResolution();
    }
    if (accessorImpl.hasVerticalClosingVelocityResolution()) {
      setVerticalClosingVelocityResolution(accessorImpl.getVerticalClosingVelocityResolution());
    } else {
      clearVerticalClosingVelocityResolution();
    }
  }
}

void RadarAltimeterReportResolutionType::reset() noexcept {
  clearZX_Resolution();
  clearYZ_Resolution();
  clearHeightResolution();
  clearVerticalClosingVelocityResolution();
}

uci::type::AngleHalfTypeValue RadarAltimeterReportResolutionType::getZX_Resolution() const {
  if (zX_Resolution_Accessor) {
    return *zX_Resolution_Accessor;
  }
  throw uci::base::UCIException("Error in getZX_Resolution(): An attempt was made to get an optional field that was not enabled, call hasZX_Resolution() to determine if it is safe to call getZX_Resolution()");
}

uci::type::RadarAltimeterReportResolutionType& RadarAltimeterReportResolutionType::setZX_Resolution(uci::type::AngleHalfTypeValue value) {
  zX_Resolution_Accessor = value;
  return *this;
}

bool RadarAltimeterReportResolutionType::hasZX_Resolution() const noexcept {
  return zX_Resolution_Accessor.has_value();
}

uci::type::RadarAltimeterReportResolutionType& RadarAltimeterReportResolutionType::clearZX_Resolution() noexcept {
  zX_Resolution_Accessor.reset();
  return *this;
}

uci::type::AngleTypeValue RadarAltimeterReportResolutionType::getYZ_Resolution() const {
  if (yZ_Resolution_Accessor) {
    return *yZ_Resolution_Accessor;
  }
  throw uci::base::UCIException("Error in getYZ_Resolution(): An attempt was made to get an optional field that was not enabled, call hasYZ_Resolution() to determine if it is safe to call getYZ_Resolution()");
}

uci::type::RadarAltimeterReportResolutionType& RadarAltimeterReportResolutionType::setYZ_Resolution(uci::type::AngleTypeValue value) {
  yZ_Resolution_Accessor = value;
  return *this;
}

bool RadarAltimeterReportResolutionType::hasYZ_Resolution() const noexcept {
  return yZ_Resolution_Accessor.has_value();
}

uci::type::RadarAltimeterReportResolutionType& RadarAltimeterReportResolutionType::clearYZ_Resolution() noexcept {
  yZ_Resolution_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue RadarAltimeterReportResolutionType::getHeightResolution() const {
  if (heightResolution_Accessor) {
    return *heightResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getHeightResolution(): An attempt was made to get an optional field that was not enabled, call hasHeightResolution() to determine if it is safe to call getHeightResolution()");
}

uci::type::RadarAltimeterReportResolutionType& RadarAltimeterReportResolutionType::setHeightResolution(uci::type::DistanceTypeValue value) {
  heightResolution_Accessor = value;
  return *this;
}

bool RadarAltimeterReportResolutionType::hasHeightResolution() const noexcept {
  return heightResolution_Accessor.has_value();
}

uci::type::RadarAltimeterReportResolutionType& RadarAltimeterReportResolutionType::clearHeightResolution() noexcept {
  heightResolution_Accessor.reset();
  return *this;
}

uci::type::SpeedTypeValue RadarAltimeterReportResolutionType::getVerticalClosingVelocityResolution() const {
  if (verticalClosingVelocityResolution_Accessor) {
    return *verticalClosingVelocityResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getVerticalClosingVelocityResolution(): An attempt was made to get an optional field that was not enabled, call hasVerticalClosingVelocityResolution() to determine if it is safe to call getVerticalClosingVelocityResolution()");
}

uci::type::RadarAltimeterReportResolutionType& RadarAltimeterReportResolutionType::setVerticalClosingVelocityResolution(uci::type::SpeedTypeValue value) {
  verticalClosingVelocityResolution_Accessor = value;
  return *this;
}

bool RadarAltimeterReportResolutionType::hasVerticalClosingVelocityResolution() const noexcept {
  return verticalClosingVelocityResolution_Accessor.has_value();
}

uci::type::RadarAltimeterReportResolutionType& RadarAltimeterReportResolutionType::clearVerticalClosingVelocityResolution() noexcept {
  verticalClosingVelocityResolution_Accessor.reset();
  return *this;
}

std::unique_ptr<RadarAltimeterReportResolutionType> RadarAltimeterReportResolutionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarAltimeterReportResolutionType : type};
  return (requestedType == uci::type::accessorType::radarAltimeterReportResolutionType) ? boost::make_unique<RadarAltimeterReportResolutionType>() : nullptr;
}

/**  */
namespace RadarAltimeterReportResolutionType_Names {

constexpr const char* Extern_Type_Name{"RadarAltimeterReportResolutionType"};
constexpr const char* ZX_Resolution_Name{"ZX_Resolution"};
constexpr const char* YZ_Resolution_Name{"YZ_Resolution"};
constexpr const char* HeightResolution_Name{"HeightResolution"};
constexpr const char* VerticalClosingVelocityResolution_Name{"VerticalClosingVelocityResolution"};

} // namespace RadarAltimeterReportResolutionType_Names

void RadarAltimeterReportResolutionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RadarAltimeterReportResolutionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RadarAltimeterReportResolutionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RadarAltimeterReportResolutionType_Names::ZX_Resolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setZX_Resolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterReportResolutionType_Names::YZ_Resolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setYZ_Resolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterReportResolutionType_Names::HeightResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHeightResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterReportResolutionType_Names::VerticalClosingVelocityResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVerticalClosingVelocityResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string RadarAltimeterReportResolutionType::serialize(const uci::type::RadarAltimeterReportResolutionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RadarAltimeterReportResolutionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RadarAltimeterReportResolutionType_Names::Extern_Type_Name);
  }
  if (accessor.hasZX_Resolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getZX_Resolution(), node, RadarAltimeterReportResolutionType_Names::ZX_Resolution_Name);
  }
  if (accessor.hasYZ_Resolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getYZ_Resolution(), node, RadarAltimeterReportResolutionType_Names::YZ_Resolution_Name);
  }
  if (accessor.hasHeightResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getHeightResolution(), node, RadarAltimeterReportResolutionType_Names::HeightResolution_Name);
  }
  if (accessor.hasVerticalClosingVelocityResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVerticalClosingVelocityResolution(), node, RadarAltimeterReportResolutionType_Names::VerticalClosingVelocityResolution_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RadarAltimeterReportResolutionType& RadarAltimeterReportResolutionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RadarAltimeterReportResolutionType>().release());
}

uci::type::RadarAltimeterReportResolutionType& RadarAltimeterReportResolutionType::create(const uci::type::RadarAltimeterReportResolutionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RadarAltimeterReportResolutionType> newAccessor{boost::make_unique<asb_uci::type::RadarAltimeterReportResolutionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RadarAltimeterReportResolutionType::destroy(uci::type::RadarAltimeterReportResolutionType& accessor) {
  delete dynamic_cast<asb_uci::type::RadarAltimeterReportResolutionType*>(&accessor);
}

} // namespace type

} // namespace uci

