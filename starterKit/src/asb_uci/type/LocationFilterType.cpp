/** @file LocationFilterType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/LocationFilterType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/Point2D_Type.h"
#include "../../../include/asb_uci/type/ZoneInclusionType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LocationFilterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point2D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ZoneInclusionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LocationFilterType::LocationFilterType() = default;

LocationFilterType::~LocationFilterType() = default;

void LocationFilterType::copy(const uci::type::LocationFilterType& accessor) {
  copyImpl(accessor, false);
}

void LocationFilterType::copyImpl(const uci::type::LocationFilterType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LocationFilterType&>(accessor);
    if (accessorImpl.zone_Accessor) {
      setZone(*(accessorImpl.zone_Accessor));
    } else {
      zone_Accessor.reset();
    }
    if (accessorImpl.location_Accessor) {
      setLocation(*(accessorImpl.location_Accessor));
    } else {
      location_Accessor.reset();
    }
  }
}

void LocationFilterType::reset() noexcept {
  zone_Accessor.reset();
  location_Accessor.reset();
}

uci::type::LocationFilterType::LocationFilterTypeChoice LocationFilterType::getLocationFilterTypeChoiceOrdinal() const noexcept {
  if (zone_Accessor) {
    return LOCATIONFILTERTYPE_CHOICE_ZONE;
  }
  if (location_Accessor) {
    return LOCATIONFILTERTYPE_CHOICE_LOCATION;
  }
  return LOCATIONFILTERTYPE_CHOICE_NONE;
}

uci::type::LocationFilterType& LocationFilterType::setLocationFilterTypeChoiceOrdinal(uci::type::LocationFilterType::LocationFilterTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case LOCATIONFILTERTYPE_CHOICE_ZONE:
      chooseZone("setLocationFilterTypeChoiceOrdinal", type);
      break;
    case LOCATIONFILTERTYPE_CHOICE_LOCATION:
      chooseLocation("setLocationFilterTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setLocationFilterTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ZoneInclusionType& LocationFilterType::getZone_() const {
  if (zone_Accessor) {
    return *zone_Accessor;
  }
  throw uci::base::UCIException("Error in getZone(): Unable to get Zone, field not selected");
}

const uci::type::ZoneInclusionType& LocationFilterType::getZone() const {
  return getZone_();
}

uci::type::ZoneInclusionType& LocationFilterType::getZone() {
  return getZone_();
}

uci::type::LocationFilterType& LocationFilterType::setZone(const uci::type::ZoneInclusionType& accessor) {
  chooseZone();
  if (&accessor != zone_Accessor.get()) {
    zone_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LocationFilterType::isZone() const noexcept {
  return static_cast<bool>(zone_Accessor);
}

uci::type::ZoneInclusionType& LocationFilterType::chooseZone(const std::string& method, uci::base::accessorType::AccessorType type) {
  location_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneInclusionType : type};
  if ((!zone_Accessor) || (zone_Accessor->getAccessorType() != requestedType)) {
    zone_Accessor = ZoneInclusionType::create(type);
    if (!zone_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *zone_Accessor;
}

uci::type::ZoneInclusionType& LocationFilterType::chooseZone(uci::base::accessorType::AccessorType type) {
  return chooseZone("chooseZone", type);
}

uci::type::Point2D_Type& LocationFilterType::getLocation_() const {
  if (location_Accessor) {
    return *location_Accessor;
  }
  throw uci::base::UCIException("Error in getLocation(): Unable to get Location, field not selected");
}

const uci::type::Point2D_Type& LocationFilterType::getLocation() const {
  return getLocation_();
}

uci::type::Point2D_Type& LocationFilterType::getLocation() {
  return getLocation_();
}

uci::type::LocationFilterType& LocationFilterType::setLocation(const uci::type::Point2D_Type& accessor) {
  chooseLocation("setLocation", accessor.getAccessorType());
  if (&accessor != location_Accessor.get()) {
    location_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool LocationFilterType::isLocation() const noexcept {
  return static_cast<bool>(location_Accessor);
}

uci::type::Point2D_Type& LocationFilterType::chooseLocation(const std::string& method, uci::base::accessorType::AccessorType type) {
  zone_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!location_Accessor) || (location_Accessor->getAccessorType() != requestedType)) {
    location_Accessor = Point2D_Type::create(type);
    if (!location_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *location_Accessor;
}

uci::type::Point2D_Type& LocationFilterType::chooseLocation(uci::base::accessorType::AccessorType type) {
  return chooseLocation("chooseLocation", type);
}

std::unique_ptr<LocationFilterType> LocationFilterType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::locationFilterType : type};
  return (requestedType == uci::type::accessorType::locationFilterType) ? boost::make_unique<LocationFilterType>() : nullptr;
}

/**  */
namespace LocationFilterType_Names {

constexpr const char* Extern_Type_Name{"LocationFilterType"};
constexpr const char* Zone_Name{"Zone"};
constexpr const char* Location_Name{"Location"};

} // namespace LocationFilterType_Names

void LocationFilterType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LocationFilterType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LocationFilterType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LocationFilterType_Names::Zone_Name) {
      ZoneInclusionType::deserialize(valueType.second, accessor.chooseZone(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LocationFilterType_Names::Location_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseLocation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string LocationFilterType::serialize(const uci::type::LocationFilterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LocationFilterType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LocationFilterType_Names::Extern_Type_Name);
  }
  if (accessor.isZone()) {
    ZoneInclusionType::serialize(accessor.getZone(), node, LocationFilterType_Names::Zone_Name);
  } else if (accessor.isLocation()) {
    Point2D_Type::serialize(accessor.getLocation(), node, LocationFilterType_Names::Location_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LocationFilterType& LocationFilterType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LocationFilterType>().release());
}

uci::type::LocationFilterType& LocationFilterType::create(const uci::type::LocationFilterType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LocationFilterType> newAccessor{boost::make_unique<asb_uci::type::LocationFilterType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LocationFilterType::destroy(uci::type::LocationFilterType& accessor) {
  delete dynamic_cast<asb_uci::type::LocationFilterType*>(&accessor);
}

} // namespace type

} // namespace uci

