/** @file CommIFDL_NetLinkStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommIFDL_NetLinkStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommIFDL_CommModeEnum.h"
#include "../../../include/asb_uci/type/CommIFDL_TxRateEnum.h"
#include "../../../include/asb_uci/type/NetworkLinkID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommIFDL_CommModeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommIFDL_NetLinkStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommIFDL_TxRateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFDL_FlightIdentifierType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFDL_FlightPositionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NetworkLinkID_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommIFDL_NetLinkStatusType::CommIFDL_NetLinkStatusType()
  : networkLinkID_Accessor{boost::make_unique<NetworkLinkID_Type>()},
    communicationMode_Accessor{boost::make_unique<CommIFDL_CommModeEnum>()} {
}

CommIFDL_NetLinkStatusType::~CommIFDL_NetLinkStatusType() = default;

void CommIFDL_NetLinkStatusType::copy(const uci::type::CommIFDL_NetLinkStatusType& accessor) {
  copyImpl(accessor, false);
}

void CommIFDL_NetLinkStatusType::copyImpl(const uci::type::CommIFDL_NetLinkStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommIFDL_NetLinkStatusType&>(accessor);
    setNetworkLinkID(*(accessorImpl.networkLinkID_Accessor));
    setPeerFlightIdentifier(accessorImpl.peerFlightIdentifier_Accessor);
    setPeerFlightPosition(accessorImpl.peerFlightPosition_Accessor);
    setCommunicationMode(*(accessorImpl.communicationMode_Accessor));
    if (accessorImpl.transmissionRate_Accessor) {
      setTransmissionRate(*(accessorImpl.transmissionRate_Accessor));
    } else {
      transmissionRate_Accessor.reset();
    }
    if (accessorImpl.hasMaxRangeApproached()) {
      setMaxRangeApproached(accessorImpl.getMaxRangeApproached());
    } else {
      clearMaxRangeApproached();
    }
  }
}

void CommIFDL_NetLinkStatusType::reset() noexcept {
  networkLinkID_Accessor->reset();
  peerFlightIdentifier_Accessor = 0;
  peerFlightPosition_Accessor = 0;
  communicationMode_Accessor->reset();
  transmissionRate_Accessor.reset();
  clearMaxRangeApproached();
}

const uci::type::NetworkLinkID_Type& CommIFDL_NetLinkStatusType::getNetworkLinkID() const {
  return *networkLinkID_Accessor;
}

uci::type::NetworkLinkID_Type& CommIFDL_NetLinkStatusType::getNetworkLinkID() {
  return *networkLinkID_Accessor;
}

uci::type::CommIFDL_NetLinkStatusType& CommIFDL_NetLinkStatusType::setNetworkLinkID(const uci::type::NetworkLinkID_Type& accessor) {
  if (&accessor != networkLinkID_Accessor.get()) {
    networkLinkID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IFDL_FlightIdentifierTypeValue CommIFDL_NetLinkStatusType::getPeerFlightIdentifier() const {
  return peerFlightIdentifier_Accessor;
}

uci::type::CommIFDL_NetLinkStatusType& CommIFDL_NetLinkStatusType::setPeerFlightIdentifier(uci::type::IFDL_FlightIdentifierTypeValue value) {
  peerFlightIdentifier_Accessor = value;
  return *this;
}


uci::type::IFDL_FlightPositionTypeValue CommIFDL_NetLinkStatusType::getPeerFlightPosition() const {
  return peerFlightPosition_Accessor;
}

uci::type::CommIFDL_NetLinkStatusType& CommIFDL_NetLinkStatusType::setPeerFlightPosition(uci::type::IFDL_FlightPositionTypeValue value) {
  peerFlightPosition_Accessor = value;
  return *this;
}


const uci::type::CommIFDL_CommModeEnum& CommIFDL_NetLinkStatusType::getCommunicationMode() const {
  return *communicationMode_Accessor;
}

uci::type::CommIFDL_CommModeEnum& CommIFDL_NetLinkStatusType::getCommunicationMode() {
  return *communicationMode_Accessor;
}

uci::type::CommIFDL_NetLinkStatusType& CommIFDL_NetLinkStatusType::setCommunicationMode(const uci::type::CommIFDL_CommModeEnum& accessor) {
  if (&accessor != communicationMode_Accessor.get()) {
    communicationMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommIFDL_NetLinkStatusType& CommIFDL_NetLinkStatusType::setCommunicationMode(uci::type::CommIFDL_CommModeEnum::EnumerationItem value) {
  communicationMode_Accessor->setValue(value);
  return *this;
}


uci::type::CommIFDL_TxRateEnum& CommIFDL_NetLinkStatusType::getTransmissionRate_() const {
  if (transmissionRate_Accessor) {
    return *transmissionRate_Accessor;
  }
  throw uci::base::UCIException("Error in getTransmissionRate(): An attempt was made to get an optional field that was not enabled, call hasTransmissionRate() to determine if it is safe to call getTransmissionRate()");
}

const uci::type::CommIFDL_TxRateEnum& CommIFDL_NetLinkStatusType::getTransmissionRate() const {
  return getTransmissionRate_();
}

uci::type::CommIFDL_TxRateEnum& CommIFDL_NetLinkStatusType::getTransmissionRate() {
  return getTransmissionRate_();
}

uci::type::CommIFDL_NetLinkStatusType& CommIFDL_NetLinkStatusType::setTransmissionRate(const uci::type::CommIFDL_TxRateEnum& accessor) {
  enableTransmissionRate();
  if (&accessor != transmissionRate_Accessor.get()) {
    transmissionRate_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommIFDL_NetLinkStatusType& CommIFDL_NetLinkStatusType::setTransmissionRate(const uci::type::CommIFDL_TxRateEnum::EnumerationItem value) {
  enableTransmissionRate().setValue(value);
  return *this;
}

bool CommIFDL_NetLinkStatusType::hasTransmissionRate() const noexcept {
  return static_cast<bool>(transmissionRate_Accessor);
}

uci::type::CommIFDL_TxRateEnum& CommIFDL_NetLinkStatusType::enableTransmissionRate(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commIFDL_TxRateEnum : type};
  if ((!transmissionRate_Accessor) || (transmissionRate_Accessor->getAccessorType() != requestedType)) {
    transmissionRate_Accessor = CommIFDL_TxRateEnum::create(requestedType);
    if (!transmissionRate_Accessor) {
      throw uci::base::UCIException("Error in enableTransmissionRate(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *transmissionRate_Accessor;
}

uci::type::CommIFDL_NetLinkStatusType& CommIFDL_NetLinkStatusType::clearTransmissionRate() noexcept {
  transmissionRate_Accessor.reset();
  return *this;
}

xs::Boolean CommIFDL_NetLinkStatusType::getMaxRangeApproached() const {
  if (maxRangeApproached_Accessor) {
    return *maxRangeApproached_Accessor;
  }
  throw uci::base::UCIException("Error in getMaxRangeApproached(): An attempt was made to get an optional field that was not enabled, call hasMaxRangeApproached() to determine if it is safe to call getMaxRangeApproached()");
}

uci::type::CommIFDL_NetLinkStatusType& CommIFDL_NetLinkStatusType::setMaxRangeApproached(xs::Boolean value) {
  maxRangeApproached_Accessor = value;
  return *this;
}

bool CommIFDL_NetLinkStatusType::hasMaxRangeApproached() const noexcept {
  return maxRangeApproached_Accessor.has_value();
}

uci::type::CommIFDL_NetLinkStatusType& CommIFDL_NetLinkStatusType::clearMaxRangeApproached() noexcept {
  maxRangeApproached_Accessor.reset();
  return *this;
}

std::unique_ptr<CommIFDL_NetLinkStatusType> CommIFDL_NetLinkStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commIFDL_NetLinkStatusType : type};
  return (requestedType == uci::type::accessorType::commIFDL_NetLinkStatusType) ? boost::make_unique<CommIFDL_NetLinkStatusType>() : nullptr;
}

/**  */
namespace CommIFDL_NetLinkStatusType_Names {

constexpr const char* Extern_Type_Name{"CommIFDL_NetLinkStatusType"};
constexpr const char* NetworkLinkID_Name{"NetworkLinkID"};
constexpr const char* PeerFlightIdentifier_Name{"PeerFlightIdentifier"};
constexpr const char* PeerFlightPosition_Name{"PeerFlightPosition"};
constexpr const char* CommunicationMode_Name{"CommunicationMode"};
constexpr const char* TransmissionRate_Name{"TransmissionRate"};
constexpr const char* MaxRangeApproached_Name{"MaxRangeApproached"};

} // namespace CommIFDL_NetLinkStatusType_Names

void CommIFDL_NetLinkStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommIFDL_NetLinkStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommIFDL_NetLinkStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommIFDL_NetLinkStatusType_Names::NetworkLinkID_Name) {
      NetworkLinkID_Type::deserialize(valueType.second, accessor.getNetworkLinkID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommIFDL_NetLinkStatusType_Names::PeerFlightIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeerFlightIdentifier(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommIFDL_NetLinkStatusType_Names::PeerFlightPosition_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeerFlightPosition(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommIFDL_NetLinkStatusType_Names::CommunicationMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCommunicationMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommIFDL_NetLinkStatusType_Names::TransmissionRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTransmissionRate().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommIFDL_NetLinkStatusType_Names::MaxRangeApproached_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxRangeApproached(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string CommIFDL_NetLinkStatusType::serialize(const uci::type::CommIFDL_NetLinkStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommIFDL_NetLinkStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommIFDL_NetLinkStatusType_Names::Extern_Type_Name);
  }
  NetworkLinkID_Type::serialize(accessor.getNetworkLinkID(), node, CommIFDL_NetLinkStatusType_Names::NetworkLinkID_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getPeerFlightIdentifier(), node, CommIFDL_NetLinkStatusType_Names::PeerFlightIdentifier_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getPeerFlightPosition(), node, CommIFDL_NetLinkStatusType_Names::PeerFlightPosition_Name);
  CommIFDL_CommModeEnum::serialize(accessor.getCommunicationMode(), node, CommIFDL_NetLinkStatusType_Names::CommunicationMode_Name, false);
  if (accessor.hasTransmissionRate()) {
    CommIFDL_TxRateEnum::serialize(accessor.getTransmissionRate(), node, CommIFDL_NetLinkStatusType_Names::TransmissionRate_Name, false);
  }
  if (accessor.hasMaxRangeApproached()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getMaxRangeApproached(), node, CommIFDL_NetLinkStatusType_Names::MaxRangeApproached_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommIFDL_NetLinkStatusType& CommIFDL_NetLinkStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommIFDL_NetLinkStatusType>().release());
}

uci::type::CommIFDL_NetLinkStatusType& CommIFDL_NetLinkStatusType::create(const uci::type::CommIFDL_NetLinkStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommIFDL_NetLinkStatusType> newAccessor{boost::make_unique<asb_uci::type::CommIFDL_NetLinkStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommIFDL_NetLinkStatusType::destroy(uci::type::CommIFDL_NetLinkStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::CommIFDL_NetLinkStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

