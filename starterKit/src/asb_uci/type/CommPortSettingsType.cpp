/** @file CommPortSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommPortSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/IO_PortOpenCloseStateEnum.h"
#include "../../../include/asb_uci/type/ParityTypeEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommPortSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataRateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IO_PortOpenCloseStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ParityTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommPortSettingsType::CommPortSettingsType()
  : openCloseState_Accessor{boost::make_unique<IO_PortOpenCloseStateEnum>()},
    parity_Accessor{boost::make_unique<ParityTypeEnum>()} {
}

CommPortSettingsType::~CommPortSettingsType() = default;

void CommPortSettingsType::copy(const uci::type::CommPortSettingsType& accessor) {
  copyImpl(accessor, false);
}

void CommPortSettingsType::copyImpl(const uci::type::CommPortSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommPortSettingsType&>(accessor);
    if (accessorImpl.comPortKey_Accessor) {
      setComPortKey(*(accessorImpl.comPortKey_Accessor));
    } else {
      comPortKey_Accessor.reset();
    }
    setOpenCloseState(*(accessorImpl.openCloseState_Accessor));
    setBaudRate(accessorImpl.baudRate_Accessor);
    setCharWidth(accessorImpl.charWidth_Accessor);
    setParity(*(accessorImpl.parity_Accessor));
    if (accessorImpl.hasStopBits()) {
      setStopBits(accessorImpl.getStopBits());
    } else {
      clearStopBits();
    }
  }
}

void CommPortSettingsType::reset() noexcept {
  comPortKey_Accessor.reset();
  openCloseState_Accessor->reset();
  baudRate_Accessor = 0;
  charWidth_Accessor = 0;
  parity_Accessor->reset();
  clearStopBits();
}

uci::type::ForeignKeyType& CommPortSettingsType::getComPortKey_() const {
  if (comPortKey_Accessor) {
    return *comPortKey_Accessor;
  }
  throw uci::base::UCIException("Error in getComPortKey(): An attempt was made to get an optional field that was not enabled, call hasComPortKey() to determine if it is safe to call getComPortKey()");
}

const uci::type::ForeignKeyType& CommPortSettingsType::getComPortKey() const {
  return getComPortKey_();
}

uci::type::ForeignKeyType& CommPortSettingsType::getComPortKey() {
  return getComPortKey_();
}

uci::type::CommPortSettingsType& CommPortSettingsType::setComPortKey(const uci::type::ForeignKeyType& accessor) {
  enableComPortKey(accessor.getAccessorType());
  if (&accessor != comPortKey_Accessor.get()) {
    comPortKey_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CommPortSettingsType::hasComPortKey() const noexcept {
  return static_cast<bool>(comPortKey_Accessor);
}

uci::type::ForeignKeyType& CommPortSettingsType::enableComPortKey(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!comPortKey_Accessor) || (comPortKey_Accessor->getAccessorType() != requestedType)) {
    comPortKey_Accessor = ForeignKeyType::create(requestedType);
    if (!comPortKey_Accessor) {
      throw uci::base::UCIException("Error in enableComPortKey(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *comPortKey_Accessor;
}

uci::type::CommPortSettingsType& CommPortSettingsType::clearComPortKey() noexcept {
  comPortKey_Accessor.reset();
  return *this;
}

const uci::type::IO_PortOpenCloseStateEnum& CommPortSettingsType::getOpenCloseState() const {
  return *openCloseState_Accessor;
}

uci::type::IO_PortOpenCloseStateEnum& CommPortSettingsType::getOpenCloseState() {
  return *openCloseState_Accessor;
}

uci::type::CommPortSettingsType& CommPortSettingsType::setOpenCloseState(const uci::type::IO_PortOpenCloseStateEnum& accessor) {
  if (&accessor != openCloseState_Accessor.get()) {
    openCloseState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommPortSettingsType& CommPortSettingsType::setOpenCloseState(uci::type::IO_PortOpenCloseStateEnum::EnumerationItem value) {
  openCloseState_Accessor->setValue(value);
  return *this;
}


uci::type::DataRateTypeValue CommPortSettingsType::getBaudRate() const {
  return baudRate_Accessor;
}

uci::type::CommPortSettingsType& CommPortSettingsType::setBaudRate(uci::type::DataRateTypeValue value) {
  baudRate_Accessor = value;
  return *this;
}


xs::Int CommPortSettingsType::getCharWidth() const {
  return charWidth_Accessor;
}

uci::type::CommPortSettingsType& CommPortSettingsType::setCharWidth(xs::Int value) {
  charWidth_Accessor = value;
  return *this;
}


const uci::type::ParityTypeEnum& CommPortSettingsType::getParity() const {
  return *parity_Accessor;
}

uci::type::ParityTypeEnum& CommPortSettingsType::getParity() {
  return *parity_Accessor;
}

uci::type::CommPortSettingsType& CommPortSettingsType::setParity(const uci::type::ParityTypeEnum& accessor) {
  if (&accessor != parity_Accessor.get()) {
    parity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommPortSettingsType& CommPortSettingsType::setParity(uci::type::ParityTypeEnum::EnumerationItem value) {
  parity_Accessor->setValue(value);
  return *this;
}


xs::Int CommPortSettingsType::getStopBits() const {
  if (stopBits_Accessor) {
    return *stopBits_Accessor;
  }
  throw uci::base::UCIException("Error in getStopBits(): An attempt was made to get an optional field that was not enabled, call hasStopBits() to determine if it is safe to call getStopBits()");
}

uci::type::CommPortSettingsType& CommPortSettingsType::setStopBits(xs::Int value) {
  stopBits_Accessor = value;
  return *this;
}

bool CommPortSettingsType::hasStopBits() const noexcept {
  return stopBits_Accessor.has_value();
}

uci::type::CommPortSettingsType& CommPortSettingsType::clearStopBits() noexcept {
  stopBits_Accessor.reset();
  return *this;
}

std::unique_ptr<CommPortSettingsType> CommPortSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commPortSettingsType : type};
  return (requestedType == uci::type::accessorType::commPortSettingsType) ? boost::make_unique<CommPortSettingsType>() : nullptr;
}

/**  */
namespace CommPortSettingsType_Names {

constexpr const char* Extern_Type_Name{"CommPortSettingsType"};
constexpr const char* ComPortKey_Name{"ComPortKey"};
constexpr const char* OpenCloseState_Name{"OpenCloseState"};
constexpr const char* BaudRate_Name{"BaudRate"};
constexpr const char* CharWidth_Name{"CharWidth"};
constexpr const char* Parity_Name{"Parity"};
constexpr const char* StopBits_Name{"StopBits"};

} // namespace CommPortSettingsType_Names

void CommPortSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommPortSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommPortSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommPortSettingsType_Names::ComPortKey_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableComPortKey(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommPortSettingsType_Names::OpenCloseState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getOpenCloseState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommPortSettingsType_Names::BaudRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBaudRate(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CommPortSettingsType_Names::CharWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCharWidth(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + CommPortSettingsType_Names::Parity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getParity().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommPortSettingsType_Names::StopBits_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStopBits(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    }
  }
}

std::string CommPortSettingsType::serialize(const uci::type::CommPortSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommPortSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommPortSettingsType_Names::Extern_Type_Name);
  }
  if (accessor.hasComPortKey()) {
    ForeignKeyType::serialize(accessor.getComPortKey(), node, CommPortSettingsType_Names::ComPortKey_Name);
  }
  IO_PortOpenCloseStateEnum::serialize(accessor.getOpenCloseState(), node, CommPortSettingsType_Names::OpenCloseState_Name, false);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getBaudRate(), node, CommPortSettingsType_Names::BaudRate_Name);
  asb_uci::util::SerializationHelpers::serializeInt(accessor.getCharWidth(), node, CommPortSettingsType_Names::CharWidth_Name);
  ParityTypeEnum::serialize(accessor.getParity(), node, CommPortSettingsType_Names::Parity_Name, false);
  if (accessor.hasStopBits()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getStopBits(), node, CommPortSettingsType_Names::StopBits_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommPortSettingsType& CommPortSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommPortSettingsType>().release());
}

uci::type::CommPortSettingsType& CommPortSettingsType::create(const uci::type::CommPortSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommPortSettingsType> newAccessor{boost::make_unique<asb_uci::type::CommPortSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommPortSettingsType::destroy(uci::type::CommPortSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::CommPortSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

