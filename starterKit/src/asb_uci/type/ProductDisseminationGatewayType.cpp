/** @file ProductDisseminationGatewayType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ProductDisseminationGatewayType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AttributedURI_Type.h"
#include "asb_uci/type/CommConfigurationID_Type.h"
#include "asb_uci/type/DataLinkNativeInfoPET.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AttributedURI_Type.h"
#include "uci/type/CommConfigurationID_Type.h"
#include "uci/type/DataLinkNativeInfoPET.h"
#include "uci/type/ProductDisseminationGatewayType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductDisseminationGatewayType::ProductDisseminationGatewayType() = default;

ProductDisseminationGatewayType::~ProductDisseminationGatewayType() = default;

void ProductDisseminationGatewayType::copy(const uci::type::ProductDisseminationGatewayType& accessor) {
  copyImpl(accessor, false);
}

void ProductDisseminationGatewayType::copyImpl(const uci::type::ProductDisseminationGatewayType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ProductDisseminationGatewayType&>(accessor);
    if (accessorImpl.address_Accessor) {
      setAddress(*(accessorImpl.address_Accessor));
    } else {
      address_Accessor.reset();
    }
    if (accessorImpl.configurationID_Accessor) {
      setConfigurationID(*(accessorImpl.configurationID_Accessor));
    } else {
      configurationID_Accessor.reset();
    }
    if (accessorImpl.dataLinkNativeInfo_Accessor) {
      setDataLinkNativeInfo(*(accessorImpl.dataLinkNativeInfo_Accessor));
    } else {
      dataLinkNativeInfo_Accessor.reset();
    }
  }
}

void ProductDisseminationGatewayType::reset() noexcept {
  address_Accessor.reset();
  configurationID_Accessor.reset();
  dataLinkNativeInfo_Accessor.reset();
}

uci::type::AttributedURI_Type& ProductDisseminationGatewayType::getAddress_() const {
  if (address_Accessor) {
    return *address_Accessor;
  }
  throw uci::base::UCIException("Error in getAddress(): An attempt was made to get an optional field that was not enabled, call hasAddress() to determine if it is safe to call getAddress()");
}

const uci::type::AttributedURI_Type& ProductDisseminationGatewayType::getAddress() const {
  return getAddress_();
}

uci::type::AttributedURI_Type& ProductDisseminationGatewayType::getAddress() {
  return getAddress_();
}

uci::type::ProductDisseminationGatewayType& ProductDisseminationGatewayType::setAddress(const uci::type::AttributedURI_Type& value) {
  return setAddress(value.c_str());
}

uci::type::ProductDisseminationGatewayType& ProductDisseminationGatewayType::setAddress(const std::string& value) {
  return setAddress(value.c_str());
}

uci::type::ProductDisseminationGatewayType& ProductDisseminationGatewayType::setAddress(const char* value) {
  enableAddress().setStringValue(value);
  return *this;
}

bool ProductDisseminationGatewayType::hasAddress() const noexcept {
  return static_cast<bool>(address_Accessor);
}

uci::type::AttributedURI_Type& ProductDisseminationGatewayType::enableAddress(uci::base::accessorType::AccessorType type) {
  if (!address_Accessor) {
    address_Accessor = AttributedURI_Type::create(type);
  }
  return *address_Accessor;
}

uci::type::ProductDisseminationGatewayType& ProductDisseminationGatewayType::clearAddress() noexcept {
  address_Accessor.reset();
  return *this;
}

uci::type::CommConfigurationID_Type& ProductDisseminationGatewayType::getConfigurationID_() const {
  if (configurationID_Accessor) {
    return *configurationID_Accessor;
  }
  throw uci::base::UCIException("Error in getConfigurationID(): An attempt was made to get an optional field that was not enabled, call hasConfigurationID() to determine if it is safe to call getConfigurationID()");
}

const uci::type::CommConfigurationID_Type& ProductDisseminationGatewayType::getConfigurationID() const {
  return getConfigurationID_();
}

uci::type::CommConfigurationID_Type& ProductDisseminationGatewayType::getConfigurationID() {
  return getConfigurationID_();
}

uci::type::ProductDisseminationGatewayType& ProductDisseminationGatewayType::setConfigurationID(const uci::type::CommConfigurationID_Type& accessor) {
  enableConfigurationID();
  if (&accessor != configurationID_Accessor.get()) {
    configurationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductDisseminationGatewayType::hasConfigurationID() const noexcept {
  return static_cast<bool>(configurationID_Accessor);
}

uci::type::CommConfigurationID_Type& ProductDisseminationGatewayType::enableConfigurationID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commConfigurationID_Type : type};
  if ((!configurationID_Accessor) || (configurationID_Accessor->getAccessorType() != requestedType)) {
    configurationID_Accessor = CommConfigurationID_Type::create(requestedType);
    if (!configurationID_Accessor) {
      throw uci::base::UCIException("Error in enableConfigurationID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *configurationID_Accessor;
}

uci::type::ProductDisseminationGatewayType& ProductDisseminationGatewayType::clearConfigurationID() noexcept {
  configurationID_Accessor.reset();
  return *this;
}

uci::type::DataLinkNativeInfoPET& ProductDisseminationGatewayType::getDataLinkNativeInfo_() const {
  if (dataLinkNativeInfo_Accessor) {
    return *dataLinkNativeInfo_Accessor;
  }
  throw uci::base::UCIException("Error in getDataLinkNativeInfo(): An attempt was made to get an optional field that was not enabled, call hasDataLinkNativeInfo() to determine if it is safe to call getDataLinkNativeInfo()");
}

const uci::type::DataLinkNativeInfoPET& ProductDisseminationGatewayType::getDataLinkNativeInfo() const {
  return getDataLinkNativeInfo_();
}

uci::type::DataLinkNativeInfoPET& ProductDisseminationGatewayType::getDataLinkNativeInfo() {
  return getDataLinkNativeInfo_();
}

uci::type::ProductDisseminationGatewayType& ProductDisseminationGatewayType::setDataLinkNativeInfo(const uci::type::DataLinkNativeInfoPET& accessor) {
  enableDataLinkNativeInfo(accessor.getAccessorType());
  if (&accessor != dataLinkNativeInfo_Accessor.get()) {
    dataLinkNativeInfo_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ProductDisseminationGatewayType::hasDataLinkNativeInfo() const noexcept {
  return static_cast<bool>(dataLinkNativeInfo_Accessor);
}

uci::type::DataLinkNativeInfoPET& ProductDisseminationGatewayType::enableDataLinkNativeInfo(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataLinkNativeInfoPET : type};
  if ((!dataLinkNativeInfo_Accessor) || (dataLinkNativeInfo_Accessor->getAccessorType() != requestedType)) {
    dataLinkNativeInfo_Accessor = DataLinkNativeInfoPET::create(requestedType);
    if (!dataLinkNativeInfo_Accessor) {
      throw uci::base::UCIException("Error in enableDataLinkNativeInfo(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dataLinkNativeInfo_Accessor;
}

uci::type::ProductDisseminationGatewayType& ProductDisseminationGatewayType::clearDataLinkNativeInfo() noexcept {
  dataLinkNativeInfo_Accessor.reset();
  return *this;
}

std::unique_ptr<ProductDisseminationGatewayType> ProductDisseminationGatewayType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productDisseminationGatewayType : type};
  return (requestedType == uci::type::accessorType::productDisseminationGatewayType) ? boost::make_unique<ProductDisseminationGatewayType>() : nullptr;
}

/**  */
namespace ProductDisseminationGatewayType_Names {

constexpr const char* Extern_Type_Name{"ProductDisseminationGatewayType"};
constexpr const char* Address_Name{"Address"};
constexpr const char* ConfigurationID_Name{"ConfigurationID"};
constexpr const char* DataLinkNativeInfo_Name{"DataLinkNativeInfo"};

} // namespace ProductDisseminationGatewayType_Names

void ProductDisseminationGatewayType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductDisseminationGatewayType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductDisseminationGatewayType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductDisseminationGatewayType_Names::Address_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAddress(*value);
      }
    } else if (valueType.first == nsPrefix + ProductDisseminationGatewayType_Names::ConfigurationID_Name) {
      CommConfigurationID_Type::deserialize(valueType.second, accessor.enableConfigurationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductDisseminationGatewayType_Names::DataLinkNativeInfo_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDataLinkNativeInfo(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string ProductDisseminationGatewayType::serialize(const uci::type::ProductDisseminationGatewayType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductDisseminationGatewayType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductDisseminationGatewayType_Names::Extern_Type_Name);
  }
  if (accessor.hasAddress()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getAddress(), node, ProductDisseminationGatewayType_Names::Address_Name);
  }
  if (accessor.hasConfigurationID()) {
    CommConfigurationID_Type::serialize(accessor.getConfigurationID(), node, ProductDisseminationGatewayType_Names::ConfigurationID_Name);
  }
  if (accessor.hasDataLinkNativeInfo()) {
    DataLinkNativeInfoPET::serialize(accessor.getDataLinkNativeInfo(), node, ProductDisseminationGatewayType_Names::DataLinkNativeInfo_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductDisseminationGatewayType& ProductDisseminationGatewayType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductDisseminationGatewayType>().release());
}

uci::type::ProductDisseminationGatewayType& ProductDisseminationGatewayType::create(const uci::type::ProductDisseminationGatewayType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductDisseminationGatewayType> newAccessor{boost::make_unique<asb_uci::type::ProductDisseminationGatewayType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductDisseminationGatewayType::destroy(uci::type::ProductDisseminationGatewayType& accessor) {
  delete dynamic_cast<asb_uci::type::ProductDisseminationGatewayType*>(&accessor);
}

} // namespace type

} // namespace uci

