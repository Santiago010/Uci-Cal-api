/** @file OpZoneCategoryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OpZoneCategoryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ConstrainedEntryExitType.h"
#include "asb_uci/type/IngressEgressType.h"
#include "asb_uci/type/OpZoneFilterAreaPET.h"
#include "asb_uci/type/OpZoneJammingType.h"
#include "asb_uci/type/OpZoneMissileDataType.h"
#include "asb_uci/type/OpZoneNoFireType.h"
#include "asb_uci/type/OpZoneNoFlyType.h"
#include "asb_uci/type/OpZoneWeaponRestrictionType.h"
#include "asb_uci/type/OpZoneWeatherType.h"
#include "asb_uci/type/VehicleCommandDataType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ConstrainedEntryExitType.h"
#include "uci/type/IngressEgressType.h"
#include "uci/type/OpZoneCategoryType.h"
#include "uci/type/OpZoneFilterAreaPET.h"
#include "uci/type/OpZoneJammingType.h"
#include "uci/type/OpZoneMissileDataType.h"
#include "uci/type/OpZoneNoFireType.h"
#include "uci/type/OpZoneNoFlyType.h"
#include "uci/type/OpZoneWeaponRestrictionType.h"
#include "uci/type/OpZoneWeatherType.h"
#include "uci/type/VehicleCommandDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpZoneCategoryType::OpZoneCategoryType() = default;

OpZoneCategoryType::~OpZoneCategoryType() = default;

void OpZoneCategoryType::copy(const uci::type::OpZoneCategoryType& accessor) {
  copyImpl(accessor, false);
}

void OpZoneCategoryType::copyImpl(const uci::type::OpZoneCategoryType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OpZoneCategoryType&>(accessor);
    if (accessorImpl.constrainedEntryExit_Accessor) {
      setConstrainedEntryExit(*(accessorImpl.constrainedEntryExit_Accessor));
    } else {
      constrainedEntryExit_Accessor.reset();
    }
    if (accessorImpl.filterArea_Accessor) {
      setFilterArea(*(accessorImpl.filterArea_Accessor));
    } else {
      filterArea_Accessor.reset();
    }
    if (accessorImpl.jamming_Accessor) {
      setJamming(*(accessorImpl.jamming_Accessor));
    } else {
      jamming_Accessor.reset();
    }
    if (accessorImpl.keepIn_Accessor) {
      setKeepIn(*(accessorImpl.keepIn_Accessor));
    } else {
      keepIn_Accessor.reset();
    }
    if (accessorImpl.missileLaunchPoint_Accessor) {
      setMissileLaunchPoint(*(accessorImpl.missileLaunchPoint_Accessor));
    } else {
      missileLaunchPoint_Accessor.reset();
    }
    if (accessorImpl.noFire_Accessor) {
      setNoFire(*(accessorImpl.noFire_Accessor));
    } else {
      noFire_Accessor.reset();
    }
    if (accessorImpl.noFly_Accessor) {
      setNoFly(*(accessorImpl.noFly_Accessor));
    } else {
      noFly_Accessor.reset();
    }
    if (accessorImpl.vehicleConfiguration_Accessor) {
      setVehicleConfiguration(*(accessorImpl.vehicleConfiguration_Accessor));
    } else {
      vehicleConfiguration_Accessor.reset();
    }
    if (accessorImpl.weaponRestriction_Accessor) {
      setWeaponRestriction(*(accessorImpl.weaponRestriction_Accessor));
    } else {
      weaponRestriction_Accessor.reset();
    }
    if (accessorImpl.weatherConditions_Accessor) {
      setWeatherConditions(*(accessorImpl.weatherConditions_Accessor));
    } else {
      weatherConditions_Accessor.reset();
    }
  }
}

void OpZoneCategoryType::reset() noexcept {
  constrainedEntryExit_Accessor.reset();
  filterArea_Accessor.reset();
  jamming_Accessor.reset();
  keepIn_Accessor.reset();
  missileLaunchPoint_Accessor.reset();
  noFire_Accessor.reset();
  noFly_Accessor.reset();
  vehicleConfiguration_Accessor.reset();
  weaponRestriction_Accessor.reset();
  weatherConditions_Accessor.reset();
}

uci::type::OpZoneCategoryType::OpZoneCategoryTypeChoice OpZoneCategoryType::getOpZoneCategoryTypeChoiceOrdinal() const noexcept {
  if (constrainedEntryExit_Accessor) {
    return OPZONECATEGORYTYPE_CHOICE_CONSTRAINEDENTRYEXIT;
  }
  if (filterArea_Accessor) {
    return OPZONECATEGORYTYPE_CHOICE_FILTERAREA;
  }
  if (jamming_Accessor) {
    return OPZONECATEGORYTYPE_CHOICE_JAMMING;
  }
  if (keepIn_Accessor) {
    return OPZONECATEGORYTYPE_CHOICE_KEEPIN;
  }
  if (missileLaunchPoint_Accessor) {
    return OPZONECATEGORYTYPE_CHOICE_MISSILELAUNCHPOINT;
  }
  if (noFire_Accessor) {
    return OPZONECATEGORYTYPE_CHOICE_NOFIRE;
  }
  if (noFly_Accessor) {
    return OPZONECATEGORYTYPE_CHOICE_NOFLY;
  }
  if (vehicleConfiguration_Accessor) {
    return OPZONECATEGORYTYPE_CHOICE_VEHICLECONFIGURATION;
  }
  if (weaponRestriction_Accessor) {
    return OPZONECATEGORYTYPE_CHOICE_WEAPONRESTRICTION;
  }
  if (weatherConditions_Accessor) {
    return OPZONECATEGORYTYPE_CHOICE_WEATHERCONDITIONS;
  }
  return OPZONECATEGORYTYPE_CHOICE_NONE;
}

uci::type::OpZoneCategoryType& OpZoneCategoryType::setOpZoneCategoryTypeChoiceOrdinal(uci::type::OpZoneCategoryType::OpZoneCategoryTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case OPZONECATEGORYTYPE_CHOICE_CONSTRAINEDENTRYEXIT:
      chooseConstrainedEntryExit("setOpZoneCategoryTypeChoiceOrdinal", type);
      break;
    case OPZONECATEGORYTYPE_CHOICE_FILTERAREA:
      chooseFilterArea();
      break;
    case OPZONECATEGORYTYPE_CHOICE_JAMMING:
      chooseJamming("setOpZoneCategoryTypeChoiceOrdinal", type);
      break;
    case OPZONECATEGORYTYPE_CHOICE_KEEPIN:
      chooseKeepIn("setOpZoneCategoryTypeChoiceOrdinal", type);
      break;
    case OPZONECATEGORYTYPE_CHOICE_MISSILELAUNCHPOINT:
      chooseMissileLaunchPoint("setOpZoneCategoryTypeChoiceOrdinal", type);
      break;
    case OPZONECATEGORYTYPE_CHOICE_NOFIRE:
      chooseNoFire("setOpZoneCategoryTypeChoiceOrdinal", type);
      break;
    case OPZONECATEGORYTYPE_CHOICE_NOFLY:
      chooseNoFly("setOpZoneCategoryTypeChoiceOrdinal", type);
      break;
    case OPZONECATEGORYTYPE_CHOICE_VEHICLECONFIGURATION:
      chooseVehicleConfiguration("setOpZoneCategoryTypeChoiceOrdinal", type);
      break;
    case OPZONECATEGORYTYPE_CHOICE_WEAPONRESTRICTION:
      chooseWeaponRestriction("setOpZoneCategoryTypeChoiceOrdinal", type);
      break;
    case OPZONECATEGORYTYPE_CHOICE_WEATHERCONDITIONS:
      chooseWeatherConditions("setOpZoneCategoryTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOpZoneCategoryTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ConstrainedEntryExitType& OpZoneCategoryType::getConstrainedEntryExit_() const {
  if (constrainedEntryExit_Accessor) {
    return *constrainedEntryExit_Accessor;
  }
  throw uci::base::UCIException("Error in getConstrainedEntryExit(): Unable to get ConstrainedEntryExit, field not selected");
}

const uci::type::ConstrainedEntryExitType& OpZoneCategoryType::getConstrainedEntryExit() const {
  return getConstrainedEntryExit_();
}

uci::type::ConstrainedEntryExitType& OpZoneCategoryType::getConstrainedEntryExit() {
  return getConstrainedEntryExit_();
}

uci::type::OpZoneCategoryType& OpZoneCategoryType::setConstrainedEntryExit(const uci::type::ConstrainedEntryExitType& accessor) {
  chooseConstrainedEntryExit();
  if (&accessor != constrainedEntryExit_Accessor.get()) {
    constrainedEntryExit_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpZoneCategoryType::isConstrainedEntryExit() const noexcept {
  return static_cast<bool>(constrainedEntryExit_Accessor);
}

uci::type::ConstrainedEntryExitType& OpZoneCategoryType::chooseConstrainedEntryExit(const std::string& method, uci::base::accessorType::AccessorType type) {
  filterArea_Accessor.reset();
  jamming_Accessor.reset();
  keepIn_Accessor.reset();
  missileLaunchPoint_Accessor.reset();
  noFire_Accessor.reset();
  noFly_Accessor.reset();
  vehicleConfiguration_Accessor.reset();
  weaponRestriction_Accessor.reset();
  weatherConditions_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::constrainedEntryExitType : type};
  if ((!constrainedEntryExit_Accessor) || (constrainedEntryExit_Accessor->getAccessorType() != requestedType)) {
    constrainedEntryExit_Accessor = ConstrainedEntryExitType::create(type);
    if (!constrainedEntryExit_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *constrainedEntryExit_Accessor;
}

uci::type::ConstrainedEntryExitType& OpZoneCategoryType::chooseConstrainedEntryExit(uci::base::accessorType::AccessorType type) {
  return chooseConstrainedEntryExit("chooseConstrainedEntryExit", type);
}

uci::type::OpZoneCategoryType::FilterArea& OpZoneCategoryType::getFilterArea_() const {
  if (filterArea_Accessor) {
    return *filterArea_Accessor;
  }
  throw uci::base::UCIException("Error in getFilterArea(): Unable to get FilterArea, field not selected");
}

const uci::type::OpZoneCategoryType::FilterArea& OpZoneCategoryType::getFilterArea() const {
  return getFilterArea_();
}

uci::type::OpZoneCategoryType::FilterArea& OpZoneCategoryType::getFilterArea() {
  return getFilterArea_();
}

uci::type::OpZoneCategoryType& OpZoneCategoryType::setFilterArea(const uci::type::OpZoneCategoryType::FilterArea& accessor) {
  chooseFilterArea();
  if (&accessor != filterArea_Accessor.get()) {
    filterArea_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpZoneCategoryType::isFilterArea() const noexcept {
  return static_cast<bool>(filterArea_Accessor);
}

uci::type::OpZoneCategoryType::FilterArea& OpZoneCategoryType::chooseFilterArea() {
  constrainedEntryExit_Accessor.reset();
  jamming_Accessor.reset();
  keepIn_Accessor.reset();
  missileLaunchPoint_Accessor.reset();
  noFire_Accessor.reset();
  noFly_Accessor.reset();
  vehicleConfiguration_Accessor.reset();
  weaponRestriction_Accessor.reset();
  weatherConditions_Accessor.reset();
  if (!filterArea_Accessor) {
    filterArea_Accessor = boost::make_unique<FilterArea>(1, SIZE_MAX);
  }
  return *filterArea_Accessor;
}

uci::type::OpZoneJammingType& OpZoneCategoryType::getJamming_() const {
  if (jamming_Accessor) {
    return *jamming_Accessor;
  }
  throw uci::base::UCIException("Error in getJamming(): Unable to get Jamming, field not selected");
}

const uci::type::OpZoneJammingType& OpZoneCategoryType::getJamming() const {
  return getJamming_();
}

uci::type::OpZoneJammingType& OpZoneCategoryType::getJamming() {
  return getJamming_();
}

uci::type::OpZoneCategoryType& OpZoneCategoryType::setJamming(const uci::type::OpZoneJammingType& accessor) {
  chooseJamming();
  if (&accessor != jamming_Accessor.get()) {
    jamming_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpZoneCategoryType::isJamming() const noexcept {
  return static_cast<bool>(jamming_Accessor);
}

uci::type::OpZoneJammingType& OpZoneCategoryType::chooseJamming(const std::string& method, uci::base::accessorType::AccessorType type) {
  constrainedEntryExit_Accessor.reset();
  filterArea_Accessor.reset();
  keepIn_Accessor.reset();
  missileLaunchPoint_Accessor.reset();
  noFire_Accessor.reset();
  noFly_Accessor.reset();
  vehicleConfiguration_Accessor.reset();
  weaponRestriction_Accessor.reset();
  weatherConditions_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneJammingType : type};
  if ((!jamming_Accessor) || (jamming_Accessor->getAccessorType() != requestedType)) {
    jamming_Accessor = OpZoneJammingType::create(type);
    if (!jamming_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *jamming_Accessor;
}

uci::type::OpZoneJammingType& OpZoneCategoryType::chooseJamming(uci::base::accessorType::AccessorType type) {
  return chooseJamming("chooseJamming", type);
}

uci::type::IngressEgressType& OpZoneCategoryType::getKeepIn_() const {
  if (keepIn_Accessor) {
    return *keepIn_Accessor;
  }
  throw uci::base::UCIException("Error in getKeepIn(): Unable to get KeepIn, field not selected");
}

const uci::type::IngressEgressType& OpZoneCategoryType::getKeepIn() const {
  return getKeepIn_();
}

uci::type::IngressEgressType& OpZoneCategoryType::getKeepIn() {
  return getKeepIn_();
}

uci::type::OpZoneCategoryType& OpZoneCategoryType::setKeepIn(const uci::type::IngressEgressType& accessor) {
  chooseKeepIn();
  if (&accessor != keepIn_Accessor.get()) {
    keepIn_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpZoneCategoryType::isKeepIn() const noexcept {
  return static_cast<bool>(keepIn_Accessor);
}

uci::type::IngressEgressType& OpZoneCategoryType::chooseKeepIn(const std::string& method, uci::base::accessorType::AccessorType type) {
  constrainedEntryExit_Accessor.reset();
  filterArea_Accessor.reset();
  jamming_Accessor.reset();
  missileLaunchPoint_Accessor.reset();
  noFire_Accessor.reset();
  noFly_Accessor.reset();
  vehicleConfiguration_Accessor.reset();
  weaponRestriction_Accessor.reset();
  weatherConditions_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ingressEgressType : type};
  if ((!keepIn_Accessor) || (keepIn_Accessor->getAccessorType() != requestedType)) {
    keepIn_Accessor = IngressEgressType::create(type);
    if (!keepIn_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *keepIn_Accessor;
}

uci::type::IngressEgressType& OpZoneCategoryType::chooseKeepIn(uci::base::accessorType::AccessorType type) {
  return chooseKeepIn("chooseKeepIn", type);
}

uci::type::OpZoneMissileDataType& OpZoneCategoryType::getMissileLaunchPoint_() const {
  if (missileLaunchPoint_Accessor) {
    return *missileLaunchPoint_Accessor;
  }
  throw uci::base::UCIException("Error in getMissileLaunchPoint(): Unable to get MissileLaunchPoint, field not selected");
}

const uci::type::OpZoneMissileDataType& OpZoneCategoryType::getMissileLaunchPoint() const {
  return getMissileLaunchPoint_();
}

uci::type::OpZoneMissileDataType& OpZoneCategoryType::getMissileLaunchPoint() {
  return getMissileLaunchPoint_();
}

uci::type::OpZoneCategoryType& OpZoneCategoryType::setMissileLaunchPoint(const uci::type::OpZoneMissileDataType& accessor) {
  chooseMissileLaunchPoint();
  if (&accessor != missileLaunchPoint_Accessor.get()) {
    missileLaunchPoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpZoneCategoryType::isMissileLaunchPoint() const noexcept {
  return static_cast<bool>(missileLaunchPoint_Accessor);
}

uci::type::OpZoneMissileDataType& OpZoneCategoryType::chooseMissileLaunchPoint(const std::string& method, uci::base::accessorType::AccessorType type) {
  constrainedEntryExit_Accessor.reset();
  filterArea_Accessor.reset();
  jamming_Accessor.reset();
  keepIn_Accessor.reset();
  noFire_Accessor.reset();
  noFly_Accessor.reset();
  vehicleConfiguration_Accessor.reset();
  weaponRestriction_Accessor.reset();
  weatherConditions_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneMissileDataType : type};
  if ((!missileLaunchPoint_Accessor) || (missileLaunchPoint_Accessor->getAccessorType() != requestedType)) {
    missileLaunchPoint_Accessor = OpZoneMissileDataType::create(type);
    if (!missileLaunchPoint_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missileLaunchPoint_Accessor;
}

uci::type::OpZoneMissileDataType& OpZoneCategoryType::chooseMissileLaunchPoint(uci::base::accessorType::AccessorType type) {
  return chooseMissileLaunchPoint("chooseMissileLaunchPoint", type);
}

uci::type::OpZoneNoFireType& OpZoneCategoryType::getNoFire_() const {
  if (noFire_Accessor) {
    return *noFire_Accessor;
  }
  throw uci::base::UCIException("Error in getNoFire(): Unable to get NoFire, field not selected");
}

const uci::type::OpZoneNoFireType& OpZoneCategoryType::getNoFire() const {
  return getNoFire_();
}

uci::type::OpZoneNoFireType& OpZoneCategoryType::getNoFire() {
  return getNoFire_();
}

uci::type::OpZoneCategoryType& OpZoneCategoryType::setNoFire(const uci::type::OpZoneNoFireType& accessor) {
  chooseNoFire();
  if (&accessor != noFire_Accessor.get()) {
    noFire_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpZoneCategoryType::isNoFire() const noexcept {
  return static_cast<bool>(noFire_Accessor);
}

uci::type::OpZoneNoFireType& OpZoneCategoryType::chooseNoFire(const std::string& method, uci::base::accessorType::AccessorType type) {
  constrainedEntryExit_Accessor.reset();
  filterArea_Accessor.reset();
  jamming_Accessor.reset();
  keepIn_Accessor.reset();
  missileLaunchPoint_Accessor.reset();
  noFly_Accessor.reset();
  vehicleConfiguration_Accessor.reset();
  weaponRestriction_Accessor.reset();
  weatherConditions_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneNoFireType : type};
  if ((!noFire_Accessor) || (noFire_Accessor->getAccessorType() != requestedType)) {
    noFire_Accessor = OpZoneNoFireType::create(type);
    if (!noFire_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *noFire_Accessor;
}

uci::type::OpZoneNoFireType& OpZoneCategoryType::chooseNoFire(uci::base::accessorType::AccessorType type) {
  return chooseNoFire("chooseNoFire", type);
}

uci::type::OpZoneNoFlyType& OpZoneCategoryType::getNoFly_() const {
  if (noFly_Accessor) {
    return *noFly_Accessor;
  }
  throw uci::base::UCIException("Error in getNoFly(): Unable to get NoFly, field not selected");
}

const uci::type::OpZoneNoFlyType& OpZoneCategoryType::getNoFly() const {
  return getNoFly_();
}

uci::type::OpZoneNoFlyType& OpZoneCategoryType::getNoFly() {
  return getNoFly_();
}

uci::type::OpZoneCategoryType& OpZoneCategoryType::setNoFly(const uci::type::OpZoneNoFlyType& accessor) {
  chooseNoFly();
  if (&accessor != noFly_Accessor.get()) {
    noFly_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpZoneCategoryType::isNoFly() const noexcept {
  return static_cast<bool>(noFly_Accessor);
}

uci::type::OpZoneNoFlyType& OpZoneCategoryType::chooseNoFly(const std::string& method, uci::base::accessorType::AccessorType type) {
  constrainedEntryExit_Accessor.reset();
  filterArea_Accessor.reset();
  jamming_Accessor.reset();
  keepIn_Accessor.reset();
  missileLaunchPoint_Accessor.reset();
  noFire_Accessor.reset();
  vehicleConfiguration_Accessor.reset();
  weaponRestriction_Accessor.reset();
  weatherConditions_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneNoFlyType : type};
  if ((!noFly_Accessor) || (noFly_Accessor->getAccessorType() != requestedType)) {
    noFly_Accessor = OpZoneNoFlyType::create(type);
    if (!noFly_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *noFly_Accessor;
}

uci::type::OpZoneNoFlyType& OpZoneCategoryType::chooseNoFly(uci::base::accessorType::AccessorType type) {
  return chooseNoFly("chooseNoFly", type);
}

uci::type::VehicleCommandDataType& OpZoneCategoryType::getVehicleConfiguration_() const {
  if (vehicleConfiguration_Accessor) {
    return *vehicleConfiguration_Accessor;
  }
  throw uci::base::UCIException("Error in getVehicleConfiguration(): Unable to get VehicleConfiguration, field not selected");
}

const uci::type::VehicleCommandDataType& OpZoneCategoryType::getVehicleConfiguration() const {
  return getVehicleConfiguration_();
}

uci::type::VehicleCommandDataType& OpZoneCategoryType::getVehicleConfiguration() {
  return getVehicleConfiguration_();
}

uci::type::OpZoneCategoryType& OpZoneCategoryType::setVehicleConfiguration(const uci::type::VehicleCommandDataType& accessor) {
  chooseVehicleConfiguration();
  if (&accessor != vehicleConfiguration_Accessor.get()) {
    vehicleConfiguration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpZoneCategoryType::isVehicleConfiguration() const noexcept {
  return static_cast<bool>(vehicleConfiguration_Accessor);
}

uci::type::VehicleCommandDataType& OpZoneCategoryType::chooseVehicleConfiguration(const std::string& method, uci::base::accessorType::AccessorType type) {
  constrainedEntryExit_Accessor.reset();
  filterArea_Accessor.reset();
  jamming_Accessor.reset();
  keepIn_Accessor.reset();
  missileLaunchPoint_Accessor.reset();
  noFire_Accessor.reset();
  noFly_Accessor.reset();
  weaponRestriction_Accessor.reset();
  weatherConditions_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleCommandDataType : type};
  if ((!vehicleConfiguration_Accessor) || (vehicleConfiguration_Accessor->getAccessorType() != requestedType)) {
    vehicleConfiguration_Accessor = VehicleCommandDataType::create(type);
    if (!vehicleConfiguration_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vehicleConfiguration_Accessor;
}

uci::type::VehicleCommandDataType& OpZoneCategoryType::chooseVehicleConfiguration(uci::base::accessorType::AccessorType type) {
  return chooseVehicleConfiguration("chooseVehicleConfiguration", type);
}

uci::type::OpZoneWeaponRestrictionType& OpZoneCategoryType::getWeaponRestriction_() const {
  if (weaponRestriction_Accessor) {
    return *weaponRestriction_Accessor;
  }
  throw uci::base::UCIException("Error in getWeaponRestriction(): Unable to get WeaponRestriction, field not selected");
}

const uci::type::OpZoneWeaponRestrictionType& OpZoneCategoryType::getWeaponRestriction() const {
  return getWeaponRestriction_();
}

uci::type::OpZoneWeaponRestrictionType& OpZoneCategoryType::getWeaponRestriction() {
  return getWeaponRestriction_();
}

uci::type::OpZoneCategoryType& OpZoneCategoryType::setWeaponRestriction(const uci::type::OpZoneWeaponRestrictionType& accessor) {
  chooseWeaponRestriction();
  if (&accessor != weaponRestriction_Accessor.get()) {
    weaponRestriction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpZoneCategoryType::isWeaponRestriction() const noexcept {
  return static_cast<bool>(weaponRestriction_Accessor);
}

uci::type::OpZoneWeaponRestrictionType& OpZoneCategoryType::chooseWeaponRestriction(const std::string& method, uci::base::accessorType::AccessorType type) {
  constrainedEntryExit_Accessor.reset();
  filterArea_Accessor.reset();
  jamming_Accessor.reset();
  keepIn_Accessor.reset();
  missileLaunchPoint_Accessor.reset();
  noFire_Accessor.reset();
  noFly_Accessor.reset();
  vehicleConfiguration_Accessor.reset();
  weatherConditions_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneWeaponRestrictionType : type};
  if ((!weaponRestriction_Accessor) || (weaponRestriction_Accessor->getAccessorType() != requestedType)) {
    weaponRestriction_Accessor = OpZoneWeaponRestrictionType::create(type);
    if (!weaponRestriction_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weaponRestriction_Accessor;
}

uci::type::OpZoneWeaponRestrictionType& OpZoneCategoryType::chooseWeaponRestriction(uci::base::accessorType::AccessorType type) {
  return chooseWeaponRestriction("chooseWeaponRestriction", type);
}

uci::type::OpZoneWeatherType& OpZoneCategoryType::getWeatherConditions_() const {
  if (weatherConditions_Accessor) {
    return *weatherConditions_Accessor;
  }
  throw uci::base::UCIException("Error in getWeatherConditions(): Unable to get WeatherConditions, field not selected");
}

const uci::type::OpZoneWeatherType& OpZoneCategoryType::getWeatherConditions() const {
  return getWeatherConditions_();
}

uci::type::OpZoneWeatherType& OpZoneCategoryType::getWeatherConditions() {
  return getWeatherConditions_();
}

uci::type::OpZoneCategoryType& OpZoneCategoryType::setWeatherConditions(const uci::type::OpZoneWeatherType& accessor) {
  chooseWeatherConditions();
  if (&accessor != weatherConditions_Accessor.get()) {
    weatherConditions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpZoneCategoryType::isWeatherConditions() const noexcept {
  return static_cast<bool>(weatherConditions_Accessor);
}

uci::type::OpZoneWeatherType& OpZoneCategoryType::chooseWeatherConditions(const std::string& method, uci::base::accessorType::AccessorType type) {
  constrainedEntryExit_Accessor.reset();
  filterArea_Accessor.reset();
  jamming_Accessor.reset();
  keepIn_Accessor.reset();
  missileLaunchPoint_Accessor.reset();
  noFire_Accessor.reset();
  noFly_Accessor.reset();
  vehicleConfiguration_Accessor.reset();
  weaponRestriction_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneWeatherType : type};
  if ((!weatherConditions_Accessor) || (weatherConditions_Accessor->getAccessorType() != requestedType)) {
    weatherConditions_Accessor = OpZoneWeatherType::create(type);
    if (!weatherConditions_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weatherConditions_Accessor;
}

uci::type::OpZoneWeatherType& OpZoneCategoryType::chooseWeatherConditions(uci::base::accessorType::AccessorType type) {
  return chooseWeatherConditions("chooseWeatherConditions", type);
}

std::unique_ptr<OpZoneCategoryType> OpZoneCategoryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneCategoryType : type};
  return (requestedType == uci::type::accessorType::opZoneCategoryType) ? boost::make_unique<OpZoneCategoryType>() : nullptr;
}

/**  */
namespace OpZoneCategoryType_Names {

constexpr const char* Extern_Type_Name{"OpZoneCategoryType"};
constexpr const char* ConstrainedEntryExit_Name{"ConstrainedEntryExit"};
constexpr const char* FilterArea_Name{"FilterArea"};
constexpr const char* Jamming_Name{"Jamming"};
constexpr const char* KeepIn_Name{"KeepIn"};
constexpr const char* MissileLaunchPoint_Name{"MissileLaunchPoint"};
constexpr const char* NoFire_Name{"NoFire"};
constexpr const char* NoFly_Name{"NoFly"};
constexpr const char* VehicleConfiguration_Name{"VehicleConfiguration"};
constexpr const char* WeaponRestriction_Name{"WeaponRestriction"};
constexpr const char* WeatherConditions_Name{"WeatherConditions"};

} // namespace OpZoneCategoryType_Names

void OpZoneCategoryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpZoneCategoryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpZoneCategoryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::ConstrainedEntryExit_Name) {
      ConstrainedEntryExitType::deserialize(valueType.second, accessor.chooseConstrainedEntryExit(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::FilterArea_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpZoneCategoryType::FilterArea& boundedList = accessor.chooseFilterArea();
        const uci::type::OpZoneCategoryType::FilterArea::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::Jamming_Name) {
      OpZoneJammingType::deserialize(valueType.second, accessor.chooseJamming(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::KeepIn_Name) {
      IngressEgressType::deserialize(valueType.second, accessor.chooseKeepIn(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::MissileLaunchPoint_Name) {
      OpZoneMissileDataType::deserialize(valueType.second, accessor.chooseMissileLaunchPoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::NoFire_Name) {
      OpZoneNoFireType::deserialize(valueType.second, accessor.chooseNoFire(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::NoFly_Name) {
      OpZoneNoFlyType::deserialize(valueType.second, accessor.chooseNoFly(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::VehicleConfiguration_Name) {
      VehicleCommandDataType::deserialize(valueType.second, accessor.chooseVehicleConfiguration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::WeaponRestriction_Name) {
      OpZoneWeaponRestrictionType::deserialize(valueType.second, accessor.chooseWeaponRestriction(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::WeatherConditions_Name) {
      OpZoneWeatherType::deserialize(valueType.second, accessor.chooseWeatherConditions(), nodeName, nsPrefix);
    }
  }
}

std::string OpZoneCategoryType::serialize(const uci::type::OpZoneCategoryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpZoneCategoryType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpZoneCategoryType_Names::Extern_Type_Name);
  }
  if (accessor.isConstrainedEntryExit()) {
    ConstrainedEntryExitType::serialize(accessor.getConstrainedEntryExit(), node, OpZoneCategoryType_Names::ConstrainedEntryExit_Name);
  } else if (accessor.isFilterArea()) {
    {
      const uci::type::OpZoneCategoryType::FilterArea& boundedList = accessor.getFilterArea();
      for (uci::type::OpZoneCategoryType::FilterArea::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::OpZoneFilterAreaPET::serialize(boundedList.at(i), node, OpZoneCategoryType_Names::FilterArea_Name);
      }
    }
  } else if (accessor.isJamming()) {
    OpZoneJammingType::serialize(accessor.getJamming(), node, OpZoneCategoryType_Names::Jamming_Name);
  } else if (accessor.isKeepIn()) {
    IngressEgressType::serialize(accessor.getKeepIn(), node, OpZoneCategoryType_Names::KeepIn_Name);
  } else if (accessor.isMissileLaunchPoint()) {
    OpZoneMissileDataType::serialize(accessor.getMissileLaunchPoint(), node, OpZoneCategoryType_Names::MissileLaunchPoint_Name);
  } else if (accessor.isNoFire()) {
    OpZoneNoFireType::serialize(accessor.getNoFire(), node, OpZoneCategoryType_Names::NoFire_Name);
  } else if (accessor.isNoFly()) {
    OpZoneNoFlyType::serialize(accessor.getNoFly(), node, OpZoneCategoryType_Names::NoFly_Name);
  } else if (accessor.isVehicleConfiguration()) {
    VehicleCommandDataType::serialize(accessor.getVehicleConfiguration(), node, OpZoneCategoryType_Names::VehicleConfiguration_Name);
  } else if (accessor.isWeaponRestriction()) {
    OpZoneWeaponRestrictionType::serialize(accessor.getWeaponRestriction(), node, OpZoneCategoryType_Names::WeaponRestriction_Name);
  } else if (accessor.isWeatherConditions()) {
    OpZoneWeatherType::serialize(accessor.getWeatherConditions(), node, OpZoneCategoryType_Names::WeatherConditions_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OpZoneCategoryType& OpZoneCategoryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OpZoneCategoryType>().release());
}

uci::type::OpZoneCategoryType& OpZoneCategoryType::create(const uci::type::OpZoneCategoryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OpZoneCategoryType> newAccessor{boost::make_unique<asb_uci::type::OpZoneCategoryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OpZoneCategoryType::destroy(uci::type::OpZoneCategoryType& accessor) {
  delete dynamic_cast<asb_uci::type::OpZoneCategoryType*>(&accessor);
}

} // namespace type

} // namespace uci

