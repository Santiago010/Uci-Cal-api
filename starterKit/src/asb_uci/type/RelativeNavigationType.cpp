/** @file RelativeNavigationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RelativeNavigationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/Point3D_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DistanceOffsetType.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/RelativeNavigationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RelativeNavigationType::RelativeNavigationType()
  : referencePoint_Accessor{boost::make_unique<Point3D_Type>()} {
}

RelativeNavigationType::~RelativeNavigationType() = default;

void RelativeNavigationType::copy(const uci::type::RelativeNavigationType& accessor) {
  copyImpl(accessor, false);
}

void RelativeNavigationType::copyImpl(const uci::type::RelativeNavigationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RelativeNavigationType&>(accessor);
    setReferencePoint(*(accessorImpl.referencePoint_Accessor));
    setOffsetNorth(accessorImpl.offsetNorth_Accessor);
    setOffsetEast(accessorImpl.offsetEast_Accessor);
    setOffsetDown(accessorImpl.offsetDown_Accessor);
  }
}

void RelativeNavigationType::reset() noexcept {
  if (referencePoint_Accessor->getAccessorType() != uci::type::accessorType::point3D_Type) {
    referencePoint_Accessor = boost::make_unique<Point3D_Type>();
  } else {
    referencePoint_Accessor->reset();
  }
  offsetNorth_Accessor = 0.0;
  offsetEast_Accessor = 0.0;
  offsetDown_Accessor = 0.0;
}

const uci::type::Point3D_Type& RelativeNavigationType::getReferencePoint() const {
  return *referencePoint_Accessor;
}

uci::type::Point3D_Type& RelativeNavigationType::getReferencePoint() {
  return *referencePoint_Accessor;
}

uci::type::RelativeNavigationType& RelativeNavigationType::setReferencePoint(const uci::type::Point3D_Type& accessor) {
  enableReferencePoint(accessor.getAccessorType());
  if (&accessor != referencePoint_Accessor.get()) {
    referencePoint_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point3D_Type& RelativeNavigationType::enableReferencePoint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!referencePoint_Accessor) || (referencePoint_Accessor->getAccessorType() != requestedType)) {
    referencePoint_Accessor = Point3D_Type::create(requestedType);
    if (!referencePoint_Accessor) {
      throw uci::base::UCIException("Error in enableReferencePoint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *referencePoint_Accessor;
}

uci::type::DistanceOffsetTypeValue RelativeNavigationType::getOffsetNorth() const {
  return offsetNorth_Accessor;
}

uci::type::RelativeNavigationType& RelativeNavigationType::setOffsetNorth(uci::type::DistanceOffsetTypeValue value) {
  offsetNorth_Accessor = value;
  return *this;
}


uci::type::DistanceOffsetTypeValue RelativeNavigationType::getOffsetEast() const {
  return offsetEast_Accessor;
}

uci::type::RelativeNavigationType& RelativeNavigationType::setOffsetEast(uci::type::DistanceOffsetTypeValue value) {
  offsetEast_Accessor = value;
  return *this;
}


uci::type::DistanceOffsetTypeValue RelativeNavigationType::getOffsetDown() const {
  return offsetDown_Accessor;
}

uci::type::RelativeNavigationType& RelativeNavigationType::setOffsetDown(uci::type::DistanceOffsetTypeValue value) {
  offsetDown_Accessor = value;
  return *this;
}


std::unique_ptr<RelativeNavigationType> RelativeNavigationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativeNavigationType : type};
  return (requestedType == uci::type::accessorType::relativeNavigationType) ? boost::make_unique<RelativeNavigationType>() : nullptr;
}

/**  */
namespace RelativeNavigationType_Names {

constexpr const char* Extern_Type_Name{"RelativeNavigationType"};
constexpr const char* ReferencePoint_Name{"ReferencePoint"};
constexpr const char* OffsetNorth_Name{"OffsetNorth"};
constexpr const char* OffsetEast_Name{"OffsetEast"};
constexpr const char* OffsetDown_Name{"OffsetDown"};

} // namespace RelativeNavigationType_Names

void RelativeNavigationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RelativeNavigationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RelativeNavigationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RelativeNavigationType_Names::ReferencePoint_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableReferencePoint(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RelativeNavigationType_Names::OffsetNorth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOffsetNorth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RelativeNavigationType_Names::OffsetEast_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOffsetEast(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RelativeNavigationType_Names::OffsetDown_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOffsetDown(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string RelativeNavigationType::serialize(const uci::type::RelativeNavigationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RelativeNavigationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RelativeNavigationType_Names::Extern_Type_Name);
  }
  Point3D_Type::serialize(accessor.getReferencePoint(), node, RelativeNavigationType_Names::ReferencePoint_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getOffsetNorth(), node, RelativeNavigationType_Names::OffsetNorth_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getOffsetEast(), node, RelativeNavigationType_Names::OffsetEast_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getOffsetDown(), node, RelativeNavigationType_Names::OffsetDown_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RelativeNavigationType& RelativeNavigationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RelativeNavigationType>().release());
}

uci::type::RelativeNavigationType& RelativeNavigationType::create(const uci::type::RelativeNavigationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RelativeNavigationType> newAccessor{boost::make_unique<asb_uci::type::RelativeNavigationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RelativeNavigationType::destroy(uci::type::RelativeNavigationType& accessor) {
  delete dynamic_cast<asb_uci::type::RelativeNavigationType*>(&accessor);
}

} // namespace type

} // namespace uci

