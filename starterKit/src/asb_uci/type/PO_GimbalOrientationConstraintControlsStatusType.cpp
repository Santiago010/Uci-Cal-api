/** @file PO_GimbalOrientationConstraintControlsStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_GimbalOrientationConstraintControlsStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentID_Type.h"
#include "../../../include/asb_uci/type/GimbalAxisControlStatusType.h"
#include "../../../include/asb_uci/type/PO_AngleConstraintControlsStatusType.h"
#include "../../../include/asb_uci/type/PO_GimbalOrientationReferenceFrameEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GimbalAxisControlStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_AngleConstraintControlsStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_GimbalOrientationConstraintControlsStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_GimbalOrientationReferenceFrameEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_GimbalOrientationConstraintControlsStatusType::PO_GimbalOrientationConstraintControlsStatusType()
  : referenceFrame_Accessor{boost::make_unique<PO_GimbalOrientationReferenceFrameEnum>()},
    axis_Accessor{boost::make_unique<Axis>(0, SIZE_MAX)} {
}

PO_GimbalOrientationConstraintControlsStatusType::~PO_GimbalOrientationConstraintControlsStatusType() = default;

void PO_GimbalOrientationConstraintControlsStatusType::copy(const uci::type::PO_GimbalOrientationConstraintControlsStatusType& accessor) {
  copyImpl(accessor, false);
}

void PO_GimbalOrientationConstraintControlsStatusType::copyImpl(const uci::type::PO_GimbalOrientationConstraintControlsStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_GimbalOrientationConstraintControlsStatusType&>(accessor);
    setReferenceFrame(*(accessorImpl.referenceFrame_Accessor));
    if (accessorImpl.componentID_Accessor) {
      setComponentID(*(accessorImpl.componentID_Accessor));
    } else {
      componentID_Accessor.reset();
    }
    if (accessorImpl.pitchAngle_Accessor) {
      setPitchAngle(*(accessorImpl.pitchAngle_Accessor));
    } else {
      pitchAngle_Accessor.reset();
    }
    if (accessorImpl.rollAngle_Accessor) {
      setRollAngle(*(accessorImpl.rollAngle_Accessor));
    } else {
      rollAngle_Accessor.reset();
    }
    if (accessorImpl.yawAngle_Accessor) {
      setYawAngle(*(accessorImpl.yawAngle_Accessor));
    } else {
      yawAngle_Accessor.reset();
    }
    setAxis(*(accessorImpl.axis_Accessor));
  }
}

void PO_GimbalOrientationConstraintControlsStatusType::reset() noexcept {
  referenceFrame_Accessor->reset();
  componentID_Accessor.reset();
  pitchAngle_Accessor.reset();
  rollAngle_Accessor.reset();
  yawAngle_Accessor.reset();
  axis_Accessor->reset();
}

const uci::type::PO_GimbalOrientationReferenceFrameEnum& PO_GimbalOrientationConstraintControlsStatusType::getReferenceFrame() const {
  return *referenceFrame_Accessor;
}

uci::type::PO_GimbalOrientationReferenceFrameEnum& PO_GimbalOrientationConstraintControlsStatusType::getReferenceFrame() {
  return *referenceFrame_Accessor;
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::setReferenceFrame(const uci::type::PO_GimbalOrientationReferenceFrameEnum& accessor) {
  if (&accessor != referenceFrame_Accessor.get()) {
    referenceFrame_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::setReferenceFrame(uci::type::PO_GimbalOrientationReferenceFrameEnum::EnumerationItem value) {
  referenceFrame_Accessor->setValue(value);
  return *this;
}


uci::type::ComponentID_Type& PO_GimbalOrientationConstraintControlsStatusType::getComponentID_() const {
  if (componentID_Accessor) {
    return *componentID_Accessor;
  }
  throw uci::base::UCIException("Error in getComponentID(): An attempt was made to get an optional field that was not enabled, call hasComponentID() to determine if it is safe to call getComponentID()");
}

const uci::type::ComponentID_Type& PO_GimbalOrientationConstraintControlsStatusType::getComponentID() const {
  return getComponentID_();
}

uci::type::ComponentID_Type& PO_GimbalOrientationConstraintControlsStatusType::getComponentID() {
  return getComponentID_();
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::setComponentID(const uci::type::ComponentID_Type& accessor) {
  enableComponentID();
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_GimbalOrientationConstraintControlsStatusType::hasComponentID() const noexcept {
  return static_cast<bool>(componentID_Accessor);
}

uci::type::ComponentID_Type& PO_GimbalOrientationConstraintControlsStatusType::enableComponentID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentID_Type : type};
  if ((!componentID_Accessor) || (componentID_Accessor->getAccessorType() != requestedType)) {
    componentID_Accessor = ComponentID_Type::create(requestedType);
    if (!componentID_Accessor) {
      throw uci::base::UCIException("Error in enableComponentID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *componentID_Accessor;
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::clearComponentID() noexcept {
  componentID_Accessor.reset();
  return *this;
}

uci::type::PO_AngleConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::getPitchAngle_() const {
  if (pitchAngle_Accessor) {
    return *pitchAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getPitchAngle(): An attempt was made to get an optional field that was not enabled, call hasPitchAngle() to determine if it is safe to call getPitchAngle()");
}

const uci::type::PO_AngleConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::getPitchAngle() const {
  return getPitchAngle_();
}

uci::type::PO_AngleConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::getPitchAngle() {
  return getPitchAngle_();
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::setPitchAngle(const uci::type::PO_AngleConstraintControlsStatusType& accessor) {
  enablePitchAngle();
  if (&accessor != pitchAngle_Accessor.get()) {
    pitchAngle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_GimbalOrientationConstraintControlsStatusType::hasPitchAngle() const noexcept {
  return static_cast<bool>(pitchAngle_Accessor);
}

uci::type::PO_AngleConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::enablePitchAngle(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsStatusType : type};
  if ((!pitchAngle_Accessor) || (pitchAngle_Accessor->getAccessorType() != requestedType)) {
    pitchAngle_Accessor = PO_AngleConstraintControlsStatusType::create(requestedType);
    if (!pitchAngle_Accessor) {
      throw uci::base::UCIException("Error in enablePitchAngle(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pitchAngle_Accessor;
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::clearPitchAngle() noexcept {
  pitchAngle_Accessor.reset();
  return *this;
}

uci::type::PO_AngleConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::getRollAngle_() const {
  if (rollAngle_Accessor) {
    return *rollAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getRollAngle(): An attempt was made to get an optional field that was not enabled, call hasRollAngle() to determine if it is safe to call getRollAngle()");
}

const uci::type::PO_AngleConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::getRollAngle() const {
  return getRollAngle_();
}

uci::type::PO_AngleConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::getRollAngle() {
  return getRollAngle_();
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::setRollAngle(const uci::type::PO_AngleConstraintControlsStatusType& accessor) {
  enableRollAngle();
  if (&accessor != rollAngle_Accessor.get()) {
    rollAngle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_GimbalOrientationConstraintControlsStatusType::hasRollAngle() const noexcept {
  return static_cast<bool>(rollAngle_Accessor);
}

uci::type::PO_AngleConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::enableRollAngle(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsStatusType : type};
  if ((!rollAngle_Accessor) || (rollAngle_Accessor->getAccessorType() != requestedType)) {
    rollAngle_Accessor = PO_AngleConstraintControlsStatusType::create(requestedType);
    if (!rollAngle_Accessor) {
      throw uci::base::UCIException("Error in enableRollAngle(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rollAngle_Accessor;
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::clearRollAngle() noexcept {
  rollAngle_Accessor.reset();
  return *this;
}

uci::type::PO_AngleConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::getYawAngle_() const {
  if (yawAngle_Accessor) {
    return *yawAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getYawAngle(): An attempt was made to get an optional field that was not enabled, call hasYawAngle() to determine if it is safe to call getYawAngle()");
}

const uci::type::PO_AngleConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::getYawAngle() const {
  return getYawAngle_();
}

uci::type::PO_AngleConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::getYawAngle() {
  return getYawAngle_();
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::setYawAngle(const uci::type::PO_AngleConstraintControlsStatusType& accessor) {
  enableYawAngle();
  if (&accessor != yawAngle_Accessor.get()) {
    yawAngle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_GimbalOrientationConstraintControlsStatusType::hasYawAngle() const noexcept {
  return static_cast<bool>(yawAngle_Accessor);
}

uci::type::PO_AngleConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::enableYawAngle(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsStatusType : type};
  if ((!yawAngle_Accessor) || (yawAngle_Accessor->getAccessorType() != requestedType)) {
    yawAngle_Accessor = PO_AngleConstraintControlsStatusType::create(requestedType);
    if (!yawAngle_Accessor) {
      throw uci::base::UCIException("Error in enableYawAngle(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *yawAngle_Accessor;
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::clearYawAngle() noexcept {
  yawAngle_Accessor.reset();
  return *this;
}

const uci::type::PO_GimbalOrientationConstraintControlsStatusType::Axis& PO_GimbalOrientationConstraintControlsStatusType::getAxis() const {
  return *axis_Accessor;
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType::Axis& PO_GimbalOrientationConstraintControlsStatusType::getAxis() {
  return *axis_Accessor;
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::setAxis(const uci::type::PO_GimbalOrientationConstraintControlsStatusType::Axis& accessor) {
  if (&accessor != axis_Accessor.get()) {
    axis_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PO_GimbalOrientationConstraintControlsStatusType> PO_GimbalOrientationConstraintControlsStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_GimbalOrientationConstraintControlsStatusType : type};
  return (requestedType == uci::type::accessorType::pO_GimbalOrientationConstraintControlsStatusType) ? boost::make_unique<PO_GimbalOrientationConstraintControlsStatusType>() : nullptr;
}

/**  */
namespace PO_GimbalOrientationConstraintControlsStatusType_Names {

constexpr const char* Extern_Type_Name{"PO_GimbalOrientationConstraintControlsStatusType"};
constexpr const char* ReferenceFrame_Name{"ReferenceFrame"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* PitchAngle_Name{"PitchAngle"};
constexpr const char* RollAngle_Name{"RollAngle"};
constexpr const char* YawAngle_Name{"YawAngle"};
constexpr const char* Axis_Name{"Axis"};

} // namespace PO_GimbalOrientationConstraintControlsStatusType_Names

void PO_GimbalOrientationConstraintControlsStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_GimbalOrientationConstraintControlsStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_GimbalOrientationConstraintControlsStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_GimbalOrientationConstraintControlsStatusType_Names::ReferenceFrame_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getReferenceFrame().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_GimbalOrientationConstraintControlsStatusType_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.enableComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_GimbalOrientationConstraintControlsStatusType_Names::PitchAngle_Name) {
      PO_AngleConstraintControlsStatusType::deserialize(valueType.second, accessor.enablePitchAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_GimbalOrientationConstraintControlsStatusType_Names::RollAngle_Name) {
      PO_AngleConstraintControlsStatusType::deserialize(valueType.second, accessor.enableRollAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_GimbalOrientationConstraintControlsStatusType_Names::YawAngle_Name) {
      PO_AngleConstraintControlsStatusType::deserialize(valueType.second, accessor.enableYawAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_GimbalOrientationConstraintControlsStatusType_Names::Axis_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_GimbalOrientationConstraintControlsStatusType::Axis& boundedList = accessor.getAxis();
        const uci::type::PO_GimbalOrientationConstraintControlsStatusType::Axis::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::GimbalAxisControlStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PO_GimbalOrientationConstraintControlsStatusType::serialize(const uci::type::PO_GimbalOrientationConstraintControlsStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_GimbalOrientationConstraintControlsStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_GimbalOrientationConstraintControlsStatusType_Names::Extern_Type_Name);
  }
  PO_GimbalOrientationReferenceFrameEnum::serialize(accessor.getReferenceFrame(), node, PO_GimbalOrientationConstraintControlsStatusType_Names::ReferenceFrame_Name, false);
  if (accessor.hasComponentID()) {
    ComponentID_Type::serialize(accessor.getComponentID(), node, PO_GimbalOrientationConstraintControlsStatusType_Names::ComponentID_Name);
  }
  if (accessor.hasPitchAngle()) {
    PO_AngleConstraintControlsStatusType::serialize(accessor.getPitchAngle(), node, PO_GimbalOrientationConstraintControlsStatusType_Names::PitchAngle_Name);
  }
  if (accessor.hasRollAngle()) {
    PO_AngleConstraintControlsStatusType::serialize(accessor.getRollAngle(), node, PO_GimbalOrientationConstraintControlsStatusType_Names::RollAngle_Name);
  }
  if (accessor.hasYawAngle()) {
    PO_AngleConstraintControlsStatusType::serialize(accessor.getYawAngle(), node, PO_GimbalOrientationConstraintControlsStatusType_Names::YawAngle_Name);
  }
  {
    const uci::type::PO_GimbalOrientationConstraintControlsStatusType::Axis& boundedList = accessor.getAxis();
    for (uci::type::PO_GimbalOrientationConstraintControlsStatusType::Axis::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::GimbalAxisControlStatusType::serialize(boundedList.at(i), node, PO_GimbalOrientationConstraintControlsStatusType_Names::Axis_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_GimbalOrientationConstraintControlsStatusType>().release());
}

uci::type::PO_GimbalOrientationConstraintControlsStatusType& PO_GimbalOrientationConstraintControlsStatusType::create(const uci::type::PO_GimbalOrientationConstraintControlsStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_GimbalOrientationConstraintControlsStatusType> newAccessor{boost::make_unique<asb_uci::type::PO_GimbalOrientationConstraintControlsStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_GimbalOrientationConstraintControlsStatusType::destroy(uci::type::PO_GimbalOrientationConstraintControlsStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_GimbalOrientationConstraintControlsStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

