/** @file SAR_CollectionOptionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SAR_CollectionOptionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/COARPS_SAR_CollectionOptionsEnum.h"
#include "asb_uci/type/IEEE_FrequencyBandEnum.h"
#include "asb_uci/type/RadarCollectionOptionsType.h"
#include "asb_uci/type/SupportedResolutionID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/COARPS_SAR_CollectionOptionsEnum.h"
#include "uci/type/IEEE_FrequencyBandEnum.h"
#include "uci/type/SAR_CollectionOptionsType.h"
#include "uci/type/SupportedResolutionID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SAR_CollectionOptionsType::SAR_CollectionOptionsType() = default;

SAR_CollectionOptionsType::~SAR_CollectionOptionsType() = default;

void SAR_CollectionOptionsType::copy(const uci::type::SAR_CollectionOptionsType& accessor) {
  copyImpl(accessor, false);
}

void SAR_CollectionOptionsType::copyImpl(const uci::type::SAR_CollectionOptionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RadarCollectionOptionsType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const SAR_CollectionOptionsType&>(accessor);
    if (accessorImpl.hasATR()) {
      setATR(accessorImpl.getATR());
    } else {
      clearATR();
    }
    if (accessorImpl.hasFTI()) {
      setFTI(accessorImpl.getFTI());
    } else {
      clearFTI();
    }
    if (accessorImpl.hasATR_NumberOfTargets()) {
      setATR_NumberOfTargets(accessorImpl.getATR_NumberOfTargets());
    } else {
      clearATR_NumberOfTargets();
    }
    if (accessorImpl.hasCommandedResolution()) {
      setCommandedResolution(accessorImpl.getCommandedResolution());
    } else {
      clearCommandedResolution();
    }
    if (accessorImpl.supportedResolutionID_Accessor) {
      setSupportedResolutionID(*(accessorImpl.supportedResolutionID_Accessor));
    } else {
      supportedResolutionID_Accessor.reset();
    }
    if (accessorImpl.cOARPS_SAR_CollectionOption_Accessor) {
      setCOARPS_SAR_CollectionOption(*(accessorImpl.cOARPS_SAR_CollectionOption_Accessor));
    } else {
      cOARPS_SAR_CollectionOption_Accessor.reset();
    }
    if (accessorImpl.band_Accessor) {
      setBand(*(accessorImpl.band_Accessor));
    } else {
      band_Accessor.reset();
    }
  }
}

void SAR_CollectionOptionsType::reset() noexcept {
  RadarCollectionOptionsType::reset();
  clearATR();
  clearFTI();
  clearATR_NumberOfTargets();
  clearCommandedResolution();
  supportedResolutionID_Accessor.reset();
  cOARPS_SAR_CollectionOption_Accessor.reset();
  band_Accessor.reset();
}

xs::Boolean SAR_CollectionOptionsType::getATR() const {
  if (aTR_Accessor) {
    return *aTR_Accessor;
  }
  throw uci::base::UCIException("Error in getATR(): An attempt was made to get an optional field that was not enabled, call hasATR() to determine if it is safe to call getATR()");
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::setATR(xs::Boolean value) {
  aTR_Accessor = value;
  return *this;
}

bool SAR_CollectionOptionsType::hasATR() const noexcept {
  return aTR_Accessor.has_value();
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::clearATR() noexcept {
  aTR_Accessor.reset();
  return *this;
}

xs::Boolean SAR_CollectionOptionsType::getFTI() const {
  if (fTI_Accessor) {
    return *fTI_Accessor;
  }
  throw uci::base::UCIException("Error in getFTI(): An attempt was made to get an optional field that was not enabled, call hasFTI() to determine if it is safe to call getFTI()");
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::setFTI(xs::Boolean value) {
  fTI_Accessor = value;
  return *this;
}

bool SAR_CollectionOptionsType::hasFTI() const noexcept {
  return fTI_Accessor.has_value();
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::clearFTI() noexcept {
  fTI_Accessor.reset();
  return *this;
}

xs::UnsignedInt SAR_CollectionOptionsType::getATR_NumberOfTargets() const {
  if (aTR_NumberOfTargets_Accessor) {
    return *aTR_NumberOfTargets_Accessor;
  }
  throw uci::base::UCIException("Error in getATR_NumberOfTargets(): An attempt was made to get an optional field that was not enabled, call hasATR_NumberOfTargets() to determine if it is safe to call getATR_NumberOfTargets()");
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::setATR_NumberOfTargets(xs::UnsignedInt value) {
  aTR_NumberOfTargets_Accessor = value;
  return *this;
}

bool SAR_CollectionOptionsType::hasATR_NumberOfTargets() const noexcept {
  return aTR_NumberOfTargets_Accessor.has_value();
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::clearATR_NumberOfTargets() noexcept {
  aTR_NumberOfTargets_Accessor.reset();
  return *this;
}

xs::Double SAR_CollectionOptionsType::getCommandedResolution() const {
  if (commandedResolution_Accessor) {
    return *commandedResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getCommandedResolution(): An attempt was made to get an optional field that was not enabled, call hasCommandedResolution() to determine if it is safe to call getCommandedResolution()");
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::setCommandedResolution(xs::Double value) {
  commandedResolution_Accessor = value;
  return *this;
}

bool SAR_CollectionOptionsType::hasCommandedResolution() const noexcept {
  return commandedResolution_Accessor.has_value();
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::clearCommandedResolution() noexcept {
  commandedResolution_Accessor.reset();
  return *this;
}

uci::type::SupportedResolutionID_Type& SAR_CollectionOptionsType::getSupportedResolutionID_() const {
  if (supportedResolutionID_Accessor) {
    return *supportedResolutionID_Accessor;
  }
  throw uci::base::UCIException("Error in getSupportedResolutionID(): An attempt was made to get an optional field that was not enabled, call hasSupportedResolutionID() to determine if it is safe to call getSupportedResolutionID()");
}

const uci::type::SupportedResolutionID_Type& SAR_CollectionOptionsType::getSupportedResolutionID() const {
  return getSupportedResolutionID_();
}

uci::type::SupportedResolutionID_Type& SAR_CollectionOptionsType::getSupportedResolutionID() {
  return getSupportedResolutionID_();
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::setSupportedResolutionID(const uci::type::SupportedResolutionID_Type& accessor) {
  enableSupportedResolutionID();
  if (&accessor != supportedResolutionID_Accessor.get()) {
    supportedResolutionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CollectionOptionsType::hasSupportedResolutionID() const noexcept {
  return static_cast<bool>(supportedResolutionID_Accessor);
}

uci::type::SupportedResolutionID_Type& SAR_CollectionOptionsType::enableSupportedResolutionID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::supportedResolutionID_Type : type};
  if ((!supportedResolutionID_Accessor) || (supportedResolutionID_Accessor->getAccessorType() != requestedType)) {
    supportedResolutionID_Accessor = SupportedResolutionID_Type::create(requestedType);
    if (!supportedResolutionID_Accessor) {
      throw uci::base::UCIException("Error in enableSupportedResolutionID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *supportedResolutionID_Accessor;
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::clearSupportedResolutionID() noexcept {
  supportedResolutionID_Accessor.reset();
  return *this;
}

uci::type::COARPS_SAR_CollectionOptionsEnum& SAR_CollectionOptionsType::getCOARPS_SAR_CollectionOption_() const {
  if (cOARPS_SAR_CollectionOption_Accessor) {
    return *cOARPS_SAR_CollectionOption_Accessor;
  }
  throw uci::base::UCIException("Error in getCOARPS_SAR_CollectionOption(): An attempt was made to get an optional field that was not enabled, call hasCOARPS_SAR_CollectionOption() to determine if it is safe to call getCOARPS_SAR_CollectionOption()");
}

const uci::type::COARPS_SAR_CollectionOptionsEnum& SAR_CollectionOptionsType::getCOARPS_SAR_CollectionOption() const {
  return getCOARPS_SAR_CollectionOption_();
}

uci::type::COARPS_SAR_CollectionOptionsEnum& SAR_CollectionOptionsType::getCOARPS_SAR_CollectionOption() {
  return getCOARPS_SAR_CollectionOption_();
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::setCOARPS_SAR_CollectionOption(const uci::type::COARPS_SAR_CollectionOptionsEnum& accessor) {
  enableCOARPS_SAR_CollectionOption();
  if (&accessor != cOARPS_SAR_CollectionOption_Accessor.get()) {
    cOARPS_SAR_CollectionOption_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::setCOARPS_SAR_CollectionOption(const uci::type::COARPS_SAR_CollectionOptionsEnum::EnumerationItem value) {
  enableCOARPS_SAR_CollectionOption().setValue(value);
  return *this;
}

bool SAR_CollectionOptionsType::hasCOARPS_SAR_CollectionOption() const noexcept {
  return static_cast<bool>(cOARPS_SAR_CollectionOption_Accessor);
}

uci::type::COARPS_SAR_CollectionOptionsEnum& SAR_CollectionOptionsType::enableCOARPS_SAR_CollectionOption(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOARPS_SAR_CollectionOptionsEnum : type};
  if ((!cOARPS_SAR_CollectionOption_Accessor) || (cOARPS_SAR_CollectionOption_Accessor->getAccessorType() != requestedType)) {
    cOARPS_SAR_CollectionOption_Accessor = COARPS_SAR_CollectionOptionsEnum::create(requestedType);
    if (!cOARPS_SAR_CollectionOption_Accessor) {
      throw uci::base::UCIException("Error in enableCOARPS_SAR_CollectionOption(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *cOARPS_SAR_CollectionOption_Accessor;
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::clearCOARPS_SAR_CollectionOption() noexcept {
  cOARPS_SAR_CollectionOption_Accessor.reset();
  return *this;
}

uci::type::IEEE_FrequencyBandEnum& SAR_CollectionOptionsType::getBand_() const {
  if (band_Accessor) {
    return *band_Accessor;
  }
  throw uci::base::UCIException("Error in getBand(): An attempt was made to get an optional field that was not enabled, call hasBand() to determine if it is safe to call getBand()");
}

const uci::type::IEEE_FrequencyBandEnum& SAR_CollectionOptionsType::getBand() const {
  return getBand_();
}

uci::type::IEEE_FrequencyBandEnum& SAR_CollectionOptionsType::getBand() {
  return getBand_();
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::setBand(const uci::type::IEEE_FrequencyBandEnum& accessor) {
  enableBand();
  if (&accessor != band_Accessor.get()) {
    band_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::setBand(const uci::type::IEEE_FrequencyBandEnum::EnumerationItem value) {
  enableBand().setValue(value);
  return *this;
}

bool SAR_CollectionOptionsType::hasBand() const noexcept {
  return static_cast<bool>(band_Accessor);
}

uci::type::IEEE_FrequencyBandEnum& SAR_CollectionOptionsType::enableBand(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iEEE_FrequencyBandEnum : type};
  if ((!band_Accessor) || (band_Accessor->getAccessorType() != requestedType)) {
    band_Accessor = IEEE_FrequencyBandEnum::create(requestedType);
    if (!band_Accessor) {
      throw uci::base::UCIException("Error in enableBand(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *band_Accessor;
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::clearBand() noexcept {
  band_Accessor.reset();
  return *this;
}

std::unique_ptr<SAR_CollectionOptionsType> SAR_CollectionOptionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_CollectionOptionsType : type};
  return (requestedType == uci::type::accessorType::sAR_CollectionOptionsType) ? boost::make_unique<SAR_CollectionOptionsType>() : nullptr;
}

/**  */
namespace SAR_CollectionOptionsType_Names {

constexpr const char* Extern_Type_Name{"SAR_CollectionOptionsType"};
constexpr const char* ATR_Name{"ATR"};
constexpr const char* FTI_Name{"FTI"};
constexpr const char* ATR_NumberOfTargets_Name{"ATR_NumberOfTargets"};
constexpr const char* CommandedResolution_Name{"CommandedResolution"};
constexpr const char* SupportedResolutionID_Name{"SupportedResolutionID"};
constexpr const char* COARPS_SAR_CollectionOption_Name{"COARPS_SAR_CollectionOption"};
constexpr const char* Band_Name{"Band"};

} // namespace SAR_CollectionOptionsType_Names

void SAR_CollectionOptionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_CollectionOptionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SAR_CollectionOptionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SAR_CollectionOptionsType_Names::ATR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setATR(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionOptionsType_Names::FTI_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFTI(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionOptionsType_Names::ATR_NumberOfTargets_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setATR_NumberOfTargets(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionOptionsType_Names::CommandedResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCommandedResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionOptionsType_Names::SupportedResolutionID_Name) {
      SupportedResolutionID_Type::deserialize(valueType.second, accessor.enableSupportedResolutionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CollectionOptionsType_Names::COARPS_SAR_CollectionOption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCOARPS_SAR_CollectionOption().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionOptionsType_Names::Band_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableBand().setValueFromName(*value);
      }
    }
  }
  RadarCollectionOptionsType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SAR_CollectionOptionsType::serialize(const uci::type::SAR_CollectionOptionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SAR_CollectionOptionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SAR_CollectionOptionsType_Names::Extern_Type_Name);
  }
  RadarCollectionOptionsType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasATR()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getATR(), node, SAR_CollectionOptionsType_Names::ATR_Name);
  }
  if (accessor.hasFTI()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getFTI(), node, SAR_CollectionOptionsType_Names::FTI_Name);
  }
  if (accessor.hasATR_NumberOfTargets()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getATR_NumberOfTargets(), node, SAR_CollectionOptionsType_Names::ATR_NumberOfTargets_Name);
  }
  if (accessor.hasCommandedResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCommandedResolution(), node, SAR_CollectionOptionsType_Names::CommandedResolution_Name);
  }
  if (accessor.hasSupportedResolutionID()) {
    SupportedResolutionID_Type::serialize(accessor.getSupportedResolutionID(), node, SAR_CollectionOptionsType_Names::SupportedResolutionID_Name);
  }
  if (accessor.hasCOARPS_SAR_CollectionOption()) {
    COARPS_SAR_CollectionOptionsEnum::serialize(accessor.getCOARPS_SAR_CollectionOption(), node, SAR_CollectionOptionsType_Names::COARPS_SAR_CollectionOption_Name, false);
  }
  if (accessor.hasBand()) {
    IEEE_FrequencyBandEnum::serialize(accessor.getBand(), node, SAR_CollectionOptionsType_Names::Band_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SAR_CollectionOptionsType>().release());
}

uci::type::SAR_CollectionOptionsType& SAR_CollectionOptionsType::create(const uci::type::SAR_CollectionOptionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SAR_CollectionOptionsType> newAccessor{boost::make_unique<asb_uci::type::SAR_CollectionOptionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SAR_CollectionOptionsType::destroy(uci::type::SAR_CollectionOptionsType& accessor) {
  delete dynamic_cast<asb_uci::type::SAR_CollectionOptionsType*>(&accessor);
}

} // namespace type

} // namespace uci

