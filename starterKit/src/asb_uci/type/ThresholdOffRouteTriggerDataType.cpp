/** @file ThresholdOffRouteTriggerDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ThresholdOffRouteTriggerDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/TimeErrorType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/ThresholdOffRouteTriggerDataType.h"
#include "uci/type/TimeErrorType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ThresholdOffRouteTriggerDataType::ThresholdOffRouteTriggerDataType() = default;

ThresholdOffRouteTriggerDataType::~ThresholdOffRouteTriggerDataType() = default;

void ThresholdOffRouteTriggerDataType::copy(const uci::type::ThresholdOffRouteTriggerDataType& accessor) {
  copyImpl(accessor, false);
}

void ThresholdOffRouteTriggerDataType::copyImpl(const uci::type::ThresholdOffRouteTriggerDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ThresholdOffRouteTriggerDataType&>(accessor);
    if (accessorImpl.hasTrackError()) {
      setTrackError(accessorImpl.getTrackError());
    } else {
      clearTrackError();
    }
    if (accessorImpl.hasAltitudeError()) {
      setAltitudeError(accessorImpl.getAltitudeError());
    } else {
      clearAltitudeError();
    }
    if (accessorImpl.timeError_Accessor) {
      setTimeError(*(accessorImpl.timeError_Accessor));
    } else {
      timeError_Accessor.reset();
    }
  }
}

void ThresholdOffRouteTriggerDataType::reset() noexcept {
  clearTrackError();
  clearAltitudeError();
  timeError_Accessor.reset();
}

uci::type::DistanceTypeValue ThresholdOffRouteTriggerDataType::getTrackError() const {
  if (trackError_Accessor) {
    return *trackError_Accessor;
  }
  throw uci::base::UCIException("Error in getTrackError(): An attempt was made to get an optional field that was not enabled, call hasTrackError() to determine if it is safe to call getTrackError()");
}

uci::type::ThresholdOffRouteTriggerDataType& ThresholdOffRouteTriggerDataType::setTrackError(uci::type::DistanceTypeValue value) {
  trackError_Accessor = value;
  return *this;
}

bool ThresholdOffRouteTriggerDataType::hasTrackError() const noexcept {
  return trackError_Accessor.has_value();
}

uci::type::ThresholdOffRouteTriggerDataType& ThresholdOffRouteTriggerDataType::clearTrackError() noexcept {
  trackError_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue ThresholdOffRouteTriggerDataType::getAltitudeError() const {
  if (altitudeError_Accessor) {
    return *altitudeError_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeError(): An attempt was made to get an optional field that was not enabled, call hasAltitudeError() to determine if it is safe to call getAltitudeError()");
}

uci::type::ThresholdOffRouteTriggerDataType& ThresholdOffRouteTriggerDataType::setAltitudeError(uci::type::DistanceTypeValue value) {
  altitudeError_Accessor = value;
  return *this;
}

bool ThresholdOffRouteTriggerDataType::hasAltitudeError() const noexcept {
  return altitudeError_Accessor.has_value();
}

uci::type::ThresholdOffRouteTriggerDataType& ThresholdOffRouteTriggerDataType::clearAltitudeError() noexcept {
  altitudeError_Accessor.reset();
  return *this;
}

uci::type::TimeErrorType& ThresholdOffRouteTriggerDataType::getTimeError_() const {
  if (timeError_Accessor) {
    return *timeError_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeError(): An attempt was made to get an optional field that was not enabled, call hasTimeError() to determine if it is safe to call getTimeError()");
}

const uci::type::TimeErrorType& ThresholdOffRouteTriggerDataType::getTimeError() const {
  return getTimeError_();
}

uci::type::TimeErrorType& ThresholdOffRouteTriggerDataType::getTimeError() {
  return getTimeError_();
}

uci::type::ThresholdOffRouteTriggerDataType& ThresholdOffRouteTriggerDataType::setTimeError(const uci::type::TimeErrorType& accessor) {
  enableTimeError();
  if (&accessor != timeError_Accessor.get()) {
    timeError_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThresholdOffRouteTriggerDataType::hasTimeError() const noexcept {
  return static_cast<bool>(timeError_Accessor);
}

uci::type::TimeErrorType& ThresholdOffRouteTriggerDataType::enableTimeError(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::timeErrorType : type};
  if ((!timeError_Accessor) || (timeError_Accessor->getAccessorType() != requestedType)) {
    timeError_Accessor = TimeErrorType::create(requestedType);
    if (!timeError_Accessor) {
      throw uci::base::UCIException("Error in enableTimeError(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timeError_Accessor;
}

uci::type::ThresholdOffRouteTriggerDataType& ThresholdOffRouteTriggerDataType::clearTimeError() noexcept {
  timeError_Accessor.reset();
  return *this;
}

std::unique_ptr<ThresholdOffRouteTriggerDataType> ThresholdOffRouteTriggerDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::thresholdOffRouteTriggerDataType : type};
  return (requestedType == uci::type::accessorType::thresholdOffRouteTriggerDataType) ? boost::make_unique<ThresholdOffRouteTriggerDataType>() : nullptr;
}

/**  */
namespace ThresholdOffRouteTriggerDataType_Names {

constexpr const char* Extern_Type_Name{"ThresholdOffRouteTriggerDataType"};
constexpr const char* TrackError_Name{"TrackError"};
constexpr const char* AltitudeError_Name{"AltitudeError"};
constexpr const char* TimeError_Name{"TimeError"};

} // namespace ThresholdOffRouteTriggerDataType_Names

void ThresholdOffRouteTriggerDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ThresholdOffRouteTriggerDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ThresholdOffRouteTriggerDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ThresholdOffRouteTriggerDataType_Names::TrackError_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTrackError(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ThresholdOffRouteTriggerDataType_Names::AltitudeError_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAltitudeError(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ThresholdOffRouteTriggerDataType_Names::TimeError_Name) {
      TimeErrorType::deserialize(valueType.second, accessor.enableTimeError(), nodeName, nsPrefix);
    }
  }
}

std::string ThresholdOffRouteTriggerDataType::serialize(const uci::type::ThresholdOffRouteTriggerDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ThresholdOffRouteTriggerDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ThresholdOffRouteTriggerDataType_Names::Extern_Type_Name);
  }
  if (accessor.hasTrackError()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTrackError(), node, ThresholdOffRouteTriggerDataType_Names::TrackError_Name);
  }
  if (accessor.hasAltitudeError()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAltitudeError(), node, ThresholdOffRouteTriggerDataType_Names::AltitudeError_Name);
  }
  if (accessor.hasTimeError()) {
    TimeErrorType::serialize(accessor.getTimeError(), node, ThresholdOffRouteTriggerDataType_Names::TimeError_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ThresholdOffRouteTriggerDataType& ThresholdOffRouteTriggerDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ThresholdOffRouteTriggerDataType>().release());
}

uci::type::ThresholdOffRouteTriggerDataType& ThresholdOffRouteTriggerDataType::create(const uci::type::ThresholdOffRouteTriggerDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ThresholdOffRouteTriggerDataType> newAccessor{boost::make_unique<asb_uci::type::ThresholdOffRouteTriggerDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ThresholdOffRouteTriggerDataType::destroy(uci::type::ThresholdOffRouteTriggerDataType& accessor) {
  delete dynamic_cast<asb_uci::type::ThresholdOffRouteTriggerDataType*>(&accessor);
}

} // namespace type

} // namespace uci

