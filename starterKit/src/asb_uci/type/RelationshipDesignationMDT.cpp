/** @file RelationshipDesignationMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RelationshipDesignationMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DataLinkIdentifierPET.h"
#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/GeoLocatedObjectType.h"
#include "../../../include/asb_uci/type/RelationshipDesignationID_Type.h"
#include "../../../include/asb_uci/type/RelationshipType.h"
#include "../../../include/asb_uci/type/SystemMessageIdentifierType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataLinkIdentifierPET.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GeoLocatedObjectType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RelationshipDesignationID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RelationshipDesignationMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RelationshipType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemMessageIdentifierType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RelationshipDesignationMDT::RelationshipDesignationMDT()
  : relationshipDesignationID_Accessor{boost::make_unique<RelationshipDesignationID_Type>()},
    source_Accessor{boost::make_unique<GeoLocatedObjectType>()},
    dataLinkIdentifier_Accessor{boost::make_unique<DataLinkIdentifier>(0, SIZE_MAX)} {
}

RelationshipDesignationMDT::~RelationshipDesignationMDT() = default;

void RelationshipDesignationMDT::copy(const uci::type::RelationshipDesignationMDT& accessor) {
  copyImpl(accessor, false);
}

void RelationshipDesignationMDT::copyImpl(const uci::type::RelationshipDesignationMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const RelationshipDesignationMDT&>(accessor);
    setRelationshipDesignationID(*(accessorImpl.relationshipDesignationID_Accessor));
    if (accessorImpl.reportingSystem_Accessor) {
      setReportingSystem(*(accessorImpl.reportingSystem_Accessor));
    } else {
      reportingSystem_Accessor.reset();
    }
    setSource(*(accessorImpl.source_Accessor));
    if (accessorImpl.destination_Accessor) {
      setDestination(*(accessorImpl.destination_Accessor));
    } else {
      destination_Accessor.reset();
    }
    if (accessorImpl.relationship_Accessor) {
      setRelationship(*(accessorImpl.relationship_Accessor));
    } else {
      relationship_Accessor.reset();
    }
    setDataLinkIdentifier(*(accessorImpl.dataLinkIdentifier_Accessor));
  }
}

void RelationshipDesignationMDT::reset() noexcept {
  DataRecordBaseType::reset();
  relationshipDesignationID_Accessor->reset();
  reportingSystem_Accessor.reset();
  source_Accessor->reset();
  destination_Accessor.reset();
  relationship_Accessor.reset();
  dataLinkIdentifier_Accessor->reset();
}

const uci::type::RelationshipDesignationID_Type& RelationshipDesignationMDT::getRelationshipDesignationID() const {
  return *relationshipDesignationID_Accessor;
}

uci::type::RelationshipDesignationID_Type& RelationshipDesignationMDT::getRelationshipDesignationID() {
  return *relationshipDesignationID_Accessor;
}

uci::type::RelationshipDesignationMDT& RelationshipDesignationMDT::setRelationshipDesignationID(const uci::type::RelationshipDesignationID_Type& accessor) {
  if (&accessor != relationshipDesignationID_Accessor.get()) {
    relationshipDesignationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemMessageIdentifierType& RelationshipDesignationMDT::getReportingSystem_() const {
  if (reportingSystem_Accessor) {
    return *reportingSystem_Accessor;
  }
  throw uci::base::UCIException("Error in getReportingSystem(): An attempt was made to get an optional field that was not enabled, call hasReportingSystem() to determine if it is safe to call getReportingSystem()");
}

const uci::type::SystemMessageIdentifierType& RelationshipDesignationMDT::getReportingSystem() const {
  return getReportingSystem_();
}

uci::type::SystemMessageIdentifierType& RelationshipDesignationMDT::getReportingSystem() {
  return getReportingSystem_();
}

uci::type::RelationshipDesignationMDT& RelationshipDesignationMDT::setReportingSystem(const uci::type::SystemMessageIdentifierType& accessor) {
  enableReportingSystem();
  if (&accessor != reportingSystem_Accessor.get()) {
    reportingSystem_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RelationshipDesignationMDT::hasReportingSystem() const noexcept {
  return static_cast<bool>(reportingSystem_Accessor);
}

uci::type::SystemMessageIdentifierType& RelationshipDesignationMDT::enableReportingSystem(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemMessageIdentifierType : type};
  if ((!reportingSystem_Accessor) || (reportingSystem_Accessor->getAccessorType() != requestedType)) {
    reportingSystem_Accessor = SystemMessageIdentifierType::create(requestedType);
    if (!reportingSystem_Accessor) {
      throw uci::base::UCIException("Error in enableReportingSystem(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *reportingSystem_Accessor;
}

uci::type::RelationshipDesignationMDT& RelationshipDesignationMDT::clearReportingSystem() noexcept {
  reportingSystem_Accessor.reset();
  return *this;
}

const uci::type::GeoLocatedObjectType& RelationshipDesignationMDT::getSource() const {
  return *source_Accessor;
}

uci::type::GeoLocatedObjectType& RelationshipDesignationMDT::getSource() {
  return *source_Accessor;
}

uci::type::RelationshipDesignationMDT& RelationshipDesignationMDT::setSource(const uci::type::GeoLocatedObjectType& accessor) {
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::GeoLocatedObjectType& RelationshipDesignationMDT::getDestination_() const {
  if (destination_Accessor) {
    return *destination_Accessor;
  }
  throw uci::base::UCIException("Error in getDestination(): An attempt was made to get an optional field that was not enabled, call hasDestination() to determine if it is safe to call getDestination()");
}

const uci::type::GeoLocatedObjectType& RelationshipDesignationMDT::getDestination() const {
  return getDestination_();
}

uci::type::GeoLocatedObjectType& RelationshipDesignationMDT::getDestination() {
  return getDestination_();
}

uci::type::RelationshipDesignationMDT& RelationshipDesignationMDT::setDestination(const uci::type::GeoLocatedObjectType& accessor) {
  enableDestination();
  if (&accessor != destination_Accessor.get()) {
    destination_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RelationshipDesignationMDT::hasDestination() const noexcept {
  return static_cast<bool>(destination_Accessor);
}

uci::type::GeoLocatedObjectType& RelationshipDesignationMDT::enableDestination(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::geoLocatedObjectType : type};
  if ((!destination_Accessor) || (destination_Accessor->getAccessorType() != requestedType)) {
    destination_Accessor = GeoLocatedObjectType::create(requestedType);
    if (!destination_Accessor) {
      throw uci::base::UCIException("Error in enableDestination(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *destination_Accessor;
}

uci::type::RelationshipDesignationMDT& RelationshipDesignationMDT::clearDestination() noexcept {
  destination_Accessor.reset();
  return *this;
}

uci::type::RelationshipType& RelationshipDesignationMDT::getRelationship_() const {
  if (relationship_Accessor) {
    return *relationship_Accessor;
  }
  throw uci::base::UCIException("Error in getRelationship(): An attempt was made to get an optional field that was not enabled, call hasRelationship() to determine if it is safe to call getRelationship()");
}

const uci::type::RelationshipType& RelationshipDesignationMDT::getRelationship() const {
  return getRelationship_();
}

uci::type::RelationshipType& RelationshipDesignationMDT::getRelationship() {
  return getRelationship_();
}

uci::type::RelationshipDesignationMDT& RelationshipDesignationMDT::setRelationship(const uci::type::RelationshipType& accessor) {
  enableRelationship();
  if (&accessor != relationship_Accessor.get()) {
    relationship_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RelationshipDesignationMDT::hasRelationship() const noexcept {
  return static_cast<bool>(relationship_Accessor);
}

uci::type::RelationshipType& RelationshipDesignationMDT::enableRelationship(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relationshipType : type};
  if ((!relationship_Accessor) || (relationship_Accessor->getAccessorType() != requestedType)) {
    relationship_Accessor = RelationshipType::create(requestedType);
    if (!relationship_Accessor) {
      throw uci::base::UCIException("Error in enableRelationship(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relationship_Accessor;
}

uci::type::RelationshipDesignationMDT& RelationshipDesignationMDT::clearRelationship() noexcept {
  relationship_Accessor.reset();
  return *this;
}

const uci::type::RelationshipDesignationMDT::DataLinkIdentifier& RelationshipDesignationMDT::getDataLinkIdentifier() const {
  return *dataLinkIdentifier_Accessor;
}

uci::type::RelationshipDesignationMDT::DataLinkIdentifier& RelationshipDesignationMDT::getDataLinkIdentifier() {
  return *dataLinkIdentifier_Accessor;
}

uci::type::RelationshipDesignationMDT& RelationshipDesignationMDT::setDataLinkIdentifier(const uci::type::RelationshipDesignationMDT::DataLinkIdentifier& accessor) {
  if (&accessor != dataLinkIdentifier_Accessor.get()) {
    dataLinkIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RelationshipDesignationMDT> RelationshipDesignationMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relationshipDesignationMDT : type};
  return (requestedType == uci::type::accessorType::relationshipDesignationMDT) ? boost::make_unique<RelationshipDesignationMDT>() : nullptr;
}

/**  */
namespace RelationshipDesignationMDT_Names {

constexpr const char* Extern_Type_Name{"RelationshipDesignationMDT"};
constexpr const char* RelationshipDesignationID_Name{"RelationshipDesignationID"};
constexpr const char* ReportingSystem_Name{"ReportingSystem"};
constexpr const char* Source_Name{"Source"};
constexpr const char* Destination_Name{"Destination"};
constexpr const char* Relationship_Name{"Relationship"};
constexpr const char* DataLinkIdentifier_Name{"DataLinkIdentifier"};

} // namespace RelationshipDesignationMDT_Names

void RelationshipDesignationMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::RelationshipDesignationMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RelationshipDesignationMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RelationshipDesignationMDT_Names::RelationshipDesignationID_Name) {
      RelationshipDesignationID_Type::deserialize(valueType.second, accessor.getRelationshipDesignationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RelationshipDesignationMDT_Names::ReportingSystem_Name) {
      SystemMessageIdentifierType::deserialize(valueType.second, accessor.enableReportingSystem(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RelationshipDesignationMDT_Names::Source_Name) {
      GeoLocatedObjectType::deserialize(valueType.second, accessor.getSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RelationshipDesignationMDT_Names::Destination_Name) {
      GeoLocatedObjectType::deserialize(valueType.second, accessor.enableDestination(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RelationshipDesignationMDT_Names::Relationship_Name) {
      RelationshipType::deserialize(valueType.second, accessor.enableRelationship(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RelationshipDesignationMDT_Names::DataLinkIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RelationshipDesignationMDT::DataLinkIdentifier& boundedList = accessor.getDataLinkIdentifier();
        const uci::type::RelationshipDesignationMDT::DataLinkIdentifier::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string RelationshipDesignationMDT::serialize(const uci::type::RelationshipDesignationMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RelationshipDesignationMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RelationshipDesignationMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  RelationshipDesignationID_Type::serialize(accessor.getRelationshipDesignationID(), node, RelationshipDesignationMDT_Names::RelationshipDesignationID_Name);
  if (accessor.hasReportingSystem()) {
    SystemMessageIdentifierType::serialize(accessor.getReportingSystem(), node, RelationshipDesignationMDT_Names::ReportingSystem_Name);
  }
  GeoLocatedObjectType::serialize(accessor.getSource(), node, RelationshipDesignationMDT_Names::Source_Name);
  if (accessor.hasDestination()) {
    GeoLocatedObjectType::serialize(accessor.getDestination(), node, RelationshipDesignationMDT_Names::Destination_Name);
  }
  if (accessor.hasRelationship()) {
    RelationshipType::serialize(accessor.getRelationship(), node, RelationshipDesignationMDT_Names::Relationship_Name);
  }
  {
    const uci::type::RelationshipDesignationMDT::DataLinkIdentifier& boundedList = accessor.getDataLinkIdentifier();
    for (uci::type::RelationshipDesignationMDT::DataLinkIdentifier::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DataLinkIdentifierPET::serialize(boundedList.at(i), node, RelationshipDesignationMDT_Names::DataLinkIdentifier_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RelationshipDesignationMDT& RelationshipDesignationMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RelationshipDesignationMDT>().release());
}

uci::type::RelationshipDesignationMDT& RelationshipDesignationMDT::create(const uci::type::RelationshipDesignationMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RelationshipDesignationMDT> newAccessor{boost::make_unique<asb_uci::type::RelationshipDesignationMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RelationshipDesignationMDT::destroy(uci::type::RelationshipDesignationMDT& accessor) {
  delete dynamic_cast<asb_uci::type::RelationshipDesignationMDT*>(&accessor);
}

} // namespace type

} // namespace uci

