/** @file STANAG_4607_PackingPlanType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/STANAG_4607_PackingPlanType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString11Type.h"
#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString13Type.h"
#include "asb_uci/type/FIPS_ClassificationSystemType.h"
#include "asb_uci/type/STANAG_4607_PackingPlanPET.h"
#include "asb_uci/type/VisibleString81Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString11Type.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString13Type.h"
#include "uci/type/FIPS_ClassificationSystemType.h"
#include "uci/type/STANAG_4607_PackingPlanType.h"
#include "uci/type/VisibleString81Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

STANAG_4607_PackingPlanType::STANAG_4607_PackingPlanType() = default;

STANAG_4607_PackingPlanType::~STANAG_4607_PackingPlanType() = default;

void STANAG_4607_PackingPlanType::copy(const uci::type::STANAG_4607_PackingPlanType& accessor) {
  copyImpl(accessor, false);
}

void STANAG_4607_PackingPlanType::copyImpl(const uci::type::STANAG_4607_PackingPlanType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    STANAG_4607_PackingPlanPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const STANAG_4607_PackingPlanType&>(accessor);
    if (accessorImpl.hasExerciseIdentifier()) {
      setExerciseIdentifier(accessorImpl.getExerciseIdentifier());
    } else {
      clearExerciseIdentifier();
    }
    if (accessorImpl.classificationSystem_Accessor) {
      setClassificationSystem(*(accessorImpl.classificationSystem_Accessor));
    } else {
      classificationSystem_Accessor.reset();
    }
    if (accessorImpl.originatorIdentifier_Accessor) {
      setOriginatorIdentifier(*(accessorImpl.originatorIdentifier_Accessor));
    } else {
      originatorIdentifier_Accessor.reset();
    }
    if (accessorImpl.missionPlan_Accessor) {
      setMissionPlan(*(accessorImpl.missionPlan_Accessor));
    } else {
      missionPlan_Accessor.reset();
    }
    if (accessorImpl.recipient_Accessor) {
      setRecipient(*(accessorImpl.recipient_Accessor));
    } else {
      recipient_Accessor.reset();
    }
    if (accessorImpl.freeText_Accessor) {
      setFreeText(*(accessorImpl.freeText_Accessor));
    } else {
      freeText_Accessor.reset();
    }
  }
}

void STANAG_4607_PackingPlanType::reset() noexcept {
  STANAG_4607_PackingPlanPET::reset();
  clearExerciseIdentifier();
  classificationSystem_Accessor.reset();
  originatorIdentifier_Accessor.reset();
  missionPlan_Accessor.reset();
  recipient_Accessor.reset();
  freeText_Accessor.reset();
}

xs::UnsignedInt STANAG_4607_PackingPlanType::getExerciseIdentifier() const {
  if (exerciseIdentifier_Accessor) {
    return *exerciseIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getExerciseIdentifier(): An attempt was made to get an optional field that was not enabled, call hasExerciseIdentifier() to determine if it is safe to call getExerciseIdentifier()");
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setExerciseIdentifier(xs::UnsignedInt value) {
  exerciseIdentifier_Accessor = value;
  return *this;
}

bool STANAG_4607_PackingPlanType::hasExerciseIdentifier() const noexcept {
  return exerciseIdentifier_Accessor.has_value();
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::clearExerciseIdentifier() noexcept {
  exerciseIdentifier_Accessor.reset();
  return *this;
}

uci::type::FIPS_ClassificationSystemType& STANAG_4607_PackingPlanType::getClassificationSystem_() const {
  if (classificationSystem_Accessor) {
    return *classificationSystem_Accessor;
  }
  throw uci::base::UCIException("Error in getClassificationSystem(): An attempt was made to get an optional field that was not enabled, call hasClassificationSystem() to determine if it is safe to call getClassificationSystem()");
}

const uci::type::FIPS_ClassificationSystemType& STANAG_4607_PackingPlanType::getClassificationSystem() const {
  return getClassificationSystem_();
}

uci::type::FIPS_ClassificationSystemType& STANAG_4607_PackingPlanType::getClassificationSystem() {
  return getClassificationSystem_();
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setClassificationSystem(const uci::type::FIPS_ClassificationSystemType& value) {
  return setClassificationSystem(value.c_str());
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setClassificationSystem(const std::string& value) {
  return setClassificationSystem(value.c_str());
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setClassificationSystem(const char* value) {
  enableClassificationSystem().setStringValue(value);
  return *this;
}

bool STANAG_4607_PackingPlanType::hasClassificationSystem() const noexcept {
  return static_cast<bool>(classificationSystem_Accessor);
}

uci::type::FIPS_ClassificationSystemType& STANAG_4607_PackingPlanType::enableClassificationSystem(uci::base::accessorType::AccessorType type) {
  if (!classificationSystem_Accessor) {
    classificationSystem_Accessor = FIPS_ClassificationSystemType::create(type);
  }
  return *classificationSystem_Accessor;
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::clearClassificationSystem() noexcept {
  classificationSystem_Accessor.reset();
  return *this;
}

uci::type::AlphanumericDashSpaceUnderscoreString11Type& STANAG_4607_PackingPlanType::getOriginatorIdentifier_() const {
  if (originatorIdentifier_Accessor) {
    return *originatorIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getOriginatorIdentifier(): An attempt was made to get an optional field that was not enabled, call hasOriginatorIdentifier() to determine if it is safe to call getOriginatorIdentifier()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString11Type& STANAG_4607_PackingPlanType::getOriginatorIdentifier() const {
  return getOriginatorIdentifier_();
}

uci::type::AlphanumericDashSpaceUnderscoreString11Type& STANAG_4607_PackingPlanType::getOriginatorIdentifier() {
  return getOriginatorIdentifier_();
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setOriginatorIdentifier(const uci::type::AlphanumericDashSpaceUnderscoreString11Type& value) {
  return setOriginatorIdentifier(value.c_str());
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setOriginatorIdentifier(const std::string& value) {
  return setOriginatorIdentifier(value.c_str());
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setOriginatorIdentifier(const char* value) {
  enableOriginatorIdentifier().setStringValue(value);
  return *this;
}

bool STANAG_4607_PackingPlanType::hasOriginatorIdentifier() const noexcept {
  return static_cast<bool>(originatorIdentifier_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString11Type& STANAG_4607_PackingPlanType::enableOriginatorIdentifier(uci::base::accessorType::AccessorType type) {
  if (!originatorIdentifier_Accessor) {
    originatorIdentifier_Accessor = AlphanumericDashSpaceUnderscoreString11Type::create(type);
  }
  return *originatorIdentifier_Accessor;
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::clearOriginatorIdentifier() noexcept {
  originatorIdentifier_Accessor.reset();
  return *this;
}

uci::type::AlphanumericDashSpaceUnderscoreString13Type& STANAG_4607_PackingPlanType::getMissionPlan_() const {
  if (missionPlan_Accessor) {
    return *missionPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionPlan(): An attempt was made to get an optional field that was not enabled, call hasMissionPlan() to determine if it is safe to call getMissionPlan()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString13Type& STANAG_4607_PackingPlanType::getMissionPlan() const {
  return getMissionPlan_();
}

uci::type::AlphanumericDashSpaceUnderscoreString13Type& STANAG_4607_PackingPlanType::getMissionPlan() {
  return getMissionPlan_();
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setMissionPlan(const uci::type::AlphanumericDashSpaceUnderscoreString13Type& value) {
  return setMissionPlan(value.c_str());
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setMissionPlan(const std::string& value) {
  return setMissionPlan(value.c_str());
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setMissionPlan(const char* value) {
  enableMissionPlan().setStringValue(value);
  return *this;
}

bool STANAG_4607_PackingPlanType::hasMissionPlan() const noexcept {
  return static_cast<bool>(missionPlan_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString13Type& STANAG_4607_PackingPlanType::enableMissionPlan(uci::base::accessorType::AccessorType type) {
  if (!missionPlan_Accessor) {
    missionPlan_Accessor = AlphanumericDashSpaceUnderscoreString13Type::create(type);
  }
  return *missionPlan_Accessor;
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::clearMissionPlan() noexcept {
  missionPlan_Accessor.reset();
  return *this;
}

uci::type::AlphanumericDashSpaceUnderscoreString11Type& STANAG_4607_PackingPlanType::getRecipient_() const {
  if (recipient_Accessor) {
    return *recipient_Accessor;
  }
  throw uci::base::UCIException("Error in getRecipient(): An attempt was made to get an optional field that was not enabled, call hasRecipient() to determine if it is safe to call getRecipient()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString11Type& STANAG_4607_PackingPlanType::getRecipient() const {
  return getRecipient_();
}

uci::type::AlphanumericDashSpaceUnderscoreString11Type& STANAG_4607_PackingPlanType::getRecipient() {
  return getRecipient_();
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setRecipient(const uci::type::AlphanumericDashSpaceUnderscoreString11Type& value) {
  return setRecipient(value.c_str());
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setRecipient(const std::string& value) {
  return setRecipient(value.c_str());
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setRecipient(const char* value) {
  enableRecipient().setStringValue(value);
  return *this;
}

bool STANAG_4607_PackingPlanType::hasRecipient() const noexcept {
  return static_cast<bool>(recipient_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString11Type& STANAG_4607_PackingPlanType::enableRecipient(uci::base::accessorType::AccessorType type) {
  if (!recipient_Accessor) {
    recipient_Accessor = AlphanumericDashSpaceUnderscoreString11Type::create(type);
  }
  return *recipient_Accessor;
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::clearRecipient() noexcept {
  recipient_Accessor.reset();
  return *this;
}

uci::type::VisibleString81Type& STANAG_4607_PackingPlanType::getFreeText_() const {
  if (freeText_Accessor) {
    return *freeText_Accessor;
  }
  throw uci::base::UCIException("Error in getFreeText(): An attempt was made to get an optional field that was not enabled, call hasFreeText() to determine if it is safe to call getFreeText()");
}

const uci::type::VisibleString81Type& STANAG_4607_PackingPlanType::getFreeText() const {
  return getFreeText_();
}

uci::type::VisibleString81Type& STANAG_4607_PackingPlanType::getFreeText() {
  return getFreeText_();
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setFreeText(const uci::type::VisibleString81Type& value) {
  return setFreeText(value.c_str());
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setFreeText(const std::string& value) {
  return setFreeText(value.c_str());
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::setFreeText(const char* value) {
  enableFreeText().setStringValue(value);
  return *this;
}

bool STANAG_4607_PackingPlanType::hasFreeText() const noexcept {
  return static_cast<bool>(freeText_Accessor);
}

uci::type::VisibleString81Type& STANAG_4607_PackingPlanType::enableFreeText(uci::base::accessorType::AccessorType type) {
  if (!freeText_Accessor) {
    freeText_Accessor = VisibleString81Type::create(type);
  }
  return *freeText_Accessor;
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::clearFreeText() noexcept {
  freeText_Accessor.reset();
  return *this;
}

std::unique_ptr<STANAG_4607_PackingPlanType> STANAG_4607_PackingPlanType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sTANAG_4607_PackingPlanType : type};
  return (requestedType == uci::type::accessorType::sTANAG_4607_PackingPlanType) ? boost::make_unique<STANAG_4607_PackingPlanType>() : nullptr;
}

/**  */
namespace STANAG_4607_PackingPlanType_Names {

constexpr const char* Extern_Type_Name{"STANAG_4607_PackingPlanType"};
constexpr const char* ExerciseIdentifier_Name{"ExerciseIdentifier"};
constexpr const char* ClassificationSystem_Name{"ClassificationSystem"};
constexpr const char* OriginatorIdentifier_Name{"OriginatorIdentifier"};
constexpr const char* MissionPlan_Name{"MissionPlan"};
constexpr const char* Recipient_Name{"Recipient"};
constexpr const char* FreeText_Name{"FreeText"};

} // namespace STANAG_4607_PackingPlanType_Names

void STANAG_4607_PackingPlanType::deserialize(const boost::property_tree::ptree& propTree, uci::type::STANAG_4607_PackingPlanType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = STANAG_4607_PackingPlanType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanType_Names::ExerciseIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setExerciseIdentifier(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanType_Names::ClassificationSystem_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setClassificationSystem(*value);
      }
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanType_Names::OriginatorIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOriginatorIdentifier(*value);
      }
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanType_Names::MissionPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionPlan(*value);
      }
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanType_Names::Recipient_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRecipient(*value);
      }
    } else if (valueType.first == nsPrefix + STANAG_4607_PackingPlanType_Names::FreeText_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFreeText(*value);
      }
    }
  }
  STANAG_4607_PackingPlanPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string STANAG_4607_PackingPlanType::serialize(const uci::type::STANAG_4607_PackingPlanType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? STANAG_4607_PackingPlanType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, STANAG_4607_PackingPlanType_Names::Extern_Type_Name);
  }
  STANAG_4607_PackingPlanPET::serialize(accessor, node, "", false, false, false);
  if (accessor.hasExerciseIdentifier()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getExerciseIdentifier(), node, STANAG_4607_PackingPlanType_Names::ExerciseIdentifier_Name);
  }
  if (accessor.hasClassificationSystem()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getClassificationSystem(), node, STANAG_4607_PackingPlanType_Names::ClassificationSystem_Name);
  }
  if (accessor.hasOriginatorIdentifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getOriginatorIdentifier(), node, STANAG_4607_PackingPlanType_Names::OriginatorIdentifier_Name);
  }
  if (accessor.hasMissionPlan()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMissionPlan(), node, STANAG_4607_PackingPlanType_Names::MissionPlan_Name);
  }
  if (accessor.hasRecipient()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getRecipient(), node, STANAG_4607_PackingPlanType_Names::Recipient_Name);
  }
  if (accessor.hasFreeText()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getFreeText(), node, STANAG_4607_PackingPlanType_Names::FreeText_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::STANAG_4607_PackingPlanType>().release());
}

uci::type::STANAG_4607_PackingPlanType& STANAG_4607_PackingPlanType::create(const uci::type::STANAG_4607_PackingPlanType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::STANAG_4607_PackingPlanType> newAccessor{boost::make_unique<asb_uci::type::STANAG_4607_PackingPlanType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void STANAG_4607_PackingPlanType::destroy(uci::type::STANAG_4607_PackingPlanType& accessor) {
  delete dynamic_cast<asb_uci::type::STANAG_4607_PackingPlanType*>(&accessor);
}

} // namespace type

} // namespace uci

