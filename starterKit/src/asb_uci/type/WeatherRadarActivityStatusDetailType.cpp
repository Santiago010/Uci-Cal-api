/** @file WeatherRadarActivityStatusDetailType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/WeatherRadarActivityStatusDetailType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherRadarActivityStatusDetailType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WeatherRadarActivityStatusDetailType::WeatherRadarActivityStatusDetailType() = default;

WeatherRadarActivityStatusDetailType::~WeatherRadarActivityStatusDetailType() = default;

void WeatherRadarActivityStatusDetailType::copy(const uci::type::WeatherRadarActivityStatusDetailType& accessor) {
  copyImpl(accessor, false);
}

void WeatherRadarActivityStatusDetailType::copyImpl(const uci::type::WeatherRadarActivityStatusDetailType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const WeatherRadarActivityStatusDetailType&>(accessor);
    if (accessorImpl.hasNumberOfTimesSearched()) {
      setNumberOfTimesSearched(accessorImpl.getNumberOfTimesSearched());
    } else {
      clearNumberOfTimesSearched();
    }
    if (accessorImpl.hasTimeLastSearched()) {
      setTimeLastSearched(accessorImpl.getTimeLastSearched());
    } else {
      clearTimeLastSearched();
    }
    if (accessorImpl.hasAttempts()) {
      setAttempts(accessorImpl.getAttempts());
    } else {
      clearAttempts();
    }
    if (accessorImpl.hasActualRevisitPeriod()) {
      setActualRevisitPeriod(accessorImpl.getActualRevisitPeriod());
    } else {
      clearActualRevisitPeriod();
    }
    if (accessorImpl.hasPercentageInFOR()) {
      setPercentageInFOR(accessorImpl.getPercentageInFOR());
    } else {
      clearPercentageInFOR();
    }
    if (accessorImpl.hasActualStartTime()) {
      setActualStartTime(accessorImpl.getActualStartTime());
    } else {
      clearActualStartTime();
    }
    if (accessorImpl.hasActualStopTime()) {
      setActualStopTime(accessorImpl.getActualStopTime());
    } else {
      clearActualStopTime();
    }
    if (accessorImpl.hasPercentSearched()) {
      setPercentSearched(accessorImpl.getPercentSearched());
    } else {
      clearPercentSearched();
    }
    if (accessorImpl.hasProductsProduced()) {
      setProductsProduced(accessorImpl.getProductsProduced());
    } else {
      clearProductsProduced();
    }
    if (accessorImpl.hasEstimatedERP()) {
      setEstimatedERP(accessorImpl.getEstimatedERP());
    } else {
      clearEstimatedERP();
    }
  }
}

void WeatherRadarActivityStatusDetailType::reset() noexcept {
  clearNumberOfTimesSearched();
  clearTimeLastSearched();
  clearAttempts();
  clearActualRevisitPeriod();
  clearPercentageInFOR();
  clearActualStartTime();
  clearActualStopTime();
  clearPercentSearched();
  clearProductsProduced();
  clearEstimatedERP();
}

xs::UnsignedInt WeatherRadarActivityStatusDetailType::getNumberOfTimesSearched() const {
  if (numberOfTimesSearched_Accessor) {
    return *numberOfTimesSearched_Accessor;
  }
  throw uci::base::UCIException("Error in getNumberOfTimesSearched(): An attempt was made to get an optional field that was not enabled, call hasNumberOfTimesSearched() to determine if it is safe to call getNumberOfTimesSearched()");
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::setNumberOfTimesSearched(xs::UnsignedInt value) {
  numberOfTimesSearched_Accessor = value;
  return *this;
}

bool WeatherRadarActivityStatusDetailType::hasNumberOfTimesSearched() const noexcept {
  return numberOfTimesSearched_Accessor.has_value();
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::clearNumberOfTimesSearched() noexcept {
  numberOfTimesSearched_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue WeatherRadarActivityStatusDetailType::getTimeLastSearched() const {
  if (timeLastSearched_Accessor) {
    return *timeLastSearched_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeLastSearched(): An attempt was made to get an optional field that was not enabled, call hasTimeLastSearched() to determine if it is safe to call getTimeLastSearched()");
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::setTimeLastSearched(uci::type::DateTimeTypeValue value) {
  timeLastSearched_Accessor = value;
  return *this;
}

bool WeatherRadarActivityStatusDetailType::hasTimeLastSearched() const noexcept {
  return timeLastSearched_Accessor.has_value();
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::clearTimeLastSearched() noexcept {
  timeLastSearched_Accessor.reset();
  return *this;
}

xs::UnsignedInt WeatherRadarActivityStatusDetailType::getAttempts() const {
  if (attempts_Accessor) {
    return *attempts_Accessor;
  }
  throw uci::base::UCIException("Error in getAttempts(): An attempt was made to get an optional field that was not enabled, call hasAttempts() to determine if it is safe to call getAttempts()");
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::setAttempts(xs::UnsignedInt value) {
  attempts_Accessor = value;
  return *this;
}

bool WeatherRadarActivityStatusDetailType::hasAttempts() const noexcept {
  return attempts_Accessor.has_value();
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::clearAttempts() noexcept {
  attempts_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue WeatherRadarActivityStatusDetailType::getActualRevisitPeriod() const {
  if (actualRevisitPeriod_Accessor) {
    return *actualRevisitPeriod_Accessor;
  }
  throw uci::base::UCIException("Error in getActualRevisitPeriod(): An attempt was made to get an optional field that was not enabled, call hasActualRevisitPeriod() to determine if it is safe to call getActualRevisitPeriod()");
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::setActualRevisitPeriod(uci::type::DurationTypeValue value) {
  actualRevisitPeriod_Accessor = value;
  return *this;
}

bool WeatherRadarActivityStatusDetailType::hasActualRevisitPeriod() const noexcept {
  return actualRevisitPeriod_Accessor.has_value();
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::clearActualRevisitPeriod() noexcept {
  actualRevisitPeriod_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue WeatherRadarActivityStatusDetailType::getPercentageInFOR() const {
  if (percentageInFOR_Accessor) {
    return *percentageInFOR_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentageInFOR(): An attempt was made to get an optional field that was not enabled, call hasPercentageInFOR() to determine if it is safe to call getPercentageInFOR()");
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::setPercentageInFOR(uci::type::PercentTypeValue value) {
  percentageInFOR_Accessor = value;
  return *this;
}

bool WeatherRadarActivityStatusDetailType::hasPercentageInFOR() const noexcept {
  return percentageInFOR_Accessor.has_value();
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::clearPercentageInFOR() noexcept {
  percentageInFOR_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue WeatherRadarActivityStatusDetailType::getActualStartTime() const {
  if (actualStartTime_Accessor) {
    return *actualStartTime_Accessor;
  }
  throw uci::base::UCIException("Error in getActualStartTime(): An attempt was made to get an optional field that was not enabled, call hasActualStartTime() to determine if it is safe to call getActualStartTime()");
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::setActualStartTime(uci::type::DateTimeTypeValue value) {
  actualStartTime_Accessor = value;
  return *this;
}

bool WeatherRadarActivityStatusDetailType::hasActualStartTime() const noexcept {
  return actualStartTime_Accessor.has_value();
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::clearActualStartTime() noexcept {
  actualStartTime_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue WeatherRadarActivityStatusDetailType::getActualStopTime() const {
  if (actualStopTime_Accessor) {
    return *actualStopTime_Accessor;
  }
  throw uci::base::UCIException("Error in getActualStopTime(): An attempt was made to get an optional field that was not enabled, call hasActualStopTime() to determine if it is safe to call getActualStopTime()");
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::setActualStopTime(uci::type::DateTimeTypeValue value) {
  actualStopTime_Accessor = value;
  return *this;
}

bool WeatherRadarActivityStatusDetailType::hasActualStopTime() const noexcept {
  return actualStopTime_Accessor.has_value();
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::clearActualStopTime() noexcept {
  actualStopTime_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue WeatherRadarActivityStatusDetailType::getPercentSearched() const {
  if (percentSearched_Accessor) {
    return *percentSearched_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentSearched(): An attempt was made to get an optional field that was not enabled, call hasPercentSearched() to determine if it is safe to call getPercentSearched()");
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::setPercentSearched(uci::type::PercentTypeValue value) {
  percentSearched_Accessor = value;
  return *this;
}

bool WeatherRadarActivityStatusDetailType::hasPercentSearched() const noexcept {
  return percentSearched_Accessor.has_value();
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::clearPercentSearched() noexcept {
  percentSearched_Accessor.reset();
  return *this;
}

xs::UnsignedInt WeatherRadarActivityStatusDetailType::getProductsProduced() const {
  if (productsProduced_Accessor) {
    return *productsProduced_Accessor;
  }
  throw uci::base::UCIException("Error in getProductsProduced(): An attempt was made to get an optional field that was not enabled, call hasProductsProduced() to determine if it is safe to call getProductsProduced()");
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::setProductsProduced(xs::UnsignedInt value) {
  productsProduced_Accessor = value;
  return *this;
}

bool WeatherRadarActivityStatusDetailType::hasProductsProduced() const noexcept {
  return productsProduced_Accessor.has_value();
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::clearProductsProduced() noexcept {
  productsProduced_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue WeatherRadarActivityStatusDetailType::getEstimatedERP() const {
  if (estimatedERP_Accessor) {
    return *estimatedERP_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedERP(): An attempt was made to get an optional field that was not enabled, call hasEstimatedERP() to determine if it is safe to call getEstimatedERP()");
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::setEstimatedERP(uci::type::DecibelTypeValue value) {
  estimatedERP_Accessor = value;
  return *this;
}

bool WeatherRadarActivityStatusDetailType::hasEstimatedERP() const noexcept {
  return estimatedERP_Accessor.has_value();
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::clearEstimatedERP() noexcept {
  estimatedERP_Accessor.reset();
  return *this;
}

std::unique_ptr<WeatherRadarActivityStatusDetailType> WeatherRadarActivityStatusDetailType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherRadarActivityStatusDetailType : type};
  return (requestedType == uci::type::accessorType::weatherRadarActivityStatusDetailType) ? boost::make_unique<WeatherRadarActivityStatusDetailType>() : nullptr;
}

/**  */
namespace WeatherRadarActivityStatusDetailType_Names {

constexpr const char* Extern_Type_Name{"WeatherRadarActivityStatusDetailType"};
constexpr const char* NumberOfTimesSearched_Name{"NumberOfTimesSearched"};
constexpr const char* TimeLastSearched_Name{"TimeLastSearched"};
constexpr const char* Attempts_Name{"Attempts"};
constexpr const char* ActualRevisitPeriod_Name{"ActualRevisitPeriod"};
constexpr const char* PercentageInFOR_Name{"PercentageInFOR"};
constexpr const char* ActualStartTime_Name{"ActualStartTime"};
constexpr const char* ActualStopTime_Name{"ActualStopTime"};
constexpr const char* PercentSearched_Name{"PercentSearched"};
constexpr const char* ProductsProduced_Name{"ProductsProduced"};
constexpr const char* EstimatedERP_Name{"EstimatedERP"};

} // namespace WeatherRadarActivityStatusDetailType_Names

void WeatherRadarActivityStatusDetailType::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherRadarActivityStatusDetailType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeatherRadarActivityStatusDetailType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WeatherRadarActivityStatusDetailType_Names::NumberOfTimesSearched_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfTimesSearched(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherRadarActivityStatusDetailType_Names::TimeLastSearched_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeLastSearched(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherRadarActivityStatusDetailType_Names::Attempts_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAttempts(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherRadarActivityStatusDetailType_Names::ActualRevisitPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualRevisitPeriod(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherRadarActivityStatusDetailType_Names::PercentageInFOR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentageInFOR(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherRadarActivityStatusDetailType_Names::ActualStartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStartTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherRadarActivityStatusDetailType_Names::ActualStopTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStopTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherRadarActivityStatusDetailType_Names::PercentSearched_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentSearched(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherRadarActivityStatusDetailType_Names::ProductsProduced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProductsProduced(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherRadarActivityStatusDetailType_Names::EstimatedERP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedERP(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string WeatherRadarActivityStatusDetailType::serialize(const uci::type::WeatherRadarActivityStatusDetailType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WeatherRadarActivityStatusDetailType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WeatherRadarActivityStatusDetailType_Names::Extern_Type_Name);
  }
  if (accessor.hasNumberOfTimesSearched()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumberOfTimesSearched(), node, WeatherRadarActivityStatusDetailType_Names::NumberOfTimesSearched_Name);
  }
  if (accessor.hasTimeLastSearched()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimeLastSearched(), node, WeatherRadarActivityStatusDetailType_Names::TimeLastSearched_Name);
  }
  if (accessor.hasAttempts()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAttempts(), node, WeatherRadarActivityStatusDetailType_Names::Attempts_Name);
  }
  if (accessor.hasActualRevisitPeriod()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getActualRevisitPeriod(), node, WeatherRadarActivityStatusDetailType_Names::ActualRevisitPeriod_Name);
  }
  if (accessor.hasPercentageInFOR()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentageInFOR(), node, WeatherRadarActivityStatusDetailType_Names::PercentageInFOR_Name);
  }
  if (accessor.hasActualStartTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStartTime(), node, WeatherRadarActivityStatusDetailType_Names::ActualStartTime_Name);
  }
  if (accessor.hasActualStopTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStopTime(), node, WeatherRadarActivityStatusDetailType_Names::ActualStopTime_Name);
  }
  if (accessor.hasPercentSearched()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentSearched(), node, WeatherRadarActivityStatusDetailType_Names::PercentSearched_Name);
  }
  if (accessor.hasProductsProduced()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getProductsProduced(), node, WeatherRadarActivityStatusDetailType_Names::ProductsProduced_Name);
  }
  if (accessor.hasEstimatedERP()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedERP(), node, WeatherRadarActivityStatusDetailType_Names::EstimatedERP_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WeatherRadarActivityStatusDetailType>().release());
}

uci::type::WeatherRadarActivityStatusDetailType& WeatherRadarActivityStatusDetailType::create(const uci::type::WeatherRadarActivityStatusDetailType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WeatherRadarActivityStatusDetailType> newAccessor{boost::make_unique<asb_uci::type::WeatherRadarActivityStatusDetailType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WeatherRadarActivityStatusDetailType::destroy(uci::type::WeatherRadarActivityStatusDetailType& accessor) {
  delete dynamic_cast<asb_uci::type::WeatherRadarActivityStatusDetailType*>(&accessor);
}

} // namespace type

} // namespace uci

