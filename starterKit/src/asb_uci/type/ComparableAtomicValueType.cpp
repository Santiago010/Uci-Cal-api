/** @file ComparableAtomicValueType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ComparableAtomicValueType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/QueryString4096Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComparableAtomicValueType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QueryString4096Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TimeType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ComparableAtomicValueType::ComparableAtomicValueType() = default;

ComparableAtomicValueType::~ComparableAtomicValueType() = default;

void ComparableAtomicValueType::copy(const uci::type::ComparableAtomicValueType& accessor) {
  copyImpl(accessor, false);
}

void ComparableAtomicValueType::copyImpl(const uci::type::ComparableAtomicValueType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ComparableAtomicValueType&>(accessor);
    byteValue_Accessor = (accessorImpl.byteValue_Accessor ? accessorImpl.byteValue_Accessor : boost::none);
    unsignedByteValue_Accessor = (accessorImpl.unsignedByteValue_Accessor ? accessorImpl.unsignedByteValue_Accessor : boost::none);
    shortValue_Accessor = (accessorImpl.shortValue_Accessor ? accessorImpl.shortValue_Accessor : boost::none);
    unsignedShortValue_Accessor = (accessorImpl.unsignedShortValue_Accessor ? accessorImpl.unsignedShortValue_Accessor : boost::none);
    intValue_Accessor = (accessorImpl.intValue_Accessor ? accessorImpl.intValue_Accessor : boost::none);
    unsignedIntValue_Accessor = (accessorImpl.unsignedIntValue_Accessor ? accessorImpl.unsignedIntValue_Accessor : boost::none);
    longValue_Accessor = (accessorImpl.longValue_Accessor ? accessorImpl.longValue_Accessor : boost::none);
    floatValue_Accessor = (accessorImpl.floatValue_Accessor ? accessorImpl.floatValue_Accessor : boost::none);
    doubleValue_Accessor = (accessorImpl.doubleValue_Accessor ? accessorImpl.doubleValue_Accessor : boost::none);
    dateTimeValue_Accessor = (accessorImpl.dateTimeValue_Accessor ? accessorImpl.dateTimeValue_Accessor : boost::none);
    durationValue_Accessor = (accessorImpl.durationValue_Accessor ? accessorImpl.durationValue_Accessor : boost::none);
    timeValue_Accessor = (accessorImpl.timeValue_Accessor ? accessorImpl.timeValue_Accessor : boost::none);
    if (accessorImpl.stringValue_Accessor) {
      setStringValue(*(accessorImpl.stringValue_Accessor));
    } else {
      stringValue_Accessor.reset();
    }
  }
}

void ComparableAtomicValueType::reset() noexcept {
  byteValue_Accessor.reset();
  unsignedByteValue_Accessor.reset();
  shortValue_Accessor.reset();
  unsignedShortValue_Accessor.reset();
  intValue_Accessor.reset();
  unsignedIntValue_Accessor.reset();
  longValue_Accessor.reset();
  floatValue_Accessor.reset();
  doubleValue_Accessor.reset();
  dateTimeValue_Accessor.reset();
  durationValue_Accessor.reset();
  timeValue_Accessor.reset();
  stringValue_Accessor.reset();
}

uci::type::ComparableAtomicValueType::ComparableAtomicValueTypeChoice ComparableAtomicValueType::getComparableAtomicValueTypeChoiceOrdinal() const noexcept {
  if (byteValue_Accessor) {
    return COMPARABLEATOMICVALUETYPE_CHOICE_BYTEVALUE;
  }
  if (unsignedByteValue_Accessor) {
    return COMPARABLEATOMICVALUETYPE_CHOICE_UNSIGNEDBYTEVALUE;
  }
  if (shortValue_Accessor) {
    return COMPARABLEATOMICVALUETYPE_CHOICE_SHORTVALUE;
  }
  if (unsignedShortValue_Accessor) {
    return COMPARABLEATOMICVALUETYPE_CHOICE_UNSIGNEDSHORTVALUE;
  }
  if (intValue_Accessor) {
    return COMPARABLEATOMICVALUETYPE_CHOICE_INTVALUE;
  }
  if (unsignedIntValue_Accessor) {
    return COMPARABLEATOMICVALUETYPE_CHOICE_UNSIGNEDINTVALUE;
  }
  if (longValue_Accessor) {
    return COMPARABLEATOMICVALUETYPE_CHOICE_LONGVALUE;
  }
  if (floatValue_Accessor) {
    return COMPARABLEATOMICVALUETYPE_CHOICE_FLOATVALUE;
  }
  if (doubleValue_Accessor) {
    return COMPARABLEATOMICVALUETYPE_CHOICE_DOUBLEVALUE;
  }
  if (dateTimeValue_Accessor) {
    return COMPARABLEATOMICVALUETYPE_CHOICE_DATETIMEVALUE;
  }
  if (durationValue_Accessor) {
    return COMPARABLEATOMICVALUETYPE_CHOICE_DURATIONVALUE;
  }
  if (timeValue_Accessor) {
    return COMPARABLEATOMICVALUETYPE_CHOICE_TIMEVALUE;
  }
  if (stringValue_Accessor) {
    return COMPARABLEATOMICVALUETYPE_CHOICE_STRINGVALUE;
  }
  return COMPARABLEATOMICVALUETYPE_CHOICE_NONE;
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setComparableAtomicValueTypeChoiceOrdinal(uci::type::ComparableAtomicValueType::ComparableAtomicValueTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case COMPARABLEATOMICVALUETYPE_CHOICE_BYTEVALUE:
      chooseByteValue();
      break;
    case COMPARABLEATOMICVALUETYPE_CHOICE_UNSIGNEDBYTEVALUE:
      chooseUnsignedByteValue();
      break;
    case COMPARABLEATOMICVALUETYPE_CHOICE_SHORTVALUE:
      chooseShortValue();
      break;
    case COMPARABLEATOMICVALUETYPE_CHOICE_UNSIGNEDSHORTVALUE:
      chooseUnsignedShortValue();
      break;
    case COMPARABLEATOMICVALUETYPE_CHOICE_INTVALUE:
      chooseIntValue();
      break;
    case COMPARABLEATOMICVALUETYPE_CHOICE_UNSIGNEDINTVALUE:
      chooseUnsignedIntValue();
      break;
    case COMPARABLEATOMICVALUETYPE_CHOICE_LONGVALUE:
      chooseLongValue();
      break;
    case COMPARABLEATOMICVALUETYPE_CHOICE_FLOATVALUE:
      chooseFloatValue();
      break;
    case COMPARABLEATOMICVALUETYPE_CHOICE_DOUBLEVALUE:
      chooseDoubleValue();
      break;
    case COMPARABLEATOMICVALUETYPE_CHOICE_DATETIMEVALUE:
      chooseDateTimeValue();
      break;
    case COMPARABLEATOMICVALUETYPE_CHOICE_DURATIONVALUE:
      chooseDurationValue();
      break;
    case COMPARABLEATOMICVALUETYPE_CHOICE_TIMEVALUE:
      chooseTimeValue();
      break;
    case COMPARABLEATOMICVALUETYPE_CHOICE_STRINGVALUE:
      chooseStringValue("setComparableAtomicValueTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setComparableAtomicValueTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

xs::Byte ComparableAtomicValueType::getByteValue() const {
  if (byteValue_Accessor) {
    return *byteValue_Accessor;
  }
  throw uci::base::UCIException("Error in getByteValue(): Unable to get ByteValue, field not selected");
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setByteValue(xs::Byte value) {
  chooseByteValue();
  byteValue_Accessor = value;
  return *this;
}

bool ComparableAtomicValueType::isByteValue() const noexcept {
  return static_cast<bool>(byteValue_Accessor);
}

void ComparableAtomicValueType::chooseByteValue() {
  unsignedByteValue_Accessor.reset();
  shortValue_Accessor.reset();
  unsignedShortValue_Accessor.reset();
  intValue_Accessor.reset();
  unsignedIntValue_Accessor.reset();
  longValue_Accessor.reset();
  floatValue_Accessor.reset();
  doubleValue_Accessor.reset();
  dateTimeValue_Accessor.reset();
  durationValue_Accessor.reset();
  timeValue_Accessor.reset();
  stringValue_Accessor.reset();
  if (!byteValue_Accessor) {
    byteValue_Accessor = boost::optional<asb_xs::Byte>();
  }
}

xs::UnsignedByte ComparableAtomicValueType::getUnsignedByteValue() const {
  if (unsignedByteValue_Accessor) {
    return *unsignedByteValue_Accessor;
  }
  throw uci::base::UCIException("Error in getUnsignedByteValue(): Unable to get UnsignedByteValue, field not selected");
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setUnsignedByteValue(xs::UnsignedByte value) {
  chooseUnsignedByteValue();
  unsignedByteValue_Accessor = value;
  return *this;
}

bool ComparableAtomicValueType::isUnsignedByteValue() const noexcept {
  return static_cast<bool>(unsignedByteValue_Accessor);
}

void ComparableAtomicValueType::chooseUnsignedByteValue() {
  byteValue_Accessor.reset();
  shortValue_Accessor.reset();
  unsignedShortValue_Accessor.reset();
  intValue_Accessor.reset();
  unsignedIntValue_Accessor.reset();
  longValue_Accessor.reset();
  floatValue_Accessor.reset();
  doubleValue_Accessor.reset();
  dateTimeValue_Accessor.reset();
  durationValue_Accessor.reset();
  timeValue_Accessor.reset();
  stringValue_Accessor.reset();
  if (!unsignedByteValue_Accessor) {
    unsignedByteValue_Accessor = boost::optional<asb_xs::UnsignedByte>();
  }
}

xs::Short ComparableAtomicValueType::getShortValue() const {
  if (shortValue_Accessor) {
    return *shortValue_Accessor;
  }
  throw uci::base::UCIException("Error in getShortValue(): Unable to get ShortValue, field not selected");
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setShortValue(xs::Short value) {
  chooseShortValue();
  shortValue_Accessor = value;
  return *this;
}

bool ComparableAtomicValueType::isShortValue() const noexcept {
  return static_cast<bool>(shortValue_Accessor);
}

void ComparableAtomicValueType::chooseShortValue() {
  byteValue_Accessor.reset();
  unsignedByteValue_Accessor.reset();
  unsignedShortValue_Accessor.reset();
  intValue_Accessor.reset();
  unsignedIntValue_Accessor.reset();
  longValue_Accessor.reset();
  floatValue_Accessor.reset();
  doubleValue_Accessor.reset();
  dateTimeValue_Accessor.reset();
  durationValue_Accessor.reset();
  timeValue_Accessor.reset();
  stringValue_Accessor.reset();
  if (!shortValue_Accessor) {
    shortValue_Accessor = boost::optional<asb_xs::Short>();
  }
}

xs::UnsignedShort ComparableAtomicValueType::getUnsignedShortValue() const {
  if (unsignedShortValue_Accessor) {
    return *unsignedShortValue_Accessor;
  }
  throw uci::base::UCIException("Error in getUnsignedShortValue(): Unable to get UnsignedShortValue, field not selected");
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setUnsignedShortValue(xs::UnsignedShort value) {
  chooseUnsignedShortValue();
  unsignedShortValue_Accessor = value;
  return *this;
}

bool ComparableAtomicValueType::isUnsignedShortValue() const noexcept {
  return static_cast<bool>(unsignedShortValue_Accessor);
}

void ComparableAtomicValueType::chooseUnsignedShortValue() {
  byteValue_Accessor.reset();
  unsignedByteValue_Accessor.reset();
  shortValue_Accessor.reset();
  intValue_Accessor.reset();
  unsignedIntValue_Accessor.reset();
  longValue_Accessor.reset();
  floatValue_Accessor.reset();
  doubleValue_Accessor.reset();
  dateTimeValue_Accessor.reset();
  durationValue_Accessor.reset();
  timeValue_Accessor.reset();
  stringValue_Accessor.reset();
  if (!unsignedShortValue_Accessor) {
    unsignedShortValue_Accessor = boost::optional<asb_xs::UnsignedShort>();
  }
}

xs::Int ComparableAtomicValueType::getIntValue() const {
  if (intValue_Accessor) {
    return *intValue_Accessor;
  }
  throw uci::base::UCIException("Error in getIntValue(): Unable to get IntValue, field not selected");
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setIntValue(xs::Int value) {
  chooseIntValue();
  intValue_Accessor = value;
  return *this;
}

bool ComparableAtomicValueType::isIntValue() const noexcept {
  return static_cast<bool>(intValue_Accessor);
}

void ComparableAtomicValueType::chooseIntValue() {
  byteValue_Accessor.reset();
  unsignedByteValue_Accessor.reset();
  shortValue_Accessor.reset();
  unsignedShortValue_Accessor.reset();
  unsignedIntValue_Accessor.reset();
  longValue_Accessor.reset();
  floatValue_Accessor.reset();
  doubleValue_Accessor.reset();
  dateTimeValue_Accessor.reset();
  durationValue_Accessor.reset();
  timeValue_Accessor.reset();
  stringValue_Accessor.reset();
  if (!intValue_Accessor) {
    intValue_Accessor = boost::optional<asb_xs::Int>();
  }
}

xs::UnsignedInt ComparableAtomicValueType::getUnsignedIntValue() const {
  if (unsignedIntValue_Accessor) {
    return *unsignedIntValue_Accessor;
  }
  throw uci::base::UCIException("Error in getUnsignedIntValue(): Unable to get UnsignedIntValue, field not selected");
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setUnsignedIntValue(xs::UnsignedInt value) {
  chooseUnsignedIntValue();
  unsignedIntValue_Accessor = value;
  return *this;
}

bool ComparableAtomicValueType::isUnsignedIntValue() const noexcept {
  return static_cast<bool>(unsignedIntValue_Accessor);
}

void ComparableAtomicValueType::chooseUnsignedIntValue() {
  byteValue_Accessor.reset();
  unsignedByteValue_Accessor.reset();
  shortValue_Accessor.reset();
  unsignedShortValue_Accessor.reset();
  intValue_Accessor.reset();
  longValue_Accessor.reset();
  floatValue_Accessor.reset();
  doubleValue_Accessor.reset();
  dateTimeValue_Accessor.reset();
  durationValue_Accessor.reset();
  timeValue_Accessor.reset();
  stringValue_Accessor.reset();
  if (!unsignedIntValue_Accessor) {
    unsignedIntValue_Accessor = boost::optional<asb_xs::UnsignedInt>();
  }
}

xs::Long ComparableAtomicValueType::getLongValue() const {
  if (longValue_Accessor) {
    return *longValue_Accessor;
  }
  throw uci::base::UCIException("Error in getLongValue(): Unable to get LongValue, field not selected");
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setLongValue(xs::Long value) {
  chooseLongValue();
  longValue_Accessor = value;
  return *this;
}

bool ComparableAtomicValueType::isLongValue() const noexcept {
  return static_cast<bool>(longValue_Accessor);
}

void ComparableAtomicValueType::chooseLongValue() {
  byteValue_Accessor.reset();
  unsignedByteValue_Accessor.reset();
  shortValue_Accessor.reset();
  unsignedShortValue_Accessor.reset();
  intValue_Accessor.reset();
  unsignedIntValue_Accessor.reset();
  floatValue_Accessor.reset();
  doubleValue_Accessor.reset();
  dateTimeValue_Accessor.reset();
  durationValue_Accessor.reset();
  timeValue_Accessor.reset();
  stringValue_Accessor.reset();
  if (!longValue_Accessor) {
    longValue_Accessor = boost::optional<asb_xs::Long>();
  }
}

xs::Float ComparableAtomicValueType::getFloatValue() const {
  if (floatValue_Accessor) {
    return *floatValue_Accessor;
  }
  throw uci::base::UCIException("Error in getFloatValue(): Unable to get FloatValue, field not selected");
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setFloatValue(xs::Float value) {
  chooseFloatValue();
  floatValue_Accessor = value;
  return *this;
}

bool ComparableAtomicValueType::isFloatValue() const noexcept {
  return static_cast<bool>(floatValue_Accessor);
}

void ComparableAtomicValueType::chooseFloatValue() {
  byteValue_Accessor.reset();
  unsignedByteValue_Accessor.reset();
  shortValue_Accessor.reset();
  unsignedShortValue_Accessor.reset();
  intValue_Accessor.reset();
  unsignedIntValue_Accessor.reset();
  longValue_Accessor.reset();
  doubleValue_Accessor.reset();
  dateTimeValue_Accessor.reset();
  durationValue_Accessor.reset();
  timeValue_Accessor.reset();
  stringValue_Accessor.reset();
  if (!floatValue_Accessor) {
    floatValue_Accessor = boost::optional<asb_xs::Float>();
  }
}

xs::Double ComparableAtomicValueType::getDoubleValue() const {
  if (doubleValue_Accessor) {
    return *doubleValue_Accessor;
  }
  throw uci::base::UCIException("Error in getDoubleValue(): Unable to get DoubleValue, field not selected");
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setDoubleValue(xs::Double value) {
  chooseDoubleValue();
  doubleValue_Accessor = value;
  return *this;
}

bool ComparableAtomicValueType::isDoubleValue() const noexcept {
  return static_cast<bool>(doubleValue_Accessor);
}

void ComparableAtomicValueType::chooseDoubleValue() {
  byteValue_Accessor.reset();
  unsignedByteValue_Accessor.reset();
  shortValue_Accessor.reset();
  unsignedShortValue_Accessor.reset();
  intValue_Accessor.reset();
  unsignedIntValue_Accessor.reset();
  longValue_Accessor.reset();
  floatValue_Accessor.reset();
  dateTimeValue_Accessor.reset();
  durationValue_Accessor.reset();
  timeValue_Accessor.reset();
  stringValue_Accessor.reset();
  if (!doubleValue_Accessor) {
    doubleValue_Accessor = boost::optional<asb_xs::Double>();
  }
}

uci::type::DateTimeTypeValue ComparableAtomicValueType::getDateTimeValue() const {
  if (dateTimeValue_Accessor) {
    return *dateTimeValue_Accessor;
  }
  throw uci::base::UCIException("Error in getDateTimeValue(): Unable to get DateTimeValue, field not selected");
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setDateTimeValue(uci::type::DateTimeTypeValue value) {
  chooseDateTimeValue();
  dateTimeValue_Accessor = value;
  return *this;
}

bool ComparableAtomicValueType::isDateTimeValue() const noexcept {
  return static_cast<bool>(dateTimeValue_Accessor);
}

void ComparableAtomicValueType::chooseDateTimeValue() {
  byteValue_Accessor.reset();
  unsignedByteValue_Accessor.reset();
  shortValue_Accessor.reset();
  unsignedShortValue_Accessor.reset();
  intValue_Accessor.reset();
  unsignedIntValue_Accessor.reset();
  longValue_Accessor.reset();
  floatValue_Accessor.reset();
  doubleValue_Accessor.reset();
  durationValue_Accessor.reset();
  timeValue_Accessor.reset();
  stringValue_Accessor.reset();
  if (!dateTimeValue_Accessor) {
    dateTimeValue_Accessor = boost::optional<asb_xs::DateTime>();
  }
}

uci::type::DurationTypeValue ComparableAtomicValueType::getDurationValue() const {
  if (durationValue_Accessor) {
    return *durationValue_Accessor;
  }
  throw uci::base::UCIException("Error in getDurationValue(): Unable to get DurationValue, field not selected");
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setDurationValue(uci::type::DurationTypeValue value) {
  chooseDurationValue();
  durationValue_Accessor = value;
  return *this;
}

bool ComparableAtomicValueType::isDurationValue() const noexcept {
  return static_cast<bool>(durationValue_Accessor);
}

void ComparableAtomicValueType::chooseDurationValue() {
  byteValue_Accessor.reset();
  unsignedByteValue_Accessor.reset();
  shortValue_Accessor.reset();
  unsignedShortValue_Accessor.reset();
  intValue_Accessor.reset();
  unsignedIntValue_Accessor.reset();
  longValue_Accessor.reset();
  floatValue_Accessor.reset();
  doubleValue_Accessor.reset();
  dateTimeValue_Accessor.reset();
  timeValue_Accessor.reset();
  stringValue_Accessor.reset();
  if (!durationValue_Accessor) {
    durationValue_Accessor = boost::optional<asb_xs::Duration>();
  }
}

uci::type::TimeTypeValue ComparableAtomicValueType::getTimeValue() const {
  if (timeValue_Accessor) {
    return *timeValue_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeValue(): Unable to get TimeValue, field not selected");
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setTimeValue(uci::type::TimeTypeValue value) {
  chooseTimeValue();
  timeValue_Accessor = value;
  return *this;
}

bool ComparableAtomicValueType::isTimeValue() const noexcept {
  return static_cast<bool>(timeValue_Accessor);
}

void ComparableAtomicValueType::chooseTimeValue() {
  byteValue_Accessor.reset();
  unsignedByteValue_Accessor.reset();
  shortValue_Accessor.reset();
  unsignedShortValue_Accessor.reset();
  intValue_Accessor.reset();
  unsignedIntValue_Accessor.reset();
  longValue_Accessor.reset();
  floatValue_Accessor.reset();
  doubleValue_Accessor.reset();
  dateTimeValue_Accessor.reset();
  durationValue_Accessor.reset();
  stringValue_Accessor.reset();
  if (!timeValue_Accessor) {
    timeValue_Accessor = boost::optional<asb_xs::Time>();
  }
}

uci::type::QueryString4096Type& ComparableAtomicValueType::getStringValue_() const {
  if (stringValue_Accessor) {
    return *stringValue_Accessor;
  }
  throw uci::base::UCIException("Error in getStringValue(): An attempt was made to get an optional field that was not enabled, call hasStringValue() to determine if it is safe to call getStringValue()");
}

const uci::type::QueryString4096Type& ComparableAtomicValueType::getStringValue() const {
  return getStringValue_();
}

uci::type::QueryString4096Type& ComparableAtomicValueType::getStringValue() {
  return getStringValue_();
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setStringValue(const uci::type::QueryString4096Type& value) {
  return setStringValue(value.c_str());
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setStringValue(const std::string& value) {
  return setStringValue(value.c_str());
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::setStringValue(const char * value) {
  chooseStringValue().setStringValue(value);
  return *this;
}

bool ComparableAtomicValueType::isStringValue() const noexcept {
  return static_cast<bool>(stringValue_Accessor);
}

uci::type::QueryString4096Type& ComparableAtomicValueType::chooseStringValue(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  byteValue_Accessor.reset();
  unsignedByteValue_Accessor.reset();
  shortValue_Accessor.reset();
  unsignedShortValue_Accessor.reset();
  intValue_Accessor.reset();
  unsignedIntValue_Accessor.reset();
  longValue_Accessor.reset();
  floatValue_Accessor.reset();
  doubleValue_Accessor.reset();
  dateTimeValue_Accessor.reset();
  durationValue_Accessor.reset();
  timeValue_Accessor.reset();
  if (!stringValue_Accessor) {
    stringValue_Accessor = QueryString4096Type::create(type);
  }
  return *stringValue_Accessor;
}

uci::type::QueryString4096Type& ComparableAtomicValueType::chooseStringValue(uci::base::accessorType::AccessorType type) {
  return chooseStringValue("chooseStringValue", type);
}

std::unique_ptr<ComparableAtomicValueType> ComparableAtomicValueType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::comparableAtomicValueType : type};
  return (requestedType == uci::type::accessorType::comparableAtomicValueType) ? boost::make_unique<ComparableAtomicValueType>() : nullptr;
}

/**  */
namespace ComparableAtomicValueType_Names {

constexpr const char* Extern_Type_Name{"ComparableAtomicValueType"};
constexpr const char* ByteValue_Name{"ByteValue"};
constexpr const char* UnsignedByteValue_Name{"UnsignedByteValue"};
constexpr const char* ShortValue_Name{"ShortValue"};
constexpr const char* UnsignedShortValue_Name{"UnsignedShortValue"};
constexpr const char* IntValue_Name{"IntValue"};
constexpr const char* UnsignedIntValue_Name{"UnsignedIntValue"};
constexpr const char* LongValue_Name{"LongValue"};
constexpr const char* FloatValue_Name{"FloatValue"};
constexpr const char* DoubleValue_Name{"DoubleValue"};
constexpr const char* DateTimeValue_Name{"DateTimeValue"};
constexpr const char* DurationValue_Name{"DurationValue"};
constexpr const char* TimeValue_Name{"TimeValue"};
constexpr const char* StringValue_Name{"StringValue"};

} // namespace ComparableAtomicValueType_Names

void ComparableAtomicValueType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ComparableAtomicValueType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ComparableAtomicValueType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ComparableAtomicValueType_Names::ByteValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setByteValue(asb_uci::util::SerializationHelpers::deserializeByte(*value));
      }
    } else if (valueType.first == nsPrefix + ComparableAtomicValueType_Names::UnsignedByteValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnsignedByteValue(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + ComparableAtomicValueType_Names::ShortValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setShortValue(asb_uci::util::SerializationHelpers::deserializeShort(*value));
      }
    } else if (valueType.first == nsPrefix + ComparableAtomicValueType_Names::UnsignedShortValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnsignedShortValue(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + ComparableAtomicValueType_Names::IntValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIntValue(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + ComparableAtomicValueType_Names::UnsignedIntValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnsignedIntValue(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ComparableAtomicValueType_Names::LongValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLongValue(asb_uci::util::SerializationHelpers::deserializeLong(*value));
      }
    } else if (valueType.first == nsPrefix + ComparableAtomicValueType_Names::FloatValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFloatValue(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + ComparableAtomicValueType_Names::DoubleValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDoubleValue(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ComparableAtomicValueType_Names::DateTimeValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDateTimeValue(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + ComparableAtomicValueType_Names::DurationValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDurationValue(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + ComparableAtomicValueType_Names::TimeValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeValue(asb_uci::util::SerializationHelpers::deserializeTime(*value));
      }
    } else if (valueType.first == nsPrefix + ComparableAtomicValueType_Names::StringValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseStringValue().setStringValue(*value);
      }
    }
  }
}

std::string ComparableAtomicValueType::serialize(const uci::type::ComparableAtomicValueType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ComparableAtomicValueType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ComparableAtomicValueType_Names::Extern_Type_Name);
  }
  if (accessor.isByteValue()) {
    asb_uci::util::SerializationHelpers::serializeByte(accessor.getByteValue(), node, ComparableAtomicValueType_Names::ByteValue_Name);
  } else if (accessor.isUnsignedByteValue()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getUnsignedByteValue(), node, ComparableAtomicValueType_Names::UnsignedByteValue_Name);
  } else if (accessor.isShortValue()) {
    asb_uci::util::SerializationHelpers::serializeShort(accessor.getShortValue(), node, ComparableAtomicValueType_Names::ShortValue_Name);
  } else if (accessor.isUnsignedShortValue()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getUnsignedShortValue(), node, ComparableAtomicValueType_Names::UnsignedShortValue_Name);
  } else if (accessor.isIntValue()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getIntValue(), node, ComparableAtomicValueType_Names::IntValue_Name);
  } else if (accessor.isUnsignedIntValue()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getUnsignedIntValue(), node, ComparableAtomicValueType_Names::UnsignedIntValue_Name);
  } else if (accessor.isLongValue()) {
    asb_uci::util::SerializationHelpers::serializeLong(accessor.getLongValue(), node, ComparableAtomicValueType_Names::LongValue_Name);
  } else if (accessor.isFloatValue()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getFloatValue(), node, ComparableAtomicValueType_Names::FloatValue_Name);
  } else if (accessor.isDoubleValue()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDoubleValue(), node, ComparableAtomicValueType_Names::DoubleValue_Name);
  } else if (accessor.isDateTimeValue()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getDateTimeValue(), node, ComparableAtomicValueType_Names::DateTimeValue_Name);
  } else if (accessor.isDurationValue()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getDurationValue(), node, ComparableAtomicValueType_Names::DurationValue_Name);
  } else if (accessor.isTimeValue()) {
    asb_uci::util::SerializationHelpers::serializeTime(accessor.getTimeValue(), node, ComparableAtomicValueType_Names::TimeValue_Name);
  } else if (accessor.isStringValue()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getStringValue(), node, ComparableAtomicValueType_Names::StringValue_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ComparableAtomicValueType>().release());
}

uci::type::ComparableAtomicValueType& ComparableAtomicValueType::create(const uci::type::ComparableAtomicValueType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ComparableAtomicValueType> newAccessor{boost::make_unique<asb_uci::type::ComparableAtomicValueType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ComparableAtomicValueType::destroy(uci::type::ComparableAtomicValueType& accessor) {
  delete dynamic_cast<asb_uci::type::ComparableAtomicValueType*>(&accessor);
}

} // namespace type

} // namespace uci

