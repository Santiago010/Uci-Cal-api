/** @file SubsystemBIT_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SubsystemBIT_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/BIT_ID_Type.h"
#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/ComponentID_Type.h"
#include "asb_uci/type/SubsystemBIT_ControlInterfacesEnum.h"
#include "asb_uci/type/VisibleString256Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/BIT_ID_Type.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/DurationType.h"
#include "uci/type/SubsystemBIT_ControlInterfacesEnum.h"
#include "uci/type/SubsystemBIT_Type.h"
#include "uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemBIT_Type::SubsystemBIT_Type()
  : bIT_ID_Accessor{boost::make_unique<BIT_ID_Type>()},
    acceptedInterface_Accessor{boost::make_unique<SubsystemBIT_ControlInterfacesEnum>()},
    bIT_ItemName_Accessor{boost::make_unique<BIT_ItemName>(0, SIZE_MAX)},
    subsystemComponentID_Accessor{boost::make_unique<SubsystemComponentID>(0, SIZE_MAX)},
    capabilityID_Accessor{boost::make_unique<CapabilityID>(0, SIZE_MAX)} {
}

SubsystemBIT_Type::~SubsystemBIT_Type() = default;

void SubsystemBIT_Type::copy(const uci::type::SubsystemBIT_Type& accessor) {
  copyImpl(accessor, false);
}

void SubsystemBIT_Type::copyImpl(const uci::type::SubsystemBIT_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SubsystemBIT_Type&>(accessor);
    setBIT_ID(*(accessorImpl.bIT_ID_Accessor));
    setAcceptedInterface(*(accessorImpl.acceptedInterface_Accessor));
    setBIT_ItemName(*(accessorImpl.bIT_ItemName_Accessor));
    setSubsystemComponentID(*(accessorImpl.subsystemComponentID_Accessor));
    setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    if (accessorImpl.hasExpectedTestDuration()) {
      setExpectedTestDuration(accessorImpl.getExpectedTestDuration());
    } else {
      clearExpectedTestDuration();
    }
  }
}

void SubsystemBIT_Type::reset() noexcept {
  bIT_ID_Accessor->reset();
  acceptedInterface_Accessor->reset();
  bIT_ItemName_Accessor->reset();
  subsystemComponentID_Accessor->reset();
  capabilityID_Accessor->reset();
  clearExpectedTestDuration();
}

const uci::type::BIT_ID_Type& SubsystemBIT_Type::getBIT_ID() const {
  return *bIT_ID_Accessor;
}

uci::type::BIT_ID_Type& SubsystemBIT_Type::getBIT_ID() {
  return *bIT_ID_Accessor;
}

uci::type::SubsystemBIT_Type& SubsystemBIT_Type::setBIT_ID(const uci::type::BIT_ID_Type& accessor) {
  if (&accessor != bIT_ID_Accessor.get()) {
    bIT_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemBIT_ControlInterfacesEnum& SubsystemBIT_Type::getAcceptedInterface() const {
  return *acceptedInterface_Accessor;
}

uci::type::SubsystemBIT_ControlInterfacesEnum& SubsystemBIT_Type::getAcceptedInterface() {
  return *acceptedInterface_Accessor;
}

uci::type::SubsystemBIT_Type& SubsystemBIT_Type::setAcceptedInterface(const uci::type::SubsystemBIT_ControlInterfacesEnum& accessor) {
  if (&accessor != acceptedInterface_Accessor.get()) {
    acceptedInterface_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemBIT_Type& SubsystemBIT_Type::setAcceptedInterface(uci::type::SubsystemBIT_ControlInterfacesEnum::EnumerationItem value) {
  acceptedInterface_Accessor->setValue(value);
  return *this;
}


const uci::type::SubsystemBIT_Type::BIT_ItemName& SubsystemBIT_Type::getBIT_ItemName() const {
  return *bIT_ItemName_Accessor;
}

uci::type::SubsystemBIT_Type::BIT_ItemName& SubsystemBIT_Type::getBIT_ItemName() {
  return *bIT_ItemName_Accessor;
}

uci::type::SubsystemBIT_Type& SubsystemBIT_Type::setBIT_ItemName(const uci::type::SubsystemBIT_Type::BIT_ItemName& accessor) {
  if (&accessor != bIT_ItemName_Accessor.get()) {
    bIT_ItemName_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemBIT_Type::SubsystemComponentID& SubsystemBIT_Type::getSubsystemComponentID() const {
  return *subsystemComponentID_Accessor;
}

uci::type::SubsystemBIT_Type::SubsystemComponentID& SubsystemBIT_Type::getSubsystemComponentID() {
  return *subsystemComponentID_Accessor;
}

uci::type::SubsystemBIT_Type& SubsystemBIT_Type::setSubsystemComponentID(const uci::type::SubsystemBIT_Type::SubsystemComponentID& accessor) {
  if (&accessor != subsystemComponentID_Accessor.get()) {
    subsystemComponentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemBIT_Type::CapabilityID& SubsystemBIT_Type::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::SubsystemBIT_Type::CapabilityID& SubsystemBIT_Type::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::SubsystemBIT_Type& SubsystemBIT_Type::setCapabilityID(const uci::type::SubsystemBIT_Type::CapabilityID& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DurationTypeValue SubsystemBIT_Type::getExpectedTestDuration() const {
  if (expectedTestDuration_Accessor) {
    return *expectedTestDuration_Accessor;
  }
  throw uci::base::UCIException("Error in getExpectedTestDuration(): An attempt was made to get an optional field that was not enabled, call hasExpectedTestDuration() to determine if it is safe to call getExpectedTestDuration()");
}

uci::type::SubsystemBIT_Type& SubsystemBIT_Type::setExpectedTestDuration(uci::type::DurationTypeValue value) {
  expectedTestDuration_Accessor = value;
  return *this;
}

bool SubsystemBIT_Type::hasExpectedTestDuration() const noexcept {
  return expectedTestDuration_Accessor.has_value();
}

uci::type::SubsystemBIT_Type& SubsystemBIT_Type::clearExpectedTestDuration() noexcept {
  expectedTestDuration_Accessor.reset();
  return *this;
}

std::unique_ptr<SubsystemBIT_Type> SubsystemBIT_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemBIT_Type : type};
  return (requestedType == uci::type::accessorType::subsystemBIT_Type) ? boost::make_unique<SubsystemBIT_Type>() : nullptr;
}

/**  */
namespace SubsystemBIT_Type_Names {

constexpr const char* Extern_Type_Name{"SubsystemBIT_Type"};
constexpr const char* BIT_ID_Name{"BIT_ID"};
constexpr const char* AcceptedInterface_Name{"AcceptedInterface"};
constexpr const char* BIT_ItemName_Name{"BIT_ItemName"};
constexpr const char* SubsystemComponentID_Name{"SubsystemComponentID"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* ExpectedTestDuration_Name{"ExpectedTestDuration"};

} // namespace SubsystemBIT_Type_Names

void SubsystemBIT_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemBIT_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemBIT_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemBIT_Type_Names::BIT_ID_Name) {
      BIT_ID_Type::deserialize(valueType.second, accessor.getBIT_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemBIT_Type_Names::AcceptedInterface_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAcceptedInterface().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemBIT_Type_Names::BIT_ItemName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemBIT_Type::BIT_ItemName& boundedList = accessor.getBIT_ItemName();
        const uci::type::SubsystemBIT_Type::BIT_ItemName::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemBIT_Type_Names::SubsystemComponentID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemBIT_Type::SubsystemComponentID& boundedList = accessor.getSubsystemComponentID();
        const uci::type::SubsystemBIT_Type::SubsystemComponentID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ComponentID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemBIT_Type_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemBIT_Type::CapabilityID& boundedList = accessor.getCapabilityID();
        const uci::type::SubsystemBIT_Type::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemBIT_Type_Names::ExpectedTestDuration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setExpectedTestDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string SubsystemBIT_Type::serialize(const uci::type::SubsystemBIT_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemBIT_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemBIT_Type_Names::Extern_Type_Name);
  }
  BIT_ID_Type::serialize(accessor.getBIT_ID(), node, SubsystemBIT_Type_Names::BIT_ID_Name);
  SubsystemBIT_ControlInterfacesEnum::serialize(accessor.getAcceptedInterface(), node, SubsystemBIT_Type_Names::AcceptedInterface_Name, false);
  {
    const uci::type::SubsystemBIT_Type::BIT_ItemName& boundedList = accessor.getBIT_ItemName();
    for (uci::type::SubsystemBIT_Type::BIT_ItemName::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, SubsystemBIT_Type_Names::BIT_ItemName_Name);
    }
  }
  {
    const uci::type::SubsystemBIT_Type::SubsystemComponentID& boundedList = accessor.getSubsystemComponentID();
    for (uci::type::SubsystemBIT_Type::SubsystemComponentID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ComponentID_Type::serialize(boundedList.at(i), node, SubsystemBIT_Type_Names::SubsystemComponentID_Name);
    }
  }
  {
    const uci::type::SubsystemBIT_Type::CapabilityID& boundedList = accessor.getCapabilityID();
    for (uci::type::SubsystemBIT_Type::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityID_Type::serialize(boundedList.at(i), node, SubsystemBIT_Type_Names::CapabilityID_Name);
    }
  }
  if (accessor.hasExpectedTestDuration()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getExpectedTestDuration(), node, SubsystemBIT_Type_Names::ExpectedTestDuration_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubsystemBIT_Type& SubsystemBIT_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubsystemBIT_Type>().release());
}

uci::type::SubsystemBIT_Type& SubsystemBIT_Type::create(const uci::type::SubsystemBIT_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubsystemBIT_Type> newAccessor{boost::make_unique<asb_uci::type::SubsystemBIT_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubsystemBIT_Type::destroy(uci::type::SubsystemBIT_Type& accessor) {
  delete dynamic_cast<asb_uci::type::SubsystemBIT_Type*>(&accessor);
}

} // namespace type

} // namespace uci

