/** @file CommAssetEstimationResultType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommAssetEstimationResultType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommAssetMDT.h"
#include "asb_uci/type/CommAssetPositionReportMDT.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommAssetEstimationResultType.h"
#include "uci/type/CommAssetMDT.h"
#include "uci/type/CommAssetPositionReportMDT.h"
#include "uci/type/DateTimeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommAssetEstimationResultType::CommAssetEstimationResultType() = default;

CommAssetEstimationResultType::~CommAssetEstimationResultType() = default;

void CommAssetEstimationResultType::copy(const uci::type::CommAssetEstimationResultType& accessor) {
  copyImpl(accessor, false);
}

void CommAssetEstimationResultType::copyImpl(const uci::type::CommAssetEstimationResultType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommAssetEstimationResultType&>(accessor);
    if (accessorImpl.commAsset_Accessor) {
      setCommAsset(*(accessorImpl.commAsset_Accessor));
    } else {
      commAsset_Accessor.reset();
    }
    if (accessorImpl.commAssetPositionReport_Accessor) {
      setCommAssetPositionReport(*(accessorImpl.commAssetPositionReport_Accessor));
    } else {
      commAssetPositionReport_Accessor.reset();
    }
    setTimestamp(accessorImpl.timestamp_Accessor);
  }
}

void CommAssetEstimationResultType::reset() noexcept {
  commAsset_Accessor.reset();
  commAssetPositionReport_Accessor.reset();
  timestamp_Accessor = 0;
}

uci::type::CommAssetMDT& CommAssetEstimationResultType::getCommAsset_() const {
  if (commAsset_Accessor) {
    return *commAsset_Accessor;
  }
  throw uci::base::UCIException("Error in getCommAsset(): An attempt was made to get an optional field that was not enabled, call hasCommAsset() to determine if it is safe to call getCommAsset()");
}

const uci::type::CommAssetMDT& CommAssetEstimationResultType::getCommAsset() const {
  return getCommAsset_();
}

uci::type::CommAssetMDT& CommAssetEstimationResultType::getCommAsset() {
  return getCommAsset_();
}

uci::type::CommAssetEstimationResultType& CommAssetEstimationResultType::setCommAsset(const uci::type::CommAssetMDT& accessor) {
  enableCommAsset();
  if (&accessor != commAsset_Accessor.get()) {
    commAsset_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommAssetEstimationResultType::hasCommAsset() const noexcept {
  return static_cast<bool>(commAsset_Accessor);
}

uci::type::CommAssetMDT& CommAssetEstimationResultType::enableCommAsset(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commAssetMDT : type};
  if ((!commAsset_Accessor) || (commAsset_Accessor->getAccessorType() != requestedType)) {
    commAsset_Accessor = CommAssetMDT::create(requestedType);
    if (!commAsset_Accessor) {
      throw uci::base::UCIException("Error in enableCommAsset(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commAsset_Accessor;
}

uci::type::CommAssetEstimationResultType& CommAssetEstimationResultType::clearCommAsset() noexcept {
  commAsset_Accessor.reset();
  return *this;
}

uci::type::CommAssetPositionReportMDT& CommAssetEstimationResultType::getCommAssetPositionReport_() const {
  if (commAssetPositionReport_Accessor) {
    return *commAssetPositionReport_Accessor;
  }
  throw uci::base::UCIException("Error in getCommAssetPositionReport(): An attempt was made to get an optional field that was not enabled, call hasCommAssetPositionReport() to determine if it is safe to call getCommAssetPositionReport()");
}

const uci::type::CommAssetPositionReportMDT& CommAssetEstimationResultType::getCommAssetPositionReport() const {
  return getCommAssetPositionReport_();
}

uci::type::CommAssetPositionReportMDT& CommAssetEstimationResultType::getCommAssetPositionReport() {
  return getCommAssetPositionReport_();
}

uci::type::CommAssetEstimationResultType& CommAssetEstimationResultType::setCommAssetPositionReport(const uci::type::CommAssetPositionReportMDT& accessor) {
  enableCommAssetPositionReport();
  if (&accessor != commAssetPositionReport_Accessor.get()) {
    commAssetPositionReport_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommAssetEstimationResultType::hasCommAssetPositionReport() const noexcept {
  return static_cast<bool>(commAssetPositionReport_Accessor);
}

uci::type::CommAssetPositionReportMDT& CommAssetEstimationResultType::enableCommAssetPositionReport(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commAssetPositionReportMDT : type};
  if ((!commAssetPositionReport_Accessor) || (commAssetPositionReport_Accessor->getAccessorType() != requestedType)) {
    commAssetPositionReport_Accessor = CommAssetPositionReportMDT::create(requestedType);
    if (!commAssetPositionReport_Accessor) {
      throw uci::base::UCIException("Error in enableCommAssetPositionReport(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commAssetPositionReport_Accessor;
}

uci::type::CommAssetEstimationResultType& CommAssetEstimationResultType::clearCommAssetPositionReport() noexcept {
  commAssetPositionReport_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue CommAssetEstimationResultType::getTimestamp() const {
  return timestamp_Accessor;
}

uci::type::CommAssetEstimationResultType& CommAssetEstimationResultType::setTimestamp(uci::type::DateTimeTypeValue value) {
  timestamp_Accessor = value;
  return *this;
}


std::unique_ptr<CommAssetEstimationResultType> CommAssetEstimationResultType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commAssetEstimationResultType : type};
  return (requestedType == uci::type::accessorType::commAssetEstimationResultType) ? boost::make_unique<CommAssetEstimationResultType>() : nullptr;
}

/**  */
namespace CommAssetEstimationResultType_Names {

constexpr const char* Extern_Type_Name{"CommAssetEstimationResultType"};
constexpr const char* CommAsset_Name{"CommAsset"};
constexpr const char* CommAssetPositionReport_Name{"CommAssetPositionReport"};
constexpr const char* Timestamp_Name{"Timestamp"};

} // namespace CommAssetEstimationResultType_Names

void CommAssetEstimationResultType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommAssetEstimationResultType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommAssetEstimationResultType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommAssetEstimationResultType_Names::CommAsset_Name) {
      CommAssetMDT::deserialize(valueType.second, accessor.enableCommAsset(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommAssetEstimationResultType_Names::CommAssetPositionReport_Name) {
      CommAssetPositionReportMDT::deserialize(valueType.second, accessor.enableCommAssetPositionReport(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommAssetEstimationResultType_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    }
  }
}

std::string CommAssetEstimationResultType::serialize(const uci::type::CommAssetEstimationResultType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommAssetEstimationResultType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommAssetEstimationResultType_Names::Extern_Type_Name);
  }
  if (accessor.hasCommAsset()) {
    CommAssetMDT::serialize(accessor.getCommAsset(), node, CommAssetEstimationResultType_Names::CommAsset_Name);
  }
  if (accessor.hasCommAssetPositionReport()) {
    CommAssetPositionReportMDT::serialize(accessor.getCommAssetPositionReport(), node, CommAssetEstimationResultType_Names::CommAssetPositionReport_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, CommAssetEstimationResultType_Names::Timestamp_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommAssetEstimationResultType& CommAssetEstimationResultType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommAssetEstimationResultType>().release());
}

uci::type::CommAssetEstimationResultType& CommAssetEstimationResultType::create(const uci::type::CommAssetEstimationResultType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommAssetEstimationResultType> newAccessor{boost::make_unique<asb_uci::type::CommAssetEstimationResultType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommAssetEstimationResultType::destroy(uci::type::CommAssetEstimationResultType& accessor) {
  delete dynamic_cast<asb_uci::type::CommAssetEstimationResultType*>(&accessor);
}

} // namespace type

} // namespace uci

