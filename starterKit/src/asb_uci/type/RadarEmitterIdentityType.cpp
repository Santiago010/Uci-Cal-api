/** @file RadarEmitterIdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RadarEmitterIdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/NotationType.h"
#include "asb_uci/type/RadarModeEnum.h"
#include "asb_uci/type/TrackModeEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/NotationType.h"
#include "uci/type/RadarEmitterIdentityType.h"
#include "uci/type/RadarModeEnum.h"
#include "uci/type/TrackModeEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RadarEmitterIdentityType::RadarEmitterIdentityType() = default;

RadarEmitterIdentityType::~RadarEmitterIdentityType() = default;

void RadarEmitterIdentityType::copy(const uci::type::RadarEmitterIdentityType& accessor) {
  copyImpl(accessor, false);
}

void RadarEmitterIdentityType::copyImpl(const uci::type::RadarEmitterIdentityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RadarEmitterIdentityType&>(accessor);
    if (accessorImpl.eLNOT_Identifier_Accessor) {
      setELNOT_Identifier(*(accessorImpl.eLNOT_Identifier_Accessor));
    } else {
      eLNOT_Identifier_Accessor.reset();
    }
    if (accessorImpl.dIEQP_Key_Accessor) {
      setDIEQP_Key(*(accessorImpl.dIEQP_Key_Accessor));
    } else {
      dIEQP_Key_Accessor.reset();
    }
    if (accessorImpl.radarMode_Accessor) {
      setRadarMode(*(accessorImpl.radarMode_Accessor));
    } else {
      radarMode_Accessor.reset();
    }
    if (accessorImpl.trackMode_Accessor) {
      setTrackMode(*(accessorImpl.trackMode_Accessor));
    } else {
      trackMode_Accessor.reset();
    }
    if (accessorImpl.emitterIndex_Accessor) {
      setEmitterIndex(*(accessorImpl.emitterIndex_Accessor));
    } else {
      emitterIndex_Accessor.reset();
    }
  }
}

void RadarEmitterIdentityType::reset() noexcept {
  eLNOT_Identifier_Accessor.reset();
  dIEQP_Key_Accessor.reset();
  radarMode_Accessor.reset();
  trackMode_Accessor.reset();
  emitterIndex_Accessor.reset();
}

uci::type::NotationType& RadarEmitterIdentityType::getELNOT_Identifier_() const {
  if (eLNOT_Identifier_Accessor) {
    return *eLNOT_Identifier_Accessor;
  }
  throw uci::base::UCIException("Error in getELNOT_Identifier(): An attempt was made to get an optional field that was not enabled, call hasELNOT_Identifier() to determine if it is safe to call getELNOT_Identifier()");
}

const uci::type::NotationType& RadarEmitterIdentityType::getELNOT_Identifier() const {
  return getELNOT_Identifier_();
}

uci::type::NotationType& RadarEmitterIdentityType::getELNOT_Identifier() {
  return getELNOT_Identifier_();
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::setELNOT_Identifier(const uci::type::NotationType& value) {
  return setELNOT_Identifier(value.c_str());
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::setELNOT_Identifier(const std::string& value) {
  return setELNOT_Identifier(value.c_str());
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::setELNOT_Identifier(const char* value) {
  enableELNOT_Identifier().setStringValue(value);
  return *this;
}

bool RadarEmitterIdentityType::hasELNOT_Identifier() const noexcept {
  return static_cast<bool>(eLNOT_Identifier_Accessor);
}

uci::type::NotationType& RadarEmitterIdentityType::enableELNOT_Identifier(uci::base::accessorType::AccessorType type) {
  if (!eLNOT_Identifier_Accessor) {
    eLNOT_Identifier_Accessor = NotationType::create(type);
  }
  return *eLNOT_Identifier_Accessor;
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::clearELNOT_Identifier() noexcept {
  eLNOT_Identifier_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& RadarEmitterIdentityType::getDIEQP_Key_() const {
  if (dIEQP_Key_Accessor) {
    return *dIEQP_Key_Accessor;
  }
  throw uci::base::UCIException("Error in getDIEQP_Key(): An attempt was made to get an optional field that was not enabled, call hasDIEQP_Key() to determine if it is safe to call getDIEQP_Key()");
}

const uci::type::ForeignKeyType& RadarEmitterIdentityType::getDIEQP_Key() const {
  return getDIEQP_Key_();
}

uci::type::ForeignKeyType& RadarEmitterIdentityType::getDIEQP_Key() {
  return getDIEQP_Key_();
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::setDIEQP_Key(const uci::type::ForeignKeyType& accessor) {
  enableDIEQP_Key(accessor.getAccessorType());
  if (&accessor != dIEQP_Key_Accessor.get()) {
    dIEQP_Key_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RadarEmitterIdentityType::hasDIEQP_Key() const noexcept {
  return static_cast<bool>(dIEQP_Key_Accessor);
}

uci::type::ForeignKeyType& RadarEmitterIdentityType::enableDIEQP_Key(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!dIEQP_Key_Accessor) || (dIEQP_Key_Accessor->getAccessorType() != requestedType)) {
    dIEQP_Key_Accessor = ForeignKeyType::create(requestedType);
    if (!dIEQP_Key_Accessor) {
      throw uci::base::UCIException("Error in enableDIEQP_Key(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dIEQP_Key_Accessor;
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::clearDIEQP_Key() noexcept {
  dIEQP_Key_Accessor.reset();
  return *this;
}

uci::type::RadarModeEnum& RadarEmitterIdentityType::getRadarMode_() const {
  if (radarMode_Accessor) {
    return *radarMode_Accessor;
  }
  throw uci::base::UCIException("Error in getRadarMode(): An attempt was made to get an optional field that was not enabled, call hasRadarMode() to determine if it is safe to call getRadarMode()");
}

const uci::type::RadarModeEnum& RadarEmitterIdentityType::getRadarMode() const {
  return getRadarMode_();
}

uci::type::RadarModeEnum& RadarEmitterIdentityType::getRadarMode() {
  return getRadarMode_();
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::setRadarMode(const uci::type::RadarModeEnum& accessor) {
  enableRadarMode();
  if (&accessor != radarMode_Accessor.get()) {
    radarMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::setRadarMode(const uci::type::RadarModeEnum::EnumerationItem value) {
  enableRadarMode().setValue(value);
  return *this;
}

bool RadarEmitterIdentityType::hasRadarMode() const noexcept {
  return static_cast<bool>(radarMode_Accessor);
}

uci::type::RadarModeEnum& RadarEmitterIdentityType::enableRadarMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarModeEnum : type};
  if ((!radarMode_Accessor) || (radarMode_Accessor->getAccessorType() != requestedType)) {
    radarMode_Accessor = RadarModeEnum::create(requestedType);
    if (!radarMode_Accessor) {
      throw uci::base::UCIException("Error in enableRadarMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *radarMode_Accessor;
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::clearRadarMode() noexcept {
  radarMode_Accessor.reset();
  return *this;
}

uci::type::TrackModeEnum& RadarEmitterIdentityType::getTrackMode_() const {
  if (trackMode_Accessor) {
    return *trackMode_Accessor;
  }
  throw uci::base::UCIException("Error in getTrackMode(): An attempt was made to get an optional field that was not enabled, call hasTrackMode() to determine if it is safe to call getTrackMode()");
}

const uci::type::TrackModeEnum& RadarEmitterIdentityType::getTrackMode() const {
  return getTrackMode_();
}

uci::type::TrackModeEnum& RadarEmitterIdentityType::getTrackMode() {
  return getTrackMode_();
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::setTrackMode(const uci::type::TrackModeEnum& accessor) {
  enableTrackMode();
  if (&accessor != trackMode_Accessor.get()) {
    trackMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::setTrackMode(const uci::type::TrackModeEnum::EnumerationItem value) {
  enableTrackMode().setValue(value);
  return *this;
}

bool RadarEmitterIdentityType::hasTrackMode() const noexcept {
  return static_cast<bool>(trackMode_Accessor);
}

uci::type::TrackModeEnum& RadarEmitterIdentityType::enableTrackMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::trackModeEnum : type};
  if ((!trackMode_Accessor) || (trackMode_Accessor->getAccessorType() != requestedType)) {
    trackMode_Accessor = TrackModeEnum::create(requestedType);
    if (!trackMode_Accessor) {
      throw uci::base::UCIException("Error in enableTrackMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *trackMode_Accessor;
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::clearTrackMode() noexcept {
  trackMode_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& RadarEmitterIdentityType::getEmitterIndex_() const {
  if (emitterIndex_Accessor) {
    return *emitterIndex_Accessor;
  }
  throw uci::base::UCIException("Error in getEmitterIndex(): An attempt was made to get an optional field that was not enabled, call hasEmitterIndex() to determine if it is safe to call getEmitterIndex()");
}

const uci::type::ForeignKeyType& RadarEmitterIdentityType::getEmitterIndex() const {
  return getEmitterIndex_();
}

uci::type::ForeignKeyType& RadarEmitterIdentityType::getEmitterIndex() {
  return getEmitterIndex_();
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::setEmitterIndex(const uci::type::ForeignKeyType& accessor) {
  enableEmitterIndex(accessor.getAccessorType());
  if (&accessor != emitterIndex_Accessor.get()) {
    emitterIndex_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RadarEmitterIdentityType::hasEmitterIndex() const noexcept {
  return static_cast<bool>(emitterIndex_Accessor);
}

uci::type::ForeignKeyType& RadarEmitterIdentityType::enableEmitterIndex(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!emitterIndex_Accessor) || (emitterIndex_Accessor->getAccessorType() != requestedType)) {
    emitterIndex_Accessor = ForeignKeyType::create(requestedType);
    if (!emitterIndex_Accessor) {
      throw uci::base::UCIException("Error in enableEmitterIndex(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emitterIndex_Accessor;
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::clearEmitterIndex() noexcept {
  emitterIndex_Accessor.reset();
  return *this;
}

std::unique_ptr<RadarEmitterIdentityType> RadarEmitterIdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarEmitterIdentityType : type};
  return (requestedType == uci::type::accessorType::radarEmitterIdentityType) ? boost::make_unique<RadarEmitterIdentityType>() : nullptr;
}

/**  */
namespace RadarEmitterIdentityType_Names {

constexpr const char* Extern_Type_Name{"RadarEmitterIdentityType"};
constexpr const char* ELNOT_Identifier_Name{"ELNOT_Identifier"};
constexpr const char* DIEQP_Key_Name{"DIEQP_Key"};
constexpr const char* RadarMode_Name{"RadarMode"};
constexpr const char* TrackMode_Name{"TrackMode"};
constexpr const char* EmitterIndex_Name{"EmitterIndex"};

} // namespace RadarEmitterIdentityType_Names

void RadarEmitterIdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RadarEmitterIdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RadarEmitterIdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RadarEmitterIdentityType_Names::ELNOT_Identifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setELNOT_Identifier(*value);
      }
    } else if (valueType.first == nsPrefix + RadarEmitterIdentityType_Names::DIEQP_Key_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDIEQP_Key(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RadarEmitterIdentityType_Names::RadarMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRadarMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RadarEmitterIdentityType_Names::TrackMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTrackMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RadarEmitterIdentityType_Names::EmitterIndex_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEmitterIndex(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string RadarEmitterIdentityType::serialize(const uci::type::RadarEmitterIdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RadarEmitterIdentityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RadarEmitterIdentityType_Names::Extern_Type_Name);
  }
  if (accessor.hasELNOT_Identifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getELNOT_Identifier(), node, RadarEmitterIdentityType_Names::ELNOT_Identifier_Name);
  }
  if (accessor.hasDIEQP_Key()) {
    ForeignKeyType::serialize(accessor.getDIEQP_Key(), node, RadarEmitterIdentityType_Names::DIEQP_Key_Name);
  }
  if (accessor.hasRadarMode()) {
    RadarModeEnum::serialize(accessor.getRadarMode(), node, RadarEmitterIdentityType_Names::RadarMode_Name, false);
  }
  if (accessor.hasTrackMode()) {
    TrackModeEnum::serialize(accessor.getTrackMode(), node, RadarEmitterIdentityType_Names::TrackMode_Name, false);
  }
  if (accessor.hasEmitterIndex()) {
    ForeignKeyType::serialize(accessor.getEmitterIndex(), node, RadarEmitterIdentityType_Names::EmitterIndex_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RadarEmitterIdentityType>().release());
}

uci::type::RadarEmitterIdentityType& RadarEmitterIdentityType::create(const uci::type::RadarEmitterIdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RadarEmitterIdentityType> newAccessor{boost::make_unique<asb_uci::type::RadarEmitterIdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RadarEmitterIdentityType::destroy(uci::type::RadarEmitterIdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::RadarEmitterIdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

