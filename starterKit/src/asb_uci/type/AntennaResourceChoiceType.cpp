/** @file AntennaResourceChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AntennaResourceChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AntennaResourceID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AntennaResourceChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AntennaResourceID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AntennaResourceChoiceType::AntennaResourceChoiceType() = default;

AntennaResourceChoiceType::~AntennaResourceChoiceType() = default;

void AntennaResourceChoiceType::copy(const uci::type::AntennaResourceChoiceType& accessor) {
  copyImpl(accessor, false);
}

void AntennaResourceChoiceType::copyImpl(const uci::type::AntennaResourceChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AntennaResourceChoiceType&>(accessor);
    if (accessorImpl.antennaResourceTypeID_Accessor) {
      setAntennaResourceTypeID(*(accessorImpl.antennaResourceTypeID_Accessor));
    } else {
      antennaResourceTypeID_Accessor.reset();
    }
    if (accessorImpl.antennaResourceInstanceID_Accessor) {
      setAntennaResourceInstanceID(*(accessorImpl.antennaResourceInstanceID_Accessor));
    } else {
      antennaResourceInstanceID_Accessor.reset();
    }
  }
}

void AntennaResourceChoiceType::reset() noexcept {
  antennaResourceTypeID_Accessor.reset();
  antennaResourceInstanceID_Accessor.reset();
}

uci::type::AntennaResourceChoiceType::AntennaResourceChoiceTypeChoice AntennaResourceChoiceType::getAntennaResourceChoiceTypeChoiceOrdinal() const noexcept {
  if (antennaResourceTypeID_Accessor) {
    return ANTENNARESOURCECHOICETYPE_CHOICE_ANTENNARESOURCETYPEID;
  }
  if (antennaResourceInstanceID_Accessor) {
    return ANTENNARESOURCECHOICETYPE_CHOICE_ANTENNARESOURCEINSTANCEID;
  }
  return ANTENNARESOURCECHOICETYPE_CHOICE_NONE;
}

uci::type::AntennaResourceChoiceType& AntennaResourceChoiceType::setAntennaResourceChoiceTypeChoiceOrdinal(uci::type::AntennaResourceChoiceType::AntennaResourceChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ANTENNARESOURCECHOICETYPE_CHOICE_ANTENNARESOURCETYPEID:
      chooseAntennaResourceTypeID("setAntennaResourceChoiceTypeChoiceOrdinal", type);
      break;
    case ANTENNARESOURCECHOICETYPE_CHOICE_ANTENNARESOURCEINSTANCEID:
      chooseAntennaResourceInstanceID("setAntennaResourceChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setAntennaResourceChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AntennaResourceID_Type& AntennaResourceChoiceType::getAntennaResourceTypeID_() const {
  if (antennaResourceTypeID_Accessor) {
    return *antennaResourceTypeID_Accessor;
  }
  throw uci::base::UCIException("Error in getAntennaResourceTypeID(): Unable to get AntennaResourceTypeID, field not selected");
}

const uci::type::AntennaResourceID_Type& AntennaResourceChoiceType::getAntennaResourceTypeID() const {
  return getAntennaResourceTypeID_();
}

uci::type::AntennaResourceID_Type& AntennaResourceChoiceType::getAntennaResourceTypeID() {
  return getAntennaResourceTypeID_();
}

uci::type::AntennaResourceChoiceType& AntennaResourceChoiceType::setAntennaResourceTypeID(const uci::type::AntennaResourceID_Type& accessor) {
  chooseAntennaResourceTypeID();
  if (&accessor != antennaResourceTypeID_Accessor.get()) {
    antennaResourceTypeID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AntennaResourceChoiceType::isAntennaResourceTypeID() const noexcept {
  return static_cast<bool>(antennaResourceTypeID_Accessor);
}

uci::type::AntennaResourceID_Type& AntennaResourceChoiceType::chooseAntennaResourceTypeID(const std::string& method, uci::base::accessorType::AccessorType type) {
  antennaResourceInstanceID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::antennaResourceID_Type : type};
  if ((!antennaResourceTypeID_Accessor) || (antennaResourceTypeID_Accessor->getAccessorType() != requestedType)) {
    antennaResourceTypeID_Accessor = AntennaResourceID_Type::create(type);
    if (!antennaResourceTypeID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *antennaResourceTypeID_Accessor;
}

uci::type::AntennaResourceID_Type& AntennaResourceChoiceType::chooseAntennaResourceTypeID(uci::base::accessorType::AccessorType type) {
  return chooseAntennaResourceTypeID("chooseAntennaResourceTypeID", type);
}

uci::type::AntennaResourceID_Type& AntennaResourceChoiceType::getAntennaResourceInstanceID_() const {
  if (antennaResourceInstanceID_Accessor) {
    return *antennaResourceInstanceID_Accessor;
  }
  throw uci::base::UCIException("Error in getAntennaResourceInstanceID(): Unable to get AntennaResourceInstanceID, field not selected");
}

const uci::type::AntennaResourceID_Type& AntennaResourceChoiceType::getAntennaResourceInstanceID() const {
  return getAntennaResourceInstanceID_();
}

uci::type::AntennaResourceID_Type& AntennaResourceChoiceType::getAntennaResourceInstanceID() {
  return getAntennaResourceInstanceID_();
}

uci::type::AntennaResourceChoiceType& AntennaResourceChoiceType::setAntennaResourceInstanceID(const uci::type::AntennaResourceID_Type& accessor) {
  chooseAntennaResourceInstanceID();
  if (&accessor != antennaResourceInstanceID_Accessor.get()) {
    antennaResourceInstanceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AntennaResourceChoiceType::isAntennaResourceInstanceID() const noexcept {
  return static_cast<bool>(antennaResourceInstanceID_Accessor);
}

uci::type::AntennaResourceID_Type& AntennaResourceChoiceType::chooseAntennaResourceInstanceID(const std::string& method, uci::base::accessorType::AccessorType type) {
  antennaResourceTypeID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::antennaResourceID_Type : type};
  if ((!antennaResourceInstanceID_Accessor) || (antennaResourceInstanceID_Accessor->getAccessorType() != requestedType)) {
    antennaResourceInstanceID_Accessor = AntennaResourceID_Type::create(type);
    if (!antennaResourceInstanceID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *antennaResourceInstanceID_Accessor;
}

uci::type::AntennaResourceID_Type& AntennaResourceChoiceType::chooseAntennaResourceInstanceID(uci::base::accessorType::AccessorType type) {
  return chooseAntennaResourceInstanceID("chooseAntennaResourceInstanceID", type);
}

std::unique_ptr<AntennaResourceChoiceType> AntennaResourceChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::antennaResourceChoiceType : type};
  return (requestedType == uci::type::accessorType::antennaResourceChoiceType) ? boost::make_unique<AntennaResourceChoiceType>() : nullptr;
}

/**  */
namespace AntennaResourceChoiceType_Names {

constexpr const char* Extern_Type_Name{"AntennaResourceChoiceType"};
constexpr const char* AntennaResourceTypeID_Name{"AntennaResourceTypeID"};
constexpr const char* AntennaResourceInstanceID_Name{"AntennaResourceInstanceID"};

} // namespace AntennaResourceChoiceType_Names

void AntennaResourceChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AntennaResourceChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AntennaResourceChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AntennaResourceChoiceType_Names::AntennaResourceTypeID_Name) {
      AntennaResourceID_Type::deserialize(valueType.second, accessor.chooseAntennaResourceTypeID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AntennaResourceChoiceType_Names::AntennaResourceInstanceID_Name) {
      AntennaResourceID_Type::deserialize(valueType.second, accessor.chooseAntennaResourceInstanceID(), nodeName, nsPrefix);
    }
  }
}

std::string AntennaResourceChoiceType::serialize(const uci::type::AntennaResourceChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AntennaResourceChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AntennaResourceChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isAntennaResourceTypeID()) {
    AntennaResourceID_Type::serialize(accessor.getAntennaResourceTypeID(), node, AntennaResourceChoiceType_Names::AntennaResourceTypeID_Name);
  } else if (accessor.isAntennaResourceInstanceID()) {
    AntennaResourceID_Type::serialize(accessor.getAntennaResourceInstanceID(), node, AntennaResourceChoiceType_Names::AntennaResourceInstanceID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AntennaResourceChoiceType& AntennaResourceChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AntennaResourceChoiceType>().release());
}

uci::type::AntennaResourceChoiceType& AntennaResourceChoiceType::create(const uci::type::AntennaResourceChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AntennaResourceChoiceType> newAccessor{boost::make_unique<asb_uci::type::AntennaResourceChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AntennaResourceChoiceType::destroy(uci::type::AntennaResourceChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::AntennaResourceChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

