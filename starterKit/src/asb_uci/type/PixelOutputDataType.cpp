/** @file PixelOutputDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PixelOutputDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DMPI_ID_Type.h"
#include "asb_uci/type/OpPointID_Type.h"
#include "asb_uci/type/PixelDataType.h"
#include "asb_uci/type/Point2D_Type.h"
#include "asb_uci/type/PositionPositionCovarianceType.h"
#include "asb_uci/type/UncertaintyType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DMPI_ID_Type.h"
#include "uci/type/OpPointID_Type.h"
#include "uci/type/PixelOutputDataType.h"
#include "uci/type/Point2D_Type.h"
#include "uci/type/PositionPositionCovarianceType.h"
#include "uci/type/UncertaintyType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PixelOutputDataType::PixelOutputDataType() = default;

PixelOutputDataType::~PixelOutputDataType() = default;

void PixelOutputDataType::copy(const uci::type::PixelOutputDataType& accessor) {
  copyImpl(accessor, false);
}

void PixelOutputDataType::copyImpl(const uci::type::PixelOutputDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    PixelDataType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const PixelOutputDataType&>(accessor);
    setGeoLocationStatus(accessorImpl.geoLocationStatus_Accessor);
    if (accessorImpl.dMPI_ID_Accessor) {
      setDMPI_ID(*(accessorImpl.dMPI_ID_Accessor));
    } else {
      dMPI_ID_Accessor.reset();
    }
    if (accessorImpl.opPointID_Accessor) {
      setOpPointID(*(accessorImpl.opPointID_Accessor));
    } else {
      opPointID_Accessor.reset();
    }
    if (accessorImpl.pixelGeoLocation_Accessor) {
      setPixelGeoLocation(*(accessorImpl.pixelGeoLocation_Accessor));
    } else {
      pixelGeoLocation_Accessor.reset();
    }
    if (accessorImpl.locationUncertainty_Accessor) {
      setLocationUncertainty(*(accessorImpl.locationUncertainty_Accessor));
    } else {
      locationUncertainty_Accessor.reset();
    }
    if (accessorImpl.locationCovariance_Accessor) {
      setLocationCovariance(*(accessorImpl.locationCovariance_Accessor));
    } else {
      locationCovariance_Accessor.reset();
    }
  }
}

void PixelOutputDataType::reset() noexcept {
  PixelDataType::reset();
  geoLocationStatus_Accessor = false;
  dMPI_ID_Accessor.reset();
  opPointID_Accessor.reset();
  pixelGeoLocation_Accessor.reset();
  locationUncertainty_Accessor.reset();
  locationCovariance_Accessor.reset();
}

xs::Boolean PixelOutputDataType::getGeoLocationStatus() const {
  return geoLocationStatus_Accessor;
}

uci::type::PixelOutputDataType& PixelOutputDataType::setGeoLocationStatus(xs::Boolean value) {
  geoLocationStatus_Accessor = value;
  return *this;
}


uci::type::DMPI_ID_Type& PixelOutputDataType::getDMPI_ID_() const {
  if (dMPI_ID_Accessor) {
    return *dMPI_ID_Accessor;
  }
  throw uci::base::UCIException("Error in getDMPI_ID(): An attempt was made to get an optional field that was not enabled, call hasDMPI_ID() to determine if it is safe to call getDMPI_ID()");
}

const uci::type::DMPI_ID_Type& PixelOutputDataType::getDMPI_ID() const {
  return getDMPI_ID_();
}

uci::type::DMPI_ID_Type& PixelOutputDataType::getDMPI_ID() {
  return getDMPI_ID_();
}

uci::type::PixelOutputDataType& PixelOutputDataType::setDMPI_ID(const uci::type::DMPI_ID_Type& accessor) {
  enableDMPI_ID();
  if (&accessor != dMPI_ID_Accessor.get()) {
    dMPI_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PixelOutputDataType::hasDMPI_ID() const noexcept {
  return static_cast<bool>(dMPI_ID_Accessor);
}

uci::type::DMPI_ID_Type& PixelOutputDataType::enableDMPI_ID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_ID_Type : type};
  if ((!dMPI_ID_Accessor) || (dMPI_ID_Accessor->getAccessorType() != requestedType)) {
    dMPI_ID_Accessor = DMPI_ID_Type::create(requestedType);
    if (!dMPI_ID_Accessor) {
      throw uci::base::UCIException("Error in enableDMPI_ID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dMPI_ID_Accessor;
}

uci::type::PixelOutputDataType& PixelOutputDataType::clearDMPI_ID() noexcept {
  dMPI_ID_Accessor.reset();
  return *this;
}

uci::type::OpPointID_Type& PixelOutputDataType::getOpPointID_() const {
  if (opPointID_Accessor) {
    return *opPointID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpPointID(): An attempt was made to get an optional field that was not enabled, call hasOpPointID() to determine if it is safe to call getOpPointID()");
}

const uci::type::OpPointID_Type& PixelOutputDataType::getOpPointID() const {
  return getOpPointID_();
}

uci::type::OpPointID_Type& PixelOutputDataType::getOpPointID() {
  return getOpPointID_();
}

uci::type::PixelOutputDataType& PixelOutputDataType::setOpPointID(const uci::type::OpPointID_Type& accessor) {
  enableOpPointID();
  if (&accessor != opPointID_Accessor.get()) {
    opPointID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PixelOutputDataType::hasOpPointID() const noexcept {
  return static_cast<bool>(opPointID_Accessor);
}

uci::type::OpPointID_Type& PixelOutputDataType::enableOpPointID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointID_Type : type};
  if ((!opPointID_Accessor) || (opPointID_Accessor->getAccessorType() != requestedType)) {
    opPointID_Accessor = OpPointID_Type::create(requestedType);
    if (!opPointID_Accessor) {
      throw uci::base::UCIException("Error in enableOpPointID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opPointID_Accessor;
}

uci::type::PixelOutputDataType& PixelOutputDataType::clearOpPointID() noexcept {
  opPointID_Accessor.reset();
  return *this;
}

uci::type::Point2D_Type& PixelOutputDataType::getPixelGeoLocation_() const {
  if (pixelGeoLocation_Accessor) {
    return *pixelGeoLocation_Accessor;
  }
  throw uci::base::UCIException("Error in getPixelGeoLocation(): An attempt was made to get an optional field that was not enabled, call hasPixelGeoLocation() to determine if it is safe to call getPixelGeoLocation()");
}

const uci::type::Point2D_Type& PixelOutputDataType::getPixelGeoLocation() const {
  return getPixelGeoLocation_();
}

uci::type::Point2D_Type& PixelOutputDataType::getPixelGeoLocation() {
  return getPixelGeoLocation_();
}

uci::type::PixelOutputDataType& PixelOutputDataType::setPixelGeoLocation(const uci::type::Point2D_Type& accessor) {
  enablePixelGeoLocation(accessor.getAccessorType());
  if (&accessor != pixelGeoLocation_Accessor.get()) {
    pixelGeoLocation_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PixelOutputDataType::hasPixelGeoLocation() const noexcept {
  return static_cast<bool>(pixelGeoLocation_Accessor);
}

uci::type::Point2D_Type& PixelOutputDataType::enablePixelGeoLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!pixelGeoLocation_Accessor) || (pixelGeoLocation_Accessor->getAccessorType() != requestedType)) {
    pixelGeoLocation_Accessor = Point2D_Type::create(requestedType);
    if (!pixelGeoLocation_Accessor) {
      throw uci::base::UCIException("Error in enablePixelGeoLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pixelGeoLocation_Accessor;
}

uci::type::PixelOutputDataType& PixelOutputDataType::clearPixelGeoLocation() noexcept {
  pixelGeoLocation_Accessor.reset();
  return *this;
}

uci::type::UncertaintyType& PixelOutputDataType::getLocationUncertainty_() const {
  if (locationUncertainty_Accessor) {
    return *locationUncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getLocationUncertainty(): An attempt was made to get an optional field that was not enabled, call hasLocationUncertainty() to determine if it is safe to call getLocationUncertainty()");
}

const uci::type::UncertaintyType& PixelOutputDataType::getLocationUncertainty() const {
  return getLocationUncertainty_();
}

uci::type::UncertaintyType& PixelOutputDataType::getLocationUncertainty() {
  return getLocationUncertainty_();
}

uci::type::PixelOutputDataType& PixelOutputDataType::setLocationUncertainty(const uci::type::UncertaintyType& accessor) {
  enableLocationUncertainty();
  if (&accessor != locationUncertainty_Accessor.get()) {
    locationUncertainty_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PixelOutputDataType::hasLocationUncertainty() const noexcept {
  return static_cast<bool>(locationUncertainty_Accessor);
}

uci::type::UncertaintyType& PixelOutputDataType::enableLocationUncertainty(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::uncertaintyType : type};
  if ((!locationUncertainty_Accessor) || (locationUncertainty_Accessor->getAccessorType() != requestedType)) {
    locationUncertainty_Accessor = UncertaintyType::create(requestedType);
    if (!locationUncertainty_Accessor) {
      throw uci::base::UCIException("Error in enableLocationUncertainty(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *locationUncertainty_Accessor;
}

uci::type::PixelOutputDataType& PixelOutputDataType::clearLocationUncertainty() noexcept {
  locationUncertainty_Accessor.reset();
  return *this;
}

uci::type::PositionPositionCovarianceType& PixelOutputDataType::getLocationCovariance_() const {
  if (locationCovariance_Accessor) {
    return *locationCovariance_Accessor;
  }
  throw uci::base::UCIException("Error in getLocationCovariance(): An attempt was made to get an optional field that was not enabled, call hasLocationCovariance() to determine if it is safe to call getLocationCovariance()");
}

const uci::type::PositionPositionCovarianceType& PixelOutputDataType::getLocationCovariance() const {
  return getLocationCovariance_();
}

uci::type::PositionPositionCovarianceType& PixelOutputDataType::getLocationCovariance() {
  return getLocationCovariance_();
}

uci::type::PixelOutputDataType& PixelOutputDataType::setLocationCovariance(const uci::type::PositionPositionCovarianceType& accessor) {
  enableLocationCovariance();
  if (&accessor != locationCovariance_Accessor.get()) {
    locationCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PixelOutputDataType::hasLocationCovariance() const noexcept {
  return static_cast<bool>(locationCovariance_Accessor);
}

uci::type::PositionPositionCovarianceType& PixelOutputDataType::enableLocationCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionPositionCovarianceType : type};
  if ((!locationCovariance_Accessor) || (locationCovariance_Accessor->getAccessorType() != requestedType)) {
    locationCovariance_Accessor = PositionPositionCovarianceType::create(requestedType);
    if (!locationCovariance_Accessor) {
      throw uci::base::UCIException("Error in enableLocationCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *locationCovariance_Accessor;
}

uci::type::PixelOutputDataType& PixelOutputDataType::clearLocationCovariance() noexcept {
  locationCovariance_Accessor.reset();
  return *this;
}

std::unique_ptr<PixelOutputDataType> PixelOutputDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pixelOutputDataType : type};
  return (requestedType == uci::type::accessorType::pixelOutputDataType) ? boost::make_unique<PixelOutputDataType>() : nullptr;
}

/**  */
namespace PixelOutputDataType_Names {

constexpr const char* Extern_Type_Name{"PixelOutputDataType"};
constexpr const char* GeoLocationStatus_Name{"GeoLocationStatus"};
constexpr const char* DMPI_ID_Name{"DMPI_ID"};
constexpr const char* OpPointID_Name{"OpPointID"};
constexpr const char* PixelGeoLocation_Name{"PixelGeoLocation"};
constexpr const char* LocationUncertainty_Name{"LocationUncertainty"};
constexpr const char* LocationCovariance_Name{"LocationCovariance"};

} // namespace PixelOutputDataType_Names

void PixelOutputDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PixelOutputDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PixelOutputDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PixelOutputDataType_Names::GeoLocationStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGeoLocationStatus(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PixelOutputDataType_Names::DMPI_ID_Name) {
      DMPI_ID_Type::deserialize(valueType.second, accessor.enableDMPI_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PixelOutputDataType_Names::OpPointID_Name) {
      OpPointID_Type::deserialize(valueType.second, accessor.enableOpPointID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PixelOutputDataType_Names::PixelGeoLocation_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePixelGeoLocation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PixelOutputDataType_Names::LocationUncertainty_Name) {
      UncertaintyType::deserialize(valueType.second, accessor.enableLocationUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PixelOutputDataType_Names::LocationCovariance_Name) {
      PositionPositionCovarianceType::deserialize(valueType.second, accessor.enableLocationCovariance(), nodeName, nsPrefix);
    }
  }
  PixelDataType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string PixelOutputDataType::serialize(const uci::type::PixelOutputDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PixelOutputDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PixelOutputDataType_Names::Extern_Type_Name);
  }
  PixelDataType::serialize(accessor, node, "", false, false, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getGeoLocationStatus(), node, PixelOutputDataType_Names::GeoLocationStatus_Name);
  if (accessor.hasDMPI_ID()) {
    DMPI_ID_Type::serialize(accessor.getDMPI_ID(), node, PixelOutputDataType_Names::DMPI_ID_Name);
  }
  if (accessor.hasOpPointID()) {
    OpPointID_Type::serialize(accessor.getOpPointID(), node, PixelOutputDataType_Names::OpPointID_Name);
  }
  if (accessor.hasPixelGeoLocation()) {
    Point2D_Type::serialize(accessor.getPixelGeoLocation(), node, PixelOutputDataType_Names::PixelGeoLocation_Name);
  }
  if (accessor.hasLocationUncertainty()) {
    UncertaintyType::serialize(accessor.getLocationUncertainty(), node, PixelOutputDataType_Names::LocationUncertainty_Name);
  }
  if (accessor.hasLocationCovariance()) {
    PositionPositionCovarianceType::serialize(accessor.getLocationCovariance(), node, PixelOutputDataType_Names::LocationCovariance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PixelOutputDataType& PixelOutputDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PixelOutputDataType>().release());
}

uci::type::PixelOutputDataType& PixelOutputDataType::create(const uci::type::PixelOutputDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PixelOutputDataType> newAccessor{boost::make_unique<asb_uci::type::PixelOutputDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PixelOutputDataType::destroy(uci::type::PixelOutputDataType& accessor) {
  delete dynamic_cast<asb_uci::type::PixelOutputDataType*>(&accessor);
}

} // namespace type

} // namespace uci

