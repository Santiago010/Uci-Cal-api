/** @file LOS_MeasurementUncertaintyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/LOS_MeasurementUncertaintyType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ArrivalDataUncertaintyType.h"
#include "asb_uci/type/ConeAngleSlantRangeUncertaintyType.h"
#include "asb_uci/type/ConeAngleUncertaintyType.h"
#include "asb_uci/type/LOS_SlantRangeUncertaintyType.h"
#include "asb_uci/type/LOS_VarianceAndCovarianceType.h"
#include "asb_uci/type/SlantRangeUncertaintyType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ArrivalDataUncertaintyType.h"
#include "uci/type/ConeAngleSlantRangeUncertaintyType.h"
#include "uci/type/ConeAngleUncertaintyType.h"
#include "uci/type/LOS_MeasurementUncertaintyType.h"
#include "uci/type/LOS_SlantRangeUncertaintyType.h"
#include "uci/type/LOS_VarianceAndCovarianceType.h"
#include "uci/type/SlantRangeUncertaintyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LOS_MeasurementUncertaintyType::LOS_MeasurementUncertaintyType() = default;

LOS_MeasurementUncertaintyType::~LOS_MeasurementUncertaintyType() = default;

void LOS_MeasurementUncertaintyType::copy(const uci::type::LOS_MeasurementUncertaintyType& accessor) {
  copyImpl(accessor, false);
}

void LOS_MeasurementUncertaintyType::copyImpl(const uci::type::LOS_MeasurementUncertaintyType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LOS_MeasurementUncertaintyType&>(accessor);
    if (accessorImpl.lOS_Uncertainty_Accessor) {
      setLOS_Uncertainty(*(accessorImpl.lOS_Uncertainty_Accessor));
    } else {
      lOS_Uncertainty_Accessor.reset();
    }
    if (accessorImpl.coneAngleUncertainty_Accessor) {
      setConeAngleUncertainty(*(accessorImpl.coneAngleUncertainty_Accessor));
    } else {
      coneAngleUncertainty_Accessor.reset();
    }
    if (accessorImpl.arrivalDataUncertainty_Accessor) {
      setArrivalDataUncertainty(*(accessorImpl.arrivalDataUncertainty_Accessor));
    } else {
      arrivalDataUncertainty_Accessor.reset();
    }
    if (accessorImpl.slantRangeUncertainty_Accessor) {
      setSlantRangeUncertainty(*(accessorImpl.slantRangeUncertainty_Accessor));
    } else {
      slantRangeUncertainty_Accessor.reset();
    }
    if (accessorImpl.coneAngleSlantRangeUncertainty_Accessor) {
      setConeAngleSlantRangeUncertainty(*(accessorImpl.coneAngleSlantRangeUncertainty_Accessor));
    } else {
      coneAngleSlantRangeUncertainty_Accessor.reset();
    }
    if (accessorImpl.lOS_SlantRangeUncertainty_Accessor) {
      setLOS_SlantRangeUncertainty(*(accessorImpl.lOS_SlantRangeUncertainty_Accessor));
    } else {
      lOS_SlantRangeUncertainty_Accessor.reset();
    }
  }
}

void LOS_MeasurementUncertaintyType::reset() noexcept {
  lOS_Uncertainty_Accessor.reset();
  coneAngleUncertainty_Accessor.reset();
  arrivalDataUncertainty_Accessor.reset();
  slantRangeUncertainty_Accessor.reset();
  coneAngleSlantRangeUncertainty_Accessor.reset();
  lOS_SlantRangeUncertainty_Accessor.reset();
}

uci::type::LOS_VarianceAndCovarianceType& LOS_MeasurementUncertaintyType::getLOS_Uncertainty_() const {
  if (lOS_Uncertainty_Accessor) {
    return *lOS_Uncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS_Uncertainty(): An attempt was made to get an optional field that was not enabled, call hasLOS_Uncertainty() to determine if it is safe to call getLOS_Uncertainty()");
}

const uci::type::LOS_VarianceAndCovarianceType& LOS_MeasurementUncertaintyType::getLOS_Uncertainty() const {
  return getLOS_Uncertainty_();
}

uci::type::LOS_VarianceAndCovarianceType& LOS_MeasurementUncertaintyType::getLOS_Uncertainty() {
  return getLOS_Uncertainty_();
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::setLOS_Uncertainty(const uci::type::LOS_VarianceAndCovarianceType& accessor) {
  enableLOS_Uncertainty();
  if (&accessor != lOS_Uncertainty_Accessor.get()) {
    lOS_Uncertainty_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementUncertaintyType::hasLOS_Uncertainty() const noexcept {
  return static_cast<bool>(lOS_Uncertainty_Accessor);
}

uci::type::LOS_VarianceAndCovarianceType& LOS_MeasurementUncertaintyType::enableLOS_Uncertainty(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_VarianceAndCovarianceType : type};
  if ((!lOS_Uncertainty_Accessor) || (lOS_Uncertainty_Accessor->getAccessorType() != requestedType)) {
    lOS_Uncertainty_Accessor = LOS_VarianceAndCovarianceType::create(requestedType);
    if (!lOS_Uncertainty_Accessor) {
      throw uci::base::UCIException("Error in enableLOS_Uncertainty(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lOS_Uncertainty_Accessor;
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::clearLOS_Uncertainty() noexcept {
  lOS_Uncertainty_Accessor.reset();
  return *this;
}

uci::type::ConeAngleUncertaintyType& LOS_MeasurementUncertaintyType::getConeAngleUncertainty_() const {
  if (coneAngleUncertainty_Accessor) {
    return *coneAngleUncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getConeAngleUncertainty(): An attempt was made to get an optional field that was not enabled, call hasConeAngleUncertainty() to determine if it is safe to call getConeAngleUncertainty()");
}

const uci::type::ConeAngleUncertaintyType& LOS_MeasurementUncertaintyType::getConeAngleUncertainty() const {
  return getConeAngleUncertainty_();
}

uci::type::ConeAngleUncertaintyType& LOS_MeasurementUncertaintyType::getConeAngleUncertainty() {
  return getConeAngleUncertainty_();
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::setConeAngleUncertainty(const uci::type::ConeAngleUncertaintyType& accessor) {
  enableConeAngleUncertainty();
  if (&accessor != coneAngleUncertainty_Accessor.get()) {
    coneAngleUncertainty_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementUncertaintyType::hasConeAngleUncertainty() const noexcept {
  return static_cast<bool>(coneAngleUncertainty_Accessor);
}

uci::type::ConeAngleUncertaintyType& LOS_MeasurementUncertaintyType::enableConeAngleUncertainty(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::coneAngleUncertaintyType : type};
  if ((!coneAngleUncertainty_Accessor) || (coneAngleUncertainty_Accessor->getAccessorType() != requestedType)) {
    coneAngleUncertainty_Accessor = ConeAngleUncertaintyType::create(requestedType);
    if (!coneAngleUncertainty_Accessor) {
      throw uci::base::UCIException("Error in enableConeAngleUncertainty(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *coneAngleUncertainty_Accessor;
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::clearConeAngleUncertainty() noexcept {
  coneAngleUncertainty_Accessor.reset();
  return *this;
}

uci::type::ArrivalDataUncertaintyType& LOS_MeasurementUncertaintyType::getArrivalDataUncertainty_() const {
  if (arrivalDataUncertainty_Accessor) {
    return *arrivalDataUncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getArrivalDataUncertainty(): An attempt was made to get an optional field that was not enabled, call hasArrivalDataUncertainty() to determine if it is safe to call getArrivalDataUncertainty()");
}

const uci::type::ArrivalDataUncertaintyType& LOS_MeasurementUncertaintyType::getArrivalDataUncertainty() const {
  return getArrivalDataUncertainty_();
}

uci::type::ArrivalDataUncertaintyType& LOS_MeasurementUncertaintyType::getArrivalDataUncertainty() {
  return getArrivalDataUncertainty_();
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::setArrivalDataUncertainty(const uci::type::ArrivalDataUncertaintyType& accessor) {
  enableArrivalDataUncertainty();
  if (&accessor != arrivalDataUncertainty_Accessor.get()) {
    arrivalDataUncertainty_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementUncertaintyType::hasArrivalDataUncertainty() const noexcept {
  return static_cast<bool>(arrivalDataUncertainty_Accessor);
}

uci::type::ArrivalDataUncertaintyType& LOS_MeasurementUncertaintyType::enableArrivalDataUncertainty(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::arrivalDataUncertaintyType : type};
  if ((!arrivalDataUncertainty_Accessor) || (arrivalDataUncertainty_Accessor->getAccessorType() != requestedType)) {
    arrivalDataUncertainty_Accessor = ArrivalDataUncertaintyType::create(requestedType);
    if (!arrivalDataUncertainty_Accessor) {
      throw uci::base::UCIException("Error in enableArrivalDataUncertainty(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *arrivalDataUncertainty_Accessor;
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::clearArrivalDataUncertainty() noexcept {
  arrivalDataUncertainty_Accessor.reset();
  return *this;
}

uci::type::SlantRangeUncertaintyType& LOS_MeasurementUncertaintyType::getSlantRangeUncertainty_() const {
  if (slantRangeUncertainty_Accessor) {
    return *slantRangeUncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getSlantRangeUncertainty(): An attempt was made to get an optional field that was not enabled, call hasSlantRangeUncertainty() to determine if it is safe to call getSlantRangeUncertainty()");
}

const uci::type::SlantRangeUncertaintyType& LOS_MeasurementUncertaintyType::getSlantRangeUncertainty() const {
  return getSlantRangeUncertainty_();
}

uci::type::SlantRangeUncertaintyType& LOS_MeasurementUncertaintyType::getSlantRangeUncertainty() {
  return getSlantRangeUncertainty_();
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::setSlantRangeUncertainty(const uci::type::SlantRangeUncertaintyType& accessor) {
  enableSlantRangeUncertainty();
  if (&accessor != slantRangeUncertainty_Accessor.get()) {
    slantRangeUncertainty_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementUncertaintyType::hasSlantRangeUncertainty() const noexcept {
  return static_cast<bool>(slantRangeUncertainty_Accessor);
}

uci::type::SlantRangeUncertaintyType& LOS_MeasurementUncertaintyType::enableSlantRangeUncertainty(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::slantRangeUncertaintyType : type};
  if ((!slantRangeUncertainty_Accessor) || (slantRangeUncertainty_Accessor->getAccessorType() != requestedType)) {
    slantRangeUncertainty_Accessor = SlantRangeUncertaintyType::create(requestedType);
    if (!slantRangeUncertainty_Accessor) {
      throw uci::base::UCIException("Error in enableSlantRangeUncertainty(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *slantRangeUncertainty_Accessor;
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::clearSlantRangeUncertainty() noexcept {
  slantRangeUncertainty_Accessor.reset();
  return *this;
}

uci::type::ConeAngleSlantRangeUncertaintyType& LOS_MeasurementUncertaintyType::getConeAngleSlantRangeUncertainty_() const {
  if (coneAngleSlantRangeUncertainty_Accessor) {
    return *coneAngleSlantRangeUncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getConeAngleSlantRangeUncertainty(): An attempt was made to get an optional field that was not enabled, call hasConeAngleSlantRangeUncertainty() to determine if it is safe to call getConeAngleSlantRangeUncertainty()");
}

const uci::type::ConeAngleSlantRangeUncertaintyType& LOS_MeasurementUncertaintyType::getConeAngleSlantRangeUncertainty() const {
  return getConeAngleSlantRangeUncertainty_();
}

uci::type::ConeAngleSlantRangeUncertaintyType& LOS_MeasurementUncertaintyType::getConeAngleSlantRangeUncertainty() {
  return getConeAngleSlantRangeUncertainty_();
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::setConeAngleSlantRangeUncertainty(const uci::type::ConeAngleSlantRangeUncertaintyType& accessor) {
  enableConeAngleSlantRangeUncertainty();
  if (&accessor != coneAngleSlantRangeUncertainty_Accessor.get()) {
    coneAngleSlantRangeUncertainty_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementUncertaintyType::hasConeAngleSlantRangeUncertainty() const noexcept {
  return static_cast<bool>(coneAngleSlantRangeUncertainty_Accessor);
}

uci::type::ConeAngleSlantRangeUncertaintyType& LOS_MeasurementUncertaintyType::enableConeAngleSlantRangeUncertainty(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::coneAngleSlantRangeUncertaintyType : type};
  if ((!coneAngleSlantRangeUncertainty_Accessor) || (coneAngleSlantRangeUncertainty_Accessor->getAccessorType() != requestedType)) {
    coneAngleSlantRangeUncertainty_Accessor = ConeAngleSlantRangeUncertaintyType::create(requestedType);
    if (!coneAngleSlantRangeUncertainty_Accessor) {
      throw uci::base::UCIException("Error in enableConeAngleSlantRangeUncertainty(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *coneAngleSlantRangeUncertainty_Accessor;
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::clearConeAngleSlantRangeUncertainty() noexcept {
  coneAngleSlantRangeUncertainty_Accessor.reset();
  return *this;
}

uci::type::LOS_SlantRangeUncertaintyType& LOS_MeasurementUncertaintyType::getLOS_SlantRangeUncertainty_() const {
  if (lOS_SlantRangeUncertainty_Accessor) {
    return *lOS_SlantRangeUncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS_SlantRangeUncertainty(): An attempt was made to get an optional field that was not enabled, call hasLOS_SlantRangeUncertainty() to determine if it is safe to call getLOS_SlantRangeUncertainty()");
}

const uci::type::LOS_SlantRangeUncertaintyType& LOS_MeasurementUncertaintyType::getLOS_SlantRangeUncertainty() const {
  return getLOS_SlantRangeUncertainty_();
}

uci::type::LOS_SlantRangeUncertaintyType& LOS_MeasurementUncertaintyType::getLOS_SlantRangeUncertainty() {
  return getLOS_SlantRangeUncertainty_();
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::setLOS_SlantRangeUncertainty(const uci::type::LOS_SlantRangeUncertaintyType& accessor) {
  enableLOS_SlantRangeUncertainty();
  if (&accessor != lOS_SlantRangeUncertainty_Accessor.get()) {
    lOS_SlantRangeUncertainty_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS_MeasurementUncertaintyType::hasLOS_SlantRangeUncertainty() const noexcept {
  return static_cast<bool>(lOS_SlantRangeUncertainty_Accessor);
}

uci::type::LOS_SlantRangeUncertaintyType& LOS_MeasurementUncertaintyType::enableLOS_SlantRangeUncertainty(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_SlantRangeUncertaintyType : type};
  if ((!lOS_SlantRangeUncertainty_Accessor) || (lOS_SlantRangeUncertainty_Accessor->getAccessorType() != requestedType)) {
    lOS_SlantRangeUncertainty_Accessor = LOS_SlantRangeUncertaintyType::create(requestedType);
    if (!lOS_SlantRangeUncertainty_Accessor) {
      throw uci::base::UCIException("Error in enableLOS_SlantRangeUncertainty(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lOS_SlantRangeUncertainty_Accessor;
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::clearLOS_SlantRangeUncertainty() noexcept {
  lOS_SlantRangeUncertainty_Accessor.reset();
  return *this;
}

std::unique_ptr<LOS_MeasurementUncertaintyType> LOS_MeasurementUncertaintyType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_MeasurementUncertaintyType : type};
  return (requestedType == uci::type::accessorType::lOS_MeasurementUncertaintyType) ? boost::make_unique<LOS_MeasurementUncertaintyType>() : nullptr;
}

/**  */
namespace LOS_MeasurementUncertaintyType_Names {

constexpr const char* Extern_Type_Name{"LOS_MeasurementUncertaintyType"};
constexpr const char* LOS_Uncertainty_Name{"LOS_Uncertainty"};
constexpr const char* ConeAngleUncertainty_Name{"ConeAngleUncertainty"};
constexpr const char* ArrivalDataUncertainty_Name{"ArrivalDataUncertainty"};
constexpr const char* SlantRangeUncertainty_Name{"SlantRangeUncertainty"};
constexpr const char* ConeAngleSlantRangeUncertainty_Name{"ConeAngleSlantRangeUncertainty"};
constexpr const char* LOS_SlantRangeUncertainty_Name{"LOS_SlantRangeUncertainty"};

} // namespace LOS_MeasurementUncertaintyType_Names

void LOS_MeasurementUncertaintyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LOS_MeasurementUncertaintyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LOS_MeasurementUncertaintyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyType_Names::LOS_Uncertainty_Name) {
      LOS_VarianceAndCovarianceType::deserialize(valueType.second, accessor.enableLOS_Uncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyType_Names::ConeAngleUncertainty_Name) {
      ConeAngleUncertaintyType::deserialize(valueType.second, accessor.enableConeAngleUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyType_Names::ArrivalDataUncertainty_Name) {
      ArrivalDataUncertaintyType::deserialize(valueType.second, accessor.enableArrivalDataUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyType_Names::SlantRangeUncertainty_Name) {
      SlantRangeUncertaintyType::deserialize(valueType.second, accessor.enableSlantRangeUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyType_Names::ConeAngleSlantRangeUncertainty_Name) {
      ConeAngleSlantRangeUncertaintyType::deserialize(valueType.second, accessor.enableConeAngleSlantRangeUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyType_Names::LOS_SlantRangeUncertainty_Name) {
      LOS_SlantRangeUncertaintyType::deserialize(valueType.second, accessor.enableLOS_SlantRangeUncertainty(), nodeName, nsPrefix);
    }
  }
}

std::string LOS_MeasurementUncertaintyType::serialize(const uci::type::LOS_MeasurementUncertaintyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LOS_MeasurementUncertaintyType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LOS_MeasurementUncertaintyType_Names::Extern_Type_Name);
  }
  if (accessor.hasLOS_Uncertainty()) {
    LOS_VarianceAndCovarianceType::serialize(accessor.getLOS_Uncertainty(), node, LOS_MeasurementUncertaintyType_Names::LOS_Uncertainty_Name);
  }
  if (accessor.hasConeAngleUncertainty()) {
    ConeAngleUncertaintyType::serialize(accessor.getConeAngleUncertainty(), node, LOS_MeasurementUncertaintyType_Names::ConeAngleUncertainty_Name);
  }
  if (accessor.hasArrivalDataUncertainty()) {
    ArrivalDataUncertaintyType::serialize(accessor.getArrivalDataUncertainty(), node, LOS_MeasurementUncertaintyType_Names::ArrivalDataUncertainty_Name);
  }
  if (accessor.hasSlantRangeUncertainty()) {
    SlantRangeUncertaintyType::serialize(accessor.getSlantRangeUncertainty(), node, LOS_MeasurementUncertaintyType_Names::SlantRangeUncertainty_Name);
  }
  if (accessor.hasConeAngleSlantRangeUncertainty()) {
    ConeAngleSlantRangeUncertaintyType::serialize(accessor.getConeAngleSlantRangeUncertainty(), node, LOS_MeasurementUncertaintyType_Names::ConeAngleSlantRangeUncertainty_Name);
  }
  if (accessor.hasLOS_SlantRangeUncertainty()) {
    LOS_SlantRangeUncertaintyType::serialize(accessor.getLOS_SlantRangeUncertainty(), node, LOS_MeasurementUncertaintyType_Names::LOS_SlantRangeUncertainty_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LOS_MeasurementUncertaintyType>().release());
}

uci::type::LOS_MeasurementUncertaintyType& LOS_MeasurementUncertaintyType::create(const uci::type::LOS_MeasurementUncertaintyType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LOS_MeasurementUncertaintyType> newAccessor{boost::make_unique<asb_uci::type::LOS_MeasurementUncertaintyType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LOS_MeasurementUncertaintyType::destroy(uci::type::LOS_MeasurementUncertaintyType& accessor) {
  delete dynamic_cast<asb_uci::type::LOS_MeasurementUncertaintyType*>(&accessor);
}

} // namespace type

} // namespace uci

