/** @file PO_ComponentSettingsFocusSweepSettingsStepIncrementType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentSettingsFocusSweepSettingsStepIncrementType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentSettingsFocusSweepSettingsStepIncrementType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsFocusSweepSettingsStepIncrementType::PO_ComponentSettingsFocusSweepSettingsStepIncrementType() = default;

PO_ComponentSettingsFocusSweepSettingsStepIncrementType::~PO_ComponentSettingsFocusSweepSettingsStepIncrementType() = default;

void PO_ComponentSettingsFocusSweepSettingsStepIncrementType::copy(const uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsFocusSweepSettingsStepIncrementType::copyImpl(const uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsFocusSweepSettingsStepIncrementType&>(accessor);
    percentage_Accessor = (accessorImpl.percentage_Accessor ? accessorImpl.percentage_Accessor : boost::none);
    numberOfSteps_Accessor = (accessorImpl.numberOfSteps_Accessor ? accessorImpl.numberOfSteps_Accessor : boost::none);
  }
}

void PO_ComponentSettingsFocusSweepSettingsStepIncrementType::reset() noexcept {
  percentage_Accessor.reset();
  numberOfSteps_Accessor.reset();
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType::PO_ComponentSettingsFocusSweepSettingsStepIncrementTypeChoice PO_ComponentSettingsFocusSweepSettingsStepIncrementType::getPO_ComponentSettingsFocusSweepSettingsStepIncrementTypeChoiceOrdinal() const noexcept {
  if (percentage_Accessor) {
    return PO_COMPONENTSETTINGSFOCUSSWEEPSETTINGSSTEPINCREMENTTYPE_CHOICE_PERCENTAGE;
  }
  if (numberOfSteps_Accessor) {
    return PO_COMPONENTSETTINGSFOCUSSWEEPSETTINGSSTEPINCREMENTTYPE_CHOICE_NUMBEROFSTEPS;
  }
  return PO_COMPONENTSETTINGSFOCUSSWEEPSETTINGSSTEPINCREMENTTYPE_CHOICE_NONE;
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& PO_ComponentSettingsFocusSweepSettingsStepIncrementType::setPO_ComponentSettingsFocusSweepSettingsStepIncrementTypeChoiceOrdinal(uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType::PO_ComponentSettingsFocusSweepSettingsStepIncrementTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case PO_COMPONENTSETTINGSFOCUSSWEEPSETTINGSSTEPINCREMENTTYPE_CHOICE_PERCENTAGE:
      choosePercentage();
      break;
    case PO_COMPONENTSETTINGSFOCUSSWEEPSETTINGSSTEPINCREMENTTYPE_CHOICE_NUMBEROFSTEPS:
      chooseNumberOfSteps();
      break;
    default:
      throw uci::base::UCIException("Error in setPO_ComponentSettingsFocusSweepSettingsStepIncrementTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PercentTypeValue PO_ComponentSettingsFocusSweepSettingsStepIncrementType::getPercentage() const {
  if (percentage_Accessor) {
    return *percentage_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentage(): Unable to get Percentage, field not selected");
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& PO_ComponentSettingsFocusSweepSettingsStepIncrementType::setPercentage(uci::type::PercentTypeValue value) {
  choosePercentage();
  percentage_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsFocusSweepSettingsStepIncrementType::isPercentage() const noexcept {
  return static_cast<bool>(percentage_Accessor);
}

void PO_ComponentSettingsFocusSweepSettingsStepIncrementType::choosePercentage() {
  numberOfSteps_Accessor.reset();
  if (!percentage_Accessor) {
    percentage_Accessor = boost::optional<asb_xs::Double>();
  }
}

xs::UnsignedInt PO_ComponentSettingsFocusSweepSettingsStepIncrementType::getNumberOfSteps() const {
  if (numberOfSteps_Accessor) {
    return *numberOfSteps_Accessor;
  }
  throw uci::base::UCIException("Error in getNumberOfSteps(): Unable to get NumberOfSteps, field not selected");
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& PO_ComponentSettingsFocusSweepSettingsStepIncrementType::setNumberOfSteps(xs::UnsignedInt value) {
  chooseNumberOfSteps();
  numberOfSteps_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsFocusSweepSettingsStepIncrementType::isNumberOfSteps() const noexcept {
  return static_cast<bool>(numberOfSteps_Accessor);
}

void PO_ComponentSettingsFocusSweepSettingsStepIncrementType::chooseNumberOfSteps() {
  percentage_Accessor.reset();
  if (!numberOfSteps_Accessor) {
    numberOfSteps_Accessor = boost::optional<asb_xs::UnsignedInt>();
  }
}

std::unique_ptr<PO_ComponentSettingsFocusSweepSettingsStepIncrementType> PO_ComponentSettingsFocusSweepSettingsStepIncrementType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocusSweepSettingsStepIncrementType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsFocusSweepSettingsStepIncrementType) ? boost::make_unique<PO_ComponentSettingsFocusSweepSettingsStepIncrementType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsFocusSweepSettingsStepIncrementType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsFocusSweepSettingsStepIncrementType"};
constexpr const char* Percentage_Name{"Percentage"};
constexpr const char* NumberOfSteps_Name{"NumberOfSteps"};

} // namespace PO_ComponentSettingsFocusSweepSettingsStepIncrementType_Names

void PO_ComponentSettingsFocusSweepSettingsStepIncrementType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsFocusSweepSettingsStepIncrementType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocusSweepSettingsStepIncrementType_Names::Percentage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentage(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocusSweepSettingsStepIncrementType_Names::NumberOfSteps_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfSteps(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string PO_ComponentSettingsFocusSweepSettingsStepIncrementType::serialize(const uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsFocusSweepSettingsStepIncrementType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsFocusSweepSettingsStepIncrementType_Names::Extern_Type_Name);
  }
  if (accessor.isPercentage()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentage(), node, PO_ComponentSettingsFocusSweepSettingsStepIncrementType_Names::Percentage_Name);
  } else if (accessor.isNumberOfSteps()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumberOfSteps(), node, PO_ComponentSettingsFocusSweepSettingsStepIncrementType_Names::NumberOfSteps_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& PO_ComponentSettingsFocusSweepSettingsStepIncrementType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType>().release());
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& PO_ComponentSettingsFocusSweepSettingsStepIncrementType::create(const uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsFocusSweepSettingsStepIncrementType::destroy(uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType*>(&accessor);
}

} // namespace type

} // namespace uci

