/** @file ActivityActorID_ChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ActivityActorID_ChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityActorID_ChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ActivityActorID_ChoiceType::ActivityActorID_ChoiceType() = default;

ActivityActorID_ChoiceType::~ActivityActorID_ChoiceType() = default;

void ActivityActorID_ChoiceType::copy(const uci::type::ActivityActorID_ChoiceType& accessor) {
  copyImpl(accessor, false);
}

void ActivityActorID_ChoiceType::copyImpl(const uci::type::ActivityActorID_ChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ActivityActorID_ChoiceType&>(accessor);
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
    if (accessorImpl.capabilityID_Accessor) {
      setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    } else {
      capabilityID_Accessor.reset();
    }
    if (accessorImpl.entityID_Accessor) {
      setEntityID(*(accessorImpl.entityID_Accessor));
    } else {
      entityID_Accessor.reset();
    }
  }
}

void ActivityActorID_ChoiceType::reset() noexcept {
  systemID_Accessor.reset();
  capabilityID_Accessor.reset();
  entityID_Accessor.reset();
}

uci::type::ActivityActorID_ChoiceType::ActivityActorID_ChoiceTypeChoice ActivityActorID_ChoiceType::getActivityActorID_ChoiceTypeChoiceOrdinal() const noexcept {
  if (systemID_Accessor) {
    return ACTIVITYACTORID_CHOICETYPE_CHOICE_SYSTEMID;
  }
  if (capabilityID_Accessor) {
    return ACTIVITYACTORID_CHOICETYPE_CHOICE_CAPABILITYID;
  }
  if (entityID_Accessor) {
    return ACTIVITYACTORID_CHOICETYPE_CHOICE_ENTITYID;
  }
  return ACTIVITYACTORID_CHOICETYPE_CHOICE_NONE;
}

uci::type::ActivityActorID_ChoiceType& ActivityActorID_ChoiceType::setActivityActorID_ChoiceTypeChoiceOrdinal(uci::type::ActivityActorID_ChoiceType::ActivityActorID_ChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ACTIVITYACTORID_CHOICETYPE_CHOICE_SYSTEMID:
      chooseSystemID("setActivityActorID_ChoiceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYACTORID_CHOICETYPE_CHOICE_CAPABILITYID:
      chooseCapabilityID("setActivityActorID_ChoiceTypeChoiceOrdinal", type);
      break;
    case ACTIVITYACTORID_CHOICETYPE_CHOICE_ENTITYID:
      chooseEntityID("setActivityActorID_ChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setActivityActorID_ChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SystemID_Type& ActivityActorID_ChoiceType::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): Unable to get SystemID, field not selected");
}

const uci::type::SystemID_Type& ActivityActorID_ChoiceType::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& ActivityActorID_ChoiceType::getSystemID() {
  return getSystemID_();
}

uci::type::ActivityActorID_ChoiceType& ActivityActorID_ChoiceType::setSystemID(const uci::type::SystemID_Type& accessor) {
  chooseSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityActorID_ChoiceType::isSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& ActivityActorID_ChoiceType::chooseSystemID(const std::string& method, uci::base::accessorType::AccessorType type) {
  capabilityID_Accessor.reset();
  entityID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(type);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::SystemID_Type& ActivityActorID_ChoiceType::chooseSystemID(uci::base::accessorType::AccessorType type) {
  return chooseSystemID("chooseSystemID", type);
}

uci::type::CapabilityID_Type& ActivityActorID_ChoiceType::getCapabilityID_() const {
  if (capabilityID_Accessor) {
    return *capabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityID(): Unable to get CapabilityID, field not selected");
}

const uci::type::CapabilityID_Type& ActivityActorID_ChoiceType::getCapabilityID() const {
  return getCapabilityID_();
}

uci::type::CapabilityID_Type& ActivityActorID_ChoiceType::getCapabilityID() {
  return getCapabilityID_();
}

uci::type::ActivityActorID_ChoiceType& ActivityActorID_ChoiceType::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  chooseCapabilityID();
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityActorID_ChoiceType::isCapabilityID() const noexcept {
  return static_cast<bool>(capabilityID_Accessor);
}

uci::type::CapabilityID_Type& ActivityActorID_ChoiceType::chooseCapabilityID(const std::string& method, uci::base::accessorType::AccessorType type) {
  systemID_Accessor.reset();
  entityID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!capabilityID_Accessor) || (capabilityID_Accessor->getAccessorType() != requestedType)) {
    capabilityID_Accessor = CapabilityID_Type::create(type);
    if (!capabilityID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityID_Accessor;
}

uci::type::CapabilityID_Type& ActivityActorID_ChoiceType::chooseCapabilityID(uci::base::accessorType::AccessorType type) {
  return chooseCapabilityID("chooseCapabilityID", type);
}

uci::type::EntityID_Type& ActivityActorID_ChoiceType::getEntityID_() const {
  if (entityID_Accessor) {
    return *entityID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityID(): Unable to get EntityID, field not selected");
}

const uci::type::EntityID_Type& ActivityActorID_ChoiceType::getEntityID() const {
  return getEntityID_();
}

uci::type::EntityID_Type& ActivityActorID_ChoiceType::getEntityID() {
  return getEntityID_();
}

uci::type::ActivityActorID_ChoiceType& ActivityActorID_ChoiceType::setEntityID(const uci::type::EntityID_Type& accessor) {
  chooseEntityID("setEntityID", accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ActivityActorID_ChoiceType::isEntityID() const noexcept {
  return static_cast<bool>(entityID_Accessor);
}

uci::type::EntityID_Type& ActivityActorID_ChoiceType::chooseEntityID(const std::string& method, uci::base::accessorType::AccessorType type) {
  systemID_Accessor.reset();
  capabilityID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(type);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::EntityID_Type& ActivityActorID_ChoiceType::chooseEntityID(uci::base::accessorType::AccessorType type) {
  return chooseEntityID("chooseEntityID", type);
}

std::unique_ptr<ActivityActorID_ChoiceType> ActivityActorID_ChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityActorID_ChoiceType : type};
  return (requestedType == uci::type::accessorType::activityActorID_ChoiceType) ? boost::make_unique<ActivityActorID_ChoiceType>() : nullptr;
}

/**  */
namespace ActivityActorID_ChoiceType_Names {

constexpr const char* Extern_Type_Name{"ActivityActorID_ChoiceType"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* EntityID_Name{"EntityID"};

} // namespace ActivityActorID_ChoiceType_Names

void ActivityActorID_ChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActivityActorID_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActivityActorID_ChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ActivityActorID_ChoiceType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.chooseSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityActorID_ChoiceType_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.chooseCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityActorID_ChoiceType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string ActivityActorID_ChoiceType::serialize(const uci::type::ActivityActorID_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ActivityActorID_ChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ActivityActorID_ChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, ActivityActorID_ChoiceType_Names::SystemID_Name);
  } else if (accessor.isCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getCapabilityID(), node, ActivityActorID_ChoiceType_Names::CapabilityID_Name);
  } else if (accessor.isEntityID()) {
    EntityID_Type::serialize(accessor.getEntityID(), node, ActivityActorID_ChoiceType_Names::EntityID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ActivityActorID_ChoiceType& ActivityActorID_ChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ActivityActorID_ChoiceType>().release());
}

uci::type::ActivityActorID_ChoiceType& ActivityActorID_ChoiceType::create(const uci::type::ActivityActorID_ChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ActivityActorID_ChoiceType> newAccessor{boost::make_unique<asb_uci::type::ActivityActorID_ChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ActivityActorID_ChoiceType::destroy(uci::type::ActivityActorID_ChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::ActivityActorID_ChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

