/** @file ResponseMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ResponseMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/RequirementConstraintsType.h"
#include "../../../include/asb_uci/type/RequirementGuidanceType.h"
#include "../../../include/asb_uci/type/RequirementMetadataType.h"
#include "../../../include/asb_uci/type/RequirementsTemplateType.h"
#include "../../../include/asb_uci/type/ResponseID_Type.h"
#include "../../../include/asb_uci/type/ResponseOptionDetailsType.h"
#include "../../../include/asb_uci/type/ResponseTypeEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementGuidanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementMetadataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementsTemplateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponseID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponseMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponseOptionDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponseTypeEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResponseMDT::ResponseMDT()
  : responseID_Accessor{boost::make_unique<ResponseID_Type>()},
    responseType_Accessor{boost::make_unique<ResponseType>(1, 4)},
    option_Accessor{boost::make_unique<Option>(1, SIZE_MAX)},
    requirementsTemplate_Accessor{boost::make_unique<RequirementsTemplate>(0, SIZE_MAX)} {
}

ResponseMDT::~ResponseMDT() = default;

void ResponseMDT::copy(const uci::type::ResponseMDT& accessor) {
  copyImpl(accessor, false);
}

void ResponseMDT::copyImpl(const uci::type::ResponseMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResponseMDT&>(accessor);
    setResponseID(*(accessorImpl.responseID_Accessor));
    setResponseType(*(accessorImpl.responseType_Accessor));
    if (accessorImpl.responseManagementConstraints_Accessor) {
      setResponseManagementConstraints(*(accessorImpl.responseManagementConstraints_Accessor));
    } else {
      responseManagementConstraints_Accessor.reset();
    }
    if (accessorImpl.responseManagementGuidance_Accessor) {
      setResponseManagementGuidance(*(accessorImpl.responseManagementGuidance_Accessor));
    } else {
      responseManagementGuidance_Accessor.reset();
    }
    setOption(*(accessorImpl.option_Accessor));
    setRequirementsTemplate(*(accessorImpl.requirementsTemplate_Accessor));
    if (accessorImpl.metadata_Accessor) {
      setMetadata(*(accessorImpl.metadata_Accessor));
    } else {
      metadata_Accessor.reset();
    }
  }
}

void ResponseMDT::reset() noexcept {
  responseID_Accessor->reset();
  responseType_Accessor->reset();
  responseManagementConstraints_Accessor.reset();
  responseManagementGuidance_Accessor.reset();
  option_Accessor->reset();
  requirementsTemplate_Accessor->reset();
  metadata_Accessor.reset();
}

const uci::type::ResponseID_Type& ResponseMDT::getResponseID() const {
  return *responseID_Accessor;
}

uci::type::ResponseID_Type& ResponseMDT::getResponseID() {
  return *responseID_Accessor;
}

uci::type::ResponseMDT& ResponseMDT::setResponseID(const uci::type::ResponseID_Type& accessor) {
  if (&accessor != responseID_Accessor.get()) {
    responseID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ResponseMDT::ResponseType& ResponseMDT::getResponseType() const {
  return *responseType_Accessor;
}

uci::type::ResponseMDT::ResponseType& ResponseMDT::getResponseType() {
  return *responseType_Accessor;
}

uci::type::ResponseMDT& ResponseMDT::setResponseType(const uci::type::ResponseMDT::ResponseType& accessor) {
  if (&accessor != responseType_Accessor.get()) {
    responseType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementConstraintsType& ResponseMDT::getResponseManagementConstraints_() const {
  if (responseManagementConstraints_Accessor) {
    return *responseManagementConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getResponseManagementConstraints(): An attempt was made to get an optional field that was not enabled, call hasResponseManagementConstraints() to determine if it is safe to call getResponseManagementConstraints()");
}

const uci::type::RequirementConstraintsType& ResponseMDT::getResponseManagementConstraints() const {
  return getResponseManagementConstraints_();
}

uci::type::RequirementConstraintsType& ResponseMDT::getResponseManagementConstraints() {
  return getResponseManagementConstraints_();
}

uci::type::ResponseMDT& ResponseMDT::setResponseManagementConstraints(const uci::type::RequirementConstraintsType& accessor) {
  enableResponseManagementConstraints();
  if (&accessor != responseManagementConstraints_Accessor.get()) {
    responseManagementConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseMDT::hasResponseManagementConstraints() const noexcept {
  return static_cast<bool>(responseManagementConstraints_Accessor);
}

uci::type::RequirementConstraintsType& ResponseMDT::enableResponseManagementConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementConstraintsType : type};
  if ((!responseManagementConstraints_Accessor) || (responseManagementConstraints_Accessor->getAccessorType() != requestedType)) {
    responseManagementConstraints_Accessor = RequirementConstraintsType::create(requestedType);
    if (!responseManagementConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableResponseManagementConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *responseManagementConstraints_Accessor;
}

uci::type::ResponseMDT& ResponseMDT::clearResponseManagementConstraints() noexcept {
  responseManagementConstraints_Accessor.reset();
  return *this;
}

uci::type::RequirementGuidanceType& ResponseMDT::getResponseManagementGuidance_() const {
  if (responseManagementGuidance_Accessor) {
    return *responseManagementGuidance_Accessor;
  }
  throw uci::base::UCIException("Error in getResponseManagementGuidance(): An attempt was made to get an optional field that was not enabled, call hasResponseManagementGuidance() to determine if it is safe to call getResponseManagementGuidance()");
}

const uci::type::RequirementGuidanceType& ResponseMDT::getResponseManagementGuidance() const {
  return getResponseManagementGuidance_();
}

uci::type::RequirementGuidanceType& ResponseMDT::getResponseManagementGuidance() {
  return getResponseManagementGuidance_();
}

uci::type::ResponseMDT& ResponseMDT::setResponseManagementGuidance(const uci::type::RequirementGuidanceType& accessor) {
  enableResponseManagementGuidance();
  if (&accessor != responseManagementGuidance_Accessor.get()) {
    responseManagementGuidance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseMDT::hasResponseManagementGuidance() const noexcept {
  return static_cast<bool>(responseManagementGuidance_Accessor);
}

uci::type::RequirementGuidanceType& ResponseMDT::enableResponseManagementGuidance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementGuidanceType : type};
  if ((!responseManagementGuidance_Accessor) || (responseManagementGuidance_Accessor->getAccessorType() != requestedType)) {
    responseManagementGuidance_Accessor = RequirementGuidanceType::create(requestedType);
    if (!responseManagementGuidance_Accessor) {
      throw uci::base::UCIException("Error in enableResponseManagementGuidance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *responseManagementGuidance_Accessor;
}

uci::type::ResponseMDT& ResponseMDT::clearResponseManagementGuidance() noexcept {
  responseManagementGuidance_Accessor.reset();
  return *this;
}

const uci::type::ResponseMDT::Option& ResponseMDT::getOption() const {
  return *option_Accessor;
}

uci::type::ResponseMDT::Option& ResponseMDT::getOption() {
  return *option_Accessor;
}

uci::type::ResponseMDT& ResponseMDT::setOption(const uci::type::ResponseMDT::Option& accessor) {
  if (&accessor != option_Accessor.get()) {
    option_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ResponseMDT::RequirementsTemplate& ResponseMDT::getRequirementsTemplate() const {
  return *requirementsTemplate_Accessor;
}

uci::type::ResponseMDT::RequirementsTemplate& ResponseMDT::getRequirementsTemplate() {
  return *requirementsTemplate_Accessor;
}

uci::type::ResponseMDT& ResponseMDT::setRequirementsTemplate(const uci::type::ResponseMDT::RequirementsTemplate& accessor) {
  if (&accessor != requirementsTemplate_Accessor.get()) {
    requirementsTemplate_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementMetadataType& ResponseMDT::getMetadata_() const {
  if (metadata_Accessor) {
    return *metadata_Accessor;
  }
  throw uci::base::UCIException("Error in getMetadata(): An attempt was made to get an optional field that was not enabled, call hasMetadata() to determine if it is safe to call getMetadata()");
}

const uci::type::RequirementMetadataType& ResponseMDT::getMetadata() const {
  return getMetadata_();
}

uci::type::RequirementMetadataType& ResponseMDT::getMetadata() {
  return getMetadata_();
}

uci::type::ResponseMDT& ResponseMDT::setMetadata(const uci::type::RequirementMetadataType& accessor) {
  enableMetadata();
  if (&accessor != metadata_Accessor.get()) {
    metadata_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseMDT::hasMetadata() const noexcept {
  return static_cast<bool>(metadata_Accessor);
}

uci::type::RequirementMetadataType& ResponseMDT::enableMetadata(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementMetadataType : type};
  if ((!metadata_Accessor) || (metadata_Accessor->getAccessorType() != requestedType)) {
    metadata_Accessor = RequirementMetadataType::create(requestedType);
    if (!metadata_Accessor) {
      throw uci::base::UCIException("Error in enableMetadata(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *metadata_Accessor;
}

uci::type::ResponseMDT& ResponseMDT::clearMetadata() noexcept {
  metadata_Accessor.reset();
  return *this;
}

std::unique_ptr<ResponseMDT> ResponseMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responseMDT : type};
  return (requestedType == uci::type::accessorType::responseMDT) ? boost::make_unique<ResponseMDT>() : nullptr;
}

/**  */
namespace ResponseMDT_Names {

constexpr const char* Extern_Type_Name{"ResponseMDT"};
constexpr const char* ResponseID_Name{"ResponseID"};
constexpr const char* ResponseType_Name{"ResponseType"};
constexpr const char* ResponseManagementConstraints_Name{"ResponseManagementConstraints"};
constexpr const char* ResponseManagementGuidance_Name{"ResponseManagementGuidance"};
constexpr const char* Option_Name{"Option"};
constexpr const char* RequirementsTemplate_Name{"RequirementsTemplate"};
constexpr const char* Metadata_Name{"Metadata"};

} // namespace ResponseMDT_Names

void ResponseMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResponseMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResponseMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResponseMDT_Names::ResponseID_Name) {
      ResponseID_Type::deserialize(valueType.second, accessor.getResponseID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseMDT_Names::ResponseType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResponseMDT::ResponseType& boundedList = accessor.getResponseType();
        const uci::type::ResponseMDT::ResponseType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ResponseMDT_Names::ResponseManagementConstraints_Name) {
      RequirementConstraintsType::deserialize(valueType.second, accessor.enableResponseManagementConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseMDT_Names::ResponseManagementGuidance_Name) {
      RequirementGuidanceType::deserialize(valueType.second, accessor.enableResponseManagementGuidance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseMDT_Names::Option_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResponseMDT::Option& boundedList = accessor.getOption();
        const uci::type::ResponseMDT::Option::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ResponseOptionDetailsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ResponseMDT_Names::RequirementsTemplate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResponseMDT::RequirementsTemplate& boundedList = accessor.getRequirementsTemplate();
        const uci::type::ResponseMDT::RequirementsTemplate::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RequirementsTemplateType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ResponseMDT_Names::Metadata_Name) {
      RequirementMetadataType::deserialize(valueType.second, accessor.enableMetadata(), nodeName, nsPrefix);
    }
  }
}

std::string ResponseMDT::serialize(const uci::type::ResponseMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResponseMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResponseMDT_Names::Extern_Type_Name);
  }
  ResponseID_Type::serialize(accessor.getResponseID(), node, ResponseMDT_Names::ResponseID_Name);
  {
    const uci::type::ResponseMDT::ResponseType& boundedList = accessor.getResponseType();
    for (uci::type::ResponseMDT::ResponseType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ResponseTypeEnum::serialize(boundedList.at(i), node, ResponseMDT_Names::ResponseType_Name, false);
    }
  }
  if (accessor.hasResponseManagementConstraints()) {
    RequirementConstraintsType::serialize(accessor.getResponseManagementConstraints(), node, ResponseMDT_Names::ResponseManagementConstraints_Name);
  }
  if (accessor.hasResponseManagementGuidance()) {
    RequirementGuidanceType::serialize(accessor.getResponseManagementGuidance(), node, ResponseMDT_Names::ResponseManagementGuidance_Name);
  }
  {
    const uci::type::ResponseMDT::Option& boundedList = accessor.getOption();
    for (uci::type::ResponseMDT::Option::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ResponseOptionDetailsType::serialize(boundedList.at(i), node, ResponseMDT_Names::Option_Name);
    }
  }
  {
    const uci::type::ResponseMDT::RequirementsTemplate& boundedList = accessor.getRequirementsTemplate();
    for (uci::type::ResponseMDT::RequirementsTemplate::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementsTemplateType::serialize(boundedList.at(i), node, ResponseMDT_Names::RequirementsTemplate_Name);
    }
  }
  if (accessor.hasMetadata()) {
    RequirementMetadataType::serialize(accessor.getMetadata(), node, ResponseMDT_Names::Metadata_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResponseMDT& ResponseMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResponseMDT>().release());
}

uci::type::ResponseMDT& ResponseMDT::create(const uci::type::ResponseMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResponseMDT> newAccessor{boost::make_unique<asb_uci::type::ResponseMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResponseMDT::destroy(uci::type::ResponseMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ResponseMDT*>(&accessor);
}

} // namespace type

} // namespace uci

