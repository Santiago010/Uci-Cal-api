/** @file RemarksType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RemarksType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/VisibleString1024Type.h"
#include "../../../include/asb_uci/type/VisibleString32Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RemarksType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString1024Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString32Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RemarksType::RemarksType() = default;

RemarksType::~RemarksType() = default;

void RemarksType::copy(const uci::type::RemarksType& accessor) {
  copyImpl(accessor, false);
}

void RemarksType::copyImpl(const uci::type::RemarksType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RemarksType&>(accessor);
    if (accessorImpl.displayName_Accessor) {
      setDisplayName(*(accessorImpl.displayName_Accessor));
    } else {
      displayName_Accessor.reset();
    }
    if (accessorImpl.detail_Accessor) {
      setDetail(*(accessorImpl.detail_Accessor));
    } else {
      detail_Accessor.reset();
    }
  }
}

void RemarksType::reset() noexcept {
  displayName_Accessor.reset();
  detail_Accessor.reset();
}

uci::type::VisibleString32Type& RemarksType::getDisplayName_() const {
  if (displayName_Accessor) {
    return *displayName_Accessor;
  }
  throw uci::base::UCIException("Error in getDisplayName(): An attempt was made to get an optional field that was not enabled, call hasDisplayName() to determine if it is safe to call getDisplayName()");
}

const uci::type::VisibleString32Type& RemarksType::getDisplayName() const {
  return getDisplayName_();
}

uci::type::VisibleString32Type& RemarksType::getDisplayName() {
  return getDisplayName_();
}

uci::type::RemarksType& RemarksType::setDisplayName(const uci::type::VisibleString32Type& value) {
  return setDisplayName(value.c_str());
}

uci::type::RemarksType& RemarksType::setDisplayName(const std::string& value) {
  return setDisplayName(value.c_str());
}

uci::type::RemarksType& RemarksType::setDisplayName(const char* value) {
  enableDisplayName().setStringValue(value);
  return *this;
}

bool RemarksType::hasDisplayName() const noexcept {
  return static_cast<bool>(displayName_Accessor);
}

uci::type::VisibleString32Type& RemarksType::enableDisplayName(uci::base::accessorType::AccessorType type) {
  if (!displayName_Accessor) {
    displayName_Accessor = VisibleString32Type::create(type);
  }
  return *displayName_Accessor;
}

uci::type::RemarksType& RemarksType::clearDisplayName() noexcept {
  displayName_Accessor.reset();
  return *this;
}

uci::type::VisibleString1024Type& RemarksType::getDetail_() const {
  if (detail_Accessor) {
    return *detail_Accessor;
  }
  throw uci::base::UCIException("Error in getDetail(): An attempt was made to get an optional field that was not enabled, call hasDetail() to determine if it is safe to call getDetail()");
}

const uci::type::VisibleString1024Type& RemarksType::getDetail() const {
  return getDetail_();
}

uci::type::VisibleString1024Type& RemarksType::getDetail() {
  return getDetail_();
}

uci::type::RemarksType& RemarksType::setDetail(const uci::type::VisibleString1024Type& value) {
  return setDetail(value.c_str());
}

uci::type::RemarksType& RemarksType::setDetail(const std::string& value) {
  return setDetail(value.c_str());
}

uci::type::RemarksType& RemarksType::setDetail(const char* value) {
  enableDetail().setStringValue(value);
  return *this;
}

bool RemarksType::hasDetail() const noexcept {
  return static_cast<bool>(detail_Accessor);
}

uci::type::VisibleString1024Type& RemarksType::enableDetail(uci::base::accessorType::AccessorType type) {
  if (!detail_Accessor) {
    detail_Accessor = VisibleString1024Type::create(type);
  }
  return *detail_Accessor;
}

uci::type::RemarksType& RemarksType::clearDetail() noexcept {
  detail_Accessor.reset();
  return *this;
}

std::unique_ptr<RemarksType> RemarksType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::remarksType : type};
  return (requestedType == uci::type::accessorType::remarksType) ? boost::make_unique<RemarksType>() : nullptr;
}

/**  */
namespace RemarksType_Names {

constexpr const char* Extern_Type_Name{"RemarksType"};
constexpr const char* DisplayName_Name{"DisplayName"};
constexpr const char* Detail_Name{"Detail"};

} // namespace RemarksType_Names

void RemarksType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RemarksType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RemarksType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RemarksType_Names::DisplayName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDisplayName(*value);
      }
    } else if (valueType.first == nsPrefix + RemarksType_Names::Detail_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDetail(*value);
      }
    }
  }
}

std::string RemarksType::serialize(const uci::type::RemarksType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RemarksType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RemarksType_Names::Extern_Type_Name);
  }
  if (accessor.hasDisplayName()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDisplayName(), node, RemarksType_Names::DisplayName_Name);
  }
  if (accessor.hasDetail()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDetail(), node, RemarksType_Names::Detail_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RemarksType& RemarksType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RemarksType>().release());
}

uci::type::RemarksType& RemarksType::create(const uci::type::RemarksType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RemarksType> newAccessor{boost::make_unique<asb_uci::type::RemarksType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RemarksType::destroy(uci::type::RemarksType& accessor) {
  delete dynamic_cast<asb_uci::type::RemarksType*>(&accessor);
}

} // namespace type

} // namespace uci

