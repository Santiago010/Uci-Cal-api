/** @file StrengthType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/StrengthType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PercentRangeType.h"
#include "asb_uci/type/StrengthRangeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PercentRangeType.h"
#include "uci/type/StrengthRangeType.h"
#include "uci/type/StrengthType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StrengthType::StrengthType() = default;

StrengthType::~StrengthType() = default;

void StrengthType::copy(const uci::type::StrengthType& accessor) {
  copyImpl(accessor, false);
}

void StrengthType::copyImpl(const uci::type::StrengthType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const StrengthType&>(accessor);
    if (accessorImpl.strengthValue_Accessor) {
      setStrengthValue(*(accessorImpl.strengthValue_Accessor));
    } else {
      strengthValue_Accessor.reset();
    }
    if (accessorImpl.vehicleCount_Accessor) {
      setVehicleCount(*(accessorImpl.vehicleCount_Accessor));
    } else {
      vehicleCount_Accessor.reset();
    }
    if (accessorImpl.percentTracked_Accessor) {
      setPercentTracked(*(accessorImpl.percentTracked_Accessor));
    } else {
      percentTracked_Accessor.reset();
    }
  }
}

void StrengthType::reset() noexcept {
  strengthValue_Accessor.reset();
  vehicleCount_Accessor.reset();
  percentTracked_Accessor.reset();
}

uci::type::StrengthRangeType& StrengthType::getStrengthValue_() const {
  if (strengthValue_Accessor) {
    return *strengthValue_Accessor;
  }
  throw uci::base::UCIException("Error in getStrengthValue(): An attempt was made to get an optional field that was not enabled, call hasStrengthValue() to determine if it is safe to call getStrengthValue()");
}

const uci::type::StrengthRangeType& StrengthType::getStrengthValue() const {
  return getStrengthValue_();
}

uci::type::StrengthRangeType& StrengthType::getStrengthValue() {
  return getStrengthValue_();
}

uci::type::StrengthType& StrengthType::setStrengthValue(const uci::type::StrengthRangeType& accessor) {
  enableStrengthValue();
  if (&accessor != strengthValue_Accessor.get()) {
    strengthValue_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrengthType::hasStrengthValue() const noexcept {
  return static_cast<bool>(strengthValue_Accessor);
}

uci::type::StrengthRangeType& StrengthType::enableStrengthValue(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strengthRangeType : type};
  if ((!strengthValue_Accessor) || (strengthValue_Accessor->getAccessorType() != requestedType)) {
    strengthValue_Accessor = StrengthRangeType::create(requestedType);
    if (!strengthValue_Accessor) {
      throw uci::base::UCIException("Error in enableStrengthValue(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *strengthValue_Accessor;
}

uci::type::StrengthType& StrengthType::clearStrengthValue() noexcept {
  strengthValue_Accessor.reset();
  return *this;
}

uci::type::StrengthRangeType& StrengthType::getVehicleCount_() const {
  if (vehicleCount_Accessor) {
    return *vehicleCount_Accessor;
  }
  throw uci::base::UCIException("Error in getVehicleCount(): An attempt was made to get an optional field that was not enabled, call hasVehicleCount() to determine if it is safe to call getVehicleCount()");
}

const uci::type::StrengthRangeType& StrengthType::getVehicleCount() const {
  return getVehicleCount_();
}

uci::type::StrengthRangeType& StrengthType::getVehicleCount() {
  return getVehicleCount_();
}

uci::type::StrengthType& StrengthType::setVehicleCount(const uci::type::StrengthRangeType& accessor) {
  enableVehicleCount();
  if (&accessor != vehicleCount_Accessor.get()) {
    vehicleCount_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrengthType::hasVehicleCount() const noexcept {
  return static_cast<bool>(vehicleCount_Accessor);
}

uci::type::StrengthRangeType& StrengthType::enableVehicleCount(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strengthRangeType : type};
  if ((!vehicleCount_Accessor) || (vehicleCount_Accessor->getAccessorType() != requestedType)) {
    vehicleCount_Accessor = StrengthRangeType::create(requestedType);
    if (!vehicleCount_Accessor) {
      throw uci::base::UCIException("Error in enableVehicleCount(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vehicleCount_Accessor;
}

uci::type::StrengthType& StrengthType::clearVehicleCount() noexcept {
  vehicleCount_Accessor.reset();
  return *this;
}

uci::type::PercentRangeType& StrengthType::getPercentTracked_() const {
  if (percentTracked_Accessor) {
    return *percentTracked_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentTracked(): An attempt was made to get an optional field that was not enabled, call hasPercentTracked() to determine if it is safe to call getPercentTracked()");
}

const uci::type::PercentRangeType& StrengthType::getPercentTracked() const {
  return getPercentTracked_();
}

uci::type::PercentRangeType& StrengthType::getPercentTracked() {
  return getPercentTracked_();
}

uci::type::StrengthType& StrengthType::setPercentTracked(const uci::type::PercentRangeType& accessor) {
  enablePercentTracked();
  if (&accessor != percentTracked_Accessor.get()) {
    percentTracked_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StrengthType::hasPercentTracked() const noexcept {
  return static_cast<bool>(percentTracked_Accessor);
}

uci::type::PercentRangeType& StrengthType::enablePercentTracked(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::percentRangeType : type};
  if ((!percentTracked_Accessor) || (percentTracked_Accessor->getAccessorType() != requestedType)) {
    percentTracked_Accessor = PercentRangeType::create(requestedType);
    if (!percentTracked_Accessor) {
      throw uci::base::UCIException("Error in enablePercentTracked(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *percentTracked_Accessor;
}

uci::type::StrengthType& StrengthType::clearPercentTracked() noexcept {
  percentTracked_Accessor.reset();
  return *this;
}

std::unique_ptr<StrengthType> StrengthType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strengthType : type};
  return (requestedType == uci::type::accessorType::strengthType) ? boost::make_unique<StrengthType>() : nullptr;
}

/**  */
namespace StrengthType_Names {

constexpr const char* Extern_Type_Name{"StrengthType"};
constexpr const char* StrengthValue_Name{"StrengthValue"};
constexpr const char* VehicleCount_Name{"VehicleCount"};
constexpr const char* PercentTracked_Name{"PercentTracked"};

} // namespace StrengthType_Names

void StrengthType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StrengthType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StrengthType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StrengthType_Names::StrengthValue_Name) {
      StrengthRangeType::deserialize(valueType.second, accessor.enableStrengthValue(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrengthType_Names::VehicleCount_Name) {
      StrengthRangeType::deserialize(valueType.second, accessor.enableVehicleCount(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrengthType_Names::PercentTracked_Name) {
      PercentRangeType::deserialize(valueType.second, accessor.enablePercentTracked(), nodeName, nsPrefix);
    }
  }
}

std::string StrengthType::serialize(const uci::type::StrengthType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StrengthType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StrengthType_Names::Extern_Type_Name);
  }
  if (accessor.hasStrengthValue()) {
    StrengthRangeType::serialize(accessor.getStrengthValue(), node, StrengthType_Names::StrengthValue_Name);
  }
  if (accessor.hasVehicleCount()) {
    StrengthRangeType::serialize(accessor.getVehicleCount(), node, StrengthType_Names::VehicleCount_Name);
  }
  if (accessor.hasPercentTracked()) {
    PercentRangeType::serialize(accessor.getPercentTracked(), node, StrengthType_Names::PercentTracked_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StrengthType& StrengthType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StrengthType>().release());
}

uci::type::StrengthType& StrengthType::create(const uci::type::StrengthType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StrengthType> newAccessor{boost::make_unique<asb_uci::type::StrengthType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StrengthType::destroy(uci::type::StrengthType& accessor) {
  delete dynamic_cast<asb_uci::type::StrengthType*>(&accessor);
}

} // namespace type

} // namespace uci

