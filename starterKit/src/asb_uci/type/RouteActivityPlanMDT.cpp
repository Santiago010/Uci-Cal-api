/** @file RouteActivityPlanMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RouteActivityPlanMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/RouteActivityPlanCommandID_ChoiceType.h"
#include "asb_uci/type/RouteActivityPlanID_Type.h"
#include "asb_uci/type/RouteActivityPlanInputsType.h"
#include "asb_uci/type/RouteActivityPlanType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/RouteActivityPlanCommandID_ChoiceType.h"
#include "uci/type/RouteActivityPlanID_Type.h"
#include "uci/type/RouteActivityPlanInputsType.h"
#include "uci/type/RouteActivityPlanMDT.h"
#include "uci/type/RouteActivityPlanType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RouteActivityPlanMDT::RouteActivityPlanMDT()
  : routeActivityPlanID_Accessor{boost::make_unique<RouteActivityPlanID_Type>()},
    plan_Accessor{boost::make_unique<RouteActivityPlanType>()} {
}

RouteActivityPlanMDT::~RouteActivityPlanMDT() = default;

void RouteActivityPlanMDT::copy(const uci::type::RouteActivityPlanMDT& accessor) {
  copyImpl(accessor, false);
}

void RouteActivityPlanMDT::copyImpl(const uci::type::RouteActivityPlanMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RouteActivityPlanMDT&>(accessor);
    setRouteActivityPlanID(*(accessorImpl.routeActivityPlanID_Accessor));
    if (accessorImpl.planCommandID_Accessor) {
      setPlanCommandID(*(accessorImpl.planCommandID_Accessor));
    } else {
      planCommandID_Accessor.reset();
    }
    setPlan(*(accessorImpl.plan_Accessor));
    setForPlanningUseOnly(accessorImpl.forPlanningUseOnly_Accessor);
    if (accessorImpl.planInputs_Accessor) {
      setPlanInputs(*(accessorImpl.planInputs_Accessor));
    } else {
      planInputs_Accessor.reset();
    }
  }
}

void RouteActivityPlanMDT::reset() noexcept {
  routeActivityPlanID_Accessor->reset();
  planCommandID_Accessor.reset();
  plan_Accessor->reset();
  forPlanningUseOnly_Accessor = false;
  planInputs_Accessor.reset();
}

const uci::type::RouteActivityPlanID_Type& RouteActivityPlanMDT::getRouteActivityPlanID() const {
  return *routeActivityPlanID_Accessor;
}

uci::type::RouteActivityPlanID_Type& RouteActivityPlanMDT::getRouteActivityPlanID() {
  return *routeActivityPlanID_Accessor;
}

uci::type::RouteActivityPlanMDT& RouteActivityPlanMDT::setRouteActivityPlanID(const uci::type::RouteActivityPlanID_Type& accessor) {
  if (&accessor != routeActivityPlanID_Accessor.get()) {
    routeActivityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RouteActivityPlanCommandID_ChoiceType& RouteActivityPlanMDT::getPlanCommandID_() const {
  if (planCommandID_Accessor) {
    return *planCommandID_Accessor;
  }
  throw uci::base::UCIException("Error in getPlanCommandID(): An attempt was made to get an optional field that was not enabled, call hasPlanCommandID() to determine if it is safe to call getPlanCommandID()");
}

const uci::type::RouteActivityPlanCommandID_ChoiceType& RouteActivityPlanMDT::getPlanCommandID() const {
  return getPlanCommandID_();
}

uci::type::RouteActivityPlanCommandID_ChoiceType& RouteActivityPlanMDT::getPlanCommandID() {
  return getPlanCommandID_();
}

uci::type::RouteActivityPlanMDT& RouteActivityPlanMDT::setPlanCommandID(const uci::type::RouteActivityPlanCommandID_ChoiceType& accessor) {
  enablePlanCommandID();
  if (&accessor != planCommandID_Accessor.get()) {
    planCommandID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RouteActivityPlanMDT::hasPlanCommandID() const noexcept {
  return static_cast<bool>(planCommandID_Accessor);
}

uci::type::RouteActivityPlanCommandID_ChoiceType& RouteActivityPlanMDT::enablePlanCommandID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeActivityPlanCommandID_ChoiceType : type};
  if ((!planCommandID_Accessor) || (planCommandID_Accessor->getAccessorType() != requestedType)) {
    planCommandID_Accessor = RouteActivityPlanCommandID_ChoiceType::create(requestedType);
    if (!planCommandID_Accessor) {
      throw uci::base::UCIException("Error in enablePlanCommandID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *planCommandID_Accessor;
}

uci::type::RouteActivityPlanMDT& RouteActivityPlanMDT::clearPlanCommandID() noexcept {
  planCommandID_Accessor.reset();
  return *this;
}

const uci::type::RouteActivityPlanType& RouteActivityPlanMDT::getPlan() const {
  return *plan_Accessor;
}

uci::type::RouteActivityPlanType& RouteActivityPlanMDT::getPlan() {
  return *plan_Accessor;
}

uci::type::RouteActivityPlanMDT& RouteActivityPlanMDT::setPlan(const uci::type::RouteActivityPlanType& accessor) {
  if (&accessor != plan_Accessor.get()) {
    plan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean RouteActivityPlanMDT::getForPlanningUseOnly() const {
  return forPlanningUseOnly_Accessor;
}

uci::type::RouteActivityPlanMDT& RouteActivityPlanMDT::setForPlanningUseOnly(xs::Boolean value) {
  forPlanningUseOnly_Accessor = value;
  return *this;
}


uci::type::RouteActivityPlanInputsType& RouteActivityPlanMDT::getPlanInputs_() const {
  if (planInputs_Accessor) {
    return *planInputs_Accessor;
  }
  throw uci::base::UCIException("Error in getPlanInputs(): An attempt was made to get an optional field that was not enabled, call hasPlanInputs() to determine if it is safe to call getPlanInputs()");
}

const uci::type::RouteActivityPlanInputsType& RouteActivityPlanMDT::getPlanInputs() const {
  return getPlanInputs_();
}

uci::type::RouteActivityPlanInputsType& RouteActivityPlanMDT::getPlanInputs() {
  return getPlanInputs_();
}

uci::type::RouteActivityPlanMDT& RouteActivityPlanMDT::setPlanInputs(const uci::type::RouteActivityPlanInputsType& accessor) {
  enablePlanInputs();
  if (&accessor != planInputs_Accessor.get()) {
    planInputs_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RouteActivityPlanMDT::hasPlanInputs() const noexcept {
  return static_cast<bool>(planInputs_Accessor);
}

uci::type::RouteActivityPlanInputsType& RouteActivityPlanMDT::enablePlanInputs(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeActivityPlanInputsType : type};
  if ((!planInputs_Accessor) || (planInputs_Accessor->getAccessorType() != requestedType)) {
    planInputs_Accessor = RouteActivityPlanInputsType::create(requestedType);
    if (!planInputs_Accessor) {
      throw uci::base::UCIException("Error in enablePlanInputs(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *planInputs_Accessor;
}

uci::type::RouteActivityPlanMDT& RouteActivityPlanMDT::clearPlanInputs() noexcept {
  planInputs_Accessor.reset();
  return *this;
}

std::unique_ptr<RouteActivityPlanMDT> RouteActivityPlanMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeActivityPlanMDT : type};
  return (requestedType == uci::type::accessorType::routeActivityPlanMDT) ? boost::make_unique<RouteActivityPlanMDT>() : nullptr;
}

/**  */
namespace RouteActivityPlanMDT_Names {

constexpr const char* Extern_Type_Name{"RouteActivityPlanMDT"};
constexpr const char* RouteActivityPlanID_Name{"RouteActivityPlanID"};
constexpr const char* PlanCommandID_Name{"PlanCommandID"};
constexpr const char* Plan_Name{"Plan"};
constexpr const char* ForPlanningUseOnly_Name{"ForPlanningUseOnly"};
constexpr const char* PlanInputs_Name{"PlanInputs"};

} // namespace RouteActivityPlanMDT_Names

void RouteActivityPlanMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::RouteActivityPlanMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RouteActivityPlanMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RouteActivityPlanMDT_Names::RouteActivityPlanID_Name) {
      RouteActivityPlanID_Type::deserialize(valueType.second, accessor.getRouteActivityPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteActivityPlanMDT_Names::PlanCommandID_Name) {
      RouteActivityPlanCommandID_ChoiceType::deserialize(valueType.second, accessor.enablePlanCommandID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteActivityPlanMDT_Names::Plan_Name) {
      RouteActivityPlanType::deserialize(valueType.second, accessor.getPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteActivityPlanMDT_Names::ForPlanningUseOnly_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setForPlanningUseOnly(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RouteActivityPlanMDT_Names::PlanInputs_Name) {
      RouteActivityPlanInputsType::deserialize(valueType.second, accessor.enablePlanInputs(), nodeName, nsPrefix);
    }
  }
}

std::string RouteActivityPlanMDT::serialize(const uci::type::RouteActivityPlanMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RouteActivityPlanMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RouteActivityPlanMDT_Names::Extern_Type_Name);
  }
  RouteActivityPlanID_Type::serialize(accessor.getRouteActivityPlanID(), node, RouteActivityPlanMDT_Names::RouteActivityPlanID_Name);
  if (accessor.hasPlanCommandID()) {
    RouteActivityPlanCommandID_ChoiceType::serialize(accessor.getPlanCommandID(), node, RouteActivityPlanMDT_Names::PlanCommandID_Name);
  }
  RouteActivityPlanType::serialize(accessor.getPlan(), node, RouteActivityPlanMDT_Names::Plan_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getForPlanningUseOnly(), node, RouteActivityPlanMDT_Names::ForPlanningUseOnly_Name);
  if (accessor.hasPlanInputs()) {
    RouteActivityPlanInputsType::serialize(accessor.getPlanInputs(), node, RouteActivityPlanMDT_Names::PlanInputs_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RouteActivityPlanMDT& RouteActivityPlanMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RouteActivityPlanMDT>().release());
}

uci::type::RouteActivityPlanMDT& RouteActivityPlanMDT::create(const uci::type::RouteActivityPlanMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RouteActivityPlanMDT> newAccessor{boost::make_unique<asb_uci::type::RouteActivityPlanMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RouteActivityPlanMDT::destroy(uci::type::RouteActivityPlanMDT& accessor) {
  delete dynamic_cast<asb_uci::type::RouteActivityPlanMDT*>(&accessor);
}

} // namespace type

} // namespace uci

