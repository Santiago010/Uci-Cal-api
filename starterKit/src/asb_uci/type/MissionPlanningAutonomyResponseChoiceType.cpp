/** @file MissionPlanningAutonomyResponseChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MissionPlanningAutonomyResponseChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EmptyType.h"
#include "asb_uci/type/PlanningAllowedEscalationType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EmptyType.h"
#include "uci/type/MissionPlanningAutonomyResponseChoiceType.h"
#include "uci/type/PlanningAllowedEscalationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MissionPlanningAutonomyResponseChoiceType::MissionPlanningAutonomyResponseChoiceType() = default;

MissionPlanningAutonomyResponseChoiceType::~MissionPlanningAutonomyResponseChoiceType() = default;

void MissionPlanningAutonomyResponseChoiceType::copy(const uci::type::MissionPlanningAutonomyResponseChoiceType& accessor) {
  copyImpl(accessor, false);
}

void MissionPlanningAutonomyResponseChoiceType::copyImpl(const uci::type::MissionPlanningAutonomyResponseChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MissionPlanningAutonomyResponseChoiceType&>(accessor);
    if (accessorImpl.autonomousPlanningAction_Accessor) {
      setAutonomousPlanningAction(*(accessorImpl.autonomousPlanningAction_Accessor));
    } else {
      autonomousPlanningAction_Accessor.reset();
    }
    if (accessorImpl.alertOnly_Accessor) {
      setAlertOnly(*(accessorImpl.alertOnly_Accessor));
    } else {
      alertOnly_Accessor.reset();
    }
  }
}

void MissionPlanningAutonomyResponseChoiceType::reset() noexcept {
  autonomousPlanningAction_Accessor.reset();
  alertOnly_Accessor.reset();
}

uci::type::MissionPlanningAutonomyResponseChoiceType::MissionPlanningAutonomyResponseChoiceTypeChoice MissionPlanningAutonomyResponseChoiceType::getMissionPlanningAutonomyResponseChoiceTypeChoiceOrdinal() const noexcept {
  if (autonomousPlanningAction_Accessor) {
    return MISSIONPLANNINGAUTONOMYRESPONSECHOICETYPE_CHOICE_AUTONOMOUSPLANNINGACTION;
  }
  if (alertOnly_Accessor) {
    return MISSIONPLANNINGAUTONOMYRESPONSECHOICETYPE_CHOICE_ALERTONLY;
  }
  return MISSIONPLANNINGAUTONOMYRESPONSECHOICETYPE_CHOICE_NONE;
}

uci::type::MissionPlanningAutonomyResponseChoiceType& MissionPlanningAutonomyResponseChoiceType::setMissionPlanningAutonomyResponseChoiceTypeChoiceOrdinal(uci::type::MissionPlanningAutonomyResponseChoiceType::MissionPlanningAutonomyResponseChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case MISSIONPLANNINGAUTONOMYRESPONSECHOICETYPE_CHOICE_AUTONOMOUSPLANNINGACTION:
      chooseAutonomousPlanningAction();
      break;
    case MISSIONPLANNINGAUTONOMYRESPONSECHOICETYPE_CHOICE_ALERTONLY:
      chooseAlertOnly("setMissionPlanningAutonomyResponseChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setMissionPlanningAutonomyResponseChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::MissionPlanningAutonomyResponseChoiceType::AutonomousPlanningAction& MissionPlanningAutonomyResponseChoiceType::getAutonomousPlanningAction_() const {
  if (autonomousPlanningAction_Accessor) {
    return *autonomousPlanningAction_Accessor;
  }
  throw uci::base::UCIException("Error in getAutonomousPlanningAction(): Unable to get AutonomousPlanningAction, field not selected");
}

const uci::type::MissionPlanningAutonomyResponseChoiceType::AutonomousPlanningAction& MissionPlanningAutonomyResponseChoiceType::getAutonomousPlanningAction() const {
  return getAutonomousPlanningAction_();
}

uci::type::MissionPlanningAutonomyResponseChoiceType::AutonomousPlanningAction& MissionPlanningAutonomyResponseChoiceType::getAutonomousPlanningAction() {
  return getAutonomousPlanningAction_();
}

uci::type::MissionPlanningAutonomyResponseChoiceType& MissionPlanningAutonomyResponseChoiceType::setAutonomousPlanningAction(const uci::type::MissionPlanningAutonomyResponseChoiceType::AutonomousPlanningAction& accessor) {
  chooseAutonomousPlanningAction();
  if (&accessor != autonomousPlanningAction_Accessor.get()) {
    autonomousPlanningAction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MissionPlanningAutonomyResponseChoiceType::isAutonomousPlanningAction() const noexcept {
  return static_cast<bool>(autonomousPlanningAction_Accessor);
}

uci::type::MissionPlanningAutonomyResponseChoiceType::AutonomousPlanningAction& MissionPlanningAutonomyResponseChoiceType::chooseAutonomousPlanningAction() {
  alertOnly_Accessor.reset();
  if (!autonomousPlanningAction_Accessor) {
    autonomousPlanningAction_Accessor = boost::make_unique<AutonomousPlanningAction>(1, SIZE_MAX);
  }
  return *autonomousPlanningAction_Accessor;
}

uci::type::EmptyType& MissionPlanningAutonomyResponseChoiceType::getAlertOnly_() const {
  if (alertOnly_Accessor) {
    return *alertOnly_Accessor;
  }
  throw uci::base::UCIException("Error in getAlertOnly(): An attempt was made to get an optional field that was not enabled, call hasAlertOnly() to determine if it is safe to call getAlertOnly()");
}

const uci::type::EmptyType& MissionPlanningAutonomyResponseChoiceType::getAlertOnly() const {
  return getAlertOnly_();
}

uci::type::EmptyType& MissionPlanningAutonomyResponseChoiceType::getAlertOnly() {
  return getAlertOnly_();
}

uci::type::MissionPlanningAutonomyResponseChoiceType& MissionPlanningAutonomyResponseChoiceType::setAlertOnly(const uci::type::EmptyType& value) {
  return setAlertOnly(value.c_str());
}

uci::type::MissionPlanningAutonomyResponseChoiceType& MissionPlanningAutonomyResponseChoiceType::setAlertOnly(const std::string& value) {
  return setAlertOnly(value.c_str());
}

uci::type::MissionPlanningAutonomyResponseChoiceType& MissionPlanningAutonomyResponseChoiceType::setAlertOnly(const char * value) {
  chooseAlertOnly().setStringValue(value);
  return *this;
}

bool MissionPlanningAutonomyResponseChoiceType::isAlertOnly() const noexcept {
  return static_cast<bool>(alertOnly_Accessor);
}

uci::type::EmptyType& MissionPlanningAutonomyResponseChoiceType::chooseAlertOnly(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  autonomousPlanningAction_Accessor.reset();
  if (!alertOnly_Accessor) {
    alertOnly_Accessor = EmptyType::create(type);
  }
  return *alertOnly_Accessor;
}

uci::type::EmptyType& MissionPlanningAutonomyResponseChoiceType::chooseAlertOnly(uci::base::accessorType::AccessorType type) {
  return chooseAlertOnly("chooseAlertOnly", type);
}

std::unique_ptr<MissionPlanningAutonomyResponseChoiceType> MissionPlanningAutonomyResponseChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanningAutonomyResponseChoiceType : type};
  return (requestedType == uci::type::accessorType::missionPlanningAutonomyResponseChoiceType) ? boost::make_unique<MissionPlanningAutonomyResponseChoiceType>() : nullptr;
}

/**  */
namespace MissionPlanningAutonomyResponseChoiceType_Names {

constexpr const char* Extern_Type_Name{"MissionPlanningAutonomyResponseChoiceType"};
constexpr const char* AutonomousPlanningAction_Name{"AutonomousPlanningAction"};
constexpr const char* AlertOnly_Name{"AlertOnly"};

} // namespace MissionPlanningAutonomyResponseChoiceType_Names

void MissionPlanningAutonomyResponseChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionPlanningAutonomyResponseChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionPlanningAutonomyResponseChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MissionPlanningAutonomyResponseChoiceType_Names::AutonomousPlanningAction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanningAutonomyResponseChoiceType::AutonomousPlanningAction& boundedList = accessor.chooseAutonomousPlanningAction();
        const uci::type::MissionPlanningAutonomyResponseChoiceType::AutonomousPlanningAction::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PlanningAllowedEscalationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanningAutonomyResponseChoiceType_Names::AlertOnly_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseAlertOnly().setStringValue(*value);
      }
    }
  }
}

std::string MissionPlanningAutonomyResponseChoiceType::serialize(const uci::type::MissionPlanningAutonomyResponseChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MissionPlanningAutonomyResponseChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MissionPlanningAutonomyResponseChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isAutonomousPlanningAction()) {
    {
      const uci::type::MissionPlanningAutonomyResponseChoiceType::AutonomousPlanningAction& boundedList = accessor.getAutonomousPlanningAction();
      for (uci::type::MissionPlanningAutonomyResponseChoiceType::AutonomousPlanningAction::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::PlanningAllowedEscalationType::serialize(boundedList.at(i), node, MissionPlanningAutonomyResponseChoiceType_Names::AutonomousPlanningAction_Name);
      }
    }
  } else if (accessor.isAlertOnly()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getAlertOnly(), node, MissionPlanningAutonomyResponseChoiceType_Names::AlertOnly_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MissionPlanningAutonomyResponseChoiceType& MissionPlanningAutonomyResponseChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MissionPlanningAutonomyResponseChoiceType>().release());
}

uci::type::MissionPlanningAutonomyResponseChoiceType& MissionPlanningAutonomyResponseChoiceType::create(const uci::type::MissionPlanningAutonomyResponseChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MissionPlanningAutonomyResponseChoiceType> newAccessor{boost::make_unique<asb_uci::type::MissionPlanningAutonomyResponseChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MissionPlanningAutonomyResponseChoiceType::destroy(uci::type::MissionPlanningAutonomyResponseChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::MissionPlanningAutonomyResponseChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

