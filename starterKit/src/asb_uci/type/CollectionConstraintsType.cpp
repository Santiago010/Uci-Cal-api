/** @file CollectionConstraintsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CollectionConstraintsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AngleHalfPairType.h"
#include "../../../include/asb_uci/type/AnglePairType.h"
#include "../../../include/asb_uci/type/AngleQuarterPairType.h"
#include "../../../include/asb_uci/type/CollectionPatternEnum.h"
#include "../../../include/asb_uci/type/SlantRangeConstraintsType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleHalfPairType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnglePairType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleQuarterPairType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CollectionConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CollectionPatternEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SlantRangeConstraintsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CollectionConstraintsType::CollectionConstraintsType() = default;

CollectionConstraintsType::~CollectionConstraintsType() = default;

void CollectionConstraintsType::copy(const uci::type::CollectionConstraintsType& accessor) {
  copyImpl(accessor, false);
}

void CollectionConstraintsType::copyImpl(const uci::type::CollectionConstraintsType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::collectionConstraintsType)) {
      const auto& accessorImpl = dynamic_cast<const CollectionConstraintsType&>(accessor);
      if (accessorImpl.mapAngleConstraints_Accessor) {
        setMapAngleConstraints(*(accessorImpl.mapAngleConstraints_Accessor));
      } else {
        mapAngleConstraints_Accessor.reset();
      }
      if (accessorImpl.grazingAngleConstraints_Accessor) {
        setGrazingAngleConstraints(*(accessorImpl.grazingAngleConstraints_Accessor));
      } else {
        grazingAngleConstraints_Accessor.reset();
      }
      if (accessorImpl.lookAngleConstraints_Accessor) {
        setLookAngleConstraints(*(accessorImpl.lookAngleConstraints_Accessor));
      } else {
        lookAngleConstraints_Accessor.reset();
      }
      if (accessorImpl.elevationAngleConstraints_Accessor) {
        setElevationAngleConstraints(*(accessorImpl.elevationAngleConstraints_Accessor));
      } else {
        elevationAngleConstraints_Accessor.reset();
      }
      if (accessorImpl.slantRangeConstraints_Accessor) {
        setSlantRangeConstraints(*(accessorImpl.slantRangeConstraints_Accessor));
      } else {
        slantRangeConstraints_Accessor.reset();
      }
      if (accessorImpl.collectionPattern_Accessor) {
        setCollectionPattern(*(accessorImpl.collectionPattern_Accessor));
      } else {
        collectionPattern_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void CollectionConstraintsType::reset() noexcept {
  mapAngleConstraints_Accessor.reset();
  grazingAngleConstraints_Accessor.reset();
  lookAngleConstraints_Accessor.reset();
  elevationAngleConstraints_Accessor.reset();
  slantRangeConstraints_Accessor.reset();
  collectionPattern_Accessor.reset();
}

uci::type::AngleHalfPairType& CollectionConstraintsType::getMapAngleConstraints_() const {
  if (mapAngleConstraints_Accessor) {
    return *mapAngleConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getMapAngleConstraints(): An attempt was made to get an optional field that was not enabled, call hasMapAngleConstraints() to determine if it is safe to call getMapAngleConstraints()");
}

const uci::type::AngleHalfPairType& CollectionConstraintsType::getMapAngleConstraints() const {
  return getMapAngleConstraints_();
}

uci::type::AngleHalfPairType& CollectionConstraintsType::getMapAngleConstraints() {
  return getMapAngleConstraints_();
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::setMapAngleConstraints(const uci::type::AngleHalfPairType& accessor) {
  enableMapAngleConstraints();
  if (&accessor != mapAngleConstraints_Accessor.get()) {
    mapAngleConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CollectionConstraintsType::hasMapAngleConstraints() const noexcept {
  return static_cast<bool>(mapAngleConstraints_Accessor);
}

uci::type::AngleHalfPairType& CollectionConstraintsType::enableMapAngleConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::angleHalfPairType : type};
  if ((!mapAngleConstraints_Accessor) || (mapAngleConstraints_Accessor->getAccessorType() != requestedType)) {
    mapAngleConstraints_Accessor = AngleHalfPairType::create(requestedType);
    if (!mapAngleConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableMapAngleConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mapAngleConstraints_Accessor;
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::clearMapAngleConstraints() noexcept {
  mapAngleConstraints_Accessor.reset();
  return *this;
}

uci::type::AngleQuarterPairType& CollectionConstraintsType::getGrazingAngleConstraints_() const {
  if (grazingAngleConstraints_Accessor) {
    return *grazingAngleConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getGrazingAngleConstraints(): An attempt was made to get an optional field that was not enabled, call hasGrazingAngleConstraints() to determine if it is safe to call getGrazingAngleConstraints()");
}

const uci::type::AngleQuarterPairType& CollectionConstraintsType::getGrazingAngleConstraints() const {
  return getGrazingAngleConstraints_();
}

uci::type::AngleQuarterPairType& CollectionConstraintsType::getGrazingAngleConstraints() {
  return getGrazingAngleConstraints_();
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::setGrazingAngleConstraints(const uci::type::AngleQuarterPairType& accessor) {
  enableGrazingAngleConstraints();
  if (&accessor != grazingAngleConstraints_Accessor.get()) {
    grazingAngleConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CollectionConstraintsType::hasGrazingAngleConstraints() const noexcept {
  return static_cast<bool>(grazingAngleConstraints_Accessor);
}

uci::type::AngleQuarterPairType& CollectionConstraintsType::enableGrazingAngleConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::angleQuarterPairType : type};
  if ((!grazingAngleConstraints_Accessor) || (grazingAngleConstraints_Accessor->getAccessorType() != requestedType)) {
    grazingAngleConstraints_Accessor = AngleQuarterPairType::create(requestedType);
    if (!grazingAngleConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableGrazingAngleConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *grazingAngleConstraints_Accessor;
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::clearGrazingAngleConstraints() noexcept {
  grazingAngleConstraints_Accessor.reset();
  return *this;
}

uci::type::AnglePairType& CollectionConstraintsType::getLookAngleConstraints_() const {
  if (lookAngleConstraints_Accessor) {
    return *lookAngleConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getLookAngleConstraints(): An attempt was made to get an optional field that was not enabled, call hasLookAngleConstraints() to determine if it is safe to call getLookAngleConstraints()");
}

const uci::type::AnglePairType& CollectionConstraintsType::getLookAngleConstraints() const {
  return getLookAngleConstraints_();
}

uci::type::AnglePairType& CollectionConstraintsType::getLookAngleConstraints() {
  return getLookAngleConstraints_();
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::setLookAngleConstraints(const uci::type::AnglePairType& accessor) {
  enableLookAngleConstraints(accessor.getAccessorType());
  if (&accessor != lookAngleConstraints_Accessor.get()) {
    lookAngleConstraints_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CollectionConstraintsType::hasLookAngleConstraints() const noexcept {
  return static_cast<bool>(lookAngleConstraints_Accessor);
}

uci::type::AnglePairType& CollectionConstraintsType::enableLookAngleConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::anglePairType : type};
  if ((!lookAngleConstraints_Accessor) || (lookAngleConstraints_Accessor->getAccessorType() != requestedType)) {
    lookAngleConstraints_Accessor = AnglePairType::create(requestedType);
    if (!lookAngleConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableLookAngleConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lookAngleConstraints_Accessor;
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::clearLookAngleConstraints() noexcept {
  lookAngleConstraints_Accessor.reset();
  return *this;
}

uci::type::AngleHalfPairType& CollectionConstraintsType::getElevationAngleConstraints_() const {
  if (elevationAngleConstraints_Accessor) {
    return *elevationAngleConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getElevationAngleConstraints(): An attempt was made to get an optional field that was not enabled, call hasElevationAngleConstraints() to determine if it is safe to call getElevationAngleConstraints()");
}

const uci::type::AngleHalfPairType& CollectionConstraintsType::getElevationAngleConstraints() const {
  return getElevationAngleConstraints_();
}

uci::type::AngleHalfPairType& CollectionConstraintsType::getElevationAngleConstraints() {
  return getElevationAngleConstraints_();
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::setElevationAngleConstraints(const uci::type::AngleHalfPairType& accessor) {
  enableElevationAngleConstraints();
  if (&accessor != elevationAngleConstraints_Accessor.get()) {
    elevationAngleConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CollectionConstraintsType::hasElevationAngleConstraints() const noexcept {
  return static_cast<bool>(elevationAngleConstraints_Accessor);
}

uci::type::AngleHalfPairType& CollectionConstraintsType::enableElevationAngleConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::angleHalfPairType : type};
  if ((!elevationAngleConstraints_Accessor) || (elevationAngleConstraints_Accessor->getAccessorType() != requestedType)) {
    elevationAngleConstraints_Accessor = AngleHalfPairType::create(requestedType);
    if (!elevationAngleConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableElevationAngleConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *elevationAngleConstraints_Accessor;
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::clearElevationAngleConstraints() noexcept {
  elevationAngleConstraints_Accessor.reset();
  return *this;
}

uci::type::SlantRangeConstraintsType& CollectionConstraintsType::getSlantRangeConstraints_() const {
  if (slantRangeConstraints_Accessor) {
    return *slantRangeConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getSlantRangeConstraints(): An attempt was made to get an optional field that was not enabled, call hasSlantRangeConstraints() to determine if it is safe to call getSlantRangeConstraints()");
}

const uci::type::SlantRangeConstraintsType& CollectionConstraintsType::getSlantRangeConstraints() const {
  return getSlantRangeConstraints_();
}

uci::type::SlantRangeConstraintsType& CollectionConstraintsType::getSlantRangeConstraints() {
  return getSlantRangeConstraints_();
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::setSlantRangeConstraints(const uci::type::SlantRangeConstraintsType& accessor) {
  enableSlantRangeConstraints();
  if (&accessor != slantRangeConstraints_Accessor.get()) {
    slantRangeConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CollectionConstraintsType::hasSlantRangeConstraints() const noexcept {
  return static_cast<bool>(slantRangeConstraints_Accessor);
}

uci::type::SlantRangeConstraintsType& CollectionConstraintsType::enableSlantRangeConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::slantRangeConstraintsType : type};
  if ((!slantRangeConstraints_Accessor) || (slantRangeConstraints_Accessor->getAccessorType() != requestedType)) {
    slantRangeConstraints_Accessor = SlantRangeConstraintsType::create(requestedType);
    if (!slantRangeConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableSlantRangeConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *slantRangeConstraints_Accessor;
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::clearSlantRangeConstraints() noexcept {
  slantRangeConstraints_Accessor.reset();
  return *this;
}

uci::type::CollectionPatternEnum& CollectionConstraintsType::getCollectionPattern_() const {
  if (collectionPattern_Accessor) {
    return *collectionPattern_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionPattern(): An attempt was made to get an optional field that was not enabled, call hasCollectionPattern() to determine if it is safe to call getCollectionPattern()");
}

const uci::type::CollectionPatternEnum& CollectionConstraintsType::getCollectionPattern() const {
  return getCollectionPattern_();
}

uci::type::CollectionPatternEnum& CollectionConstraintsType::getCollectionPattern() {
  return getCollectionPattern_();
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::setCollectionPattern(const uci::type::CollectionPatternEnum& accessor) {
  enableCollectionPattern();
  if (&accessor != collectionPattern_Accessor.get()) {
    collectionPattern_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::setCollectionPattern(const uci::type::CollectionPatternEnum::EnumerationItem value) {
  enableCollectionPattern().setValue(value);
  return *this;
}

bool CollectionConstraintsType::hasCollectionPattern() const noexcept {
  return static_cast<bool>(collectionPattern_Accessor);
}

uci::type::CollectionPatternEnum& CollectionConstraintsType::enableCollectionPattern(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::collectionPatternEnum : type};
  if ((!collectionPattern_Accessor) || (collectionPattern_Accessor->getAccessorType() != requestedType)) {
    collectionPattern_Accessor = CollectionPatternEnum::create(requestedType);
    if (!collectionPattern_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionPattern(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionPattern_Accessor;
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::clearCollectionPattern() noexcept {
  collectionPattern_Accessor.reset();
  return *this;
}

std::unique_ptr<CollectionConstraintsType> CollectionConstraintsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::collectionConstraintsType : type};
  return std::unique_ptr<CollectionConstraintsType>(dynamic_cast<CollectionConstraintsType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace CollectionConstraintsType_Names {

constexpr const char* Extern_Type_Name{"CollectionConstraintsType"};
constexpr const char* MapAngleConstraints_Name{"MapAngleConstraints"};
constexpr const char* GrazingAngleConstraints_Name{"GrazingAngleConstraints"};
constexpr const char* LookAngleConstraints_Name{"LookAngleConstraints"};
constexpr const char* ElevationAngleConstraints_Name{"ElevationAngleConstraints"};
constexpr const char* SlantRangeConstraints_Name{"SlantRangeConstraints"};
constexpr const char* CollectionPattern_Name{"CollectionPattern"};

} // namespace CollectionConstraintsType_Names

void CollectionConstraintsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CollectionConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CollectionConstraintsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CollectionConstraintsType_Names::MapAngleConstraints_Name) {
      AngleHalfPairType::deserialize(valueType.second, accessor.enableMapAngleConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CollectionConstraintsType_Names::GrazingAngleConstraints_Name) {
      AngleQuarterPairType::deserialize(valueType.second, accessor.enableGrazingAngleConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CollectionConstraintsType_Names::LookAngleConstraints_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableLookAngleConstraints(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CollectionConstraintsType_Names::ElevationAngleConstraints_Name) {
      AngleHalfPairType::deserialize(valueType.second, accessor.enableElevationAngleConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CollectionConstraintsType_Names::SlantRangeConstraints_Name) {
      SlantRangeConstraintsType::deserialize(valueType.second, accessor.enableSlantRangeConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CollectionConstraintsType_Names::CollectionPattern_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCollectionPattern().setValueFromName(*value);
      }
    }
  }
}

std::string CollectionConstraintsType::serialize(const uci::type::CollectionConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CollectionConstraintsType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::collectionConstraintsType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, CollectionConstraintsType_Names::Extern_Type_Name);
    }
    if (accessor.hasMapAngleConstraints()) {
      AngleHalfPairType::serialize(accessor.getMapAngleConstraints(), node, CollectionConstraintsType_Names::MapAngleConstraints_Name);
    }
    if (accessor.hasGrazingAngleConstraints()) {
      AngleQuarterPairType::serialize(accessor.getGrazingAngleConstraints(), node, CollectionConstraintsType_Names::GrazingAngleConstraints_Name);
    }
    if (accessor.hasLookAngleConstraints()) {
      AnglePairType::serialize(accessor.getLookAngleConstraints(), node, CollectionConstraintsType_Names::LookAngleConstraints_Name);
    }
    if (accessor.hasElevationAngleConstraints()) {
      AngleHalfPairType::serialize(accessor.getElevationAngleConstraints(), node, CollectionConstraintsType_Names::ElevationAngleConstraints_Name);
    }
    if (accessor.hasSlantRangeConstraints()) {
      SlantRangeConstraintsType::serialize(accessor.getSlantRangeConstraints(), node, CollectionConstraintsType_Names::SlantRangeConstraints_Name);
    }
    if (accessor.hasCollectionPattern()) {
      CollectionPatternEnum::serialize(accessor.getCollectionPattern(), node, CollectionConstraintsType_Names::CollectionPattern_Name, false);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CollectionConstraintsType& CollectionConstraintsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CollectionConstraintsType>().release());
}

uci::type::CollectionConstraintsType& CollectionConstraintsType::create(const uci::type::CollectionConstraintsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CollectionConstraintsType> newAccessor{boost::make_unique<asb_uci::type::CollectionConstraintsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CollectionConstraintsType::destroy(uci::type::CollectionConstraintsType& accessor) {
  delete dynamic_cast<asb_uci::type::CollectionConstraintsType*>(&accessor);
}

} // namespace type

} // namespace uci

