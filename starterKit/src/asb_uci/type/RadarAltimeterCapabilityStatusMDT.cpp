/** @file RadarAltimeterCapabilityStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RadarAltimeterCapabilityStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityStatusBaseType.h"
#include "asb_uci/type/CapabilityStatusType.h"
#include "asb_uci/type/ElectronicProtectionOptionsEnabledType.h"
#include "asb_uci/type/EmissionBalanceEnum.h"
#include "asb_uci/type/RF_ProfileType.h"
#include "asb_uci/type/RadarAltimeterMessageOutputsEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityStatusType.h"
#include "uci/type/ElectronicProtectionOptionsEnabledType.h"
#include "uci/type/EmissionBalanceEnum.h"
#include "uci/type/RF_ProfileType.h"
#include "uci/type/RadarAltimeterCapabilityStatusMDT.h"
#include "uci/type/RadarAltimeterMessageOutputsEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RadarAltimeterCapabilityStatusMDT::RadarAltimeterCapabilityStatusMDT()
  : capabilityStatus_Accessor{boost::make_unique<CapabilityStatus>(1, SIZE_MAX)},
    rF_Profile_Accessor{boost::make_unique<RF_Profile>(0, SIZE_MAX)},
    messageOutput_Accessor{boost::make_unique<MessageOutput>(0, 2)},
    electronicProtectionOptionsEnabled_Accessor{boost::make_unique<ElectronicProtectionOptionsEnabled>(0, SIZE_MAX)} {
}

RadarAltimeterCapabilityStatusMDT::~RadarAltimeterCapabilityStatusMDT() = default;

void RadarAltimeterCapabilityStatusMDT::copy(const uci::type::RadarAltimeterCapabilityStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void RadarAltimeterCapabilityStatusMDT::copyImpl(const uci::type::RadarAltimeterCapabilityStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CapabilityStatusBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const RadarAltimeterCapabilityStatusMDT&>(accessor);
    setCapabilityStatus(*(accessorImpl.capabilityStatus_Accessor));
    setRF_Profile(*(accessorImpl.rF_Profile_Accessor));
    if (accessorImpl.emissionBalanceState_Accessor) {
      setEmissionBalanceState(*(accessorImpl.emissionBalanceState_Accessor));
    } else {
      emissionBalanceState_Accessor.reset();
    }
    setMessageOutput(*(accessorImpl.messageOutput_Accessor));
    setElectronicProtectionOptionsEnabled(*(accessorImpl.electronicProtectionOptionsEnabled_Accessor));
  }
}

void RadarAltimeterCapabilityStatusMDT::reset() noexcept {
  CapabilityStatusBaseType::reset();
  capabilityStatus_Accessor->reset();
  rF_Profile_Accessor->reset();
  emissionBalanceState_Accessor.reset();
  messageOutput_Accessor->reset();
  electronicProtectionOptionsEnabled_Accessor->reset();
}

const uci::type::RadarAltimeterCapabilityStatusMDT::CapabilityStatus& RadarAltimeterCapabilityStatusMDT::getCapabilityStatus() const {
  return *capabilityStatus_Accessor;
}

uci::type::RadarAltimeterCapabilityStatusMDT::CapabilityStatus& RadarAltimeterCapabilityStatusMDT::getCapabilityStatus() {
  return *capabilityStatus_Accessor;
}

uci::type::RadarAltimeterCapabilityStatusMDT& RadarAltimeterCapabilityStatusMDT::setCapabilityStatus(const uci::type::RadarAltimeterCapabilityStatusMDT::CapabilityStatus& accessor) {
  if (&accessor != capabilityStatus_Accessor.get()) {
    capabilityStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RadarAltimeterCapabilityStatusMDT::RF_Profile& RadarAltimeterCapabilityStatusMDT::getRF_Profile() const {
  return *rF_Profile_Accessor;
}

uci::type::RadarAltimeterCapabilityStatusMDT::RF_Profile& RadarAltimeterCapabilityStatusMDT::getRF_Profile() {
  return *rF_Profile_Accessor;
}

uci::type::RadarAltimeterCapabilityStatusMDT& RadarAltimeterCapabilityStatusMDT::setRF_Profile(const uci::type::RadarAltimeterCapabilityStatusMDT::RF_Profile& accessor) {
  if (&accessor != rF_Profile_Accessor.get()) {
    rF_Profile_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EmissionBalanceEnum& RadarAltimeterCapabilityStatusMDT::getEmissionBalanceState_() const {
  if (emissionBalanceState_Accessor) {
    return *emissionBalanceState_Accessor;
  }
  throw uci::base::UCIException("Error in getEmissionBalanceState(): An attempt was made to get an optional field that was not enabled, call hasEmissionBalanceState() to determine if it is safe to call getEmissionBalanceState()");
}

const uci::type::EmissionBalanceEnum& RadarAltimeterCapabilityStatusMDT::getEmissionBalanceState() const {
  return getEmissionBalanceState_();
}

uci::type::EmissionBalanceEnum& RadarAltimeterCapabilityStatusMDT::getEmissionBalanceState() {
  return getEmissionBalanceState_();
}

uci::type::RadarAltimeterCapabilityStatusMDT& RadarAltimeterCapabilityStatusMDT::setEmissionBalanceState(const uci::type::EmissionBalanceEnum& accessor) {
  enableEmissionBalanceState();
  if (&accessor != emissionBalanceState_Accessor.get()) {
    emissionBalanceState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RadarAltimeterCapabilityStatusMDT& RadarAltimeterCapabilityStatusMDT::setEmissionBalanceState(const uci::type::EmissionBalanceEnum::EnumerationItem value) {
  enableEmissionBalanceState().setValue(value);
  return *this;
}

bool RadarAltimeterCapabilityStatusMDT::hasEmissionBalanceState() const noexcept {
  return static_cast<bool>(emissionBalanceState_Accessor);
}

uci::type::EmissionBalanceEnum& RadarAltimeterCapabilityStatusMDT::enableEmissionBalanceState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emissionBalanceEnum : type};
  if ((!emissionBalanceState_Accessor) || (emissionBalanceState_Accessor->getAccessorType() != requestedType)) {
    emissionBalanceState_Accessor = EmissionBalanceEnum::create(requestedType);
    if (!emissionBalanceState_Accessor) {
      throw uci::base::UCIException("Error in enableEmissionBalanceState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emissionBalanceState_Accessor;
}

uci::type::RadarAltimeterCapabilityStatusMDT& RadarAltimeterCapabilityStatusMDT::clearEmissionBalanceState() noexcept {
  emissionBalanceState_Accessor.reset();
  return *this;
}

const uci::type::RadarAltimeterCapabilityStatusMDT::MessageOutput& RadarAltimeterCapabilityStatusMDT::getMessageOutput() const {
  return *messageOutput_Accessor;
}

uci::type::RadarAltimeterCapabilityStatusMDT::MessageOutput& RadarAltimeterCapabilityStatusMDT::getMessageOutput() {
  return *messageOutput_Accessor;
}

uci::type::RadarAltimeterCapabilityStatusMDT& RadarAltimeterCapabilityStatusMDT::setMessageOutput(const uci::type::RadarAltimeterCapabilityStatusMDT::MessageOutput& accessor) {
  if (&accessor != messageOutput_Accessor.get()) {
    messageOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RadarAltimeterCapabilityStatusMDT::ElectronicProtectionOptionsEnabled& RadarAltimeterCapabilityStatusMDT::getElectronicProtectionOptionsEnabled() const {
  return *electronicProtectionOptionsEnabled_Accessor;
}

uci::type::RadarAltimeterCapabilityStatusMDT::ElectronicProtectionOptionsEnabled& RadarAltimeterCapabilityStatusMDT::getElectronicProtectionOptionsEnabled() {
  return *electronicProtectionOptionsEnabled_Accessor;
}

uci::type::RadarAltimeterCapabilityStatusMDT& RadarAltimeterCapabilityStatusMDT::setElectronicProtectionOptionsEnabled(const uci::type::RadarAltimeterCapabilityStatusMDT::ElectronicProtectionOptionsEnabled& accessor) {
  if (&accessor != electronicProtectionOptionsEnabled_Accessor.get()) {
    electronicProtectionOptionsEnabled_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RadarAltimeterCapabilityStatusMDT> RadarAltimeterCapabilityStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarAltimeterCapabilityStatusMDT : type};
  return (requestedType == uci::type::accessorType::radarAltimeterCapabilityStatusMDT) ? boost::make_unique<RadarAltimeterCapabilityStatusMDT>() : nullptr;
}

/**  */
namespace RadarAltimeterCapabilityStatusMDT_Names {

constexpr const char* Extern_Type_Name{"RadarAltimeterCapabilityStatusMDT"};
constexpr const char* CapabilityStatus_Name{"CapabilityStatus"};
constexpr const char* RF_Profile_Name{"RF_Profile"};
constexpr const char* EmissionBalanceState_Name{"EmissionBalanceState"};
constexpr const char* MessageOutput_Name{"MessageOutput"};
constexpr const char* ElectronicProtectionOptionsEnabled_Name{"ElectronicProtectionOptionsEnabled"};

} // namespace RadarAltimeterCapabilityStatusMDT_Names

void RadarAltimeterCapabilityStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::RadarAltimeterCapabilityStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RadarAltimeterCapabilityStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RadarAltimeterCapabilityStatusMDT_Names::CapabilityStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RadarAltimeterCapabilityStatusMDT::CapabilityStatus& boundedList = accessor.getCapabilityStatus();
        const uci::type::RadarAltimeterCapabilityStatusMDT::CapabilityStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterCapabilityStatusMDT_Names::RF_Profile_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RadarAltimeterCapabilityStatusMDT::RF_Profile& boundedList = accessor.getRF_Profile();
        const uci::type::RadarAltimeterCapabilityStatusMDT::RF_Profile::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RF_ProfileType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterCapabilityStatusMDT_Names::EmissionBalanceState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEmissionBalanceState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterCapabilityStatusMDT_Names::MessageOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RadarAltimeterCapabilityStatusMDT::MessageOutput& boundedList = accessor.getMessageOutput();
        const uci::type::RadarAltimeterCapabilityStatusMDT::MessageOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterCapabilityStatusMDT_Names::ElectronicProtectionOptionsEnabled_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RadarAltimeterCapabilityStatusMDT::ElectronicProtectionOptionsEnabled& boundedList = accessor.getElectronicProtectionOptionsEnabled();
        const uci::type::RadarAltimeterCapabilityStatusMDT::ElectronicProtectionOptionsEnabled::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ElectronicProtectionOptionsEnabledType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  CapabilityStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string RadarAltimeterCapabilityStatusMDT::serialize(const uci::type::RadarAltimeterCapabilityStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RadarAltimeterCapabilityStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RadarAltimeterCapabilityStatusMDT_Names::Extern_Type_Name);
  }
  CapabilityStatusBaseType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::RadarAltimeterCapabilityStatusMDT::CapabilityStatus& boundedList = accessor.getCapabilityStatus();
    for (uci::type::RadarAltimeterCapabilityStatusMDT::CapabilityStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityStatusType::serialize(boundedList.at(i), node, RadarAltimeterCapabilityStatusMDT_Names::CapabilityStatus_Name);
    }
  }
  {
    const uci::type::RadarAltimeterCapabilityStatusMDT::RF_Profile& boundedList = accessor.getRF_Profile();
    for (uci::type::RadarAltimeterCapabilityStatusMDT::RF_Profile::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RF_ProfileType::serialize(boundedList.at(i), node, RadarAltimeterCapabilityStatusMDT_Names::RF_Profile_Name);
    }
  }
  if (accessor.hasEmissionBalanceState()) {
    EmissionBalanceEnum::serialize(accessor.getEmissionBalanceState(), node, RadarAltimeterCapabilityStatusMDT_Names::EmissionBalanceState_Name, false);
  }
  {
    const uci::type::RadarAltimeterCapabilityStatusMDT::MessageOutput& boundedList = accessor.getMessageOutput();
    for (uci::type::RadarAltimeterCapabilityStatusMDT::MessageOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      RadarAltimeterMessageOutputsEnum::serialize(boundedList.at(i), node, RadarAltimeterCapabilityStatusMDT_Names::MessageOutput_Name, false);
    }
  }
  {
    const uci::type::RadarAltimeterCapabilityStatusMDT::ElectronicProtectionOptionsEnabled& boundedList = accessor.getElectronicProtectionOptionsEnabled();
    for (uci::type::RadarAltimeterCapabilityStatusMDT::ElectronicProtectionOptionsEnabled::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ElectronicProtectionOptionsEnabledType::serialize(boundedList.at(i), node, RadarAltimeterCapabilityStatusMDT_Names::ElectronicProtectionOptionsEnabled_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RadarAltimeterCapabilityStatusMDT& RadarAltimeterCapabilityStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RadarAltimeterCapabilityStatusMDT>().release());
}

uci::type::RadarAltimeterCapabilityStatusMDT& RadarAltimeterCapabilityStatusMDT::create(const uci::type::RadarAltimeterCapabilityStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RadarAltimeterCapabilityStatusMDT> newAccessor{boost::make_unique<asb_uci::type::RadarAltimeterCapabilityStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RadarAltimeterCapabilityStatusMDT::destroy(uci::type::RadarAltimeterCapabilityStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::RadarAltimeterCapabilityStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

