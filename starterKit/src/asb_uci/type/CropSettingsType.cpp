/** @file CropSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CropSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/FrameOriginEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CropSettingsType.h"
#include "uci/type/FrameOriginEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CropSettingsType::CropSettingsType() = default;

CropSettingsType::~CropSettingsType() = default;

void CropSettingsType::copy(const uci::type::CropSettingsType& accessor) {
  copyImpl(accessor, false);
}

void CropSettingsType::copyImpl(const uci::type::CropSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CropSettingsType&>(accessor);
    if (accessorImpl.origin_Accessor) {
      setOrigin(*(accessorImpl.origin_Accessor));
    } else {
      origin_Accessor.reset();
    }
    setX_Position(accessorImpl.x_Position_Accessor);
    setY_Position(accessorImpl.y_Position_Accessor);
    setWidth(accessorImpl.width_Accessor);
    setHeight(accessorImpl.height_Accessor);
  }
}

void CropSettingsType::reset() noexcept {
  origin_Accessor.reset();
  x_Position_Accessor = 0;
  y_Position_Accessor = 0;
  width_Accessor = 0;
  height_Accessor = 0;
}

uci::type::FrameOriginEnum& CropSettingsType::getOrigin_() const {
  if (origin_Accessor) {
    return *origin_Accessor;
  }
  throw uci::base::UCIException("Error in getOrigin(): An attempt was made to get an optional field that was not enabled, call hasOrigin() to determine if it is safe to call getOrigin()");
}

const uci::type::FrameOriginEnum& CropSettingsType::getOrigin() const {
  return getOrigin_();
}

uci::type::FrameOriginEnum& CropSettingsType::getOrigin() {
  return getOrigin_();
}

uci::type::CropSettingsType& CropSettingsType::setOrigin(const uci::type::FrameOriginEnum& accessor) {
  enableOrigin();
  if (&accessor != origin_Accessor.get()) {
    origin_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CropSettingsType& CropSettingsType::setOrigin(const uci::type::FrameOriginEnum::EnumerationItem value) {
  enableOrigin().setValue(value);
  return *this;
}

bool CropSettingsType::hasOrigin() const noexcept {
  return static_cast<bool>(origin_Accessor);
}

uci::type::FrameOriginEnum& CropSettingsType::enableOrigin(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frameOriginEnum : type};
  if ((!origin_Accessor) || (origin_Accessor->getAccessorType() != requestedType)) {
    origin_Accessor = FrameOriginEnum::create(requestedType);
    if (!origin_Accessor) {
      throw uci::base::UCIException("Error in enableOrigin(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *origin_Accessor;
}

uci::type::CropSettingsType& CropSettingsType::clearOrigin() noexcept {
  origin_Accessor.reset();
  return *this;
}

xs::UnsignedInt CropSettingsType::getX_Position() const {
  return x_Position_Accessor;
}

uci::type::CropSettingsType& CropSettingsType::setX_Position(xs::UnsignedInt value) {
  x_Position_Accessor = value;
  return *this;
}


xs::UnsignedInt CropSettingsType::getY_Position() const {
  return y_Position_Accessor;
}

uci::type::CropSettingsType& CropSettingsType::setY_Position(xs::UnsignedInt value) {
  y_Position_Accessor = value;
  return *this;
}


xs::UnsignedInt CropSettingsType::getWidth() const {
  return width_Accessor;
}

uci::type::CropSettingsType& CropSettingsType::setWidth(xs::UnsignedInt value) {
  width_Accessor = value;
  return *this;
}


xs::UnsignedInt CropSettingsType::getHeight() const {
  return height_Accessor;
}

uci::type::CropSettingsType& CropSettingsType::setHeight(xs::UnsignedInt value) {
  height_Accessor = value;
  return *this;
}


std::unique_ptr<CropSettingsType> CropSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cropSettingsType : type};
  return (requestedType == uci::type::accessorType::cropSettingsType) ? boost::make_unique<CropSettingsType>() : nullptr;
}

/**  */
namespace CropSettingsType_Names {

constexpr const char* Extern_Type_Name{"CropSettingsType"};
constexpr const char* Origin_Name{"Origin"};
constexpr const char* X_Position_Name{"X_Position"};
constexpr const char* Y_Position_Name{"Y_Position"};
constexpr const char* Width_Name{"Width"};
constexpr const char* Height_Name{"Height"};

} // namespace CropSettingsType_Names

void CropSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CropSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CropSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CropSettingsType_Names::Origin_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableOrigin().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CropSettingsType_Names::X_Position_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setX_Position(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CropSettingsType_Names::Y_Position_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setY_Position(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CropSettingsType_Names::Width_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWidth(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CropSettingsType_Names::Height_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHeight(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string CropSettingsType::serialize(const uci::type::CropSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CropSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CropSettingsType_Names::Extern_Type_Name);
  }
  if (accessor.hasOrigin()) {
    FrameOriginEnum::serialize(accessor.getOrigin(), node, CropSettingsType_Names::Origin_Name, false);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getX_Position(), node, CropSettingsType_Names::X_Position_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getY_Position(), node, CropSettingsType_Names::Y_Position_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getWidth(), node, CropSettingsType_Names::Width_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getHeight(), node, CropSettingsType_Names::Height_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CropSettingsType& CropSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CropSettingsType>().release());
}

uci::type::CropSettingsType& CropSettingsType::create(const uci::type::CropSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CropSettingsType> newAccessor{boost::make_unique<asb_uci::type::CropSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CropSettingsType::destroy(uci::type::CropSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::CropSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

