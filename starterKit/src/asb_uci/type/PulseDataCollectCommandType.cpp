/** @file PulseDataCollectCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PulseDataCollectCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CollectionFrequencyType.h"
#include "asb_uci/type/FrequencyRangeType.h"
#include "asb_uci/type/ModulationEnum.h"
#include "asb_uci/type/SignalTypeEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CollectionFrequencyType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DurationType.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/ModulationEnum.h"
#include "uci/type/PulseDataCollectCommandType.h"
#include "uci/type/SignalTypeEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PulseDataCollectCommandType::PulseDataCollectCommandType()
  : collectionFrequency_Accessor{boost::make_unique<CollectionFrequencyType>()} {
}

PulseDataCollectCommandType::~PulseDataCollectCommandType() = default;

void PulseDataCollectCommandType::copy(const uci::type::PulseDataCollectCommandType& accessor) {
  copyImpl(accessor, false);
}

void PulseDataCollectCommandType::copyImpl(const uci::type::PulseDataCollectCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PulseDataCollectCommandType&>(accessor);
    setCollectionFrequency(*(accessorImpl.collectionFrequency_Accessor));
    setStartTime(accessorImpl.startTime_Accessor);
    setDwellDuration(accessorImpl.dwellDuration_Accessor);
    if (accessorImpl.hasDwells()) {
      setDwells(accessorImpl.getDwells());
    } else {
      clearDwells();
    }
    if (accessorImpl.hasRepetitionInterval()) {
      setRepetitionInterval(accessorImpl.getRepetitionInterval());
    } else {
      clearRepetitionInterval();
    }
    if (accessorImpl.hasPulseWidth()) {
      setPulseWidth(accessorImpl.getPulseWidth());
    } else {
      clearPulseWidth();
    }
    if (accessorImpl.hasPRI()) {
      setPRI(accessorImpl.getPRI());
    } else {
      clearPRI();
    }
    if (accessorImpl.signalBandwidth_Accessor) {
      setSignalBandwidth(*(accessorImpl.signalBandwidth_Accessor));
    } else {
      signalBandwidth_Accessor.reset();
    }
    if (accessorImpl.modulation_Accessor) {
      setModulation(*(accessorImpl.modulation_Accessor));
    } else {
      modulation_Accessor.reset();
    }
    if (accessorImpl.dataCollectType_Accessor) {
      setDataCollectType(*(accessorImpl.dataCollectType_Accessor));
    } else {
      dataCollectType_Accessor.reset();
    }
    if (accessorImpl.hasSampleRate()) {
      setSampleRate(accessorImpl.getSampleRate());
    } else {
      clearSampleRate();
    }
    if (accessorImpl.hasFFT_PointsPerSample()) {
      setFFT_PointsPerSample(accessorImpl.getFFT_PointsPerSample());
    } else {
      clearFFT_PointsPerSample();
    }
  }
}

void PulseDataCollectCommandType::reset() noexcept {
  collectionFrequency_Accessor->reset();
  startTime_Accessor = 0;
  dwellDuration_Accessor = 0;
  clearDwells();
  clearRepetitionInterval();
  clearPulseWidth();
  clearPRI();
  signalBandwidth_Accessor.reset();
  modulation_Accessor.reset();
  dataCollectType_Accessor.reset();
  clearSampleRate();
  clearFFT_PointsPerSample();
}

const uci::type::CollectionFrequencyType& PulseDataCollectCommandType::getCollectionFrequency() const {
  return *collectionFrequency_Accessor;
}

uci::type::CollectionFrequencyType& PulseDataCollectCommandType::getCollectionFrequency() {
  return *collectionFrequency_Accessor;
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setCollectionFrequency(const uci::type::CollectionFrequencyType& accessor) {
  if (&accessor != collectionFrequency_Accessor.get()) {
    collectionFrequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue PulseDataCollectCommandType::getStartTime() const {
  return startTime_Accessor;
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setStartTime(uci::type::DateTimeTypeValue value) {
  startTime_Accessor = value;
  return *this;
}


uci::type::DurationTypeValue PulseDataCollectCommandType::getDwellDuration() const {
  return dwellDuration_Accessor;
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setDwellDuration(uci::type::DurationTypeValue value) {
  dwellDuration_Accessor = value;
  return *this;
}


xs::UnsignedInt PulseDataCollectCommandType::getDwells() const {
  if (dwells_Accessor) {
    return *dwells_Accessor;
  }
  throw uci::base::UCIException("Error in getDwells(): An attempt was made to get an optional field that was not enabled, call hasDwells() to determine if it is safe to call getDwells()");
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setDwells(xs::UnsignedInt value) {
  dwells_Accessor = value;
  return *this;
}

bool PulseDataCollectCommandType::hasDwells() const noexcept {
  return dwells_Accessor.has_value();
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::clearDwells() noexcept {
  dwells_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue PulseDataCollectCommandType::getRepetitionInterval() const {
  if (repetitionInterval_Accessor) {
    return *repetitionInterval_Accessor;
  }
  throw uci::base::UCIException("Error in getRepetitionInterval(): An attempt was made to get an optional field that was not enabled, call hasRepetitionInterval() to determine if it is safe to call getRepetitionInterval()");
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setRepetitionInterval(uci::type::DurationTypeValue value) {
  repetitionInterval_Accessor = value;
  return *this;
}

bool PulseDataCollectCommandType::hasRepetitionInterval() const noexcept {
  return repetitionInterval_Accessor.has_value();
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::clearRepetitionInterval() noexcept {
  repetitionInterval_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue PulseDataCollectCommandType::getPulseWidth() const {
  if (pulseWidth_Accessor) {
    return *pulseWidth_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidth(): An attempt was made to get an optional field that was not enabled, call hasPulseWidth() to determine if it is safe to call getPulseWidth()");
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setPulseWidth(uci::type::DurationTypeValue value) {
  pulseWidth_Accessor = value;
  return *this;
}

bool PulseDataCollectCommandType::hasPulseWidth() const noexcept {
  return pulseWidth_Accessor.has_value();
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::clearPulseWidth() noexcept {
  pulseWidth_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue PulseDataCollectCommandType::getPRI() const {
  if (pRI_Accessor) {
    return *pRI_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI(): An attempt was made to get an optional field that was not enabled, call hasPRI() to determine if it is safe to call getPRI()");
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setPRI(uci::type::DurationTypeValue value) {
  pRI_Accessor = value;
  return *this;
}

bool PulseDataCollectCommandType::hasPRI() const noexcept {
  return pRI_Accessor.has_value();
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::clearPRI() noexcept {
  pRI_Accessor.reset();
  return *this;
}

uci::type::FrequencyRangeType& PulseDataCollectCommandType::getSignalBandwidth_() const {
  if (signalBandwidth_Accessor) {
    return *signalBandwidth_Accessor;
  }
  throw uci::base::UCIException("Error in getSignalBandwidth(): An attempt was made to get an optional field that was not enabled, call hasSignalBandwidth() to determine if it is safe to call getSignalBandwidth()");
}

const uci::type::FrequencyRangeType& PulseDataCollectCommandType::getSignalBandwidth() const {
  return getSignalBandwidth_();
}

uci::type::FrequencyRangeType& PulseDataCollectCommandType::getSignalBandwidth() {
  return getSignalBandwidth_();
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setSignalBandwidth(const uci::type::FrequencyRangeType& accessor) {
  enableSignalBandwidth();
  if (&accessor != signalBandwidth_Accessor.get()) {
    signalBandwidth_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PulseDataCollectCommandType::hasSignalBandwidth() const noexcept {
  return static_cast<bool>(signalBandwidth_Accessor);
}

uci::type::FrequencyRangeType& PulseDataCollectCommandType::enableSignalBandwidth(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyRangeType : type};
  if ((!signalBandwidth_Accessor) || (signalBandwidth_Accessor->getAccessorType() != requestedType)) {
    signalBandwidth_Accessor = FrequencyRangeType::create(requestedType);
    if (!signalBandwidth_Accessor) {
      throw uci::base::UCIException("Error in enableSignalBandwidth(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *signalBandwidth_Accessor;
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::clearSignalBandwidth() noexcept {
  signalBandwidth_Accessor.reset();
  return *this;
}

uci::type::ModulationEnum& PulseDataCollectCommandType::getModulation_() const {
  if (modulation_Accessor) {
    return *modulation_Accessor;
  }
  throw uci::base::UCIException("Error in getModulation(): An attempt was made to get an optional field that was not enabled, call hasModulation() to determine if it is safe to call getModulation()");
}

const uci::type::ModulationEnum& PulseDataCollectCommandType::getModulation() const {
  return getModulation_();
}

uci::type::ModulationEnum& PulseDataCollectCommandType::getModulation() {
  return getModulation_();
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setModulation(const uci::type::ModulationEnum& accessor) {
  enableModulation();
  if (&accessor != modulation_Accessor.get()) {
    modulation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setModulation(const uci::type::ModulationEnum::EnumerationItem value) {
  enableModulation().setValue(value);
  return *this;
}

bool PulseDataCollectCommandType::hasModulation() const noexcept {
  return static_cast<bool>(modulation_Accessor);
}

uci::type::ModulationEnum& PulseDataCollectCommandType::enableModulation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::modulationEnum : type};
  if ((!modulation_Accessor) || (modulation_Accessor->getAccessorType() != requestedType)) {
    modulation_Accessor = ModulationEnum::create(requestedType);
    if (!modulation_Accessor) {
      throw uci::base::UCIException("Error in enableModulation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modulation_Accessor;
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::clearModulation() noexcept {
  modulation_Accessor.reset();
  return *this;
}

uci::type::SignalTypeEnum& PulseDataCollectCommandType::getDataCollectType_() const {
  if (dataCollectType_Accessor) {
    return *dataCollectType_Accessor;
  }
  throw uci::base::UCIException("Error in getDataCollectType(): An attempt was made to get an optional field that was not enabled, call hasDataCollectType() to determine if it is safe to call getDataCollectType()");
}

const uci::type::SignalTypeEnum& PulseDataCollectCommandType::getDataCollectType() const {
  return getDataCollectType_();
}

uci::type::SignalTypeEnum& PulseDataCollectCommandType::getDataCollectType() {
  return getDataCollectType_();
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setDataCollectType(const uci::type::SignalTypeEnum& accessor) {
  enableDataCollectType();
  if (&accessor != dataCollectType_Accessor.get()) {
    dataCollectType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setDataCollectType(const uci::type::SignalTypeEnum::EnumerationItem value) {
  enableDataCollectType().setValue(value);
  return *this;
}

bool PulseDataCollectCommandType::hasDataCollectType() const noexcept {
  return static_cast<bool>(dataCollectType_Accessor);
}

uci::type::SignalTypeEnum& PulseDataCollectCommandType::enableDataCollectType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalTypeEnum : type};
  if ((!dataCollectType_Accessor) || (dataCollectType_Accessor->getAccessorType() != requestedType)) {
    dataCollectType_Accessor = SignalTypeEnum::create(requestedType);
    if (!dataCollectType_Accessor) {
      throw uci::base::UCIException("Error in enableDataCollectType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dataCollectType_Accessor;
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::clearDataCollectType() noexcept {
  dataCollectType_Accessor.reset();
  return *this;
}

xs::Float PulseDataCollectCommandType::getSampleRate() const {
  if (sampleRate_Accessor) {
    return *sampleRate_Accessor;
  }
  throw uci::base::UCIException("Error in getSampleRate(): An attempt was made to get an optional field that was not enabled, call hasSampleRate() to determine if it is safe to call getSampleRate()");
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setSampleRate(xs::Float value) {
  sampleRate_Accessor = value;
  return *this;
}

bool PulseDataCollectCommandType::hasSampleRate() const noexcept {
  return sampleRate_Accessor.has_value();
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::clearSampleRate() noexcept {
  sampleRate_Accessor.reset();
  return *this;
}

xs::Int PulseDataCollectCommandType::getFFT_PointsPerSample() const {
  if (fFT_PointsPerSample_Accessor) {
    return *fFT_PointsPerSample_Accessor;
  }
  throw uci::base::UCIException("Error in getFFT_PointsPerSample(): An attempt was made to get an optional field that was not enabled, call hasFFT_PointsPerSample() to determine if it is safe to call getFFT_PointsPerSample()");
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::setFFT_PointsPerSample(xs::Int value) {
  fFT_PointsPerSample_Accessor = value;
  return *this;
}

bool PulseDataCollectCommandType::hasFFT_PointsPerSample() const noexcept {
  return fFT_PointsPerSample_Accessor.has_value();
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::clearFFT_PointsPerSample() noexcept {
  fFT_PointsPerSample_Accessor.reset();
  return *this;
}

std::unique_ptr<PulseDataCollectCommandType> PulseDataCollectCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pulseDataCollectCommandType : type};
  return (requestedType == uci::type::accessorType::pulseDataCollectCommandType) ? boost::make_unique<PulseDataCollectCommandType>() : nullptr;
}

/**  */
namespace PulseDataCollectCommandType_Names {

constexpr const char* Extern_Type_Name{"PulseDataCollectCommandType"};
constexpr const char* CollectionFrequency_Name{"CollectionFrequency"};
constexpr const char* StartTime_Name{"StartTime"};
constexpr const char* DwellDuration_Name{"DwellDuration"};
constexpr const char* Dwells_Name{"Dwells"};
constexpr const char* RepetitionInterval_Name{"RepetitionInterval"};
constexpr const char* PulseWidth_Name{"PulseWidth"};
constexpr const char* PRI_Name{"PRI"};
constexpr const char* SignalBandwidth_Name{"SignalBandwidth"};
constexpr const char* Modulation_Name{"Modulation"};
constexpr const char* DataCollectType_Name{"DataCollectType"};
constexpr const char* SampleRate_Name{"SampleRate"};
constexpr const char* FFT_PointsPerSample_Name{"FFT_PointsPerSample"};

} // namespace PulseDataCollectCommandType_Names

void PulseDataCollectCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PulseDataCollectCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PulseDataCollectCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PulseDataCollectCommandType_Names::CollectionFrequency_Name) {
      CollectionFrequencyType::deserialize(valueType.second, accessor.getCollectionFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PulseDataCollectCommandType_Names::StartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStartTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + PulseDataCollectCommandType_Names::DwellDuration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDwellDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PulseDataCollectCommandType_Names::Dwells_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDwells(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PulseDataCollectCommandType_Names::RepetitionInterval_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRepetitionInterval(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PulseDataCollectCommandType_Names::PulseWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidth(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PulseDataCollectCommandType_Names::PRI_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PulseDataCollectCommandType_Names::SignalBandwidth_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableSignalBandwidth(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PulseDataCollectCommandType_Names::Modulation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableModulation().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PulseDataCollectCommandType_Names::DataCollectType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableDataCollectType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PulseDataCollectCommandType_Names::SampleRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSampleRate(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + PulseDataCollectCommandType_Names::FFT_PointsPerSample_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFFT_PointsPerSample(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    }
  }
}

std::string PulseDataCollectCommandType::serialize(const uci::type::PulseDataCollectCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PulseDataCollectCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PulseDataCollectCommandType_Names::Extern_Type_Name);
  }
  CollectionFrequencyType::serialize(accessor.getCollectionFrequency(), node, PulseDataCollectCommandType_Names::CollectionFrequency_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getStartTime(), node, PulseDataCollectCommandType_Names::StartTime_Name);
  asb_uci::util::SerializationHelpers::serializeDuration(accessor.getDwellDuration(), node, PulseDataCollectCommandType_Names::DwellDuration_Name);
  if (accessor.hasDwells()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getDwells(), node, PulseDataCollectCommandType_Names::Dwells_Name);
  }
  if (accessor.hasRepetitionInterval()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getRepetitionInterval(), node, PulseDataCollectCommandType_Names::RepetitionInterval_Name);
  }
  if (accessor.hasPulseWidth()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidth(), node, PulseDataCollectCommandType_Names::PulseWidth_Name);
  }
  if (accessor.hasPRI()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI(), node, PulseDataCollectCommandType_Names::PRI_Name);
  }
  if (accessor.hasSignalBandwidth()) {
    FrequencyRangeType::serialize(accessor.getSignalBandwidth(), node, PulseDataCollectCommandType_Names::SignalBandwidth_Name);
  }
  if (accessor.hasModulation()) {
    ModulationEnum::serialize(accessor.getModulation(), node, PulseDataCollectCommandType_Names::Modulation_Name, false);
  }
  if (accessor.hasDataCollectType()) {
    SignalTypeEnum::serialize(accessor.getDataCollectType(), node, PulseDataCollectCommandType_Names::DataCollectType_Name, false);
  }
  if (accessor.hasSampleRate()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getSampleRate(), node, PulseDataCollectCommandType_Names::SampleRate_Name);
  }
  if (accessor.hasFFT_PointsPerSample()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getFFT_PointsPerSample(), node, PulseDataCollectCommandType_Names::FFT_PointsPerSample_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PulseDataCollectCommandType>().release());
}

uci::type::PulseDataCollectCommandType& PulseDataCollectCommandType::create(const uci::type::PulseDataCollectCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PulseDataCollectCommandType> newAccessor{boost::make_unique<asb_uci::type::PulseDataCollectCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PulseDataCollectCommandType::destroy(uci::type::PulseDataCollectCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::PulseDataCollectCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

