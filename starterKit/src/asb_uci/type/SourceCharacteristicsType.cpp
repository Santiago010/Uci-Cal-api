/** @file SourceCharacteristicsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SourceCharacteristicsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DoubleNonNegativeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IrradianceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MilliwattPowerRatioType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SourceCharacteristicsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SourceCharacteristicsType::SourceCharacteristicsType() = default;

SourceCharacteristicsType::~SourceCharacteristicsType() = default;

void SourceCharacteristicsType::copy(const uci::type::SourceCharacteristicsType& accessor) {
  copyImpl(accessor, false);
}

void SourceCharacteristicsType::copyImpl(const uci::type::SourceCharacteristicsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SourceCharacteristicsType&>(accessor);
    if (accessorImpl.hasTargetRCS()) {
      setTargetRCS(accessorImpl.getTargetRCS());
    } else {
      clearTargetRCS();
    }
    if (accessorImpl.hasTargetIrradiance()) {
      setTargetIrradiance(accessorImpl.getTargetIrradiance());
    } else {
      clearTargetIrradiance();
    }
    if (accessorImpl.hasEmitterSensitivity()) {
      setEmitterSensitivity(accessorImpl.getEmitterSensitivity());
    } else {
      clearEmitterSensitivity();
    }
    if (accessorImpl.hasDetectionRange()) {
      setDetectionRange(accessorImpl.getDetectionRange());
    } else {
      clearDetectionRange();
    }
    if (accessorImpl.hasProbabilityOfDetection()) {
      setProbabilityOfDetection(accessorImpl.getProbabilityOfDetection());
    } else {
      clearProbabilityOfDetection();
    }
    if (accessorImpl.hasProbabilityOfFalseAlarm()) {
      setProbabilityOfFalseAlarm(accessorImpl.getProbabilityOfFalseAlarm());
    } else {
      clearProbabilityOfFalseAlarm();
    }
  }
}

void SourceCharacteristicsType::reset() noexcept {
  clearTargetRCS();
  clearTargetIrradiance();
  clearEmitterSensitivity();
  clearDetectionRange();
  clearProbabilityOfDetection();
  clearProbabilityOfFalseAlarm();
}

uci::type::DoubleNonNegativeTypeValue SourceCharacteristicsType::getTargetRCS() const {
  if (targetRCS_Accessor) {
    return *targetRCS_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetRCS(): An attempt was made to get an optional field that was not enabled, call hasTargetRCS() to determine if it is safe to call getTargetRCS()");
}

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::setTargetRCS(uci::type::DoubleNonNegativeTypeValue value) {
  targetRCS_Accessor = value;
  return *this;
}

bool SourceCharacteristicsType::hasTargetRCS() const noexcept {
  return targetRCS_Accessor.has_value();
}

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::clearTargetRCS() noexcept {
  targetRCS_Accessor.reset();
  return *this;
}

uci::type::IrradianceTypeValue SourceCharacteristicsType::getTargetIrradiance() const {
  if (targetIrradiance_Accessor) {
    return *targetIrradiance_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetIrradiance(): An attempt was made to get an optional field that was not enabled, call hasTargetIrradiance() to determine if it is safe to call getTargetIrradiance()");
}

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::setTargetIrradiance(uci::type::IrradianceTypeValue value) {
  targetIrradiance_Accessor = value;
  return *this;
}

bool SourceCharacteristicsType::hasTargetIrradiance() const noexcept {
  return targetIrradiance_Accessor.has_value();
}

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::clearTargetIrradiance() noexcept {
  targetIrradiance_Accessor.reset();
  return *this;
}

uci::type::MilliwattPowerRatioTypeValue SourceCharacteristicsType::getEmitterSensitivity() const {
  if (emitterSensitivity_Accessor) {
    return *emitterSensitivity_Accessor;
  }
  throw uci::base::UCIException("Error in getEmitterSensitivity(): An attempt was made to get an optional field that was not enabled, call hasEmitterSensitivity() to determine if it is safe to call getEmitterSensitivity()");
}

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::setEmitterSensitivity(uci::type::MilliwattPowerRatioTypeValue value) {
  emitterSensitivity_Accessor = value;
  return *this;
}

bool SourceCharacteristicsType::hasEmitterSensitivity() const noexcept {
  return emitterSensitivity_Accessor.has_value();
}

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::clearEmitterSensitivity() noexcept {
  emitterSensitivity_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue SourceCharacteristicsType::getDetectionRange() const {
  if (detectionRange_Accessor) {
    return *detectionRange_Accessor;
  }
  throw uci::base::UCIException("Error in getDetectionRange(): An attempt was made to get an optional field that was not enabled, call hasDetectionRange() to determine if it is safe to call getDetectionRange()");
}

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::setDetectionRange(uci::type::DistanceTypeValue value) {
  detectionRange_Accessor = value;
  return *this;
}

bool SourceCharacteristicsType::hasDetectionRange() const noexcept {
  return detectionRange_Accessor.has_value();
}

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::clearDetectionRange() noexcept {
  detectionRange_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue SourceCharacteristicsType::getProbabilityOfDetection() const {
  if (probabilityOfDetection_Accessor) {
    return *probabilityOfDetection_Accessor;
  }
  throw uci::base::UCIException("Error in getProbabilityOfDetection(): An attempt was made to get an optional field that was not enabled, call hasProbabilityOfDetection() to determine if it is safe to call getProbabilityOfDetection()");
}

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::setProbabilityOfDetection(uci::type::PercentTypeValue value) {
  probabilityOfDetection_Accessor = value;
  return *this;
}

bool SourceCharacteristicsType::hasProbabilityOfDetection() const noexcept {
  return probabilityOfDetection_Accessor.has_value();
}

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::clearProbabilityOfDetection() noexcept {
  probabilityOfDetection_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue SourceCharacteristicsType::getProbabilityOfFalseAlarm() const {
  if (probabilityOfFalseAlarm_Accessor) {
    return *probabilityOfFalseAlarm_Accessor;
  }
  throw uci::base::UCIException("Error in getProbabilityOfFalseAlarm(): An attempt was made to get an optional field that was not enabled, call hasProbabilityOfFalseAlarm() to determine if it is safe to call getProbabilityOfFalseAlarm()");
}

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::setProbabilityOfFalseAlarm(uci::type::PercentTypeValue value) {
  probabilityOfFalseAlarm_Accessor = value;
  return *this;
}

bool SourceCharacteristicsType::hasProbabilityOfFalseAlarm() const noexcept {
  return probabilityOfFalseAlarm_Accessor.has_value();
}

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::clearProbabilityOfFalseAlarm() noexcept {
  probabilityOfFalseAlarm_Accessor.reset();
  return *this;
}

std::unique_ptr<SourceCharacteristicsType> SourceCharacteristicsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceCharacteristicsType : type};
  return (requestedType == uci::type::accessorType::sourceCharacteristicsType) ? boost::make_unique<SourceCharacteristicsType>() : nullptr;
}

/**  */
namespace SourceCharacteristicsType_Names {

constexpr const char* Extern_Type_Name{"SourceCharacteristicsType"};
constexpr const char* TargetRCS_Name{"TargetRCS"};
constexpr const char* TargetIrradiance_Name{"TargetIrradiance"};
constexpr const char* EmitterSensitivity_Name{"EmitterSensitivity"};
constexpr const char* DetectionRange_Name{"DetectionRange"};
constexpr const char* ProbabilityOfDetection_Name{"ProbabilityOfDetection"};
constexpr const char* ProbabilityOfFalseAlarm_Name{"ProbabilityOfFalseAlarm"};

} // namespace SourceCharacteristicsType_Names

void SourceCharacteristicsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SourceCharacteristicsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SourceCharacteristicsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SourceCharacteristicsType_Names::TargetRCS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetRCS(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceCharacteristicsType_Names::TargetIrradiance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetIrradiance(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceCharacteristicsType_Names::EmitterSensitivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEmitterSensitivity(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceCharacteristicsType_Names::DetectionRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDetectionRange(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceCharacteristicsType_Names::ProbabilityOfDetection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProbabilityOfDetection(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceCharacteristicsType_Names::ProbabilityOfFalseAlarm_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProbabilityOfFalseAlarm(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string SourceCharacteristicsType::serialize(const uci::type::SourceCharacteristicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SourceCharacteristicsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SourceCharacteristicsType_Names::Extern_Type_Name);
  }
  if (accessor.hasTargetRCS()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTargetRCS(), node, SourceCharacteristicsType_Names::TargetRCS_Name);
  }
  if (accessor.hasTargetIrradiance()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTargetIrradiance(), node, SourceCharacteristicsType_Names::TargetIrradiance_Name);
  }
  if (accessor.hasEmitterSensitivity()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEmitterSensitivity(), node, SourceCharacteristicsType_Names::EmitterSensitivity_Name);
  }
  if (accessor.hasDetectionRange()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDetectionRange(), node, SourceCharacteristicsType_Names::DetectionRange_Name);
  }
  if (accessor.hasProbabilityOfDetection()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getProbabilityOfDetection(), node, SourceCharacteristicsType_Names::ProbabilityOfDetection_Name);
  }
  if (accessor.hasProbabilityOfFalseAlarm()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getProbabilityOfFalseAlarm(), node, SourceCharacteristicsType_Names::ProbabilityOfFalseAlarm_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SourceCharacteristicsType>().release());
}

uci::type::SourceCharacteristicsType& SourceCharacteristicsType::create(const uci::type::SourceCharacteristicsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SourceCharacteristicsType> newAccessor{boost::make_unique<asb_uci::type::SourceCharacteristicsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SourceCharacteristicsType::destroy(uci::type::SourceCharacteristicsType& accessor) {
  delete dynamic_cast<asb_uci::type::SourceCharacteristicsType*>(&accessor);
}

} // namespace type

} // namespace uci

