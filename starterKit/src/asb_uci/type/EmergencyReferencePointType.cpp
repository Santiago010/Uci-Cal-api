/** @file EmergencyReferencePointType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EmergencyReferencePointType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/OpPointReferenceType.h"
#include "../../../include/asb_uci/type/StrengthRangeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmergencyReferencePointType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StrengthRangeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EmergencyReferencePointType::EmergencyReferencePointType()
  : reference_Accessor{boost::make_unique<OpPointReferenceType>()} {
}

EmergencyReferencePointType::~EmergencyReferencePointType() = default;

void EmergencyReferencePointType::copy(const uci::type::EmergencyReferencePointType& accessor) {
  copyImpl(accessor, false);
}

void EmergencyReferencePointType::copyImpl(const uci::type::EmergencyReferencePointType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EmergencyReferencePointType&>(accessor);
    setReference(*(accessorImpl.reference_Accessor));
    if (accessorImpl.personnelCount_Accessor) {
      setPersonnelCount(*(accessorImpl.personnelCount_Accessor));
    } else {
      personnelCount_Accessor.reset();
    }
    if (accessorImpl.lastKnownPosition_Accessor) {
      setLastKnownPosition(*(accessorImpl.lastKnownPosition_Accessor));
    } else {
      lastKnownPosition_Accessor.reset();
    }
  }
}

void EmergencyReferencePointType::reset() noexcept {
  reference_Accessor->reset();
  personnelCount_Accessor.reset();
  lastKnownPosition_Accessor.reset();
}

const uci::type::OpPointReferenceType& EmergencyReferencePointType::getReference() const {
  return *reference_Accessor;
}

uci::type::OpPointReferenceType& EmergencyReferencePointType::getReference() {
  return *reference_Accessor;
}

uci::type::EmergencyReferencePointType& EmergencyReferencePointType::setReference(const uci::type::OpPointReferenceType& accessor) {
  if (&accessor != reference_Accessor.get()) {
    reference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::StrengthRangeType& EmergencyReferencePointType::getPersonnelCount_() const {
  if (personnelCount_Accessor) {
    return *personnelCount_Accessor;
  }
  throw uci::base::UCIException("Error in getPersonnelCount(): An attempt was made to get an optional field that was not enabled, call hasPersonnelCount() to determine if it is safe to call getPersonnelCount()");
}

const uci::type::StrengthRangeType& EmergencyReferencePointType::getPersonnelCount() const {
  return getPersonnelCount_();
}

uci::type::StrengthRangeType& EmergencyReferencePointType::getPersonnelCount() {
  return getPersonnelCount_();
}

uci::type::EmergencyReferencePointType& EmergencyReferencePointType::setPersonnelCount(const uci::type::StrengthRangeType& accessor) {
  enablePersonnelCount();
  if (&accessor != personnelCount_Accessor.get()) {
    personnelCount_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EmergencyReferencePointType::hasPersonnelCount() const noexcept {
  return static_cast<bool>(personnelCount_Accessor);
}

uci::type::StrengthRangeType& EmergencyReferencePointType::enablePersonnelCount(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strengthRangeType : type};
  if ((!personnelCount_Accessor) || (personnelCount_Accessor->getAccessorType() != requestedType)) {
    personnelCount_Accessor = StrengthRangeType::create(requestedType);
    if (!personnelCount_Accessor) {
      throw uci::base::UCIException("Error in enablePersonnelCount(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *personnelCount_Accessor;
}

uci::type::EmergencyReferencePointType& EmergencyReferencePointType::clearPersonnelCount() noexcept {
  personnelCount_Accessor.reset();
  return *this;
}

uci::type::EmptyType& EmergencyReferencePointType::getLastKnownPosition_() const {
  if (lastKnownPosition_Accessor) {
    return *lastKnownPosition_Accessor;
  }
  throw uci::base::UCIException("Error in getLastKnownPosition(): An attempt was made to get an optional field that was not enabled, call hasLastKnownPosition() to determine if it is safe to call getLastKnownPosition()");
}

const uci::type::EmptyType& EmergencyReferencePointType::getLastKnownPosition() const {
  return getLastKnownPosition_();
}

uci::type::EmptyType& EmergencyReferencePointType::getLastKnownPosition() {
  return getLastKnownPosition_();
}

uci::type::EmergencyReferencePointType& EmergencyReferencePointType::setLastKnownPosition(const uci::type::EmptyType& value) {
  return setLastKnownPosition(value.c_str());
}

uci::type::EmergencyReferencePointType& EmergencyReferencePointType::setLastKnownPosition(const std::string& value) {
  return setLastKnownPosition(value.c_str());
}

uci::type::EmergencyReferencePointType& EmergencyReferencePointType::setLastKnownPosition(const char* value) {
  enableLastKnownPosition().setStringValue(value);
  return *this;
}

bool EmergencyReferencePointType::hasLastKnownPosition() const noexcept {
  return static_cast<bool>(lastKnownPosition_Accessor);
}

uci::type::EmptyType& EmergencyReferencePointType::enableLastKnownPosition(uci::base::accessorType::AccessorType type) {
  if (!lastKnownPosition_Accessor) {
    lastKnownPosition_Accessor = EmptyType::create(type);
  }
  return *lastKnownPosition_Accessor;
}

uci::type::EmergencyReferencePointType& EmergencyReferencePointType::clearLastKnownPosition() noexcept {
  lastKnownPosition_Accessor.reset();
  return *this;
}

std::unique_ptr<EmergencyReferencePointType> EmergencyReferencePointType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emergencyReferencePointType : type};
  return (requestedType == uci::type::accessorType::emergencyReferencePointType) ? boost::make_unique<EmergencyReferencePointType>() : nullptr;
}

/**  */
namespace EmergencyReferencePointType_Names {

constexpr const char* Extern_Type_Name{"EmergencyReferencePointType"};
constexpr const char* Reference_Name{"Reference"};
constexpr const char* PersonnelCount_Name{"PersonnelCount"};
constexpr const char* LastKnownPosition_Name{"LastKnownPosition"};

} // namespace EmergencyReferencePointType_Names

void EmergencyReferencePointType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EmergencyReferencePointType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EmergencyReferencePointType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EmergencyReferencePointType_Names::Reference_Name) {
      OpPointReferenceType::deserialize(valueType.second, accessor.getReference(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmergencyReferencePointType_Names::PersonnelCount_Name) {
      StrengthRangeType::deserialize(valueType.second, accessor.enablePersonnelCount(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmergencyReferencePointType_Names::LastKnownPosition_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLastKnownPosition(*value);
      }
    }
  }
}

std::string EmergencyReferencePointType::serialize(const uci::type::EmergencyReferencePointType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EmergencyReferencePointType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EmergencyReferencePointType_Names::Extern_Type_Name);
  }
  OpPointReferenceType::serialize(accessor.getReference(), node, EmergencyReferencePointType_Names::Reference_Name);
  if (accessor.hasPersonnelCount()) {
    StrengthRangeType::serialize(accessor.getPersonnelCount(), node, EmergencyReferencePointType_Names::PersonnelCount_Name);
  }
  if (accessor.hasLastKnownPosition()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getLastKnownPosition(), node, EmergencyReferencePointType_Names::LastKnownPosition_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EmergencyReferencePointType& EmergencyReferencePointType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EmergencyReferencePointType>().release());
}

uci::type::EmergencyReferencePointType& EmergencyReferencePointType::create(const uci::type::EmergencyReferencePointType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EmergencyReferencePointType> newAccessor{boost::make_unique<asb_uci::type::EmergencyReferencePointType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EmergencyReferencePointType::destroy(uci::type::EmergencyReferencePointType& accessor) {
  delete dynamic_cast<asb_uci::type::EmergencyReferencePointType*>(&accessor);
}

} // namespace type

} // namespace uci

