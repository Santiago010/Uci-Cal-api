/** @file ProductProcessingRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ProductProcessingRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/ComparableRankingType.h"
#include "../../../include/asb_uci/type/DownloadPriorityEnum.h"
#include "../../../include/asb_uci/type/ID_Type.h"
#include "../../../include/asb_uci/type/ProcessingRequirementsType.h"
#include "../../../include/asb_uci/type/RequestBaseType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/TraceabilityType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComparableRankingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DownloadPriorityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProcessingRequirementsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductProcessingRequestMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TraceabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductProcessingRequestMDT::ProductProcessingRequestMDT()
  : rank_Accessor{boost::make_unique<ComparableRankingType>()},
    preemptLowerRank_Accessor{boost::make_unique<DownloadPriorityEnum>()},
    processingRequirements_Accessor{boost::make_unique<ProcessingRequirementsType>()} {
}

ProductProcessingRequestMDT::~ProductProcessingRequestMDT() = default;

void ProductProcessingRequestMDT::copy(const uci::type::ProductProcessingRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void ProductProcessingRequestMDT::copyImpl(const uci::type::ProductProcessingRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ProductProcessingRequestMDT&>(accessor);
    if (accessorImpl.functionID_Accessor) {
      setFunctionID(*(accessorImpl.functionID_Accessor));
    } else {
      functionID_Accessor.reset();
    }
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
    if (accessorImpl.capabilityID_Accessor) {
      setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    } else {
      capabilityID_Accessor.reset();
    }
    if (accessorImpl.traceability_Accessor) {
      setTraceability(*(accessorImpl.traceability_Accessor));
    } else {
      traceability_Accessor.reset();
    }
    setRank(*(accessorImpl.rank_Accessor));
    setPreemptLowerRank(*(accessorImpl.preemptLowerRank_Accessor));
    setProcessingRequirements(*(accessorImpl.processingRequirements_Accessor));
  }
}

void ProductProcessingRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  functionID_Accessor.reset();
  systemID_Accessor.reset();
  capabilityID_Accessor.reset();
  traceability_Accessor.reset();
  rank_Accessor->reset();
  preemptLowerRank_Accessor->reset();
  processingRequirements_Accessor->reset();
}

uci::type::ID_Type& ProductProcessingRequestMDT::getFunctionID_() const {
  if (functionID_Accessor) {
    return *functionID_Accessor;
  }
  throw uci::base::UCIException("Error in getFunctionID(): An attempt was made to get an optional field that was not enabled, call hasFunctionID() to determine if it is safe to call getFunctionID()");
}

const uci::type::ID_Type& ProductProcessingRequestMDT::getFunctionID() const {
  return getFunctionID_();
}

uci::type::ID_Type& ProductProcessingRequestMDT::getFunctionID() {
  return getFunctionID_();
}

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::setFunctionID(const uci::type::ID_Type& accessor) {
  enableFunctionID(accessor.getAccessorType());
  if (&accessor != functionID_Accessor.get()) {
    functionID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ProductProcessingRequestMDT::hasFunctionID() const noexcept {
  return static_cast<bool>(functionID_Accessor);
}

uci::type::ID_Type& ProductProcessingRequestMDT::enableFunctionID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iD_Type : type};
  if ((!functionID_Accessor) || (functionID_Accessor->getAccessorType() != requestedType)) {
    functionID_Accessor = ID_Type::create(requestedType);
    if (!functionID_Accessor) {
      throw uci::base::UCIException("Error in enableFunctionID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *functionID_Accessor;
}

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::clearFunctionID() noexcept {
  functionID_Accessor.reset();
  return *this;
}

uci::type::SystemID_Type& ProductProcessingRequestMDT::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): An attempt was made to get an optional field that was not enabled, call hasSystemID() to determine if it is safe to call getSystemID()");
}

const uci::type::SystemID_Type& ProductProcessingRequestMDT::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& ProductProcessingRequestMDT::getSystemID() {
  return getSystemID_();
}

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  enableSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductProcessingRequestMDT::hasSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& ProductProcessingRequestMDT::enableSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(requestedType);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::clearSystemID() noexcept {
  systemID_Accessor.reset();
  return *this;
}

uci::type::CapabilityID_Type& ProductProcessingRequestMDT::getCapabilityID_() const {
  if (capabilityID_Accessor) {
    return *capabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasCapabilityID() to determine if it is safe to call getCapabilityID()");
}

const uci::type::CapabilityID_Type& ProductProcessingRequestMDT::getCapabilityID() const {
  return getCapabilityID_();
}

uci::type::CapabilityID_Type& ProductProcessingRequestMDT::getCapabilityID() {
  return getCapabilityID_();
}

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableCapabilityID();
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductProcessingRequestMDT::hasCapabilityID() const noexcept {
  return static_cast<bool>(capabilityID_Accessor);
}

uci::type::CapabilityID_Type& ProductProcessingRequestMDT::enableCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!capabilityID_Accessor) || (capabilityID_Accessor->getAccessorType() != requestedType)) {
    capabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!capabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityID_Accessor;
}

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::clearCapabilityID() noexcept {
  capabilityID_Accessor.reset();
  return *this;
}

uci::type::TraceabilityType& ProductProcessingRequestMDT::getTraceability_() const {
  if (traceability_Accessor) {
    return *traceability_Accessor;
  }
  throw uci::base::UCIException("Error in getTraceability(): An attempt was made to get an optional field that was not enabled, call hasTraceability() to determine if it is safe to call getTraceability()");
}

const uci::type::TraceabilityType& ProductProcessingRequestMDT::getTraceability() const {
  return getTraceability_();
}

uci::type::TraceabilityType& ProductProcessingRequestMDT::getTraceability() {
  return getTraceability_();
}

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::setTraceability(const uci::type::TraceabilityType& accessor) {
  enableTraceability();
  if (&accessor != traceability_Accessor.get()) {
    traceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductProcessingRequestMDT::hasTraceability() const noexcept {
  return static_cast<bool>(traceability_Accessor);
}

uci::type::TraceabilityType& ProductProcessingRequestMDT::enableTraceability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::traceabilityType : type};
  if ((!traceability_Accessor) || (traceability_Accessor->getAccessorType() != requestedType)) {
    traceability_Accessor = TraceabilityType::create(requestedType);
    if (!traceability_Accessor) {
      throw uci::base::UCIException("Error in enableTraceability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *traceability_Accessor;
}

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::clearTraceability() noexcept {
  traceability_Accessor.reset();
  return *this;
}

const uci::type::ComparableRankingType& ProductProcessingRequestMDT::getRank() const {
  return *rank_Accessor;
}

uci::type::ComparableRankingType& ProductProcessingRequestMDT::getRank() {
  return *rank_Accessor;
}

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::setRank(const uci::type::ComparableRankingType& accessor) {
  if (&accessor != rank_Accessor.get()) {
    rank_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DownloadPriorityEnum& ProductProcessingRequestMDT::getPreemptLowerRank() const {
  return *preemptLowerRank_Accessor;
}

uci::type::DownloadPriorityEnum& ProductProcessingRequestMDT::getPreemptLowerRank() {
  return *preemptLowerRank_Accessor;
}

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::setPreemptLowerRank(const uci::type::DownloadPriorityEnum& accessor) {
  if (&accessor != preemptLowerRank_Accessor.get()) {
    preemptLowerRank_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::setPreemptLowerRank(uci::type::DownloadPriorityEnum::EnumerationItem value) {
  preemptLowerRank_Accessor->setValue(value);
  return *this;
}


const uci::type::ProcessingRequirementsType& ProductProcessingRequestMDT::getProcessingRequirements() const {
  return *processingRequirements_Accessor;
}

uci::type::ProcessingRequirementsType& ProductProcessingRequestMDT::getProcessingRequirements() {
  return *processingRequirements_Accessor;
}

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::setProcessingRequirements(const uci::type::ProcessingRequirementsType& accessor) {
  if (&accessor != processingRequirements_Accessor.get()) {
    processingRequirements_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ProductProcessingRequestMDT> ProductProcessingRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productProcessingRequestMDT : type};
  return (requestedType == uci::type::accessorType::productProcessingRequestMDT) ? boost::make_unique<ProductProcessingRequestMDT>() : nullptr;
}

/**  */
namespace ProductProcessingRequestMDT_Names {

constexpr const char* Extern_Type_Name{"ProductProcessingRequestMDT"};
constexpr const char* FunctionID_Name{"FunctionID"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* Traceability_Name{"Traceability"};
constexpr const char* Rank_Name{"Rank"};
constexpr const char* PreemptLowerRank_Name{"PreemptLowerRank"};
constexpr const char* ProcessingRequirements_Name{"ProcessingRequirements"};

} // namespace ProductProcessingRequestMDT_Names

void ProductProcessingRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductProcessingRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductProcessingRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::FunctionID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableFunctionID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::Traceability_Name) {
      TraceabilityType::deserialize(valueType.second, accessor.enableTraceability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::Rank_Name) {
      ComparableRankingType::deserialize(valueType.second, accessor.getRank(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::PreemptLowerRank_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPreemptLowerRank().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::ProcessingRequirements_Name) {
      ProcessingRequirementsType::deserialize(valueType.second, accessor.getProcessingRequirements(), nodeName, nsPrefix);
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ProductProcessingRequestMDT::serialize(const uci::type::ProductProcessingRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductProcessingRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductProcessingRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasFunctionID()) {
    ID_Type::serialize(accessor.getFunctionID(), node, ProductProcessingRequestMDT_Names::FunctionID_Name);
  }
  if (accessor.hasSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, ProductProcessingRequestMDT_Names::SystemID_Name);
  }
  if (accessor.hasCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getCapabilityID(), node, ProductProcessingRequestMDT_Names::CapabilityID_Name);
  }
  if (accessor.hasTraceability()) {
    TraceabilityType::serialize(accessor.getTraceability(), node, ProductProcessingRequestMDT_Names::Traceability_Name);
  }
  ComparableRankingType::serialize(accessor.getRank(), node, ProductProcessingRequestMDT_Names::Rank_Name);
  DownloadPriorityEnum::serialize(accessor.getPreemptLowerRank(), node, ProductProcessingRequestMDT_Names::PreemptLowerRank_Name, false);
  ProcessingRequirementsType::serialize(accessor.getProcessingRequirements(), node, ProductProcessingRequestMDT_Names::ProcessingRequirements_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductProcessingRequestMDT>().release());
}

uci::type::ProductProcessingRequestMDT& ProductProcessingRequestMDT::create(const uci::type::ProductProcessingRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductProcessingRequestMDT> newAccessor{boost::make_unique<asb_uci::type::ProductProcessingRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductProcessingRequestMDT::destroy(uci::type::ProductProcessingRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ProductProcessingRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

