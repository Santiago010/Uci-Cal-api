/** @file OrbitalSurveillanceObjectBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalSurveillanceObjectBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitKinematicsType.h"
#include "asb_uci/type/OrbitalKinematicsSourceEnum.h"
#include "asb_uci/type/SatelliteIdentityChoiceType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/OrbitKinematicsType.h"
#include "uci/type/OrbitalKinematicsSourceEnum.h"
#include "uci/type/OrbitalSurveillanceObjectBaseType.h"
#include "uci/type/SatelliteIdentityChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalSurveillanceObjectBaseType::OrbitalSurveillanceObjectBaseType()
  : satelliteIdentity_Accessor{boost::make_unique<SatelliteIdentityChoiceType>()} {
}

OrbitalSurveillanceObjectBaseType::~OrbitalSurveillanceObjectBaseType() = default;

void OrbitalSurveillanceObjectBaseType::copy(const uci::type::OrbitalSurveillanceObjectBaseType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalSurveillanceObjectBaseType::copyImpl(const uci::type::OrbitalSurveillanceObjectBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::orbitalSurveillanceObjectBaseType)) {
      const auto& accessorImpl = dynamic_cast<const OrbitalSurveillanceObjectBaseType&>(accessor);
      setSatelliteIdentity(*(accessorImpl.satelliteIdentity_Accessor));
      if (accessorImpl.kinematicsSource_Accessor) {
        setKinematicsSource(*(accessorImpl.kinematicsSource_Accessor));
      } else {
        kinematicsSource_Accessor.reset();
      }
      if (accessorImpl.orbitKinematicsOverride_Accessor) {
        setOrbitKinematicsOverride(*(accessorImpl.orbitKinematicsOverride_Accessor));
      } else {
        orbitKinematicsOverride_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void OrbitalSurveillanceObjectBaseType::reset() noexcept {
  satelliteIdentity_Accessor->reset();
  kinematicsSource_Accessor.reset();
  orbitKinematicsOverride_Accessor.reset();
}

const uci::type::SatelliteIdentityChoiceType& OrbitalSurveillanceObjectBaseType::getSatelliteIdentity() const {
  return *satelliteIdentity_Accessor;
}

uci::type::SatelliteIdentityChoiceType& OrbitalSurveillanceObjectBaseType::getSatelliteIdentity() {
  return *satelliteIdentity_Accessor;
}

uci::type::OrbitalSurveillanceObjectBaseType& OrbitalSurveillanceObjectBaseType::setSatelliteIdentity(const uci::type::SatelliteIdentityChoiceType& accessor) {
  if (&accessor != satelliteIdentity_Accessor.get()) {
    satelliteIdentity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitalKinematicsSourceEnum& OrbitalSurveillanceObjectBaseType::getKinematicsSource_() const {
  if (kinematicsSource_Accessor) {
    return *kinematicsSource_Accessor;
  }
  throw uci::base::UCIException("Error in getKinematicsSource(): An attempt was made to get an optional field that was not enabled, call hasKinematicsSource() to determine if it is safe to call getKinematicsSource()");
}

const uci::type::OrbitalKinematicsSourceEnum& OrbitalSurveillanceObjectBaseType::getKinematicsSource() const {
  return getKinematicsSource_();
}

uci::type::OrbitalKinematicsSourceEnum& OrbitalSurveillanceObjectBaseType::getKinematicsSource() {
  return getKinematicsSource_();
}

uci::type::OrbitalSurveillanceObjectBaseType& OrbitalSurveillanceObjectBaseType::setKinematicsSource(const uci::type::OrbitalKinematicsSourceEnum& accessor) {
  enableKinematicsSource();
  if (&accessor != kinematicsSource_Accessor.get()) {
    kinematicsSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitalSurveillanceObjectBaseType& OrbitalSurveillanceObjectBaseType::setKinematicsSource(const uci::type::OrbitalKinematicsSourceEnum::EnumerationItem value) {
  enableKinematicsSource().setValue(value);
  return *this;
}

bool OrbitalSurveillanceObjectBaseType::hasKinematicsSource() const noexcept {
  return static_cast<bool>(kinematicsSource_Accessor);
}

uci::type::OrbitalKinematicsSourceEnum& OrbitalSurveillanceObjectBaseType::enableKinematicsSource(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsSourceEnum : type};
  if ((!kinematicsSource_Accessor) || (kinematicsSource_Accessor->getAccessorType() != requestedType)) {
    kinematicsSource_Accessor = OrbitalKinematicsSourceEnum::create(requestedType);
    if (!kinematicsSource_Accessor) {
      throw uci::base::UCIException("Error in enableKinematicsSource(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *kinematicsSource_Accessor;
}

uci::type::OrbitalSurveillanceObjectBaseType& OrbitalSurveillanceObjectBaseType::clearKinematicsSource() noexcept {
  kinematicsSource_Accessor.reset();
  return *this;
}

uci::type::OrbitKinematicsType& OrbitalSurveillanceObjectBaseType::getOrbitKinematicsOverride_() const {
  if (orbitKinematicsOverride_Accessor) {
    return *orbitKinematicsOverride_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitKinematicsOverride(): An attempt was made to get an optional field that was not enabled, call hasOrbitKinematicsOverride() to determine if it is safe to call getOrbitKinematicsOverride()");
}

const uci::type::OrbitKinematicsType& OrbitalSurveillanceObjectBaseType::getOrbitKinematicsOverride() const {
  return getOrbitKinematicsOverride_();
}

uci::type::OrbitKinematicsType& OrbitalSurveillanceObjectBaseType::getOrbitKinematicsOverride() {
  return getOrbitKinematicsOverride_();
}

uci::type::OrbitalSurveillanceObjectBaseType& OrbitalSurveillanceObjectBaseType::setOrbitKinematicsOverride(const uci::type::OrbitKinematicsType& accessor) {
  enableOrbitKinematicsOverride(accessor.getAccessorType());
  if (&accessor != orbitKinematicsOverride_Accessor.get()) {
    orbitKinematicsOverride_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OrbitalSurveillanceObjectBaseType::hasOrbitKinematicsOverride() const noexcept {
  return static_cast<bool>(orbitKinematicsOverride_Accessor);
}

uci::type::OrbitKinematicsType& OrbitalSurveillanceObjectBaseType::enableOrbitKinematicsOverride(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsType : type};
  if ((!orbitKinematicsOverride_Accessor) || (orbitKinematicsOverride_Accessor->getAccessorType() != requestedType)) {
    orbitKinematicsOverride_Accessor = OrbitKinematicsType::create(requestedType);
    if (!orbitKinematicsOverride_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitKinematicsOverride(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitKinematicsOverride_Accessor;
}

uci::type::OrbitalSurveillanceObjectBaseType& OrbitalSurveillanceObjectBaseType::clearOrbitKinematicsOverride() noexcept {
  orbitKinematicsOverride_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalSurveillanceObjectBaseType> OrbitalSurveillanceObjectBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceObjectBaseType : type};
  return std::unique_ptr<OrbitalSurveillanceObjectBaseType>(dynamic_cast<OrbitalSurveillanceObjectBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace OrbitalSurveillanceObjectBaseType_Names {

constexpr const char* Extern_Type_Name{"OrbitalSurveillanceObjectBaseType"};
constexpr const char* SatelliteIdentity_Name{"SatelliteIdentity"};
constexpr const char* KinematicsSource_Name{"KinematicsSource"};
constexpr const char* OrbitKinematicsOverride_Name{"OrbitKinematicsOverride"};

} // namespace OrbitalSurveillanceObjectBaseType_Names

void OrbitalSurveillanceObjectBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalSurveillanceObjectBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalSurveillanceObjectBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceObjectBaseType_Names::SatelliteIdentity_Name) {
      SatelliteIdentityChoiceType::deserialize(valueType.second, accessor.getSatelliteIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceObjectBaseType_Names::KinematicsSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableKinematicsSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceObjectBaseType_Names::OrbitKinematicsOverride_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableOrbitKinematicsOverride(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalSurveillanceObjectBaseType::serialize(const uci::type::OrbitalSurveillanceObjectBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalSurveillanceObjectBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::orbitalSurveillanceObjectBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalSurveillanceObjectBaseType_Names::Extern_Type_Name);
    }
    SatelliteIdentityChoiceType::serialize(accessor.getSatelliteIdentity(), node, OrbitalSurveillanceObjectBaseType_Names::SatelliteIdentity_Name);
    if (accessor.hasKinematicsSource()) {
      OrbitalKinematicsSourceEnum::serialize(accessor.getKinematicsSource(), node, OrbitalSurveillanceObjectBaseType_Names::KinematicsSource_Name, false);
    }
    if (accessor.hasOrbitKinematicsOverride()) {
      OrbitKinematicsType::serialize(accessor.getOrbitKinematicsOverride(), node, OrbitalSurveillanceObjectBaseType_Names::OrbitKinematicsOverride_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalSurveillanceObjectBaseType& OrbitalSurveillanceObjectBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalSurveillanceObjectBaseType>().release());
}

uci::type::OrbitalSurveillanceObjectBaseType& OrbitalSurveillanceObjectBaseType::create(const uci::type::OrbitalSurveillanceObjectBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalSurveillanceObjectBaseType> newAccessor{boost::make_unique<asb_uci::type::OrbitalSurveillanceObjectBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalSurveillanceObjectBaseType::destroy(uci::type::OrbitalSurveillanceObjectBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalSurveillanceObjectBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

