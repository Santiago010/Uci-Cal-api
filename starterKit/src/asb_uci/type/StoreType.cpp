/** @file StoreType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/StoreType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/StoreCategoryEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StoreCategoryEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StoreType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StoreType::StoreType()
  : storeCategory_Accessor{boost::make_unique<StoreCategoryEnum>()} {
}

StoreType::~StoreType() = default;

void StoreType::copy(const uci::type::StoreType& accessor) {
  copyImpl(accessor, false);
}

void StoreType::copyImpl(const uci::type::StoreType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::storeType)) {
      const auto& accessorImpl = dynamic_cast<const StoreType&>(accessor);
      setStoreType(accessorImpl.storeType_Accessor);
      setStoreCategory(*(accessorImpl.storeCategory_Accessor));
      if (accessorImpl.storeTypeVariant_Accessor) {
        setStoreTypeVariant(*(accessorImpl.storeTypeVariant_Accessor));
      } else {
        storeTypeVariant_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void StoreType::reset() noexcept {
  storeType_Accessor = 0;
  storeCategory_Accessor->reset();
  storeTypeVariant_Accessor.reset();
}

xs::UnsignedInt StoreType::getStoreType() const {
  return storeType_Accessor;
}

uci::type::StoreType& StoreType::setStoreType(xs::UnsignedInt value) {
  storeType_Accessor = value;
  return *this;
}


const uci::type::StoreCategoryEnum& StoreType::getStoreCategory() const {
  return *storeCategory_Accessor;
}

uci::type::StoreCategoryEnum& StoreType::getStoreCategory() {
  return *storeCategory_Accessor;
}

uci::type::StoreType& StoreType::setStoreCategory(const uci::type::StoreCategoryEnum& accessor) {
  if (&accessor != storeCategory_Accessor.get()) {
    storeCategory_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::StoreType& StoreType::setStoreCategory(uci::type::StoreCategoryEnum::EnumerationItem value) {
  storeCategory_Accessor->setValue(value);
  return *this;
}


uci::type::ForeignKeyType& StoreType::getStoreTypeVariant_() const {
  if (storeTypeVariant_Accessor) {
    return *storeTypeVariant_Accessor;
  }
  throw uci::base::UCIException("Error in getStoreTypeVariant(): An attempt was made to get an optional field that was not enabled, call hasStoreTypeVariant() to determine if it is safe to call getStoreTypeVariant()");
}

const uci::type::ForeignKeyType& StoreType::getStoreTypeVariant() const {
  return getStoreTypeVariant_();
}

uci::type::ForeignKeyType& StoreType::getStoreTypeVariant() {
  return getStoreTypeVariant_();
}

uci::type::StoreType& StoreType::setStoreTypeVariant(const uci::type::ForeignKeyType& accessor) {
  enableStoreTypeVariant(accessor.getAccessorType());
  if (&accessor != storeTypeVariant_Accessor.get()) {
    storeTypeVariant_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool StoreType::hasStoreTypeVariant() const noexcept {
  return static_cast<bool>(storeTypeVariant_Accessor);
}

uci::type::ForeignKeyType& StoreType::enableStoreTypeVariant(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!storeTypeVariant_Accessor) || (storeTypeVariant_Accessor->getAccessorType() != requestedType)) {
    storeTypeVariant_Accessor = ForeignKeyType::create(requestedType);
    if (!storeTypeVariant_Accessor) {
      throw uci::base::UCIException("Error in enableStoreTypeVariant(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *storeTypeVariant_Accessor;
}

uci::type::StoreType& StoreType::clearStoreTypeVariant() noexcept {
  storeTypeVariant_Accessor.reset();
  return *this;
}

std::unique_ptr<StoreType> StoreType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeType : type};
  return std::unique_ptr<StoreType>(dynamic_cast<StoreType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace StoreType_Names {

constexpr const char* Extern_Type_Name{"StoreType"};
constexpr const char* StoreType_Name{"StoreType"};
constexpr const char* StoreCategory_Name{"StoreCategory"};
constexpr const char* StoreTypeVariant_Name{"StoreTypeVariant"};

} // namespace StoreType_Names

void StoreType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StoreType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StoreType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StoreType_Names::StoreType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStoreType(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + StoreType_Names::StoreCategory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getStoreCategory().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + StoreType_Names::StoreTypeVariant_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableStoreTypeVariant(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string StoreType::serialize(const uci::type::StoreType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StoreType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::storeType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, StoreType_Names::Extern_Type_Name);
    }
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getStoreType(), node, StoreType_Names::StoreType_Name);
    StoreCategoryEnum::serialize(accessor.getStoreCategory(), node, StoreType_Names::StoreCategory_Name, false);
    if (accessor.hasStoreTypeVariant()) {
      ForeignKeyType::serialize(accessor.getStoreTypeVariant(), node, StoreType_Names::StoreTypeVariant_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StoreType& StoreType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StoreType>().release());
}

uci::type::StoreType& StoreType::create(const uci::type::StoreType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StoreType> newAccessor{boost::make_unique<asb_uci::type::StoreType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StoreType::destroy(uci::type::StoreType& accessor) {
  delete dynamic_cast<asb_uci::type::StoreType*>(&accessor);
}

} // namespace type

} // namespace uci

