/** @file SOB_CorrelatedToType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SOB_CorrelatedToType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/IdentityType.h"
#include "asb_uci/type/SOB_C2_RecordID_Type.h"
#include "asb_uci/type/SOB_SatelliteRecordID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/IdentityType.h"
#include "uci/type/SOB_C2_RecordID_Type.h"
#include "uci/type/SOB_CorrelatedToType.h"
#include "uci/type/SOB_SatelliteRecordID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SOB_CorrelatedToType::SOB_CorrelatedToType() = default;

SOB_CorrelatedToType::~SOB_CorrelatedToType() = default;

void SOB_CorrelatedToType::copy(const uci::type::SOB_CorrelatedToType& accessor) {
  copyImpl(accessor, false);
}

void SOB_CorrelatedToType::copyImpl(const uci::type::SOB_CorrelatedToType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SOB_CorrelatedToType&>(accessor);
    if (accessorImpl.sOB_SatelliteRecordID_Accessor) {
      setSOB_SatelliteRecordID(*(accessorImpl.sOB_SatelliteRecordID_Accessor));
    } else {
      sOB_SatelliteRecordID_Accessor.reset();
    }
    if (accessorImpl.sOB_C2_RecordID_Accessor) {
      setSOB_C2_RecordID(*(accessorImpl.sOB_C2_RecordID_Accessor));
    } else {
      sOB_C2_RecordID_Accessor.reset();
    }
    if (accessorImpl.identity_Accessor) {
      setIdentity(*(accessorImpl.identity_Accessor));
    } else {
      identity_Accessor.reset();
    }
  }
}

void SOB_CorrelatedToType::reset() noexcept {
  sOB_SatelliteRecordID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  identity_Accessor.reset();
}

uci::type::SOB_SatelliteRecordID_Type& SOB_CorrelatedToType::getSOB_SatelliteRecordID_() const {
  if (sOB_SatelliteRecordID_Accessor) {
    return *sOB_SatelliteRecordID_Accessor;
  }
  throw uci::base::UCIException("Error in getSOB_SatelliteRecordID(): An attempt was made to get an optional field that was not enabled, call hasSOB_SatelliteRecordID() to determine if it is safe to call getSOB_SatelliteRecordID()");
}

const uci::type::SOB_SatelliteRecordID_Type& SOB_CorrelatedToType::getSOB_SatelliteRecordID() const {
  return getSOB_SatelliteRecordID_();
}

uci::type::SOB_SatelliteRecordID_Type& SOB_CorrelatedToType::getSOB_SatelliteRecordID() {
  return getSOB_SatelliteRecordID_();
}

uci::type::SOB_CorrelatedToType& SOB_CorrelatedToType::setSOB_SatelliteRecordID(const uci::type::SOB_SatelliteRecordID_Type& accessor) {
  enableSOB_SatelliteRecordID();
  if (&accessor != sOB_SatelliteRecordID_Accessor.get()) {
    sOB_SatelliteRecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_CorrelatedToType::hasSOB_SatelliteRecordID() const noexcept {
  return static_cast<bool>(sOB_SatelliteRecordID_Accessor);
}

uci::type::SOB_SatelliteRecordID_Type& SOB_CorrelatedToType::enableSOB_SatelliteRecordID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_SatelliteRecordID_Type : type};
  if ((!sOB_SatelliteRecordID_Accessor) || (sOB_SatelliteRecordID_Accessor->getAccessorType() != requestedType)) {
    sOB_SatelliteRecordID_Accessor = SOB_SatelliteRecordID_Type::create(requestedType);
    if (!sOB_SatelliteRecordID_Accessor) {
      throw uci::base::UCIException("Error in enableSOB_SatelliteRecordID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sOB_SatelliteRecordID_Accessor;
}

uci::type::SOB_CorrelatedToType& SOB_CorrelatedToType::clearSOB_SatelliteRecordID() noexcept {
  sOB_SatelliteRecordID_Accessor.reset();
  return *this;
}

uci::type::SOB_C2_RecordID_Type& SOB_CorrelatedToType::getSOB_C2_RecordID_() const {
  if (sOB_C2_RecordID_Accessor) {
    return *sOB_C2_RecordID_Accessor;
  }
  throw uci::base::UCIException("Error in getSOB_C2_RecordID(): An attempt was made to get an optional field that was not enabled, call hasSOB_C2_RecordID() to determine if it is safe to call getSOB_C2_RecordID()");
}

const uci::type::SOB_C2_RecordID_Type& SOB_CorrelatedToType::getSOB_C2_RecordID() const {
  return getSOB_C2_RecordID_();
}

uci::type::SOB_C2_RecordID_Type& SOB_CorrelatedToType::getSOB_C2_RecordID() {
  return getSOB_C2_RecordID_();
}

uci::type::SOB_CorrelatedToType& SOB_CorrelatedToType::setSOB_C2_RecordID(const uci::type::SOB_C2_RecordID_Type& accessor) {
  enableSOB_C2_RecordID();
  if (&accessor != sOB_C2_RecordID_Accessor.get()) {
    sOB_C2_RecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_CorrelatedToType::hasSOB_C2_RecordID() const noexcept {
  return static_cast<bool>(sOB_C2_RecordID_Accessor);
}

uci::type::SOB_C2_RecordID_Type& SOB_CorrelatedToType::enableSOB_C2_RecordID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_C2_RecordID_Type : type};
  if ((!sOB_C2_RecordID_Accessor) || (sOB_C2_RecordID_Accessor->getAccessorType() != requestedType)) {
    sOB_C2_RecordID_Accessor = SOB_C2_RecordID_Type::create(requestedType);
    if (!sOB_C2_RecordID_Accessor) {
      throw uci::base::UCIException("Error in enableSOB_C2_RecordID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sOB_C2_RecordID_Accessor;
}

uci::type::SOB_CorrelatedToType& SOB_CorrelatedToType::clearSOB_C2_RecordID() noexcept {
  sOB_C2_RecordID_Accessor.reset();
  return *this;
}

uci::type::IdentityType& SOB_CorrelatedToType::getIdentity_() const {
  if (identity_Accessor) {
    return *identity_Accessor;
  }
  throw uci::base::UCIException("Error in getIdentity(): An attempt was made to get an optional field that was not enabled, call hasIdentity() to determine if it is safe to call getIdentity()");
}

const uci::type::IdentityType& SOB_CorrelatedToType::getIdentity() const {
  return getIdentity_();
}

uci::type::IdentityType& SOB_CorrelatedToType::getIdentity() {
  return getIdentity_();
}

uci::type::SOB_CorrelatedToType& SOB_CorrelatedToType::setIdentity(const uci::type::IdentityType& accessor) {
  enableIdentity(accessor.getAccessorType());
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SOB_CorrelatedToType::hasIdentity() const noexcept {
  return static_cast<bool>(identity_Accessor);
}

uci::type::IdentityType& SOB_CorrelatedToType::enableIdentity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::identityType : type};
  if ((!identity_Accessor) || (identity_Accessor->getAccessorType() != requestedType)) {
    identity_Accessor = IdentityType::create(requestedType);
    if (!identity_Accessor) {
      throw uci::base::UCIException("Error in enableIdentity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *identity_Accessor;
}

uci::type::SOB_CorrelatedToType& SOB_CorrelatedToType::clearIdentity() noexcept {
  identity_Accessor.reset();
  return *this;
}

std::unique_ptr<SOB_CorrelatedToType> SOB_CorrelatedToType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_CorrelatedToType : type};
  return (requestedType == uci::type::accessorType::sOB_CorrelatedToType) ? boost::make_unique<SOB_CorrelatedToType>() : nullptr;
}

/**  */
namespace SOB_CorrelatedToType_Names {

constexpr const char* Extern_Type_Name{"SOB_CorrelatedToType"};
constexpr const char* SOB_SatelliteRecordID_Name{"SOB_SatelliteRecordID"};
constexpr const char* SOB_C2_RecordID_Name{"SOB_C2_RecordID"};
constexpr const char* Identity_Name{"Identity"};

} // namespace SOB_CorrelatedToType_Names

void SOB_CorrelatedToType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SOB_CorrelatedToType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SOB_CorrelatedToType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SOB_CorrelatedToType_Names::SOB_SatelliteRecordID_Name) {
      SOB_SatelliteRecordID_Type::deserialize(valueType.second, accessor.enableSOB_SatelliteRecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelatedToType_Names::SOB_C2_RecordID_Name) {
      SOB_C2_RecordID_Type::deserialize(valueType.second, accessor.enableSOB_C2_RecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelatedToType_Names::Identity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableIdentity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string SOB_CorrelatedToType::serialize(const uci::type::SOB_CorrelatedToType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SOB_CorrelatedToType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SOB_CorrelatedToType_Names::Extern_Type_Name);
  }
  if (accessor.hasSOB_SatelliteRecordID()) {
    SOB_SatelliteRecordID_Type::serialize(accessor.getSOB_SatelliteRecordID(), node, SOB_CorrelatedToType_Names::SOB_SatelliteRecordID_Name);
  }
  if (accessor.hasSOB_C2_RecordID()) {
    SOB_C2_RecordID_Type::serialize(accessor.getSOB_C2_RecordID(), node, SOB_CorrelatedToType_Names::SOB_C2_RecordID_Name);
  }
  if (accessor.hasIdentity()) {
    IdentityType::serialize(accessor.getIdentity(), node, SOB_CorrelatedToType_Names::Identity_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SOB_CorrelatedToType& SOB_CorrelatedToType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SOB_CorrelatedToType>().release());
}

uci::type::SOB_CorrelatedToType& SOB_CorrelatedToType::create(const uci::type::SOB_CorrelatedToType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SOB_CorrelatedToType> newAccessor{boost::make_unique<asb_uci::type::SOB_CorrelatedToType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SOB_CorrelatedToType::destroy(uci::type::SOB_CorrelatedToType& accessor) {
  delete dynamic_cast<asb_uci::type::SOB_CorrelatedToType*>(&accessor);
}

} // namespace type

} // namespace uci

