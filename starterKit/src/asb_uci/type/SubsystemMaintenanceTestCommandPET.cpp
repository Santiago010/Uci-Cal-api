/** @file SubsystemMaintenanceTestCommandPET.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SubsystemMaintenanceTestCommandPET.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/SubsystemMaintenanceEventSettingsConfigurationType.h"
#include "asb_uci/type/SubsystemMaintenanceID_Type.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/SubsystemMaintenanceEventSettingsConfigurationType.h"
#include "uci/type/SubsystemMaintenanceID_Type.h"
#include "uci/type/SubsystemMaintenanceTestCommandPET.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemMaintenanceTestCommandPET::SubsystemMaintenanceTestCommandPET()
  : testID_Accessor{boost::make_unique<SubsystemMaintenanceID_Type>()},
    testEventSettings_Accessor{boost::make_unique<TestEventSettings>(0, SIZE_MAX)} {
}

SubsystemMaintenanceTestCommandPET::~SubsystemMaintenanceTestCommandPET() = default;

void SubsystemMaintenanceTestCommandPET::copy(const uci::type::SubsystemMaintenanceTestCommandPET& accessor) {
  copyImpl(accessor, false);
}

void SubsystemMaintenanceTestCommandPET::copyImpl(const uci::type::SubsystemMaintenanceTestCommandPET& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::subsystemMaintenanceTestCommandPET)) {
      const auto& accessorImpl = dynamic_cast<const SubsystemMaintenanceTestCommandPET&>(accessor);
      setTestID(*(accessorImpl.testID_Accessor));
      setTestEventSettings(*(accessorImpl.testEventSettings_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void SubsystemMaintenanceTestCommandPET::reset() noexcept {
  testID_Accessor->reset();
  testEventSettings_Accessor->reset();
}

const uci::type::SubsystemMaintenanceID_Type& SubsystemMaintenanceTestCommandPET::getTestID() const {
  return *testID_Accessor;
}

uci::type::SubsystemMaintenanceID_Type& SubsystemMaintenanceTestCommandPET::getTestID() {
  return *testID_Accessor;
}

uci::type::SubsystemMaintenanceTestCommandPET& SubsystemMaintenanceTestCommandPET::setTestID(const uci::type::SubsystemMaintenanceID_Type& accessor) {
  if (&accessor != testID_Accessor.get()) {
    testID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemMaintenanceTestCommandPET::TestEventSettings& SubsystemMaintenanceTestCommandPET::getTestEventSettings() const {
  return *testEventSettings_Accessor;
}

uci::type::SubsystemMaintenanceTestCommandPET::TestEventSettings& SubsystemMaintenanceTestCommandPET::getTestEventSettings() {
  return *testEventSettings_Accessor;
}

uci::type::SubsystemMaintenanceTestCommandPET& SubsystemMaintenanceTestCommandPET::setTestEventSettings(const uci::type::SubsystemMaintenanceTestCommandPET::TestEventSettings& accessor) {
  if (&accessor != testEventSettings_Accessor.get()) {
    testEventSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<SubsystemMaintenanceTestCommandPET> SubsystemMaintenanceTestCommandPET::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemMaintenanceTestCommandPET : type};
  return std::unique_ptr<SubsystemMaintenanceTestCommandPET>(dynamic_cast<SubsystemMaintenanceTestCommandPET*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace SubsystemMaintenanceTestCommandPET_Names {

constexpr const char* Extern_Type_Name{"SubsystemMaintenanceTestCommandPET"};
constexpr const char* TestID_Name{"TestID"};
constexpr const char* TestEventSettings_Name{"TestEventSettings"};

} // namespace SubsystemMaintenanceTestCommandPET_Names

void SubsystemMaintenanceTestCommandPET::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemMaintenanceTestCommandPET& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemMaintenanceTestCommandPET_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceTestCommandPET_Names::TestID_Name) {
      SubsystemMaintenanceID_Type::deserialize(valueType.second, accessor.getTestID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceTestCommandPET_Names::TestEventSettings_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemMaintenanceTestCommandPET::TestEventSettings& boundedList = accessor.getTestEventSettings();
        const uci::type::SubsystemMaintenanceTestCommandPET::TestEventSettings::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SubsystemMaintenanceEventSettingsConfigurationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string SubsystemMaintenanceTestCommandPET::serialize(const uci::type::SubsystemMaintenanceTestCommandPET& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemMaintenanceTestCommandPET_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::subsystemMaintenanceTestCommandPET)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemMaintenanceTestCommandPET_Names::Extern_Type_Name);
    }
    SubsystemMaintenanceID_Type::serialize(accessor.getTestID(), node, SubsystemMaintenanceTestCommandPET_Names::TestID_Name);
    {
      const uci::type::SubsystemMaintenanceTestCommandPET::TestEventSettings& boundedList = accessor.getTestEventSettings();
      for (uci::type::SubsystemMaintenanceTestCommandPET::TestEventSettings::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SubsystemMaintenanceEventSettingsConfigurationType::serialize(boundedList.at(i), node, SubsystemMaintenanceTestCommandPET_Names::TestEventSettings_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

