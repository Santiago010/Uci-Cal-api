/** @file LOS3D_CovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/LOS3D_CovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LOS3D_CovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LOS3D_CovarianceType::LOS3D_CovarianceType() = default;

LOS3D_CovarianceType::~LOS3D_CovarianceType() = default;

void LOS3D_CovarianceType::copy(const uci::type::LOS3D_CovarianceType& accessor) {
  copyImpl(accessor, false);
}

void LOS3D_CovarianceType::copyImpl(const uci::type::LOS3D_CovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LOS3D_CovarianceType&>(accessor);
    setRvRv(accessorImpl.rvRv_Accessor);
    setRvRh(accessorImpl.rvRh_Accessor);
    setRhRh(accessorImpl.rhRh_Accessor);
    if (accessorImpl.hasPsRv()) {
      setPsRv(accessorImpl.getPsRv());
    } else {
      clearPsRv();
    }
    if (accessorImpl.hasPsRh()) {
      setPsRh(accessorImpl.getPsRh());
    } else {
      clearPsRh();
    }
    if (accessorImpl.hasPsPs()) {
      setPsPs(accessorImpl.getPsPs());
    } else {
      clearPsPs();
    }
  }
}

void LOS3D_CovarianceType::reset() noexcept {
  rvRv_Accessor = 0.0;
  rvRh_Accessor = 0.0;
  rhRh_Accessor = 0.0;
  clearPsRv();
  clearPsRh();
  clearPsPs();
}

xs::Double LOS3D_CovarianceType::getRvRv() const {
  return rvRv_Accessor;
}

uci::type::LOS3D_CovarianceType& LOS3D_CovarianceType::setRvRv(xs::Double value) {
  rvRv_Accessor = value;
  return *this;
}


xs::Double LOS3D_CovarianceType::getRvRh() const {
  return rvRh_Accessor;
}

uci::type::LOS3D_CovarianceType& LOS3D_CovarianceType::setRvRh(xs::Double value) {
  rvRh_Accessor = value;
  return *this;
}


xs::Double LOS3D_CovarianceType::getRhRh() const {
  return rhRh_Accessor;
}

uci::type::LOS3D_CovarianceType& LOS3D_CovarianceType::setRhRh(xs::Double value) {
  rhRh_Accessor = value;
  return *this;
}


xs::Double LOS3D_CovarianceType::getPsRv() const {
  if (psRv_Accessor) {
    return *psRv_Accessor;
  }
  throw uci::base::UCIException("Error in getPsRv(): An attempt was made to get an optional field that was not enabled, call hasPsRv() to determine if it is safe to call getPsRv()");
}

uci::type::LOS3D_CovarianceType& LOS3D_CovarianceType::setPsRv(xs::Double value) {
  psRv_Accessor = value;
  return *this;
}

bool LOS3D_CovarianceType::hasPsRv() const noexcept {
  return psRv_Accessor.has_value();
}

uci::type::LOS3D_CovarianceType& LOS3D_CovarianceType::clearPsRv() noexcept {
  psRv_Accessor.reset();
  return *this;
}

xs::Double LOS3D_CovarianceType::getPsRh() const {
  if (psRh_Accessor) {
    return *psRh_Accessor;
  }
  throw uci::base::UCIException("Error in getPsRh(): An attempt was made to get an optional field that was not enabled, call hasPsRh() to determine if it is safe to call getPsRh()");
}

uci::type::LOS3D_CovarianceType& LOS3D_CovarianceType::setPsRh(xs::Double value) {
  psRh_Accessor = value;
  return *this;
}

bool LOS3D_CovarianceType::hasPsRh() const noexcept {
  return psRh_Accessor.has_value();
}

uci::type::LOS3D_CovarianceType& LOS3D_CovarianceType::clearPsRh() noexcept {
  psRh_Accessor.reset();
  return *this;
}

xs::Double LOS3D_CovarianceType::getPsPs() const {
  if (psPs_Accessor) {
    return *psPs_Accessor;
  }
  throw uci::base::UCIException("Error in getPsPs(): An attempt was made to get an optional field that was not enabled, call hasPsPs() to determine if it is safe to call getPsPs()");
}

uci::type::LOS3D_CovarianceType& LOS3D_CovarianceType::setPsPs(xs::Double value) {
  psPs_Accessor = value;
  return *this;
}

bool LOS3D_CovarianceType::hasPsPs() const noexcept {
  return psPs_Accessor.has_value();
}

uci::type::LOS3D_CovarianceType& LOS3D_CovarianceType::clearPsPs() noexcept {
  psPs_Accessor.reset();
  return *this;
}

std::unique_ptr<LOS3D_CovarianceType> LOS3D_CovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS3D_CovarianceType : type};
  return (requestedType == uci::type::accessorType::lOS3D_CovarianceType) ? boost::make_unique<LOS3D_CovarianceType>() : nullptr;
}

/**  */
namespace LOS3D_CovarianceType_Names {

constexpr const char* Extern_Type_Name{"LOS3D_CovarianceType"};
constexpr const char* RvRv_Name{"RvRv"};
constexpr const char* RvRh_Name{"RvRh"};
constexpr const char* RhRh_Name{"RhRh"};
constexpr const char* PsRv_Name{"PsRv"};
constexpr const char* PsRh_Name{"PsRh"};
constexpr const char* PsPs_Name{"PsPs"};

} // namespace LOS3D_CovarianceType_Names

void LOS3D_CovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LOS3D_CovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LOS3D_CovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LOS3D_CovarianceType_Names::RvRv_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRvRv(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LOS3D_CovarianceType_Names::RvRh_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRvRh(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LOS3D_CovarianceType_Names::RhRh_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRhRh(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LOS3D_CovarianceType_Names::PsRv_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPsRv(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LOS3D_CovarianceType_Names::PsRh_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPsRh(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LOS3D_CovarianceType_Names::PsPs_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPsPs(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string LOS3D_CovarianceType::serialize(const uci::type::LOS3D_CovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LOS3D_CovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LOS3D_CovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRvRv(), node, LOS3D_CovarianceType_Names::RvRv_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRvRh(), node, LOS3D_CovarianceType_Names::RvRh_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRhRh(), node, LOS3D_CovarianceType_Names::RhRh_Name);
  if (accessor.hasPsRv()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPsRv(), node, LOS3D_CovarianceType_Names::PsRv_Name);
  }
  if (accessor.hasPsRh()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPsRh(), node, LOS3D_CovarianceType_Names::PsRh_Name);
  }
  if (accessor.hasPsPs()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPsPs(), node, LOS3D_CovarianceType_Names::PsPs_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LOS3D_CovarianceType& LOS3D_CovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LOS3D_CovarianceType>().release());
}

uci::type::LOS3D_CovarianceType& LOS3D_CovarianceType::create(const uci::type::LOS3D_CovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LOS3D_CovarianceType> newAccessor{boost::make_unique<asb_uci::type::LOS3D_CovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LOS3D_CovarianceType::destroy(uci::type::LOS3D_CovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::LOS3D_CovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

