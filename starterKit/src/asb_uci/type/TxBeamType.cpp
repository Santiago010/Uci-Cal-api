/** @file TxBeamType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/TxBeamType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BeamID_Type.h"
#include "../../../include/asb_uci/type/BeamPointingReferenceType.h"
#include "../../../include/asb_uci/type/DateTimeRangeBeginType.h"
#include "../../../include/asb_uci/type/EA_EmissionType.h"
#include "../../../include/asb_uci/type/EA_PointingEnum.h"
#include "../../../include/asb_uci/type/Point3D_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnglePositiveType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BeamPointingReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeBeginType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EA_EmissionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EA_PointingEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MilliwattPowerRatioType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point3D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TxBeamType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TxBeamType::TxBeamType()
  : beamID_Accessor{boost::make_unique<BeamID_Type>()},
    time_Accessor{boost::make_unique<DateTimeRangeBeginType>()},
    trackingMode_Accessor{boost::make_unique<EA_PointingEnum>()},
    emission_Accessor{boost::make_unique<Emission>(1, SIZE_MAX)} {
}

TxBeamType::~TxBeamType() = default;

void TxBeamType::copy(const uci::type::TxBeamType& accessor) {
  copyImpl(accessor, false);
}

void TxBeamType::copyImpl(const uci::type::TxBeamType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const TxBeamType&>(accessor);
    setBeamID(*(accessorImpl.beamID_Accessor));
    if (accessorImpl.hasDutyCycle()) {
      setDutyCycle(accessorImpl.getDutyCycle());
    } else {
      clearDutyCycle();
    }
    if (accessorImpl.hasEffectiveRadiatedPower()) {
      setEffectiveRadiatedPower(accessorImpl.getEffectiveRadiatedPower());
    } else {
      clearEffectiveRadiatedPower();
    }
    setAzimuthWidth(accessorImpl.azimuthWidth_Accessor);
    setElevationWidth(accessorImpl.elevationWidth_Accessor);
    if (accessorImpl.startPosition_Accessor) {
      setStartPosition(*(accessorImpl.startPosition_Accessor));
    } else {
      startPosition_Accessor.reset();
    }
    setTime(*(accessorImpl.time_Accessor));
    setTrackingMode(*(accessorImpl.trackingMode_Accessor));
    setEmission(*(accessorImpl.emission_Accessor));
    if (accessorImpl.beamPointingReference_Accessor) {
      setBeamPointingReference(*(accessorImpl.beamPointingReference_Accessor));
    } else {
      beamPointingReference_Accessor.reset();
    }
  }
}

void TxBeamType::reset() noexcept {
  beamID_Accessor->reset();
  clearDutyCycle();
  clearEffectiveRadiatedPower();
  azimuthWidth_Accessor = 0.0;
  elevationWidth_Accessor = 0.0;
  startPosition_Accessor.reset();
  time_Accessor->reset();
  trackingMode_Accessor->reset();
  emission_Accessor->reset();
  beamPointingReference_Accessor.reset();
}

const uci::type::BeamID_Type& TxBeamType::getBeamID() const {
  return *beamID_Accessor;
}

uci::type::BeamID_Type& TxBeamType::getBeamID() {
  return *beamID_Accessor;
}

uci::type::TxBeamType& TxBeamType::setBeamID(const uci::type::BeamID_Type& accessor) {
  if (&accessor != beamID_Accessor.get()) {
    beamID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PercentTypeValue TxBeamType::getDutyCycle() const {
  if (dutyCycle_Accessor) {
    return *dutyCycle_Accessor;
  }
  throw uci::base::UCIException("Error in getDutyCycle(): An attempt was made to get an optional field that was not enabled, call hasDutyCycle() to determine if it is safe to call getDutyCycle()");
}

uci::type::TxBeamType& TxBeamType::setDutyCycle(uci::type::PercentTypeValue value) {
  dutyCycle_Accessor = value;
  return *this;
}

bool TxBeamType::hasDutyCycle() const noexcept {
  return dutyCycle_Accessor.has_value();
}

uci::type::TxBeamType& TxBeamType::clearDutyCycle() noexcept {
  dutyCycle_Accessor.reset();
  return *this;
}

uci::type::MilliwattPowerRatioTypeValue TxBeamType::getEffectiveRadiatedPower() const {
  if (effectiveRadiatedPower_Accessor) {
    return *effectiveRadiatedPower_Accessor;
  }
  throw uci::base::UCIException("Error in getEffectiveRadiatedPower(): An attempt was made to get an optional field that was not enabled, call hasEffectiveRadiatedPower() to determine if it is safe to call getEffectiveRadiatedPower()");
}

uci::type::TxBeamType& TxBeamType::setEffectiveRadiatedPower(uci::type::MilliwattPowerRatioTypeValue value) {
  effectiveRadiatedPower_Accessor = value;
  return *this;
}

bool TxBeamType::hasEffectiveRadiatedPower() const noexcept {
  return effectiveRadiatedPower_Accessor.has_value();
}

uci::type::TxBeamType& TxBeamType::clearEffectiveRadiatedPower() noexcept {
  effectiveRadiatedPower_Accessor.reset();
  return *this;
}

uci::type::AnglePositiveTypeValue TxBeamType::getAzimuthWidth() const {
  return azimuthWidth_Accessor;
}

uci::type::TxBeamType& TxBeamType::setAzimuthWidth(uci::type::AnglePositiveTypeValue value) {
  azimuthWidth_Accessor = value;
  return *this;
}


uci::type::AnglePositiveTypeValue TxBeamType::getElevationWidth() const {
  return elevationWidth_Accessor;
}

uci::type::TxBeamType& TxBeamType::setElevationWidth(uci::type::AnglePositiveTypeValue value) {
  elevationWidth_Accessor = value;
  return *this;
}


uci::type::Point3D_Type& TxBeamType::getStartPosition_() const {
  if (startPosition_Accessor) {
    return *startPosition_Accessor;
  }
  throw uci::base::UCIException("Error in getStartPosition(): An attempt was made to get an optional field that was not enabled, call hasStartPosition() to determine if it is safe to call getStartPosition()");
}

const uci::type::Point3D_Type& TxBeamType::getStartPosition() const {
  return getStartPosition_();
}

uci::type::Point3D_Type& TxBeamType::getStartPosition() {
  return getStartPosition_();
}

uci::type::TxBeamType& TxBeamType::setStartPosition(const uci::type::Point3D_Type& accessor) {
  enableStartPosition(accessor.getAccessorType());
  if (&accessor != startPosition_Accessor.get()) {
    startPosition_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool TxBeamType::hasStartPosition() const noexcept {
  return static_cast<bool>(startPosition_Accessor);
}

uci::type::Point3D_Type& TxBeamType::enableStartPosition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!startPosition_Accessor) || (startPosition_Accessor->getAccessorType() != requestedType)) {
    startPosition_Accessor = Point3D_Type::create(requestedType);
    if (!startPosition_Accessor) {
      throw uci::base::UCIException("Error in enableStartPosition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *startPosition_Accessor;
}

uci::type::TxBeamType& TxBeamType::clearStartPosition() noexcept {
  startPosition_Accessor.reset();
  return *this;
}

const uci::type::DateTimeRangeBeginType& TxBeamType::getTime() const {
  return *time_Accessor;
}

uci::type::DateTimeRangeBeginType& TxBeamType::getTime() {
  return *time_Accessor;
}

uci::type::TxBeamType& TxBeamType::setTime(const uci::type::DateTimeRangeBeginType& accessor) {
  if (&accessor != time_Accessor.get()) {
    time_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EA_PointingEnum& TxBeamType::getTrackingMode() const {
  return *trackingMode_Accessor;
}

uci::type::EA_PointingEnum& TxBeamType::getTrackingMode() {
  return *trackingMode_Accessor;
}

uci::type::TxBeamType& TxBeamType::setTrackingMode(const uci::type::EA_PointingEnum& accessor) {
  if (&accessor != trackingMode_Accessor.get()) {
    trackingMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TxBeamType& TxBeamType::setTrackingMode(uci::type::EA_PointingEnum::EnumerationItem value) {
  trackingMode_Accessor->setValue(value);
  return *this;
}


const uci::type::TxBeamType::Emission& TxBeamType::getEmission() const {
  return *emission_Accessor;
}

uci::type::TxBeamType::Emission& TxBeamType::getEmission() {
  return *emission_Accessor;
}

uci::type::TxBeamType& TxBeamType::setEmission(const uci::type::TxBeamType::Emission& accessor) {
  if (&accessor != emission_Accessor.get()) {
    emission_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::BeamPointingReferenceType& TxBeamType::getBeamPointingReference_() const {
  if (beamPointingReference_Accessor) {
    return *beamPointingReference_Accessor;
  }
  throw uci::base::UCIException("Error in getBeamPointingReference(): An attempt was made to get an optional field that was not enabled, call hasBeamPointingReference() to determine if it is safe to call getBeamPointingReference()");
}

const uci::type::BeamPointingReferenceType& TxBeamType::getBeamPointingReference() const {
  return getBeamPointingReference_();
}

uci::type::BeamPointingReferenceType& TxBeamType::getBeamPointingReference() {
  return getBeamPointingReference_();
}

uci::type::TxBeamType& TxBeamType::setBeamPointingReference(const uci::type::BeamPointingReferenceType& accessor) {
  enableBeamPointingReference();
  if (&accessor != beamPointingReference_Accessor.get()) {
    beamPointingReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool TxBeamType::hasBeamPointingReference() const noexcept {
  return static_cast<bool>(beamPointingReference_Accessor);
}

uci::type::BeamPointingReferenceType& TxBeamType::enableBeamPointingReference(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::beamPointingReferenceType : type};
  if ((!beamPointingReference_Accessor) || (beamPointingReference_Accessor->getAccessorType() != requestedType)) {
    beamPointingReference_Accessor = BeamPointingReferenceType::create(requestedType);
    if (!beamPointingReference_Accessor) {
      throw uci::base::UCIException("Error in enableBeamPointingReference(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *beamPointingReference_Accessor;
}

uci::type::TxBeamType& TxBeamType::clearBeamPointingReference() noexcept {
  beamPointingReference_Accessor.reset();
  return *this;
}

std::unique_ptr<TxBeamType> TxBeamType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::txBeamType : type};
  return (requestedType == uci::type::accessorType::txBeamType) ? boost::make_unique<TxBeamType>() : nullptr;
}

/**  */
namespace TxBeamType_Names {

constexpr const char* Extern_Type_Name{"TxBeamType"};
constexpr const char* BeamID_Name{"BeamID"};
constexpr const char* DutyCycle_Name{"DutyCycle"};
constexpr const char* EffectiveRadiatedPower_Name{"EffectiveRadiatedPower"};
constexpr const char* AzimuthWidth_Name{"AzimuthWidth"};
constexpr const char* ElevationWidth_Name{"ElevationWidth"};
constexpr const char* StartPosition_Name{"StartPosition"};
constexpr const char* Time_Name{"Time"};
constexpr const char* TrackingMode_Name{"TrackingMode"};
constexpr const char* Emission_Name{"Emission"};
constexpr const char* BeamPointingReference_Name{"BeamPointingReference"};

} // namespace TxBeamType_Names

void TxBeamType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TxBeamType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TxBeamType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TxBeamType_Names::BeamID_Name) {
      BeamID_Type::deserialize(valueType.second, accessor.getBeamID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TxBeamType_Names::DutyCycle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDutyCycle(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TxBeamType_Names::EffectiveRadiatedPower_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEffectiveRadiatedPower(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TxBeamType_Names::AzimuthWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzimuthWidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TxBeamType_Names::ElevationWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setElevationWidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TxBeamType_Names::StartPosition_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableStartPosition(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TxBeamType_Names::Time_Name) {
      DateTimeRangeBeginType::deserialize(valueType.second, accessor.getTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TxBeamType_Names::TrackingMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getTrackingMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + TxBeamType_Names::Emission_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::TxBeamType::Emission& boundedList = accessor.getEmission();
        const uci::type::TxBeamType::Emission::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EA_EmissionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + TxBeamType_Names::BeamPointingReference_Name) {
      BeamPointingReferenceType::deserialize(valueType.second, accessor.enableBeamPointingReference(), nodeName, nsPrefix);
    }
  }
}

std::string TxBeamType::serialize(const uci::type::TxBeamType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TxBeamType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, TxBeamType_Names::Extern_Type_Name);
  }
  BeamID_Type::serialize(accessor.getBeamID(), node, TxBeamType_Names::BeamID_Name);
  if (accessor.hasDutyCycle()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDutyCycle(), node, TxBeamType_Names::DutyCycle_Name);
  }
  if (accessor.hasEffectiveRadiatedPower()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEffectiveRadiatedPower(), node, TxBeamType_Names::EffectiveRadiatedPower_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAzimuthWidth(), node, TxBeamType_Names::AzimuthWidth_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getElevationWidth(), node, TxBeamType_Names::ElevationWidth_Name);
  if (accessor.hasStartPosition()) {
    Point3D_Type::serialize(accessor.getStartPosition(), node, TxBeamType_Names::StartPosition_Name);
  }
  DateTimeRangeBeginType::serialize(accessor.getTime(), node, TxBeamType_Names::Time_Name);
  EA_PointingEnum::serialize(accessor.getTrackingMode(), node, TxBeamType_Names::TrackingMode_Name, false);
  {
    const uci::type::TxBeamType::Emission& boundedList = accessor.getEmission();
    for (uci::type::TxBeamType::Emission::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EA_EmissionType::serialize(boundedList.at(i), node, TxBeamType_Names::Emission_Name);
    }
  }
  if (accessor.hasBeamPointingReference()) {
    BeamPointingReferenceType::serialize(accessor.getBeamPointingReference(), node, TxBeamType_Names::BeamPointingReference_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TxBeamType& TxBeamType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TxBeamType>().release());
}

uci::type::TxBeamType& TxBeamType::create(const uci::type::TxBeamType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TxBeamType> newAccessor{boost::make_unique<asb_uci::type::TxBeamType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TxBeamType::destroy(uci::type::TxBeamType& accessor) {
  delete dynamic_cast<asb_uci::type::TxBeamType*>(&accessor);
}

} // namespace type

} // namespace uci

