/** @file RequirementMetricsMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementMetricsMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PlansRequirementsReferenceType.h"
#include "asb_uci/type/RequirementMetricsID_Type.h"
#include "asb_uci/type/RequirementMetricsType.h"
#include "asb_uci/type/RequirementTaxonomyType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PlansRequirementsReferenceType.h"
#include "uci/type/RequirementMetricsID_Type.h"
#include "uci/type/RequirementMetricsMDT.h"
#include "uci/type/RequirementMetricsType.h"
#include "uci/type/RequirementTaxonomyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementMetricsMDT::RequirementMetricsMDT()
  : requirementMetricsID_Accessor{boost::make_unique<RequirementMetricsID_Type>()},
    requirementMetrics_Accessor{boost::make_unique<RequirementMetrics>(0, SIZE_MAX)} {
}

RequirementMetricsMDT::~RequirementMetricsMDT() = default;

void RequirementMetricsMDT::copy(const uci::type::RequirementMetricsMDT& accessor) {
  copyImpl(accessor, false);
}

void RequirementMetricsMDT::copyImpl(const uci::type::RequirementMetricsMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementMetricsMDT&>(accessor);
    setRequirementMetricsID(*(accessorImpl.requirementMetricsID_Accessor));
    setRequirementMetrics(*(accessorImpl.requirementMetrics_Accessor));
    if (accessorImpl.requirementPlans_Accessor) {
      setRequirementPlans(*(accessorImpl.requirementPlans_Accessor));
    } else {
      requirementPlans_Accessor.reset();
    }
    if (accessorImpl.requirementType_Accessor) {
      setRequirementType(*(accessorImpl.requirementType_Accessor));
    } else {
      requirementType_Accessor.reset();
    }
  }
}

void RequirementMetricsMDT::reset() noexcept {
  requirementMetricsID_Accessor->reset();
  requirementMetrics_Accessor->reset();
  requirementPlans_Accessor.reset();
  requirementType_Accessor.reset();
}

const uci::type::RequirementMetricsID_Type& RequirementMetricsMDT::getRequirementMetricsID() const {
  return *requirementMetricsID_Accessor;
}

uci::type::RequirementMetricsID_Type& RequirementMetricsMDT::getRequirementMetricsID() {
  return *requirementMetricsID_Accessor;
}

uci::type::RequirementMetricsMDT& RequirementMetricsMDT::setRequirementMetricsID(const uci::type::RequirementMetricsID_Type& accessor) {
  if (&accessor != requirementMetricsID_Accessor.get()) {
    requirementMetricsID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequirementMetricsMDT::RequirementMetrics& RequirementMetricsMDT::getRequirementMetrics() const {
  return *requirementMetrics_Accessor;
}

uci::type::RequirementMetricsMDT::RequirementMetrics& RequirementMetricsMDT::getRequirementMetrics() {
  return *requirementMetrics_Accessor;
}

uci::type::RequirementMetricsMDT& RequirementMetricsMDT::setRequirementMetrics(const uci::type::RequirementMetricsMDT::RequirementMetrics& accessor) {
  if (&accessor != requirementMetrics_Accessor.get()) {
    requirementMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlansRequirementsReferenceType& RequirementMetricsMDT::getRequirementPlans_() const {
  if (requirementPlans_Accessor) {
    return *requirementPlans_Accessor;
  }
  throw uci::base::UCIException("Error in getRequirementPlans(): An attempt was made to get an optional field that was not enabled, call hasRequirementPlans() to determine if it is safe to call getRequirementPlans()");
}

const uci::type::PlansRequirementsReferenceType& RequirementMetricsMDT::getRequirementPlans() const {
  return getRequirementPlans_();
}

uci::type::PlansRequirementsReferenceType& RequirementMetricsMDT::getRequirementPlans() {
  return getRequirementPlans_();
}

uci::type::RequirementMetricsMDT& RequirementMetricsMDT::setRequirementPlans(const uci::type::PlansRequirementsReferenceType& accessor) {
  enableRequirementPlans();
  if (&accessor != requirementPlans_Accessor.get()) {
    requirementPlans_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementMetricsMDT::hasRequirementPlans() const noexcept {
  return static_cast<bool>(requirementPlans_Accessor);
}

uci::type::PlansRequirementsReferenceType& RequirementMetricsMDT::enableRequirementPlans(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::plansRequirementsReferenceType : type};
  if ((!requirementPlans_Accessor) || (requirementPlans_Accessor->getAccessorType() != requestedType)) {
    requirementPlans_Accessor = PlansRequirementsReferenceType::create(requestedType);
    if (!requirementPlans_Accessor) {
      throw uci::base::UCIException("Error in enableRequirementPlans(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requirementPlans_Accessor;
}

uci::type::RequirementMetricsMDT& RequirementMetricsMDT::clearRequirementPlans() noexcept {
  requirementPlans_Accessor.reset();
  return *this;
}

uci::type::RequirementTaxonomyType& RequirementMetricsMDT::getRequirementType_() const {
  if (requirementType_Accessor) {
    return *requirementType_Accessor;
  }
  throw uci::base::UCIException("Error in getRequirementType(): An attempt was made to get an optional field that was not enabled, call hasRequirementType() to determine if it is safe to call getRequirementType()");
}

const uci::type::RequirementTaxonomyType& RequirementMetricsMDT::getRequirementType() const {
  return getRequirementType_();
}

uci::type::RequirementTaxonomyType& RequirementMetricsMDT::getRequirementType() {
  return getRequirementType_();
}

uci::type::RequirementMetricsMDT& RequirementMetricsMDT::setRequirementType(const uci::type::RequirementTaxonomyType& accessor) {
  enableRequirementType(accessor.getAccessorType());
  if (&accessor != requirementType_Accessor.get()) {
    requirementType_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RequirementMetricsMDT::hasRequirementType() const noexcept {
  return static_cast<bool>(requirementType_Accessor);
}

uci::type::RequirementTaxonomyType& RequirementMetricsMDT::enableRequirementType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementTaxonomyType : type};
  if ((!requirementType_Accessor) || (requirementType_Accessor->getAccessorType() != requestedType)) {
    requirementType_Accessor = RequirementTaxonomyType::create(requestedType);
    if (!requirementType_Accessor) {
      throw uci::base::UCIException("Error in enableRequirementType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requirementType_Accessor;
}

uci::type::RequirementMetricsMDT& RequirementMetricsMDT::clearRequirementType() noexcept {
  requirementType_Accessor.reset();
  return *this;
}

std::unique_ptr<RequirementMetricsMDT> RequirementMetricsMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementMetricsMDT : type};
  return (requestedType == uci::type::accessorType::requirementMetricsMDT) ? boost::make_unique<RequirementMetricsMDT>() : nullptr;
}

/**  */
namespace RequirementMetricsMDT_Names {

constexpr const char* Extern_Type_Name{"RequirementMetricsMDT"};
constexpr const char* RequirementMetricsID_Name{"RequirementMetricsID"};
constexpr const char* RequirementMetrics_Name{"RequirementMetrics"};
constexpr const char* RequirementPlans_Name{"RequirementPlans"};
constexpr const char* RequirementType_Name{"RequirementType"};

} // namespace RequirementMetricsMDT_Names

void RequirementMetricsMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementMetricsMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementMetricsMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementMetricsMDT_Names::RequirementMetricsID_Name) {
      RequirementMetricsID_Type::deserialize(valueType.second, accessor.getRequirementMetricsID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementMetricsMDT_Names::RequirementMetrics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementMetricsMDT::RequirementMetrics& boundedList = accessor.getRequirementMetrics();
        const uci::type::RequirementMetricsMDT::RequirementMetrics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RequirementMetricsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RequirementMetricsMDT_Names::RequirementPlans_Name) {
      PlansRequirementsReferenceType::deserialize(valueType.second, accessor.enableRequirementPlans(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementMetricsMDT_Names::RequirementType_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRequirementType(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string RequirementMetricsMDT::serialize(const uci::type::RequirementMetricsMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementMetricsMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementMetricsMDT_Names::Extern_Type_Name);
  }
  RequirementMetricsID_Type::serialize(accessor.getRequirementMetricsID(), node, RequirementMetricsMDT_Names::RequirementMetricsID_Name);
  {
    const uci::type::RequirementMetricsMDT::RequirementMetrics& boundedList = accessor.getRequirementMetrics();
    for (uci::type::RequirementMetricsMDT::RequirementMetrics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementMetricsType::serialize(boundedList.at(i), node, RequirementMetricsMDT_Names::RequirementMetrics_Name);
    }
  }
  if (accessor.hasRequirementPlans()) {
    PlansRequirementsReferenceType::serialize(accessor.getRequirementPlans(), node, RequirementMetricsMDT_Names::RequirementPlans_Name);
  }
  if (accessor.hasRequirementType()) {
    RequirementTaxonomyType::serialize(accessor.getRequirementType(), node, RequirementMetricsMDT_Names::RequirementType_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementMetricsMDT& RequirementMetricsMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementMetricsMDT>().release());
}

uci::type::RequirementMetricsMDT& RequirementMetricsMDT::create(const uci::type::RequirementMetricsMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementMetricsMDT> newAccessor{boost::make_unique<asb_uci::type::RequirementMetricsMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementMetricsMDT::destroy(uci::type::RequirementMetricsMDT& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementMetricsMDT*>(&accessor);
}

} // namespace type

} // namespace uci

