/** @file IFF_ModeSelectionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/IFF_ModeSelectionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/IFF_ModesEnum.h"
#include "asb_uci/type/ModeS_OptionsType.h"
#include "asb_uci/type/OctalValueType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/IFF_Mode5_FormatType.h"
#include "uci/type/IFF_ModeSelectionType.h"
#include "uci/type/IFF_ModesEnum.h"
#include "uci/type/ModeS_OptionsType.h"
#include "uci/type/OctalValueType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IFF_ModeSelectionType::IFF_ModeSelectionType()
  : iFF_Mode_Accessor{boost::make_unique<IFF_ModesEnum>()},
    modeS_AircraftAddress_Accessor{boost::make_unique<ModeS_AircraftAddress>(0, SIZE_MAX)},
    eHS_BDS_Registers_Accessor{boost::make_unique<EHS_BDS_Registers>(0, SIZE_MAX)} {
}

IFF_ModeSelectionType::~IFF_ModeSelectionType() = default;

void IFF_ModeSelectionType::copy(const uci::type::IFF_ModeSelectionType& accessor) {
  copyImpl(accessor, false);
}

void IFF_ModeSelectionType::copyImpl(const uci::type::IFF_ModeSelectionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IFF_ModeSelectionType&>(accessor);
    setIFF_Mode(*(accessorImpl.iFF_Mode_Accessor));
    if (accessorImpl.hasMode5Format()) {
      setMode5Format(accessorImpl.getMode5Format());
    } else {
      clearMode5Format();
    }
    setSuppressionPulse(accessorImpl.suppressionPulse_Accessor);
    setModeS_AircraftAddress(*(accessorImpl.modeS_AircraftAddress_Accessor));
    setEHS_BDS_Registers(*(accessorImpl.eHS_BDS_Registers_Accessor));
    if (accessorImpl.modeS_Options_Accessor) {
      setModeS_Options(*(accessorImpl.modeS_Options_Accessor));
    } else {
      modeS_Options_Accessor.reset();
    }
  }
}

void IFF_ModeSelectionType::reset() noexcept {
  iFF_Mode_Accessor->reset();
  clearMode5Format();
  suppressionPulse_Accessor = false;
  modeS_AircraftAddress_Accessor->reset();
  eHS_BDS_Registers_Accessor->reset();
  modeS_Options_Accessor.reset();
}

const uci::type::IFF_ModesEnum& IFF_ModeSelectionType::getIFF_Mode() const {
  return *iFF_Mode_Accessor;
}

uci::type::IFF_ModesEnum& IFF_ModeSelectionType::getIFF_Mode() {
  return *iFF_Mode_Accessor;
}

uci::type::IFF_ModeSelectionType& IFF_ModeSelectionType::setIFF_Mode(const uci::type::IFF_ModesEnum& accessor) {
  if (&accessor != iFF_Mode_Accessor.get()) {
    iFF_Mode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IFF_ModeSelectionType& IFF_ModeSelectionType::setIFF_Mode(uci::type::IFF_ModesEnum::EnumerationItem value) {
  iFF_Mode_Accessor->setValue(value);
  return *this;
}


uci::type::IFF_Mode5_FormatTypeValue IFF_ModeSelectionType::getMode5Format() const {
  if (mode5Format_Accessor) {
    return *mode5Format_Accessor;
  }
  throw uci::base::UCIException("Error in getMode5Format(): An attempt was made to get an optional field that was not enabled, call hasMode5Format() to determine if it is safe to call getMode5Format()");
}

uci::type::IFF_ModeSelectionType& IFF_ModeSelectionType::setMode5Format(uci::type::IFF_Mode5_FormatTypeValue value) {
  mode5Format_Accessor = value;
  return *this;
}

bool IFF_ModeSelectionType::hasMode5Format() const noexcept {
  return mode5Format_Accessor.has_value();
}

uci::type::IFF_ModeSelectionType& IFF_ModeSelectionType::clearMode5Format() noexcept {
  mode5Format_Accessor.reset();
  return *this;
}

xs::Boolean IFF_ModeSelectionType::getSuppressionPulse() const {
  return suppressionPulse_Accessor;
}

uci::type::IFF_ModeSelectionType& IFF_ModeSelectionType::setSuppressionPulse(xs::Boolean value) {
  suppressionPulse_Accessor = value;
  return *this;
}


const uci::type::IFF_ModeSelectionType::ModeS_AircraftAddress& IFF_ModeSelectionType::getModeS_AircraftAddress() const {
  return *modeS_AircraftAddress_Accessor;
}

uci::type::IFF_ModeSelectionType::ModeS_AircraftAddress& IFF_ModeSelectionType::getModeS_AircraftAddress() {
  return *modeS_AircraftAddress_Accessor;
}

uci::type::IFF_ModeSelectionType& IFF_ModeSelectionType::setModeS_AircraftAddress(const uci::type::IFF_ModeSelectionType::ModeS_AircraftAddress& accessor) {
  if (&accessor != modeS_AircraftAddress_Accessor.get()) {
    modeS_AircraftAddress_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IFF_ModeSelectionType::EHS_BDS_Registers& IFF_ModeSelectionType::getEHS_BDS_Registers() const {
  return *eHS_BDS_Registers_Accessor;
}

uci::type::IFF_ModeSelectionType::EHS_BDS_Registers& IFF_ModeSelectionType::getEHS_BDS_Registers() {
  return *eHS_BDS_Registers_Accessor;
}

uci::type::IFF_ModeSelectionType& IFF_ModeSelectionType::setEHS_BDS_Registers(const uci::type::IFF_ModeSelectionType::EHS_BDS_Registers& accessor) {
  if (&accessor != eHS_BDS_Registers_Accessor.get()) {
    eHS_BDS_Registers_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ModeS_OptionsType& IFF_ModeSelectionType::getModeS_Options_() const {
  if (modeS_Options_Accessor) {
    return *modeS_Options_Accessor;
  }
  throw uci::base::UCIException("Error in getModeS_Options(): An attempt was made to get an optional field that was not enabled, call hasModeS_Options() to determine if it is safe to call getModeS_Options()");
}

const uci::type::ModeS_OptionsType& IFF_ModeSelectionType::getModeS_Options() const {
  return getModeS_Options_();
}

uci::type::ModeS_OptionsType& IFF_ModeSelectionType::getModeS_Options() {
  return getModeS_Options_();
}

uci::type::IFF_ModeSelectionType& IFF_ModeSelectionType::setModeS_Options(const uci::type::ModeS_OptionsType& accessor) {
  enableModeS_Options();
  if (&accessor != modeS_Options_Accessor.get()) {
    modeS_Options_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_ModeSelectionType::hasModeS_Options() const noexcept {
  return static_cast<bool>(modeS_Options_Accessor);
}

uci::type::ModeS_OptionsType& IFF_ModeSelectionType::enableModeS_Options(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::modeS_OptionsType : type};
  if ((!modeS_Options_Accessor) || (modeS_Options_Accessor->getAccessorType() != requestedType)) {
    modeS_Options_Accessor = ModeS_OptionsType::create(requestedType);
    if (!modeS_Options_Accessor) {
      throw uci::base::UCIException("Error in enableModeS_Options(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modeS_Options_Accessor;
}

uci::type::IFF_ModeSelectionType& IFF_ModeSelectionType::clearModeS_Options() noexcept {
  modeS_Options_Accessor.reset();
  return *this;
}

std::unique_ptr<IFF_ModeSelectionType> IFF_ModeSelectionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_ModeSelectionType : type};
  return (requestedType == uci::type::accessorType::iFF_ModeSelectionType) ? boost::make_unique<IFF_ModeSelectionType>() : nullptr;
}

/**  */
namespace IFF_ModeSelectionType_Names {

constexpr const char* Extern_Type_Name{"IFF_ModeSelectionType"};
constexpr const char* IFF_Mode_Name{"IFF_Mode"};
constexpr const char* Mode5Format_Name{"Mode5Format"};
constexpr const char* SuppressionPulse_Name{"SuppressionPulse"};
constexpr const char* ModeS_AircraftAddress_Name{"ModeS_AircraftAddress"};
constexpr const char* EHS_BDS_Registers_Name{"EHS_BDS_Registers"};
constexpr const char* ModeS_Options_Name{"ModeS_Options"};

} // namespace IFF_ModeSelectionType_Names

void IFF_ModeSelectionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IFF_ModeSelectionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IFF_ModeSelectionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IFF_ModeSelectionType_Names::IFF_Mode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getIFF_Mode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_ModeSelectionType_Names::Mode5Format_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMode5Format(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + IFF_ModeSelectionType_Names::SuppressionPulse_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSuppressionPulse(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + IFF_ModeSelectionType_Names::ModeS_AircraftAddress_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IFF_ModeSelectionType::ModeS_AircraftAddress& boundedList = accessor.getModeS_AircraftAddress();
        const uci::type::IFF_ModeSelectionType::ModeS_AircraftAddress::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_ModeSelectionType_Names::EHS_BDS_Registers_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IFF_ModeSelectionType::EHS_BDS_Registers& boundedList = accessor.getEHS_BDS_Registers();
        const uci::type::IFF_ModeSelectionType::EHS_BDS_Registers::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::util::SerializationHelpers::deserializeHexBinary(*value, boundedList.at(boundedListSize));
      }
    } else if (valueType.first == nsPrefix + IFF_ModeSelectionType_Names::ModeS_Options_Name) {
      ModeS_OptionsType::deserialize(valueType.second, accessor.enableModeS_Options(), nodeName, nsPrefix);
    }
  }
}

std::string IFF_ModeSelectionType::serialize(const uci::type::IFF_ModeSelectionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IFF_ModeSelectionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IFF_ModeSelectionType_Names::Extern_Type_Name);
  }
  IFF_ModesEnum::serialize(accessor.getIFF_Mode(), node, IFF_ModeSelectionType_Names::IFF_Mode_Name, false);
  if (accessor.hasMode5Format()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getMode5Format(), node, IFF_ModeSelectionType_Names::Mode5Format_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSuppressionPulse(), node, IFF_ModeSelectionType_Names::SuppressionPulse_Name);
  {
    const uci::type::IFF_ModeSelectionType::ModeS_AircraftAddress& boundedList = accessor.getModeS_AircraftAddress();
    for (uci::type::IFF_ModeSelectionType::ModeS_AircraftAddress::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, IFF_ModeSelectionType_Names::ModeS_AircraftAddress_Name);
    }
  }
  {
    const uci::type::IFF_ModeSelectionType::EHS_BDS_Registers& boundedList = accessor.getEHS_BDS_Registers();
    for (uci::type::IFF_ModeSelectionType::EHS_BDS_Registers::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeHexBinary(boundedList.at(i), node, IFF_ModeSelectionType_Names::EHS_BDS_Registers_Name);
    }
  }
  if (accessor.hasModeS_Options()) {
    ModeS_OptionsType::serialize(accessor.getModeS_Options(), node, IFF_ModeSelectionType_Names::ModeS_Options_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IFF_ModeSelectionType& IFF_ModeSelectionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IFF_ModeSelectionType>().release());
}

uci::type::IFF_ModeSelectionType& IFF_ModeSelectionType::create(const uci::type::IFF_ModeSelectionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IFF_ModeSelectionType> newAccessor{boost::make_unique<asb_uci::type::IFF_ModeSelectionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IFF_ModeSelectionType::destroy(uci::type::IFF_ModeSelectionType& accessor) {
  delete dynamic_cast<asb_uci::type::IFF_ModeSelectionType*>(&accessor);
}

} // namespace type

} // namespace uci

