/** @file RadarAltimeterActivityPredictedActivityDetailType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RadarAltimeterActivityPredictedActivityDetailType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityStateEnum.h"
#include "../../../include/asb_uci/type/CannotComplyType.h"
#include "../../../include/asb_uci/type/RadarAltimeterActivityEstimatedPerformanceType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CannotComplyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadarAltimeterActivityEstimatedPerformanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RadarAltimeterActivityPredictedActivityDetailType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RadarAltimeterActivityPredictedActivityDetailType::RadarAltimeterActivityPredictedActivityDetailType() = default;

RadarAltimeterActivityPredictedActivityDetailType::~RadarAltimeterActivityPredictedActivityDetailType() = default;

void RadarAltimeterActivityPredictedActivityDetailType::copy(const uci::type::RadarAltimeterActivityPredictedActivityDetailType& accessor) {
  copyImpl(accessor, false);
}

void RadarAltimeterActivityPredictedActivityDetailType::copyImpl(const uci::type::RadarAltimeterActivityPredictedActivityDetailType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RadarAltimeterActivityPredictedActivityDetailType&>(accessor);
    if (accessorImpl.activityState_Accessor) {
      setActivityState(*(accessorImpl.activityState_Accessor));
    } else {
      activityState_Accessor.reset();
    }
    if (accessorImpl.activityReason_Accessor) {
      setActivityReason(*(accessorImpl.activityReason_Accessor));
    } else {
      activityReason_Accessor.reset();
    }
    if (accessorImpl.hasEstimatedRevisitPeriod()) {
      setEstimatedRevisitPeriod(accessorImpl.getEstimatedRevisitPeriod());
    } else {
      clearEstimatedRevisitPeriod();
    }
    if (accessorImpl.hasEstimatedPercentageInFOV()) {
      setEstimatedPercentageInFOV(accessorImpl.getEstimatedPercentageInFOV());
    } else {
      clearEstimatedPercentageInFOV();
    }
    if (accessorImpl.hasEstimatedStartTime()) {
      setEstimatedStartTime(accessorImpl.getEstimatedStartTime());
    } else {
      clearEstimatedStartTime();
    }
    if (accessorImpl.hasEstimatedStopTime()) {
      setEstimatedStopTime(accessorImpl.getEstimatedStopTime());
    } else {
      clearEstimatedStopTime();
    }
    if (accessorImpl.hasEstimatedERP()) {
      setEstimatedERP(accessorImpl.getEstimatedERP());
    } else {
      clearEstimatedERP();
    }
    if (accessorImpl.estimatedPerformance_Accessor) {
      setEstimatedPerformance(*(accessorImpl.estimatedPerformance_Accessor));
    } else {
      estimatedPerformance_Accessor.reset();
    }
    setConcurrentExecutionAssumed(accessorImpl.concurrentExecutionAssumed_Accessor);
  }
}

void RadarAltimeterActivityPredictedActivityDetailType::reset() noexcept {
  activityState_Accessor.reset();
  activityReason_Accessor.reset();
  clearEstimatedRevisitPeriod();
  clearEstimatedPercentageInFOV();
  clearEstimatedStartTime();
  clearEstimatedStopTime();
  clearEstimatedERP();
  estimatedPerformance_Accessor.reset();
  concurrentExecutionAssumed_Accessor = false;
}

uci::type::ActivityStateEnum& RadarAltimeterActivityPredictedActivityDetailType::getActivityState_() const {
  if (activityState_Accessor) {
    return *activityState_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityState(): An attempt was made to get an optional field that was not enabled, call hasActivityState() to determine if it is safe to call getActivityState()");
}

const uci::type::ActivityStateEnum& RadarAltimeterActivityPredictedActivityDetailType::getActivityState() const {
  return getActivityState_();
}

uci::type::ActivityStateEnum& RadarAltimeterActivityPredictedActivityDetailType::getActivityState() {
  return getActivityState_();
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::setActivityState(const uci::type::ActivityStateEnum& accessor) {
  enableActivityState();
  if (&accessor != activityState_Accessor.get()) {
    activityState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::setActivityState(const uci::type::ActivityStateEnum::EnumerationItem value) {
  enableActivityState().setValue(value);
  return *this;
}

bool RadarAltimeterActivityPredictedActivityDetailType::hasActivityState() const noexcept {
  return static_cast<bool>(activityState_Accessor);
}

uci::type::ActivityStateEnum& RadarAltimeterActivityPredictedActivityDetailType::enableActivityState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityStateEnum : type};
  if ((!activityState_Accessor) || (activityState_Accessor->getAccessorType() != requestedType)) {
    activityState_Accessor = ActivityStateEnum::create(requestedType);
    if (!activityState_Accessor) {
      throw uci::base::UCIException("Error in enableActivityState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityState_Accessor;
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::clearActivityState() noexcept {
  activityState_Accessor.reset();
  return *this;
}

uci::type::CannotComplyType& RadarAltimeterActivityPredictedActivityDetailType::getActivityReason_() const {
  if (activityReason_Accessor) {
    return *activityReason_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityReason(): An attempt was made to get an optional field that was not enabled, call hasActivityReason() to determine if it is safe to call getActivityReason()");
}

const uci::type::CannotComplyType& RadarAltimeterActivityPredictedActivityDetailType::getActivityReason() const {
  return getActivityReason_();
}

uci::type::CannotComplyType& RadarAltimeterActivityPredictedActivityDetailType::getActivityReason() {
  return getActivityReason_();
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::setActivityReason(const uci::type::CannotComplyType& accessor) {
  enableActivityReason(accessor.getAccessorType());
  if (&accessor != activityReason_Accessor.get()) {
    activityReason_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RadarAltimeterActivityPredictedActivityDetailType::hasActivityReason() const noexcept {
  return static_cast<bool>(activityReason_Accessor);
}

uci::type::CannotComplyType& RadarAltimeterActivityPredictedActivityDetailType::enableActivityReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!activityReason_Accessor) || (activityReason_Accessor->getAccessorType() != requestedType)) {
    activityReason_Accessor = CannotComplyType::create(requestedType);
    if (!activityReason_Accessor) {
      throw uci::base::UCIException("Error in enableActivityReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityReason_Accessor;
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::clearActivityReason() noexcept {
  activityReason_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue RadarAltimeterActivityPredictedActivityDetailType::getEstimatedRevisitPeriod() const {
  if (estimatedRevisitPeriod_Accessor) {
    return *estimatedRevisitPeriod_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedRevisitPeriod(): An attempt was made to get an optional field that was not enabled, call hasEstimatedRevisitPeriod() to determine if it is safe to call getEstimatedRevisitPeriod()");
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::setEstimatedRevisitPeriod(uci::type::DurationTypeValue value) {
  estimatedRevisitPeriod_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityPredictedActivityDetailType::hasEstimatedRevisitPeriod() const noexcept {
  return estimatedRevisitPeriod_Accessor.has_value();
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::clearEstimatedRevisitPeriod() noexcept {
  estimatedRevisitPeriod_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue RadarAltimeterActivityPredictedActivityDetailType::getEstimatedPercentageInFOV() const {
  if (estimatedPercentageInFOV_Accessor) {
    return *estimatedPercentageInFOV_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedPercentageInFOV(): An attempt was made to get an optional field that was not enabled, call hasEstimatedPercentageInFOV() to determine if it is safe to call getEstimatedPercentageInFOV()");
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::setEstimatedPercentageInFOV(uci::type::PercentTypeValue value) {
  estimatedPercentageInFOV_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityPredictedActivityDetailType::hasEstimatedPercentageInFOV() const noexcept {
  return estimatedPercentageInFOV_Accessor.has_value();
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::clearEstimatedPercentageInFOV() noexcept {
  estimatedPercentageInFOV_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue RadarAltimeterActivityPredictedActivityDetailType::getEstimatedStartTime() const {
  if (estimatedStartTime_Accessor) {
    return *estimatedStartTime_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedStartTime(): An attempt was made to get an optional field that was not enabled, call hasEstimatedStartTime() to determine if it is safe to call getEstimatedStartTime()");
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::setEstimatedStartTime(uci::type::DateTimeTypeValue value) {
  estimatedStartTime_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityPredictedActivityDetailType::hasEstimatedStartTime() const noexcept {
  return estimatedStartTime_Accessor.has_value();
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::clearEstimatedStartTime() noexcept {
  estimatedStartTime_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue RadarAltimeterActivityPredictedActivityDetailType::getEstimatedStopTime() const {
  if (estimatedStopTime_Accessor) {
    return *estimatedStopTime_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedStopTime(): An attempt was made to get an optional field that was not enabled, call hasEstimatedStopTime() to determine if it is safe to call getEstimatedStopTime()");
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::setEstimatedStopTime(uci::type::DateTimeTypeValue value) {
  estimatedStopTime_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityPredictedActivityDetailType::hasEstimatedStopTime() const noexcept {
  return estimatedStopTime_Accessor.has_value();
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::clearEstimatedStopTime() noexcept {
  estimatedStopTime_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue RadarAltimeterActivityPredictedActivityDetailType::getEstimatedERP() const {
  if (estimatedERP_Accessor) {
    return *estimatedERP_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedERP(): An attempt was made to get an optional field that was not enabled, call hasEstimatedERP() to determine if it is safe to call getEstimatedERP()");
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::setEstimatedERP(uci::type::DecibelTypeValue value) {
  estimatedERP_Accessor = value;
  return *this;
}

bool RadarAltimeterActivityPredictedActivityDetailType::hasEstimatedERP() const noexcept {
  return estimatedERP_Accessor.has_value();
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::clearEstimatedERP() noexcept {
  estimatedERP_Accessor.reset();
  return *this;
}

uci::type::RadarAltimeterActivityEstimatedPerformanceType& RadarAltimeterActivityPredictedActivityDetailType::getEstimatedPerformance_() const {
  if (estimatedPerformance_Accessor) {
    return *estimatedPerformance_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedPerformance(): An attempt was made to get an optional field that was not enabled, call hasEstimatedPerformance() to determine if it is safe to call getEstimatedPerformance()");
}

const uci::type::RadarAltimeterActivityEstimatedPerformanceType& RadarAltimeterActivityPredictedActivityDetailType::getEstimatedPerformance() const {
  return getEstimatedPerformance_();
}

uci::type::RadarAltimeterActivityEstimatedPerformanceType& RadarAltimeterActivityPredictedActivityDetailType::getEstimatedPerformance() {
  return getEstimatedPerformance_();
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::setEstimatedPerformance(const uci::type::RadarAltimeterActivityEstimatedPerformanceType& accessor) {
  enableEstimatedPerformance();
  if (&accessor != estimatedPerformance_Accessor.get()) {
    estimatedPerformance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RadarAltimeterActivityPredictedActivityDetailType::hasEstimatedPerformance() const noexcept {
  return static_cast<bool>(estimatedPerformance_Accessor);
}

uci::type::RadarAltimeterActivityEstimatedPerformanceType& RadarAltimeterActivityPredictedActivityDetailType::enableEstimatedPerformance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarAltimeterActivityEstimatedPerformanceType : type};
  if ((!estimatedPerformance_Accessor) || (estimatedPerformance_Accessor->getAccessorType() != requestedType)) {
    estimatedPerformance_Accessor = RadarAltimeterActivityEstimatedPerformanceType::create(requestedType);
    if (!estimatedPerformance_Accessor) {
      throw uci::base::UCIException("Error in enableEstimatedPerformance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *estimatedPerformance_Accessor;
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::clearEstimatedPerformance() noexcept {
  estimatedPerformance_Accessor.reset();
  return *this;
}

xs::Boolean RadarAltimeterActivityPredictedActivityDetailType::getConcurrentExecutionAssumed() const {
  return concurrentExecutionAssumed_Accessor;
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::setConcurrentExecutionAssumed(xs::Boolean value) {
  concurrentExecutionAssumed_Accessor = value;
  return *this;
}


std::unique_ptr<RadarAltimeterActivityPredictedActivityDetailType> RadarAltimeterActivityPredictedActivityDetailType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarAltimeterActivityPredictedActivityDetailType : type};
  return (requestedType == uci::type::accessorType::radarAltimeterActivityPredictedActivityDetailType) ? boost::make_unique<RadarAltimeterActivityPredictedActivityDetailType>() : nullptr;
}

/**  */
namespace RadarAltimeterActivityPredictedActivityDetailType_Names {

constexpr const char* Extern_Type_Name{"RadarAltimeterActivityPredictedActivityDetailType"};
constexpr const char* ActivityState_Name{"ActivityState"};
constexpr const char* ActivityReason_Name{"ActivityReason"};
constexpr const char* EstimatedRevisitPeriod_Name{"EstimatedRevisitPeriod"};
constexpr const char* EstimatedPercentageInFOV_Name{"EstimatedPercentageInFOV"};
constexpr const char* EstimatedStartTime_Name{"EstimatedStartTime"};
constexpr const char* EstimatedStopTime_Name{"EstimatedStopTime"};
constexpr const char* EstimatedERP_Name{"EstimatedERP"};
constexpr const char* EstimatedPerformance_Name{"EstimatedPerformance"};
constexpr const char* ConcurrentExecutionAssumed_Name{"ConcurrentExecutionAssumed"};

} // namespace RadarAltimeterActivityPredictedActivityDetailType_Names

void RadarAltimeterActivityPredictedActivityDetailType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RadarAltimeterActivityPredictedActivityDetailType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RadarAltimeterActivityPredictedActivityDetailType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityPredictedActivityDetailType_Names::ActivityState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableActivityState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityPredictedActivityDetailType_Names::ActivityReason_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableActivityReason(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityPredictedActivityDetailType_Names::EstimatedRevisitPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedRevisitPeriod(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityPredictedActivityDetailType_Names::EstimatedPercentageInFOV_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedPercentageInFOV(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityPredictedActivityDetailType_Names::EstimatedStartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedStartTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityPredictedActivityDetailType_Names::EstimatedStopTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedStopTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityPredictedActivityDetailType_Names::EstimatedERP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedERP(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityPredictedActivityDetailType_Names::EstimatedPerformance_Name) {
      RadarAltimeterActivityEstimatedPerformanceType::deserialize(valueType.second, accessor.enableEstimatedPerformance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityPredictedActivityDetailType_Names::ConcurrentExecutionAssumed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConcurrentExecutionAssumed(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string RadarAltimeterActivityPredictedActivityDetailType::serialize(const uci::type::RadarAltimeterActivityPredictedActivityDetailType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RadarAltimeterActivityPredictedActivityDetailType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RadarAltimeterActivityPredictedActivityDetailType_Names::Extern_Type_Name);
  }
  if (accessor.hasActivityState()) {
    ActivityStateEnum::serialize(accessor.getActivityState(), node, RadarAltimeterActivityPredictedActivityDetailType_Names::ActivityState_Name, false);
  }
  if (accessor.hasActivityReason()) {
    CannotComplyType::serialize(accessor.getActivityReason(), node, RadarAltimeterActivityPredictedActivityDetailType_Names::ActivityReason_Name);
  }
  if (accessor.hasEstimatedRevisitPeriod()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getEstimatedRevisitPeriod(), node, RadarAltimeterActivityPredictedActivityDetailType_Names::EstimatedRevisitPeriod_Name);
  }
  if (accessor.hasEstimatedPercentageInFOV()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedPercentageInFOV(), node, RadarAltimeterActivityPredictedActivityDetailType_Names::EstimatedPercentageInFOV_Name);
  }
  if (accessor.hasEstimatedStartTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEstimatedStartTime(), node, RadarAltimeterActivityPredictedActivityDetailType_Names::EstimatedStartTime_Name);
  }
  if (accessor.hasEstimatedStopTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEstimatedStopTime(), node, RadarAltimeterActivityPredictedActivityDetailType_Names::EstimatedStopTime_Name);
  }
  if (accessor.hasEstimatedERP()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedERP(), node, RadarAltimeterActivityPredictedActivityDetailType_Names::EstimatedERP_Name);
  }
  if (accessor.hasEstimatedPerformance()) {
    RadarAltimeterActivityEstimatedPerformanceType::serialize(accessor.getEstimatedPerformance(), node, RadarAltimeterActivityPredictedActivityDetailType_Names::EstimatedPerformance_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getConcurrentExecutionAssumed(), node, RadarAltimeterActivityPredictedActivityDetailType_Names::ConcurrentExecutionAssumed_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RadarAltimeterActivityPredictedActivityDetailType>().release());
}

uci::type::RadarAltimeterActivityPredictedActivityDetailType& RadarAltimeterActivityPredictedActivityDetailType::create(const uci::type::RadarAltimeterActivityPredictedActivityDetailType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RadarAltimeterActivityPredictedActivityDetailType> newAccessor{boost::make_unique<asb_uci::type::RadarAltimeterActivityPredictedActivityDetailType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RadarAltimeterActivityPredictedActivityDetailType::destroy(uci::type::RadarAltimeterActivityPredictedActivityDetailType& accessor) {
  delete dynamic_cast<asb_uci::type::RadarAltimeterActivityPredictedActivityDetailType*>(&accessor);
}

} // namespace type

} // namespace uci

