/** @file RequirementTemplateOptionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementTemplateOptionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityCommandTemporalConstraintsType.h"
#include "asb_uci/type/RequirementConstraintsType.h"
#include "asb_uci/type/ResponseOptionType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityCommandTemporalConstraintsType.h"
#include "uci/type/RequirementConstraintsType.h"
#include "uci/type/RequirementTemplateOptionType.h"
#include "uci/type/ResponseOptionType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementTemplateOptionType::RequirementTemplateOptionType()
  : requirement_Accessor{boost::make_unique<ResponseOptionType>()} {
}

RequirementTemplateOptionType::~RequirementTemplateOptionType() = default;

void RequirementTemplateOptionType::copy(const uci::type::RequirementTemplateOptionType& accessor) {
  copyImpl(accessor, false);
}

void RequirementTemplateOptionType::copyImpl(const uci::type::RequirementTemplateOptionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementTemplateOptionType&>(accessor);
    setRequirementOptionIndex(accessorImpl.requirementOptionIndex_Accessor);
    setRequirement(*(accessorImpl.requirement_Accessor));
    if (accessorImpl.requirementConstraints_Accessor) {
      setRequirementConstraints(*(accessorImpl.requirementConstraints_Accessor));
    } else {
      requirementConstraints_Accessor.reset();
    }
    if (accessorImpl.timingConstraints_Accessor) {
      setTimingConstraints(*(accessorImpl.timingConstraints_Accessor));
    } else {
      timingConstraints_Accessor.reset();
    }
  }
}

void RequirementTemplateOptionType::reset() noexcept {
  requirementOptionIndex_Accessor = 0;
  requirement_Accessor->reset();
  requirementConstraints_Accessor.reset();
  timingConstraints_Accessor.reset();
}

xs::UnsignedInt RequirementTemplateOptionType::getRequirementOptionIndex() const {
  return requirementOptionIndex_Accessor;
}

uci::type::RequirementTemplateOptionType& RequirementTemplateOptionType::setRequirementOptionIndex(xs::UnsignedInt value) {
  requirementOptionIndex_Accessor = value;
  return *this;
}


const uci::type::ResponseOptionType& RequirementTemplateOptionType::getRequirement() const {
  return *requirement_Accessor;
}

uci::type::ResponseOptionType& RequirementTemplateOptionType::getRequirement() {
  return *requirement_Accessor;
}

uci::type::RequirementTemplateOptionType& RequirementTemplateOptionType::setRequirement(const uci::type::ResponseOptionType& accessor) {
  if (&accessor != requirement_Accessor.get()) {
    requirement_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementConstraintsType& RequirementTemplateOptionType::getRequirementConstraints_() const {
  if (requirementConstraints_Accessor) {
    return *requirementConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getRequirementConstraints(): An attempt was made to get an optional field that was not enabled, call hasRequirementConstraints() to determine if it is safe to call getRequirementConstraints()");
}

const uci::type::RequirementConstraintsType& RequirementTemplateOptionType::getRequirementConstraints() const {
  return getRequirementConstraints_();
}

uci::type::RequirementConstraintsType& RequirementTemplateOptionType::getRequirementConstraints() {
  return getRequirementConstraints_();
}

uci::type::RequirementTemplateOptionType& RequirementTemplateOptionType::setRequirementConstraints(const uci::type::RequirementConstraintsType& accessor) {
  enableRequirementConstraints();
  if (&accessor != requirementConstraints_Accessor.get()) {
    requirementConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementTemplateOptionType::hasRequirementConstraints() const noexcept {
  return static_cast<bool>(requirementConstraints_Accessor);
}

uci::type::RequirementConstraintsType& RequirementTemplateOptionType::enableRequirementConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementConstraintsType : type};
  if ((!requirementConstraints_Accessor) || (requirementConstraints_Accessor->getAccessorType() != requestedType)) {
    requirementConstraints_Accessor = RequirementConstraintsType::create(requestedType);
    if (!requirementConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableRequirementConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requirementConstraints_Accessor;
}

uci::type::RequirementTemplateOptionType& RequirementTemplateOptionType::clearRequirementConstraints() noexcept {
  requirementConstraints_Accessor.reset();
  return *this;
}

uci::type::CapabilityCommandTemporalConstraintsType& RequirementTemplateOptionType::getTimingConstraints_() const {
  if (timingConstraints_Accessor) {
    return *timingConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getTimingConstraints(): An attempt was made to get an optional field that was not enabled, call hasTimingConstraints() to determine if it is safe to call getTimingConstraints()");
}

const uci::type::CapabilityCommandTemporalConstraintsType& RequirementTemplateOptionType::getTimingConstraints() const {
  return getTimingConstraints_();
}

uci::type::CapabilityCommandTemporalConstraintsType& RequirementTemplateOptionType::getTimingConstraints() {
  return getTimingConstraints_();
}

uci::type::RequirementTemplateOptionType& RequirementTemplateOptionType::setTimingConstraints(const uci::type::CapabilityCommandTemporalConstraintsType& accessor) {
  enableTimingConstraints();
  if (&accessor != timingConstraints_Accessor.get()) {
    timingConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementTemplateOptionType::hasTimingConstraints() const noexcept {
  return static_cast<bool>(timingConstraints_Accessor);
}

uci::type::CapabilityCommandTemporalConstraintsType& RequirementTemplateOptionType::enableTimingConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandTemporalConstraintsType : type};
  if ((!timingConstraints_Accessor) || (timingConstraints_Accessor->getAccessorType() != requestedType)) {
    timingConstraints_Accessor = CapabilityCommandTemporalConstraintsType::create(requestedType);
    if (!timingConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableTimingConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timingConstraints_Accessor;
}

uci::type::RequirementTemplateOptionType& RequirementTemplateOptionType::clearTimingConstraints() noexcept {
  timingConstraints_Accessor.reset();
  return *this;
}

std::unique_ptr<RequirementTemplateOptionType> RequirementTemplateOptionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementTemplateOptionType : type};
  return (requestedType == uci::type::accessorType::requirementTemplateOptionType) ? boost::make_unique<RequirementTemplateOptionType>() : nullptr;
}

/**  */
namespace RequirementTemplateOptionType_Names {

constexpr const char* Extern_Type_Name{"RequirementTemplateOptionType"};
constexpr const char* RequirementOptionIndex_Name{"RequirementOptionIndex"};
constexpr const char* Requirement_Name{"Requirement"};
constexpr const char* RequirementConstraints_Name{"RequirementConstraints"};
constexpr const char* TimingConstraints_Name{"TimingConstraints"};

} // namespace RequirementTemplateOptionType_Names

void RequirementTemplateOptionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementTemplateOptionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementTemplateOptionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementTemplateOptionType_Names::RequirementOptionIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRequirementOptionIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + RequirementTemplateOptionType_Names::Requirement_Name) {
      ResponseOptionType::deserialize(valueType.second, accessor.getRequirement(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementTemplateOptionType_Names::RequirementConstraints_Name) {
      RequirementConstraintsType::deserialize(valueType.second, accessor.enableRequirementConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementTemplateOptionType_Names::TimingConstraints_Name) {
      CapabilityCommandTemporalConstraintsType::deserialize(valueType.second, accessor.enableTimingConstraints(), nodeName, nsPrefix);
    }
  }
}

std::string RequirementTemplateOptionType::serialize(const uci::type::RequirementTemplateOptionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementTemplateOptionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementTemplateOptionType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getRequirementOptionIndex(), node, RequirementTemplateOptionType_Names::RequirementOptionIndex_Name);
  ResponseOptionType::serialize(accessor.getRequirement(), node, RequirementTemplateOptionType_Names::Requirement_Name);
  if (accessor.hasRequirementConstraints()) {
    RequirementConstraintsType::serialize(accessor.getRequirementConstraints(), node, RequirementTemplateOptionType_Names::RequirementConstraints_Name);
  }
  if (accessor.hasTimingConstraints()) {
    CapabilityCommandTemporalConstraintsType::serialize(accessor.getTimingConstraints(), node, RequirementTemplateOptionType_Names::TimingConstraints_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementTemplateOptionType& RequirementTemplateOptionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementTemplateOptionType>().release());
}

uci::type::RequirementTemplateOptionType& RequirementTemplateOptionType::create(const uci::type::RequirementTemplateOptionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementTemplateOptionType> newAccessor{boost::make_unique<asb_uci::type::RequirementTemplateOptionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementTemplateOptionType::destroy(uci::type::RequirementTemplateOptionType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementTemplateOptionType*>(&accessor);
}

} // namespace type

} // namespace uci

