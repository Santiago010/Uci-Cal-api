/** @file DetailedKinematicsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DetailedKinematicsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/Acceleration3D_Type.h"
#include "asb_uci/type/AirDataType.h"
#include "asb_uci/type/OrientationAccelerationType.h"
#include "asb_uci/type/OrientationRateType.h"
#include "asb_uci/type/OrientationType.h"
#include "asb_uci/type/PointChoice4D_Type.h"
#include "asb_uci/type/Velocity3D_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/Acceleration3D_Type.h"
#include "uci/type/AirDataType.h"
#include "uci/type/AngleType.h"
#include "uci/type/DetailedKinematicsType.h"
#include "uci/type/OrientationAccelerationType.h"
#include "uci/type/OrientationRateType.h"
#include "uci/type/OrientationType.h"
#include "uci/type/PointChoice4D_Type.h"
#include "uci/type/Velocity3D_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DetailedKinematicsType::DetailedKinematicsType()
  : position_Accessor{boost::make_unique<PointChoice4D_Type>()},
    velocity_Accessor{boost::make_unique<Velocity3D_Type>()} {
}

DetailedKinematicsType::~DetailedKinematicsType() = default;

void DetailedKinematicsType::copy(const uci::type::DetailedKinematicsType& accessor) {
  copyImpl(accessor, false);
}

void DetailedKinematicsType::copyImpl(const uci::type::DetailedKinematicsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DetailedKinematicsType&>(accessor);
    setPosition(*(accessorImpl.position_Accessor));
    setVelocity(*(accessorImpl.velocity_Accessor));
    if (accessorImpl.airData_Accessor) {
      setAirData(*(accessorImpl.airData_Accessor));
    } else {
      airData_Accessor.reset();
    }
    if (accessorImpl.acceleration_Accessor) {
      setAcceleration(*(accessorImpl.acceleration_Accessor));
    } else {
      acceleration_Accessor.reset();
    }
    if (accessorImpl.orientation_Accessor) {
      setOrientation(*(accessorImpl.orientation_Accessor));
    } else {
      orientation_Accessor.reset();
    }
    if (accessorImpl.hasWanderAngle()) {
      setWanderAngle(accessorImpl.getWanderAngle());
    } else {
      clearWanderAngle();
    }
    if (accessorImpl.hasMagneticHeading()) {
      setMagneticHeading(accessorImpl.getMagneticHeading());
    } else {
      clearMagneticHeading();
    }
    if (accessorImpl.orientationRate_Accessor) {
      setOrientationRate(*(accessorImpl.orientationRate_Accessor));
    } else {
      orientationRate_Accessor.reset();
    }
    if (accessorImpl.orientationAcceleration_Accessor) {
      setOrientationAcceleration(*(accessorImpl.orientationAcceleration_Accessor));
    } else {
      orientationAcceleration_Accessor.reset();
    }
  }
}

void DetailedKinematicsType::reset() noexcept {
  position_Accessor->reset();
  velocity_Accessor->reset();
  airData_Accessor.reset();
  acceleration_Accessor.reset();
  orientation_Accessor.reset();
  clearWanderAngle();
  clearMagneticHeading();
  orientationRate_Accessor.reset();
  orientationAcceleration_Accessor.reset();
}

const uci::type::PointChoice4D_Type& DetailedKinematicsType::getPosition() const {
  return *position_Accessor;
}

uci::type::PointChoice4D_Type& DetailedKinematicsType::getPosition() {
  return *position_Accessor;
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::setPosition(const uci::type::PointChoice4D_Type& accessor) {
  if (&accessor != position_Accessor.get()) {
    position_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::Velocity3D_Type& DetailedKinematicsType::getVelocity() const {
  return *velocity_Accessor;
}

uci::type::Velocity3D_Type& DetailedKinematicsType::getVelocity() {
  return *velocity_Accessor;
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::setVelocity(const uci::type::Velocity3D_Type& accessor) {
  if (&accessor != velocity_Accessor.get()) {
    velocity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AirDataType& DetailedKinematicsType::getAirData_() const {
  if (airData_Accessor) {
    return *airData_Accessor;
  }
  throw uci::base::UCIException("Error in getAirData(): An attempt was made to get an optional field that was not enabled, call hasAirData() to determine if it is safe to call getAirData()");
}

const uci::type::AirDataType& DetailedKinematicsType::getAirData() const {
  return getAirData_();
}

uci::type::AirDataType& DetailedKinematicsType::getAirData() {
  return getAirData_();
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::setAirData(const uci::type::AirDataType& accessor) {
  enableAirData();
  if (&accessor != airData_Accessor.get()) {
    airData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DetailedKinematicsType::hasAirData() const noexcept {
  return static_cast<bool>(airData_Accessor);
}

uci::type::AirDataType& DetailedKinematicsType::enableAirData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airDataType : type};
  if ((!airData_Accessor) || (airData_Accessor->getAccessorType() != requestedType)) {
    airData_Accessor = AirDataType::create(requestedType);
    if (!airData_Accessor) {
      throw uci::base::UCIException("Error in enableAirData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *airData_Accessor;
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::clearAirData() noexcept {
  airData_Accessor.reset();
  return *this;
}

uci::type::Acceleration3D_Type& DetailedKinematicsType::getAcceleration_() const {
  if (acceleration_Accessor) {
    return *acceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getAcceleration(): An attempt was made to get an optional field that was not enabled, call hasAcceleration() to determine if it is safe to call getAcceleration()");
}

const uci::type::Acceleration3D_Type& DetailedKinematicsType::getAcceleration() const {
  return getAcceleration_();
}

uci::type::Acceleration3D_Type& DetailedKinematicsType::getAcceleration() {
  return getAcceleration_();
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::setAcceleration(const uci::type::Acceleration3D_Type& accessor) {
  enableAcceleration();
  if (&accessor != acceleration_Accessor.get()) {
    acceleration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DetailedKinematicsType::hasAcceleration() const noexcept {
  return static_cast<bool>(acceleration_Accessor);
}

uci::type::Acceleration3D_Type& DetailedKinematicsType::enableAcceleration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::acceleration3D_Type : type};
  if ((!acceleration_Accessor) || (acceleration_Accessor->getAccessorType() != requestedType)) {
    acceleration_Accessor = Acceleration3D_Type::create(requestedType);
    if (!acceleration_Accessor) {
      throw uci::base::UCIException("Error in enableAcceleration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *acceleration_Accessor;
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::clearAcceleration() noexcept {
  acceleration_Accessor.reset();
  return *this;
}

uci::type::OrientationType& DetailedKinematicsType::getOrientation_() const {
  if (orientation_Accessor) {
    return *orientation_Accessor;
  }
  throw uci::base::UCIException("Error in getOrientation(): An attempt was made to get an optional field that was not enabled, call hasOrientation() to determine if it is safe to call getOrientation()");
}

const uci::type::OrientationType& DetailedKinematicsType::getOrientation() const {
  return getOrientation_();
}

uci::type::OrientationType& DetailedKinematicsType::getOrientation() {
  return getOrientation_();
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::setOrientation(const uci::type::OrientationType& accessor) {
  enableOrientation();
  if (&accessor != orientation_Accessor.get()) {
    orientation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DetailedKinematicsType::hasOrientation() const noexcept {
  return static_cast<bool>(orientation_Accessor);
}

uci::type::OrientationType& DetailedKinematicsType::enableOrientation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orientationType : type};
  if ((!orientation_Accessor) || (orientation_Accessor->getAccessorType() != requestedType)) {
    orientation_Accessor = OrientationType::create(requestedType);
    if (!orientation_Accessor) {
      throw uci::base::UCIException("Error in enableOrientation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orientation_Accessor;
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::clearOrientation() noexcept {
  orientation_Accessor.reset();
  return *this;
}

uci::type::AngleTypeValue DetailedKinematicsType::getWanderAngle() const {
  if (wanderAngle_Accessor) {
    return *wanderAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getWanderAngle(): An attempt was made to get an optional field that was not enabled, call hasWanderAngle() to determine if it is safe to call getWanderAngle()");
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::setWanderAngle(uci::type::AngleTypeValue value) {
  wanderAngle_Accessor = value;
  return *this;
}

bool DetailedKinematicsType::hasWanderAngle() const noexcept {
  return wanderAngle_Accessor.has_value();
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::clearWanderAngle() noexcept {
  wanderAngle_Accessor.reset();
  return *this;
}

uci::type::AngleTypeValue DetailedKinematicsType::getMagneticHeading() const {
  if (magneticHeading_Accessor) {
    return *magneticHeading_Accessor;
  }
  throw uci::base::UCIException("Error in getMagneticHeading(): An attempt was made to get an optional field that was not enabled, call hasMagneticHeading() to determine if it is safe to call getMagneticHeading()");
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::setMagneticHeading(uci::type::AngleTypeValue value) {
  magneticHeading_Accessor = value;
  return *this;
}

bool DetailedKinematicsType::hasMagneticHeading() const noexcept {
  return magneticHeading_Accessor.has_value();
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::clearMagneticHeading() noexcept {
  magneticHeading_Accessor.reset();
  return *this;
}

uci::type::OrientationRateType& DetailedKinematicsType::getOrientationRate_() const {
  if (orientationRate_Accessor) {
    return *orientationRate_Accessor;
  }
  throw uci::base::UCIException("Error in getOrientationRate(): An attempt was made to get an optional field that was not enabled, call hasOrientationRate() to determine if it is safe to call getOrientationRate()");
}

const uci::type::OrientationRateType& DetailedKinematicsType::getOrientationRate() const {
  return getOrientationRate_();
}

uci::type::OrientationRateType& DetailedKinematicsType::getOrientationRate() {
  return getOrientationRate_();
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::setOrientationRate(const uci::type::OrientationRateType& accessor) {
  enableOrientationRate();
  if (&accessor != orientationRate_Accessor.get()) {
    orientationRate_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DetailedKinematicsType::hasOrientationRate() const noexcept {
  return static_cast<bool>(orientationRate_Accessor);
}

uci::type::OrientationRateType& DetailedKinematicsType::enableOrientationRate(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orientationRateType : type};
  if ((!orientationRate_Accessor) || (orientationRate_Accessor->getAccessorType() != requestedType)) {
    orientationRate_Accessor = OrientationRateType::create(requestedType);
    if (!orientationRate_Accessor) {
      throw uci::base::UCIException("Error in enableOrientationRate(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orientationRate_Accessor;
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::clearOrientationRate() noexcept {
  orientationRate_Accessor.reset();
  return *this;
}

uci::type::OrientationAccelerationType& DetailedKinematicsType::getOrientationAcceleration_() const {
  if (orientationAcceleration_Accessor) {
    return *orientationAcceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getOrientationAcceleration(): An attempt was made to get an optional field that was not enabled, call hasOrientationAcceleration() to determine if it is safe to call getOrientationAcceleration()");
}

const uci::type::OrientationAccelerationType& DetailedKinematicsType::getOrientationAcceleration() const {
  return getOrientationAcceleration_();
}

uci::type::OrientationAccelerationType& DetailedKinematicsType::getOrientationAcceleration() {
  return getOrientationAcceleration_();
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::setOrientationAcceleration(const uci::type::OrientationAccelerationType& accessor) {
  enableOrientationAcceleration();
  if (&accessor != orientationAcceleration_Accessor.get()) {
    orientationAcceleration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DetailedKinematicsType::hasOrientationAcceleration() const noexcept {
  return static_cast<bool>(orientationAcceleration_Accessor);
}

uci::type::OrientationAccelerationType& DetailedKinematicsType::enableOrientationAcceleration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orientationAccelerationType : type};
  if ((!orientationAcceleration_Accessor) || (orientationAcceleration_Accessor->getAccessorType() != requestedType)) {
    orientationAcceleration_Accessor = OrientationAccelerationType::create(requestedType);
    if (!orientationAcceleration_Accessor) {
      throw uci::base::UCIException("Error in enableOrientationAcceleration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orientationAcceleration_Accessor;
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::clearOrientationAcceleration() noexcept {
  orientationAcceleration_Accessor.reset();
  return *this;
}

std::unique_ptr<DetailedKinematicsType> DetailedKinematicsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::detailedKinematicsType : type};
  return (requestedType == uci::type::accessorType::detailedKinematicsType) ? boost::make_unique<DetailedKinematicsType>() : nullptr;
}

/**  */
namespace DetailedKinematicsType_Names {

constexpr const char* Extern_Type_Name{"DetailedKinematicsType"};
constexpr const char* Position_Name{"Position"};
constexpr const char* Velocity_Name{"Velocity"};
constexpr const char* AirData_Name{"AirData"};
constexpr const char* Acceleration_Name{"Acceleration"};
constexpr const char* Orientation_Name{"Orientation"};
constexpr const char* WanderAngle_Name{"WanderAngle"};
constexpr const char* MagneticHeading_Name{"MagneticHeading"};
constexpr const char* OrientationRate_Name{"OrientationRate"};
constexpr const char* OrientationAcceleration_Name{"OrientationAcceleration"};

} // namespace DetailedKinematicsType_Names

void DetailedKinematicsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DetailedKinematicsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DetailedKinematicsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DetailedKinematicsType_Names::Position_Name) {
      PointChoice4D_Type::deserialize(valueType.second, accessor.getPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DetailedKinematicsType_Names::Velocity_Name) {
      Velocity3D_Type::deserialize(valueType.second, accessor.getVelocity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DetailedKinematicsType_Names::AirData_Name) {
      AirDataType::deserialize(valueType.second, accessor.enableAirData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DetailedKinematicsType_Names::Acceleration_Name) {
      Acceleration3D_Type::deserialize(valueType.second, accessor.enableAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DetailedKinematicsType_Names::Orientation_Name) {
      OrientationType::deserialize(valueType.second, accessor.enableOrientation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DetailedKinematicsType_Names::WanderAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWanderAngle(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DetailedKinematicsType_Names::MagneticHeading_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMagneticHeading(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DetailedKinematicsType_Names::OrientationRate_Name) {
      OrientationRateType::deserialize(valueType.second, accessor.enableOrientationRate(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DetailedKinematicsType_Names::OrientationAcceleration_Name) {
      OrientationAccelerationType::deserialize(valueType.second, accessor.enableOrientationAcceleration(), nodeName, nsPrefix);
    }
  }
}

std::string DetailedKinematicsType::serialize(const uci::type::DetailedKinematicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DetailedKinematicsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DetailedKinematicsType_Names::Extern_Type_Name);
  }
  PointChoice4D_Type::serialize(accessor.getPosition(), node, DetailedKinematicsType_Names::Position_Name);
  Velocity3D_Type::serialize(accessor.getVelocity(), node, DetailedKinematicsType_Names::Velocity_Name);
  if (accessor.hasAirData()) {
    AirDataType::serialize(accessor.getAirData(), node, DetailedKinematicsType_Names::AirData_Name);
  }
  if (accessor.hasAcceleration()) {
    Acceleration3D_Type::serialize(accessor.getAcceleration(), node, DetailedKinematicsType_Names::Acceleration_Name);
  }
  if (accessor.hasOrientation()) {
    OrientationType::serialize(accessor.getOrientation(), node, DetailedKinematicsType_Names::Orientation_Name);
  }
  if (accessor.hasWanderAngle()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getWanderAngle(), node, DetailedKinematicsType_Names::WanderAngle_Name);
  }
  if (accessor.hasMagneticHeading()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMagneticHeading(), node, DetailedKinematicsType_Names::MagneticHeading_Name);
  }
  if (accessor.hasOrientationRate()) {
    OrientationRateType::serialize(accessor.getOrientationRate(), node, DetailedKinematicsType_Names::OrientationRate_Name);
  }
  if (accessor.hasOrientationAcceleration()) {
    OrientationAccelerationType::serialize(accessor.getOrientationAcceleration(), node, DetailedKinematicsType_Names::OrientationAcceleration_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DetailedKinematicsType& DetailedKinematicsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DetailedKinematicsType>().release());
}

uci::type::DetailedKinematicsType& DetailedKinematicsType::create(const uci::type::DetailedKinematicsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DetailedKinematicsType> newAccessor{boost::make_unique<asb_uci::type::DetailedKinematicsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DetailedKinematicsType::destroy(uci::type::DetailedKinematicsType& accessor) {
  delete dynamic_cast<asb_uci::type::DetailedKinematicsType*>(&accessor);
}

} // namespace type

} // namespace uci

