/** @file CommBLOS_ControlType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommBLOS_ControlType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommAcquisitionModeTypeEnum.h"
#include "asb_uci/type/CommBLOS_NetworkComsecModeRequestType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommAcquisitionModeTypeEnum.h"
#include "uci/type/CommBLOS_ControlType.h"
#include "uci/type/CommBLOS_NetworkComsecModeRequestType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommBLOS_ControlType::CommBLOS_ControlType()
  : networkComsecModeRequest_Accessor{boost::make_unique<NetworkComsecModeRequest>(0, SIZE_MAX)} {
}

CommBLOS_ControlType::~CommBLOS_ControlType() = default;

void CommBLOS_ControlType::copy(const uci::type::CommBLOS_ControlType& accessor) {
  copyImpl(accessor, false);
}

void CommBLOS_ControlType::copyImpl(const uci::type::CommBLOS_ControlType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommBLOS_ControlType&>(accessor);
    if (accessorImpl.acquisitionMode_Accessor) {
      setAcquisitionMode(*(accessorImpl.acquisitionMode_Accessor));
    } else {
      acquisitionMode_Accessor.reset();
    }
    setNetworkComsecModeRequest(*(accessorImpl.networkComsecModeRequest_Accessor));
  }
}

void CommBLOS_ControlType::reset() noexcept {
  acquisitionMode_Accessor.reset();
  networkComsecModeRequest_Accessor->reset();
}

uci::type::CommAcquisitionModeTypeEnum& CommBLOS_ControlType::getAcquisitionMode_() const {
  if (acquisitionMode_Accessor) {
    return *acquisitionMode_Accessor;
  }
  throw uci::base::UCIException("Error in getAcquisitionMode(): An attempt was made to get an optional field that was not enabled, call hasAcquisitionMode() to determine if it is safe to call getAcquisitionMode()");
}

const uci::type::CommAcquisitionModeTypeEnum& CommBLOS_ControlType::getAcquisitionMode() const {
  return getAcquisitionMode_();
}

uci::type::CommAcquisitionModeTypeEnum& CommBLOS_ControlType::getAcquisitionMode() {
  return getAcquisitionMode_();
}

uci::type::CommBLOS_ControlType& CommBLOS_ControlType::setAcquisitionMode(const uci::type::CommAcquisitionModeTypeEnum& accessor) {
  enableAcquisitionMode();
  if (&accessor != acquisitionMode_Accessor.get()) {
    acquisitionMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommBLOS_ControlType& CommBLOS_ControlType::setAcquisitionMode(const uci::type::CommAcquisitionModeTypeEnum::EnumerationItem value) {
  enableAcquisitionMode().setValue(value);
  return *this;
}

bool CommBLOS_ControlType::hasAcquisitionMode() const noexcept {
  return static_cast<bool>(acquisitionMode_Accessor);
}

uci::type::CommAcquisitionModeTypeEnum& CommBLOS_ControlType::enableAcquisitionMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commAcquisitionModeTypeEnum : type};
  if ((!acquisitionMode_Accessor) || (acquisitionMode_Accessor->getAccessorType() != requestedType)) {
    acquisitionMode_Accessor = CommAcquisitionModeTypeEnum::create(requestedType);
    if (!acquisitionMode_Accessor) {
      throw uci::base::UCIException("Error in enableAcquisitionMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *acquisitionMode_Accessor;
}

uci::type::CommBLOS_ControlType& CommBLOS_ControlType::clearAcquisitionMode() noexcept {
  acquisitionMode_Accessor.reset();
  return *this;
}

const uci::type::CommBLOS_ControlType::NetworkComsecModeRequest& CommBLOS_ControlType::getNetworkComsecModeRequest() const {
  return *networkComsecModeRequest_Accessor;
}

uci::type::CommBLOS_ControlType::NetworkComsecModeRequest& CommBLOS_ControlType::getNetworkComsecModeRequest() {
  return *networkComsecModeRequest_Accessor;
}

uci::type::CommBLOS_ControlType& CommBLOS_ControlType::setNetworkComsecModeRequest(const uci::type::CommBLOS_ControlType::NetworkComsecModeRequest& accessor) {
  if (&accessor != networkComsecModeRequest_Accessor.get()) {
    networkComsecModeRequest_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommBLOS_ControlType> CommBLOS_ControlType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commBLOS_ControlType : type};
  return (requestedType == uci::type::accessorType::commBLOS_ControlType) ? boost::make_unique<CommBLOS_ControlType>() : nullptr;
}

/**  */
namespace CommBLOS_ControlType_Names {

constexpr const char* Extern_Type_Name{"CommBLOS_ControlType"};
constexpr const char* AcquisitionMode_Name{"AcquisitionMode"};
constexpr const char* NetworkComsecModeRequest_Name{"NetworkComsecModeRequest"};

} // namespace CommBLOS_ControlType_Names

void CommBLOS_ControlType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommBLOS_ControlType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommBLOS_ControlType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommBLOS_ControlType_Names::AcquisitionMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAcquisitionMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommBLOS_ControlType_Names::NetworkComsecModeRequest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommBLOS_ControlType::NetworkComsecModeRequest& boundedList = accessor.getNetworkComsecModeRequest();
        const uci::type::CommBLOS_ControlType::NetworkComsecModeRequest::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommBLOS_NetworkComsecModeRequestType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CommBLOS_ControlType::serialize(const uci::type::CommBLOS_ControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommBLOS_ControlType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommBLOS_ControlType_Names::Extern_Type_Name);
  }
  if (accessor.hasAcquisitionMode()) {
    CommAcquisitionModeTypeEnum::serialize(accessor.getAcquisitionMode(), node, CommBLOS_ControlType_Names::AcquisitionMode_Name, false);
  }
  {
    const uci::type::CommBLOS_ControlType::NetworkComsecModeRequest& boundedList = accessor.getNetworkComsecModeRequest();
    for (uci::type::CommBLOS_ControlType::NetworkComsecModeRequest::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommBLOS_NetworkComsecModeRequestType::serialize(boundedList.at(i), node, CommBLOS_ControlType_Names::NetworkComsecModeRequest_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommBLOS_ControlType& CommBLOS_ControlType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommBLOS_ControlType>().release());
}

uci::type::CommBLOS_ControlType& CommBLOS_ControlType::create(const uci::type::CommBLOS_ControlType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommBLOS_ControlType> newAccessor{boost::make_unique<asb_uci::type::CommBLOS_ControlType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommBLOS_ControlType::destroy(uci::type::CommBLOS_ControlType& accessor) {
  delete dynamic_cast<asb_uci::type::CommBLOS_ControlType*>(&accessor);
}

} // namespace type

} // namespace uci

