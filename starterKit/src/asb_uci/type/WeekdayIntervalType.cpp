/** @file WeekdayIntervalType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/WeekdayIntervalType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/type/WeekdayEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/DurationType.h"
#include "uci/type/TimeType.h"
#include "uci/type/WeekdayEnum.h"
#include "uci/type/WeekdayIntervalType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WeekdayIntervalType::WeekdayIntervalType()
  : timeSpan_Accessor{boost::make_unique<DateTimeRangeType>()},
    weekday_Accessor{boost::make_unique<Weekday>(1, 7)} {
}

WeekdayIntervalType::~WeekdayIntervalType() = default;

void WeekdayIntervalType::copy(const uci::type::WeekdayIntervalType& accessor) {
  copyImpl(accessor, false);
}

void WeekdayIntervalType::copyImpl(const uci::type::WeekdayIntervalType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const WeekdayIntervalType&>(accessor);
    setTimeSpan(*(accessorImpl.timeSpan_Accessor));
    setWeekday(*(accessorImpl.weekday_Accessor));
    setWeeklyIntervalPeriod(accessorImpl.weeklyIntervalPeriod_Accessor);
    if (accessorImpl.hasStartTime()) {
      setStartTime(accessorImpl.getStartTime());
    } else {
      clearStartTime();
    }
    if (accessorImpl.hasDuration()) {
      setDuration(accessorImpl.getDuration());
    } else {
      clearDuration();
    }
  }
}

void WeekdayIntervalType::reset() noexcept {
  timeSpan_Accessor->reset();
  weekday_Accessor->reset();
  weeklyIntervalPeriod_Accessor = 0;
  clearStartTime();
  clearDuration();
}

const uci::type::DateTimeRangeType& WeekdayIntervalType::getTimeSpan() const {
  return *timeSpan_Accessor;
}

uci::type::DateTimeRangeType& WeekdayIntervalType::getTimeSpan() {
  return *timeSpan_Accessor;
}

uci::type::WeekdayIntervalType& WeekdayIntervalType::setTimeSpan(const uci::type::DateTimeRangeType& accessor) {
  if (&accessor != timeSpan_Accessor.get()) {
    timeSpan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::WeekdayIntervalType::Weekday& WeekdayIntervalType::getWeekday() const {
  return *weekday_Accessor;
}

uci::type::WeekdayIntervalType::Weekday& WeekdayIntervalType::getWeekday() {
  return *weekday_Accessor;
}

uci::type::WeekdayIntervalType& WeekdayIntervalType::setWeekday(const uci::type::WeekdayIntervalType::Weekday& accessor) {
  if (&accessor != weekday_Accessor.get()) {
    weekday_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt WeekdayIntervalType::getWeeklyIntervalPeriod() const {
  return weeklyIntervalPeriod_Accessor;
}

uci::type::WeekdayIntervalType& WeekdayIntervalType::setWeeklyIntervalPeriod(xs::UnsignedInt value) {
  weeklyIntervalPeriod_Accessor = value;
  return *this;
}


uci::type::TimeTypeValue WeekdayIntervalType::getStartTime() const {
  if (startTime_Accessor) {
    return *startTime_Accessor;
  }
  throw uci::base::UCIException("Error in getStartTime(): An attempt was made to get an optional field that was not enabled, call hasStartTime() to determine if it is safe to call getStartTime()");
}

uci::type::WeekdayIntervalType& WeekdayIntervalType::setStartTime(uci::type::TimeTypeValue value) {
  startTime_Accessor = value;
  return *this;
}

bool WeekdayIntervalType::hasStartTime() const noexcept {
  return startTime_Accessor.has_value();
}

uci::type::WeekdayIntervalType& WeekdayIntervalType::clearStartTime() noexcept {
  startTime_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue WeekdayIntervalType::getDuration() const {
  if (duration_Accessor) {
    return *duration_Accessor;
  }
  throw uci::base::UCIException("Error in getDuration(): An attempt was made to get an optional field that was not enabled, call hasDuration() to determine if it is safe to call getDuration()");
}

uci::type::WeekdayIntervalType& WeekdayIntervalType::setDuration(uci::type::DurationTypeValue value) {
  duration_Accessor = value;
  return *this;
}

bool WeekdayIntervalType::hasDuration() const noexcept {
  return duration_Accessor.has_value();
}

uci::type::WeekdayIntervalType& WeekdayIntervalType::clearDuration() noexcept {
  duration_Accessor.reset();
  return *this;
}

std::unique_ptr<WeekdayIntervalType> WeekdayIntervalType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weekdayIntervalType : type};
  return (requestedType == uci::type::accessorType::weekdayIntervalType) ? boost::make_unique<WeekdayIntervalType>() : nullptr;
}

/**  */
namespace WeekdayIntervalType_Names {

constexpr const char* Extern_Type_Name{"WeekdayIntervalType"};
constexpr const char* TimeSpan_Name{"TimeSpan"};
constexpr const char* Weekday_Name{"Weekday"};
constexpr const char* WeeklyIntervalPeriod_Name{"WeeklyIntervalPeriod"};
constexpr const char* StartTime_Name{"StartTime"};
constexpr const char* Duration_Name{"Duration"};

} // namespace WeekdayIntervalType_Names

void WeekdayIntervalType::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeekdayIntervalType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeekdayIntervalType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WeekdayIntervalType_Names::TimeSpan_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.getTimeSpan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeekdayIntervalType_Names::Weekday_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WeekdayIntervalType::Weekday& boundedList = accessor.getWeekday();
        const uci::type::WeekdayIntervalType::Weekday::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeekdayIntervalType_Names::WeeklyIntervalPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWeeklyIntervalPeriod(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + WeekdayIntervalType_Names::StartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStartTime(asb_uci::util::SerializationHelpers::deserializeTime(*value));
      }
    } else if (valueType.first == nsPrefix + WeekdayIntervalType_Names::Duration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string WeekdayIntervalType::serialize(const uci::type::WeekdayIntervalType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WeekdayIntervalType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WeekdayIntervalType_Names::Extern_Type_Name);
  }
  DateTimeRangeType::serialize(accessor.getTimeSpan(), node, WeekdayIntervalType_Names::TimeSpan_Name);
  {
    const uci::type::WeekdayIntervalType::Weekday& boundedList = accessor.getWeekday();
    for (uci::type::WeekdayIntervalType::Weekday::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      WeekdayEnum::serialize(boundedList.at(i), node, WeekdayIntervalType_Names::Weekday_Name, false);
    }
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getWeeklyIntervalPeriod(), node, WeekdayIntervalType_Names::WeeklyIntervalPeriod_Name);
  if (accessor.hasStartTime()) {
    asb_uci::util::SerializationHelpers::serializeTime(accessor.getStartTime(), node, WeekdayIntervalType_Names::StartTime_Name);
  }
  if (accessor.hasDuration()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getDuration(), node, WeekdayIntervalType_Names::Duration_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WeekdayIntervalType& WeekdayIntervalType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WeekdayIntervalType>().release());
}

uci::type::WeekdayIntervalType& WeekdayIntervalType::create(const uci::type::WeekdayIntervalType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WeekdayIntervalType> newAccessor{boost::make_unique<asb_uci::type::WeekdayIntervalType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WeekdayIntervalType::destroy(uci::type::WeekdayIntervalType& accessor) {
  delete dynamic_cast<asb_uci::type::WeekdayIntervalType*>(&accessor);
}

} // namespace type

} // namespace uci

