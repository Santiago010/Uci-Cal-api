/** @file RF_ProfileBandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RF_ProfileBandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MilliwattPowerRatioType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_ProfileBandType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RF_ProfileBandType::RF_ProfileBandType()
  : frequency_Accessor{boost::make_unique<FrequencyRangeType>()} {
}

RF_ProfileBandType::~RF_ProfileBandType() = default;

void RF_ProfileBandType::copy(const uci::type::RF_ProfileBandType& accessor) {
  copyImpl(accessor, false);
}

void RF_ProfileBandType::copyImpl(const uci::type::RF_ProfileBandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RF_ProfileBandType&>(accessor);
    setFrequency(*(accessorImpl.frequency_Accessor));
    setReceiveAllowed(accessorImpl.receiveAllowed_Accessor);
    setTransmitAllowed(accessorImpl.transmitAllowed_Accessor);
    if (accessorImpl.hasMaximumTransmitPower()) {
      setMaximumTransmitPower(accessorImpl.getMaximumTransmitPower());
    } else {
      clearMaximumTransmitPower();
    }
    if (accessorImpl.hasDutyCycle()) {
      setDutyCycle(accessorImpl.getDutyCycle());
    } else {
      clearDutyCycle();
    }
  }
}

void RF_ProfileBandType::reset() noexcept {
  frequency_Accessor->reset();
  receiveAllowed_Accessor = false;
  transmitAllowed_Accessor = false;
  clearMaximumTransmitPower();
  clearDutyCycle();
}

const uci::type::FrequencyRangeType& RF_ProfileBandType::getFrequency() const {
  return *frequency_Accessor;
}

uci::type::FrequencyRangeType& RF_ProfileBandType::getFrequency() {
  return *frequency_Accessor;
}

uci::type::RF_ProfileBandType& RF_ProfileBandType::setFrequency(const uci::type::FrequencyRangeType& accessor) {
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean RF_ProfileBandType::getReceiveAllowed() const {
  return receiveAllowed_Accessor;
}

uci::type::RF_ProfileBandType& RF_ProfileBandType::setReceiveAllowed(xs::Boolean value) {
  receiveAllowed_Accessor = value;
  return *this;
}


xs::Boolean RF_ProfileBandType::getTransmitAllowed() const {
  return transmitAllowed_Accessor;
}

uci::type::RF_ProfileBandType& RF_ProfileBandType::setTransmitAllowed(xs::Boolean value) {
  transmitAllowed_Accessor = value;
  return *this;
}


uci::type::MilliwattPowerRatioTypeValue RF_ProfileBandType::getMaximumTransmitPower() const {
  if (maximumTransmitPower_Accessor) {
    return *maximumTransmitPower_Accessor;
  }
  throw uci::base::UCIException("Error in getMaximumTransmitPower(): An attempt was made to get an optional field that was not enabled, call hasMaximumTransmitPower() to determine if it is safe to call getMaximumTransmitPower()");
}

uci::type::RF_ProfileBandType& RF_ProfileBandType::setMaximumTransmitPower(uci::type::MilliwattPowerRatioTypeValue value) {
  maximumTransmitPower_Accessor = value;
  return *this;
}

bool RF_ProfileBandType::hasMaximumTransmitPower() const noexcept {
  return maximumTransmitPower_Accessor.has_value();
}

uci::type::RF_ProfileBandType& RF_ProfileBandType::clearMaximumTransmitPower() noexcept {
  maximumTransmitPower_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue RF_ProfileBandType::getDutyCycle() const {
  if (dutyCycle_Accessor) {
    return *dutyCycle_Accessor;
  }
  throw uci::base::UCIException("Error in getDutyCycle(): An attempt was made to get an optional field that was not enabled, call hasDutyCycle() to determine if it is safe to call getDutyCycle()");
}

uci::type::RF_ProfileBandType& RF_ProfileBandType::setDutyCycle(uci::type::PercentTypeValue value) {
  dutyCycle_Accessor = value;
  return *this;
}

bool RF_ProfileBandType::hasDutyCycle() const noexcept {
  return dutyCycle_Accessor.has_value();
}

uci::type::RF_ProfileBandType& RF_ProfileBandType::clearDutyCycle() noexcept {
  dutyCycle_Accessor.reset();
  return *this;
}

std::unique_ptr<RF_ProfileBandType> RF_ProfileBandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_ProfileBandType : type};
  return (requestedType == uci::type::accessorType::rF_ProfileBandType) ? boost::make_unique<RF_ProfileBandType>() : nullptr;
}

/**  */
namespace RF_ProfileBandType_Names {

constexpr const char* Extern_Type_Name{"RF_ProfileBandType"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* ReceiveAllowed_Name{"ReceiveAllowed"};
constexpr const char* TransmitAllowed_Name{"TransmitAllowed"};
constexpr const char* MaximumTransmitPower_Name{"MaximumTransmitPower"};
constexpr const char* DutyCycle_Name{"DutyCycle"};

} // namespace RF_ProfileBandType_Names

void RF_ProfileBandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_ProfileBandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RF_ProfileBandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RF_ProfileBandType_Names::Frequency_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.getFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_ProfileBandType_Names::ReceiveAllowed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReceiveAllowed(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RF_ProfileBandType_Names::TransmitAllowed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTransmitAllowed(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RF_ProfileBandType_Names::MaximumTransmitPower_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumTransmitPower(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RF_ProfileBandType_Names::DutyCycle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDutyCycle(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string RF_ProfileBandType::serialize(const uci::type::RF_ProfileBandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RF_ProfileBandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RF_ProfileBandType_Names::Extern_Type_Name);
  }
  FrequencyRangeType::serialize(accessor.getFrequency(), node, RF_ProfileBandType_Names::Frequency_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getReceiveAllowed(), node, RF_ProfileBandType_Names::ReceiveAllowed_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getTransmitAllowed(), node, RF_ProfileBandType_Names::TransmitAllowed_Name);
  if (accessor.hasMaximumTransmitPower()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaximumTransmitPower(), node, RF_ProfileBandType_Names::MaximumTransmitPower_Name);
  }
  if (accessor.hasDutyCycle()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDutyCycle(), node, RF_ProfileBandType_Names::DutyCycle_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RF_ProfileBandType& RF_ProfileBandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RF_ProfileBandType>().release());
}

uci::type::RF_ProfileBandType& RF_ProfileBandType::create(const uci::type::RF_ProfileBandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RF_ProfileBandType> newAccessor{boost::make_unique<asb_uci::type::RF_ProfileBandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RF_ProfileBandType::destroy(uci::type::RF_ProfileBandType& accessor) {
  delete dynamic_cast<asb_uci::type::RF_ProfileBandType*>(&accessor);
}

} // namespace type

} // namespace uci

