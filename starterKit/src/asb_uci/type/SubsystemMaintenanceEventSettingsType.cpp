/** @file SubsystemMaintenanceEventSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SubsystemMaintenanceEventSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/NameValuePairType.h"
#include "asb_uci/type/VisibleString64Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/NameValuePairType.h"
#include "uci/type/SubsystemMaintenanceEventSettingsType.h"
#include "uci/type/VisibleString64Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemMaintenanceEventSettingsType::SubsystemMaintenanceEventSettingsType()
  : nominalValue_Accessor{boost::make_unique<NameValuePairType>()} {
}

SubsystemMaintenanceEventSettingsType::~SubsystemMaintenanceEventSettingsType() = default;

void SubsystemMaintenanceEventSettingsType::copy(const uci::type::SubsystemMaintenanceEventSettingsType& accessor) {
  copyImpl(accessor, false);
}

void SubsystemMaintenanceEventSettingsType::copyImpl(const uci::type::SubsystemMaintenanceEventSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SubsystemMaintenanceEventSettingsType&>(accessor);
    setEventIdentifier(accessorImpl.eventIdentifier_Accessor);
    if (accessorImpl.description_Accessor) {
      setDescription(*(accessorImpl.description_Accessor));
    } else {
      description_Accessor.reset();
    }
    setRequired(accessorImpl.required_Accessor);
    setNominalValue(*(accessorImpl.nominalValue_Accessor));
    if (accessorImpl.minValue_Accessor) {
      setMinValue(*(accessorImpl.minValue_Accessor));
    } else {
      minValue_Accessor.reset();
    }
    if (accessorImpl.maxValue_Accessor) {
      setMaxValue(*(accessorImpl.maxValue_Accessor));
    } else {
      maxValue_Accessor.reset();
    }
  }
}

void SubsystemMaintenanceEventSettingsType::reset() noexcept {
  eventIdentifier_Accessor = 0;
  description_Accessor.reset();
  required_Accessor = false;
  if (nominalValue_Accessor->getAccessorType() != uci::type::accessorType::nameValuePairType) {
    nominalValue_Accessor = boost::make_unique<NameValuePairType>();
  } else {
    nominalValue_Accessor->reset();
  }
  minValue_Accessor.reset();
  maxValue_Accessor.reset();
}

xs::UnsignedInt SubsystemMaintenanceEventSettingsType::getEventIdentifier() const {
  return eventIdentifier_Accessor;
}

uci::type::SubsystemMaintenanceEventSettingsType& SubsystemMaintenanceEventSettingsType::setEventIdentifier(xs::UnsignedInt value) {
  eventIdentifier_Accessor = value;
  return *this;
}


uci::type::VisibleString64Type& SubsystemMaintenanceEventSettingsType::getDescription_() const {
  if (description_Accessor) {
    return *description_Accessor;
  }
  throw uci::base::UCIException("Error in getDescription(): An attempt was made to get an optional field that was not enabled, call hasDescription() to determine if it is safe to call getDescription()");
}

const uci::type::VisibleString64Type& SubsystemMaintenanceEventSettingsType::getDescription() const {
  return getDescription_();
}

uci::type::VisibleString64Type& SubsystemMaintenanceEventSettingsType::getDescription() {
  return getDescription_();
}

uci::type::SubsystemMaintenanceEventSettingsType& SubsystemMaintenanceEventSettingsType::setDescription(const uci::type::VisibleString64Type& value) {
  return setDescription(value.c_str());
}

uci::type::SubsystemMaintenanceEventSettingsType& SubsystemMaintenanceEventSettingsType::setDescription(const std::string& value) {
  return setDescription(value.c_str());
}

uci::type::SubsystemMaintenanceEventSettingsType& SubsystemMaintenanceEventSettingsType::setDescription(const char* value) {
  enableDescription().setStringValue(value);
  return *this;
}

bool SubsystemMaintenanceEventSettingsType::hasDescription() const noexcept {
  return static_cast<bool>(description_Accessor);
}

uci::type::VisibleString64Type& SubsystemMaintenanceEventSettingsType::enableDescription(uci::base::accessorType::AccessorType type) {
  if (!description_Accessor) {
    description_Accessor = VisibleString64Type::create(type);
  }
  return *description_Accessor;
}

uci::type::SubsystemMaintenanceEventSettingsType& SubsystemMaintenanceEventSettingsType::clearDescription() noexcept {
  description_Accessor.reset();
  return *this;
}

xs::Boolean SubsystemMaintenanceEventSettingsType::getRequired() const {
  return required_Accessor;
}

uci::type::SubsystemMaintenanceEventSettingsType& SubsystemMaintenanceEventSettingsType::setRequired(xs::Boolean value) {
  required_Accessor = value;
  return *this;
}


const uci::type::NameValuePairType& SubsystemMaintenanceEventSettingsType::getNominalValue() const {
  return *nominalValue_Accessor;
}

uci::type::NameValuePairType& SubsystemMaintenanceEventSettingsType::getNominalValue() {
  return *nominalValue_Accessor;
}

uci::type::SubsystemMaintenanceEventSettingsType& SubsystemMaintenanceEventSettingsType::setNominalValue(const uci::type::NameValuePairType& accessor) {
  enableNominalValue(accessor.getAccessorType());
  if (&accessor != nominalValue_Accessor.get()) {
    nominalValue_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::NameValuePairType& SubsystemMaintenanceEventSettingsType::enableNominalValue(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::nameValuePairType : type};
  if ((!nominalValue_Accessor) || (nominalValue_Accessor->getAccessorType() != requestedType)) {
    nominalValue_Accessor = NameValuePairType::create(requestedType);
    if (!nominalValue_Accessor) {
      throw uci::base::UCIException("Error in enableNominalValue(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nominalValue_Accessor;
}

uci::type::NameValuePairType& SubsystemMaintenanceEventSettingsType::getMinValue_() const {
  if (minValue_Accessor) {
    return *minValue_Accessor;
  }
  throw uci::base::UCIException("Error in getMinValue(): An attempt was made to get an optional field that was not enabled, call hasMinValue() to determine if it is safe to call getMinValue()");
}

const uci::type::NameValuePairType& SubsystemMaintenanceEventSettingsType::getMinValue() const {
  return getMinValue_();
}

uci::type::NameValuePairType& SubsystemMaintenanceEventSettingsType::getMinValue() {
  return getMinValue_();
}

uci::type::SubsystemMaintenanceEventSettingsType& SubsystemMaintenanceEventSettingsType::setMinValue(const uci::type::NameValuePairType& accessor) {
  enableMinValue(accessor.getAccessorType());
  if (&accessor != minValue_Accessor.get()) {
    minValue_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SubsystemMaintenanceEventSettingsType::hasMinValue() const noexcept {
  return static_cast<bool>(minValue_Accessor);
}

uci::type::NameValuePairType& SubsystemMaintenanceEventSettingsType::enableMinValue(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::nameValuePairType : type};
  if ((!minValue_Accessor) || (minValue_Accessor->getAccessorType() != requestedType)) {
    minValue_Accessor = NameValuePairType::create(requestedType);
    if (!minValue_Accessor) {
      throw uci::base::UCIException("Error in enableMinValue(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *minValue_Accessor;
}

uci::type::SubsystemMaintenanceEventSettingsType& SubsystemMaintenanceEventSettingsType::clearMinValue() noexcept {
  minValue_Accessor.reset();
  return *this;
}

uci::type::NameValuePairType& SubsystemMaintenanceEventSettingsType::getMaxValue_() const {
  if (maxValue_Accessor) {
    return *maxValue_Accessor;
  }
  throw uci::base::UCIException("Error in getMaxValue(): An attempt was made to get an optional field that was not enabled, call hasMaxValue() to determine if it is safe to call getMaxValue()");
}

const uci::type::NameValuePairType& SubsystemMaintenanceEventSettingsType::getMaxValue() const {
  return getMaxValue_();
}

uci::type::NameValuePairType& SubsystemMaintenanceEventSettingsType::getMaxValue() {
  return getMaxValue_();
}

uci::type::SubsystemMaintenanceEventSettingsType& SubsystemMaintenanceEventSettingsType::setMaxValue(const uci::type::NameValuePairType& accessor) {
  enableMaxValue(accessor.getAccessorType());
  if (&accessor != maxValue_Accessor.get()) {
    maxValue_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SubsystemMaintenanceEventSettingsType::hasMaxValue() const noexcept {
  return static_cast<bool>(maxValue_Accessor);
}

uci::type::NameValuePairType& SubsystemMaintenanceEventSettingsType::enableMaxValue(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::nameValuePairType : type};
  if ((!maxValue_Accessor) || (maxValue_Accessor->getAccessorType() != requestedType)) {
    maxValue_Accessor = NameValuePairType::create(requestedType);
    if (!maxValue_Accessor) {
      throw uci::base::UCIException("Error in enableMaxValue(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *maxValue_Accessor;
}

uci::type::SubsystemMaintenanceEventSettingsType& SubsystemMaintenanceEventSettingsType::clearMaxValue() noexcept {
  maxValue_Accessor.reset();
  return *this;
}

std::unique_ptr<SubsystemMaintenanceEventSettingsType> SubsystemMaintenanceEventSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemMaintenanceEventSettingsType : type};
  return (requestedType == uci::type::accessorType::subsystemMaintenanceEventSettingsType) ? boost::make_unique<SubsystemMaintenanceEventSettingsType>() : nullptr;
}

/**  */
namespace SubsystemMaintenanceEventSettingsType_Names {

constexpr const char* Extern_Type_Name{"SubsystemMaintenanceEventSettingsType"};
constexpr const char* EventIdentifier_Name{"EventIdentifier"};
constexpr const char* Description_Name{"Description"};
constexpr const char* Required_Name{"Required"};
constexpr const char* NominalValue_Name{"NominalValue"};
constexpr const char* MinValue_Name{"MinValue"};
constexpr const char* MaxValue_Name{"MaxValue"};

} // namespace SubsystemMaintenanceEventSettingsType_Names

void SubsystemMaintenanceEventSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemMaintenanceEventSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemMaintenanceEventSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceEventSettingsType_Names::EventIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEventIdentifier(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceEventSettingsType_Names::Description_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDescription(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceEventSettingsType_Names::Required_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRequired(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceEventSettingsType_Names::NominalValue_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableNominalValue(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceEventSettingsType_Names::MinValue_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableMinValue(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceEventSettingsType_Names::MaxValue_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableMaxValue(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string SubsystemMaintenanceEventSettingsType::serialize(const uci::type::SubsystemMaintenanceEventSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemMaintenanceEventSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemMaintenanceEventSettingsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getEventIdentifier(), node, SubsystemMaintenanceEventSettingsType_Names::EventIdentifier_Name);
  if (accessor.hasDescription()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDescription(), node, SubsystemMaintenanceEventSettingsType_Names::Description_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getRequired(), node, SubsystemMaintenanceEventSettingsType_Names::Required_Name);
  NameValuePairType::serialize(accessor.getNominalValue(), node, SubsystemMaintenanceEventSettingsType_Names::NominalValue_Name);
  if (accessor.hasMinValue()) {
    NameValuePairType::serialize(accessor.getMinValue(), node, SubsystemMaintenanceEventSettingsType_Names::MinValue_Name);
  }
  if (accessor.hasMaxValue()) {
    NameValuePairType::serialize(accessor.getMaxValue(), node, SubsystemMaintenanceEventSettingsType_Names::MaxValue_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubsystemMaintenanceEventSettingsType& SubsystemMaintenanceEventSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubsystemMaintenanceEventSettingsType>().release());
}

uci::type::SubsystemMaintenanceEventSettingsType& SubsystemMaintenanceEventSettingsType::create(const uci::type::SubsystemMaintenanceEventSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubsystemMaintenanceEventSettingsType> newAccessor{boost::make_unique<asb_uci::type::SubsystemMaintenanceEventSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubsystemMaintenanceEventSettingsType::destroy(uci::type::SubsystemMaintenanceEventSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::SubsystemMaintenanceEventSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

