/** @file EquatorialCoordinatesCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EquatorialCoordinatesCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EquatorialCoordinatesCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EquatorialCoordinatesCovarianceType::EquatorialCoordinatesCovarianceType() = default;

EquatorialCoordinatesCovarianceType::~EquatorialCoordinatesCovarianceType() = default;

void EquatorialCoordinatesCovarianceType::copy(const uci::type::EquatorialCoordinatesCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void EquatorialCoordinatesCovarianceType::copyImpl(const uci::type::EquatorialCoordinatesCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EquatorialCoordinatesCovarianceType&>(accessor);
    if (accessorImpl.hasRA_RA()) {
      setRA_RA(accessorImpl.getRA_RA());
    } else {
      clearRA_RA();
    }
    if (accessorImpl.hasRA_Dec()) {
      setRA_Dec(accessorImpl.getRA_Dec());
    } else {
      clearRA_Dec();
    }
    if (accessorImpl.hasRA_Range()) {
      setRA_Range(accessorImpl.getRA_Range());
    } else {
      clearRA_Range();
    }
    if (accessorImpl.hasDecDec()) {
      setDecDec(accessorImpl.getDecDec());
    } else {
      clearDecDec();
    }
    if (accessorImpl.hasDecRange()) {
      setDecRange(accessorImpl.getDecRange());
    } else {
      clearDecRange();
    }
    if (accessorImpl.hasRangeRange()) {
      setRangeRange(accessorImpl.getRangeRange());
    } else {
      clearRangeRange();
    }
  }
}

void EquatorialCoordinatesCovarianceType::reset() noexcept {
  clearRA_RA();
  clearRA_Dec();
  clearRA_Range();
  clearDecDec();
  clearDecRange();
  clearRangeRange();
}

xs::Double EquatorialCoordinatesCovarianceType::getRA_RA() const {
  if (rA_RA_Accessor) {
    return *rA_RA_Accessor;
  }
  throw uci::base::UCIException("Error in getRA_RA(): An attempt was made to get an optional field that was not enabled, call hasRA_RA() to determine if it is safe to call getRA_RA()");
}

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::setRA_RA(xs::Double value) {
  rA_RA_Accessor = value;
  return *this;
}

bool EquatorialCoordinatesCovarianceType::hasRA_RA() const noexcept {
  return rA_RA_Accessor.has_value();
}

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::clearRA_RA() noexcept {
  rA_RA_Accessor.reset();
  return *this;
}

xs::Double EquatorialCoordinatesCovarianceType::getRA_Dec() const {
  if (rA_Dec_Accessor) {
    return *rA_Dec_Accessor;
  }
  throw uci::base::UCIException("Error in getRA_Dec(): An attempt was made to get an optional field that was not enabled, call hasRA_Dec() to determine if it is safe to call getRA_Dec()");
}

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::setRA_Dec(xs::Double value) {
  rA_Dec_Accessor = value;
  return *this;
}

bool EquatorialCoordinatesCovarianceType::hasRA_Dec() const noexcept {
  return rA_Dec_Accessor.has_value();
}

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::clearRA_Dec() noexcept {
  rA_Dec_Accessor.reset();
  return *this;
}

xs::Double EquatorialCoordinatesCovarianceType::getRA_Range() const {
  if (rA_Range_Accessor) {
    return *rA_Range_Accessor;
  }
  throw uci::base::UCIException("Error in getRA_Range(): An attempt was made to get an optional field that was not enabled, call hasRA_Range() to determine if it is safe to call getRA_Range()");
}

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::setRA_Range(xs::Double value) {
  rA_Range_Accessor = value;
  return *this;
}

bool EquatorialCoordinatesCovarianceType::hasRA_Range() const noexcept {
  return rA_Range_Accessor.has_value();
}

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::clearRA_Range() noexcept {
  rA_Range_Accessor.reset();
  return *this;
}

xs::Double EquatorialCoordinatesCovarianceType::getDecDec() const {
  if (decDec_Accessor) {
    return *decDec_Accessor;
  }
  throw uci::base::UCIException("Error in getDecDec(): An attempt was made to get an optional field that was not enabled, call hasDecDec() to determine if it is safe to call getDecDec()");
}

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::setDecDec(xs::Double value) {
  decDec_Accessor = value;
  return *this;
}

bool EquatorialCoordinatesCovarianceType::hasDecDec() const noexcept {
  return decDec_Accessor.has_value();
}

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::clearDecDec() noexcept {
  decDec_Accessor.reset();
  return *this;
}

xs::Double EquatorialCoordinatesCovarianceType::getDecRange() const {
  if (decRange_Accessor) {
    return *decRange_Accessor;
  }
  throw uci::base::UCIException("Error in getDecRange(): An attempt was made to get an optional field that was not enabled, call hasDecRange() to determine if it is safe to call getDecRange()");
}

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::setDecRange(xs::Double value) {
  decRange_Accessor = value;
  return *this;
}

bool EquatorialCoordinatesCovarianceType::hasDecRange() const noexcept {
  return decRange_Accessor.has_value();
}

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::clearDecRange() noexcept {
  decRange_Accessor.reset();
  return *this;
}

xs::Double EquatorialCoordinatesCovarianceType::getRangeRange() const {
  if (rangeRange_Accessor) {
    return *rangeRange_Accessor;
  }
  throw uci::base::UCIException("Error in getRangeRange(): An attempt was made to get an optional field that was not enabled, call hasRangeRange() to determine if it is safe to call getRangeRange()");
}

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::setRangeRange(xs::Double value) {
  rangeRange_Accessor = value;
  return *this;
}

bool EquatorialCoordinatesCovarianceType::hasRangeRange() const noexcept {
  return rangeRange_Accessor.has_value();
}

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::clearRangeRange() noexcept {
  rangeRange_Accessor.reset();
  return *this;
}

std::unique_ptr<EquatorialCoordinatesCovarianceType> EquatorialCoordinatesCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::equatorialCoordinatesCovarianceType : type};
  return (requestedType == uci::type::accessorType::equatorialCoordinatesCovarianceType) ? boost::make_unique<EquatorialCoordinatesCovarianceType>() : nullptr;
}

/**  */
namespace EquatorialCoordinatesCovarianceType_Names {

constexpr const char* Extern_Type_Name{"EquatorialCoordinatesCovarianceType"};
constexpr const char* RA_RA_Name{"RA_RA"};
constexpr const char* RA_Dec_Name{"RA_Dec"};
constexpr const char* RA_Range_Name{"RA_Range"};
constexpr const char* DecDec_Name{"DecDec"};
constexpr const char* DecRange_Name{"DecRange"};
constexpr const char* RangeRange_Name{"RangeRange"};

} // namespace EquatorialCoordinatesCovarianceType_Names

void EquatorialCoordinatesCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EquatorialCoordinatesCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EquatorialCoordinatesCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EquatorialCoordinatesCovarianceType_Names::RA_RA_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRA_RA(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EquatorialCoordinatesCovarianceType_Names::RA_Dec_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRA_Dec(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EquatorialCoordinatesCovarianceType_Names::RA_Range_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRA_Range(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EquatorialCoordinatesCovarianceType_Names::DecDec_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDecDec(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EquatorialCoordinatesCovarianceType_Names::DecRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDecRange(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EquatorialCoordinatesCovarianceType_Names::RangeRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRangeRange(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string EquatorialCoordinatesCovarianceType::serialize(const uci::type::EquatorialCoordinatesCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EquatorialCoordinatesCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EquatorialCoordinatesCovarianceType_Names::Extern_Type_Name);
  }
  if (accessor.hasRA_RA()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRA_RA(), node, EquatorialCoordinatesCovarianceType_Names::RA_RA_Name);
  }
  if (accessor.hasRA_Dec()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRA_Dec(), node, EquatorialCoordinatesCovarianceType_Names::RA_Dec_Name);
  }
  if (accessor.hasRA_Range()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRA_Range(), node, EquatorialCoordinatesCovarianceType_Names::RA_Range_Name);
  }
  if (accessor.hasDecDec()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDecDec(), node, EquatorialCoordinatesCovarianceType_Names::DecDec_Name);
  }
  if (accessor.hasDecRange()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDecRange(), node, EquatorialCoordinatesCovarianceType_Names::DecRange_Name);
  }
  if (accessor.hasRangeRange()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRangeRange(), node, EquatorialCoordinatesCovarianceType_Names::RangeRange_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EquatorialCoordinatesCovarianceType>().release());
}

uci::type::EquatorialCoordinatesCovarianceType& EquatorialCoordinatesCovarianceType::create(const uci::type::EquatorialCoordinatesCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EquatorialCoordinatesCovarianceType> newAccessor{boost::make_unique<asb_uci::type::EquatorialCoordinatesCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EquatorialCoordinatesCovarianceType::destroy(uci::type::EquatorialCoordinatesCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::EquatorialCoordinatesCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

