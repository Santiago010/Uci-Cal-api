/** @file OrbitPlanValidationInvalidSequenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitPlanValidationInvalidSequenceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CannotComplyType.h"
#include "../../../include/asb_uci/type/OrbitKinematicsSequenceID_Type.h"
#include "../../../include/asb_uci/type/OrbitPlanValidationInvalidManeuverSegmentType.h"
#include "../../../include/asb_uci/type/OrbitValidationErrorType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CannotComplyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitKinematicsSequenceID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitPlanValidationInvalidManeuverSegmentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitPlanValidationInvalidSequenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitValidationErrorType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitPlanValidationInvalidSequenceType::OrbitPlanValidationInvalidSequenceType()
  : sequenceID_Accessor{boost::make_unique<OrbitKinematicsSequenceID_Type>()},
    invalidManeuverSegment_Accessor{boost::make_unique<InvalidManeuverSegment>(0, SIZE_MAX)} {
}

OrbitPlanValidationInvalidSequenceType::~OrbitPlanValidationInvalidSequenceType() = default;

void OrbitPlanValidationInvalidSequenceType::copy(const uci::type::OrbitPlanValidationInvalidSequenceType& accessor) {
  copyImpl(accessor, false);
}

void OrbitPlanValidationInvalidSequenceType::copyImpl(const uci::type::OrbitPlanValidationInvalidSequenceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitPlanValidationInvalidSequenceType&>(accessor);
    setSequenceID(*(accessorImpl.sequenceID_Accessor));
    if (accessorImpl.kinematicInvalidReason_Accessor) {
      setKinematicInvalidReason(*(accessorImpl.kinematicInvalidReason_Accessor));
    } else {
      kinematicInvalidReason_Accessor.reset();
    }
    setInvalidManeuverSegment(*(accessorImpl.invalidManeuverSegment_Accessor));
    if (accessorImpl.otherInvalidReason_Accessor) {
      setOtherInvalidReason(*(accessorImpl.otherInvalidReason_Accessor));
    } else {
      otherInvalidReason_Accessor.reset();
    }
  }
}

void OrbitPlanValidationInvalidSequenceType::reset() noexcept {
  sequenceID_Accessor->reset();
  kinematicInvalidReason_Accessor.reset();
  invalidManeuverSegment_Accessor->reset();
  otherInvalidReason_Accessor.reset();
}

const uci::type::OrbitKinematicsSequenceID_Type& OrbitPlanValidationInvalidSequenceType::getSequenceID() const {
  return *sequenceID_Accessor;
}

uci::type::OrbitKinematicsSequenceID_Type& OrbitPlanValidationInvalidSequenceType::getSequenceID() {
  return *sequenceID_Accessor;
}

uci::type::OrbitPlanValidationInvalidSequenceType& OrbitPlanValidationInvalidSequenceType::setSequenceID(const uci::type::OrbitKinematicsSequenceID_Type& accessor) {
  if (&accessor != sequenceID_Accessor.get()) {
    sequenceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitValidationErrorType& OrbitPlanValidationInvalidSequenceType::getKinematicInvalidReason_() const {
  if (kinematicInvalidReason_Accessor) {
    return *kinematicInvalidReason_Accessor;
  }
  throw uci::base::UCIException("Error in getKinematicInvalidReason(): An attempt was made to get an optional field that was not enabled, call hasKinematicInvalidReason() to determine if it is safe to call getKinematicInvalidReason()");
}

const uci::type::OrbitValidationErrorType& OrbitPlanValidationInvalidSequenceType::getKinematicInvalidReason() const {
  return getKinematicInvalidReason_();
}

uci::type::OrbitValidationErrorType& OrbitPlanValidationInvalidSequenceType::getKinematicInvalidReason() {
  return getKinematicInvalidReason_();
}

uci::type::OrbitPlanValidationInvalidSequenceType& OrbitPlanValidationInvalidSequenceType::setKinematicInvalidReason(const uci::type::OrbitValidationErrorType& accessor) {
  enableKinematicInvalidReason();
  if (&accessor != kinematicInvalidReason_Accessor.get()) {
    kinematicInvalidReason_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitPlanValidationInvalidSequenceType::hasKinematicInvalidReason() const noexcept {
  return static_cast<bool>(kinematicInvalidReason_Accessor);
}

uci::type::OrbitValidationErrorType& OrbitPlanValidationInvalidSequenceType::enableKinematicInvalidReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitValidationErrorType : type};
  if ((!kinematicInvalidReason_Accessor) || (kinematicInvalidReason_Accessor->getAccessorType() != requestedType)) {
    kinematicInvalidReason_Accessor = OrbitValidationErrorType::create(requestedType);
    if (!kinematicInvalidReason_Accessor) {
      throw uci::base::UCIException("Error in enableKinematicInvalidReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *kinematicInvalidReason_Accessor;
}

uci::type::OrbitPlanValidationInvalidSequenceType& OrbitPlanValidationInvalidSequenceType::clearKinematicInvalidReason() noexcept {
  kinematicInvalidReason_Accessor.reset();
  return *this;
}

const uci::type::OrbitPlanValidationInvalidSequenceType::InvalidManeuverSegment& OrbitPlanValidationInvalidSequenceType::getInvalidManeuverSegment() const {
  return *invalidManeuverSegment_Accessor;
}

uci::type::OrbitPlanValidationInvalidSequenceType::InvalidManeuverSegment& OrbitPlanValidationInvalidSequenceType::getInvalidManeuverSegment() {
  return *invalidManeuverSegment_Accessor;
}

uci::type::OrbitPlanValidationInvalidSequenceType& OrbitPlanValidationInvalidSequenceType::setInvalidManeuverSegment(const uci::type::OrbitPlanValidationInvalidSequenceType::InvalidManeuverSegment& accessor) {
  if (&accessor != invalidManeuverSegment_Accessor.get()) {
    invalidManeuverSegment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CannotComplyType& OrbitPlanValidationInvalidSequenceType::getOtherInvalidReason_() const {
  if (otherInvalidReason_Accessor) {
    return *otherInvalidReason_Accessor;
  }
  throw uci::base::UCIException("Error in getOtherInvalidReason(): An attempt was made to get an optional field that was not enabled, call hasOtherInvalidReason() to determine if it is safe to call getOtherInvalidReason()");
}

const uci::type::CannotComplyType& OrbitPlanValidationInvalidSequenceType::getOtherInvalidReason() const {
  return getOtherInvalidReason_();
}

uci::type::CannotComplyType& OrbitPlanValidationInvalidSequenceType::getOtherInvalidReason() {
  return getOtherInvalidReason_();
}

uci::type::OrbitPlanValidationInvalidSequenceType& OrbitPlanValidationInvalidSequenceType::setOtherInvalidReason(const uci::type::CannotComplyType& accessor) {
  enableOtherInvalidReason(accessor.getAccessorType());
  if (&accessor != otherInvalidReason_Accessor.get()) {
    otherInvalidReason_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OrbitPlanValidationInvalidSequenceType::hasOtherInvalidReason() const noexcept {
  return static_cast<bool>(otherInvalidReason_Accessor);
}

uci::type::CannotComplyType& OrbitPlanValidationInvalidSequenceType::enableOtherInvalidReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!otherInvalidReason_Accessor) || (otherInvalidReason_Accessor->getAccessorType() != requestedType)) {
    otherInvalidReason_Accessor = CannotComplyType::create(requestedType);
    if (!otherInvalidReason_Accessor) {
      throw uci::base::UCIException("Error in enableOtherInvalidReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *otherInvalidReason_Accessor;
}

uci::type::OrbitPlanValidationInvalidSequenceType& OrbitPlanValidationInvalidSequenceType::clearOtherInvalidReason() noexcept {
  otherInvalidReason_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitPlanValidationInvalidSequenceType> OrbitPlanValidationInvalidSequenceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitPlanValidationInvalidSequenceType : type};
  return (requestedType == uci::type::accessorType::orbitPlanValidationInvalidSequenceType) ? boost::make_unique<OrbitPlanValidationInvalidSequenceType>() : nullptr;
}

/**  */
namespace OrbitPlanValidationInvalidSequenceType_Names {

constexpr const char* Extern_Type_Name{"OrbitPlanValidationInvalidSequenceType"};
constexpr const char* SequenceID_Name{"SequenceID"};
constexpr const char* KinematicInvalidReason_Name{"KinematicInvalidReason"};
constexpr const char* InvalidManeuverSegment_Name{"InvalidManeuverSegment"};
constexpr const char* OtherInvalidReason_Name{"OtherInvalidReason"};

} // namespace OrbitPlanValidationInvalidSequenceType_Names

void OrbitPlanValidationInvalidSequenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitPlanValidationInvalidSequenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitPlanValidationInvalidSequenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitPlanValidationInvalidSequenceType_Names::SequenceID_Name) {
      OrbitKinematicsSequenceID_Type::deserialize(valueType.second, accessor.getSequenceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitPlanValidationInvalidSequenceType_Names::KinematicInvalidReason_Name) {
      OrbitValidationErrorType::deserialize(valueType.second, accessor.enableKinematicInvalidReason(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitPlanValidationInvalidSequenceType_Names::InvalidManeuverSegment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitPlanValidationInvalidSequenceType::InvalidManeuverSegment& boundedList = accessor.getInvalidManeuverSegment();
        const uci::type::OrbitPlanValidationInvalidSequenceType::InvalidManeuverSegment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitPlanValidationInvalidManeuverSegmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitPlanValidationInvalidSequenceType_Names::OtherInvalidReason_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableOtherInvalidReason(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string OrbitPlanValidationInvalidSequenceType::serialize(const uci::type::OrbitPlanValidationInvalidSequenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitPlanValidationInvalidSequenceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitPlanValidationInvalidSequenceType_Names::Extern_Type_Name);
  }
  OrbitKinematicsSequenceID_Type::serialize(accessor.getSequenceID(), node, OrbitPlanValidationInvalidSequenceType_Names::SequenceID_Name);
  if (accessor.hasKinematicInvalidReason()) {
    OrbitValidationErrorType::serialize(accessor.getKinematicInvalidReason(), node, OrbitPlanValidationInvalidSequenceType_Names::KinematicInvalidReason_Name);
  }
  {
    const uci::type::OrbitPlanValidationInvalidSequenceType::InvalidManeuverSegment& boundedList = accessor.getInvalidManeuverSegment();
    for (uci::type::OrbitPlanValidationInvalidSequenceType::InvalidManeuverSegment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitPlanValidationInvalidManeuverSegmentType::serialize(boundedList.at(i), node, OrbitPlanValidationInvalidSequenceType_Names::InvalidManeuverSegment_Name);
    }
  }
  if (accessor.hasOtherInvalidReason()) {
    CannotComplyType::serialize(accessor.getOtherInvalidReason(), node, OrbitPlanValidationInvalidSequenceType_Names::OtherInvalidReason_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitPlanValidationInvalidSequenceType& OrbitPlanValidationInvalidSequenceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitPlanValidationInvalidSequenceType>().release());
}

uci::type::OrbitPlanValidationInvalidSequenceType& OrbitPlanValidationInvalidSequenceType::create(const uci::type::OrbitPlanValidationInvalidSequenceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitPlanValidationInvalidSequenceType> newAccessor{boost::make_unique<asb_uci::type::OrbitPlanValidationInvalidSequenceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitPlanValidationInvalidSequenceType::destroy(uci::type::OrbitPlanValidationInvalidSequenceType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitPlanValidationInvalidSequenceType*>(&accessor);
}

} // namespace type

} // namespace uci

