/** @file IPv4_ConnectionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/IPv4_ConnectionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/IPv4_AddressType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/IPv4_AddressType.h"
#include "uci/type/IPv4_ConnectionType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IPv4_ConnectionType::IPv4_ConnectionType() = default;

IPv4_ConnectionType::~IPv4_ConnectionType() = default;

void IPv4_ConnectionType::copy(const uci::type::IPv4_ConnectionType& accessor) {
  copyImpl(accessor, false);
}

void IPv4_ConnectionType::copyImpl(const uci::type::IPv4_ConnectionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IPv4_ConnectionType&>(accessor);
    if (accessorImpl.iPv4_Address_Accessor) {
      setIPv4_Address(*(accessorImpl.iPv4_Address_Accessor));
    } else {
      iPv4_Address_Accessor.reset();
    }
    if (accessorImpl.hasIPv4_SourceCIDR_Mask()) {
      setIPv4_SourceCIDR_Mask(accessorImpl.getIPv4_SourceCIDR_Mask());
    } else {
      clearIPv4_SourceCIDR_Mask();
    }
    if (accessorImpl.hasIPv4_ProtocolHeader()) {
      setIPv4_ProtocolHeader(accessorImpl.getIPv4_ProtocolHeader());
    } else {
      clearIPv4_ProtocolHeader();
    }
    if (accessorImpl.hasIPv4_PortRangeStart()) {
      setIPv4_PortRangeStart(accessorImpl.getIPv4_PortRangeStart());
    } else {
      clearIPv4_PortRangeStart();
    }
    if (accessorImpl.hasIPv4_PortRangeEnd()) {
      setIPv4_PortRangeEnd(accessorImpl.getIPv4_PortRangeEnd());
    } else {
      clearIPv4_PortRangeEnd();
    }
    if (accessorImpl.hasIPv4_DS_Field()) {
      setIPv4_DS_Field(accessorImpl.getIPv4_DS_Field());
    } else {
      clearIPv4_DS_Field();
    }
    if (accessorImpl.hasIPv4_MTU_Size()) {
      setIPv4_MTU_Size(accessorImpl.getIPv4_MTU_Size());
    } else {
      clearIPv4_MTU_Size();
    }
  }
}

void IPv4_ConnectionType::reset() noexcept {
  iPv4_Address_Accessor.reset();
  clearIPv4_SourceCIDR_Mask();
  clearIPv4_ProtocolHeader();
  clearIPv4_PortRangeStart();
  clearIPv4_PortRangeEnd();
  clearIPv4_DS_Field();
  clearIPv4_MTU_Size();
}

uci::type::IPv4_AddressType& IPv4_ConnectionType::getIPv4_Address_() const {
  if (iPv4_Address_Accessor) {
    return *iPv4_Address_Accessor;
  }
  throw uci::base::UCIException("Error in getIPv4_Address(): An attempt was made to get an optional field that was not enabled, call hasIPv4_Address() to determine if it is safe to call getIPv4_Address()");
}

const uci::type::IPv4_AddressType& IPv4_ConnectionType::getIPv4_Address() const {
  return getIPv4_Address_();
}

uci::type::IPv4_AddressType& IPv4_ConnectionType::getIPv4_Address() {
  return getIPv4_Address_();
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::setIPv4_Address(const uci::type::IPv4_AddressType& value) {
  return setIPv4_Address(value.c_str());
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::setIPv4_Address(const std::string& value) {
  return setIPv4_Address(value.c_str());
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::setIPv4_Address(const char* value) {
  enableIPv4_Address().setStringValue(value);
  return *this;
}

bool IPv4_ConnectionType::hasIPv4_Address() const noexcept {
  return static_cast<bool>(iPv4_Address_Accessor);
}

uci::type::IPv4_AddressType& IPv4_ConnectionType::enableIPv4_Address(uci::base::accessorType::AccessorType type) {
  if (!iPv4_Address_Accessor) {
    iPv4_Address_Accessor = IPv4_AddressType::create(type);
  }
  return *iPv4_Address_Accessor;
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::clearIPv4_Address() noexcept {
  iPv4_Address_Accessor.reset();
  return *this;
}

xs::Int IPv4_ConnectionType::getIPv4_SourceCIDR_Mask() const {
  if (iPv4_SourceCIDR_Mask_Accessor) {
    return *iPv4_SourceCIDR_Mask_Accessor;
  }
  throw uci::base::UCIException("Error in getIPv4_SourceCIDR_Mask(): An attempt was made to get an optional field that was not enabled, call hasIPv4_SourceCIDR_Mask() to determine if it is safe to call getIPv4_SourceCIDR_Mask()");
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::setIPv4_SourceCIDR_Mask(xs::Int value) {
  iPv4_SourceCIDR_Mask_Accessor = value;
  return *this;
}

bool IPv4_ConnectionType::hasIPv4_SourceCIDR_Mask() const noexcept {
  return iPv4_SourceCIDR_Mask_Accessor.has_value();
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::clearIPv4_SourceCIDR_Mask() noexcept {
  iPv4_SourceCIDR_Mask_Accessor.reset();
  return *this;
}

xs::Int IPv4_ConnectionType::getIPv4_ProtocolHeader() const {
  if (iPv4_ProtocolHeader_Accessor) {
    return *iPv4_ProtocolHeader_Accessor;
  }
  throw uci::base::UCIException("Error in getIPv4_ProtocolHeader(): An attempt was made to get an optional field that was not enabled, call hasIPv4_ProtocolHeader() to determine if it is safe to call getIPv4_ProtocolHeader()");
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::setIPv4_ProtocolHeader(xs::Int value) {
  iPv4_ProtocolHeader_Accessor = value;
  return *this;
}

bool IPv4_ConnectionType::hasIPv4_ProtocolHeader() const noexcept {
  return iPv4_ProtocolHeader_Accessor.has_value();
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::clearIPv4_ProtocolHeader() noexcept {
  iPv4_ProtocolHeader_Accessor.reset();
  return *this;
}

xs::Int IPv4_ConnectionType::getIPv4_PortRangeStart() const {
  if (iPv4_PortRangeStart_Accessor) {
    return *iPv4_PortRangeStart_Accessor;
  }
  throw uci::base::UCIException("Error in getIPv4_PortRangeStart(): An attempt was made to get an optional field that was not enabled, call hasIPv4_PortRangeStart() to determine if it is safe to call getIPv4_PortRangeStart()");
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::setIPv4_PortRangeStart(xs::Int value) {
  iPv4_PortRangeStart_Accessor = value;
  return *this;
}

bool IPv4_ConnectionType::hasIPv4_PortRangeStart() const noexcept {
  return iPv4_PortRangeStart_Accessor.has_value();
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::clearIPv4_PortRangeStart() noexcept {
  iPv4_PortRangeStart_Accessor.reset();
  return *this;
}

xs::Int IPv4_ConnectionType::getIPv4_PortRangeEnd() const {
  if (iPv4_PortRangeEnd_Accessor) {
    return *iPv4_PortRangeEnd_Accessor;
  }
  throw uci::base::UCIException("Error in getIPv4_PortRangeEnd(): An attempt was made to get an optional field that was not enabled, call hasIPv4_PortRangeEnd() to determine if it is safe to call getIPv4_PortRangeEnd()");
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::setIPv4_PortRangeEnd(xs::Int value) {
  iPv4_PortRangeEnd_Accessor = value;
  return *this;
}

bool IPv4_ConnectionType::hasIPv4_PortRangeEnd() const noexcept {
  return iPv4_PortRangeEnd_Accessor.has_value();
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::clearIPv4_PortRangeEnd() noexcept {
  iPv4_PortRangeEnd_Accessor.reset();
  return *this;
}

xs::Int IPv4_ConnectionType::getIPv4_DS_Field() const {
  if (iPv4_DS_Field_Accessor) {
    return *iPv4_DS_Field_Accessor;
  }
  throw uci::base::UCIException("Error in getIPv4_DS_Field(): An attempt was made to get an optional field that was not enabled, call hasIPv4_DS_Field() to determine if it is safe to call getIPv4_DS_Field()");
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::setIPv4_DS_Field(xs::Int value) {
  iPv4_DS_Field_Accessor = value;
  return *this;
}

bool IPv4_ConnectionType::hasIPv4_DS_Field() const noexcept {
  return iPv4_DS_Field_Accessor.has_value();
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::clearIPv4_DS_Field() noexcept {
  iPv4_DS_Field_Accessor.reset();
  return *this;
}

xs::Int IPv4_ConnectionType::getIPv4_MTU_Size() const {
  if (iPv4_MTU_Size_Accessor) {
    return *iPv4_MTU_Size_Accessor;
  }
  throw uci::base::UCIException("Error in getIPv4_MTU_Size(): An attempt was made to get an optional field that was not enabled, call hasIPv4_MTU_Size() to determine if it is safe to call getIPv4_MTU_Size()");
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::setIPv4_MTU_Size(xs::Int value) {
  iPv4_MTU_Size_Accessor = value;
  return *this;
}

bool IPv4_ConnectionType::hasIPv4_MTU_Size() const noexcept {
  return iPv4_MTU_Size_Accessor.has_value();
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::clearIPv4_MTU_Size() noexcept {
  iPv4_MTU_Size_Accessor.reset();
  return *this;
}

std::unique_ptr<IPv4_ConnectionType> IPv4_ConnectionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iPv4_ConnectionType : type};
  return (requestedType == uci::type::accessorType::iPv4_ConnectionType) ? boost::make_unique<IPv4_ConnectionType>() : nullptr;
}

/**  */
namespace IPv4_ConnectionType_Names {

constexpr const char* Extern_Type_Name{"IPv4_ConnectionType"};
constexpr const char* IPv4_Address_Name{"IPv4_Address"};
constexpr const char* IPv4_SourceCIDR_Mask_Name{"IPv4_SourceCIDR_Mask"};
constexpr const char* IPv4_ProtocolHeader_Name{"IPv4_ProtocolHeader"};
constexpr const char* IPv4_PortRangeStart_Name{"IPv4_PortRangeStart"};
constexpr const char* IPv4_PortRangeEnd_Name{"IPv4_PortRangeEnd"};
constexpr const char* IPv4_DS_Field_Name{"IPv4_DS_Field"};
constexpr const char* IPv4_MTU_Size_Name{"IPv4_MTU_Size"};

} // namespace IPv4_ConnectionType_Names

void IPv4_ConnectionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IPv4_ConnectionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IPv4_ConnectionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IPv4_ConnectionType_Names::IPv4_Address_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIPv4_Address(*value);
      }
    } else if (valueType.first == nsPrefix + IPv4_ConnectionType_Names::IPv4_SourceCIDR_Mask_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIPv4_SourceCIDR_Mask(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + IPv4_ConnectionType_Names::IPv4_ProtocolHeader_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIPv4_ProtocolHeader(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + IPv4_ConnectionType_Names::IPv4_PortRangeStart_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIPv4_PortRangeStart(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + IPv4_ConnectionType_Names::IPv4_PortRangeEnd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIPv4_PortRangeEnd(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + IPv4_ConnectionType_Names::IPv4_DS_Field_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIPv4_DS_Field(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + IPv4_ConnectionType_Names::IPv4_MTU_Size_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIPv4_MTU_Size(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    }
  }
}

std::string IPv4_ConnectionType::serialize(const uci::type::IPv4_ConnectionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IPv4_ConnectionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IPv4_ConnectionType_Names::Extern_Type_Name);
  }
  if (accessor.hasIPv4_Address()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getIPv4_Address(), node, IPv4_ConnectionType_Names::IPv4_Address_Name);
  }
  if (accessor.hasIPv4_SourceCIDR_Mask()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getIPv4_SourceCIDR_Mask(), node, IPv4_ConnectionType_Names::IPv4_SourceCIDR_Mask_Name);
  }
  if (accessor.hasIPv4_ProtocolHeader()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getIPv4_ProtocolHeader(), node, IPv4_ConnectionType_Names::IPv4_ProtocolHeader_Name);
  }
  if (accessor.hasIPv4_PortRangeStart()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getIPv4_PortRangeStart(), node, IPv4_ConnectionType_Names::IPv4_PortRangeStart_Name);
  }
  if (accessor.hasIPv4_PortRangeEnd()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getIPv4_PortRangeEnd(), node, IPv4_ConnectionType_Names::IPv4_PortRangeEnd_Name);
  }
  if (accessor.hasIPv4_DS_Field()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getIPv4_DS_Field(), node, IPv4_ConnectionType_Names::IPv4_DS_Field_Name);
  }
  if (accessor.hasIPv4_MTU_Size()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getIPv4_MTU_Size(), node, IPv4_ConnectionType_Names::IPv4_MTU_Size_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IPv4_ConnectionType>().release());
}

uci::type::IPv4_ConnectionType& IPv4_ConnectionType::create(const uci::type::IPv4_ConnectionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IPv4_ConnectionType> newAccessor{boost::make_unique<asb_uci::type::IPv4_ConnectionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IPv4_ConnectionType::destroy(uci::type::IPv4_ConnectionType& accessor) {
  delete dynamic_cast<asb_uci::type::IPv4_ConnectionType*>(&accessor);
}

} // namespace type

} // namespace uci

