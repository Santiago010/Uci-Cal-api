/** @file AnalysisRouteMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AnalysisRouteMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AnalysisRouteID_Type.h"
#include "../../../include/asb_uci/type/AnalysisRouteInformationType.h"
#include "../../../include/asb_uci/type/AnalysisRoutePathType.h"
#include "../../../include/asb_uci/type/RequestID_Type.h"
#include "../../../include/asb_uci/type/RoutePlanAnalysisInputsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnalysisRouteID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnalysisRouteInformationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnalysisRouteMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnalysisRoutePathType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequestID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RoutePlanAnalysisInputsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AnalysisRouteMDT::AnalysisRouteMDT()
  : analysisRouteID_Accessor{boost::make_unique<AnalysisRouteID_Type>()},
    analysisRouteInputs_Accessor{boost::make_unique<RoutePlanAnalysisInputsType>()},
    pathAnalysisData_Accessor{boost::make_unique<PathAnalysisData>(0, SIZE_MAX)} {
}

AnalysisRouteMDT::~AnalysisRouteMDT() = default;

void AnalysisRouteMDT::copy(const uci::type::AnalysisRouteMDT& accessor) {
  copyImpl(accessor, false);
}

void AnalysisRouteMDT::copyImpl(const uci::type::AnalysisRouteMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AnalysisRouteMDT&>(accessor);
    setAnalysisRouteID(*(accessorImpl.analysisRouteID_Accessor));
    if (accessorImpl.requestID_Accessor) {
      setRequestID(*(accessorImpl.requestID_Accessor));
    } else {
      requestID_Accessor.reset();
    }
    setTimeAnalysisPerformed(accessorImpl.timeAnalysisPerformed_Accessor);
    setAnalysisRouteInputs(*(accessorImpl.analysisRouteInputs_Accessor));
    if (accessorImpl.routeAnalysis_Accessor) {
      setRouteAnalysis(*(accessorImpl.routeAnalysis_Accessor));
    } else {
      routeAnalysis_Accessor.reset();
    }
    setPathAnalysisData(*(accessorImpl.pathAnalysisData_Accessor));
  }
}

void AnalysisRouteMDT::reset() noexcept {
  analysisRouteID_Accessor->reset();
  requestID_Accessor.reset();
  timeAnalysisPerformed_Accessor = 0;
  analysisRouteInputs_Accessor->reset();
  routeAnalysis_Accessor.reset();
  pathAnalysisData_Accessor->reset();
}

const uci::type::AnalysisRouteID_Type& AnalysisRouteMDT::getAnalysisRouteID() const {
  return *analysisRouteID_Accessor;
}

uci::type::AnalysisRouteID_Type& AnalysisRouteMDT::getAnalysisRouteID() {
  return *analysisRouteID_Accessor;
}

uci::type::AnalysisRouteMDT& AnalysisRouteMDT::setAnalysisRouteID(const uci::type::AnalysisRouteID_Type& accessor) {
  if (&accessor != analysisRouteID_Accessor.get()) {
    analysisRouteID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequestID_Type& AnalysisRouteMDT::getRequestID_() const {
  if (requestID_Accessor) {
    return *requestID_Accessor;
  }
  throw uci::base::UCIException("Error in getRequestID(): An attempt was made to get an optional field that was not enabled, call hasRequestID() to determine if it is safe to call getRequestID()");
}

const uci::type::RequestID_Type& AnalysisRouteMDT::getRequestID() const {
  return getRequestID_();
}

uci::type::RequestID_Type& AnalysisRouteMDT::getRequestID() {
  return getRequestID_();
}

uci::type::AnalysisRouteMDT& AnalysisRouteMDT::setRequestID(const uci::type::RequestID_Type& accessor) {
  enableRequestID();
  if (&accessor != requestID_Accessor.get()) {
    requestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AnalysisRouteMDT::hasRequestID() const noexcept {
  return static_cast<bool>(requestID_Accessor);
}

uci::type::RequestID_Type& AnalysisRouteMDT::enableRequestID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requestID_Type : type};
  if ((!requestID_Accessor) || (requestID_Accessor->getAccessorType() != requestedType)) {
    requestID_Accessor = RequestID_Type::create(requestedType);
    if (!requestID_Accessor) {
      throw uci::base::UCIException("Error in enableRequestID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requestID_Accessor;
}

uci::type::AnalysisRouteMDT& AnalysisRouteMDT::clearRequestID() noexcept {
  requestID_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue AnalysisRouteMDT::getTimeAnalysisPerformed() const {
  return timeAnalysisPerformed_Accessor;
}

uci::type::AnalysisRouteMDT& AnalysisRouteMDT::setTimeAnalysisPerformed(uci::type::DateTimeTypeValue value) {
  timeAnalysisPerformed_Accessor = value;
  return *this;
}


const uci::type::RoutePlanAnalysisInputsType& AnalysisRouteMDT::getAnalysisRouteInputs() const {
  return *analysisRouteInputs_Accessor;
}

uci::type::RoutePlanAnalysisInputsType& AnalysisRouteMDT::getAnalysisRouteInputs() {
  return *analysisRouteInputs_Accessor;
}

uci::type::AnalysisRouteMDT& AnalysisRouteMDT::setAnalysisRouteInputs(const uci::type::RoutePlanAnalysisInputsType& accessor) {
  if (&accessor != analysisRouteInputs_Accessor.get()) {
    analysisRouteInputs_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AnalysisRouteInformationType& AnalysisRouteMDT::getRouteAnalysis_() const {
  if (routeAnalysis_Accessor) {
    return *routeAnalysis_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteAnalysis(): An attempt was made to get an optional field that was not enabled, call hasRouteAnalysis() to determine if it is safe to call getRouteAnalysis()");
}

const uci::type::AnalysisRouteInformationType& AnalysisRouteMDT::getRouteAnalysis() const {
  return getRouteAnalysis_();
}

uci::type::AnalysisRouteInformationType& AnalysisRouteMDT::getRouteAnalysis() {
  return getRouteAnalysis_();
}

uci::type::AnalysisRouteMDT& AnalysisRouteMDT::setRouteAnalysis(const uci::type::AnalysisRouteInformationType& accessor) {
  enableRouteAnalysis();
  if (&accessor != routeAnalysis_Accessor.get()) {
    routeAnalysis_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AnalysisRouteMDT::hasRouteAnalysis() const noexcept {
  return static_cast<bool>(routeAnalysis_Accessor);
}

uci::type::AnalysisRouteInformationType& AnalysisRouteMDT::enableRouteAnalysis(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::analysisRouteInformationType : type};
  if ((!routeAnalysis_Accessor) || (routeAnalysis_Accessor->getAccessorType() != requestedType)) {
    routeAnalysis_Accessor = AnalysisRouteInformationType::create(requestedType);
    if (!routeAnalysis_Accessor) {
      throw uci::base::UCIException("Error in enableRouteAnalysis(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeAnalysis_Accessor;
}

uci::type::AnalysisRouteMDT& AnalysisRouteMDT::clearRouteAnalysis() noexcept {
  routeAnalysis_Accessor.reset();
  return *this;
}

const uci::type::AnalysisRouteMDT::PathAnalysisData& AnalysisRouteMDT::getPathAnalysisData() const {
  return *pathAnalysisData_Accessor;
}

uci::type::AnalysisRouteMDT::PathAnalysisData& AnalysisRouteMDT::getPathAnalysisData() {
  return *pathAnalysisData_Accessor;
}

uci::type::AnalysisRouteMDT& AnalysisRouteMDT::setPathAnalysisData(const uci::type::AnalysisRouteMDT::PathAnalysisData& accessor) {
  if (&accessor != pathAnalysisData_Accessor.get()) {
    pathAnalysisData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<AnalysisRouteMDT> AnalysisRouteMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::analysisRouteMDT : type};
  return (requestedType == uci::type::accessorType::analysisRouteMDT) ? boost::make_unique<AnalysisRouteMDT>() : nullptr;
}

/**  */
namespace AnalysisRouteMDT_Names {

constexpr const char* Extern_Type_Name{"AnalysisRouteMDT"};
constexpr const char* AnalysisRouteID_Name{"AnalysisRouteID"};
constexpr const char* RequestID_Name{"RequestID"};
constexpr const char* TimeAnalysisPerformed_Name{"TimeAnalysisPerformed"};
constexpr const char* AnalysisRouteInputs_Name{"AnalysisRouteInputs"};
constexpr const char* RouteAnalysis_Name{"RouteAnalysis"};
constexpr const char* PathAnalysisData_Name{"PathAnalysisData"};

} // namespace AnalysisRouteMDT_Names

void AnalysisRouteMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::AnalysisRouteMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AnalysisRouteMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AnalysisRouteMDT_Names::AnalysisRouteID_Name) {
      AnalysisRouteID_Type::deserialize(valueType.second, accessor.getAnalysisRouteID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AnalysisRouteMDT_Names::RequestID_Name) {
      RequestID_Type::deserialize(valueType.second, accessor.enableRequestID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AnalysisRouteMDT_Names::TimeAnalysisPerformed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeAnalysisPerformed(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + AnalysisRouteMDT_Names::AnalysisRouteInputs_Name) {
      RoutePlanAnalysisInputsType::deserialize(valueType.second, accessor.getAnalysisRouteInputs(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AnalysisRouteMDT_Names::RouteAnalysis_Name) {
      AnalysisRouteInformationType::deserialize(valueType.second, accessor.enableRouteAnalysis(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AnalysisRouteMDT_Names::PathAnalysisData_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AnalysisRouteMDT::PathAnalysisData& boundedList = accessor.getPathAnalysisData();
        const uci::type::AnalysisRouteMDT::PathAnalysisData::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AnalysisRoutePathType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string AnalysisRouteMDT::serialize(const uci::type::AnalysisRouteMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AnalysisRouteMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AnalysisRouteMDT_Names::Extern_Type_Name);
  }
  AnalysisRouteID_Type::serialize(accessor.getAnalysisRouteID(), node, AnalysisRouteMDT_Names::AnalysisRouteID_Name);
  if (accessor.hasRequestID()) {
    RequestID_Type::serialize(accessor.getRequestID(), node, AnalysisRouteMDT_Names::RequestID_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimeAnalysisPerformed(), node, AnalysisRouteMDT_Names::TimeAnalysisPerformed_Name);
  RoutePlanAnalysisInputsType::serialize(accessor.getAnalysisRouteInputs(), node, AnalysisRouteMDT_Names::AnalysisRouteInputs_Name);
  if (accessor.hasRouteAnalysis()) {
    AnalysisRouteInformationType::serialize(accessor.getRouteAnalysis(), node, AnalysisRouteMDT_Names::RouteAnalysis_Name);
  }
  {
    const uci::type::AnalysisRouteMDT::PathAnalysisData& boundedList = accessor.getPathAnalysisData();
    for (uci::type::AnalysisRouteMDT::PathAnalysisData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AnalysisRoutePathType::serialize(boundedList.at(i), node, AnalysisRouteMDT_Names::PathAnalysisData_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AnalysisRouteMDT& AnalysisRouteMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AnalysisRouteMDT>().release());
}

uci::type::AnalysisRouteMDT& AnalysisRouteMDT::create(const uci::type::AnalysisRouteMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AnalysisRouteMDT> newAccessor{boost::make_unique<asb_uci::type::AnalysisRouteMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AnalysisRouteMDT::destroy(uci::type::AnalysisRouteMDT& accessor) {
  delete dynamic_cast<asb_uci::type::AnalysisRouteMDT*>(&accessor);
}

} // namespace type

} // namespace uci

