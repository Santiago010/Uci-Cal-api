/** @file SatelliteEnduranceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SatelliteEnduranceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EnduranceBaseType.h"
#include "asb_uci/type/OrbitalManeuverDetailsBaseType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EnduranceBaseType.h"
#include "uci/type/OrbitalManeuverDetailsBaseType.h"
#include "uci/type/SatelliteEnduranceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SatelliteEnduranceType::SatelliteEnduranceType() = default;

SatelliteEnduranceType::~SatelliteEnduranceType() = default;

void SatelliteEnduranceType::copy(const uci::type::SatelliteEnduranceType& accessor) {
  copyImpl(accessor, false);
}

void SatelliteEnduranceType::copyImpl(const uci::type::SatelliteEnduranceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SatelliteEnduranceType&>(accessor);
    if (accessorImpl.propulsion_Accessor) {
      setPropulsion(*(accessorImpl.propulsion_Accessor));
    } else {
      propulsion_Accessor.reset();
    }
    if (accessorImpl.maneuver_Accessor) {
      setManeuver(*(accessorImpl.maneuver_Accessor));
    } else {
      maneuver_Accessor.reset();
    }
    if (accessorImpl.operational_Accessor) {
      setOperational(*(accessorImpl.operational_Accessor));
    } else {
      operational_Accessor.reset();
    }
  }
}

void SatelliteEnduranceType::reset() noexcept {
  propulsion_Accessor.reset();
  maneuver_Accessor.reset();
  operational_Accessor.reset();
}

uci::type::EnduranceBaseType& SatelliteEnduranceType::getPropulsion_() const {
  if (propulsion_Accessor) {
    return *propulsion_Accessor;
  }
  throw uci::base::UCIException("Error in getPropulsion(): An attempt was made to get an optional field that was not enabled, call hasPropulsion() to determine if it is safe to call getPropulsion()");
}

const uci::type::EnduranceBaseType& SatelliteEnduranceType::getPropulsion() const {
  return getPropulsion_();
}

uci::type::EnduranceBaseType& SatelliteEnduranceType::getPropulsion() {
  return getPropulsion_();
}

uci::type::SatelliteEnduranceType& SatelliteEnduranceType::setPropulsion(const uci::type::EnduranceBaseType& accessor) {
  enablePropulsion(accessor.getAccessorType());
  if (&accessor != propulsion_Accessor.get()) {
    propulsion_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SatelliteEnduranceType::hasPropulsion() const noexcept {
  return static_cast<bool>(propulsion_Accessor);
}

uci::type::EnduranceBaseType& SatelliteEnduranceType::enablePropulsion(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::enduranceBaseType : type};
  if ((!propulsion_Accessor) || (propulsion_Accessor->getAccessorType() != requestedType)) {
    propulsion_Accessor = EnduranceBaseType::create(requestedType);
    if (!propulsion_Accessor) {
      throw uci::base::UCIException("Error in enablePropulsion(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *propulsion_Accessor;
}

uci::type::SatelliteEnduranceType& SatelliteEnduranceType::clearPropulsion() noexcept {
  propulsion_Accessor.reset();
  return *this;
}

uci::type::OrbitalManeuverDetailsBaseType& SatelliteEnduranceType::getManeuver_() const {
  if (maneuver_Accessor) {
    return *maneuver_Accessor;
  }
  throw uci::base::UCIException("Error in getManeuver(): An attempt was made to get an optional field that was not enabled, call hasManeuver() to determine if it is safe to call getManeuver()");
}

const uci::type::OrbitalManeuverDetailsBaseType& SatelliteEnduranceType::getManeuver() const {
  return getManeuver_();
}

uci::type::OrbitalManeuverDetailsBaseType& SatelliteEnduranceType::getManeuver() {
  return getManeuver_();
}

uci::type::SatelliteEnduranceType& SatelliteEnduranceType::setManeuver(const uci::type::OrbitalManeuverDetailsBaseType& accessor) {
  enableManeuver(accessor.getAccessorType());
  if (&accessor != maneuver_Accessor.get()) {
    maneuver_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SatelliteEnduranceType::hasManeuver() const noexcept {
  return static_cast<bool>(maneuver_Accessor);
}

uci::type::OrbitalManeuverDetailsBaseType& SatelliteEnduranceType::enableManeuver(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalManeuverDetailsBaseType : type};
  if ((!maneuver_Accessor) || (maneuver_Accessor->getAccessorType() != requestedType)) {
    maneuver_Accessor = OrbitalManeuverDetailsBaseType::create(requestedType);
    if (!maneuver_Accessor) {
      throw uci::base::UCIException("Error in enableManeuver(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *maneuver_Accessor;
}

uci::type::SatelliteEnduranceType& SatelliteEnduranceType::clearManeuver() noexcept {
  maneuver_Accessor.reset();
  return *this;
}

uci::type::EnduranceBaseType& SatelliteEnduranceType::getOperational_() const {
  if (operational_Accessor) {
    return *operational_Accessor;
  }
  throw uci::base::UCIException("Error in getOperational(): An attempt was made to get an optional field that was not enabled, call hasOperational() to determine if it is safe to call getOperational()");
}

const uci::type::EnduranceBaseType& SatelliteEnduranceType::getOperational() const {
  return getOperational_();
}

uci::type::EnduranceBaseType& SatelliteEnduranceType::getOperational() {
  return getOperational_();
}

uci::type::SatelliteEnduranceType& SatelliteEnduranceType::setOperational(const uci::type::EnduranceBaseType& accessor) {
  enableOperational(accessor.getAccessorType());
  if (&accessor != operational_Accessor.get()) {
    operational_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SatelliteEnduranceType::hasOperational() const noexcept {
  return static_cast<bool>(operational_Accessor);
}

uci::type::EnduranceBaseType& SatelliteEnduranceType::enableOperational(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::enduranceBaseType : type};
  if ((!operational_Accessor) || (operational_Accessor->getAccessorType() != requestedType)) {
    operational_Accessor = EnduranceBaseType::create(requestedType);
    if (!operational_Accessor) {
      throw uci::base::UCIException("Error in enableOperational(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *operational_Accessor;
}

uci::type::SatelliteEnduranceType& SatelliteEnduranceType::clearOperational() noexcept {
  operational_Accessor.reset();
  return *this;
}

std::unique_ptr<SatelliteEnduranceType> SatelliteEnduranceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteEnduranceType : type};
  return (requestedType == uci::type::accessorType::satelliteEnduranceType) ? boost::make_unique<SatelliteEnduranceType>() : nullptr;
}

/**  */
namespace SatelliteEnduranceType_Names {

constexpr const char* Extern_Type_Name{"SatelliteEnduranceType"};
constexpr const char* Propulsion_Name{"Propulsion"};
constexpr const char* Maneuver_Name{"Maneuver"};
constexpr const char* Operational_Name{"Operational"};

} // namespace SatelliteEnduranceType_Names

void SatelliteEnduranceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SatelliteEnduranceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SatelliteEnduranceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SatelliteEnduranceType_Names::Propulsion_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePropulsion(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SatelliteEnduranceType_Names::Maneuver_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableManeuver(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SatelliteEnduranceType_Names::Operational_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableOperational(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string SatelliteEnduranceType::serialize(const uci::type::SatelliteEnduranceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SatelliteEnduranceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SatelliteEnduranceType_Names::Extern_Type_Name);
  }
  if (accessor.hasPropulsion()) {
    EnduranceBaseType::serialize(accessor.getPropulsion(), node, SatelliteEnduranceType_Names::Propulsion_Name);
  }
  if (accessor.hasManeuver()) {
    OrbitalManeuverDetailsBaseType::serialize(accessor.getManeuver(), node, SatelliteEnduranceType_Names::Maneuver_Name);
  }
  if (accessor.hasOperational()) {
    EnduranceBaseType::serialize(accessor.getOperational(), node, SatelliteEnduranceType_Names::Operational_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SatelliteEnduranceType& SatelliteEnduranceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SatelliteEnduranceType>().release());
}

uci::type::SatelliteEnduranceType& SatelliteEnduranceType::create(const uci::type::SatelliteEnduranceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SatelliteEnduranceType> newAccessor{boost::make_unique<asb_uci::type::SatelliteEnduranceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SatelliteEnduranceType::destroy(uci::type::SatelliteEnduranceType& accessor) {
  delete dynamic_cast<asb_uci::type::SatelliteEnduranceType*>(&accessor);
}

} // namespace type

} // namespace uci

