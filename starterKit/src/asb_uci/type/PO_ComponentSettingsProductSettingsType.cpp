/** @file PO_ComponentSettingsProductSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentSettingsProductSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentControlsA_Type.h"
#include "../../../include/asb_uci/type/JPEG_SettingsType.h"
#include "../../../include/asb_uci/type/MISP_PackingPlanType.h"
#include "../../../include/asb_uci/type/NITF_PackingPlanPET.h"
#include "../../../include/asb_uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "../../../include/asb_uci/type/ProductResolutionType.h"
#include "../../../include/asb_uci/type/SecurityInformationType.h"
#include "../../../include/asb_uci/type/VideoOutputSettingsType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentControlsA_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/JPEG_SettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MISP_PackingPlanType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NITF_PackingPlanPET.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentSettingsProductSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductResolutionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SecurityInformationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VideoOutputSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsProductSettingsType::PO_ComponentSettingsProductSettingsType()
  : generatorOutputID_Accessor{boost::make_unique<PO_ProductGeneratorOutputID_Type>()},
    videoOutput_Accessor{boost::make_unique<VideoOutput>(0, SIZE_MAX)} {
}

PO_ComponentSettingsProductSettingsType::~PO_ComponentSettingsProductSettingsType() = default;

void PO_ComponentSettingsProductSettingsType::copy(const uci::type::PO_ComponentSettingsProductSettingsType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsProductSettingsType::copyImpl(const uci::type::PO_ComponentSettingsProductSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsProductSettingsType&>(accessor);
    setGeneratorOutputID(*(accessorImpl.generatorOutputID_Accessor));
    if (accessorImpl.productClassification_Accessor) {
      setProductClassification(*(accessorImpl.productClassification_Accessor));
    } else {
      productClassification_Accessor.reset();
    }
    if (accessorImpl.jPEG_Settings_Accessor) {
      setJPEG_Settings(*(accessorImpl.jPEG_Settings_Accessor));
    } else {
      jPEG_Settings_Accessor.reset();
    }
    if (accessorImpl.nITF_PackingPlan_Accessor) {
      setNITF_PackingPlan(*(accessorImpl.nITF_PackingPlan_Accessor));
    } else {
      nITF_PackingPlan_Accessor.reset();
    }
    if (accessorImpl.mISP_Settings_Accessor) {
      setMISP_Settings(*(accessorImpl.mISP_Settings_Accessor));
    } else {
      mISP_Settings_Accessor.reset();
    }
    if (accessorImpl.hasProductRate()) {
      setProductRate(accessorImpl.getProductRate());
    } else {
      clearProductRate();
    }
    if (accessorImpl.productResolution_Accessor) {
      setProductResolution(*(accessorImpl.productResolution_Accessor));
    } else {
      productResolution_Accessor.reset();
    }
    if (accessorImpl.hasCompressionRatio()) {
      setCompressionRatio(accessorImpl.getCompressionRatio());
    } else {
      clearCompressionRatio();
    }
    if (accessorImpl.hasProductSize()) {
      setProductSize(accessorImpl.getProductSize());
    } else {
      clearProductSize();
    }
    if (accessorImpl.hasInterlaced()) {
      setInterlaced(accessorImpl.getInterlaced());
    } else {
      clearInterlaced();
    }
    if (accessorImpl.productOutputControls_Accessor) {
      setProductOutputControls(*(accessorImpl.productOutputControls_Accessor));
    } else {
      productOutputControls_Accessor.reset();
    }
    setVideoOutput(*(accessorImpl.videoOutput_Accessor));
  }
}

void PO_ComponentSettingsProductSettingsType::reset() noexcept {
  generatorOutputID_Accessor->reset();
  productClassification_Accessor.reset();
  jPEG_Settings_Accessor.reset();
  nITF_PackingPlan_Accessor.reset();
  mISP_Settings_Accessor.reset();
  clearProductRate();
  productResolution_Accessor.reset();
  clearCompressionRatio();
  clearProductSize();
  clearInterlaced();
  productOutputControls_Accessor.reset();
  videoOutput_Accessor->reset();
}

const uci::type::PO_ProductGeneratorOutputID_Type& PO_ComponentSettingsProductSettingsType::getGeneratorOutputID() const {
  return *generatorOutputID_Accessor;
}

uci::type::PO_ProductGeneratorOutputID_Type& PO_ComponentSettingsProductSettingsType::getGeneratorOutputID() {
  return *generatorOutputID_Accessor;
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::setGeneratorOutputID(const uci::type::PO_ProductGeneratorOutputID_Type& accessor) {
  if (&accessor != generatorOutputID_Accessor.get()) {
    generatorOutputID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SecurityInformationType& PO_ComponentSettingsProductSettingsType::getProductClassification_() const {
  if (productClassification_Accessor) {
    return *productClassification_Accessor;
  }
  throw uci::base::UCIException("Error in getProductClassification(): An attempt was made to get an optional field that was not enabled, call hasProductClassification() to determine if it is safe to call getProductClassification()");
}

const uci::type::SecurityInformationType& PO_ComponentSettingsProductSettingsType::getProductClassification() const {
  return getProductClassification_();
}

uci::type::SecurityInformationType& PO_ComponentSettingsProductSettingsType::getProductClassification() {
  return getProductClassification_();
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::setProductClassification(const uci::type::SecurityInformationType& accessor) {
  enableProductClassification();
  if (&accessor != productClassification_Accessor.get()) {
    productClassification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsProductSettingsType::hasProductClassification() const noexcept {
  return static_cast<bool>(productClassification_Accessor);
}

uci::type::SecurityInformationType& PO_ComponentSettingsProductSettingsType::enableProductClassification(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::securityInformationType : type};
  if ((!productClassification_Accessor) || (productClassification_Accessor->getAccessorType() != requestedType)) {
    productClassification_Accessor = SecurityInformationType::create(requestedType);
    if (!productClassification_Accessor) {
      throw uci::base::UCIException("Error in enableProductClassification(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productClassification_Accessor;
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::clearProductClassification() noexcept {
  productClassification_Accessor.reset();
  return *this;
}

uci::type::JPEG_SettingsType& PO_ComponentSettingsProductSettingsType::getJPEG_Settings_() const {
  if (jPEG_Settings_Accessor) {
    return *jPEG_Settings_Accessor;
  }
  throw uci::base::UCIException("Error in getJPEG_Settings(): An attempt was made to get an optional field that was not enabled, call hasJPEG_Settings() to determine if it is safe to call getJPEG_Settings()");
}

const uci::type::JPEG_SettingsType& PO_ComponentSettingsProductSettingsType::getJPEG_Settings() const {
  return getJPEG_Settings_();
}

uci::type::JPEG_SettingsType& PO_ComponentSettingsProductSettingsType::getJPEG_Settings() {
  return getJPEG_Settings_();
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::setJPEG_Settings(const uci::type::JPEG_SettingsType& accessor) {
  enableJPEG_Settings();
  if (&accessor != jPEG_Settings_Accessor.get()) {
    jPEG_Settings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsProductSettingsType::hasJPEG_Settings() const noexcept {
  return static_cast<bool>(jPEG_Settings_Accessor);
}

uci::type::JPEG_SettingsType& PO_ComponentSettingsProductSettingsType::enableJPEG_Settings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::jPEG_SettingsType : type};
  if ((!jPEG_Settings_Accessor) || (jPEG_Settings_Accessor->getAccessorType() != requestedType)) {
    jPEG_Settings_Accessor = JPEG_SettingsType::create(requestedType);
    if (!jPEG_Settings_Accessor) {
      throw uci::base::UCIException("Error in enableJPEG_Settings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *jPEG_Settings_Accessor;
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::clearJPEG_Settings() noexcept {
  jPEG_Settings_Accessor.reset();
  return *this;
}

uci::type::NITF_PackingPlanPET& PO_ComponentSettingsProductSettingsType::getNITF_PackingPlan_() const {
  if (nITF_PackingPlan_Accessor) {
    return *nITF_PackingPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getNITF_PackingPlan(): An attempt was made to get an optional field that was not enabled, call hasNITF_PackingPlan() to determine if it is safe to call getNITF_PackingPlan()");
}

const uci::type::NITF_PackingPlanPET& PO_ComponentSettingsProductSettingsType::getNITF_PackingPlan() const {
  return getNITF_PackingPlan_();
}

uci::type::NITF_PackingPlanPET& PO_ComponentSettingsProductSettingsType::getNITF_PackingPlan() {
  return getNITF_PackingPlan_();
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::setNITF_PackingPlan(const uci::type::NITF_PackingPlanPET& accessor) {
  enableNITF_PackingPlan(accessor.getAccessorType());
  if (&accessor != nITF_PackingPlan_Accessor.get()) {
    nITF_PackingPlan_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PO_ComponentSettingsProductSettingsType::hasNITF_PackingPlan() const noexcept {
  return static_cast<bool>(nITF_PackingPlan_Accessor);
}

uci::type::NITF_PackingPlanPET& PO_ComponentSettingsProductSettingsType::enableNITF_PackingPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::nITF_PackingPlanPET : type};
  if ((!nITF_PackingPlan_Accessor) || (nITF_PackingPlan_Accessor->getAccessorType() != requestedType)) {
    nITF_PackingPlan_Accessor = NITF_PackingPlanPET::create(requestedType);
    if (!nITF_PackingPlan_Accessor) {
      throw uci::base::UCIException("Error in enableNITF_PackingPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nITF_PackingPlan_Accessor;
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::clearNITF_PackingPlan() noexcept {
  nITF_PackingPlan_Accessor.reset();
  return *this;
}

uci::type::MISP_PackingPlanType& PO_ComponentSettingsProductSettingsType::getMISP_Settings_() const {
  if (mISP_Settings_Accessor) {
    return *mISP_Settings_Accessor;
  }
  throw uci::base::UCIException("Error in getMISP_Settings(): An attempt was made to get an optional field that was not enabled, call hasMISP_Settings() to determine if it is safe to call getMISP_Settings()");
}

const uci::type::MISP_PackingPlanType& PO_ComponentSettingsProductSettingsType::getMISP_Settings() const {
  return getMISP_Settings_();
}

uci::type::MISP_PackingPlanType& PO_ComponentSettingsProductSettingsType::getMISP_Settings() {
  return getMISP_Settings_();
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::setMISP_Settings(const uci::type::MISP_PackingPlanType& accessor) {
  enableMISP_Settings();
  if (&accessor != mISP_Settings_Accessor.get()) {
    mISP_Settings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsProductSettingsType::hasMISP_Settings() const noexcept {
  return static_cast<bool>(mISP_Settings_Accessor);
}

uci::type::MISP_PackingPlanType& PO_ComponentSettingsProductSettingsType::enableMISP_Settings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mISP_PackingPlanType : type};
  if ((!mISP_Settings_Accessor) || (mISP_Settings_Accessor->getAccessorType() != requestedType)) {
    mISP_Settings_Accessor = MISP_PackingPlanType::create(requestedType);
    if (!mISP_Settings_Accessor) {
      throw uci::base::UCIException("Error in enableMISP_Settings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mISP_Settings_Accessor;
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::clearMISP_Settings() noexcept {
  mISP_Settings_Accessor.reset();
  return *this;
}

xs::UnsignedInt PO_ComponentSettingsProductSettingsType::getProductRate() const {
  if (productRate_Accessor) {
    return *productRate_Accessor;
  }
  throw uci::base::UCIException("Error in getProductRate(): An attempt was made to get an optional field that was not enabled, call hasProductRate() to determine if it is safe to call getProductRate()");
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::setProductRate(xs::UnsignedInt value) {
  productRate_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsProductSettingsType::hasProductRate() const noexcept {
  return productRate_Accessor.has_value();
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::clearProductRate() noexcept {
  productRate_Accessor.reset();
  return *this;
}

uci::type::ProductResolutionType& PO_ComponentSettingsProductSettingsType::getProductResolution_() const {
  if (productResolution_Accessor) {
    return *productResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getProductResolution(): An attempt was made to get an optional field that was not enabled, call hasProductResolution() to determine if it is safe to call getProductResolution()");
}

const uci::type::ProductResolutionType& PO_ComponentSettingsProductSettingsType::getProductResolution() const {
  return getProductResolution_();
}

uci::type::ProductResolutionType& PO_ComponentSettingsProductSettingsType::getProductResolution() {
  return getProductResolution_();
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::setProductResolution(const uci::type::ProductResolutionType& accessor) {
  enableProductResolution();
  if (&accessor != productResolution_Accessor.get()) {
    productResolution_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsProductSettingsType::hasProductResolution() const noexcept {
  return static_cast<bool>(productResolution_Accessor);
}

uci::type::ProductResolutionType& PO_ComponentSettingsProductSettingsType::enableProductResolution(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productResolutionType : type};
  if ((!productResolution_Accessor) || (productResolution_Accessor->getAccessorType() != requestedType)) {
    productResolution_Accessor = ProductResolutionType::create(requestedType);
    if (!productResolution_Accessor) {
      throw uci::base::UCIException("Error in enableProductResolution(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productResolution_Accessor;
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::clearProductResolution() noexcept {
  productResolution_Accessor.reset();
  return *this;
}

xs::Float PO_ComponentSettingsProductSettingsType::getCompressionRatio() const {
  if (compressionRatio_Accessor) {
    return *compressionRatio_Accessor;
  }
  throw uci::base::UCIException("Error in getCompressionRatio(): An attempt was made to get an optional field that was not enabled, call hasCompressionRatio() to determine if it is safe to call getCompressionRatio()");
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::setCompressionRatio(xs::Float value) {
  compressionRatio_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsProductSettingsType::hasCompressionRatio() const noexcept {
  return compressionRatio_Accessor.has_value();
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::clearCompressionRatio() noexcept {
  compressionRatio_Accessor.reset();
  return *this;
}

xs::UnsignedInt PO_ComponentSettingsProductSettingsType::getProductSize() const {
  if (productSize_Accessor) {
    return *productSize_Accessor;
  }
  throw uci::base::UCIException("Error in getProductSize(): An attempt was made to get an optional field that was not enabled, call hasProductSize() to determine if it is safe to call getProductSize()");
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::setProductSize(xs::UnsignedInt value) {
  productSize_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsProductSettingsType::hasProductSize() const noexcept {
  return productSize_Accessor.has_value();
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::clearProductSize() noexcept {
  productSize_Accessor.reset();
  return *this;
}

xs::Boolean PO_ComponentSettingsProductSettingsType::getInterlaced() const {
  if (interlaced_Accessor) {
    return *interlaced_Accessor;
  }
  throw uci::base::UCIException("Error in getInterlaced(): An attempt was made to get an optional field that was not enabled, call hasInterlaced() to determine if it is safe to call getInterlaced()");
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::setInterlaced(xs::Boolean value) {
  interlaced_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsProductSettingsType::hasInterlaced() const noexcept {
  return interlaced_Accessor.has_value();
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::clearInterlaced() noexcept {
  interlaced_Accessor.reset();
  return *this;
}

uci::type::ComponentControlsA_Type& PO_ComponentSettingsProductSettingsType::getProductOutputControls_() const {
  if (productOutputControls_Accessor) {
    return *productOutputControls_Accessor;
  }
  throw uci::base::UCIException("Error in getProductOutputControls(): An attempt was made to get an optional field that was not enabled, call hasProductOutputControls() to determine if it is safe to call getProductOutputControls()");
}

const uci::type::ComponentControlsA_Type& PO_ComponentSettingsProductSettingsType::getProductOutputControls() const {
  return getProductOutputControls_();
}

uci::type::ComponentControlsA_Type& PO_ComponentSettingsProductSettingsType::getProductOutputControls() {
  return getProductOutputControls_();
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::setProductOutputControls(const uci::type::ComponentControlsA_Type& accessor) {
  enableProductOutputControls();
  if (&accessor != productOutputControls_Accessor.get()) {
    productOutputControls_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsProductSettingsType::hasProductOutputControls() const noexcept {
  return static_cast<bool>(productOutputControls_Accessor);
}

uci::type::ComponentControlsA_Type& PO_ComponentSettingsProductSettingsType::enableProductOutputControls(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControlsA_Type : type};
  if ((!productOutputControls_Accessor) || (productOutputControls_Accessor->getAccessorType() != requestedType)) {
    productOutputControls_Accessor = ComponentControlsA_Type::create(requestedType);
    if (!productOutputControls_Accessor) {
      throw uci::base::UCIException("Error in enableProductOutputControls(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productOutputControls_Accessor;
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::clearProductOutputControls() noexcept {
  productOutputControls_Accessor.reset();
  return *this;
}

const uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput& PO_ComponentSettingsProductSettingsType::getVideoOutput() const {
  return *videoOutput_Accessor;
}

uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput& PO_ComponentSettingsProductSettingsType::getVideoOutput() {
  return *videoOutput_Accessor;
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::setVideoOutput(const uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput& accessor) {
  if (&accessor != videoOutput_Accessor.get()) {
    videoOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PO_ComponentSettingsProductSettingsType> PO_ComponentSettingsProductSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsProductSettingsType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsProductSettingsType) ? boost::make_unique<PO_ComponentSettingsProductSettingsType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsProductSettingsType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsProductSettingsType"};
constexpr const char* GeneratorOutputID_Name{"GeneratorOutputID"};
constexpr const char* ProductClassification_Name{"ProductClassification"};
constexpr const char* JPEG_Settings_Name{"JPEG_Settings"};
constexpr const char* NITF_PackingPlan_Name{"NITF_PackingPlan"};
constexpr const char* MISP_Settings_Name{"MISP_Settings"};
constexpr const char* ProductRate_Name{"ProductRate"};
constexpr const char* ProductResolution_Name{"ProductResolution"};
constexpr const char* CompressionRatio_Name{"CompressionRatio"};
constexpr const char* ProductSize_Name{"ProductSize"};
constexpr const char* Interlaced_Name{"Interlaced"};
constexpr const char* ProductOutputControls_Name{"ProductOutputControls"};
constexpr const char* VideoOutput_Name{"VideoOutput"};

} // namespace PO_ComponentSettingsProductSettingsType_Names

void PO_ComponentSettingsProductSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsProductSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsProductSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::GeneratorOutputID_Name) {
      PO_ProductGeneratorOutputID_Type::deserialize(valueType.second, accessor.getGeneratorOutputID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::ProductClassification_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.enableProductClassification(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::JPEG_Settings_Name) {
      JPEG_SettingsType::deserialize(valueType.second, accessor.enableJPEG_Settings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::NITF_PackingPlan_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableNITF_PackingPlan(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::MISP_Settings_Name) {
      MISP_PackingPlanType::deserialize(valueType.second, accessor.enableMISP_Settings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::ProductRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProductRate(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::ProductResolution_Name) {
      ProductResolutionType::deserialize(valueType.second, accessor.enableProductResolution(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::CompressionRatio_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCompressionRatio(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::ProductSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProductSize(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::Interlaced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInterlaced(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::ProductOutputControls_Name) {
      ComponentControlsA_Type::deserialize(valueType.second, accessor.enableProductOutputControls(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::VideoOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput& boundedList = accessor.getVideoOutput();
        const uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::VideoOutputSettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PO_ComponentSettingsProductSettingsType::serialize(const uci::type::PO_ComponentSettingsProductSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsProductSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsProductSettingsType_Names::Extern_Type_Name);
  }
  PO_ProductGeneratorOutputID_Type::serialize(accessor.getGeneratorOutputID(), node, PO_ComponentSettingsProductSettingsType_Names::GeneratorOutputID_Name);
  if (accessor.hasProductClassification()) {
    SecurityInformationType::serialize(accessor.getProductClassification(), node, PO_ComponentSettingsProductSettingsType_Names::ProductClassification_Name);
  }
  if (accessor.hasJPEG_Settings()) {
    JPEG_SettingsType::serialize(accessor.getJPEG_Settings(), node, PO_ComponentSettingsProductSettingsType_Names::JPEG_Settings_Name);
  }
  if (accessor.hasNITF_PackingPlan()) {
    NITF_PackingPlanPET::serialize(accessor.getNITF_PackingPlan(), node, PO_ComponentSettingsProductSettingsType_Names::NITF_PackingPlan_Name);
  }
  if (accessor.hasMISP_Settings()) {
    MISP_PackingPlanType::serialize(accessor.getMISP_Settings(), node, PO_ComponentSettingsProductSettingsType_Names::MISP_Settings_Name);
  }
  if (accessor.hasProductRate()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getProductRate(), node, PO_ComponentSettingsProductSettingsType_Names::ProductRate_Name);
  }
  if (accessor.hasProductResolution()) {
    ProductResolutionType::serialize(accessor.getProductResolution(), node, PO_ComponentSettingsProductSettingsType_Names::ProductResolution_Name);
  }
  if (accessor.hasCompressionRatio()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getCompressionRatio(), node, PO_ComponentSettingsProductSettingsType_Names::CompressionRatio_Name);
  }
  if (accessor.hasProductSize()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getProductSize(), node, PO_ComponentSettingsProductSettingsType_Names::ProductSize_Name);
  }
  if (accessor.hasInterlaced()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInterlaced(), node, PO_ComponentSettingsProductSettingsType_Names::Interlaced_Name);
  }
  if (accessor.hasProductOutputControls()) {
    ComponentControlsA_Type::serialize(accessor.getProductOutputControls(), node, PO_ComponentSettingsProductSettingsType_Names::ProductOutputControls_Name);
  }
  {
    const uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput& boundedList = accessor.getVideoOutput();
    for (uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::VideoOutputSettingsType::serialize(boundedList.at(i), node, PO_ComponentSettingsProductSettingsType_Names::VideoOutput_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsProductSettingsType>().release());
}

uci::type::PO_ComponentSettingsProductSettingsType& PO_ComponentSettingsProductSettingsType::create(const uci::type::PO_ComponentSettingsProductSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsProductSettingsType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsProductSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsProductSettingsType::destroy(uci::type::PO_ComponentSettingsProductSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsProductSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

