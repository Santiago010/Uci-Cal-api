/** @file Link16ReferencePointDataStoreID_ChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/Link16ReferencePointDataStoreID_ChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OpLineID_Type.h"
#include "asb_uci/type/OpPointID_Type.h"
#include "asb_uci/type/OpVolumeID_Type.h"
#include "asb_uci/type/OpZoneID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/Link16ReferencePointDataStoreID_ChoiceType.h"
#include "uci/type/OpLineID_Type.h"
#include "uci/type/OpPointID_Type.h"
#include "uci/type/OpVolumeID_Type.h"
#include "uci/type/OpZoneID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

Link16ReferencePointDataStoreID_ChoiceType::Link16ReferencePointDataStoreID_ChoiceType() = default;

Link16ReferencePointDataStoreID_ChoiceType::~Link16ReferencePointDataStoreID_ChoiceType() = default;

void Link16ReferencePointDataStoreID_ChoiceType::copy(const uci::type::Link16ReferencePointDataStoreID_ChoiceType& accessor) {
  copyImpl(accessor, false);
}

void Link16ReferencePointDataStoreID_ChoiceType::copyImpl(const uci::type::Link16ReferencePointDataStoreID_ChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const Link16ReferencePointDataStoreID_ChoiceType&>(accessor);
    if (accessorImpl.opLineID_Accessor) {
      setOpLineID(*(accessorImpl.opLineID_Accessor));
    } else {
      opLineID_Accessor.reset();
    }
    if (accessorImpl.opPointID_Accessor) {
      setOpPointID(*(accessorImpl.opPointID_Accessor));
    } else {
      opPointID_Accessor.reset();
    }
    if (accessorImpl.opZoneID_Accessor) {
      setOpZoneID(*(accessorImpl.opZoneID_Accessor));
    } else {
      opZoneID_Accessor.reset();
    }
    if (accessorImpl.opVolumeID_Accessor) {
      setOpVolumeID(*(accessorImpl.opVolumeID_Accessor));
    } else {
      opVolumeID_Accessor.reset();
    }
  }
}

void Link16ReferencePointDataStoreID_ChoiceType::reset() noexcept {
  opLineID_Accessor.reset();
  opPointID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType::Link16ReferencePointDataStoreID_ChoiceTypeChoice Link16ReferencePointDataStoreID_ChoiceType::getLink16ReferencePointDataStoreID_ChoiceTypeChoiceOrdinal() const noexcept {
  if (opLineID_Accessor) {
    return LINK16REFERENCEPOINTDATASTOREID_CHOICETYPE_CHOICE_OPLINEID;
  }
  if (opPointID_Accessor) {
    return LINK16REFERENCEPOINTDATASTOREID_CHOICETYPE_CHOICE_OPPOINTID;
  }
  if (opZoneID_Accessor) {
    return LINK16REFERENCEPOINTDATASTOREID_CHOICETYPE_CHOICE_OPZONEID;
  }
  if (opVolumeID_Accessor) {
    return LINK16REFERENCEPOINTDATASTOREID_CHOICETYPE_CHOICE_OPVOLUMEID;
  }
  return LINK16REFERENCEPOINTDATASTOREID_CHOICETYPE_CHOICE_NONE;
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType& Link16ReferencePointDataStoreID_ChoiceType::setLink16ReferencePointDataStoreID_ChoiceTypeChoiceOrdinal(uci::type::Link16ReferencePointDataStoreID_ChoiceType::Link16ReferencePointDataStoreID_ChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case LINK16REFERENCEPOINTDATASTOREID_CHOICETYPE_CHOICE_OPLINEID:
      chooseOpLineID();
      break;
    case LINK16REFERENCEPOINTDATASTOREID_CHOICETYPE_CHOICE_OPPOINTID:
      chooseOpPointID();
      break;
    case LINK16REFERENCEPOINTDATASTOREID_CHOICETYPE_CHOICE_OPZONEID:
      chooseOpZoneID();
      break;
    case LINK16REFERENCEPOINTDATASTOREID_CHOICETYPE_CHOICE_OPVOLUMEID:
      chooseOpVolumeID();
      break;
    default:
      throw uci::base::UCIException("Error in setLink16ReferencePointDataStoreID_ChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpLineID& Link16ReferencePointDataStoreID_ChoiceType::getOpLineID_() const {
  if (opLineID_Accessor) {
    return *opLineID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpLineID(): Unable to get OpLineID, field not selected");
}

const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpLineID& Link16ReferencePointDataStoreID_ChoiceType::getOpLineID() const {
  return getOpLineID_();
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpLineID& Link16ReferencePointDataStoreID_ChoiceType::getOpLineID() {
  return getOpLineID_();
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType& Link16ReferencePointDataStoreID_ChoiceType::setOpLineID(const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpLineID& accessor) {
  chooseOpLineID();
  if (&accessor != opLineID_Accessor.get()) {
    opLineID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool Link16ReferencePointDataStoreID_ChoiceType::isOpLineID() const noexcept {
  return static_cast<bool>(opLineID_Accessor);
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpLineID& Link16ReferencePointDataStoreID_ChoiceType::chooseOpLineID() {
  opPointID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  if (!opLineID_Accessor) {
    opLineID_Accessor = boost::make_unique<OpLineID>(1, SIZE_MAX);
  }
  return *opLineID_Accessor;
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpPointID& Link16ReferencePointDataStoreID_ChoiceType::getOpPointID_() const {
  if (opPointID_Accessor) {
    return *opPointID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpPointID(): Unable to get OpPointID, field not selected");
}

const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpPointID& Link16ReferencePointDataStoreID_ChoiceType::getOpPointID() const {
  return getOpPointID_();
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpPointID& Link16ReferencePointDataStoreID_ChoiceType::getOpPointID() {
  return getOpPointID_();
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType& Link16ReferencePointDataStoreID_ChoiceType::setOpPointID(const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpPointID& accessor) {
  chooseOpPointID();
  if (&accessor != opPointID_Accessor.get()) {
    opPointID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool Link16ReferencePointDataStoreID_ChoiceType::isOpPointID() const noexcept {
  return static_cast<bool>(opPointID_Accessor);
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpPointID& Link16ReferencePointDataStoreID_ChoiceType::chooseOpPointID() {
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  if (!opPointID_Accessor) {
    opPointID_Accessor = boost::make_unique<OpPointID>(1, SIZE_MAX);
  }
  return *opPointID_Accessor;
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpZoneID& Link16ReferencePointDataStoreID_ChoiceType::getOpZoneID_() const {
  if (opZoneID_Accessor) {
    return *opZoneID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpZoneID(): Unable to get OpZoneID, field not selected");
}

const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpZoneID& Link16ReferencePointDataStoreID_ChoiceType::getOpZoneID() const {
  return getOpZoneID_();
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpZoneID& Link16ReferencePointDataStoreID_ChoiceType::getOpZoneID() {
  return getOpZoneID_();
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType& Link16ReferencePointDataStoreID_ChoiceType::setOpZoneID(const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpZoneID& accessor) {
  chooseOpZoneID();
  if (&accessor != opZoneID_Accessor.get()) {
    opZoneID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool Link16ReferencePointDataStoreID_ChoiceType::isOpZoneID() const noexcept {
  return static_cast<bool>(opZoneID_Accessor);
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpZoneID& Link16ReferencePointDataStoreID_ChoiceType::chooseOpZoneID() {
  opLineID_Accessor.reset();
  opPointID_Accessor.reset();
  opVolumeID_Accessor.reset();
  if (!opZoneID_Accessor) {
    opZoneID_Accessor = boost::make_unique<OpZoneID>(1, SIZE_MAX);
  }
  return *opZoneID_Accessor;
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpVolumeID& Link16ReferencePointDataStoreID_ChoiceType::getOpVolumeID_() const {
  if (opVolumeID_Accessor) {
    return *opVolumeID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpVolumeID(): Unable to get OpVolumeID, field not selected");
}

const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpVolumeID& Link16ReferencePointDataStoreID_ChoiceType::getOpVolumeID() const {
  return getOpVolumeID_();
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpVolumeID& Link16ReferencePointDataStoreID_ChoiceType::getOpVolumeID() {
  return getOpVolumeID_();
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType& Link16ReferencePointDataStoreID_ChoiceType::setOpVolumeID(const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpVolumeID& accessor) {
  chooseOpVolumeID();
  if (&accessor != opVolumeID_Accessor.get()) {
    opVolumeID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool Link16ReferencePointDataStoreID_ChoiceType::isOpVolumeID() const noexcept {
  return static_cast<bool>(opVolumeID_Accessor);
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpVolumeID& Link16ReferencePointDataStoreID_ChoiceType::chooseOpVolumeID() {
  opLineID_Accessor.reset();
  opPointID_Accessor.reset();
  opZoneID_Accessor.reset();
  if (!opVolumeID_Accessor) {
    opVolumeID_Accessor = boost::make_unique<OpVolumeID>(1, SIZE_MAX);
  }
  return *opVolumeID_Accessor;
}

std::unique_ptr<Link16ReferencePointDataStoreID_ChoiceType> Link16ReferencePointDataStoreID_ChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::link16ReferencePointDataStoreID_ChoiceType : type};
  return (requestedType == uci::type::accessorType::link16ReferencePointDataStoreID_ChoiceType) ? boost::make_unique<Link16ReferencePointDataStoreID_ChoiceType>() : nullptr;
}

/**  */
namespace Link16ReferencePointDataStoreID_ChoiceType_Names {

constexpr const char* Extern_Type_Name{"Link16ReferencePointDataStoreID_ChoiceType"};
constexpr const char* OpLineID_Name{"OpLineID"};
constexpr const char* OpPointID_Name{"OpPointID"};
constexpr const char* OpZoneID_Name{"OpZoneID"};
constexpr const char* OpVolumeID_Name{"OpVolumeID"};

} // namespace Link16ReferencePointDataStoreID_ChoiceType_Names

void Link16ReferencePointDataStoreID_ChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::Link16ReferencePointDataStoreID_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = Link16ReferencePointDataStoreID_ChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + Link16ReferencePointDataStoreID_ChoiceType_Names::OpLineID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpLineID& boundedList = accessor.chooseOpLineID();
        const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpLineID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OpLineID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + Link16ReferencePointDataStoreID_ChoiceType_Names::OpPointID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpPointID& boundedList = accessor.chooseOpPointID();
        const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpPointID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OpPointID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + Link16ReferencePointDataStoreID_ChoiceType_Names::OpZoneID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpZoneID& boundedList = accessor.chooseOpZoneID();
        const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpZoneID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OpZoneID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + Link16ReferencePointDataStoreID_ChoiceType_Names::OpVolumeID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpVolumeID& boundedList = accessor.chooseOpVolumeID();
        const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpVolumeID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OpVolumeID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string Link16ReferencePointDataStoreID_ChoiceType::serialize(const uci::type::Link16ReferencePointDataStoreID_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? Link16ReferencePointDataStoreID_ChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, Link16ReferencePointDataStoreID_ChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isOpLineID()) {
    {
      const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpLineID& boundedList = accessor.getOpLineID();
      for (uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpLineID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::OpLineID_Type::serialize(boundedList.at(i), node, Link16ReferencePointDataStoreID_ChoiceType_Names::OpLineID_Name);
      }
    }
  } else if (accessor.isOpPointID()) {
    {
      const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpPointID& boundedList = accessor.getOpPointID();
      for (uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpPointID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::OpPointID_Type::serialize(boundedList.at(i), node, Link16ReferencePointDataStoreID_ChoiceType_Names::OpPointID_Name);
      }
    }
  } else if (accessor.isOpZoneID()) {
    {
      const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpZoneID& boundedList = accessor.getOpZoneID();
      for (uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpZoneID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::OpZoneID_Type::serialize(boundedList.at(i), node, Link16ReferencePointDataStoreID_ChoiceType_Names::OpZoneID_Name);
      }
    }
  } else if (accessor.isOpVolumeID()) {
    {
      const uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpVolumeID& boundedList = accessor.getOpVolumeID();
      for (uci::type::Link16ReferencePointDataStoreID_ChoiceType::OpVolumeID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::OpVolumeID_Type::serialize(boundedList.at(i), node, Link16ReferencePointDataStoreID_ChoiceType_Names::OpVolumeID_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::Link16ReferencePointDataStoreID_ChoiceType& Link16ReferencePointDataStoreID_ChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::Link16ReferencePointDataStoreID_ChoiceType>().release());
}

uci::type::Link16ReferencePointDataStoreID_ChoiceType& Link16ReferencePointDataStoreID_ChoiceType::create(const uci::type::Link16ReferencePointDataStoreID_ChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::Link16ReferencePointDataStoreID_ChoiceType> newAccessor{boost::make_unique<asb_uci::type::Link16ReferencePointDataStoreID_ChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void Link16ReferencePointDataStoreID_ChoiceType::destroy(uci::type::Link16ReferencePointDataStoreID_ChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::Link16ReferencePointDataStoreID_ChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

