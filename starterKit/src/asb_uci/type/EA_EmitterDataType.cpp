/** @file EA_EmitterDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EA_EmitterDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EmitterIdentityType.h"
#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/SignalID_Type.h"
#include "asb_uci/type/SignalSummaryType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EA_EmitterDataType.h"
#include "uci/type/EmitterIdentityType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/SignalID_Type.h"
#include "uci/type/SignalSummaryType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EA_EmitterDataType::EA_EmitterDataType() = default;

EA_EmitterDataType::~EA_EmitterDataType() = default;

void EA_EmitterDataType::copy(const uci::type::EA_EmitterDataType& accessor) {
  copyImpl(accessor, false);
}

void EA_EmitterDataType::copyImpl(const uci::type::EA_EmitterDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EA_EmitterDataType&>(accessor);
    if (accessorImpl.entityID_Accessor) {
      setEntityID(*(accessorImpl.entityID_Accessor));
    } else {
      entityID_Accessor.reset();
    }
    if (accessorImpl.emitterType_Accessor) {
      setEmitterType(*(accessorImpl.emitterType_Accessor));
    } else {
      emitterType_Accessor.reset();
    }
    if (accessorImpl.signalDescription_Accessor) {
      setSignalDescription(*(accessorImpl.signalDescription_Accessor));
    } else {
      signalDescription_Accessor.reset();
    }
    if (accessorImpl.signalID_Accessor) {
      setSignalID(*(accessorImpl.signalID_Accessor));
    } else {
      signalID_Accessor.reset();
    }
  }
}

void EA_EmitterDataType::reset() noexcept {
  entityID_Accessor.reset();
  emitterType_Accessor.reset();
  signalDescription_Accessor.reset();
  signalID_Accessor.reset();
}

uci::type::EA_EmitterDataType::EA_EmitterDataTypeChoice EA_EmitterDataType::getEA_EmitterDataTypeChoiceOrdinal() const noexcept {
  if (entityID_Accessor) {
    return EA_EMITTERDATATYPE_CHOICE_ENTITYID;
  }
  if (emitterType_Accessor) {
    return EA_EMITTERDATATYPE_CHOICE_EMITTERTYPE;
  }
  if (signalDescription_Accessor) {
    return EA_EMITTERDATATYPE_CHOICE_SIGNALDESCRIPTION;
  }
  if (signalID_Accessor) {
    return EA_EMITTERDATATYPE_CHOICE_SIGNALID;
  }
  return EA_EMITTERDATATYPE_CHOICE_NONE;
}

uci::type::EA_EmitterDataType& EA_EmitterDataType::setEA_EmitterDataTypeChoiceOrdinal(uci::type::EA_EmitterDataType::EA_EmitterDataTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EA_EMITTERDATATYPE_CHOICE_ENTITYID:
      chooseEntityID("setEA_EmitterDataTypeChoiceOrdinal", type);
      break;
    case EA_EMITTERDATATYPE_CHOICE_EMITTERTYPE:
      chooseEmitterType("setEA_EmitterDataTypeChoiceOrdinal", type);
      break;
    case EA_EMITTERDATATYPE_CHOICE_SIGNALDESCRIPTION:
      chooseSignalDescription("setEA_EmitterDataTypeChoiceOrdinal", type);
      break;
    case EA_EMITTERDATATYPE_CHOICE_SIGNALID:
      chooseSignalID("setEA_EmitterDataTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEA_EmitterDataTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EntityID_Type& EA_EmitterDataType::getEntityID_() const {
  if (entityID_Accessor) {
    return *entityID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityID(): Unable to get EntityID, field not selected");
}

const uci::type::EntityID_Type& EA_EmitterDataType::getEntityID() const {
  return getEntityID_();
}

uci::type::EntityID_Type& EA_EmitterDataType::getEntityID() {
  return getEntityID_();
}

uci::type::EA_EmitterDataType& EA_EmitterDataType::setEntityID(const uci::type::EntityID_Type& accessor) {
  chooseEntityID("setEntityID", accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EA_EmitterDataType::isEntityID() const noexcept {
  return static_cast<bool>(entityID_Accessor);
}

uci::type::EntityID_Type& EA_EmitterDataType::chooseEntityID(const std::string& method, uci::base::accessorType::AccessorType type) {
  emitterType_Accessor.reset();
  signalDescription_Accessor.reset();
  signalID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(type);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::EntityID_Type& EA_EmitterDataType::chooseEntityID(uci::base::accessorType::AccessorType type) {
  return chooseEntityID("chooseEntityID", type);
}

uci::type::EmitterIdentityType& EA_EmitterDataType::getEmitterType_() const {
  if (emitterType_Accessor) {
    return *emitterType_Accessor;
  }
  throw uci::base::UCIException("Error in getEmitterType(): Unable to get EmitterType, field not selected");
}

const uci::type::EmitterIdentityType& EA_EmitterDataType::getEmitterType() const {
  return getEmitterType_();
}

uci::type::EmitterIdentityType& EA_EmitterDataType::getEmitterType() {
  return getEmitterType_();
}

uci::type::EA_EmitterDataType& EA_EmitterDataType::setEmitterType(const uci::type::EmitterIdentityType& accessor) {
  chooseEmitterType();
  if (&accessor != emitterType_Accessor.get()) {
    emitterType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_EmitterDataType::isEmitterType() const noexcept {
  return static_cast<bool>(emitterType_Accessor);
}

uci::type::EmitterIdentityType& EA_EmitterDataType::chooseEmitterType(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  signalDescription_Accessor.reset();
  signalID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emitterIdentityType : type};
  if ((!emitterType_Accessor) || (emitterType_Accessor->getAccessorType() != requestedType)) {
    emitterType_Accessor = EmitterIdentityType::create(type);
    if (!emitterType_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emitterType_Accessor;
}

uci::type::EmitterIdentityType& EA_EmitterDataType::chooseEmitterType(uci::base::accessorType::AccessorType type) {
  return chooseEmitterType("chooseEmitterType", type);
}

uci::type::SignalSummaryType& EA_EmitterDataType::getSignalDescription_() const {
  if (signalDescription_Accessor) {
    return *signalDescription_Accessor;
  }
  throw uci::base::UCIException("Error in getSignalDescription(): Unable to get SignalDescription, field not selected");
}

const uci::type::SignalSummaryType& EA_EmitterDataType::getSignalDescription() const {
  return getSignalDescription_();
}

uci::type::SignalSummaryType& EA_EmitterDataType::getSignalDescription() {
  return getSignalDescription_();
}

uci::type::EA_EmitterDataType& EA_EmitterDataType::setSignalDescription(const uci::type::SignalSummaryType& accessor) {
  chooseSignalDescription();
  if (&accessor != signalDescription_Accessor.get()) {
    signalDescription_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_EmitterDataType::isSignalDescription() const noexcept {
  return static_cast<bool>(signalDescription_Accessor);
}

uci::type::SignalSummaryType& EA_EmitterDataType::chooseSignalDescription(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  emitterType_Accessor.reset();
  signalID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalSummaryType : type};
  if ((!signalDescription_Accessor) || (signalDescription_Accessor->getAccessorType() != requestedType)) {
    signalDescription_Accessor = SignalSummaryType::create(type);
    if (!signalDescription_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *signalDescription_Accessor;
}

uci::type::SignalSummaryType& EA_EmitterDataType::chooseSignalDescription(uci::base::accessorType::AccessorType type) {
  return chooseSignalDescription("chooseSignalDescription", type);
}

uci::type::SignalID_Type& EA_EmitterDataType::getSignalID_() const {
  if (signalID_Accessor) {
    return *signalID_Accessor;
  }
  throw uci::base::UCIException("Error in getSignalID(): Unable to get SignalID, field not selected");
}

const uci::type::SignalID_Type& EA_EmitterDataType::getSignalID() const {
  return getSignalID_();
}

uci::type::SignalID_Type& EA_EmitterDataType::getSignalID() {
  return getSignalID_();
}

uci::type::EA_EmitterDataType& EA_EmitterDataType::setSignalID(const uci::type::SignalID_Type& accessor) {
  chooseSignalID();
  if (&accessor != signalID_Accessor.get()) {
    signalID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_EmitterDataType::isSignalID() const noexcept {
  return static_cast<bool>(signalID_Accessor);
}

uci::type::SignalID_Type& EA_EmitterDataType::chooseSignalID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  emitterType_Accessor.reset();
  signalDescription_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalID_Type : type};
  if ((!signalID_Accessor) || (signalID_Accessor->getAccessorType() != requestedType)) {
    signalID_Accessor = SignalID_Type::create(type);
    if (!signalID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *signalID_Accessor;
}

uci::type::SignalID_Type& EA_EmitterDataType::chooseSignalID(uci::base::accessorType::AccessorType type) {
  return chooseSignalID("chooseSignalID", type);
}

std::unique_ptr<EA_EmitterDataType> EA_EmitterDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_EmitterDataType : type};
  return (requestedType == uci::type::accessorType::eA_EmitterDataType) ? boost::make_unique<EA_EmitterDataType>() : nullptr;
}

/**  */
namespace EA_EmitterDataType_Names {

constexpr const char* Extern_Type_Name{"EA_EmitterDataType"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* EmitterType_Name{"EmitterType"};
constexpr const char* SignalDescription_Name{"SignalDescription"};
constexpr const char* SignalID_Name{"SignalID"};

} // namespace EA_EmitterDataType_Names

void EA_EmitterDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_EmitterDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EA_EmitterDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EA_EmitterDataType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_EmitterDataType_Names::EmitterType_Name) {
      EmitterIdentityType::deserialize(valueType.second, accessor.chooseEmitterType(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_EmitterDataType_Names::SignalDescription_Name) {
      SignalSummaryType::deserialize(valueType.second, accessor.chooseSignalDescription(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_EmitterDataType_Names::SignalID_Name) {
      SignalID_Type::deserialize(valueType.second, accessor.chooseSignalID(), nodeName, nsPrefix);
    }
  }
}

std::string EA_EmitterDataType::serialize(const uci::type::EA_EmitterDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EA_EmitterDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EA_EmitterDataType_Names::Extern_Type_Name);
  }
  if (accessor.isEntityID()) {
    EntityID_Type::serialize(accessor.getEntityID(), node, EA_EmitterDataType_Names::EntityID_Name);
  } else if (accessor.isEmitterType()) {
    EmitterIdentityType::serialize(accessor.getEmitterType(), node, EA_EmitterDataType_Names::EmitterType_Name);
  } else if (accessor.isSignalDescription()) {
    SignalSummaryType::serialize(accessor.getSignalDescription(), node, EA_EmitterDataType_Names::SignalDescription_Name);
  } else if (accessor.isSignalID()) {
    SignalID_Type::serialize(accessor.getSignalID(), node, EA_EmitterDataType_Names::SignalID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EA_EmitterDataType& EA_EmitterDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EA_EmitterDataType>().release());
}

uci::type::EA_EmitterDataType& EA_EmitterDataType::create(const uci::type::EA_EmitterDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EA_EmitterDataType> newAccessor{boost::make_unique<asb_uci::type::EA_EmitterDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EA_EmitterDataType::destroy(uci::type::EA_EmitterDataType& accessor) {
  delete dynamic_cast<asb_uci::type::EA_EmitterDataType*>(&accessor);
}

} // namespace type

} // namespace uci

