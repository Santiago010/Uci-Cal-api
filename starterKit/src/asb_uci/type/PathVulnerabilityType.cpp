/** @file PathVulnerabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PathVulnerabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PathID_Type.h"
#include "asb_uci/type/PathVulnerabilitySegmentType.h"
#include "asb_uci/type/VulnerabilityMetricsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PathID_Type.h"
#include "uci/type/PathVulnerabilitySegmentType.h"
#include "uci/type/PathVulnerabilityType.h"
#include "uci/type/VulnerabilityMetricsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PathVulnerabilityType::PathVulnerabilityType()
  : pathID_Accessor{boost::make_unique<PathID_Type>()},
    pathSegment_Accessor{boost::make_unique<PathSegment>(0, SIZE_MAX)} {
}

PathVulnerabilityType::~PathVulnerabilityType() = default;

void PathVulnerabilityType::copy(const uci::type::PathVulnerabilityType& accessor) {
  copyImpl(accessor, false);
}

void PathVulnerabilityType::copyImpl(const uci::type::PathVulnerabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PathVulnerabilityType&>(accessor);
    setPathID(*(accessorImpl.pathID_Accessor));
    setPathSegment(*(accessorImpl.pathSegment_Accessor));
    if (accessorImpl.metricsWithoutSuppression_Accessor) {
      setMetricsWithoutSuppression(*(accessorImpl.metricsWithoutSuppression_Accessor));
    } else {
      metricsWithoutSuppression_Accessor.reset();
    }
    if (accessorImpl.metricsWithSuppression_Accessor) {
      setMetricsWithSuppression(*(accessorImpl.metricsWithSuppression_Accessor));
    } else {
      metricsWithSuppression_Accessor.reset();
    }
  }
}

void PathVulnerabilityType::reset() noexcept {
  pathID_Accessor->reset();
  pathSegment_Accessor->reset();
  metricsWithoutSuppression_Accessor.reset();
  metricsWithSuppression_Accessor.reset();
}

const uci::type::PathID_Type& PathVulnerabilityType::getPathID() const {
  return *pathID_Accessor;
}

uci::type::PathID_Type& PathVulnerabilityType::getPathID() {
  return *pathID_Accessor;
}

uci::type::PathVulnerabilityType& PathVulnerabilityType::setPathID(const uci::type::PathID_Type& accessor) {
  if (&accessor != pathID_Accessor.get()) {
    pathID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PathVulnerabilityType::PathSegment& PathVulnerabilityType::getPathSegment() const {
  return *pathSegment_Accessor;
}

uci::type::PathVulnerabilityType::PathSegment& PathVulnerabilityType::getPathSegment() {
  return *pathSegment_Accessor;
}

uci::type::PathVulnerabilityType& PathVulnerabilityType::setPathSegment(const uci::type::PathVulnerabilityType::PathSegment& accessor) {
  if (&accessor != pathSegment_Accessor.get()) {
    pathSegment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VulnerabilityMetricsType& PathVulnerabilityType::getMetricsWithoutSuppression_() const {
  if (metricsWithoutSuppression_Accessor) {
    return *metricsWithoutSuppression_Accessor;
  }
  throw uci::base::UCIException("Error in getMetricsWithoutSuppression(): An attempt was made to get an optional field that was not enabled, call hasMetricsWithoutSuppression() to determine if it is safe to call getMetricsWithoutSuppression()");
}

const uci::type::VulnerabilityMetricsType& PathVulnerabilityType::getMetricsWithoutSuppression() const {
  return getMetricsWithoutSuppression_();
}

uci::type::VulnerabilityMetricsType& PathVulnerabilityType::getMetricsWithoutSuppression() {
  return getMetricsWithoutSuppression_();
}

uci::type::PathVulnerabilityType& PathVulnerabilityType::setMetricsWithoutSuppression(const uci::type::VulnerabilityMetricsType& accessor) {
  enableMetricsWithoutSuppression();
  if (&accessor != metricsWithoutSuppression_Accessor.get()) {
    metricsWithoutSuppression_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathVulnerabilityType::hasMetricsWithoutSuppression() const noexcept {
  return static_cast<bool>(metricsWithoutSuppression_Accessor);
}

uci::type::VulnerabilityMetricsType& PathVulnerabilityType::enableMetricsWithoutSuppression(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vulnerabilityMetricsType : type};
  if ((!metricsWithoutSuppression_Accessor) || (metricsWithoutSuppression_Accessor->getAccessorType() != requestedType)) {
    metricsWithoutSuppression_Accessor = VulnerabilityMetricsType::create(requestedType);
    if (!metricsWithoutSuppression_Accessor) {
      throw uci::base::UCIException("Error in enableMetricsWithoutSuppression(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *metricsWithoutSuppression_Accessor;
}

uci::type::PathVulnerabilityType& PathVulnerabilityType::clearMetricsWithoutSuppression() noexcept {
  metricsWithoutSuppression_Accessor.reset();
  return *this;
}

uci::type::VulnerabilityMetricsType& PathVulnerabilityType::getMetricsWithSuppression_() const {
  if (metricsWithSuppression_Accessor) {
    return *metricsWithSuppression_Accessor;
  }
  throw uci::base::UCIException("Error in getMetricsWithSuppression(): An attempt was made to get an optional field that was not enabled, call hasMetricsWithSuppression() to determine if it is safe to call getMetricsWithSuppression()");
}

const uci::type::VulnerabilityMetricsType& PathVulnerabilityType::getMetricsWithSuppression() const {
  return getMetricsWithSuppression_();
}

uci::type::VulnerabilityMetricsType& PathVulnerabilityType::getMetricsWithSuppression() {
  return getMetricsWithSuppression_();
}

uci::type::PathVulnerabilityType& PathVulnerabilityType::setMetricsWithSuppression(const uci::type::VulnerabilityMetricsType& accessor) {
  enableMetricsWithSuppression();
  if (&accessor != metricsWithSuppression_Accessor.get()) {
    metricsWithSuppression_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PathVulnerabilityType::hasMetricsWithSuppression() const noexcept {
  return static_cast<bool>(metricsWithSuppression_Accessor);
}

uci::type::VulnerabilityMetricsType& PathVulnerabilityType::enableMetricsWithSuppression(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vulnerabilityMetricsType : type};
  if ((!metricsWithSuppression_Accessor) || (metricsWithSuppression_Accessor->getAccessorType() != requestedType)) {
    metricsWithSuppression_Accessor = VulnerabilityMetricsType::create(requestedType);
    if (!metricsWithSuppression_Accessor) {
      throw uci::base::UCIException("Error in enableMetricsWithSuppression(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *metricsWithSuppression_Accessor;
}

uci::type::PathVulnerabilityType& PathVulnerabilityType::clearMetricsWithSuppression() noexcept {
  metricsWithSuppression_Accessor.reset();
  return *this;
}

std::unique_ptr<PathVulnerabilityType> PathVulnerabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pathVulnerabilityType : type};
  return (requestedType == uci::type::accessorType::pathVulnerabilityType) ? boost::make_unique<PathVulnerabilityType>() : nullptr;
}

/**  */
namespace PathVulnerabilityType_Names {

constexpr const char* Extern_Type_Name{"PathVulnerabilityType"};
constexpr const char* PathID_Name{"PathID"};
constexpr const char* PathSegment_Name{"PathSegment"};
constexpr const char* MetricsWithoutSuppression_Name{"MetricsWithoutSuppression"};
constexpr const char* MetricsWithSuppression_Name{"MetricsWithSuppression"};

} // namespace PathVulnerabilityType_Names

void PathVulnerabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PathVulnerabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PathVulnerabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PathVulnerabilityType_Names::PathID_Name) {
      PathID_Type::deserialize(valueType.second, accessor.getPathID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathVulnerabilityType_Names::PathSegment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PathVulnerabilityType::PathSegment& boundedList = accessor.getPathSegment();
        const uci::type::PathVulnerabilityType::PathSegment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PathVulnerabilitySegmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PathVulnerabilityType_Names::MetricsWithoutSuppression_Name) {
      VulnerabilityMetricsType::deserialize(valueType.second, accessor.enableMetricsWithoutSuppression(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathVulnerabilityType_Names::MetricsWithSuppression_Name) {
      VulnerabilityMetricsType::deserialize(valueType.second, accessor.enableMetricsWithSuppression(), nodeName, nsPrefix);
    }
  }
}

std::string PathVulnerabilityType::serialize(const uci::type::PathVulnerabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PathVulnerabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PathVulnerabilityType_Names::Extern_Type_Name);
  }
  PathID_Type::serialize(accessor.getPathID(), node, PathVulnerabilityType_Names::PathID_Name);
  {
    const uci::type::PathVulnerabilityType::PathSegment& boundedList = accessor.getPathSegment();
    for (uci::type::PathVulnerabilityType::PathSegment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PathVulnerabilitySegmentType::serialize(boundedList.at(i), node, PathVulnerabilityType_Names::PathSegment_Name);
    }
  }
  if (accessor.hasMetricsWithoutSuppression()) {
    VulnerabilityMetricsType::serialize(accessor.getMetricsWithoutSuppression(), node, PathVulnerabilityType_Names::MetricsWithoutSuppression_Name);
  }
  if (accessor.hasMetricsWithSuppression()) {
    VulnerabilityMetricsType::serialize(accessor.getMetricsWithSuppression(), node, PathVulnerabilityType_Names::MetricsWithSuppression_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PathVulnerabilityType& PathVulnerabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PathVulnerabilityType>().release());
}

uci::type::PathVulnerabilityType& PathVulnerabilityType::create(const uci::type::PathVulnerabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PathVulnerabilityType> newAccessor{boost::make_unique<asb_uci::type::PathVulnerabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PathVulnerabilityType::destroy(uci::type::PathVulnerabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::PathVulnerabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

