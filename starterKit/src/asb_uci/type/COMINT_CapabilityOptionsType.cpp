/** @file COMINT_CapabilityOptionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/COMINT_CapabilityOptionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/COMINT_CapabilityOptionsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MIME_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

COMINT_CapabilityOptionsType::COMINT_CapabilityOptionsType()
  : audioFormats_Accessor{boost::make_unique<AudioFormats>(0, SIZE_MAX)},
    compressionType_Accessor{boost::make_unique<CompressionType>(0, SIZE_MAX)} {
}

COMINT_CapabilityOptionsType::~COMINT_CapabilityOptionsType() = default;

void COMINT_CapabilityOptionsType::copy(const uci::type::COMINT_CapabilityOptionsType& accessor) {
  copyImpl(accessor, false);
}

void COMINT_CapabilityOptionsType::copyImpl(const uci::type::COMINT_CapabilityOptionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const COMINT_CapabilityOptionsType&>(accessor);
    setInterruptOtherActivities(accessorImpl.interruptOtherActivities_Accessor);
    if (accessorImpl.hasNumberOfChannels()) {
      setNumberOfChannels(accessorImpl.getNumberOfChannels());
    } else {
      clearNumberOfChannels();
    }
    if (accessorImpl.hasAGC_Supported()) {
      setAGC_Supported(accessorImpl.getAGC_Supported());
    } else {
      clearAGC_Supported();
    }
    if (accessorImpl.hasArchiveAvailable()) {
      setArchiveAvailable(accessorImpl.getArchiveAvailable());
    } else {
      clearArchiveAvailable();
    }
    if (accessorImpl.capabilityDependencyID_Accessor) {
      setCapabilityDependencyID(*(accessorImpl.capabilityDependencyID_Accessor));
    } else {
      capabilityDependencyID_Accessor.reset();
    }
    if (accessorImpl.hasScanSupport()) {
      setScanSupport(accessorImpl.getScanSupport());
    } else {
      clearScanSupport();
    }
    if (accessorImpl.supportedModes_Accessor) {
      setSupportedModes(*(accessorImpl.supportedModes_Accessor));
    } else {
      supportedModes_Accessor.reset();
    }
    setAudioFormats(*(accessorImpl.audioFormats_Accessor));
    setCompressionType(*(accessorImpl.compressionType_Accessor));
  }
}

void COMINT_CapabilityOptionsType::reset() noexcept {
  interruptOtherActivities_Accessor = false;
  clearNumberOfChannels();
  clearAGC_Supported();
  clearArchiveAvailable();
  capabilityDependencyID_Accessor.reset();
  clearScanSupport();
  supportedModes_Accessor.reset();
  audioFormats_Accessor->reset();
  compressionType_Accessor->reset();
}

xs::Boolean COMINT_CapabilityOptionsType::getInterruptOtherActivities() const {
  return interruptOtherActivities_Accessor;
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::setInterruptOtherActivities(xs::Boolean value) {
  interruptOtherActivities_Accessor = value;
  return *this;
}


xs::Int COMINT_CapabilityOptionsType::getNumberOfChannels() const {
  if (numberOfChannels_Accessor) {
    return *numberOfChannels_Accessor;
  }
  throw uci::base::UCIException("Error in getNumberOfChannels(): An attempt was made to get an optional field that was not enabled, call hasNumberOfChannels() to determine if it is safe to call getNumberOfChannels()");
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::setNumberOfChannels(xs::Int value) {
  numberOfChannels_Accessor = value;
  return *this;
}

bool COMINT_CapabilityOptionsType::hasNumberOfChannels() const noexcept {
  return numberOfChannels_Accessor.has_value();
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::clearNumberOfChannels() noexcept {
  numberOfChannels_Accessor.reset();
  return *this;
}

xs::Boolean COMINT_CapabilityOptionsType::getAGC_Supported() const {
  if (aGC_Supported_Accessor) {
    return *aGC_Supported_Accessor;
  }
  throw uci::base::UCIException("Error in getAGC_Supported(): An attempt was made to get an optional field that was not enabled, call hasAGC_Supported() to determine if it is safe to call getAGC_Supported()");
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::setAGC_Supported(xs::Boolean value) {
  aGC_Supported_Accessor = value;
  return *this;
}

bool COMINT_CapabilityOptionsType::hasAGC_Supported() const noexcept {
  return aGC_Supported_Accessor.has_value();
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::clearAGC_Supported() noexcept {
  aGC_Supported_Accessor.reset();
  return *this;
}

xs::Boolean COMINT_CapabilityOptionsType::getArchiveAvailable() const {
  if (archiveAvailable_Accessor) {
    return *archiveAvailable_Accessor;
  }
  throw uci::base::UCIException("Error in getArchiveAvailable(): An attempt was made to get an optional field that was not enabled, call hasArchiveAvailable() to determine if it is safe to call getArchiveAvailable()");
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::setArchiveAvailable(xs::Boolean value) {
  archiveAvailable_Accessor = value;
  return *this;
}

bool COMINT_CapabilityOptionsType::hasArchiveAvailable() const noexcept {
  return archiveAvailable_Accessor.has_value();
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::clearArchiveAvailable() noexcept {
  archiveAvailable_Accessor.reset();
  return *this;
}

uci::type::CapabilityID_Type& COMINT_CapabilityOptionsType::getCapabilityDependencyID_() const {
  if (capabilityDependencyID_Accessor) {
    return *capabilityDependencyID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityDependencyID(): An attempt was made to get an optional field that was not enabled, call hasCapabilityDependencyID() to determine if it is safe to call getCapabilityDependencyID()");
}

const uci::type::CapabilityID_Type& COMINT_CapabilityOptionsType::getCapabilityDependencyID() const {
  return getCapabilityDependencyID_();
}

uci::type::CapabilityID_Type& COMINT_CapabilityOptionsType::getCapabilityDependencyID() {
  return getCapabilityDependencyID_();
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::setCapabilityDependencyID(const uci::type::CapabilityID_Type& accessor) {
  enableCapabilityDependencyID();
  if (&accessor != capabilityDependencyID_Accessor.get()) {
    capabilityDependencyID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_CapabilityOptionsType::hasCapabilityDependencyID() const noexcept {
  return static_cast<bool>(capabilityDependencyID_Accessor);
}

uci::type::CapabilityID_Type& COMINT_CapabilityOptionsType::enableCapabilityDependencyID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!capabilityDependencyID_Accessor) || (capabilityDependencyID_Accessor->getAccessorType() != requestedType)) {
    capabilityDependencyID_Accessor = CapabilityID_Type::create(requestedType);
    if (!capabilityDependencyID_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityDependencyID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityDependencyID_Accessor;
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::clearCapabilityDependencyID() noexcept {
  capabilityDependencyID_Accessor.reset();
  return *this;
}

xs::Boolean COMINT_CapabilityOptionsType::getScanSupport() const {
  if (scanSupport_Accessor) {
    return *scanSupport_Accessor;
  }
  throw uci::base::UCIException("Error in getScanSupport(): An attempt was made to get an optional field that was not enabled, call hasScanSupport() to determine if it is safe to call getScanSupport()");
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::setScanSupport(xs::Boolean value) {
  scanSupport_Accessor = value;
  return *this;
}

bool COMINT_CapabilityOptionsType::hasScanSupport() const noexcept {
  return scanSupport_Accessor.has_value();
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::clearScanSupport() noexcept {
  scanSupport_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& COMINT_CapabilityOptionsType::getSupportedModes_() const {
  if (supportedModes_Accessor) {
    return *supportedModes_Accessor;
  }
  throw uci::base::UCIException("Error in getSupportedModes(): An attempt was made to get an optional field that was not enabled, call hasSupportedModes() to determine if it is safe to call getSupportedModes()");
}

const uci::type::ForeignKeyType& COMINT_CapabilityOptionsType::getSupportedModes() const {
  return getSupportedModes_();
}

uci::type::ForeignKeyType& COMINT_CapabilityOptionsType::getSupportedModes() {
  return getSupportedModes_();
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::setSupportedModes(const uci::type::ForeignKeyType& accessor) {
  enableSupportedModes(accessor.getAccessorType());
  if (&accessor != supportedModes_Accessor.get()) {
    supportedModes_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool COMINT_CapabilityOptionsType::hasSupportedModes() const noexcept {
  return static_cast<bool>(supportedModes_Accessor);
}

uci::type::ForeignKeyType& COMINT_CapabilityOptionsType::enableSupportedModes(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!supportedModes_Accessor) || (supportedModes_Accessor->getAccessorType() != requestedType)) {
    supportedModes_Accessor = ForeignKeyType::create(requestedType);
    if (!supportedModes_Accessor) {
      throw uci::base::UCIException("Error in enableSupportedModes(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *supportedModes_Accessor;
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::clearSupportedModes() noexcept {
  supportedModes_Accessor.reset();
  return *this;
}

const uci::type::COMINT_CapabilityOptionsType::AudioFormats& COMINT_CapabilityOptionsType::getAudioFormats() const {
  return *audioFormats_Accessor;
}

uci::type::COMINT_CapabilityOptionsType::AudioFormats& COMINT_CapabilityOptionsType::getAudioFormats() {
  return *audioFormats_Accessor;
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::setAudioFormats(const uci::type::COMINT_CapabilityOptionsType::AudioFormats& accessor) {
  if (&accessor != audioFormats_Accessor.get()) {
    audioFormats_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::COMINT_CapabilityOptionsType::CompressionType& COMINT_CapabilityOptionsType::getCompressionType() const {
  return *compressionType_Accessor;
}

uci::type::COMINT_CapabilityOptionsType::CompressionType& COMINT_CapabilityOptionsType::getCompressionType() {
  return *compressionType_Accessor;
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::setCompressionType(const uci::type::COMINT_CapabilityOptionsType::CompressionType& accessor) {
  if (&accessor != compressionType_Accessor.get()) {
    compressionType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<COMINT_CapabilityOptionsType> COMINT_CapabilityOptionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_CapabilityOptionsType : type};
  return (requestedType == uci::type::accessorType::cOMINT_CapabilityOptionsType) ? boost::make_unique<COMINT_CapabilityOptionsType>() : nullptr;
}

/**  */
namespace COMINT_CapabilityOptionsType_Names {

constexpr const char* Extern_Type_Name{"COMINT_CapabilityOptionsType"};
constexpr const char* InterruptOtherActivities_Name{"InterruptOtherActivities"};
constexpr const char* NumberOfChannels_Name{"NumberOfChannels"};
constexpr const char* AGC_Supported_Name{"AGC_Supported"};
constexpr const char* ArchiveAvailable_Name{"ArchiveAvailable"};
constexpr const char* CapabilityDependencyID_Name{"CapabilityDependencyID"};
constexpr const char* ScanSupport_Name{"ScanSupport"};
constexpr const char* SupportedModes_Name{"SupportedModes"};
constexpr const char* AudioFormats_Name{"AudioFormats"};
constexpr const char* CompressionType_Name{"CompressionType"};

} // namespace COMINT_CapabilityOptionsType_Names

void COMINT_CapabilityOptionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::COMINT_CapabilityOptionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = COMINT_CapabilityOptionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + COMINT_CapabilityOptionsType_Names::InterruptOtherActivities_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInterruptOtherActivities(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_CapabilityOptionsType_Names::NumberOfChannels_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfChannels(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_CapabilityOptionsType_Names::AGC_Supported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAGC_Supported(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_CapabilityOptionsType_Names::ArchiveAvailable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setArchiveAvailable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_CapabilityOptionsType_Names::CapabilityDependencyID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableCapabilityDependencyID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_CapabilityOptionsType_Names::ScanSupport_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setScanSupport(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_CapabilityOptionsType_Names::SupportedModes_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSupportedModes(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_CapabilityOptionsType_Names::AudioFormats_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_CapabilityOptionsType::AudioFormats& boundedList = accessor.getAudioFormats();
        const uci::type::COMINT_CapabilityOptionsType::AudioFormats::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + COMINT_CapabilityOptionsType_Names::CompressionType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_CapabilityOptionsType::CompressionType& boundedList = accessor.getCompressionType();
        const uci::type::COMINT_CapabilityOptionsType::CompressionType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string COMINT_CapabilityOptionsType::serialize(const uci::type::COMINT_CapabilityOptionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? COMINT_CapabilityOptionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, COMINT_CapabilityOptionsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInterruptOtherActivities(), node, COMINT_CapabilityOptionsType_Names::InterruptOtherActivities_Name);
  if (accessor.hasNumberOfChannels()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getNumberOfChannels(), node, COMINT_CapabilityOptionsType_Names::NumberOfChannels_Name);
  }
  if (accessor.hasAGC_Supported()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAGC_Supported(), node, COMINT_CapabilityOptionsType_Names::AGC_Supported_Name);
  }
  if (accessor.hasArchiveAvailable()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getArchiveAvailable(), node, COMINT_CapabilityOptionsType_Names::ArchiveAvailable_Name);
  }
  if (accessor.hasCapabilityDependencyID()) {
    CapabilityID_Type::serialize(accessor.getCapabilityDependencyID(), node, COMINT_CapabilityOptionsType_Names::CapabilityDependencyID_Name);
  }
  if (accessor.hasScanSupport()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getScanSupport(), node, COMINT_CapabilityOptionsType_Names::ScanSupport_Name);
  }
  if (accessor.hasSupportedModes()) {
    ForeignKeyType::serialize(accessor.getSupportedModes(), node, COMINT_CapabilityOptionsType_Names::SupportedModes_Name);
  }
  {
    const uci::type::COMINT_CapabilityOptionsType::AudioFormats& boundedList = accessor.getAudioFormats();
    for (uci::type::COMINT_CapabilityOptionsType::AudioFormats::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, COMINT_CapabilityOptionsType_Names::AudioFormats_Name);
    }
  }
  {
    const uci::type::COMINT_CapabilityOptionsType::CompressionType& boundedList = accessor.getCompressionType();
    for (uci::type::COMINT_CapabilityOptionsType::CompressionType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, COMINT_CapabilityOptionsType_Names::CompressionType_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::COMINT_CapabilityOptionsType>().release());
}

uci::type::COMINT_CapabilityOptionsType& COMINT_CapabilityOptionsType::create(const uci::type::COMINT_CapabilityOptionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::COMINT_CapabilityOptionsType> newAccessor{boost::make_unique<asb_uci::type::COMINT_CapabilityOptionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void COMINT_CapabilityOptionsType::destroy(uci::type::COMINT_CapabilityOptionsType& accessor) {
  delete dynamic_cast<asb_uci::type::COMINT_CapabilityOptionsType*>(&accessor);
}

} // namespace type

} // namespace uci

