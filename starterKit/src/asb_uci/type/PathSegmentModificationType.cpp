/** @file PathSegmentModificationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PathSegmentModificationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PathID_Type.h"
#include "asb_uci/type/PathSegmentType.h"
#include "asb_uci/type/SegmentID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PathID_Type.h"
#include "uci/type/PathSegmentModificationType.h"
#include "uci/type/PathSegmentType.h"
#include "uci/type/SegmentID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PathSegmentModificationType::PathSegmentModificationType()
  : pathID_Accessor{boost::make_unique<PathID_Type>()},
    add_Accessor{boost::make_unique<Add>(0, SIZE_MAX)},
    removeID_Accessor{boost::make_unique<RemoveID>(0, SIZE_MAX)},
    update_Accessor{boost::make_unique<Update>(0, SIZE_MAX)} {
}

PathSegmentModificationType::~PathSegmentModificationType() = default;

void PathSegmentModificationType::copy(const uci::type::PathSegmentModificationType& accessor) {
  copyImpl(accessor, false);
}

void PathSegmentModificationType::copyImpl(const uci::type::PathSegmentModificationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PathSegmentModificationType&>(accessor);
    setPathID(*(accessorImpl.pathID_Accessor));
    setAdd(*(accessorImpl.add_Accessor));
    setRemoveID(*(accessorImpl.removeID_Accessor));
    setUpdate(*(accessorImpl.update_Accessor));
  }
}

void PathSegmentModificationType::reset() noexcept {
  pathID_Accessor->reset();
  add_Accessor->reset();
  removeID_Accessor->reset();
  update_Accessor->reset();
}

const uci::type::PathID_Type& PathSegmentModificationType::getPathID() const {
  return *pathID_Accessor;
}

uci::type::PathID_Type& PathSegmentModificationType::getPathID() {
  return *pathID_Accessor;
}

uci::type::PathSegmentModificationType& PathSegmentModificationType::setPathID(const uci::type::PathID_Type& accessor) {
  if (&accessor != pathID_Accessor.get()) {
    pathID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PathSegmentModificationType::Add& PathSegmentModificationType::getAdd() const {
  return *add_Accessor;
}

uci::type::PathSegmentModificationType::Add& PathSegmentModificationType::getAdd() {
  return *add_Accessor;
}

uci::type::PathSegmentModificationType& PathSegmentModificationType::setAdd(const uci::type::PathSegmentModificationType::Add& accessor) {
  if (&accessor != add_Accessor.get()) {
    add_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PathSegmentModificationType::RemoveID& PathSegmentModificationType::getRemoveID() const {
  return *removeID_Accessor;
}

uci::type::PathSegmentModificationType::RemoveID& PathSegmentModificationType::getRemoveID() {
  return *removeID_Accessor;
}

uci::type::PathSegmentModificationType& PathSegmentModificationType::setRemoveID(const uci::type::PathSegmentModificationType::RemoveID& accessor) {
  if (&accessor != removeID_Accessor.get()) {
    removeID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PathSegmentModificationType::Update& PathSegmentModificationType::getUpdate() const {
  return *update_Accessor;
}

uci::type::PathSegmentModificationType::Update& PathSegmentModificationType::getUpdate() {
  return *update_Accessor;
}

uci::type::PathSegmentModificationType& PathSegmentModificationType::setUpdate(const uci::type::PathSegmentModificationType::Update& accessor) {
  if (&accessor != update_Accessor.get()) {
    update_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PathSegmentModificationType> PathSegmentModificationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pathSegmentModificationType : type};
  return (requestedType == uci::type::accessorType::pathSegmentModificationType) ? boost::make_unique<PathSegmentModificationType>() : nullptr;
}

/**  */
namespace PathSegmentModificationType_Names {

constexpr const char* Extern_Type_Name{"PathSegmentModificationType"};
constexpr const char* PathID_Name{"PathID"};
constexpr const char* Add_Name{"Add"};
constexpr const char* RemoveID_Name{"RemoveID"};
constexpr const char* Update_Name{"Update"};

} // namespace PathSegmentModificationType_Names

void PathSegmentModificationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PathSegmentModificationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PathSegmentModificationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PathSegmentModificationType_Names::PathID_Name) {
      PathID_Type::deserialize(valueType.second, accessor.getPathID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentModificationType_Names::Add_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PathSegmentModificationType::Add& boundedList = accessor.getAdd();
        const uci::type::PathSegmentModificationType::Add::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PathSegmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PathSegmentModificationType_Names::RemoveID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PathSegmentModificationType::RemoveID& boundedList = accessor.getRemoveID();
        const uci::type::PathSegmentModificationType::RemoveID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SegmentID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PathSegmentModificationType_Names::Update_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PathSegmentModificationType::Update& boundedList = accessor.getUpdate();
        const uci::type::PathSegmentModificationType::Update::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PathSegmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PathSegmentModificationType::serialize(const uci::type::PathSegmentModificationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PathSegmentModificationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PathSegmentModificationType_Names::Extern_Type_Name);
  }
  PathID_Type::serialize(accessor.getPathID(), node, PathSegmentModificationType_Names::PathID_Name);
  {
    const uci::type::PathSegmentModificationType::Add& boundedList = accessor.getAdd();
    for (uci::type::PathSegmentModificationType::Add::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PathSegmentType::serialize(boundedList.at(i), node, PathSegmentModificationType_Names::Add_Name);
    }
  }
  {
    const uci::type::PathSegmentModificationType::RemoveID& boundedList = accessor.getRemoveID();
    for (uci::type::PathSegmentModificationType::RemoveID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SegmentID_Type::serialize(boundedList.at(i), node, PathSegmentModificationType_Names::RemoveID_Name);
    }
  }
  {
    const uci::type::PathSegmentModificationType::Update& boundedList = accessor.getUpdate();
    for (uci::type::PathSegmentModificationType::Update::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PathSegmentType::serialize(boundedList.at(i), node, PathSegmentModificationType_Names::Update_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PathSegmentModificationType& PathSegmentModificationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PathSegmentModificationType>().release());
}

uci::type::PathSegmentModificationType& PathSegmentModificationType::create(const uci::type::PathSegmentModificationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PathSegmentModificationType> newAccessor{boost::make_unique<asb_uci::type::PathSegmentModificationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PathSegmentModificationType::destroy(uci::type::PathSegmentModificationType& accessor) {
  delete dynamic_cast<asb_uci::type::PathSegmentModificationType*>(&accessor);
}

} // namespace type

} // namespace uci

