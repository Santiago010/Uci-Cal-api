/** @file AntennaPerformanceProfileType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AntennaPerformanceProfileType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AnglePairType.h"
#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnglePairType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AntennaPerformanceProfileType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PowerType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AntennaPerformanceProfileType::AntennaPerformanceProfileType()
  : elevationFieldOfRegard_Accessor{boost::make_unique<AnglePairType>()},
    azimuthFieldOfRegard_Accessor{boost::make_unique<AnglePairType>()},
    band_Accessor{boost::make_unique<FrequencyRangeType>()} {
}

AntennaPerformanceProfileType::~AntennaPerformanceProfileType() = default;

void AntennaPerformanceProfileType::copy(const uci::type::AntennaPerformanceProfileType& accessor) {
  copyImpl(accessor, false);
}

void AntennaPerformanceProfileType::copyImpl(const uci::type::AntennaPerformanceProfileType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AntennaPerformanceProfileType&>(accessor);
    if (accessorImpl.hasDeltaInputPowerConsumption()) {
      setDeltaInputPowerConsumption(accessorImpl.getDeltaInputPowerConsumption());
    } else {
      clearDeltaInputPowerConsumption();
    }
    setElevationFieldOfRegard(*(accessorImpl.elevationFieldOfRegard_Accessor));
    setAzimuthFieldOfRegard(*(accessorImpl.azimuthFieldOfRegard_Accessor));
    setDutyFactorLimit(accessorImpl.dutyFactorLimit_Accessor);
    setBeamLimit(accessorImpl.beamLimit_Accessor);
    setBand(*(accessorImpl.band_Accessor));
  }
}

void AntennaPerformanceProfileType::reset() noexcept {
  clearDeltaInputPowerConsumption();
  if (elevationFieldOfRegard_Accessor->getAccessorType() != uci::type::accessorType::anglePairType) {
    elevationFieldOfRegard_Accessor = boost::make_unique<AnglePairType>();
  } else {
    elevationFieldOfRegard_Accessor->reset();
  }
  if (azimuthFieldOfRegard_Accessor->getAccessorType() != uci::type::accessorType::anglePairType) {
    azimuthFieldOfRegard_Accessor = boost::make_unique<AnglePairType>();
  } else {
    azimuthFieldOfRegard_Accessor->reset();
  }
  dutyFactorLimit_Accessor = 0.0;
  beamLimit_Accessor = 0;
  band_Accessor->reset();
}

uci::type::PowerTypeValue AntennaPerformanceProfileType::getDeltaInputPowerConsumption() const {
  if (deltaInputPowerConsumption_Accessor) {
    return *deltaInputPowerConsumption_Accessor;
  }
  throw uci::base::UCIException("Error in getDeltaInputPowerConsumption(): An attempt was made to get an optional field that was not enabled, call hasDeltaInputPowerConsumption() to determine if it is safe to call getDeltaInputPowerConsumption()");
}

uci::type::AntennaPerformanceProfileType& AntennaPerformanceProfileType::setDeltaInputPowerConsumption(uci::type::PowerTypeValue value) {
  deltaInputPowerConsumption_Accessor = value;
  return *this;
}

bool AntennaPerformanceProfileType::hasDeltaInputPowerConsumption() const noexcept {
  return deltaInputPowerConsumption_Accessor.has_value();
}

uci::type::AntennaPerformanceProfileType& AntennaPerformanceProfileType::clearDeltaInputPowerConsumption() noexcept {
  deltaInputPowerConsumption_Accessor.reset();
  return *this;
}

const uci::type::AnglePairType& AntennaPerformanceProfileType::getElevationFieldOfRegard() const {
  return *elevationFieldOfRegard_Accessor;
}

uci::type::AnglePairType& AntennaPerformanceProfileType::getElevationFieldOfRegard() {
  return *elevationFieldOfRegard_Accessor;
}

uci::type::AntennaPerformanceProfileType& AntennaPerformanceProfileType::setElevationFieldOfRegard(const uci::type::AnglePairType& accessor) {
  enableElevationFieldOfRegard(accessor.getAccessorType());
  if (&accessor != elevationFieldOfRegard_Accessor.get()) {
    elevationFieldOfRegard_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::AnglePairType& AntennaPerformanceProfileType::enableElevationFieldOfRegard(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::anglePairType : type};
  if ((!elevationFieldOfRegard_Accessor) || (elevationFieldOfRegard_Accessor->getAccessorType() != requestedType)) {
    elevationFieldOfRegard_Accessor = AnglePairType::create(requestedType);
    if (!elevationFieldOfRegard_Accessor) {
      throw uci::base::UCIException("Error in enableElevationFieldOfRegard(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *elevationFieldOfRegard_Accessor;
}

const uci::type::AnglePairType& AntennaPerformanceProfileType::getAzimuthFieldOfRegard() const {
  return *azimuthFieldOfRegard_Accessor;
}

uci::type::AnglePairType& AntennaPerformanceProfileType::getAzimuthFieldOfRegard() {
  return *azimuthFieldOfRegard_Accessor;
}

uci::type::AntennaPerformanceProfileType& AntennaPerformanceProfileType::setAzimuthFieldOfRegard(const uci::type::AnglePairType& accessor) {
  enableAzimuthFieldOfRegard(accessor.getAccessorType());
  if (&accessor != azimuthFieldOfRegard_Accessor.get()) {
    azimuthFieldOfRegard_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::AnglePairType& AntennaPerformanceProfileType::enableAzimuthFieldOfRegard(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::anglePairType : type};
  if ((!azimuthFieldOfRegard_Accessor) || (azimuthFieldOfRegard_Accessor->getAccessorType() != requestedType)) {
    azimuthFieldOfRegard_Accessor = AnglePairType::create(requestedType);
    if (!azimuthFieldOfRegard_Accessor) {
      throw uci::base::UCIException("Error in enableAzimuthFieldOfRegard(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *azimuthFieldOfRegard_Accessor;
}

uci::type::PercentTypeValue AntennaPerformanceProfileType::getDutyFactorLimit() const {
  return dutyFactorLimit_Accessor;
}

uci::type::AntennaPerformanceProfileType& AntennaPerformanceProfileType::setDutyFactorLimit(uci::type::PercentTypeValue value) {
  dutyFactorLimit_Accessor = value;
  return *this;
}


xs::UnsignedInt AntennaPerformanceProfileType::getBeamLimit() const {
  return beamLimit_Accessor;
}

uci::type::AntennaPerformanceProfileType& AntennaPerformanceProfileType::setBeamLimit(xs::UnsignedInt value) {
  beamLimit_Accessor = value;
  return *this;
}


const uci::type::FrequencyRangeType& AntennaPerformanceProfileType::getBand() const {
  return *band_Accessor;
}

uci::type::FrequencyRangeType& AntennaPerformanceProfileType::getBand() {
  return *band_Accessor;
}

uci::type::AntennaPerformanceProfileType& AntennaPerformanceProfileType::setBand(const uci::type::FrequencyRangeType& accessor) {
  if (&accessor != band_Accessor.get()) {
    band_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<AntennaPerformanceProfileType> AntennaPerformanceProfileType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::antennaPerformanceProfileType : type};
  return (requestedType == uci::type::accessorType::antennaPerformanceProfileType) ? boost::make_unique<AntennaPerformanceProfileType>() : nullptr;
}

/**  */
namespace AntennaPerformanceProfileType_Names {

constexpr const char* Extern_Type_Name{"AntennaPerformanceProfileType"};
constexpr const char* DeltaInputPowerConsumption_Name{"DeltaInputPowerConsumption"};
constexpr const char* ElevationFieldOfRegard_Name{"ElevationFieldOfRegard"};
constexpr const char* AzimuthFieldOfRegard_Name{"AzimuthFieldOfRegard"};
constexpr const char* DutyFactorLimit_Name{"DutyFactorLimit"};
constexpr const char* BeamLimit_Name{"BeamLimit"};
constexpr const char* Band_Name{"Band"};

} // namespace AntennaPerformanceProfileType_Names

void AntennaPerformanceProfileType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AntennaPerformanceProfileType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AntennaPerformanceProfileType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AntennaPerformanceProfileType_Names::DeltaInputPowerConsumption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDeltaInputPowerConsumption(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AntennaPerformanceProfileType_Names::ElevationFieldOfRegard_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableElevationFieldOfRegard(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AntennaPerformanceProfileType_Names::AzimuthFieldOfRegard_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableAzimuthFieldOfRegard(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AntennaPerformanceProfileType_Names::DutyFactorLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDutyFactorLimit(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AntennaPerformanceProfileType_Names::BeamLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBeamLimit(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + AntennaPerformanceProfileType_Names::Band_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.getBand(), nodeName, nsPrefix);
    }
  }
}

std::string AntennaPerformanceProfileType::serialize(const uci::type::AntennaPerformanceProfileType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AntennaPerformanceProfileType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AntennaPerformanceProfileType_Names::Extern_Type_Name);
  }
  if (accessor.hasDeltaInputPowerConsumption()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDeltaInputPowerConsumption(), node, AntennaPerformanceProfileType_Names::DeltaInputPowerConsumption_Name);
  }
  AnglePairType::serialize(accessor.getElevationFieldOfRegard(), node, AntennaPerformanceProfileType_Names::ElevationFieldOfRegard_Name);
  AnglePairType::serialize(accessor.getAzimuthFieldOfRegard(), node, AntennaPerformanceProfileType_Names::AzimuthFieldOfRegard_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDutyFactorLimit(), node, AntennaPerformanceProfileType_Names::DutyFactorLimit_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getBeamLimit(), node, AntennaPerformanceProfileType_Names::BeamLimit_Name);
  FrequencyRangeType::serialize(accessor.getBand(), node, AntennaPerformanceProfileType_Names::Band_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AntennaPerformanceProfileType& AntennaPerformanceProfileType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AntennaPerformanceProfileType>().release());
}

uci::type::AntennaPerformanceProfileType& AntennaPerformanceProfileType::create(const uci::type::AntennaPerformanceProfileType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AntennaPerformanceProfileType> newAccessor{boost::make_unique<asb_uci::type::AntennaPerformanceProfileType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AntennaPerformanceProfileType::destroy(uci::type::AntennaPerformanceProfileType& accessor) {
  delete dynamic_cast<asb_uci::type::AntennaPerformanceProfileType*>(&accessor);
}

} // namespace type

} // namespace uci

