/** @file SpaceObjectVisualDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SpaceObjectVisualDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpaceObjectVisualDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisualMagnitudeType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SpaceObjectVisualDataType::SpaceObjectVisualDataType() = default;

SpaceObjectVisualDataType::~SpaceObjectVisualDataType() = default;

void SpaceObjectVisualDataType::copy(const uci::type::SpaceObjectVisualDataType& accessor) {
  copyImpl(accessor, false);
}

void SpaceObjectVisualDataType::copyImpl(const uci::type::SpaceObjectVisualDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SpaceObjectVisualDataType&>(accessor);
    if (accessorImpl.hasAbsoluteVisualMagnitude()) {
      setAbsoluteVisualMagnitude(accessorImpl.getAbsoluteVisualMagnitude());
    } else {
      clearAbsoluteVisualMagnitude();
    }
    if (accessorImpl.hasObservedVisualMagnitude()) {
      setObservedVisualMagnitude(accessorImpl.getObservedVisualMagnitude());
    } else {
      clearObservedVisualMagnitude();
    }
    if (accessorImpl.hasAssumedRangeToTarget()) {
      setAssumedRangeToTarget(accessorImpl.getAssumedRangeToTarget());
    } else {
      clearAssumedRangeToTarget();
    }
    if (accessorImpl.hasSignedSolarPhaseAngle()) {
      setSignedSolarPhaseAngle(accessorImpl.getSignedSolarPhaseAngle());
    } else {
      clearSignedSolarPhaseAngle();
    }
    if (accessorImpl.hasStarsFound()) {
      setStarsFound(accessorImpl.getStarsFound());
    } else {
      clearStarsFound();
    }
    if (accessorImpl.hasStarsUsed()) {
      setStarsUsed(accessorImpl.getStarsUsed());
    } else {
      clearStarsUsed();
    }
    if (accessorImpl.hasSkyBackground()) {
      setSkyBackground(accessorImpl.getSkyBackground());
    } else {
      clearSkyBackground();
    }
    if (accessorImpl.hasPrimaryExtinction()) {
      setPrimaryExtinction(accessorImpl.getPrimaryExtinction());
    } else {
      clearPrimaryExtinction();
    }
    if (accessorImpl.hasInstrumentZero()) {
      setInstrumentZero(accessorImpl.getInstrumentZero());
    } else {
      clearInstrumentZero();
    }
  }
}

void SpaceObjectVisualDataType::reset() noexcept {
  clearAbsoluteVisualMagnitude();
  clearObservedVisualMagnitude();
  clearAssumedRangeToTarget();
  clearSignedSolarPhaseAngle();
  clearStarsFound();
  clearStarsUsed();
  clearSkyBackground();
  clearPrimaryExtinction();
  clearInstrumentZero();
}

uci::type::VisualMagnitudeTypeValue SpaceObjectVisualDataType::getAbsoluteVisualMagnitude() const {
  if (absoluteVisualMagnitude_Accessor) {
    return *absoluteVisualMagnitude_Accessor;
  }
  throw uci::base::UCIException("Error in getAbsoluteVisualMagnitude(): An attempt was made to get an optional field that was not enabled, call hasAbsoluteVisualMagnitude() to determine if it is safe to call getAbsoluteVisualMagnitude()");
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::setAbsoluteVisualMagnitude(uci::type::VisualMagnitudeTypeValue value) {
  absoluteVisualMagnitude_Accessor = value;
  return *this;
}

bool SpaceObjectVisualDataType::hasAbsoluteVisualMagnitude() const noexcept {
  return absoluteVisualMagnitude_Accessor.has_value();
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::clearAbsoluteVisualMagnitude() noexcept {
  absoluteVisualMagnitude_Accessor.reset();
  return *this;
}

uci::type::VisualMagnitudeTypeValue SpaceObjectVisualDataType::getObservedVisualMagnitude() const {
  if (observedVisualMagnitude_Accessor) {
    return *observedVisualMagnitude_Accessor;
  }
  throw uci::base::UCIException("Error in getObservedVisualMagnitude(): An attempt was made to get an optional field that was not enabled, call hasObservedVisualMagnitude() to determine if it is safe to call getObservedVisualMagnitude()");
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::setObservedVisualMagnitude(uci::type::VisualMagnitudeTypeValue value) {
  observedVisualMagnitude_Accessor = value;
  return *this;
}

bool SpaceObjectVisualDataType::hasObservedVisualMagnitude() const noexcept {
  return observedVisualMagnitude_Accessor.has_value();
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::clearObservedVisualMagnitude() noexcept {
  observedVisualMagnitude_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue SpaceObjectVisualDataType::getAssumedRangeToTarget() const {
  if (assumedRangeToTarget_Accessor) {
    return *assumedRangeToTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getAssumedRangeToTarget(): An attempt was made to get an optional field that was not enabled, call hasAssumedRangeToTarget() to determine if it is safe to call getAssumedRangeToTarget()");
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::setAssumedRangeToTarget(uci::type::DistanceTypeValue value) {
  assumedRangeToTarget_Accessor = value;
  return *this;
}

bool SpaceObjectVisualDataType::hasAssumedRangeToTarget() const noexcept {
  return assumedRangeToTarget_Accessor.has_value();
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::clearAssumedRangeToTarget() noexcept {
  assumedRangeToTarget_Accessor.reset();
  return *this;
}

uci::type::AngleTypeValue SpaceObjectVisualDataType::getSignedSolarPhaseAngle() const {
  if (signedSolarPhaseAngle_Accessor) {
    return *signedSolarPhaseAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getSignedSolarPhaseAngle(): An attempt was made to get an optional field that was not enabled, call hasSignedSolarPhaseAngle() to determine if it is safe to call getSignedSolarPhaseAngle()");
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::setSignedSolarPhaseAngle(uci::type::AngleTypeValue value) {
  signedSolarPhaseAngle_Accessor = value;
  return *this;
}

bool SpaceObjectVisualDataType::hasSignedSolarPhaseAngle() const noexcept {
  return signedSolarPhaseAngle_Accessor.has_value();
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::clearSignedSolarPhaseAngle() noexcept {
  signedSolarPhaseAngle_Accessor.reset();
  return *this;
}

xs::UnsignedInt SpaceObjectVisualDataType::getStarsFound() const {
  if (starsFound_Accessor) {
    return *starsFound_Accessor;
  }
  throw uci::base::UCIException("Error in getStarsFound(): An attempt was made to get an optional field that was not enabled, call hasStarsFound() to determine if it is safe to call getStarsFound()");
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::setStarsFound(xs::UnsignedInt value) {
  starsFound_Accessor = value;
  return *this;
}

bool SpaceObjectVisualDataType::hasStarsFound() const noexcept {
  return starsFound_Accessor.has_value();
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::clearStarsFound() noexcept {
  starsFound_Accessor.reset();
  return *this;
}

xs::UnsignedInt SpaceObjectVisualDataType::getStarsUsed() const {
  if (starsUsed_Accessor) {
    return *starsUsed_Accessor;
  }
  throw uci::base::UCIException("Error in getStarsUsed(): An attempt was made to get an optional field that was not enabled, call hasStarsUsed() to determine if it is safe to call getStarsUsed()");
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::setStarsUsed(xs::UnsignedInt value) {
  starsUsed_Accessor = value;
  return *this;
}

bool SpaceObjectVisualDataType::hasStarsUsed() const noexcept {
  return starsUsed_Accessor.has_value();
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::clearStarsUsed() noexcept {
  starsUsed_Accessor.reset();
  return *this;
}

xs::Double SpaceObjectVisualDataType::getSkyBackground() const {
  if (skyBackground_Accessor) {
    return *skyBackground_Accessor;
  }
  throw uci::base::UCIException("Error in getSkyBackground(): An attempt was made to get an optional field that was not enabled, call hasSkyBackground() to determine if it is safe to call getSkyBackground()");
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::setSkyBackground(xs::Double value) {
  skyBackground_Accessor = value;
  return *this;
}

bool SpaceObjectVisualDataType::hasSkyBackground() const noexcept {
  return skyBackground_Accessor.has_value();
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::clearSkyBackground() noexcept {
  skyBackground_Accessor.reset();
  return *this;
}

xs::Double SpaceObjectVisualDataType::getPrimaryExtinction() const {
  if (primaryExtinction_Accessor) {
    return *primaryExtinction_Accessor;
  }
  throw uci::base::UCIException("Error in getPrimaryExtinction(): An attempt was made to get an optional field that was not enabled, call hasPrimaryExtinction() to determine if it is safe to call getPrimaryExtinction()");
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::setPrimaryExtinction(xs::Double value) {
  primaryExtinction_Accessor = value;
  return *this;
}

bool SpaceObjectVisualDataType::hasPrimaryExtinction() const noexcept {
  return primaryExtinction_Accessor.has_value();
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::clearPrimaryExtinction() noexcept {
  primaryExtinction_Accessor.reset();
  return *this;
}

xs::Double SpaceObjectVisualDataType::getInstrumentZero() const {
  if (instrumentZero_Accessor) {
    return *instrumentZero_Accessor;
  }
  throw uci::base::UCIException("Error in getInstrumentZero(): An attempt was made to get an optional field that was not enabled, call hasInstrumentZero() to determine if it is safe to call getInstrumentZero()");
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::setInstrumentZero(xs::Double value) {
  instrumentZero_Accessor = value;
  return *this;
}

bool SpaceObjectVisualDataType::hasInstrumentZero() const noexcept {
  return instrumentZero_Accessor.has_value();
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::clearInstrumentZero() noexcept {
  instrumentZero_Accessor.reset();
  return *this;
}

std::unique_ptr<SpaceObjectVisualDataType> SpaceObjectVisualDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::spaceObjectVisualDataType : type};
  return (requestedType == uci::type::accessorType::spaceObjectVisualDataType) ? boost::make_unique<SpaceObjectVisualDataType>() : nullptr;
}

/**  */
namespace SpaceObjectVisualDataType_Names {

constexpr const char* Extern_Type_Name{"SpaceObjectVisualDataType"};
constexpr const char* AbsoluteVisualMagnitude_Name{"AbsoluteVisualMagnitude"};
constexpr const char* ObservedVisualMagnitude_Name{"ObservedVisualMagnitude"};
constexpr const char* AssumedRangeToTarget_Name{"AssumedRangeToTarget"};
constexpr const char* SignedSolarPhaseAngle_Name{"SignedSolarPhaseAngle"};
constexpr const char* StarsFound_Name{"StarsFound"};
constexpr const char* StarsUsed_Name{"StarsUsed"};
constexpr const char* SkyBackground_Name{"SkyBackground"};
constexpr const char* PrimaryExtinction_Name{"PrimaryExtinction"};
constexpr const char* InstrumentZero_Name{"InstrumentZero"};

} // namespace SpaceObjectVisualDataType_Names

void SpaceObjectVisualDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SpaceObjectVisualDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SpaceObjectVisualDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SpaceObjectVisualDataType_Names::AbsoluteVisualMagnitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAbsoluteVisualMagnitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SpaceObjectVisualDataType_Names::ObservedVisualMagnitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setObservedVisualMagnitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SpaceObjectVisualDataType_Names::AssumedRangeToTarget_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAssumedRangeToTarget(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SpaceObjectVisualDataType_Names::SignedSolarPhaseAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSignedSolarPhaseAngle(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SpaceObjectVisualDataType_Names::StarsFound_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStarsFound(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SpaceObjectVisualDataType_Names::StarsUsed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStarsUsed(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SpaceObjectVisualDataType_Names::SkyBackground_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSkyBackground(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SpaceObjectVisualDataType_Names::PrimaryExtinction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPrimaryExtinction(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SpaceObjectVisualDataType_Names::InstrumentZero_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInstrumentZero(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string SpaceObjectVisualDataType::serialize(const uci::type::SpaceObjectVisualDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SpaceObjectVisualDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SpaceObjectVisualDataType_Names::Extern_Type_Name);
  }
  if (accessor.hasAbsoluteVisualMagnitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAbsoluteVisualMagnitude(), node, SpaceObjectVisualDataType_Names::AbsoluteVisualMagnitude_Name);
  }
  if (accessor.hasObservedVisualMagnitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getObservedVisualMagnitude(), node, SpaceObjectVisualDataType_Names::ObservedVisualMagnitude_Name);
  }
  if (accessor.hasAssumedRangeToTarget()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAssumedRangeToTarget(), node, SpaceObjectVisualDataType_Names::AssumedRangeToTarget_Name);
  }
  if (accessor.hasSignedSolarPhaseAngle()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSignedSolarPhaseAngle(), node, SpaceObjectVisualDataType_Names::SignedSolarPhaseAngle_Name);
  }
  if (accessor.hasStarsFound()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getStarsFound(), node, SpaceObjectVisualDataType_Names::StarsFound_Name);
  }
  if (accessor.hasStarsUsed()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getStarsUsed(), node, SpaceObjectVisualDataType_Names::StarsUsed_Name);
  }
  if (accessor.hasSkyBackground()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSkyBackground(), node, SpaceObjectVisualDataType_Names::SkyBackground_Name);
  }
  if (accessor.hasPrimaryExtinction()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPrimaryExtinction(), node, SpaceObjectVisualDataType_Names::PrimaryExtinction_Name);
  }
  if (accessor.hasInstrumentZero()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getInstrumentZero(), node, SpaceObjectVisualDataType_Names::InstrumentZero_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SpaceObjectVisualDataType>().release());
}

uci::type::SpaceObjectVisualDataType& SpaceObjectVisualDataType::create(const uci::type::SpaceObjectVisualDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SpaceObjectVisualDataType> newAccessor{boost::make_unique<asb_uci::type::SpaceObjectVisualDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SpaceObjectVisualDataType::destroy(uci::type::SpaceObjectVisualDataType& accessor) {
  delete dynamic_cast<asb_uci::type::SpaceObjectVisualDataType*>(&accessor);
}

} // namespace type

} // namespace uci

