/** @file EntityDimensionEstimateUncertaintyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EntityDimensionEstimateUncertaintyType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/SizeUncertaintyType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/EntityDimensionEstimateUncertaintyType.h"
#include "uci/type/SizeUncertaintyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityDimensionEstimateUncertaintyType::EntityDimensionEstimateUncertaintyType() = default;

EntityDimensionEstimateUncertaintyType::~EntityDimensionEstimateUncertaintyType() = default;

void EntityDimensionEstimateUncertaintyType::copy(const uci::type::EntityDimensionEstimateUncertaintyType& accessor) {
  copyImpl(accessor, false);
}

void EntityDimensionEstimateUncertaintyType::copyImpl(const uci::type::EntityDimensionEstimateUncertaintyType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityDimensionEstimateUncertaintyType&>(accessor);
    if (accessorImpl.hasEntityDimension_SA_SpreadUncertainty()) {
      setEntityDimension_SA_SpreadUncertainty(accessorImpl.getEntityDimension_SA_SpreadUncertainty());
    } else {
      clearEntityDimension_SA_SpreadUncertainty();
    }
    if (accessorImpl.entityDimensionUncertainty_Accessor) {
      setEntityDimensionUncertainty(*(accessorImpl.entityDimensionUncertainty_Accessor));
    } else {
      entityDimensionUncertainty_Accessor.reset();
    }
  }
}

void EntityDimensionEstimateUncertaintyType::reset() noexcept {
  clearEntityDimension_SA_SpreadUncertainty();
  entityDimensionUncertainty_Accessor.reset();
}

uci::type::DistanceTypeValue EntityDimensionEstimateUncertaintyType::getEntityDimension_SA_SpreadUncertainty() const {
  if (entityDimension_SA_SpreadUncertainty_Accessor) {
    return *entityDimension_SA_SpreadUncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityDimension_SA_SpreadUncertainty(): An attempt was made to get an optional field that was not enabled, call hasEntityDimension_SA_SpreadUncertainty() to determine if it is safe to call getEntityDimension_SA_SpreadUncertainty()");
}

uci::type::EntityDimensionEstimateUncertaintyType& EntityDimensionEstimateUncertaintyType::setEntityDimension_SA_SpreadUncertainty(uci::type::DistanceTypeValue value) {
  entityDimension_SA_SpreadUncertainty_Accessor = value;
  return *this;
}

bool EntityDimensionEstimateUncertaintyType::hasEntityDimension_SA_SpreadUncertainty() const noexcept {
  return entityDimension_SA_SpreadUncertainty_Accessor.has_value();
}

uci::type::EntityDimensionEstimateUncertaintyType& EntityDimensionEstimateUncertaintyType::clearEntityDimension_SA_SpreadUncertainty() noexcept {
  entityDimension_SA_SpreadUncertainty_Accessor.reset();
  return *this;
}

uci::type::SizeUncertaintyType& EntityDimensionEstimateUncertaintyType::getEntityDimensionUncertainty_() const {
  if (entityDimensionUncertainty_Accessor) {
    return *entityDimensionUncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityDimensionUncertainty(): An attempt was made to get an optional field that was not enabled, call hasEntityDimensionUncertainty() to determine if it is safe to call getEntityDimensionUncertainty()");
}

const uci::type::SizeUncertaintyType& EntityDimensionEstimateUncertaintyType::getEntityDimensionUncertainty() const {
  return getEntityDimensionUncertainty_();
}

uci::type::SizeUncertaintyType& EntityDimensionEstimateUncertaintyType::getEntityDimensionUncertainty() {
  return getEntityDimensionUncertainty_();
}

uci::type::EntityDimensionEstimateUncertaintyType& EntityDimensionEstimateUncertaintyType::setEntityDimensionUncertainty(const uci::type::SizeUncertaintyType& accessor) {
  enableEntityDimensionUncertainty();
  if (&accessor != entityDimensionUncertainty_Accessor.get()) {
    entityDimensionUncertainty_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityDimensionEstimateUncertaintyType::hasEntityDimensionUncertainty() const noexcept {
  return static_cast<bool>(entityDimensionUncertainty_Accessor);
}

uci::type::SizeUncertaintyType& EntityDimensionEstimateUncertaintyType::enableEntityDimensionUncertainty(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sizeUncertaintyType : type};
  if ((!entityDimensionUncertainty_Accessor) || (entityDimensionUncertainty_Accessor->getAccessorType() != requestedType)) {
    entityDimensionUncertainty_Accessor = SizeUncertaintyType::create(requestedType);
    if (!entityDimensionUncertainty_Accessor) {
      throw uci::base::UCIException("Error in enableEntityDimensionUncertainty(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityDimensionUncertainty_Accessor;
}

uci::type::EntityDimensionEstimateUncertaintyType& EntityDimensionEstimateUncertaintyType::clearEntityDimensionUncertainty() noexcept {
  entityDimensionUncertainty_Accessor.reset();
  return *this;
}

std::unique_ptr<EntityDimensionEstimateUncertaintyType> EntityDimensionEstimateUncertaintyType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityDimensionEstimateUncertaintyType : type};
  return (requestedType == uci::type::accessorType::entityDimensionEstimateUncertaintyType) ? boost::make_unique<EntityDimensionEstimateUncertaintyType>() : nullptr;
}

/**  */
namespace EntityDimensionEstimateUncertaintyType_Names {

constexpr const char* Extern_Type_Name{"EntityDimensionEstimateUncertaintyType"};
constexpr const char* EntityDimension_SA_SpreadUncertainty_Name{"EntityDimension_SA_SpreadUncertainty"};
constexpr const char* EntityDimensionUncertainty_Name{"EntityDimensionUncertainty"};

} // namespace EntityDimensionEstimateUncertaintyType_Names

void EntityDimensionEstimateUncertaintyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityDimensionEstimateUncertaintyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityDimensionEstimateUncertaintyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityDimensionEstimateUncertaintyType_Names::EntityDimension_SA_SpreadUncertainty_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEntityDimension_SA_SpreadUncertainty(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EntityDimensionEstimateUncertaintyType_Names::EntityDimensionUncertainty_Name) {
      SizeUncertaintyType::deserialize(valueType.second, accessor.enableEntityDimensionUncertainty(), nodeName, nsPrefix);
    }
  }
}

std::string EntityDimensionEstimateUncertaintyType::serialize(const uci::type::EntityDimensionEstimateUncertaintyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityDimensionEstimateUncertaintyType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityDimensionEstimateUncertaintyType_Names::Extern_Type_Name);
  }
  if (accessor.hasEntityDimension_SA_SpreadUncertainty()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEntityDimension_SA_SpreadUncertainty(), node, EntityDimensionEstimateUncertaintyType_Names::EntityDimension_SA_SpreadUncertainty_Name);
  }
  if (accessor.hasEntityDimensionUncertainty()) {
    SizeUncertaintyType::serialize(accessor.getEntityDimensionUncertainty(), node, EntityDimensionEstimateUncertaintyType_Names::EntityDimensionUncertainty_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityDimensionEstimateUncertaintyType& EntityDimensionEstimateUncertaintyType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityDimensionEstimateUncertaintyType>().release());
}

uci::type::EntityDimensionEstimateUncertaintyType& EntityDimensionEstimateUncertaintyType::create(const uci::type::EntityDimensionEstimateUncertaintyType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityDimensionEstimateUncertaintyType> newAccessor{boost::make_unique<asb_uci::type::EntityDimensionEstimateUncertaintyType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityDimensionEstimateUncertaintyType::destroy(uci::type::EntityDimensionEstimateUncertaintyType& accessor) {
  delete dynamic_cast<asb_uci::type::EntityDimensionEstimateUncertaintyType*>(&accessor);
}

} // namespace type

} // namespace uci

