/** @file SatellitePhysicalConfigurationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SatellitePhysicalConfigurationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OffsetLocationType.h"
#include "asb_uci/type/SatellitePhysicalConfigurationID_Type.h"
#include "asb_uci/type/SizeType.h"
#include "asb_uci/type/VisualMagnitudeWithDeviationType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/OffsetLocationType.h"
#include "uci/type/SatellitePhysicalConfigurationID_Type.h"
#include "uci/type/SatellitePhysicalConfigurationType.h"
#include "uci/type/SizeType.h"
#include "uci/type/UnitIntervalFloatType.h"
#include "uci/type/VisualMagnitudeWithDeviationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SatellitePhysicalConfigurationType::SatellitePhysicalConfigurationType()
  : satellitePhysicalConfigurationID_Accessor{boost::make_unique<SatellitePhysicalConfigurationID_Type>()} {
}

SatellitePhysicalConfigurationType::~SatellitePhysicalConfigurationType() = default;

void SatellitePhysicalConfigurationType::copy(const uci::type::SatellitePhysicalConfigurationType& accessor) {
  copyImpl(accessor, false);
}

void SatellitePhysicalConfigurationType::copyImpl(const uci::type::SatellitePhysicalConfigurationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SatellitePhysicalConfigurationType&>(accessor);
    setSatellitePhysicalConfigurationID(*(accessorImpl.satellitePhysicalConfigurationID_Accessor));
    if (accessorImpl.overallDimensions_Accessor) {
      setOverallDimensions(*(accessorImpl.overallDimensions_Accessor));
    } else {
      overallDimensions_Accessor.reset();
    }
    if (accessorImpl.busDimensions_Accessor) {
      setBusDimensions(*(accessorImpl.busDimensions_Accessor));
    } else {
      busDimensions_Accessor.reset();
    }
    if (accessorImpl.busCenterOffset_Accessor) {
      setBusCenterOffset(*(accessorImpl.busCenterOffset_Accessor));
    } else {
      busCenterOffset_Accessor.reset();
    }
    if (accessorImpl.hasNominalRCS()) {
      setNominalRCS(accessorImpl.getNominalRCS());
    } else {
      clearNominalRCS();
    }
    if (accessorImpl.visualMagnitudeWithDeviation_Accessor) {
      setVisualMagnitudeWithDeviation(*(accessorImpl.visualMagnitudeWithDeviation_Accessor));
    } else {
      visualMagnitudeWithDeviation_Accessor.reset();
    }
    if (accessorImpl.hasThermalEmissivity()) {
      setThermalEmissivity(accessorImpl.getThermalEmissivity());
    } else {
      clearThermalEmissivity();
    }
    if (accessorImpl.hasThermalAbsorptivity()) {
      setThermalAbsorptivity(accessorImpl.getThermalAbsorptivity());
    } else {
      clearThermalAbsorptivity();
    }
  }
}

void SatellitePhysicalConfigurationType::reset() noexcept {
  satellitePhysicalConfigurationID_Accessor->reset();
  overallDimensions_Accessor.reset();
  busDimensions_Accessor.reset();
  busCenterOffset_Accessor.reset();
  clearNominalRCS();
  visualMagnitudeWithDeviation_Accessor.reset();
  clearThermalEmissivity();
  clearThermalAbsorptivity();
}

const uci::type::SatellitePhysicalConfigurationID_Type& SatellitePhysicalConfigurationType::getSatellitePhysicalConfigurationID() const {
  return *satellitePhysicalConfigurationID_Accessor;
}

uci::type::SatellitePhysicalConfigurationID_Type& SatellitePhysicalConfigurationType::getSatellitePhysicalConfigurationID() {
  return *satellitePhysicalConfigurationID_Accessor;
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::setSatellitePhysicalConfigurationID(const uci::type::SatellitePhysicalConfigurationID_Type& accessor) {
  if (&accessor != satellitePhysicalConfigurationID_Accessor.get()) {
    satellitePhysicalConfigurationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SizeType& SatellitePhysicalConfigurationType::getOverallDimensions_() const {
  if (overallDimensions_Accessor) {
    return *overallDimensions_Accessor;
  }
  throw uci::base::UCIException("Error in getOverallDimensions(): An attempt was made to get an optional field that was not enabled, call hasOverallDimensions() to determine if it is safe to call getOverallDimensions()");
}

const uci::type::SizeType& SatellitePhysicalConfigurationType::getOverallDimensions() const {
  return getOverallDimensions_();
}

uci::type::SizeType& SatellitePhysicalConfigurationType::getOverallDimensions() {
  return getOverallDimensions_();
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::setOverallDimensions(const uci::type::SizeType& accessor) {
  enableOverallDimensions();
  if (&accessor != overallDimensions_Accessor.get()) {
    overallDimensions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SatellitePhysicalConfigurationType::hasOverallDimensions() const noexcept {
  return static_cast<bool>(overallDimensions_Accessor);
}

uci::type::SizeType& SatellitePhysicalConfigurationType::enableOverallDimensions(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sizeType : type};
  if ((!overallDimensions_Accessor) || (overallDimensions_Accessor->getAccessorType() != requestedType)) {
    overallDimensions_Accessor = SizeType::create(requestedType);
    if (!overallDimensions_Accessor) {
      throw uci::base::UCIException("Error in enableOverallDimensions(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *overallDimensions_Accessor;
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::clearOverallDimensions() noexcept {
  overallDimensions_Accessor.reset();
  return *this;
}

uci::type::SizeType& SatellitePhysicalConfigurationType::getBusDimensions_() const {
  if (busDimensions_Accessor) {
    return *busDimensions_Accessor;
  }
  throw uci::base::UCIException("Error in getBusDimensions(): An attempt was made to get an optional field that was not enabled, call hasBusDimensions() to determine if it is safe to call getBusDimensions()");
}

const uci::type::SizeType& SatellitePhysicalConfigurationType::getBusDimensions() const {
  return getBusDimensions_();
}

uci::type::SizeType& SatellitePhysicalConfigurationType::getBusDimensions() {
  return getBusDimensions_();
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::setBusDimensions(const uci::type::SizeType& accessor) {
  enableBusDimensions();
  if (&accessor != busDimensions_Accessor.get()) {
    busDimensions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SatellitePhysicalConfigurationType::hasBusDimensions() const noexcept {
  return static_cast<bool>(busDimensions_Accessor);
}

uci::type::SizeType& SatellitePhysicalConfigurationType::enableBusDimensions(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sizeType : type};
  if ((!busDimensions_Accessor) || (busDimensions_Accessor->getAccessorType() != requestedType)) {
    busDimensions_Accessor = SizeType::create(requestedType);
    if (!busDimensions_Accessor) {
      throw uci::base::UCIException("Error in enableBusDimensions(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *busDimensions_Accessor;
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::clearBusDimensions() noexcept {
  busDimensions_Accessor.reset();
  return *this;
}

uci::type::OffsetLocationType& SatellitePhysicalConfigurationType::getBusCenterOffset_() const {
  if (busCenterOffset_Accessor) {
    return *busCenterOffset_Accessor;
  }
  throw uci::base::UCIException("Error in getBusCenterOffset(): An attempt was made to get an optional field that was not enabled, call hasBusCenterOffset() to determine if it is safe to call getBusCenterOffset()");
}

const uci::type::OffsetLocationType& SatellitePhysicalConfigurationType::getBusCenterOffset() const {
  return getBusCenterOffset_();
}

uci::type::OffsetLocationType& SatellitePhysicalConfigurationType::getBusCenterOffset() {
  return getBusCenterOffset_();
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::setBusCenterOffset(const uci::type::OffsetLocationType& accessor) {
  enableBusCenterOffset(accessor.getAccessorType());
  if (&accessor != busCenterOffset_Accessor.get()) {
    busCenterOffset_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SatellitePhysicalConfigurationType::hasBusCenterOffset() const noexcept {
  return static_cast<bool>(busCenterOffset_Accessor);
}

uci::type::OffsetLocationType& SatellitePhysicalConfigurationType::enableBusCenterOffset(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::offsetLocationType : type};
  if ((!busCenterOffset_Accessor) || (busCenterOffset_Accessor->getAccessorType() != requestedType)) {
    busCenterOffset_Accessor = OffsetLocationType::create(requestedType);
    if (!busCenterOffset_Accessor) {
      throw uci::base::UCIException("Error in enableBusCenterOffset(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *busCenterOffset_Accessor;
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::clearBusCenterOffset() noexcept {
  busCenterOffset_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue SatellitePhysicalConfigurationType::getNominalRCS() const {
  if (nominalRCS_Accessor) {
    return *nominalRCS_Accessor;
  }
  throw uci::base::UCIException("Error in getNominalRCS(): An attempt was made to get an optional field that was not enabled, call hasNominalRCS() to determine if it is safe to call getNominalRCS()");
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::setNominalRCS(uci::type::DecibelTypeValue value) {
  nominalRCS_Accessor = value;
  return *this;
}

bool SatellitePhysicalConfigurationType::hasNominalRCS() const noexcept {
  return nominalRCS_Accessor.has_value();
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::clearNominalRCS() noexcept {
  nominalRCS_Accessor.reset();
  return *this;
}

uci::type::VisualMagnitudeWithDeviationType& SatellitePhysicalConfigurationType::getVisualMagnitudeWithDeviation_() const {
  if (visualMagnitudeWithDeviation_Accessor) {
    return *visualMagnitudeWithDeviation_Accessor;
  }
  throw uci::base::UCIException("Error in getVisualMagnitudeWithDeviation(): An attempt was made to get an optional field that was not enabled, call hasVisualMagnitudeWithDeviation() to determine if it is safe to call getVisualMagnitudeWithDeviation()");
}

const uci::type::VisualMagnitudeWithDeviationType& SatellitePhysicalConfigurationType::getVisualMagnitudeWithDeviation() const {
  return getVisualMagnitudeWithDeviation_();
}

uci::type::VisualMagnitudeWithDeviationType& SatellitePhysicalConfigurationType::getVisualMagnitudeWithDeviation() {
  return getVisualMagnitudeWithDeviation_();
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::setVisualMagnitudeWithDeviation(const uci::type::VisualMagnitudeWithDeviationType& accessor) {
  enableVisualMagnitudeWithDeviation();
  if (&accessor != visualMagnitudeWithDeviation_Accessor.get()) {
    visualMagnitudeWithDeviation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SatellitePhysicalConfigurationType::hasVisualMagnitudeWithDeviation() const noexcept {
  return static_cast<bool>(visualMagnitudeWithDeviation_Accessor);
}

uci::type::VisualMagnitudeWithDeviationType& SatellitePhysicalConfigurationType::enableVisualMagnitudeWithDeviation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::visualMagnitudeWithDeviationType : type};
  if ((!visualMagnitudeWithDeviation_Accessor) || (visualMagnitudeWithDeviation_Accessor->getAccessorType() != requestedType)) {
    visualMagnitudeWithDeviation_Accessor = VisualMagnitudeWithDeviationType::create(requestedType);
    if (!visualMagnitudeWithDeviation_Accessor) {
      throw uci::base::UCIException("Error in enableVisualMagnitudeWithDeviation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *visualMagnitudeWithDeviation_Accessor;
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::clearVisualMagnitudeWithDeviation() noexcept {
  visualMagnitudeWithDeviation_Accessor.reset();
  return *this;
}

uci::type::UnitIntervalFloatTypeValue SatellitePhysicalConfigurationType::getThermalEmissivity() const {
  if (thermalEmissivity_Accessor) {
    return *thermalEmissivity_Accessor;
  }
  throw uci::base::UCIException("Error in getThermalEmissivity(): An attempt was made to get an optional field that was not enabled, call hasThermalEmissivity() to determine if it is safe to call getThermalEmissivity()");
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::setThermalEmissivity(uci::type::UnitIntervalFloatTypeValue value) {
  thermalEmissivity_Accessor = value;
  return *this;
}

bool SatellitePhysicalConfigurationType::hasThermalEmissivity() const noexcept {
  return thermalEmissivity_Accessor.has_value();
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::clearThermalEmissivity() noexcept {
  thermalEmissivity_Accessor.reset();
  return *this;
}

uci::type::UnitIntervalFloatTypeValue SatellitePhysicalConfigurationType::getThermalAbsorptivity() const {
  if (thermalAbsorptivity_Accessor) {
    return *thermalAbsorptivity_Accessor;
  }
  throw uci::base::UCIException("Error in getThermalAbsorptivity(): An attempt was made to get an optional field that was not enabled, call hasThermalAbsorptivity() to determine if it is safe to call getThermalAbsorptivity()");
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::setThermalAbsorptivity(uci::type::UnitIntervalFloatTypeValue value) {
  thermalAbsorptivity_Accessor = value;
  return *this;
}

bool SatellitePhysicalConfigurationType::hasThermalAbsorptivity() const noexcept {
  return thermalAbsorptivity_Accessor.has_value();
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::clearThermalAbsorptivity() noexcept {
  thermalAbsorptivity_Accessor.reset();
  return *this;
}

std::unique_ptr<SatellitePhysicalConfigurationType> SatellitePhysicalConfigurationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satellitePhysicalConfigurationType : type};
  return (requestedType == uci::type::accessorType::satellitePhysicalConfigurationType) ? boost::make_unique<SatellitePhysicalConfigurationType>() : nullptr;
}

/**  */
namespace SatellitePhysicalConfigurationType_Names {

constexpr const char* Extern_Type_Name{"SatellitePhysicalConfigurationType"};
constexpr const char* SatellitePhysicalConfigurationID_Name{"SatellitePhysicalConfigurationID"};
constexpr const char* OverallDimensions_Name{"OverallDimensions"};
constexpr const char* BusDimensions_Name{"BusDimensions"};
constexpr const char* BusCenterOffset_Name{"BusCenterOffset"};
constexpr const char* NominalRCS_Name{"NominalRCS"};
constexpr const char* VisualMagnitudeWithDeviation_Name{"VisualMagnitudeWithDeviation"};
constexpr const char* ThermalEmissivity_Name{"ThermalEmissivity"};
constexpr const char* ThermalAbsorptivity_Name{"ThermalAbsorptivity"};

} // namespace SatellitePhysicalConfigurationType_Names

void SatellitePhysicalConfigurationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SatellitePhysicalConfigurationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SatellitePhysicalConfigurationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SatellitePhysicalConfigurationType_Names::SatellitePhysicalConfigurationID_Name) {
      SatellitePhysicalConfigurationID_Type::deserialize(valueType.second, accessor.getSatellitePhysicalConfigurationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SatellitePhysicalConfigurationType_Names::OverallDimensions_Name) {
      SizeType::deserialize(valueType.second, accessor.enableOverallDimensions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SatellitePhysicalConfigurationType_Names::BusDimensions_Name) {
      SizeType::deserialize(valueType.second, accessor.enableBusDimensions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SatellitePhysicalConfigurationType_Names::BusCenterOffset_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableBusCenterOffset(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SatellitePhysicalConfigurationType_Names::NominalRCS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNominalRCS(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SatellitePhysicalConfigurationType_Names::VisualMagnitudeWithDeviation_Name) {
      VisualMagnitudeWithDeviationType::deserialize(valueType.second, accessor.enableVisualMagnitudeWithDeviation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SatellitePhysicalConfigurationType_Names::ThermalEmissivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setThermalEmissivity(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + SatellitePhysicalConfigurationType_Names::ThermalAbsorptivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setThermalAbsorptivity(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    }
  }
}

std::string SatellitePhysicalConfigurationType::serialize(const uci::type::SatellitePhysicalConfigurationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SatellitePhysicalConfigurationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SatellitePhysicalConfigurationType_Names::Extern_Type_Name);
  }
  SatellitePhysicalConfigurationID_Type::serialize(accessor.getSatellitePhysicalConfigurationID(), node, SatellitePhysicalConfigurationType_Names::SatellitePhysicalConfigurationID_Name);
  if (accessor.hasOverallDimensions()) {
    SizeType::serialize(accessor.getOverallDimensions(), node, SatellitePhysicalConfigurationType_Names::OverallDimensions_Name);
  }
  if (accessor.hasBusDimensions()) {
    SizeType::serialize(accessor.getBusDimensions(), node, SatellitePhysicalConfigurationType_Names::BusDimensions_Name);
  }
  if (accessor.hasBusCenterOffset()) {
    OffsetLocationType::serialize(accessor.getBusCenterOffset(), node, SatellitePhysicalConfigurationType_Names::BusCenterOffset_Name);
  }
  if (accessor.hasNominalRCS()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getNominalRCS(), node, SatellitePhysicalConfigurationType_Names::NominalRCS_Name);
  }
  if (accessor.hasVisualMagnitudeWithDeviation()) {
    VisualMagnitudeWithDeviationType::serialize(accessor.getVisualMagnitudeWithDeviation(), node, SatellitePhysicalConfigurationType_Names::VisualMagnitudeWithDeviation_Name);
  }
  if (accessor.hasThermalEmissivity()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getThermalEmissivity(), node, SatellitePhysicalConfigurationType_Names::ThermalEmissivity_Name);
  }
  if (accessor.hasThermalAbsorptivity()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getThermalAbsorptivity(), node, SatellitePhysicalConfigurationType_Names::ThermalAbsorptivity_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SatellitePhysicalConfigurationType>().release());
}

uci::type::SatellitePhysicalConfigurationType& SatellitePhysicalConfigurationType::create(const uci::type::SatellitePhysicalConfigurationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SatellitePhysicalConfigurationType> newAccessor{boost::make_unique<asb_uci::type::SatellitePhysicalConfigurationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SatellitePhysicalConfigurationType::destroy(uci::type::SatellitePhysicalConfigurationType& accessor) {
  delete dynamic_cast<asb_uci::type::SatellitePhysicalConfigurationType*>(&accessor);
}

} // namespace type

} // namespace uci

