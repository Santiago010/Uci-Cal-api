/** @file ResourceSelectionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ResourceSelectionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/RF_TypeEnum.h"
#include "../../../include/asb_uci/type/SelectAntennaType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_TypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceSelectionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SelectAntennaType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResourceSelectionType::ResourceSelectionType() = default;

ResourceSelectionType::~ResourceSelectionType() = default;

void ResourceSelectionType::copy(const uci::type::ResourceSelectionType& accessor) {
  copyImpl(accessor, false);
}

void ResourceSelectionType::copyImpl(const uci::type::ResourceSelectionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResourceSelectionType&>(accessor);
    if (accessorImpl.rF_Mode_Accessor) {
      setRF_Mode(*(accessorImpl.rF_Mode_Accessor));
    } else {
      rF_Mode_Accessor.reset();
    }
    if (accessorImpl.selectAntenna_Accessor) {
      setSelectAntenna(*(accessorImpl.selectAntenna_Accessor));
    } else {
      selectAntenna_Accessor.reset();
    }
  }
}

void ResourceSelectionType::reset() noexcept {
  rF_Mode_Accessor.reset();
  selectAntenna_Accessor.reset();
}

uci::type::RF_TypeEnum& ResourceSelectionType::getRF_Mode_() const {
  if (rF_Mode_Accessor) {
    return *rF_Mode_Accessor;
  }
  throw uci::base::UCIException("Error in getRF_Mode(): An attempt was made to get an optional field that was not enabled, call hasRF_Mode() to determine if it is safe to call getRF_Mode()");
}

const uci::type::RF_TypeEnum& ResourceSelectionType::getRF_Mode() const {
  return getRF_Mode_();
}

uci::type::RF_TypeEnum& ResourceSelectionType::getRF_Mode() {
  return getRF_Mode_();
}

uci::type::ResourceSelectionType& ResourceSelectionType::setRF_Mode(const uci::type::RF_TypeEnum& accessor) {
  enableRF_Mode();
  if (&accessor != rF_Mode_Accessor.get()) {
    rF_Mode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ResourceSelectionType& ResourceSelectionType::setRF_Mode(const uci::type::RF_TypeEnum::EnumerationItem value) {
  enableRF_Mode().setValue(value);
  return *this;
}

bool ResourceSelectionType::hasRF_Mode() const noexcept {
  return static_cast<bool>(rF_Mode_Accessor);
}

uci::type::RF_TypeEnum& ResourceSelectionType::enableRF_Mode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_TypeEnum : type};
  if ((!rF_Mode_Accessor) || (rF_Mode_Accessor->getAccessorType() != requestedType)) {
    rF_Mode_Accessor = RF_TypeEnum::create(requestedType);
    if (!rF_Mode_Accessor) {
      throw uci::base::UCIException("Error in enableRF_Mode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rF_Mode_Accessor;
}

uci::type::ResourceSelectionType& ResourceSelectionType::clearRF_Mode() noexcept {
  rF_Mode_Accessor.reset();
  return *this;
}

uci::type::SelectAntennaType& ResourceSelectionType::getSelectAntenna_() const {
  if (selectAntenna_Accessor) {
    return *selectAntenna_Accessor;
  }
  throw uci::base::UCIException("Error in getSelectAntenna(): An attempt was made to get an optional field that was not enabled, call hasSelectAntenna() to determine if it is safe to call getSelectAntenna()");
}

const uci::type::SelectAntennaType& ResourceSelectionType::getSelectAntenna() const {
  return getSelectAntenna_();
}

uci::type::SelectAntennaType& ResourceSelectionType::getSelectAntenna() {
  return getSelectAntenna_();
}

uci::type::ResourceSelectionType& ResourceSelectionType::setSelectAntenna(const uci::type::SelectAntennaType& accessor) {
  enableSelectAntenna();
  if (&accessor != selectAntenna_Accessor.get()) {
    selectAntenna_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResourceSelectionType::hasSelectAntenna() const noexcept {
  return static_cast<bool>(selectAntenna_Accessor);
}

uci::type::SelectAntennaType& ResourceSelectionType::enableSelectAntenna(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::selectAntennaType : type};
  if ((!selectAntenna_Accessor) || (selectAntenna_Accessor->getAccessorType() != requestedType)) {
    selectAntenna_Accessor = SelectAntennaType::create(requestedType);
    if (!selectAntenna_Accessor) {
      throw uci::base::UCIException("Error in enableSelectAntenna(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *selectAntenna_Accessor;
}

uci::type::ResourceSelectionType& ResourceSelectionType::clearSelectAntenna() noexcept {
  selectAntenna_Accessor.reset();
  return *this;
}

std::unique_ptr<ResourceSelectionType> ResourceSelectionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceSelectionType : type};
  return (requestedType == uci::type::accessorType::resourceSelectionType) ? boost::make_unique<ResourceSelectionType>() : nullptr;
}

/**  */
namespace ResourceSelectionType_Names {

constexpr const char* Extern_Type_Name{"ResourceSelectionType"};
constexpr const char* RF_Mode_Name{"RF_Mode"};
constexpr const char* SelectAntenna_Name{"SelectAntenna"};

} // namespace ResourceSelectionType_Names

void ResourceSelectionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResourceSelectionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResourceSelectionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResourceSelectionType_Names::RF_Mode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRF_Mode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ResourceSelectionType_Names::SelectAntenna_Name) {
      SelectAntennaType::deserialize(valueType.second, accessor.enableSelectAntenna(), nodeName, nsPrefix);
    }
  }
}

std::string ResourceSelectionType::serialize(const uci::type::ResourceSelectionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResourceSelectionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResourceSelectionType_Names::Extern_Type_Name);
  }
  if (accessor.hasRF_Mode()) {
    RF_TypeEnum::serialize(accessor.getRF_Mode(), node, ResourceSelectionType_Names::RF_Mode_Name, false);
  }
  if (accessor.hasSelectAntenna()) {
    SelectAntennaType::serialize(accessor.getSelectAntenna(), node, ResourceSelectionType_Names::SelectAntenna_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResourceSelectionType& ResourceSelectionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResourceSelectionType>().release());
}

uci::type::ResourceSelectionType& ResourceSelectionType::create(const uci::type::ResourceSelectionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResourceSelectionType> newAccessor{boost::make_unique<asb_uci::type::ResourceSelectionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResourceSelectionType::destroy(uci::type::ResourceSelectionType& accessor) {
  delete dynamic_cast<asb_uci::type::ResourceSelectionType*>(&accessor);
}

} // namespace type

} // namespace uci

