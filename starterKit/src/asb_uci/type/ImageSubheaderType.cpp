/** @file ImageSubheaderType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ImageSubheaderType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString11OnlyType.h"
#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString17OnlyType.h"
#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString21OnlyType.h"
#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString3OnlyType.h"
#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString9OnlyType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString11OnlyType.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString17OnlyType.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString21OnlyType.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString3OnlyType.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString9OnlyType.h"
#include "uci/type/ImageSubheaderType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ImageSubheaderType::ImageSubheaderType() = default;

ImageSubheaderType::~ImageSubheaderType() = default;

void ImageSubheaderType::copy(const uci::type::ImageSubheaderType& accessor) {
  copyImpl(accessor, false);
}

void ImageSubheaderType::copyImpl(const uci::type::ImageSubheaderType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ImageSubheaderType&>(accessor);
    if (accessorImpl.imageSource_Accessor) {
      setImageSource(*(accessorImpl.imageSource_Accessor));
    } else {
      imageSource_Accessor.reset();
    }
    if (accessorImpl.primaryTargetIdentifier_Accessor) {
      setPrimaryTargetIdentifier(*(accessorImpl.primaryTargetIdentifier_Accessor));
    } else {
      primaryTargetIdentifier_Accessor.reset();
    }
    if (accessorImpl.imageIdentifier1_Accessor) {
      setImageIdentifier1(*(accessorImpl.imageIdentifier1_Accessor));
    } else {
      imageIdentifier1_Accessor.reset();
    }
    if (accessorImpl.imageIdentifier2_Accessor) {
      setImageIdentifier2(*(accessorImpl.imageIdentifier2_Accessor));
    } else {
      imageIdentifier2_Accessor.reset();
    }
    if (accessorImpl.iCOM_N_Accessor) {
      setICOM_N(*(accessorImpl.iCOM_N_Accessor));
    } else {
      iCOM_N_Accessor.reset();
    }
  }
}

void ImageSubheaderType::reset() noexcept {
  imageSource_Accessor.reset();
  primaryTargetIdentifier_Accessor.reset();
  imageIdentifier1_Accessor.reset();
  imageIdentifier2_Accessor.reset();
  iCOM_N_Accessor.reset();
}

uci::type::AlphanumericDashSpaceUnderscoreString17OnlyType& ImageSubheaderType::getImageSource_() const {
  if (imageSource_Accessor) {
    return *imageSource_Accessor;
  }
  throw uci::base::UCIException("Error in getImageSource(): An attempt was made to get an optional field that was not enabled, call hasImageSource() to determine if it is safe to call getImageSource()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString17OnlyType& ImageSubheaderType::getImageSource() const {
  return getImageSource_();
}

uci::type::AlphanumericDashSpaceUnderscoreString17OnlyType& ImageSubheaderType::getImageSource() {
  return getImageSource_();
}

uci::type::ImageSubheaderType& ImageSubheaderType::setImageSource(const uci::type::AlphanumericDashSpaceUnderscoreString17OnlyType& value) {
  return setImageSource(value.c_str());
}

uci::type::ImageSubheaderType& ImageSubheaderType::setImageSource(const std::string& value) {
  return setImageSource(value.c_str());
}

uci::type::ImageSubheaderType& ImageSubheaderType::setImageSource(const char* value) {
  enableImageSource().setStringValue(value);
  return *this;
}

bool ImageSubheaderType::hasImageSource() const noexcept {
  return static_cast<bool>(imageSource_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString17OnlyType& ImageSubheaderType::enableImageSource(uci::base::accessorType::AccessorType type) {
  if (!imageSource_Accessor) {
    imageSource_Accessor = AlphanumericDashSpaceUnderscoreString17OnlyType::create(type);
  }
  return *imageSource_Accessor;
}

uci::type::ImageSubheaderType& ImageSubheaderType::clearImageSource() noexcept {
  imageSource_Accessor.reset();
  return *this;
}

uci::type::AlphanumericDashSpaceUnderscoreString3OnlyType& ImageSubheaderType::getPrimaryTargetIdentifier_() const {
  if (primaryTargetIdentifier_Accessor) {
    return *primaryTargetIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getPrimaryTargetIdentifier(): An attempt was made to get an optional field that was not enabled, call hasPrimaryTargetIdentifier() to determine if it is safe to call getPrimaryTargetIdentifier()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString3OnlyType& ImageSubheaderType::getPrimaryTargetIdentifier() const {
  return getPrimaryTargetIdentifier_();
}

uci::type::AlphanumericDashSpaceUnderscoreString3OnlyType& ImageSubheaderType::getPrimaryTargetIdentifier() {
  return getPrimaryTargetIdentifier_();
}

uci::type::ImageSubheaderType& ImageSubheaderType::setPrimaryTargetIdentifier(const uci::type::AlphanumericDashSpaceUnderscoreString3OnlyType& value) {
  return setPrimaryTargetIdentifier(value.c_str());
}

uci::type::ImageSubheaderType& ImageSubheaderType::setPrimaryTargetIdentifier(const std::string& value) {
  return setPrimaryTargetIdentifier(value.c_str());
}

uci::type::ImageSubheaderType& ImageSubheaderType::setPrimaryTargetIdentifier(const char* value) {
  enablePrimaryTargetIdentifier().setStringValue(value);
  return *this;
}

bool ImageSubheaderType::hasPrimaryTargetIdentifier() const noexcept {
  return static_cast<bool>(primaryTargetIdentifier_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString3OnlyType& ImageSubheaderType::enablePrimaryTargetIdentifier(uci::base::accessorType::AccessorType type) {
  if (!primaryTargetIdentifier_Accessor) {
    primaryTargetIdentifier_Accessor = AlphanumericDashSpaceUnderscoreString3OnlyType::create(type);
  }
  return *primaryTargetIdentifier_Accessor;
}

uci::type::ImageSubheaderType& ImageSubheaderType::clearPrimaryTargetIdentifier() noexcept {
  primaryTargetIdentifier_Accessor.reset();
  return *this;
}

uci::type::AlphanumericDashSpaceUnderscoreString11OnlyType& ImageSubheaderType::getImageIdentifier1_() const {
  if (imageIdentifier1_Accessor) {
    return *imageIdentifier1_Accessor;
  }
  throw uci::base::UCIException("Error in getImageIdentifier1(): An attempt was made to get an optional field that was not enabled, call hasImageIdentifier1() to determine if it is safe to call getImageIdentifier1()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString11OnlyType& ImageSubheaderType::getImageIdentifier1() const {
  return getImageIdentifier1_();
}

uci::type::AlphanumericDashSpaceUnderscoreString11OnlyType& ImageSubheaderType::getImageIdentifier1() {
  return getImageIdentifier1_();
}

uci::type::ImageSubheaderType& ImageSubheaderType::setImageIdentifier1(const uci::type::AlphanumericDashSpaceUnderscoreString11OnlyType& value) {
  return setImageIdentifier1(value.c_str());
}

uci::type::ImageSubheaderType& ImageSubheaderType::setImageIdentifier1(const std::string& value) {
  return setImageIdentifier1(value.c_str());
}

uci::type::ImageSubheaderType& ImageSubheaderType::setImageIdentifier1(const char* value) {
  enableImageIdentifier1().setStringValue(value);
  return *this;
}

bool ImageSubheaderType::hasImageIdentifier1() const noexcept {
  return static_cast<bool>(imageIdentifier1_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString11OnlyType& ImageSubheaderType::enableImageIdentifier1(uci::base::accessorType::AccessorType type) {
  if (!imageIdentifier1_Accessor) {
    imageIdentifier1_Accessor = AlphanumericDashSpaceUnderscoreString11OnlyType::create(type);
  }
  return *imageIdentifier1_Accessor;
}

uci::type::ImageSubheaderType& ImageSubheaderType::clearImageIdentifier1() noexcept {
  imageIdentifier1_Accessor.reset();
  return *this;
}

uci::type::AlphanumericDashSpaceUnderscoreString9OnlyType& ImageSubheaderType::getImageIdentifier2_() const {
  if (imageIdentifier2_Accessor) {
    return *imageIdentifier2_Accessor;
  }
  throw uci::base::UCIException("Error in getImageIdentifier2(): An attempt was made to get an optional field that was not enabled, call hasImageIdentifier2() to determine if it is safe to call getImageIdentifier2()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString9OnlyType& ImageSubheaderType::getImageIdentifier2() const {
  return getImageIdentifier2_();
}

uci::type::AlphanumericDashSpaceUnderscoreString9OnlyType& ImageSubheaderType::getImageIdentifier2() {
  return getImageIdentifier2_();
}

uci::type::ImageSubheaderType& ImageSubheaderType::setImageIdentifier2(const uci::type::AlphanumericDashSpaceUnderscoreString9OnlyType& value) {
  return setImageIdentifier2(value.c_str());
}

uci::type::ImageSubheaderType& ImageSubheaderType::setImageIdentifier2(const std::string& value) {
  return setImageIdentifier2(value.c_str());
}

uci::type::ImageSubheaderType& ImageSubheaderType::setImageIdentifier2(const char* value) {
  enableImageIdentifier2().setStringValue(value);
  return *this;
}

bool ImageSubheaderType::hasImageIdentifier2() const noexcept {
  return static_cast<bool>(imageIdentifier2_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString9OnlyType& ImageSubheaderType::enableImageIdentifier2(uci::base::accessorType::AccessorType type) {
  if (!imageIdentifier2_Accessor) {
    imageIdentifier2_Accessor = AlphanumericDashSpaceUnderscoreString9OnlyType::create(type);
  }
  return *imageIdentifier2_Accessor;
}

uci::type::ImageSubheaderType& ImageSubheaderType::clearImageIdentifier2() noexcept {
  imageIdentifier2_Accessor.reset();
  return *this;
}

uci::type::AlphanumericDashSpaceUnderscoreString21OnlyType& ImageSubheaderType::getICOM_N_() const {
  if (iCOM_N_Accessor) {
    return *iCOM_N_Accessor;
  }
  throw uci::base::UCIException("Error in getICOM_N(): An attempt was made to get an optional field that was not enabled, call hasICOM_N() to determine if it is safe to call getICOM_N()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString21OnlyType& ImageSubheaderType::getICOM_N() const {
  return getICOM_N_();
}

uci::type::AlphanumericDashSpaceUnderscoreString21OnlyType& ImageSubheaderType::getICOM_N() {
  return getICOM_N_();
}

uci::type::ImageSubheaderType& ImageSubheaderType::setICOM_N(const uci::type::AlphanumericDashSpaceUnderscoreString21OnlyType& value) {
  return setICOM_N(value.c_str());
}

uci::type::ImageSubheaderType& ImageSubheaderType::setICOM_N(const std::string& value) {
  return setICOM_N(value.c_str());
}

uci::type::ImageSubheaderType& ImageSubheaderType::setICOM_N(const char* value) {
  enableICOM_N().setStringValue(value);
  return *this;
}

bool ImageSubheaderType::hasICOM_N() const noexcept {
  return static_cast<bool>(iCOM_N_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString21OnlyType& ImageSubheaderType::enableICOM_N(uci::base::accessorType::AccessorType type) {
  if (!iCOM_N_Accessor) {
    iCOM_N_Accessor = AlphanumericDashSpaceUnderscoreString21OnlyType::create(type);
  }
  return *iCOM_N_Accessor;
}

uci::type::ImageSubheaderType& ImageSubheaderType::clearICOM_N() noexcept {
  iCOM_N_Accessor.reset();
  return *this;
}

std::unique_ptr<ImageSubheaderType> ImageSubheaderType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::imageSubheaderType : type};
  return (requestedType == uci::type::accessorType::imageSubheaderType) ? boost::make_unique<ImageSubheaderType>() : nullptr;
}

/**  */
namespace ImageSubheaderType_Names {

constexpr const char* Extern_Type_Name{"ImageSubheaderType"};
constexpr const char* ImageSource_Name{"ImageSource"};
constexpr const char* PrimaryTargetIdentifier_Name{"PrimaryTargetIdentifier"};
constexpr const char* ImageIdentifier1_Name{"ImageIdentifier1"};
constexpr const char* ImageIdentifier2_Name{"ImageIdentifier2"};
constexpr const char* ICOM_N_Name{"ICOM_N"};

} // namespace ImageSubheaderType_Names

void ImageSubheaderType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ImageSubheaderType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ImageSubheaderType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ImageSubheaderType_Names::ImageSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setImageSource(*value);
      }
    } else if (valueType.first == nsPrefix + ImageSubheaderType_Names::PrimaryTargetIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPrimaryTargetIdentifier(*value);
      }
    } else if (valueType.first == nsPrefix + ImageSubheaderType_Names::ImageIdentifier1_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setImageIdentifier1(*value);
      }
    } else if (valueType.first == nsPrefix + ImageSubheaderType_Names::ImageIdentifier2_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setImageIdentifier2(*value);
      }
    } else if (valueType.first == nsPrefix + ImageSubheaderType_Names::ICOM_N_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setICOM_N(*value);
      }
    }
  }
}

std::string ImageSubheaderType::serialize(const uci::type::ImageSubheaderType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ImageSubheaderType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ImageSubheaderType_Names::Extern_Type_Name);
  }
  if (accessor.hasImageSource()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getImageSource(), node, ImageSubheaderType_Names::ImageSource_Name);
  }
  if (accessor.hasPrimaryTargetIdentifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getPrimaryTargetIdentifier(), node, ImageSubheaderType_Names::PrimaryTargetIdentifier_Name);
  }
  if (accessor.hasImageIdentifier1()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getImageIdentifier1(), node, ImageSubheaderType_Names::ImageIdentifier1_Name);
  }
  if (accessor.hasImageIdentifier2()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getImageIdentifier2(), node, ImageSubheaderType_Names::ImageIdentifier2_Name);
  }
  if (accessor.hasICOM_N()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getICOM_N(), node, ImageSubheaderType_Names::ICOM_N_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ImageSubheaderType& ImageSubheaderType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ImageSubheaderType>().release());
}

uci::type::ImageSubheaderType& ImageSubheaderType::create(const uci::type::ImageSubheaderType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ImageSubheaderType> newAccessor{boost::make_unique<asb_uci::type::ImageSubheaderType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ImageSubheaderType::destroy(uci::type::ImageSubheaderType& accessor) {
  delete dynamic_cast<asb_uci::type::ImageSubheaderType*>(&accessor);
}

} // namespace type

} // namespace uci

