/** @file MFP_AddressType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MFP_AddressType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/DigitalPayloadProcessingType.h"
#include "../../../include/asb_uci/type/SubsystemID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DigitalPayloadProcessingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MFP_AddressType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MFP_AddressType::MFP_AddressType()
  : digitalPayload_ID_Accessor{boost::make_unique<CapabilityID_Type>()},
    digitalPayloadProcessing_Accessor{boost::make_unique<DigitalPayloadProcessing>(0, SIZE_MAX)},
    serviceControlEndpointIndex_Accessor{boost::make_unique<ServiceControlEndpointIndex>(0, SIZE_MAX)} {
}

MFP_AddressType::~MFP_AddressType() = default;

void MFP_AddressType::copy(const uci::type::MFP_AddressType& accessor) {
  copyImpl(accessor, false);
}

void MFP_AddressType::copyImpl(const uci::type::MFP_AddressType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MFP_AddressType&>(accessor);
    setDigitalPayload_ID(*(accessorImpl.digitalPayload_ID_Accessor));
    if (accessorImpl.multiFunctionProcessorID_Accessor) {
      setMultiFunctionProcessorID(*(accessorImpl.multiFunctionProcessorID_Accessor));
    } else {
      multiFunctionProcessorID_Accessor.reset();
    }
    setDigitalPayloadProcessing(*(accessorImpl.digitalPayloadProcessing_Accessor));
    setServiceControlEndpointIndex(*(accessorImpl.serviceControlEndpointIndex_Accessor));
    if (accessorImpl.hasSignalProcessingFootprintIndex()) {
      setSignalProcessingFootprintIndex(accessorImpl.getSignalProcessingFootprintIndex());
    } else {
      clearSignalProcessingFootprintIndex();
    }
  }
}

void MFP_AddressType::reset() noexcept {
  digitalPayload_ID_Accessor->reset();
  multiFunctionProcessorID_Accessor.reset();
  digitalPayloadProcessing_Accessor->reset();
  serviceControlEndpointIndex_Accessor->reset();
  clearSignalProcessingFootprintIndex();
}

const uci::type::CapabilityID_Type& MFP_AddressType::getDigitalPayload_ID() const {
  return *digitalPayload_ID_Accessor;
}

uci::type::CapabilityID_Type& MFP_AddressType::getDigitalPayload_ID() {
  return *digitalPayload_ID_Accessor;
}

uci::type::MFP_AddressType& MFP_AddressType::setDigitalPayload_ID(const uci::type::CapabilityID_Type& accessor) {
  if (&accessor != digitalPayload_ID_Accessor.get()) {
    digitalPayload_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemID_Type& MFP_AddressType::getMultiFunctionProcessorID_() const {
  if (multiFunctionProcessorID_Accessor) {
    return *multiFunctionProcessorID_Accessor;
  }
  throw uci::base::UCIException("Error in getMultiFunctionProcessorID(): An attempt was made to get an optional field that was not enabled, call hasMultiFunctionProcessorID() to determine if it is safe to call getMultiFunctionProcessorID()");
}

const uci::type::SubsystemID_Type& MFP_AddressType::getMultiFunctionProcessorID() const {
  return getMultiFunctionProcessorID_();
}

uci::type::SubsystemID_Type& MFP_AddressType::getMultiFunctionProcessorID() {
  return getMultiFunctionProcessorID_();
}

uci::type::MFP_AddressType& MFP_AddressType::setMultiFunctionProcessorID(const uci::type::SubsystemID_Type& accessor) {
  enableMultiFunctionProcessorID();
  if (&accessor != multiFunctionProcessorID_Accessor.get()) {
    multiFunctionProcessorID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MFP_AddressType::hasMultiFunctionProcessorID() const noexcept {
  return static_cast<bool>(multiFunctionProcessorID_Accessor);
}

uci::type::SubsystemID_Type& MFP_AddressType::enableMultiFunctionProcessorID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemID_Type : type};
  if ((!multiFunctionProcessorID_Accessor) || (multiFunctionProcessorID_Accessor->getAccessorType() != requestedType)) {
    multiFunctionProcessorID_Accessor = SubsystemID_Type::create(requestedType);
    if (!multiFunctionProcessorID_Accessor) {
      throw uci::base::UCIException("Error in enableMultiFunctionProcessorID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *multiFunctionProcessorID_Accessor;
}

uci::type::MFP_AddressType& MFP_AddressType::clearMultiFunctionProcessorID() noexcept {
  multiFunctionProcessorID_Accessor.reset();
  return *this;
}

const uci::type::MFP_AddressType::DigitalPayloadProcessing& MFP_AddressType::getDigitalPayloadProcessing() const {
  return *digitalPayloadProcessing_Accessor;
}

uci::type::MFP_AddressType::DigitalPayloadProcessing& MFP_AddressType::getDigitalPayloadProcessing() {
  return *digitalPayloadProcessing_Accessor;
}

uci::type::MFP_AddressType& MFP_AddressType::setDigitalPayloadProcessing(const uci::type::MFP_AddressType::DigitalPayloadProcessing& accessor) {
  if (&accessor != digitalPayloadProcessing_Accessor.get()) {
    digitalPayloadProcessing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MFP_AddressType::ServiceControlEndpointIndex& MFP_AddressType::getServiceControlEndpointIndex() const {
  return *serviceControlEndpointIndex_Accessor;
}

uci::type::MFP_AddressType::ServiceControlEndpointIndex& MFP_AddressType::getServiceControlEndpointIndex() {
  return *serviceControlEndpointIndex_Accessor;
}

uci::type::MFP_AddressType& MFP_AddressType::setServiceControlEndpointIndex(const uci::type::MFP_AddressType::ServiceControlEndpointIndex& accessor) {
  if (&accessor != serviceControlEndpointIndex_Accessor.get()) {
    serviceControlEndpointIndex_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt MFP_AddressType::getSignalProcessingFootprintIndex() const {
  if (signalProcessingFootprintIndex_Accessor) {
    return *signalProcessingFootprintIndex_Accessor;
  }
  throw uci::base::UCIException("Error in getSignalProcessingFootprintIndex(): An attempt was made to get an optional field that was not enabled, call hasSignalProcessingFootprintIndex() to determine if it is safe to call getSignalProcessingFootprintIndex()");
}

uci::type::MFP_AddressType& MFP_AddressType::setSignalProcessingFootprintIndex(xs::UnsignedInt value) {
  signalProcessingFootprintIndex_Accessor = value;
  return *this;
}

bool MFP_AddressType::hasSignalProcessingFootprintIndex() const noexcept {
  return signalProcessingFootprintIndex_Accessor.has_value();
}

uci::type::MFP_AddressType& MFP_AddressType::clearSignalProcessingFootprintIndex() noexcept {
  signalProcessingFootprintIndex_Accessor.reset();
  return *this;
}

std::unique_ptr<MFP_AddressType> MFP_AddressType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mFP_AddressType : type};
  return (requestedType == uci::type::accessorType::mFP_AddressType) ? boost::make_unique<MFP_AddressType>() : nullptr;
}

/**  */
namespace MFP_AddressType_Names {

constexpr const char* Extern_Type_Name{"MFP_AddressType"};
constexpr const char* DigitalPayload_ID_Name{"DigitalPayload_ID"};
constexpr const char* MultiFunctionProcessorID_Name{"MultiFunctionProcessorID"};
constexpr const char* DigitalPayloadProcessing_Name{"DigitalPayloadProcessing"};
constexpr const char* ServiceControlEndpointIndex_Name{"ServiceControlEndpointIndex"};
constexpr const char* SignalProcessingFootprintIndex_Name{"SignalProcessingFootprintIndex"};

} // namespace MFP_AddressType_Names

void MFP_AddressType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MFP_AddressType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MFP_AddressType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MFP_AddressType_Names::DigitalPayload_ID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.getDigitalPayload_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MFP_AddressType_Names::MultiFunctionProcessorID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.enableMultiFunctionProcessorID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MFP_AddressType_Names::DigitalPayloadProcessing_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MFP_AddressType::DigitalPayloadProcessing& boundedList = accessor.getDigitalPayloadProcessing();
        const uci::type::MFP_AddressType::DigitalPayloadProcessing::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DigitalPayloadProcessingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MFP_AddressType_Names::ServiceControlEndpointIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MFP_AddressType::ServiceControlEndpointIndex& boundedList = accessor.getServiceControlEndpointIndex();
        const uci::type::MFP_AddressType::ServiceControlEndpointIndex::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedIntValue(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + MFP_AddressType_Names::SignalProcessingFootprintIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSignalProcessingFootprintIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string MFP_AddressType::serialize(const uci::type::MFP_AddressType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MFP_AddressType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MFP_AddressType_Names::Extern_Type_Name);
  }
  CapabilityID_Type::serialize(accessor.getDigitalPayload_ID(), node, MFP_AddressType_Names::DigitalPayload_ID_Name);
  if (accessor.hasMultiFunctionProcessorID()) {
    SubsystemID_Type::serialize(accessor.getMultiFunctionProcessorID(), node, MFP_AddressType_Names::MultiFunctionProcessorID_Name);
  }
  {
    const uci::type::MFP_AddressType::DigitalPayloadProcessing& boundedList = accessor.getDigitalPayloadProcessing();
    for (uci::type::MFP_AddressType::DigitalPayloadProcessing::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DigitalPayloadProcessingType::serialize(boundedList.at(i), node, MFP_AddressType_Names::DigitalPayloadProcessing_Name);
    }
  }
  {
    const uci::type::MFP_AddressType::ServiceControlEndpointIndex& boundedList = accessor.getServiceControlEndpointIndex();
    for (uci::type::MFP_AddressType::ServiceControlEndpointIndex::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(boundedList.at(i), node, MFP_AddressType_Names::ServiceControlEndpointIndex_Name);
    }
  }
  if (accessor.hasSignalProcessingFootprintIndex()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getSignalProcessingFootprintIndex(), node, MFP_AddressType_Names::SignalProcessingFootprintIndex_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MFP_AddressType& MFP_AddressType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MFP_AddressType>().release());
}

uci::type::MFP_AddressType& MFP_AddressType::create(const uci::type::MFP_AddressType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MFP_AddressType> newAccessor{boost::make_unique<asb_uci::type::MFP_AddressType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MFP_AddressType::destroy(uci::type::MFP_AddressType& accessor) {
  delete dynamic_cast<asb_uci::type::MFP_AddressType*>(&accessor);
}

} // namespace type

} // namespace uci

