/** @file GimbalOrientationPairType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/GimbalOrientationPairType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AnglePairType.h"
#include "../../../include/asb_uci/type/ComponentID_Type.h"
#include "../../../include/asb_uci/type/GimbalAxisPairType.h"
#include "../../../include/asb_uci/type/PO_GimbalOrientationReferenceFrameEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnglePairType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GimbalAxisPairType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GimbalOrientationPairType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_GimbalOrientationReferenceFrameEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

GimbalOrientationPairType::GimbalOrientationPairType()
  : referenceFrame_Accessor{boost::make_unique<PO_GimbalOrientationReferenceFrameEnum>()},
    axis_Accessor{boost::make_unique<Axis>(0, SIZE_MAX)} {
}

GimbalOrientationPairType::~GimbalOrientationPairType() = default;

void GimbalOrientationPairType::copy(const uci::type::GimbalOrientationPairType& accessor) {
  copyImpl(accessor, false);
}

void GimbalOrientationPairType::copyImpl(const uci::type::GimbalOrientationPairType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const GimbalOrientationPairType&>(accessor);
    setReferenceFrame(*(accessorImpl.referenceFrame_Accessor));
    if (accessorImpl.componentID_Accessor) {
      setComponentID(*(accessorImpl.componentID_Accessor));
    } else {
      componentID_Accessor.reset();
    }
    if (accessorImpl.pitch_Accessor) {
      setPitch(*(accessorImpl.pitch_Accessor));
    } else {
      pitch_Accessor.reset();
    }
    if (accessorImpl.roll_Accessor) {
      setRoll(*(accessorImpl.roll_Accessor));
    } else {
      roll_Accessor.reset();
    }
    if (accessorImpl.yaw_Accessor) {
      setYaw(*(accessorImpl.yaw_Accessor));
    } else {
      yaw_Accessor.reset();
    }
    setAxis(*(accessorImpl.axis_Accessor));
  }
}

void GimbalOrientationPairType::reset() noexcept {
  referenceFrame_Accessor->reset();
  componentID_Accessor.reset();
  pitch_Accessor.reset();
  roll_Accessor.reset();
  yaw_Accessor.reset();
  axis_Accessor->reset();
}

const uci::type::PO_GimbalOrientationReferenceFrameEnum& GimbalOrientationPairType::getReferenceFrame() const {
  return *referenceFrame_Accessor;
}

uci::type::PO_GimbalOrientationReferenceFrameEnum& GimbalOrientationPairType::getReferenceFrame() {
  return *referenceFrame_Accessor;
}

uci::type::GimbalOrientationPairType& GimbalOrientationPairType::setReferenceFrame(const uci::type::PO_GimbalOrientationReferenceFrameEnum& accessor) {
  if (&accessor != referenceFrame_Accessor.get()) {
    referenceFrame_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::GimbalOrientationPairType& GimbalOrientationPairType::setReferenceFrame(uci::type::PO_GimbalOrientationReferenceFrameEnum::EnumerationItem value) {
  referenceFrame_Accessor->setValue(value);
  return *this;
}


uci::type::ComponentID_Type& GimbalOrientationPairType::getComponentID_() const {
  if (componentID_Accessor) {
    return *componentID_Accessor;
  }
  throw uci::base::UCIException("Error in getComponentID(): An attempt was made to get an optional field that was not enabled, call hasComponentID() to determine if it is safe to call getComponentID()");
}

const uci::type::ComponentID_Type& GimbalOrientationPairType::getComponentID() const {
  return getComponentID_();
}

uci::type::ComponentID_Type& GimbalOrientationPairType::getComponentID() {
  return getComponentID_();
}

uci::type::GimbalOrientationPairType& GimbalOrientationPairType::setComponentID(const uci::type::ComponentID_Type& accessor) {
  enableComponentID();
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GimbalOrientationPairType::hasComponentID() const noexcept {
  return static_cast<bool>(componentID_Accessor);
}

uci::type::ComponentID_Type& GimbalOrientationPairType::enableComponentID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentID_Type : type};
  if ((!componentID_Accessor) || (componentID_Accessor->getAccessorType() != requestedType)) {
    componentID_Accessor = ComponentID_Type::create(requestedType);
    if (!componentID_Accessor) {
      throw uci::base::UCIException("Error in enableComponentID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *componentID_Accessor;
}

uci::type::GimbalOrientationPairType& GimbalOrientationPairType::clearComponentID() noexcept {
  componentID_Accessor.reset();
  return *this;
}

uci::type::AnglePairType& GimbalOrientationPairType::getPitch_() const {
  if (pitch_Accessor) {
    return *pitch_Accessor;
  }
  throw uci::base::UCIException("Error in getPitch(): An attempt was made to get an optional field that was not enabled, call hasPitch() to determine if it is safe to call getPitch()");
}

const uci::type::AnglePairType& GimbalOrientationPairType::getPitch() const {
  return getPitch_();
}

uci::type::AnglePairType& GimbalOrientationPairType::getPitch() {
  return getPitch_();
}

uci::type::GimbalOrientationPairType& GimbalOrientationPairType::setPitch(const uci::type::AnglePairType& accessor) {
  enablePitch(accessor.getAccessorType());
  if (&accessor != pitch_Accessor.get()) {
    pitch_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool GimbalOrientationPairType::hasPitch() const noexcept {
  return static_cast<bool>(pitch_Accessor);
}

uci::type::AnglePairType& GimbalOrientationPairType::enablePitch(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::anglePairType : type};
  if ((!pitch_Accessor) || (pitch_Accessor->getAccessorType() != requestedType)) {
    pitch_Accessor = AnglePairType::create(requestedType);
    if (!pitch_Accessor) {
      throw uci::base::UCIException("Error in enablePitch(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pitch_Accessor;
}

uci::type::GimbalOrientationPairType& GimbalOrientationPairType::clearPitch() noexcept {
  pitch_Accessor.reset();
  return *this;
}

uci::type::AnglePairType& GimbalOrientationPairType::getRoll_() const {
  if (roll_Accessor) {
    return *roll_Accessor;
  }
  throw uci::base::UCIException("Error in getRoll(): An attempt was made to get an optional field that was not enabled, call hasRoll() to determine if it is safe to call getRoll()");
}

const uci::type::AnglePairType& GimbalOrientationPairType::getRoll() const {
  return getRoll_();
}

uci::type::AnglePairType& GimbalOrientationPairType::getRoll() {
  return getRoll_();
}

uci::type::GimbalOrientationPairType& GimbalOrientationPairType::setRoll(const uci::type::AnglePairType& accessor) {
  enableRoll(accessor.getAccessorType());
  if (&accessor != roll_Accessor.get()) {
    roll_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool GimbalOrientationPairType::hasRoll() const noexcept {
  return static_cast<bool>(roll_Accessor);
}

uci::type::AnglePairType& GimbalOrientationPairType::enableRoll(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::anglePairType : type};
  if ((!roll_Accessor) || (roll_Accessor->getAccessorType() != requestedType)) {
    roll_Accessor = AnglePairType::create(requestedType);
    if (!roll_Accessor) {
      throw uci::base::UCIException("Error in enableRoll(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *roll_Accessor;
}

uci::type::GimbalOrientationPairType& GimbalOrientationPairType::clearRoll() noexcept {
  roll_Accessor.reset();
  return *this;
}

uci::type::AnglePairType& GimbalOrientationPairType::getYaw_() const {
  if (yaw_Accessor) {
    return *yaw_Accessor;
  }
  throw uci::base::UCIException("Error in getYaw(): An attempt was made to get an optional field that was not enabled, call hasYaw() to determine if it is safe to call getYaw()");
}

const uci::type::AnglePairType& GimbalOrientationPairType::getYaw() const {
  return getYaw_();
}

uci::type::AnglePairType& GimbalOrientationPairType::getYaw() {
  return getYaw_();
}

uci::type::GimbalOrientationPairType& GimbalOrientationPairType::setYaw(const uci::type::AnglePairType& accessor) {
  enableYaw(accessor.getAccessorType());
  if (&accessor != yaw_Accessor.get()) {
    yaw_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool GimbalOrientationPairType::hasYaw() const noexcept {
  return static_cast<bool>(yaw_Accessor);
}

uci::type::AnglePairType& GimbalOrientationPairType::enableYaw(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::anglePairType : type};
  if ((!yaw_Accessor) || (yaw_Accessor->getAccessorType() != requestedType)) {
    yaw_Accessor = AnglePairType::create(requestedType);
    if (!yaw_Accessor) {
      throw uci::base::UCIException("Error in enableYaw(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *yaw_Accessor;
}

uci::type::GimbalOrientationPairType& GimbalOrientationPairType::clearYaw() noexcept {
  yaw_Accessor.reset();
  return *this;
}

const uci::type::GimbalOrientationPairType::Axis& GimbalOrientationPairType::getAxis() const {
  return *axis_Accessor;
}

uci::type::GimbalOrientationPairType::Axis& GimbalOrientationPairType::getAxis() {
  return *axis_Accessor;
}

uci::type::GimbalOrientationPairType& GimbalOrientationPairType::setAxis(const uci::type::GimbalOrientationPairType::Axis& accessor) {
  if (&accessor != axis_Accessor.get()) {
    axis_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<GimbalOrientationPairType> GimbalOrientationPairType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gimbalOrientationPairType : type};
  return (requestedType == uci::type::accessorType::gimbalOrientationPairType) ? boost::make_unique<GimbalOrientationPairType>() : nullptr;
}

/**  */
namespace GimbalOrientationPairType_Names {

constexpr const char* Extern_Type_Name{"GimbalOrientationPairType"};
constexpr const char* ReferenceFrame_Name{"ReferenceFrame"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* Pitch_Name{"Pitch"};
constexpr const char* Roll_Name{"Roll"};
constexpr const char* Yaw_Name{"Yaw"};
constexpr const char* Axis_Name{"Axis"};

} // namespace GimbalOrientationPairType_Names

void GimbalOrientationPairType::deserialize(const boost::property_tree::ptree& propTree, uci::type::GimbalOrientationPairType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = GimbalOrientationPairType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + GimbalOrientationPairType_Names::ReferenceFrame_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getReferenceFrame().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + GimbalOrientationPairType_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.enableComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GimbalOrientationPairType_Names::Pitch_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePitch(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GimbalOrientationPairType_Names::Roll_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRoll(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GimbalOrientationPairType_Names::Yaw_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableYaw(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GimbalOrientationPairType_Names::Axis_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::GimbalOrientationPairType::Axis& boundedList = accessor.getAxis();
        const uci::type::GimbalOrientationPairType::Axis::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::GimbalAxisPairType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string GimbalOrientationPairType::serialize(const uci::type::GimbalOrientationPairType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? GimbalOrientationPairType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, GimbalOrientationPairType_Names::Extern_Type_Name);
  }
  PO_GimbalOrientationReferenceFrameEnum::serialize(accessor.getReferenceFrame(), node, GimbalOrientationPairType_Names::ReferenceFrame_Name, false);
  if (accessor.hasComponentID()) {
    ComponentID_Type::serialize(accessor.getComponentID(), node, GimbalOrientationPairType_Names::ComponentID_Name);
  }
  if (accessor.hasPitch()) {
    AnglePairType::serialize(accessor.getPitch(), node, GimbalOrientationPairType_Names::Pitch_Name);
  }
  if (accessor.hasRoll()) {
    AnglePairType::serialize(accessor.getRoll(), node, GimbalOrientationPairType_Names::Roll_Name);
  }
  if (accessor.hasYaw()) {
    AnglePairType::serialize(accessor.getYaw(), node, GimbalOrientationPairType_Names::Yaw_Name);
  }
  {
    const uci::type::GimbalOrientationPairType::Axis& boundedList = accessor.getAxis();
    for (uci::type::GimbalOrientationPairType::Axis::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::GimbalAxisPairType::serialize(boundedList.at(i), node, GimbalOrientationPairType_Names::Axis_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::GimbalOrientationPairType& GimbalOrientationPairType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::GimbalOrientationPairType>().release());
}

uci::type::GimbalOrientationPairType& GimbalOrientationPairType::create(const uci::type::GimbalOrientationPairType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::GimbalOrientationPairType> newAccessor{boost::make_unique<asb_uci::type::GimbalOrientationPairType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void GimbalOrientationPairType::destroy(uci::type::GimbalOrientationPairType& accessor) {
  delete dynamic_cast<asb_uci::type::GimbalOrientationPairType*>(&accessor);
}

} // namespace type

} // namespace uci

