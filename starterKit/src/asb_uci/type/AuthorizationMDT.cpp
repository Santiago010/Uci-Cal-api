/** @file AuthorizationMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AuthorizationMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AuthorizationID_Type.h"
#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/DateTimeRangeType.h"
#include "../../../include/asb_uci/type/PlanPartsBaseType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/UserIdentifierType.h"
#include "../../../include/asb_uci/type/ZoneType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AuthorizationID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AuthorizationMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanPartsBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/UserIdentifierType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ZoneType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AuthorizationMDT::AuthorizationMDT()
  : authorizationID_Accessor{boost::make_unique<AuthorizationID_Type>()},
    userIdentifier_Accessor{boost::make_unique<UserIdentifierType>()},
    systemID_Accessor{boost::make_unique<SystemID_Type>()} {
}

AuthorizationMDT::~AuthorizationMDT() = default;

void AuthorizationMDT::copy(const uci::type::AuthorizationMDT& accessor) {
  copyImpl(accessor, false);
}

void AuthorizationMDT::copyImpl(const uci::type::AuthorizationMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const AuthorizationMDT&>(accessor);
    setAuthorizationID(*(accessorImpl.authorizationID_Accessor));
    setUserIdentifier(*(accessorImpl.userIdentifier_Accessor));
    setSystemID(*(accessorImpl.systemID_Accessor));
    setPrecedence(accessorImpl.precedence_Accessor);
    if (accessorImpl.planParts_Accessor) {
      setPlanParts(*(accessorImpl.planParts_Accessor));
    } else {
      planParts_Accessor.reset();
    }
    if (accessorImpl.authorizedTime_Accessor) {
      setAuthorizedTime(*(accessorImpl.authorizedTime_Accessor));
    } else {
      authorizedTime_Accessor.reset();
    }
    if (accessorImpl.authorizedArea_Accessor) {
      setAuthorizedArea(*(accessorImpl.authorizedArea_Accessor));
    } else {
      authorizedArea_Accessor.reset();
    }
  }
}

void AuthorizationMDT::reset() noexcept {
  DataRecordBaseType::reset();
  authorizationID_Accessor->reset();
  userIdentifier_Accessor->reset();
  systemID_Accessor->reset();
  precedence_Accessor = 0;
  planParts_Accessor.reset();
  authorizedTime_Accessor.reset();
  authorizedArea_Accessor.reset();
}

const uci::type::AuthorizationID_Type& AuthorizationMDT::getAuthorizationID() const {
  return *authorizationID_Accessor;
}

uci::type::AuthorizationID_Type& AuthorizationMDT::getAuthorizationID() {
  return *authorizationID_Accessor;
}

uci::type::AuthorizationMDT& AuthorizationMDT::setAuthorizationID(const uci::type::AuthorizationID_Type& accessor) {
  if (&accessor != authorizationID_Accessor.get()) {
    authorizationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::UserIdentifierType& AuthorizationMDT::getUserIdentifier() const noexcept {
  return *userIdentifier_Accessor;
}

uci::type::UserIdentifierType& AuthorizationMDT::getUserIdentifier() noexcept {
  return *userIdentifier_Accessor;
}

uci::type::AuthorizationMDT& AuthorizationMDT::setUserIdentifier(const uci::type::UserIdentifierType& value) {
  return setUserIdentifier(value.c_str());
}

uci::type::AuthorizationMDT& AuthorizationMDT::setUserIdentifier(const std::string& value) {
  return setUserIdentifier(value.c_str());
}

uci::type::AuthorizationMDT& AuthorizationMDT::setUserIdentifier(const char* value) {
  userIdentifier_Accessor->setStringValue(value);
  return *this;
}

const uci::type::SystemID_Type& AuthorizationMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& AuthorizationMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::AuthorizationMDT& AuthorizationMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt AuthorizationMDT::getPrecedence() const {
  return precedence_Accessor;
}

uci::type::AuthorizationMDT& AuthorizationMDT::setPrecedence(xs::UnsignedInt value) {
  precedence_Accessor = value;
  return *this;
}


uci::type::PlanPartsBaseType& AuthorizationMDT::getPlanParts_() const {
  if (planParts_Accessor) {
    return *planParts_Accessor;
  }
  throw uci::base::UCIException("Error in getPlanParts(): An attempt was made to get an optional field that was not enabled, call hasPlanParts() to determine if it is safe to call getPlanParts()");
}

const uci::type::PlanPartsBaseType& AuthorizationMDT::getPlanParts() const {
  return getPlanParts_();
}

uci::type::PlanPartsBaseType& AuthorizationMDT::getPlanParts() {
  return getPlanParts_();
}

uci::type::AuthorizationMDT& AuthorizationMDT::setPlanParts(const uci::type::PlanPartsBaseType& accessor) {
  enablePlanParts(accessor.getAccessorType());
  if (&accessor != planParts_Accessor.get()) {
    planParts_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AuthorizationMDT::hasPlanParts() const noexcept {
  return static_cast<bool>(planParts_Accessor);
}

uci::type::PlanPartsBaseType& AuthorizationMDT::enablePlanParts(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planPartsBaseType : type};
  if ((!planParts_Accessor) || (planParts_Accessor->getAccessorType() != requestedType)) {
    planParts_Accessor = PlanPartsBaseType::create(requestedType);
    if (!planParts_Accessor) {
      throw uci::base::UCIException("Error in enablePlanParts(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *planParts_Accessor;
}

uci::type::AuthorizationMDT& AuthorizationMDT::clearPlanParts() noexcept {
  planParts_Accessor.reset();
  return *this;
}

uci::type::DateTimeRangeType& AuthorizationMDT::getAuthorizedTime_() const {
  if (authorizedTime_Accessor) {
    return *authorizedTime_Accessor;
  }
  throw uci::base::UCIException("Error in getAuthorizedTime(): An attempt was made to get an optional field that was not enabled, call hasAuthorizedTime() to determine if it is safe to call getAuthorizedTime()");
}

const uci::type::DateTimeRangeType& AuthorizationMDT::getAuthorizedTime() const {
  return getAuthorizedTime_();
}

uci::type::DateTimeRangeType& AuthorizationMDT::getAuthorizedTime() {
  return getAuthorizedTime_();
}

uci::type::AuthorizationMDT& AuthorizationMDT::setAuthorizedTime(const uci::type::DateTimeRangeType& accessor) {
  enableAuthorizedTime();
  if (&accessor != authorizedTime_Accessor.get()) {
    authorizedTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AuthorizationMDT::hasAuthorizedTime() const noexcept {
  return static_cast<bool>(authorizedTime_Accessor);
}

uci::type::DateTimeRangeType& AuthorizationMDT::enableAuthorizedTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!authorizedTime_Accessor) || (authorizedTime_Accessor->getAccessorType() != requestedType)) {
    authorizedTime_Accessor = DateTimeRangeType::create(requestedType);
    if (!authorizedTime_Accessor) {
      throw uci::base::UCIException("Error in enableAuthorizedTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *authorizedTime_Accessor;
}

uci::type::AuthorizationMDT& AuthorizationMDT::clearAuthorizedTime() noexcept {
  authorizedTime_Accessor.reset();
  return *this;
}

uci::type::ZoneType& AuthorizationMDT::getAuthorizedArea_() const {
  if (authorizedArea_Accessor) {
    return *authorizedArea_Accessor;
  }
  throw uci::base::UCIException("Error in getAuthorizedArea(): An attempt was made to get an optional field that was not enabled, call hasAuthorizedArea() to determine if it is safe to call getAuthorizedArea()");
}

const uci::type::ZoneType& AuthorizationMDT::getAuthorizedArea() const {
  return getAuthorizedArea_();
}

uci::type::ZoneType& AuthorizationMDT::getAuthorizedArea() {
  return getAuthorizedArea_();
}

uci::type::AuthorizationMDT& AuthorizationMDT::setAuthorizedArea(const uci::type::ZoneType& accessor) {
  enableAuthorizedArea(accessor.getAccessorType());
  if (&accessor != authorizedArea_Accessor.get()) {
    authorizedArea_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AuthorizationMDT::hasAuthorizedArea() const noexcept {
  return static_cast<bool>(authorizedArea_Accessor);
}

uci::type::ZoneType& AuthorizationMDT::enableAuthorizedArea(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!authorizedArea_Accessor) || (authorizedArea_Accessor->getAccessorType() != requestedType)) {
    authorizedArea_Accessor = ZoneType::create(requestedType);
    if (!authorizedArea_Accessor) {
      throw uci::base::UCIException("Error in enableAuthorizedArea(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *authorizedArea_Accessor;
}

uci::type::AuthorizationMDT& AuthorizationMDT::clearAuthorizedArea() noexcept {
  authorizedArea_Accessor.reset();
  return *this;
}

std::unique_ptr<AuthorizationMDT> AuthorizationMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::authorizationMDT : type};
  return (requestedType == uci::type::accessorType::authorizationMDT) ? boost::make_unique<AuthorizationMDT>() : nullptr;
}

/**  */
namespace AuthorizationMDT_Names {

constexpr const char* Extern_Type_Name{"AuthorizationMDT"};
constexpr const char* AuthorizationID_Name{"AuthorizationID"};
constexpr const char* UserIdentifier_Name{"UserIdentifier"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* Precedence_Name{"Precedence"};
constexpr const char* PlanParts_Name{"PlanParts"};
constexpr const char* AuthorizedTime_Name{"AuthorizedTime"};
constexpr const char* AuthorizedArea_Name{"AuthorizedArea"};

} // namespace AuthorizationMDT_Names

void AuthorizationMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::AuthorizationMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AuthorizationMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AuthorizationMDT_Names::AuthorizationID_Name) {
      AuthorizationID_Type::deserialize(valueType.second, accessor.getAuthorizationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AuthorizationMDT_Names::UserIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUserIdentifier(*value);
      }
    } else if (valueType.first == nsPrefix + AuthorizationMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AuthorizationMDT_Names::Precedence_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPrecedence(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + AuthorizationMDT_Names::PlanParts_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePlanParts(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AuthorizationMDT_Names::AuthorizedTime_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableAuthorizedTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AuthorizationMDT_Names::AuthorizedArea_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableAuthorizedArea(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string AuthorizationMDT::serialize(const uci::type::AuthorizationMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AuthorizationMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AuthorizationMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  AuthorizationID_Type::serialize(accessor.getAuthorizationID(), node, AuthorizationMDT_Names::AuthorizationID_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getUserIdentifier(), node, AuthorizationMDT_Names::UserIdentifier_Name);
  SystemID_Type::serialize(accessor.getSystemID(), node, AuthorizationMDT_Names::SystemID_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getPrecedence(), node, AuthorizationMDT_Names::Precedence_Name);
  if (accessor.hasPlanParts()) {
    PlanPartsBaseType::serialize(accessor.getPlanParts(), node, AuthorizationMDT_Names::PlanParts_Name);
  }
  if (accessor.hasAuthorizedTime()) {
    DateTimeRangeType::serialize(accessor.getAuthorizedTime(), node, AuthorizationMDT_Names::AuthorizedTime_Name);
  }
  if (accessor.hasAuthorizedArea()) {
    ZoneType::serialize(accessor.getAuthorizedArea(), node, AuthorizationMDT_Names::AuthorizedArea_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AuthorizationMDT& AuthorizationMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AuthorizationMDT>().release());
}

uci::type::AuthorizationMDT& AuthorizationMDT::create(const uci::type::AuthorizationMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AuthorizationMDT> newAccessor{boost::make_unique<asb_uci::type::AuthorizationMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AuthorizationMDT::destroy(uci::type::AuthorizationMDT& accessor) {
  delete dynamic_cast<asb_uci::type::AuthorizationMDT*>(&accessor);
}

} // namespace type

} // namespace uci

