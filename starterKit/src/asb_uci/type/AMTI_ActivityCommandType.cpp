/** @file AMTI_ActivityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AMTI_ActivityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AMTI_CollectionConstraintsType.h"
#include "asb_uci/type/AirTargetVolumeCommandType.h"
#include "asb_uci/type/AirTargetVolumeType.h"
#include "asb_uci/type/CapabilityCommandFrequencyType.h"
#include "asb_uci/type/DependentActivityType.h"
#include "asb_uci/type/ProductOutputCommandBasicType.h"
#include "asb_uci/type/RadarCollectionOptionsType.h"
#include "asb_uci/type/RepetitionType.h"
#include "asb_uci/type/ResourceSelectionType.h"
#include "asb_uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AMTI_ActivityCommandType.h"
#include "uci/type/AMTI_CollectionConstraintsType.h"
#include "uci/type/AirTargetVolumeCommandType.h"
#include "uci/type/AirTargetVolumeType.h"
#include "uci/type/CapabilityCommandFrequencyType.h"
#include "uci/type/DependentActivityType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/ProductOutputCommandBasicType.h"
#include "uci/type/RadarCollectionOptionsType.h"
#include "uci/type/RepetitionType.h"
#include "uci/type/ResourceSelectionType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

// TODO:este es el contructor de la clase
AMTI_ActivityCommandType::AMTI_ActivityCommandType()
  : resourceSelection_Accessor{boost::make_unique<ResourceSelection>(0, SIZE_MAX)},
    targetVolume_Accessor{boost::make_unique<TargetVolume>(0, 2)},
    blankingVolume_Accessor{boost::make_unique<BlankingVolume>(0, SIZE_MAX)},
    productOutput_Accessor{boost::make_unique<ProductOutput>(0, SIZE_MAX)} {
}

// TODO:deconstructor
AMTI_ActivityCommandType::~AMTI_ActivityCommandType() = default;

// Este es un método copy que toma una referencia constante a un objeto de tipo uci::type::AMTI_ActivityCommandType.
// Llama a un método privado copyImpl pasando accessor y false como argumentos. La implementación de copyImpl no se muestra aquí, pero es probable que copie los datos del objeto accessor al objeto actual.
void AMTI_ActivityCommandType::copy(const uci::type::AMTI_ActivityCommandType& accessor) {
  copyImpl(accessor, false);
}

void AMTI_ActivityCommandType::copyImpl(const uci::type::AMTI_ActivityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SharedRF_ApertureActivityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const AMTI_ActivityCommandType&>(accessor);
    if (accessorImpl.hasAttempt()) {
      setAttempt(accessorImpl.getAttempt());
    } else {
      clearAttempt();
    }
    if (accessorImpl.changeDependentActivity_Accessor) {
      setChangeDependentActivity(*(accessorImpl.changeDependentActivity_Accessor));
    } else {
      changeDependentActivity_Accessor.reset();
    }
    setResourceSelection(*(accessorImpl.resourceSelection_Accessor));
    setTargetVolume(*(accessorImpl.targetVolume_Accessor));
    setBlankingVolume(*(accessorImpl.blankingVolume_Accessor));
    if (accessorImpl.frequency_Accessor) {
      setFrequency(*(accessorImpl.frequency_Accessor));
    } else {
      frequency_Accessor.reset();
    }
    if (accessorImpl.collectionOptions_Accessor) {
      setCollectionOptions(*(accessorImpl.collectionOptions_Accessor));
    } else {
      collectionOptions_Accessor.reset();
    }
    if (accessorImpl.collectionConstraints_Accessor) {
      setCollectionConstraints(*(accessorImpl.collectionConstraints_Accessor));
    } else {
      collectionConstraints_Accessor.reset();
    }
    if (accessorImpl.hasTrackingRange()) {
      setTrackingRange(accessorImpl.getTrackingRange());
    } else {
      clearTrackingRange();
    }
    if (accessorImpl.repetition_Accessor) {
      setRepetition(*(accessorImpl.repetition_Accessor));
    } else {
      repetition_Accessor.reset();
    }
    setProductOutput(*(accessorImpl.productOutput_Accessor));
  }
}

void AMTI_ActivityCommandType::reset() noexcept {
  SharedRF_ApertureActivityCommandBaseType::reset();
  clearAttempt();
  changeDependentActivity_Accessor.reset();
  resourceSelection_Accessor->reset();
  targetVolume_Accessor->reset();
  blankingVolume_Accessor->reset();
  frequency_Accessor.reset();
  collectionOptions_Accessor.reset();
  collectionConstraints_Accessor.reset();
  clearTrackingRange();
  repetition_Accessor.reset();
  productOutput_Accessor->reset();
}

xs::UnsignedInt AMTI_ActivityCommandType::getAttempt() const {
  if (attempt_Accessor) {
    return *attempt_Accessor;
  }
  throw uci::base::UCIException("Error in getAttempt(): An attempt was made to get an optional field that was not enabled, call hasAttempt() to determine if it is safe to call getAttempt()");
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::setAttempt(xs::UnsignedInt value) {
  attempt_Accessor = value;
  return *this;
}

bool AMTI_ActivityCommandType::hasAttempt() const noexcept {
  return attempt_Accessor.has_value();
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::clearAttempt() noexcept {
  attempt_Accessor.reset();
  return *this;
}

uci::type::DependentActivityType& AMTI_ActivityCommandType::getChangeDependentActivity_() const {
  if (changeDependentActivity_Accessor) {
    return *changeDependentActivity_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeDependentActivity(): An attempt was made to get an optional field that was not enabled, call hasChangeDependentActivity() to determine if it is safe to call getChangeDependentActivity()");
}

const uci::type::DependentActivityType& AMTI_ActivityCommandType::getChangeDependentActivity() const {
  return getChangeDependentActivity_();
}

uci::type::DependentActivityType& AMTI_ActivityCommandType::getChangeDependentActivity() {
  return getChangeDependentActivity_();
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::setChangeDependentActivity(const uci::type::DependentActivityType& accessor) {
  enableChangeDependentActivity();
  if (&accessor != changeDependentActivity_Accessor.get()) {
    changeDependentActivity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AMTI_ActivityCommandType::hasChangeDependentActivity() const noexcept {
  return static_cast<bool>(changeDependentActivity_Accessor);
}

uci::type::DependentActivityType& AMTI_ActivityCommandType::enableChangeDependentActivity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dependentActivityType : type};
  if ((!changeDependentActivity_Accessor) || (changeDependentActivity_Accessor->getAccessorType() != requestedType)) {
    changeDependentActivity_Accessor = DependentActivityType::create(requestedType);
    if (!changeDependentActivity_Accessor) {
      throw uci::base::UCIException("Error in enableChangeDependentActivity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeDependentActivity_Accessor;
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::clearChangeDependentActivity() noexcept {
  changeDependentActivity_Accessor.reset();
  return *this;
}

const uci::type::AMTI_ActivityCommandType::ResourceSelection& AMTI_ActivityCommandType::getResourceSelection() const {
  return *resourceSelection_Accessor;
}

uci::type::AMTI_ActivityCommandType::ResourceSelection& AMTI_ActivityCommandType::getResourceSelection() {
  return *resourceSelection_Accessor;
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::setResourceSelection(const uci::type::AMTI_ActivityCommandType::ResourceSelection& accessor) {
  if (&accessor != resourceSelection_Accessor.get()) {
    resourceSelection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AMTI_ActivityCommandType::TargetVolume& AMTI_ActivityCommandType::getTargetVolume() const {
  return *targetVolume_Accessor;
}

uci::type::AMTI_ActivityCommandType::TargetVolume& AMTI_ActivityCommandType::getTargetVolume() {
  return *targetVolume_Accessor;
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::setTargetVolume(const uci::type::AMTI_ActivityCommandType::TargetVolume& accessor) {
  if (&accessor != targetVolume_Accessor.get()) {
    targetVolume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AMTI_ActivityCommandType::BlankingVolume& AMTI_ActivityCommandType::getBlankingVolume() const {
  return *blankingVolume_Accessor;
}

uci::type::AMTI_ActivityCommandType::BlankingVolume& AMTI_ActivityCommandType::getBlankingVolume() {
  return *blankingVolume_Accessor;
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::setBlankingVolume(const uci::type::AMTI_ActivityCommandType::BlankingVolume& accessor) {
  if (&accessor != blankingVolume_Accessor.get()) {
    blankingVolume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CapabilityCommandFrequencyType& AMTI_ActivityCommandType::getFrequency_() const {
  if (frequency_Accessor) {
    return *frequency_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequency(): An attempt was made to get an optional field that was not enabled, call hasFrequency() to determine if it is safe to call getFrequency()");
}

const uci::type::CapabilityCommandFrequencyType& AMTI_ActivityCommandType::getFrequency() const {
  return getFrequency_();
}

uci::type::CapabilityCommandFrequencyType& AMTI_ActivityCommandType::getFrequency() {
  return getFrequency_();
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::setFrequency(const uci::type::CapabilityCommandFrequencyType& accessor) {
  enableFrequency();
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AMTI_ActivityCommandType::hasFrequency() const noexcept {
  return static_cast<bool>(frequency_Accessor);
}

uci::type::CapabilityCommandFrequencyType& AMTI_ActivityCommandType::enableFrequency(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandFrequencyType : type};
  if ((!frequency_Accessor) || (frequency_Accessor->getAccessorType() != requestedType)) {
    frequency_Accessor = CapabilityCommandFrequencyType::create(requestedType);
    if (!frequency_Accessor) {
      throw uci::base::UCIException("Error in enableFrequency(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *frequency_Accessor;
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::clearFrequency() noexcept {
  frequency_Accessor.reset();
  return *this;
}

uci::type::RadarCollectionOptionsType& AMTI_ActivityCommandType::getCollectionOptions_() const {
  if (collectionOptions_Accessor) {
    return *collectionOptions_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionOptions(): An attempt was made to get an optional field that was not enabled, call hasCollectionOptions() to determine if it is safe to call getCollectionOptions()");
}

const uci::type::RadarCollectionOptionsType& AMTI_ActivityCommandType::getCollectionOptions() const {
  return getCollectionOptions_();
}

uci::type::RadarCollectionOptionsType& AMTI_ActivityCommandType::getCollectionOptions() {
  return getCollectionOptions_();
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::setCollectionOptions(const uci::type::RadarCollectionOptionsType& accessor) {
  enableCollectionOptions(accessor.getAccessorType());
  if (&accessor != collectionOptions_Accessor.get()) {
    collectionOptions_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AMTI_ActivityCommandType::hasCollectionOptions() const noexcept {
  return static_cast<bool>(collectionOptions_Accessor);
}

uci::type::RadarCollectionOptionsType& AMTI_ActivityCommandType::enableCollectionOptions(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarCollectionOptionsType : type};
  if ((!collectionOptions_Accessor) || (collectionOptions_Accessor->getAccessorType() != requestedType)) {
    collectionOptions_Accessor = RadarCollectionOptionsType::create(requestedType);
    if (!collectionOptions_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionOptions(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionOptions_Accessor;
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::clearCollectionOptions() noexcept {
  collectionOptions_Accessor.reset();
  return *this;
}

uci::type::AMTI_CollectionConstraintsType& AMTI_ActivityCommandType::getCollectionConstraints_() const {
  if (collectionConstraints_Accessor) {
    return *collectionConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionConstraints(): An attempt was made to get an optional field that was not enabled, call hasCollectionConstraints() to determine if it is safe to call getCollectionConstraints()");
}

const uci::type::AMTI_CollectionConstraintsType& AMTI_ActivityCommandType::getCollectionConstraints() const {
  return getCollectionConstraints_();
}

uci::type::AMTI_CollectionConstraintsType& AMTI_ActivityCommandType::getCollectionConstraints() {
  return getCollectionConstraints_();
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::setCollectionConstraints(const uci::type::AMTI_CollectionConstraintsType& accessor) {
  enableCollectionConstraints();
  if (&accessor != collectionConstraints_Accessor.get()) {
    collectionConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AMTI_ActivityCommandType::hasCollectionConstraints() const noexcept {
  return static_cast<bool>(collectionConstraints_Accessor);
}

uci::type::AMTI_CollectionConstraintsType& AMTI_ActivityCommandType::enableCollectionConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aMTI_CollectionConstraintsType : type};
  if ((!collectionConstraints_Accessor) || (collectionConstraints_Accessor->getAccessorType() != requestedType)) {
    collectionConstraints_Accessor = AMTI_CollectionConstraintsType::create(requestedType);
    if (!collectionConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionConstraints_Accessor;
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::clearCollectionConstraints() noexcept {
  collectionConstraints_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue AMTI_ActivityCommandType::getTrackingRange() const {
  if (trackingRange_Accessor) {
    return *trackingRange_Accessor;
  }
  throw uci::base::UCIException("Error in getTrackingRange(): An attempt was made to get an optional field that was not enabled, call hasTrackingRange() to determine if it is safe to call getTrackingRange()");
}


// TODO:aqui si existe *this; asi que puede estar el otro metodo
uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::setTrackingRange(uci::type::DistanceTypeValue value) {
  trackingRange_Accessor = value;
  return *this;
}

bool AMTI_ActivityCommandType::hasTrackingRange() const noexcept {
  return trackingRange_Accessor.has_value();
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::clearTrackingRange() noexcept {
  trackingRange_Accessor.reset();
  return *this;
}

uci::type::RepetitionType& AMTI_ActivityCommandType::getRepetition_() const {
  if (repetition_Accessor) {
    return *repetition_Accessor;
  }
  throw uci::base::UCIException("Error in getRepetition(): An attempt was made to get an optional field that was not enabled, call hasRepetition() to determine if it is safe to call getRepetition()");
}

const uci::type::RepetitionType& AMTI_ActivityCommandType::getRepetition() const {
  return getRepetition_();
}

uci::type::RepetitionType& AMTI_ActivityCommandType::getRepetition() {
  return getRepetition_();
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::setRepetition(const uci::type::RepetitionType& accessor) {
  enableRepetition();
  if (&accessor != repetition_Accessor.get()) {
    repetition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AMTI_ActivityCommandType::hasRepetition() const noexcept {
  return static_cast<bool>(repetition_Accessor);
}

uci::type::RepetitionType& AMTI_ActivityCommandType::enableRepetition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionType : type};
  if ((!repetition_Accessor) || (repetition_Accessor->getAccessorType() != requestedType)) {
    repetition_Accessor = RepetitionType::create(requestedType);
    if (!repetition_Accessor) {
      throw uci::base::UCIException("Error in enableRepetition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *repetition_Accessor;
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::clearRepetition() noexcept {
  repetition_Accessor.reset();
  return *this;
}

const uci::type::AMTI_ActivityCommandType::ProductOutput& AMTI_ActivityCommandType::getProductOutput() const {
  return *productOutput_Accessor;
}

uci::type::AMTI_ActivityCommandType::ProductOutput& AMTI_ActivityCommandType::getProductOutput() {
  return *productOutput_Accessor;
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::setProductOutput(const uci::type::AMTI_ActivityCommandType::ProductOutput& accessor) {
  if (&accessor != productOutput_Accessor.get()) {
    productOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<AMTI_ActivityCommandType> AMTI_ActivityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aMTI_ActivityCommandType : type};
  return (requestedType == uci::type::accessorType::aMTI_ActivityCommandType) ? boost::make_unique<AMTI_ActivityCommandType>() : nullptr;
}

/**  */
namespace AMTI_ActivityCommandType_Names {

constexpr const char* Extern_Type_Name{"AMTI_ActivityCommandType"};
constexpr const char* Attempt_Name{"Attempt"};
constexpr const char* ChangeDependentActivity_Name{"ChangeDependentActivity"};
constexpr const char* ResourceSelection_Name{"ResourceSelection"};
constexpr const char* TargetVolume_Name{"TargetVolume"};
constexpr const char* BlankingVolume_Name{"BlankingVolume"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* CollectionOptions_Name{"CollectionOptions"};
constexpr const char* CollectionConstraints_Name{"CollectionConstraints"};
constexpr const char* TrackingRange_Name{"TrackingRange"};
constexpr const char* Repetition_Name{"Repetition"};
constexpr const char* ProductOutput_Name{"ProductOutput"};

} // namespace AMTI_ActivityCommandType_Names

void AMTI_ActivityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AMTI_ActivityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AMTI_ActivityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::Attempt_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAttempt(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::ChangeDependentActivity_Name) {
      DependentActivityType::deserialize(valueType.second, accessor.enableChangeDependentActivity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::ResourceSelection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AMTI_ActivityCommandType::ResourceSelection& boundedList = accessor.getResourceSelection();
        const uci::type::AMTI_ActivityCommandType::ResourceSelection::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ResourceSelectionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::TargetVolume_Name) {
      uci::type::AMTI_ActivityCommandType::TargetVolume& boundedList = accessor.getTargetVolume();
      const uci::type::AMTI_ActivityCommandType::TargetVolume::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::AirTargetVolumeCommandType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::BlankingVolume_Name) {
      uci::type::AMTI_ActivityCommandType::BlankingVolume& boundedList = accessor.getBlankingVolume();
      const uci::type::AMTI_ActivityCommandType::BlankingVolume::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::AirTargetVolumeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::Frequency_Name) {
      CapabilityCommandFrequencyType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::CollectionOptions_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableCollectionOptions(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::CollectionConstraints_Name) {
      AMTI_CollectionConstraintsType::deserialize(valueType.second, accessor.enableCollectionConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::TrackingRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTrackingRange(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::Repetition_Name) {
      RepetitionType::deserialize(valueType.second, accessor.enableRepetition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::ProductOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AMTI_ActivityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
        const uci::type::AMTI_ActivityCommandType::ProductOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  SharedRF_ApertureActivityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string AMTI_ActivityCommandType::serialize(const uci::type::AMTI_ActivityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AMTI_ActivityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AMTI_ActivityCommandType_Names::Extern_Type_Name);
  }
  SharedRF_ApertureActivityCommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasAttempt()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAttempt(), node, AMTI_ActivityCommandType_Names::Attempt_Name);
  }
  if (accessor.hasChangeDependentActivity()) {
    DependentActivityType::serialize(accessor.getChangeDependentActivity(), node, AMTI_ActivityCommandType_Names::ChangeDependentActivity_Name);
  }
  {
    const uci::type::AMTI_ActivityCommandType::ResourceSelection& boundedList = accessor.getResourceSelection();
    for (uci::type::AMTI_ActivityCommandType::ResourceSelection::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ResourceSelectionType::serialize(boundedList.at(i), node, AMTI_ActivityCommandType_Names::ResourceSelection_Name);
    }
  }
  {
    const uci::type::AMTI_ActivityCommandType::TargetVolume& boundedList = accessor.getTargetVolume();
    for (uci::type::AMTI_ActivityCommandType::TargetVolume::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AirTargetVolumeCommandType::serialize(boundedList.at(i), node, AMTI_ActivityCommandType_Names::TargetVolume_Name);
    }
  }
  {
    const uci::type::AMTI_ActivityCommandType::BlankingVolume& boundedList = accessor.getBlankingVolume();
    for (uci::type::AMTI_ActivityCommandType::BlankingVolume::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AirTargetVolumeType::serialize(boundedList.at(i), node, AMTI_ActivityCommandType_Names::BlankingVolume_Name);
    }
  }
  if (accessor.hasFrequency()) {
    CapabilityCommandFrequencyType::serialize(accessor.getFrequency(), node, AMTI_ActivityCommandType_Names::Frequency_Name);
  }
  if (accessor.hasCollectionOptions()) {
    RadarCollectionOptionsType::serialize(accessor.getCollectionOptions(), node, AMTI_ActivityCommandType_Names::CollectionOptions_Name);
  }
  if (accessor.hasCollectionConstraints()) {
    AMTI_CollectionConstraintsType::serialize(accessor.getCollectionConstraints(), node, AMTI_ActivityCommandType_Names::CollectionConstraints_Name);
  }
  if (accessor.hasTrackingRange()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTrackingRange(), node, AMTI_ActivityCommandType_Names::TrackingRange_Name);
  }
  if (accessor.hasRepetition()) {
    RepetitionType::serialize(accessor.getRepetition(), node, AMTI_ActivityCommandType_Names::Repetition_Name);
  }
  {
    const uci::type::AMTI_ActivityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
    for (uci::type::AMTI_ActivityCommandType::ProductOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductOutputCommandBasicType::serialize(boundedList.at(i), node, AMTI_ActivityCommandType_Names::ProductOutput_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AMTI_ActivityCommandType>().release());
}

uci::type::AMTI_ActivityCommandType& AMTI_ActivityCommandType::create(const uci::type::AMTI_ActivityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AMTI_ActivityCommandType> newAccessor{boost::make_unique<asb_uci::type::AMTI_ActivityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AMTI_ActivityCommandType::destroy(uci::type::AMTI_ActivityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::AMTI_ActivityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

