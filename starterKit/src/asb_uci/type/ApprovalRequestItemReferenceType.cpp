/** @file ApprovalRequestItemReferenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ApprovalRequestItemReferenceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ApprovalRequestItemType.h"
#include "../../../include/asb_uci/type/MissionPlanActivationCommandType.h"
#include "../../../include/asb_uci/type/PlanReferenceID_ChoiceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApprovalRequestItemReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApprovalRequestItemType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanActivationCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanReferenceID_ChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ApprovalRequestItemReferenceType::ApprovalRequestItemReferenceType() = default;

ApprovalRequestItemReferenceType::~ApprovalRequestItemReferenceType() = default;

void ApprovalRequestItemReferenceType::copy(const uci::type::ApprovalRequestItemReferenceType& accessor) {
  copyImpl(accessor, false);
}

void ApprovalRequestItemReferenceType::copyImpl(const uci::type::ApprovalRequestItemReferenceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ApprovalRequestItemReferenceType&>(accessor);
    if (accessorImpl.planApproval_Accessor) {
      setPlanApproval(*(accessorImpl.planApproval_Accessor));
    } else {
      planApproval_Accessor.reset();
    }
    if (accessorImpl.requirementExecutionApproval_Accessor) {
      setRequirementExecutionApproval(*(accessorImpl.requirementExecutionApproval_Accessor));
    } else {
      requirementExecutionApproval_Accessor.reset();
    }
    if (accessorImpl.missionPlanActivationApproval_Accessor) {
      setMissionPlanActivationApproval(*(accessorImpl.missionPlanActivationApproval_Accessor));
    } else {
      missionPlanActivationApproval_Accessor.reset();
    }
  }
}

void ApprovalRequestItemReferenceType::reset() noexcept {
  planApproval_Accessor.reset();
  requirementExecutionApproval_Accessor.reset();
  missionPlanActivationApproval_Accessor.reset();
}

uci::type::ApprovalRequestItemReferenceType::ApprovalRequestItemReferenceTypeChoice ApprovalRequestItemReferenceType::getApprovalRequestItemReferenceTypeChoiceOrdinal() const noexcept {
  if (planApproval_Accessor) {
    return APPROVALREQUESTITEMREFERENCETYPE_CHOICE_PLANAPPROVAL;
  }
  if (requirementExecutionApproval_Accessor) {
    return APPROVALREQUESTITEMREFERENCETYPE_CHOICE_REQUIREMENTEXECUTIONAPPROVAL;
  }
  if (missionPlanActivationApproval_Accessor) {
    return APPROVALREQUESTITEMREFERENCETYPE_CHOICE_MISSIONPLANACTIVATIONAPPROVAL;
  }
  return APPROVALREQUESTITEMREFERENCETYPE_CHOICE_NONE;
}

uci::type::ApprovalRequestItemReferenceType& ApprovalRequestItemReferenceType::setApprovalRequestItemReferenceTypeChoiceOrdinal(uci::type::ApprovalRequestItemReferenceType::ApprovalRequestItemReferenceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case APPROVALREQUESTITEMREFERENCETYPE_CHOICE_PLANAPPROVAL:
      choosePlanApproval("setApprovalRequestItemReferenceTypeChoiceOrdinal", type);
      break;
    case APPROVALREQUESTITEMREFERENCETYPE_CHOICE_REQUIREMENTEXECUTIONAPPROVAL:
      chooseRequirementExecutionApproval("setApprovalRequestItemReferenceTypeChoiceOrdinal", type);
      break;
    case APPROVALREQUESTITEMREFERENCETYPE_CHOICE_MISSIONPLANACTIVATIONAPPROVAL:
      chooseMissionPlanActivationApproval();
      break;
    default:
      throw uci::base::UCIException("Error in setApprovalRequestItemReferenceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PlanReferenceID_ChoiceType& ApprovalRequestItemReferenceType::getPlanApproval_() const {
  if (planApproval_Accessor) {
    return *planApproval_Accessor;
  }
  throw uci::base::UCIException("Error in getPlanApproval(): Unable to get PlanApproval, field not selected");
}

const uci::type::PlanReferenceID_ChoiceType& ApprovalRequestItemReferenceType::getPlanApproval() const {
  return getPlanApproval_();
}

uci::type::PlanReferenceID_ChoiceType& ApprovalRequestItemReferenceType::getPlanApproval() {
  return getPlanApproval_();
}

uci::type::ApprovalRequestItemReferenceType& ApprovalRequestItemReferenceType::setPlanApproval(const uci::type::PlanReferenceID_ChoiceType& accessor) {
  choosePlanApproval(accessor.getAccessorType());
  if (&accessor != planApproval_Accessor.get()) {
    planApproval_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ApprovalRequestItemReferenceType::isPlanApproval() const noexcept {
  return static_cast<bool>(planApproval_Accessor);
}

uci::type::PlanReferenceID_ChoiceType& ApprovalRequestItemReferenceType::choosePlanApproval(const std::string& method, uci::base::accessorType::AccessorType type) {
  requirementExecutionApproval_Accessor.reset();
  missionPlanActivationApproval_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planReferenceID_ChoiceType : type};
  if ((!planApproval_Accessor) || (planApproval_Accessor->getAccessorType() != requestedType)) {
    planApproval_Accessor = PlanReferenceID_ChoiceType::create(type);
    if (!planApproval_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *planApproval_Accessor;
}

uci::type::PlanReferenceID_ChoiceType& ApprovalRequestItemReferenceType::choosePlanApproval(uci::base::accessorType::AccessorType type) {
  return choosePlanApproval("choosePlanApproval", type);
}

uci::type::ApprovalRequestItemType& ApprovalRequestItemReferenceType::getRequirementExecutionApproval_() const {
  if (requirementExecutionApproval_Accessor) {
    return *requirementExecutionApproval_Accessor;
  }
  throw uci::base::UCIException("Error in getRequirementExecutionApproval(): Unable to get RequirementExecutionApproval, field not selected");
}

const uci::type::ApprovalRequestItemType& ApprovalRequestItemReferenceType::getRequirementExecutionApproval() const {
  return getRequirementExecutionApproval_();
}

uci::type::ApprovalRequestItemType& ApprovalRequestItemReferenceType::getRequirementExecutionApproval() {
  return getRequirementExecutionApproval_();
}

uci::type::ApprovalRequestItemReferenceType& ApprovalRequestItemReferenceType::setRequirementExecutionApproval(const uci::type::ApprovalRequestItemType& accessor) {
  chooseRequirementExecutionApproval();
  if (&accessor != requirementExecutionApproval_Accessor.get()) {
    requirementExecutionApproval_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ApprovalRequestItemReferenceType::isRequirementExecutionApproval() const noexcept {
  return static_cast<bool>(requirementExecutionApproval_Accessor);
}

uci::type::ApprovalRequestItemType& ApprovalRequestItemReferenceType::chooseRequirementExecutionApproval(const std::string& method, uci::base::accessorType::AccessorType type) {
  planApproval_Accessor.reset();
  missionPlanActivationApproval_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::approvalRequestItemType : type};
  if ((!requirementExecutionApproval_Accessor) || (requirementExecutionApproval_Accessor->getAccessorType() != requestedType)) {
    requirementExecutionApproval_Accessor = ApprovalRequestItemType::create(type);
    if (!requirementExecutionApproval_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requirementExecutionApproval_Accessor;
}

uci::type::ApprovalRequestItemType& ApprovalRequestItemReferenceType::chooseRequirementExecutionApproval(uci::base::accessorType::AccessorType type) {
  return chooseRequirementExecutionApproval("chooseRequirementExecutionApproval", type);
}

uci::type::ApprovalRequestItemReferenceType::MissionPlanActivationApproval& ApprovalRequestItemReferenceType::getMissionPlanActivationApproval_() const {
  if (missionPlanActivationApproval_Accessor) {
    return *missionPlanActivationApproval_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionPlanActivationApproval(): Unable to get MissionPlanActivationApproval, field not selected");
}

const uci::type::ApprovalRequestItemReferenceType::MissionPlanActivationApproval& ApprovalRequestItemReferenceType::getMissionPlanActivationApproval() const {
  return getMissionPlanActivationApproval_();
}

uci::type::ApprovalRequestItemReferenceType::MissionPlanActivationApproval& ApprovalRequestItemReferenceType::getMissionPlanActivationApproval() {
  return getMissionPlanActivationApproval_();
}

uci::type::ApprovalRequestItemReferenceType& ApprovalRequestItemReferenceType::setMissionPlanActivationApproval(const uci::type::ApprovalRequestItemReferenceType::MissionPlanActivationApproval& accessor) {
  chooseMissionPlanActivationApproval();
  if (&accessor != missionPlanActivationApproval_Accessor.get()) {
    missionPlanActivationApproval_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ApprovalRequestItemReferenceType::isMissionPlanActivationApproval() const noexcept {
  return static_cast<bool>(missionPlanActivationApproval_Accessor);
}

uci::type::ApprovalRequestItemReferenceType::MissionPlanActivationApproval& ApprovalRequestItemReferenceType::chooseMissionPlanActivationApproval() {
  planApproval_Accessor.reset();
  requirementExecutionApproval_Accessor.reset();
  if (!missionPlanActivationApproval_Accessor) {
    missionPlanActivationApproval_Accessor = boost::make_unique<MissionPlanActivationApproval>(1, SIZE_MAX);
  }
  return *missionPlanActivationApproval_Accessor;
}

std::unique_ptr<ApprovalRequestItemReferenceType> ApprovalRequestItemReferenceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::approvalRequestItemReferenceType : type};
  return (requestedType == uci::type::accessorType::approvalRequestItemReferenceType) ? boost::make_unique<ApprovalRequestItemReferenceType>() : nullptr;
}

/**  */
namespace ApprovalRequestItemReferenceType_Names {

constexpr const char* Extern_Type_Name{"ApprovalRequestItemReferenceType"};
constexpr const char* PlanApproval_Name{"PlanApproval"};
constexpr const char* RequirementExecutionApproval_Name{"RequirementExecutionApproval"};
constexpr const char* MissionPlanActivationApproval_Name{"MissionPlanActivationApproval"};

} // namespace ApprovalRequestItemReferenceType_Names

void ApprovalRequestItemReferenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ApprovalRequestItemReferenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ApprovalRequestItemReferenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ApprovalRequestItemReferenceType_Names::PlanApproval_Name) {
      PlanReferenceID_ChoiceType::deserialize(valueType.second, accessor.choosePlanApproval(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ApprovalRequestItemReferenceType_Names::RequirementExecutionApproval_Name) {
      ApprovalRequestItemType::deserialize(valueType.second, accessor.chooseRequirementExecutionApproval(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ApprovalRequestItemReferenceType_Names::MissionPlanActivationApproval_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ApprovalRequestItemReferenceType::MissionPlanActivationApproval& boundedList = accessor.chooseMissionPlanActivationApproval();
        const uci::type::ApprovalRequestItemReferenceType::MissionPlanActivationApproval::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::MissionPlanActivationCommandType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ApprovalRequestItemReferenceType::serialize(const uci::type::ApprovalRequestItemReferenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ApprovalRequestItemReferenceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ApprovalRequestItemReferenceType_Names::Extern_Type_Name);
  }
  if (accessor.isPlanApproval()) {
    PlanReferenceID_ChoiceType::serialize(accessor.getPlanApproval(), node, ApprovalRequestItemReferenceType_Names::PlanApproval_Name);
  } else if (accessor.isRequirementExecutionApproval()) {
    ApprovalRequestItemType::serialize(accessor.getRequirementExecutionApproval(), node, ApprovalRequestItemReferenceType_Names::RequirementExecutionApproval_Name);
  } else if (accessor.isMissionPlanActivationApproval()) {
    {
      const uci::type::ApprovalRequestItemReferenceType::MissionPlanActivationApproval& boundedList = accessor.getMissionPlanActivationApproval();
      for (uci::type::ApprovalRequestItemReferenceType::MissionPlanActivationApproval::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::MissionPlanActivationCommandType::serialize(boundedList.at(i), node, ApprovalRequestItemReferenceType_Names::MissionPlanActivationApproval_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ApprovalRequestItemReferenceType& ApprovalRequestItemReferenceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ApprovalRequestItemReferenceType>().release());
}

uci::type::ApprovalRequestItemReferenceType& ApprovalRequestItemReferenceType::create(const uci::type::ApprovalRequestItemReferenceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ApprovalRequestItemReferenceType> newAccessor{boost::make_unique<asb_uci::type::ApprovalRequestItemReferenceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ApprovalRequestItemReferenceType::destroy(uci::type::ApprovalRequestItemReferenceType& accessor) {
  delete dynamic_cast<asb_uci::type::ApprovalRequestItemReferenceType*>(&accessor);
}

} // namespace type

} // namespace uci

