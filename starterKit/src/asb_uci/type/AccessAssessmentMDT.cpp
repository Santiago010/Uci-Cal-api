/** @file AccessAssessmentMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AccessAssessmentMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AccessAssessmentID_Type.h"
#include "../../../include/asb_uci/type/AccessAssessmentType.h"
#include "../../../include/asb_uci/type/AssociatedAccessAssessmentInfoType.h"
#include "../../../include/asb_uci/type/NotificationSourceType.h"
#include "../../../include/asb_uci/type/RequestID_Type.h"
#include "../../../include/asb_uci/type/VisibleString1024Type.h"
#include "../../../include/asb_uci/type/VisibleString32Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AccessAssessmentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AccessAssessmentMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AccessAssessmentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AssociatedAccessAssessmentInfoType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NotificationSourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequestID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString1024Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString32Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AccessAssessmentMDT::AccessAssessmentMDT()
  : accessAssessmentID_Accessor{boost::make_unique<AccessAssessmentID_Type>()},
    assessementSource_Accessor{boost::make_unique<NotificationSourceType>()},
    associatedAccessAssessmentInfo_Accessor{boost::make_unique<AssociatedAccessAssessmentInfo>(0, 8)},
    assessment_Accessor{boost::make_unique<Assessment>(1, SIZE_MAX)} {
}

AccessAssessmentMDT::~AccessAssessmentMDT() = default;

void AccessAssessmentMDT::copy(const uci::type::AccessAssessmentMDT& accessor) {
  copyImpl(accessor, false);
}

void AccessAssessmentMDT::copyImpl(const uci::type::AccessAssessmentMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AccessAssessmentMDT&>(accessor);
    setAccessAssessmentID(*(accessorImpl.accessAssessmentID_Accessor));
    if (accessorImpl.assessmentName_Accessor) {
      setAssessmentName(*(accessorImpl.assessmentName_Accessor));
    } else {
      assessmentName_Accessor.reset();
    }
    if (accessorImpl.accessAssessmentRequestID_Accessor) {
      setAccessAssessmentRequestID(*(accessorImpl.accessAssessmentRequestID_Accessor));
    } else {
      accessAssessmentRequestID_Accessor.reset();
    }
    setAssessementSource(*(accessorImpl.assessementSource_Accessor));
    setAssociatedAccessAssessmentInfo(*(accessorImpl.associatedAccessAssessmentInfo_Accessor));
    setAssessment(*(accessorImpl.assessment_Accessor));
    setCompletionTime(accessorImpl.completionTime_Accessor);
    if (accessorImpl.assessmentNarrative_Accessor) {
      setAssessmentNarrative(*(accessorImpl.assessmentNarrative_Accessor));
    } else {
      assessmentNarrative_Accessor.reset();
    }
  }
}

void AccessAssessmentMDT::reset() noexcept {
  accessAssessmentID_Accessor->reset();
  assessmentName_Accessor.reset();
  accessAssessmentRequestID_Accessor.reset();
  assessementSource_Accessor->reset();
  associatedAccessAssessmentInfo_Accessor->reset();
  assessment_Accessor->reset();
  completionTime_Accessor = 0;
  assessmentNarrative_Accessor.reset();
}

const uci::type::AccessAssessmentID_Type& AccessAssessmentMDT::getAccessAssessmentID() const {
  return *accessAssessmentID_Accessor;
}

uci::type::AccessAssessmentID_Type& AccessAssessmentMDT::getAccessAssessmentID() {
  return *accessAssessmentID_Accessor;
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::setAccessAssessmentID(const uci::type::AccessAssessmentID_Type& accessor) {
  if (&accessor != accessAssessmentID_Accessor.get()) {
    accessAssessmentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VisibleString32Type& AccessAssessmentMDT::getAssessmentName_() const {
  if (assessmentName_Accessor) {
    return *assessmentName_Accessor;
  }
  throw uci::base::UCIException("Error in getAssessmentName(): An attempt was made to get an optional field that was not enabled, call hasAssessmentName() to determine if it is safe to call getAssessmentName()");
}

const uci::type::VisibleString32Type& AccessAssessmentMDT::getAssessmentName() const {
  return getAssessmentName_();
}

uci::type::VisibleString32Type& AccessAssessmentMDT::getAssessmentName() {
  return getAssessmentName_();
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::setAssessmentName(const uci::type::VisibleString32Type& value) {
  return setAssessmentName(value.c_str());
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::setAssessmentName(const std::string& value) {
  return setAssessmentName(value.c_str());
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::setAssessmentName(const char* value) {
  enableAssessmentName().setStringValue(value);
  return *this;
}

bool AccessAssessmentMDT::hasAssessmentName() const noexcept {
  return static_cast<bool>(assessmentName_Accessor);
}

uci::type::VisibleString32Type& AccessAssessmentMDT::enableAssessmentName(uci::base::accessorType::AccessorType type) {
  if (!assessmentName_Accessor) {
    assessmentName_Accessor = VisibleString32Type::create(type);
  }
  return *assessmentName_Accessor;
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::clearAssessmentName() noexcept {
  assessmentName_Accessor.reset();
  return *this;
}

uci::type::RequestID_Type& AccessAssessmentMDT::getAccessAssessmentRequestID_() const {
  if (accessAssessmentRequestID_Accessor) {
    return *accessAssessmentRequestID_Accessor;
  }
  throw uci::base::UCIException("Error in getAccessAssessmentRequestID(): An attempt was made to get an optional field that was not enabled, call hasAccessAssessmentRequestID() to determine if it is safe to call getAccessAssessmentRequestID()");
}

const uci::type::RequestID_Type& AccessAssessmentMDT::getAccessAssessmentRequestID() const {
  return getAccessAssessmentRequestID_();
}

uci::type::RequestID_Type& AccessAssessmentMDT::getAccessAssessmentRequestID() {
  return getAccessAssessmentRequestID_();
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::setAccessAssessmentRequestID(const uci::type::RequestID_Type& accessor) {
  enableAccessAssessmentRequestID();
  if (&accessor != accessAssessmentRequestID_Accessor.get()) {
    accessAssessmentRequestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AccessAssessmentMDT::hasAccessAssessmentRequestID() const noexcept {
  return static_cast<bool>(accessAssessmentRequestID_Accessor);
}

uci::type::RequestID_Type& AccessAssessmentMDT::enableAccessAssessmentRequestID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requestID_Type : type};
  if ((!accessAssessmentRequestID_Accessor) || (accessAssessmentRequestID_Accessor->getAccessorType() != requestedType)) {
    accessAssessmentRequestID_Accessor = RequestID_Type::create(requestedType);
    if (!accessAssessmentRequestID_Accessor) {
      throw uci::base::UCIException("Error in enableAccessAssessmentRequestID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *accessAssessmentRequestID_Accessor;
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::clearAccessAssessmentRequestID() noexcept {
  accessAssessmentRequestID_Accessor.reset();
  return *this;
}

const uci::type::NotificationSourceType& AccessAssessmentMDT::getAssessementSource() const {
  return *assessementSource_Accessor;
}

uci::type::NotificationSourceType& AccessAssessmentMDT::getAssessementSource() {
  return *assessementSource_Accessor;
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::setAssessementSource(const uci::type::NotificationSourceType& accessor) {
  if (&accessor != assessementSource_Accessor.get()) {
    assessementSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AccessAssessmentMDT::AssociatedAccessAssessmentInfo& AccessAssessmentMDT::getAssociatedAccessAssessmentInfo() const {
  return *associatedAccessAssessmentInfo_Accessor;
}

uci::type::AccessAssessmentMDT::AssociatedAccessAssessmentInfo& AccessAssessmentMDT::getAssociatedAccessAssessmentInfo() {
  return *associatedAccessAssessmentInfo_Accessor;
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::setAssociatedAccessAssessmentInfo(const uci::type::AccessAssessmentMDT::AssociatedAccessAssessmentInfo& accessor) {
  if (&accessor != associatedAccessAssessmentInfo_Accessor.get()) {
    associatedAccessAssessmentInfo_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AccessAssessmentMDT::Assessment& AccessAssessmentMDT::getAssessment() const {
  return *assessment_Accessor;
}

uci::type::AccessAssessmentMDT::Assessment& AccessAssessmentMDT::getAssessment() {
  return *assessment_Accessor;
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::setAssessment(const uci::type::AccessAssessmentMDT::Assessment& accessor) {
  if (&accessor != assessment_Accessor.get()) {
    assessment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue AccessAssessmentMDT::getCompletionTime() const {
  return completionTime_Accessor;
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::setCompletionTime(uci::type::DateTimeTypeValue value) {
  completionTime_Accessor = value;
  return *this;
}


uci::type::VisibleString1024Type& AccessAssessmentMDT::getAssessmentNarrative_() const {
  if (assessmentNarrative_Accessor) {
    return *assessmentNarrative_Accessor;
  }
  throw uci::base::UCIException("Error in getAssessmentNarrative(): An attempt was made to get an optional field that was not enabled, call hasAssessmentNarrative() to determine if it is safe to call getAssessmentNarrative()");
}

const uci::type::VisibleString1024Type& AccessAssessmentMDT::getAssessmentNarrative() const {
  return getAssessmentNarrative_();
}

uci::type::VisibleString1024Type& AccessAssessmentMDT::getAssessmentNarrative() {
  return getAssessmentNarrative_();
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::setAssessmentNarrative(const uci::type::VisibleString1024Type& value) {
  return setAssessmentNarrative(value.c_str());
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::setAssessmentNarrative(const std::string& value) {
  return setAssessmentNarrative(value.c_str());
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::setAssessmentNarrative(const char* value) {
  enableAssessmentNarrative().setStringValue(value);
  return *this;
}

bool AccessAssessmentMDT::hasAssessmentNarrative() const noexcept {
  return static_cast<bool>(assessmentNarrative_Accessor);
}

uci::type::VisibleString1024Type& AccessAssessmentMDT::enableAssessmentNarrative(uci::base::accessorType::AccessorType type) {
  if (!assessmentNarrative_Accessor) {
    assessmentNarrative_Accessor = VisibleString1024Type::create(type);
  }
  return *assessmentNarrative_Accessor;
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::clearAssessmentNarrative() noexcept {
  assessmentNarrative_Accessor.reset();
  return *this;
}

std::unique_ptr<AccessAssessmentMDT> AccessAssessmentMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::accessAssessmentMDT : type};
  return (requestedType == uci::type::accessorType::accessAssessmentMDT) ? boost::make_unique<AccessAssessmentMDT>() : nullptr;
}

/**  */
namespace AccessAssessmentMDT_Names {

constexpr const char* Extern_Type_Name{"AccessAssessmentMDT"};
constexpr const char* AccessAssessmentID_Name{"AccessAssessmentID"};
constexpr const char* AssessmentName_Name{"AssessmentName"};
constexpr const char* AccessAssessmentRequestID_Name{"AccessAssessmentRequestID"};
constexpr const char* AssessementSource_Name{"AssessementSource"};
constexpr const char* AssociatedAccessAssessmentInfo_Name{"AssociatedAccessAssessmentInfo"};
constexpr const char* Assessment_Name{"Assessment"};
constexpr const char* CompletionTime_Name{"CompletionTime"};
constexpr const char* AssessmentNarrative_Name{"AssessmentNarrative"};

} // namespace AccessAssessmentMDT_Names

void AccessAssessmentMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::AccessAssessmentMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AccessAssessmentMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AccessAssessmentMDT_Names::AccessAssessmentID_Name) {
      AccessAssessmentID_Type::deserialize(valueType.second, accessor.getAccessAssessmentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AccessAssessmentMDT_Names::AssessmentName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAssessmentName(*value);
      }
    } else if (valueType.first == nsPrefix + AccessAssessmentMDT_Names::AccessAssessmentRequestID_Name) {
      RequestID_Type::deserialize(valueType.second, accessor.enableAccessAssessmentRequestID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AccessAssessmentMDT_Names::AssessementSource_Name) {
      NotificationSourceType::deserialize(valueType.second, accessor.getAssessementSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AccessAssessmentMDT_Names::AssociatedAccessAssessmentInfo_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AccessAssessmentMDT::AssociatedAccessAssessmentInfo& boundedList = accessor.getAssociatedAccessAssessmentInfo();
        const uci::type::AccessAssessmentMDT::AssociatedAccessAssessmentInfo::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AssociatedAccessAssessmentInfoType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + AccessAssessmentMDT_Names::Assessment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AccessAssessmentMDT::Assessment& boundedList = accessor.getAssessment();
        const uci::type::AccessAssessmentMDT::Assessment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AccessAssessmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + AccessAssessmentMDT_Names::CompletionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCompletionTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + AccessAssessmentMDT_Names::AssessmentNarrative_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAssessmentNarrative(*value);
      }
    }
  }
}

std::string AccessAssessmentMDT::serialize(const uci::type::AccessAssessmentMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AccessAssessmentMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AccessAssessmentMDT_Names::Extern_Type_Name);
  }
  AccessAssessmentID_Type::serialize(accessor.getAccessAssessmentID(), node, AccessAssessmentMDT_Names::AccessAssessmentID_Name);
  if (accessor.hasAssessmentName()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getAssessmentName(), node, AccessAssessmentMDT_Names::AssessmentName_Name);
  }
  if (accessor.hasAccessAssessmentRequestID()) {
    RequestID_Type::serialize(accessor.getAccessAssessmentRequestID(), node, AccessAssessmentMDT_Names::AccessAssessmentRequestID_Name);
  }
  NotificationSourceType::serialize(accessor.getAssessementSource(), node, AccessAssessmentMDT_Names::AssessementSource_Name);
  {
    const uci::type::AccessAssessmentMDT::AssociatedAccessAssessmentInfo& boundedList = accessor.getAssociatedAccessAssessmentInfo();
    for (uci::type::AccessAssessmentMDT::AssociatedAccessAssessmentInfo::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AssociatedAccessAssessmentInfoType::serialize(boundedList.at(i), node, AccessAssessmentMDT_Names::AssociatedAccessAssessmentInfo_Name);
    }
  }
  {
    const uci::type::AccessAssessmentMDT::Assessment& boundedList = accessor.getAssessment();
    for (uci::type::AccessAssessmentMDT::Assessment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AccessAssessmentType::serialize(boundedList.at(i), node, AccessAssessmentMDT_Names::Assessment_Name);
    }
  }
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getCompletionTime(), node, AccessAssessmentMDT_Names::CompletionTime_Name);
  if (accessor.hasAssessmentNarrative()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getAssessmentNarrative(), node, AccessAssessmentMDT_Names::AssessmentNarrative_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AccessAssessmentMDT>().release());
}

uci::type::AccessAssessmentMDT& AccessAssessmentMDT::create(const uci::type::AccessAssessmentMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AccessAssessmentMDT> newAccessor{boost::make_unique<asb_uci::type::AccessAssessmentMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AccessAssessmentMDT::destroy(uci::type::AccessAssessmentMDT& accessor) {
  delete dynamic_cast<asb_uci::type::AccessAssessmentMDT*>(&accessor);
}

} // namespace type

} // namespace uci

