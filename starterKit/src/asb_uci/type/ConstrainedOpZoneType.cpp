/** @file ConstrainedOpZoneType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ConstrainedOpZoneType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OpZoneCategoryEnum.h"
#include "asb_uci/type/OpZoneCategoryType.h"
#include "asb_uci/type/OpZoneID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ConstrainedOpZoneType.h"
#include "uci/type/OpZoneCategoryEnum.h"
#include "uci/type/OpZoneCategoryType.h"
#include "uci/type/OpZoneID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ConstrainedOpZoneType::ConstrainedOpZoneType()
  : zoneCategory_Accessor{boost::make_unique<OpZoneCategoryEnum>()},
    opZoneID_Accessor{boost::make_unique<OpZoneID_Type>()} {
}

ConstrainedOpZoneType::~ConstrainedOpZoneType() = default;

void ConstrainedOpZoneType::copy(const uci::type::ConstrainedOpZoneType& accessor) {
  copyImpl(accessor, false);
}

void ConstrainedOpZoneType::copyImpl(const uci::type::ConstrainedOpZoneType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ConstrainedOpZoneType&>(accessor);
    setZoneCategory(*(accessorImpl.zoneCategory_Accessor));
    if (accessorImpl.categoryUniqueData_Accessor) {
      setCategoryUniqueData(*(accessorImpl.categoryUniqueData_Accessor));
    } else {
      categoryUniqueData_Accessor.reset();
    }
    setOpZoneID(*(accessorImpl.opZoneID_Accessor));
  }
}

void ConstrainedOpZoneType::reset() noexcept {
  zoneCategory_Accessor->reset();
  categoryUniqueData_Accessor.reset();
  opZoneID_Accessor->reset();
}

const uci::type::OpZoneCategoryEnum& ConstrainedOpZoneType::getZoneCategory() const {
  return *zoneCategory_Accessor;
}

uci::type::OpZoneCategoryEnum& ConstrainedOpZoneType::getZoneCategory() {
  return *zoneCategory_Accessor;
}

uci::type::ConstrainedOpZoneType& ConstrainedOpZoneType::setZoneCategory(const uci::type::OpZoneCategoryEnum& accessor) {
  if (&accessor != zoneCategory_Accessor.get()) {
    zoneCategory_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ConstrainedOpZoneType& ConstrainedOpZoneType::setZoneCategory(uci::type::OpZoneCategoryEnum::EnumerationItem value) {
  zoneCategory_Accessor->setValue(value);
  return *this;
}


uci::type::OpZoneCategoryType& ConstrainedOpZoneType::getCategoryUniqueData_() const {
  if (categoryUniqueData_Accessor) {
    return *categoryUniqueData_Accessor;
  }
  throw uci::base::UCIException("Error in getCategoryUniqueData(): An attempt was made to get an optional field that was not enabled, call hasCategoryUniqueData() to determine if it is safe to call getCategoryUniqueData()");
}

const uci::type::OpZoneCategoryType& ConstrainedOpZoneType::getCategoryUniqueData() const {
  return getCategoryUniqueData_();
}

uci::type::OpZoneCategoryType& ConstrainedOpZoneType::getCategoryUniqueData() {
  return getCategoryUniqueData_();
}

uci::type::ConstrainedOpZoneType& ConstrainedOpZoneType::setCategoryUniqueData(const uci::type::OpZoneCategoryType& accessor) {
  enableCategoryUniqueData();
  if (&accessor != categoryUniqueData_Accessor.get()) {
    categoryUniqueData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ConstrainedOpZoneType::hasCategoryUniqueData() const noexcept {
  return static_cast<bool>(categoryUniqueData_Accessor);
}

uci::type::OpZoneCategoryType& ConstrainedOpZoneType::enableCategoryUniqueData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneCategoryType : type};
  if ((!categoryUniqueData_Accessor) || (categoryUniqueData_Accessor->getAccessorType() != requestedType)) {
    categoryUniqueData_Accessor = OpZoneCategoryType::create(requestedType);
    if (!categoryUniqueData_Accessor) {
      throw uci::base::UCIException("Error in enableCategoryUniqueData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *categoryUniqueData_Accessor;
}

uci::type::ConstrainedOpZoneType& ConstrainedOpZoneType::clearCategoryUniqueData() noexcept {
  categoryUniqueData_Accessor.reset();
  return *this;
}

const uci::type::OpZoneID_Type& ConstrainedOpZoneType::getOpZoneID() const {
  return *opZoneID_Accessor;
}

uci::type::OpZoneID_Type& ConstrainedOpZoneType::getOpZoneID() {
  return *opZoneID_Accessor;
}

uci::type::ConstrainedOpZoneType& ConstrainedOpZoneType::setOpZoneID(const uci::type::OpZoneID_Type& accessor) {
  if (&accessor != opZoneID_Accessor.get()) {
    opZoneID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ConstrainedOpZoneType> ConstrainedOpZoneType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::constrainedOpZoneType : type};
  return (requestedType == uci::type::accessorType::constrainedOpZoneType) ? boost::make_unique<ConstrainedOpZoneType>() : nullptr;
}

/**  */
namespace ConstrainedOpZoneType_Names {

constexpr const char* Extern_Type_Name{"ConstrainedOpZoneType"};
constexpr const char* ZoneCategory_Name{"ZoneCategory"};
constexpr const char* CategoryUniqueData_Name{"CategoryUniqueData"};
constexpr const char* OpZoneID_Name{"OpZoneID"};

} // namespace ConstrainedOpZoneType_Names

void ConstrainedOpZoneType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ConstrainedOpZoneType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ConstrainedOpZoneType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ConstrainedOpZoneType_Names::ZoneCategory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getZoneCategory().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ConstrainedOpZoneType_Names::CategoryUniqueData_Name) {
      OpZoneCategoryType::deserialize(valueType.second, accessor.enableCategoryUniqueData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ConstrainedOpZoneType_Names::OpZoneID_Name) {
      OpZoneID_Type::deserialize(valueType.second, accessor.getOpZoneID(), nodeName, nsPrefix);
    }
  }
}

std::string ConstrainedOpZoneType::serialize(const uci::type::ConstrainedOpZoneType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ConstrainedOpZoneType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ConstrainedOpZoneType_Names::Extern_Type_Name);
  }
  OpZoneCategoryEnum::serialize(accessor.getZoneCategory(), node, ConstrainedOpZoneType_Names::ZoneCategory_Name, false);
  if (accessor.hasCategoryUniqueData()) {
    OpZoneCategoryType::serialize(accessor.getCategoryUniqueData(), node, ConstrainedOpZoneType_Names::CategoryUniqueData_Name);
  }
  OpZoneID_Type::serialize(accessor.getOpZoneID(), node, ConstrainedOpZoneType_Names::OpZoneID_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ConstrainedOpZoneType& ConstrainedOpZoneType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ConstrainedOpZoneType>().release());
}

uci::type::ConstrainedOpZoneType& ConstrainedOpZoneType::create(const uci::type::ConstrainedOpZoneType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ConstrainedOpZoneType> newAccessor{boost::make_unique<asb_uci::type::ConstrainedOpZoneType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ConstrainedOpZoneType::destroy(uci::type::ConstrainedOpZoneType& accessor) {
  delete dynamic_cast<asb_uci::type::ConstrainedOpZoneType*>(&accessor);
}

} // namespace type

} // namespace uci

