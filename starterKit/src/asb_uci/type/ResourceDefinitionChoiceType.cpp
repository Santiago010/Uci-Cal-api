/** @file ResourceDefinitionChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ResourceDefinitionChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ResourceDefinitionDigitalType.h"
#include "../../../include/asb_uci/type/ResourceDefinitionRF_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceDefinitionChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceDefinitionDigitalType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceDefinitionRF_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResourceDefinitionChoiceType::ResourceDefinitionChoiceType() = default;

ResourceDefinitionChoiceType::~ResourceDefinitionChoiceType() = default;

void ResourceDefinitionChoiceType::copy(const uci::type::ResourceDefinitionChoiceType& accessor) {
  copyImpl(accessor, false);
}

void ResourceDefinitionChoiceType::copyImpl(const uci::type::ResourceDefinitionChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResourceDefinitionChoiceType&>(accessor);
    if (accessorImpl.allocateRF_Resources_Accessor) {
      setAllocateRF_Resources(*(accessorImpl.allocateRF_Resources_Accessor));
    } else {
      allocateRF_Resources_Accessor.reset();
    }
    if (accessorImpl.allocateDigitalResources_Accessor) {
      setAllocateDigitalResources(*(accessorImpl.allocateDigitalResources_Accessor));
    } else {
      allocateDigitalResources_Accessor.reset();
    }
  }
}

void ResourceDefinitionChoiceType::reset() noexcept {
  allocateRF_Resources_Accessor.reset();
  allocateDigitalResources_Accessor.reset();
}

uci::type::ResourceDefinitionChoiceType::ResourceDefinitionChoiceTypeChoice ResourceDefinitionChoiceType::getResourceDefinitionChoiceTypeChoiceOrdinal() const noexcept {
  if (allocateRF_Resources_Accessor) {
    return RESOURCEDEFINITIONCHOICETYPE_CHOICE_ALLOCATERF_RESOURCES;
  }
  if (allocateDigitalResources_Accessor) {
    return RESOURCEDEFINITIONCHOICETYPE_CHOICE_ALLOCATEDIGITALRESOURCES;
  }
  return RESOURCEDEFINITIONCHOICETYPE_CHOICE_NONE;
}

uci::type::ResourceDefinitionChoiceType& ResourceDefinitionChoiceType::setResourceDefinitionChoiceTypeChoiceOrdinal(uci::type::ResourceDefinitionChoiceType::ResourceDefinitionChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case RESOURCEDEFINITIONCHOICETYPE_CHOICE_ALLOCATERF_RESOURCES:
      chooseAllocateRF_Resources("setResourceDefinitionChoiceTypeChoiceOrdinal", type);
      break;
    case RESOURCEDEFINITIONCHOICETYPE_CHOICE_ALLOCATEDIGITALRESOURCES:
      chooseAllocateDigitalResources("setResourceDefinitionChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setResourceDefinitionChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ResourceDefinitionRF_Type& ResourceDefinitionChoiceType::getAllocateRF_Resources_() const {
  if (allocateRF_Resources_Accessor) {
    return *allocateRF_Resources_Accessor;
  }
  throw uci::base::UCIException("Error in getAllocateRF_Resources(): Unable to get AllocateRF_Resources, field not selected");
}

const uci::type::ResourceDefinitionRF_Type& ResourceDefinitionChoiceType::getAllocateRF_Resources() const {
  return getAllocateRF_Resources_();
}

uci::type::ResourceDefinitionRF_Type& ResourceDefinitionChoiceType::getAllocateRF_Resources() {
  return getAllocateRF_Resources_();
}

uci::type::ResourceDefinitionChoiceType& ResourceDefinitionChoiceType::setAllocateRF_Resources(const uci::type::ResourceDefinitionRF_Type& accessor) {
  chooseAllocateRF_Resources();
  if (&accessor != allocateRF_Resources_Accessor.get()) {
    allocateRF_Resources_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResourceDefinitionChoiceType::isAllocateRF_Resources() const noexcept {
  return static_cast<bool>(allocateRF_Resources_Accessor);
}

uci::type::ResourceDefinitionRF_Type& ResourceDefinitionChoiceType::chooseAllocateRF_Resources(const std::string& method, uci::base::accessorType::AccessorType type) {
  allocateDigitalResources_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceDefinitionRF_Type : type};
  if ((!allocateRF_Resources_Accessor) || (allocateRF_Resources_Accessor->getAccessorType() != requestedType)) {
    allocateRF_Resources_Accessor = ResourceDefinitionRF_Type::create(type);
    if (!allocateRF_Resources_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *allocateRF_Resources_Accessor;
}

uci::type::ResourceDefinitionRF_Type& ResourceDefinitionChoiceType::chooseAllocateRF_Resources(uci::base::accessorType::AccessorType type) {
  return chooseAllocateRF_Resources("chooseAllocateRF_Resources", type);
}

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionChoiceType::getAllocateDigitalResources_() const {
  if (allocateDigitalResources_Accessor) {
    return *allocateDigitalResources_Accessor;
  }
  throw uci::base::UCIException("Error in getAllocateDigitalResources(): Unable to get AllocateDigitalResources, field not selected");
}

const uci::type::ResourceDefinitionDigitalType& ResourceDefinitionChoiceType::getAllocateDigitalResources() const {
  return getAllocateDigitalResources_();
}

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionChoiceType::getAllocateDigitalResources() {
  return getAllocateDigitalResources_();
}

uci::type::ResourceDefinitionChoiceType& ResourceDefinitionChoiceType::setAllocateDigitalResources(const uci::type::ResourceDefinitionDigitalType& accessor) {
  chooseAllocateDigitalResources();
  if (&accessor != allocateDigitalResources_Accessor.get()) {
    allocateDigitalResources_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResourceDefinitionChoiceType::isAllocateDigitalResources() const noexcept {
  return static_cast<bool>(allocateDigitalResources_Accessor);
}

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionChoiceType::chooseAllocateDigitalResources(const std::string& method, uci::base::accessorType::AccessorType type) {
  allocateRF_Resources_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceDefinitionDigitalType : type};
  if ((!allocateDigitalResources_Accessor) || (allocateDigitalResources_Accessor->getAccessorType() != requestedType)) {
    allocateDigitalResources_Accessor = ResourceDefinitionDigitalType::create(type);
    if (!allocateDigitalResources_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *allocateDigitalResources_Accessor;
}

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionChoiceType::chooseAllocateDigitalResources(uci::base::accessorType::AccessorType type) {
  return chooseAllocateDigitalResources("chooseAllocateDigitalResources", type);
}

std::unique_ptr<ResourceDefinitionChoiceType> ResourceDefinitionChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceDefinitionChoiceType : type};
  return (requestedType == uci::type::accessorType::resourceDefinitionChoiceType) ? boost::make_unique<ResourceDefinitionChoiceType>() : nullptr;
}

/**  */
namespace ResourceDefinitionChoiceType_Names {

constexpr const char* Extern_Type_Name{"ResourceDefinitionChoiceType"};
constexpr const char* AllocateRF_Resources_Name{"AllocateRF_Resources"};
constexpr const char* AllocateDigitalResources_Name{"AllocateDigitalResources"};

} // namespace ResourceDefinitionChoiceType_Names

void ResourceDefinitionChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResourceDefinitionChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResourceDefinitionChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResourceDefinitionChoiceType_Names::AllocateRF_Resources_Name) {
      ResourceDefinitionRF_Type::deserialize(valueType.second, accessor.chooseAllocateRF_Resources(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResourceDefinitionChoiceType_Names::AllocateDigitalResources_Name) {
      ResourceDefinitionDigitalType::deserialize(valueType.second, accessor.chooseAllocateDigitalResources(), nodeName, nsPrefix);
    }
  }
}

std::string ResourceDefinitionChoiceType::serialize(const uci::type::ResourceDefinitionChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResourceDefinitionChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResourceDefinitionChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isAllocateRF_Resources()) {
    ResourceDefinitionRF_Type::serialize(accessor.getAllocateRF_Resources(), node, ResourceDefinitionChoiceType_Names::AllocateRF_Resources_Name);
  } else if (accessor.isAllocateDigitalResources()) {
    ResourceDefinitionDigitalType::serialize(accessor.getAllocateDigitalResources(), node, ResourceDefinitionChoiceType_Names::AllocateDigitalResources_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResourceDefinitionChoiceType& ResourceDefinitionChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResourceDefinitionChoiceType>().release());
}

uci::type::ResourceDefinitionChoiceType& ResourceDefinitionChoiceType::create(const uci::type::ResourceDefinitionChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResourceDefinitionChoiceType> newAccessor{boost::make_unique<asb_uci::type::ResourceDefinitionChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResourceDefinitionChoiceType::destroy(uci::type::ResourceDefinitionChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::ResourceDefinitionChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

