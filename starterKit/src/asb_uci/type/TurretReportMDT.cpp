/** @file TurretReportMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/TurretReportMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/IMU_AlignmentEnum.h"
#include "../../../include/asb_uci/type/PointingType.h"
#include "../../../include/asb_uci/type/SupportCapabilityID_Type.h"
#include "../../../include/asb_uci/type/TurretReportID_Type.h"
#include "../../../include/asb_uci/type/TurretReportPointingType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IMU_AlignmentEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PointingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SupportCapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TurretReportID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TurretReportMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TurretReportPointingType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TurretReportMDT::TurretReportMDT()
  : turretReportID_Accessor{boost::make_unique<TurretReportID_Type>()},
    supportCapabilityID_Accessor{boost::make_unique<SupportCapabilityID_Type>()},
    pointing_Accessor{boost::make_unique<TurretReportPointingType>()},
    turretPointingTarget_Accessor{boost::make_unique<PointingType>()} {
}

TurretReportMDT::~TurretReportMDT() = default;

void TurretReportMDT::copy(const uci::type::TurretReportMDT& accessor) {
  copyImpl(accessor, false);
}

void TurretReportMDT::copyImpl(const uci::type::TurretReportMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const TurretReportMDT&>(accessor);
    setTurretReportID(*(accessorImpl.turretReportID_Accessor));
    setSupportCapabilityID(*(accessorImpl.supportCapabilityID_Accessor));
    setPointing(*(accessorImpl.pointing_Accessor));
    setTurretPointingTarget(*(accessorImpl.turretPointingTarget_Accessor));
    if (accessorImpl.iMU_State_Accessor) {
      setIMU_State(*(accessorImpl.iMU_State_Accessor));
    } else {
      iMU_State_Accessor.reset();
    }
  }
}

void TurretReportMDT::reset() noexcept {
  turretReportID_Accessor->reset();
  supportCapabilityID_Accessor->reset();
  pointing_Accessor->reset();
  turretPointingTarget_Accessor->reset();
  iMU_State_Accessor.reset();
}

const uci::type::TurretReportID_Type& TurretReportMDT::getTurretReportID() const {
  return *turretReportID_Accessor;
}

uci::type::TurretReportID_Type& TurretReportMDT::getTurretReportID() {
  return *turretReportID_Accessor;
}

uci::type::TurretReportMDT& TurretReportMDT::setTurretReportID(const uci::type::TurretReportID_Type& accessor) {
  if (&accessor != turretReportID_Accessor.get()) {
    turretReportID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SupportCapabilityID_Type& TurretReportMDT::getSupportCapabilityID() const {
  return *supportCapabilityID_Accessor;
}

uci::type::SupportCapabilityID_Type& TurretReportMDT::getSupportCapabilityID() {
  return *supportCapabilityID_Accessor;
}

uci::type::TurretReportMDT& TurretReportMDT::setSupportCapabilityID(const uci::type::SupportCapabilityID_Type& accessor) {
  if (&accessor != supportCapabilityID_Accessor.get()) {
    supportCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::TurretReportPointingType& TurretReportMDT::getPointing() const {
  return *pointing_Accessor;
}

uci::type::TurretReportPointingType& TurretReportMDT::getPointing() {
  return *pointing_Accessor;
}

uci::type::TurretReportMDT& TurretReportMDT::setPointing(const uci::type::TurretReportPointingType& accessor) {
  if (&accessor != pointing_Accessor.get()) {
    pointing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PointingType& TurretReportMDT::getTurretPointingTarget() const {
  return *turretPointingTarget_Accessor;
}

uci::type::PointingType& TurretReportMDT::getTurretPointingTarget() {
  return *turretPointingTarget_Accessor;
}

uci::type::TurretReportMDT& TurretReportMDT::setTurretPointingTarget(const uci::type::PointingType& accessor) {
  if (&accessor != turretPointingTarget_Accessor.get()) {
    turretPointingTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IMU_AlignmentEnum& TurretReportMDT::getIMU_State_() const {
  if (iMU_State_Accessor) {
    return *iMU_State_Accessor;
  }
  throw uci::base::UCIException("Error in getIMU_State(): An attempt was made to get an optional field that was not enabled, call hasIMU_State() to determine if it is safe to call getIMU_State()");
}

const uci::type::IMU_AlignmentEnum& TurretReportMDT::getIMU_State() const {
  return getIMU_State_();
}

uci::type::IMU_AlignmentEnum& TurretReportMDT::getIMU_State() {
  return getIMU_State_();
}

uci::type::TurretReportMDT& TurretReportMDT::setIMU_State(const uci::type::IMU_AlignmentEnum& accessor) {
  enableIMU_State();
  if (&accessor != iMU_State_Accessor.get()) {
    iMU_State_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::TurretReportMDT& TurretReportMDT::setIMU_State(const uci::type::IMU_AlignmentEnum::EnumerationItem value) {
  enableIMU_State().setValue(value);
  return *this;
}

bool TurretReportMDT::hasIMU_State() const noexcept {
  return static_cast<bool>(iMU_State_Accessor);
}

uci::type::IMU_AlignmentEnum& TurretReportMDT::enableIMU_State(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iMU_AlignmentEnum : type};
  if ((!iMU_State_Accessor) || (iMU_State_Accessor->getAccessorType() != requestedType)) {
    iMU_State_Accessor = IMU_AlignmentEnum::create(requestedType);
    if (!iMU_State_Accessor) {
      throw uci::base::UCIException("Error in enableIMU_State(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *iMU_State_Accessor;
}

uci::type::TurretReportMDT& TurretReportMDT::clearIMU_State() noexcept {
  iMU_State_Accessor.reset();
  return *this;
}

std::unique_ptr<TurretReportMDT> TurretReportMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::turretReportMDT : type};
  return (requestedType == uci::type::accessorType::turretReportMDT) ? boost::make_unique<TurretReportMDT>() : nullptr;
}

/**  */
namespace TurretReportMDT_Names {

constexpr const char* Extern_Type_Name{"TurretReportMDT"};
constexpr const char* TurretReportID_Name{"TurretReportID"};
constexpr const char* SupportCapabilityID_Name{"SupportCapabilityID"};
constexpr const char* Pointing_Name{"Pointing"};
constexpr const char* TurretPointingTarget_Name{"TurretPointingTarget"};
constexpr const char* IMU_State_Name{"IMU_State"};

} // namespace TurretReportMDT_Names

void TurretReportMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::TurretReportMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TurretReportMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TurretReportMDT_Names::TurretReportID_Name) {
      TurretReportID_Type::deserialize(valueType.second, accessor.getTurretReportID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TurretReportMDT_Names::SupportCapabilityID_Name) {
      SupportCapabilityID_Type::deserialize(valueType.second, accessor.getSupportCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TurretReportMDT_Names::Pointing_Name) {
      TurretReportPointingType::deserialize(valueType.second, accessor.getPointing(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TurretReportMDT_Names::TurretPointingTarget_Name) {
      PointingType::deserialize(valueType.second, accessor.getTurretPointingTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TurretReportMDT_Names::IMU_State_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableIMU_State().setValueFromName(*value);
      }
    }
  }
}

std::string TurretReportMDT::serialize(const uci::type::TurretReportMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TurretReportMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, TurretReportMDT_Names::Extern_Type_Name);
  }
  TurretReportID_Type::serialize(accessor.getTurretReportID(), node, TurretReportMDT_Names::TurretReportID_Name);
  SupportCapabilityID_Type::serialize(accessor.getSupportCapabilityID(), node, TurretReportMDT_Names::SupportCapabilityID_Name);
  TurretReportPointingType::serialize(accessor.getPointing(), node, TurretReportMDT_Names::Pointing_Name);
  PointingType::serialize(accessor.getTurretPointingTarget(), node, TurretReportMDT_Names::TurretPointingTarget_Name);
  if (accessor.hasIMU_State()) {
    IMU_AlignmentEnum::serialize(accessor.getIMU_State(), node, TurretReportMDT_Names::IMU_State_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TurretReportMDT& TurretReportMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TurretReportMDT>().release());
}

uci::type::TurretReportMDT& TurretReportMDT::create(const uci::type::TurretReportMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TurretReportMDT> newAccessor{boost::make_unique<asb_uci::type::TurretReportMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TurretReportMDT::destroy(uci::type::TurretReportMDT& accessor) {
  delete dynamic_cast<asb_uci::type::TurretReportMDT*>(&accessor);
}

} // namespace type

} // namespace uci

