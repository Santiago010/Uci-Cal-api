/** @file ModulationOnPulseDataBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ModulationOnPulseDataBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/FMOP_Enum.h"
#include "asb_uci/type/ModulationEnum.h"
#include "asb_uci/type/PMOP_Enum.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/FMOP_Enum.h"
#include "uci/type/ModulationEnum.h"
#include "uci/type/ModulationOnPulseDataBaseType.h"
#include "uci/type/PMOP_Enum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ModulationOnPulseDataBaseType::ModulationOnPulseDataBaseType()
  : mOP_Accessor{boost::make_unique<ModulationEnum>()} {
}

ModulationOnPulseDataBaseType::~ModulationOnPulseDataBaseType() = default;

void ModulationOnPulseDataBaseType::copy(const uci::type::ModulationOnPulseDataBaseType& accessor) {
  copyImpl(accessor, false);
}

void ModulationOnPulseDataBaseType::copyImpl(const uci::type::ModulationOnPulseDataBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::modulationOnPulseDataBaseType)) {
      const auto& accessorImpl = dynamic_cast<const ModulationOnPulseDataBaseType&>(accessor);
      setMOP(*(accessorImpl.mOP_Accessor));
      if (accessorImpl.fMOP_Accessor) {
        setFMOP(*(accessorImpl.fMOP_Accessor));
      } else {
        fMOP_Accessor.reset();
      }
      if (accessorImpl.pMOP_Accessor) {
        setPMOP(*(accessorImpl.pMOP_Accessor));
      } else {
        pMOP_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void ModulationOnPulseDataBaseType::reset() noexcept {
  mOP_Accessor->reset();
  fMOP_Accessor.reset();
  pMOP_Accessor.reset();
}

const uci::type::ModulationEnum& ModulationOnPulseDataBaseType::getMOP() const {
  return *mOP_Accessor;
}

uci::type::ModulationEnum& ModulationOnPulseDataBaseType::getMOP() {
  return *mOP_Accessor;
}

uci::type::ModulationOnPulseDataBaseType& ModulationOnPulseDataBaseType::setMOP(const uci::type::ModulationEnum& accessor) {
  if (&accessor != mOP_Accessor.get()) {
    mOP_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ModulationOnPulseDataBaseType& ModulationOnPulseDataBaseType::setMOP(uci::type::ModulationEnum::EnumerationItem value) {
  mOP_Accessor->setValue(value);
  return *this;
}


uci::type::FMOP_Enum& ModulationOnPulseDataBaseType::getFMOP_() const {
  if (fMOP_Accessor) {
    return *fMOP_Accessor;
  }
  throw uci::base::UCIException("Error in getFMOP(): An attempt was made to get an optional field that was not enabled, call hasFMOP() to determine if it is safe to call getFMOP()");
}

const uci::type::FMOP_Enum& ModulationOnPulseDataBaseType::getFMOP() const {
  return getFMOP_();
}

uci::type::FMOP_Enum& ModulationOnPulseDataBaseType::getFMOP() {
  return getFMOP_();
}

uci::type::ModulationOnPulseDataBaseType& ModulationOnPulseDataBaseType::setFMOP(const uci::type::FMOP_Enum& accessor) {
  enableFMOP();
  if (&accessor != fMOP_Accessor.get()) {
    fMOP_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ModulationOnPulseDataBaseType& ModulationOnPulseDataBaseType::setFMOP(const uci::type::FMOP_Enum::EnumerationItem value) {
  enableFMOP().setValue(value);
  return *this;
}

bool ModulationOnPulseDataBaseType::hasFMOP() const noexcept {
  return static_cast<bool>(fMOP_Accessor);
}

uci::type::FMOP_Enum& ModulationOnPulseDataBaseType::enableFMOP(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fMOP_Enum : type};
  if ((!fMOP_Accessor) || (fMOP_Accessor->getAccessorType() != requestedType)) {
    fMOP_Accessor = FMOP_Enum::create(requestedType);
    if (!fMOP_Accessor) {
      throw uci::base::UCIException("Error in enableFMOP(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fMOP_Accessor;
}

uci::type::ModulationOnPulseDataBaseType& ModulationOnPulseDataBaseType::clearFMOP() noexcept {
  fMOP_Accessor.reset();
  return *this;
}

uci::type::PMOP_Enum& ModulationOnPulseDataBaseType::getPMOP_() const {
  if (pMOP_Accessor) {
    return *pMOP_Accessor;
  }
  throw uci::base::UCIException("Error in getPMOP(): An attempt was made to get an optional field that was not enabled, call hasPMOP() to determine if it is safe to call getPMOP()");
}

const uci::type::PMOP_Enum& ModulationOnPulseDataBaseType::getPMOP() const {
  return getPMOP_();
}

uci::type::PMOP_Enum& ModulationOnPulseDataBaseType::getPMOP() {
  return getPMOP_();
}

uci::type::ModulationOnPulseDataBaseType& ModulationOnPulseDataBaseType::setPMOP(const uci::type::PMOP_Enum& accessor) {
  enablePMOP();
  if (&accessor != pMOP_Accessor.get()) {
    pMOP_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ModulationOnPulseDataBaseType& ModulationOnPulseDataBaseType::setPMOP(const uci::type::PMOP_Enum::EnumerationItem value) {
  enablePMOP().setValue(value);
  return *this;
}

bool ModulationOnPulseDataBaseType::hasPMOP() const noexcept {
  return static_cast<bool>(pMOP_Accessor);
}

uci::type::PMOP_Enum& ModulationOnPulseDataBaseType::enablePMOP(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pMOP_Enum : type};
  if ((!pMOP_Accessor) || (pMOP_Accessor->getAccessorType() != requestedType)) {
    pMOP_Accessor = PMOP_Enum::create(requestedType);
    if (!pMOP_Accessor) {
      throw uci::base::UCIException("Error in enablePMOP(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pMOP_Accessor;
}

uci::type::ModulationOnPulseDataBaseType& ModulationOnPulseDataBaseType::clearPMOP() noexcept {
  pMOP_Accessor.reset();
  return *this;
}

std::unique_ptr<ModulationOnPulseDataBaseType> ModulationOnPulseDataBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::modulationOnPulseDataBaseType : type};
  return std::unique_ptr<ModulationOnPulseDataBaseType>(dynamic_cast<ModulationOnPulseDataBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace ModulationOnPulseDataBaseType_Names {

constexpr const char* Extern_Type_Name{"ModulationOnPulseDataBaseType"};
constexpr const char* MOP_Name{"MOP"};
constexpr const char* FMOP_Name{"FMOP"};
constexpr const char* PMOP_Name{"PMOP"};

} // namespace ModulationOnPulseDataBaseType_Names

void ModulationOnPulseDataBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ModulationOnPulseDataBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ModulationOnPulseDataBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ModulationOnPulseDataBaseType_Names::MOP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getMOP().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ModulationOnPulseDataBaseType_Names::FMOP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFMOP().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ModulationOnPulseDataBaseType_Names::PMOP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePMOP().setValueFromName(*value);
      }
    }
  }
}

std::string ModulationOnPulseDataBaseType::serialize(const uci::type::ModulationOnPulseDataBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ModulationOnPulseDataBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::modulationOnPulseDataBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, ModulationOnPulseDataBaseType_Names::Extern_Type_Name);
    }
    ModulationEnum::serialize(accessor.getMOP(), node, ModulationOnPulseDataBaseType_Names::MOP_Name, false);
    if (accessor.hasFMOP()) {
      FMOP_Enum::serialize(accessor.getFMOP(), node, ModulationOnPulseDataBaseType_Names::FMOP_Name, false);
    }
    if (accessor.hasPMOP()) {
      PMOP_Enum::serialize(accessor.getPMOP(), node, ModulationOnPulseDataBaseType_Names::PMOP_Name, false);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ModulationOnPulseDataBaseType& ModulationOnPulseDataBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ModulationOnPulseDataBaseType>().release());
}

uci::type::ModulationOnPulseDataBaseType& ModulationOnPulseDataBaseType::create(const uci::type::ModulationOnPulseDataBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ModulationOnPulseDataBaseType> newAccessor{boost::make_unique<asb_uci::type::ModulationOnPulseDataBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ModulationOnPulseDataBaseType::destroy(uci::type::ModulationOnPulseDataBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::ModulationOnPulseDataBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

