/** @file PlanValidationInputsBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlanValidationInputsBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PlanningProcessID_Type.h"
#include "asb_uci/type/TimeWindowType.h"
#include "asb_uci/type/WeatherAreaDataType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PlanValidationInputsBaseType.h"
#include "uci/type/PlanningProcessID_Type.h"
#include "uci/type/TimeWindowType.h"
#include "uci/type/WeatherAreaDataType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanValidationInputsBaseType::PlanValidationInputsBaseType()
  : planningProcessID_Accessor{boost::make_unique<PlanningProcessID_Type>()} {
}

PlanValidationInputsBaseType::~PlanValidationInputsBaseType() = default;

void PlanValidationInputsBaseType::copy(const uci::type::PlanValidationInputsBaseType& accessor) {
  copyImpl(accessor, false);
}

void PlanValidationInputsBaseType::copyImpl(const uci::type::PlanValidationInputsBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::planValidationInputsBaseType)) {
      const auto& accessorImpl = dynamic_cast<const PlanValidationInputsBaseType&>(accessor);
      setPlanningProcessID(*(accessorImpl.planningProcessID_Accessor));
      setModifyToValidate(accessorImpl.modifyToValidate_Accessor);
      if (accessorImpl.validationWIndow_Accessor) {
        setValidationWIndow(*(accessorImpl.validationWIndow_Accessor));
      } else {
        validationWIndow_Accessor.reset();
      }
      if (accessorImpl.weatherAreaData_Accessor) {
        setWeatherAreaData(*(accessorImpl.weatherAreaData_Accessor));
      } else {
        weatherAreaData_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void PlanValidationInputsBaseType::reset() noexcept {
  planningProcessID_Accessor->reset();
  modifyToValidate_Accessor = false;
  validationWIndow_Accessor.reset();
  weatherAreaData_Accessor.reset();
}

const uci::type::PlanningProcessID_Type& PlanValidationInputsBaseType::getPlanningProcessID() const {
  return *planningProcessID_Accessor;
}

uci::type::PlanningProcessID_Type& PlanValidationInputsBaseType::getPlanningProcessID() {
  return *planningProcessID_Accessor;
}

uci::type::PlanValidationInputsBaseType& PlanValidationInputsBaseType::setPlanningProcessID(const uci::type::PlanningProcessID_Type& accessor) {
  if (&accessor != planningProcessID_Accessor.get()) {
    planningProcessID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean PlanValidationInputsBaseType::getModifyToValidate() const {
  return modifyToValidate_Accessor;
}

uci::type::PlanValidationInputsBaseType& PlanValidationInputsBaseType::setModifyToValidate(xs::Boolean value) {
  modifyToValidate_Accessor = value;
  return *this;
}


uci::type::TimeWindowType& PlanValidationInputsBaseType::getValidationWIndow_() const {
  if (validationWIndow_Accessor) {
    return *validationWIndow_Accessor;
  }
  throw uci::base::UCIException("Error in getValidationWIndow(): An attempt was made to get an optional field that was not enabled, call hasValidationWIndow() to determine if it is safe to call getValidationWIndow()");
}

const uci::type::TimeWindowType& PlanValidationInputsBaseType::getValidationWIndow() const {
  return getValidationWIndow_();
}

uci::type::TimeWindowType& PlanValidationInputsBaseType::getValidationWIndow() {
  return getValidationWIndow_();
}

uci::type::PlanValidationInputsBaseType& PlanValidationInputsBaseType::setValidationWIndow(const uci::type::TimeWindowType& accessor) {
  enableValidationWIndow();
  if (&accessor != validationWIndow_Accessor.get()) {
    validationWIndow_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanValidationInputsBaseType::hasValidationWIndow() const noexcept {
  return static_cast<bool>(validationWIndow_Accessor);
}

uci::type::TimeWindowType& PlanValidationInputsBaseType::enableValidationWIndow(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::timeWindowType : type};
  if ((!validationWIndow_Accessor) || (validationWIndow_Accessor->getAccessorType() != requestedType)) {
    validationWIndow_Accessor = TimeWindowType::create(requestedType);
    if (!validationWIndow_Accessor) {
      throw uci::base::UCIException("Error in enableValidationWIndow(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *validationWIndow_Accessor;
}

uci::type::PlanValidationInputsBaseType& PlanValidationInputsBaseType::clearValidationWIndow() noexcept {
  validationWIndow_Accessor.reset();
  return *this;
}

uci::type::WeatherAreaDataType& PlanValidationInputsBaseType::getWeatherAreaData_() const {
  if (weatherAreaData_Accessor) {
    return *weatherAreaData_Accessor;
  }
  throw uci::base::UCIException("Error in getWeatherAreaData(): An attempt was made to get an optional field that was not enabled, call hasWeatherAreaData() to determine if it is safe to call getWeatherAreaData()");
}

const uci::type::WeatherAreaDataType& PlanValidationInputsBaseType::getWeatherAreaData() const {
  return getWeatherAreaData_();
}

uci::type::WeatherAreaDataType& PlanValidationInputsBaseType::getWeatherAreaData() {
  return getWeatherAreaData_();
}

uci::type::PlanValidationInputsBaseType& PlanValidationInputsBaseType::setWeatherAreaData(const uci::type::WeatherAreaDataType& accessor) {
  enableWeatherAreaData();
  if (&accessor != weatherAreaData_Accessor.get()) {
    weatherAreaData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanValidationInputsBaseType::hasWeatherAreaData() const noexcept {
  return static_cast<bool>(weatherAreaData_Accessor);
}

uci::type::WeatherAreaDataType& PlanValidationInputsBaseType::enableWeatherAreaData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherAreaDataType : type};
  if ((!weatherAreaData_Accessor) || (weatherAreaData_Accessor->getAccessorType() != requestedType)) {
    weatherAreaData_Accessor = WeatherAreaDataType::create(requestedType);
    if (!weatherAreaData_Accessor) {
      throw uci::base::UCIException("Error in enableWeatherAreaData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weatherAreaData_Accessor;
}

uci::type::PlanValidationInputsBaseType& PlanValidationInputsBaseType::clearWeatherAreaData() noexcept {
  weatherAreaData_Accessor.reset();
  return *this;
}

std::unique_ptr<PlanValidationInputsBaseType> PlanValidationInputsBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planValidationInputsBaseType : type};
  return std::unique_ptr<PlanValidationInputsBaseType>(dynamic_cast<PlanValidationInputsBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace PlanValidationInputsBaseType_Names {

constexpr const char* Extern_Type_Name{"PlanValidationInputsBaseType"};
constexpr const char* PlanningProcessID_Name{"PlanningProcessID"};
constexpr const char* ModifyToValidate_Name{"ModifyToValidate"};
constexpr const char* ValidationWIndow_Name{"ValidationWIndow"};
constexpr const char* WeatherAreaData_Name{"WeatherAreaData"};

} // namespace PlanValidationInputsBaseType_Names

void PlanValidationInputsBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanValidationInputsBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanValidationInputsBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanValidationInputsBaseType_Names::PlanningProcessID_Name) {
      PlanningProcessID_Type::deserialize(valueType.second, accessor.getPlanningProcessID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanValidationInputsBaseType_Names::ModifyToValidate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setModifyToValidate(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PlanValidationInputsBaseType_Names::ValidationWIndow_Name) {
      TimeWindowType::deserialize(valueType.second, accessor.enableValidationWIndow(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanValidationInputsBaseType_Names::WeatherAreaData_Name) {
      WeatherAreaDataType::deserialize(valueType.second, accessor.enableWeatherAreaData(), nodeName, nsPrefix);
    }
  }
}

std::string PlanValidationInputsBaseType::serialize(const uci::type::PlanValidationInputsBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanValidationInputsBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::planValidationInputsBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanValidationInputsBaseType_Names::Extern_Type_Name);
    }
    PlanningProcessID_Type::serialize(accessor.getPlanningProcessID(), node, PlanValidationInputsBaseType_Names::PlanningProcessID_Name);
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getModifyToValidate(), node, PlanValidationInputsBaseType_Names::ModifyToValidate_Name);
    if (accessor.hasValidationWIndow()) {
      TimeWindowType::serialize(accessor.getValidationWIndow(), node, PlanValidationInputsBaseType_Names::ValidationWIndow_Name);
    }
    if (accessor.hasWeatherAreaData()) {
      WeatherAreaDataType::serialize(accessor.getWeatherAreaData(), node, PlanValidationInputsBaseType_Names::WeatherAreaData_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanValidationInputsBaseType& PlanValidationInputsBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanValidationInputsBaseType>().release());
}

uci::type::PlanValidationInputsBaseType& PlanValidationInputsBaseType::create(const uci::type::PlanValidationInputsBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanValidationInputsBaseType> newAccessor{boost::make_unique<asb_uci::type::PlanValidationInputsBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanValidationInputsBaseType::destroy(uci::type::PlanValidationInputsBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanValidationInputsBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

