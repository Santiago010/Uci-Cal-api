/** @file CommLinkStatisticsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommLinkStatisticsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/NetworkLinkID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLinkStatisticsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DataRateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NetworkLinkID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommLinkStatisticsType::CommLinkStatisticsType() = default;

CommLinkStatisticsType::~CommLinkStatisticsType() = default;

void CommLinkStatisticsType::copy(const uci::type::CommLinkStatisticsType& accessor) {
  copyImpl(accessor, false);
}

void CommLinkStatisticsType::copyImpl(const uci::type::CommLinkStatisticsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommLinkStatisticsType&>(accessor);
    if (accessorImpl.networkLinkID_Accessor) {
      setNetworkLinkID(*(accessorImpl.networkLinkID_Accessor));
    } else {
      networkLinkID_Accessor.reset();
    }
    if (accessorImpl.hasCarrierToNoiseRatio()) {
      setCarrierToNoiseRatio(accessorImpl.getCarrierToNoiseRatio());
    } else {
      clearCarrierToNoiseRatio();
    }
    if (accessorImpl.hasSignalToNoiseRatio()) {
      setSignalToNoiseRatio(accessorImpl.getSignalToNoiseRatio());
    } else {
      clearSignalToNoiseRatio();
    }
    if (accessorImpl.hasCurrentDataRate()) {
      setCurrentDataRate(accessorImpl.getCurrentDataRate());
    } else {
      clearCurrentDataRate();
    }
    if (accessorImpl.hasMessageErrorRate()) {
      setMessageErrorRate(accessorImpl.getMessageErrorRate());
    } else {
      clearMessageErrorRate();
    }
    if (accessorImpl.hasBitErrorRate()) {
      setBitErrorRate(accessorImpl.getBitErrorRate());
    } else {
      clearBitErrorRate();
    }
    if (accessorImpl.hasTxLatency()) {
      setTxLatency(accessorImpl.getTxLatency());
    } else {
      clearTxLatency();
    }
    if (accessorImpl.hasRxLatency()) {
      setRxLatency(accessorImpl.getRxLatency());
    } else {
      clearRxLatency();
    }
    if (accessorImpl.hasFixedDataRate()) {
      setFixedDataRate(accessorImpl.getFixedDataRate());
    } else {
      clearFixedDataRate();
    }
    if (accessorImpl.channelKey_Accessor) {
      setChannelKey(*(accessorImpl.channelKey_Accessor));
    } else {
      channelKey_Accessor.reset();
    }
  }
}

void CommLinkStatisticsType::reset() noexcept {
  networkLinkID_Accessor.reset();
  clearCarrierToNoiseRatio();
  clearSignalToNoiseRatio();
  clearCurrentDataRate();
  clearMessageErrorRate();
  clearBitErrorRate();
  clearTxLatency();
  clearRxLatency();
  clearFixedDataRate();
  channelKey_Accessor.reset();
}

uci::type::NetworkLinkID_Type& CommLinkStatisticsType::getNetworkLinkID_() const {
  if (networkLinkID_Accessor) {
    return *networkLinkID_Accessor;
  }
  throw uci::base::UCIException("Error in getNetworkLinkID(): An attempt was made to get an optional field that was not enabled, call hasNetworkLinkID() to determine if it is safe to call getNetworkLinkID()");
}

const uci::type::NetworkLinkID_Type& CommLinkStatisticsType::getNetworkLinkID() const {
  return getNetworkLinkID_();
}

uci::type::NetworkLinkID_Type& CommLinkStatisticsType::getNetworkLinkID() {
  return getNetworkLinkID_();
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::setNetworkLinkID(const uci::type::NetworkLinkID_Type& accessor) {
  enableNetworkLinkID();
  if (&accessor != networkLinkID_Accessor.get()) {
    networkLinkID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommLinkStatisticsType::hasNetworkLinkID() const noexcept {
  return static_cast<bool>(networkLinkID_Accessor);
}

uci::type::NetworkLinkID_Type& CommLinkStatisticsType::enableNetworkLinkID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::networkLinkID_Type : type};
  if ((!networkLinkID_Accessor) || (networkLinkID_Accessor->getAccessorType() != requestedType)) {
    networkLinkID_Accessor = NetworkLinkID_Type::create(requestedType);
    if (!networkLinkID_Accessor) {
      throw uci::base::UCIException("Error in enableNetworkLinkID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *networkLinkID_Accessor;
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::clearNetworkLinkID() noexcept {
  networkLinkID_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue CommLinkStatisticsType::getCarrierToNoiseRatio() const {
  if (carrierToNoiseRatio_Accessor) {
    return *carrierToNoiseRatio_Accessor;
  }
  throw uci::base::UCIException("Error in getCarrierToNoiseRatio(): An attempt was made to get an optional field that was not enabled, call hasCarrierToNoiseRatio() to determine if it is safe to call getCarrierToNoiseRatio()");
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::setCarrierToNoiseRatio(uci::type::DecibelTypeValue value) {
  carrierToNoiseRatio_Accessor = value;
  return *this;
}

bool CommLinkStatisticsType::hasCarrierToNoiseRatio() const noexcept {
  return carrierToNoiseRatio_Accessor.has_value();
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::clearCarrierToNoiseRatio() noexcept {
  carrierToNoiseRatio_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue CommLinkStatisticsType::getSignalToNoiseRatio() const {
  if (signalToNoiseRatio_Accessor) {
    return *signalToNoiseRatio_Accessor;
  }
  throw uci::base::UCIException("Error in getSignalToNoiseRatio(): An attempt was made to get an optional field that was not enabled, call hasSignalToNoiseRatio() to determine if it is safe to call getSignalToNoiseRatio()");
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::setSignalToNoiseRatio(uci::type::DecibelTypeValue value) {
  signalToNoiseRatio_Accessor = value;
  return *this;
}

bool CommLinkStatisticsType::hasSignalToNoiseRatio() const noexcept {
  return signalToNoiseRatio_Accessor.has_value();
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::clearSignalToNoiseRatio() noexcept {
  signalToNoiseRatio_Accessor.reset();
  return *this;
}

uci::type::DataRateTypeValue CommLinkStatisticsType::getCurrentDataRate() const {
  if (currentDataRate_Accessor) {
    return *currentDataRate_Accessor;
  }
  throw uci::base::UCIException("Error in getCurrentDataRate(): An attempt was made to get an optional field that was not enabled, call hasCurrentDataRate() to determine if it is safe to call getCurrentDataRate()");
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::setCurrentDataRate(uci::type::DataRateTypeValue value) {
  currentDataRate_Accessor = value;
  return *this;
}

bool CommLinkStatisticsType::hasCurrentDataRate() const noexcept {
  return currentDataRate_Accessor.has_value();
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::clearCurrentDataRate() noexcept {
  currentDataRate_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue CommLinkStatisticsType::getMessageErrorRate() const {
  if (messageErrorRate_Accessor) {
    return *messageErrorRate_Accessor;
  }
  throw uci::base::UCIException("Error in getMessageErrorRate(): An attempt was made to get an optional field that was not enabled, call hasMessageErrorRate() to determine if it is safe to call getMessageErrorRate()");
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::setMessageErrorRate(uci::type::PercentTypeValue value) {
  messageErrorRate_Accessor = value;
  return *this;
}

bool CommLinkStatisticsType::hasMessageErrorRate() const noexcept {
  return messageErrorRate_Accessor.has_value();
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::clearMessageErrorRate() noexcept {
  messageErrorRate_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue CommLinkStatisticsType::getBitErrorRate() const {
  if (bitErrorRate_Accessor) {
    return *bitErrorRate_Accessor;
  }
  throw uci::base::UCIException("Error in getBitErrorRate(): An attempt was made to get an optional field that was not enabled, call hasBitErrorRate() to determine if it is safe to call getBitErrorRate()");
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::setBitErrorRate(uci::type::PercentTypeValue value) {
  bitErrorRate_Accessor = value;
  return *this;
}

bool CommLinkStatisticsType::hasBitErrorRate() const noexcept {
  return bitErrorRate_Accessor.has_value();
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::clearBitErrorRate() noexcept {
  bitErrorRate_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue CommLinkStatisticsType::getTxLatency() const {
  if (txLatency_Accessor) {
    return *txLatency_Accessor;
  }
  throw uci::base::UCIException("Error in getTxLatency(): An attempt was made to get an optional field that was not enabled, call hasTxLatency() to determine if it is safe to call getTxLatency()");
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::setTxLatency(uci::type::DurationTypeValue value) {
  txLatency_Accessor = value;
  return *this;
}

bool CommLinkStatisticsType::hasTxLatency() const noexcept {
  return txLatency_Accessor.has_value();
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::clearTxLatency() noexcept {
  txLatency_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue CommLinkStatisticsType::getRxLatency() const {
  if (rxLatency_Accessor) {
    return *rxLatency_Accessor;
  }
  throw uci::base::UCIException("Error in getRxLatency(): An attempt was made to get an optional field that was not enabled, call hasRxLatency() to determine if it is safe to call getRxLatency()");
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::setRxLatency(uci::type::DurationTypeValue value) {
  rxLatency_Accessor = value;
  return *this;
}

bool CommLinkStatisticsType::hasRxLatency() const noexcept {
  return rxLatency_Accessor.has_value();
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::clearRxLatency() noexcept {
  rxLatency_Accessor.reset();
  return *this;
}

xs::Boolean CommLinkStatisticsType::getFixedDataRate() const {
  if (fixedDataRate_Accessor) {
    return *fixedDataRate_Accessor;
  }
  throw uci::base::UCIException("Error in getFixedDataRate(): An attempt was made to get an optional field that was not enabled, call hasFixedDataRate() to determine if it is safe to call getFixedDataRate()");
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::setFixedDataRate(xs::Boolean value) {
  fixedDataRate_Accessor = value;
  return *this;
}

bool CommLinkStatisticsType::hasFixedDataRate() const noexcept {
  return fixedDataRate_Accessor.has_value();
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::clearFixedDataRate() noexcept {
  fixedDataRate_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& CommLinkStatisticsType::getChannelKey_() const {
  if (channelKey_Accessor) {
    return *channelKey_Accessor;
  }
  throw uci::base::UCIException("Error in getChannelKey(): An attempt was made to get an optional field that was not enabled, call hasChannelKey() to determine if it is safe to call getChannelKey()");
}

const uci::type::ForeignKeyType& CommLinkStatisticsType::getChannelKey() const {
  return getChannelKey_();
}

uci::type::ForeignKeyType& CommLinkStatisticsType::getChannelKey() {
  return getChannelKey_();
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::setChannelKey(const uci::type::ForeignKeyType& accessor) {
  enableChannelKey(accessor.getAccessorType());
  if (&accessor != channelKey_Accessor.get()) {
    channelKey_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CommLinkStatisticsType::hasChannelKey() const noexcept {
  return static_cast<bool>(channelKey_Accessor);
}

uci::type::ForeignKeyType& CommLinkStatisticsType::enableChannelKey(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!channelKey_Accessor) || (channelKey_Accessor->getAccessorType() != requestedType)) {
    channelKey_Accessor = ForeignKeyType::create(requestedType);
    if (!channelKey_Accessor) {
      throw uci::base::UCIException("Error in enableChannelKey(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *channelKey_Accessor;
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::clearChannelKey() noexcept {
  channelKey_Accessor.reset();
  return *this;
}

std::unique_ptr<CommLinkStatisticsType> CommLinkStatisticsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLinkStatisticsType : type};
  return (requestedType == uci::type::accessorType::commLinkStatisticsType) ? boost::make_unique<CommLinkStatisticsType>() : nullptr;
}

/**  */
namespace CommLinkStatisticsType_Names {

constexpr const char* Extern_Type_Name{"CommLinkStatisticsType"};
constexpr const char* NetworkLinkID_Name{"NetworkLinkID"};
constexpr const char* CarrierToNoiseRatio_Name{"CarrierToNoiseRatio"};
constexpr const char* SignalToNoiseRatio_Name{"SignalToNoiseRatio"};
constexpr const char* CurrentDataRate_Name{"CurrentDataRate"};
constexpr const char* MessageErrorRate_Name{"MessageErrorRate"};
constexpr const char* BitErrorRate_Name{"BitErrorRate"};
constexpr const char* TxLatency_Name{"TxLatency"};
constexpr const char* RxLatency_Name{"RxLatency"};
constexpr const char* FixedDataRate_Name{"FixedDataRate"};
constexpr const char* ChannelKey_Name{"ChannelKey"};

} // namespace CommLinkStatisticsType_Names

void CommLinkStatisticsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommLinkStatisticsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommLinkStatisticsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommLinkStatisticsType_Names::NetworkLinkID_Name) {
      NetworkLinkID_Type::deserialize(valueType.second, accessor.enableNetworkLinkID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommLinkStatisticsType_Names::CarrierToNoiseRatio_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCarrierToNoiseRatio(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommLinkStatisticsType_Names::SignalToNoiseRatio_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSignalToNoiseRatio(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommLinkStatisticsType_Names::CurrentDataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCurrentDataRate(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CommLinkStatisticsType_Names::MessageErrorRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMessageErrorRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommLinkStatisticsType_Names::BitErrorRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBitErrorRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommLinkStatisticsType_Names::TxLatency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTxLatency(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + CommLinkStatisticsType_Names::RxLatency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRxLatency(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + CommLinkStatisticsType_Names::FixedDataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFixedDataRate(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLinkStatisticsType_Names::ChannelKey_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableChannelKey(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string CommLinkStatisticsType::serialize(const uci::type::CommLinkStatisticsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommLinkStatisticsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommLinkStatisticsType_Names::Extern_Type_Name);
  }
  if (accessor.hasNetworkLinkID()) {
    NetworkLinkID_Type::serialize(accessor.getNetworkLinkID(), node, CommLinkStatisticsType_Names::NetworkLinkID_Name);
  }
  if (accessor.hasCarrierToNoiseRatio()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCarrierToNoiseRatio(), node, CommLinkStatisticsType_Names::CarrierToNoiseRatio_Name);
  }
  if (accessor.hasSignalToNoiseRatio()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSignalToNoiseRatio(), node, CommLinkStatisticsType_Names::SignalToNoiseRatio_Name);
  }
  if (accessor.hasCurrentDataRate()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getCurrentDataRate(), node, CommLinkStatisticsType_Names::CurrentDataRate_Name);
  }
  if (accessor.hasMessageErrorRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMessageErrorRate(), node, CommLinkStatisticsType_Names::MessageErrorRate_Name);
  }
  if (accessor.hasBitErrorRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getBitErrorRate(), node, CommLinkStatisticsType_Names::BitErrorRate_Name);
  }
  if (accessor.hasTxLatency()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTxLatency(), node, CommLinkStatisticsType_Names::TxLatency_Name);
  }
  if (accessor.hasRxLatency()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getRxLatency(), node, CommLinkStatisticsType_Names::RxLatency_Name);
  }
  if (accessor.hasFixedDataRate()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getFixedDataRate(), node, CommLinkStatisticsType_Names::FixedDataRate_Name);
  }
  if (accessor.hasChannelKey()) {
    ForeignKeyType::serialize(accessor.getChannelKey(), node, CommLinkStatisticsType_Names::ChannelKey_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommLinkStatisticsType>().release());
}

uci::type::CommLinkStatisticsType& CommLinkStatisticsType::create(const uci::type::CommLinkStatisticsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommLinkStatisticsType> newAccessor{boost::make_unique<asb_uci::type::CommLinkStatisticsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommLinkStatisticsType::destroy(uci::type::CommLinkStatisticsType& accessor) {
  delete dynamic_cast<asb_uci::type::CommLinkStatisticsType*>(&accessor);
}

} // namespace type

} // namespace uci

