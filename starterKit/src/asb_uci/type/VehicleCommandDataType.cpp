/** @file VehicleCommandDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/VehicleCommandDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommAllocationActionType.h"
#include "asb_uci/type/IFF_Type.h"
#include "asb_uci/type/VehicleActionEnum.h"
#include "asb_uci/type/VehicleLossOfLinkProcessingEnum.h"
#include "asb_uci/type/VehicleSurvivabilityModeEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommAllocationActionType.h"
#include "uci/type/DurationType.h"
#include "uci/type/IFF_Type.h"
#include "uci/type/VehicleActionEnum.h"
#include "uci/type/VehicleCommandDataType.h"
#include "uci/type/VehicleLossOfLinkProcessingEnum.h"
#include "uci/type/VehicleSurvivabilityModeEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VehicleCommandDataType::VehicleCommandDataType() = default;

VehicleCommandDataType::~VehicleCommandDataType() = default;

void VehicleCommandDataType::copy(const uci::type::VehicleCommandDataType& accessor) {
  copyImpl(accessor, false);
}

void VehicleCommandDataType::copyImpl(const uci::type::VehicleCommandDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VehicleCommandDataType&>(accessor);
    if (accessorImpl.vehicleAction_Accessor) {
      setVehicleAction(*(accessorImpl.vehicleAction_Accessor));
    } else {
      vehicleAction_Accessor.reset();
    }
    if (accessorImpl.iFF_Settings_Accessor) {
      setIFF_Settings(*(accessorImpl.iFF_Settings_Accessor));
    } else {
      iFF_Settings_Accessor.reset();
    }
    if (accessorImpl.survivabilityMode_Accessor) {
      setSurvivabilityMode(*(accessorImpl.survivabilityMode_Accessor));
    } else {
      survivabilityMode_Accessor.reset();
    }
    if (accessorImpl.hasLostCommTimeout()) {
      setLostCommTimeout(accessorImpl.getLostCommTimeout());
    } else {
      clearLostCommTimeout();
    }
    if (accessorImpl.hasLOS()) {
      setLOS(accessorImpl.getLOS());
    } else {
      clearLOS();
    }
    if (accessorImpl.lossOfLinkProcessing_Accessor) {
      setLossOfLinkProcessing(*(accessorImpl.lossOfLinkProcessing_Accessor));
    } else {
      lossOfLinkProcessing_Accessor.reset();
    }
    if (accessorImpl.commAllocationAction_Accessor) {
      setCommAllocationAction(*(accessorImpl.commAllocationAction_Accessor));
    } else {
      commAllocationAction_Accessor.reset();
    }
  }
}

void VehicleCommandDataType::reset() noexcept {
  vehicleAction_Accessor.reset();
  iFF_Settings_Accessor.reset();
  survivabilityMode_Accessor.reset();
  clearLostCommTimeout();
  clearLOS();
  lossOfLinkProcessing_Accessor.reset();
  commAllocationAction_Accessor.reset();
}

uci::type::VehicleActionEnum& VehicleCommandDataType::getVehicleAction_() const {
  if (vehicleAction_Accessor) {
    return *vehicleAction_Accessor;
  }
  throw uci::base::UCIException("Error in getVehicleAction(): An attempt was made to get an optional field that was not enabled, call hasVehicleAction() to determine if it is safe to call getVehicleAction()");
}

const uci::type::VehicleActionEnum& VehicleCommandDataType::getVehicleAction() const {
  return getVehicleAction_();
}

uci::type::VehicleActionEnum& VehicleCommandDataType::getVehicleAction() {
  return getVehicleAction_();
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::setVehicleAction(const uci::type::VehicleActionEnum& accessor) {
  enableVehicleAction();
  if (&accessor != vehicleAction_Accessor.get()) {
    vehicleAction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::setVehicleAction(const uci::type::VehicleActionEnum::EnumerationItem value) {
  enableVehicleAction().setValue(value);
  return *this;
}

bool VehicleCommandDataType::hasVehicleAction() const noexcept {
  return static_cast<bool>(vehicleAction_Accessor);
}

uci::type::VehicleActionEnum& VehicleCommandDataType::enableVehicleAction(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleActionEnum : type};
  if ((!vehicleAction_Accessor) || (vehicleAction_Accessor->getAccessorType() != requestedType)) {
    vehicleAction_Accessor = VehicleActionEnum::create(requestedType);
    if (!vehicleAction_Accessor) {
      throw uci::base::UCIException("Error in enableVehicleAction(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vehicleAction_Accessor;
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::clearVehicleAction() noexcept {
  vehicleAction_Accessor.reset();
  return *this;
}

uci::type::IFF_Type& VehicleCommandDataType::getIFF_Settings_() const {
  if (iFF_Settings_Accessor) {
    return *iFF_Settings_Accessor;
  }
  throw uci::base::UCIException("Error in getIFF_Settings(): An attempt was made to get an optional field that was not enabled, call hasIFF_Settings() to determine if it is safe to call getIFF_Settings()");
}

const uci::type::IFF_Type& VehicleCommandDataType::getIFF_Settings() const {
  return getIFF_Settings_();
}

uci::type::IFF_Type& VehicleCommandDataType::getIFF_Settings() {
  return getIFF_Settings_();
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::setIFF_Settings(const uci::type::IFF_Type& accessor) {
  enableIFF_Settings();
  if (&accessor != iFF_Settings_Accessor.get()) {
    iFF_Settings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VehicleCommandDataType::hasIFF_Settings() const noexcept {
  return static_cast<bool>(iFF_Settings_Accessor);
}

uci::type::IFF_Type& VehicleCommandDataType::enableIFF_Settings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_Type : type};
  if ((!iFF_Settings_Accessor) || (iFF_Settings_Accessor->getAccessorType() != requestedType)) {
    iFF_Settings_Accessor = IFF_Type::create(requestedType);
    if (!iFF_Settings_Accessor) {
      throw uci::base::UCIException("Error in enableIFF_Settings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *iFF_Settings_Accessor;
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::clearIFF_Settings() noexcept {
  iFF_Settings_Accessor.reset();
  return *this;
}

uci::type::VehicleSurvivabilityModeEnum& VehicleCommandDataType::getSurvivabilityMode_() const {
  if (survivabilityMode_Accessor) {
    return *survivabilityMode_Accessor;
  }
  throw uci::base::UCIException("Error in getSurvivabilityMode(): An attempt was made to get an optional field that was not enabled, call hasSurvivabilityMode() to determine if it is safe to call getSurvivabilityMode()");
}

const uci::type::VehicleSurvivabilityModeEnum& VehicleCommandDataType::getSurvivabilityMode() const {
  return getSurvivabilityMode_();
}

uci::type::VehicleSurvivabilityModeEnum& VehicleCommandDataType::getSurvivabilityMode() {
  return getSurvivabilityMode_();
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::setSurvivabilityMode(const uci::type::VehicleSurvivabilityModeEnum& accessor) {
  enableSurvivabilityMode();
  if (&accessor != survivabilityMode_Accessor.get()) {
    survivabilityMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::setSurvivabilityMode(const uci::type::VehicleSurvivabilityModeEnum::EnumerationItem value) {
  enableSurvivabilityMode().setValue(value);
  return *this;
}

bool VehicleCommandDataType::hasSurvivabilityMode() const noexcept {
  return static_cast<bool>(survivabilityMode_Accessor);
}

uci::type::VehicleSurvivabilityModeEnum& VehicleCommandDataType::enableSurvivabilityMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleSurvivabilityModeEnum : type};
  if ((!survivabilityMode_Accessor) || (survivabilityMode_Accessor->getAccessorType() != requestedType)) {
    survivabilityMode_Accessor = VehicleSurvivabilityModeEnum::create(requestedType);
    if (!survivabilityMode_Accessor) {
      throw uci::base::UCIException("Error in enableSurvivabilityMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *survivabilityMode_Accessor;
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::clearSurvivabilityMode() noexcept {
  survivabilityMode_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue VehicleCommandDataType::getLostCommTimeout() const {
  if (lostCommTimeout_Accessor) {
    return *lostCommTimeout_Accessor;
  }
  throw uci::base::UCIException("Error in getLostCommTimeout(): An attempt was made to get an optional field that was not enabled, call hasLostCommTimeout() to determine if it is safe to call getLostCommTimeout()");
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::setLostCommTimeout(uci::type::DurationTypeValue value) {
  lostCommTimeout_Accessor = value;
  return *this;
}

bool VehicleCommandDataType::hasLostCommTimeout() const noexcept {
  return lostCommTimeout_Accessor.has_value();
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::clearLostCommTimeout() noexcept {
  lostCommTimeout_Accessor.reset();
  return *this;
}

xs::Boolean VehicleCommandDataType::getLOS() const {
  if (lOS_Accessor) {
    return *lOS_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS(): An attempt was made to get an optional field that was not enabled, call hasLOS() to determine if it is safe to call getLOS()");
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::setLOS(xs::Boolean value) {
  lOS_Accessor = value;
  return *this;
}

bool VehicleCommandDataType::hasLOS() const noexcept {
  return lOS_Accessor.has_value();
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::clearLOS() noexcept {
  lOS_Accessor.reset();
  return *this;
}

uci::type::VehicleLossOfLinkProcessingEnum& VehicleCommandDataType::getLossOfLinkProcessing_() const {
  if (lossOfLinkProcessing_Accessor) {
    return *lossOfLinkProcessing_Accessor;
  }
  throw uci::base::UCIException("Error in getLossOfLinkProcessing(): An attempt was made to get an optional field that was not enabled, call hasLossOfLinkProcessing() to determine if it is safe to call getLossOfLinkProcessing()");
}

const uci::type::VehicleLossOfLinkProcessingEnum& VehicleCommandDataType::getLossOfLinkProcessing() const {
  return getLossOfLinkProcessing_();
}

uci::type::VehicleLossOfLinkProcessingEnum& VehicleCommandDataType::getLossOfLinkProcessing() {
  return getLossOfLinkProcessing_();
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::setLossOfLinkProcessing(const uci::type::VehicleLossOfLinkProcessingEnum& accessor) {
  enableLossOfLinkProcessing();
  if (&accessor != lossOfLinkProcessing_Accessor.get()) {
    lossOfLinkProcessing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::setLossOfLinkProcessing(const uci::type::VehicleLossOfLinkProcessingEnum::EnumerationItem value) {
  enableLossOfLinkProcessing().setValue(value);
  return *this;
}

bool VehicleCommandDataType::hasLossOfLinkProcessing() const noexcept {
  return static_cast<bool>(lossOfLinkProcessing_Accessor);
}

uci::type::VehicleLossOfLinkProcessingEnum& VehicleCommandDataType::enableLossOfLinkProcessing(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleLossOfLinkProcessingEnum : type};
  if ((!lossOfLinkProcessing_Accessor) || (lossOfLinkProcessing_Accessor->getAccessorType() != requestedType)) {
    lossOfLinkProcessing_Accessor = VehicleLossOfLinkProcessingEnum::create(requestedType);
    if (!lossOfLinkProcessing_Accessor) {
      throw uci::base::UCIException("Error in enableLossOfLinkProcessing(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lossOfLinkProcessing_Accessor;
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::clearLossOfLinkProcessing() noexcept {
  lossOfLinkProcessing_Accessor.reset();
  return *this;
}

uci::type::CommAllocationActionType& VehicleCommandDataType::getCommAllocationAction_() const {
  if (commAllocationAction_Accessor) {
    return *commAllocationAction_Accessor;
  }
  throw uci::base::UCIException("Error in getCommAllocationAction(): An attempt was made to get an optional field that was not enabled, call hasCommAllocationAction() to determine if it is safe to call getCommAllocationAction()");
}

const uci::type::CommAllocationActionType& VehicleCommandDataType::getCommAllocationAction() const {
  return getCommAllocationAction_();
}

uci::type::CommAllocationActionType& VehicleCommandDataType::getCommAllocationAction() {
  return getCommAllocationAction_();
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::setCommAllocationAction(const uci::type::CommAllocationActionType& accessor) {
  enableCommAllocationAction();
  if (&accessor != commAllocationAction_Accessor.get()) {
    commAllocationAction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VehicleCommandDataType::hasCommAllocationAction() const noexcept {
  return static_cast<bool>(commAllocationAction_Accessor);
}

uci::type::CommAllocationActionType& VehicleCommandDataType::enableCommAllocationAction(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commAllocationActionType : type};
  if ((!commAllocationAction_Accessor) || (commAllocationAction_Accessor->getAccessorType() != requestedType)) {
    commAllocationAction_Accessor = CommAllocationActionType::create(requestedType);
    if (!commAllocationAction_Accessor) {
      throw uci::base::UCIException("Error in enableCommAllocationAction(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commAllocationAction_Accessor;
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::clearCommAllocationAction() noexcept {
  commAllocationAction_Accessor.reset();
  return *this;
}

std::unique_ptr<VehicleCommandDataType> VehicleCommandDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleCommandDataType : type};
  return (requestedType == uci::type::accessorType::vehicleCommandDataType) ? boost::make_unique<VehicleCommandDataType>() : nullptr;
}

/**  */
namespace VehicleCommandDataType_Names {

constexpr const char* Extern_Type_Name{"VehicleCommandDataType"};
constexpr const char* VehicleAction_Name{"VehicleAction"};
constexpr const char* IFF_Settings_Name{"IFF_Settings"};
constexpr const char* SurvivabilityMode_Name{"SurvivabilityMode"};
constexpr const char* LostCommTimeout_Name{"LostCommTimeout"};
constexpr const char* LOS_Name{"LOS"};
constexpr const char* LossOfLinkProcessing_Name{"LossOfLinkProcessing"};
constexpr const char* CommAllocationAction_Name{"CommAllocationAction"};

} // namespace VehicleCommandDataType_Names

void VehicleCommandDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VehicleCommandDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VehicleCommandDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VehicleCommandDataType_Names::VehicleAction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableVehicleAction().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + VehicleCommandDataType_Names::IFF_Settings_Name) {
      IFF_Type::deserialize(valueType.second, accessor.enableIFF_Settings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VehicleCommandDataType_Names::SurvivabilityMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSurvivabilityMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + VehicleCommandDataType_Names::LostCommTimeout_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLostCommTimeout(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + VehicleCommandDataType_Names::LOS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLOS(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + VehicleCommandDataType_Names::LossOfLinkProcessing_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableLossOfLinkProcessing().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + VehicleCommandDataType_Names::CommAllocationAction_Name) {
      CommAllocationActionType::deserialize(valueType.second, accessor.enableCommAllocationAction(), nodeName, nsPrefix);
    }
  }
}

std::string VehicleCommandDataType::serialize(const uci::type::VehicleCommandDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VehicleCommandDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VehicleCommandDataType_Names::Extern_Type_Name);
  }
  if (accessor.hasVehicleAction()) {
    VehicleActionEnum::serialize(accessor.getVehicleAction(), node, VehicleCommandDataType_Names::VehicleAction_Name, false);
  }
  if (accessor.hasIFF_Settings()) {
    IFF_Type::serialize(accessor.getIFF_Settings(), node, VehicleCommandDataType_Names::IFF_Settings_Name);
  }
  if (accessor.hasSurvivabilityMode()) {
    VehicleSurvivabilityModeEnum::serialize(accessor.getSurvivabilityMode(), node, VehicleCommandDataType_Names::SurvivabilityMode_Name, false);
  }
  if (accessor.hasLostCommTimeout()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getLostCommTimeout(), node, VehicleCommandDataType_Names::LostCommTimeout_Name);
  }
  if (accessor.hasLOS()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getLOS(), node, VehicleCommandDataType_Names::LOS_Name);
  }
  if (accessor.hasLossOfLinkProcessing()) {
    VehicleLossOfLinkProcessingEnum::serialize(accessor.getLossOfLinkProcessing(), node, VehicleCommandDataType_Names::LossOfLinkProcessing_Name, false);
  }
  if (accessor.hasCommAllocationAction()) {
    CommAllocationActionType::serialize(accessor.getCommAllocationAction(), node, VehicleCommandDataType_Names::CommAllocationAction_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VehicleCommandDataType& VehicleCommandDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VehicleCommandDataType>().release());
}

uci::type::VehicleCommandDataType& VehicleCommandDataType::create(const uci::type::VehicleCommandDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VehicleCommandDataType> newAccessor{boost::make_unique<asb_uci::type::VehicleCommandDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VehicleCommandDataType::destroy(uci::type::VehicleCommandDataType& accessor) {
  delete dynamic_cast<asb_uci::type::VehicleCommandDataType*>(&accessor);
}

} // namespace type

} // namespace uci

