/** @file OrbitalSurveillanceSensorTargetType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalSurveillanceSensorTargetType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ElementSetCloudType.h"
#include "asb_uci/type/OrbitalSurveillanceLocationTargetType.h"
#include "asb_uci/type/OrbitalSurveillanceObjectsType.h"
#include "asb_uci/type/SensorPointListType.h"
#include "asb_uci/type/SourceCoverageType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ElementSetCloudType.h"
#include "uci/type/OrbitalSurveillanceLocationTargetType.h"
#include "uci/type/OrbitalSurveillanceObjectsType.h"
#include "uci/type/OrbitalSurveillanceSensorTargetType.h"
#include "uci/type/SensorPointListType.h"
#include "uci/type/SourceCoverageType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalSurveillanceSensorTargetType::OrbitalSurveillanceSensorTargetType() = default;

OrbitalSurveillanceSensorTargetType::~OrbitalSurveillanceSensorTargetType() = default;

void OrbitalSurveillanceSensorTargetType::copy(const uci::type::OrbitalSurveillanceSensorTargetType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalSurveillanceSensorTargetType::copyImpl(const uci::type::OrbitalSurveillanceSensorTargetType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalSurveillanceSensorTargetType&>(accessor);
    if (accessorImpl.pointList_Accessor) {
      setPointList(*(accessorImpl.pointList_Accessor));
    } else {
      pointList_Accessor.reset();
    }
    if (accessorImpl.elementSetCloud_Accessor) {
      setElementSetCloud(*(accessorImpl.elementSetCloud_Accessor));
    } else {
      elementSetCloud_Accessor.reset();
    }
    if (accessorImpl.objectBased_Accessor) {
      setObjectBased(*(accessorImpl.objectBased_Accessor));
    } else {
      objectBased_Accessor.reset();
    }
    if (accessorImpl.locationBased_Accessor) {
      setLocationBased(*(accessorImpl.locationBased_Accessor));
    } else {
      locationBased_Accessor.reset();
    }
    if (accessorImpl.sensorCentricVolume_Accessor) {
      setSensorCentricVolume(*(accessorImpl.sensorCentricVolume_Accessor));
    } else {
      sensorCentricVolume_Accessor.reset();
    }
  }
}

void OrbitalSurveillanceSensorTargetType::reset() noexcept {
  pointList_Accessor.reset();
  elementSetCloud_Accessor.reset();
  objectBased_Accessor.reset();
  locationBased_Accessor.reset();
  sensorCentricVolume_Accessor.reset();
}

uci::type::OrbitalSurveillanceSensorTargetType::OrbitalSurveillanceSensorTargetTypeChoice OrbitalSurveillanceSensorTargetType::getOrbitalSurveillanceSensorTargetTypeChoiceOrdinal() const noexcept {
  if (pointList_Accessor) {
    return ORBITALSURVEILLANCESENSORTARGETTYPE_CHOICE_POINTLIST;
  }
  if (elementSetCloud_Accessor) {
    return ORBITALSURVEILLANCESENSORTARGETTYPE_CHOICE_ELEMENTSETCLOUD;
  }
  if (objectBased_Accessor) {
    return ORBITALSURVEILLANCESENSORTARGETTYPE_CHOICE_OBJECTBASED;
  }
  if (locationBased_Accessor) {
    return ORBITALSURVEILLANCESENSORTARGETTYPE_CHOICE_LOCATIONBASED;
  }
  if (sensorCentricVolume_Accessor) {
    return ORBITALSURVEILLANCESENSORTARGETTYPE_CHOICE_SENSORCENTRICVOLUME;
  }
  return ORBITALSURVEILLANCESENSORTARGETTYPE_CHOICE_NONE;
}

uci::type::OrbitalSurveillanceSensorTargetType& OrbitalSurveillanceSensorTargetType::setOrbitalSurveillanceSensorTargetTypeChoiceOrdinal(uci::type::OrbitalSurveillanceSensorTargetType::OrbitalSurveillanceSensorTargetTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITALSURVEILLANCESENSORTARGETTYPE_CHOICE_POINTLIST:
      choosePointList("setOrbitalSurveillanceSensorTargetTypeChoiceOrdinal", type);
      break;
    case ORBITALSURVEILLANCESENSORTARGETTYPE_CHOICE_ELEMENTSETCLOUD:
      chooseElementSetCloud("setOrbitalSurveillanceSensorTargetTypeChoiceOrdinal", type);
      break;
    case ORBITALSURVEILLANCESENSORTARGETTYPE_CHOICE_OBJECTBASED:
      chooseObjectBased("setOrbitalSurveillanceSensorTargetTypeChoiceOrdinal", type);
      break;
    case ORBITALSURVEILLANCESENSORTARGETTYPE_CHOICE_LOCATIONBASED:
      chooseLocationBased("setOrbitalSurveillanceSensorTargetTypeChoiceOrdinal", type);
      break;
    case ORBITALSURVEILLANCESENSORTARGETTYPE_CHOICE_SENSORCENTRICVOLUME:
      chooseSensorCentricVolume("setOrbitalSurveillanceSensorTargetTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitalSurveillanceSensorTargetTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SensorPointListType& OrbitalSurveillanceSensorTargetType::getPointList_() const {
  if (pointList_Accessor) {
    return *pointList_Accessor;
  }
  throw uci::base::UCIException("Error in getPointList(): Unable to get PointList, field not selected");
}

const uci::type::SensorPointListType& OrbitalSurveillanceSensorTargetType::getPointList() const {
  return getPointList_();
}

uci::type::SensorPointListType& OrbitalSurveillanceSensorTargetType::getPointList() {
  return getPointList_();
}

uci::type::OrbitalSurveillanceSensorTargetType& OrbitalSurveillanceSensorTargetType::setPointList(const uci::type::SensorPointListType& accessor) {
  choosePointList(accessor.getAccessorType());
  if (&accessor != pointList_Accessor.get()) {
    pointList_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceSensorTargetType::isPointList() const noexcept {
  return static_cast<bool>(pointList_Accessor);
}

uci::type::SensorPointListType& OrbitalSurveillanceSensorTargetType::choosePointList(const std::string& method, uci::base::accessorType::AccessorType type) {
  elementSetCloud_Accessor.reset();
  objectBased_Accessor.reset();
  locationBased_Accessor.reset();
  sensorCentricVolume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorPointListType : type};
  if ((!pointList_Accessor) || (pointList_Accessor->getAccessorType() != requestedType)) {
    pointList_Accessor = SensorPointListType::create(type);
    if (!pointList_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pointList_Accessor;
}

uci::type::SensorPointListType& OrbitalSurveillanceSensorTargetType::choosePointList(uci::base::accessorType::AccessorType type) {
  return choosePointList("choosePointList", type);
}

uci::type::ElementSetCloudType& OrbitalSurveillanceSensorTargetType::getElementSetCloud_() const {
  if (elementSetCloud_Accessor) {
    return *elementSetCloud_Accessor;
  }
  throw uci::base::UCIException("Error in getElementSetCloud(): Unable to get ElementSetCloud, field not selected");
}

const uci::type::ElementSetCloudType& OrbitalSurveillanceSensorTargetType::getElementSetCloud() const {
  return getElementSetCloud_();
}

uci::type::ElementSetCloudType& OrbitalSurveillanceSensorTargetType::getElementSetCloud() {
  return getElementSetCloud_();
}

uci::type::OrbitalSurveillanceSensorTargetType& OrbitalSurveillanceSensorTargetType::setElementSetCloud(const uci::type::ElementSetCloudType& accessor) {
  chooseElementSetCloud();
  if (&accessor != elementSetCloud_Accessor.get()) {
    elementSetCloud_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceSensorTargetType::isElementSetCloud() const noexcept {
  return static_cast<bool>(elementSetCloud_Accessor);
}

uci::type::ElementSetCloudType& OrbitalSurveillanceSensorTargetType::chooseElementSetCloud(const std::string& method, uci::base::accessorType::AccessorType type) {
  pointList_Accessor.reset();
  objectBased_Accessor.reset();
  locationBased_Accessor.reset();
  sensorCentricVolume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::elementSetCloudType : type};
  if ((!elementSetCloud_Accessor) || (elementSetCloud_Accessor->getAccessorType() != requestedType)) {
    elementSetCloud_Accessor = ElementSetCloudType::create(type);
    if (!elementSetCloud_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *elementSetCloud_Accessor;
}

uci::type::ElementSetCloudType& OrbitalSurveillanceSensorTargetType::chooseElementSetCloud(uci::base::accessorType::AccessorType type) {
  return chooseElementSetCloud("chooseElementSetCloud", type);
}

uci::type::OrbitalSurveillanceObjectsType& OrbitalSurveillanceSensorTargetType::getObjectBased_() const {
  if (objectBased_Accessor) {
    return *objectBased_Accessor;
  }
  throw uci::base::UCIException("Error in getObjectBased(): Unable to get ObjectBased, field not selected");
}

const uci::type::OrbitalSurveillanceObjectsType& OrbitalSurveillanceSensorTargetType::getObjectBased() const {
  return getObjectBased_();
}

uci::type::OrbitalSurveillanceObjectsType& OrbitalSurveillanceSensorTargetType::getObjectBased() {
  return getObjectBased_();
}

uci::type::OrbitalSurveillanceSensorTargetType& OrbitalSurveillanceSensorTargetType::setObjectBased(const uci::type::OrbitalSurveillanceObjectsType& accessor) {
  chooseObjectBased();
  if (&accessor != objectBased_Accessor.get()) {
    objectBased_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceSensorTargetType::isObjectBased() const noexcept {
  return static_cast<bool>(objectBased_Accessor);
}

uci::type::OrbitalSurveillanceObjectsType& OrbitalSurveillanceSensorTargetType::chooseObjectBased(const std::string& method, uci::base::accessorType::AccessorType type) {
  pointList_Accessor.reset();
  elementSetCloud_Accessor.reset();
  locationBased_Accessor.reset();
  sensorCentricVolume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceObjectsType : type};
  if ((!objectBased_Accessor) || (objectBased_Accessor->getAccessorType() != requestedType)) {
    objectBased_Accessor = OrbitalSurveillanceObjectsType::create(type);
    if (!objectBased_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *objectBased_Accessor;
}

uci::type::OrbitalSurveillanceObjectsType& OrbitalSurveillanceSensorTargetType::chooseObjectBased(uci::base::accessorType::AccessorType type) {
  return chooseObjectBased("chooseObjectBased", type);
}

uci::type::OrbitalSurveillanceLocationTargetType& OrbitalSurveillanceSensorTargetType::getLocationBased_() const {
  if (locationBased_Accessor) {
    return *locationBased_Accessor;
  }
  throw uci::base::UCIException("Error in getLocationBased(): Unable to get LocationBased, field not selected");
}

const uci::type::OrbitalSurveillanceLocationTargetType& OrbitalSurveillanceSensorTargetType::getLocationBased() const {
  return getLocationBased_();
}

uci::type::OrbitalSurveillanceLocationTargetType& OrbitalSurveillanceSensorTargetType::getLocationBased() {
  return getLocationBased_();
}

uci::type::OrbitalSurveillanceSensorTargetType& OrbitalSurveillanceSensorTargetType::setLocationBased(const uci::type::OrbitalSurveillanceLocationTargetType& accessor) {
  chooseLocationBased();
  if (&accessor != locationBased_Accessor.get()) {
    locationBased_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceSensorTargetType::isLocationBased() const noexcept {
  return static_cast<bool>(locationBased_Accessor);
}

uci::type::OrbitalSurveillanceLocationTargetType& OrbitalSurveillanceSensorTargetType::chooseLocationBased(const std::string& method, uci::base::accessorType::AccessorType type) {
  pointList_Accessor.reset();
  elementSetCloud_Accessor.reset();
  objectBased_Accessor.reset();
  sensorCentricVolume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceLocationTargetType : type};
  if ((!locationBased_Accessor) || (locationBased_Accessor->getAccessorType() != requestedType)) {
    locationBased_Accessor = OrbitalSurveillanceLocationTargetType::create(type);
    if (!locationBased_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *locationBased_Accessor;
}

uci::type::OrbitalSurveillanceLocationTargetType& OrbitalSurveillanceSensorTargetType::chooseLocationBased(uci::base::accessorType::AccessorType type) {
  return chooseLocationBased("chooseLocationBased", type);
}

uci::type::SourceCoverageType& OrbitalSurveillanceSensorTargetType::getSensorCentricVolume_() const {
  if (sensorCentricVolume_Accessor) {
    return *sensorCentricVolume_Accessor;
  }
  throw uci::base::UCIException("Error in getSensorCentricVolume(): Unable to get SensorCentricVolume, field not selected");
}

const uci::type::SourceCoverageType& OrbitalSurveillanceSensorTargetType::getSensorCentricVolume() const {
  return getSensorCentricVolume_();
}

uci::type::SourceCoverageType& OrbitalSurveillanceSensorTargetType::getSensorCentricVolume() {
  return getSensorCentricVolume_();
}

uci::type::OrbitalSurveillanceSensorTargetType& OrbitalSurveillanceSensorTargetType::setSensorCentricVolume(const uci::type::SourceCoverageType& accessor) {
  chooseSensorCentricVolume();
  if (&accessor != sensorCentricVolume_Accessor.get()) {
    sensorCentricVolume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceSensorTargetType::isSensorCentricVolume() const noexcept {
  return static_cast<bool>(sensorCentricVolume_Accessor);
}

uci::type::SourceCoverageType& OrbitalSurveillanceSensorTargetType::chooseSensorCentricVolume(const std::string& method, uci::base::accessorType::AccessorType type) {
  pointList_Accessor.reset();
  elementSetCloud_Accessor.reset();
  objectBased_Accessor.reset();
  locationBased_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceCoverageType : type};
  if ((!sensorCentricVolume_Accessor) || (sensorCentricVolume_Accessor->getAccessorType() != requestedType)) {
    sensorCentricVolume_Accessor = SourceCoverageType::create(type);
    if (!sensorCentricVolume_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sensorCentricVolume_Accessor;
}

uci::type::SourceCoverageType& OrbitalSurveillanceSensorTargetType::chooseSensorCentricVolume(uci::base::accessorType::AccessorType type) {
  return chooseSensorCentricVolume("chooseSensorCentricVolume", type);
}

std::unique_ptr<OrbitalSurveillanceSensorTargetType> OrbitalSurveillanceSensorTargetType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceSensorTargetType : type};
  return (requestedType == uci::type::accessorType::orbitalSurveillanceSensorTargetType) ? boost::make_unique<OrbitalSurveillanceSensorTargetType>() : nullptr;
}

/**  */
namespace OrbitalSurveillanceSensorTargetType_Names {

constexpr const char* Extern_Type_Name{"OrbitalSurveillanceSensorTargetType"};
constexpr const char* PointList_Name{"PointList"};
constexpr const char* ElementSetCloud_Name{"ElementSetCloud"};
constexpr const char* ObjectBased_Name{"ObjectBased"};
constexpr const char* LocationBased_Name{"LocationBased"};
constexpr const char* SensorCentricVolume_Name{"SensorCentricVolume"};

} // namespace OrbitalSurveillanceSensorTargetType_Names

void OrbitalSurveillanceSensorTargetType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalSurveillanceSensorTargetType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalSurveillanceSensorTargetType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceSensorTargetType_Names::PointList_Name) {
      SensorPointListType::deserialize(valueType.second, accessor.choosePointList(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceSensorTargetType_Names::ElementSetCloud_Name) {
      ElementSetCloudType::deserialize(valueType.second, accessor.chooseElementSetCloud(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceSensorTargetType_Names::ObjectBased_Name) {
      OrbitalSurveillanceObjectsType::deserialize(valueType.second, accessor.chooseObjectBased(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceSensorTargetType_Names::LocationBased_Name) {
      OrbitalSurveillanceLocationTargetType::deserialize(valueType.second, accessor.chooseLocationBased(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceSensorTargetType_Names::SensorCentricVolume_Name) {
      SourceCoverageType::deserialize(valueType.second, accessor.chooseSensorCentricVolume(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalSurveillanceSensorTargetType::serialize(const uci::type::OrbitalSurveillanceSensorTargetType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalSurveillanceSensorTargetType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalSurveillanceSensorTargetType_Names::Extern_Type_Name);
  }
  if (accessor.isPointList()) {
    SensorPointListType::serialize(accessor.getPointList(), node, OrbitalSurveillanceSensorTargetType_Names::PointList_Name);
  } else if (accessor.isElementSetCloud()) {
    ElementSetCloudType::serialize(accessor.getElementSetCloud(), node, OrbitalSurveillanceSensorTargetType_Names::ElementSetCloud_Name);
  } else if (accessor.isObjectBased()) {
    OrbitalSurveillanceObjectsType::serialize(accessor.getObjectBased(), node, OrbitalSurveillanceSensorTargetType_Names::ObjectBased_Name);
  } else if (accessor.isLocationBased()) {
    OrbitalSurveillanceLocationTargetType::serialize(accessor.getLocationBased(), node, OrbitalSurveillanceSensorTargetType_Names::LocationBased_Name);
  } else if (accessor.isSensorCentricVolume()) {
    SourceCoverageType::serialize(accessor.getSensorCentricVolume(), node, OrbitalSurveillanceSensorTargetType_Names::SensorCentricVolume_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalSurveillanceSensorTargetType& OrbitalSurveillanceSensorTargetType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalSurveillanceSensorTargetType>().release());
}

uci::type::OrbitalSurveillanceSensorTargetType& OrbitalSurveillanceSensorTargetType::create(const uci::type::OrbitalSurveillanceSensorTargetType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalSurveillanceSensorTargetType> newAccessor{boost::make_unique<asb_uci::type::OrbitalSurveillanceSensorTargetType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalSurveillanceSensorTargetType::destroy(uci::type::OrbitalSurveillanceSensorTargetType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalSurveillanceSensorTargetType*>(&accessor);
}

} // namespace type

} // namespace uci

