/** @file COMINT_SubCapabilityDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/COMINT_SubCapabilityDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/COMINT_AcquisitionTargetType.h"
#include "asb_uci/type/COMINT_DirectionFindingType.h"
#include "asb_uci/type/COMINT_GeolocationType.h"
#include "asb_uci/type/COMINT_IdentificationType.h"
#include "asb_uci/type/COMINT_MeasurementType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/COMINT_AcquisitionTargetType.h"
#include "uci/type/COMINT_DirectionFindingType.h"
#include "uci/type/COMINT_GeolocationType.h"
#include "uci/type/COMINT_IdentificationType.h"
#include "uci/type/COMINT_MeasurementType.h"
#include "uci/type/COMINT_SubCapabilityDetailsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

COMINT_SubCapabilityDetailsType::COMINT_SubCapabilityDetailsType() = default;

COMINT_SubCapabilityDetailsType::~COMINT_SubCapabilityDetailsType() = default;

void COMINT_SubCapabilityDetailsType::copy(const uci::type::COMINT_SubCapabilityDetailsType& accessor) {
  copyImpl(accessor, false);
}

void COMINT_SubCapabilityDetailsType::copyImpl(const uci::type::COMINT_SubCapabilityDetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const COMINT_SubCapabilityDetailsType&>(accessor);
    if (accessorImpl.acquisition_Accessor) {
      setAcquisition(*(accessorImpl.acquisition_Accessor));
    } else {
      acquisition_Accessor.reset();
    }
    if (accessorImpl.directionFinding_Accessor) {
      setDirectionFinding(*(accessorImpl.directionFinding_Accessor));
    } else {
      directionFinding_Accessor.reset();
    }
    if (accessorImpl.identification_Accessor) {
      setIdentification(*(accessorImpl.identification_Accessor));
    } else {
      identification_Accessor.reset();
    }
    if (accessorImpl.geolocation_Accessor) {
      setGeolocation(*(accessorImpl.geolocation_Accessor));
    } else {
      geolocation_Accessor.reset();
    }
    if (accessorImpl.measurement_Accessor) {
      setMeasurement(*(accessorImpl.measurement_Accessor));
    } else {
      measurement_Accessor.reset();
    }
  }
}

void COMINT_SubCapabilityDetailsType::reset() noexcept {
  acquisition_Accessor.reset();
  directionFinding_Accessor.reset();
  identification_Accessor.reset();
  geolocation_Accessor.reset();
  measurement_Accessor.reset();
}

uci::type::COMINT_SubCapabilityDetailsType::COMINT_SubCapabilityDetailsTypeChoice COMINT_SubCapabilityDetailsType::getCOMINT_SubCapabilityDetailsTypeChoiceOrdinal() const noexcept {
  if (acquisition_Accessor) {
    return COMINT_SUBCAPABILITYDETAILSTYPE_CHOICE_ACQUISITION;
  }
  if (directionFinding_Accessor) {
    return COMINT_SUBCAPABILITYDETAILSTYPE_CHOICE_DIRECTIONFINDING;
  }
  if (identification_Accessor) {
    return COMINT_SUBCAPABILITYDETAILSTYPE_CHOICE_IDENTIFICATION;
  }
  if (geolocation_Accessor) {
    return COMINT_SUBCAPABILITYDETAILSTYPE_CHOICE_GEOLOCATION;
  }
  if (measurement_Accessor) {
    return COMINT_SUBCAPABILITYDETAILSTYPE_CHOICE_MEASUREMENT;
  }
  return COMINT_SUBCAPABILITYDETAILSTYPE_CHOICE_NONE;
}

uci::type::COMINT_SubCapabilityDetailsType& COMINT_SubCapabilityDetailsType::setCOMINT_SubCapabilityDetailsTypeChoiceOrdinal(uci::type::COMINT_SubCapabilityDetailsType::COMINT_SubCapabilityDetailsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case COMINT_SUBCAPABILITYDETAILSTYPE_CHOICE_ACQUISITION:
      chooseAcquisition("setCOMINT_SubCapabilityDetailsTypeChoiceOrdinal", type);
      break;
    case COMINT_SUBCAPABILITYDETAILSTYPE_CHOICE_DIRECTIONFINDING:
      chooseDirectionFinding("setCOMINT_SubCapabilityDetailsTypeChoiceOrdinal", type);
      break;
    case COMINT_SUBCAPABILITYDETAILSTYPE_CHOICE_IDENTIFICATION:
      chooseIdentification("setCOMINT_SubCapabilityDetailsTypeChoiceOrdinal", type);
      break;
    case COMINT_SUBCAPABILITYDETAILSTYPE_CHOICE_GEOLOCATION:
      chooseGeolocation("setCOMINT_SubCapabilityDetailsTypeChoiceOrdinal", type);
      break;
    case COMINT_SUBCAPABILITYDETAILSTYPE_CHOICE_MEASUREMENT:
      chooseMeasurement("setCOMINT_SubCapabilityDetailsTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setCOMINT_SubCapabilityDetailsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::COMINT_AcquisitionTargetType& COMINT_SubCapabilityDetailsType::getAcquisition_() const {
  if (acquisition_Accessor) {
    return *acquisition_Accessor;
  }
  throw uci::base::UCIException("Error in getAcquisition(): Unable to get Acquisition, field not selected");
}

const uci::type::COMINT_AcquisitionTargetType& COMINT_SubCapabilityDetailsType::getAcquisition() const {
  return getAcquisition_();
}

uci::type::COMINT_AcquisitionTargetType& COMINT_SubCapabilityDetailsType::getAcquisition() {
  return getAcquisition_();
}

uci::type::COMINT_SubCapabilityDetailsType& COMINT_SubCapabilityDetailsType::setAcquisition(const uci::type::COMINT_AcquisitionTargetType& accessor) {
  chooseAcquisition();
  if (&accessor != acquisition_Accessor.get()) {
    acquisition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_SubCapabilityDetailsType::isAcquisition() const noexcept {
  return static_cast<bool>(acquisition_Accessor);
}

uci::type::COMINT_AcquisitionTargetType& COMINT_SubCapabilityDetailsType::chooseAcquisition(const std::string& method, uci::base::accessorType::AccessorType type) {
  directionFinding_Accessor.reset();
  identification_Accessor.reset();
  geolocation_Accessor.reset();
  measurement_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_AcquisitionTargetType : type};
  if ((!acquisition_Accessor) || (acquisition_Accessor->getAccessorType() != requestedType)) {
    acquisition_Accessor = COMINT_AcquisitionTargetType::create(type);
    if (!acquisition_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *acquisition_Accessor;
}

uci::type::COMINT_AcquisitionTargetType& COMINT_SubCapabilityDetailsType::chooseAcquisition(uci::base::accessorType::AccessorType type) {
  return chooseAcquisition("chooseAcquisition", type);
}

uci::type::COMINT_DirectionFindingType& COMINT_SubCapabilityDetailsType::getDirectionFinding_() const {
  if (directionFinding_Accessor) {
    return *directionFinding_Accessor;
  }
  throw uci::base::UCIException("Error in getDirectionFinding(): Unable to get DirectionFinding, field not selected");
}

const uci::type::COMINT_DirectionFindingType& COMINT_SubCapabilityDetailsType::getDirectionFinding() const {
  return getDirectionFinding_();
}

uci::type::COMINT_DirectionFindingType& COMINT_SubCapabilityDetailsType::getDirectionFinding() {
  return getDirectionFinding_();
}

uci::type::COMINT_SubCapabilityDetailsType& COMINT_SubCapabilityDetailsType::setDirectionFinding(const uci::type::COMINT_DirectionFindingType& accessor) {
  chooseDirectionFinding();
  if (&accessor != directionFinding_Accessor.get()) {
    directionFinding_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_SubCapabilityDetailsType::isDirectionFinding() const noexcept {
  return static_cast<bool>(directionFinding_Accessor);
}

uci::type::COMINT_DirectionFindingType& COMINT_SubCapabilityDetailsType::chooseDirectionFinding(const std::string& method, uci::base::accessorType::AccessorType type) {
  acquisition_Accessor.reset();
  identification_Accessor.reset();
  geolocation_Accessor.reset();
  measurement_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_DirectionFindingType : type};
  if ((!directionFinding_Accessor) || (directionFinding_Accessor->getAccessorType() != requestedType)) {
    directionFinding_Accessor = COMINT_DirectionFindingType::create(type);
    if (!directionFinding_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *directionFinding_Accessor;
}

uci::type::COMINT_DirectionFindingType& COMINT_SubCapabilityDetailsType::chooseDirectionFinding(uci::base::accessorType::AccessorType type) {
  return chooseDirectionFinding("chooseDirectionFinding", type);
}

uci::type::COMINT_IdentificationType& COMINT_SubCapabilityDetailsType::getIdentification_() const {
  if (identification_Accessor) {
    return *identification_Accessor;
  }
  throw uci::base::UCIException("Error in getIdentification(): Unable to get Identification, field not selected");
}

const uci::type::COMINT_IdentificationType& COMINT_SubCapabilityDetailsType::getIdentification() const {
  return getIdentification_();
}

uci::type::COMINT_IdentificationType& COMINT_SubCapabilityDetailsType::getIdentification() {
  return getIdentification_();
}

uci::type::COMINT_SubCapabilityDetailsType& COMINT_SubCapabilityDetailsType::setIdentification(const uci::type::COMINT_IdentificationType& accessor) {
  chooseIdentification();
  if (&accessor != identification_Accessor.get()) {
    identification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_SubCapabilityDetailsType::isIdentification() const noexcept {
  return static_cast<bool>(identification_Accessor);
}

uci::type::COMINT_IdentificationType& COMINT_SubCapabilityDetailsType::chooseIdentification(const std::string& method, uci::base::accessorType::AccessorType type) {
  acquisition_Accessor.reset();
  directionFinding_Accessor.reset();
  geolocation_Accessor.reset();
  measurement_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_IdentificationType : type};
  if ((!identification_Accessor) || (identification_Accessor->getAccessorType() != requestedType)) {
    identification_Accessor = COMINT_IdentificationType::create(type);
    if (!identification_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *identification_Accessor;
}

uci::type::COMINT_IdentificationType& COMINT_SubCapabilityDetailsType::chooseIdentification(uci::base::accessorType::AccessorType type) {
  return chooseIdentification("chooseIdentification", type);
}

uci::type::COMINT_GeolocationType& COMINT_SubCapabilityDetailsType::getGeolocation_() const {
  if (geolocation_Accessor) {
    return *geolocation_Accessor;
  }
  throw uci::base::UCIException("Error in getGeolocation(): Unable to get Geolocation, field not selected");
}

const uci::type::COMINT_GeolocationType& COMINT_SubCapabilityDetailsType::getGeolocation() const {
  return getGeolocation_();
}

uci::type::COMINT_GeolocationType& COMINT_SubCapabilityDetailsType::getGeolocation() {
  return getGeolocation_();
}

uci::type::COMINT_SubCapabilityDetailsType& COMINT_SubCapabilityDetailsType::setGeolocation(const uci::type::COMINT_GeolocationType& accessor) {
  chooseGeolocation();
  if (&accessor != geolocation_Accessor.get()) {
    geolocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_SubCapabilityDetailsType::isGeolocation() const noexcept {
  return static_cast<bool>(geolocation_Accessor);
}

uci::type::COMINT_GeolocationType& COMINT_SubCapabilityDetailsType::chooseGeolocation(const std::string& method, uci::base::accessorType::AccessorType type) {
  acquisition_Accessor.reset();
  directionFinding_Accessor.reset();
  identification_Accessor.reset();
  measurement_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_GeolocationType : type};
  if ((!geolocation_Accessor) || (geolocation_Accessor->getAccessorType() != requestedType)) {
    geolocation_Accessor = COMINT_GeolocationType::create(type);
    if (!geolocation_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *geolocation_Accessor;
}

uci::type::COMINT_GeolocationType& COMINT_SubCapabilityDetailsType::chooseGeolocation(uci::base::accessorType::AccessorType type) {
  return chooseGeolocation("chooseGeolocation", type);
}

uci::type::COMINT_MeasurementType& COMINT_SubCapabilityDetailsType::getMeasurement_() const {
  if (measurement_Accessor) {
    return *measurement_Accessor;
  }
  throw uci::base::UCIException("Error in getMeasurement(): Unable to get Measurement, field not selected");
}

const uci::type::COMINT_MeasurementType& COMINT_SubCapabilityDetailsType::getMeasurement() const {
  return getMeasurement_();
}

uci::type::COMINT_MeasurementType& COMINT_SubCapabilityDetailsType::getMeasurement() {
  return getMeasurement_();
}

uci::type::COMINT_SubCapabilityDetailsType& COMINT_SubCapabilityDetailsType::setMeasurement(const uci::type::COMINT_MeasurementType& accessor) {
  chooseMeasurement();
  if (&accessor != measurement_Accessor.get()) {
    measurement_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool COMINT_SubCapabilityDetailsType::isMeasurement() const noexcept {
  return static_cast<bool>(measurement_Accessor);
}

uci::type::COMINT_MeasurementType& COMINT_SubCapabilityDetailsType::chooseMeasurement(const std::string& method, uci::base::accessorType::AccessorType type) {
  acquisition_Accessor.reset();
  directionFinding_Accessor.reset();
  identification_Accessor.reset();
  geolocation_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_MeasurementType : type};
  if ((!measurement_Accessor) || (measurement_Accessor->getAccessorType() != requestedType)) {
    measurement_Accessor = COMINT_MeasurementType::create(type);
    if (!measurement_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *measurement_Accessor;
}

uci::type::COMINT_MeasurementType& COMINT_SubCapabilityDetailsType::chooseMeasurement(uci::base::accessorType::AccessorType type) {
  return chooseMeasurement("chooseMeasurement", type);
}

std::unique_ptr<COMINT_SubCapabilityDetailsType> COMINT_SubCapabilityDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOMINT_SubCapabilityDetailsType : type};
  return (requestedType == uci::type::accessorType::cOMINT_SubCapabilityDetailsType) ? boost::make_unique<COMINT_SubCapabilityDetailsType>() : nullptr;
}

/**  */
namespace COMINT_SubCapabilityDetailsType_Names {

constexpr const char* Extern_Type_Name{"COMINT_SubCapabilityDetailsType"};
constexpr const char* Acquisition_Name{"Acquisition"};
constexpr const char* DirectionFinding_Name{"DirectionFinding"};
constexpr const char* Identification_Name{"Identification"};
constexpr const char* Geolocation_Name{"Geolocation"};
constexpr const char* Measurement_Name{"Measurement"};

} // namespace COMINT_SubCapabilityDetailsType_Names

void COMINT_SubCapabilityDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::COMINT_SubCapabilityDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = COMINT_SubCapabilityDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + COMINT_SubCapabilityDetailsType_Names::Acquisition_Name) {
      COMINT_AcquisitionTargetType::deserialize(valueType.second, accessor.chooseAcquisition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_SubCapabilityDetailsType_Names::DirectionFinding_Name) {
      COMINT_DirectionFindingType::deserialize(valueType.second, accessor.chooseDirectionFinding(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_SubCapabilityDetailsType_Names::Identification_Name) {
      COMINT_IdentificationType::deserialize(valueType.second, accessor.chooseIdentification(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_SubCapabilityDetailsType_Names::Geolocation_Name) {
      COMINT_GeolocationType::deserialize(valueType.second, accessor.chooseGeolocation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_SubCapabilityDetailsType_Names::Measurement_Name) {
      COMINT_MeasurementType::deserialize(valueType.second, accessor.chooseMeasurement(), nodeName, nsPrefix);
    }
  }
}

std::string COMINT_SubCapabilityDetailsType::serialize(const uci::type::COMINT_SubCapabilityDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? COMINT_SubCapabilityDetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, COMINT_SubCapabilityDetailsType_Names::Extern_Type_Name);
  }
  if (accessor.isAcquisition()) {
    COMINT_AcquisitionTargetType::serialize(accessor.getAcquisition(), node, COMINT_SubCapabilityDetailsType_Names::Acquisition_Name);
  } else if (accessor.isDirectionFinding()) {
    COMINT_DirectionFindingType::serialize(accessor.getDirectionFinding(), node, COMINT_SubCapabilityDetailsType_Names::DirectionFinding_Name);
  } else if (accessor.isIdentification()) {
    COMINT_IdentificationType::serialize(accessor.getIdentification(), node, COMINT_SubCapabilityDetailsType_Names::Identification_Name);
  } else if (accessor.isGeolocation()) {
    COMINT_GeolocationType::serialize(accessor.getGeolocation(), node, COMINT_SubCapabilityDetailsType_Names::Geolocation_Name);
  } else if (accessor.isMeasurement()) {
    COMINT_MeasurementType::serialize(accessor.getMeasurement(), node, COMINT_SubCapabilityDetailsType_Names::Measurement_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::COMINT_SubCapabilityDetailsType& COMINT_SubCapabilityDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::COMINT_SubCapabilityDetailsType>().release());
}

uci::type::COMINT_SubCapabilityDetailsType& COMINT_SubCapabilityDetailsType::create(const uci::type::COMINT_SubCapabilityDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::COMINT_SubCapabilityDetailsType> newAccessor{boost::make_unique<asb_uci::type::COMINT_SubCapabilityDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void COMINT_SubCapabilityDetailsType::destroy(uci::type::COMINT_SubCapabilityDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::COMINT_SubCapabilityDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

