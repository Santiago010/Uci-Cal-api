/** @file ESM_SettingsCommandMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ESM_SettingsCommandMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AmbiguityOrderingEnum.h"
#include "../../../include/asb_uci/type/ApplicableVolumeType.h"
#include "../../../include/asb_uci/type/ApplicableZoneType.h"
#include "../../../include/asb_uci/type/CapabilitySettingsCommandBaseType.h"
#include "../../../include/asb_uci/type/ESM_BinProfileType.h"
#include "../../../include/asb_uci/type/ESM_MessageOutputsEnum.h"
#include "../../../include/asb_uci/type/ESM_ProfileEditType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AmbiguityOrderingEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApplicableVolumeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ApplicableZoneType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_BinProfileType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_MessageOutputsEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_ProfileEditType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_SettingsCommandMDT.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ESM_SettingsCommandMDT::ESM_SettingsCommandMDT()
  : messageOutput_Accessor{boost::make_unique<MessageOutput>(0, 6)},
    scanScheduleProfileData_Accessor{boost::make_unique<ScanScheduleProfileData>(0, SIZE_MAX)} {
}

ESM_SettingsCommandMDT::~ESM_SettingsCommandMDT() = default;

void ESM_SettingsCommandMDT::copy(const uci::type::ESM_SettingsCommandMDT& accessor) {
  copyImpl(accessor, false);
}

void ESM_SettingsCommandMDT::copyImpl(const uci::type::ESM_SettingsCommandMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CapabilitySettingsCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ESM_SettingsCommandMDT&>(accessor);
    if (accessorImpl.setAmbiguityOrdering_Accessor) {
      setSetAmbiguityOrdering(*(accessorImpl.setAmbiguityOrdering_Accessor));
    } else {
      setAmbiguityOrdering_Accessor.reset();
    }
    if (accessorImpl.hasRWR_AudioEnable()) {
      setRWR_AudioEnable(accessorImpl.getRWR_AudioEnable());
    } else {
      clearRWR_AudioEnable();
    }
    if (accessorImpl.hasSpectralDensityReporting()) {
      setSpectralDensityReporting(accessorImpl.getSpectralDensityReporting());
    } else {
      clearSpectralDensityReporting();
    }
    if (accessorImpl.editESM_Profile_Accessor) {
      setEditESM_Profile(*(accessorImpl.editESM_Profile_Accessor));
    } else {
      editESM_Profile_Accessor.reset();
    }
    if (accessorImpl.applicableZone_Accessor) {
      setApplicableZone(*(accessorImpl.applicableZone_Accessor));
    } else {
      applicableZone_Accessor.reset();
    }
    if (accessorImpl.applicableVolume_Accessor) {
      setApplicableVolume(*(accessorImpl.applicableVolume_Accessor));
    } else {
      applicableVolume_Accessor.reset();
    }
    setMessageOutput(*(accessorImpl.messageOutput_Accessor));
    setScanScheduleProfileData(*(accessorImpl.scanScheduleProfileData_Accessor));
  }
}

void ESM_SettingsCommandMDT::reset() noexcept {
  CapabilitySettingsCommandBaseType::reset();
  setAmbiguityOrdering_Accessor.reset();
  clearRWR_AudioEnable();
  clearSpectralDensityReporting();
  editESM_Profile_Accessor.reset();
  applicableZone_Accessor.reset();
  applicableVolume_Accessor.reset();
  messageOutput_Accessor->reset();
  scanScheduleProfileData_Accessor->reset();
}

uci::type::AmbiguityOrderingEnum& ESM_SettingsCommandMDT::getSetAmbiguityOrdering_() const {
  if (setAmbiguityOrdering_Accessor) {
    return *setAmbiguityOrdering_Accessor;
  }
  throw uci::base::UCIException("Error in getSetAmbiguityOrdering(): An attempt was made to get an optional field that was not enabled, call hasSetAmbiguityOrdering() to determine if it is safe to call getSetAmbiguityOrdering()");
}

const uci::type::AmbiguityOrderingEnum& ESM_SettingsCommandMDT::getSetAmbiguityOrdering() const {
  return getSetAmbiguityOrdering_();
}

uci::type::AmbiguityOrderingEnum& ESM_SettingsCommandMDT::getSetAmbiguityOrdering() {
  return getSetAmbiguityOrdering_();
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::setSetAmbiguityOrdering(const uci::type::AmbiguityOrderingEnum& accessor) {
  enableSetAmbiguityOrdering();
  if (&accessor != setAmbiguityOrdering_Accessor.get()) {
    setAmbiguityOrdering_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::setSetAmbiguityOrdering(const uci::type::AmbiguityOrderingEnum::EnumerationItem value) {
  enableSetAmbiguityOrdering().setValue(value);
  return *this;
}

bool ESM_SettingsCommandMDT::hasSetAmbiguityOrdering() const noexcept {
  return static_cast<bool>(setAmbiguityOrdering_Accessor);
}

uci::type::AmbiguityOrderingEnum& ESM_SettingsCommandMDT::enableSetAmbiguityOrdering(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ambiguityOrderingEnum : type};
  if ((!setAmbiguityOrdering_Accessor) || (setAmbiguityOrdering_Accessor->getAccessorType() != requestedType)) {
    setAmbiguityOrdering_Accessor = AmbiguityOrderingEnum::create(requestedType);
    if (!setAmbiguityOrdering_Accessor) {
      throw uci::base::UCIException("Error in enableSetAmbiguityOrdering(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *setAmbiguityOrdering_Accessor;
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::clearSetAmbiguityOrdering() noexcept {
  setAmbiguityOrdering_Accessor.reset();
  return *this;
}

xs::Boolean ESM_SettingsCommandMDT::getRWR_AudioEnable() const {
  if (rWR_AudioEnable_Accessor) {
    return *rWR_AudioEnable_Accessor;
  }
  throw uci::base::UCIException("Error in getRWR_AudioEnable(): An attempt was made to get an optional field that was not enabled, call hasRWR_AudioEnable() to determine if it is safe to call getRWR_AudioEnable()");
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::setRWR_AudioEnable(xs::Boolean value) {
  rWR_AudioEnable_Accessor = value;
  return *this;
}

bool ESM_SettingsCommandMDT::hasRWR_AudioEnable() const noexcept {
  return rWR_AudioEnable_Accessor.has_value();
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::clearRWR_AudioEnable() noexcept {
  rWR_AudioEnable_Accessor.reset();
  return *this;
}

xs::Boolean ESM_SettingsCommandMDT::getSpectralDensityReporting() const {
  if (spectralDensityReporting_Accessor) {
    return *spectralDensityReporting_Accessor;
  }
  throw uci::base::UCIException("Error in getSpectralDensityReporting(): An attempt was made to get an optional field that was not enabled, call hasSpectralDensityReporting() to determine if it is safe to call getSpectralDensityReporting()");
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::setSpectralDensityReporting(xs::Boolean value) {
  spectralDensityReporting_Accessor = value;
  return *this;
}

bool ESM_SettingsCommandMDT::hasSpectralDensityReporting() const noexcept {
  return spectralDensityReporting_Accessor.has_value();
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::clearSpectralDensityReporting() noexcept {
  spectralDensityReporting_Accessor.reset();
  return *this;
}

uci::type::ESM_ProfileEditType& ESM_SettingsCommandMDT::getEditESM_Profile_() const {
  if (editESM_Profile_Accessor) {
    return *editESM_Profile_Accessor;
  }
  throw uci::base::UCIException("Error in getEditESM_Profile(): An attempt was made to get an optional field that was not enabled, call hasEditESM_Profile() to determine if it is safe to call getEditESM_Profile()");
}

const uci::type::ESM_ProfileEditType& ESM_SettingsCommandMDT::getEditESM_Profile() const {
  return getEditESM_Profile_();
}

uci::type::ESM_ProfileEditType& ESM_SettingsCommandMDT::getEditESM_Profile() {
  return getEditESM_Profile_();
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::setEditESM_Profile(const uci::type::ESM_ProfileEditType& accessor) {
  enableEditESM_Profile();
  if (&accessor != editESM_Profile_Accessor.get()) {
    editESM_Profile_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_SettingsCommandMDT::hasEditESM_Profile() const noexcept {
  return static_cast<bool>(editESM_Profile_Accessor);
}

uci::type::ESM_ProfileEditType& ESM_SettingsCommandMDT::enableEditESM_Profile(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_ProfileEditType : type};
  if ((!editESM_Profile_Accessor) || (editESM_Profile_Accessor->getAccessorType() != requestedType)) {
    editESM_Profile_Accessor = ESM_ProfileEditType::create(requestedType);
    if (!editESM_Profile_Accessor) {
      throw uci::base::UCIException("Error in enableEditESM_Profile(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *editESM_Profile_Accessor;
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::clearEditESM_Profile() noexcept {
  editESM_Profile_Accessor.reset();
  return *this;
}

uci::type::ApplicableZoneType& ESM_SettingsCommandMDT::getApplicableZone_() const {
  if (applicableZone_Accessor) {
    return *applicableZone_Accessor;
  }
  throw uci::base::UCIException("Error in getApplicableZone(): An attempt was made to get an optional field that was not enabled, call hasApplicableZone() to determine if it is safe to call getApplicableZone()");
}

const uci::type::ApplicableZoneType& ESM_SettingsCommandMDT::getApplicableZone() const {
  return getApplicableZone_();
}

uci::type::ApplicableZoneType& ESM_SettingsCommandMDT::getApplicableZone() {
  return getApplicableZone_();
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::setApplicableZone(const uci::type::ApplicableZoneType& accessor) {
  enableApplicableZone();
  if (&accessor != applicableZone_Accessor.get()) {
    applicableZone_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_SettingsCommandMDT::hasApplicableZone() const noexcept {
  return static_cast<bool>(applicableZone_Accessor);
}

uci::type::ApplicableZoneType& ESM_SettingsCommandMDT::enableApplicableZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::applicableZoneType : type};
  if ((!applicableZone_Accessor) || (applicableZone_Accessor->getAccessorType() != requestedType)) {
    applicableZone_Accessor = ApplicableZoneType::create(requestedType);
    if (!applicableZone_Accessor) {
      throw uci::base::UCIException("Error in enableApplicableZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *applicableZone_Accessor;
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::clearApplicableZone() noexcept {
  applicableZone_Accessor.reset();
  return *this;
}

uci::type::ApplicableVolumeType& ESM_SettingsCommandMDT::getApplicableVolume_() const {
  if (applicableVolume_Accessor) {
    return *applicableVolume_Accessor;
  }
  throw uci::base::UCIException("Error in getApplicableVolume(): An attempt was made to get an optional field that was not enabled, call hasApplicableVolume() to determine if it is safe to call getApplicableVolume()");
}

const uci::type::ApplicableVolumeType& ESM_SettingsCommandMDT::getApplicableVolume() const {
  return getApplicableVolume_();
}

uci::type::ApplicableVolumeType& ESM_SettingsCommandMDT::getApplicableVolume() {
  return getApplicableVolume_();
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::setApplicableVolume(const uci::type::ApplicableVolumeType& accessor) {
  enableApplicableVolume();
  if (&accessor != applicableVolume_Accessor.get()) {
    applicableVolume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_SettingsCommandMDT::hasApplicableVolume() const noexcept {
  return static_cast<bool>(applicableVolume_Accessor);
}

uci::type::ApplicableVolumeType& ESM_SettingsCommandMDT::enableApplicableVolume(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::applicableVolumeType : type};
  if ((!applicableVolume_Accessor) || (applicableVolume_Accessor->getAccessorType() != requestedType)) {
    applicableVolume_Accessor = ApplicableVolumeType::create(requestedType);
    if (!applicableVolume_Accessor) {
      throw uci::base::UCIException("Error in enableApplicableVolume(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *applicableVolume_Accessor;
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::clearApplicableVolume() noexcept {
  applicableVolume_Accessor.reset();
  return *this;
}

const uci::type::ESM_SettingsCommandMDT::MessageOutput& ESM_SettingsCommandMDT::getMessageOutput() const {
  return *messageOutput_Accessor;
}

uci::type::ESM_SettingsCommandMDT::MessageOutput& ESM_SettingsCommandMDT::getMessageOutput() {
  return *messageOutput_Accessor;
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::setMessageOutput(const uci::type::ESM_SettingsCommandMDT::MessageOutput& accessor) {
  if (&accessor != messageOutput_Accessor.get()) {
    messageOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ESM_SettingsCommandMDT::ScanScheduleProfileData& ESM_SettingsCommandMDT::getScanScheduleProfileData() const {
  return *scanScheduleProfileData_Accessor;
}

uci::type::ESM_SettingsCommandMDT::ScanScheduleProfileData& ESM_SettingsCommandMDT::getScanScheduleProfileData() {
  return *scanScheduleProfileData_Accessor;
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::setScanScheduleProfileData(const uci::type::ESM_SettingsCommandMDT::ScanScheduleProfileData& accessor) {
  if (&accessor != scanScheduleProfileData_Accessor.get()) {
    scanScheduleProfileData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ESM_SettingsCommandMDT> ESM_SettingsCommandMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_SettingsCommandMDT : type};
  return (requestedType == uci::type::accessorType::eSM_SettingsCommandMDT) ? boost::make_unique<ESM_SettingsCommandMDT>() : nullptr;
}

/**  */
namespace ESM_SettingsCommandMDT_Names {

constexpr const char* Extern_Type_Name{"ESM_SettingsCommandMDT"};
constexpr const char* SetAmbiguityOrdering_Name{"SetAmbiguityOrdering"};
constexpr const char* RWR_AudioEnable_Name{"RWR_AudioEnable"};
constexpr const char* SpectralDensityReporting_Name{"SpectralDensityReporting"};
constexpr const char* EditESM_Profile_Name{"EditESM_Profile"};
constexpr const char* ApplicableZone_Name{"ApplicableZone"};
constexpr const char* ApplicableVolume_Name{"ApplicableVolume"};
constexpr const char* MessageOutput_Name{"MessageOutput"};
constexpr const char* ScanScheduleProfileData_Name{"ScanScheduleProfileData"};

} // namespace ESM_SettingsCommandMDT_Names

void ESM_SettingsCommandMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ESM_SettingsCommandMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ESM_SettingsCommandMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ESM_SettingsCommandMDT_Names::SetAmbiguityOrdering_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSetAmbiguityOrdering().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ESM_SettingsCommandMDT_Names::RWR_AudioEnable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRWR_AudioEnable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_SettingsCommandMDT_Names::SpectralDensityReporting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpectralDensityReporting(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_SettingsCommandMDT_Names::EditESM_Profile_Name) {
      ESM_ProfileEditType::deserialize(valueType.second, accessor.enableEditESM_Profile(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_SettingsCommandMDT_Names::ApplicableZone_Name) {
      ApplicableZoneType::deserialize(valueType.second, accessor.enableApplicableZone(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_SettingsCommandMDT_Names::ApplicableVolume_Name) {
      ApplicableVolumeType::deserialize(valueType.second, accessor.enableApplicableVolume(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_SettingsCommandMDT_Names::MessageOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ESM_SettingsCommandMDT::MessageOutput& boundedList = accessor.getMessageOutput();
        const uci::type::ESM_SettingsCommandMDT::MessageOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ESM_SettingsCommandMDT_Names::ScanScheduleProfileData_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ESM_SettingsCommandMDT::ScanScheduleProfileData& boundedList = accessor.getScanScheduleProfileData();
        const uci::type::ESM_SettingsCommandMDT::ScanScheduleProfileData::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ESM_BinProfileType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  CapabilitySettingsCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ESM_SettingsCommandMDT::serialize(const uci::type::ESM_SettingsCommandMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ESM_SettingsCommandMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ESM_SettingsCommandMDT_Names::Extern_Type_Name);
  }
  CapabilitySettingsCommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasSetAmbiguityOrdering()) {
    AmbiguityOrderingEnum::serialize(accessor.getSetAmbiguityOrdering(), node, ESM_SettingsCommandMDT_Names::SetAmbiguityOrdering_Name, false);
  }
  if (accessor.hasRWR_AudioEnable()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getRWR_AudioEnable(), node, ESM_SettingsCommandMDT_Names::RWR_AudioEnable_Name);
  }
  if (accessor.hasSpectralDensityReporting()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSpectralDensityReporting(), node, ESM_SettingsCommandMDT_Names::SpectralDensityReporting_Name);
  }
  if (accessor.hasEditESM_Profile()) {
    ESM_ProfileEditType::serialize(accessor.getEditESM_Profile(), node, ESM_SettingsCommandMDT_Names::EditESM_Profile_Name);
  }
  if (accessor.hasApplicableZone()) {
    ApplicableZoneType::serialize(accessor.getApplicableZone(), node, ESM_SettingsCommandMDT_Names::ApplicableZone_Name);
  }
  if (accessor.hasApplicableVolume()) {
    ApplicableVolumeType::serialize(accessor.getApplicableVolume(), node, ESM_SettingsCommandMDT_Names::ApplicableVolume_Name);
  }
  {
    const uci::type::ESM_SettingsCommandMDT::MessageOutput& boundedList = accessor.getMessageOutput();
    for (uci::type::ESM_SettingsCommandMDT::MessageOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ESM_MessageOutputsEnum::serialize(boundedList.at(i), node, ESM_SettingsCommandMDT_Names::MessageOutput_Name, false);
    }
  }
  {
    const uci::type::ESM_SettingsCommandMDT::ScanScheduleProfileData& boundedList = accessor.getScanScheduleProfileData();
    for (uci::type::ESM_SettingsCommandMDT::ScanScheduleProfileData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ESM_BinProfileType::serialize(boundedList.at(i), node, ESM_SettingsCommandMDT_Names::ScanScheduleProfileData_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ESM_SettingsCommandMDT>().release());
}

uci::type::ESM_SettingsCommandMDT& ESM_SettingsCommandMDT::create(const uci::type::ESM_SettingsCommandMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ESM_SettingsCommandMDT> newAccessor{boost::make_unique<asb_uci::type::ESM_SettingsCommandMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ESM_SettingsCommandMDT::destroy(uci::type::ESM_SettingsCommandMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ESM_SettingsCommandMDT*>(&accessor);
}

} // namespace type

} // namespace uci

