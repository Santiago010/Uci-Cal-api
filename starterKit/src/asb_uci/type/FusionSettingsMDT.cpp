/** @file FusionSettingsMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/FusionSettingsMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityStalenessThresholdsType.h"
#include "asb_uci/type/FusionSettingsType.h"
#include "asb_uci/type/FusionSourceType.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EntityStalenessThresholdsType.h"
#include "uci/type/FusionSettingsMDT.h"
#include "uci/type/FusionSettingsType.h"
#include "uci/type/FusionSourceType.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FusionSettingsMDT::FusionSettingsMDT()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()},
    serviceID_Accessor{boost::make_unique<ServiceID_Type>()},
    stalenessThresholds_Accessor{boost::make_unique<StalenessThresholds>(0, SIZE_MAX)},
    inputSource_Accessor{boost::make_unique<InputSource>(0, SIZE_MAX)} {
}

FusionSettingsMDT::~FusionSettingsMDT() = default;

void FusionSettingsMDT::copy(const uci::type::FusionSettingsMDT& accessor) {
  copyImpl(accessor, false);
}

void FusionSettingsMDT::copyImpl(const uci::type::FusionSettingsMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const FusionSettingsMDT&>(accessor);
    setSystemID(*(accessorImpl.systemID_Accessor));
    setServiceID(*(accessorImpl.serviceID_Accessor));
    setStalenessThresholds(*(accessorImpl.stalenessThresholds_Accessor));
    if (accessorImpl.mergeAndDropSettings_Accessor) {
      setMergeAndDropSettings(*(accessorImpl.mergeAndDropSettings_Accessor));
    } else {
      mergeAndDropSettings_Accessor.reset();
    }
    setInputSource(*(accessorImpl.inputSource_Accessor));
  }
}

void FusionSettingsMDT::reset() noexcept {
  systemID_Accessor->reset();
  serviceID_Accessor->reset();
  stalenessThresholds_Accessor->reset();
  mergeAndDropSettings_Accessor.reset();
  inputSource_Accessor->reset();
}

const uci::type::SystemID_Type& FusionSettingsMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& FusionSettingsMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::FusionSettingsMDT& FusionSettingsMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ServiceID_Type& FusionSettingsMDT::getServiceID() const {
  return *serviceID_Accessor;
}

uci::type::ServiceID_Type& FusionSettingsMDT::getServiceID() {
  return *serviceID_Accessor;
}

uci::type::FusionSettingsMDT& FusionSettingsMDT::setServiceID(const uci::type::ServiceID_Type& accessor) {
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::FusionSettingsMDT::StalenessThresholds& FusionSettingsMDT::getStalenessThresholds() const {
  return *stalenessThresholds_Accessor;
}

uci::type::FusionSettingsMDT::StalenessThresholds& FusionSettingsMDT::getStalenessThresholds() {
  return *stalenessThresholds_Accessor;
}

uci::type::FusionSettingsMDT& FusionSettingsMDT::setStalenessThresholds(const uci::type::FusionSettingsMDT::StalenessThresholds& accessor) {
  if (&accessor != stalenessThresholds_Accessor.get()) {
    stalenessThresholds_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FusionSettingsType& FusionSettingsMDT::getMergeAndDropSettings_() const {
  if (mergeAndDropSettings_Accessor) {
    return *mergeAndDropSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getMergeAndDropSettings(): An attempt was made to get an optional field that was not enabled, call hasMergeAndDropSettings() to determine if it is safe to call getMergeAndDropSettings()");
}

const uci::type::FusionSettingsType& FusionSettingsMDT::getMergeAndDropSettings() const {
  return getMergeAndDropSettings_();
}

uci::type::FusionSettingsType& FusionSettingsMDT::getMergeAndDropSettings() {
  return getMergeAndDropSettings_();
}

uci::type::FusionSettingsMDT& FusionSettingsMDT::setMergeAndDropSettings(const uci::type::FusionSettingsType& accessor) {
  enableMergeAndDropSettings();
  if (&accessor != mergeAndDropSettings_Accessor.get()) {
    mergeAndDropSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FusionSettingsMDT::hasMergeAndDropSettings() const noexcept {
  return static_cast<bool>(mergeAndDropSettings_Accessor);
}

uci::type::FusionSettingsType& FusionSettingsMDT::enableMergeAndDropSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fusionSettingsType : type};
  if ((!mergeAndDropSettings_Accessor) || (mergeAndDropSettings_Accessor->getAccessorType() != requestedType)) {
    mergeAndDropSettings_Accessor = FusionSettingsType::create(requestedType);
    if (!mergeAndDropSettings_Accessor) {
      throw uci::base::UCIException("Error in enableMergeAndDropSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mergeAndDropSettings_Accessor;
}

uci::type::FusionSettingsMDT& FusionSettingsMDT::clearMergeAndDropSettings() noexcept {
  mergeAndDropSettings_Accessor.reset();
  return *this;
}

const uci::type::FusionSettingsMDT::InputSource& FusionSettingsMDT::getInputSource() const {
  return *inputSource_Accessor;
}

uci::type::FusionSettingsMDT::InputSource& FusionSettingsMDT::getInputSource() {
  return *inputSource_Accessor;
}

uci::type::FusionSettingsMDT& FusionSettingsMDT::setInputSource(const uci::type::FusionSettingsMDT::InputSource& accessor) {
  if (&accessor != inputSource_Accessor.get()) {
    inputSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<FusionSettingsMDT> FusionSettingsMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fusionSettingsMDT : type};
  return (requestedType == uci::type::accessorType::fusionSettingsMDT) ? boost::make_unique<FusionSettingsMDT>() : nullptr;
}

/**  */
namespace FusionSettingsMDT_Names {

constexpr const char* Extern_Type_Name{"FusionSettingsMDT"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* StalenessThresholds_Name{"StalenessThresholds"};
constexpr const char* MergeAndDropSettings_Name{"MergeAndDropSettings"};
constexpr const char* InputSource_Name{"InputSource"};

} // namespace FusionSettingsMDT_Names

void FusionSettingsMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::FusionSettingsMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FusionSettingsMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FusionSettingsMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FusionSettingsMDT_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.getServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FusionSettingsMDT_Names::StalenessThresholds_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::FusionSettingsMDT::StalenessThresholds& boundedList = accessor.getStalenessThresholds();
        const uci::type::FusionSettingsMDT::StalenessThresholds::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EntityStalenessThresholdsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + FusionSettingsMDT_Names::MergeAndDropSettings_Name) {
      FusionSettingsType::deserialize(valueType.second, accessor.enableMergeAndDropSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FusionSettingsMDT_Names::InputSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::FusionSettingsMDT::InputSource& boundedList = accessor.getInputSource();
        const uci::type::FusionSettingsMDT::InputSource::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FusionSourceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string FusionSettingsMDT::serialize(const uci::type::FusionSettingsMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FusionSettingsMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FusionSettingsMDT_Names::Extern_Type_Name);
  }
  SystemID_Type::serialize(accessor.getSystemID(), node, FusionSettingsMDT_Names::SystemID_Name);
  ServiceID_Type::serialize(accessor.getServiceID(), node, FusionSettingsMDT_Names::ServiceID_Name);
  {
    const uci::type::FusionSettingsMDT::StalenessThresholds& boundedList = accessor.getStalenessThresholds();
    for (uci::type::FusionSettingsMDT::StalenessThresholds::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EntityStalenessThresholdsType::serialize(boundedList.at(i), node, FusionSettingsMDT_Names::StalenessThresholds_Name);
    }
  }
  if (accessor.hasMergeAndDropSettings()) {
    FusionSettingsType::serialize(accessor.getMergeAndDropSettings(), node, FusionSettingsMDT_Names::MergeAndDropSettings_Name);
  }
  {
    const uci::type::FusionSettingsMDT::InputSource& boundedList = accessor.getInputSource();
    for (uci::type::FusionSettingsMDT::InputSource::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FusionSourceType::serialize(boundedList.at(i), node, FusionSettingsMDT_Names::InputSource_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FusionSettingsMDT& FusionSettingsMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FusionSettingsMDT>().release());
}

uci::type::FusionSettingsMDT& FusionSettingsMDT::create(const uci::type::FusionSettingsMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FusionSettingsMDT> newAccessor{boost::make_unique<asb_uci::type::FusionSettingsMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FusionSettingsMDT::destroy(uci::type::FusionSettingsMDT& accessor) {
  delete dynamic_cast<asb_uci::type::FusionSettingsMDT*>(&accessor);
}

} // namespace type

} // namespace uci

