/** @file RoutePlanSegmentReferenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RoutePlanSegmentReferenceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/MissionPlanID_Type.h"
#include "asb_uci/type/PathID_Type.h"
#include "asb_uci/type/RoutePlanID_Type.h"
#include "asb_uci/type/SegmentID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/MissionPlanID_Type.h"
#include "uci/type/PathID_Type.h"
#include "uci/type/RoutePlanID_Type.h"
#include "uci/type/RoutePlanSegmentReferenceType.h"
#include "uci/type/SegmentID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RoutePlanSegmentReferenceType::RoutePlanSegmentReferenceType()
  : routePlanID_Accessor{boost::make_unique<RoutePlanID_Type>()},
    pathID_Accessor{boost::make_unique<PathID_Type>()},
    pathSegmentID_Accessor{boost::make_unique<SegmentID_Type>()} {
}

RoutePlanSegmentReferenceType::~RoutePlanSegmentReferenceType() = default;

void RoutePlanSegmentReferenceType::copy(const uci::type::RoutePlanSegmentReferenceType& accessor) {
  copyImpl(accessor, false);
}

void RoutePlanSegmentReferenceType::copyImpl(const uci::type::RoutePlanSegmentReferenceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RoutePlanSegmentReferenceType&>(accessor);
    setRoutePlanID(*(accessorImpl.routePlanID_Accessor));
    setPathID(*(accessorImpl.pathID_Accessor));
    setPathSegmentID(*(accessorImpl.pathSegmentID_Accessor));
    if (accessorImpl.missionPlanID_Accessor) {
      setMissionPlanID(*(accessorImpl.missionPlanID_Accessor));
    } else {
      missionPlanID_Accessor.reset();
    }
  }
}

void RoutePlanSegmentReferenceType::reset() noexcept {
  routePlanID_Accessor->reset();
  pathID_Accessor->reset();
  pathSegmentID_Accessor->reset();
  missionPlanID_Accessor.reset();
}

const uci::type::RoutePlanID_Type& RoutePlanSegmentReferenceType::getRoutePlanID() const {
  return *routePlanID_Accessor;
}

uci::type::RoutePlanID_Type& RoutePlanSegmentReferenceType::getRoutePlanID() {
  return *routePlanID_Accessor;
}

uci::type::RoutePlanSegmentReferenceType& RoutePlanSegmentReferenceType::setRoutePlanID(const uci::type::RoutePlanID_Type& accessor) {
  if (&accessor != routePlanID_Accessor.get()) {
    routePlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PathID_Type& RoutePlanSegmentReferenceType::getPathID() const {
  return *pathID_Accessor;
}

uci::type::PathID_Type& RoutePlanSegmentReferenceType::getPathID() {
  return *pathID_Accessor;
}

uci::type::RoutePlanSegmentReferenceType& RoutePlanSegmentReferenceType::setPathID(const uci::type::PathID_Type& accessor) {
  if (&accessor != pathID_Accessor.get()) {
    pathID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SegmentID_Type& RoutePlanSegmentReferenceType::getPathSegmentID() const {
  return *pathSegmentID_Accessor;
}

uci::type::SegmentID_Type& RoutePlanSegmentReferenceType::getPathSegmentID() {
  return *pathSegmentID_Accessor;
}

uci::type::RoutePlanSegmentReferenceType& RoutePlanSegmentReferenceType::setPathSegmentID(const uci::type::SegmentID_Type& accessor) {
  if (&accessor != pathSegmentID_Accessor.get()) {
    pathSegmentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MissionPlanID_Type& RoutePlanSegmentReferenceType::getMissionPlanID_() const {
  if (missionPlanID_Accessor) {
    return *missionPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionPlanID(): An attempt was made to get an optional field that was not enabled, call hasMissionPlanID() to determine if it is safe to call getMissionPlanID()");
}

const uci::type::MissionPlanID_Type& RoutePlanSegmentReferenceType::getMissionPlanID() const {
  return getMissionPlanID_();
}

uci::type::MissionPlanID_Type& RoutePlanSegmentReferenceType::getMissionPlanID() {
  return getMissionPlanID_();
}

uci::type::RoutePlanSegmentReferenceType& RoutePlanSegmentReferenceType::setMissionPlanID(const uci::type::MissionPlanID_Type& accessor) {
  enableMissionPlanID();
  if (&accessor != missionPlanID_Accessor.get()) {
    missionPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RoutePlanSegmentReferenceType::hasMissionPlanID() const noexcept {
  return static_cast<bool>(missionPlanID_Accessor);
}

uci::type::MissionPlanID_Type& RoutePlanSegmentReferenceType::enableMissionPlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanID_Type : type};
  if ((!missionPlanID_Accessor) || (missionPlanID_Accessor->getAccessorType() != requestedType)) {
    missionPlanID_Accessor = MissionPlanID_Type::create(requestedType);
    if (!missionPlanID_Accessor) {
      throw uci::base::UCIException("Error in enableMissionPlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionPlanID_Accessor;
}

uci::type::RoutePlanSegmentReferenceType& RoutePlanSegmentReferenceType::clearMissionPlanID() noexcept {
  missionPlanID_Accessor.reset();
  return *this;
}

std::unique_ptr<RoutePlanSegmentReferenceType> RoutePlanSegmentReferenceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePlanSegmentReferenceType : type};
  return (requestedType == uci::type::accessorType::routePlanSegmentReferenceType) ? boost::make_unique<RoutePlanSegmentReferenceType>() : nullptr;
}

/**  */
namespace RoutePlanSegmentReferenceType_Names {

constexpr const char* Extern_Type_Name{"RoutePlanSegmentReferenceType"};
constexpr const char* RoutePlanID_Name{"RoutePlanID"};
constexpr const char* PathID_Name{"PathID"};
constexpr const char* PathSegmentID_Name{"PathSegmentID"};
constexpr const char* MissionPlanID_Name{"MissionPlanID"};

} // namespace RoutePlanSegmentReferenceType_Names

void RoutePlanSegmentReferenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RoutePlanSegmentReferenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RoutePlanSegmentReferenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RoutePlanSegmentReferenceType_Names::RoutePlanID_Name) {
      RoutePlanID_Type::deserialize(valueType.second, accessor.getRoutePlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePlanSegmentReferenceType_Names::PathID_Name) {
      PathID_Type::deserialize(valueType.second, accessor.getPathID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePlanSegmentReferenceType_Names::PathSegmentID_Name) {
      SegmentID_Type::deserialize(valueType.second, accessor.getPathSegmentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePlanSegmentReferenceType_Names::MissionPlanID_Name) {
      MissionPlanID_Type::deserialize(valueType.second, accessor.enableMissionPlanID(), nodeName, nsPrefix);
    }
  }
}

std::string RoutePlanSegmentReferenceType::serialize(const uci::type::RoutePlanSegmentReferenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RoutePlanSegmentReferenceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RoutePlanSegmentReferenceType_Names::Extern_Type_Name);
  }
  RoutePlanID_Type::serialize(accessor.getRoutePlanID(), node, RoutePlanSegmentReferenceType_Names::RoutePlanID_Name);
  PathID_Type::serialize(accessor.getPathID(), node, RoutePlanSegmentReferenceType_Names::PathID_Name);
  SegmentID_Type::serialize(accessor.getPathSegmentID(), node, RoutePlanSegmentReferenceType_Names::PathSegmentID_Name);
  if (accessor.hasMissionPlanID()) {
    MissionPlanID_Type::serialize(accessor.getMissionPlanID(), node, RoutePlanSegmentReferenceType_Names::MissionPlanID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RoutePlanSegmentReferenceType& RoutePlanSegmentReferenceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RoutePlanSegmentReferenceType>().release());
}

uci::type::RoutePlanSegmentReferenceType& RoutePlanSegmentReferenceType::create(const uci::type::RoutePlanSegmentReferenceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RoutePlanSegmentReferenceType> newAccessor{boost::make_unique<asb_uci::type::RoutePlanSegmentReferenceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RoutePlanSegmentReferenceType::destroy(uci::type::RoutePlanSegmentReferenceType& accessor) {
  delete dynamic_cast<asb_uci::type::RoutePlanSegmentReferenceType*>(&accessor);
}

} // namespace type

} // namespace uci

