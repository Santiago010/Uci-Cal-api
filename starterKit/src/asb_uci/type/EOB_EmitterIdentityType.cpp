/** @file EOB_EmitterIdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EOB_EmitterIdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EOB_CED_NameType.h"
#include "asb_uci/type/EOB_CodeWordType.h"
#include "asb_uci/type/EOB_EmitterSurrogateKeyType.h"
#include "asb_uci/type/EOB_WeaponSystemType.h"
#include "asb_uci/type/EmitterIdentityType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EOB_CED_NameType.h"
#include "uci/type/EOB_CodeWordType.h"
#include "uci/type/EOB_EmitterIdentityType.h"
#include "uci/type/EOB_EmitterSurrogateKeyType.h"
#include "uci/type/EOB_WeaponSystemType.h"
#include "uci/type/EmitterIdentityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EOB_EmitterIdentityType::EOB_EmitterIdentityType() = default;

EOB_EmitterIdentityType::~EOB_EmitterIdentityType() = default;

void EOB_EmitterIdentityType::copy(const uci::type::EOB_EmitterIdentityType& accessor) {
  copyImpl(accessor, false);
}

void EOB_EmitterIdentityType::copyImpl(const uci::type::EOB_EmitterIdentityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EOB_EmitterIdentityType&>(accessor);
    if (accessorImpl.emitter_Accessor) {
      setEmitter(*(accessorImpl.emitter_Accessor));
    } else {
      emitter_Accessor.reset();
    }
    if (accessorImpl.weaponSystem_Accessor) {
      setWeaponSystem(*(accessorImpl.weaponSystem_Accessor));
    } else {
      weaponSystem_Accessor.reset();
    }
    if (accessorImpl.cED_Name_Accessor) {
      setCED_Name(*(accessorImpl.cED_Name_Accessor));
    } else {
      cED_Name_Accessor.reset();
    }
    if (accessorImpl.emitterSK_Accessor) {
      setEmitterSK(*(accessorImpl.emitterSK_Accessor));
    } else {
      emitterSK_Accessor.reset();
    }
    if (accessorImpl.codeWord_Accessor) {
      setCodeWord(*(accessorImpl.codeWord_Accessor));
    } else {
      codeWord_Accessor.reset();
    }
  }
}

void EOB_EmitterIdentityType::reset() noexcept {
  emitter_Accessor.reset();
  weaponSystem_Accessor.reset();
  cED_Name_Accessor.reset();
  emitterSK_Accessor.reset();
  codeWord_Accessor.reset();
}

uci::type::EmitterIdentityType& EOB_EmitterIdentityType::getEmitter_() const {
  if (emitter_Accessor) {
    return *emitter_Accessor;
  }
  throw uci::base::UCIException("Error in getEmitter(): An attempt was made to get an optional field that was not enabled, call hasEmitter() to determine if it is safe to call getEmitter()");
}

const uci::type::EmitterIdentityType& EOB_EmitterIdentityType::getEmitter() const {
  return getEmitter_();
}

uci::type::EmitterIdentityType& EOB_EmitterIdentityType::getEmitter() {
  return getEmitter_();
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::setEmitter(const uci::type::EmitterIdentityType& accessor) {
  enableEmitter();
  if (&accessor != emitter_Accessor.get()) {
    emitter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EOB_EmitterIdentityType::hasEmitter() const noexcept {
  return static_cast<bool>(emitter_Accessor);
}

uci::type::EmitterIdentityType& EOB_EmitterIdentityType::enableEmitter(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emitterIdentityType : type};
  if ((!emitter_Accessor) || (emitter_Accessor->getAccessorType() != requestedType)) {
    emitter_Accessor = EmitterIdentityType::create(requestedType);
    if (!emitter_Accessor) {
      throw uci::base::UCIException("Error in enableEmitter(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emitter_Accessor;
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::clearEmitter() noexcept {
  emitter_Accessor.reset();
  return *this;
}

uci::type::EOB_WeaponSystemType& EOB_EmitterIdentityType::getWeaponSystem_() const {
  if (weaponSystem_Accessor) {
    return *weaponSystem_Accessor;
  }
  throw uci::base::UCIException("Error in getWeaponSystem(): An attempt was made to get an optional field that was not enabled, call hasWeaponSystem() to determine if it is safe to call getWeaponSystem()");
}

const uci::type::EOB_WeaponSystemType& EOB_EmitterIdentityType::getWeaponSystem() const {
  return getWeaponSystem_();
}

uci::type::EOB_WeaponSystemType& EOB_EmitterIdentityType::getWeaponSystem() {
  return getWeaponSystem_();
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::setWeaponSystem(const uci::type::EOB_WeaponSystemType& value) {
  return setWeaponSystem(value.c_str());
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::setWeaponSystem(const std::string& value) {
  return setWeaponSystem(value.c_str());
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::setWeaponSystem(const char* value) {
  enableWeaponSystem().setStringValue(value);
  return *this;
}

bool EOB_EmitterIdentityType::hasWeaponSystem() const noexcept {
  return static_cast<bool>(weaponSystem_Accessor);
}

uci::type::EOB_WeaponSystemType& EOB_EmitterIdentityType::enableWeaponSystem(uci::base::accessorType::AccessorType type) {
  if (!weaponSystem_Accessor) {
    weaponSystem_Accessor = EOB_WeaponSystemType::create(type);
  }
  return *weaponSystem_Accessor;
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::clearWeaponSystem() noexcept {
  weaponSystem_Accessor.reset();
  return *this;
}

uci::type::EOB_CED_NameType& EOB_EmitterIdentityType::getCED_Name_() const {
  if (cED_Name_Accessor) {
    return *cED_Name_Accessor;
  }
  throw uci::base::UCIException("Error in getCED_Name(): An attempt was made to get an optional field that was not enabled, call hasCED_Name() to determine if it is safe to call getCED_Name()");
}

const uci::type::EOB_CED_NameType& EOB_EmitterIdentityType::getCED_Name() const {
  return getCED_Name_();
}

uci::type::EOB_CED_NameType& EOB_EmitterIdentityType::getCED_Name() {
  return getCED_Name_();
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::setCED_Name(const uci::type::EOB_CED_NameType& value) {
  return setCED_Name(value.c_str());
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::setCED_Name(const std::string& value) {
  return setCED_Name(value.c_str());
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::setCED_Name(const char* value) {
  enableCED_Name().setStringValue(value);
  return *this;
}

bool EOB_EmitterIdentityType::hasCED_Name() const noexcept {
  return static_cast<bool>(cED_Name_Accessor);
}

uci::type::EOB_CED_NameType& EOB_EmitterIdentityType::enableCED_Name(uci::base::accessorType::AccessorType type) {
  if (!cED_Name_Accessor) {
    cED_Name_Accessor = EOB_CED_NameType::create(type);
  }
  return *cED_Name_Accessor;
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::clearCED_Name() noexcept {
  cED_Name_Accessor.reset();
  return *this;
}

uci::type::EOB_EmitterSurrogateKeyType& EOB_EmitterIdentityType::getEmitterSK_() const {
  if (emitterSK_Accessor) {
    return *emitterSK_Accessor;
  }
  throw uci::base::UCIException("Error in getEmitterSK(): An attempt was made to get an optional field that was not enabled, call hasEmitterSK() to determine if it is safe to call getEmitterSK()");
}

const uci::type::EOB_EmitterSurrogateKeyType& EOB_EmitterIdentityType::getEmitterSK() const {
  return getEmitterSK_();
}

uci::type::EOB_EmitterSurrogateKeyType& EOB_EmitterIdentityType::getEmitterSK() {
  return getEmitterSK_();
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::setEmitterSK(const uci::type::EOB_EmitterSurrogateKeyType& value) {
  return setEmitterSK(value.c_str());
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::setEmitterSK(const std::string& value) {
  return setEmitterSK(value.c_str());
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::setEmitterSK(const char* value) {
  enableEmitterSK().setStringValue(value);
  return *this;
}

bool EOB_EmitterIdentityType::hasEmitterSK() const noexcept {
  return static_cast<bool>(emitterSK_Accessor);
}

uci::type::EOB_EmitterSurrogateKeyType& EOB_EmitterIdentityType::enableEmitterSK(uci::base::accessorType::AccessorType type) {
  if (!emitterSK_Accessor) {
    emitterSK_Accessor = EOB_EmitterSurrogateKeyType::create(type);
  }
  return *emitterSK_Accessor;
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::clearEmitterSK() noexcept {
  emitterSK_Accessor.reset();
  return *this;
}

uci::type::EOB_CodeWordType& EOB_EmitterIdentityType::getCodeWord_() const {
  if (codeWord_Accessor) {
    return *codeWord_Accessor;
  }
  throw uci::base::UCIException("Error in getCodeWord(): An attempt was made to get an optional field that was not enabled, call hasCodeWord() to determine if it is safe to call getCodeWord()");
}

const uci::type::EOB_CodeWordType& EOB_EmitterIdentityType::getCodeWord() const {
  return getCodeWord_();
}

uci::type::EOB_CodeWordType& EOB_EmitterIdentityType::getCodeWord() {
  return getCodeWord_();
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::setCodeWord(const uci::type::EOB_CodeWordType& value) {
  return setCodeWord(value.c_str());
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::setCodeWord(const std::string& value) {
  return setCodeWord(value.c_str());
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::setCodeWord(const char* value) {
  enableCodeWord().setStringValue(value);
  return *this;
}

bool EOB_EmitterIdentityType::hasCodeWord() const noexcept {
  return static_cast<bool>(codeWord_Accessor);
}

uci::type::EOB_CodeWordType& EOB_EmitterIdentityType::enableCodeWord(uci::base::accessorType::AccessorType type) {
  if (!codeWord_Accessor) {
    codeWord_Accessor = EOB_CodeWordType::create(type);
  }
  return *codeWord_Accessor;
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::clearCodeWord() noexcept {
  codeWord_Accessor.reset();
  return *this;
}

std::unique_ptr<EOB_EmitterIdentityType> EOB_EmitterIdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_EmitterIdentityType : type};
  return (requestedType == uci::type::accessorType::eOB_EmitterIdentityType) ? boost::make_unique<EOB_EmitterIdentityType>() : nullptr;
}

/**  */
namespace EOB_EmitterIdentityType_Names {

constexpr const char* Extern_Type_Name{"EOB_EmitterIdentityType"};
constexpr const char* Emitter_Name{"Emitter"};
constexpr const char* WeaponSystem_Name{"WeaponSystem"};
constexpr const char* CED_Name_Name{"CED_Name"};
constexpr const char* EmitterSK_Name{"EmitterSK"};
constexpr const char* CodeWord_Name{"CodeWord"};

} // namespace EOB_EmitterIdentityType_Names

void EOB_EmitterIdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EOB_EmitterIdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EOB_EmitterIdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EOB_EmitterIdentityType_Names::Emitter_Name) {
      EmitterIdentityType::deserialize(valueType.second, accessor.enableEmitter(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_EmitterIdentityType_Names::WeaponSystem_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWeaponSystem(*value);
      }
    } else if (valueType.first == nsPrefix + EOB_EmitterIdentityType_Names::CED_Name_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCED_Name(*value);
      }
    } else if (valueType.first == nsPrefix + EOB_EmitterIdentityType_Names::EmitterSK_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEmitterSK(*value);
      }
    } else if (valueType.first == nsPrefix + EOB_EmitterIdentityType_Names::CodeWord_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCodeWord(*value);
      }
    }
  }
}

std::string EOB_EmitterIdentityType::serialize(const uci::type::EOB_EmitterIdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EOB_EmitterIdentityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EOB_EmitterIdentityType_Names::Extern_Type_Name);
  }
  if (accessor.hasEmitter()) {
    EmitterIdentityType::serialize(accessor.getEmitter(), node, EOB_EmitterIdentityType_Names::Emitter_Name);
  }
  if (accessor.hasWeaponSystem()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getWeaponSystem(), node, EOB_EmitterIdentityType_Names::WeaponSystem_Name);
  }
  if (accessor.hasCED_Name()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getCED_Name(), node, EOB_EmitterIdentityType_Names::CED_Name_Name);
  }
  if (accessor.hasEmitterSK()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getEmitterSK(), node, EOB_EmitterIdentityType_Names::EmitterSK_Name);
  }
  if (accessor.hasCodeWord()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getCodeWord(), node, EOB_EmitterIdentityType_Names::CodeWord_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EOB_EmitterIdentityType>().release());
}

uci::type::EOB_EmitterIdentityType& EOB_EmitterIdentityType::create(const uci::type::EOB_EmitterIdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EOB_EmitterIdentityType> newAccessor{boost::make_unique<asb_uci::type::EOB_EmitterIdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EOB_EmitterIdentityType::destroy(uci::type::EOB_EmitterIdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::EOB_EmitterIdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

