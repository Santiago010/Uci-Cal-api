/** @file SensorKinematicsChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SensorKinematicsChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ECEF_SensorKinematicsType.h"
#include "../../../include/asb_uci/type/SensorKinematicsOrbitalType.h"
#include "../../../include/asb_uci/type/SignalNavDataType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_SensorKinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorKinematicsChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorKinematicsOrbitalType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SignalNavDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SensorKinematicsChoiceType::SensorKinematicsChoiceType() = default;

SensorKinematicsChoiceType::~SensorKinematicsChoiceType() = default;

void SensorKinematicsChoiceType::copy(const uci::type::SensorKinematicsChoiceType& accessor) {
  copyImpl(accessor, false);
}

void SensorKinematicsChoiceType::copyImpl(const uci::type::SensorKinematicsChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SensorKinematicsChoiceType&>(accessor);
    if (accessorImpl.kinematics_Accessor) {
      setKinematics(*(accessorImpl.kinematics_Accessor));
    } else {
      kinematics_Accessor.reset();
    }
    if (accessorImpl.orbitalKinematics_Accessor) {
      setOrbitalKinematics(*(accessorImpl.orbitalKinematics_Accessor));
    } else {
      orbitalKinematics_Accessor.reset();
    }
    if (accessorImpl.eCEF_Kinematics_Accessor) {
      setECEF_Kinematics(*(accessorImpl.eCEF_Kinematics_Accessor));
    } else {
      eCEF_Kinematics_Accessor.reset();
    }
  }
}

void SensorKinematicsChoiceType::reset() noexcept {
  kinematics_Accessor.reset();
  orbitalKinematics_Accessor.reset();
  eCEF_Kinematics_Accessor.reset();
}

uci::type::SensorKinematicsChoiceType::SensorKinematicsChoiceTypeChoice SensorKinematicsChoiceType::getSensorKinematicsChoiceTypeChoiceOrdinal() const noexcept {
  if (kinematics_Accessor) {
    return SENSORKINEMATICSCHOICETYPE_CHOICE_KINEMATICS;
  }
  if (orbitalKinematics_Accessor) {
    return SENSORKINEMATICSCHOICETYPE_CHOICE_ORBITALKINEMATICS;
  }
  if (eCEF_Kinematics_Accessor) {
    return SENSORKINEMATICSCHOICETYPE_CHOICE_ECEF_KINEMATICS;
  }
  return SENSORKINEMATICSCHOICETYPE_CHOICE_NONE;
}

uci::type::SensorKinematicsChoiceType& SensorKinematicsChoiceType::setSensorKinematicsChoiceTypeChoiceOrdinal(uci::type::SensorKinematicsChoiceType::SensorKinematicsChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case SENSORKINEMATICSCHOICETYPE_CHOICE_KINEMATICS:
      chooseKinematics("setSensorKinematicsChoiceTypeChoiceOrdinal", type);
      break;
    case SENSORKINEMATICSCHOICETYPE_CHOICE_ORBITALKINEMATICS:
      chooseOrbitalKinematics("setSensorKinematicsChoiceTypeChoiceOrdinal", type);
      break;
    case SENSORKINEMATICSCHOICETYPE_CHOICE_ECEF_KINEMATICS:
      chooseECEF_Kinematics("setSensorKinematicsChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setSensorKinematicsChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SignalNavDataType& SensorKinematicsChoiceType::getKinematics_() const {
  if (kinematics_Accessor) {
    return *kinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getKinematics(): Unable to get Kinematics, field not selected");
}

const uci::type::SignalNavDataType& SensorKinematicsChoiceType::getKinematics() const {
  return getKinematics_();
}

uci::type::SignalNavDataType& SensorKinematicsChoiceType::getKinematics() {
  return getKinematics_();
}

uci::type::SensorKinematicsChoiceType& SensorKinematicsChoiceType::setKinematics(const uci::type::SignalNavDataType& accessor) {
  chooseKinematics();
  if (&accessor != kinematics_Accessor.get()) {
    kinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorKinematicsChoiceType::isKinematics() const noexcept {
  return static_cast<bool>(kinematics_Accessor);
}

uci::type::SignalNavDataType& SensorKinematicsChoiceType::chooseKinematics(const std::string& method, uci::base::accessorType::AccessorType type) {
  orbitalKinematics_Accessor.reset();
  eCEF_Kinematics_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalNavDataType : type};
  if ((!kinematics_Accessor) || (kinematics_Accessor->getAccessorType() != requestedType)) {
    kinematics_Accessor = SignalNavDataType::create(type);
    if (!kinematics_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *kinematics_Accessor;
}

uci::type::SignalNavDataType& SensorKinematicsChoiceType::chooseKinematics(uci::base::accessorType::AccessorType type) {
  return chooseKinematics("chooseKinematics", type);
}

uci::type::SensorKinematicsOrbitalType& SensorKinematicsChoiceType::getOrbitalKinematics_() const {
  if (orbitalKinematics_Accessor) {
    return *orbitalKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalKinematics(): Unable to get OrbitalKinematics, field not selected");
}

const uci::type::SensorKinematicsOrbitalType& SensorKinematicsChoiceType::getOrbitalKinematics() const {
  return getOrbitalKinematics_();
}

uci::type::SensorKinematicsOrbitalType& SensorKinematicsChoiceType::getOrbitalKinematics() {
  return getOrbitalKinematics_();
}

uci::type::SensorKinematicsChoiceType& SensorKinematicsChoiceType::setOrbitalKinematics(const uci::type::SensorKinematicsOrbitalType& accessor) {
  chooseOrbitalKinematics();
  if (&accessor != orbitalKinematics_Accessor.get()) {
    orbitalKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorKinematicsChoiceType::isOrbitalKinematics() const noexcept {
  return static_cast<bool>(orbitalKinematics_Accessor);
}

uci::type::SensorKinematicsOrbitalType& SensorKinematicsChoiceType::chooseOrbitalKinematics(const std::string& method, uci::base::accessorType::AccessorType type) {
  kinematics_Accessor.reset();
  eCEF_Kinematics_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorKinematicsOrbitalType : type};
  if ((!orbitalKinematics_Accessor) || (orbitalKinematics_Accessor->getAccessorType() != requestedType)) {
    orbitalKinematics_Accessor = SensorKinematicsOrbitalType::create(type);
    if (!orbitalKinematics_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalKinematics_Accessor;
}

uci::type::SensorKinematicsOrbitalType& SensorKinematicsChoiceType::chooseOrbitalKinematics(uci::base::accessorType::AccessorType type) {
  return chooseOrbitalKinematics("chooseOrbitalKinematics", type);
}

uci::type::ECEF_SensorKinematicsType& SensorKinematicsChoiceType::getECEF_Kinematics_() const {
  if (eCEF_Kinematics_Accessor) {
    return *eCEF_Kinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getECEF_Kinematics(): Unable to get ECEF_Kinematics, field not selected");
}

const uci::type::ECEF_SensorKinematicsType& SensorKinematicsChoiceType::getECEF_Kinematics() const {
  return getECEF_Kinematics_();
}

uci::type::ECEF_SensorKinematicsType& SensorKinematicsChoiceType::getECEF_Kinematics() {
  return getECEF_Kinematics_();
}

uci::type::SensorKinematicsChoiceType& SensorKinematicsChoiceType::setECEF_Kinematics(const uci::type::ECEF_SensorKinematicsType& accessor) {
  chooseECEF_Kinematics();
  if (&accessor != eCEF_Kinematics_Accessor.get()) {
    eCEF_Kinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SensorKinematicsChoiceType::isECEF_Kinematics() const noexcept {
  return static_cast<bool>(eCEF_Kinematics_Accessor);
}

uci::type::ECEF_SensorKinematicsType& SensorKinematicsChoiceType::chooseECEF_Kinematics(const std::string& method, uci::base::accessorType::AccessorType type) {
  kinematics_Accessor.reset();
  orbitalKinematics_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_SensorKinematicsType : type};
  if ((!eCEF_Kinematics_Accessor) || (eCEF_Kinematics_Accessor->getAccessorType() != requestedType)) {
    eCEF_Kinematics_Accessor = ECEF_SensorKinematicsType::create(type);
    if (!eCEF_Kinematics_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eCEF_Kinematics_Accessor;
}

uci::type::ECEF_SensorKinematicsType& SensorKinematicsChoiceType::chooseECEF_Kinematics(uci::base::accessorType::AccessorType type) {
  return chooseECEF_Kinematics("chooseECEF_Kinematics", type);
}

std::unique_ptr<SensorKinematicsChoiceType> SensorKinematicsChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorKinematicsChoiceType : type};
  return (requestedType == uci::type::accessorType::sensorKinematicsChoiceType) ? boost::make_unique<SensorKinematicsChoiceType>() : nullptr;
}

/**  */
namespace SensorKinematicsChoiceType_Names {

constexpr const char* Extern_Type_Name{"SensorKinematicsChoiceType"};
constexpr const char* Kinematics_Name{"Kinematics"};
constexpr const char* OrbitalKinematics_Name{"OrbitalKinematics"};
constexpr const char* ECEF_Kinematics_Name{"ECEF_Kinematics"};

} // namespace SensorKinematicsChoiceType_Names

void SensorKinematicsChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SensorKinematicsChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SensorKinematicsChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SensorKinematicsChoiceType_Names::Kinematics_Name) {
      SignalNavDataType::deserialize(valueType.second, accessor.chooseKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SensorKinematicsChoiceType_Names::OrbitalKinematics_Name) {
      SensorKinematicsOrbitalType::deserialize(valueType.second, accessor.chooseOrbitalKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SensorKinematicsChoiceType_Names::ECEF_Kinematics_Name) {
      ECEF_SensorKinematicsType::deserialize(valueType.second, accessor.chooseECEF_Kinematics(), nodeName, nsPrefix);
    }
  }
}

std::string SensorKinematicsChoiceType::serialize(const uci::type::SensorKinematicsChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SensorKinematicsChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SensorKinematicsChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isKinematics()) {
    SignalNavDataType::serialize(accessor.getKinematics(), node, SensorKinematicsChoiceType_Names::Kinematics_Name);
  } else if (accessor.isOrbitalKinematics()) {
    SensorKinematicsOrbitalType::serialize(accessor.getOrbitalKinematics(), node, SensorKinematicsChoiceType_Names::OrbitalKinematics_Name);
  } else if (accessor.isECEF_Kinematics()) {
    ECEF_SensorKinematicsType::serialize(accessor.getECEF_Kinematics(), node, SensorKinematicsChoiceType_Names::ECEF_Kinematics_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SensorKinematicsChoiceType& SensorKinematicsChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SensorKinematicsChoiceType>().release());
}

uci::type::SensorKinematicsChoiceType& SensorKinematicsChoiceType::create(const uci::type::SensorKinematicsChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SensorKinematicsChoiceType> newAccessor{boost::make_unique<asb_uci::type::SensorKinematicsChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SensorKinematicsChoiceType::destroy(uci::type::SensorKinematicsChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::SensorKinematicsChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

