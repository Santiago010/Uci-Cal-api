/** @file CommLink16TxPG_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommLink16TxPG_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommLink16TxPackingLimitEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16TxPG_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16TxPackingLimitEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_MessagePriorityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_MessageStorageLimitType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_ParticipationGroupIndexType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_SlotNumberType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_StalenessLimitType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommLink16TxPG_Type::CommLink16TxPG_Type()
  : packingLimit_Accessor{boost::make_unique<CommLink16TxPackingLimitEnum>()} {
}

CommLink16TxPG_Type::~CommLink16TxPG_Type() = default;

void CommLink16TxPG_Type::copy(const uci::type::CommLink16TxPG_Type& accessor) {
  copyImpl(accessor, false);
}

void CommLink16TxPG_Type::copyImpl(const uci::type::CommLink16TxPG_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommLink16TxPG_Type&>(accessor);
    setAutoRepromulgation(accessorImpl.autoRepromulgation_Accessor);
    setMessagePriority(accessorImpl.messagePriority_Accessor);
    setMessageTransferStorageLimit(accessorImpl.messageTransferStorageLimit_Accessor);
    setPackingLimit(*(accessorImpl.packingLimit_Accessor));
    setPG_Index(accessorImpl.pG_Index_Accessor);
    setSlotNumber(accessorImpl.slotNumber_Accessor);
    setStalenessLimit(accessorImpl.stalenessLimit_Accessor);
  }
}

void CommLink16TxPG_Type::reset() noexcept {
  autoRepromulgation_Accessor = false;
  messagePriority_Accessor = 0;
  messageTransferStorageLimit_Accessor = 0;
  packingLimit_Accessor->reset();
  pG_Index_Accessor = 0;
  slotNumber_Accessor = 0;
  stalenessLimit_Accessor = 0;
}

xs::Boolean CommLink16TxPG_Type::getAutoRepromulgation() const {
  return autoRepromulgation_Accessor;
}

uci::type::CommLink16TxPG_Type& CommLink16TxPG_Type::setAutoRepromulgation(xs::Boolean value) {
  autoRepromulgation_Accessor = value;
  return *this;
}


uci::type::Link16_MessagePriorityTypeValue CommLink16TxPG_Type::getMessagePriority() const {
  return messagePriority_Accessor;
}

uci::type::CommLink16TxPG_Type& CommLink16TxPG_Type::setMessagePriority(uci::type::Link16_MessagePriorityTypeValue value) {
  messagePriority_Accessor = value;
  return *this;
}


uci::type::Link16_MessageStorageLimitTypeValue CommLink16TxPG_Type::getMessageTransferStorageLimit() const {
  return messageTransferStorageLimit_Accessor;
}

uci::type::CommLink16TxPG_Type& CommLink16TxPG_Type::setMessageTransferStorageLimit(uci::type::Link16_MessageStorageLimitTypeValue value) {
  messageTransferStorageLimit_Accessor = value;
  return *this;
}


const uci::type::CommLink16TxPackingLimitEnum& CommLink16TxPG_Type::getPackingLimit() const {
  return *packingLimit_Accessor;
}

uci::type::CommLink16TxPackingLimitEnum& CommLink16TxPG_Type::getPackingLimit() {
  return *packingLimit_Accessor;
}

uci::type::CommLink16TxPG_Type& CommLink16TxPG_Type::setPackingLimit(const uci::type::CommLink16TxPackingLimitEnum& accessor) {
  if (&accessor != packingLimit_Accessor.get()) {
    packingLimit_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommLink16TxPG_Type& CommLink16TxPG_Type::setPackingLimit(uci::type::CommLink16TxPackingLimitEnum::EnumerationItem value) {
  packingLimit_Accessor->setValue(value);
  return *this;
}


uci::type::Link16_ParticipationGroupIndexTypeValue CommLink16TxPG_Type::getPG_Index() const {
  return pG_Index_Accessor;
}

uci::type::CommLink16TxPG_Type& CommLink16TxPG_Type::setPG_Index(uci::type::Link16_ParticipationGroupIndexTypeValue value) {
  pG_Index_Accessor = value;
  return *this;
}


uci::type::Link16_SlotNumberTypeValue CommLink16TxPG_Type::getSlotNumber() const {
  return slotNumber_Accessor;
}

uci::type::CommLink16TxPG_Type& CommLink16TxPG_Type::setSlotNumber(uci::type::Link16_SlotNumberTypeValue value) {
  slotNumber_Accessor = value;
  return *this;
}


uci::type::Link16_StalenessLimitTypeValue CommLink16TxPG_Type::getStalenessLimit() const {
  return stalenessLimit_Accessor;
}

uci::type::CommLink16TxPG_Type& CommLink16TxPG_Type::setStalenessLimit(uci::type::Link16_StalenessLimitTypeValue value) {
  stalenessLimit_Accessor = value;
  return *this;
}


std::unique_ptr<CommLink16TxPG_Type> CommLink16TxPG_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16TxPG_Type : type};
  return (requestedType == uci::type::accessorType::commLink16TxPG_Type) ? boost::make_unique<CommLink16TxPG_Type>() : nullptr;
}

/**  */
namespace CommLink16TxPG_Type_Names {

constexpr const char* Extern_Type_Name{"CommLink16TxPG_Type"};
constexpr const char* AutoRepromulgation_Name{"AutoRepromulgation"};
constexpr const char* MessagePriority_Name{"MessagePriority"};
constexpr const char* MessageTransferStorageLimit_Name{"MessageTransferStorageLimit"};
constexpr const char* PackingLimit_Name{"PackingLimit"};
constexpr const char* PG_Index_Name{"PG_Index"};
constexpr const char* SlotNumber_Name{"SlotNumber"};
constexpr const char* StalenessLimit_Name{"StalenessLimit"};

} // namespace CommLink16TxPG_Type_Names

void CommLink16TxPG_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommLink16TxPG_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommLink16TxPG_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommLink16TxPG_Type_Names::AutoRepromulgation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAutoRepromulgation(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16TxPG_Type_Names::MessagePriority_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMessagePriority(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16TxPG_Type_Names::MessageTransferStorageLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMessageTransferStorageLimit(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16TxPG_Type_Names::PackingLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPackingLimit().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16TxPG_Type_Names::PG_Index_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPG_Index(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16TxPG_Type_Names::SlotNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSlotNumber(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16TxPG_Type_Names::StalenessLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStalenessLimit(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    }
  }
}

std::string CommLink16TxPG_Type::serialize(const uci::type::CommLink16TxPG_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommLink16TxPG_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommLink16TxPG_Type_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAutoRepromulgation(), node, CommLink16TxPG_Type_Names::AutoRepromulgation_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getMessagePriority(), node, CommLink16TxPG_Type_Names::MessagePriority_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getMessageTransferStorageLimit(), node, CommLink16TxPG_Type_Names::MessageTransferStorageLimit_Name);
  CommLink16TxPackingLimitEnum::serialize(accessor.getPackingLimit(), node, CommLink16TxPG_Type_Names::PackingLimit_Name, false);
  asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getPG_Index(), node, CommLink16TxPG_Type_Names::PG_Index_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getSlotNumber(), node, CommLink16TxPG_Type_Names::SlotNumber_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getStalenessLimit(), node, CommLink16TxPG_Type_Names::StalenessLimit_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommLink16TxPG_Type& CommLink16TxPG_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommLink16TxPG_Type>().release());
}

uci::type::CommLink16TxPG_Type& CommLink16TxPG_Type::create(const uci::type::CommLink16TxPG_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommLink16TxPG_Type> newAccessor{boost::make_unique<asb_uci::type::CommLink16TxPG_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommLink16TxPG_Type::destroy(uci::type::CommLink16TxPG_Type& accessor) {
  delete dynamic_cast<asb_uci::type::CommLink16TxPG_Type*>(&accessor);
}

} // namespace type

} // namespace uci

