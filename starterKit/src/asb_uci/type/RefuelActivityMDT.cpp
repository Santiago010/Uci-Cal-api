/** @file RefuelActivityMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RefuelActivityMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/RefuelActivityType.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/RefuelActivityMDT.h"
#include "uci/type/RefuelActivityType.h"
#include "uci/type/SubsystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RefuelActivityMDT::RefuelActivityMDT()
  : subsystemID_Accessor{boost::make_unique<SubsystemID_Type>()},
    activity_Accessor{boost::make_unique<Activity>(1, SIZE_MAX)} {
}

RefuelActivityMDT::~RefuelActivityMDT() = default;

void RefuelActivityMDT::copy(const uci::type::RefuelActivityMDT& accessor) {
  copyImpl(accessor, false);
}

void RefuelActivityMDT::copyImpl(const uci::type::RefuelActivityMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RefuelActivityMDT&>(accessor);
    setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    setActivity(*(accessorImpl.activity_Accessor));
  }
}

void RefuelActivityMDT::reset() noexcept {
  subsystemID_Accessor->reset();
  activity_Accessor->reset();
}

const uci::type::SubsystemID_Type& RefuelActivityMDT::getSubsystemID() const {
  return *subsystemID_Accessor;
}

uci::type::SubsystemID_Type& RefuelActivityMDT::getSubsystemID() {
  return *subsystemID_Accessor;
}

uci::type::RefuelActivityMDT& RefuelActivityMDT::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RefuelActivityMDT::Activity& RefuelActivityMDT::getActivity() const {
  return *activity_Accessor;
}

uci::type::RefuelActivityMDT::Activity& RefuelActivityMDT::getActivity() {
  return *activity_Accessor;
}

uci::type::RefuelActivityMDT& RefuelActivityMDT::setActivity(const uci::type::RefuelActivityMDT::Activity& accessor) {
  if (&accessor != activity_Accessor.get()) {
    activity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RefuelActivityMDT> RefuelActivityMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelActivityMDT : type};
  return (requestedType == uci::type::accessorType::refuelActivityMDT) ? boost::make_unique<RefuelActivityMDT>() : nullptr;
}

/**  */
namespace RefuelActivityMDT_Names {

constexpr const char* Extern_Type_Name{"RefuelActivityMDT"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* Activity_Name{"Activity"};

} // namespace RefuelActivityMDT_Names

void RefuelActivityMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::RefuelActivityMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RefuelActivityMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RefuelActivityMDT_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.getSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RefuelActivityMDT_Names::Activity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RefuelActivityMDT::Activity& boundedList = accessor.getActivity();
        const uci::type::RefuelActivityMDT::Activity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RefuelActivityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string RefuelActivityMDT::serialize(const uci::type::RefuelActivityMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RefuelActivityMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RefuelActivityMDT_Names::Extern_Type_Name);
  }
  SubsystemID_Type::serialize(accessor.getSubsystemID(), node, RefuelActivityMDT_Names::SubsystemID_Name);
  {
    const uci::type::RefuelActivityMDT::Activity& boundedList = accessor.getActivity();
    for (uci::type::RefuelActivityMDT::Activity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RefuelActivityType::serialize(boundedList.at(i), node, RefuelActivityMDT_Names::Activity_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RefuelActivityMDT& RefuelActivityMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RefuelActivityMDT>().release());
}

uci::type::RefuelActivityMDT& RefuelActivityMDT::create(const uci::type::RefuelActivityMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RefuelActivityMDT> newAccessor{boost::make_unique<asb_uci::type::RefuelActivityMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RefuelActivityMDT::destroy(uci::type::RefuelActivityMDT& accessor) {
  delete dynamic_cast<asb_uci::type::RefuelActivityMDT*>(&accessor);
}

} // namespace type

} // namespace uci

