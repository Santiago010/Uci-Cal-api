/** @file CSO_DetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CSO_DetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitalDockingEventType.h"
#include "asb_uci/type/OrbitalProximityOperationsEventType.h"
#include "asb_uci/type/OrbitalRendezvousEventType.h"
#include "asb_uci/type/OrbitalSeparationEventType.h"
#include "asb_uci/type/OrbitalUndockingEventType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CSO_DetailsType.h"
#include "uci/type/OrbitalDockingEventType.h"
#include "uci/type/OrbitalProximityOperationsEventType.h"
#include "uci/type/OrbitalRendezvousEventType.h"
#include "uci/type/OrbitalSeparationEventType.h"
#include "uci/type/OrbitalUndockingEventType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CSO_DetailsType::CSO_DetailsType() = default;

CSO_DetailsType::~CSO_DetailsType() = default;

void CSO_DetailsType::copy(const uci::type::CSO_DetailsType& accessor) {
  copyImpl(accessor, false);
}

void CSO_DetailsType::copyImpl(const uci::type::CSO_DetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CSO_DetailsType&>(accessor);
    if (accessorImpl.dockingEvent_Accessor) {
      setDockingEvent(*(accessorImpl.dockingEvent_Accessor));
    } else {
      dockingEvent_Accessor.reset();
    }
    if (accessorImpl.undockingEvent_Accessor) {
      setUndockingEvent(*(accessorImpl.undockingEvent_Accessor));
    } else {
      undockingEvent_Accessor.reset();
    }
    if (accessorImpl.separationEvent_Accessor) {
      setSeparationEvent(*(accessorImpl.separationEvent_Accessor));
    } else {
      separationEvent_Accessor.reset();
    }
    if (accessorImpl.rendezvousEvent_Accessor) {
      setRendezvousEvent(*(accessorImpl.rendezvousEvent_Accessor));
    } else {
      rendezvousEvent_Accessor.reset();
    }
    if (accessorImpl.proximityOperationsEvent_Accessor) {
      setProximityOperationsEvent(*(accessorImpl.proximityOperationsEvent_Accessor));
    } else {
      proximityOperationsEvent_Accessor.reset();
    }
  }
}

void CSO_DetailsType::reset() noexcept {
  dockingEvent_Accessor.reset();
  undockingEvent_Accessor.reset();
  separationEvent_Accessor.reset();
  rendezvousEvent_Accessor.reset();
  proximityOperationsEvent_Accessor.reset();
}

uci::type::CSO_DetailsType::CSO_DetailsTypeChoice CSO_DetailsType::getCSO_DetailsTypeChoiceOrdinal() const noexcept {
  if (dockingEvent_Accessor) {
    return CSO_DETAILSTYPE_CHOICE_DOCKINGEVENT;
  }
  if (undockingEvent_Accessor) {
    return CSO_DETAILSTYPE_CHOICE_UNDOCKINGEVENT;
  }
  if (separationEvent_Accessor) {
    return CSO_DETAILSTYPE_CHOICE_SEPARATIONEVENT;
  }
  if (rendezvousEvent_Accessor) {
    return CSO_DETAILSTYPE_CHOICE_RENDEZVOUSEVENT;
  }
  if (proximityOperationsEvent_Accessor) {
    return CSO_DETAILSTYPE_CHOICE_PROXIMITYOPERATIONSEVENT;
  }
  return CSO_DETAILSTYPE_CHOICE_NONE;
}

uci::type::CSO_DetailsType& CSO_DetailsType::setCSO_DetailsTypeChoiceOrdinal(uci::type::CSO_DetailsType::CSO_DetailsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case CSO_DETAILSTYPE_CHOICE_DOCKINGEVENT:
      chooseDockingEvent("setCSO_DetailsTypeChoiceOrdinal", type);
      break;
    case CSO_DETAILSTYPE_CHOICE_UNDOCKINGEVENT:
      chooseUndockingEvent("setCSO_DetailsTypeChoiceOrdinal", type);
      break;
    case CSO_DETAILSTYPE_CHOICE_SEPARATIONEVENT:
      chooseSeparationEvent("setCSO_DetailsTypeChoiceOrdinal", type);
      break;
    case CSO_DETAILSTYPE_CHOICE_RENDEZVOUSEVENT:
      chooseRendezvousEvent("setCSO_DetailsTypeChoiceOrdinal", type);
      break;
    case CSO_DETAILSTYPE_CHOICE_PROXIMITYOPERATIONSEVENT:
      chooseProximityOperationsEvent("setCSO_DetailsTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setCSO_DetailsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OrbitalDockingEventType& CSO_DetailsType::getDockingEvent_() const {
  if (dockingEvent_Accessor) {
    return *dockingEvent_Accessor;
  }
  throw uci::base::UCIException("Error in getDockingEvent(): Unable to get DockingEvent, field not selected");
}

const uci::type::OrbitalDockingEventType& CSO_DetailsType::getDockingEvent() const {
  return getDockingEvent_();
}

uci::type::OrbitalDockingEventType& CSO_DetailsType::getDockingEvent() {
  return getDockingEvent_();
}

uci::type::CSO_DetailsType& CSO_DetailsType::setDockingEvent(const uci::type::OrbitalDockingEventType& accessor) {
  chooseDockingEvent();
  if (&accessor != dockingEvent_Accessor.get()) {
    dockingEvent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CSO_DetailsType::isDockingEvent() const noexcept {
  return static_cast<bool>(dockingEvent_Accessor);
}

uci::type::OrbitalDockingEventType& CSO_DetailsType::chooseDockingEvent(const std::string& method, uci::base::accessorType::AccessorType type) {
  undockingEvent_Accessor.reset();
  separationEvent_Accessor.reset();
  rendezvousEvent_Accessor.reset();
  proximityOperationsEvent_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalDockingEventType : type};
  if ((!dockingEvent_Accessor) || (dockingEvent_Accessor->getAccessorType() != requestedType)) {
    dockingEvent_Accessor = OrbitalDockingEventType::create(type);
    if (!dockingEvent_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dockingEvent_Accessor;
}

uci::type::OrbitalDockingEventType& CSO_DetailsType::chooseDockingEvent(uci::base::accessorType::AccessorType type) {
  return chooseDockingEvent("chooseDockingEvent", type);
}

uci::type::OrbitalUndockingEventType& CSO_DetailsType::getUndockingEvent_() const {
  if (undockingEvent_Accessor) {
    return *undockingEvent_Accessor;
  }
  throw uci::base::UCIException("Error in getUndockingEvent(): Unable to get UndockingEvent, field not selected");
}

const uci::type::OrbitalUndockingEventType& CSO_DetailsType::getUndockingEvent() const {
  return getUndockingEvent_();
}

uci::type::OrbitalUndockingEventType& CSO_DetailsType::getUndockingEvent() {
  return getUndockingEvent_();
}

uci::type::CSO_DetailsType& CSO_DetailsType::setUndockingEvent(const uci::type::OrbitalUndockingEventType& accessor) {
  chooseUndockingEvent();
  if (&accessor != undockingEvent_Accessor.get()) {
    undockingEvent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CSO_DetailsType::isUndockingEvent() const noexcept {
  return static_cast<bool>(undockingEvent_Accessor);
}

uci::type::OrbitalUndockingEventType& CSO_DetailsType::chooseUndockingEvent(const std::string& method, uci::base::accessorType::AccessorType type) {
  dockingEvent_Accessor.reset();
  separationEvent_Accessor.reset();
  rendezvousEvent_Accessor.reset();
  proximityOperationsEvent_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalUndockingEventType : type};
  if ((!undockingEvent_Accessor) || (undockingEvent_Accessor->getAccessorType() != requestedType)) {
    undockingEvent_Accessor = OrbitalUndockingEventType::create(type);
    if (!undockingEvent_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *undockingEvent_Accessor;
}

uci::type::OrbitalUndockingEventType& CSO_DetailsType::chooseUndockingEvent(uci::base::accessorType::AccessorType type) {
  return chooseUndockingEvent("chooseUndockingEvent", type);
}

uci::type::OrbitalSeparationEventType& CSO_DetailsType::getSeparationEvent_() const {
  if (separationEvent_Accessor) {
    return *separationEvent_Accessor;
  }
  throw uci::base::UCIException("Error in getSeparationEvent(): Unable to get SeparationEvent, field not selected");
}

const uci::type::OrbitalSeparationEventType& CSO_DetailsType::getSeparationEvent() const {
  return getSeparationEvent_();
}

uci::type::OrbitalSeparationEventType& CSO_DetailsType::getSeparationEvent() {
  return getSeparationEvent_();
}

uci::type::CSO_DetailsType& CSO_DetailsType::setSeparationEvent(const uci::type::OrbitalSeparationEventType& accessor) {
  chooseSeparationEvent();
  if (&accessor != separationEvent_Accessor.get()) {
    separationEvent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CSO_DetailsType::isSeparationEvent() const noexcept {
  return static_cast<bool>(separationEvent_Accessor);
}

uci::type::OrbitalSeparationEventType& CSO_DetailsType::chooseSeparationEvent(const std::string& method, uci::base::accessorType::AccessorType type) {
  dockingEvent_Accessor.reset();
  undockingEvent_Accessor.reset();
  rendezvousEvent_Accessor.reset();
  proximityOperationsEvent_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSeparationEventType : type};
  if ((!separationEvent_Accessor) || (separationEvent_Accessor->getAccessorType() != requestedType)) {
    separationEvent_Accessor = OrbitalSeparationEventType::create(type);
    if (!separationEvent_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *separationEvent_Accessor;
}

uci::type::OrbitalSeparationEventType& CSO_DetailsType::chooseSeparationEvent(uci::base::accessorType::AccessorType type) {
  return chooseSeparationEvent("chooseSeparationEvent", type);
}

uci::type::OrbitalRendezvousEventType& CSO_DetailsType::getRendezvousEvent_() const {
  if (rendezvousEvent_Accessor) {
    return *rendezvousEvent_Accessor;
  }
  throw uci::base::UCIException("Error in getRendezvousEvent(): Unable to get RendezvousEvent, field not selected");
}

const uci::type::OrbitalRendezvousEventType& CSO_DetailsType::getRendezvousEvent() const {
  return getRendezvousEvent_();
}

uci::type::OrbitalRendezvousEventType& CSO_DetailsType::getRendezvousEvent() {
  return getRendezvousEvent_();
}

uci::type::CSO_DetailsType& CSO_DetailsType::setRendezvousEvent(const uci::type::OrbitalRendezvousEventType& accessor) {
  chooseRendezvousEvent();
  if (&accessor != rendezvousEvent_Accessor.get()) {
    rendezvousEvent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CSO_DetailsType::isRendezvousEvent() const noexcept {
  return static_cast<bool>(rendezvousEvent_Accessor);
}

uci::type::OrbitalRendezvousEventType& CSO_DetailsType::chooseRendezvousEvent(const std::string& method, uci::base::accessorType::AccessorType type) {
  dockingEvent_Accessor.reset();
  undockingEvent_Accessor.reset();
  separationEvent_Accessor.reset();
  proximityOperationsEvent_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalRendezvousEventType : type};
  if ((!rendezvousEvent_Accessor) || (rendezvousEvent_Accessor->getAccessorType() != requestedType)) {
    rendezvousEvent_Accessor = OrbitalRendezvousEventType::create(type);
    if (!rendezvousEvent_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rendezvousEvent_Accessor;
}

uci::type::OrbitalRendezvousEventType& CSO_DetailsType::chooseRendezvousEvent(uci::base::accessorType::AccessorType type) {
  return chooseRendezvousEvent("chooseRendezvousEvent", type);
}

uci::type::OrbitalProximityOperationsEventType& CSO_DetailsType::getProximityOperationsEvent_() const {
  if (proximityOperationsEvent_Accessor) {
    return *proximityOperationsEvent_Accessor;
  }
  throw uci::base::UCIException("Error in getProximityOperationsEvent(): Unable to get ProximityOperationsEvent, field not selected");
}

const uci::type::OrbitalProximityOperationsEventType& CSO_DetailsType::getProximityOperationsEvent() const {
  return getProximityOperationsEvent_();
}

uci::type::OrbitalProximityOperationsEventType& CSO_DetailsType::getProximityOperationsEvent() {
  return getProximityOperationsEvent_();
}

uci::type::CSO_DetailsType& CSO_DetailsType::setProximityOperationsEvent(const uci::type::OrbitalProximityOperationsEventType& accessor) {
  chooseProximityOperationsEvent();
  if (&accessor != proximityOperationsEvent_Accessor.get()) {
    proximityOperationsEvent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CSO_DetailsType::isProximityOperationsEvent() const noexcept {
  return static_cast<bool>(proximityOperationsEvent_Accessor);
}

uci::type::OrbitalProximityOperationsEventType& CSO_DetailsType::chooseProximityOperationsEvent(const std::string& method, uci::base::accessorType::AccessorType type) {
  dockingEvent_Accessor.reset();
  undockingEvent_Accessor.reset();
  separationEvent_Accessor.reset();
  rendezvousEvent_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalProximityOperationsEventType : type};
  if ((!proximityOperationsEvent_Accessor) || (proximityOperationsEvent_Accessor->getAccessorType() != requestedType)) {
    proximityOperationsEvent_Accessor = OrbitalProximityOperationsEventType::create(type);
    if (!proximityOperationsEvent_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *proximityOperationsEvent_Accessor;
}

uci::type::OrbitalProximityOperationsEventType& CSO_DetailsType::chooseProximityOperationsEvent(uci::base::accessorType::AccessorType type) {
  return chooseProximityOperationsEvent("chooseProximityOperationsEvent", type);
}

std::unique_ptr<CSO_DetailsType> CSO_DetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cSO_DetailsType : type};
  return (requestedType == uci::type::accessorType::cSO_DetailsType) ? boost::make_unique<CSO_DetailsType>() : nullptr;
}

/**  */
namespace CSO_DetailsType_Names {

constexpr const char* Extern_Type_Name{"CSO_DetailsType"};
constexpr const char* DockingEvent_Name{"DockingEvent"};
constexpr const char* UndockingEvent_Name{"UndockingEvent"};
constexpr const char* SeparationEvent_Name{"SeparationEvent"};
constexpr const char* RendezvousEvent_Name{"RendezvousEvent"};
constexpr const char* ProximityOperationsEvent_Name{"ProximityOperationsEvent"};

} // namespace CSO_DetailsType_Names

void CSO_DetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CSO_DetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CSO_DetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CSO_DetailsType_Names::DockingEvent_Name) {
      OrbitalDockingEventType::deserialize(valueType.second, accessor.chooseDockingEvent(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CSO_DetailsType_Names::UndockingEvent_Name) {
      OrbitalUndockingEventType::deserialize(valueType.second, accessor.chooseUndockingEvent(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CSO_DetailsType_Names::SeparationEvent_Name) {
      OrbitalSeparationEventType::deserialize(valueType.second, accessor.chooseSeparationEvent(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CSO_DetailsType_Names::RendezvousEvent_Name) {
      OrbitalRendezvousEventType::deserialize(valueType.second, accessor.chooseRendezvousEvent(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CSO_DetailsType_Names::ProximityOperationsEvent_Name) {
      OrbitalProximityOperationsEventType::deserialize(valueType.second, accessor.chooseProximityOperationsEvent(), nodeName, nsPrefix);
    }
  }
}

std::string CSO_DetailsType::serialize(const uci::type::CSO_DetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CSO_DetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CSO_DetailsType_Names::Extern_Type_Name);
  }
  if (accessor.isDockingEvent()) {
    OrbitalDockingEventType::serialize(accessor.getDockingEvent(), node, CSO_DetailsType_Names::DockingEvent_Name);
  } else if (accessor.isUndockingEvent()) {
    OrbitalUndockingEventType::serialize(accessor.getUndockingEvent(), node, CSO_DetailsType_Names::UndockingEvent_Name);
  } else if (accessor.isSeparationEvent()) {
    OrbitalSeparationEventType::serialize(accessor.getSeparationEvent(), node, CSO_DetailsType_Names::SeparationEvent_Name);
  } else if (accessor.isRendezvousEvent()) {
    OrbitalRendezvousEventType::serialize(accessor.getRendezvousEvent(), node, CSO_DetailsType_Names::RendezvousEvent_Name);
  } else if (accessor.isProximityOperationsEvent()) {
    OrbitalProximityOperationsEventType::serialize(accessor.getProximityOperationsEvent(), node, CSO_DetailsType_Names::ProximityOperationsEvent_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CSO_DetailsType& CSO_DetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CSO_DetailsType>().release());
}

uci::type::CSO_DetailsType& CSO_DetailsType::create(const uci::type::CSO_DetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CSO_DetailsType> newAccessor{boost::make_unique<asb_uci::type::CSO_DetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CSO_DetailsType::destroy(uci::type::CSO_DetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::CSO_DetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

