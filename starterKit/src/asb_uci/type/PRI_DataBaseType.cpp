/** @file PRI_DataBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PRI_DataBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PRI_TypeEnum.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DurationType.h"
#include "uci/type/PRI_DataBaseType.h"
#include "uci/type/PRI_TypeEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PRI_DataBaseType::PRI_DataBaseType() = default;

PRI_DataBaseType::~PRI_DataBaseType() = default;

void PRI_DataBaseType::copy(const uci::type::PRI_DataBaseType& accessor) {
  copyImpl(accessor, false);
}

void PRI_DataBaseType::copyImpl(const uci::type::PRI_DataBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::pRI_DataBaseType)) {
      const auto& accessorImpl = dynamic_cast<const PRI_DataBaseType&>(accessor);
      if (accessorImpl.pRI_Type_Accessor) {
        setPRI_Type(*(accessorImpl.pRI_Type_Accessor));
      } else {
        pRI_Type_Accessor.reset();
      }
      if (accessorImpl.hasPRI_Average()) {
        setPRI_Average(accessorImpl.getPRI_Average());
      } else {
        clearPRI_Average();
      }
      if (accessorImpl.hasPRI_Min()) {
        setPRI_Min(accessorImpl.getPRI_Min());
      } else {
        clearPRI_Min();
      }
      if (accessorImpl.hasPRI_Max()) {
        setPRI_Max(accessorImpl.getPRI_Max());
      } else {
        clearPRI_Max();
      }
      if (accessorImpl.hasPRI_Last()) {
        setPRI_Last(accessorImpl.getPRI_Last());
      } else {
        clearPRI_Last();
      }
      if (accessorImpl.hasPRI_Third()) {
        setPRI_Third(accessorImpl.getPRI_Third());
      } else {
        clearPRI_Third();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void PRI_DataBaseType::reset() noexcept {
  pRI_Type_Accessor.reset();
  clearPRI_Average();
  clearPRI_Min();
  clearPRI_Max();
  clearPRI_Last();
  clearPRI_Third();
}

uci::type::PRI_TypeEnum& PRI_DataBaseType::getPRI_Type_() const {
  if (pRI_Type_Accessor) {
    return *pRI_Type_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_Type(): An attempt was made to get an optional field that was not enabled, call hasPRI_Type() to determine if it is safe to call getPRI_Type()");
}

const uci::type::PRI_TypeEnum& PRI_DataBaseType::getPRI_Type() const {
  return getPRI_Type_();
}

uci::type::PRI_TypeEnum& PRI_DataBaseType::getPRI_Type() {
  return getPRI_Type_();
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::setPRI_Type(const uci::type::PRI_TypeEnum& accessor) {
  enablePRI_Type();
  if (&accessor != pRI_Type_Accessor.get()) {
    pRI_Type_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::setPRI_Type(const uci::type::PRI_TypeEnum::EnumerationItem value) {
  enablePRI_Type().setValue(value);
  return *this;
}

bool PRI_DataBaseType::hasPRI_Type() const noexcept {
  return static_cast<bool>(pRI_Type_Accessor);
}

uci::type::PRI_TypeEnum& PRI_DataBaseType::enablePRI_Type(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pRI_TypeEnum : type};
  if ((!pRI_Type_Accessor) || (pRI_Type_Accessor->getAccessorType() != requestedType)) {
    pRI_Type_Accessor = PRI_TypeEnum::create(requestedType);
    if (!pRI_Type_Accessor) {
      throw uci::base::UCIException("Error in enablePRI_Type(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pRI_Type_Accessor;
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::clearPRI_Type() noexcept {
  pRI_Type_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue PRI_DataBaseType::getPRI_Average() const {
  if (pRI_Average_Accessor) {
    return *pRI_Average_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_Average(): An attempt was made to get an optional field that was not enabled, call hasPRI_Average() to determine if it is safe to call getPRI_Average()");
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::setPRI_Average(uci::type::DurationTypeValue value) {
  pRI_Average_Accessor = value;
  return *this;
}

bool PRI_DataBaseType::hasPRI_Average() const noexcept {
  return pRI_Average_Accessor.has_value();
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::clearPRI_Average() noexcept {
  pRI_Average_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue PRI_DataBaseType::getPRI_Min() const {
  if (pRI_Min_Accessor) {
    return *pRI_Min_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_Min(): An attempt was made to get an optional field that was not enabled, call hasPRI_Min() to determine if it is safe to call getPRI_Min()");
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::setPRI_Min(uci::type::DurationTypeValue value) {
  pRI_Min_Accessor = value;
  return *this;
}

bool PRI_DataBaseType::hasPRI_Min() const noexcept {
  return pRI_Min_Accessor.has_value();
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::clearPRI_Min() noexcept {
  pRI_Min_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue PRI_DataBaseType::getPRI_Max() const {
  if (pRI_Max_Accessor) {
    return *pRI_Max_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_Max(): An attempt was made to get an optional field that was not enabled, call hasPRI_Max() to determine if it is safe to call getPRI_Max()");
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::setPRI_Max(uci::type::DurationTypeValue value) {
  pRI_Max_Accessor = value;
  return *this;
}

bool PRI_DataBaseType::hasPRI_Max() const noexcept {
  return pRI_Max_Accessor.has_value();
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::clearPRI_Max() noexcept {
  pRI_Max_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue PRI_DataBaseType::getPRI_Last() const {
  if (pRI_Last_Accessor) {
    return *pRI_Last_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_Last(): An attempt was made to get an optional field that was not enabled, call hasPRI_Last() to determine if it is safe to call getPRI_Last()");
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::setPRI_Last(uci::type::DurationTypeValue value) {
  pRI_Last_Accessor = value;
  return *this;
}

bool PRI_DataBaseType::hasPRI_Last() const noexcept {
  return pRI_Last_Accessor.has_value();
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::clearPRI_Last() noexcept {
  pRI_Last_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue PRI_DataBaseType::getPRI_Third() const {
  if (pRI_Third_Accessor) {
    return *pRI_Third_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI_Third(): An attempt was made to get an optional field that was not enabled, call hasPRI_Third() to determine if it is safe to call getPRI_Third()");
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::setPRI_Third(uci::type::DurationTypeValue value) {
  pRI_Third_Accessor = value;
  return *this;
}

bool PRI_DataBaseType::hasPRI_Third() const noexcept {
  return pRI_Third_Accessor.has_value();
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::clearPRI_Third() noexcept {
  pRI_Third_Accessor.reset();
  return *this;
}

std::unique_ptr<PRI_DataBaseType> PRI_DataBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pRI_DataBaseType : type};
  return std::unique_ptr<PRI_DataBaseType>(dynamic_cast<PRI_DataBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace PRI_DataBaseType_Names {

constexpr const char* Extern_Type_Name{"PRI_DataBaseType"};
constexpr const char* PRI_Type_Name{"PRI_Type"};
constexpr const char* PRI_Average_Name{"PRI_Average"};
constexpr const char* PRI_Min_Name{"PRI_Min"};
constexpr const char* PRI_Max_Name{"PRI_Max"};
constexpr const char* PRI_Last_Name{"PRI_Last"};
constexpr const char* PRI_Third_Name{"PRI_Third"};

} // namespace PRI_DataBaseType_Names

void PRI_DataBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PRI_DataBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PRI_DataBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PRI_DataBaseType_Names::PRI_Type_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePRI_Type().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PRI_DataBaseType_Names::PRI_Average_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_Average(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataBaseType_Names::PRI_Min_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_Min(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataBaseType_Names::PRI_Max_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_Max(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataBaseType_Names::PRI_Last_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_Last(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataBaseType_Names::PRI_Third_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_Third(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string PRI_DataBaseType::serialize(const uci::type::PRI_DataBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PRI_DataBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::pRI_DataBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, PRI_DataBaseType_Names::Extern_Type_Name);
    }
    if (accessor.hasPRI_Type()) {
      PRI_TypeEnum::serialize(accessor.getPRI_Type(), node, PRI_DataBaseType_Names::PRI_Type_Name, false);
    }
    if (accessor.hasPRI_Average()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_Average(), node, PRI_DataBaseType_Names::PRI_Average_Name);
    }
    if (accessor.hasPRI_Min()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_Min(), node, PRI_DataBaseType_Names::PRI_Min_Name);
    }
    if (accessor.hasPRI_Max()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_Max(), node, PRI_DataBaseType_Names::PRI_Max_Name);
    }
    if (accessor.hasPRI_Last()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_Last(), node, PRI_DataBaseType_Names::PRI_Last_Name);
    }
    if (accessor.hasPRI_Third()) {
      asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_Third(), node, PRI_DataBaseType_Names::PRI_Third_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PRI_DataBaseType& PRI_DataBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PRI_DataBaseType>().release());
}

uci::type::PRI_DataBaseType& PRI_DataBaseType::create(const uci::type::PRI_DataBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PRI_DataBaseType> newAccessor{boost::make_unique<asb_uci::type::PRI_DataBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PRI_DataBaseType::destroy(uci::type::PRI_DataBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::PRI_DataBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

