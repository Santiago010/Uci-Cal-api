/** @file DamageWeaponEmploymentType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DamageWeaponEmploymentType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/type/Point2D_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/type/TaskID_Type.h"
#include "asb_uci/type/WeaponeeringType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DamageWeaponEmploymentType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/Point2D_Type.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/TaskID_Type.h"
#include "uci/type/WeaponeeringType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DamageWeaponEmploymentType::DamageWeaponEmploymentType()
  : weapons_Accessor{boost::make_unique<WeaponeeringType>()} {
}

DamageWeaponEmploymentType::~DamageWeaponEmploymentType() = default;

void DamageWeaponEmploymentType::copy(const uci::type::DamageWeaponEmploymentType& accessor) {
  copyImpl(accessor, false);
}

void DamageWeaponEmploymentType::copyImpl(const uci::type::DamageWeaponEmploymentType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DamageWeaponEmploymentType&>(accessor);
    setWeapons(*(accessorImpl.weapons_Accessor));
    if (accessorImpl.weaponSourceID_Accessor) {
      setWeaponSourceID(*(accessorImpl.weaponSourceID_Accessor));
    } else {
      weaponSourceID_Accessor.reset();
    }
    if (accessorImpl.impactTimeRange_Accessor) {
      setImpactTimeRange(*(accessorImpl.impactTimeRange_Accessor));
    } else {
      impactTimeRange_Accessor.reset();
    }
    if (accessorImpl.location_Accessor) {
      setLocation(*(accessorImpl.location_Accessor));
    } else {
      location_Accessor.reset();
    }
    if (accessorImpl.taskID_Accessor) {
      setTaskID(*(accessorImpl.taskID_Accessor));
    } else {
      taskID_Accessor.reset();
    }
  }
}

void DamageWeaponEmploymentType::reset() noexcept {
  if (weapons_Accessor->getAccessorType() != uci::type::accessorType::weaponeeringType) {
    weapons_Accessor = boost::make_unique<WeaponeeringType>();
  } else {
    weapons_Accessor->reset();
  }
  weaponSourceID_Accessor.reset();
  impactTimeRange_Accessor.reset();
  location_Accessor.reset();
  taskID_Accessor.reset();
}

const uci::type::WeaponeeringType& DamageWeaponEmploymentType::getWeapons() const {
  return *weapons_Accessor;
}

uci::type::WeaponeeringType& DamageWeaponEmploymentType::getWeapons() {
  return *weapons_Accessor;
}

uci::type::DamageWeaponEmploymentType& DamageWeaponEmploymentType::setWeapons(const uci::type::WeaponeeringType& accessor) {
  enableWeapons(accessor.getAccessorType());
  if (&accessor != weapons_Accessor.get()) {
    weapons_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::WeaponeeringType& DamageWeaponEmploymentType::enableWeapons(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weaponeeringType : type};
  if ((!weapons_Accessor) || (weapons_Accessor->getAccessorType() != requestedType)) {
    weapons_Accessor = WeaponeeringType::create(requestedType);
    if (!weapons_Accessor) {
      throw uci::base::UCIException("Error in enableWeapons(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weapons_Accessor;
}

uci::type::SystemID_Type& DamageWeaponEmploymentType::getWeaponSourceID_() const {
  if (weaponSourceID_Accessor) {
    return *weaponSourceID_Accessor;
  }
  throw uci::base::UCIException("Error in getWeaponSourceID(): An attempt was made to get an optional field that was not enabled, call hasWeaponSourceID() to determine if it is safe to call getWeaponSourceID()");
}

const uci::type::SystemID_Type& DamageWeaponEmploymentType::getWeaponSourceID() const {
  return getWeaponSourceID_();
}

uci::type::SystemID_Type& DamageWeaponEmploymentType::getWeaponSourceID() {
  return getWeaponSourceID_();
}

uci::type::DamageWeaponEmploymentType& DamageWeaponEmploymentType::setWeaponSourceID(const uci::type::SystemID_Type& accessor) {
  enableWeaponSourceID();
  if (&accessor != weaponSourceID_Accessor.get()) {
    weaponSourceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageWeaponEmploymentType::hasWeaponSourceID() const noexcept {
  return static_cast<bool>(weaponSourceID_Accessor);
}

uci::type::SystemID_Type& DamageWeaponEmploymentType::enableWeaponSourceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!weaponSourceID_Accessor) || (weaponSourceID_Accessor->getAccessorType() != requestedType)) {
    weaponSourceID_Accessor = SystemID_Type::create(requestedType);
    if (!weaponSourceID_Accessor) {
      throw uci::base::UCIException("Error in enableWeaponSourceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weaponSourceID_Accessor;
}

uci::type::DamageWeaponEmploymentType& DamageWeaponEmploymentType::clearWeaponSourceID() noexcept {
  weaponSourceID_Accessor.reset();
  return *this;
}

uci::type::DateTimeRangeType& DamageWeaponEmploymentType::getImpactTimeRange_() const {
  if (impactTimeRange_Accessor) {
    return *impactTimeRange_Accessor;
  }
  throw uci::base::UCIException("Error in getImpactTimeRange(): An attempt was made to get an optional field that was not enabled, call hasImpactTimeRange() to determine if it is safe to call getImpactTimeRange()");
}

const uci::type::DateTimeRangeType& DamageWeaponEmploymentType::getImpactTimeRange() const {
  return getImpactTimeRange_();
}

uci::type::DateTimeRangeType& DamageWeaponEmploymentType::getImpactTimeRange() {
  return getImpactTimeRange_();
}

uci::type::DamageWeaponEmploymentType& DamageWeaponEmploymentType::setImpactTimeRange(const uci::type::DateTimeRangeType& accessor) {
  enableImpactTimeRange();
  if (&accessor != impactTimeRange_Accessor.get()) {
    impactTimeRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageWeaponEmploymentType::hasImpactTimeRange() const noexcept {
  return static_cast<bool>(impactTimeRange_Accessor);
}

uci::type::DateTimeRangeType& DamageWeaponEmploymentType::enableImpactTimeRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!impactTimeRange_Accessor) || (impactTimeRange_Accessor->getAccessorType() != requestedType)) {
    impactTimeRange_Accessor = DateTimeRangeType::create(requestedType);
    if (!impactTimeRange_Accessor) {
      throw uci::base::UCIException("Error in enableImpactTimeRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *impactTimeRange_Accessor;
}

uci::type::DamageWeaponEmploymentType& DamageWeaponEmploymentType::clearImpactTimeRange() noexcept {
  impactTimeRange_Accessor.reset();
  return *this;
}

uci::type::Point2D_Type& DamageWeaponEmploymentType::getLocation_() const {
  if (location_Accessor) {
    return *location_Accessor;
  }
  throw uci::base::UCIException("Error in getLocation(): An attempt was made to get an optional field that was not enabled, call hasLocation() to determine if it is safe to call getLocation()");
}

const uci::type::Point2D_Type& DamageWeaponEmploymentType::getLocation() const {
  return getLocation_();
}

uci::type::Point2D_Type& DamageWeaponEmploymentType::getLocation() {
  return getLocation_();
}

uci::type::DamageWeaponEmploymentType& DamageWeaponEmploymentType::setLocation(const uci::type::Point2D_Type& accessor) {
  enableLocation(accessor.getAccessorType());
  if (&accessor != location_Accessor.get()) {
    location_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DamageWeaponEmploymentType::hasLocation() const noexcept {
  return static_cast<bool>(location_Accessor);
}

uci::type::Point2D_Type& DamageWeaponEmploymentType::enableLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point2D_Type : type};
  if ((!location_Accessor) || (location_Accessor->getAccessorType() != requestedType)) {
    location_Accessor = Point2D_Type::create(requestedType);
    if (!location_Accessor) {
      throw uci::base::UCIException("Error in enableLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *location_Accessor;
}

uci::type::DamageWeaponEmploymentType& DamageWeaponEmploymentType::clearLocation() noexcept {
  location_Accessor.reset();
  return *this;
}

uci::type::TaskID_Type& DamageWeaponEmploymentType::getTaskID_() const {
  if (taskID_Accessor) {
    return *taskID_Accessor;
  }
  throw uci::base::UCIException("Error in getTaskID(): An attempt was made to get an optional field that was not enabled, call hasTaskID() to determine if it is safe to call getTaskID()");
}

const uci::type::TaskID_Type& DamageWeaponEmploymentType::getTaskID() const {
  return getTaskID_();
}

uci::type::TaskID_Type& DamageWeaponEmploymentType::getTaskID() {
  return getTaskID_();
}

uci::type::DamageWeaponEmploymentType& DamageWeaponEmploymentType::setTaskID(const uci::type::TaskID_Type& accessor) {
  enableTaskID();
  if (&accessor != taskID_Accessor.get()) {
    taskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageWeaponEmploymentType::hasTaskID() const noexcept {
  return static_cast<bool>(taskID_Accessor);
}

uci::type::TaskID_Type& DamageWeaponEmploymentType::enableTaskID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskID_Type : type};
  if ((!taskID_Accessor) || (taskID_Accessor->getAccessorType() != requestedType)) {
    taskID_Accessor = TaskID_Type::create(requestedType);
    if (!taskID_Accessor) {
      throw uci::base::UCIException("Error in enableTaskID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taskID_Accessor;
}

uci::type::DamageWeaponEmploymentType& DamageWeaponEmploymentType::clearTaskID() noexcept {
  taskID_Accessor.reset();
  return *this;
}

std::unique_ptr<DamageWeaponEmploymentType> DamageWeaponEmploymentType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageWeaponEmploymentType : type};
  return (requestedType == uci::type::accessorType::damageWeaponEmploymentType) ? boost::make_unique<DamageWeaponEmploymentType>() : nullptr;
}

/**  */
namespace DamageWeaponEmploymentType_Names {

constexpr const char* Extern_Type_Name{"DamageWeaponEmploymentType"};
constexpr const char* Weapons_Name{"Weapons"};
constexpr const char* WeaponSourceID_Name{"WeaponSourceID"};
constexpr const char* ImpactTimeRange_Name{"ImpactTimeRange"};
constexpr const char* Location_Name{"Location"};
constexpr const char* TaskID_Name{"TaskID"};

} // namespace DamageWeaponEmploymentType_Names

void DamageWeaponEmploymentType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageWeaponEmploymentType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamageWeaponEmploymentType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamageWeaponEmploymentType_Names::Weapons_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableWeapons(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageWeaponEmploymentType_Names::WeaponSourceID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableWeaponSourceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageWeaponEmploymentType_Names::ImpactTimeRange_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableImpactTimeRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageWeaponEmploymentType_Names::Location_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableLocation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageWeaponEmploymentType_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.enableTaskID(), nodeName, nsPrefix);
    }
  }
}

std::string DamageWeaponEmploymentType::serialize(const uci::type::DamageWeaponEmploymentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DamageWeaponEmploymentType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DamageWeaponEmploymentType_Names::Extern_Type_Name);
  }
  WeaponeeringType::serialize(accessor.getWeapons(), node, DamageWeaponEmploymentType_Names::Weapons_Name);
  if (accessor.hasWeaponSourceID()) {
    SystemID_Type::serialize(accessor.getWeaponSourceID(), node, DamageWeaponEmploymentType_Names::WeaponSourceID_Name);
  }
  if (accessor.hasImpactTimeRange()) {
    DateTimeRangeType::serialize(accessor.getImpactTimeRange(), node, DamageWeaponEmploymentType_Names::ImpactTimeRange_Name);
  }
  if (accessor.hasLocation()) {
    Point2D_Type::serialize(accessor.getLocation(), node, DamageWeaponEmploymentType_Names::Location_Name);
  }
  if (accessor.hasTaskID()) {
    TaskID_Type::serialize(accessor.getTaskID(), node, DamageWeaponEmploymentType_Names::TaskID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DamageWeaponEmploymentType& DamageWeaponEmploymentType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DamageWeaponEmploymentType>().release());
}

uci::type::DamageWeaponEmploymentType& DamageWeaponEmploymentType::create(const uci::type::DamageWeaponEmploymentType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DamageWeaponEmploymentType> newAccessor{boost::make_unique<asb_uci::type::DamageWeaponEmploymentType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DamageWeaponEmploymentType::destroy(uci::type::DamageWeaponEmploymentType& accessor) {
  delete dynamic_cast<asb_uci::type::DamageWeaponEmploymentType*>(&accessor);
}

} // namespace type

} // namespace uci

