/** @file ActionPlanType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ActionPlanType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActionAllocationType.h"
#include "asb_uci/type/ActionPlanPartsType.h"
#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/type/PlanApplicabilityType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActionAllocationType.h"
#include "uci/type/ActionPlanPartsType.h"
#include "uci/type/ActionPlanType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/PlanApplicabilityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ActionPlanType::ActionPlanType()
  : applicability_Accessor{boost::make_unique<PlanApplicabilityType>()},
    allocatedAction_Accessor{boost::make_unique<AllocatedAction>(0, SIZE_MAX)} {
}

ActionPlanType::~ActionPlanType() = default;

void ActionPlanType::copy(const uci::type::ActionPlanType& accessor) {
  copyImpl(accessor, false);
}

void ActionPlanType::copyImpl(const uci::type::ActionPlanType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ActionPlanType&>(accessor);
    setApplicability(*(accessorImpl.applicability_Accessor));
    if (accessorImpl.window_Accessor) {
      setWindow(*(accessorImpl.window_Accessor));
    } else {
      window_Accessor.reset();
    }
    if (accessorImpl.parts_Accessor) {
      setParts(*(accessorImpl.parts_Accessor));
    } else {
      parts_Accessor.reset();
    }
    setAllocatedAction(*(accessorImpl.allocatedAction_Accessor));
  }
}

void ActionPlanType::reset() noexcept {
  applicability_Accessor->reset();
  window_Accessor.reset();
  parts_Accessor.reset();
  allocatedAction_Accessor->reset();
}

const uci::type::PlanApplicabilityType& ActionPlanType::getApplicability() const {
  return *applicability_Accessor;
}

uci::type::PlanApplicabilityType& ActionPlanType::getApplicability() {
  return *applicability_Accessor;
}

uci::type::ActionPlanType& ActionPlanType::setApplicability(const uci::type::PlanApplicabilityType& accessor) {
  if (&accessor != applicability_Accessor.get()) {
    applicability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeRangeType& ActionPlanType::getWindow_() const {
  if (window_Accessor) {
    return *window_Accessor;
  }
  throw uci::base::UCIException("Error in getWindow(): An attempt was made to get an optional field that was not enabled, call hasWindow() to determine if it is safe to call getWindow()");
}

const uci::type::DateTimeRangeType& ActionPlanType::getWindow() const {
  return getWindow_();
}

uci::type::DateTimeRangeType& ActionPlanType::getWindow() {
  return getWindow_();
}

uci::type::ActionPlanType& ActionPlanType::setWindow(const uci::type::DateTimeRangeType& accessor) {
  enableWindow();
  if (&accessor != window_Accessor.get()) {
    window_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActionPlanType::hasWindow() const noexcept {
  return static_cast<bool>(window_Accessor);
}

uci::type::DateTimeRangeType& ActionPlanType::enableWindow(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!window_Accessor) || (window_Accessor->getAccessorType() != requestedType)) {
    window_Accessor = DateTimeRangeType::create(requestedType);
    if (!window_Accessor) {
      throw uci::base::UCIException("Error in enableWindow(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *window_Accessor;
}

uci::type::ActionPlanType& ActionPlanType::clearWindow() noexcept {
  window_Accessor.reset();
  return *this;
}

uci::type::ActionPlanPartsType& ActionPlanType::getParts_() const {
  if (parts_Accessor) {
    return *parts_Accessor;
  }
  throw uci::base::UCIException("Error in getParts(): An attempt was made to get an optional field that was not enabled, call hasParts() to determine if it is safe to call getParts()");
}

const uci::type::ActionPlanPartsType& ActionPlanType::getParts() const {
  return getParts_();
}

uci::type::ActionPlanPartsType& ActionPlanType::getParts() {
  return getParts_();
}

uci::type::ActionPlanType& ActionPlanType::setParts(const uci::type::ActionPlanPartsType& accessor) {
  enableParts();
  if (&accessor != parts_Accessor.get()) {
    parts_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActionPlanType::hasParts() const noexcept {
  return static_cast<bool>(parts_Accessor);
}

uci::type::ActionPlanPartsType& ActionPlanType::enableParts(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionPlanPartsType : type};
  if ((!parts_Accessor) || (parts_Accessor->getAccessorType() != requestedType)) {
    parts_Accessor = ActionPlanPartsType::create(requestedType);
    if (!parts_Accessor) {
      throw uci::base::UCIException("Error in enableParts(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *parts_Accessor;
}

uci::type::ActionPlanType& ActionPlanType::clearParts() noexcept {
  parts_Accessor.reset();
  return *this;
}

const uci::type::ActionPlanType::AllocatedAction& ActionPlanType::getAllocatedAction() const {
  return *allocatedAction_Accessor;
}

uci::type::ActionPlanType::AllocatedAction& ActionPlanType::getAllocatedAction() {
  return *allocatedAction_Accessor;
}

uci::type::ActionPlanType& ActionPlanType::setAllocatedAction(const uci::type::ActionPlanType::AllocatedAction& accessor) {
  if (&accessor != allocatedAction_Accessor.get()) {
    allocatedAction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ActionPlanType> ActionPlanType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionPlanType : type};
  return (requestedType == uci::type::accessorType::actionPlanType) ? boost::make_unique<ActionPlanType>() : nullptr;
}

/**  */
namespace ActionPlanType_Names {

constexpr const char* Extern_Type_Name{"ActionPlanType"};
constexpr const char* Applicability_Name{"Applicability"};
constexpr const char* Window_Name{"Window"};
constexpr const char* Parts_Name{"Parts"};
constexpr const char* AllocatedAction_Name{"AllocatedAction"};

} // namespace ActionPlanType_Names

void ActionPlanType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActionPlanType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActionPlanType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ActionPlanType_Names::Applicability_Name) {
      PlanApplicabilityType::deserialize(valueType.second, accessor.getApplicability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActionPlanType_Names::Window_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableWindow(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActionPlanType_Names::Parts_Name) {
      ActionPlanPartsType::deserialize(valueType.second, accessor.enableParts(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActionPlanType_Names::AllocatedAction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ActionPlanType::AllocatedAction& boundedList = accessor.getAllocatedAction();
        const uci::type::ActionPlanType::AllocatedAction::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ActionAllocationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ActionPlanType::serialize(const uci::type::ActionPlanType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ActionPlanType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ActionPlanType_Names::Extern_Type_Name);
  }
  PlanApplicabilityType::serialize(accessor.getApplicability(), node, ActionPlanType_Names::Applicability_Name);
  if (accessor.hasWindow()) {
    DateTimeRangeType::serialize(accessor.getWindow(), node, ActionPlanType_Names::Window_Name);
  }
  if (accessor.hasParts()) {
    ActionPlanPartsType::serialize(accessor.getParts(), node, ActionPlanType_Names::Parts_Name);
  }
  {
    const uci::type::ActionPlanType::AllocatedAction& boundedList = accessor.getAllocatedAction();
    for (uci::type::ActionPlanType::AllocatedAction::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ActionAllocationType::serialize(boundedList.at(i), node, ActionPlanType_Names::AllocatedAction_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ActionPlanType& ActionPlanType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ActionPlanType>().release());
}

uci::type::ActionPlanType& ActionPlanType::create(const uci::type::ActionPlanType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ActionPlanType> newAccessor{boost::make_unique<asb_uci::type::ActionPlanType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ActionPlanType::destroy(uci::type::ActionPlanType& accessor) {
  delete dynamic_cast<asb_uci::type::ActionPlanType*>(&accessor);
}

} // namespace type

} // namespace uci

