/** @file OrbitKinematicsSequenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitKinematicsSequenceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DateTimeRangeType.h"
#include "../../../include/asb_uci/type/OrbitKinematicsSequenceID_Type.h"
#include "../../../include/asb_uci/type/OrbitKinematicsType.h"
#include "../../../include/asb_uci/type/OrbitManeuverType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitKinematicsSequenceID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitKinematicsSequenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitKinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitManeuverType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitKinematicsSequenceType::OrbitKinematicsSequenceType()
  : sequenceID_Accessor{boost::make_unique<OrbitKinematicsSequenceID_Type>()},
    window_Accessor{boost::make_unique<DateTimeRangeType>()} {
}

OrbitKinematicsSequenceType::~OrbitKinematicsSequenceType() = default;

void OrbitKinematicsSequenceType::copy(const uci::type::OrbitKinematicsSequenceType& accessor) {
  copyImpl(accessor, false);
}

void OrbitKinematicsSequenceType::copyImpl(const uci::type::OrbitKinematicsSequenceType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::orbitKinematicsSequenceType)) {
      const auto& accessorImpl = dynamic_cast<const OrbitKinematicsSequenceType&>(accessor);
      setSequenceID(*(accessorImpl.sequenceID_Accessor));
      setWindow(*(accessorImpl.window_Accessor));
      setLocked(accessorImpl.locked_Accessor);
      if (accessorImpl.orbitKinematics_Accessor) {
        setOrbitKinematics(*(accessorImpl.orbitKinematics_Accessor));
      } else {
        orbitKinematics_Accessor.reset();
      }
      if (accessorImpl.maneuverKinematics_Accessor) {
        setManeuverKinematics(*(accessorImpl.maneuverKinematics_Accessor));
      } else {
        maneuverKinematics_Accessor.reset();
      }
      if (accessorImpl.nextSequenceID_Accessor) {
        setNextSequenceID(*(accessorImpl.nextSequenceID_Accessor));
      } else {
        nextSequenceID_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void OrbitKinematicsSequenceType::reset() noexcept {
  sequenceID_Accessor->reset();
  window_Accessor->reset();
  locked_Accessor = false;
  orbitKinematics_Accessor.reset();
  maneuverKinematics_Accessor.reset();
  nextSequenceID_Accessor.reset();
}

const uci::type::OrbitKinematicsSequenceID_Type& OrbitKinematicsSequenceType::getSequenceID() const {
  return *sequenceID_Accessor;
}

uci::type::OrbitKinematicsSequenceID_Type& OrbitKinematicsSequenceType::getSequenceID() {
  return *sequenceID_Accessor;
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceType::setSequenceID(const uci::type::OrbitKinematicsSequenceID_Type& accessor) {
  if (&accessor != sequenceID_Accessor.get()) {
    sequenceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DateTimeRangeType& OrbitKinematicsSequenceType::getWindow() const {
  return *window_Accessor;
}

uci::type::DateTimeRangeType& OrbitKinematicsSequenceType::getWindow() {
  return *window_Accessor;
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceType::setWindow(const uci::type::DateTimeRangeType& accessor) {
  if (&accessor != window_Accessor.get()) {
    window_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean OrbitKinematicsSequenceType::getLocked() const {
  return locked_Accessor;
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceType::setLocked(xs::Boolean value) {
  locked_Accessor = value;
  return *this;
}


uci::type::OrbitKinematicsType& OrbitKinematicsSequenceType::getOrbitKinematics_() const {
  if (orbitKinematics_Accessor) {
    return *orbitKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitKinematics(): An attempt was made to get an optional field that was not enabled, call hasOrbitKinematics() to determine if it is safe to call getOrbitKinematics()");
}

const uci::type::OrbitKinematicsType& OrbitKinematicsSequenceType::getOrbitKinematics() const {
  return getOrbitKinematics_();
}

uci::type::OrbitKinematicsType& OrbitKinematicsSequenceType::getOrbitKinematics() {
  return getOrbitKinematics_();
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceType::setOrbitKinematics(const uci::type::OrbitKinematicsType& accessor) {
  enableOrbitKinematics(accessor.getAccessorType());
  if (&accessor != orbitKinematics_Accessor.get()) {
    orbitKinematics_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OrbitKinematicsSequenceType::hasOrbitKinematics() const noexcept {
  return static_cast<bool>(orbitKinematics_Accessor);
}

uci::type::OrbitKinematicsType& OrbitKinematicsSequenceType::enableOrbitKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsType : type};
  if ((!orbitKinematics_Accessor) || (orbitKinematics_Accessor->getAccessorType() != requestedType)) {
    orbitKinematics_Accessor = OrbitKinematicsType::create(requestedType);
    if (!orbitKinematics_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitKinematics_Accessor;
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceType::clearOrbitKinematics() noexcept {
  orbitKinematics_Accessor.reset();
  return *this;
}

uci::type::OrbitManeuverType& OrbitKinematicsSequenceType::getManeuverKinematics_() const {
  if (maneuverKinematics_Accessor) {
    return *maneuverKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getManeuverKinematics(): An attempt was made to get an optional field that was not enabled, call hasManeuverKinematics() to determine if it is safe to call getManeuverKinematics()");
}

const uci::type::OrbitManeuverType& OrbitKinematicsSequenceType::getManeuverKinematics() const {
  return getManeuverKinematics_();
}

uci::type::OrbitManeuverType& OrbitKinematicsSequenceType::getManeuverKinematics() {
  return getManeuverKinematics_();
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceType::setManeuverKinematics(const uci::type::OrbitManeuverType& accessor) {
  enableManeuverKinematics();
  if (&accessor != maneuverKinematics_Accessor.get()) {
    maneuverKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsSequenceType::hasManeuverKinematics() const noexcept {
  return static_cast<bool>(maneuverKinematics_Accessor);
}

uci::type::OrbitManeuverType& OrbitKinematicsSequenceType::enableManeuverKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitManeuverType : type};
  if ((!maneuverKinematics_Accessor) || (maneuverKinematics_Accessor->getAccessorType() != requestedType)) {
    maneuverKinematics_Accessor = OrbitManeuverType::create(requestedType);
    if (!maneuverKinematics_Accessor) {
      throw uci::base::UCIException("Error in enableManeuverKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *maneuverKinematics_Accessor;
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceType::clearManeuverKinematics() noexcept {
  maneuverKinematics_Accessor.reset();
  return *this;
}

uci::type::OrbitKinematicsSequenceID_Type& OrbitKinematicsSequenceType::getNextSequenceID_() const {
  if (nextSequenceID_Accessor) {
    return *nextSequenceID_Accessor;
  }
  throw uci::base::UCIException("Error in getNextSequenceID(): An attempt was made to get an optional field that was not enabled, call hasNextSequenceID() to determine if it is safe to call getNextSequenceID()");
}

const uci::type::OrbitKinematicsSequenceID_Type& OrbitKinematicsSequenceType::getNextSequenceID() const {
  return getNextSequenceID_();
}

uci::type::OrbitKinematicsSequenceID_Type& OrbitKinematicsSequenceType::getNextSequenceID() {
  return getNextSequenceID_();
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceType::setNextSequenceID(const uci::type::OrbitKinematicsSequenceID_Type& accessor) {
  enableNextSequenceID();
  if (&accessor != nextSequenceID_Accessor.get()) {
    nextSequenceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsSequenceType::hasNextSequenceID() const noexcept {
  return static_cast<bool>(nextSequenceID_Accessor);
}

uci::type::OrbitKinematicsSequenceID_Type& OrbitKinematicsSequenceType::enableNextSequenceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsSequenceID_Type : type};
  if ((!nextSequenceID_Accessor) || (nextSequenceID_Accessor->getAccessorType() != requestedType)) {
    nextSequenceID_Accessor = OrbitKinematicsSequenceID_Type::create(requestedType);
    if (!nextSequenceID_Accessor) {
      throw uci::base::UCIException("Error in enableNextSequenceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nextSequenceID_Accessor;
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceType::clearNextSequenceID() noexcept {
  nextSequenceID_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitKinematicsSequenceType> OrbitKinematicsSequenceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsSequenceType : type};
  return std::unique_ptr<OrbitKinematicsSequenceType>(dynamic_cast<OrbitKinematicsSequenceType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace OrbitKinematicsSequenceType_Names {

constexpr const char* Extern_Type_Name{"OrbitKinematicsSequenceType"};
constexpr const char* SequenceID_Name{"SequenceID"};
constexpr const char* Window_Name{"Window"};
constexpr const char* Locked_Name{"Locked"};
constexpr const char* OrbitKinematics_Name{"OrbitKinematics"};
constexpr const char* ManeuverKinematics_Name{"ManeuverKinematics"};
constexpr const char* NextSequenceID_Name{"NextSequenceID"};

} // namespace OrbitKinematicsSequenceType_Names

void OrbitKinematicsSequenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitKinematicsSequenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitKinematicsSequenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitKinematicsSequenceType_Names::SequenceID_Name) {
      OrbitKinematicsSequenceID_Type::deserialize(valueType.second, accessor.getSequenceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsSequenceType_Names::Window_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.getWindow(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsSequenceType_Names::Locked_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLocked(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitKinematicsSequenceType_Names::OrbitKinematics_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableOrbitKinematics(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsSequenceType_Names::ManeuverKinematics_Name) {
      OrbitManeuverType::deserialize(valueType.second, accessor.enableManeuverKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsSequenceType_Names::NextSequenceID_Name) {
      OrbitKinematicsSequenceID_Type::deserialize(valueType.second, accessor.enableNextSequenceID(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitKinematicsSequenceType::serialize(const uci::type::OrbitKinematicsSequenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitKinematicsSequenceType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::orbitKinematicsSequenceType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitKinematicsSequenceType_Names::Extern_Type_Name);
    }
    OrbitKinematicsSequenceID_Type::serialize(accessor.getSequenceID(), node, OrbitKinematicsSequenceType_Names::SequenceID_Name);
    DateTimeRangeType::serialize(accessor.getWindow(), node, OrbitKinematicsSequenceType_Names::Window_Name);
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getLocked(), node, OrbitKinematicsSequenceType_Names::Locked_Name);
    if (accessor.hasOrbitKinematics()) {
      OrbitKinematicsType::serialize(accessor.getOrbitKinematics(), node, OrbitKinematicsSequenceType_Names::OrbitKinematics_Name);
    }
    if (accessor.hasManeuverKinematics()) {
      OrbitManeuverType::serialize(accessor.getManeuverKinematics(), node, OrbitKinematicsSequenceType_Names::ManeuverKinematics_Name);
    }
    if (accessor.hasNextSequenceID()) {
      OrbitKinematicsSequenceID_Type::serialize(accessor.getNextSequenceID(), node, OrbitKinematicsSequenceType_Names::NextSequenceID_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitKinematicsSequenceType>().release());
}

uci::type::OrbitKinematicsSequenceType& OrbitKinematicsSequenceType::create(const uci::type::OrbitKinematicsSequenceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitKinematicsSequenceType> newAccessor{boost::make_unique<asb_uci::type::OrbitKinematicsSequenceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitKinematicsSequenceType::destroy(uci::type::OrbitKinematicsSequenceType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitKinematicsSequenceType*>(&accessor);
}

} // namespace type

} // namespace uci

