/** @file OperatorRoleMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OperatorRoleMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/OperatorRoleID_Type.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorRoleID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorRoleMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OperatorRoleMDT::OperatorRoleMDT()
  : operatorRoleID_Accessor{boost::make_unique<OperatorRoleID_Type>()},
    role_Accessor{boost::make_unique<ForeignKeyType>()} {
}

OperatorRoleMDT::~OperatorRoleMDT() = default;

void OperatorRoleMDT::copy(const uci::type::OperatorRoleMDT& accessor) {
  copyImpl(accessor, false);
}

void OperatorRoleMDT::copyImpl(const uci::type::OperatorRoleMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const OperatorRoleMDT&>(accessor);
    setOperatorRoleID(*(accessorImpl.operatorRoleID_Accessor));
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
    setRole(*(accessorImpl.role_Accessor));
    if (accessorImpl.roleDescription_Accessor) {
      setRoleDescription(*(accessorImpl.roleDescription_Accessor));
    } else {
      roleDescription_Accessor.reset();
    }
  }
}

void OperatorRoleMDT::reset() noexcept {
  DataRecordBaseType::reset();
  operatorRoleID_Accessor->reset();
  systemID_Accessor.reset();
  if (role_Accessor->getAccessorType() != uci::type::accessorType::foreignKeyType) {
    role_Accessor = boost::make_unique<ForeignKeyType>();
  } else {
    role_Accessor->reset();
  }
  roleDescription_Accessor.reset();
}

const uci::type::OperatorRoleID_Type& OperatorRoleMDT::getOperatorRoleID() const {
  return *operatorRoleID_Accessor;
}

uci::type::OperatorRoleID_Type& OperatorRoleMDT::getOperatorRoleID() {
  return *operatorRoleID_Accessor;
}

uci::type::OperatorRoleMDT& OperatorRoleMDT::setOperatorRoleID(const uci::type::OperatorRoleID_Type& accessor) {
  if (&accessor != operatorRoleID_Accessor.get()) {
    operatorRoleID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemID_Type& OperatorRoleMDT::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): An attempt was made to get an optional field that was not enabled, call hasSystemID() to determine if it is safe to call getSystemID()");
}

const uci::type::SystemID_Type& OperatorRoleMDT::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& OperatorRoleMDT::getSystemID() {
  return getSystemID_();
}

uci::type::OperatorRoleMDT& OperatorRoleMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  enableSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OperatorRoleMDT::hasSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& OperatorRoleMDT::enableSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(requestedType);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::OperatorRoleMDT& OperatorRoleMDT::clearSystemID() noexcept {
  systemID_Accessor.reset();
  return *this;
}

const uci::type::ForeignKeyType& OperatorRoleMDT::getRole() const {
  return *role_Accessor;
}

uci::type::ForeignKeyType& OperatorRoleMDT::getRole() {
  return *role_Accessor;
}

uci::type::OperatorRoleMDT& OperatorRoleMDT::setRole(const uci::type::ForeignKeyType& accessor) {
  enableRole(accessor.getAccessorType());
  if (&accessor != role_Accessor.get()) {
    role_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ForeignKeyType& OperatorRoleMDT::enableRole(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!role_Accessor) || (role_Accessor->getAccessorType() != requestedType)) {
    role_Accessor = ForeignKeyType::create(requestedType);
    if (!role_Accessor) {
      throw uci::base::UCIException("Error in enableRole(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *role_Accessor;
}

asb_uci::type::VisibleString256Type& OperatorRoleMDT::getRoleDescription_() const {
  if (roleDescription_Accessor) {
    return *roleDescription_Accessor;
  }
  throw uci::base::UCIException("Error in getRoleDescription(): An attempt was made to get an optional field that was not enabled, call hasRoleDescription() to determine if it is safe to call getRoleDescription()");
}

const asb_uci::type::VisibleString256Type& OperatorRoleMDT::getRoleDescription() const {
  return getRoleDescription_();
}

asb_uci::type::VisibleString256Type& OperatorRoleMDT::getRoleDescription() {
  return getRoleDescription_();
}

uci::type::OperatorRoleMDT& OperatorRoleMDT::setRoleDescription(const asb_uci::type::VisibleString256Type& value) {
  return setRoleDescription(value.c_str());
}

uci::type::OperatorRoleMDT& OperatorRoleMDT::setRoleDescription(const std::string& value) {
  return setRoleDescription(value.c_str());
}

uci::type::OperatorRoleMDT& OperatorRoleMDT::setRoleDescription(const char* value) {
  enableRoleDescription().setStringValue(value);
  return *this;
}

bool OperatorRoleMDT::hasRoleDescription() const noexcept {
  return static_cast<bool>(roleDescription_Accessor);
}

asb_uci::type::VisibleString256Type& OperatorRoleMDT::enableRoleDescription(uci::base::accessorType::AccessorType type) {
  if (!roleDescription_Accessor) {
    roleDescription_Accessor =  asb_uci::type::VisibleString256Type::create(type);
  }
  return *roleDescription_Accessor;
}

uci::type::OperatorRoleMDT& OperatorRoleMDT::clearRoleDescription() noexcept {
  roleDescription_Accessor.reset();
  return *this;
}

std::unique_ptr<OperatorRoleMDT> OperatorRoleMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorRoleMDT : type};
  return (requestedType == uci::type::accessorType::operatorRoleMDT) ? boost::make_unique<OperatorRoleMDT>() : nullptr;
}

/**  */
namespace OperatorRoleMDT_Names {

constexpr const char* Extern_Type_Name{"OperatorRoleMDT"};
constexpr const char* OperatorRoleID_Name{"OperatorRoleID"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* Role_Name{"Role"};
constexpr const char* RoleDescription_Name{"RoleDescription"};

} // namespace OperatorRoleMDT_Names

void OperatorRoleMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OperatorRoleMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OperatorRoleMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OperatorRoleMDT_Names::OperatorRoleID_Name) {
      OperatorRoleID_Type::deserialize(valueType.second, accessor.getOperatorRoleID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorRoleMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorRoleMDT_Names::Role_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRole(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorRoleMDT_Names::RoleDescription_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRoleDescription(*value);
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string OperatorRoleMDT::serialize(const uci::type::OperatorRoleMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OperatorRoleMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OperatorRoleMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  OperatorRoleID_Type::serialize(accessor.getOperatorRoleID(), node, OperatorRoleMDT_Names::OperatorRoleID_Name);
  if (accessor.hasSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, OperatorRoleMDT_Names::SystemID_Name);
  }
  ForeignKeyType::serialize(accessor.getRole(), node, OperatorRoleMDT_Names::Role_Name);
  if (accessor.hasRoleDescription()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getRoleDescription(), node, OperatorRoleMDT_Names::RoleDescription_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OperatorRoleMDT& OperatorRoleMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OperatorRoleMDT>().release());
}

uci::type::OperatorRoleMDT& OperatorRoleMDT::create(const uci::type::OperatorRoleMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OperatorRoleMDT> newAccessor{boost::make_unique<asb_uci::type::OperatorRoleMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OperatorRoleMDT::destroy(uci::type::OperatorRoleMDT& accessor) {
  delete dynamic_cast<asb_uci::type::OperatorRoleMDT*>(&accessor);
}

} // namespace type

} // namespace uci

