/** @file EntityOrbitalCSO_MDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EntityOrbitalCSO_MDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CSO_DetailsType.h"
#include "asb_uci/type/CSO_StateEnum.h"
#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/EntityOrbitalCSO_ID_Type.h"
#include "asb_uci/type/OperatorID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CSO_DetailsType.h"
#include "uci/type/CSO_StateEnum.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/EntityOrbitalCSO_ID_Type.h"
#include "uci/type/EntityOrbitalCSO_MDT.h"
#include "uci/type/OperatorID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityOrbitalCSO_MDT::EntityOrbitalCSO_MDT()
  : cSO_ID_Accessor{boost::make_unique<EntityOrbitalCSO_ID_Type>()},
    cSO_State_Accessor{boost::make_unique<CSO_StateEnum>()},
    primaryObjectID_Accessor{boost::make_unique<EntityID_Type>()},
    secondaryObjectID_Accessor{boost::make_unique<EntityID_Type>()},
    cSO_Details_Accessor{boost::make_unique<CSO_DetailsType>()} {
}

EntityOrbitalCSO_MDT::~EntityOrbitalCSO_MDT() = default;

void EntityOrbitalCSO_MDT::copy(const uci::type::EntityOrbitalCSO_MDT& accessor) {
  copyImpl(accessor, false);
}

void EntityOrbitalCSO_MDT::copyImpl(const uci::type::EntityOrbitalCSO_MDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityOrbitalCSO_MDT&>(accessor);
    setCSO_ID(*(accessorImpl.cSO_ID_Accessor));
    setCSO_State(*(accessorImpl.cSO_State_Accessor));
    setPrimaryObjectID(*(accessorImpl.primaryObjectID_Accessor));
    setSecondaryObjectID(*(accessorImpl.secondaryObjectID_Accessor));
    if (accessorImpl.operatorID_Accessor) {
      setOperatorID(*(accessorImpl.operatorID_Accessor));
    } else {
      operatorID_Accessor.reset();
    }
    setCSO_Details(*(accessorImpl.cSO_Details_Accessor));
  }
}

void EntityOrbitalCSO_MDT::reset() noexcept {
  cSO_ID_Accessor->reset();
  cSO_State_Accessor->reset();
  if (primaryObjectID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    primaryObjectID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    primaryObjectID_Accessor->reset();
  }
  if (secondaryObjectID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    secondaryObjectID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    secondaryObjectID_Accessor->reset();
  }
  operatorID_Accessor.reset();
  cSO_Details_Accessor->reset();
}

const uci::type::EntityOrbitalCSO_ID_Type& EntityOrbitalCSO_MDT::getCSO_ID() const {
  return *cSO_ID_Accessor;
}

uci::type::EntityOrbitalCSO_ID_Type& EntityOrbitalCSO_MDT::getCSO_ID() {
  return *cSO_ID_Accessor;
}

uci::type::EntityOrbitalCSO_MDT& EntityOrbitalCSO_MDT::setCSO_ID(const uci::type::EntityOrbitalCSO_ID_Type& accessor) {
  if (&accessor != cSO_ID_Accessor.get()) {
    cSO_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CSO_StateEnum& EntityOrbitalCSO_MDT::getCSO_State() const {
  return *cSO_State_Accessor;
}

uci::type::CSO_StateEnum& EntityOrbitalCSO_MDT::getCSO_State() {
  return *cSO_State_Accessor;
}

uci::type::EntityOrbitalCSO_MDT& EntityOrbitalCSO_MDT::setCSO_State(const uci::type::CSO_StateEnum& accessor) {
  if (&accessor != cSO_State_Accessor.get()) {
    cSO_State_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityOrbitalCSO_MDT& EntityOrbitalCSO_MDT::setCSO_State(uci::type::CSO_StateEnum::EnumerationItem value) {
  cSO_State_Accessor->setValue(value);
  return *this;
}


const uci::type::EntityID_Type& EntityOrbitalCSO_MDT::getPrimaryObjectID() const {
  return *primaryObjectID_Accessor;
}

uci::type::EntityID_Type& EntityOrbitalCSO_MDT::getPrimaryObjectID() {
  return *primaryObjectID_Accessor;
}

uci::type::EntityOrbitalCSO_MDT& EntityOrbitalCSO_MDT::setPrimaryObjectID(const uci::type::EntityID_Type& accessor) {
  enablePrimaryObjectID(accessor.getAccessorType());
  if (&accessor != primaryObjectID_Accessor.get()) {
    primaryObjectID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& EntityOrbitalCSO_MDT::enablePrimaryObjectID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!primaryObjectID_Accessor) || (primaryObjectID_Accessor->getAccessorType() != requestedType)) {
    primaryObjectID_Accessor = EntityID_Type::create(requestedType);
    if (!primaryObjectID_Accessor) {
      throw uci::base::UCIException("Error in enablePrimaryObjectID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *primaryObjectID_Accessor;
}

const uci::type::EntityID_Type& EntityOrbitalCSO_MDT::getSecondaryObjectID() const {
  return *secondaryObjectID_Accessor;
}

uci::type::EntityID_Type& EntityOrbitalCSO_MDT::getSecondaryObjectID() {
  return *secondaryObjectID_Accessor;
}

uci::type::EntityOrbitalCSO_MDT& EntityOrbitalCSO_MDT::setSecondaryObjectID(const uci::type::EntityID_Type& accessor) {
  enableSecondaryObjectID(accessor.getAccessorType());
  if (&accessor != secondaryObjectID_Accessor.get()) {
    secondaryObjectID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& EntityOrbitalCSO_MDT::enableSecondaryObjectID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!secondaryObjectID_Accessor) || (secondaryObjectID_Accessor->getAccessorType() != requestedType)) {
    secondaryObjectID_Accessor = EntityID_Type::create(requestedType);
    if (!secondaryObjectID_Accessor) {
      throw uci::base::UCIException("Error in enableSecondaryObjectID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *secondaryObjectID_Accessor;
}

uci::type::OperatorID_Type& EntityOrbitalCSO_MDT::getOperatorID_() const {
  if (operatorID_Accessor) {
    return *operatorID_Accessor;
  }
  throw uci::base::UCIException("Error in getOperatorID(): An attempt was made to get an optional field that was not enabled, call hasOperatorID() to determine if it is safe to call getOperatorID()");
}

const uci::type::OperatorID_Type& EntityOrbitalCSO_MDT::getOperatorID() const {
  return getOperatorID_();
}

uci::type::OperatorID_Type& EntityOrbitalCSO_MDT::getOperatorID() {
  return getOperatorID_();
}

uci::type::EntityOrbitalCSO_MDT& EntityOrbitalCSO_MDT::setOperatorID(const uci::type::OperatorID_Type& accessor) {
  enableOperatorID();
  if (&accessor != operatorID_Accessor.get()) {
    operatorID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntityOrbitalCSO_MDT::hasOperatorID() const noexcept {
  return static_cast<bool>(operatorID_Accessor);
}

uci::type::OperatorID_Type& EntityOrbitalCSO_MDT::enableOperatorID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorID_Type : type};
  if ((!operatorID_Accessor) || (operatorID_Accessor->getAccessorType() != requestedType)) {
    operatorID_Accessor = OperatorID_Type::create(requestedType);
    if (!operatorID_Accessor) {
      throw uci::base::UCIException("Error in enableOperatorID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *operatorID_Accessor;
}

uci::type::EntityOrbitalCSO_MDT& EntityOrbitalCSO_MDT::clearOperatorID() noexcept {
  operatorID_Accessor.reset();
  return *this;
}

const uci::type::CSO_DetailsType& EntityOrbitalCSO_MDT::getCSO_Details() const {
  return *cSO_Details_Accessor;
}

uci::type::CSO_DetailsType& EntityOrbitalCSO_MDT::getCSO_Details() {
  return *cSO_Details_Accessor;
}

uci::type::EntityOrbitalCSO_MDT& EntityOrbitalCSO_MDT::setCSO_Details(const uci::type::CSO_DetailsType& accessor) {
  if (&accessor != cSO_Details_Accessor.get()) {
    cSO_Details_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<EntityOrbitalCSO_MDT> EntityOrbitalCSO_MDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityOrbitalCSO_MDT : type};
  return (requestedType == uci::type::accessorType::entityOrbitalCSO_MDT) ? boost::make_unique<EntityOrbitalCSO_MDT>() : nullptr;
}

/**  */
namespace EntityOrbitalCSO_MDT_Names {

constexpr const char* Extern_Type_Name{"EntityOrbitalCSO_MDT"};
constexpr const char* CSO_ID_Name{"CSO_ID"};
constexpr const char* CSO_State_Name{"CSO_State"};
constexpr const char* PrimaryObjectID_Name{"PrimaryObjectID"};
constexpr const char* SecondaryObjectID_Name{"SecondaryObjectID"};
constexpr const char* OperatorID_Name{"OperatorID"};
constexpr const char* CSO_Details_Name{"CSO_Details"};

} // namespace EntityOrbitalCSO_MDT_Names

void EntityOrbitalCSO_MDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityOrbitalCSO_MDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityOrbitalCSO_MDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityOrbitalCSO_MDT_Names::CSO_ID_Name) {
      EntityOrbitalCSO_ID_Type::deserialize(valueType.second, accessor.getCSO_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalCSO_MDT_Names::CSO_State_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCSO_State().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityOrbitalCSO_MDT_Names::PrimaryObjectID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePrimaryObjectID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalCSO_MDT_Names::SecondaryObjectID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSecondaryObjectID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalCSO_MDT_Names::OperatorID_Name) {
      OperatorID_Type::deserialize(valueType.second, accessor.enableOperatorID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalCSO_MDT_Names::CSO_Details_Name) {
      CSO_DetailsType::deserialize(valueType.second, accessor.getCSO_Details(), nodeName, nsPrefix);
    }
  }
}

std::string EntityOrbitalCSO_MDT::serialize(const uci::type::EntityOrbitalCSO_MDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityOrbitalCSO_MDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityOrbitalCSO_MDT_Names::Extern_Type_Name);
  }
  EntityOrbitalCSO_ID_Type::serialize(accessor.getCSO_ID(), node, EntityOrbitalCSO_MDT_Names::CSO_ID_Name);
  CSO_StateEnum::serialize(accessor.getCSO_State(), node, EntityOrbitalCSO_MDT_Names::CSO_State_Name, false);
  EntityID_Type::serialize(accessor.getPrimaryObjectID(), node, EntityOrbitalCSO_MDT_Names::PrimaryObjectID_Name);
  EntityID_Type::serialize(accessor.getSecondaryObjectID(), node, EntityOrbitalCSO_MDT_Names::SecondaryObjectID_Name);
  if (accessor.hasOperatorID()) {
    OperatorID_Type::serialize(accessor.getOperatorID(), node, EntityOrbitalCSO_MDT_Names::OperatorID_Name);
  }
  CSO_DetailsType::serialize(accessor.getCSO_Details(), node, EntityOrbitalCSO_MDT_Names::CSO_Details_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityOrbitalCSO_MDT& EntityOrbitalCSO_MDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityOrbitalCSO_MDT>().release());
}

uci::type::EntityOrbitalCSO_MDT& EntityOrbitalCSO_MDT::create(const uci::type::EntityOrbitalCSO_MDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityOrbitalCSO_MDT> newAccessor{boost::make_unique<asb_uci::type::EntityOrbitalCSO_MDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityOrbitalCSO_MDT::destroy(uci::type::EntityOrbitalCSO_MDT& accessor) {
  delete dynamic_cast<asb_uci::type::EntityOrbitalCSO_MDT*>(&accessor);
}

} // namespace type

} // namespace uci

