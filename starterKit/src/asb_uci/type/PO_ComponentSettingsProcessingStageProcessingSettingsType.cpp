/** @file PO_ComponentSettingsProcessingStageProcessingSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_ComponentSettingsProcessingStageProcessingSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/HSB_ColorControlType.h"
#include "asb_uci/type/PO_ComponentSettingsProcessingStagePixelScalingType.h"
#include "asb_uci/type/RGB_ColorControlType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/HSB_ColorControlType.h"
#include "uci/type/PO_ComponentSettingsProcessingStagePixelScalingType.h"
#include "uci/type/PO_ComponentSettingsProcessingStageProcessingSettingsType.h"
#include "uci/type/PercentType.h"
#include "uci/type/RGB_ColorControlType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsProcessingStageProcessingSettingsType::PO_ComponentSettingsProcessingStageProcessingSettingsType() = default;

PO_ComponentSettingsProcessingStageProcessingSettingsType::~PO_ComponentSettingsProcessingStageProcessingSettingsType() = default;

void PO_ComponentSettingsProcessingStageProcessingSettingsType::copy(const uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsProcessingStageProcessingSettingsType::copyImpl(const uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsProcessingStageProcessingSettingsType&>(accessor);
    if (accessorImpl.pixelScaling_Accessor) {
      setPixelScaling(*(accessorImpl.pixelScaling_Accessor));
    } else {
      pixelScaling_Accessor.reset();
    }
    if (accessorImpl.hSB_ColorControl_Accessor) {
      setHSB_ColorControl(*(accessorImpl.hSB_ColorControl_Accessor));
    } else {
      hSB_ColorControl_Accessor.reset();
    }
    if (accessorImpl.rGB_ColorControl_Accessor) {
      setRGB_ColorControl(*(accessorImpl.rGB_ColorControl_Accessor));
    } else {
      rGB_ColorControl_Accessor.reset();
    }
    if (accessorImpl.hasGammaValue()) {
      setGammaValue(accessorImpl.getGammaValue());
    } else {
      clearGammaValue();
    }
    if (accessorImpl.hasSharpnessValue()) {
      setSharpnessValue(accessorImpl.getSharpnessValue());
    } else {
      clearSharpnessValue();
    }
    if (accessorImpl.hasEdgeEnhancement()) {
      setEdgeEnhancement(accessorImpl.getEdgeEnhancement());
    } else {
      clearEdgeEnhancement();
    }
    if (accessorImpl.hasElectronicZoom()) {
      setElectronicZoom(accessorImpl.getElectronicZoom());
    } else {
      clearElectronicZoom();
    }
  }
}

void PO_ComponentSettingsProcessingStageProcessingSettingsType::reset() noexcept {
  pixelScaling_Accessor.reset();
  hSB_ColorControl_Accessor.reset();
  rGB_ColorControl_Accessor.reset();
  clearGammaValue();
  clearSharpnessValue();
  clearEdgeEnhancement();
  clearElectronicZoom();
}

uci::type::PO_ComponentSettingsProcessingStagePixelScalingType& PO_ComponentSettingsProcessingStageProcessingSettingsType::getPixelScaling_() const {
  if (pixelScaling_Accessor) {
    return *pixelScaling_Accessor;
  }
  throw uci::base::UCIException("Error in getPixelScaling(): An attempt was made to get an optional field that was not enabled, call hasPixelScaling() to determine if it is safe to call getPixelScaling()");
}

const uci::type::PO_ComponentSettingsProcessingStagePixelScalingType& PO_ComponentSettingsProcessingStageProcessingSettingsType::getPixelScaling() const {
  return getPixelScaling_();
}

uci::type::PO_ComponentSettingsProcessingStagePixelScalingType& PO_ComponentSettingsProcessingStageProcessingSettingsType::getPixelScaling() {
  return getPixelScaling_();
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::setPixelScaling(const uci::type::PO_ComponentSettingsProcessingStagePixelScalingType& accessor) {
  enablePixelScaling();
  if (&accessor != pixelScaling_Accessor.get()) {
    pixelScaling_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsProcessingStageProcessingSettingsType::hasPixelScaling() const noexcept {
  return static_cast<bool>(pixelScaling_Accessor);
}

uci::type::PO_ComponentSettingsProcessingStagePixelScalingType& PO_ComponentSettingsProcessingStageProcessingSettingsType::enablePixelScaling(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsProcessingStagePixelScalingType : type};
  if ((!pixelScaling_Accessor) || (pixelScaling_Accessor->getAccessorType() != requestedType)) {
    pixelScaling_Accessor = PO_ComponentSettingsProcessingStagePixelScalingType::create(requestedType);
    if (!pixelScaling_Accessor) {
      throw uci::base::UCIException("Error in enablePixelScaling(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pixelScaling_Accessor;
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::clearPixelScaling() noexcept {
  pixelScaling_Accessor.reset();
  return *this;
}

uci::type::HSB_ColorControlType& PO_ComponentSettingsProcessingStageProcessingSettingsType::getHSB_ColorControl_() const {
  if (hSB_ColorControl_Accessor) {
    return *hSB_ColorControl_Accessor;
  }
  throw uci::base::UCIException("Error in getHSB_ColorControl(): An attempt was made to get an optional field that was not enabled, call hasHSB_ColorControl() to determine if it is safe to call getHSB_ColorControl()");
}

const uci::type::HSB_ColorControlType& PO_ComponentSettingsProcessingStageProcessingSettingsType::getHSB_ColorControl() const {
  return getHSB_ColorControl_();
}

uci::type::HSB_ColorControlType& PO_ComponentSettingsProcessingStageProcessingSettingsType::getHSB_ColorControl() {
  return getHSB_ColorControl_();
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::setHSB_ColorControl(const uci::type::HSB_ColorControlType& accessor) {
  enableHSB_ColorControl();
  if (&accessor != hSB_ColorControl_Accessor.get()) {
    hSB_ColorControl_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsProcessingStageProcessingSettingsType::hasHSB_ColorControl() const noexcept {
  return static_cast<bool>(hSB_ColorControl_Accessor);
}

uci::type::HSB_ColorControlType& PO_ComponentSettingsProcessingStageProcessingSettingsType::enableHSB_ColorControl(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::hSB_ColorControlType : type};
  if ((!hSB_ColorControl_Accessor) || (hSB_ColorControl_Accessor->getAccessorType() != requestedType)) {
    hSB_ColorControl_Accessor = HSB_ColorControlType::create(requestedType);
    if (!hSB_ColorControl_Accessor) {
      throw uci::base::UCIException("Error in enableHSB_ColorControl(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *hSB_ColorControl_Accessor;
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::clearHSB_ColorControl() noexcept {
  hSB_ColorControl_Accessor.reset();
  return *this;
}

uci::type::RGB_ColorControlType& PO_ComponentSettingsProcessingStageProcessingSettingsType::getRGB_ColorControl_() const {
  if (rGB_ColorControl_Accessor) {
    return *rGB_ColorControl_Accessor;
  }
  throw uci::base::UCIException("Error in getRGB_ColorControl(): An attempt was made to get an optional field that was not enabled, call hasRGB_ColorControl() to determine if it is safe to call getRGB_ColorControl()");
}

const uci::type::RGB_ColorControlType& PO_ComponentSettingsProcessingStageProcessingSettingsType::getRGB_ColorControl() const {
  return getRGB_ColorControl_();
}

uci::type::RGB_ColorControlType& PO_ComponentSettingsProcessingStageProcessingSettingsType::getRGB_ColorControl() {
  return getRGB_ColorControl_();
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::setRGB_ColorControl(const uci::type::RGB_ColorControlType& accessor) {
  enableRGB_ColorControl();
  if (&accessor != rGB_ColorControl_Accessor.get()) {
    rGB_ColorControl_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsProcessingStageProcessingSettingsType::hasRGB_ColorControl() const noexcept {
  return static_cast<bool>(rGB_ColorControl_Accessor);
}

uci::type::RGB_ColorControlType& PO_ComponentSettingsProcessingStageProcessingSettingsType::enableRGB_ColorControl(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rGB_ColorControlType : type};
  if ((!rGB_ColorControl_Accessor) || (rGB_ColorControl_Accessor->getAccessorType() != requestedType)) {
    rGB_ColorControl_Accessor = RGB_ColorControlType::create(requestedType);
    if (!rGB_ColorControl_Accessor) {
      throw uci::base::UCIException("Error in enableRGB_ColorControl(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rGB_ColorControl_Accessor;
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::clearRGB_ColorControl() noexcept {
  rGB_ColorControl_Accessor.reset();
  return *this;
}

xs::Double PO_ComponentSettingsProcessingStageProcessingSettingsType::getGammaValue() const {
  if (gammaValue_Accessor) {
    return *gammaValue_Accessor;
  }
  throw uci::base::UCIException("Error in getGammaValue(): An attempt was made to get an optional field that was not enabled, call hasGammaValue() to determine if it is safe to call getGammaValue()");
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::setGammaValue(xs::Double value) {
  gammaValue_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsProcessingStageProcessingSettingsType::hasGammaValue() const noexcept {
  return gammaValue_Accessor.has_value();
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::clearGammaValue() noexcept {
  gammaValue_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue PO_ComponentSettingsProcessingStageProcessingSettingsType::getSharpnessValue() const {
  if (sharpnessValue_Accessor) {
    return *sharpnessValue_Accessor;
  }
  throw uci::base::UCIException("Error in getSharpnessValue(): An attempt was made to get an optional field that was not enabled, call hasSharpnessValue() to determine if it is safe to call getSharpnessValue()");
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::setSharpnessValue(uci::type::PercentTypeValue value) {
  sharpnessValue_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsProcessingStageProcessingSettingsType::hasSharpnessValue() const noexcept {
  return sharpnessValue_Accessor.has_value();
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::clearSharpnessValue() noexcept {
  sharpnessValue_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue PO_ComponentSettingsProcessingStageProcessingSettingsType::getEdgeEnhancement() const {
  if (edgeEnhancement_Accessor) {
    return *edgeEnhancement_Accessor;
  }
  throw uci::base::UCIException("Error in getEdgeEnhancement(): An attempt was made to get an optional field that was not enabled, call hasEdgeEnhancement() to determine if it is safe to call getEdgeEnhancement()");
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::setEdgeEnhancement(uci::type::PercentTypeValue value) {
  edgeEnhancement_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsProcessingStageProcessingSettingsType::hasEdgeEnhancement() const noexcept {
  return edgeEnhancement_Accessor.has_value();
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::clearEdgeEnhancement() noexcept {
  edgeEnhancement_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue PO_ComponentSettingsProcessingStageProcessingSettingsType::getElectronicZoom() const {
  if (electronicZoom_Accessor) {
    return *electronicZoom_Accessor;
  }
  throw uci::base::UCIException("Error in getElectronicZoom(): An attempt was made to get an optional field that was not enabled, call hasElectronicZoom() to determine if it is safe to call getElectronicZoom()");
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::setElectronicZoom(uci::type::PercentTypeValue value) {
  electronicZoom_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsProcessingStageProcessingSettingsType::hasElectronicZoom() const noexcept {
  return electronicZoom_Accessor.has_value();
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::clearElectronicZoom() noexcept {
  electronicZoom_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ComponentSettingsProcessingStageProcessingSettingsType> PO_ComponentSettingsProcessingStageProcessingSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsProcessingStageProcessingSettingsType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsProcessingStageProcessingSettingsType) ? boost::make_unique<PO_ComponentSettingsProcessingStageProcessingSettingsType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsProcessingStageProcessingSettingsType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsProcessingStageProcessingSettingsType"};
constexpr const char* PixelScaling_Name{"PixelScaling"};
constexpr const char* HSB_ColorControl_Name{"HSB_ColorControl"};
constexpr const char* RGB_ColorControl_Name{"RGB_ColorControl"};
constexpr const char* GammaValue_Name{"GammaValue"};
constexpr const char* SharpnessValue_Name{"SharpnessValue"};
constexpr const char* EdgeEnhancement_Name{"EdgeEnhancement"};
constexpr const char* ElectronicZoom_Name{"ElectronicZoom"};

} // namespace PO_ComponentSettingsProcessingStageProcessingSettingsType_Names

void PO_ComponentSettingsProcessingStageProcessingSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::PixelScaling_Name) {
      PO_ComponentSettingsProcessingStagePixelScalingType::deserialize(valueType.second, accessor.enablePixelScaling(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::HSB_ColorControl_Name) {
      HSB_ColorControlType::deserialize(valueType.second, accessor.enableHSB_ColorControl(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::RGB_ColorControl_Name) {
      RGB_ColorControlType::deserialize(valueType.second, accessor.enableRGB_ColorControl(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::GammaValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGammaValue(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::SharpnessValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSharpnessValue(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::EdgeEnhancement_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEdgeEnhancement(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::ElectronicZoom_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setElectronicZoom(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string PO_ComponentSettingsProcessingStageProcessingSettingsType::serialize(const uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::Extern_Type_Name);
  }
  if (accessor.hasPixelScaling()) {
    PO_ComponentSettingsProcessingStagePixelScalingType::serialize(accessor.getPixelScaling(), node, PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::PixelScaling_Name);
  }
  if (accessor.hasHSB_ColorControl()) {
    HSB_ColorControlType::serialize(accessor.getHSB_ColorControl(), node, PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::HSB_ColorControl_Name);
  }
  if (accessor.hasRGB_ColorControl()) {
    RGB_ColorControlType::serialize(accessor.getRGB_ColorControl(), node, PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::RGB_ColorControl_Name);
  }
  if (accessor.hasGammaValue()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getGammaValue(), node, PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::GammaValue_Name);
  }
  if (accessor.hasSharpnessValue()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSharpnessValue(), node, PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::SharpnessValue_Name);
  }
  if (accessor.hasEdgeEnhancement()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEdgeEnhancement(), node, PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::EdgeEnhancement_Name);
  }
  if (accessor.hasElectronicZoom()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getElectronicZoom(), node, PO_ComponentSettingsProcessingStageProcessingSettingsType_Names::ElectronicZoom_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType>().release());
}

uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& PO_ComponentSettingsProcessingStageProcessingSettingsType::create(const uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsProcessingStageProcessingSettingsType::destroy(uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

