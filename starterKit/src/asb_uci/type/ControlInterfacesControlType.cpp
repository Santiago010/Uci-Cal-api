/** @file ControlInterfacesControlType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ControlInterfacesControlType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ControlInterfacesCapabilityControlType.h"
#include "../../../include/asb_uci/type/MissionControlInterfacesCommandType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ControlInterfacesCapabilityControlType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ControlInterfacesControlType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionControlInterfacesCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ControlInterfacesControlType::ControlInterfacesControlType() = default;

ControlInterfacesControlType::~ControlInterfacesControlType() = default;

void ControlInterfacesControlType::copy(const uci::type::ControlInterfacesControlType& accessor) {
  copyImpl(accessor, false);
}

void ControlInterfacesControlType::copyImpl(const uci::type::ControlInterfacesControlType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ControlInterfacesControlType&>(accessor);
    if (accessorImpl.missionControl_Accessor) {
      setMissionControl(*(accessorImpl.missionControl_Accessor));
    } else {
      missionControl_Accessor.reset();
    }
    if (accessorImpl.capabilityControl_Accessor) {
      setCapabilityControl(*(accessorImpl.capabilityControl_Accessor));
    } else {
      capabilityControl_Accessor.reset();
    }
  }
}

void ControlInterfacesControlType::reset() noexcept {
  missionControl_Accessor.reset();
  capabilityControl_Accessor.reset();
}

uci::type::ControlInterfacesControlType::ControlInterfacesControlTypeChoice ControlInterfacesControlType::getControlInterfacesControlTypeChoiceOrdinal() const noexcept {
  if (missionControl_Accessor) {
    return CONTROLINTERFACESCONTROLTYPE_CHOICE_MISSIONCONTROL;
  }
  if (capabilityControl_Accessor) {
    return CONTROLINTERFACESCONTROLTYPE_CHOICE_CAPABILITYCONTROL;
  }
  return CONTROLINTERFACESCONTROLTYPE_CHOICE_NONE;
}

uci::type::ControlInterfacesControlType& ControlInterfacesControlType::setControlInterfacesControlTypeChoiceOrdinal(uci::type::ControlInterfacesControlType::ControlInterfacesControlTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case CONTROLINTERFACESCONTROLTYPE_CHOICE_MISSIONCONTROL:
      chooseMissionControl("setControlInterfacesControlTypeChoiceOrdinal", type);
      break;
    case CONTROLINTERFACESCONTROLTYPE_CHOICE_CAPABILITYCONTROL:
      chooseCapabilityControl();
      break;
    default:
      throw uci::base::UCIException("Error in setControlInterfacesControlTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::MissionControlInterfacesCommandType& ControlInterfacesControlType::getMissionControl_() const {
  if (missionControl_Accessor) {
    return *missionControl_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionControl(): Unable to get MissionControl, field not selected");
}

const uci::type::MissionControlInterfacesCommandType& ControlInterfacesControlType::getMissionControl() const {
  return getMissionControl_();
}

uci::type::MissionControlInterfacesCommandType& ControlInterfacesControlType::getMissionControl() {
  return getMissionControl_();
}

uci::type::ControlInterfacesControlType& ControlInterfacesControlType::setMissionControl(const uci::type::MissionControlInterfacesCommandType& accessor) {
  chooseMissionControl();
  if (&accessor != missionControl_Accessor.get()) {
    missionControl_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ControlInterfacesControlType::isMissionControl() const noexcept {
  return static_cast<bool>(missionControl_Accessor);
}

uci::type::MissionControlInterfacesCommandType& ControlInterfacesControlType::chooseMissionControl(const std::string& method, uci::base::accessorType::AccessorType type) {
  capabilityControl_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionControlInterfacesCommandType : type};
  if ((!missionControl_Accessor) || (missionControl_Accessor->getAccessorType() != requestedType)) {
    missionControl_Accessor = MissionControlInterfacesCommandType::create(type);
    if (!missionControl_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionControl_Accessor;
}

uci::type::MissionControlInterfacesCommandType& ControlInterfacesControlType::chooseMissionControl(uci::base::accessorType::AccessorType type) {
  return chooseMissionControl("chooseMissionControl", type);
}

uci::type::ControlInterfacesControlType::CapabilityControl& ControlInterfacesControlType::getCapabilityControl_() const {
  if (capabilityControl_Accessor) {
    return *capabilityControl_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityControl(): Unable to get CapabilityControl, field not selected");
}

const uci::type::ControlInterfacesControlType::CapabilityControl& ControlInterfacesControlType::getCapabilityControl() const {
  return getCapabilityControl_();
}

uci::type::ControlInterfacesControlType::CapabilityControl& ControlInterfacesControlType::getCapabilityControl() {
  return getCapabilityControl_();
}

uci::type::ControlInterfacesControlType& ControlInterfacesControlType::setCapabilityControl(const uci::type::ControlInterfacesControlType::CapabilityControl& accessor) {
  chooseCapabilityControl();
  if (&accessor != capabilityControl_Accessor.get()) {
    capabilityControl_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ControlInterfacesControlType::isCapabilityControl() const noexcept {
  return static_cast<bool>(capabilityControl_Accessor);
}

uci::type::ControlInterfacesControlType::CapabilityControl& ControlInterfacesControlType::chooseCapabilityControl() {
  missionControl_Accessor.reset();
  if (!capabilityControl_Accessor) {
    capabilityControl_Accessor = boost::make_unique<CapabilityControl>(1, SIZE_MAX);
  }
  return *capabilityControl_Accessor;
}

std::unique_ptr<ControlInterfacesControlType> ControlInterfacesControlType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::controlInterfacesControlType : type};
  return (requestedType == uci::type::accessorType::controlInterfacesControlType) ? boost::make_unique<ControlInterfacesControlType>() : nullptr;
}

/**  */
namespace ControlInterfacesControlType_Names {

constexpr const char* Extern_Type_Name{"ControlInterfacesControlType"};
constexpr const char* MissionControl_Name{"MissionControl"};
constexpr const char* CapabilityControl_Name{"CapabilityControl"};

} // namespace ControlInterfacesControlType_Names

void ControlInterfacesControlType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ControlInterfacesControlType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ControlInterfacesControlType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ControlInterfacesControlType_Names::MissionControl_Name) {
      MissionControlInterfacesCommandType::deserialize(valueType.second, accessor.chooseMissionControl(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ControlInterfacesControlType_Names::CapabilityControl_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ControlInterfacesControlType::CapabilityControl& boundedList = accessor.chooseCapabilityControl();
        const uci::type::ControlInterfacesControlType::CapabilityControl::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ControlInterfacesCapabilityControlType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ControlInterfacesControlType::serialize(const uci::type::ControlInterfacesControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ControlInterfacesControlType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ControlInterfacesControlType_Names::Extern_Type_Name);
  }
  if (accessor.isMissionControl()) {
    MissionControlInterfacesCommandType::serialize(accessor.getMissionControl(), node, ControlInterfacesControlType_Names::MissionControl_Name);
  } else if (accessor.isCapabilityControl()) {
    {
      const uci::type::ControlInterfacesControlType::CapabilityControl& boundedList = accessor.getCapabilityControl();
      for (uci::type::ControlInterfacesControlType::CapabilityControl::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ControlInterfacesCapabilityControlType::serialize(boundedList.at(i), node, ControlInterfacesControlType_Names::CapabilityControl_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ControlInterfacesControlType& ControlInterfacesControlType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ControlInterfacesControlType>().release());
}

uci::type::ControlInterfacesControlType& ControlInterfacesControlType::create(const uci::type::ControlInterfacesControlType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ControlInterfacesControlType> newAccessor{boost::make_unique<asb_uci::type::ControlInterfacesControlType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ControlInterfacesControlType::destroy(uci::type::ControlInterfacesControlType& accessor) {
  delete dynamic_cast<asb_uci::type::ControlInterfacesControlType*>(&accessor);
}

} // namespace type

} // namespace uci

