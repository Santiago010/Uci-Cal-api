/** @file ActivityPlanValidationMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ActivityPlanValidationMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityPlanID_Type.h"
#include "asb_uci/type/ActivityPlanValidationID_Type.h"
#include "asb_uci/type/CompletionStatusType.h"
#include "asb_uci/type/IncompleteProcessingType.h"
#include "asb_uci/type/InvalidActivityType.h"
#include "asb_uci/type/PlanValidationStateEnum.h"
#include "asb_uci/type/RequirementPlanningResultType.h"
#include "asb_uci/type/ValidatorType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityPlanID_Type.h"
#include "uci/type/ActivityPlanValidationID_Type.h"
#include "uci/type/ActivityPlanValidationMDT.h"
#include "uci/type/CompletionStatusType.h"
#include "uci/type/IncompleteProcessingType.h"
#include "uci/type/InvalidActivityType.h"
#include "uci/type/PlanValidationStateEnum.h"
#include "uci/type/RequirementPlanningResultType.h"
#include "uci/type/ValidatorType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ActivityPlanValidationMDT::ActivityPlanValidationMDT()
  : activityPlanValidationID_Accessor{boost::make_unique<ActivityPlanValidationID_Type>()},
    planID_Accessor{boost::make_unique<ActivityPlanID_Type>()},
    validator_Accessor{boost::make_unique<ValidatorType>()},
    validationState_Accessor{boost::make_unique<PlanValidationStateEnum>()},
    incompleteItem_Accessor{boost::make_unique<IncompleteItem>(0, SIZE_MAX)},
    invalidActivity_Accessor{boost::make_unique<InvalidActivity>(0, SIZE_MAX)},
    activityPlanningResult_Accessor{boost::make_unique<ActivityPlanningResult>(0, SIZE_MAX)} {
}

ActivityPlanValidationMDT::~ActivityPlanValidationMDT() = default;

void ActivityPlanValidationMDT::copy(const uci::type::ActivityPlanValidationMDT& accessor) {
  copyImpl(accessor, false);
}

void ActivityPlanValidationMDT::copyImpl(const uci::type::ActivityPlanValidationMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ActivityPlanValidationMDT&>(accessor);
    setActivityPlanValidationID(*(accessorImpl.activityPlanValidationID_Accessor));
    setPlanID(*(accessorImpl.planID_Accessor));
    setValidator(*(accessorImpl.validator_Accessor));
    setValidationState(*(accessorImpl.validationState_Accessor));
    if (accessorImpl.completionStatus_Accessor) {
      setCompletionStatus(*(accessorImpl.completionStatus_Accessor));
    } else {
      completionStatus_Accessor.reset();
    }
    setIncompleteItem(*(accessorImpl.incompleteItem_Accessor));
    setInvalidActivity(*(accessorImpl.invalidActivity_Accessor));
    setActivityPlanningResult(*(accessorImpl.activityPlanningResult_Accessor));
    if (accessorImpl.modifiedPlanID_Accessor) {
      setModifiedPlanID(*(accessorImpl.modifiedPlanID_Accessor));
    } else {
      modifiedPlanID_Accessor.reset();
    }
  }
}

void ActivityPlanValidationMDT::reset() noexcept {
  activityPlanValidationID_Accessor->reset();
  planID_Accessor->reset();
  validator_Accessor->reset();
  validationState_Accessor->reset();
  completionStatus_Accessor.reset();
  incompleteItem_Accessor->reset();
  invalidActivity_Accessor->reset();
  activityPlanningResult_Accessor->reset();
  modifiedPlanID_Accessor.reset();
}

const uci::type::ActivityPlanValidationID_Type& ActivityPlanValidationMDT::getActivityPlanValidationID() const {
  return *activityPlanValidationID_Accessor;
}

uci::type::ActivityPlanValidationID_Type& ActivityPlanValidationMDT::getActivityPlanValidationID() {
  return *activityPlanValidationID_Accessor;
}

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::setActivityPlanValidationID(const uci::type::ActivityPlanValidationID_Type& accessor) {
  if (&accessor != activityPlanValidationID_Accessor.get()) {
    activityPlanValidationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ActivityPlanID_Type& ActivityPlanValidationMDT::getPlanID() const {
  return *planID_Accessor;
}

uci::type::ActivityPlanID_Type& ActivityPlanValidationMDT::getPlanID() {
  return *planID_Accessor;
}

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::setPlanID(const uci::type::ActivityPlanID_Type& accessor) {
  if (&accessor != planID_Accessor.get()) {
    planID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ValidatorType& ActivityPlanValidationMDT::getValidator() const {
  return *validator_Accessor;
}

uci::type::ValidatorType& ActivityPlanValidationMDT::getValidator() {
  return *validator_Accessor;
}

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::setValidator(const uci::type::ValidatorType& accessor) {
  if (&accessor != validator_Accessor.get()) {
    validator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlanValidationStateEnum& ActivityPlanValidationMDT::getValidationState() const {
  return *validationState_Accessor;
}

uci::type::PlanValidationStateEnum& ActivityPlanValidationMDT::getValidationState() {
  return *validationState_Accessor;
}

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::setValidationState(const uci::type::PlanValidationStateEnum& accessor) {
  if (&accessor != validationState_Accessor.get()) {
    validationState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::setValidationState(uci::type::PlanValidationStateEnum::EnumerationItem value) {
  validationState_Accessor->setValue(value);
  return *this;
}


uci::type::CompletionStatusType& ActivityPlanValidationMDT::getCompletionStatus_() const {
  if (completionStatus_Accessor) {
    return *completionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getCompletionStatus(): An attempt was made to get an optional field that was not enabled, call hasCompletionStatus() to determine if it is safe to call getCompletionStatus()");
}

const uci::type::CompletionStatusType& ActivityPlanValidationMDT::getCompletionStatus() const {
  return getCompletionStatus_();
}

uci::type::CompletionStatusType& ActivityPlanValidationMDT::getCompletionStatus() {
  return getCompletionStatus_();
}

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::setCompletionStatus(const uci::type::CompletionStatusType& accessor) {
  enableCompletionStatus();
  if (&accessor != completionStatus_Accessor.get()) {
    completionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityPlanValidationMDT::hasCompletionStatus() const noexcept {
  return static_cast<bool>(completionStatus_Accessor);
}

uci::type::CompletionStatusType& ActivityPlanValidationMDT::enableCompletionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::completionStatusType : type};
  if ((!completionStatus_Accessor) || (completionStatus_Accessor->getAccessorType() != requestedType)) {
    completionStatus_Accessor = CompletionStatusType::create(requestedType);
    if (!completionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableCompletionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *completionStatus_Accessor;
}

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::clearCompletionStatus() noexcept {
  completionStatus_Accessor.reset();
  return *this;
}

const uci::type::ActivityPlanValidationMDT::IncompleteItem& ActivityPlanValidationMDT::getIncompleteItem() const {
  return *incompleteItem_Accessor;
}

uci::type::ActivityPlanValidationMDT::IncompleteItem& ActivityPlanValidationMDT::getIncompleteItem() {
  return *incompleteItem_Accessor;
}

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::setIncompleteItem(const uci::type::ActivityPlanValidationMDT::IncompleteItem& accessor) {
  if (&accessor != incompleteItem_Accessor.get()) {
    incompleteItem_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ActivityPlanValidationMDT::InvalidActivity& ActivityPlanValidationMDT::getInvalidActivity() const {
  return *invalidActivity_Accessor;
}

uci::type::ActivityPlanValidationMDT::InvalidActivity& ActivityPlanValidationMDT::getInvalidActivity() {
  return *invalidActivity_Accessor;
}

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::setInvalidActivity(const uci::type::ActivityPlanValidationMDT::InvalidActivity& accessor) {
  if (&accessor != invalidActivity_Accessor.get()) {
    invalidActivity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ActivityPlanValidationMDT::ActivityPlanningResult& ActivityPlanValidationMDT::getActivityPlanningResult() const {
  return *activityPlanningResult_Accessor;
}

uci::type::ActivityPlanValidationMDT::ActivityPlanningResult& ActivityPlanValidationMDT::getActivityPlanningResult() {
  return *activityPlanningResult_Accessor;
}

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::setActivityPlanningResult(const uci::type::ActivityPlanValidationMDT::ActivityPlanningResult& accessor) {
  if (&accessor != activityPlanningResult_Accessor.get()) {
    activityPlanningResult_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ActivityPlanID_Type& ActivityPlanValidationMDT::getModifiedPlanID_() const {
  if (modifiedPlanID_Accessor) {
    return *modifiedPlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getModifiedPlanID(): An attempt was made to get an optional field that was not enabled, call hasModifiedPlanID() to determine if it is safe to call getModifiedPlanID()");
}

const uci::type::ActivityPlanID_Type& ActivityPlanValidationMDT::getModifiedPlanID() const {
  return getModifiedPlanID_();
}

uci::type::ActivityPlanID_Type& ActivityPlanValidationMDT::getModifiedPlanID() {
  return getModifiedPlanID_();
}

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::setModifiedPlanID(const uci::type::ActivityPlanID_Type& accessor) {
  enableModifiedPlanID();
  if (&accessor != modifiedPlanID_Accessor.get()) {
    modifiedPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ActivityPlanValidationMDT::hasModifiedPlanID() const noexcept {
  return static_cast<bool>(modifiedPlanID_Accessor);
}

uci::type::ActivityPlanID_Type& ActivityPlanValidationMDT::enableModifiedPlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanID_Type : type};
  if ((!modifiedPlanID_Accessor) || (modifiedPlanID_Accessor->getAccessorType() != requestedType)) {
    modifiedPlanID_Accessor = ActivityPlanID_Type::create(requestedType);
    if (!modifiedPlanID_Accessor) {
      throw uci::base::UCIException("Error in enableModifiedPlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modifiedPlanID_Accessor;
}

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::clearModifiedPlanID() noexcept {
  modifiedPlanID_Accessor.reset();
  return *this;
}

std::unique_ptr<ActivityPlanValidationMDT> ActivityPlanValidationMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanValidationMDT : type};
  return (requestedType == uci::type::accessorType::activityPlanValidationMDT) ? boost::make_unique<ActivityPlanValidationMDT>() : nullptr;
}

/**  */
namespace ActivityPlanValidationMDT_Names {

constexpr const char* Extern_Type_Name{"ActivityPlanValidationMDT"};
constexpr const char* ActivityPlanValidationID_Name{"ActivityPlanValidationID"};
constexpr const char* PlanID_Name{"PlanID"};
constexpr const char* Validator_Name{"Validator"};
constexpr const char* ValidationState_Name{"ValidationState"};
constexpr const char* CompletionStatus_Name{"CompletionStatus"};
constexpr const char* IncompleteItem_Name{"IncompleteItem"};
constexpr const char* InvalidActivity_Name{"InvalidActivity"};
constexpr const char* ActivityPlanningResult_Name{"ActivityPlanningResult"};
constexpr const char* ModifiedPlanID_Name{"ModifiedPlanID"};

} // namespace ActivityPlanValidationMDT_Names

void ActivityPlanValidationMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActivityPlanValidationMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActivityPlanValidationMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ActivityPlanValidationMDT_Names::ActivityPlanValidationID_Name) {
      ActivityPlanValidationID_Type::deserialize(valueType.second, accessor.getActivityPlanValidationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityPlanValidationMDT_Names::PlanID_Name) {
      ActivityPlanID_Type::deserialize(valueType.second, accessor.getPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityPlanValidationMDT_Names::Validator_Name) {
      ValidatorType::deserialize(valueType.second, accessor.getValidator(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityPlanValidationMDT_Names::ValidationState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getValidationState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ActivityPlanValidationMDT_Names::CompletionStatus_Name) {
      CompletionStatusType::deserialize(valueType.second, accessor.enableCompletionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityPlanValidationMDT_Names::IncompleteItem_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ActivityPlanValidationMDT::IncompleteItem& boundedList = accessor.getIncompleteItem();
        const uci::type::ActivityPlanValidationMDT::IncompleteItem::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::IncompleteProcessingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ActivityPlanValidationMDT_Names::InvalidActivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ActivityPlanValidationMDT::InvalidActivity& boundedList = accessor.getInvalidActivity();
        const uci::type::ActivityPlanValidationMDT::InvalidActivity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::InvalidActivityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ActivityPlanValidationMDT_Names::ActivityPlanningResult_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ActivityPlanValidationMDT::ActivityPlanningResult& boundedList = accessor.getActivityPlanningResult();
        const uci::type::ActivityPlanValidationMDT::ActivityPlanningResult::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RequirementPlanningResultType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ActivityPlanValidationMDT_Names::ModifiedPlanID_Name) {
      ActivityPlanID_Type::deserialize(valueType.second, accessor.enableModifiedPlanID(), nodeName, nsPrefix);
    }
  }
}

std::string ActivityPlanValidationMDT::serialize(const uci::type::ActivityPlanValidationMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ActivityPlanValidationMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ActivityPlanValidationMDT_Names::Extern_Type_Name);
  }
  ActivityPlanValidationID_Type::serialize(accessor.getActivityPlanValidationID(), node, ActivityPlanValidationMDT_Names::ActivityPlanValidationID_Name);
  ActivityPlanID_Type::serialize(accessor.getPlanID(), node, ActivityPlanValidationMDT_Names::PlanID_Name);
  ValidatorType::serialize(accessor.getValidator(), node, ActivityPlanValidationMDT_Names::Validator_Name);
  PlanValidationStateEnum::serialize(accessor.getValidationState(), node, ActivityPlanValidationMDT_Names::ValidationState_Name, false);
  if (accessor.hasCompletionStatus()) {
    CompletionStatusType::serialize(accessor.getCompletionStatus(), node, ActivityPlanValidationMDT_Names::CompletionStatus_Name);
  }
  {
    const uci::type::ActivityPlanValidationMDT::IncompleteItem& boundedList = accessor.getIncompleteItem();
    for (uci::type::ActivityPlanValidationMDT::IncompleteItem::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::IncompleteProcessingType::serialize(boundedList.at(i), node, ActivityPlanValidationMDT_Names::IncompleteItem_Name);
    }
  }
  {
    const uci::type::ActivityPlanValidationMDT::InvalidActivity& boundedList = accessor.getInvalidActivity();
    for (uci::type::ActivityPlanValidationMDT::InvalidActivity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::InvalidActivityType::serialize(boundedList.at(i), node, ActivityPlanValidationMDT_Names::InvalidActivity_Name);
    }
  }
  {
    const uci::type::ActivityPlanValidationMDT::ActivityPlanningResult& boundedList = accessor.getActivityPlanningResult();
    for (uci::type::ActivityPlanValidationMDT::ActivityPlanningResult::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementPlanningResultType::serialize(boundedList.at(i), node, ActivityPlanValidationMDT_Names::ActivityPlanningResult_Name);
    }
  }
  if (accessor.hasModifiedPlanID()) {
    ActivityPlanID_Type::serialize(accessor.getModifiedPlanID(), node, ActivityPlanValidationMDT_Names::ModifiedPlanID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ActivityPlanValidationMDT>().release());
}

uci::type::ActivityPlanValidationMDT& ActivityPlanValidationMDT::create(const uci::type::ActivityPlanValidationMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ActivityPlanValidationMDT> newAccessor{boost::make_unique<asb_uci::type::ActivityPlanValidationMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ActivityPlanValidationMDT::destroy(uci::type::ActivityPlanValidationMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ActivityPlanValidationMDT*>(&accessor);
}

} // namespace type

} // namespace uci

