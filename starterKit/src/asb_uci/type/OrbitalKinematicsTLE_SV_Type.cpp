/** @file OrbitalKinematicsTLE_SV_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalKinematicsTLE_SV_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/J2K_KinematicsType.h"
#include "asb_uci/type/TLE_BaseType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/J2K_KinematicsType.h"
#include "uci/type/OrbitalKinematicsTLE_SV_Type.h"
#include "uci/type/TLE_BaseType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalKinematicsTLE_SV_Type::OrbitalKinematicsTLE_SV_Type() = default;

OrbitalKinematicsTLE_SV_Type::~OrbitalKinematicsTLE_SV_Type() = default;

void OrbitalKinematicsTLE_SV_Type::copy(const uci::type::OrbitalKinematicsTLE_SV_Type& accessor) {
  copyImpl(accessor, false);
}

void OrbitalKinematicsTLE_SV_Type::copyImpl(const uci::type::OrbitalKinematicsTLE_SV_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalKinematicsTLE_SV_Type&>(accessor);
    if (accessorImpl.stateVector_Accessor) {
      setStateVector(*(accessorImpl.stateVector_Accessor));
    } else {
      stateVector_Accessor.reset();
    }
    if (accessorImpl.tLE_Accessor) {
      setTLE(*(accessorImpl.tLE_Accessor));
    } else {
      tLE_Accessor.reset();
    }
  }
}

void OrbitalKinematicsTLE_SV_Type::reset() noexcept {
  stateVector_Accessor.reset();
  tLE_Accessor.reset();
}

uci::type::OrbitalKinematicsTLE_SV_Type::OrbitalKinematicsTLE_SV_TypeChoice OrbitalKinematicsTLE_SV_Type::getOrbitalKinematicsTLE_SV_TypeChoiceOrdinal() const noexcept {
  if (stateVector_Accessor) {
    return ORBITALKINEMATICSTLE_SV_TYPE_CHOICE_STATEVECTOR;
  }
  if (tLE_Accessor) {
    return ORBITALKINEMATICSTLE_SV_TYPE_CHOICE_TLE;
  }
  return ORBITALKINEMATICSTLE_SV_TYPE_CHOICE_NONE;
}

uci::type::OrbitalKinematicsTLE_SV_Type& OrbitalKinematicsTLE_SV_Type::setOrbitalKinematicsTLE_SV_TypeChoiceOrdinal(uci::type::OrbitalKinematicsTLE_SV_Type::OrbitalKinematicsTLE_SV_TypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITALKINEMATICSTLE_SV_TYPE_CHOICE_STATEVECTOR:
      chooseStateVector("setOrbitalKinematicsTLE_SV_TypeChoiceOrdinal", type);
      break;
    case ORBITALKINEMATICSTLE_SV_TYPE_CHOICE_TLE:
      chooseTLE("setOrbitalKinematicsTLE_SV_TypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitalKinematicsTLE_SV_TypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::J2K_KinematicsType& OrbitalKinematicsTLE_SV_Type::getStateVector_() const {
  if (stateVector_Accessor) {
    return *stateVector_Accessor;
  }
  throw uci::base::UCIException("Error in getStateVector(): Unable to get StateVector, field not selected");
}

const uci::type::J2K_KinematicsType& OrbitalKinematicsTLE_SV_Type::getStateVector() const {
  return getStateVector_();
}

uci::type::J2K_KinematicsType& OrbitalKinematicsTLE_SV_Type::getStateVector() {
  return getStateVector_();
}

uci::type::OrbitalKinematicsTLE_SV_Type& OrbitalKinematicsTLE_SV_Type::setStateVector(const uci::type::J2K_KinematicsType& accessor) {
  chooseStateVector();
  if (&accessor != stateVector_Accessor.get()) {
    stateVector_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalKinematicsTLE_SV_Type::isStateVector() const noexcept {
  return static_cast<bool>(stateVector_Accessor);
}

uci::type::J2K_KinematicsType& OrbitalKinematicsTLE_SV_Type::chooseStateVector(const std::string& method, uci::base::accessorType::AccessorType type) {
  tLE_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::j2K_KinematicsType : type};
  if ((!stateVector_Accessor) || (stateVector_Accessor->getAccessorType() != requestedType)) {
    stateVector_Accessor = J2K_KinematicsType::create(type);
    if (!stateVector_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *stateVector_Accessor;
}

uci::type::J2K_KinematicsType& OrbitalKinematicsTLE_SV_Type::chooseStateVector(uci::base::accessorType::AccessorType type) {
  return chooseStateVector("chooseStateVector", type);
}

uci::type::TLE_BaseType& OrbitalKinematicsTLE_SV_Type::getTLE_() const {
  if (tLE_Accessor) {
    return *tLE_Accessor;
  }
  throw uci::base::UCIException("Error in getTLE(): Unable to get TLE, field not selected");
}

const uci::type::TLE_BaseType& OrbitalKinematicsTLE_SV_Type::getTLE() const {
  return getTLE_();
}

uci::type::TLE_BaseType& OrbitalKinematicsTLE_SV_Type::getTLE() {
  return getTLE_();
}

uci::type::OrbitalKinematicsTLE_SV_Type& OrbitalKinematicsTLE_SV_Type::setTLE(const uci::type::TLE_BaseType& accessor) {
  chooseTLE("setTLE", accessor.getAccessorType());
  if (&accessor != tLE_Accessor.get()) {
    tLE_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OrbitalKinematicsTLE_SV_Type::isTLE() const noexcept {
  return static_cast<bool>(tLE_Accessor);
}

uci::type::TLE_BaseType& OrbitalKinematicsTLE_SV_Type::chooseTLE(const std::string& method, uci::base::accessorType::AccessorType type) {
  stateVector_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::tLE_BaseType : type};
  if ((!tLE_Accessor) || (tLE_Accessor->getAccessorType() != requestedType)) {
    tLE_Accessor = TLE_BaseType::create(type);
    if (!tLE_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *tLE_Accessor;
}

uci::type::TLE_BaseType& OrbitalKinematicsTLE_SV_Type::chooseTLE(uci::base::accessorType::AccessorType type) {
  return chooseTLE("chooseTLE", type);
}

std::unique_ptr<OrbitalKinematicsTLE_SV_Type> OrbitalKinematicsTLE_SV_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsTLE_SV_Type : type};
  return (requestedType == uci::type::accessorType::orbitalKinematicsTLE_SV_Type) ? boost::make_unique<OrbitalKinematicsTLE_SV_Type>() : nullptr;
}

/**  */
namespace OrbitalKinematicsTLE_SV_Type_Names {

constexpr const char* Extern_Type_Name{"OrbitalKinematicsTLE_SV_Type"};
constexpr const char* StateVector_Name{"StateVector"};
constexpr const char* TLE_Name{"TLE"};

} // namespace OrbitalKinematicsTLE_SV_Type_Names

void OrbitalKinematicsTLE_SV_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalKinematicsTLE_SV_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalKinematicsTLE_SV_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalKinematicsTLE_SV_Type_Names::StateVector_Name) {
      J2K_KinematicsType::deserialize(valueType.second, accessor.chooseStateVector(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalKinematicsTLE_SV_Type_Names::TLE_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseTLE(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalKinematicsTLE_SV_Type::serialize(const uci::type::OrbitalKinematicsTLE_SV_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalKinematicsTLE_SV_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalKinematicsTLE_SV_Type_Names::Extern_Type_Name);
  }
  if (accessor.isStateVector()) {
    J2K_KinematicsType::serialize(accessor.getStateVector(), node, OrbitalKinematicsTLE_SV_Type_Names::StateVector_Name);
  } else if (accessor.isTLE()) {
    TLE_BaseType::serialize(accessor.getTLE(), node, OrbitalKinematicsTLE_SV_Type_Names::TLE_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalKinematicsTLE_SV_Type& OrbitalKinematicsTLE_SV_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalKinematicsTLE_SV_Type>().release());
}

uci::type::OrbitalKinematicsTLE_SV_Type& OrbitalKinematicsTLE_SV_Type::create(const uci::type::OrbitalKinematicsTLE_SV_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalKinematicsTLE_SV_Type> newAccessor{boost::make_unique<asb_uci::type::OrbitalKinematicsTLE_SV_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalKinematicsTLE_SV_Type::destroy(uci::type::OrbitalKinematicsTLE_SV_Type& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalKinematicsTLE_SV_Type*>(&accessor);
}

} // namespace type

} // namespace uci

