/** @file VCM_PropagatorType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/VCM_PropagatorType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ForceModelType.h"
#include "../../../include/asb_uci/type/VCM_IntegratorSettingsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForceModelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VCM_IntegratorSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VCM_PropagatorType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VCM_PropagatorType::VCM_PropagatorType()
  : forceModel_Accessor{boost::make_unique<ForceModelType>()},
    vCM_IntegratorSettings_Accessor{boost::make_unique<VCM_IntegratorSettingsType>()} {
}

VCM_PropagatorType::~VCM_PropagatorType() = default;

void VCM_PropagatorType::copy(const uci::type::VCM_PropagatorType& accessor) {
  copyImpl(accessor, false);
}

void VCM_PropagatorType::copyImpl(const uci::type::VCM_PropagatorType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VCM_PropagatorType&>(accessor);
    setForceModel(*(accessorImpl.forceModel_Accessor));
    setVCM_IntegratorSettings(*(accessorImpl.vCM_IntegratorSettings_Accessor));
  }
}

void VCM_PropagatorType::reset() noexcept {
  forceModel_Accessor->reset();
  vCM_IntegratorSettings_Accessor->reset();
}

const uci::type::ForceModelType& VCM_PropagatorType::getForceModel() const {
  return *forceModel_Accessor;
}

uci::type::ForceModelType& VCM_PropagatorType::getForceModel() {
  return *forceModel_Accessor;
}

uci::type::VCM_PropagatorType& VCM_PropagatorType::setForceModel(const uci::type::ForceModelType& accessor) {
  if (&accessor != forceModel_Accessor.get()) {
    forceModel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::VCM_IntegratorSettingsType& VCM_PropagatorType::getVCM_IntegratorSettings() const {
  return *vCM_IntegratorSettings_Accessor;
}

uci::type::VCM_IntegratorSettingsType& VCM_PropagatorType::getVCM_IntegratorSettings() {
  return *vCM_IntegratorSettings_Accessor;
}

uci::type::VCM_PropagatorType& VCM_PropagatorType::setVCM_IntegratorSettings(const uci::type::VCM_IntegratorSettingsType& accessor) {
  if (&accessor != vCM_IntegratorSettings_Accessor.get()) {
    vCM_IntegratorSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<VCM_PropagatorType> VCM_PropagatorType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vCM_PropagatorType : type};
  return (requestedType == uci::type::accessorType::vCM_PropagatorType) ? boost::make_unique<VCM_PropagatorType>() : nullptr;
}

/**  */
namespace VCM_PropagatorType_Names {

constexpr const char* Extern_Type_Name{"VCM_PropagatorType"};
constexpr const char* ForceModel_Name{"ForceModel"};
constexpr const char* VCM_IntegratorSettings_Name{"VCM_IntegratorSettings"};

} // namespace VCM_PropagatorType_Names

void VCM_PropagatorType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VCM_PropagatorType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VCM_PropagatorType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VCM_PropagatorType_Names::ForceModel_Name) {
      ForceModelType::deserialize(valueType.second, accessor.getForceModel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VCM_PropagatorType_Names::VCM_IntegratorSettings_Name) {
      VCM_IntegratorSettingsType::deserialize(valueType.second, accessor.getVCM_IntegratorSettings(), nodeName, nsPrefix);
    }
  }
}

std::string VCM_PropagatorType::serialize(const uci::type::VCM_PropagatorType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VCM_PropagatorType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VCM_PropagatorType_Names::Extern_Type_Name);
  }
  ForceModelType::serialize(accessor.getForceModel(), node, VCM_PropagatorType_Names::ForceModel_Name);
  VCM_IntegratorSettingsType::serialize(accessor.getVCM_IntegratorSettings(), node, VCM_PropagatorType_Names::VCM_IntegratorSettings_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VCM_PropagatorType& VCM_PropagatorType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VCM_PropagatorType>().release());
}

uci::type::VCM_PropagatorType& VCM_PropagatorType::create(const uci::type::VCM_PropagatorType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VCM_PropagatorType> newAccessor{boost::make_unique<asb_uci::type::VCM_PropagatorType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VCM_PropagatorType::destroy(uci::type::VCM_PropagatorType& accessor) {
  delete dynamic_cast<asb_uci::type::VCM_PropagatorType*>(&accessor);
}

} // namespace type

} // namespace uci

