/** @file OrbitalObjectMetricsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalObjectMetricsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AngleHalfPositiveType.h"
#include "uci/type/AngleType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/OrbitalObjectMetricsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalObjectMetricsType::OrbitalObjectMetricsType() = default;

OrbitalObjectMetricsType::~OrbitalObjectMetricsType() = default;

void OrbitalObjectMetricsType::copy(const uci::type::OrbitalObjectMetricsType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalObjectMetricsType::copyImpl(const uci::type::OrbitalObjectMetricsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalObjectMetricsType&>(accessor);
    if (accessorImpl.hasApogee()) {
      setApogee(accessorImpl.getApogee());
    } else {
      clearApogee();
    }
    if (accessorImpl.hasPerigee()) {
      setPerigee(accessorImpl.getPerigee());
    } else {
      clearPerigee();
    }
    if (accessorImpl.hasInclination()) {
      setInclination(accessorImpl.getInclination());
    } else {
      clearInclination();
    }
    if (accessorImpl.hasLongitude()) {
      setLongitude(accessorImpl.getLongitude());
    } else {
      clearLongitude();
    }
  }
}

void OrbitalObjectMetricsType::reset() noexcept {
  clearApogee();
  clearPerigee();
  clearInclination();
  clearLongitude();
}

uci::type::DistanceTypeValue OrbitalObjectMetricsType::getApogee() const {
  if (apogee_Accessor) {
    return *apogee_Accessor;
  }
  throw uci::base::UCIException("Error in getApogee(): An attempt was made to get an optional field that was not enabled, call hasApogee() to determine if it is safe to call getApogee()");
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectMetricsType::setApogee(uci::type::DistanceTypeValue value) {
  apogee_Accessor = value;
  return *this;
}

bool OrbitalObjectMetricsType::hasApogee() const noexcept {
  return apogee_Accessor.has_value();
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectMetricsType::clearApogee() noexcept {
  apogee_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue OrbitalObjectMetricsType::getPerigee() const {
  if (perigee_Accessor) {
    return *perigee_Accessor;
  }
  throw uci::base::UCIException("Error in getPerigee(): An attempt was made to get an optional field that was not enabled, call hasPerigee() to determine if it is safe to call getPerigee()");
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectMetricsType::setPerigee(uci::type::DistanceTypeValue value) {
  perigee_Accessor = value;
  return *this;
}

bool OrbitalObjectMetricsType::hasPerigee() const noexcept {
  return perigee_Accessor.has_value();
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectMetricsType::clearPerigee() noexcept {
  perigee_Accessor.reset();
  return *this;
}

uci::type::AngleHalfPositiveTypeValue OrbitalObjectMetricsType::getInclination() const {
  if (inclination_Accessor) {
    return *inclination_Accessor;
  }
  throw uci::base::UCIException("Error in getInclination(): An attempt was made to get an optional field that was not enabled, call hasInclination() to determine if it is safe to call getInclination()");
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectMetricsType::setInclination(uci::type::AngleHalfPositiveTypeValue value) {
  inclination_Accessor = value;
  return *this;
}

bool OrbitalObjectMetricsType::hasInclination() const noexcept {
  return inclination_Accessor.has_value();
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectMetricsType::clearInclination() noexcept {
  inclination_Accessor.reset();
  return *this;
}

uci::type::AngleTypeValue OrbitalObjectMetricsType::getLongitude() const {
  if (longitude_Accessor) {
    return *longitude_Accessor;
  }
  throw uci::base::UCIException("Error in getLongitude(): An attempt was made to get an optional field that was not enabled, call hasLongitude() to determine if it is safe to call getLongitude()");
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectMetricsType::setLongitude(uci::type::AngleTypeValue value) {
  longitude_Accessor = value;
  return *this;
}

bool OrbitalObjectMetricsType::hasLongitude() const noexcept {
  return longitude_Accessor.has_value();
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectMetricsType::clearLongitude() noexcept {
  longitude_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalObjectMetricsType> OrbitalObjectMetricsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalObjectMetricsType : type};
  return (requestedType == uci::type::accessorType::orbitalObjectMetricsType) ? boost::make_unique<OrbitalObjectMetricsType>() : nullptr;
}

/**  */
namespace OrbitalObjectMetricsType_Names {

constexpr const char* Extern_Type_Name{"OrbitalObjectMetricsType"};
constexpr const char* Apogee_Name{"Apogee"};
constexpr const char* Perigee_Name{"Perigee"};
constexpr const char* Inclination_Name{"Inclination"};
constexpr const char* Longitude_Name{"Longitude"};

} // namespace OrbitalObjectMetricsType_Names

void OrbitalObjectMetricsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalObjectMetricsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalObjectMetricsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalObjectMetricsType_Names::Apogee_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setApogee(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalObjectMetricsType_Names::Perigee_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPerigee(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalObjectMetricsType_Names::Inclination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInclination(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalObjectMetricsType_Names::Longitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLongitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string OrbitalObjectMetricsType::serialize(const uci::type::OrbitalObjectMetricsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalObjectMetricsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalObjectMetricsType_Names::Extern_Type_Name);
  }
  if (accessor.hasApogee()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getApogee(), node, OrbitalObjectMetricsType_Names::Apogee_Name);
  }
  if (accessor.hasPerigee()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPerigee(), node, OrbitalObjectMetricsType_Names::Perigee_Name);
  }
  if (accessor.hasInclination()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getInclination(), node, OrbitalObjectMetricsType_Names::Inclination_Name);
  }
  if (accessor.hasLongitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLongitude(), node, OrbitalObjectMetricsType_Names::Longitude_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalObjectMetricsType& OrbitalObjectMetricsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalObjectMetricsType>().release());
}

uci::type::OrbitalObjectMetricsType& OrbitalObjectMetricsType::create(const uci::type::OrbitalObjectMetricsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalObjectMetricsType> newAccessor{boost::make_unique<asb_uci::type::OrbitalObjectMetricsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalObjectMetricsType::destroy(uci::type::OrbitalObjectMetricsType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalObjectMetricsType*>(&accessor);
}

} // namespace type

} // namespace uci

