/** @file PlanningFunctionMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PlanningFunctionMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PlanScoringProcessType.h"
#include "../../../include/asb_uci/type/PlanningFunctionID_Type.h"
#include "../../../include/asb_uci/type/PlanningInterfaceDetailsType.h"
#include "../../../include/asb_uci/type/PlanningInterfacesType.h"
#include "../../../include/asb_uci/type/SupportedPlanActivationAutonomyType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanScoringProcessType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanningFunctionID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanningFunctionMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanningInterfaceDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanningInterfacesType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SupportedPlanActivationAutonomyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanningFunctionMDT::PlanningFunctionMDT()
  : planningFunctionID_Accessor{boost::make_unique<PlanningFunctionID_Type>()},
    systemID_Accessor{boost::make_unique<SystemID_Type>()},
    planningInterfaces_Accessor{boost::make_unique<PlanningInterfaces>(0, 10)} {
}

PlanningFunctionMDT::~PlanningFunctionMDT() = default;

void PlanningFunctionMDT::copy(const uci::type::PlanningFunctionMDT& accessor) {
  copyImpl(accessor, false);
}

void PlanningFunctionMDT::copyImpl(const uci::type::PlanningFunctionMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlanningFunctionMDT&>(accessor);
    setPlanningFunctionID(*(accessorImpl.planningFunctionID_Accessor));
    setSystemID(*(accessorImpl.systemID_Accessor));
    setPlanningInterfaces(*(accessorImpl.planningInterfaces_Accessor));
    if (accessorImpl.planningInterfaceDetails_Accessor) {
      setPlanningInterfaceDetails(*(accessorImpl.planningInterfaceDetails_Accessor));
    } else {
      planningInterfaceDetails_Accessor.reset();
    }
    if (accessorImpl.planActivationAutonomyDetails_Accessor) {
      setPlanActivationAutonomyDetails(*(accessorImpl.planActivationAutonomyDetails_Accessor));
    } else {
      planActivationAutonomyDetails_Accessor.reset();
    }
    if (accessorImpl.scoringInterfaceDetails_Accessor) {
      setScoringInterfaceDetails(*(accessorImpl.scoringInterfaceDetails_Accessor));
    } else {
      scoringInterfaceDetails_Accessor.reset();
    }
  }
}

void PlanningFunctionMDT::reset() noexcept {
  planningFunctionID_Accessor->reset();
  systemID_Accessor->reset();
  planningInterfaces_Accessor->reset();
  planningInterfaceDetails_Accessor.reset();
  planActivationAutonomyDetails_Accessor.reset();
  scoringInterfaceDetails_Accessor.reset();
}

const uci::type::PlanningFunctionID_Type& PlanningFunctionMDT::getPlanningFunctionID() const {
  return *planningFunctionID_Accessor;
}

uci::type::PlanningFunctionID_Type& PlanningFunctionMDT::getPlanningFunctionID() {
  return *planningFunctionID_Accessor;
}

uci::type::PlanningFunctionMDT& PlanningFunctionMDT::setPlanningFunctionID(const uci::type::PlanningFunctionID_Type& accessor) {
  if (&accessor != planningFunctionID_Accessor.get()) {
    planningFunctionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SystemID_Type& PlanningFunctionMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& PlanningFunctionMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::PlanningFunctionMDT& PlanningFunctionMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlanningFunctionMDT::PlanningInterfaces& PlanningFunctionMDT::getPlanningInterfaces() const {
  return *planningInterfaces_Accessor;
}

uci::type::PlanningFunctionMDT::PlanningInterfaces& PlanningFunctionMDT::getPlanningInterfaces() {
  return *planningInterfaces_Accessor;
}

uci::type::PlanningFunctionMDT& PlanningFunctionMDT::setPlanningInterfaces(const uci::type::PlanningFunctionMDT::PlanningInterfaces& accessor) {
  if (&accessor != planningInterfaces_Accessor.get()) {
    planningInterfaces_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanningInterfaceDetailsType& PlanningFunctionMDT::getPlanningInterfaceDetails_() const {
  if (planningInterfaceDetails_Accessor) {
    return *planningInterfaceDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getPlanningInterfaceDetails(): An attempt was made to get an optional field that was not enabled, call hasPlanningInterfaceDetails() to determine if it is safe to call getPlanningInterfaceDetails()");
}

const uci::type::PlanningInterfaceDetailsType& PlanningFunctionMDT::getPlanningInterfaceDetails() const {
  return getPlanningInterfaceDetails_();
}

uci::type::PlanningInterfaceDetailsType& PlanningFunctionMDT::getPlanningInterfaceDetails() {
  return getPlanningInterfaceDetails_();
}

uci::type::PlanningFunctionMDT& PlanningFunctionMDT::setPlanningInterfaceDetails(const uci::type::PlanningInterfaceDetailsType& accessor) {
  enablePlanningInterfaceDetails();
  if (&accessor != planningInterfaceDetails_Accessor.get()) {
    planningInterfaceDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningFunctionMDT::hasPlanningInterfaceDetails() const noexcept {
  return static_cast<bool>(planningInterfaceDetails_Accessor);
}

uci::type::PlanningInterfaceDetailsType& PlanningFunctionMDT::enablePlanningInterfaceDetails(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planningInterfaceDetailsType : type};
  if ((!planningInterfaceDetails_Accessor) || (planningInterfaceDetails_Accessor->getAccessorType() != requestedType)) {
    planningInterfaceDetails_Accessor = PlanningInterfaceDetailsType::create(requestedType);
    if (!planningInterfaceDetails_Accessor) {
      throw uci::base::UCIException("Error in enablePlanningInterfaceDetails(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *planningInterfaceDetails_Accessor;
}

uci::type::PlanningFunctionMDT& PlanningFunctionMDT::clearPlanningInterfaceDetails() noexcept {
  planningInterfaceDetails_Accessor.reset();
  return *this;
}

uci::type::SupportedPlanActivationAutonomyType& PlanningFunctionMDT::getPlanActivationAutonomyDetails_() const {
  if (planActivationAutonomyDetails_Accessor) {
    return *planActivationAutonomyDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getPlanActivationAutonomyDetails(): An attempt was made to get an optional field that was not enabled, call hasPlanActivationAutonomyDetails() to determine if it is safe to call getPlanActivationAutonomyDetails()");
}

const uci::type::SupportedPlanActivationAutonomyType& PlanningFunctionMDT::getPlanActivationAutonomyDetails() const {
  return getPlanActivationAutonomyDetails_();
}

uci::type::SupportedPlanActivationAutonomyType& PlanningFunctionMDT::getPlanActivationAutonomyDetails() {
  return getPlanActivationAutonomyDetails_();
}

uci::type::PlanningFunctionMDT& PlanningFunctionMDT::setPlanActivationAutonomyDetails(const uci::type::SupportedPlanActivationAutonomyType& accessor) {
  enablePlanActivationAutonomyDetails();
  if (&accessor != planActivationAutonomyDetails_Accessor.get()) {
    planActivationAutonomyDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningFunctionMDT::hasPlanActivationAutonomyDetails() const noexcept {
  return static_cast<bool>(planActivationAutonomyDetails_Accessor);
}

uci::type::SupportedPlanActivationAutonomyType& PlanningFunctionMDT::enablePlanActivationAutonomyDetails(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::supportedPlanActivationAutonomyType : type};
  if ((!planActivationAutonomyDetails_Accessor) || (planActivationAutonomyDetails_Accessor->getAccessorType() != requestedType)) {
    planActivationAutonomyDetails_Accessor = SupportedPlanActivationAutonomyType::create(requestedType);
    if (!planActivationAutonomyDetails_Accessor) {
      throw uci::base::UCIException("Error in enablePlanActivationAutonomyDetails(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *planActivationAutonomyDetails_Accessor;
}

uci::type::PlanningFunctionMDT& PlanningFunctionMDT::clearPlanActivationAutonomyDetails() noexcept {
  planActivationAutonomyDetails_Accessor.reset();
  return *this;
}

uci::type::PlanScoringProcessType& PlanningFunctionMDT::getScoringInterfaceDetails_() const {
  if (scoringInterfaceDetails_Accessor) {
    return *scoringInterfaceDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getScoringInterfaceDetails(): An attempt was made to get an optional field that was not enabled, call hasScoringInterfaceDetails() to determine if it is safe to call getScoringInterfaceDetails()");
}

const uci::type::PlanScoringProcessType& PlanningFunctionMDT::getScoringInterfaceDetails() const {
  return getScoringInterfaceDetails_();
}

uci::type::PlanScoringProcessType& PlanningFunctionMDT::getScoringInterfaceDetails() {
  return getScoringInterfaceDetails_();
}

uci::type::PlanningFunctionMDT& PlanningFunctionMDT::setScoringInterfaceDetails(const uci::type::PlanScoringProcessType& accessor) {
  enableScoringInterfaceDetails();
  if (&accessor != scoringInterfaceDetails_Accessor.get()) {
    scoringInterfaceDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningFunctionMDT::hasScoringInterfaceDetails() const noexcept {
  return static_cast<bool>(scoringInterfaceDetails_Accessor);
}

uci::type::PlanScoringProcessType& PlanningFunctionMDT::enableScoringInterfaceDetails(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planScoringProcessType : type};
  if ((!scoringInterfaceDetails_Accessor) || (scoringInterfaceDetails_Accessor->getAccessorType() != requestedType)) {
    scoringInterfaceDetails_Accessor = PlanScoringProcessType::create(requestedType);
    if (!scoringInterfaceDetails_Accessor) {
      throw uci::base::UCIException("Error in enableScoringInterfaceDetails(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *scoringInterfaceDetails_Accessor;
}

uci::type::PlanningFunctionMDT& PlanningFunctionMDT::clearScoringInterfaceDetails() noexcept {
  scoringInterfaceDetails_Accessor.reset();
  return *this;
}

std::unique_ptr<PlanningFunctionMDT> PlanningFunctionMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planningFunctionMDT : type};
  return (requestedType == uci::type::accessorType::planningFunctionMDT) ? boost::make_unique<PlanningFunctionMDT>() : nullptr;
}

/**  */
namespace PlanningFunctionMDT_Names {

constexpr const char* Extern_Type_Name{"PlanningFunctionMDT"};
constexpr const char* PlanningFunctionID_Name{"PlanningFunctionID"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* PlanningInterfaces_Name{"PlanningInterfaces"};
constexpr const char* PlanningInterfaceDetails_Name{"PlanningInterfaceDetails"};
constexpr const char* PlanActivationAutonomyDetails_Name{"PlanActivationAutonomyDetails"};
constexpr const char* ScoringInterfaceDetails_Name{"ScoringInterfaceDetails"};

} // namespace PlanningFunctionMDT_Names

void PlanningFunctionMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanningFunctionMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanningFunctionMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanningFunctionMDT_Names::PlanningFunctionID_Name) {
      PlanningFunctionID_Type::deserialize(valueType.second, accessor.getPlanningFunctionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningFunctionMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningFunctionMDT_Names::PlanningInterfaces_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanningFunctionMDT::PlanningInterfaces& boundedList = accessor.getPlanningInterfaces();
        const uci::type::PlanningFunctionMDT::PlanningInterfaces::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PlanningInterfacesType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanningFunctionMDT_Names::PlanningInterfaceDetails_Name) {
      PlanningInterfaceDetailsType::deserialize(valueType.second, accessor.enablePlanningInterfaceDetails(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningFunctionMDT_Names::PlanActivationAutonomyDetails_Name) {
      SupportedPlanActivationAutonomyType::deserialize(valueType.second, accessor.enablePlanActivationAutonomyDetails(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningFunctionMDT_Names::ScoringInterfaceDetails_Name) {
      PlanScoringProcessType::deserialize(valueType.second, accessor.enableScoringInterfaceDetails(), nodeName, nsPrefix);
    }
  }
}

std::string PlanningFunctionMDT::serialize(const uci::type::PlanningFunctionMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanningFunctionMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanningFunctionMDT_Names::Extern_Type_Name);
  }
  PlanningFunctionID_Type::serialize(accessor.getPlanningFunctionID(), node, PlanningFunctionMDT_Names::PlanningFunctionID_Name);
  SystemID_Type::serialize(accessor.getSystemID(), node, PlanningFunctionMDT_Names::SystemID_Name);
  {
    const uci::type::PlanningFunctionMDT::PlanningInterfaces& boundedList = accessor.getPlanningInterfaces();
    for (uci::type::PlanningFunctionMDT::PlanningInterfaces::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PlanningInterfacesType::serialize(boundedList.at(i), node, PlanningFunctionMDT_Names::PlanningInterfaces_Name);
    }
  }
  if (accessor.hasPlanningInterfaceDetails()) {
    PlanningInterfaceDetailsType::serialize(accessor.getPlanningInterfaceDetails(), node, PlanningFunctionMDT_Names::PlanningInterfaceDetails_Name);
  }
  if (accessor.hasPlanActivationAutonomyDetails()) {
    SupportedPlanActivationAutonomyType::serialize(accessor.getPlanActivationAutonomyDetails(), node, PlanningFunctionMDT_Names::PlanActivationAutonomyDetails_Name);
  }
  if (accessor.hasScoringInterfaceDetails()) {
    PlanScoringProcessType::serialize(accessor.getScoringInterfaceDetails(), node, PlanningFunctionMDT_Names::ScoringInterfaceDetails_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanningFunctionMDT& PlanningFunctionMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanningFunctionMDT>().release());
}

uci::type::PlanningFunctionMDT& PlanningFunctionMDT::create(const uci::type::PlanningFunctionMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanningFunctionMDT> newAccessor{boost::make_unique<asb_uci::type::PlanningFunctionMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanningFunctionMDT::destroy(uci::type::PlanningFunctionMDT& accessor) {
  delete dynamic_cast<asb_uci::type::PlanningFunctionMDT*>(&accessor);
}

} // namespace type

} // namespace uci

