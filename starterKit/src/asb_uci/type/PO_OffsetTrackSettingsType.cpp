/** @file PO_OffsetTrackSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_OffsetTrackSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DoubleMinMaxType.h"
#include "asb_uci/type/RatesSettingsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DoubleMinMaxType.h"
#include "uci/type/PO_OffsetTrackSettingsType.h"
#include "uci/type/RatesSettingsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_OffsetTrackSettingsType::PO_OffsetTrackSettingsType()
  : azimuthSettings_Accessor{boost::make_unique<DoubleMinMaxType>()},
    elevationSettings_Accessor{boost::make_unique<DoubleMinMaxType>()} {
}

PO_OffsetTrackSettingsType::~PO_OffsetTrackSettingsType() = default;

void PO_OffsetTrackSettingsType::copy(const uci::type::PO_OffsetTrackSettingsType& accessor) {
  copyImpl(accessor, false);
}

void PO_OffsetTrackSettingsType::copyImpl(const uci::type::PO_OffsetTrackSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_OffsetTrackSettingsType&>(accessor);
    setAzimuthSettings(*(accessorImpl.azimuthSettings_Accessor));
    setElevationSettings(*(accessorImpl.elevationSettings_Accessor));
    if (accessorImpl.rollSettings_Accessor) {
      setRollSettings(*(accessorImpl.rollSettings_Accessor));
    } else {
      rollSettings_Accessor.reset();
    }
    if (accessorImpl.ratesSettings_Accessor) {
      setRatesSettings(*(accessorImpl.ratesSettings_Accessor));
    } else {
      ratesSettings_Accessor.reset();
    }
  }
}

void PO_OffsetTrackSettingsType::reset() noexcept {
  azimuthSettings_Accessor->reset();
  elevationSettings_Accessor->reset();
  rollSettings_Accessor.reset();
  ratesSettings_Accessor.reset();
}

const uci::type::DoubleMinMaxType& PO_OffsetTrackSettingsType::getAzimuthSettings() const {
  return *azimuthSettings_Accessor;
}

uci::type::DoubleMinMaxType& PO_OffsetTrackSettingsType::getAzimuthSettings() {
  return *azimuthSettings_Accessor;
}

uci::type::PO_OffsetTrackSettingsType& PO_OffsetTrackSettingsType::setAzimuthSettings(const uci::type::DoubleMinMaxType& accessor) {
  if (&accessor != azimuthSettings_Accessor.get()) {
    azimuthSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DoubleMinMaxType& PO_OffsetTrackSettingsType::getElevationSettings() const {
  return *elevationSettings_Accessor;
}

uci::type::DoubleMinMaxType& PO_OffsetTrackSettingsType::getElevationSettings() {
  return *elevationSettings_Accessor;
}

uci::type::PO_OffsetTrackSettingsType& PO_OffsetTrackSettingsType::setElevationSettings(const uci::type::DoubleMinMaxType& accessor) {
  if (&accessor != elevationSettings_Accessor.get()) {
    elevationSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DoubleMinMaxType& PO_OffsetTrackSettingsType::getRollSettings_() const {
  if (rollSettings_Accessor) {
    return *rollSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getRollSettings(): An attempt was made to get an optional field that was not enabled, call hasRollSettings() to determine if it is safe to call getRollSettings()");
}

const uci::type::DoubleMinMaxType& PO_OffsetTrackSettingsType::getRollSettings() const {
  return getRollSettings_();
}

uci::type::DoubleMinMaxType& PO_OffsetTrackSettingsType::getRollSettings() {
  return getRollSettings_();
}

uci::type::PO_OffsetTrackSettingsType& PO_OffsetTrackSettingsType::setRollSettings(const uci::type::DoubleMinMaxType& accessor) {
  enableRollSettings();
  if (&accessor != rollSettings_Accessor.get()) {
    rollSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_OffsetTrackSettingsType::hasRollSettings() const noexcept {
  return static_cast<bool>(rollSettings_Accessor);
}

uci::type::DoubleMinMaxType& PO_OffsetTrackSettingsType::enableRollSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::doubleMinMaxType : type};
  if ((!rollSettings_Accessor) || (rollSettings_Accessor->getAccessorType() != requestedType)) {
    rollSettings_Accessor = DoubleMinMaxType::create(requestedType);
    if (!rollSettings_Accessor) {
      throw uci::base::UCIException("Error in enableRollSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rollSettings_Accessor;
}

uci::type::PO_OffsetTrackSettingsType& PO_OffsetTrackSettingsType::clearRollSettings() noexcept {
  rollSettings_Accessor.reset();
  return *this;
}

uci::type::RatesSettingsType& PO_OffsetTrackSettingsType::getRatesSettings_() const {
  if (ratesSettings_Accessor) {
    return *ratesSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getRatesSettings(): An attempt was made to get an optional field that was not enabled, call hasRatesSettings() to determine if it is safe to call getRatesSettings()");
}

const uci::type::RatesSettingsType& PO_OffsetTrackSettingsType::getRatesSettings() const {
  return getRatesSettings_();
}

uci::type::RatesSettingsType& PO_OffsetTrackSettingsType::getRatesSettings() {
  return getRatesSettings_();
}

uci::type::PO_OffsetTrackSettingsType& PO_OffsetTrackSettingsType::setRatesSettings(const uci::type::RatesSettingsType& accessor) {
  enableRatesSettings();
  if (&accessor != ratesSettings_Accessor.get()) {
    ratesSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_OffsetTrackSettingsType::hasRatesSettings() const noexcept {
  return static_cast<bool>(ratesSettings_Accessor);
}

uci::type::RatesSettingsType& PO_OffsetTrackSettingsType::enableRatesSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ratesSettingsType : type};
  if ((!ratesSettings_Accessor) || (ratesSettings_Accessor->getAccessorType() != requestedType)) {
    ratesSettings_Accessor = RatesSettingsType::create(requestedType);
    if (!ratesSettings_Accessor) {
      throw uci::base::UCIException("Error in enableRatesSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ratesSettings_Accessor;
}

uci::type::PO_OffsetTrackSettingsType& PO_OffsetTrackSettingsType::clearRatesSettings() noexcept {
  ratesSettings_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_OffsetTrackSettingsType> PO_OffsetTrackSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_OffsetTrackSettingsType : type};
  return (requestedType == uci::type::accessorType::pO_OffsetTrackSettingsType) ? boost::make_unique<PO_OffsetTrackSettingsType>() : nullptr;
}

/**  */
namespace PO_OffsetTrackSettingsType_Names {

constexpr const char* Extern_Type_Name{"PO_OffsetTrackSettingsType"};
constexpr const char* AzimuthSettings_Name{"AzimuthSettings"};
constexpr const char* ElevationSettings_Name{"ElevationSettings"};
constexpr const char* RollSettings_Name{"RollSettings"};
constexpr const char* RatesSettings_Name{"RatesSettings"};

} // namespace PO_OffsetTrackSettingsType_Names

void PO_OffsetTrackSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_OffsetTrackSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_OffsetTrackSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_OffsetTrackSettingsType_Names::AzimuthSettings_Name) {
      DoubleMinMaxType::deserialize(valueType.second, accessor.getAzimuthSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_OffsetTrackSettingsType_Names::ElevationSettings_Name) {
      DoubleMinMaxType::deserialize(valueType.second, accessor.getElevationSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_OffsetTrackSettingsType_Names::RollSettings_Name) {
      DoubleMinMaxType::deserialize(valueType.second, accessor.enableRollSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_OffsetTrackSettingsType_Names::RatesSettings_Name) {
      RatesSettingsType::deserialize(valueType.second, accessor.enableRatesSettings(), nodeName, nsPrefix);
    }
  }
}

std::string PO_OffsetTrackSettingsType::serialize(const uci::type::PO_OffsetTrackSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_OffsetTrackSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_OffsetTrackSettingsType_Names::Extern_Type_Name);
  }
  DoubleMinMaxType::serialize(accessor.getAzimuthSettings(), node, PO_OffsetTrackSettingsType_Names::AzimuthSettings_Name);
  DoubleMinMaxType::serialize(accessor.getElevationSettings(), node, PO_OffsetTrackSettingsType_Names::ElevationSettings_Name);
  if (accessor.hasRollSettings()) {
    DoubleMinMaxType::serialize(accessor.getRollSettings(), node, PO_OffsetTrackSettingsType_Names::RollSettings_Name);
  }
  if (accessor.hasRatesSettings()) {
    RatesSettingsType::serialize(accessor.getRatesSettings(), node, PO_OffsetTrackSettingsType_Names::RatesSettings_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_OffsetTrackSettingsType& PO_OffsetTrackSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_OffsetTrackSettingsType>().release());
}

uci::type::PO_OffsetTrackSettingsType& PO_OffsetTrackSettingsType::create(const uci::type::PO_OffsetTrackSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_OffsetTrackSettingsType> newAccessor{boost::make_unique<asb_uci::type::PO_OffsetTrackSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_OffsetTrackSettingsType::destroy(uci::type::PO_OffsetTrackSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_OffsetTrackSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

