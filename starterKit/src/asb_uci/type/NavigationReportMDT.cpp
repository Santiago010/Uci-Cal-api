/** @file NavigationReportMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/NavigationReportMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EnduranceType.h"
#include "../../../include/asb_uci/type/NavigationType.h"
#include "../../../include/asb_uci/type/SystemContingencyLevelEnum.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/SystemSourceEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EnduranceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NavigationReportMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NavigationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemContingencyLevelEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemSourceEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

NavigationReportMDT::NavigationReportMDT()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()},
    source_Accessor{boost::make_unique<SystemSourceEnum>()},
    contingencyLevel_Accessor{boost::make_unique<SystemContingencyLevelEnum>()},
    endurance_Accessor{boost::make_unique<EnduranceType>()} {
}

NavigationReportMDT::~NavigationReportMDT() = default;

void NavigationReportMDT::copy(const uci::type::NavigationReportMDT& accessor) {
  copyImpl(accessor, false);
}

void NavigationReportMDT::copyImpl(const uci::type::NavigationReportMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const NavigationReportMDT&>(accessor);
    setSystemID(*(accessorImpl.systemID_Accessor));
    setSource(*(accessorImpl.source_Accessor));
    setContingencyLevel(*(accessorImpl.contingencyLevel_Accessor));
    setEndurance(*(accessorImpl.endurance_Accessor));
    if (accessorImpl.navigation_Accessor) {
      setNavigation(*(accessorImpl.navigation_Accessor));
    } else {
      navigation_Accessor.reset();
    }
  }
}

void NavigationReportMDT::reset() noexcept {
  systemID_Accessor->reset();
  source_Accessor->reset();
  contingencyLevel_Accessor->reset();
  endurance_Accessor->reset();
  navigation_Accessor.reset();
}

const uci::type::SystemID_Type& NavigationReportMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& NavigationReportMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::NavigationReportMDT& NavigationReportMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SystemSourceEnum& NavigationReportMDT::getSource() const {
  return *source_Accessor;
}

uci::type::SystemSourceEnum& NavigationReportMDT::getSource() {
  return *source_Accessor;
}

uci::type::NavigationReportMDT& NavigationReportMDT::setSource(const uci::type::SystemSourceEnum& accessor) {
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::NavigationReportMDT& NavigationReportMDT::setSource(uci::type::SystemSourceEnum::EnumerationItem value) {
  source_Accessor->setValue(value);
  return *this;
}


const uci::type::SystemContingencyLevelEnum& NavigationReportMDT::getContingencyLevel() const {
  return *contingencyLevel_Accessor;
}

uci::type::SystemContingencyLevelEnum& NavigationReportMDT::getContingencyLevel() {
  return *contingencyLevel_Accessor;
}

uci::type::NavigationReportMDT& NavigationReportMDT::setContingencyLevel(const uci::type::SystemContingencyLevelEnum& accessor) {
  if (&accessor != contingencyLevel_Accessor.get()) {
    contingencyLevel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::NavigationReportMDT& NavigationReportMDT::setContingencyLevel(uci::type::SystemContingencyLevelEnum::EnumerationItem value) {
  contingencyLevel_Accessor->setValue(value);
  return *this;
}


const uci::type::EnduranceType& NavigationReportMDT::getEndurance() const {
  return *endurance_Accessor;
}

uci::type::EnduranceType& NavigationReportMDT::getEndurance() {
  return *endurance_Accessor;
}

uci::type::NavigationReportMDT& NavigationReportMDT::setEndurance(const uci::type::EnduranceType& accessor) {
  if (&accessor != endurance_Accessor.get()) {
    endurance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::NavigationType& NavigationReportMDT::getNavigation_() const {
  if (navigation_Accessor) {
    return *navigation_Accessor;
  }
  throw uci::base::UCIException("Error in getNavigation(): An attempt was made to get an optional field that was not enabled, call hasNavigation() to determine if it is safe to call getNavigation()");
}

const uci::type::NavigationType& NavigationReportMDT::getNavigation() const {
  return getNavigation_();
}

uci::type::NavigationType& NavigationReportMDT::getNavigation() {
  return getNavigation_();
}

uci::type::NavigationReportMDT& NavigationReportMDT::setNavigation(const uci::type::NavigationType& accessor) {
  enableNavigation();
  if (&accessor != navigation_Accessor.get()) {
    navigation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NavigationReportMDT::hasNavigation() const noexcept {
  return static_cast<bool>(navigation_Accessor);
}

uci::type::NavigationType& NavigationReportMDT::enableNavigation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::navigationType : type};
  if ((!navigation_Accessor) || (navigation_Accessor->getAccessorType() != requestedType)) {
    navigation_Accessor = NavigationType::create(requestedType);
    if (!navigation_Accessor) {
      throw uci::base::UCIException("Error in enableNavigation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *navigation_Accessor;
}

uci::type::NavigationReportMDT& NavigationReportMDT::clearNavigation() noexcept {
  navigation_Accessor.reset();
  return *this;
}

std::unique_ptr<NavigationReportMDT> NavigationReportMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::navigationReportMDT : type};
  return (requestedType == uci::type::accessorType::navigationReportMDT) ? boost::make_unique<NavigationReportMDT>() : nullptr;
}

/**  */
namespace NavigationReportMDT_Names {

constexpr const char* Extern_Type_Name{"NavigationReportMDT"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* Source_Name{"Source"};
constexpr const char* ContingencyLevel_Name{"ContingencyLevel"};
constexpr const char* Endurance_Name{"Endurance"};
constexpr const char* Navigation_Name{"Navigation"};

} // namespace NavigationReportMDT_Names

void NavigationReportMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::NavigationReportMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = NavigationReportMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + NavigationReportMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NavigationReportMDT_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + NavigationReportMDT_Names::ContingencyLevel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getContingencyLevel().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + NavigationReportMDT_Names::Endurance_Name) {
      EnduranceType::deserialize(valueType.second, accessor.getEndurance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NavigationReportMDT_Names::Navigation_Name) {
      NavigationType::deserialize(valueType.second, accessor.enableNavigation(), nodeName, nsPrefix);
    }
  }
}

std::string NavigationReportMDT::serialize(const uci::type::NavigationReportMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? NavigationReportMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, NavigationReportMDT_Names::Extern_Type_Name);
  }
  SystemID_Type::serialize(accessor.getSystemID(), node, NavigationReportMDT_Names::SystemID_Name);
  SystemSourceEnum::serialize(accessor.getSource(), node, NavigationReportMDT_Names::Source_Name, false);
  SystemContingencyLevelEnum::serialize(accessor.getContingencyLevel(), node, NavigationReportMDT_Names::ContingencyLevel_Name, false);
  EnduranceType::serialize(accessor.getEndurance(), node, NavigationReportMDT_Names::Endurance_Name);
  if (accessor.hasNavigation()) {
    NavigationType::serialize(accessor.getNavigation(), node, NavigationReportMDT_Names::Navigation_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::NavigationReportMDT& NavigationReportMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::NavigationReportMDT>().release());
}

uci::type::NavigationReportMDT& NavigationReportMDT::create(const uci::type::NavigationReportMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::NavigationReportMDT> newAccessor{boost::make_unique<asb_uci::type::NavigationReportMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void NavigationReportMDT::destroy(uci::type::NavigationReportMDT& accessor) {
  delete dynamic_cast<asb_uci::type::NavigationReportMDT*>(&accessor);
}

} // namespace type

} // namespace uci

