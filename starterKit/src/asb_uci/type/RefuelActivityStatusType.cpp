/** @file RefuelActivityStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RefuelActivityStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EmptyType.h"
#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/RefuelActivityDrogueStatusType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EmptyType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/RefuelActivityDrogueStatusType.h"
#include "uci/type/RefuelActivityStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RefuelActivityStatusType::RefuelActivityStatusType() = default;

RefuelActivityStatusType::~RefuelActivityStatusType() = default;

void RefuelActivityStatusType::copy(const uci::type::RefuelActivityStatusType& accessor) {
  copyImpl(accessor, false);
}

void RefuelActivityStatusType::copyImpl(const uci::type::RefuelActivityStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RefuelActivityStatusType&>(accessor);
    if (accessorImpl.receiverID_Accessor) {
      setReceiverID(*(accessorImpl.receiverID_Accessor));
    } else {
      receiverID_Accessor.reset();
    }
    if (accessorImpl.boom_Accessor) {
      setBoom(*(accessorImpl.boom_Accessor));
    } else {
      boom_Accessor.reset();
    }
    if (accessorImpl.drogue_Accessor) {
      setDrogue(*(accessorImpl.drogue_Accessor));
    } else {
      drogue_Accessor.reset();
    }
  }
}

void RefuelActivityStatusType::reset() noexcept {
  receiverID_Accessor.reset();
  boom_Accessor.reset();
  drogue_Accessor.reset();
}

uci::type::EntityID_Type& RefuelActivityStatusType::getReceiverID_() const {
  if (receiverID_Accessor) {
    return *receiverID_Accessor;
  }
  throw uci::base::UCIException("Error in getReceiverID(): An attempt was made to get an optional field that was not enabled, call hasReceiverID() to determine if it is safe to call getReceiverID()");
}

const uci::type::EntityID_Type& RefuelActivityStatusType::getReceiverID() const {
  return getReceiverID_();
}

uci::type::EntityID_Type& RefuelActivityStatusType::getReceiverID() {
  return getReceiverID_();
}

uci::type::RefuelActivityStatusType& RefuelActivityStatusType::setReceiverID(const uci::type::EntityID_Type& accessor) {
  enableReceiverID(accessor.getAccessorType());
  if (&accessor != receiverID_Accessor.get()) {
    receiverID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RefuelActivityStatusType::hasReceiverID() const noexcept {
  return static_cast<bool>(receiverID_Accessor);
}

uci::type::EntityID_Type& RefuelActivityStatusType::enableReceiverID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!receiverID_Accessor) || (receiverID_Accessor->getAccessorType() != requestedType)) {
    receiverID_Accessor = EntityID_Type::create(requestedType);
    if (!receiverID_Accessor) {
      throw uci::base::UCIException("Error in enableReceiverID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *receiverID_Accessor;
}

uci::type::RefuelActivityStatusType& RefuelActivityStatusType::clearReceiverID() noexcept {
  receiverID_Accessor.reset();
  return *this;
}

uci::type::EmptyType& RefuelActivityStatusType::getBoom_() const {
  if (boom_Accessor) {
    return *boom_Accessor;
  }
  throw uci::base::UCIException("Error in getBoom(): An attempt was made to get an optional field that was not enabled, call hasBoom() to determine if it is safe to call getBoom()");
}

const uci::type::EmptyType& RefuelActivityStatusType::getBoom() const {
  return getBoom_();
}

uci::type::EmptyType& RefuelActivityStatusType::getBoom() {
  return getBoom_();
}

uci::type::RefuelActivityStatusType& RefuelActivityStatusType::setBoom(const uci::type::EmptyType& value) {
  return setBoom(value.c_str());
}

uci::type::RefuelActivityStatusType& RefuelActivityStatusType::setBoom(const std::string& value) {
  return setBoom(value.c_str());
}

uci::type::RefuelActivityStatusType& RefuelActivityStatusType::setBoom(const char* value) {
  enableBoom().setStringValue(value);
  return *this;
}

bool RefuelActivityStatusType::hasBoom() const noexcept {
  return static_cast<bool>(boom_Accessor);
}

uci::type::EmptyType& RefuelActivityStatusType::enableBoom(uci::base::accessorType::AccessorType type) {
  if (!boom_Accessor) {
    boom_Accessor = EmptyType::create(type);
  }
  return *boom_Accessor;
}

uci::type::RefuelActivityStatusType& RefuelActivityStatusType::clearBoom() noexcept {
  boom_Accessor.reset();
  return *this;
}

uci::type::RefuelActivityDrogueStatusType& RefuelActivityStatusType::getDrogue_() const {
  if (drogue_Accessor) {
    return *drogue_Accessor;
  }
  throw uci::base::UCIException("Error in getDrogue(): An attempt was made to get an optional field that was not enabled, call hasDrogue() to determine if it is safe to call getDrogue()");
}

const uci::type::RefuelActivityDrogueStatusType& RefuelActivityStatusType::getDrogue() const {
  return getDrogue_();
}

uci::type::RefuelActivityDrogueStatusType& RefuelActivityStatusType::getDrogue() {
  return getDrogue_();
}

uci::type::RefuelActivityStatusType& RefuelActivityStatusType::setDrogue(const uci::type::RefuelActivityDrogueStatusType& accessor) {
  enableDrogue();
  if (&accessor != drogue_Accessor.get()) {
    drogue_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RefuelActivityStatusType::hasDrogue() const noexcept {
  return static_cast<bool>(drogue_Accessor);
}

uci::type::RefuelActivityDrogueStatusType& RefuelActivityStatusType::enableDrogue(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelActivityDrogueStatusType : type};
  if ((!drogue_Accessor) || (drogue_Accessor->getAccessorType() != requestedType)) {
    drogue_Accessor = RefuelActivityDrogueStatusType::create(requestedType);
    if (!drogue_Accessor) {
      throw uci::base::UCIException("Error in enableDrogue(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *drogue_Accessor;
}

uci::type::RefuelActivityStatusType& RefuelActivityStatusType::clearDrogue() noexcept {
  drogue_Accessor.reset();
  return *this;
}

std::unique_ptr<RefuelActivityStatusType> RefuelActivityStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelActivityStatusType : type};
  return (requestedType == uci::type::accessorType::refuelActivityStatusType) ? boost::make_unique<RefuelActivityStatusType>() : nullptr;
}

/**  */
namespace RefuelActivityStatusType_Names {

constexpr const char* Extern_Type_Name{"RefuelActivityStatusType"};
constexpr const char* ReceiverID_Name{"ReceiverID"};
constexpr const char* Boom_Name{"Boom"};
constexpr const char* Drogue_Name{"Drogue"};

} // namespace RefuelActivityStatusType_Names

void RefuelActivityStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RefuelActivityStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RefuelActivityStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RefuelActivityStatusType_Names::ReceiverID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableReceiverID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RefuelActivityStatusType_Names::Boom_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBoom(*value);
      }
    } else if (valueType.first == nsPrefix + RefuelActivityStatusType_Names::Drogue_Name) {
      RefuelActivityDrogueStatusType::deserialize(valueType.second, accessor.enableDrogue(), nodeName, nsPrefix);
    }
  }
}

std::string RefuelActivityStatusType::serialize(const uci::type::RefuelActivityStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RefuelActivityStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RefuelActivityStatusType_Names::Extern_Type_Name);
  }
  if (accessor.hasReceiverID()) {
    EntityID_Type::serialize(accessor.getReceiverID(), node, RefuelActivityStatusType_Names::ReceiverID_Name);
  }
  if (accessor.hasBoom()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getBoom(), node, RefuelActivityStatusType_Names::Boom_Name);
  }
  if (accessor.hasDrogue()) {
    RefuelActivityDrogueStatusType::serialize(accessor.getDrogue(), node, RefuelActivityStatusType_Names::Drogue_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RefuelActivityStatusType& RefuelActivityStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RefuelActivityStatusType>().release());
}

uci::type::RefuelActivityStatusType& RefuelActivityStatusType::create(const uci::type::RefuelActivityStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RefuelActivityStatusType> newAccessor{boost::make_unique<asb_uci::type::RefuelActivityStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RefuelActivityStatusType::destroy(uci::type::RefuelActivityStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::RefuelActivityStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

