/** @file RequirementMetricsCategoryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementMetricsCategoryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CollectionTaskMetricsType.h"
#include "asb_uci/type/CommRelayTaskMetricsType.h"
#include "asb_uci/type/StrikeTaskMetricsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CollectionTaskMetricsType.h"
#include "uci/type/CommRelayTaskMetricsType.h"
#include "uci/type/RequirementMetricsCategoryType.h"
#include "uci/type/StrikeTaskMetricsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementMetricsCategoryType::RequirementMetricsCategoryType() = default;

RequirementMetricsCategoryType::~RequirementMetricsCategoryType() = default;

void RequirementMetricsCategoryType::copy(const uci::type::RequirementMetricsCategoryType& accessor) {
  copyImpl(accessor, false);
}

void RequirementMetricsCategoryType::copyImpl(const uci::type::RequirementMetricsCategoryType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementMetricsCategoryType&>(accessor);
    if (accessorImpl.collectionMetrics_Accessor) {
      setCollectionMetrics(*(accessorImpl.collectionMetrics_Accessor));
    } else {
      collectionMetrics_Accessor.reset();
    }
    if (accessorImpl.strikeMetrics_Accessor) {
      setStrikeMetrics(*(accessorImpl.strikeMetrics_Accessor));
    } else {
      strikeMetrics_Accessor.reset();
    }
    if (accessorImpl.commRelayMetrics_Accessor) {
      setCommRelayMetrics(*(accessorImpl.commRelayMetrics_Accessor));
    } else {
      commRelayMetrics_Accessor.reset();
    }
  }
}

void RequirementMetricsCategoryType::reset() noexcept {
  collectionMetrics_Accessor.reset();
  strikeMetrics_Accessor.reset();
  commRelayMetrics_Accessor.reset();
}

uci::type::RequirementMetricsCategoryType::RequirementMetricsCategoryTypeChoice RequirementMetricsCategoryType::getRequirementMetricsCategoryTypeChoiceOrdinal() const noexcept {
  if (collectionMetrics_Accessor) {
    return REQUIREMENTMETRICSCATEGORYTYPE_CHOICE_COLLECTIONMETRICS;
  }
  if (strikeMetrics_Accessor) {
    return REQUIREMENTMETRICSCATEGORYTYPE_CHOICE_STRIKEMETRICS;
  }
  if (commRelayMetrics_Accessor) {
    return REQUIREMENTMETRICSCATEGORYTYPE_CHOICE_COMMRELAYMETRICS;
  }
  return REQUIREMENTMETRICSCATEGORYTYPE_CHOICE_NONE;
}

uci::type::RequirementMetricsCategoryType& RequirementMetricsCategoryType::setRequirementMetricsCategoryTypeChoiceOrdinal(uci::type::RequirementMetricsCategoryType::RequirementMetricsCategoryTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case REQUIREMENTMETRICSCATEGORYTYPE_CHOICE_COLLECTIONMETRICS:
      chooseCollectionMetrics("setRequirementMetricsCategoryTypeChoiceOrdinal", type);
      break;
    case REQUIREMENTMETRICSCATEGORYTYPE_CHOICE_STRIKEMETRICS:
      chooseStrikeMetrics("setRequirementMetricsCategoryTypeChoiceOrdinal", type);
      break;
    case REQUIREMENTMETRICSCATEGORYTYPE_CHOICE_COMMRELAYMETRICS:
      chooseCommRelayMetrics("setRequirementMetricsCategoryTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setRequirementMetricsCategoryTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::CollectionTaskMetricsType& RequirementMetricsCategoryType::getCollectionMetrics_() const {
  if (collectionMetrics_Accessor) {
    return *collectionMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionMetrics(): Unable to get CollectionMetrics, field not selected");
}

const uci::type::CollectionTaskMetricsType& RequirementMetricsCategoryType::getCollectionMetrics() const {
  return getCollectionMetrics_();
}

uci::type::CollectionTaskMetricsType& RequirementMetricsCategoryType::getCollectionMetrics() {
  return getCollectionMetrics_();
}

uci::type::RequirementMetricsCategoryType& RequirementMetricsCategoryType::setCollectionMetrics(const uci::type::CollectionTaskMetricsType& accessor) {
  chooseCollectionMetrics();
  if (&accessor != collectionMetrics_Accessor.get()) {
    collectionMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementMetricsCategoryType::isCollectionMetrics() const noexcept {
  return static_cast<bool>(collectionMetrics_Accessor);
}

uci::type::CollectionTaskMetricsType& RequirementMetricsCategoryType::chooseCollectionMetrics(const std::string& method, uci::base::accessorType::AccessorType type) {
  strikeMetrics_Accessor.reset();
  commRelayMetrics_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::collectionTaskMetricsType : type};
  if ((!collectionMetrics_Accessor) || (collectionMetrics_Accessor->getAccessorType() != requestedType)) {
    collectionMetrics_Accessor = CollectionTaskMetricsType::create(type);
    if (!collectionMetrics_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionMetrics_Accessor;
}

uci::type::CollectionTaskMetricsType& RequirementMetricsCategoryType::chooseCollectionMetrics(uci::base::accessorType::AccessorType type) {
  return chooseCollectionMetrics("chooseCollectionMetrics", type);
}

uci::type::StrikeTaskMetricsType& RequirementMetricsCategoryType::getStrikeMetrics_() const {
  if (strikeMetrics_Accessor) {
    return *strikeMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getStrikeMetrics(): Unable to get StrikeMetrics, field not selected");
}

const uci::type::StrikeTaskMetricsType& RequirementMetricsCategoryType::getStrikeMetrics() const {
  return getStrikeMetrics_();
}

uci::type::StrikeTaskMetricsType& RequirementMetricsCategoryType::getStrikeMetrics() {
  return getStrikeMetrics_();
}

uci::type::RequirementMetricsCategoryType& RequirementMetricsCategoryType::setStrikeMetrics(const uci::type::StrikeTaskMetricsType& accessor) {
  chooseStrikeMetrics();
  if (&accessor != strikeMetrics_Accessor.get()) {
    strikeMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementMetricsCategoryType::isStrikeMetrics() const noexcept {
  return static_cast<bool>(strikeMetrics_Accessor);
}

uci::type::StrikeTaskMetricsType& RequirementMetricsCategoryType::chooseStrikeMetrics(const std::string& method, uci::base::accessorType::AccessorType type) {
  collectionMetrics_Accessor.reset();
  commRelayMetrics_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::strikeTaskMetricsType : type};
  if ((!strikeMetrics_Accessor) || (strikeMetrics_Accessor->getAccessorType() != requestedType)) {
    strikeMetrics_Accessor = StrikeTaskMetricsType::create(type);
    if (!strikeMetrics_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *strikeMetrics_Accessor;
}

uci::type::StrikeTaskMetricsType& RequirementMetricsCategoryType::chooseStrikeMetrics(uci::base::accessorType::AccessorType type) {
  return chooseStrikeMetrics("chooseStrikeMetrics", type);
}

uci::type::CommRelayTaskMetricsType& RequirementMetricsCategoryType::getCommRelayMetrics_() const {
  if (commRelayMetrics_Accessor) {
    return *commRelayMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getCommRelayMetrics(): Unable to get CommRelayMetrics, field not selected");
}

const uci::type::CommRelayTaskMetricsType& RequirementMetricsCategoryType::getCommRelayMetrics() const {
  return getCommRelayMetrics_();
}

uci::type::CommRelayTaskMetricsType& RequirementMetricsCategoryType::getCommRelayMetrics() {
  return getCommRelayMetrics_();
}

uci::type::RequirementMetricsCategoryType& RequirementMetricsCategoryType::setCommRelayMetrics(const uci::type::CommRelayTaskMetricsType& accessor) {
  chooseCommRelayMetrics();
  if (&accessor != commRelayMetrics_Accessor.get()) {
    commRelayMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementMetricsCategoryType::isCommRelayMetrics() const noexcept {
  return static_cast<bool>(commRelayMetrics_Accessor);
}

uci::type::CommRelayTaskMetricsType& RequirementMetricsCategoryType::chooseCommRelayMetrics(const std::string& method, uci::base::accessorType::AccessorType type) {
  collectionMetrics_Accessor.reset();
  strikeMetrics_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commRelayTaskMetricsType : type};
  if ((!commRelayMetrics_Accessor) || (commRelayMetrics_Accessor->getAccessorType() != requestedType)) {
    commRelayMetrics_Accessor = CommRelayTaskMetricsType::create(type);
    if (!commRelayMetrics_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commRelayMetrics_Accessor;
}

uci::type::CommRelayTaskMetricsType& RequirementMetricsCategoryType::chooseCommRelayMetrics(uci::base::accessorType::AccessorType type) {
  return chooseCommRelayMetrics("chooseCommRelayMetrics", type);
}

std::unique_ptr<RequirementMetricsCategoryType> RequirementMetricsCategoryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementMetricsCategoryType : type};
  return (requestedType == uci::type::accessorType::requirementMetricsCategoryType) ? boost::make_unique<RequirementMetricsCategoryType>() : nullptr;
}

/**  */
namespace RequirementMetricsCategoryType_Names {

constexpr const char* Extern_Type_Name{"RequirementMetricsCategoryType"};
constexpr const char* CollectionMetrics_Name{"CollectionMetrics"};
constexpr const char* StrikeMetrics_Name{"StrikeMetrics"};
constexpr const char* CommRelayMetrics_Name{"CommRelayMetrics"};

} // namespace RequirementMetricsCategoryType_Names

void RequirementMetricsCategoryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementMetricsCategoryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementMetricsCategoryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementMetricsCategoryType_Names::CollectionMetrics_Name) {
      CollectionTaskMetricsType::deserialize(valueType.second, accessor.chooseCollectionMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementMetricsCategoryType_Names::StrikeMetrics_Name) {
      StrikeTaskMetricsType::deserialize(valueType.second, accessor.chooseStrikeMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementMetricsCategoryType_Names::CommRelayMetrics_Name) {
      CommRelayTaskMetricsType::deserialize(valueType.second, accessor.chooseCommRelayMetrics(), nodeName, nsPrefix);
    }
  }
}

std::string RequirementMetricsCategoryType::serialize(const uci::type::RequirementMetricsCategoryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementMetricsCategoryType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementMetricsCategoryType_Names::Extern_Type_Name);
  }
  if (accessor.isCollectionMetrics()) {
    CollectionTaskMetricsType::serialize(accessor.getCollectionMetrics(), node, RequirementMetricsCategoryType_Names::CollectionMetrics_Name);
  } else if (accessor.isStrikeMetrics()) {
    StrikeTaskMetricsType::serialize(accessor.getStrikeMetrics(), node, RequirementMetricsCategoryType_Names::StrikeMetrics_Name);
  } else if (accessor.isCommRelayMetrics()) {
    CommRelayTaskMetricsType::serialize(accessor.getCommRelayMetrics(), node, RequirementMetricsCategoryType_Names::CommRelayMetrics_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementMetricsCategoryType& RequirementMetricsCategoryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementMetricsCategoryType>().release());
}

uci::type::RequirementMetricsCategoryType& RequirementMetricsCategoryType::create(const uci::type::RequirementMetricsCategoryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementMetricsCategoryType> newAccessor{boost::make_unique<asb_uci::type::RequirementMetricsCategoryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementMetricsCategoryType::destroy(uci::type::RequirementMetricsCategoryType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementMetricsCategoryType*>(&accessor);
}

} // namespace type

} // namespace uci

