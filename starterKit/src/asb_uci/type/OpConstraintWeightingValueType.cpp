/** @file OpConstraintWeightingValueType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OpConstraintWeightingValueType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/LikelihoodEnum.h"
#include "asb_uci/type/PercentRangeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/LikelihoodEnum.h"
#include "uci/type/OpConstraintWeightingValueType.h"
#include "uci/type/PercentRangeType.h"
#include "uci/type/PercentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpConstraintWeightingValueType::OpConstraintWeightingValueType() = default;

OpConstraintWeightingValueType::~OpConstraintWeightingValueType() = default;

void OpConstraintWeightingValueType::copy(const uci::type::OpConstraintWeightingValueType& accessor) {
  copyImpl(accessor, false);
}

void OpConstraintWeightingValueType::copyImpl(const uci::type::OpConstraintWeightingValueType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OpConstraintWeightingValueType&>(accessor);
    discrete_Accessor = (accessorImpl.discrete_Accessor ? accessorImpl.discrete_Accessor : boost::none);
    if (accessorImpl.range_Accessor) {
      setRange(*(accessorImpl.range_Accessor));
    } else {
      range_Accessor.reset();
    }
    if (accessorImpl.likelihood_Accessor) {
      setLikelihood(*(accessorImpl.likelihood_Accessor));
    } else {
      likelihood_Accessor.reset();
    }
  }
}

void OpConstraintWeightingValueType::reset() noexcept {
  discrete_Accessor.reset();
  range_Accessor.reset();
  likelihood_Accessor.reset();
}

uci::type::OpConstraintWeightingValueType::OpConstraintWeightingValueTypeChoice OpConstraintWeightingValueType::getOpConstraintWeightingValueTypeChoiceOrdinal() const noexcept {
  if (discrete_Accessor) {
    return OPCONSTRAINTWEIGHTINGVALUETYPE_CHOICE_DISCRETE;
  }
  if (range_Accessor) {
    return OPCONSTRAINTWEIGHTINGVALUETYPE_CHOICE_RANGE;
  }
  if (likelihood_Accessor) {
    return OPCONSTRAINTWEIGHTINGVALUETYPE_CHOICE_LIKELIHOOD;
  }
  return OPCONSTRAINTWEIGHTINGVALUETYPE_CHOICE_NONE;
}

uci::type::OpConstraintWeightingValueType& OpConstraintWeightingValueType::setOpConstraintWeightingValueTypeChoiceOrdinal(uci::type::OpConstraintWeightingValueType::OpConstraintWeightingValueTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case OPCONSTRAINTWEIGHTINGVALUETYPE_CHOICE_DISCRETE:
      chooseDiscrete();
      break;
    case OPCONSTRAINTWEIGHTINGVALUETYPE_CHOICE_RANGE:
      chooseRange("setOpConstraintWeightingValueTypeChoiceOrdinal", type);
      break;
    case OPCONSTRAINTWEIGHTINGVALUETYPE_CHOICE_LIKELIHOOD:
      chooseLikelihood("setOpConstraintWeightingValueTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOpConstraintWeightingValueTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PercentTypeValue OpConstraintWeightingValueType::getDiscrete() const {
  if (discrete_Accessor) {
    return *discrete_Accessor;
  }
  throw uci::base::UCIException("Error in getDiscrete(): Unable to get Discrete, field not selected");
}

uci::type::OpConstraintWeightingValueType& OpConstraintWeightingValueType::setDiscrete(uci::type::PercentTypeValue value) {
  chooseDiscrete();
  discrete_Accessor = value;
  return *this;
}

bool OpConstraintWeightingValueType::isDiscrete() const noexcept {
  return static_cast<bool>(discrete_Accessor);
}

void OpConstraintWeightingValueType::chooseDiscrete() {
  range_Accessor.reset();
  likelihood_Accessor.reset();
  if (!discrete_Accessor) {
    discrete_Accessor = boost::optional<asb_xs::Double>();
  }
}

uci::type::PercentRangeType& OpConstraintWeightingValueType::getRange_() const {
  if (range_Accessor) {
    return *range_Accessor;
  }
  throw uci::base::UCIException("Error in getRange(): Unable to get Range, field not selected");
}

const uci::type::PercentRangeType& OpConstraintWeightingValueType::getRange() const {
  return getRange_();
}

uci::type::PercentRangeType& OpConstraintWeightingValueType::getRange() {
  return getRange_();
}

uci::type::OpConstraintWeightingValueType& OpConstraintWeightingValueType::setRange(const uci::type::PercentRangeType& accessor) {
  chooseRange();
  if (&accessor != range_Accessor.get()) {
    range_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpConstraintWeightingValueType::isRange() const noexcept {
  return static_cast<bool>(range_Accessor);
}

uci::type::PercentRangeType& OpConstraintWeightingValueType::chooseRange(const std::string& method, uci::base::accessorType::AccessorType type) {
  discrete_Accessor.reset();
  likelihood_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::percentRangeType : type};
  if ((!range_Accessor) || (range_Accessor->getAccessorType() != requestedType)) {
    range_Accessor = PercentRangeType::create(type);
    if (!range_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *range_Accessor;
}

uci::type::PercentRangeType& OpConstraintWeightingValueType::chooseRange(uci::base::accessorType::AccessorType type) {
  return chooseRange("chooseRange", type);
}

uci::type::LikelihoodEnum& OpConstraintWeightingValueType::getLikelihood_() const {
  if (likelihood_Accessor) {
    return *likelihood_Accessor;
  }
  throw uci::base::UCIException("Error in getLikelihood(): Unable to get Likelihood, field not selected");
}

const uci::type::LikelihoodEnum& OpConstraintWeightingValueType::getLikelihood() const {
  return getLikelihood_();
}

uci::type::LikelihoodEnum& OpConstraintWeightingValueType::getLikelihood() {
  return getLikelihood_();
}

uci::type::OpConstraintWeightingValueType& OpConstraintWeightingValueType::setLikelihood(const uci::type::LikelihoodEnum& accessor) {
  chooseLikelihood();
  if (&accessor != likelihood_Accessor.get()) {
    likelihood_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpConstraintWeightingValueType& OpConstraintWeightingValueType::setLikelihood(uci::type::LikelihoodEnum::EnumerationItem value) {
  chooseLikelihood().setValue(value);
  return *this;
}

bool OpConstraintWeightingValueType::isLikelihood() const noexcept {
  return static_cast<bool>(likelihood_Accessor);
}

uci::type::LikelihoodEnum& OpConstraintWeightingValueType::chooseLikelihood(const std::string& method, uci::base::accessorType::AccessorType type) {
  discrete_Accessor.reset();
  range_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::likelihoodEnum : type};
  if ((!likelihood_Accessor) || (likelihood_Accessor->getAccessorType() != requestedType)) {
    likelihood_Accessor = LikelihoodEnum::create(type);
    if (!likelihood_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *likelihood_Accessor;
}

uci::type::LikelihoodEnum& OpConstraintWeightingValueType::chooseLikelihood(uci::base::accessorType::AccessorType type) {
  return chooseLikelihood("chooseLikelihood", type);
}

std::unique_ptr<OpConstraintWeightingValueType> OpConstraintWeightingValueType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opConstraintWeightingValueType : type};
  return (requestedType == uci::type::accessorType::opConstraintWeightingValueType) ? boost::make_unique<OpConstraintWeightingValueType>() : nullptr;
}

/**  */
namespace OpConstraintWeightingValueType_Names {

constexpr const char* Extern_Type_Name{"OpConstraintWeightingValueType"};
constexpr const char* Discrete_Name{"Discrete"};
constexpr const char* Range_Name{"Range"};
constexpr const char* Likelihood_Name{"Likelihood"};

} // namespace OpConstraintWeightingValueType_Names

void OpConstraintWeightingValueType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpConstraintWeightingValueType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpConstraintWeightingValueType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpConstraintWeightingValueType_Names::Discrete_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDiscrete(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OpConstraintWeightingValueType_Names::Range_Name) {
      PercentRangeType::deserialize(valueType.second, accessor.chooseRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpConstraintWeightingValueType_Names::Likelihood_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseLikelihood().setValueFromName(*value);
      }
    }
  }
}

std::string OpConstraintWeightingValueType::serialize(const uci::type::OpConstraintWeightingValueType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpConstraintWeightingValueType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpConstraintWeightingValueType_Names::Extern_Type_Name);
  }
  if (accessor.isDiscrete()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDiscrete(), node, OpConstraintWeightingValueType_Names::Discrete_Name);
  } else if (accessor.isRange()) {
    PercentRangeType::serialize(accessor.getRange(), node, OpConstraintWeightingValueType_Names::Range_Name);
  } else if (accessor.isLikelihood()) {
    LikelihoodEnum::serialize(accessor.getLikelihood(), node, OpConstraintWeightingValueType_Names::Likelihood_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OpConstraintWeightingValueType& OpConstraintWeightingValueType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OpConstraintWeightingValueType>().release());
}

uci::type::OpConstraintWeightingValueType& OpConstraintWeightingValueType::create(const uci::type::OpConstraintWeightingValueType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OpConstraintWeightingValueType> newAccessor{boost::make_unique<asb_uci::type::OpConstraintWeightingValueType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OpConstraintWeightingValueType::destroy(uci::type::OpConstraintWeightingValueType& accessor) {
  delete dynamic_cast<asb_uci::type::OpConstraintWeightingValueType*>(&accessor);
}

} // namespace type

} // namespace uci

