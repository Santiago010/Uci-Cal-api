/** @file ESM_CapabilityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ESM_CapabilityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityCommandFrequencyType.h"
#include "asb_uci/type/ESM_BinGroupActivationType.h"
#include "asb_uci/type/ProductOutputCommandBasicType.h"
#include "asb_uci/type/ResourceAllocatorCommandExtensionType.h"
#include "asb_uci/type/SharedRF_ApertureCapabilityCommandBaseType.h"
#include "asb_uci/type/SubCapabilitySelectionType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityCommandFrequencyType.h"
#include "uci/type/ESM_BinGroupActivationType.h"
#include "uci/type/ESM_CapabilityCommandType.h"
#include "uci/type/ProductOutputCommandBasicType.h"
#include "uci/type/ResourceAllocatorCommandExtensionType.h"
#include "uci/type/SubCapabilitySelectionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ESM_CapabilityCommandType::ESM_CapabilityCommandType()
  : subCapabilitySelection_Accessor{boost::make_unique<SubCapabilitySelection>(1, SIZE_MAX)},
    productOutput_Accessor{boost::make_unique<ProductOutput>(0, SIZE_MAX)} {
}

ESM_CapabilityCommandType::~ESM_CapabilityCommandType() = default;

void ESM_CapabilityCommandType::copy(const uci::type::ESM_CapabilityCommandType& accessor) {
  copyImpl(accessor, false);
}

void ESM_CapabilityCommandType::copyImpl(const uci::type::ESM_CapabilityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SharedRF_ApertureCapabilityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ESM_CapabilityCommandType&>(accessor);
    if (accessorImpl.resourceAllocatorCommandExtension_Accessor) {
      setResourceAllocatorCommandExtension(*(accessorImpl.resourceAllocatorCommandExtension_Accessor));
    } else {
      resourceAllocatorCommandExtension_Accessor.reset();
    }
    if (accessorImpl.scanScheduleActivation_Accessor) {
      setScanScheduleActivation(*(accessorImpl.scanScheduleActivation_Accessor));
    } else {
      scanScheduleActivation_Accessor.reset();
    }
    setSubCapabilitySelection(*(accessorImpl.subCapabilitySelection_Accessor));
    setProductOutput(*(accessorImpl.productOutput_Accessor));
    if (accessorImpl.frequency_Accessor) {
      setFrequency(*(accessorImpl.frequency_Accessor));
    } else {
      frequency_Accessor.reset();
    }
  }
}

void ESM_CapabilityCommandType::reset() noexcept {
  SharedRF_ApertureCapabilityCommandBaseType::reset();
  resourceAllocatorCommandExtension_Accessor.reset();
  scanScheduleActivation_Accessor.reset();
  subCapabilitySelection_Accessor->reset();
  productOutput_Accessor->reset();
  frequency_Accessor.reset();
}

uci::type::ResourceAllocatorCommandExtensionType& ESM_CapabilityCommandType::getResourceAllocatorCommandExtension_() const {
  if (resourceAllocatorCommandExtension_Accessor) {
    return *resourceAllocatorCommandExtension_Accessor;
  }
  throw uci::base::UCIException("Error in getResourceAllocatorCommandExtension(): An attempt was made to get an optional field that was not enabled, call hasResourceAllocatorCommandExtension() to determine if it is safe to call getResourceAllocatorCommandExtension()");
}

const uci::type::ResourceAllocatorCommandExtensionType& ESM_CapabilityCommandType::getResourceAllocatorCommandExtension() const {
  return getResourceAllocatorCommandExtension_();
}

uci::type::ResourceAllocatorCommandExtensionType& ESM_CapabilityCommandType::getResourceAllocatorCommandExtension() {
  return getResourceAllocatorCommandExtension_();
}

uci::type::ESM_CapabilityCommandType& ESM_CapabilityCommandType::setResourceAllocatorCommandExtension(const uci::type::ResourceAllocatorCommandExtensionType& accessor) {
  enableResourceAllocatorCommandExtension();
  if (&accessor != resourceAllocatorCommandExtension_Accessor.get()) {
    resourceAllocatorCommandExtension_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_CapabilityCommandType::hasResourceAllocatorCommandExtension() const noexcept {
  return static_cast<bool>(resourceAllocatorCommandExtension_Accessor);
}

uci::type::ResourceAllocatorCommandExtensionType& ESM_CapabilityCommandType::enableResourceAllocatorCommandExtension(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceAllocatorCommandExtensionType : type};
  if ((!resourceAllocatorCommandExtension_Accessor) || (resourceAllocatorCommandExtension_Accessor->getAccessorType() != requestedType)) {
    resourceAllocatorCommandExtension_Accessor = ResourceAllocatorCommandExtensionType::create(requestedType);
    if (!resourceAllocatorCommandExtension_Accessor) {
      throw uci::base::UCIException("Error in enableResourceAllocatorCommandExtension(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *resourceAllocatorCommandExtension_Accessor;
}

uci::type::ESM_CapabilityCommandType& ESM_CapabilityCommandType::clearResourceAllocatorCommandExtension() noexcept {
  resourceAllocatorCommandExtension_Accessor.reset();
  return *this;
}

uci::type::ESM_BinGroupActivationType& ESM_CapabilityCommandType::getScanScheduleActivation_() const {
  if (scanScheduleActivation_Accessor) {
    return *scanScheduleActivation_Accessor;
  }
  throw uci::base::UCIException("Error in getScanScheduleActivation(): An attempt was made to get an optional field that was not enabled, call hasScanScheduleActivation() to determine if it is safe to call getScanScheduleActivation()");
}

const uci::type::ESM_BinGroupActivationType& ESM_CapabilityCommandType::getScanScheduleActivation() const {
  return getScanScheduleActivation_();
}

uci::type::ESM_BinGroupActivationType& ESM_CapabilityCommandType::getScanScheduleActivation() {
  return getScanScheduleActivation_();
}

uci::type::ESM_CapabilityCommandType& ESM_CapabilityCommandType::setScanScheduleActivation(const uci::type::ESM_BinGroupActivationType& accessor) {
  enableScanScheduleActivation();
  if (&accessor != scanScheduleActivation_Accessor.get()) {
    scanScheduleActivation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_CapabilityCommandType::hasScanScheduleActivation() const noexcept {
  return static_cast<bool>(scanScheduleActivation_Accessor);
}

uci::type::ESM_BinGroupActivationType& ESM_CapabilityCommandType::enableScanScheduleActivation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_BinGroupActivationType : type};
  if ((!scanScheduleActivation_Accessor) || (scanScheduleActivation_Accessor->getAccessorType() != requestedType)) {
    scanScheduleActivation_Accessor = ESM_BinGroupActivationType::create(requestedType);
    if (!scanScheduleActivation_Accessor) {
      throw uci::base::UCIException("Error in enableScanScheduleActivation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *scanScheduleActivation_Accessor;
}

uci::type::ESM_CapabilityCommandType& ESM_CapabilityCommandType::clearScanScheduleActivation() noexcept {
  scanScheduleActivation_Accessor.reset();
  return *this;
}

const uci::type::ESM_CapabilityCommandType::SubCapabilitySelection& ESM_CapabilityCommandType::getSubCapabilitySelection() const {
  return *subCapabilitySelection_Accessor;
}

uci::type::ESM_CapabilityCommandType::SubCapabilitySelection& ESM_CapabilityCommandType::getSubCapabilitySelection() {
  return *subCapabilitySelection_Accessor;
}

uci::type::ESM_CapabilityCommandType& ESM_CapabilityCommandType::setSubCapabilitySelection(const uci::type::ESM_CapabilityCommandType::SubCapabilitySelection& accessor) {
  if (&accessor != subCapabilitySelection_Accessor.get()) {
    subCapabilitySelection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ESM_CapabilityCommandType::ProductOutput& ESM_CapabilityCommandType::getProductOutput() const {
  return *productOutput_Accessor;
}

uci::type::ESM_CapabilityCommandType::ProductOutput& ESM_CapabilityCommandType::getProductOutput() {
  return *productOutput_Accessor;
}

uci::type::ESM_CapabilityCommandType& ESM_CapabilityCommandType::setProductOutput(const uci::type::ESM_CapabilityCommandType::ProductOutput& accessor) {
  if (&accessor != productOutput_Accessor.get()) {
    productOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CapabilityCommandFrequencyType& ESM_CapabilityCommandType::getFrequency_() const {
  if (frequency_Accessor) {
    return *frequency_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequency(): An attempt was made to get an optional field that was not enabled, call hasFrequency() to determine if it is safe to call getFrequency()");
}

const uci::type::CapabilityCommandFrequencyType& ESM_CapabilityCommandType::getFrequency() const {
  return getFrequency_();
}

uci::type::CapabilityCommandFrequencyType& ESM_CapabilityCommandType::getFrequency() {
  return getFrequency_();
}

uci::type::ESM_CapabilityCommandType& ESM_CapabilityCommandType::setFrequency(const uci::type::CapabilityCommandFrequencyType& accessor) {
  enableFrequency();
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ESM_CapabilityCommandType::hasFrequency() const noexcept {
  return static_cast<bool>(frequency_Accessor);
}

uci::type::CapabilityCommandFrequencyType& ESM_CapabilityCommandType::enableFrequency(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandFrequencyType : type};
  if ((!frequency_Accessor) || (frequency_Accessor->getAccessorType() != requestedType)) {
    frequency_Accessor = CapabilityCommandFrequencyType::create(requestedType);
    if (!frequency_Accessor) {
      throw uci::base::UCIException("Error in enableFrequency(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *frequency_Accessor;
}

uci::type::ESM_CapabilityCommandType& ESM_CapabilityCommandType::clearFrequency() noexcept {
  frequency_Accessor.reset();
  return *this;
}

std::unique_ptr<ESM_CapabilityCommandType> ESM_CapabilityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_CapabilityCommandType : type};
  return (requestedType == uci::type::accessorType::eSM_CapabilityCommandType) ? boost::make_unique<ESM_CapabilityCommandType>() : nullptr;
}

/**  */
namespace ESM_CapabilityCommandType_Names {

constexpr const char* Extern_Type_Name{"ESM_CapabilityCommandType"};
constexpr const char* ResourceAllocatorCommandExtension_Name{"ResourceAllocatorCommandExtension"};
constexpr const char* ScanScheduleActivation_Name{"ScanScheduleActivation"};
constexpr const char* SubCapabilitySelection_Name{"SubCapabilitySelection"};
constexpr const char* ProductOutput_Name{"ProductOutput"};
constexpr const char* Frequency_Name{"Frequency"};

} // namespace ESM_CapabilityCommandType_Names

void ESM_CapabilityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ESM_CapabilityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ESM_CapabilityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ESM_CapabilityCommandType_Names::ResourceAllocatorCommandExtension_Name) {
      ResourceAllocatorCommandExtensionType::deserialize(valueType.second, accessor.enableResourceAllocatorCommandExtension(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_CapabilityCommandType_Names::ScanScheduleActivation_Name) {
      ESM_BinGroupActivationType::deserialize(valueType.second, accessor.enableScanScheduleActivation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_CapabilityCommandType_Names::SubCapabilitySelection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ESM_CapabilityCommandType::SubCapabilitySelection& boundedList = accessor.getSubCapabilitySelection();
        const uci::type::ESM_CapabilityCommandType::SubCapabilitySelection::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SubCapabilitySelectionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ESM_CapabilityCommandType_Names::ProductOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ESM_CapabilityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
        const uci::type::ESM_CapabilityCommandType::ProductOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ESM_CapabilityCommandType_Names::Frequency_Name) {
      CapabilityCommandFrequencyType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    }
  }
  SharedRF_ApertureCapabilityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ESM_CapabilityCommandType::serialize(const uci::type::ESM_CapabilityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ESM_CapabilityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ESM_CapabilityCommandType_Names::Extern_Type_Name);
  }
  SharedRF_ApertureCapabilityCommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasResourceAllocatorCommandExtension()) {
    ResourceAllocatorCommandExtensionType::serialize(accessor.getResourceAllocatorCommandExtension(), node, ESM_CapabilityCommandType_Names::ResourceAllocatorCommandExtension_Name);
  }
  if (accessor.hasScanScheduleActivation()) {
    ESM_BinGroupActivationType::serialize(accessor.getScanScheduleActivation(), node, ESM_CapabilityCommandType_Names::ScanScheduleActivation_Name);
  }
  {
    const uci::type::ESM_CapabilityCommandType::SubCapabilitySelection& boundedList = accessor.getSubCapabilitySelection();
    for (uci::type::ESM_CapabilityCommandType::SubCapabilitySelection::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SubCapabilitySelectionType::serialize(boundedList.at(i), node, ESM_CapabilityCommandType_Names::SubCapabilitySelection_Name);
    }
  }
  {
    const uci::type::ESM_CapabilityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
    for (uci::type::ESM_CapabilityCommandType::ProductOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductOutputCommandBasicType::serialize(boundedList.at(i), node, ESM_CapabilityCommandType_Names::ProductOutput_Name);
    }
  }
  if (accessor.hasFrequency()) {
    CapabilityCommandFrequencyType::serialize(accessor.getFrequency(), node, ESM_CapabilityCommandType_Names::Frequency_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ESM_CapabilityCommandType& ESM_CapabilityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ESM_CapabilityCommandType>().release());
}

uci::type::ESM_CapabilityCommandType& ESM_CapabilityCommandType::create(const uci::type::ESM_CapabilityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ESM_CapabilityCommandType> newAccessor{boost::make_unique<asb_uci::type::ESM_CapabilityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ESM_CapabilityCommandType::destroy(uci::type::ESM_CapabilityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::ESM_CapabilityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

