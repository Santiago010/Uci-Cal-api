/** @file ProductDisseminationDestinationMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ProductDisseminationDestinationMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DataRecordBaseType.h"
#include "asb_uci/type/DestinationCategoryEnum.h"
#include "asb_uci/type/ProductDisseminationDestinationID_Type.h"
#include "asb_uci/type/ProductDisseminationGatewayType.h"
#include "asb_uci/type/ProductTypeEnum.h"
#include "asb_uci/type/SecurityInformationType.h"
#include "asb_uci/type/VisibleString256Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DestinationCategoryEnum.h"
#include "uci/type/MIME_Type.h"
#include "uci/type/ProductDisseminationDestinationID_Type.h"
#include "uci/type/ProductDisseminationDestinationMDT.h"
#include "uci/type/ProductDisseminationGatewayType.h"
#include "uci/type/ProductTypeEnum.h"
#include "uci/type/SecurityInformationType.h"
#include "uci/type/VisibleString256Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductDisseminationDestinationMDT::ProductDisseminationDestinationMDT()
  : productDisseminationDestinationID_Accessor{boost::make_unique<ProductDisseminationDestinationID_Type>()},
    handle_Accessor{boost::make_unique<Handle>(0, SIZE_MAX)},
    endpoint_Accessor{boost::make_unique<ProductDisseminationGatewayType>()},
    securityInformation_Accessor{boost::make_unique<SecurityInformationType>()},
    destinationType_Accessor{boost::make_unique<DestinationCategoryEnum>()},
    supportedProductType_Accessor{boost::make_unique<SupportedProductType>(0, 81)},
    supportedFormat_Accessor{boost::make_unique<SupportedFormat>(0, SIZE_MAX)} {
}

ProductDisseminationDestinationMDT::~ProductDisseminationDestinationMDT() = default;

void ProductDisseminationDestinationMDT::copy(const uci::type::ProductDisseminationDestinationMDT& accessor) {
  copyImpl(accessor, false);
}

void ProductDisseminationDestinationMDT::copyImpl(const uci::type::ProductDisseminationDestinationMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ProductDisseminationDestinationMDT&>(accessor);
    setProductDisseminationDestinationID(*(accessorImpl.productDisseminationDestinationID_Accessor));
    setHandle(*(accessorImpl.handle_Accessor));
    setEndpoint(*(accessorImpl.endpoint_Accessor));
    setSecurityInformation(*(accessorImpl.securityInformation_Accessor));
    setDestinationType(*(accessorImpl.destinationType_Accessor));
    setEnabled(accessorImpl.enabled_Accessor);
    setSupportedProductType(*(accessorImpl.supportedProductType_Accessor));
    setSupportedFormat(*(accessorImpl.supportedFormat_Accessor));
  }
}

void ProductDisseminationDestinationMDT::reset() noexcept {
  DataRecordBaseType::reset();
  productDisseminationDestinationID_Accessor->reset();
  handle_Accessor->reset();
  endpoint_Accessor->reset();
  securityInformation_Accessor->reset();
  destinationType_Accessor->reset();
  enabled_Accessor = false;
  supportedProductType_Accessor->reset();
  supportedFormat_Accessor->reset();
}

const uci::type::ProductDisseminationDestinationID_Type& ProductDisseminationDestinationMDT::getProductDisseminationDestinationID() const {
  return *productDisseminationDestinationID_Accessor;
}

uci::type::ProductDisseminationDestinationID_Type& ProductDisseminationDestinationMDT::getProductDisseminationDestinationID() {
  return *productDisseminationDestinationID_Accessor;
}

uci::type::ProductDisseminationDestinationMDT& ProductDisseminationDestinationMDT::setProductDisseminationDestinationID(const uci::type::ProductDisseminationDestinationID_Type& accessor) {
  if (&accessor != productDisseminationDestinationID_Accessor.get()) {
    productDisseminationDestinationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ProductDisseminationDestinationMDT::Handle& ProductDisseminationDestinationMDT::getHandle() const {
  return *handle_Accessor;
}

uci::type::ProductDisseminationDestinationMDT::Handle& ProductDisseminationDestinationMDT::getHandle() {
  return *handle_Accessor;
}

uci::type::ProductDisseminationDestinationMDT& ProductDisseminationDestinationMDT::setHandle(const uci::type::ProductDisseminationDestinationMDT::Handle& accessor) {
  if (&accessor != handle_Accessor.get()) {
    handle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ProductDisseminationGatewayType& ProductDisseminationDestinationMDT::getEndpoint() const {
  return *endpoint_Accessor;
}

uci::type::ProductDisseminationGatewayType& ProductDisseminationDestinationMDT::getEndpoint() {
  return *endpoint_Accessor;
}

uci::type::ProductDisseminationDestinationMDT& ProductDisseminationDestinationMDT::setEndpoint(const uci::type::ProductDisseminationGatewayType& accessor) {
  if (&accessor != endpoint_Accessor.get()) {
    endpoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SecurityInformationType& ProductDisseminationDestinationMDT::getSecurityInformation() const {
  return *securityInformation_Accessor;
}

uci::type::SecurityInformationType& ProductDisseminationDestinationMDT::getSecurityInformation() {
  return *securityInformation_Accessor;
}

uci::type::ProductDisseminationDestinationMDT& ProductDisseminationDestinationMDT::setSecurityInformation(const uci::type::SecurityInformationType& accessor) {
  if (&accessor != securityInformation_Accessor.get()) {
    securityInformation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DestinationCategoryEnum& ProductDisseminationDestinationMDT::getDestinationType() const {
  return *destinationType_Accessor;
}

uci::type::DestinationCategoryEnum& ProductDisseminationDestinationMDT::getDestinationType() {
  return *destinationType_Accessor;
}

uci::type::ProductDisseminationDestinationMDT& ProductDisseminationDestinationMDT::setDestinationType(const uci::type::DestinationCategoryEnum& accessor) {
  if (&accessor != destinationType_Accessor.get()) {
    destinationType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ProductDisseminationDestinationMDT& ProductDisseminationDestinationMDT::setDestinationType(uci::type::DestinationCategoryEnum::EnumerationItem value) {
  destinationType_Accessor->setValue(value);
  return *this;
}


xs::Boolean ProductDisseminationDestinationMDT::getEnabled() const {
  return enabled_Accessor;
}

uci::type::ProductDisseminationDestinationMDT& ProductDisseminationDestinationMDT::setEnabled(xs::Boolean value) {
  enabled_Accessor = value;
  return *this;
}


const uci::type::ProductDisseminationDestinationMDT::SupportedProductType& ProductDisseminationDestinationMDT::getSupportedProductType() const {
  return *supportedProductType_Accessor;
}

uci::type::ProductDisseminationDestinationMDT::SupportedProductType& ProductDisseminationDestinationMDT::getSupportedProductType() {
  return *supportedProductType_Accessor;
}

uci::type::ProductDisseminationDestinationMDT& ProductDisseminationDestinationMDT::setSupportedProductType(const uci::type::ProductDisseminationDestinationMDT::SupportedProductType& accessor) {
  if (&accessor != supportedProductType_Accessor.get()) {
    supportedProductType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ProductDisseminationDestinationMDT::SupportedFormat& ProductDisseminationDestinationMDT::getSupportedFormat() const {
  return *supportedFormat_Accessor;
}

uci::type::ProductDisseminationDestinationMDT::SupportedFormat& ProductDisseminationDestinationMDT::getSupportedFormat() {
  return *supportedFormat_Accessor;
}

uci::type::ProductDisseminationDestinationMDT& ProductDisseminationDestinationMDT::setSupportedFormat(const uci::type::ProductDisseminationDestinationMDT::SupportedFormat& accessor) {
  if (&accessor != supportedFormat_Accessor.get()) {
    supportedFormat_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ProductDisseminationDestinationMDT> ProductDisseminationDestinationMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productDisseminationDestinationMDT : type};
  return (requestedType == uci::type::accessorType::productDisseminationDestinationMDT) ? boost::make_unique<ProductDisseminationDestinationMDT>() : nullptr;
}

/**  */
namespace ProductDisseminationDestinationMDT_Names {

constexpr const char* Extern_Type_Name{"ProductDisseminationDestinationMDT"};
constexpr const char* ProductDisseminationDestinationID_Name{"ProductDisseminationDestinationID"};
constexpr const char* Handle_Name{"Handle"};
constexpr const char* Endpoint_Name{"Endpoint"};
constexpr const char* SecurityInformation_Name{"SecurityInformation"};
constexpr const char* DestinationType_Name{"DestinationType"};
constexpr const char* Enabled_Name{"Enabled"};
constexpr const char* SupportedProductType_Name{"SupportedProductType"};
constexpr const char* SupportedFormat_Name{"SupportedFormat"};

} // namespace ProductDisseminationDestinationMDT_Names

void ProductDisseminationDestinationMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductDisseminationDestinationMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductDisseminationDestinationMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductDisseminationDestinationMDT_Names::ProductDisseminationDestinationID_Name) {
      ProductDisseminationDestinationID_Type::deserialize(valueType.second, accessor.getProductDisseminationDestinationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductDisseminationDestinationMDT_Names::Handle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductDisseminationDestinationMDT::Handle& boundedList = accessor.getHandle();
        const uci::type::ProductDisseminationDestinationMDT::Handle::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + ProductDisseminationDestinationMDT_Names::Endpoint_Name) {
      ProductDisseminationGatewayType::deserialize(valueType.second, accessor.getEndpoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductDisseminationDestinationMDT_Names::SecurityInformation_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.getSecurityInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductDisseminationDestinationMDT_Names::DestinationType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getDestinationType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ProductDisseminationDestinationMDT_Names::Enabled_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEnabled(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ProductDisseminationDestinationMDT_Names::SupportedProductType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductDisseminationDestinationMDT::SupportedProductType& boundedList = accessor.getSupportedProductType();
        const uci::type::ProductDisseminationDestinationMDT::SupportedProductType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ProductDisseminationDestinationMDT_Names::SupportedFormat_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductDisseminationDestinationMDT::SupportedFormat& boundedList = accessor.getSupportedFormat();
        const uci::type::ProductDisseminationDestinationMDT::SupportedFormat::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ProductDisseminationDestinationMDT::serialize(const uci::type::ProductDisseminationDestinationMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductDisseminationDestinationMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductDisseminationDestinationMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  ProductDisseminationDestinationID_Type::serialize(accessor.getProductDisseminationDestinationID(), node, ProductDisseminationDestinationMDT_Names::ProductDisseminationDestinationID_Name);
  {
    const uci::type::ProductDisseminationDestinationMDT::Handle& boundedList = accessor.getHandle();
    for (uci::type::ProductDisseminationDestinationMDT::Handle::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, ProductDisseminationDestinationMDT_Names::Handle_Name);
    }
  }
  ProductDisseminationGatewayType::serialize(accessor.getEndpoint(), node, ProductDisseminationDestinationMDT_Names::Endpoint_Name);
  SecurityInformationType::serialize(accessor.getSecurityInformation(), node, ProductDisseminationDestinationMDT_Names::SecurityInformation_Name);
  DestinationCategoryEnum::serialize(accessor.getDestinationType(), node, ProductDisseminationDestinationMDT_Names::DestinationType_Name, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getEnabled(), node, ProductDisseminationDestinationMDT_Names::Enabled_Name);
  {
    const uci::type::ProductDisseminationDestinationMDT::SupportedProductType& boundedList = accessor.getSupportedProductType();
    for (uci::type::ProductDisseminationDestinationMDT::SupportedProductType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ProductTypeEnum::serialize(boundedList.at(i), node, ProductDisseminationDestinationMDT_Names::SupportedProductType_Name, false);
    }
  }
  {
    const uci::type::ProductDisseminationDestinationMDT::SupportedFormat& boundedList = accessor.getSupportedFormat();
    for (uci::type::ProductDisseminationDestinationMDT::SupportedFormat::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, ProductDisseminationDestinationMDT_Names::SupportedFormat_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductDisseminationDestinationMDT& ProductDisseminationDestinationMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductDisseminationDestinationMDT>().release());
}

uci::type::ProductDisseminationDestinationMDT& ProductDisseminationDestinationMDT::create(const uci::type::ProductDisseminationDestinationMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductDisseminationDestinationMDT> newAccessor{boost::make_unique<asb_uci::type::ProductDisseminationDestinationMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductDisseminationDestinationMDT::destroy(uci::type::ProductDisseminationDestinationMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ProductDisseminationDestinationMDT*>(&accessor);
}

} // namespace type

} // namespace uci

