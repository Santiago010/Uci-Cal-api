/** @file BoundaryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/BoundaryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/LocatedEllipseType.h"
#include "../../../include/asb_uci/type/PolygonType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BoundaryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LocatedEllipseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PolygonType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

BoundaryType::BoundaryType() = default;

BoundaryType::~BoundaryType() = default;

void BoundaryType::copy(const uci::type::BoundaryType& accessor) {
  copyImpl(accessor, false);
}

void BoundaryType::copyImpl(const uci::type::BoundaryType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const BoundaryType&>(accessor);
    if (accessorImpl.polygon_Accessor) {
      setPolygon(*(accessorImpl.polygon_Accessor));
    } else {
      polygon_Accessor.reset();
    }
    if (accessorImpl.ellipse_Accessor) {
      setEllipse(*(accessorImpl.ellipse_Accessor));
    } else {
      ellipse_Accessor.reset();
    }
  }
}

void BoundaryType::reset() noexcept {
  polygon_Accessor.reset();
  ellipse_Accessor.reset();
}

uci::type::BoundaryType::BoundaryTypeChoice BoundaryType::getBoundaryTypeChoiceOrdinal() const noexcept {
  if (polygon_Accessor) {
    return BOUNDARYTYPE_CHOICE_POLYGON;
  }
  if (ellipse_Accessor) {
    return BOUNDARYTYPE_CHOICE_ELLIPSE;
  }
  return BOUNDARYTYPE_CHOICE_NONE;
}

uci::type::BoundaryType& BoundaryType::setBoundaryTypeChoiceOrdinal(uci::type::BoundaryType::BoundaryTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case BOUNDARYTYPE_CHOICE_POLYGON:
      choosePolygon("setBoundaryTypeChoiceOrdinal", type);
      break;
    case BOUNDARYTYPE_CHOICE_ELLIPSE:
      chooseEllipse("setBoundaryTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setBoundaryTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PolygonType& BoundaryType::getPolygon_() const {
  if (polygon_Accessor) {
    return *polygon_Accessor;
  }
  throw uci::base::UCIException("Error in getPolygon(): Unable to get Polygon, field not selected");
}

const uci::type::PolygonType& BoundaryType::getPolygon() const {
  return getPolygon_();
}

uci::type::PolygonType& BoundaryType::getPolygon() {
  return getPolygon_();
}

uci::type::BoundaryType& BoundaryType::setPolygon(const uci::type::PolygonType& accessor) {
  choosePolygon();
  if (&accessor != polygon_Accessor.get()) {
    polygon_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool BoundaryType::isPolygon() const noexcept {
  return static_cast<bool>(polygon_Accessor);
}

uci::type::PolygonType& BoundaryType::choosePolygon(const std::string& method, uci::base::accessorType::AccessorType type) {
  ellipse_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::polygonType : type};
  if ((!polygon_Accessor) || (polygon_Accessor->getAccessorType() != requestedType)) {
    polygon_Accessor = PolygonType::create(type);
    if (!polygon_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *polygon_Accessor;
}

uci::type::PolygonType& BoundaryType::choosePolygon(uci::base::accessorType::AccessorType type) {
  return choosePolygon("choosePolygon", type);
}

uci::type::LocatedEllipseType& BoundaryType::getEllipse_() const {
  if (ellipse_Accessor) {
    return *ellipse_Accessor;
  }
  throw uci::base::UCIException("Error in getEllipse(): Unable to get Ellipse, field not selected");
}

const uci::type::LocatedEllipseType& BoundaryType::getEllipse() const {
  return getEllipse_();
}

uci::type::LocatedEllipseType& BoundaryType::getEllipse() {
  return getEllipse_();
}

uci::type::BoundaryType& BoundaryType::setEllipse(const uci::type::LocatedEllipseType& accessor) {
  chooseEllipse();
  if (&accessor != ellipse_Accessor.get()) {
    ellipse_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool BoundaryType::isEllipse() const noexcept {
  return static_cast<bool>(ellipse_Accessor);
}

uci::type::LocatedEllipseType& BoundaryType::chooseEllipse(const std::string& method, uci::base::accessorType::AccessorType type) {
  polygon_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::locatedEllipseType : type};
  if ((!ellipse_Accessor) || (ellipse_Accessor->getAccessorType() != requestedType)) {
    ellipse_Accessor = LocatedEllipseType::create(type);
    if (!ellipse_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ellipse_Accessor;
}

uci::type::LocatedEllipseType& BoundaryType::chooseEllipse(uci::base::accessorType::AccessorType type) {
  return chooseEllipse("chooseEllipse", type);
}

std::unique_ptr<BoundaryType> BoundaryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::boundaryType : type};
  return (requestedType == uci::type::accessorType::boundaryType) ? boost::make_unique<BoundaryType>() : nullptr;
}

/**  */
namespace BoundaryType_Names {

constexpr const char* Extern_Type_Name{"BoundaryType"};
constexpr const char* Polygon_Name{"Polygon"};
constexpr const char* Ellipse_Name{"Ellipse"};

} // namespace BoundaryType_Names

void BoundaryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::BoundaryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = BoundaryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + BoundaryType_Names::Polygon_Name) {
      PolygonType::deserialize(valueType.second, accessor.choosePolygon(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BoundaryType_Names::Ellipse_Name) {
      LocatedEllipseType::deserialize(valueType.second, accessor.chooseEllipse(), nodeName, nsPrefix);
    }
  }
}

std::string BoundaryType::serialize(const uci::type::BoundaryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? BoundaryType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, BoundaryType_Names::Extern_Type_Name);
  }
  if (accessor.isPolygon()) {
    PolygonType::serialize(accessor.getPolygon(), node, BoundaryType_Names::Polygon_Name);
  } else if (accessor.isEllipse()) {
    LocatedEllipseType::serialize(accessor.getEllipse(), node, BoundaryType_Names::Ellipse_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::BoundaryType& BoundaryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::BoundaryType>().release());
}

uci::type::BoundaryType& BoundaryType::create(const uci::type::BoundaryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::BoundaryType> newAccessor{boost::make_unique<asb_uci::type::BoundaryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void BoundaryType::destroy(uci::type::BoundaryType& accessor) {
  delete dynamic_cast<asb_uci::type::BoundaryType*>(&accessor);
}

} // namespace type

} // namespace uci

