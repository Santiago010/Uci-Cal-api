/** @file SubsystemBIT_CommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SubsystemBIT_CommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/BIT_ID_Type.h"
#include "asb_uci/type/VisibleString256Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/BIT_ID_Type.h"
#include "uci/type/SubsystemBIT_CommandType.h"
#include "uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemBIT_CommandType::SubsystemBIT_CommandType() = default;

SubsystemBIT_CommandType::~SubsystemBIT_CommandType() = default;

void SubsystemBIT_CommandType::copy(const uci::type::SubsystemBIT_CommandType& accessor) {
  copyImpl(accessor, false);
}

void SubsystemBIT_CommandType::copyImpl(const uci::type::SubsystemBIT_CommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SubsystemBIT_CommandType&>(accessor);
    if (accessorImpl.initiateBIT_ID_Accessor) {
      setInitiateBIT_ID(*(accessorImpl.initiateBIT_ID_Accessor));
    } else {
      initiateBIT_ID_Accessor.reset();
    }
    if (accessorImpl.cancelBIT_ID_Accessor) {
      setCancelBIT_ID(*(accessorImpl.cancelBIT_ID_Accessor));
    } else {
      cancelBIT_ID_Accessor.reset();
    }
    if (accessorImpl.clearFaultCode_Accessor) {
      setClearFaultCode(*(accessorImpl.clearFaultCode_Accessor));
    } else {
      clearFaultCode_Accessor.reset();
    }
  }
}

void SubsystemBIT_CommandType::reset() noexcept {
  initiateBIT_ID_Accessor.reset();
  cancelBIT_ID_Accessor.reset();
  clearFaultCode_Accessor.reset();
}

uci::type::SubsystemBIT_CommandType::SubsystemBIT_CommandTypeChoice SubsystemBIT_CommandType::getSubsystemBIT_CommandTypeChoiceOrdinal() const noexcept {
  if (initiateBIT_ID_Accessor) {
    return SUBSYSTEMBIT_COMMANDTYPE_CHOICE_INITIATEBIT_ID;
  }
  if (cancelBIT_ID_Accessor) {
    return SUBSYSTEMBIT_COMMANDTYPE_CHOICE_CANCELBIT_ID;
  }
  if (clearFaultCode_Accessor) {
    return SUBSYSTEMBIT_COMMANDTYPE_CHOICE_CLEARFAULTCODE;
  }
  return SUBSYSTEMBIT_COMMANDTYPE_CHOICE_NONE;
}

uci::type::SubsystemBIT_CommandType& SubsystemBIT_CommandType::setSubsystemBIT_CommandTypeChoiceOrdinal(uci::type::SubsystemBIT_CommandType::SubsystemBIT_CommandTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case SUBSYSTEMBIT_COMMANDTYPE_CHOICE_INITIATEBIT_ID:
      chooseInitiateBIT_ID();
      break;
    case SUBSYSTEMBIT_COMMANDTYPE_CHOICE_CANCELBIT_ID:
      chooseCancelBIT_ID();
      break;
    case SUBSYSTEMBIT_COMMANDTYPE_CHOICE_CLEARFAULTCODE:
      chooseClearFaultCode();
      break;
    default:
      throw uci::base::UCIException("Error in setSubsystemBIT_CommandTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SubsystemBIT_CommandType::InitiateBIT_ID& SubsystemBIT_CommandType::getInitiateBIT_ID_() const {
  if (initiateBIT_ID_Accessor) {
    return *initiateBIT_ID_Accessor;
  }
  throw uci::base::UCIException("Error in getInitiateBIT_ID(): Unable to get InitiateBIT_ID, field not selected");
}

const uci::type::SubsystemBIT_CommandType::InitiateBIT_ID& SubsystemBIT_CommandType::getInitiateBIT_ID() const {
  return getInitiateBIT_ID_();
}

uci::type::SubsystemBIT_CommandType::InitiateBIT_ID& SubsystemBIT_CommandType::getInitiateBIT_ID() {
  return getInitiateBIT_ID_();
}

uci::type::SubsystemBIT_CommandType& SubsystemBIT_CommandType::setInitiateBIT_ID(const uci::type::SubsystemBIT_CommandType::InitiateBIT_ID& accessor) {
  chooseInitiateBIT_ID();
  if (&accessor != initiateBIT_ID_Accessor.get()) {
    initiateBIT_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubsystemBIT_CommandType::isInitiateBIT_ID() const noexcept {
  return static_cast<bool>(initiateBIT_ID_Accessor);
}

uci::type::SubsystemBIT_CommandType::InitiateBIT_ID& SubsystemBIT_CommandType::chooseInitiateBIT_ID() {
  cancelBIT_ID_Accessor.reset();
  clearFaultCode_Accessor.reset();
  if (!initiateBIT_ID_Accessor) {
    initiateBIT_ID_Accessor = boost::make_unique<InitiateBIT_ID>(1, SIZE_MAX);
  }
  return *initiateBIT_ID_Accessor;
}

uci::type::SubsystemBIT_CommandType::CancelBIT_ID& SubsystemBIT_CommandType::getCancelBIT_ID_() const {
  if (cancelBIT_ID_Accessor) {
    return *cancelBIT_ID_Accessor;
  }
  throw uci::base::UCIException("Error in getCancelBIT_ID(): Unable to get CancelBIT_ID, field not selected");
}

const uci::type::SubsystemBIT_CommandType::CancelBIT_ID& SubsystemBIT_CommandType::getCancelBIT_ID() const {
  return getCancelBIT_ID_();
}

uci::type::SubsystemBIT_CommandType::CancelBIT_ID& SubsystemBIT_CommandType::getCancelBIT_ID() {
  return getCancelBIT_ID_();
}

uci::type::SubsystemBIT_CommandType& SubsystemBIT_CommandType::setCancelBIT_ID(const uci::type::SubsystemBIT_CommandType::CancelBIT_ID& accessor) {
  chooseCancelBIT_ID();
  if (&accessor != cancelBIT_ID_Accessor.get()) {
    cancelBIT_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubsystemBIT_CommandType::isCancelBIT_ID() const noexcept {
  return static_cast<bool>(cancelBIT_ID_Accessor);
}

uci::type::SubsystemBIT_CommandType::CancelBIT_ID& SubsystemBIT_CommandType::chooseCancelBIT_ID() {
  initiateBIT_ID_Accessor.reset();
  clearFaultCode_Accessor.reset();
  if (!cancelBIT_ID_Accessor) {
    cancelBIT_ID_Accessor = boost::make_unique<CancelBIT_ID>(1, SIZE_MAX);
  }
  return *cancelBIT_ID_Accessor;
}

uci::type::SubsystemBIT_CommandType::ClearFaultCode& SubsystemBIT_CommandType::getClearFaultCode_() const {
  if (clearFaultCode_Accessor) {
    return *clearFaultCode_Accessor;
  }
  throw uci::base::UCIException("Error in getClearFaultCode(): Unable to get ClearFaultCode, field not selected");
}

const uci::type::SubsystemBIT_CommandType::ClearFaultCode& SubsystemBIT_CommandType::getClearFaultCode() const {
  return getClearFaultCode_();
}

uci::type::SubsystemBIT_CommandType::ClearFaultCode& SubsystemBIT_CommandType::getClearFaultCode() {
  return getClearFaultCode_();
}

uci::type::SubsystemBIT_CommandType& SubsystemBIT_CommandType::setClearFaultCode(const uci::type::SubsystemBIT_CommandType::ClearFaultCode& accessor) {
  chooseClearFaultCode();
  if (&accessor != clearFaultCode_Accessor.get()) {
    clearFaultCode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubsystemBIT_CommandType::isClearFaultCode() const noexcept {
  return static_cast<bool>(clearFaultCode_Accessor);
}

uci::type::SubsystemBIT_CommandType::ClearFaultCode& SubsystemBIT_CommandType::chooseClearFaultCode() {
  initiateBIT_ID_Accessor.reset();
  cancelBIT_ID_Accessor.reset();
  if (!clearFaultCode_Accessor) {
    clearFaultCode_Accessor = boost::make_unique<ClearFaultCode>(1, SIZE_MAX);
  }
  return *clearFaultCode_Accessor;
}

std::unique_ptr<SubsystemBIT_CommandType> SubsystemBIT_CommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemBIT_CommandType : type};
  return (requestedType == uci::type::accessorType::subsystemBIT_CommandType) ? boost::make_unique<SubsystemBIT_CommandType>() : nullptr;
}

/**  */
namespace SubsystemBIT_CommandType_Names {

constexpr const char* Extern_Type_Name{"SubsystemBIT_CommandType"};
constexpr const char* InitiateBIT_ID_Name{"InitiateBIT_ID"};
constexpr const char* CancelBIT_ID_Name{"CancelBIT_ID"};
constexpr const char* ClearFaultCode_Name{"ClearFaultCode"};

} // namespace SubsystemBIT_CommandType_Names

void SubsystemBIT_CommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemBIT_CommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemBIT_CommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemBIT_CommandType_Names::InitiateBIT_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemBIT_CommandType::InitiateBIT_ID& boundedList = accessor.chooseInitiateBIT_ID();
        const uci::type::SubsystemBIT_CommandType::InitiateBIT_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::BIT_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemBIT_CommandType_Names::CancelBIT_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemBIT_CommandType::CancelBIT_ID& boundedList = accessor.chooseCancelBIT_ID();
        const uci::type::SubsystemBIT_CommandType::CancelBIT_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::BIT_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemBIT_CommandType_Names::ClearFaultCode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemBIT_CommandType::ClearFaultCode& boundedList = accessor.chooseClearFaultCode();
        const uci::type::SubsystemBIT_CommandType::ClearFaultCode::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    }
  }
}

std::string SubsystemBIT_CommandType::serialize(const uci::type::SubsystemBIT_CommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemBIT_CommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemBIT_CommandType_Names::Extern_Type_Name);
  }
  if (accessor.isInitiateBIT_ID()) {
    {
      const uci::type::SubsystemBIT_CommandType::InitiateBIT_ID& boundedList = accessor.getInitiateBIT_ID();
      for (uci::type::SubsystemBIT_CommandType::InitiateBIT_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::BIT_ID_Type::serialize(boundedList.at(i), node, SubsystemBIT_CommandType_Names::InitiateBIT_ID_Name);
      }
    }
  } else if (accessor.isCancelBIT_ID()) {
    {
      const uci::type::SubsystemBIT_CommandType::CancelBIT_ID& boundedList = accessor.getCancelBIT_ID();
      for (uci::type::SubsystemBIT_CommandType::CancelBIT_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::BIT_ID_Type::serialize(boundedList.at(i), node, SubsystemBIT_CommandType_Names::CancelBIT_ID_Name);
      }
    }
  } else if (accessor.isClearFaultCode()) {
    {
      const uci::type::SubsystemBIT_CommandType::ClearFaultCode& boundedList = accessor.getClearFaultCode();
      for (uci::type::SubsystemBIT_CommandType::ClearFaultCode::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, SubsystemBIT_CommandType_Names::ClearFaultCode_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubsystemBIT_CommandType& SubsystemBIT_CommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubsystemBIT_CommandType>().release());
}

uci::type::SubsystemBIT_CommandType& SubsystemBIT_CommandType::create(const uci::type::SubsystemBIT_CommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubsystemBIT_CommandType> newAccessor{boost::make_unique<asb_uci::type::SubsystemBIT_CommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubsystemBIT_CommandType::destroy(uci::type::SubsystemBIT_CommandType& accessor) {
  delete dynamic_cast<asb_uci::type::SubsystemBIT_CommandType*>(&accessor);
}

} // namespace type

} // namespace uci

