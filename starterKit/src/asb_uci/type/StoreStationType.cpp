/** @file StoreStationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/StoreStationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/StoreType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StoreStationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/StoreType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

StoreStationType::StoreStationType()
  : stationIndex_Accessor{boost::make_unique<ForeignKeyType>()},
    compatibleStore_Accessor{boost::make_unique<CompatibleStore>(1, SIZE_MAX)} {
}

StoreStationType::~StoreStationType() = default;

void StoreStationType::copy(const uci::type::StoreStationType& accessor) {
  copyImpl(accessor, false);
}

void StoreStationType::copyImpl(const uci::type::StoreStationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const StoreStationType&>(accessor);
    setStationIndex(*(accessorImpl.stationIndex_Accessor));
    setCompatibleStore(*(accessorImpl.compatibleStore_Accessor));
    if (accessorImpl.installedStore_Accessor) {
      setInstalledStore(*(accessorImpl.installedStore_Accessor));
    } else {
      installedStore_Accessor.reset();
    }
    if (accessorImpl.capabilityID_Accessor) {
      setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    } else {
      capabilityID_Accessor.reset();
    }
  }
}

void StoreStationType::reset() noexcept {
  if (stationIndex_Accessor->getAccessorType() != uci::type::accessorType::foreignKeyType) {
    stationIndex_Accessor = boost::make_unique<ForeignKeyType>();
  } else {
    stationIndex_Accessor->reset();
  }
  compatibleStore_Accessor->reset();
  installedStore_Accessor.reset();
  capabilityID_Accessor.reset();
}

const uci::type::ForeignKeyType& StoreStationType::getStationIndex() const {
  return *stationIndex_Accessor;
}

uci::type::ForeignKeyType& StoreStationType::getStationIndex() {
  return *stationIndex_Accessor;
}

uci::type::StoreStationType& StoreStationType::setStationIndex(const uci::type::ForeignKeyType& accessor) {
  enableStationIndex(accessor.getAccessorType());
  if (&accessor != stationIndex_Accessor.get()) {
    stationIndex_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ForeignKeyType& StoreStationType::enableStationIndex(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!stationIndex_Accessor) || (stationIndex_Accessor->getAccessorType() != requestedType)) {
    stationIndex_Accessor = ForeignKeyType::create(requestedType);
    if (!stationIndex_Accessor) {
      throw uci::base::UCIException("Error in enableStationIndex(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *stationIndex_Accessor;
}

const uci::type::StoreStationType::CompatibleStore& StoreStationType::getCompatibleStore() const {
  return *compatibleStore_Accessor;
}

uci::type::StoreStationType::CompatibleStore& StoreStationType::getCompatibleStore() {
  return *compatibleStore_Accessor;
}

uci::type::StoreStationType& StoreStationType::setCompatibleStore(const uci::type::StoreStationType::CompatibleStore& accessor) {
  if (&accessor != compatibleStore_Accessor.get()) {
    compatibleStore_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::StoreType& StoreStationType::getInstalledStore_() const {
  if (installedStore_Accessor) {
    return *installedStore_Accessor;
  }
  throw uci::base::UCIException("Error in getInstalledStore(): An attempt was made to get an optional field that was not enabled, call hasInstalledStore() to determine if it is safe to call getInstalledStore()");
}

const uci::type::StoreType& StoreStationType::getInstalledStore() const {
  return getInstalledStore_();
}

uci::type::StoreType& StoreStationType::getInstalledStore() {
  return getInstalledStore_();
}

uci::type::StoreStationType& StoreStationType::setInstalledStore(const uci::type::StoreType& accessor) {
  enableInstalledStore(accessor.getAccessorType());
  if (&accessor != installedStore_Accessor.get()) {
    installedStore_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool StoreStationType::hasInstalledStore() const noexcept {
  return static_cast<bool>(installedStore_Accessor);
}

uci::type::StoreType& StoreStationType::enableInstalledStore(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeType : type};
  if ((!installedStore_Accessor) || (installedStore_Accessor->getAccessorType() != requestedType)) {
    installedStore_Accessor = StoreType::create(requestedType);
    if (!installedStore_Accessor) {
      throw uci::base::UCIException("Error in enableInstalledStore(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *installedStore_Accessor;
}

uci::type::StoreStationType& StoreStationType::clearInstalledStore() noexcept {
  installedStore_Accessor.reset();
  return *this;
}

uci::type::CapabilityID_Type& StoreStationType::getCapabilityID_() const {
  if (capabilityID_Accessor) {
    return *capabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityID(): An attempt was made to get an optional field that was not enabled, call hasCapabilityID() to determine if it is safe to call getCapabilityID()");
}

const uci::type::CapabilityID_Type& StoreStationType::getCapabilityID() const {
  return getCapabilityID_();
}

uci::type::CapabilityID_Type& StoreStationType::getCapabilityID() {
  return getCapabilityID_();
}

uci::type::StoreStationType& StoreStationType::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  enableCapabilityID();
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool StoreStationType::hasCapabilityID() const noexcept {
  return static_cast<bool>(capabilityID_Accessor);
}

uci::type::CapabilityID_Type& StoreStationType::enableCapabilityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!capabilityID_Accessor) || (capabilityID_Accessor->getAccessorType() != requestedType)) {
    capabilityID_Accessor = CapabilityID_Type::create(requestedType);
    if (!capabilityID_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityID_Accessor;
}

uci::type::StoreStationType& StoreStationType::clearCapabilityID() noexcept {
  capabilityID_Accessor.reset();
  return *this;
}

std::unique_ptr<StoreStationType> StoreStationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::storeStationType : type};
  return (requestedType == uci::type::accessorType::storeStationType) ? boost::make_unique<StoreStationType>() : nullptr;
}

/**  */
namespace StoreStationType_Names {

constexpr const char* Extern_Type_Name{"StoreStationType"};
constexpr const char* StationIndex_Name{"StationIndex"};
constexpr const char* CompatibleStore_Name{"CompatibleStore"};
constexpr const char* InstalledStore_Name{"InstalledStore"};
constexpr const char* CapabilityID_Name{"CapabilityID"};

} // namespace StoreStationType_Names

void StoreStationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StoreStationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StoreStationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StoreStationType_Names::StationIndex_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableStationIndex(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StoreStationType_Names::CompatibleStore_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::StoreStationType::CompatibleStore& boundedList = accessor.getCompatibleStore();
        const uci::type::StoreStationType::CompatibleStore::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + StoreStationType_Names::InstalledStore_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableInstalledStore(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StoreStationType_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableCapabilityID(), nodeName, nsPrefix);
    }
  }
}

std::string StoreStationType::serialize(const uci::type::StoreStationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? StoreStationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, StoreStationType_Names::Extern_Type_Name);
  }
  ForeignKeyType::serialize(accessor.getStationIndex(), node, StoreStationType_Names::StationIndex_Name);
  {
    const uci::type::StoreStationType::CompatibleStore& boundedList = accessor.getCompatibleStore();
    for (uci::type::StoreStationType::CompatibleStore::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::StoreType::serialize(boundedList.at(i), node, StoreStationType_Names::CompatibleStore_Name);
    }
  }
  if (accessor.hasInstalledStore()) {
    StoreType::serialize(accessor.getInstalledStore(), node, StoreStationType_Names::InstalledStore_Name);
  }
  if (accessor.hasCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getCapabilityID(), node, StoreStationType_Names::CapabilityID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::StoreStationType& StoreStationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::StoreStationType>().release());
}

uci::type::StoreStationType& StoreStationType::create(const uci::type::StoreStationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::StoreStationType> newAccessor{boost::make_unique<asb_uci::type::StoreStationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void StoreStationType::destroy(uci::type::StoreStationType& accessor) {
  delete dynamic_cast<asb_uci::type::StoreStationType*>(&accessor);
}

} // namespace type

} // namespace uci

