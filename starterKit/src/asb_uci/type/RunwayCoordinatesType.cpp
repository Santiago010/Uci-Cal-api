/** @file RunwayCoordinatesType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RunwayCoordinatesType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/Point3D_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/RunwayCoordinatesType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RunwayCoordinatesType::RunwayCoordinatesType()
  : start_Accessor{boost::make_unique<Point3D_Type>()} {
}

RunwayCoordinatesType::~RunwayCoordinatesType() = default;

void RunwayCoordinatesType::copy(const uci::type::RunwayCoordinatesType& accessor) {
  copyImpl(accessor, false);
}

void RunwayCoordinatesType::copyImpl(const uci::type::RunwayCoordinatesType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RunwayCoordinatesType&>(accessor);
    setStart(*(accessorImpl.start_Accessor));
    if (accessorImpl.threshold_Accessor) {
      setThreshold(*(accessorImpl.threshold_Accessor));
    } else {
      threshold_Accessor.reset();
    }
    if (accessorImpl.limit_Accessor) {
      setLimit(*(accessorImpl.limit_Accessor));
    } else {
      limit_Accessor.reset();
    }
  }
}

void RunwayCoordinatesType::reset() noexcept {
  if (start_Accessor->getAccessorType() != uci::type::accessorType::point3D_Type) {
    start_Accessor = boost::make_unique<Point3D_Type>();
  } else {
    start_Accessor->reset();
  }
  threshold_Accessor.reset();
  limit_Accessor.reset();
}

const uci::type::Point3D_Type& RunwayCoordinatesType::getStart() const {
  return *start_Accessor;
}

uci::type::Point3D_Type& RunwayCoordinatesType::getStart() {
  return *start_Accessor;
}

uci::type::RunwayCoordinatesType& RunwayCoordinatesType::setStart(const uci::type::Point3D_Type& accessor) {
  enableStart(accessor.getAccessorType());
  if (&accessor != start_Accessor.get()) {
    start_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::Point3D_Type& RunwayCoordinatesType::enableStart(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!start_Accessor) || (start_Accessor->getAccessorType() != requestedType)) {
    start_Accessor = Point3D_Type::create(requestedType);
    if (!start_Accessor) {
      throw uci::base::UCIException("Error in enableStart(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *start_Accessor;
}

uci::type::Point3D_Type& RunwayCoordinatesType::getThreshold_() const {
  if (threshold_Accessor) {
    return *threshold_Accessor;
  }
  throw uci::base::UCIException("Error in getThreshold(): An attempt was made to get an optional field that was not enabled, call hasThreshold() to determine if it is safe to call getThreshold()");
}

const uci::type::Point3D_Type& RunwayCoordinatesType::getThreshold() const {
  return getThreshold_();
}

uci::type::Point3D_Type& RunwayCoordinatesType::getThreshold() {
  return getThreshold_();
}

uci::type::RunwayCoordinatesType& RunwayCoordinatesType::setThreshold(const uci::type::Point3D_Type& accessor) {
  enableThreshold(accessor.getAccessorType());
  if (&accessor != threshold_Accessor.get()) {
    threshold_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RunwayCoordinatesType::hasThreshold() const noexcept {
  return static_cast<bool>(threshold_Accessor);
}

uci::type::Point3D_Type& RunwayCoordinatesType::enableThreshold(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!threshold_Accessor) || (threshold_Accessor->getAccessorType() != requestedType)) {
    threshold_Accessor = Point3D_Type::create(requestedType);
    if (!threshold_Accessor) {
      throw uci::base::UCIException("Error in enableThreshold(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *threshold_Accessor;
}

uci::type::RunwayCoordinatesType& RunwayCoordinatesType::clearThreshold() noexcept {
  threshold_Accessor.reset();
  return *this;
}

uci::type::Point3D_Type& RunwayCoordinatesType::getLimit_() const {
  if (limit_Accessor) {
    return *limit_Accessor;
  }
  throw uci::base::UCIException("Error in getLimit(): An attempt was made to get an optional field that was not enabled, call hasLimit() to determine if it is safe to call getLimit()");
}

const uci::type::Point3D_Type& RunwayCoordinatesType::getLimit() const {
  return getLimit_();
}

uci::type::Point3D_Type& RunwayCoordinatesType::getLimit() {
  return getLimit_();
}

uci::type::RunwayCoordinatesType& RunwayCoordinatesType::setLimit(const uci::type::Point3D_Type& accessor) {
  enableLimit(accessor.getAccessorType());
  if (&accessor != limit_Accessor.get()) {
    limit_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RunwayCoordinatesType::hasLimit() const noexcept {
  return static_cast<bool>(limit_Accessor);
}

uci::type::Point3D_Type& RunwayCoordinatesType::enableLimit(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!limit_Accessor) || (limit_Accessor->getAccessorType() != requestedType)) {
    limit_Accessor = Point3D_Type::create(requestedType);
    if (!limit_Accessor) {
      throw uci::base::UCIException("Error in enableLimit(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *limit_Accessor;
}

uci::type::RunwayCoordinatesType& RunwayCoordinatesType::clearLimit() noexcept {
  limit_Accessor.reset();
  return *this;
}

std::unique_ptr<RunwayCoordinatesType> RunwayCoordinatesType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::runwayCoordinatesType : type};
  return (requestedType == uci::type::accessorType::runwayCoordinatesType) ? boost::make_unique<RunwayCoordinatesType>() : nullptr;
}

/**  */
namespace RunwayCoordinatesType_Names {

constexpr const char* Extern_Type_Name{"RunwayCoordinatesType"};
constexpr const char* Start_Name{"Start"};
constexpr const char* Threshold_Name{"Threshold"};
constexpr const char* Limit_Name{"Limit"};

} // namespace RunwayCoordinatesType_Names

void RunwayCoordinatesType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RunwayCoordinatesType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RunwayCoordinatesType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RunwayCoordinatesType_Names::Start_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableStart(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RunwayCoordinatesType_Names::Threshold_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableThreshold(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RunwayCoordinatesType_Names::Limit_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableLimit(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string RunwayCoordinatesType::serialize(const uci::type::RunwayCoordinatesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RunwayCoordinatesType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RunwayCoordinatesType_Names::Extern_Type_Name);
  }
  Point3D_Type::serialize(accessor.getStart(), node, RunwayCoordinatesType_Names::Start_Name);
  if (accessor.hasThreshold()) {
    Point3D_Type::serialize(accessor.getThreshold(), node, RunwayCoordinatesType_Names::Threshold_Name);
  }
  if (accessor.hasLimit()) {
    Point3D_Type::serialize(accessor.getLimit(), node, RunwayCoordinatesType_Names::Limit_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RunwayCoordinatesType& RunwayCoordinatesType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RunwayCoordinatesType>().release());
}

uci::type::RunwayCoordinatesType& RunwayCoordinatesType::create(const uci::type::RunwayCoordinatesType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RunwayCoordinatesType> newAccessor{boost::make_unique<asb_uci::type::RunwayCoordinatesType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RunwayCoordinatesType::destroy(uci::type::RunwayCoordinatesType& accessor) {
  delete dynamic_cast<asb_uci::type::RunwayCoordinatesType*>(&accessor);
}

} // namespace type

} // namespace uci

