/** @file EllipsoidType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EllipsoidType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/QuaternionType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/EllipsoidType.h"
#include "uci/type/QuaternionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EllipsoidType::EllipsoidType()
  : attitude_Accessor{boost::make_unique<QuaternionType>()} {
}

EllipsoidType::~EllipsoidType() = default;

void EllipsoidType::copy(const uci::type::EllipsoidType& accessor) {
  copyImpl(accessor, false);
}

void EllipsoidType::copyImpl(const uci::type::EllipsoidType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EllipsoidType&>(accessor);
    setSemiMajorAxisLength_A(accessorImpl.semiMajorAxisLength_A_Accessor);
    setSemiMinorAxisLength_B(accessorImpl.semiMinorAxisLength_B_Accessor);
    setSemiMinorAxisLength_C(accessorImpl.semiMinorAxisLength_C_Accessor);
    setAttitude(*(accessorImpl.attitude_Accessor));
  }
}

void EllipsoidType::reset() noexcept {
  semiMajorAxisLength_A_Accessor = 0.0;
  semiMinorAxisLength_B_Accessor = 0.0;
  semiMinorAxisLength_C_Accessor = 0.0;
  attitude_Accessor->reset();
}

uci::type::DistanceTypeValue EllipsoidType::getSemiMajorAxisLength_A() const {
  return semiMajorAxisLength_A_Accessor;
}

uci::type::EllipsoidType& EllipsoidType::setSemiMajorAxisLength_A(uci::type::DistanceTypeValue value) {
  semiMajorAxisLength_A_Accessor = value;
  return *this;
}


uci::type::DistanceTypeValue EllipsoidType::getSemiMinorAxisLength_B() const {
  return semiMinorAxisLength_B_Accessor;
}

uci::type::EllipsoidType& EllipsoidType::setSemiMinorAxisLength_B(uci::type::DistanceTypeValue value) {
  semiMinorAxisLength_B_Accessor = value;
  return *this;
}


uci::type::DistanceTypeValue EllipsoidType::getSemiMinorAxisLength_C() const {
  return semiMinorAxisLength_C_Accessor;
}

uci::type::EllipsoidType& EllipsoidType::setSemiMinorAxisLength_C(uci::type::DistanceTypeValue value) {
  semiMinorAxisLength_C_Accessor = value;
  return *this;
}


const uci::type::QuaternionType& EllipsoidType::getAttitude() const {
  return *attitude_Accessor;
}

uci::type::QuaternionType& EllipsoidType::getAttitude() {
  return *attitude_Accessor;
}

uci::type::EllipsoidType& EllipsoidType::setAttitude(const uci::type::QuaternionType& accessor) {
  if (&accessor != attitude_Accessor.get()) {
    attitude_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<EllipsoidType> EllipsoidType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ellipsoidType : type};
  return (requestedType == uci::type::accessorType::ellipsoidType) ? boost::make_unique<EllipsoidType>() : nullptr;
}

/**  */
namespace EllipsoidType_Names {

constexpr const char* Extern_Type_Name{"EllipsoidType"};
constexpr const char* SemiMajorAxisLength_A_Name{"SemiMajorAxisLength_A"};
constexpr const char* SemiMinorAxisLength_B_Name{"SemiMinorAxisLength_B"};
constexpr const char* SemiMinorAxisLength_C_Name{"SemiMinorAxisLength_C"};
constexpr const char* Attitude_Name{"Attitude"};

} // namespace EllipsoidType_Names

void EllipsoidType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EllipsoidType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EllipsoidType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EllipsoidType_Names::SemiMajorAxisLength_A_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSemiMajorAxisLength_A(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EllipsoidType_Names::SemiMinorAxisLength_B_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSemiMinorAxisLength_B(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EllipsoidType_Names::SemiMinorAxisLength_C_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSemiMinorAxisLength_C(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EllipsoidType_Names::Attitude_Name) {
      QuaternionType::deserialize(valueType.second, accessor.getAttitude(), nodeName, nsPrefix);
    }
  }
}

std::string EllipsoidType::serialize(const uci::type::EllipsoidType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EllipsoidType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EllipsoidType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSemiMajorAxisLength_A(), node, EllipsoidType_Names::SemiMajorAxisLength_A_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSemiMinorAxisLength_B(), node, EllipsoidType_Names::SemiMinorAxisLength_B_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSemiMinorAxisLength_C(), node, EllipsoidType_Names::SemiMinorAxisLength_C_Name);
  QuaternionType::serialize(accessor.getAttitude(), node, EllipsoidType_Names::Attitude_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EllipsoidType& EllipsoidType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EllipsoidType>().release());
}

uci::type::EllipsoidType& EllipsoidType::create(const uci::type::EllipsoidType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EllipsoidType> newAccessor{boost::make_unique<asb_uci::type::EllipsoidType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EllipsoidType::destroy(uci::type::EllipsoidType& accessor) {
  delete dynamic_cast<asb_uci::type::EllipsoidType*>(&accessor);
}

} // namespace type

} // namespace uci

