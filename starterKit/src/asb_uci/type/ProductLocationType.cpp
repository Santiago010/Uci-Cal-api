/** @file ProductLocationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ProductLocationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EndpointReferenceType.h"
#include "../../../include/asb_uci/type/ProductSystemLocationType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EndpointReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductLocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductSystemLocationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductLocationType::ProductLocationType() = default;

ProductLocationType::~ProductLocationType() = default;

void ProductLocationType::copy(const uci::type::ProductLocationType& accessor) {
  copyImpl(accessor, false);
}

void ProductLocationType::copyImpl(const uci::type::ProductLocationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ProductLocationType&>(accessor);
    if (accessorImpl.network_Accessor) {
      setNetwork(*(accessorImpl.network_Accessor));
    } else {
      network_Accessor.reset();
    }
    if (accessorImpl.system_Accessor) {
      setSystem(*(accessorImpl.system_Accessor));
    } else {
      system_Accessor.reset();
    }
  }
}

void ProductLocationType::reset() noexcept {
  network_Accessor.reset();
  system_Accessor.reset();
}

uci::type::ProductLocationType::ProductLocationTypeChoice ProductLocationType::getProductLocationTypeChoiceOrdinal() const noexcept {
  if (network_Accessor) {
    return PRODUCTLOCATIONTYPE_CHOICE_NETWORK;
  }
  if (system_Accessor) {
    return PRODUCTLOCATIONTYPE_CHOICE_SYSTEM;
  }
  return PRODUCTLOCATIONTYPE_CHOICE_NONE;
}

uci::type::ProductLocationType& ProductLocationType::setProductLocationTypeChoiceOrdinal(uci::type::ProductLocationType::ProductLocationTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PRODUCTLOCATIONTYPE_CHOICE_NETWORK:
      chooseNetwork("setProductLocationTypeChoiceOrdinal", type);
      break;
    case PRODUCTLOCATIONTYPE_CHOICE_SYSTEM:
      chooseSystem("setProductLocationTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setProductLocationTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EndpointReferenceType& ProductLocationType::getNetwork_() const {
  if (network_Accessor) {
    return *network_Accessor;
  }
  throw uci::base::UCIException("Error in getNetwork(): Unable to get Network, field not selected");
}

const uci::type::EndpointReferenceType& ProductLocationType::getNetwork() const {
  return getNetwork_();
}

uci::type::EndpointReferenceType& ProductLocationType::getNetwork() {
  return getNetwork_();
}

uci::type::ProductLocationType& ProductLocationType::setNetwork(const uci::type::EndpointReferenceType& accessor) {
  chooseNetwork();
  if (&accessor != network_Accessor.get()) {
    network_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductLocationType::isNetwork() const noexcept {
  return static_cast<bool>(network_Accessor);
}

uci::type::EndpointReferenceType& ProductLocationType::chooseNetwork(const std::string& method, uci::base::accessorType::AccessorType type) {
  system_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::endpointReferenceType : type};
  if ((!network_Accessor) || (network_Accessor->getAccessorType() != requestedType)) {
    network_Accessor = EndpointReferenceType::create(type);
    if (!network_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *network_Accessor;
}

uci::type::EndpointReferenceType& ProductLocationType::chooseNetwork(uci::base::accessorType::AccessorType type) {
  return chooseNetwork("chooseNetwork", type);
}

uci::type::ProductSystemLocationType& ProductLocationType::getSystem_() const {
  if (system_Accessor) {
    return *system_Accessor;
  }
  throw uci::base::UCIException("Error in getSystem(): Unable to get System, field not selected");
}

const uci::type::ProductSystemLocationType& ProductLocationType::getSystem() const {
  return getSystem_();
}

uci::type::ProductSystemLocationType& ProductLocationType::getSystem() {
  return getSystem_();
}

uci::type::ProductLocationType& ProductLocationType::setSystem(const uci::type::ProductSystemLocationType& accessor) {
  chooseSystem();
  if (&accessor != system_Accessor.get()) {
    system_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductLocationType::isSystem() const noexcept {
  return static_cast<bool>(system_Accessor);
}

uci::type::ProductSystemLocationType& ProductLocationType::chooseSystem(const std::string& method, uci::base::accessorType::AccessorType type) {
  network_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productSystemLocationType : type};
  if ((!system_Accessor) || (system_Accessor->getAccessorType() != requestedType)) {
    system_Accessor = ProductSystemLocationType::create(type);
    if (!system_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *system_Accessor;
}

uci::type::ProductSystemLocationType& ProductLocationType::chooseSystem(uci::base::accessorType::AccessorType type) {
  return chooseSystem("chooseSystem", type);
}

std::unique_ptr<ProductLocationType> ProductLocationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productLocationType : type};
  return (requestedType == uci::type::accessorType::productLocationType) ? boost::make_unique<ProductLocationType>() : nullptr;
}

/**  */
namespace ProductLocationType_Names {

constexpr const char* Extern_Type_Name{"ProductLocationType"};
constexpr const char* Network_Name{"Network"};
constexpr const char* System_Name{"System"};

} // namespace ProductLocationType_Names

void ProductLocationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductLocationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductLocationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductLocationType_Names::Network_Name) {
      EndpointReferenceType::deserialize(valueType.second, accessor.chooseNetwork(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductLocationType_Names::System_Name) {
      ProductSystemLocationType::deserialize(valueType.second, accessor.chooseSystem(), nodeName, nsPrefix);
    }
  }
}

std::string ProductLocationType::serialize(const uci::type::ProductLocationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductLocationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductLocationType_Names::Extern_Type_Name);
  }
  if (accessor.isNetwork()) {
    EndpointReferenceType::serialize(accessor.getNetwork(), node, ProductLocationType_Names::Network_Name);
  } else if (accessor.isSystem()) {
    ProductSystemLocationType::serialize(accessor.getSystem(), node, ProductLocationType_Names::System_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductLocationType& ProductLocationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductLocationType>().release());
}

uci::type::ProductLocationType& ProductLocationType::create(const uci::type::ProductLocationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductLocationType> newAccessor{boost::make_unique<asb_uci::type::ProductLocationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductLocationType::destroy(uci::type::ProductLocationType& accessor) {
  delete dynamic_cast<asb_uci::type::ProductLocationType*>(&accessor);
}

} // namespace type

} // namespace uci

