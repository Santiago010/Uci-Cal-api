/** @file ProductDisseminationStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ProductDisseminationStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DisseminationProductType.h"
#include "asb_uci/type/DisseminationStatusEnum.h"
#include "asb_uci/type/VisibleString256Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DisseminationProductType.h"
#include "uci/type/DisseminationStatusEnum.h"
#include "uci/type/PercentType.h"
#include "uci/type/ProductDisseminationStatusType.h"
#include "uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductDisseminationStatusType::ProductDisseminationStatusType()
  : product_Accessor{boost::make_unique<DisseminationProductType>()},
    productDisseminationState_Accessor{boost::make_unique<DisseminationStatusEnum>()} {
}

ProductDisseminationStatusType::~ProductDisseminationStatusType() = default;

void ProductDisseminationStatusType::copy(const uci::type::ProductDisseminationStatusType& accessor) {
  copyImpl(accessor, false);
}

void ProductDisseminationStatusType::copyImpl(const uci::type::ProductDisseminationStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ProductDisseminationStatusType&>(accessor);
    setProduct(*(accessorImpl.product_Accessor));
    setProductDisseminationState(*(accessorImpl.productDisseminationState_Accessor));
    if (accessorImpl.statusDetails_Accessor) {
      setStatusDetails(*(accessorImpl.statusDetails_Accessor));
    } else {
      statusDetails_Accessor.reset();
    }
    if (accessorImpl.hasEstimatedCompletionTime()) {
      setEstimatedCompletionTime(accessorImpl.getEstimatedCompletionTime());
    } else {
      clearEstimatedCompletionTime();
    }
    if (accessorImpl.hasEstimatedPercentComplete()) {
      setEstimatedPercentComplete(accessorImpl.getEstimatedPercentComplete());
    } else {
      clearEstimatedPercentComplete();
    }
  }
}

void ProductDisseminationStatusType::reset() noexcept {
  product_Accessor->reset();
  productDisseminationState_Accessor->reset();
  statusDetails_Accessor.reset();
  clearEstimatedCompletionTime();
  clearEstimatedPercentComplete();
}

const uci::type::DisseminationProductType& ProductDisseminationStatusType::getProduct() const {
  return *product_Accessor;
}

uci::type::DisseminationProductType& ProductDisseminationStatusType::getProduct() {
  return *product_Accessor;
}

uci::type::ProductDisseminationStatusType& ProductDisseminationStatusType::setProduct(const uci::type::DisseminationProductType& accessor) {
  if (&accessor != product_Accessor.get()) {
    product_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DisseminationStatusEnum& ProductDisseminationStatusType::getProductDisseminationState() const {
  return *productDisseminationState_Accessor;
}

uci::type::DisseminationStatusEnum& ProductDisseminationStatusType::getProductDisseminationState() {
  return *productDisseminationState_Accessor;
}

uci::type::ProductDisseminationStatusType& ProductDisseminationStatusType::setProductDisseminationState(const uci::type::DisseminationStatusEnum& accessor) {
  if (&accessor != productDisseminationState_Accessor.get()) {
    productDisseminationState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ProductDisseminationStatusType& ProductDisseminationStatusType::setProductDisseminationState(uci::type::DisseminationStatusEnum::EnumerationItem value) {
  productDisseminationState_Accessor->setValue(value);
  return *this;
}


uci::type::VisibleString256Type& ProductDisseminationStatusType::getStatusDetails_() const {
  if (statusDetails_Accessor) {
    return *statusDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getStatusDetails(): An attempt was made to get an optional field that was not enabled, call hasStatusDetails() to determine if it is safe to call getStatusDetails()");
}

const uci::type::VisibleString256Type& ProductDisseminationStatusType::getStatusDetails() const {
  return getStatusDetails_();
}

uci::type::VisibleString256Type& ProductDisseminationStatusType::getStatusDetails() {
  return getStatusDetails_();
}

uci::type::ProductDisseminationStatusType& ProductDisseminationStatusType::setStatusDetails(const uci::type::VisibleString256Type& value) {
  return setStatusDetails(value.c_str());
}

uci::type::ProductDisseminationStatusType& ProductDisseminationStatusType::setStatusDetails(const std::string& value) {
  return setStatusDetails(value.c_str());
}

uci::type::ProductDisseminationStatusType& ProductDisseminationStatusType::setStatusDetails(const char* value) {
  enableStatusDetails().setStringValue(value);
  return *this;
}

bool ProductDisseminationStatusType::hasStatusDetails() const noexcept {
  return static_cast<bool>(statusDetails_Accessor);
}

uci::type::VisibleString256Type& ProductDisseminationStatusType::enableStatusDetails(uci::base::accessorType::AccessorType type) {
  if (!statusDetails_Accessor) {
    statusDetails_Accessor = VisibleString256Type::create(type);
  }
  return *statusDetails_Accessor;
}

uci::type::ProductDisseminationStatusType& ProductDisseminationStatusType::clearStatusDetails() noexcept {
  statusDetails_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue ProductDisseminationStatusType::getEstimatedCompletionTime() const {
  if (estimatedCompletionTime_Accessor) {
    return *estimatedCompletionTime_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedCompletionTime(): An attempt was made to get an optional field that was not enabled, call hasEstimatedCompletionTime() to determine if it is safe to call getEstimatedCompletionTime()");
}

uci::type::ProductDisseminationStatusType& ProductDisseminationStatusType::setEstimatedCompletionTime(uci::type::DateTimeTypeValue value) {
  estimatedCompletionTime_Accessor = value;
  return *this;
}

bool ProductDisseminationStatusType::hasEstimatedCompletionTime() const noexcept {
  return estimatedCompletionTime_Accessor.has_value();
}

uci::type::ProductDisseminationStatusType& ProductDisseminationStatusType::clearEstimatedCompletionTime() noexcept {
  estimatedCompletionTime_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue ProductDisseminationStatusType::getEstimatedPercentComplete() const {
  if (estimatedPercentComplete_Accessor) {
    return *estimatedPercentComplete_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedPercentComplete(): An attempt was made to get an optional field that was not enabled, call hasEstimatedPercentComplete() to determine if it is safe to call getEstimatedPercentComplete()");
}

uci::type::ProductDisseminationStatusType& ProductDisseminationStatusType::setEstimatedPercentComplete(uci::type::PercentTypeValue value) {
  estimatedPercentComplete_Accessor = value;
  return *this;
}

bool ProductDisseminationStatusType::hasEstimatedPercentComplete() const noexcept {
  return estimatedPercentComplete_Accessor.has_value();
}

uci::type::ProductDisseminationStatusType& ProductDisseminationStatusType::clearEstimatedPercentComplete() noexcept {
  estimatedPercentComplete_Accessor.reset();
  return *this;
}

std::unique_ptr<ProductDisseminationStatusType> ProductDisseminationStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productDisseminationStatusType : type};
  return (requestedType == uci::type::accessorType::productDisseminationStatusType) ? boost::make_unique<ProductDisseminationStatusType>() : nullptr;
}

/**  */
namespace ProductDisseminationStatusType_Names {

constexpr const char* Extern_Type_Name{"ProductDisseminationStatusType"};
constexpr const char* Product_Name{"Product"};
constexpr const char* ProductDisseminationState_Name{"ProductDisseminationState"};
constexpr const char* StatusDetails_Name{"StatusDetails"};
constexpr const char* EstimatedCompletionTime_Name{"EstimatedCompletionTime"};
constexpr const char* EstimatedPercentComplete_Name{"EstimatedPercentComplete"};

} // namespace ProductDisseminationStatusType_Names

void ProductDisseminationStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductDisseminationStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductDisseminationStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductDisseminationStatusType_Names::Product_Name) {
      DisseminationProductType::deserialize(valueType.second, accessor.getProduct(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductDisseminationStatusType_Names::ProductDisseminationState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getProductDisseminationState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ProductDisseminationStatusType_Names::StatusDetails_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStatusDetails(*value);
      }
    } else if (valueType.first == nsPrefix + ProductDisseminationStatusType_Names::EstimatedCompletionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedCompletionTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + ProductDisseminationStatusType_Names::EstimatedPercentComplete_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedPercentComplete(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string ProductDisseminationStatusType::serialize(const uci::type::ProductDisseminationStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductDisseminationStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductDisseminationStatusType_Names::Extern_Type_Name);
  }
  DisseminationProductType::serialize(accessor.getProduct(), node, ProductDisseminationStatusType_Names::Product_Name);
  DisseminationStatusEnum::serialize(accessor.getProductDisseminationState(), node, ProductDisseminationStatusType_Names::ProductDisseminationState_Name, false);
  if (accessor.hasStatusDetails()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getStatusDetails(), node, ProductDisseminationStatusType_Names::StatusDetails_Name);
  }
  if (accessor.hasEstimatedCompletionTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEstimatedCompletionTime(), node, ProductDisseminationStatusType_Names::EstimatedCompletionTime_Name);
  }
  if (accessor.hasEstimatedPercentComplete()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedPercentComplete(), node, ProductDisseminationStatusType_Names::EstimatedPercentComplete_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductDisseminationStatusType& ProductDisseminationStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductDisseminationStatusType>().release());
}

uci::type::ProductDisseminationStatusType& ProductDisseminationStatusType::create(const uci::type::ProductDisseminationStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductDisseminationStatusType> newAccessor{boost::make_unique<asb_uci::type::ProductDisseminationStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductDisseminationStatusType::destroy(uci::type::ProductDisseminationStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::ProductDisseminationStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

