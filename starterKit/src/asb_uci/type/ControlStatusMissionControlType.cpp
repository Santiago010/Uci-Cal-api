/** @file ControlStatusMissionControlType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ControlStatusMissionControlType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DirectControlInterfacesType.h"
#include "../../../include/asb_uci/type/PlannedControlInterfacesType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/VoiceCallSignType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ControlStatusMissionControlType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DirectControlInterfacesType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlannedControlInterfacesType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VoiceCallSignType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ControlStatusMissionControlType::ControlStatusMissionControlType()
  : controllerSystemID_Accessor{boost::make_unique<SystemID_Type>()},
    plannedControlInterface_Accessor{boost::make_unique<PlannedControlInterface>(0, 10)},
    directControlInterface_Accessor{boost::make_unique<DirectControlInterface>(0, 2)} {
}

ControlStatusMissionControlType::~ControlStatusMissionControlType() = default;

void ControlStatusMissionControlType::copy(const uci::type::ControlStatusMissionControlType& accessor) {
  copyImpl(accessor, false);
}

void ControlStatusMissionControlType::copyImpl(const uci::type::ControlStatusMissionControlType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ControlStatusMissionControlType&>(accessor);
    setControllerSystemID(*(accessorImpl.controllerSystemID_Accessor));
    setInMission(accessorImpl.inMission_Accessor);
    setPlannedControlInterface(*(accessorImpl.plannedControlInterface_Accessor));
    setDirectControlInterface(*(accessorImpl.directControlInterface_Accessor));
    if (accessorImpl.voiceCallSign_Accessor) {
      setVoiceCallSign(*(accessorImpl.voiceCallSign_Accessor));
    } else {
      voiceCallSign_Accessor.reset();
    }
  }
}

void ControlStatusMissionControlType::reset() noexcept {
  controllerSystemID_Accessor->reset();
  inMission_Accessor = false;
  plannedControlInterface_Accessor->reset();
  directControlInterface_Accessor->reset();
  voiceCallSign_Accessor.reset();
}

const uci::type::SystemID_Type& ControlStatusMissionControlType::getControllerSystemID() const {
  return *controllerSystemID_Accessor;
}

uci::type::SystemID_Type& ControlStatusMissionControlType::getControllerSystemID() {
  return *controllerSystemID_Accessor;
}

uci::type::ControlStatusMissionControlType& ControlStatusMissionControlType::setControllerSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != controllerSystemID_Accessor.get()) {
    controllerSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean ControlStatusMissionControlType::getInMission() const {
  return inMission_Accessor;
}

uci::type::ControlStatusMissionControlType& ControlStatusMissionControlType::setInMission(xs::Boolean value) {
  inMission_Accessor = value;
  return *this;
}


const uci::type::ControlStatusMissionControlType::PlannedControlInterface& ControlStatusMissionControlType::getPlannedControlInterface() const {
  return *plannedControlInterface_Accessor;
}

uci::type::ControlStatusMissionControlType::PlannedControlInterface& ControlStatusMissionControlType::getPlannedControlInterface() {
  return *plannedControlInterface_Accessor;
}

uci::type::ControlStatusMissionControlType& ControlStatusMissionControlType::setPlannedControlInterface(const uci::type::ControlStatusMissionControlType::PlannedControlInterface& accessor) {
  if (&accessor != plannedControlInterface_Accessor.get()) {
    plannedControlInterface_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ControlStatusMissionControlType::DirectControlInterface& ControlStatusMissionControlType::getDirectControlInterface() const {
  return *directControlInterface_Accessor;
}

uci::type::ControlStatusMissionControlType::DirectControlInterface& ControlStatusMissionControlType::getDirectControlInterface() {
  return *directControlInterface_Accessor;
}

uci::type::ControlStatusMissionControlType& ControlStatusMissionControlType::setDirectControlInterface(const uci::type::ControlStatusMissionControlType::DirectControlInterface& accessor) {
  if (&accessor != directControlInterface_Accessor.get()) {
    directControlInterface_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VoiceCallSignType& ControlStatusMissionControlType::getVoiceCallSign_() const {
  if (voiceCallSign_Accessor) {
    return *voiceCallSign_Accessor;
  }
  throw uci::base::UCIException("Error in getVoiceCallSign(): An attempt was made to get an optional field that was not enabled, call hasVoiceCallSign() to determine if it is safe to call getVoiceCallSign()");
}

const uci::type::VoiceCallSignType& ControlStatusMissionControlType::getVoiceCallSign() const {
  return getVoiceCallSign_();
}

uci::type::VoiceCallSignType& ControlStatusMissionControlType::getVoiceCallSign() {
  return getVoiceCallSign_();
}

uci::type::ControlStatusMissionControlType& ControlStatusMissionControlType::setVoiceCallSign(const uci::type::VoiceCallSignType& value) {
  return setVoiceCallSign(value.c_str());
}

uci::type::ControlStatusMissionControlType& ControlStatusMissionControlType::setVoiceCallSign(const std::string& value) {
  return setVoiceCallSign(value.c_str());
}

uci::type::ControlStatusMissionControlType& ControlStatusMissionControlType::setVoiceCallSign(const char* value) {
  enableVoiceCallSign().setStringValue(value);
  return *this;
}

bool ControlStatusMissionControlType::hasVoiceCallSign() const noexcept {
  return static_cast<bool>(voiceCallSign_Accessor);
}

uci::type::VoiceCallSignType& ControlStatusMissionControlType::enableVoiceCallSign(uci::base::accessorType::AccessorType type) {
  if (!voiceCallSign_Accessor) {
    voiceCallSign_Accessor = VoiceCallSignType::create(type);
  }
  return *voiceCallSign_Accessor;
}

uci::type::ControlStatusMissionControlType& ControlStatusMissionControlType::clearVoiceCallSign() noexcept {
  voiceCallSign_Accessor.reset();
  return *this;
}

std::unique_ptr<ControlStatusMissionControlType> ControlStatusMissionControlType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::controlStatusMissionControlType : type};
  return (requestedType == uci::type::accessorType::controlStatusMissionControlType) ? boost::make_unique<ControlStatusMissionControlType>() : nullptr;
}

/**  */
namespace ControlStatusMissionControlType_Names {

constexpr const char* Extern_Type_Name{"ControlStatusMissionControlType"};
constexpr const char* ControllerSystemID_Name{"ControllerSystemID"};
constexpr const char* InMission_Name{"InMission"};
constexpr const char* PlannedControlInterface_Name{"PlannedControlInterface"};
constexpr const char* DirectControlInterface_Name{"DirectControlInterface"};
constexpr const char* VoiceCallSign_Name{"VoiceCallSign"};

} // namespace ControlStatusMissionControlType_Names

void ControlStatusMissionControlType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ControlStatusMissionControlType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ControlStatusMissionControlType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ControlStatusMissionControlType_Names::ControllerSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getControllerSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ControlStatusMissionControlType_Names::InMission_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInMission(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ControlStatusMissionControlType_Names::PlannedControlInterface_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ControlStatusMissionControlType::PlannedControlInterface& boundedList = accessor.getPlannedControlInterface();
        const uci::type::ControlStatusMissionControlType::PlannedControlInterface::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PlannedControlInterfacesType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ControlStatusMissionControlType_Names::DirectControlInterface_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ControlStatusMissionControlType::DirectControlInterface& boundedList = accessor.getDirectControlInterface();
        const uci::type::ControlStatusMissionControlType::DirectControlInterface::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DirectControlInterfacesType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ControlStatusMissionControlType_Names::VoiceCallSign_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceCallSign(*value);
      }
    }
  }
}

std::string ControlStatusMissionControlType::serialize(const uci::type::ControlStatusMissionControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ControlStatusMissionControlType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ControlStatusMissionControlType_Names::Extern_Type_Name);
  }
  SystemID_Type::serialize(accessor.getControllerSystemID(), node, ControlStatusMissionControlType_Names::ControllerSystemID_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInMission(), node, ControlStatusMissionControlType_Names::InMission_Name);
  {
    const uci::type::ControlStatusMissionControlType::PlannedControlInterface& boundedList = accessor.getPlannedControlInterface();
    for (uci::type::ControlStatusMissionControlType::PlannedControlInterface::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PlannedControlInterfacesType::serialize(boundedList.at(i), node, ControlStatusMissionControlType_Names::PlannedControlInterface_Name);
    }
  }
  {
    const uci::type::ControlStatusMissionControlType::DirectControlInterface& boundedList = accessor.getDirectControlInterface();
    for (uci::type::ControlStatusMissionControlType::DirectControlInterface::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DirectControlInterfacesType::serialize(boundedList.at(i), node, ControlStatusMissionControlType_Names::DirectControlInterface_Name);
    }
  }
  if (accessor.hasVoiceCallSign()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getVoiceCallSign(), node, ControlStatusMissionControlType_Names::VoiceCallSign_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ControlStatusMissionControlType& ControlStatusMissionControlType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ControlStatusMissionControlType>().release());
}

uci::type::ControlStatusMissionControlType& ControlStatusMissionControlType::create(const uci::type::ControlStatusMissionControlType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ControlStatusMissionControlType> newAccessor{boost::make_unique<asb_uci::type::ControlStatusMissionControlType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ControlStatusMissionControlType::destroy(uci::type::ControlStatusMissionControlType& accessor) {
  delete dynamic_cast<asb_uci::type::ControlStatusMissionControlType*>(&accessor);
}

} // namespace type

} // namespace uci

