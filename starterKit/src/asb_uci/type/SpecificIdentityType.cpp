/** @file SpecificIdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SpecificIdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EnvironmentEnum.h"
#include "../../../include/asb_uci/type/SiteTypeEnum.h"
#include "../../../include/asb_uci/type/SpecificTypeModelType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EnvironmentEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SiteTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpecificIdentityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpecificTypeModelType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SpecificIdentityType::SpecificIdentityType()
  : specificTypeCategory_Accessor{boost::make_unique<EnvironmentEnum>()} {
}

SpecificIdentityType::~SpecificIdentityType() = default;

void SpecificIdentityType::copy(const uci::type::SpecificIdentityType& accessor) {
  copyImpl(accessor, false);
}

void SpecificIdentityType::copyImpl(const uci::type::SpecificIdentityType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::specificIdentityType)) {
      const auto& accessorImpl = dynamic_cast<const SpecificIdentityType&>(accessor);
      setSpecificType(accessorImpl.specificType_Accessor);
      setSpecificTypeCategory(*(accessorImpl.specificTypeCategory_Accessor));
      if (accessorImpl.siteType_Accessor) {
        setSiteType(*(accessorImpl.siteType_Accessor));
      } else {
        siteType_Accessor.reset();
      }
      if (accessorImpl.specificTypeModel_Accessor) {
        setSpecificTypeModel(*(accessorImpl.specificTypeModel_Accessor));
      } else {
        specificTypeModel_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void SpecificIdentityType::reset() noexcept {
  specificType_Accessor = 0;
  specificTypeCategory_Accessor->reset();
  siteType_Accessor.reset();
  specificTypeModel_Accessor.reset();
}

xs::UnsignedInt SpecificIdentityType::getSpecificType() const {
  return specificType_Accessor;
}

uci::type::SpecificIdentityType& SpecificIdentityType::setSpecificType(xs::UnsignedInt value) {
  specificType_Accessor = value;
  return *this;
}


const uci::type::EnvironmentEnum& SpecificIdentityType::getSpecificTypeCategory() const {
  return *specificTypeCategory_Accessor;
}

uci::type::EnvironmentEnum& SpecificIdentityType::getSpecificTypeCategory() {
  return *specificTypeCategory_Accessor;
}

uci::type::SpecificIdentityType& SpecificIdentityType::setSpecificTypeCategory(const uci::type::EnvironmentEnum& accessor) {
  if (&accessor != specificTypeCategory_Accessor.get()) {
    specificTypeCategory_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SpecificIdentityType& SpecificIdentityType::setSpecificTypeCategory(uci::type::EnvironmentEnum::EnumerationItem value) {
  specificTypeCategory_Accessor->setValue(value);
  return *this;
}


uci::type::SiteTypeEnum& SpecificIdentityType::getSiteType_() const {
  if (siteType_Accessor) {
    return *siteType_Accessor;
  }
  throw uci::base::UCIException("Error in getSiteType(): An attempt was made to get an optional field that was not enabled, call hasSiteType() to determine if it is safe to call getSiteType()");
}

const uci::type::SiteTypeEnum& SpecificIdentityType::getSiteType() const {
  return getSiteType_();
}

uci::type::SiteTypeEnum& SpecificIdentityType::getSiteType() {
  return getSiteType_();
}

uci::type::SpecificIdentityType& SpecificIdentityType::setSiteType(const uci::type::SiteTypeEnum& accessor) {
  enableSiteType();
  if (&accessor != siteType_Accessor.get()) {
    siteType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SpecificIdentityType& SpecificIdentityType::setSiteType(const uci::type::SiteTypeEnum::EnumerationItem value) {
  enableSiteType().setValue(value);
  return *this;
}

bool SpecificIdentityType::hasSiteType() const noexcept {
  return static_cast<bool>(siteType_Accessor);
}

uci::type::SiteTypeEnum& SpecificIdentityType::enableSiteType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::siteTypeEnum : type};
  if ((!siteType_Accessor) || (siteType_Accessor->getAccessorType() != requestedType)) {
    siteType_Accessor = SiteTypeEnum::create(requestedType);
    if (!siteType_Accessor) {
      throw uci::base::UCIException("Error in enableSiteType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *siteType_Accessor;
}

uci::type::SpecificIdentityType& SpecificIdentityType::clearSiteType() noexcept {
  siteType_Accessor.reset();
  return *this;
}

uci::type::SpecificTypeModelType& SpecificIdentityType::getSpecificTypeModel_() const {
  if (specificTypeModel_Accessor) {
    return *specificTypeModel_Accessor;
  }
  throw uci::base::UCIException("Error in getSpecificTypeModel(): An attempt was made to get an optional field that was not enabled, call hasSpecificTypeModel() to determine if it is safe to call getSpecificTypeModel()");
}

const uci::type::SpecificTypeModelType& SpecificIdentityType::getSpecificTypeModel() const {
  return getSpecificTypeModel_();
}

uci::type::SpecificTypeModelType& SpecificIdentityType::getSpecificTypeModel() {
  return getSpecificTypeModel_();
}

uci::type::SpecificIdentityType& SpecificIdentityType::setSpecificTypeModel(const uci::type::SpecificTypeModelType& value) {
  return setSpecificTypeModel(value.c_str());
}

uci::type::SpecificIdentityType& SpecificIdentityType::setSpecificTypeModel(const std::string& value) {
  return setSpecificTypeModel(value.c_str());
}

uci::type::SpecificIdentityType& SpecificIdentityType::setSpecificTypeModel(const char* value) {
  enableSpecificTypeModel().setStringValue(value);
  return *this;
}

bool SpecificIdentityType::hasSpecificTypeModel() const noexcept {
  return static_cast<bool>(specificTypeModel_Accessor);
}

uci::type::SpecificTypeModelType& SpecificIdentityType::enableSpecificTypeModel(uci::base::accessorType::AccessorType type) {
  if (!specificTypeModel_Accessor) {
    specificTypeModel_Accessor = SpecificTypeModelType::create(type);
  }
  return *specificTypeModel_Accessor;
}

uci::type::SpecificIdentityType& SpecificIdentityType::clearSpecificTypeModel() noexcept {
  specificTypeModel_Accessor.reset();
  return *this;
}

std::unique_ptr<SpecificIdentityType> SpecificIdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::specificIdentityType : type};
  return std::unique_ptr<SpecificIdentityType>(dynamic_cast<SpecificIdentityType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace SpecificIdentityType_Names {

constexpr const char* Extern_Type_Name{"SpecificIdentityType"};
constexpr const char* SpecificType_Name{"SpecificType"};
constexpr const char* SpecificTypeCategory_Name{"SpecificTypeCategory"};
constexpr const char* SiteType_Name{"SiteType"};
constexpr const char* SpecificTypeModel_Name{"SpecificTypeModel"};

} // namespace SpecificIdentityType_Names

void SpecificIdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SpecificIdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SpecificIdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SpecificIdentityType_Names::SpecificType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpecificType(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SpecificIdentityType_Names::SpecificTypeCategory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSpecificTypeCategory().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SpecificIdentityType_Names::SiteType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSiteType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SpecificIdentityType_Names::SpecificTypeModel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpecificTypeModel(*value);
      }
    }
  }
}

std::string SpecificIdentityType::serialize(const uci::type::SpecificIdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SpecificIdentityType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::specificIdentityType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, SpecificIdentityType_Names::Extern_Type_Name);
    }
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getSpecificType(), node, SpecificIdentityType_Names::SpecificType_Name);
    EnvironmentEnum::serialize(accessor.getSpecificTypeCategory(), node, SpecificIdentityType_Names::SpecificTypeCategory_Name, false);
    if (accessor.hasSiteType()) {
      SiteTypeEnum::serialize(accessor.getSiteType(), node, SpecificIdentityType_Names::SiteType_Name, false);
    }
    if (accessor.hasSpecificTypeModel()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getSpecificTypeModel(), node, SpecificIdentityType_Names::SpecificTypeModel_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SpecificIdentityType& SpecificIdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SpecificIdentityType>().release());
}

uci::type::SpecificIdentityType& SpecificIdentityType::create(const uci::type::SpecificIdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SpecificIdentityType> newAccessor{boost::make_unique<asb_uci::type::SpecificIdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SpecificIdentityType::destroy(uci::type::SpecificIdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::SpecificIdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

