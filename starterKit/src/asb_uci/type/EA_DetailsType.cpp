/** @file EA_DetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EA_DetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EA_DetailsAssignedType.h"
#include "asb_uci/type/EA_DetailsUnassignedType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EA_DetailsAssignedType.h"
#include "uci/type/EA_DetailsType.h"
#include "uci/type/EA_DetailsUnassignedType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EA_DetailsType::EA_DetailsType() = default;

EA_DetailsType::~EA_DetailsType() = default;

void EA_DetailsType::copy(const uci::type::EA_DetailsType& accessor) {
  copyImpl(accessor, false);
}

void EA_DetailsType::copyImpl(const uci::type::EA_DetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EA_DetailsType&>(accessor);
    if (accessorImpl.assigned_Accessor) {
      setAssigned(*(accessorImpl.assigned_Accessor));
    } else {
      assigned_Accessor.reset();
    }
    if (accessorImpl.unassigned_Accessor) {
      setUnassigned(*(accessorImpl.unassigned_Accessor));
    } else {
      unassigned_Accessor.reset();
    }
  }
}

void EA_DetailsType::reset() noexcept {
  assigned_Accessor.reset();
  unassigned_Accessor.reset();
}

uci::type::EA_DetailsType::EA_DetailsTypeChoice EA_DetailsType::getEA_DetailsTypeChoiceOrdinal() const noexcept {
  if (assigned_Accessor) {
    return EA_DETAILSTYPE_CHOICE_ASSIGNED;
  }
  if (unassigned_Accessor) {
    return EA_DETAILSTYPE_CHOICE_UNASSIGNED;
  }
  return EA_DETAILSTYPE_CHOICE_NONE;
}

uci::type::EA_DetailsType& EA_DetailsType::setEA_DetailsTypeChoiceOrdinal(uci::type::EA_DetailsType::EA_DetailsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EA_DETAILSTYPE_CHOICE_ASSIGNED:
      chooseAssigned("setEA_DetailsTypeChoiceOrdinal", type);
      break;
    case EA_DETAILSTYPE_CHOICE_UNASSIGNED:
      chooseUnassigned("setEA_DetailsTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEA_DetailsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EA_DetailsAssignedType& EA_DetailsType::getAssigned_() const {
  if (assigned_Accessor) {
    return *assigned_Accessor;
  }
  throw uci::base::UCIException("Error in getAssigned(): Unable to get Assigned, field not selected");
}

const uci::type::EA_DetailsAssignedType& EA_DetailsType::getAssigned() const {
  return getAssigned_();
}

uci::type::EA_DetailsAssignedType& EA_DetailsType::getAssigned() {
  return getAssigned_();
}

uci::type::EA_DetailsType& EA_DetailsType::setAssigned(const uci::type::EA_DetailsAssignedType& accessor) {
  chooseAssigned();
  if (&accessor != assigned_Accessor.get()) {
    assigned_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_DetailsType::isAssigned() const noexcept {
  return static_cast<bool>(assigned_Accessor);
}

uci::type::EA_DetailsAssignedType& EA_DetailsType::chooseAssigned(const std::string& method, uci::base::accessorType::AccessorType type) {
  unassigned_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_DetailsAssignedType : type};
  if ((!assigned_Accessor) || (assigned_Accessor->getAccessorType() != requestedType)) {
    assigned_Accessor = EA_DetailsAssignedType::create(type);
    if (!assigned_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *assigned_Accessor;
}

uci::type::EA_DetailsAssignedType& EA_DetailsType::chooseAssigned(uci::base::accessorType::AccessorType type) {
  return chooseAssigned("chooseAssigned", type);
}

uci::type::EA_DetailsUnassignedType& EA_DetailsType::getUnassigned_() const {
  if (unassigned_Accessor) {
    return *unassigned_Accessor;
  }
  throw uci::base::UCIException("Error in getUnassigned(): Unable to get Unassigned, field not selected");
}

const uci::type::EA_DetailsUnassignedType& EA_DetailsType::getUnassigned() const {
  return getUnassigned_();
}

uci::type::EA_DetailsUnassignedType& EA_DetailsType::getUnassigned() {
  return getUnassigned_();
}

uci::type::EA_DetailsType& EA_DetailsType::setUnassigned(const uci::type::EA_DetailsUnassignedType& accessor) {
  chooseUnassigned();
  if (&accessor != unassigned_Accessor.get()) {
    unassigned_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_DetailsType::isUnassigned() const noexcept {
  return static_cast<bool>(unassigned_Accessor);
}

uci::type::EA_DetailsUnassignedType& EA_DetailsType::chooseUnassigned(const std::string& method, uci::base::accessorType::AccessorType type) {
  assigned_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_DetailsUnassignedType : type};
  if ((!unassigned_Accessor) || (unassigned_Accessor->getAccessorType() != requestedType)) {
    unassigned_Accessor = EA_DetailsUnassignedType::create(type);
    if (!unassigned_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *unassigned_Accessor;
}

uci::type::EA_DetailsUnassignedType& EA_DetailsType::chooseUnassigned(uci::base::accessorType::AccessorType type) {
  return chooseUnassigned("chooseUnassigned", type);
}

std::unique_ptr<EA_DetailsType> EA_DetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_DetailsType : type};
  return (requestedType == uci::type::accessorType::eA_DetailsType) ? boost::make_unique<EA_DetailsType>() : nullptr;
}

/**  */
namespace EA_DetailsType_Names {

constexpr const char* Extern_Type_Name{"EA_DetailsType"};
constexpr const char* Assigned_Name{"Assigned"};
constexpr const char* Unassigned_Name{"Unassigned"};

} // namespace EA_DetailsType_Names

void EA_DetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_DetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EA_DetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EA_DetailsType_Names::Assigned_Name) {
      EA_DetailsAssignedType::deserialize(valueType.second, accessor.chooseAssigned(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_DetailsType_Names::Unassigned_Name) {
      EA_DetailsUnassignedType::deserialize(valueType.second, accessor.chooseUnassigned(), nodeName, nsPrefix);
    }
  }
}

std::string EA_DetailsType::serialize(const uci::type::EA_DetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EA_DetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EA_DetailsType_Names::Extern_Type_Name);
  }
  if (accessor.isAssigned()) {
    EA_DetailsAssignedType::serialize(accessor.getAssigned(), node, EA_DetailsType_Names::Assigned_Name);
  } else if (accessor.isUnassigned()) {
    EA_DetailsUnassignedType::serialize(accessor.getUnassigned(), node, EA_DetailsType_Names::Unassigned_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EA_DetailsType& EA_DetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EA_DetailsType>().release());
}

uci::type::EA_DetailsType& EA_DetailsType::create(const uci::type::EA_DetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EA_DetailsType> newAccessor{boost::make_unique<asb_uci::type::EA_DetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EA_DetailsType::destroy(uci::type::EA_DetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::EA_DetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

