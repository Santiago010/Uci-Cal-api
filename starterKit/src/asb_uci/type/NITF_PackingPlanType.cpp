/** @file NITF_PackingPlanType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/NITF_PackingPlanType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ACFTB_Type.h"
#include "../../../include/asb_uci/type/AIMIDB_Type.h"
#include "../../../include/asb_uci/type/EXPLTB_Type.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/FileHeaderType.h"
#include "../../../include/asb_uci/type/ImageSubheaderType.h"
#include "../../../include/asb_uci/type/MSTGTA_Type.h"
#include "../../../include/asb_uci/type/NITF_PackingPlanPET.h"
#include "../../../include/asb_uci/type/PATCHB_Type.h"
#include "../../../include/asb_uci/type/SECTGA_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ACFTB_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AIMIDB_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EXPLTB_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FileHeaderType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ImageSubheaderType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MSTGTA_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NITF_PackingPlanType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PATCHB_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SECTGA_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

NITF_PackingPlanType::NITF_PackingPlanType()
  : sECTGA_Accessor{boost::make_unique<SECTGA>(0, 250)} {
}

NITF_PackingPlanType::~NITF_PackingPlanType() = default;

void NITF_PackingPlanType::copy(const uci::type::NITF_PackingPlanType& accessor) {
  copyImpl(accessor, false);
}

void NITF_PackingPlanType::copyImpl(const uci::type::NITF_PackingPlanType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    NITF_PackingPlanPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const NITF_PackingPlanType&>(accessor);
    if (accessorImpl.fileHeader_Accessor) {
      setFileHeader(*(accessorImpl.fileHeader_Accessor));
    } else {
      fileHeader_Accessor.reset();
    }
    if (accessorImpl.imageSubheader_Accessor) {
      setImageSubheader(*(accessorImpl.imageSubheader_Accessor));
    } else {
      imageSubheader_Accessor.reset();
    }
    if (accessorImpl.aCFTB_Accessor) {
      setACFTB(*(accessorImpl.aCFTB_Accessor));
    } else {
      aCFTB_Accessor.reset();
    }
    if (accessorImpl.aIMIDB_Accessor) {
      setAIMIDB(*(accessorImpl.aIMIDB_Accessor));
    } else {
      aIMIDB_Accessor.reset();
    }
    if (accessorImpl.eXPLTB_Accessor) {
      setEXPLTB(*(accessorImpl.eXPLTB_Accessor));
    } else {
      eXPLTB_Accessor.reset();
    }
    if (accessorImpl.mPDSRA_Accessor) {
      setMPDSRA(*(accessorImpl.mPDSRA_Accessor));
    } else {
      mPDSRA_Accessor.reset();
    }
    if (accessorImpl.pATCHB_Accessor) {
      setPATCHB(*(accessorImpl.pATCHB_Accessor));
    } else {
      pATCHB_Accessor.reset();
    }
    if (accessorImpl.mSTGTA_Accessor) {
      setMSTGTA(*(accessorImpl.mSTGTA_Accessor));
    } else {
      mSTGTA_Accessor.reset();
    }
    setSECTGA(*(accessorImpl.sECTGA_Accessor));
  }
}

void NITF_PackingPlanType::reset() noexcept {
  NITF_PackingPlanPET::reset();
  fileHeader_Accessor.reset();
  imageSubheader_Accessor.reset();
  aCFTB_Accessor.reset();
  aIMIDB_Accessor.reset();
  eXPLTB_Accessor.reset();
  mPDSRA_Accessor.reset();
  pATCHB_Accessor.reset();
  mSTGTA_Accessor.reset();
  sECTGA_Accessor->reset();
}

uci::type::FileHeaderType& NITF_PackingPlanType::getFileHeader_() const {
  if (fileHeader_Accessor) {
    return *fileHeader_Accessor;
  }
  throw uci::base::UCIException("Error in getFileHeader(): An attempt was made to get an optional field that was not enabled, call hasFileHeader() to determine if it is safe to call getFileHeader()");
}

const uci::type::FileHeaderType& NITF_PackingPlanType::getFileHeader() const {
  return getFileHeader_();
}

uci::type::FileHeaderType& NITF_PackingPlanType::getFileHeader() {
  return getFileHeader_();
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::setFileHeader(const uci::type::FileHeaderType& accessor) {
  enableFileHeader();
  if (&accessor != fileHeader_Accessor.get()) {
    fileHeader_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NITF_PackingPlanType::hasFileHeader() const noexcept {
  return static_cast<bool>(fileHeader_Accessor);
}

uci::type::FileHeaderType& NITF_PackingPlanType::enableFileHeader(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileHeaderType : type};
  if ((!fileHeader_Accessor) || (fileHeader_Accessor->getAccessorType() != requestedType)) {
    fileHeader_Accessor = FileHeaderType::create(requestedType);
    if (!fileHeader_Accessor) {
      throw uci::base::UCIException("Error in enableFileHeader(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fileHeader_Accessor;
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::clearFileHeader() noexcept {
  fileHeader_Accessor.reset();
  return *this;
}

uci::type::ImageSubheaderType& NITF_PackingPlanType::getImageSubheader_() const {
  if (imageSubheader_Accessor) {
    return *imageSubheader_Accessor;
  }
  throw uci::base::UCIException("Error in getImageSubheader(): An attempt was made to get an optional field that was not enabled, call hasImageSubheader() to determine if it is safe to call getImageSubheader()");
}

const uci::type::ImageSubheaderType& NITF_PackingPlanType::getImageSubheader() const {
  return getImageSubheader_();
}

uci::type::ImageSubheaderType& NITF_PackingPlanType::getImageSubheader() {
  return getImageSubheader_();
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::setImageSubheader(const uci::type::ImageSubheaderType& accessor) {
  enableImageSubheader();
  if (&accessor != imageSubheader_Accessor.get()) {
    imageSubheader_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NITF_PackingPlanType::hasImageSubheader() const noexcept {
  return static_cast<bool>(imageSubheader_Accessor);
}

uci::type::ImageSubheaderType& NITF_PackingPlanType::enableImageSubheader(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::imageSubheaderType : type};
  if ((!imageSubheader_Accessor) || (imageSubheader_Accessor->getAccessorType() != requestedType)) {
    imageSubheader_Accessor = ImageSubheaderType::create(requestedType);
    if (!imageSubheader_Accessor) {
      throw uci::base::UCIException("Error in enableImageSubheader(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *imageSubheader_Accessor;
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::clearImageSubheader() noexcept {
  imageSubheader_Accessor.reset();
  return *this;
}

uci::type::ACFTB_Type& NITF_PackingPlanType::getACFTB_() const {
  if (aCFTB_Accessor) {
    return *aCFTB_Accessor;
  }
  throw uci::base::UCIException("Error in getACFTB(): An attempt was made to get an optional field that was not enabled, call hasACFTB() to determine if it is safe to call getACFTB()");
}

const uci::type::ACFTB_Type& NITF_PackingPlanType::getACFTB() const {
  return getACFTB_();
}

uci::type::ACFTB_Type& NITF_PackingPlanType::getACFTB() {
  return getACFTB_();
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::setACFTB(const uci::type::ACFTB_Type& accessor) {
  enableACFTB();
  if (&accessor != aCFTB_Accessor.get()) {
    aCFTB_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NITF_PackingPlanType::hasACFTB() const noexcept {
  return static_cast<bool>(aCFTB_Accessor);
}

uci::type::ACFTB_Type& NITF_PackingPlanType::enableACFTB(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aCFTB_Type : type};
  if ((!aCFTB_Accessor) || (aCFTB_Accessor->getAccessorType() != requestedType)) {
    aCFTB_Accessor = ACFTB_Type::create(requestedType);
    if (!aCFTB_Accessor) {
      throw uci::base::UCIException("Error in enableACFTB(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aCFTB_Accessor;
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::clearACFTB() noexcept {
  aCFTB_Accessor.reset();
  return *this;
}

uci::type::AIMIDB_Type& NITF_PackingPlanType::getAIMIDB_() const {
  if (aIMIDB_Accessor) {
    return *aIMIDB_Accessor;
  }
  throw uci::base::UCIException("Error in getAIMIDB(): An attempt was made to get an optional field that was not enabled, call hasAIMIDB() to determine if it is safe to call getAIMIDB()");
}

const uci::type::AIMIDB_Type& NITF_PackingPlanType::getAIMIDB() const {
  return getAIMIDB_();
}

uci::type::AIMIDB_Type& NITF_PackingPlanType::getAIMIDB() {
  return getAIMIDB_();
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::setAIMIDB(const uci::type::AIMIDB_Type& accessor) {
  enableAIMIDB();
  if (&accessor != aIMIDB_Accessor.get()) {
    aIMIDB_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NITF_PackingPlanType::hasAIMIDB() const noexcept {
  return static_cast<bool>(aIMIDB_Accessor);
}

uci::type::AIMIDB_Type& NITF_PackingPlanType::enableAIMIDB(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aIMIDB_Type : type};
  if ((!aIMIDB_Accessor) || (aIMIDB_Accessor->getAccessorType() != requestedType)) {
    aIMIDB_Accessor = AIMIDB_Type::create(requestedType);
    if (!aIMIDB_Accessor) {
      throw uci::base::UCIException("Error in enableAIMIDB(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aIMIDB_Accessor;
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::clearAIMIDB() noexcept {
  aIMIDB_Accessor.reset();
  return *this;
}

uci::type::EXPLTB_Type& NITF_PackingPlanType::getEXPLTB_() const {
  if (eXPLTB_Accessor) {
    return *eXPLTB_Accessor;
  }
  throw uci::base::UCIException("Error in getEXPLTB(): An attempt was made to get an optional field that was not enabled, call hasEXPLTB() to determine if it is safe to call getEXPLTB()");
}

const uci::type::EXPLTB_Type& NITF_PackingPlanType::getEXPLTB() const {
  return getEXPLTB_();
}

uci::type::EXPLTB_Type& NITF_PackingPlanType::getEXPLTB() {
  return getEXPLTB_();
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::setEXPLTB(const uci::type::EXPLTB_Type& accessor) {
  enableEXPLTB();
  if (&accessor != eXPLTB_Accessor.get()) {
    eXPLTB_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NITF_PackingPlanType::hasEXPLTB() const noexcept {
  return static_cast<bool>(eXPLTB_Accessor);
}

uci::type::EXPLTB_Type& NITF_PackingPlanType::enableEXPLTB(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eXPLTB_Type : type};
  if ((!eXPLTB_Accessor) || (eXPLTB_Accessor->getAccessorType() != requestedType)) {
    eXPLTB_Accessor = EXPLTB_Type::create(requestedType);
    if (!eXPLTB_Accessor) {
      throw uci::base::UCIException("Error in enableEXPLTB(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eXPLTB_Accessor;
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::clearEXPLTB() noexcept {
  eXPLTB_Accessor.reset();
  return *this;
}

uci::type::EmptyType& NITF_PackingPlanType::getMPDSRA_() const {
  if (mPDSRA_Accessor) {
    return *mPDSRA_Accessor;
  }
  throw uci::base::UCIException("Error in getMPDSRA(): An attempt was made to get an optional field that was not enabled, call hasMPDSRA() to determine if it is safe to call getMPDSRA()");
}

const uci::type::EmptyType& NITF_PackingPlanType::getMPDSRA() const {
  return getMPDSRA_();
}

uci::type::EmptyType& NITF_PackingPlanType::getMPDSRA() {
  return getMPDSRA_();
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::setMPDSRA(const uci::type::EmptyType& value) {
  return setMPDSRA(value.c_str());
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::setMPDSRA(const std::string& value) {
  return setMPDSRA(value.c_str());
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::setMPDSRA(const char* value) {
  enableMPDSRA().setStringValue(value);
  return *this;
}

bool NITF_PackingPlanType::hasMPDSRA() const noexcept {
  return static_cast<bool>(mPDSRA_Accessor);
}

uci::type::EmptyType& NITF_PackingPlanType::enableMPDSRA(uci::base::accessorType::AccessorType type) {
  if (!mPDSRA_Accessor) {
    mPDSRA_Accessor = EmptyType::create(type);
  }
  return *mPDSRA_Accessor;
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::clearMPDSRA() noexcept {
  mPDSRA_Accessor.reset();
  return *this;
}

uci::type::PATCHB_Type& NITF_PackingPlanType::getPATCHB_() const {
  if (pATCHB_Accessor) {
    return *pATCHB_Accessor;
  }
  throw uci::base::UCIException("Error in getPATCHB(): An attempt was made to get an optional field that was not enabled, call hasPATCHB() to determine if it is safe to call getPATCHB()");
}

const uci::type::PATCHB_Type& NITF_PackingPlanType::getPATCHB() const {
  return getPATCHB_();
}

uci::type::PATCHB_Type& NITF_PackingPlanType::getPATCHB() {
  return getPATCHB_();
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::setPATCHB(const uci::type::PATCHB_Type& accessor) {
  enablePATCHB();
  if (&accessor != pATCHB_Accessor.get()) {
    pATCHB_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NITF_PackingPlanType::hasPATCHB() const noexcept {
  return static_cast<bool>(pATCHB_Accessor);
}

uci::type::PATCHB_Type& NITF_PackingPlanType::enablePATCHB(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pATCHB_Type : type};
  if ((!pATCHB_Accessor) || (pATCHB_Accessor->getAccessorType() != requestedType)) {
    pATCHB_Accessor = PATCHB_Type::create(requestedType);
    if (!pATCHB_Accessor) {
      throw uci::base::UCIException("Error in enablePATCHB(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pATCHB_Accessor;
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::clearPATCHB() noexcept {
  pATCHB_Accessor.reset();
  return *this;
}

uci::type::MSTGTA_Type& NITF_PackingPlanType::getMSTGTA_() const {
  if (mSTGTA_Accessor) {
    return *mSTGTA_Accessor;
  }
  throw uci::base::UCIException("Error in getMSTGTA(): An attempt was made to get an optional field that was not enabled, call hasMSTGTA() to determine if it is safe to call getMSTGTA()");
}

const uci::type::MSTGTA_Type& NITF_PackingPlanType::getMSTGTA() const {
  return getMSTGTA_();
}

uci::type::MSTGTA_Type& NITF_PackingPlanType::getMSTGTA() {
  return getMSTGTA_();
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::setMSTGTA(const uci::type::MSTGTA_Type& accessor) {
  enableMSTGTA();
  if (&accessor != mSTGTA_Accessor.get()) {
    mSTGTA_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NITF_PackingPlanType::hasMSTGTA() const noexcept {
  return static_cast<bool>(mSTGTA_Accessor);
}

uci::type::MSTGTA_Type& NITF_PackingPlanType::enableMSTGTA(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mSTGTA_Type : type};
  if ((!mSTGTA_Accessor) || (mSTGTA_Accessor->getAccessorType() != requestedType)) {
    mSTGTA_Accessor = MSTGTA_Type::create(requestedType);
    if (!mSTGTA_Accessor) {
      throw uci::base::UCIException("Error in enableMSTGTA(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mSTGTA_Accessor;
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::clearMSTGTA() noexcept {
  mSTGTA_Accessor.reset();
  return *this;
}

const uci::type::NITF_PackingPlanType::SECTGA& NITF_PackingPlanType::getSECTGA() const {
  return *sECTGA_Accessor;
}

uci::type::NITF_PackingPlanType::SECTGA& NITF_PackingPlanType::getSECTGA() {
  return *sECTGA_Accessor;
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::setSECTGA(const uci::type::NITF_PackingPlanType::SECTGA& accessor) {
  if (&accessor != sECTGA_Accessor.get()) {
    sECTGA_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<NITF_PackingPlanType> NITF_PackingPlanType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::nITF_PackingPlanType : type};
  return (requestedType == uci::type::accessorType::nITF_PackingPlanType) ? boost::make_unique<NITF_PackingPlanType>() : nullptr;
}

/**  */
namespace NITF_PackingPlanType_Names {

constexpr const char* Extern_Type_Name{"NITF_PackingPlanType"};
constexpr const char* FileHeader_Name{"FileHeader"};
constexpr const char* ImageSubheader_Name{"ImageSubheader"};
constexpr const char* ACFTB_Name{"ACFTB"};
constexpr const char* AIMIDB_Name{"AIMIDB"};
constexpr const char* EXPLTB_Name{"EXPLTB"};
constexpr const char* MPDSRA_Name{"MPDSRA"};
constexpr const char* PATCHB_Name{"PATCHB"};
constexpr const char* MSTGTA_Name{"MSTGTA"};
constexpr const char* SECTGA_Name{"SECTGA"};

} // namespace NITF_PackingPlanType_Names

void NITF_PackingPlanType::deserialize(const boost::property_tree::ptree& propTree, uci::type::NITF_PackingPlanType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = NITF_PackingPlanType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::FileHeader_Name) {
      FileHeaderType::deserialize(valueType.second, accessor.enableFileHeader(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::ImageSubheader_Name) {
      ImageSubheaderType::deserialize(valueType.second, accessor.enableImageSubheader(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::ACFTB_Name) {
      ACFTB_Type::deserialize(valueType.second, accessor.enableACFTB(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::AIMIDB_Name) {
      AIMIDB_Type::deserialize(valueType.second, accessor.enableAIMIDB(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::EXPLTB_Name) {
      EXPLTB_Type::deserialize(valueType.second, accessor.enableEXPLTB(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::MPDSRA_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMPDSRA(*value);
      }
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::PATCHB_Name) {
      PATCHB_Type::deserialize(valueType.second, accessor.enablePATCHB(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::MSTGTA_Name) {
      MSTGTA_Type::deserialize(valueType.second, accessor.enableMSTGTA(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::SECTGA_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::NITF_PackingPlanType::SECTGA& boundedList = accessor.getSECTGA();
        const uci::type::NITF_PackingPlanType::SECTGA::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SECTGA_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  NITF_PackingPlanPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string NITF_PackingPlanType::serialize(const uci::type::NITF_PackingPlanType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? NITF_PackingPlanType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, NITF_PackingPlanType_Names::Extern_Type_Name);
  }
  NITF_PackingPlanPET::serialize(accessor, node, "", false, false, false);
  if (accessor.hasFileHeader()) {
    FileHeaderType::serialize(accessor.getFileHeader(), node, NITF_PackingPlanType_Names::FileHeader_Name);
  }
  if (accessor.hasImageSubheader()) {
    ImageSubheaderType::serialize(accessor.getImageSubheader(), node, NITF_PackingPlanType_Names::ImageSubheader_Name);
  }
  if (accessor.hasACFTB()) {
    ACFTB_Type::serialize(accessor.getACFTB(), node, NITF_PackingPlanType_Names::ACFTB_Name);
  }
  if (accessor.hasAIMIDB()) {
    AIMIDB_Type::serialize(accessor.getAIMIDB(), node, NITF_PackingPlanType_Names::AIMIDB_Name);
  }
  if (accessor.hasEXPLTB()) {
    EXPLTB_Type::serialize(accessor.getEXPLTB(), node, NITF_PackingPlanType_Names::EXPLTB_Name);
  }
  if (accessor.hasMPDSRA()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMPDSRA(), node, NITF_PackingPlanType_Names::MPDSRA_Name);
  }
  if (accessor.hasPATCHB()) {
    PATCHB_Type::serialize(accessor.getPATCHB(), node, NITF_PackingPlanType_Names::PATCHB_Name);
  }
  if (accessor.hasMSTGTA()) {
    MSTGTA_Type::serialize(accessor.getMSTGTA(), node, NITF_PackingPlanType_Names::MSTGTA_Name);
  }
  {
    const uci::type::NITF_PackingPlanType::SECTGA& boundedList = accessor.getSECTGA();
    for (uci::type::NITF_PackingPlanType::SECTGA::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SECTGA_Type::serialize(boundedList.at(i), node, NITF_PackingPlanType_Names::SECTGA_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::NITF_PackingPlanType>().release());
}

uci::type::NITF_PackingPlanType& NITF_PackingPlanType::create(const uci::type::NITF_PackingPlanType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::NITF_PackingPlanType> newAccessor{boost::make_unique<asb_uci::type::NITF_PackingPlanType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void NITF_PackingPlanType::destroy(uci::type::NITF_PackingPlanType& accessor) {
  delete dynamic_cast<asb_uci::type::NITF_PackingPlanType*>(&accessor);
}

} // namespace type

} // namespace uci

