/** @file OrbitalSurveillanceTaskBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitalSurveillanceTaskBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AllowableSensorsType.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceCapabilityEnum.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceSubCapabilityDetailsChoiceType.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceSubCapabilityEnum.h"
#include "../../../include/asb_uci/type/ProductNeededByType.h"
#include "../../../include/asb_uci/type/SDA_SpecialInstructionsConstraintType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AllowableSensorsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceCapabilityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceSubCapabilityDetailsChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceSubCapabilityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceTaskBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductNeededByType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SDA_SpecialInstructionsConstraintType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalSurveillanceTaskBaseType::OrbitalSurveillanceTaskBaseType()
  : capabilityType_Accessor{boost::make_unique<OrbitalSurveillanceCapabilityEnum>()},
    subCapabilityType_Accessor{boost::make_unique<OrbitalSurveillanceSubCapabilityDetailsChoiceType>()},
    sDA_SpecialInstructions_Accessor{boost::make_unique<SDA_SpecialInstructions>(0, SIZE_MAX)} {
}

OrbitalSurveillanceTaskBaseType::~OrbitalSurveillanceTaskBaseType() = default;

void OrbitalSurveillanceTaskBaseType::copy(const uci::type::OrbitalSurveillanceTaskBaseType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalSurveillanceTaskBaseType::copyImpl(const uci::type::OrbitalSurveillanceTaskBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::orbitalSurveillanceTaskBaseType)) {
      const auto& accessorImpl = dynamic_cast<const OrbitalSurveillanceTaskBaseType&>(accessor);
      setCapabilityType(*(accessorImpl.capabilityType_Accessor));
      setSubCapabilityType(*(accessorImpl.subCapabilityType_Accessor));
      if (accessorImpl.informationObjective_Accessor) {
        setInformationObjective(*(accessorImpl.informationObjective_Accessor));
      } else {
        informationObjective_Accessor.reset();
      }
      if (accessorImpl.hasMinSize()) {
        setMinSize(accessorImpl.getMinSize());
      } else {
        clearMinSize();
      }
      setConfirmObjectAcquisition(accessorImpl.confirmObjectAcquisition_Accessor);
      if (accessorImpl.productNeededBy_Accessor) {
        setProductNeededBy(*(accessorImpl.productNeededBy_Accessor));
      } else {
        productNeededBy_Accessor.reset();
      }
      if (accessorImpl.sensorConstraints_Accessor) {
        setSensorConstraints(*(accessorImpl.sensorConstraints_Accessor));
      } else {
        sensorConstraints_Accessor.reset();
      }
      setSDA_SpecialInstructions(*(accessorImpl.sDA_SpecialInstructions_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void OrbitalSurveillanceTaskBaseType::reset() noexcept {
  capabilityType_Accessor->reset();
  subCapabilityType_Accessor->reset();
  informationObjective_Accessor.reset();
  clearMinSize();
  confirmObjectAcquisition_Accessor = false;
  productNeededBy_Accessor.reset();
  sensorConstraints_Accessor.reset();
  sDA_SpecialInstructions_Accessor->reset();
}

const uci::type::OrbitalSurveillanceCapabilityEnum& OrbitalSurveillanceTaskBaseType::getCapabilityType() const {
  return *capabilityType_Accessor;
}

uci::type::OrbitalSurveillanceCapabilityEnum& OrbitalSurveillanceTaskBaseType::getCapabilityType() {
  return *capabilityType_Accessor;
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::setCapabilityType(const uci::type::OrbitalSurveillanceCapabilityEnum& accessor) {
  if (&accessor != capabilityType_Accessor.get()) {
    capabilityType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::setCapabilityType(uci::type::OrbitalSurveillanceCapabilityEnum::EnumerationItem value) {
  capabilityType_Accessor->setValue(value);
  return *this;
}


const uci::type::OrbitalSurveillanceSubCapabilityDetailsChoiceType& OrbitalSurveillanceTaskBaseType::getSubCapabilityType() const {
  return *subCapabilityType_Accessor;
}

uci::type::OrbitalSurveillanceSubCapabilityDetailsChoiceType& OrbitalSurveillanceTaskBaseType::getSubCapabilityType() {
  return *subCapabilityType_Accessor;
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::setSubCapabilityType(const uci::type::OrbitalSurveillanceSubCapabilityDetailsChoiceType& accessor) {
  if (&accessor != subCapabilityType_Accessor.get()) {
    subCapabilityType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitalSurveillanceSubCapabilityEnum& OrbitalSurveillanceTaskBaseType::getInformationObjective_() const {
  if (informationObjective_Accessor) {
    return *informationObjective_Accessor;
  }
  throw uci::base::UCIException("Error in getInformationObjective(): An attempt was made to get an optional field that was not enabled, call hasInformationObjective() to determine if it is safe to call getInformationObjective()");
}

const uci::type::OrbitalSurveillanceSubCapabilityEnum& OrbitalSurveillanceTaskBaseType::getInformationObjective() const {
  return getInformationObjective_();
}

uci::type::OrbitalSurveillanceSubCapabilityEnum& OrbitalSurveillanceTaskBaseType::getInformationObjective() {
  return getInformationObjective_();
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::setInformationObjective(const uci::type::OrbitalSurveillanceSubCapabilityEnum& accessor) {
  enableInformationObjective();
  if (&accessor != informationObjective_Accessor.get()) {
    informationObjective_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::setInformationObjective(const uci::type::OrbitalSurveillanceSubCapabilityEnum::EnumerationItem value) {
  enableInformationObjective().setValue(value);
  return *this;
}

bool OrbitalSurveillanceTaskBaseType::hasInformationObjective() const noexcept {
  return static_cast<bool>(informationObjective_Accessor);
}

uci::type::OrbitalSurveillanceSubCapabilityEnum& OrbitalSurveillanceTaskBaseType::enableInformationObjective(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceSubCapabilityEnum : type};
  if ((!informationObjective_Accessor) || (informationObjective_Accessor->getAccessorType() != requestedType)) {
    informationObjective_Accessor = OrbitalSurveillanceSubCapabilityEnum::create(requestedType);
    if (!informationObjective_Accessor) {
      throw uci::base::UCIException("Error in enableInformationObjective(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *informationObjective_Accessor;
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::clearInformationObjective() noexcept {
  informationObjective_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue OrbitalSurveillanceTaskBaseType::getMinSize() const {
  if (minSize_Accessor) {
    return *minSize_Accessor;
  }
  throw uci::base::UCIException("Error in getMinSize(): An attempt was made to get an optional field that was not enabled, call hasMinSize() to determine if it is safe to call getMinSize()");
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::setMinSize(uci::type::DistanceTypeValue value) {
  minSize_Accessor = value;
  return *this;
}

bool OrbitalSurveillanceTaskBaseType::hasMinSize() const noexcept {
  return minSize_Accessor.has_value();
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::clearMinSize() noexcept {
  minSize_Accessor.reset();
  return *this;
}

xs::Boolean OrbitalSurveillanceTaskBaseType::getConfirmObjectAcquisition() const {
  return confirmObjectAcquisition_Accessor;
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::setConfirmObjectAcquisition(xs::Boolean value) {
  confirmObjectAcquisition_Accessor = value;
  return *this;
}


uci::type::ProductNeededByType& OrbitalSurveillanceTaskBaseType::getProductNeededBy_() const {
  if (productNeededBy_Accessor) {
    return *productNeededBy_Accessor;
  }
  throw uci::base::UCIException("Error in getProductNeededBy(): An attempt was made to get an optional field that was not enabled, call hasProductNeededBy() to determine if it is safe to call getProductNeededBy()");
}

const uci::type::ProductNeededByType& OrbitalSurveillanceTaskBaseType::getProductNeededBy() const {
  return getProductNeededBy_();
}

uci::type::ProductNeededByType& OrbitalSurveillanceTaskBaseType::getProductNeededBy() {
  return getProductNeededBy_();
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::setProductNeededBy(const uci::type::ProductNeededByType& accessor) {
  enableProductNeededBy();
  if (&accessor != productNeededBy_Accessor.get()) {
    productNeededBy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceTaskBaseType::hasProductNeededBy() const noexcept {
  return static_cast<bool>(productNeededBy_Accessor);
}

uci::type::ProductNeededByType& OrbitalSurveillanceTaskBaseType::enableProductNeededBy(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productNeededByType : type};
  if ((!productNeededBy_Accessor) || (productNeededBy_Accessor->getAccessorType() != requestedType)) {
    productNeededBy_Accessor = ProductNeededByType::create(requestedType);
    if (!productNeededBy_Accessor) {
      throw uci::base::UCIException("Error in enableProductNeededBy(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productNeededBy_Accessor;
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::clearProductNeededBy() noexcept {
  productNeededBy_Accessor.reset();
  return *this;
}

uci::type::AllowableSensorsType& OrbitalSurveillanceTaskBaseType::getSensorConstraints_() const {
  if (sensorConstraints_Accessor) {
    return *sensorConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getSensorConstraints(): An attempt was made to get an optional field that was not enabled, call hasSensorConstraints() to determine if it is safe to call getSensorConstraints()");
}

const uci::type::AllowableSensorsType& OrbitalSurveillanceTaskBaseType::getSensorConstraints() const {
  return getSensorConstraints_();
}

uci::type::AllowableSensorsType& OrbitalSurveillanceTaskBaseType::getSensorConstraints() {
  return getSensorConstraints_();
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::setSensorConstraints(const uci::type::AllowableSensorsType& accessor) {
  enableSensorConstraints();
  if (&accessor != sensorConstraints_Accessor.get()) {
    sensorConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalSurveillanceTaskBaseType::hasSensorConstraints() const noexcept {
  return static_cast<bool>(sensorConstraints_Accessor);
}

uci::type::AllowableSensorsType& OrbitalSurveillanceTaskBaseType::enableSensorConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::allowableSensorsType : type};
  if ((!sensorConstraints_Accessor) || (sensorConstraints_Accessor->getAccessorType() != requestedType)) {
    sensorConstraints_Accessor = AllowableSensorsType::create(requestedType);
    if (!sensorConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableSensorConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sensorConstraints_Accessor;
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::clearSensorConstraints() noexcept {
  sensorConstraints_Accessor.reset();
  return *this;
}

const uci::type::OrbitalSurveillanceTaskBaseType::SDA_SpecialInstructions& OrbitalSurveillanceTaskBaseType::getSDA_SpecialInstructions() const {
  return *sDA_SpecialInstructions_Accessor;
}

uci::type::OrbitalSurveillanceTaskBaseType::SDA_SpecialInstructions& OrbitalSurveillanceTaskBaseType::getSDA_SpecialInstructions() {
  return *sDA_SpecialInstructions_Accessor;
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::setSDA_SpecialInstructions(const uci::type::OrbitalSurveillanceTaskBaseType::SDA_SpecialInstructions& accessor) {
  if (&accessor != sDA_SpecialInstructions_Accessor.get()) {
    sDA_SpecialInstructions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<OrbitalSurveillanceTaskBaseType> OrbitalSurveillanceTaskBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceTaskBaseType : type};
  return std::unique_ptr<OrbitalSurveillanceTaskBaseType>(dynamic_cast<OrbitalSurveillanceTaskBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace OrbitalSurveillanceTaskBaseType_Names {

constexpr const char* Extern_Type_Name{"OrbitalSurveillanceTaskBaseType"};
constexpr const char* CapabilityType_Name{"CapabilityType"};
constexpr const char* SubCapabilityType_Name{"SubCapabilityType"};
constexpr const char* InformationObjective_Name{"InformationObjective"};
constexpr const char* MinSize_Name{"MinSize"};
constexpr const char* ConfirmObjectAcquisition_Name{"ConfirmObjectAcquisition"};
constexpr const char* ProductNeededBy_Name{"ProductNeededBy"};
constexpr const char* SensorConstraints_Name{"SensorConstraints"};
constexpr const char* SDA_SpecialInstructions_Name{"SDA_SpecialInstructions"};

} // namespace OrbitalSurveillanceTaskBaseType_Names

void OrbitalSurveillanceTaskBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalSurveillanceTaskBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalSurveillanceTaskBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceTaskBaseType_Names::CapabilityType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCapabilityType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceTaskBaseType_Names::SubCapabilityType_Name) {
      OrbitalSurveillanceSubCapabilityDetailsChoiceType::deserialize(valueType.second, accessor.getSubCapabilityType(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceTaskBaseType_Names::InformationObjective_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableInformationObjective().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceTaskBaseType_Names::MinSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinSize(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceTaskBaseType_Names::ConfirmObjectAcquisition_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConfirmObjectAcquisition(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceTaskBaseType_Names::ProductNeededBy_Name) {
      ProductNeededByType::deserialize(valueType.second, accessor.enableProductNeededBy(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceTaskBaseType_Names::SensorConstraints_Name) {
      AllowableSensorsType::deserialize(valueType.second, accessor.enableSensorConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceTaskBaseType_Names::SDA_SpecialInstructions_Name) {
      uci::type::OrbitalSurveillanceTaskBaseType::SDA_SpecialInstructions& boundedList = accessor.getSDA_SpecialInstructions();
      const uci::type::OrbitalSurveillanceTaskBaseType::SDA_SpecialInstructions::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::SDA_SpecialInstructionsConstraintType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalSurveillanceTaskBaseType::serialize(const uci::type::OrbitalSurveillanceTaskBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalSurveillanceTaskBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::orbitalSurveillanceTaskBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalSurveillanceTaskBaseType_Names::Extern_Type_Name);
    }
    OrbitalSurveillanceCapabilityEnum::serialize(accessor.getCapabilityType(), node, OrbitalSurveillanceTaskBaseType_Names::CapabilityType_Name, false);
    OrbitalSurveillanceSubCapabilityDetailsChoiceType::serialize(accessor.getSubCapabilityType(), node, OrbitalSurveillanceTaskBaseType_Names::SubCapabilityType_Name);
    if (accessor.hasInformationObjective()) {
      OrbitalSurveillanceSubCapabilityEnum::serialize(accessor.getInformationObjective(), node, OrbitalSurveillanceTaskBaseType_Names::InformationObjective_Name, false);
    }
    if (accessor.hasMinSize()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinSize(), node, OrbitalSurveillanceTaskBaseType_Names::MinSize_Name);
    }
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getConfirmObjectAcquisition(), node, OrbitalSurveillanceTaskBaseType_Names::ConfirmObjectAcquisition_Name);
    if (accessor.hasProductNeededBy()) {
      ProductNeededByType::serialize(accessor.getProductNeededBy(), node, OrbitalSurveillanceTaskBaseType_Names::ProductNeededBy_Name);
    }
    if (accessor.hasSensorConstraints()) {
      AllowableSensorsType::serialize(accessor.getSensorConstraints(), node, OrbitalSurveillanceTaskBaseType_Names::SensorConstraints_Name);
    }
    {
      const uci::type::OrbitalSurveillanceTaskBaseType::SDA_SpecialInstructions& boundedList = accessor.getSDA_SpecialInstructions();
      for (uci::type::OrbitalSurveillanceTaskBaseType::SDA_SpecialInstructions::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SDA_SpecialInstructionsConstraintType::serialize(boundedList.at(i), node, OrbitalSurveillanceTaskBaseType_Names::SDA_SpecialInstructions_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalSurveillanceTaskBaseType>().release());
}

uci::type::OrbitalSurveillanceTaskBaseType& OrbitalSurveillanceTaskBaseType::create(const uci::type::OrbitalSurveillanceTaskBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalSurveillanceTaskBaseType> newAccessor{boost::make_unique<asb_uci::type::OrbitalSurveillanceTaskBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalSurveillanceTaskBaseType::destroy(uci::type::OrbitalSurveillanceTaskBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalSurveillanceTaskBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

