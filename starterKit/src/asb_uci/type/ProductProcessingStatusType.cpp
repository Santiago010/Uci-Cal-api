/** @file ProductProcessingStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ProductProcessingStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CannotComplyType.h"
#include "asb_uci/type/InputProductType.h"
#include "asb_uci/type/ProcessingResultsPET.h"
#include "asb_uci/type/ProcessingTypeEnum.h"
#include "asb_uci/type/ProductMetadataID_Type.h"
#include "asb_uci/type/RequestProcessingStateEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CannotComplyType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/InputProductType.h"
#include "uci/type/PercentType.h"
#include "uci/type/ProcessingResultsPET.h"
#include "uci/type/ProcessingTypeEnum.h"
#include "uci/type/ProductMetadataID_Type.h"
#include "uci/type/ProductProcessingStatusType.h"
#include "uci/type/RequestProcessingStateEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductProcessingStatusType::ProductProcessingStatusType()
  : inputProduct_Accessor{boost::make_unique<InputProduct>(1, SIZE_MAX)},
    productProcessingState_Accessor{boost::make_unique<RequestProcessingStateEnum>()},
    outputProductMetadataID_Accessor{boost::make_unique<OutputProductMetadataID>(0, SIZE_MAX)} {
}

ProductProcessingStatusType::~ProductProcessingStatusType() = default;

void ProductProcessingStatusType::copy(const uci::type::ProductProcessingStatusType& accessor) {
  copyImpl(accessor, false);
}

void ProductProcessingStatusType::copyImpl(const uci::type::ProductProcessingStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ProductProcessingStatusType&>(accessor);
    setInputProduct(*(accessorImpl.inputProduct_Accessor));
    setProductProcessingState(*(accessorImpl.productProcessingState_Accessor));
    if (accessorImpl.statusDetails_Accessor) {
      setStatusDetails(*(accessorImpl.statusDetails_Accessor));
    } else {
      statusDetails_Accessor.reset();
    }
    if (accessorImpl.hasProcessingIndex()) {
      setProcessingIndex(accessorImpl.getProcessingIndex());
    } else {
      clearProcessingIndex();
    }
    if (accessorImpl.outputData_Accessor) {
      setOutputData(*(accessorImpl.outputData_Accessor));
    } else {
      outputData_Accessor.reset();
    }
    if (accessorImpl.processingType_Accessor) {
      setProcessingType(*(accessorImpl.processingType_Accessor));
    } else {
      processingType_Accessor.reset();
    }
    setOutputProductMetadataID(*(accessorImpl.outputProductMetadataID_Accessor));
    if (accessorImpl.hasEstimatedCompletionTime()) {
      setEstimatedCompletionTime(accessorImpl.getEstimatedCompletionTime());
    } else {
      clearEstimatedCompletionTime();
    }
    if (accessorImpl.hasEstimatedPercentComplete()) {
      setEstimatedPercentComplete(accessorImpl.getEstimatedPercentComplete());
    } else {
      clearEstimatedPercentComplete();
    }
  }
}

void ProductProcessingStatusType::reset() noexcept {
  inputProduct_Accessor->reset();
  productProcessingState_Accessor->reset();
  statusDetails_Accessor.reset();
  clearProcessingIndex();
  outputData_Accessor.reset();
  processingType_Accessor.reset();
  outputProductMetadataID_Accessor->reset();
  clearEstimatedCompletionTime();
  clearEstimatedPercentComplete();
}

const uci::type::ProductProcessingStatusType::InputProduct& ProductProcessingStatusType::getInputProduct() const {
  return *inputProduct_Accessor;
}

uci::type::ProductProcessingStatusType::InputProduct& ProductProcessingStatusType::getInputProduct() {
  return *inputProduct_Accessor;
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::setInputProduct(const uci::type::ProductProcessingStatusType::InputProduct& accessor) {
  if (&accessor != inputProduct_Accessor.get()) {
    inputProduct_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RequestProcessingStateEnum& ProductProcessingStatusType::getProductProcessingState() const {
  return *productProcessingState_Accessor;
}

uci::type::RequestProcessingStateEnum& ProductProcessingStatusType::getProductProcessingState() {
  return *productProcessingState_Accessor;
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::setProductProcessingState(const uci::type::RequestProcessingStateEnum& accessor) {
  if (&accessor != productProcessingState_Accessor.get()) {
    productProcessingState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::setProductProcessingState(uci::type::RequestProcessingStateEnum::EnumerationItem value) {
  productProcessingState_Accessor->setValue(value);
  return *this;
}


uci::type::CannotComplyType& ProductProcessingStatusType::getStatusDetails_() const {
  if (statusDetails_Accessor) {
    return *statusDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getStatusDetails(): An attempt was made to get an optional field that was not enabled, call hasStatusDetails() to determine if it is safe to call getStatusDetails()");
}

const uci::type::CannotComplyType& ProductProcessingStatusType::getStatusDetails() const {
  return getStatusDetails_();
}

uci::type::CannotComplyType& ProductProcessingStatusType::getStatusDetails() {
  return getStatusDetails_();
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::setStatusDetails(const uci::type::CannotComplyType& accessor) {
  enableStatusDetails(accessor.getAccessorType());
  if (&accessor != statusDetails_Accessor.get()) {
    statusDetails_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ProductProcessingStatusType::hasStatusDetails() const noexcept {
  return static_cast<bool>(statusDetails_Accessor);
}

uci::type::CannotComplyType& ProductProcessingStatusType::enableStatusDetails(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!statusDetails_Accessor) || (statusDetails_Accessor->getAccessorType() != requestedType)) {
    statusDetails_Accessor = CannotComplyType::create(requestedType);
    if (!statusDetails_Accessor) {
      throw uci::base::UCIException("Error in enableStatusDetails(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *statusDetails_Accessor;
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::clearStatusDetails() noexcept {
  statusDetails_Accessor.reset();
  return *this;
}

xs::UnsignedInt ProductProcessingStatusType::getProcessingIndex() const {
  if (processingIndex_Accessor) {
    return *processingIndex_Accessor;
  }
  throw uci::base::UCIException("Error in getProcessingIndex(): An attempt was made to get an optional field that was not enabled, call hasProcessingIndex() to determine if it is safe to call getProcessingIndex()");
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::setProcessingIndex(xs::UnsignedInt value) {
  processingIndex_Accessor = value;
  return *this;
}

bool ProductProcessingStatusType::hasProcessingIndex() const noexcept {
  return processingIndex_Accessor.has_value();
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::clearProcessingIndex() noexcept {
  processingIndex_Accessor.reset();
  return *this;
}

uci::type::ProcessingResultsPET& ProductProcessingStatusType::getOutputData_() const {
  if (outputData_Accessor) {
    return *outputData_Accessor;
  }
  throw uci::base::UCIException("Error in getOutputData(): An attempt was made to get an optional field that was not enabled, call hasOutputData() to determine if it is safe to call getOutputData()");
}

const uci::type::ProcessingResultsPET& ProductProcessingStatusType::getOutputData() const {
  return getOutputData_();
}

uci::type::ProcessingResultsPET& ProductProcessingStatusType::getOutputData() {
  return getOutputData_();
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::setOutputData(const uci::type::ProcessingResultsPET& accessor) {
  enableOutputData(accessor.getAccessorType());
  if (&accessor != outputData_Accessor.get()) {
    outputData_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ProductProcessingStatusType::hasOutputData() const noexcept {
  return static_cast<bool>(outputData_Accessor);
}

uci::type::ProcessingResultsPET& ProductProcessingStatusType::enableOutputData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::processingResultsPET : type};
  if ((!outputData_Accessor) || (outputData_Accessor->getAccessorType() != requestedType)) {
    outputData_Accessor = ProcessingResultsPET::create(requestedType);
    if (!outputData_Accessor) {
      throw uci::base::UCIException("Error in enableOutputData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *outputData_Accessor;
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::clearOutputData() noexcept {
  outputData_Accessor.reset();
  return *this;
}

uci::type::ProcessingTypeEnum& ProductProcessingStatusType::getProcessingType_() const {
  if (processingType_Accessor) {
    return *processingType_Accessor;
  }
  throw uci::base::UCIException("Error in getProcessingType(): An attempt was made to get an optional field that was not enabled, call hasProcessingType() to determine if it is safe to call getProcessingType()");
}

const uci::type::ProcessingTypeEnum& ProductProcessingStatusType::getProcessingType() const {
  return getProcessingType_();
}

uci::type::ProcessingTypeEnum& ProductProcessingStatusType::getProcessingType() {
  return getProcessingType_();
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::setProcessingType(const uci::type::ProcessingTypeEnum& accessor) {
  enableProcessingType();
  if (&accessor != processingType_Accessor.get()) {
    processingType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::setProcessingType(const uci::type::ProcessingTypeEnum::EnumerationItem value) {
  enableProcessingType().setValue(value);
  return *this;
}

bool ProductProcessingStatusType::hasProcessingType() const noexcept {
  return static_cast<bool>(processingType_Accessor);
}

uci::type::ProcessingTypeEnum& ProductProcessingStatusType::enableProcessingType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::processingTypeEnum : type};
  if ((!processingType_Accessor) || (processingType_Accessor->getAccessorType() != requestedType)) {
    processingType_Accessor = ProcessingTypeEnum::create(requestedType);
    if (!processingType_Accessor) {
      throw uci::base::UCIException("Error in enableProcessingType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *processingType_Accessor;
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::clearProcessingType() noexcept {
  processingType_Accessor.reset();
  return *this;
}

const uci::type::ProductProcessingStatusType::OutputProductMetadataID& ProductProcessingStatusType::getOutputProductMetadataID() const {
  return *outputProductMetadataID_Accessor;
}

uci::type::ProductProcessingStatusType::OutputProductMetadataID& ProductProcessingStatusType::getOutputProductMetadataID() {
  return *outputProductMetadataID_Accessor;
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::setOutputProductMetadataID(const uci::type::ProductProcessingStatusType::OutputProductMetadataID& accessor) {
  if (&accessor != outputProductMetadataID_Accessor.get()) {
    outputProductMetadataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue ProductProcessingStatusType::getEstimatedCompletionTime() const {
  if (estimatedCompletionTime_Accessor) {
    return *estimatedCompletionTime_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedCompletionTime(): An attempt was made to get an optional field that was not enabled, call hasEstimatedCompletionTime() to determine if it is safe to call getEstimatedCompletionTime()");
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::setEstimatedCompletionTime(uci::type::DateTimeTypeValue value) {
  estimatedCompletionTime_Accessor = value;
  return *this;
}

bool ProductProcessingStatusType::hasEstimatedCompletionTime() const noexcept {
  return estimatedCompletionTime_Accessor.has_value();
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::clearEstimatedCompletionTime() noexcept {
  estimatedCompletionTime_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue ProductProcessingStatusType::getEstimatedPercentComplete() const {
  if (estimatedPercentComplete_Accessor) {
    return *estimatedPercentComplete_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedPercentComplete(): An attempt was made to get an optional field that was not enabled, call hasEstimatedPercentComplete() to determine if it is safe to call getEstimatedPercentComplete()");
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::setEstimatedPercentComplete(uci::type::PercentTypeValue value) {
  estimatedPercentComplete_Accessor = value;
  return *this;
}

bool ProductProcessingStatusType::hasEstimatedPercentComplete() const noexcept {
  return estimatedPercentComplete_Accessor.has_value();
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::clearEstimatedPercentComplete() noexcept {
  estimatedPercentComplete_Accessor.reset();
  return *this;
}

std::unique_ptr<ProductProcessingStatusType> ProductProcessingStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productProcessingStatusType : type};
  return (requestedType == uci::type::accessorType::productProcessingStatusType) ? boost::make_unique<ProductProcessingStatusType>() : nullptr;
}

/**  */
namespace ProductProcessingStatusType_Names {

constexpr const char* Extern_Type_Name{"ProductProcessingStatusType"};
constexpr const char* InputProduct_Name{"InputProduct"};
constexpr const char* ProductProcessingState_Name{"ProductProcessingState"};
constexpr const char* StatusDetails_Name{"StatusDetails"};
constexpr const char* ProcessingIndex_Name{"ProcessingIndex"};
constexpr const char* OutputData_Name{"OutputData"};
constexpr const char* ProcessingType_Name{"ProcessingType"};
constexpr const char* OutputProductMetadataID_Name{"OutputProductMetadataID"};
constexpr const char* EstimatedCompletionTime_Name{"EstimatedCompletionTime"};
constexpr const char* EstimatedPercentComplete_Name{"EstimatedPercentComplete"};

} // namespace ProductProcessingStatusType_Names

void ProductProcessingStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductProcessingStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductProcessingStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductProcessingStatusType_Names::InputProduct_Name) {
      uci::type::ProductProcessingStatusType::InputProduct& boundedList = accessor.getInputProduct();
      const uci::type::ProductProcessingStatusType::InputProduct::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::InputProductType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductProcessingStatusType_Names::ProductProcessingState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getProductProcessingState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ProductProcessingStatusType_Names::StatusDetails_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableStatusDetails(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductProcessingStatusType_Names::ProcessingIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProcessingIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ProductProcessingStatusType_Names::OutputData_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableOutputData(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductProcessingStatusType_Names::ProcessingType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableProcessingType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ProductProcessingStatusType_Names::OutputProductMetadataID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductProcessingStatusType::OutputProductMetadataID& boundedList = accessor.getOutputProductMetadataID();
        const uci::type::ProductProcessingStatusType::OutputProductMetadataID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ProductProcessingStatusType_Names::EstimatedCompletionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedCompletionTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + ProductProcessingStatusType_Names::EstimatedPercentComplete_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedPercentComplete(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string ProductProcessingStatusType::serialize(const uci::type::ProductProcessingStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductProcessingStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductProcessingStatusType_Names::Extern_Type_Name);
  }
  {
    const uci::type::ProductProcessingStatusType::InputProduct& boundedList = accessor.getInputProduct();
    for (uci::type::ProductProcessingStatusType::InputProduct::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::InputProductType::serialize(boundedList.at(i), node, ProductProcessingStatusType_Names::InputProduct_Name);
    }
  }
  RequestProcessingStateEnum::serialize(accessor.getProductProcessingState(), node, ProductProcessingStatusType_Names::ProductProcessingState_Name, false);
  if (accessor.hasStatusDetails()) {
    CannotComplyType::serialize(accessor.getStatusDetails(), node, ProductProcessingStatusType_Names::StatusDetails_Name);
  }
  if (accessor.hasProcessingIndex()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getProcessingIndex(), node, ProductProcessingStatusType_Names::ProcessingIndex_Name);
  }
  if (accessor.hasOutputData()) {
    ProcessingResultsPET::serialize(accessor.getOutputData(), node, ProductProcessingStatusType_Names::OutputData_Name);
  }
  if (accessor.hasProcessingType()) {
    ProcessingTypeEnum::serialize(accessor.getProcessingType(), node, ProductProcessingStatusType_Names::ProcessingType_Name, false);
  }
  {
    const uci::type::ProductProcessingStatusType::OutputProductMetadataID& boundedList = accessor.getOutputProductMetadataID();
    for (uci::type::ProductProcessingStatusType::OutputProductMetadataID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductMetadataID_Type::serialize(boundedList.at(i), node, ProductProcessingStatusType_Names::OutputProductMetadataID_Name);
    }
  }
  if (accessor.hasEstimatedCompletionTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEstimatedCompletionTime(), node, ProductProcessingStatusType_Names::EstimatedCompletionTime_Name);
  }
  if (accessor.hasEstimatedPercentComplete()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedPercentComplete(), node, ProductProcessingStatusType_Names::EstimatedPercentComplete_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductProcessingStatusType>().release());
}

uci::type::ProductProcessingStatusType& ProductProcessingStatusType::create(const uci::type::ProductProcessingStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductProcessingStatusType> newAccessor{boost::make_unique<asb_uci::type::ProductProcessingStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductProcessingStatusType::destroy(uci::type::ProductProcessingStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::ProductProcessingStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

