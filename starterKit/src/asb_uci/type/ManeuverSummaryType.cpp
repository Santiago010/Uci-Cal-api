/** @file ManeuverSummaryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ManeuverSummaryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitKinematicsParametersType.h"
#include "../../../include/asb_uci/type/OrbitalManeuverDetailsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ManeuverSummaryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitKinematicsParametersType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalManeuverDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/UnitIntervalDoubleType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ManeuverSummaryType::ManeuverSummaryType() = default;

ManeuverSummaryType::~ManeuverSummaryType() = default;

void ManeuverSummaryType::copy(const uci::type::ManeuverSummaryType& accessor) {
  copyImpl(accessor, false);
}

void ManeuverSummaryType::copyImpl(const uci::type::ManeuverSummaryType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ManeuverSummaryType&>(accessor);
    if (accessorImpl.expectedManeuver_Accessor) {
      setExpectedManeuver(*(accessorImpl.expectedManeuver_Accessor));
    } else {
      expectedManeuver_Accessor.reset();
    }
    if (accessorImpl.actualManeuver_Accessor) {
      setActualManeuver(*(accessorImpl.actualManeuver_Accessor));
    } else {
      actualManeuver_Accessor.reset();
    }
    if (accessorImpl.hasNominalManeuverProbability()) {
      setNominalManeuverProbability(accessorImpl.getNominalManeuverProbability());
    } else {
      clearNominalManeuverProbability();
    }
    if (accessorImpl.postManeuverKinematics_Accessor) {
      setPostManeuverKinematics(*(accessorImpl.postManeuverKinematics_Accessor));
    } else {
      postManeuverKinematics_Accessor.reset();
    }
  }
}

void ManeuverSummaryType::reset() noexcept {
  expectedManeuver_Accessor.reset();
  actualManeuver_Accessor.reset();
  clearNominalManeuverProbability();
  postManeuverKinematics_Accessor.reset();
}

uci::type::OrbitalManeuverDetailsType& ManeuverSummaryType::getExpectedManeuver_() const {
  if (expectedManeuver_Accessor) {
    return *expectedManeuver_Accessor;
  }
  throw uci::base::UCIException("Error in getExpectedManeuver(): An attempt was made to get an optional field that was not enabled, call hasExpectedManeuver() to determine if it is safe to call getExpectedManeuver()");
}

const uci::type::OrbitalManeuverDetailsType& ManeuverSummaryType::getExpectedManeuver() const {
  return getExpectedManeuver_();
}

uci::type::OrbitalManeuverDetailsType& ManeuverSummaryType::getExpectedManeuver() {
  return getExpectedManeuver_();
}

uci::type::ManeuverSummaryType& ManeuverSummaryType::setExpectedManeuver(const uci::type::OrbitalManeuverDetailsType& accessor) {
  enableExpectedManeuver();
  if (&accessor != expectedManeuver_Accessor.get()) {
    expectedManeuver_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ManeuverSummaryType::hasExpectedManeuver() const noexcept {
  return static_cast<bool>(expectedManeuver_Accessor);
}

uci::type::OrbitalManeuverDetailsType& ManeuverSummaryType::enableExpectedManeuver(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalManeuverDetailsType : type};
  if ((!expectedManeuver_Accessor) || (expectedManeuver_Accessor->getAccessorType() != requestedType)) {
    expectedManeuver_Accessor = OrbitalManeuverDetailsType::create(requestedType);
    if (!expectedManeuver_Accessor) {
      throw uci::base::UCIException("Error in enableExpectedManeuver(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *expectedManeuver_Accessor;
}

uci::type::ManeuverSummaryType& ManeuverSummaryType::clearExpectedManeuver() noexcept {
  expectedManeuver_Accessor.reset();
  return *this;
}

uci::type::OrbitalManeuverDetailsType& ManeuverSummaryType::getActualManeuver_() const {
  if (actualManeuver_Accessor) {
    return *actualManeuver_Accessor;
  }
  throw uci::base::UCIException("Error in getActualManeuver(): An attempt was made to get an optional field that was not enabled, call hasActualManeuver() to determine if it is safe to call getActualManeuver()");
}

const uci::type::OrbitalManeuverDetailsType& ManeuverSummaryType::getActualManeuver() const {
  return getActualManeuver_();
}

uci::type::OrbitalManeuverDetailsType& ManeuverSummaryType::getActualManeuver() {
  return getActualManeuver_();
}

uci::type::ManeuverSummaryType& ManeuverSummaryType::setActualManeuver(const uci::type::OrbitalManeuverDetailsType& accessor) {
  enableActualManeuver();
  if (&accessor != actualManeuver_Accessor.get()) {
    actualManeuver_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ManeuverSummaryType::hasActualManeuver() const noexcept {
  return static_cast<bool>(actualManeuver_Accessor);
}

uci::type::OrbitalManeuverDetailsType& ManeuverSummaryType::enableActualManeuver(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalManeuverDetailsType : type};
  if ((!actualManeuver_Accessor) || (actualManeuver_Accessor->getAccessorType() != requestedType)) {
    actualManeuver_Accessor = OrbitalManeuverDetailsType::create(requestedType);
    if (!actualManeuver_Accessor) {
      throw uci::base::UCIException("Error in enableActualManeuver(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *actualManeuver_Accessor;
}

uci::type::ManeuverSummaryType& ManeuverSummaryType::clearActualManeuver() noexcept {
  actualManeuver_Accessor.reset();
  return *this;
}

uci::type::UnitIntervalDoubleTypeValue ManeuverSummaryType::getNominalManeuverProbability() const {
  if (nominalManeuverProbability_Accessor) {
    return *nominalManeuverProbability_Accessor;
  }
  throw uci::base::UCIException("Error in getNominalManeuverProbability(): An attempt was made to get an optional field that was not enabled, call hasNominalManeuverProbability() to determine if it is safe to call getNominalManeuverProbability()");
}

uci::type::ManeuverSummaryType& ManeuverSummaryType::setNominalManeuverProbability(uci::type::UnitIntervalDoubleTypeValue value) {
  nominalManeuverProbability_Accessor = value;
  return *this;
}

bool ManeuverSummaryType::hasNominalManeuverProbability() const noexcept {
  return nominalManeuverProbability_Accessor.has_value();
}

uci::type::ManeuverSummaryType& ManeuverSummaryType::clearNominalManeuverProbability() noexcept {
  nominalManeuverProbability_Accessor.reset();
  return *this;
}

uci::type::OrbitKinematicsParametersType& ManeuverSummaryType::getPostManeuverKinematics_() const {
  if (postManeuverKinematics_Accessor) {
    return *postManeuverKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getPostManeuverKinematics(): An attempt was made to get an optional field that was not enabled, call hasPostManeuverKinematics() to determine if it is safe to call getPostManeuverKinematics()");
}

const uci::type::OrbitKinematicsParametersType& ManeuverSummaryType::getPostManeuverKinematics() const {
  return getPostManeuverKinematics_();
}

uci::type::OrbitKinematicsParametersType& ManeuverSummaryType::getPostManeuverKinematics() {
  return getPostManeuverKinematics_();
}

uci::type::ManeuverSummaryType& ManeuverSummaryType::setPostManeuverKinematics(const uci::type::OrbitKinematicsParametersType& accessor) {
  enablePostManeuverKinematics();
  if (&accessor != postManeuverKinematics_Accessor.get()) {
    postManeuverKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ManeuverSummaryType::hasPostManeuverKinematics() const noexcept {
  return static_cast<bool>(postManeuverKinematics_Accessor);
}

uci::type::OrbitKinematicsParametersType& ManeuverSummaryType::enablePostManeuverKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsParametersType : type};
  if ((!postManeuverKinematics_Accessor) || (postManeuverKinematics_Accessor->getAccessorType() != requestedType)) {
    postManeuverKinematics_Accessor = OrbitKinematicsParametersType::create(requestedType);
    if (!postManeuverKinematics_Accessor) {
      throw uci::base::UCIException("Error in enablePostManeuverKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *postManeuverKinematics_Accessor;
}

uci::type::ManeuverSummaryType& ManeuverSummaryType::clearPostManeuverKinematics() noexcept {
  postManeuverKinematics_Accessor.reset();
  return *this;
}

std::unique_ptr<ManeuverSummaryType> ManeuverSummaryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::maneuverSummaryType : type};
  return (requestedType == uci::type::accessorType::maneuverSummaryType) ? boost::make_unique<ManeuverSummaryType>() : nullptr;
}

/**  */
namespace ManeuverSummaryType_Names {

constexpr const char* Extern_Type_Name{"ManeuverSummaryType"};
constexpr const char* ExpectedManeuver_Name{"ExpectedManeuver"};
constexpr const char* ActualManeuver_Name{"ActualManeuver"};
constexpr const char* NominalManeuverProbability_Name{"NominalManeuverProbability"};
constexpr const char* PostManeuverKinematics_Name{"PostManeuverKinematics"};

} // namespace ManeuverSummaryType_Names

void ManeuverSummaryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ManeuverSummaryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ManeuverSummaryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ManeuverSummaryType_Names::ExpectedManeuver_Name) {
      OrbitalManeuverDetailsType::deserialize(valueType.second, accessor.enableExpectedManeuver(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ManeuverSummaryType_Names::ActualManeuver_Name) {
      OrbitalManeuverDetailsType::deserialize(valueType.second, accessor.enableActualManeuver(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ManeuverSummaryType_Names::NominalManeuverProbability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNominalManeuverProbability(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ManeuverSummaryType_Names::PostManeuverKinematics_Name) {
      OrbitKinematicsParametersType::deserialize(valueType.second, accessor.enablePostManeuverKinematics(), nodeName, nsPrefix);
    }
  }
}

std::string ManeuverSummaryType::serialize(const uci::type::ManeuverSummaryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ManeuverSummaryType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ManeuverSummaryType_Names::Extern_Type_Name);
  }
  if (accessor.hasExpectedManeuver()) {
    OrbitalManeuverDetailsType::serialize(accessor.getExpectedManeuver(), node, ManeuverSummaryType_Names::ExpectedManeuver_Name);
  }
  if (accessor.hasActualManeuver()) {
    OrbitalManeuverDetailsType::serialize(accessor.getActualManeuver(), node, ManeuverSummaryType_Names::ActualManeuver_Name);
  }
  if (accessor.hasNominalManeuverProbability()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getNominalManeuverProbability(), node, ManeuverSummaryType_Names::NominalManeuverProbability_Name);
  }
  if (accessor.hasPostManeuverKinematics()) {
    OrbitKinematicsParametersType::serialize(accessor.getPostManeuverKinematics(), node, ManeuverSummaryType_Names::PostManeuverKinematics_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ManeuverSummaryType& ManeuverSummaryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ManeuverSummaryType>().release());
}

uci::type::ManeuverSummaryType& ManeuverSummaryType::create(const uci::type::ManeuverSummaryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ManeuverSummaryType> newAccessor{boost::make_unique<asb_uci::type::ManeuverSummaryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ManeuverSummaryType::destroy(uci::type::ManeuverSummaryType& accessor) {
  delete dynamic_cast<asb_uci::type::ManeuverSummaryType*>(&accessor);
}

} // namespace type

} // namespace uci

