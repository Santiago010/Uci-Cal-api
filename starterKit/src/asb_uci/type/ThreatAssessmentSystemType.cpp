/** @file ThreatAssessmentSystemType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ThreatAssessmentSystemType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/ThreatAssessmentMetricsType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/ThreatAssessmentMetricsType.h"
#include "uci/type/ThreatAssessmentSystemType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ThreatAssessmentSystemType::ThreatAssessmentSystemType()
  : entityID_Accessor{boost::make_unique<EntityID_Type>()} {
}

ThreatAssessmentSystemType::~ThreatAssessmentSystemType() = default;

void ThreatAssessmentSystemType::copy(const uci::type::ThreatAssessmentSystemType& accessor) {
  copyImpl(accessor, false);
}

void ThreatAssessmentSystemType::copyImpl(const uci::type::ThreatAssessmentSystemType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ThreatAssessmentSystemType&>(accessor);
    setEntityID(*(accessorImpl.entityID_Accessor));
    if (accessorImpl.withoutSuppression_Accessor) {
      setWithoutSuppression(*(accessorImpl.withoutSuppression_Accessor));
    } else {
      withoutSuppression_Accessor.reset();
    }
    if (accessorImpl.withSuppression_Accessor) {
      setWithSuppression(*(accessorImpl.withSuppression_Accessor));
    } else {
      withSuppression_Accessor.reset();
    }
  }
}

void ThreatAssessmentSystemType::reset() noexcept {
  if (entityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    entityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    entityID_Accessor->reset();
  }
  withoutSuppression_Accessor.reset();
  withSuppression_Accessor.reset();
}

const uci::type::EntityID_Type& ThreatAssessmentSystemType::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityID_Type& ThreatAssessmentSystemType::getEntityID() {
  return *entityID_Accessor;
}

uci::type::ThreatAssessmentSystemType& ThreatAssessmentSystemType::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& ThreatAssessmentSystemType::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentSystemType::getWithoutSuppression_() const {
  if (withoutSuppression_Accessor) {
    return *withoutSuppression_Accessor;
  }
  throw uci::base::UCIException("Error in getWithoutSuppression(): An attempt was made to get an optional field that was not enabled, call hasWithoutSuppression() to determine if it is safe to call getWithoutSuppression()");
}

const uci::type::ThreatAssessmentMetricsType& ThreatAssessmentSystemType::getWithoutSuppression() const {
  return getWithoutSuppression_();
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentSystemType::getWithoutSuppression() {
  return getWithoutSuppression_();
}

uci::type::ThreatAssessmentSystemType& ThreatAssessmentSystemType::setWithoutSuppression(const uci::type::ThreatAssessmentMetricsType& accessor) {
  enableWithoutSuppression();
  if (&accessor != withoutSuppression_Accessor.get()) {
    withoutSuppression_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThreatAssessmentSystemType::hasWithoutSuppression() const noexcept {
  return static_cast<bool>(withoutSuppression_Accessor);
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentSystemType::enableWithoutSuppression(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatAssessmentMetricsType : type};
  if ((!withoutSuppression_Accessor) || (withoutSuppression_Accessor->getAccessorType() != requestedType)) {
    withoutSuppression_Accessor = ThreatAssessmentMetricsType::create(requestedType);
    if (!withoutSuppression_Accessor) {
      throw uci::base::UCIException("Error in enableWithoutSuppression(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *withoutSuppression_Accessor;
}

uci::type::ThreatAssessmentSystemType& ThreatAssessmentSystemType::clearWithoutSuppression() noexcept {
  withoutSuppression_Accessor.reset();
  return *this;
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentSystemType::getWithSuppression_() const {
  if (withSuppression_Accessor) {
    return *withSuppression_Accessor;
  }
  throw uci::base::UCIException("Error in getWithSuppression(): An attempt was made to get an optional field that was not enabled, call hasWithSuppression() to determine if it is safe to call getWithSuppression()");
}

const uci::type::ThreatAssessmentMetricsType& ThreatAssessmentSystemType::getWithSuppression() const {
  return getWithSuppression_();
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentSystemType::getWithSuppression() {
  return getWithSuppression_();
}

uci::type::ThreatAssessmentSystemType& ThreatAssessmentSystemType::setWithSuppression(const uci::type::ThreatAssessmentMetricsType& accessor) {
  enableWithSuppression();
  if (&accessor != withSuppression_Accessor.get()) {
    withSuppression_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThreatAssessmentSystemType::hasWithSuppression() const noexcept {
  return static_cast<bool>(withSuppression_Accessor);
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentSystemType::enableWithSuppression(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatAssessmentMetricsType : type};
  if ((!withSuppression_Accessor) || (withSuppression_Accessor->getAccessorType() != requestedType)) {
    withSuppression_Accessor = ThreatAssessmentMetricsType::create(requestedType);
    if (!withSuppression_Accessor) {
      throw uci::base::UCIException("Error in enableWithSuppression(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *withSuppression_Accessor;
}

uci::type::ThreatAssessmentSystemType& ThreatAssessmentSystemType::clearWithSuppression() noexcept {
  withSuppression_Accessor.reset();
  return *this;
}

std::unique_ptr<ThreatAssessmentSystemType> ThreatAssessmentSystemType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatAssessmentSystemType : type};
  return (requestedType == uci::type::accessorType::threatAssessmentSystemType) ? boost::make_unique<ThreatAssessmentSystemType>() : nullptr;
}

/**  */
namespace ThreatAssessmentSystemType_Names {

constexpr const char* Extern_Type_Name{"ThreatAssessmentSystemType"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* WithoutSuppression_Name{"WithoutSuppression"};
constexpr const char* WithSuppression_Name{"WithSuppression"};

} // namespace ThreatAssessmentSystemType_Names

void ThreatAssessmentSystemType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ThreatAssessmentSystemType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ThreatAssessmentSystemType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ThreatAssessmentSystemType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreatAssessmentSystemType_Names::WithoutSuppression_Name) {
      ThreatAssessmentMetricsType::deserialize(valueType.second, accessor.enableWithoutSuppression(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreatAssessmentSystemType_Names::WithSuppression_Name) {
      ThreatAssessmentMetricsType::deserialize(valueType.second, accessor.enableWithSuppression(), nodeName, nsPrefix);
    }
  }
}

std::string ThreatAssessmentSystemType::serialize(const uci::type::ThreatAssessmentSystemType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ThreatAssessmentSystemType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ThreatAssessmentSystemType_Names::Extern_Type_Name);
  }
  EntityID_Type::serialize(accessor.getEntityID(), node, ThreatAssessmentSystemType_Names::EntityID_Name);
  if (accessor.hasWithoutSuppression()) {
    ThreatAssessmentMetricsType::serialize(accessor.getWithoutSuppression(), node, ThreatAssessmentSystemType_Names::WithoutSuppression_Name);
  }
  if (accessor.hasWithSuppression()) {
    ThreatAssessmentMetricsType::serialize(accessor.getWithSuppression(), node, ThreatAssessmentSystemType_Names::WithSuppression_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ThreatAssessmentSystemType& ThreatAssessmentSystemType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ThreatAssessmentSystemType>().release());
}

uci::type::ThreatAssessmentSystemType& ThreatAssessmentSystemType::create(const uci::type::ThreatAssessmentSystemType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ThreatAssessmentSystemType> newAccessor{boost::make_unique<asb_uci::type::ThreatAssessmentSystemType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ThreatAssessmentSystemType::destroy(uci::type::ThreatAssessmentSystemType& accessor) {
  delete dynamic_cast<asb_uci::type::ThreatAssessmentSystemType*>(&accessor);
}

} // namespace type

} // namespace uci

