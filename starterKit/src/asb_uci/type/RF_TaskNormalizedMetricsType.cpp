/** @file RF_TaskNormalizedMetricsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RF_TaskNormalizedMetricsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/NormalizationInterpolationEnum.h"
#include "../../../include/asb_uci/type/NormalizationTableType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NormalizationInterpolationEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NormalizationTableType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_TaskNormalizedMetricsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RF_TaskNormalizedMetricsType::RF_TaskNormalizedMetricsType()
  : capabilityID_Accessor{boost::make_unique<CapabilityID>(0, SIZE_MAX)},
    metricIdentifier_Accessor{boost::make_unique<ForeignKeyType>()},
    interpolationEnum_Accessor{boost::make_unique<NormalizationInterpolationEnum>()},
    normalizationElements_Accessor{boost::make_unique<NormalizationElements>(1, SIZE_MAX)} {
}

RF_TaskNormalizedMetricsType::~RF_TaskNormalizedMetricsType() = default;

void RF_TaskNormalizedMetricsType::copy(const uci::type::RF_TaskNormalizedMetricsType& accessor) {
  copyImpl(accessor, false);
}

void RF_TaskNormalizedMetricsType::copyImpl(const uci::type::RF_TaskNormalizedMetricsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RF_TaskNormalizedMetricsType&>(accessor);
    setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    setMetricIdentifier(*(accessorImpl.metricIdentifier_Accessor));
    setInterpolationEnum(*(accessorImpl.interpolationEnum_Accessor));
    setNormalizationElements(*(accessorImpl.normalizationElements_Accessor));
  }
}

void RF_TaskNormalizedMetricsType::reset() noexcept {
  capabilityID_Accessor->reset();
  if (metricIdentifier_Accessor->getAccessorType() != uci::type::accessorType::foreignKeyType) {
    metricIdentifier_Accessor = boost::make_unique<ForeignKeyType>();
  } else {
    metricIdentifier_Accessor->reset();
  }
  interpolationEnum_Accessor->reset();
  normalizationElements_Accessor->reset();
}

const uci::type::RF_TaskNormalizedMetricsType::CapabilityID& RF_TaskNormalizedMetricsType::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::RF_TaskNormalizedMetricsType::CapabilityID& RF_TaskNormalizedMetricsType::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::RF_TaskNormalizedMetricsType& RF_TaskNormalizedMetricsType::setCapabilityID(const uci::type::RF_TaskNormalizedMetricsType::CapabilityID& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ForeignKeyType& RF_TaskNormalizedMetricsType::getMetricIdentifier() const {
  return *metricIdentifier_Accessor;
}

uci::type::ForeignKeyType& RF_TaskNormalizedMetricsType::getMetricIdentifier() {
  return *metricIdentifier_Accessor;
}

uci::type::RF_TaskNormalizedMetricsType& RF_TaskNormalizedMetricsType::setMetricIdentifier(const uci::type::ForeignKeyType& accessor) {
  enableMetricIdentifier(accessor.getAccessorType());
  if (&accessor != metricIdentifier_Accessor.get()) {
    metricIdentifier_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ForeignKeyType& RF_TaskNormalizedMetricsType::enableMetricIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!metricIdentifier_Accessor) || (metricIdentifier_Accessor->getAccessorType() != requestedType)) {
    metricIdentifier_Accessor = ForeignKeyType::create(requestedType);
    if (!metricIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enableMetricIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *metricIdentifier_Accessor;
}

const uci::type::NormalizationInterpolationEnum& RF_TaskNormalizedMetricsType::getInterpolationEnum() const {
  return *interpolationEnum_Accessor;
}

uci::type::NormalizationInterpolationEnum& RF_TaskNormalizedMetricsType::getInterpolationEnum() {
  return *interpolationEnum_Accessor;
}

uci::type::RF_TaskNormalizedMetricsType& RF_TaskNormalizedMetricsType::setInterpolationEnum(const uci::type::NormalizationInterpolationEnum& accessor) {
  if (&accessor != interpolationEnum_Accessor.get()) {
    interpolationEnum_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RF_TaskNormalizedMetricsType& RF_TaskNormalizedMetricsType::setInterpolationEnum(uci::type::NormalizationInterpolationEnum::EnumerationItem value) {
  interpolationEnum_Accessor->setValue(value);
  return *this;
}


const uci::type::RF_TaskNormalizedMetricsType::NormalizationElements& RF_TaskNormalizedMetricsType::getNormalizationElements() const {
  return *normalizationElements_Accessor;
}

uci::type::RF_TaskNormalizedMetricsType::NormalizationElements& RF_TaskNormalizedMetricsType::getNormalizationElements() {
  return *normalizationElements_Accessor;
}

uci::type::RF_TaskNormalizedMetricsType& RF_TaskNormalizedMetricsType::setNormalizationElements(const uci::type::RF_TaskNormalizedMetricsType::NormalizationElements& accessor) {
  if (&accessor != normalizationElements_Accessor.get()) {
    normalizationElements_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RF_TaskNormalizedMetricsType> RF_TaskNormalizedMetricsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_TaskNormalizedMetricsType : type};
  return (requestedType == uci::type::accessorType::rF_TaskNormalizedMetricsType) ? boost::make_unique<RF_TaskNormalizedMetricsType>() : nullptr;
}

/**  */
namespace RF_TaskNormalizedMetricsType_Names {

constexpr const char* Extern_Type_Name{"RF_TaskNormalizedMetricsType"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* MetricIdentifier_Name{"MetricIdentifier"};
constexpr const char* InterpolationEnum_Name{"InterpolationEnum"};
constexpr const char* NormalizationElements_Name{"NormalizationElements"};

} // namespace RF_TaskNormalizedMetricsType_Names

void RF_TaskNormalizedMetricsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_TaskNormalizedMetricsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RF_TaskNormalizedMetricsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RF_TaskNormalizedMetricsType_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_TaskNormalizedMetricsType::CapabilityID& boundedList = accessor.getCapabilityID();
        const uci::type::RF_TaskNormalizedMetricsType::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RF_TaskNormalizedMetricsType_Names::MetricIdentifier_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableMetricIdentifier(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_TaskNormalizedMetricsType_Names::InterpolationEnum_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getInterpolationEnum().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RF_TaskNormalizedMetricsType_Names::NormalizationElements_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_TaskNormalizedMetricsType::NormalizationElements& boundedList = accessor.getNormalizationElements();
        const uci::type::RF_TaskNormalizedMetricsType::NormalizationElements::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::NormalizationTableType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string RF_TaskNormalizedMetricsType::serialize(const uci::type::RF_TaskNormalizedMetricsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RF_TaskNormalizedMetricsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RF_TaskNormalizedMetricsType_Names::Extern_Type_Name);
  }
  {
    const uci::type::RF_TaskNormalizedMetricsType::CapabilityID& boundedList = accessor.getCapabilityID();
    for (uci::type::RF_TaskNormalizedMetricsType::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityID_Type::serialize(boundedList.at(i), node, RF_TaskNormalizedMetricsType_Names::CapabilityID_Name);
    }
  }
  ForeignKeyType::serialize(accessor.getMetricIdentifier(), node, RF_TaskNormalizedMetricsType_Names::MetricIdentifier_Name);
  NormalizationInterpolationEnum::serialize(accessor.getInterpolationEnum(), node, RF_TaskNormalizedMetricsType_Names::InterpolationEnum_Name, false);
  {
    const uci::type::RF_TaskNormalizedMetricsType::NormalizationElements& boundedList = accessor.getNormalizationElements();
    for (uci::type::RF_TaskNormalizedMetricsType::NormalizationElements::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::NormalizationTableType::serialize(boundedList.at(i), node, RF_TaskNormalizedMetricsType_Names::NormalizationElements_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RF_TaskNormalizedMetricsType& RF_TaskNormalizedMetricsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RF_TaskNormalizedMetricsType>().release());
}

uci::type::RF_TaskNormalizedMetricsType& RF_TaskNormalizedMetricsType::create(const uci::type::RF_TaskNormalizedMetricsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RF_TaskNormalizedMetricsType> newAccessor{boost::make_unique<asb_uci::type::RF_TaskNormalizedMetricsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RF_TaskNormalizedMetricsType::destroy(uci::type::RF_TaskNormalizedMetricsType& accessor) {
  delete dynamic_cast<asb_uci::type::RF_TaskNormalizedMetricsType*>(&accessor);
}

} // namespace type

} // namespace uci

