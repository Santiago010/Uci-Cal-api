/** @file OrientationCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrientationCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/OrientationCovarianceType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrientationCovarianceType::OrientationCovarianceType() = default;

OrientationCovarianceType::~OrientationCovarianceType() = default;

void OrientationCovarianceType::copy(const uci::type::OrientationCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void OrientationCovarianceType::copyImpl(const uci::type::OrientationCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrientationCovarianceType&>(accessor);
    setRrRr(accessorImpl.rrRr_Accessor);
    setRrRp(accessorImpl.rrRp_Accessor);
    setRrRy(accessorImpl.rrRy_Accessor);
    setRpRp(accessorImpl.rpRp_Accessor);
    setRpRy(accessorImpl.rpRy_Accessor);
    setRyRy(accessorImpl.ryRy_Accessor);
  }
}

void OrientationCovarianceType::reset() noexcept {
  rrRr_Accessor = 0.0;
  rrRp_Accessor = 0.0;
  rrRy_Accessor = 0.0;
  rpRp_Accessor = 0.0;
  rpRy_Accessor = 0.0;
  ryRy_Accessor = 0.0;
}

xs::Double OrientationCovarianceType::getRrRr() const {
  return rrRr_Accessor;
}

uci::type::OrientationCovarianceType& OrientationCovarianceType::setRrRr(xs::Double value) {
  rrRr_Accessor = value;
  return *this;
}


xs::Double OrientationCovarianceType::getRrRp() const {
  return rrRp_Accessor;
}

uci::type::OrientationCovarianceType& OrientationCovarianceType::setRrRp(xs::Double value) {
  rrRp_Accessor = value;
  return *this;
}


xs::Double OrientationCovarianceType::getRrRy() const {
  return rrRy_Accessor;
}

uci::type::OrientationCovarianceType& OrientationCovarianceType::setRrRy(xs::Double value) {
  rrRy_Accessor = value;
  return *this;
}


xs::Double OrientationCovarianceType::getRpRp() const {
  return rpRp_Accessor;
}

uci::type::OrientationCovarianceType& OrientationCovarianceType::setRpRp(xs::Double value) {
  rpRp_Accessor = value;
  return *this;
}


xs::Double OrientationCovarianceType::getRpRy() const {
  return rpRy_Accessor;
}

uci::type::OrientationCovarianceType& OrientationCovarianceType::setRpRy(xs::Double value) {
  rpRy_Accessor = value;
  return *this;
}


xs::Double OrientationCovarianceType::getRyRy() const {
  return ryRy_Accessor;
}

uci::type::OrientationCovarianceType& OrientationCovarianceType::setRyRy(xs::Double value) {
  ryRy_Accessor = value;
  return *this;
}


std::unique_ptr<OrientationCovarianceType> OrientationCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orientationCovarianceType : type};
  return (requestedType == uci::type::accessorType::orientationCovarianceType) ? boost::make_unique<OrientationCovarianceType>() : nullptr;
}

/**  */
namespace OrientationCovarianceType_Names {

constexpr const char* Extern_Type_Name{"OrientationCovarianceType"};
constexpr const char* RrRr_Name{"RrRr"};
constexpr const char* RrRp_Name{"RrRp"};
constexpr const char* RrRy_Name{"RrRy"};
constexpr const char* RpRp_Name{"RpRp"};
constexpr const char* RpRy_Name{"RpRy"};
constexpr const char* RyRy_Name{"RyRy"};

} // namespace OrientationCovarianceType_Names

void OrientationCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrientationCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrientationCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrientationCovarianceType_Names::RrRr_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRrRr(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrientationCovarianceType_Names::RrRp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRrRp(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrientationCovarianceType_Names::RrRy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRrRy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrientationCovarianceType_Names::RpRp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRpRp(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrientationCovarianceType_Names::RpRy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRpRy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrientationCovarianceType_Names::RyRy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRyRy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string OrientationCovarianceType::serialize(const uci::type::OrientationCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrientationCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrientationCovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRrRr(), node, OrientationCovarianceType_Names::RrRr_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRrRp(), node, OrientationCovarianceType_Names::RrRp_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRrRy(), node, OrientationCovarianceType_Names::RrRy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRpRp(), node, OrientationCovarianceType_Names::RpRp_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRpRy(), node, OrientationCovarianceType_Names::RpRy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRyRy(), node, OrientationCovarianceType_Names::RyRy_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrientationCovarianceType& OrientationCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrientationCovarianceType>().release());
}

uci::type::OrientationCovarianceType& OrientationCovarianceType::create(const uci::type::OrientationCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrientationCovarianceType> newAccessor{boost::make_unique<asb_uci::type::OrientationCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrientationCovarianceType::destroy(uci::type::OrientationCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::OrientationCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

