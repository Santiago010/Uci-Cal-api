/** @file PO_TrackCapabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_TrackCapabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DoubleMinMaxType.h"
#include "asb_uci/type/DurationRangeType.h"
#include "asb_uci/type/IdentityBasicType.h"
#include "asb_uci/type/PO_CoastSettingOptionsType.h"
#include "asb_uci/type/PO_OffsetTrackSettingsType.h"
#include "asb_uci/type/PO_TrackCapabilityTypeEnum.h"
#include "asb_uci/type/TrackOptionsID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DoubleMinMaxType.h"
#include "uci/type/DurationRangeType.h"
#include "uci/type/IdentityBasicType.h"
#include "uci/type/PO_CoastSettingOptionsType.h"
#include "uci/type/PO_OffsetTrackSettingsType.h"
#include "uci/type/PO_TrackCapabilityType.h"
#include "uci/type/PO_TrackCapabilityTypeEnum.h"
#include "uci/type/TrackOptionsID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_TrackCapabilityType::PO_TrackCapabilityType()
  : trackOptionID_Accessor{boost::make_unique<TrackOptionsID_Type>()},
    trackControlOptions_Accessor{boost::make_unique<TrackControlOptions>(0, 3)},
    coastSettingOptions_Accessor{boost::make_unique<CoastSettingOptions>(0, 6)} {
}

PO_TrackCapabilityType::~PO_TrackCapabilityType() = default;

void PO_TrackCapabilityType::copy(const uci::type::PO_TrackCapabilityType& accessor) {
  copyImpl(accessor, false);
}

void PO_TrackCapabilityType::copyImpl(const uci::type::PO_TrackCapabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_TrackCapabilityType&>(accessor);
    setTrackOptionID(*(accessorImpl.trackOptionID_Accessor));
    setTrackControlOptions(*(accessorImpl.trackControlOptions_Accessor));
    if (accessorImpl.aTR_Filter_Accessor) {
      setATR_Filter(*(accessorImpl.aTR_Filter_Accessor));
    } else {
      aTR_Filter_Accessor.reset();
    }
    if (accessorImpl.offsetTrackSettings_Accessor) {
      setOffsetTrackSettings(*(accessorImpl.offsetTrackSettings_Accessor));
    } else {
      offsetTrackSettings_Accessor.reset();
    }
    if (accessorImpl.observedEntityThresholdSettings_Accessor) {
      setObservedEntityThresholdSettings(*(accessorImpl.observedEntityThresholdSettings_Accessor));
    } else {
      observedEntityThresholdSettings_Accessor.reset();
    }
    if (accessorImpl.trackingRange_Accessor) {
      setTrackingRange(*(accessorImpl.trackingRange_Accessor));
    } else {
      trackingRange_Accessor.reset();
    }
    setCoastSettingOptions(*(accessorImpl.coastSettingOptions_Accessor));
    if (accessorImpl.hasBlankingVolumeSupported()) {
      setBlankingVolumeSupported(accessorImpl.getBlankingVolumeSupported());
    } else {
      clearBlankingVolumeSupported();
    }
  }
}

void PO_TrackCapabilityType::reset() noexcept {
  trackOptionID_Accessor->reset();
  trackControlOptions_Accessor->reset();
  aTR_Filter_Accessor.reset();
  offsetTrackSettings_Accessor.reset();
  observedEntityThresholdSettings_Accessor.reset();
  trackingRange_Accessor.reset();
  coastSettingOptions_Accessor->reset();
  clearBlankingVolumeSupported();
}

const uci::type::TrackOptionsID_Type& PO_TrackCapabilityType::getTrackOptionID() const {
  return *trackOptionID_Accessor;
}

uci::type::TrackOptionsID_Type& PO_TrackCapabilityType::getTrackOptionID() {
  return *trackOptionID_Accessor;
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::setTrackOptionID(const uci::type::TrackOptionsID_Type& accessor) {
  if (&accessor != trackOptionID_Accessor.get()) {
    trackOptionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_TrackCapabilityType::TrackControlOptions& PO_TrackCapabilityType::getTrackControlOptions() const {
  return *trackControlOptions_Accessor;
}

uci::type::PO_TrackCapabilityType::TrackControlOptions& PO_TrackCapabilityType::getTrackControlOptions() {
  return *trackControlOptions_Accessor;
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::setTrackControlOptions(const uci::type::PO_TrackCapabilityType::TrackControlOptions& accessor) {
  if (&accessor != trackControlOptions_Accessor.get()) {
    trackControlOptions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IdentityBasicType& PO_TrackCapabilityType::getATR_Filter_() const {
  if (aTR_Filter_Accessor) {
    return *aTR_Filter_Accessor;
  }
  throw uci::base::UCIException("Error in getATR_Filter(): An attempt was made to get an optional field that was not enabled, call hasATR_Filter() to determine if it is safe to call getATR_Filter()");
}

const uci::type::IdentityBasicType& PO_TrackCapabilityType::getATR_Filter() const {
  return getATR_Filter_();
}

uci::type::IdentityBasicType& PO_TrackCapabilityType::getATR_Filter() {
  return getATR_Filter_();
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::setATR_Filter(const uci::type::IdentityBasicType& accessor) {
  enableATR_Filter();
  if (&accessor != aTR_Filter_Accessor.get()) {
    aTR_Filter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_TrackCapabilityType::hasATR_Filter() const noexcept {
  return static_cast<bool>(aTR_Filter_Accessor);
}

uci::type::IdentityBasicType& PO_TrackCapabilityType::enableATR_Filter(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::identityBasicType : type};
  if ((!aTR_Filter_Accessor) || (aTR_Filter_Accessor->getAccessorType() != requestedType)) {
    aTR_Filter_Accessor = IdentityBasicType::create(requestedType);
    if (!aTR_Filter_Accessor) {
      throw uci::base::UCIException("Error in enableATR_Filter(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aTR_Filter_Accessor;
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::clearATR_Filter() noexcept {
  aTR_Filter_Accessor.reset();
  return *this;
}

uci::type::PO_OffsetTrackSettingsType& PO_TrackCapabilityType::getOffsetTrackSettings_() const {
  if (offsetTrackSettings_Accessor) {
    return *offsetTrackSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getOffsetTrackSettings(): An attempt was made to get an optional field that was not enabled, call hasOffsetTrackSettings() to determine if it is safe to call getOffsetTrackSettings()");
}

const uci::type::PO_OffsetTrackSettingsType& PO_TrackCapabilityType::getOffsetTrackSettings() const {
  return getOffsetTrackSettings_();
}

uci::type::PO_OffsetTrackSettingsType& PO_TrackCapabilityType::getOffsetTrackSettings() {
  return getOffsetTrackSettings_();
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::setOffsetTrackSettings(const uci::type::PO_OffsetTrackSettingsType& accessor) {
  enableOffsetTrackSettings();
  if (&accessor != offsetTrackSettings_Accessor.get()) {
    offsetTrackSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_TrackCapabilityType::hasOffsetTrackSettings() const noexcept {
  return static_cast<bool>(offsetTrackSettings_Accessor);
}

uci::type::PO_OffsetTrackSettingsType& PO_TrackCapabilityType::enableOffsetTrackSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_OffsetTrackSettingsType : type};
  if ((!offsetTrackSettings_Accessor) || (offsetTrackSettings_Accessor->getAccessorType() != requestedType)) {
    offsetTrackSettings_Accessor = PO_OffsetTrackSettingsType::create(requestedType);
    if (!offsetTrackSettings_Accessor) {
      throw uci::base::UCIException("Error in enableOffsetTrackSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *offsetTrackSettings_Accessor;
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::clearOffsetTrackSettings() noexcept {
  offsetTrackSettings_Accessor.reset();
  return *this;
}

uci::type::DurationRangeType& PO_TrackCapabilityType::getObservedEntityThresholdSettings_() const {
  if (observedEntityThresholdSettings_Accessor) {
    return *observedEntityThresholdSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getObservedEntityThresholdSettings(): An attempt was made to get an optional field that was not enabled, call hasObservedEntityThresholdSettings() to determine if it is safe to call getObservedEntityThresholdSettings()");
}

const uci::type::DurationRangeType& PO_TrackCapabilityType::getObservedEntityThresholdSettings() const {
  return getObservedEntityThresholdSettings_();
}

uci::type::DurationRangeType& PO_TrackCapabilityType::getObservedEntityThresholdSettings() {
  return getObservedEntityThresholdSettings_();
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::setObservedEntityThresholdSettings(const uci::type::DurationRangeType& accessor) {
  enableObservedEntityThresholdSettings();
  if (&accessor != observedEntityThresholdSettings_Accessor.get()) {
    observedEntityThresholdSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_TrackCapabilityType::hasObservedEntityThresholdSettings() const noexcept {
  return static_cast<bool>(observedEntityThresholdSettings_Accessor);
}

uci::type::DurationRangeType& PO_TrackCapabilityType::enableObservedEntityThresholdSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::durationRangeType : type};
  if ((!observedEntityThresholdSettings_Accessor) || (observedEntityThresholdSettings_Accessor->getAccessorType() != requestedType)) {
    observedEntityThresholdSettings_Accessor = DurationRangeType::create(requestedType);
    if (!observedEntityThresholdSettings_Accessor) {
      throw uci::base::UCIException("Error in enableObservedEntityThresholdSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *observedEntityThresholdSettings_Accessor;
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::clearObservedEntityThresholdSettings() noexcept {
  observedEntityThresholdSettings_Accessor.reset();
  return *this;
}

uci::type::DoubleMinMaxType& PO_TrackCapabilityType::getTrackingRange_() const {
  if (trackingRange_Accessor) {
    return *trackingRange_Accessor;
  }
  throw uci::base::UCIException("Error in getTrackingRange(): An attempt was made to get an optional field that was not enabled, call hasTrackingRange() to determine if it is safe to call getTrackingRange()");
}

const uci::type::DoubleMinMaxType& PO_TrackCapabilityType::getTrackingRange() const {
  return getTrackingRange_();
}

uci::type::DoubleMinMaxType& PO_TrackCapabilityType::getTrackingRange() {
  return getTrackingRange_();
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::setTrackingRange(const uci::type::DoubleMinMaxType& accessor) {
  enableTrackingRange();
  if (&accessor != trackingRange_Accessor.get()) {
    trackingRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_TrackCapabilityType::hasTrackingRange() const noexcept {
  return static_cast<bool>(trackingRange_Accessor);
}

uci::type::DoubleMinMaxType& PO_TrackCapabilityType::enableTrackingRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::doubleMinMaxType : type};
  if ((!trackingRange_Accessor) || (trackingRange_Accessor->getAccessorType() != requestedType)) {
    trackingRange_Accessor = DoubleMinMaxType::create(requestedType);
    if (!trackingRange_Accessor) {
      throw uci::base::UCIException("Error in enableTrackingRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *trackingRange_Accessor;
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::clearTrackingRange() noexcept {
  trackingRange_Accessor.reset();
  return *this;
}

const uci::type::PO_TrackCapabilityType::CoastSettingOptions& PO_TrackCapabilityType::getCoastSettingOptions() const {
  return *coastSettingOptions_Accessor;
}

uci::type::PO_TrackCapabilityType::CoastSettingOptions& PO_TrackCapabilityType::getCoastSettingOptions() {
  return *coastSettingOptions_Accessor;
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::setCoastSettingOptions(const uci::type::PO_TrackCapabilityType::CoastSettingOptions& accessor) {
  if (&accessor != coastSettingOptions_Accessor.get()) {
    coastSettingOptions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean PO_TrackCapabilityType::getBlankingVolumeSupported() const {
  if (blankingVolumeSupported_Accessor) {
    return *blankingVolumeSupported_Accessor;
  }
  throw uci::base::UCIException("Error in getBlankingVolumeSupported(): An attempt was made to get an optional field that was not enabled, call hasBlankingVolumeSupported() to determine if it is safe to call getBlankingVolumeSupported()");
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::setBlankingVolumeSupported(xs::Boolean value) {
  blankingVolumeSupported_Accessor = value;
  return *this;
}

bool PO_TrackCapabilityType::hasBlankingVolumeSupported() const noexcept {
  return blankingVolumeSupported_Accessor.has_value();
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::clearBlankingVolumeSupported() noexcept {
  blankingVolumeSupported_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_TrackCapabilityType> PO_TrackCapabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_TrackCapabilityType : type};
  return (requestedType == uci::type::accessorType::pO_TrackCapabilityType) ? boost::make_unique<PO_TrackCapabilityType>() : nullptr;
}

/**  */
namespace PO_TrackCapabilityType_Names {

constexpr const char* Extern_Type_Name{"PO_TrackCapabilityType"};
constexpr const char* TrackOptionID_Name{"TrackOptionID"};
constexpr const char* TrackControlOptions_Name{"TrackControlOptions"};
constexpr const char* ATR_Filter_Name{"ATR_Filter"};
constexpr const char* OffsetTrackSettings_Name{"OffsetTrackSettings"};
constexpr const char* ObservedEntityThresholdSettings_Name{"ObservedEntityThresholdSettings"};
constexpr const char* TrackingRange_Name{"TrackingRange"};
constexpr const char* CoastSettingOptions_Name{"CoastSettingOptions"};
constexpr const char* BlankingVolumeSupported_Name{"BlankingVolumeSupported"};

} // namespace PO_TrackCapabilityType_Names

void PO_TrackCapabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_TrackCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_TrackCapabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::TrackOptionID_Name) {
      TrackOptionsID_Type::deserialize(valueType.second, accessor.getTrackOptionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::TrackControlOptions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_TrackCapabilityType::TrackControlOptions& boundedList = accessor.getTrackControlOptions();
        const uci::type::PO_TrackCapabilityType::TrackControlOptions::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::ATR_Filter_Name) {
      IdentityBasicType::deserialize(valueType.second, accessor.enableATR_Filter(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::OffsetTrackSettings_Name) {
      PO_OffsetTrackSettingsType::deserialize(valueType.second, accessor.enableOffsetTrackSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::ObservedEntityThresholdSettings_Name) {
      DurationRangeType::deserialize(valueType.second, accessor.enableObservedEntityThresholdSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::TrackingRange_Name) {
      DoubleMinMaxType::deserialize(valueType.second, accessor.enableTrackingRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::CoastSettingOptions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_TrackCapabilityType::CoastSettingOptions& boundedList = accessor.getCoastSettingOptions();
        const uci::type::PO_TrackCapabilityType::CoastSettingOptions::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_CoastSettingOptionsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::BlankingVolumeSupported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBlankingVolumeSupported(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string PO_TrackCapabilityType::serialize(const uci::type::PO_TrackCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_TrackCapabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_TrackCapabilityType_Names::Extern_Type_Name);
  }
  TrackOptionsID_Type::serialize(accessor.getTrackOptionID(), node, PO_TrackCapabilityType_Names::TrackOptionID_Name);
  {
    const uci::type::PO_TrackCapabilityType::TrackControlOptions& boundedList = accessor.getTrackControlOptions();
    for (uci::type::PO_TrackCapabilityType::TrackControlOptions::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_TrackCapabilityTypeEnum::serialize(boundedList.at(i), node, PO_TrackCapabilityType_Names::TrackControlOptions_Name, false);
    }
  }
  if (accessor.hasATR_Filter()) {
    IdentityBasicType::serialize(accessor.getATR_Filter(), node, PO_TrackCapabilityType_Names::ATR_Filter_Name);
  }
  if (accessor.hasOffsetTrackSettings()) {
    PO_OffsetTrackSettingsType::serialize(accessor.getOffsetTrackSettings(), node, PO_TrackCapabilityType_Names::OffsetTrackSettings_Name);
  }
  if (accessor.hasObservedEntityThresholdSettings()) {
    DurationRangeType::serialize(accessor.getObservedEntityThresholdSettings(), node, PO_TrackCapabilityType_Names::ObservedEntityThresholdSettings_Name);
  }
  if (accessor.hasTrackingRange()) {
    DoubleMinMaxType::serialize(accessor.getTrackingRange(), node, PO_TrackCapabilityType_Names::TrackingRange_Name);
  }
  {
    const uci::type::PO_TrackCapabilityType::CoastSettingOptions& boundedList = accessor.getCoastSettingOptions();
    for (uci::type::PO_TrackCapabilityType::CoastSettingOptions::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_CoastSettingOptionsType::serialize(boundedList.at(i), node, PO_TrackCapabilityType_Names::CoastSettingOptions_Name);
    }
  }
  if (accessor.hasBlankingVolumeSupported()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getBlankingVolumeSupported(), node, PO_TrackCapabilityType_Names::BlankingVolumeSupported_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_TrackCapabilityType>().release());
}

uci::type::PO_TrackCapabilityType& PO_TrackCapabilityType::create(const uci::type::PO_TrackCapabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_TrackCapabilityType> newAccessor{boost::make_unique<asb_uci::type::PO_TrackCapabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_TrackCapabilityType::destroy(uci::type::PO_TrackCapabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_TrackCapabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

