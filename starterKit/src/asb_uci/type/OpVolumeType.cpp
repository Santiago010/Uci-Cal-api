/** @file OpVolumeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OpVolumeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/GeocentricVolumeType.h"
#include "asb_uci/type/GeometricVolumeType.h"
#include "asb_uci/type/OrbitAltitudeEnum.h"
#include "asb_uci/type/OrbitQualitativeEnum.h"
#include "asb_uci/type/OrbitRegimeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/GeocentricVolumeType.h"
#include "uci/type/GeometricVolumeType.h"
#include "uci/type/OpVolumeType.h"
#include "uci/type/OrbitAltitudeEnum.h"
#include "uci/type/OrbitQualitativeEnum.h"
#include "uci/type/OrbitRegimeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpVolumeType::OpVolumeType() = default;

OpVolumeType::~OpVolumeType() = default;

void OpVolumeType::copy(const uci::type::OpVolumeType& accessor) {
  copyImpl(accessor, false);
}

void OpVolumeType::copyImpl(const uci::type::OpVolumeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OpVolumeType&>(accessor);
    if (accessorImpl.geometricVolume_Accessor) {
      setGeometricVolume(*(accessorImpl.geometricVolume_Accessor));
    } else {
      geometricVolume_Accessor.reset();
    }
    if (accessorImpl.geocentricVolume_Accessor) {
      setGeocentricVolume(*(accessorImpl.geocentricVolume_Accessor));
    } else {
      geocentricVolume_Accessor.reset();
    }
    if (accessorImpl.orbitRegime_Accessor) {
      setOrbitRegime(*(accessorImpl.orbitRegime_Accessor));
    } else {
      orbitRegime_Accessor.reset();
    }
    if (accessorImpl.orbitAltitude_Accessor) {
      setOrbitAltitude(*(accessorImpl.orbitAltitude_Accessor));
    } else {
      orbitAltitude_Accessor.reset();
    }
    if (accessorImpl.qualitative_Accessor) {
      setQualitative(*(accessorImpl.qualitative_Accessor));
    } else {
      qualitative_Accessor.reset();
    }
  }
}

void OpVolumeType::reset() noexcept {
  geometricVolume_Accessor.reset();
  geocentricVolume_Accessor.reset();
  orbitRegime_Accessor.reset();
  orbitAltitude_Accessor.reset();
  qualitative_Accessor.reset();
}

uci::type::OpVolumeType::OpVolumeTypeChoice OpVolumeType::getOpVolumeTypeChoiceOrdinal() const noexcept {
  if (geometricVolume_Accessor) {
    return OPVOLUMETYPE_CHOICE_GEOMETRICVOLUME;
  }
  if (geocentricVolume_Accessor) {
    return OPVOLUMETYPE_CHOICE_GEOCENTRICVOLUME;
  }
  if (orbitRegime_Accessor) {
    return OPVOLUMETYPE_CHOICE_ORBITREGIME;
  }
  if (orbitAltitude_Accessor) {
    return OPVOLUMETYPE_CHOICE_ORBITALTITUDE;
  }
  if (qualitative_Accessor) {
    return OPVOLUMETYPE_CHOICE_QUALITATIVE;
  }
  return OPVOLUMETYPE_CHOICE_NONE;
}

uci::type::OpVolumeType& OpVolumeType::setOpVolumeTypeChoiceOrdinal(uci::type::OpVolumeType::OpVolumeTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case OPVOLUMETYPE_CHOICE_GEOMETRICVOLUME:
      chooseGeometricVolume("setOpVolumeTypeChoiceOrdinal", type);
      break;
    case OPVOLUMETYPE_CHOICE_GEOCENTRICVOLUME:
      chooseGeocentricVolume("setOpVolumeTypeChoiceOrdinal", type);
      break;
    case OPVOLUMETYPE_CHOICE_ORBITREGIME:
      chooseOrbitRegime("setOpVolumeTypeChoiceOrdinal", type);
      break;
    case OPVOLUMETYPE_CHOICE_ORBITALTITUDE:
      chooseOrbitAltitude("setOpVolumeTypeChoiceOrdinal", type);
      break;
    case OPVOLUMETYPE_CHOICE_QUALITATIVE:
      chooseQualitative("setOpVolumeTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOpVolumeTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::GeometricVolumeType& OpVolumeType::getGeometricVolume_() const {
  if (geometricVolume_Accessor) {
    return *geometricVolume_Accessor;
  }
  throw uci::base::UCIException("Error in getGeometricVolume(): Unable to get GeometricVolume, field not selected");
}

const uci::type::GeometricVolumeType& OpVolumeType::getGeometricVolume() const {
  return getGeometricVolume_();
}

uci::type::GeometricVolumeType& OpVolumeType::getGeometricVolume() {
  return getGeometricVolume_();
}

uci::type::OpVolumeType& OpVolumeType::setGeometricVolume(const uci::type::GeometricVolumeType& accessor) {
  chooseGeometricVolume();
  if (&accessor != geometricVolume_Accessor.get()) {
    geometricVolume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpVolumeType::isGeometricVolume() const noexcept {
  return static_cast<bool>(geometricVolume_Accessor);
}

uci::type::GeometricVolumeType& OpVolumeType::chooseGeometricVolume(const std::string& method, uci::base::accessorType::AccessorType type) {
  geocentricVolume_Accessor.reset();
  orbitRegime_Accessor.reset();
  orbitAltitude_Accessor.reset();
  qualitative_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::geometricVolumeType : type};
  if ((!geometricVolume_Accessor) || (geometricVolume_Accessor->getAccessorType() != requestedType)) {
    geometricVolume_Accessor = GeometricVolumeType::create(type);
    if (!geometricVolume_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *geometricVolume_Accessor;
}

uci::type::GeometricVolumeType& OpVolumeType::chooseGeometricVolume(uci::base::accessorType::AccessorType type) {
  return chooseGeometricVolume("chooseGeometricVolume", type);
}

uci::type::GeocentricVolumeType& OpVolumeType::getGeocentricVolume_() const {
  if (geocentricVolume_Accessor) {
    return *geocentricVolume_Accessor;
  }
  throw uci::base::UCIException("Error in getGeocentricVolume(): Unable to get GeocentricVolume, field not selected");
}

const uci::type::GeocentricVolumeType& OpVolumeType::getGeocentricVolume() const {
  return getGeocentricVolume_();
}

uci::type::GeocentricVolumeType& OpVolumeType::getGeocentricVolume() {
  return getGeocentricVolume_();
}

uci::type::OpVolumeType& OpVolumeType::setGeocentricVolume(const uci::type::GeocentricVolumeType& accessor) {
  chooseGeocentricVolume();
  if (&accessor != geocentricVolume_Accessor.get()) {
    geocentricVolume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpVolumeType::isGeocentricVolume() const noexcept {
  return static_cast<bool>(geocentricVolume_Accessor);
}

uci::type::GeocentricVolumeType& OpVolumeType::chooseGeocentricVolume(const std::string& method, uci::base::accessorType::AccessorType type) {
  geometricVolume_Accessor.reset();
  orbitRegime_Accessor.reset();
  orbitAltitude_Accessor.reset();
  qualitative_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::geocentricVolumeType : type};
  if ((!geocentricVolume_Accessor) || (geocentricVolume_Accessor->getAccessorType() != requestedType)) {
    geocentricVolume_Accessor = GeocentricVolumeType::create(type);
    if (!geocentricVolume_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *geocentricVolume_Accessor;
}

uci::type::GeocentricVolumeType& OpVolumeType::chooseGeocentricVolume(uci::base::accessorType::AccessorType type) {
  return chooseGeocentricVolume("chooseGeocentricVolume", type);
}

uci::type::OrbitRegimeType& OpVolumeType::getOrbitRegime_() const {
  if (orbitRegime_Accessor) {
    return *orbitRegime_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitRegime(): Unable to get OrbitRegime, field not selected");
}

const uci::type::OrbitRegimeType& OpVolumeType::getOrbitRegime() const {
  return getOrbitRegime_();
}

uci::type::OrbitRegimeType& OpVolumeType::getOrbitRegime() {
  return getOrbitRegime_();
}

uci::type::OpVolumeType& OpVolumeType::setOrbitRegime(const uci::type::OrbitRegimeType& accessor) {
  chooseOrbitRegime();
  if (&accessor != orbitRegime_Accessor.get()) {
    orbitRegime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpVolumeType::isOrbitRegime() const noexcept {
  return static_cast<bool>(orbitRegime_Accessor);
}

uci::type::OrbitRegimeType& OpVolumeType::chooseOrbitRegime(const std::string& method, uci::base::accessorType::AccessorType type) {
  geometricVolume_Accessor.reset();
  geocentricVolume_Accessor.reset();
  orbitAltitude_Accessor.reset();
  qualitative_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitRegimeType : type};
  if ((!orbitRegime_Accessor) || (orbitRegime_Accessor->getAccessorType() != requestedType)) {
    orbitRegime_Accessor = OrbitRegimeType::create(type);
    if (!orbitRegime_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitRegime_Accessor;
}

uci::type::OrbitRegimeType& OpVolumeType::chooseOrbitRegime(uci::base::accessorType::AccessorType type) {
  return chooseOrbitRegime("chooseOrbitRegime", type);
}

uci::type::OrbitAltitudeEnum& OpVolumeType::getOrbitAltitude_() const {
  if (orbitAltitude_Accessor) {
    return *orbitAltitude_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitAltitude(): Unable to get OrbitAltitude, field not selected");
}

const uci::type::OrbitAltitudeEnum& OpVolumeType::getOrbitAltitude() const {
  return getOrbitAltitude_();
}

uci::type::OrbitAltitudeEnum& OpVolumeType::getOrbitAltitude() {
  return getOrbitAltitude_();
}

uci::type::OpVolumeType& OpVolumeType::setOrbitAltitude(const uci::type::OrbitAltitudeEnum& accessor) {
  chooseOrbitAltitude();
  if (&accessor != orbitAltitude_Accessor.get()) {
    orbitAltitude_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpVolumeType& OpVolumeType::setOrbitAltitude(uci::type::OrbitAltitudeEnum::EnumerationItem value) {
  chooseOrbitAltitude().setValue(value);
  return *this;
}

bool OpVolumeType::isOrbitAltitude() const noexcept {
  return static_cast<bool>(orbitAltitude_Accessor);
}

uci::type::OrbitAltitudeEnum& OpVolumeType::chooseOrbitAltitude(const std::string& method, uci::base::accessorType::AccessorType type) {
  geometricVolume_Accessor.reset();
  geocentricVolume_Accessor.reset();
  orbitRegime_Accessor.reset();
  qualitative_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitAltitudeEnum : type};
  if ((!orbitAltitude_Accessor) || (orbitAltitude_Accessor->getAccessorType() != requestedType)) {
    orbitAltitude_Accessor = OrbitAltitudeEnum::create(type);
    if (!orbitAltitude_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitAltitude_Accessor;
}

uci::type::OrbitAltitudeEnum& OpVolumeType::chooseOrbitAltitude(uci::base::accessorType::AccessorType type) {
  return chooseOrbitAltitude("chooseOrbitAltitude", type);
}

uci::type::OrbitQualitativeEnum& OpVolumeType::getQualitative_() const {
  if (qualitative_Accessor) {
    return *qualitative_Accessor;
  }
  throw uci::base::UCIException("Error in getQualitative(): Unable to get Qualitative, field not selected");
}

const uci::type::OrbitQualitativeEnum& OpVolumeType::getQualitative() const {
  return getQualitative_();
}

uci::type::OrbitQualitativeEnum& OpVolumeType::getQualitative() {
  return getQualitative_();
}

uci::type::OpVolumeType& OpVolumeType::setQualitative(const uci::type::OrbitQualitativeEnum& accessor) {
  chooseQualitative();
  if (&accessor != qualitative_Accessor.get()) {
    qualitative_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpVolumeType& OpVolumeType::setQualitative(uci::type::OrbitQualitativeEnum::EnumerationItem value) {
  chooseQualitative().setValue(value);
  return *this;
}

bool OpVolumeType::isQualitative() const noexcept {
  return static_cast<bool>(qualitative_Accessor);
}

uci::type::OrbitQualitativeEnum& OpVolumeType::chooseQualitative(const std::string& method, uci::base::accessorType::AccessorType type) {
  geometricVolume_Accessor.reset();
  geocentricVolume_Accessor.reset();
  orbitRegime_Accessor.reset();
  orbitAltitude_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitQualitativeEnum : type};
  if ((!qualitative_Accessor) || (qualitative_Accessor->getAccessorType() != requestedType)) {
    qualitative_Accessor = OrbitQualitativeEnum::create(type);
    if (!qualitative_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *qualitative_Accessor;
}

uci::type::OrbitQualitativeEnum& OpVolumeType::chooseQualitative(uci::base::accessorType::AccessorType type) {
  return chooseQualitative("chooseQualitative", type);
}

std::unique_ptr<OpVolumeType> OpVolumeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opVolumeType : type};
  return (requestedType == uci::type::accessorType::opVolumeType) ? boost::make_unique<OpVolumeType>() : nullptr;
}

/**  */
namespace OpVolumeType_Names {

constexpr const char* Extern_Type_Name{"OpVolumeType"};
constexpr const char* GeometricVolume_Name{"GeometricVolume"};
constexpr const char* GeocentricVolume_Name{"GeocentricVolume"};
constexpr const char* OrbitRegime_Name{"OrbitRegime"};
constexpr const char* OrbitAltitude_Name{"OrbitAltitude"};
constexpr const char* Qualitative_Name{"Qualitative"};

} // namespace OpVolumeType_Names

void OpVolumeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpVolumeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpVolumeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpVolumeType_Names::GeometricVolume_Name) {
      GeometricVolumeType::deserialize(valueType.second, accessor.chooseGeometricVolume(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpVolumeType_Names::GeocentricVolume_Name) {
      GeocentricVolumeType::deserialize(valueType.second, accessor.chooseGeocentricVolume(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpVolumeType_Names::OrbitRegime_Name) {
      OrbitRegimeType::deserialize(valueType.second, accessor.chooseOrbitRegime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpVolumeType_Names::OrbitAltitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseOrbitAltitude().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OpVolumeType_Names::Qualitative_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseQualitative().setValueFromName(*value);
      }
    }
  }
}

std::string OpVolumeType::serialize(const uci::type::OpVolumeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpVolumeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpVolumeType_Names::Extern_Type_Name);
  }
  if (accessor.isGeometricVolume()) {
    GeometricVolumeType::serialize(accessor.getGeometricVolume(), node, OpVolumeType_Names::GeometricVolume_Name);
  } else if (accessor.isGeocentricVolume()) {
    GeocentricVolumeType::serialize(accessor.getGeocentricVolume(), node, OpVolumeType_Names::GeocentricVolume_Name);
  } else if (accessor.isOrbitRegime()) {
    OrbitRegimeType::serialize(accessor.getOrbitRegime(), node, OpVolumeType_Names::OrbitRegime_Name);
  } else if (accessor.isOrbitAltitude()) {
    OrbitAltitudeEnum::serialize(accessor.getOrbitAltitude(), node, OpVolumeType_Names::OrbitAltitude_Name, false);
  } else if (accessor.isQualitative()) {
    OrbitQualitativeEnum::serialize(accessor.getQualitative(), node, OpVolumeType_Names::Qualitative_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OpVolumeType& OpVolumeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OpVolumeType>().release());
}

uci::type::OpVolumeType& OpVolumeType::create(const uci::type::OpVolumeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OpVolumeType> newAccessor{boost::make_unique<asb_uci::type::OpVolumeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OpVolumeType::destroy(uci::type::OpVolumeType& accessor) {
  delete dynamic_cast<asb_uci::type::OpVolumeType*>(&accessor);
}

} // namespace type

} // namespace uci

