/** @file VCM_DataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/VCM_DataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CovarianceMatrixType.h"
#include "../../../include/asb_uci/type/RTN_PositionSigmaType.h"
#include "../../../include/asb_uci/type/RTN_VelocitySigmaType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CovarianceMatrixType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RTN_PositionSigmaType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RTN_VelocitySigmaType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VCM_DataType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VCM_DataType::VCM_DataType()
  : covarianceMatrix_Accessor{boost::make_unique<CovarianceMatrixType>()} {
}

VCM_DataType::~VCM_DataType() = default;

void VCM_DataType::copy(const uci::type::VCM_DataType& accessor) {
  copyImpl(accessor, false);
}

void VCM_DataType::copyImpl(const uci::type::VCM_DataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VCM_DataType&>(accessor);
    if (accessorImpl.positionSigma_Accessor) {
      setPositionSigma(*(accessorImpl.positionSigma_Accessor));
    } else {
      positionSigma_Accessor.reset();
    }
    if (accessorImpl.velocitySigma_Accessor) {
      setVelocitySigma(*(accessorImpl.velocitySigma_Accessor));
    } else {
      velocitySigma_Accessor.reset();
    }
    if (accessorImpl.hasWeightedRMS()) {
      setWeightedRMS(accessorImpl.getWeightedRMS());
    } else {
      clearWeightedRMS();
    }
    setCovarianceMatrix(*(accessorImpl.covarianceMatrix_Accessor));
  }
}

void VCM_DataType::reset() noexcept {
  positionSigma_Accessor.reset();
  velocitySigma_Accessor.reset();
  clearWeightedRMS();
  covarianceMatrix_Accessor->reset();
}

uci::type::RTN_PositionSigmaType& VCM_DataType::getPositionSigma_() const {
  if (positionSigma_Accessor) {
    return *positionSigma_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionSigma(): An attempt was made to get an optional field that was not enabled, call hasPositionSigma() to determine if it is safe to call getPositionSigma()");
}

const uci::type::RTN_PositionSigmaType& VCM_DataType::getPositionSigma() const {
  return getPositionSigma_();
}

uci::type::RTN_PositionSigmaType& VCM_DataType::getPositionSigma() {
  return getPositionSigma_();
}

uci::type::VCM_DataType& VCM_DataType::setPositionSigma(const uci::type::RTN_PositionSigmaType& accessor) {
  enablePositionSigma();
  if (&accessor != positionSigma_Accessor.get()) {
    positionSigma_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VCM_DataType::hasPositionSigma() const noexcept {
  return static_cast<bool>(positionSigma_Accessor);
}

uci::type::RTN_PositionSigmaType& VCM_DataType::enablePositionSigma(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rTN_PositionSigmaType : type};
  if ((!positionSigma_Accessor) || (positionSigma_Accessor->getAccessorType() != requestedType)) {
    positionSigma_Accessor = RTN_PositionSigmaType::create(requestedType);
    if (!positionSigma_Accessor) {
      throw uci::base::UCIException("Error in enablePositionSigma(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionSigma_Accessor;
}

uci::type::VCM_DataType& VCM_DataType::clearPositionSigma() noexcept {
  positionSigma_Accessor.reset();
  return *this;
}

uci::type::RTN_VelocitySigmaType& VCM_DataType::getVelocitySigma_() const {
  if (velocitySigma_Accessor) {
    return *velocitySigma_Accessor;
  }
  throw uci::base::UCIException("Error in getVelocitySigma(): An attempt was made to get an optional field that was not enabled, call hasVelocitySigma() to determine if it is safe to call getVelocitySigma()");
}

const uci::type::RTN_VelocitySigmaType& VCM_DataType::getVelocitySigma() const {
  return getVelocitySigma_();
}

uci::type::RTN_VelocitySigmaType& VCM_DataType::getVelocitySigma() {
  return getVelocitySigma_();
}

uci::type::VCM_DataType& VCM_DataType::setVelocitySigma(const uci::type::RTN_VelocitySigmaType& accessor) {
  enableVelocitySigma();
  if (&accessor != velocitySigma_Accessor.get()) {
    velocitySigma_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VCM_DataType::hasVelocitySigma() const noexcept {
  return static_cast<bool>(velocitySigma_Accessor);
}

uci::type::RTN_VelocitySigmaType& VCM_DataType::enableVelocitySigma(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rTN_VelocitySigmaType : type};
  if ((!velocitySigma_Accessor) || (velocitySigma_Accessor->getAccessorType() != requestedType)) {
    velocitySigma_Accessor = RTN_VelocitySigmaType::create(requestedType);
    if (!velocitySigma_Accessor) {
      throw uci::base::UCIException("Error in enableVelocitySigma(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *velocitySigma_Accessor;
}

uci::type::VCM_DataType& VCM_DataType::clearVelocitySigma() noexcept {
  velocitySigma_Accessor.reset();
  return *this;
}

xs::Double VCM_DataType::getWeightedRMS() const {
  if (weightedRMS_Accessor) {
    return *weightedRMS_Accessor;
  }
  throw uci::base::UCIException("Error in getWeightedRMS(): An attempt was made to get an optional field that was not enabled, call hasWeightedRMS() to determine if it is safe to call getWeightedRMS()");
}

uci::type::VCM_DataType& VCM_DataType::setWeightedRMS(xs::Double value) {
  weightedRMS_Accessor = value;
  return *this;
}

bool VCM_DataType::hasWeightedRMS() const noexcept {
  return weightedRMS_Accessor.has_value();
}

uci::type::VCM_DataType& VCM_DataType::clearWeightedRMS() noexcept {
  weightedRMS_Accessor.reset();
  return *this;
}

const uci::type::CovarianceMatrixType& VCM_DataType::getCovarianceMatrix() const {
  return *covarianceMatrix_Accessor;
}

uci::type::CovarianceMatrixType& VCM_DataType::getCovarianceMatrix() {
  return *covarianceMatrix_Accessor;
}

uci::type::VCM_DataType& VCM_DataType::setCovarianceMatrix(const uci::type::CovarianceMatrixType& accessor) {
  if (&accessor != covarianceMatrix_Accessor.get()) {
    covarianceMatrix_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<VCM_DataType> VCM_DataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vCM_DataType : type};
  return (requestedType == uci::type::accessorType::vCM_DataType) ? boost::make_unique<VCM_DataType>() : nullptr;
}

/**  */
namespace VCM_DataType_Names {

constexpr const char* Extern_Type_Name{"VCM_DataType"};
constexpr const char* PositionSigma_Name{"PositionSigma"};
constexpr const char* VelocitySigma_Name{"VelocitySigma"};
constexpr const char* WeightedRMS_Name{"WeightedRMS"};
constexpr const char* CovarianceMatrix_Name{"CovarianceMatrix"};

} // namespace VCM_DataType_Names

void VCM_DataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VCM_DataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VCM_DataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VCM_DataType_Names::PositionSigma_Name) {
      RTN_PositionSigmaType::deserialize(valueType.second, accessor.enablePositionSigma(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VCM_DataType_Names::VelocitySigma_Name) {
      RTN_VelocitySigmaType::deserialize(valueType.second, accessor.enableVelocitySigma(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VCM_DataType_Names::WeightedRMS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWeightedRMS(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VCM_DataType_Names::CovarianceMatrix_Name) {
      CovarianceMatrixType::deserialize(valueType.second, accessor.getCovarianceMatrix(), nodeName, nsPrefix);
    }
  }
}

std::string VCM_DataType::serialize(const uci::type::VCM_DataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VCM_DataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VCM_DataType_Names::Extern_Type_Name);
  }
  if (accessor.hasPositionSigma()) {
    RTN_PositionSigmaType::serialize(accessor.getPositionSigma(), node, VCM_DataType_Names::PositionSigma_Name);
  }
  if (accessor.hasVelocitySigma()) {
    RTN_VelocitySigmaType::serialize(accessor.getVelocitySigma(), node, VCM_DataType_Names::VelocitySigma_Name);
  }
  if (accessor.hasWeightedRMS()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getWeightedRMS(), node, VCM_DataType_Names::WeightedRMS_Name);
  }
  CovarianceMatrixType::serialize(accessor.getCovarianceMatrix(), node, VCM_DataType_Names::CovarianceMatrix_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VCM_DataType& VCM_DataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VCM_DataType>().release());
}

uci::type::VCM_DataType& VCM_DataType::create(const uci::type::VCM_DataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VCM_DataType> newAccessor{boost::make_unique<asb_uci::type::VCM_DataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VCM_DataType::destroy(uci::type::VCM_DataType& accessor) {
  delete dynamic_cast<asb_uci::type::VCM_DataType*>(&accessor);
}

} // namespace type

} // namespace uci

