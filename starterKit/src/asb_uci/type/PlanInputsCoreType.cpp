/** @file PlanInputsCoreType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlanInputsCoreType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/FileLocationID_Type.h"
#include "asb_uci/type/MissionEnvironmentConstraintType.h"
#include "asb_uci/type/OpConstraintWeightingType.h"
#include "asb_uci/type/PlanInitiationSourceEnum.h"
#include "asb_uci/type/PlanningDataSourceEnum.h"
#include "asb_uci/type/PlanningProcessID_Type.h"
#include "asb_uci/type/ReplanReasonType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/FileLocationID_Type.h"
#include "uci/type/MissionEnvironmentConstraintType.h"
#include "uci/type/OpConstraintWeightingType.h"
#include "uci/type/PlanInitiationSourceEnum.h"
#include "uci/type/PlanInputsCoreType.h"
#include "uci/type/PlanningDataSourceEnum.h"
#include "uci/type/PlanningProcessID_Type.h"
#include "uci/type/ReplanReasonType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanInputsCoreType::PlanInputsCoreType()
  : planningProcessID_Accessor{boost::make_unique<PlanningProcessID_Type>()},
    planInitiation_Accessor{boost::make_unique<PlanInitiationSourceEnum>()},
    planningDataSource_Accessor{boost::make_unique<PlanningDataSourceEnum>()},
    environmentOverride_Accessor{boost::make_unique<EnvironmentOverride>(0, SIZE_MAX)},
    opConstraint_Accessor{boost::make_unique<OpConstraint>(0, 15)} {
}

PlanInputsCoreType::~PlanInputsCoreType() = default;

void PlanInputsCoreType::copy(const uci::type::PlanInputsCoreType& accessor) {
  copyImpl(accessor, false);
}

void PlanInputsCoreType::copyImpl(const uci::type::PlanInputsCoreType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::planInputsCoreType)) {
      const auto& accessorImpl = dynamic_cast<const PlanInputsCoreType&>(accessor);
      setPlanningProcessID(*(accessorImpl.planningProcessID_Accessor));
      setPlanInitiation(*(accessorImpl.planInitiation_Accessor));
      setPlanningDataSource(*(accessorImpl.planningDataSource_Accessor));
      if (accessorImpl.replanReason_Accessor) {
        setReplanReason(*(accessorImpl.replanReason_Accessor));
      } else {
        replanReason_Accessor.reset();
      }
      setEnvironmentOverride(*(accessorImpl.environmentOverride_Accessor));
      setOpConstraint(*(accessorImpl.opConstraint_Accessor));
      if (accessorImpl.specialInstructionsID_Accessor) {
        setSpecialInstructionsID(*(accessorImpl.specialInstructionsID_Accessor));
      } else {
        specialInstructionsID_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void PlanInputsCoreType::reset() noexcept {
  planningProcessID_Accessor->reset();
  planInitiation_Accessor->reset();
  planningDataSource_Accessor->reset();
  replanReason_Accessor.reset();
  environmentOverride_Accessor->reset();
  opConstraint_Accessor->reset();
  specialInstructionsID_Accessor.reset();
}

const uci::type::PlanningProcessID_Type& PlanInputsCoreType::getPlanningProcessID() const {
  return *planningProcessID_Accessor;
}

uci::type::PlanningProcessID_Type& PlanInputsCoreType::getPlanningProcessID() {
  return *planningProcessID_Accessor;
}

uci::type::PlanInputsCoreType& PlanInputsCoreType::setPlanningProcessID(const uci::type::PlanningProcessID_Type& accessor) {
  if (&accessor != planningProcessID_Accessor.get()) {
    planningProcessID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlanInitiationSourceEnum& PlanInputsCoreType::getPlanInitiation() const {
  return *planInitiation_Accessor;
}

uci::type::PlanInitiationSourceEnum& PlanInputsCoreType::getPlanInitiation() {
  return *planInitiation_Accessor;
}

uci::type::PlanInputsCoreType& PlanInputsCoreType::setPlanInitiation(const uci::type::PlanInitiationSourceEnum& accessor) {
  if (&accessor != planInitiation_Accessor.get()) {
    planInitiation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanInputsCoreType& PlanInputsCoreType::setPlanInitiation(uci::type::PlanInitiationSourceEnum::EnumerationItem value) {
  planInitiation_Accessor->setValue(value);
  return *this;
}


const uci::type::PlanningDataSourceEnum& PlanInputsCoreType::getPlanningDataSource() const {
  return *planningDataSource_Accessor;
}

uci::type::PlanningDataSourceEnum& PlanInputsCoreType::getPlanningDataSource() {
  return *planningDataSource_Accessor;
}

uci::type::PlanInputsCoreType& PlanInputsCoreType::setPlanningDataSource(const uci::type::PlanningDataSourceEnum& accessor) {
  if (&accessor != planningDataSource_Accessor.get()) {
    planningDataSource_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanInputsCoreType& PlanInputsCoreType::setPlanningDataSource(uci::type::PlanningDataSourceEnum::EnumerationItem value) {
  planningDataSource_Accessor->setValue(value);
  return *this;
}


uci::type::ReplanReasonType& PlanInputsCoreType::getReplanReason_() const {
  if (replanReason_Accessor) {
    return *replanReason_Accessor;
  }
  throw uci::base::UCIException("Error in getReplanReason(): An attempt was made to get an optional field that was not enabled, call hasReplanReason() to determine if it is safe to call getReplanReason()");
}

const uci::type::ReplanReasonType& PlanInputsCoreType::getReplanReason() const {
  return getReplanReason_();
}

uci::type::ReplanReasonType& PlanInputsCoreType::getReplanReason() {
  return getReplanReason_();
}

uci::type::PlanInputsCoreType& PlanInputsCoreType::setReplanReason(const uci::type::ReplanReasonType& accessor) {
  enableReplanReason();
  if (&accessor != replanReason_Accessor.get()) {
    replanReason_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanInputsCoreType::hasReplanReason() const noexcept {
  return static_cast<bool>(replanReason_Accessor);
}

uci::type::ReplanReasonType& PlanInputsCoreType::enableReplanReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::replanReasonType : type};
  if ((!replanReason_Accessor) || (replanReason_Accessor->getAccessorType() != requestedType)) {
    replanReason_Accessor = ReplanReasonType::create(requestedType);
    if (!replanReason_Accessor) {
      throw uci::base::UCIException("Error in enableReplanReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *replanReason_Accessor;
}

uci::type::PlanInputsCoreType& PlanInputsCoreType::clearReplanReason() noexcept {
  replanReason_Accessor.reset();
  return *this;
}

const uci::type::PlanInputsCoreType::EnvironmentOverride& PlanInputsCoreType::getEnvironmentOverride() const {
  return *environmentOverride_Accessor;
}

uci::type::PlanInputsCoreType::EnvironmentOverride& PlanInputsCoreType::getEnvironmentOverride() {
  return *environmentOverride_Accessor;
}

uci::type::PlanInputsCoreType& PlanInputsCoreType::setEnvironmentOverride(const uci::type::PlanInputsCoreType::EnvironmentOverride& accessor) {
  if (&accessor != environmentOverride_Accessor.get()) {
    environmentOverride_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlanInputsCoreType::OpConstraint& PlanInputsCoreType::getOpConstraint() const {
  return *opConstraint_Accessor;
}

uci::type::PlanInputsCoreType::OpConstraint& PlanInputsCoreType::getOpConstraint() {
  return *opConstraint_Accessor;
}

uci::type::PlanInputsCoreType& PlanInputsCoreType::setOpConstraint(const uci::type::PlanInputsCoreType::OpConstraint& accessor) {
  if (&accessor != opConstraint_Accessor.get()) {
    opConstraint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FileLocationID_Type& PlanInputsCoreType::getSpecialInstructionsID_() const {
  if (specialInstructionsID_Accessor) {
    return *specialInstructionsID_Accessor;
  }
  throw uci::base::UCIException("Error in getSpecialInstructionsID(): An attempt was made to get an optional field that was not enabled, call hasSpecialInstructionsID() to determine if it is safe to call getSpecialInstructionsID()");
}

const uci::type::FileLocationID_Type& PlanInputsCoreType::getSpecialInstructionsID() const {
  return getSpecialInstructionsID_();
}

uci::type::FileLocationID_Type& PlanInputsCoreType::getSpecialInstructionsID() {
  return getSpecialInstructionsID_();
}

uci::type::PlanInputsCoreType& PlanInputsCoreType::setSpecialInstructionsID(const uci::type::FileLocationID_Type& accessor) {
  enableSpecialInstructionsID();
  if (&accessor != specialInstructionsID_Accessor.get()) {
    specialInstructionsID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanInputsCoreType::hasSpecialInstructionsID() const noexcept {
  return static_cast<bool>(specialInstructionsID_Accessor);
}

uci::type::FileLocationID_Type& PlanInputsCoreType::enableSpecialInstructionsID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileLocationID_Type : type};
  if ((!specialInstructionsID_Accessor) || (specialInstructionsID_Accessor->getAccessorType() != requestedType)) {
    specialInstructionsID_Accessor = FileLocationID_Type::create(requestedType);
    if (!specialInstructionsID_Accessor) {
      throw uci::base::UCIException("Error in enableSpecialInstructionsID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *specialInstructionsID_Accessor;
}

uci::type::PlanInputsCoreType& PlanInputsCoreType::clearSpecialInstructionsID() noexcept {
  specialInstructionsID_Accessor.reset();
  return *this;
}

std::unique_ptr<PlanInputsCoreType> PlanInputsCoreType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planInputsCoreType : type};
  return std::unique_ptr<PlanInputsCoreType>(dynamic_cast<PlanInputsCoreType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace PlanInputsCoreType_Names {

constexpr const char* Extern_Type_Name{"PlanInputsCoreType"};
constexpr const char* PlanningProcessID_Name{"PlanningProcessID"};
constexpr const char* PlanInitiation_Name{"PlanInitiation"};
constexpr const char* PlanningDataSource_Name{"PlanningDataSource"};
constexpr const char* ReplanReason_Name{"ReplanReason"};
constexpr const char* EnvironmentOverride_Name{"EnvironmentOverride"};
constexpr const char* OpConstraint_Name{"OpConstraint"};
constexpr const char* SpecialInstructionsID_Name{"SpecialInstructionsID"};

} // namespace PlanInputsCoreType_Names

void PlanInputsCoreType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanInputsCoreType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanInputsCoreType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanInputsCoreType_Names::PlanningProcessID_Name) {
      PlanningProcessID_Type::deserialize(valueType.second, accessor.getPlanningProcessID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanInputsCoreType_Names::PlanInitiation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPlanInitiation().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlanInputsCoreType_Names::PlanningDataSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPlanningDataSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlanInputsCoreType_Names::ReplanReason_Name) {
      ReplanReasonType::deserialize(valueType.second, accessor.enableReplanReason(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanInputsCoreType_Names::EnvironmentOverride_Name) {
      uci::type::PlanInputsCoreType::EnvironmentOverride& boundedList = accessor.getEnvironmentOverride();
      const uci::type::PlanInputsCoreType::EnvironmentOverride::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::MissionEnvironmentConstraintType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanInputsCoreType_Names::OpConstraint_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanInputsCoreType::OpConstraint& boundedList = accessor.getOpConstraint();
        const uci::type::PlanInputsCoreType::OpConstraint::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OpConstraintWeightingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanInputsCoreType_Names::SpecialInstructionsID_Name) {
      FileLocationID_Type::deserialize(valueType.second, accessor.enableSpecialInstructionsID(), nodeName, nsPrefix);
    }
  }
}

std::string PlanInputsCoreType::serialize(const uci::type::PlanInputsCoreType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanInputsCoreType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::planInputsCoreType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanInputsCoreType_Names::Extern_Type_Name);
    }
    PlanningProcessID_Type::serialize(accessor.getPlanningProcessID(), node, PlanInputsCoreType_Names::PlanningProcessID_Name);
    PlanInitiationSourceEnum::serialize(accessor.getPlanInitiation(), node, PlanInputsCoreType_Names::PlanInitiation_Name, false);
    PlanningDataSourceEnum::serialize(accessor.getPlanningDataSource(), node, PlanInputsCoreType_Names::PlanningDataSource_Name, false);
    if (accessor.hasReplanReason()) {
      ReplanReasonType::serialize(accessor.getReplanReason(), node, PlanInputsCoreType_Names::ReplanReason_Name);
    }
    {
      const uci::type::PlanInputsCoreType::EnvironmentOverride& boundedList = accessor.getEnvironmentOverride();
      for (uci::type::PlanInputsCoreType::EnvironmentOverride::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::MissionEnvironmentConstraintType::serialize(boundedList.at(i), node, PlanInputsCoreType_Names::EnvironmentOverride_Name);
      }
    }
    {
      const uci::type::PlanInputsCoreType::OpConstraint& boundedList = accessor.getOpConstraint();
      for (uci::type::PlanInputsCoreType::OpConstraint::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::OpConstraintWeightingType::serialize(boundedList.at(i), node, PlanInputsCoreType_Names::OpConstraint_Name);
      }
    }
    if (accessor.hasSpecialInstructionsID()) {
      FileLocationID_Type::serialize(accessor.getSpecialInstructionsID(), node, PlanInputsCoreType_Names::SpecialInstructionsID_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanInputsCoreType& PlanInputsCoreType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanInputsCoreType>().release());
}

uci::type::PlanInputsCoreType& PlanInputsCoreType::create(const uci::type::PlanInputsCoreType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanInputsCoreType> newAccessor{boost::make_unique<asb_uci::type::PlanInputsCoreType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanInputsCoreType::destroy(uci::type::PlanInputsCoreType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanInputsCoreType*>(&accessor);
}

} // namespace type

} // namespace uci

