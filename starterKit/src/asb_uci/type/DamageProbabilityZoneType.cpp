/** @file DamageProbabilityZoneType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DamageProbabilityZoneType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DMPI_ID_Type.h"
#include "../../../include/asb_uci/type/ZoneType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DamageProbabilityZoneType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DamageProbabilityZoneType::DamageProbabilityZoneType()
  : damageZone_Accessor{boost::make_unique<ZoneType>()} {
}

DamageProbabilityZoneType::~DamageProbabilityZoneType() = default;

void DamageProbabilityZoneType::copy(const uci::type::DamageProbabilityZoneType& accessor) {
  copyImpl(accessor, false);
}

void DamageProbabilityZoneType::copyImpl(const uci::type::DamageProbabilityZoneType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DamageProbabilityZoneType&>(accessor);
    setMinimumDamageProbability(accessorImpl.minimumDamageProbability_Accessor);
    setMaximumDamageProbability(accessorImpl.maximumDamageProbability_Accessor);
    setDamageZone(*(accessorImpl.damageZone_Accessor));
    if (accessorImpl.dMPI_ID_Accessor) {
      setDMPI_ID(*(accessorImpl.dMPI_ID_Accessor));
    } else {
      dMPI_ID_Accessor.reset();
    }
  }
}

void DamageProbabilityZoneType::reset() noexcept {
  minimumDamageProbability_Accessor = 0.0;
  maximumDamageProbability_Accessor = 0.0;
  if (damageZone_Accessor->getAccessorType() != uci::type::accessorType::zoneType) {
    damageZone_Accessor = boost::make_unique<ZoneType>();
  } else {
    damageZone_Accessor->reset();
  }
  dMPI_ID_Accessor.reset();
}

uci::type::PercentTypeValue DamageProbabilityZoneType::getMinimumDamageProbability() const {
  return minimumDamageProbability_Accessor;
}

uci::type::DamageProbabilityZoneType& DamageProbabilityZoneType::setMinimumDamageProbability(uci::type::PercentTypeValue value) {
  minimumDamageProbability_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue DamageProbabilityZoneType::getMaximumDamageProbability() const {
  return maximumDamageProbability_Accessor;
}

uci::type::DamageProbabilityZoneType& DamageProbabilityZoneType::setMaximumDamageProbability(uci::type::PercentTypeValue value) {
  maximumDamageProbability_Accessor = value;
  return *this;
}


const uci::type::ZoneType& DamageProbabilityZoneType::getDamageZone() const {
  return *damageZone_Accessor;
}

uci::type::ZoneType& DamageProbabilityZoneType::getDamageZone() {
  return *damageZone_Accessor;
}

uci::type::DamageProbabilityZoneType& DamageProbabilityZoneType::setDamageZone(const uci::type::ZoneType& accessor) {
  enableDamageZone(accessor.getAccessorType());
  if (&accessor != damageZone_Accessor.get()) {
    damageZone_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ZoneType& DamageProbabilityZoneType::enableDamageZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!damageZone_Accessor) || (damageZone_Accessor->getAccessorType() != requestedType)) {
    damageZone_Accessor = ZoneType::create(requestedType);
    if (!damageZone_Accessor) {
      throw uci::base::UCIException("Error in enableDamageZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *damageZone_Accessor;
}

uci::type::DMPI_ID_Type& DamageProbabilityZoneType::getDMPI_ID_() const {
  if (dMPI_ID_Accessor) {
    return *dMPI_ID_Accessor;
  }
  throw uci::base::UCIException("Error in getDMPI_ID(): An attempt was made to get an optional field that was not enabled, call hasDMPI_ID() to determine if it is safe to call getDMPI_ID()");
}

const uci::type::DMPI_ID_Type& DamageProbabilityZoneType::getDMPI_ID() const {
  return getDMPI_ID_();
}

uci::type::DMPI_ID_Type& DamageProbabilityZoneType::getDMPI_ID() {
  return getDMPI_ID_();
}

uci::type::DamageProbabilityZoneType& DamageProbabilityZoneType::setDMPI_ID(const uci::type::DMPI_ID_Type& accessor) {
  enableDMPI_ID();
  if (&accessor != dMPI_ID_Accessor.get()) {
    dMPI_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DamageProbabilityZoneType::hasDMPI_ID() const noexcept {
  return static_cast<bool>(dMPI_ID_Accessor);
}

uci::type::DMPI_ID_Type& DamageProbabilityZoneType::enableDMPI_ID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_ID_Type : type};
  if ((!dMPI_ID_Accessor) || (dMPI_ID_Accessor->getAccessorType() != requestedType)) {
    dMPI_ID_Accessor = DMPI_ID_Type::create(requestedType);
    if (!dMPI_ID_Accessor) {
      throw uci::base::UCIException("Error in enableDMPI_ID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dMPI_ID_Accessor;
}

uci::type::DamageProbabilityZoneType& DamageProbabilityZoneType::clearDMPI_ID() noexcept {
  dMPI_ID_Accessor.reset();
  return *this;
}

std::unique_ptr<DamageProbabilityZoneType> DamageProbabilityZoneType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageProbabilityZoneType : type};
  return (requestedType == uci::type::accessorType::damageProbabilityZoneType) ? boost::make_unique<DamageProbabilityZoneType>() : nullptr;
}

/**  */
namespace DamageProbabilityZoneType_Names {

constexpr const char* Extern_Type_Name{"DamageProbabilityZoneType"};
constexpr const char* MinimumDamageProbability_Name{"MinimumDamageProbability"};
constexpr const char* MaximumDamageProbability_Name{"MaximumDamageProbability"};
constexpr const char* DamageZone_Name{"DamageZone"};
constexpr const char* DMPI_ID_Name{"DMPI_ID"};

} // namespace DamageProbabilityZoneType_Names

void DamageProbabilityZoneType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageProbabilityZoneType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamageProbabilityZoneType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamageProbabilityZoneType_Names::MinimumDamageProbability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumDamageProbability(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DamageProbabilityZoneType_Names::MaximumDamageProbability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumDamageProbability(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DamageProbabilityZoneType_Names::DamageZone_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDamageZone(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageProbabilityZoneType_Names::DMPI_ID_Name) {
      DMPI_ID_Type::deserialize(valueType.second, accessor.enableDMPI_ID(), nodeName, nsPrefix);
    }
  }
}

std::string DamageProbabilityZoneType::serialize(const uci::type::DamageProbabilityZoneType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DamageProbabilityZoneType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DamageProbabilityZoneType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinimumDamageProbability(), node, DamageProbabilityZoneType_Names::MinimumDamageProbability_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaximumDamageProbability(), node, DamageProbabilityZoneType_Names::MaximumDamageProbability_Name);
  ZoneType::serialize(accessor.getDamageZone(), node, DamageProbabilityZoneType_Names::DamageZone_Name);
  if (accessor.hasDMPI_ID()) {
    DMPI_ID_Type::serialize(accessor.getDMPI_ID(), node, DamageProbabilityZoneType_Names::DMPI_ID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DamageProbabilityZoneType& DamageProbabilityZoneType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DamageProbabilityZoneType>().release());
}

uci::type::DamageProbabilityZoneType& DamageProbabilityZoneType::create(const uci::type::DamageProbabilityZoneType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DamageProbabilityZoneType> newAccessor{boost::make_unique<asb_uci::type::DamageProbabilityZoneType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DamageProbabilityZoneType::destroy(uci::type::DamageProbabilityZoneType& accessor) {
  delete dynamic_cast<asb_uci::type::DamageProbabilityZoneType*>(&accessor);
}

} // namespace type

} // namespace uci

