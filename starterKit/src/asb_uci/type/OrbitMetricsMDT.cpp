/** @file OrbitMetricsMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitMetricsMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityPlanPartsEnum.h"
#include "../../../include/asb_uci/type/OrbitActivityMetricsType.h"
#include "../../../include/asb_uci/type/OrbitActivityPlanID_Type.h"
#include "../../../include/asb_uci/type/OrbitManeuverSegmentMetricsType.h"
#include "../../../include/asb_uci/type/OrbitManeuverSequenceMetricsType.h"
#include "../../../include/asb_uci/type/OrbitMetricsID_Type.h"
#include "../../../include/asb_uci/type/OrbitPlanID_Type.h"
#include "../../../include/asb_uci/type/OrbitPlanPartsEnum.h"
#include "../../../include/asb_uci/type/SatelliteEnduranceType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityPlanPartsEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitActivityMetricsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitActivityPlanID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitManeuverSegmentMetricsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitManeuverSequenceMetricsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitMetricsID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitMetricsMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitPlanID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitPlanPartsEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SatelliteEnduranceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitMetricsMDT::OrbitMetricsMDT()
  : metricsID_Accessor{boost::make_unique<OrbitMetricsID_Type>()},
    orbitPlanID_Accessor{boost::make_unique<OrbitPlanID_Type>()},
    orbitParts_Accessor{boost::make_unique<OrbitParts>(0, 6)},
    orbitActivityPlanID_Accessor{boost::make_unique<OrbitActivityPlanID>(0, SIZE_MAX)},
    activityParts_Accessor{boost::make_unique<ActivityParts>(0, 9)},
    sequenceMetrics_Accessor{boost::make_unique<SequenceMetrics>(0, SIZE_MAX)},
    segmentMetrics_Accessor{boost::make_unique<SegmentMetrics>(0, SIZE_MAX)} {
}

OrbitMetricsMDT::~OrbitMetricsMDT() = default;

void OrbitMetricsMDT::copy(const uci::type::OrbitMetricsMDT& accessor) {
  copyImpl(accessor, false);
}

void OrbitMetricsMDT::copyImpl(const uci::type::OrbitMetricsMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitMetricsMDT&>(accessor);
    setMetricsID(*(accessorImpl.metricsID_Accessor));
    setOrbitPlanID(*(accessorImpl.orbitPlanID_Accessor));
    setOrbitParts(*(accessorImpl.orbitParts_Accessor));
    setOrbitActivityPlanID(*(accessorImpl.orbitActivityPlanID_Accessor));
    setActivityParts(*(accessorImpl.activityParts_Accessor));
    if (accessorImpl.orbitMetrics_Accessor) {
      setOrbitMetrics(*(accessorImpl.orbitMetrics_Accessor));
    } else {
      orbitMetrics_Accessor.reset();
    }
    setSequenceMetrics(*(accessorImpl.sequenceMetrics_Accessor));
    setSegmentMetrics(*(accessorImpl.segmentMetrics_Accessor));
    if (accessorImpl.orbitActivityMetrics_Accessor) {
      setOrbitActivityMetrics(*(accessorImpl.orbitActivityMetrics_Accessor));
    } else {
      orbitActivityMetrics_Accessor.reset();
    }
  }
}

void OrbitMetricsMDT::reset() noexcept {
  metricsID_Accessor->reset();
  orbitPlanID_Accessor->reset();
  orbitParts_Accessor->reset();
  orbitActivityPlanID_Accessor->reset();
  activityParts_Accessor->reset();
  orbitMetrics_Accessor.reset();
  sequenceMetrics_Accessor->reset();
  segmentMetrics_Accessor->reset();
  orbitActivityMetrics_Accessor.reset();
}

const uci::type::OrbitMetricsID_Type& OrbitMetricsMDT::getMetricsID() const {
  return *metricsID_Accessor;
}

uci::type::OrbitMetricsID_Type& OrbitMetricsMDT::getMetricsID() {
  return *metricsID_Accessor;
}

uci::type::OrbitMetricsMDT& OrbitMetricsMDT::setMetricsID(const uci::type::OrbitMetricsID_Type& accessor) {
  if (&accessor != metricsID_Accessor.get()) {
    metricsID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitPlanID_Type& OrbitMetricsMDT::getOrbitPlanID() const {
  return *orbitPlanID_Accessor;
}

uci::type::OrbitPlanID_Type& OrbitMetricsMDT::getOrbitPlanID() {
  return *orbitPlanID_Accessor;
}

uci::type::OrbitMetricsMDT& OrbitMetricsMDT::setOrbitPlanID(const uci::type::OrbitPlanID_Type& accessor) {
  if (&accessor != orbitPlanID_Accessor.get()) {
    orbitPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitMetricsMDT::OrbitParts& OrbitMetricsMDT::getOrbitParts() const {
  return *orbitParts_Accessor;
}

uci::type::OrbitMetricsMDT::OrbitParts& OrbitMetricsMDT::getOrbitParts() {
  return *orbitParts_Accessor;
}

uci::type::OrbitMetricsMDT& OrbitMetricsMDT::setOrbitParts(const uci::type::OrbitMetricsMDT::OrbitParts& accessor) {
  if (&accessor != orbitParts_Accessor.get()) {
    orbitParts_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitMetricsMDT::OrbitActivityPlanID& OrbitMetricsMDT::getOrbitActivityPlanID() const {
  return *orbitActivityPlanID_Accessor;
}

uci::type::OrbitMetricsMDT::OrbitActivityPlanID& OrbitMetricsMDT::getOrbitActivityPlanID() {
  return *orbitActivityPlanID_Accessor;
}

uci::type::OrbitMetricsMDT& OrbitMetricsMDT::setOrbitActivityPlanID(const uci::type::OrbitMetricsMDT::OrbitActivityPlanID& accessor) {
  if (&accessor != orbitActivityPlanID_Accessor.get()) {
    orbitActivityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitMetricsMDT::ActivityParts& OrbitMetricsMDT::getActivityParts() const {
  return *activityParts_Accessor;
}

uci::type::OrbitMetricsMDT::ActivityParts& OrbitMetricsMDT::getActivityParts() {
  return *activityParts_Accessor;
}

uci::type::OrbitMetricsMDT& OrbitMetricsMDT::setActivityParts(const uci::type::OrbitMetricsMDT::ActivityParts& accessor) {
  if (&accessor != activityParts_Accessor.get()) {
    activityParts_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SatelliteEnduranceType& OrbitMetricsMDT::getOrbitMetrics_() const {
  if (orbitMetrics_Accessor) {
    return *orbitMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitMetrics(): An attempt was made to get an optional field that was not enabled, call hasOrbitMetrics() to determine if it is safe to call getOrbitMetrics()");
}

const uci::type::SatelliteEnduranceType& OrbitMetricsMDT::getOrbitMetrics() const {
  return getOrbitMetrics_();
}

uci::type::SatelliteEnduranceType& OrbitMetricsMDT::getOrbitMetrics() {
  return getOrbitMetrics_();
}

uci::type::OrbitMetricsMDT& OrbitMetricsMDT::setOrbitMetrics(const uci::type::SatelliteEnduranceType& accessor) {
  enableOrbitMetrics();
  if (&accessor != orbitMetrics_Accessor.get()) {
    orbitMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitMetricsMDT::hasOrbitMetrics() const noexcept {
  return static_cast<bool>(orbitMetrics_Accessor);
}

uci::type::SatelliteEnduranceType& OrbitMetricsMDT::enableOrbitMetrics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteEnduranceType : type};
  if ((!orbitMetrics_Accessor) || (orbitMetrics_Accessor->getAccessorType() != requestedType)) {
    orbitMetrics_Accessor = SatelliteEnduranceType::create(requestedType);
    if (!orbitMetrics_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitMetrics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitMetrics_Accessor;
}

uci::type::OrbitMetricsMDT& OrbitMetricsMDT::clearOrbitMetrics() noexcept {
  orbitMetrics_Accessor.reset();
  return *this;
}

const uci::type::OrbitMetricsMDT::SequenceMetrics& OrbitMetricsMDT::getSequenceMetrics() const {
  return *sequenceMetrics_Accessor;
}

uci::type::OrbitMetricsMDT::SequenceMetrics& OrbitMetricsMDT::getSequenceMetrics() {
  return *sequenceMetrics_Accessor;
}

uci::type::OrbitMetricsMDT& OrbitMetricsMDT::setSequenceMetrics(const uci::type::OrbitMetricsMDT::SequenceMetrics& accessor) {
  if (&accessor != sequenceMetrics_Accessor.get()) {
    sequenceMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitMetricsMDT::SegmentMetrics& OrbitMetricsMDT::getSegmentMetrics() const {
  return *segmentMetrics_Accessor;
}

uci::type::OrbitMetricsMDT::SegmentMetrics& OrbitMetricsMDT::getSegmentMetrics() {
  return *segmentMetrics_Accessor;
}

uci::type::OrbitMetricsMDT& OrbitMetricsMDT::setSegmentMetrics(const uci::type::OrbitMetricsMDT::SegmentMetrics& accessor) {
  if (&accessor != segmentMetrics_Accessor.get()) {
    segmentMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitActivityMetricsType& OrbitMetricsMDT::getOrbitActivityMetrics_() const {
  if (orbitActivityMetrics_Accessor) {
    return *orbitActivityMetrics_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitActivityMetrics(): An attempt was made to get an optional field that was not enabled, call hasOrbitActivityMetrics() to determine if it is safe to call getOrbitActivityMetrics()");
}

const uci::type::OrbitActivityMetricsType& OrbitMetricsMDT::getOrbitActivityMetrics() const {
  return getOrbitActivityMetrics_();
}

uci::type::OrbitActivityMetricsType& OrbitMetricsMDT::getOrbitActivityMetrics() {
  return getOrbitActivityMetrics_();
}

uci::type::OrbitMetricsMDT& OrbitMetricsMDT::setOrbitActivityMetrics(const uci::type::OrbitActivityMetricsType& accessor) {
  enableOrbitActivityMetrics();
  if (&accessor != orbitActivityMetrics_Accessor.get()) {
    orbitActivityMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitMetricsMDT::hasOrbitActivityMetrics() const noexcept {
  return static_cast<bool>(orbitActivityMetrics_Accessor);
}

uci::type::OrbitActivityMetricsType& OrbitMetricsMDT::enableOrbitActivityMetrics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitActivityMetricsType : type};
  if ((!orbitActivityMetrics_Accessor) || (orbitActivityMetrics_Accessor->getAccessorType() != requestedType)) {
    orbitActivityMetrics_Accessor = OrbitActivityMetricsType::create(requestedType);
    if (!orbitActivityMetrics_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitActivityMetrics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitActivityMetrics_Accessor;
}

uci::type::OrbitMetricsMDT& OrbitMetricsMDT::clearOrbitActivityMetrics() noexcept {
  orbitActivityMetrics_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitMetricsMDT> OrbitMetricsMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitMetricsMDT : type};
  return (requestedType == uci::type::accessorType::orbitMetricsMDT) ? boost::make_unique<OrbitMetricsMDT>() : nullptr;
}

/**  */
namespace OrbitMetricsMDT_Names {

constexpr const char* Extern_Type_Name{"OrbitMetricsMDT"};
constexpr const char* MetricsID_Name{"MetricsID"};
constexpr const char* OrbitPlanID_Name{"OrbitPlanID"};
constexpr const char* OrbitParts_Name{"OrbitParts"};
constexpr const char* OrbitActivityPlanID_Name{"OrbitActivityPlanID"};
constexpr const char* ActivityParts_Name{"ActivityParts"};
constexpr const char* OrbitMetrics_Name{"OrbitMetrics"};
constexpr const char* SequenceMetrics_Name{"SequenceMetrics"};
constexpr const char* SegmentMetrics_Name{"SegmentMetrics"};
constexpr const char* OrbitActivityMetrics_Name{"OrbitActivityMetrics"};

} // namespace OrbitMetricsMDT_Names

void OrbitMetricsMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitMetricsMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitMetricsMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::MetricsID_Name) {
      OrbitMetricsID_Type::deserialize(valueType.second, accessor.getMetricsID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::OrbitPlanID_Name) {
      OrbitPlanID_Type::deserialize(valueType.second, accessor.getOrbitPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::OrbitParts_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitMetricsMDT::OrbitParts& boundedList = accessor.getOrbitParts();
        const uci::type::OrbitMetricsMDT::OrbitParts::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::OrbitActivityPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitMetricsMDT::OrbitActivityPlanID& boundedList = accessor.getOrbitActivityPlanID();
        const uci::type::OrbitMetricsMDT::OrbitActivityPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitActivityPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::ActivityParts_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitMetricsMDT::ActivityParts& boundedList = accessor.getActivityParts();
        const uci::type::OrbitMetricsMDT::ActivityParts::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::OrbitMetrics_Name) {
      SatelliteEnduranceType::deserialize(valueType.second, accessor.enableOrbitMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::SequenceMetrics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitMetricsMDT::SequenceMetrics& boundedList = accessor.getSequenceMetrics();
        const uci::type::OrbitMetricsMDT::SequenceMetrics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitManeuverSequenceMetricsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::SegmentMetrics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitMetricsMDT::SegmentMetrics& boundedList = accessor.getSegmentMetrics();
        const uci::type::OrbitMetricsMDT::SegmentMetrics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitManeuverSegmentMetricsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::OrbitActivityMetrics_Name) {
      OrbitActivityMetricsType::deserialize(valueType.second, accessor.enableOrbitActivityMetrics(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitMetricsMDT::serialize(const uci::type::OrbitMetricsMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitMetricsMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitMetricsMDT_Names::Extern_Type_Name);
  }
  OrbitMetricsID_Type::serialize(accessor.getMetricsID(), node, OrbitMetricsMDT_Names::MetricsID_Name);
  OrbitPlanID_Type::serialize(accessor.getOrbitPlanID(), node, OrbitMetricsMDT_Names::OrbitPlanID_Name);
  {
    const uci::type::OrbitMetricsMDT::OrbitParts& boundedList = accessor.getOrbitParts();
    for (uci::type::OrbitMetricsMDT::OrbitParts::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitPlanPartsEnum::serialize(boundedList.at(i), node, OrbitMetricsMDT_Names::OrbitParts_Name, false);
    }
  }
  {
    const uci::type::OrbitMetricsMDT::OrbitActivityPlanID& boundedList = accessor.getOrbitActivityPlanID();
    for (uci::type::OrbitMetricsMDT::OrbitActivityPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitActivityPlanID_Type::serialize(boundedList.at(i), node, OrbitMetricsMDT_Names::OrbitActivityPlanID_Name);
    }
  }
  {
    const uci::type::OrbitMetricsMDT::ActivityParts& boundedList = accessor.getActivityParts();
    for (uci::type::OrbitMetricsMDT::ActivityParts::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ActivityPlanPartsEnum::serialize(boundedList.at(i), node, OrbitMetricsMDT_Names::ActivityParts_Name, false);
    }
  }
  if (accessor.hasOrbitMetrics()) {
    SatelliteEnduranceType::serialize(accessor.getOrbitMetrics(), node, OrbitMetricsMDT_Names::OrbitMetrics_Name);
  }
  {
    const uci::type::OrbitMetricsMDT::SequenceMetrics& boundedList = accessor.getSequenceMetrics();
    for (uci::type::OrbitMetricsMDT::SequenceMetrics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitManeuverSequenceMetricsType::serialize(boundedList.at(i), node, OrbitMetricsMDT_Names::SequenceMetrics_Name);
    }
  }
  {
    const uci::type::OrbitMetricsMDT::SegmentMetrics& boundedList = accessor.getSegmentMetrics();
    for (uci::type::OrbitMetricsMDT::SegmentMetrics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitManeuverSegmentMetricsType::serialize(boundedList.at(i), node, OrbitMetricsMDT_Names::SegmentMetrics_Name);
    }
  }
  if (accessor.hasOrbitActivityMetrics()) {
    OrbitActivityMetricsType::serialize(accessor.getOrbitActivityMetrics(), node, OrbitMetricsMDT_Names::OrbitActivityMetrics_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitMetricsMDT& OrbitMetricsMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitMetricsMDT>().release());
}

uci::type::OrbitMetricsMDT& OrbitMetricsMDT::create(const uci::type::OrbitMetricsMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitMetricsMDT> newAccessor{boost::make_unique<asb_uci::type::OrbitMetricsMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitMetricsMDT::destroy(uci::type::OrbitMetricsMDT& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitMetricsMDT*>(&accessor);
}

} // namespace type

} // namespace uci

