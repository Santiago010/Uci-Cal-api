/** @file AllowableSensorsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AllowableSensorsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/SecurityInformationType.h"
#include "../../../include/asb_uci/type/SensorConstraintsType.h"
#include "../../../include/asb_uci/type/SensorCountConstraintType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AllowableSensorsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SecurityInformationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SensorCountConstraintType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AllowableSensorsType::AllowableSensorsType() = default;

AllowableSensorsType::~AllowableSensorsType() = default;

void AllowableSensorsType::copy(const uci::type::AllowableSensorsType& accessor) {
  copyImpl(accessor, false);
}

void AllowableSensorsType::copyImpl(const uci::type::AllowableSensorsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AllowableSensorsType&>(accessor);
    if (accessorImpl.sensorCountConstraint_Accessor) {
      setSensorCountConstraint(*(accessorImpl.sensorCountConstraint_Accessor));
    } else {
      sensorCountConstraint_Accessor.reset();
    }
    if (accessorImpl.required_Accessor) {
      setRequired(*(accessorImpl.required_Accessor));
    } else {
      required_Accessor.reset();
    }
    if (accessorImpl.allowed_Accessor) {
      setAllowed(*(accessorImpl.allowed_Accessor));
    } else {
      allowed_Accessor.reset();
    }
    if (accessorImpl.excluded_Accessor) {
      setExcluded(*(accessorImpl.excluded_Accessor));
    } else {
      excluded_Accessor.reset();
    }
    if (accessorImpl.minOperatingClassificationLevel_Accessor) {
      setMinOperatingClassificationLevel(*(accessorImpl.minOperatingClassificationLevel_Accessor));
    } else {
      minOperatingClassificationLevel_Accessor.reset();
    }
    if (accessorImpl.hasNearRealTimeProduct()) {
      setNearRealTimeProduct(accessorImpl.getNearRealTimeProduct());
    } else {
      clearNearRealTimeProduct();
    }
  }
}

void AllowableSensorsType::reset() noexcept {
  sensorCountConstraint_Accessor.reset();
  required_Accessor.reset();
  allowed_Accessor.reset();
  excluded_Accessor.reset();
  minOperatingClassificationLevel_Accessor.reset();
  clearNearRealTimeProduct();
}

uci::type::SensorCountConstraintType& AllowableSensorsType::getSensorCountConstraint_() const {
  if (sensorCountConstraint_Accessor) {
    return *sensorCountConstraint_Accessor;
  }
  throw uci::base::UCIException("Error in getSensorCountConstraint(): An attempt was made to get an optional field that was not enabled, call hasSensorCountConstraint() to determine if it is safe to call getSensorCountConstraint()");
}

const uci::type::SensorCountConstraintType& AllowableSensorsType::getSensorCountConstraint() const {
  return getSensorCountConstraint_();
}

uci::type::SensorCountConstraintType& AllowableSensorsType::getSensorCountConstraint() {
  return getSensorCountConstraint_();
}

uci::type::AllowableSensorsType& AllowableSensorsType::setSensorCountConstraint(const uci::type::SensorCountConstraintType& accessor) {
  enableSensorCountConstraint();
  if (&accessor != sensorCountConstraint_Accessor.get()) {
    sensorCountConstraint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AllowableSensorsType::hasSensorCountConstraint() const noexcept {
  return static_cast<bool>(sensorCountConstraint_Accessor);
}

uci::type::SensorCountConstraintType& AllowableSensorsType::enableSensorCountConstraint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorCountConstraintType : type};
  if ((!sensorCountConstraint_Accessor) || (sensorCountConstraint_Accessor->getAccessorType() != requestedType)) {
    sensorCountConstraint_Accessor = SensorCountConstraintType::create(requestedType);
    if (!sensorCountConstraint_Accessor) {
      throw uci::base::UCIException("Error in enableSensorCountConstraint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sensorCountConstraint_Accessor;
}

uci::type::AllowableSensorsType& AllowableSensorsType::clearSensorCountConstraint() noexcept {
  sensorCountConstraint_Accessor.reset();
  return *this;
}

uci::type::SensorConstraintsType& AllowableSensorsType::getRequired_() const {
  if (required_Accessor) {
    return *required_Accessor;
  }
  throw uci::base::UCIException("Error in getRequired(): An attempt was made to get an optional field that was not enabled, call hasRequired() to determine if it is safe to call getRequired()");
}

const uci::type::SensorConstraintsType& AllowableSensorsType::getRequired() const {
  return getRequired_();
}

uci::type::SensorConstraintsType& AllowableSensorsType::getRequired() {
  return getRequired_();
}

uci::type::AllowableSensorsType& AllowableSensorsType::setRequired(const uci::type::SensorConstraintsType& accessor) {
  enableRequired();
  if (&accessor != required_Accessor.get()) {
    required_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AllowableSensorsType::hasRequired() const noexcept {
  return static_cast<bool>(required_Accessor);
}

uci::type::SensorConstraintsType& AllowableSensorsType::enableRequired(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorConstraintsType : type};
  if ((!required_Accessor) || (required_Accessor->getAccessorType() != requestedType)) {
    required_Accessor = SensorConstraintsType::create(requestedType);
    if (!required_Accessor) {
      throw uci::base::UCIException("Error in enableRequired(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *required_Accessor;
}

uci::type::AllowableSensorsType& AllowableSensorsType::clearRequired() noexcept {
  required_Accessor.reset();
  return *this;
}

uci::type::SensorConstraintsType& AllowableSensorsType::getAllowed_() const {
  if (allowed_Accessor) {
    return *allowed_Accessor;
  }
  throw uci::base::UCIException("Error in getAllowed(): An attempt was made to get an optional field that was not enabled, call hasAllowed() to determine if it is safe to call getAllowed()");
}

const uci::type::SensorConstraintsType& AllowableSensorsType::getAllowed() const {
  return getAllowed_();
}

uci::type::SensorConstraintsType& AllowableSensorsType::getAllowed() {
  return getAllowed_();
}

uci::type::AllowableSensorsType& AllowableSensorsType::setAllowed(const uci::type::SensorConstraintsType& accessor) {
  enableAllowed();
  if (&accessor != allowed_Accessor.get()) {
    allowed_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AllowableSensorsType::hasAllowed() const noexcept {
  return static_cast<bool>(allowed_Accessor);
}

uci::type::SensorConstraintsType& AllowableSensorsType::enableAllowed(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorConstraintsType : type};
  if ((!allowed_Accessor) || (allowed_Accessor->getAccessorType() != requestedType)) {
    allowed_Accessor = SensorConstraintsType::create(requestedType);
    if (!allowed_Accessor) {
      throw uci::base::UCIException("Error in enableAllowed(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *allowed_Accessor;
}

uci::type::AllowableSensorsType& AllowableSensorsType::clearAllowed() noexcept {
  allowed_Accessor.reset();
  return *this;
}

uci::type::SensorConstraintsType& AllowableSensorsType::getExcluded_() const {
  if (excluded_Accessor) {
    return *excluded_Accessor;
  }
  throw uci::base::UCIException("Error in getExcluded(): An attempt was made to get an optional field that was not enabled, call hasExcluded() to determine if it is safe to call getExcluded()");
}

const uci::type::SensorConstraintsType& AllowableSensorsType::getExcluded() const {
  return getExcluded_();
}

uci::type::SensorConstraintsType& AllowableSensorsType::getExcluded() {
  return getExcluded_();
}

uci::type::AllowableSensorsType& AllowableSensorsType::setExcluded(const uci::type::SensorConstraintsType& accessor) {
  enableExcluded();
  if (&accessor != excluded_Accessor.get()) {
    excluded_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AllowableSensorsType::hasExcluded() const noexcept {
  return static_cast<bool>(excluded_Accessor);
}

uci::type::SensorConstraintsType& AllowableSensorsType::enableExcluded(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorConstraintsType : type};
  if ((!excluded_Accessor) || (excluded_Accessor->getAccessorType() != requestedType)) {
    excluded_Accessor = SensorConstraintsType::create(requestedType);
    if (!excluded_Accessor) {
      throw uci::base::UCIException("Error in enableExcluded(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *excluded_Accessor;
}

uci::type::AllowableSensorsType& AllowableSensorsType::clearExcluded() noexcept {
  excluded_Accessor.reset();
  return *this;
}

uci::type::SecurityInformationType& AllowableSensorsType::getMinOperatingClassificationLevel_() const {
  if (minOperatingClassificationLevel_Accessor) {
    return *minOperatingClassificationLevel_Accessor;
  }
  throw uci::base::UCIException("Error in getMinOperatingClassificationLevel(): An attempt was made to get an optional field that was not enabled, call hasMinOperatingClassificationLevel() to determine if it is safe to call getMinOperatingClassificationLevel()");
}

const uci::type::SecurityInformationType& AllowableSensorsType::getMinOperatingClassificationLevel() const {
  return getMinOperatingClassificationLevel_();
}

uci::type::SecurityInformationType& AllowableSensorsType::getMinOperatingClassificationLevel() {
  return getMinOperatingClassificationLevel_();
}

uci::type::AllowableSensorsType& AllowableSensorsType::setMinOperatingClassificationLevel(const uci::type::SecurityInformationType& accessor) {
  enableMinOperatingClassificationLevel();
  if (&accessor != minOperatingClassificationLevel_Accessor.get()) {
    minOperatingClassificationLevel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AllowableSensorsType::hasMinOperatingClassificationLevel() const noexcept {
  return static_cast<bool>(minOperatingClassificationLevel_Accessor);
}

uci::type::SecurityInformationType& AllowableSensorsType::enableMinOperatingClassificationLevel(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::securityInformationType : type};
  if ((!minOperatingClassificationLevel_Accessor) || (minOperatingClassificationLevel_Accessor->getAccessorType() != requestedType)) {
    minOperatingClassificationLevel_Accessor = SecurityInformationType::create(requestedType);
    if (!minOperatingClassificationLevel_Accessor) {
      throw uci::base::UCIException("Error in enableMinOperatingClassificationLevel(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *minOperatingClassificationLevel_Accessor;
}

uci::type::AllowableSensorsType& AllowableSensorsType::clearMinOperatingClassificationLevel() noexcept {
  minOperatingClassificationLevel_Accessor.reset();
  return *this;
}

xs::Boolean AllowableSensorsType::getNearRealTimeProduct() const {
  if (nearRealTimeProduct_Accessor) {
    return *nearRealTimeProduct_Accessor;
  }
  throw uci::base::UCIException("Error in getNearRealTimeProduct(): An attempt was made to get an optional field that was not enabled, call hasNearRealTimeProduct() to determine if it is safe to call getNearRealTimeProduct()");
}

uci::type::AllowableSensorsType& AllowableSensorsType::setNearRealTimeProduct(xs::Boolean value) {
  nearRealTimeProduct_Accessor = value;
  return *this;
}

bool AllowableSensorsType::hasNearRealTimeProduct() const noexcept {
  return nearRealTimeProduct_Accessor.has_value();
}

uci::type::AllowableSensorsType& AllowableSensorsType::clearNearRealTimeProduct() noexcept {
  nearRealTimeProduct_Accessor.reset();
  return *this;
}

std::unique_ptr<AllowableSensorsType> AllowableSensorsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::allowableSensorsType : type};
  return (requestedType == uci::type::accessorType::allowableSensorsType) ? boost::make_unique<AllowableSensorsType>() : nullptr;
}

/**  */
namespace AllowableSensorsType_Names {

constexpr const char* Extern_Type_Name{"AllowableSensorsType"};
constexpr const char* SensorCountConstraint_Name{"SensorCountConstraint"};
constexpr const char* Required_Name{"Required"};
constexpr const char* Allowed_Name{"Allowed"};
constexpr const char* Excluded_Name{"Excluded"};
constexpr const char* MinOperatingClassificationLevel_Name{"MinOperatingClassificationLevel"};
constexpr const char* NearRealTimeProduct_Name{"NearRealTimeProduct"};

} // namespace AllowableSensorsType_Names

void AllowableSensorsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AllowableSensorsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AllowableSensorsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AllowableSensorsType_Names::SensorCountConstraint_Name) {
      SensorCountConstraintType::deserialize(valueType.second, accessor.enableSensorCountConstraint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AllowableSensorsType_Names::Required_Name) {
      SensorConstraintsType::deserialize(valueType.second, accessor.enableRequired(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AllowableSensorsType_Names::Allowed_Name) {
      SensorConstraintsType::deserialize(valueType.second, accessor.enableAllowed(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AllowableSensorsType_Names::Excluded_Name) {
      SensorConstraintsType::deserialize(valueType.second, accessor.enableExcluded(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AllowableSensorsType_Names::MinOperatingClassificationLevel_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.enableMinOperatingClassificationLevel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AllowableSensorsType_Names::NearRealTimeProduct_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNearRealTimeProduct(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string AllowableSensorsType::serialize(const uci::type::AllowableSensorsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AllowableSensorsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AllowableSensorsType_Names::Extern_Type_Name);
  }
  if (accessor.hasSensorCountConstraint()) {
    SensorCountConstraintType::serialize(accessor.getSensorCountConstraint(), node, AllowableSensorsType_Names::SensorCountConstraint_Name);
  }
  if (accessor.hasRequired()) {
    SensorConstraintsType::serialize(accessor.getRequired(), node, AllowableSensorsType_Names::Required_Name);
  }
  if (accessor.hasAllowed()) {
    SensorConstraintsType::serialize(accessor.getAllowed(), node, AllowableSensorsType_Names::Allowed_Name);
  }
  if (accessor.hasExcluded()) {
    SensorConstraintsType::serialize(accessor.getExcluded(), node, AllowableSensorsType_Names::Excluded_Name);
  }
  if (accessor.hasMinOperatingClassificationLevel()) {
    SecurityInformationType::serialize(accessor.getMinOperatingClassificationLevel(), node, AllowableSensorsType_Names::MinOperatingClassificationLevel_Name);
  }
  if (accessor.hasNearRealTimeProduct()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getNearRealTimeProduct(), node, AllowableSensorsType_Names::NearRealTimeProduct_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AllowableSensorsType& AllowableSensorsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AllowableSensorsType>().release());
}

uci::type::AllowableSensorsType& AllowableSensorsType::create(const uci::type::AllowableSensorsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AllowableSensorsType> newAccessor{boost::make_unique<asb_uci::type::AllowableSensorsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AllowableSensorsType::destroy(uci::type::AllowableSensorsType& accessor) {
  delete dynamic_cast<asb_uci::type::AllowableSensorsType*>(&accessor);
}

} // namespace type

} // namespace uci

