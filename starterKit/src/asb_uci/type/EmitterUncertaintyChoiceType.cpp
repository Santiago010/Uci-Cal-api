/** @file EmitterUncertaintyChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EmitterUncertaintyChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EllipseType.h"
#include "../../../include/asb_uci/type/RectangleType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EllipseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmitterUncertaintyChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RectangleType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EmitterUncertaintyChoiceType::EmitterUncertaintyChoiceType() = default;

EmitterUncertaintyChoiceType::~EmitterUncertaintyChoiceType() = default;

void EmitterUncertaintyChoiceType::copy(const uci::type::EmitterUncertaintyChoiceType& accessor) {
  copyImpl(accessor, false);
}

void EmitterUncertaintyChoiceType::copyImpl(const uci::type::EmitterUncertaintyChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EmitterUncertaintyChoiceType&>(accessor);
    if (accessorImpl.uncertaintyEllipse_Accessor) {
      setUncertaintyEllipse(*(accessorImpl.uncertaintyEllipse_Accessor));
    } else {
      uncertaintyEllipse_Accessor.reset();
    }
    if (accessorImpl.uncertaintyRectangle_Accessor) {
      setUncertaintyRectangle(*(accessorImpl.uncertaintyRectangle_Accessor));
    } else {
      uncertaintyRectangle_Accessor.reset();
    }
  }
}

void EmitterUncertaintyChoiceType::reset() noexcept {
  uncertaintyEllipse_Accessor.reset();
  uncertaintyRectangle_Accessor.reset();
}

uci::type::EmitterUncertaintyChoiceType::EmitterUncertaintyChoiceTypeChoice EmitterUncertaintyChoiceType::getEmitterUncertaintyChoiceTypeChoiceOrdinal() const noexcept {
  if (uncertaintyEllipse_Accessor) {
    return EMITTERUNCERTAINTYCHOICETYPE_CHOICE_UNCERTAINTYELLIPSE;
  }
  if (uncertaintyRectangle_Accessor) {
    return EMITTERUNCERTAINTYCHOICETYPE_CHOICE_UNCERTAINTYRECTANGLE;
  }
  return EMITTERUNCERTAINTYCHOICETYPE_CHOICE_NONE;
}

uci::type::EmitterUncertaintyChoiceType& EmitterUncertaintyChoiceType::setEmitterUncertaintyChoiceTypeChoiceOrdinal(uci::type::EmitterUncertaintyChoiceType::EmitterUncertaintyChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EMITTERUNCERTAINTYCHOICETYPE_CHOICE_UNCERTAINTYELLIPSE:
      chooseUncertaintyEllipse("setEmitterUncertaintyChoiceTypeChoiceOrdinal", type);
      break;
    case EMITTERUNCERTAINTYCHOICETYPE_CHOICE_UNCERTAINTYRECTANGLE:
      chooseUncertaintyRectangle("setEmitterUncertaintyChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEmitterUncertaintyChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EllipseType& EmitterUncertaintyChoiceType::getUncertaintyEllipse_() const {
  if (uncertaintyEllipse_Accessor) {
    return *uncertaintyEllipse_Accessor;
  }
  throw uci::base::UCIException("Error in getUncertaintyEllipse(): Unable to get UncertaintyEllipse, field not selected");
}

const uci::type::EllipseType& EmitterUncertaintyChoiceType::getUncertaintyEllipse() const {
  return getUncertaintyEllipse_();
}

uci::type::EllipseType& EmitterUncertaintyChoiceType::getUncertaintyEllipse() {
  return getUncertaintyEllipse_();
}

uci::type::EmitterUncertaintyChoiceType& EmitterUncertaintyChoiceType::setUncertaintyEllipse(const uci::type::EllipseType& accessor) {
  chooseUncertaintyEllipse("setUncertaintyEllipse", accessor.getAccessorType());
  if (&accessor != uncertaintyEllipse_Accessor.get()) {
    uncertaintyEllipse_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EmitterUncertaintyChoiceType::isUncertaintyEllipse() const noexcept {
  return static_cast<bool>(uncertaintyEllipse_Accessor);
}

uci::type::EllipseType& EmitterUncertaintyChoiceType::chooseUncertaintyEllipse(const std::string& method, uci::base::accessorType::AccessorType type) {
  uncertaintyRectangle_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ellipseType : type};
  if ((!uncertaintyEllipse_Accessor) || (uncertaintyEllipse_Accessor->getAccessorType() != requestedType)) {
    uncertaintyEllipse_Accessor = EllipseType::create(type);
    if (!uncertaintyEllipse_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *uncertaintyEllipse_Accessor;
}

uci::type::EllipseType& EmitterUncertaintyChoiceType::chooseUncertaintyEllipse(uci::base::accessorType::AccessorType type) {
  return chooseUncertaintyEllipse("chooseUncertaintyEllipse", type);
}

uci::type::RectangleType& EmitterUncertaintyChoiceType::getUncertaintyRectangle_() const {
  if (uncertaintyRectangle_Accessor) {
    return *uncertaintyRectangle_Accessor;
  }
  throw uci::base::UCIException("Error in getUncertaintyRectangle(): Unable to get UncertaintyRectangle, field not selected");
}

const uci::type::RectangleType& EmitterUncertaintyChoiceType::getUncertaintyRectangle() const {
  return getUncertaintyRectangle_();
}

uci::type::RectangleType& EmitterUncertaintyChoiceType::getUncertaintyRectangle() {
  return getUncertaintyRectangle_();
}

uci::type::EmitterUncertaintyChoiceType& EmitterUncertaintyChoiceType::setUncertaintyRectangle(const uci::type::RectangleType& accessor) {
  chooseUncertaintyRectangle("setUncertaintyRectangle", accessor.getAccessorType());
  if (&accessor != uncertaintyRectangle_Accessor.get()) {
    uncertaintyRectangle_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EmitterUncertaintyChoiceType::isUncertaintyRectangle() const noexcept {
  return static_cast<bool>(uncertaintyRectangle_Accessor);
}

uci::type::RectangleType& EmitterUncertaintyChoiceType::chooseUncertaintyRectangle(const std::string& method, uci::base::accessorType::AccessorType type) {
  uncertaintyEllipse_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rectangleType : type};
  if ((!uncertaintyRectangle_Accessor) || (uncertaintyRectangle_Accessor->getAccessorType() != requestedType)) {
    uncertaintyRectangle_Accessor = RectangleType::create(type);
    if (!uncertaintyRectangle_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *uncertaintyRectangle_Accessor;
}

uci::type::RectangleType& EmitterUncertaintyChoiceType::chooseUncertaintyRectangle(uci::base::accessorType::AccessorType type) {
  return chooseUncertaintyRectangle("chooseUncertaintyRectangle", type);
}

std::unique_ptr<EmitterUncertaintyChoiceType> EmitterUncertaintyChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emitterUncertaintyChoiceType : type};
  return (requestedType == uci::type::accessorType::emitterUncertaintyChoiceType) ? boost::make_unique<EmitterUncertaintyChoiceType>() : nullptr;
}

/**  */
namespace EmitterUncertaintyChoiceType_Names {

constexpr const char* Extern_Type_Name{"EmitterUncertaintyChoiceType"};
constexpr const char* UncertaintyEllipse_Name{"UncertaintyEllipse"};
constexpr const char* UncertaintyRectangle_Name{"UncertaintyRectangle"};

} // namespace EmitterUncertaintyChoiceType_Names

void EmitterUncertaintyChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EmitterUncertaintyChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EmitterUncertaintyChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EmitterUncertaintyChoiceType_Names::UncertaintyEllipse_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseUncertaintyEllipse(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmitterUncertaintyChoiceType_Names::UncertaintyRectangle_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseUncertaintyRectangle(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string EmitterUncertaintyChoiceType::serialize(const uci::type::EmitterUncertaintyChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EmitterUncertaintyChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EmitterUncertaintyChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isUncertaintyEllipse()) {
    EllipseType::serialize(accessor.getUncertaintyEllipse(), node, EmitterUncertaintyChoiceType_Names::UncertaintyEllipse_Name);
  } else if (accessor.isUncertaintyRectangle()) {
    RectangleType::serialize(accessor.getUncertaintyRectangle(), node, EmitterUncertaintyChoiceType_Names::UncertaintyRectangle_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EmitterUncertaintyChoiceType& EmitterUncertaintyChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EmitterUncertaintyChoiceType>().release());
}

uci::type::EmitterUncertaintyChoiceType& EmitterUncertaintyChoiceType::create(const uci::type::EmitterUncertaintyChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EmitterUncertaintyChoiceType> newAccessor{boost::make_unique<asb_uci::type::EmitterUncertaintyChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EmitterUncertaintyChoiceType::destroy(uci::type::EmitterUncertaintyChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::EmitterUncertaintyChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

