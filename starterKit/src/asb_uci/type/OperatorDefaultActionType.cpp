/** @file OperatorDefaultActionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OperatorDefaultActionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OperatorActionID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DurationType.h"
#include "uci/type/OperatorActionID_Type.h"
#include "uci/type/OperatorDefaultActionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OperatorDefaultActionType::OperatorDefaultActionType()
  : operatorActionID_Accessor{boost::make_unique<OperatorActionID_Type>()} {
}

OperatorDefaultActionType::~OperatorDefaultActionType() = default;

void OperatorDefaultActionType::copy(const uci::type::OperatorDefaultActionType& accessor) {
  copyImpl(accessor, false);
}

void OperatorDefaultActionType::copyImpl(const uci::type::OperatorDefaultActionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OperatorDefaultActionType&>(accessor);
    setOperatorActionID(*(accessorImpl.operatorActionID_Accessor));
    setTimeout(accessorImpl.timeout_Accessor);
  }
}

void OperatorDefaultActionType::reset() noexcept {
  operatorActionID_Accessor->reset();
  timeout_Accessor = 0;
}

const uci::type::OperatorActionID_Type& OperatorDefaultActionType::getOperatorActionID() const {
  return *operatorActionID_Accessor;
}

uci::type::OperatorActionID_Type& OperatorDefaultActionType::getOperatorActionID() {
  return *operatorActionID_Accessor;
}

uci::type::OperatorDefaultActionType& OperatorDefaultActionType::setOperatorActionID(const uci::type::OperatorActionID_Type& accessor) {
  if (&accessor != operatorActionID_Accessor.get()) {
    operatorActionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DurationTypeValue OperatorDefaultActionType::getTimeout() const {
  return timeout_Accessor;
}

uci::type::OperatorDefaultActionType& OperatorDefaultActionType::setTimeout(uci::type::DurationTypeValue value) {
  timeout_Accessor = value;
  return *this;
}


std::unique_ptr<OperatorDefaultActionType> OperatorDefaultActionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorDefaultActionType : type};
  return (requestedType == uci::type::accessorType::operatorDefaultActionType) ? boost::make_unique<OperatorDefaultActionType>() : nullptr;
}

/**  */
namespace OperatorDefaultActionType_Names {

constexpr const char* Extern_Type_Name{"OperatorDefaultActionType"};
constexpr const char* OperatorActionID_Name{"OperatorActionID"};
constexpr const char* Timeout_Name{"Timeout"};

} // namespace OperatorDefaultActionType_Names

void OperatorDefaultActionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OperatorDefaultActionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OperatorDefaultActionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OperatorDefaultActionType_Names::OperatorActionID_Name) {
      OperatorActionID_Type::deserialize(valueType.second, accessor.getOperatorActionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorDefaultActionType_Names::Timeout_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeout(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string OperatorDefaultActionType::serialize(const uci::type::OperatorDefaultActionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OperatorDefaultActionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OperatorDefaultActionType_Names::Extern_Type_Name);
  }
  OperatorActionID_Type::serialize(accessor.getOperatorActionID(), node, OperatorDefaultActionType_Names::OperatorActionID_Name);
  asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTimeout(), node, OperatorDefaultActionType_Names::Timeout_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OperatorDefaultActionType& OperatorDefaultActionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OperatorDefaultActionType>().release());
}

uci::type::OperatorDefaultActionType& OperatorDefaultActionType::create(const uci::type::OperatorDefaultActionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OperatorDefaultActionType> newAccessor{boost::make_unique<asb_uci::type::OperatorDefaultActionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OperatorDefaultActionType::destroy(uci::type::OperatorDefaultActionType& accessor) {
  delete dynamic_cast<asb_uci::type::OperatorDefaultActionType*>(&accessor);
}

} // namespace type

} // namespace uci

