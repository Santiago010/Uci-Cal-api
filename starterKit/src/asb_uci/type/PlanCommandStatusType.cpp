/** @file PlanCommandStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlanCommandStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CannotComplyType.h"
#include "asb_uci/type/CommandProcessingStateEnum.h"
#include "asb_uci/type/CompletionStatusType.h"
#include "asb_uci/type/IncompleteProcessingType.h"
#include "asb_uci/type/ProcessingStatusEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CannotComplyType.h"
#include "uci/type/CommandProcessingStateEnum.h"
#include "uci/type/CompletionStatusType.h"
#include "uci/type/IncompleteProcessingType.h"
#include "uci/type/PlanCommandStatusType.h"
#include "uci/type/ProcessingStatusEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanCommandStatusType::PlanCommandStatusType()
  : commandProcessingState_Accessor{boost::make_unique<CommandProcessingStateEnum>()},
    commandStatus_Accessor{boost::make_unique<ProcessingStatusEnum>()},
    incompleteItem_Accessor{boost::make_unique<IncompleteItem>(0, SIZE_MAX)} {
}

PlanCommandStatusType::~PlanCommandStatusType() = default;

void PlanCommandStatusType::copy(const uci::type::PlanCommandStatusType& accessor) {
  copyImpl(accessor, false);
}

void PlanCommandStatusType::copyImpl(const uci::type::PlanCommandStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlanCommandStatusType&>(accessor);
    setCommandProcessingState(*(accessorImpl.commandProcessingState_Accessor));
    if (accessorImpl.commandProcessingStateReason_Accessor) {
      setCommandProcessingStateReason(*(accessorImpl.commandProcessingStateReason_Accessor));
    } else {
      commandProcessingStateReason_Accessor.reset();
    }
    setCommandStatus(*(accessorImpl.commandStatus_Accessor));
    if (accessorImpl.completionStatus_Accessor) {
      setCompletionStatus(*(accessorImpl.completionStatus_Accessor));
    } else {
      completionStatus_Accessor.reset();
    }
    setIncompleteItem(*(accessorImpl.incompleteItem_Accessor));
  }
}

void PlanCommandStatusType::reset() noexcept {
  commandProcessingState_Accessor->reset();
  commandProcessingStateReason_Accessor.reset();
  commandStatus_Accessor->reset();
  completionStatus_Accessor.reset();
  incompleteItem_Accessor->reset();
}

const uci::type::CommandProcessingStateEnum& PlanCommandStatusType::getCommandProcessingState() const {
  return *commandProcessingState_Accessor;
}

uci::type::CommandProcessingStateEnum& PlanCommandStatusType::getCommandProcessingState() {
  return *commandProcessingState_Accessor;
}

uci::type::PlanCommandStatusType& PlanCommandStatusType::setCommandProcessingState(const uci::type::CommandProcessingStateEnum& accessor) {
  if (&accessor != commandProcessingState_Accessor.get()) {
    commandProcessingState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanCommandStatusType& PlanCommandStatusType::setCommandProcessingState(uci::type::CommandProcessingStateEnum::EnumerationItem value) {
  commandProcessingState_Accessor->setValue(value);
  return *this;
}


uci::type::CannotComplyType& PlanCommandStatusType::getCommandProcessingStateReason_() const {
  if (commandProcessingStateReason_Accessor) {
    return *commandProcessingStateReason_Accessor;
  }
  throw uci::base::UCIException("Error in getCommandProcessingStateReason(): An attempt was made to get an optional field that was not enabled, call hasCommandProcessingStateReason() to determine if it is safe to call getCommandProcessingStateReason()");
}

const uci::type::CannotComplyType& PlanCommandStatusType::getCommandProcessingStateReason() const {
  return getCommandProcessingStateReason_();
}

uci::type::CannotComplyType& PlanCommandStatusType::getCommandProcessingStateReason() {
  return getCommandProcessingStateReason_();
}

uci::type::PlanCommandStatusType& PlanCommandStatusType::setCommandProcessingStateReason(const uci::type::CannotComplyType& accessor) {
  enableCommandProcessingStateReason(accessor.getAccessorType());
  if (&accessor != commandProcessingStateReason_Accessor.get()) {
    commandProcessingStateReason_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PlanCommandStatusType::hasCommandProcessingStateReason() const noexcept {
  return static_cast<bool>(commandProcessingStateReason_Accessor);
}

uci::type::CannotComplyType& PlanCommandStatusType::enableCommandProcessingStateReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!commandProcessingStateReason_Accessor) || (commandProcessingStateReason_Accessor->getAccessorType() != requestedType)) {
    commandProcessingStateReason_Accessor = CannotComplyType::create(requestedType);
    if (!commandProcessingStateReason_Accessor) {
      throw uci::base::UCIException("Error in enableCommandProcessingStateReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commandProcessingStateReason_Accessor;
}

uci::type::PlanCommandStatusType& PlanCommandStatusType::clearCommandProcessingStateReason() noexcept {
  commandProcessingStateReason_Accessor.reset();
  return *this;
}

const uci::type::ProcessingStatusEnum& PlanCommandStatusType::getCommandStatus() const {
  return *commandStatus_Accessor;
}

uci::type::ProcessingStatusEnum& PlanCommandStatusType::getCommandStatus() {
  return *commandStatus_Accessor;
}

uci::type::PlanCommandStatusType& PlanCommandStatusType::setCommandStatus(const uci::type::ProcessingStatusEnum& accessor) {
  if (&accessor != commandStatus_Accessor.get()) {
    commandStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanCommandStatusType& PlanCommandStatusType::setCommandStatus(uci::type::ProcessingStatusEnum::EnumerationItem value) {
  commandStatus_Accessor->setValue(value);
  return *this;
}


uci::type::CompletionStatusType& PlanCommandStatusType::getCompletionStatus_() const {
  if (completionStatus_Accessor) {
    return *completionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getCompletionStatus(): An attempt was made to get an optional field that was not enabled, call hasCompletionStatus() to determine if it is safe to call getCompletionStatus()");
}

const uci::type::CompletionStatusType& PlanCommandStatusType::getCompletionStatus() const {
  return getCompletionStatus_();
}

uci::type::CompletionStatusType& PlanCommandStatusType::getCompletionStatus() {
  return getCompletionStatus_();
}

uci::type::PlanCommandStatusType& PlanCommandStatusType::setCompletionStatus(const uci::type::CompletionStatusType& accessor) {
  enableCompletionStatus();
  if (&accessor != completionStatus_Accessor.get()) {
    completionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanCommandStatusType::hasCompletionStatus() const noexcept {
  return static_cast<bool>(completionStatus_Accessor);
}

uci::type::CompletionStatusType& PlanCommandStatusType::enableCompletionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::completionStatusType : type};
  if ((!completionStatus_Accessor) || (completionStatus_Accessor->getAccessorType() != requestedType)) {
    completionStatus_Accessor = CompletionStatusType::create(requestedType);
    if (!completionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableCompletionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *completionStatus_Accessor;
}

uci::type::PlanCommandStatusType& PlanCommandStatusType::clearCompletionStatus() noexcept {
  completionStatus_Accessor.reset();
  return *this;
}

const uci::type::PlanCommandStatusType::IncompleteItem& PlanCommandStatusType::getIncompleteItem() const {
  return *incompleteItem_Accessor;
}

uci::type::PlanCommandStatusType::IncompleteItem& PlanCommandStatusType::getIncompleteItem() {
  return *incompleteItem_Accessor;
}

uci::type::PlanCommandStatusType& PlanCommandStatusType::setIncompleteItem(const uci::type::PlanCommandStatusType::IncompleteItem& accessor) {
  if (&accessor != incompleteItem_Accessor.get()) {
    incompleteItem_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PlanCommandStatusType> PlanCommandStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planCommandStatusType : type};
  return (requestedType == uci::type::accessorType::planCommandStatusType) ? boost::make_unique<PlanCommandStatusType>() : nullptr;
}

/**  */
namespace PlanCommandStatusType_Names {

constexpr const char* Extern_Type_Name{"PlanCommandStatusType"};
constexpr const char* CommandProcessingState_Name{"CommandProcessingState"};
constexpr const char* CommandProcessingStateReason_Name{"CommandProcessingStateReason"};
constexpr const char* CommandStatus_Name{"CommandStatus"};
constexpr const char* CompletionStatus_Name{"CompletionStatus"};
constexpr const char* IncompleteItem_Name{"IncompleteItem"};

} // namespace PlanCommandStatusType_Names

void PlanCommandStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanCommandStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanCommandStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanCommandStatusType_Names::CommandProcessingState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCommandProcessingState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlanCommandStatusType_Names::CommandProcessingStateReason_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableCommandProcessingStateReason(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanCommandStatusType_Names::CommandStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCommandStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlanCommandStatusType_Names::CompletionStatus_Name) {
      CompletionStatusType::deserialize(valueType.second, accessor.enableCompletionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanCommandStatusType_Names::IncompleteItem_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanCommandStatusType::IncompleteItem& boundedList = accessor.getIncompleteItem();
        const uci::type::PlanCommandStatusType::IncompleteItem::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::IncompleteProcessingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PlanCommandStatusType::serialize(const uci::type::PlanCommandStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanCommandStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanCommandStatusType_Names::Extern_Type_Name);
  }
  CommandProcessingStateEnum::serialize(accessor.getCommandProcessingState(), node, PlanCommandStatusType_Names::CommandProcessingState_Name, false);
  if (accessor.hasCommandProcessingStateReason()) {
    CannotComplyType::serialize(accessor.getCommandProcessingStateReason(), node, PlanCommandStatusType_Names::CommandProcessingStateReason_Name);
  }
  ProcessingStatusEnum::serialize(accessor.getCommandStatus(), node, PlanCommandStatusType_Names::CommandStatus_Name, false);
  if (accessor.hasCompletionStatus()) {
    CompletionStatusType::serialize(accessor.getCompletionStatus(), node, PlanCommandStatusType_Names::CompletionStatus_Name);
  }
  {
    const uci::type::PlanCommandStatusType::IncompleteItem& boundedList = accessor.getIncompleteItem();
    for (uci::type::PlanCommandStatusType::IncompleteItem::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::IncompleteProcessingType::serialize(boundedList.at(i), node, PlanCommandStatusType_Names::IncompleteItem_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanCommandStatusType& PlanCommandStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanCommandStatusType>().release());
}

uci::type::PlanCommandStatusType& PlanCommandStatusType::create(const uci::type::PlanCommandStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanCommandStatusType> newAccessor{boost::make_unique<asb_uci::type::PlanCommandStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanCommandStatusType::destroy(uci::type::PlanCommandStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanCommandStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

