/** @file OpaqueCapabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OpaqueCapabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityID_Type.h"
#include "../../../include/asb_uci/type/CapabilityInitiationEnum.h"
#include "../../../include/asb_uci/type/PackageOperationEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CapabilityInitiationEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpaqueCapabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PackageOperationEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpaqueCapabilityType::OpaqueCapabilityType()
  : capabilityID_Accessor{boost::make_unique<CapabilityID_Type>()} {
}

OpaqueCapabilityType::~OpaqueCapabilityType() = default;

void OpaqueCapabilityType::copy(const uci::type::OpaqueCapabilityType& accessor) {
  copyImpl(accessor, false);
}

void OpaqueCapabilityType::copyImpl(const uci::type::OpaqueCapabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OpaqueCapabilityType&>(accessor);
    setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    if (accessorImpl.capabilityType_Accessor) {
      setCapabilityType(*(accessorImpl.capabilityType_Accessor));
    } else {
      capabilityType_Accessor.reset();
    }
    if (accessorImpl.packageOperation_Accessor) {
      setPackageOperation(*(accessorImpl.packageOperation_Accessor));
    } else {
      packageOperation_Accessor.reset();
    }
  }
}

void OpaqueCapabilityType::reset() noexcept {
  capabilityID_Accessor->reset();
  capabilityType_Accessor.reset();
  packageOperation_Accessor.reset();
}

const uci::type::CapabilityID_Type& OpaqueCapabilityType::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::CapabilityID_Type& OpaqueCapabilityType::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::OpaqueCapabilityType& OpaqueCapabilityType::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CapabilityInitiationEnum& OpaqueCapabilityType::getCapabilityType_() const {
  if (capabilityType_Accessor) {
    return *capabilityType_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityType(): An attempt was made to get an optional field that was not enabled, call hasCapabilityType() to determine if it is safe to call getCapabilityType()");
}

const uci::type::CapabilityInitiationEnum& OpaqueCapabilityType::getCapabilityType() const {
  return getCapabilityType_();
}

uci::type::CapabilityInitiationEnum& OpaqueCapabilityType::getCapabilityType() {
  return getCapabilityType_();
}

uci::type::OpaqueCapabilityType& OpaqueCapabilityType::setCapabilityType(const uci::type::CapabilityInitiationEnum& accessor) {
  enableCapabilityType();
  if (&accessor != capabilityType_Accessor.get()) {
    capabilityType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpaqueCapabilityType& OpaqueCapabilityType::setCapabilityType(const uci::type::CapabilityInitiationEnum::EnumerationItem value) {
  enableCapabilityType().setValue(value);
  return *this;
}

bool OpaqueCapabilityType::hasCapabilityType() const noexcept {
  return static_cast<bool>(capabilityType_Accessor);
}

uci::type::CapabilityInitiationEnum& OpaqueCapabilityType::enableCapabilityType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityInitiationEnum : type};
  if ((!capabilityType_Accessor) || (capabilityType_Accessor->getAccessorType() != requestedType)) {
    capabilityType_Accessor = CapabilityInitiationEnum::create(requestedType);
    if (!capabilityType_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityType_Accessor;
}

uci::type::OpaqueCapabilityType& OpaqueCapabilityType::clearCapabilityType() noexcept {
  capabilityType_Accessor.reset();
  return *this;
}

uci::type::PackageOperationEnum& OpaqueCapabilityType::getPackageOperation_() const {
  if (packageOperation_Accessor) {
    return *packageOperation_Accessor;
  }
  throw uci::base::UCIException("Error in getPackageOperation(): An attempt was made to get an optional field that was not enabled, call hasPackageOperation() to determine if it is safe to call getPackageOperation()");
}

const uci::type::PackageOperationEnum& OpaqueCapabilityType::getPackageOperation() const {
  return getPackageOperation_();
}

uci::type::PackageOperationEnum& OpaqueCapabilityType::getPackageOperation() {
  return getPackageOperation_();
}

uci::type::OpaqueCapabilityType& OpaqueCapabilityType::setPackageOperation(const uci::type::PackageOperationEnum& accessor) {
  enablePackageOperation();
  if (&accessor != packageOperation_Accessor.get()) {
    packageOperation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpaqueCapabilityType& OpaqueCapabilityType::setPackageOperation(const uci::type::PackageOperationEnum::EnumerationItem value) {
  enablePackageOperation().setValue(value);
  return *this;
}

bool OpaqueCapabilityType::hasPackageOperation() const noexcept {
  return static_cast<bool>(packageOperation_Accessor);
}

uci::type::PackageOperationEnum& OpaqueCapabilityType::enablePackageOperation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::packageOperationEnum : type};
  if ((!packageOperation_Accessor) || (packageOperation_Accessor->getAccessorType() != requestedType)) {
    packageOperation_Accessor = PackageOperationEnum::create(requestedType);
    if (!packageOperation_Accessor) {
      throw uci::base::UCIException("Error in enablePackageOperation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *packageOperation_Accessor;
}

uci::type::OpaqueCapabilityType& OpaqueCapabilityType::clearPackageOperation() noexcept {
  packageOperation_Accessor.reset();
  return *this;
}

std::unique_ptr<OpaqueCapabilityType> OpaqueCapabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opaqueCapabilityType : type};
  return (requestedType == uci::type::accessorType::opaqueCapabilityType) ? boost::make_unique<OpaqueCapabilityType>() : nullptr;
}

/**  */
namespace OpaqueCapabilityType_Names {

constexpr const char* Extern_Type_Name{"OpaqueCapabilityType"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* CapabilityType_Name{"CapabilityType"};
constexpr const char* PackageOperation_Name{"PackageOperation"};

} // namespace OpaqueCapabilityType_Names

void OpaqueCapabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpaqueCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpaqueCapabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpaqueCapabilityType_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.getCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpaqueCapabilityType_Names::CapabilityType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCapabilityType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OpaqueCapabilityType_Names::PackageOperation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePackageOperation().setValueFromName(*value);
      }
    }
  }
}

std::string OpaqueCapabilityType::serialize(const uci::type::OpaqueCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpaqueCapabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpaqueCapabilityType_Names::Extern_Type_Name);
  }
  CapabilityID_Type::serialize(accessor.getCapabilityID(), node, OpaqueCapabilityType_Names::CapabilityID_Name);
  if (accessor.hasCapabilityType()) {
    CapabilityInitiationEnum::serialize(accessor.getCapabilityType(), node, OpaqueCapabilityType_Names::CapabilityType_Name, false);
  }
  if (accessor.hasPackageOperation()) {
    PackageOperationEnum::serialize(accessor.getPackageOperation(), node, OpaqueCapabilityType_Names::PackageOperation_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OpaqueCapabilityType& OpaqueCapabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OpaqueCapabilityType>().release());
}

uci::type::OpaqueCapabilityType& OpaqueCapabilityType::create(const uci::type::OpaqueCapabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OpaqueCapabilityType> newAccessor{boost::make_unique<asb_uci::type::OpaqueCapabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OpaqueCapabilityType::destroy(uci::type::OpaqueCapabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::OpaqueCapabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

