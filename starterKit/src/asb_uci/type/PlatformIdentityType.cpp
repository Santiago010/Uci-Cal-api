/** @file PlatformIdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlatformIdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EnvironmentEnum.h"
#include "asb_uci/type/LaunchCapabilityEnum.h"
#include "asb_uci/type/SubmarineConfidenceLevelEnum.h"
#include "asb_uci/type/ThreatEnum.h"
#include "asb_uci/type/UnitTypeEnum.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EnvironmentEnum.h"
#include "uci/type/LaunchCapabilityEnum.h"
#include "uci/type/PlatformIdentityType.h"
#include "uci/type/SubmarineConfidenceLevelEnum.h"
#include "uci/type/ThreatEnum.h"
#include "uci/type/UnitTypeEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlatformIdentityType::PlatformIdentityType()
  : platformTypeCategory_Accessor{boost::make_unique<EnvironmentEnum>()} {
}

PlatformIdentityType::~PlatformIdentityType() = default;

void PlatformIdentityType::copy(const uci::type::PlatformIdentityType& accessor) {
  copyImpl(accessor, false);
}

void PlatformIdentityType::copyImpl(const uci::type::PlatformIdentityType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::platformIdentityType)) {
      const auto& accessorImpl = dynamic_cast<const PlatformIdentityType&>(accessor);
      setPlatformType(accessorImpl.platformType_Accessor);
      setPlatformTypeCategory(*(accessorImpl.platformTypeCategory_Accessor));
      if (accessorImpl.threatType_Accessor) {
        setThreatType(*(accessorImpl.threatType_Accessor));
      } else {
        threatType_Accessor.reset();
      }
      if (accessorImpl.unitType_Accessor) {
        setUnitType(*(accessorImpl.unitType_Accessor));
      } else {
        unitType_Accessor.reset();
      }
      if (accessorImpl.launchCapability_Accessor) {
        setLaunchCapability(*(accessorImpl.launchCapability_Accessor));
      } else {
        launchCapability_Accessor.reset();
      }
      if (accessorImpl.submarineConfidenceLevel_Accessor) {
        setSubmarineConfidenceLevel(*(accessorImpl.submarineConfidenceLevel_Accessor));
      } else {
        submarineConfidenceLevel_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void PlatformIdentityType::reset() noexcept {
  platformType_Accessor = 0;
  platformTypeCategory_Accessor->reset();
  threatType_Accessor.reset();
  unitType_Accessor.reset();
  launchCapability_Accessor.reset();
  submarineConfidenceLevel_Accessor.reset();
}

xs::UnsignedInt PlatformIdentityType::getPlatformType() const {
  return platformType_Accessor;
}

uci::type::PlatformIdentityType& PlatformIdentityType::setPlatformType(xs::UnsignedInt value) {
  platformType_Accessor = value;
  return *this;
}


const uci::type::EnvironmentEnum& PlatformIdentityType::getPlatformTypeCategory() const {
  return *platformTypeCategory_Accessor;
}

uci::type::EnvironmentEnum& PlatformIdentityType::getPlatformTypeCategory() {
  return *platformTypeCategory_Accessor;
}

uci::type::PlatformIdentityType& PlatformIdentityType::setPlatformTypeCategory(const uci::type::EnvironmentEnum& accessor) {
  if (&accessor != platformTypeCategory_Accessor.get()) {
    platformTypeCategory_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformIdentityType& PlatformIdentityType::setPlatformTypeCategory(uci::type::EnvironmentEnum::EnumerationItem value) {
  platformTypeCategory_Accessor->setValue(value);
  return *this;
}


uci::type::ThreatEnum& PlatformIdentityType::getThreatType_() const {
  if (threatType_Accessor) {
    return *threatType_Accessor;
  }
  throw uci::base::UCIException("Error in getThreatType(): An attempt was made to get an optional field that was not enabled, call hasThreatType() to determine if it is safe to call getThreatType()");
}

const uci::type::ThreatEnum& PlatformIdentityType::getThreatType() const {
  return getThreatType_();
}

uci::type::ThreatEnum& PlatformIdentityType::getThreatType() {
  return getThreatType_();
}

uci::type::PlatformIdentityType& PlatformIdentityType::setThreatType(const uci::type::ThreatEnum& accessor) {
  enableThreatType();
  if (&accessor != threatType_Accessor.get()) {
    threatType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformIdentityType& PlatformIdentityType::setThreatType(const uci::type::ThreatEnum::EnumerationItem value) {
  enableThreatType().setValue(value);
  return *this;
}

bool PlatformIdentityType::hasThreatType() const noexcept {
  return static_cast<bool>(threatType_Accessor);
}

uci::type::ThreatEnum& PlatformIdentityType::enableThreatType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatEnum : type};
  if ((!threatType_Accessor) || (threatType_Accessor->getAccessorType() != requestedType)) {
    threatType_Accessor = ThreatEnum::create(requestedType);
    if (!threatType_Accessor) {
      throw uci::base::UCIException("Error in enableThreatType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *threatType_Accessor;
}

uci::type::PlatformIdentityType& PlatformIdentityType::clearThreatType() noexcept {
  threatType_Accessor.reset();
  return *this;
}

uci::type::UnitTypeEnum& PlatformIdentityType::getUnitType_() const {
  if (unitType_Accessor) {
    return *unitType_Accessor;
  }
  throw uci::base::UCIException("Error in getUnitType(): An attempt was made to get an optional field that was not enabled, call hasUnitType() to determine if it is safe to call getUnitType()");
}

const uci::type::UnitTypeEnum& PlatformIdentityType::getUnitType() const {
  return getUnitType_();
}

uci::type::UnitTypeEnum& PlatformIdentityType::getUnitType() {
  return getUnitType_();
}

uci::type::PlatformIdentityType& PlatformIdentityType::setUnitType(const uci::type::UnitTypeEnum& accessor) {
  enableUnitType();
  if (&accessor != unitType_Accessor.get()) {
    unitType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformIdentityType& PlatformIdentityType::setUnitType(const uci::type::UnitTypeEnum::EnumerationItem value) {
  enableUnitType().setValue(value);
  return *this;
}

bool PlatformIdentityType::hasUnitType() const noexcept {
  return static_cast<bool>(unitType_Accessor);
}

uci::type::UnitTypeEnum& PlatformIdentityType::enableUnitType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::unitTypeEnum : type};
  if ((!unitType_Accessor) || (unitType_Accessor->getAccessorType() != requestedType)) {
    unitType_Accessor = UnitTypeEnum::create(requestedType);
    if (!unitType_Accessor) {
      throw uci::base::UCIException("Error in enableUnitType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *unitType_Accessor;
}

uci::type::PlatformIdentityType& PlatformIdentityType::clearUnitType() noexcept {
  unitType_Accessor.reset();
  return *this;
}

uci::type::LaunchCapabilityEnum& PlatformIdentityType::getLaunchCapability_() const {
  if (launchCapability_Accessor) {
    return *launchCapability_Accessor;
  }
  throw uci::base::UCIException("Error in getLaunchCapability(): An attempt was made to get an optional field that was not enabled, call hasLaunchCapability() to determine if it is safe to call getLaunchCapability()");
}

const uci::type::LaunchCapabilityEnum& PlatformIdentityType::getLaunchCapability() const {
  return getLaunchCapability_();
}

uci::type::LaunchCapabilityEnum& PlatformIdentityType::getLaunchCapability() {
  return getLaunchCapability_();
}

uci::type::PlatformIdentityType& PlatformIdentityType::setLaunchCapability(const uci::type::LaunchCapabilityEnum& accessor) {
  enableLaunchCapability();
  if (&accessor != launchCapability_Accessor.get()) {
    launchCapability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformIdentityType& PlatformIdentityType::setLaunchCapability(const uci::type::LaunchCapabilityEnum::EnumerationItem value) {
  enableLaunchCapability().setValue(value);
  return *this;
}

bool PlatformIdentityType::hasLaunchCapability() const noexcept {
  return static_cast<bool>(launchCapability_Accessor);
}

uci::type::LaunchCapabilityEnum& PlatformIdentityType::enableLaunchCapability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::launchCapabilityEnum : type};
  if ((!launchCapability_Accessor) || (launchCapability_Accessor->getAccessorType() != requestedType)) {
    launchCapability_Accessor = LaunchCapabilityEnum::create(requestedType);
    if (!launchCapability_Accessor) {
      throw uci::base::UCIException("Error in enableLaunchCapability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *launchCapability_Accessor;
}

uci::type::PlatformIdentityType& PlatformIdentityType::clearLaunchCapability() noexcept {
  launchCapability_Accessor.reset();
  return *this;
}

uci::type::SubmarineConfidenceLevelEnum& PlatformIdentityType::getSubmarineConfidenceLevel_() const {
  if (submarineConfidenceLevel_Accessor) {
    return *submarineConfidenceLevel_Accessor;
  }
  throw uci::base::UCIException("Error in getSubmarineConfidenceLevel(): An attempt was made to get an optional field that was not enabled, call hasSubmarineConfidenceLevel() to determine if it is safe to call getSubmarineConfidenceLevel()");
}

const uci::type::SubmarineConfidenceLevelEnum& PlatformIdentityType::getSubmarineConfidenceLevel() const {
  return getSubmarineConfidenceLevel_();
}

uci::type::SubmarineConfidenceLevelEnum& PlatformIdentityType::getSubmarineConfidenceLevel() {
  return getSubmarineConfidenceLevel_();
}

uci::type::PlatformIdentityType& PlatformIdentityType::setSubmarineConfidenceLevel(const uci::type::SubmarineConfidenceLevelEnum& accessor) {
  enableSubmarineConfidenceLevel();
  if (&accessor != submarineConfidenceLevel_Accessor.get()) {
    submarineConfidenceLevel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlatformIdentityType& PlatformIdentityType::setSubmarineConfidenceLevel(const uci::type::SubmarineConfidenceLevelEnum::EnumerationItem value) {
  enableSubmarineConfidenceLevel().setValue(value);
  return *this;
}

bool PlatformIdentityType::hasSubmarineConfidenceLevel() const noexcept {
  return static_cast<bool>(submarineConfidenceLevel_Accessor);
}

uci::type::SubmarineConfidenceLevelEnum& PlatformIdentityType::enableSubmarineConfidenceLevel(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::submarineConfidenceLevelEnum : type};
  if ((!submarineConfidenceLevel_Accessor) || (submarineConfidenceLevel_Accessor->getAccessorType() != requestedType)) {
    submarineConfidenceLevel_Accessor = SubmarineConfidenceLevelEnum::create(requestedType);
    if (!submarineConfidenceLevel_Accessor) {
      throw uci::base::UCIException("Error in enableSubmarineConfidenceLevel(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *submarineConfidenceLevel_Accessor;
}

uci::type::PlatformIdentityType& PlatformIdentityType::clearSubmarineConfidenceLevel() noexcept {
  submarineConfidenceLevel_Accessor.reset();
  return *this;
}

std::unique_ptr<PlatformIdentityType> PlatformIdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::platformIdentityType : type};
  return std::unique_ptr<PlatformIdentityType>(dynamic_cast<PlatformIdentityType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace PlatformIdentityType_Names {

constexpr const char* Extern_Type_Name{"PlatformIdentityType"};
constexpr const char* PlatformType_Name{"PlatformType"};
constexpr const char* PlatformTypeCategory_Name{"PlatformTypeCategory"};
constexpr const char* ThreatType_Name{"ThreatType"};
constexpr const char* UnitType_Name{"UnitType"};
constexpr const char* LaunchCapability_Name{"LaunchCapability"};
constexpr const char* SubmarineConfidenceLevel_Name{"SubmarineConfidenceLevel"};

} // namespace PlatformIdentityType_Names

void PlatformIdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlatformIdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlatformIdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlatformIdentityType_Names::PlatformType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPlatformType(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PlatformIdentityType_Names::PlatformTypeCategory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPlatformTypeCategory().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlatformIdentityType_Names::ThreatType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableThreatType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlatformIdentityType_Names::UnitType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableUnitType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlatformIdentityType_Names::LaunchCapability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableLaunchCapability().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlatformIdentityType_Names::SubmarineConfidenceLevel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSubmarineConfidenceLevel().setValueFromName(*value);
      }
    }
  }
}

std::string PlatformIdentityType::serialize(const uci::type::PlatformIdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlatformIdentityType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::platformIdentityType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlatformIdentityType_Names::Extern_Type_Name);
    }
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getPlatformType(), node, PlatformIdentityType_Names::PlatformType_Name);
    EnvironmentEnum::serialize(accessor.getPlatformTypeCategory(), node, PlatformIdentityType_Names::PlatformTypeCategory_Name, false);
    if (accessor.hasThreatType()) {
      ThreatEnum::serialize(accessor.getThreatType(), node, PlatformIdentityType_Names::ThreatType_Name, false);
    }
    if (accessor.hasUnitType()) {
      UnitTypeEnum::serialize(accessor.getUnitType(), node, PlatformIdentityType_Names::UnitType_Name, false);
    }
    if (accessor.hasLaunchCapability()) {
      LaunchCapabilityEnum::serialize(accessor.getLaunchCapability(), node, PlatformIdentityType_Names::LaunchCapability_Name, false);
    }
    if (accessor.hasSubmarineConfidenceLevel()) {
      SubmarineConfidenceLevelEnum::serialize(accessor.getSubmarineConfidenceLevel(), node, PlatformIdentityType_Names::SubmarineConfidenceLevel_Name, false);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlatformIdentityType& PlatformIdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlatformIdentityType>().release());
}

uci::type::PlatformIdentityType& PlatformIdentityType::create(const uci::type::PlatformIdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlatformIdentityType> newAccessor{boost::make_unique<asb_uci::type::PlatformIdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlatformIdentityType::destroy(uci::type::PlatformIdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::PlatformIdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

