/** @file SystemEstimationStartType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SystemEstimationStartType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EstimationStartType.h"
#include "../../../include/asb_uci/type/OrbitEstimationStartType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EstimationStartType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitEstimationStartType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemEstimationStartType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SystemEstimationStartType::SystemEstimationStartType() = default;

SystemEstimationStartType::~SystemEstimationStartType() = default;

void SystemEstimationStartType::copy(const uci::type::SystemEstimationStartType& accessor) {
  copyImpl(accessor, false);
}

void SystemEstimationStartType::copyImpl(const uci::type::SystemEstimationStartType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SystemEstimationStartType&>(accessor);
    startTime_Accessor = (accessorImpl.startTime_Accessor ? accessorImpl.startTime_Accessor : boost::none);
    if (accessorImpl.routeEstimationStart_Accessor) {
      setRouteEstimationStart(*(accessorImpl.routeEstimationStart_Accessor));
    } else {
      routeEstimationStart_Accessor.reset();
    }
    if (accessorImpl.orbitEstimationStart_Accessor) {
      setOrbitEstimationStart(*(accessorImpl.orbitEstimationStart_Accessor));
    } else {
      orbitEstimationStart_Accessor.reset();
    }
  }
}

void SystemEstimationStartType::reset() noexcept {
  startTime_Accessor.reset();
  routeEstimationStart_Accessor.reset();
  orbitEstimationStart_Accessor.reset();
}

uci::type::SystemEstimationStartType::SystemEstimationStartTypeChoice SystemEstimationStartType::getSystemEstimationStartTypeChoiceOrdinal() const noexcept {
  if (startTime_Accessor) {
    return SYSTEMESTIMATIONSTARTTYPE_CHOICE_STARTTIME;
  }
  if (routeEstimationStart_Accessor) {
    return SYSTEMESTIMATIONSTARTTYPE_CHOICE_ROUTEESTIMATIONSTART;
  }
  if (orbitEstimationStart_Accessor) {
    return SYSTEMESTIMATIONSTARTTYPE_CHOICE_ORBITESTIMATIONSTART;
  }
  return SYSTEMESTIMATIONSTARTTYPE_CHOICE_NONE;
}

uci::type::SystemEstimationStartType& SystemEstimationStartType::setSystemEstimationStartTypeChoiceOrdinal(uci::type::SystemEstimationStartType::SystemEstimationStartTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case SYSTEMESTIMATIONSTARTTYPE_CHOICE_STARTTIME:
      chooseStartTime();
      break;
    case SYSTEMESTIMATIONSTARTTYPE_CHOICE_ROUTEESTIMATIONSTART:
      chooseRouteEstimationStart("setSystemEstimationStartTypeChoiceOrdinal", type);
      break;
    case SYSTEMESTIMATIONSTARTTYPE_CHOICE_ORBITESTIMATIONSTART:
      chooseOrbitEstimationStart("setSystemEstimationStartTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setSystemEstimationStartTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::DateTimeTypeValue SystemEstimationStartType::getStartTime() const {
  if (startTime_Accessor) {
    return *startTime_Accessor;
  }
  throw uci::base::UCIException("Error in getStartTime(): Unable to get StartTime, field not selected");
}

uci::type::SystemEstimationStartType& SystemEstimationStartType::setStartTime(uci::type::DateTimeTypeValue value) {
  chooseStartTime();
  startTime_Accessor = value;
  return *this;
}

bool SystemEstimationStartType::isStartTime() const noexcept {
  return static_cast<bool>(startTime_Accessor);
}

void SystemEstimationStartType::chooseStartTime() {
  routeEstimationStart_Accessor.reset();
  orbitEstimationStart_Accessor.reset();
  if (!startTime_Accessor) {
    startTime_Accessor = boost::optional<asb_xs::DateTime>();
  }
}

uci::type::EstimationStartType& SystemEstimationStartType::getRouteEstimationStart_() const {
  if (routeEstimationStart_Accessor) {
    return *routeEstimationStart_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteEstimationStart(): Unable to get RouteEstimationStart, field not selected");
}

const uci::type::EstimationStartType& SystemEstimationStartType::getRouteEstimationStart() const {
  return getRouteEstimationStart_();
}

uci::type::EstimationStartType& SystemEstimationStartType::getRouteEstimationStart() {
  return getRouteEstimationStart_();
}

uci::type::SystemEstimationStartType& SystemEstimationStartType::setRouteEstimationStart(const uci::type::EstimationStartType& accessor) {
  chooseRouteEstimationStart();
  if (&accessor != routeEstimationStart_Accessor.get()) {
    routeEstimationStart_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SystemEstimationStartType::isRouteEstimationStart() const noexcept {
  return static_cast<bool>(routeEstimationStart_Accessor);
}

uci::type::EstimationStartType& SystemEstimationStartType::chooseRouteEstimationStart(const std::string& method, uci::base::accessorType::AccessorType type) {
  startTime_Accessor.reset();
  orbitEstimationStart_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::estimationStartType : type};
  if ((!routeEstimationStart_Accessor) || (routeEstimationStart_Accessor->getAccessorType() != requestedType)) {
    routeEstimationStart_Accessor = EstimationStartType::create(type);
    if (!routeEstimationStart_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeEstimationStart_Accessor;
}

uci::type::EstimationStartType& SystemEstimationStartType::chooseRouteEstimationStart(uci::base::accessorType::AccessorType type) {
  return chooseRouteEstimationStart("chooseRouteEstimationStart", type);
}

uci::type::OrbitEstimationStartType& SystemEstimationStartType::getOrbitEstimationStart_() const {
  if (orbitEstimationStart_Accessor) {
    return *orbitEstimationStart_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitEstimationStart(): Unable to get OrbitEstimationStart, field not selected");
}

const uci::type::OrbitEstimationStartType& SystemEstimationStartType::getOrbitEstimationStart() const {
  return getOrbitEstimationStart_();
}

uci::type::OrbitEstimationStartType& SystemEstimationStartType::getOrbitEstimationStart() {
  return getOrbitEstimationStart_();
}

uci::type::SystemEstimationStartType& SystemEstimationStartType::setOrbitEstimationStart(const uci::type::OrbitEstimationStartType& accessor) {
  chooseOrbitEstimationStart();
  if (&accessor != orbitEstimationStart_Accessor.get()) {
    orbitEstimationStart_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SystemEstimationStartType::isOrbitEstimationStart() const noexcept {
  return static_cast<bool>(orbitEstimationStart_Accessor);
}

uci::type::OrbitEstimationStartType& SystemEstimationStartType::chooseOrbitEstimationStart(const std::string& method, uci::base::accessorType::AccessorType type) {
  startTime_Accessor.reset();
  routeEstimationStart_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitEstimationStartType : type};
  if ((!orbitEstimationStart_Accessor) || (orbitEstimationStart_Accessor->getAccessorType() != requestedType)) {
    orbitEstimationStart_Accessor = OrbitEstimationStartType::create(type);
    if (!orbitEstimationStart_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitEstimationStart_Accessor;
}

uci::type::OrbitEstimationStartType& SystemEstimationStartType::chooseOrbitEstimationStart(uci::base::accessorType::AccessorType type) {
  return chooseOrbitEstimationStart("chooseOrbitEstimationStart", type);
}

std::unique_ptr<SystemEstimationStartType> SystemEstimationStartType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemEstimationStartType : type};
  return (requestedType == uci::type::accessorType::systemEstimationStartType) ? boost::make_unique<SystemEstimationStartType>() : nullptr;
}

/**  */
namespace SystemEstimationStartType_Names {

constexpr const char* Extern_Type_Name{"SystemEstimationStartType"};
constexpr const char* StartTime_Name{"StartTime"};
constexpr const char* RouteEstimationStart_Name{"RouteEstimationStart"};
constexpr const char* OrbitEstimationStart_Name{"OrbitEstimationStart"};

} // namespace SystemEstimationStartType_Names

void SystemEstimationStartType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SystemEstimationStartType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SystemEstimationStartType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SystemEstimationStartType_Names::StartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStartTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SystemEstimationStartType_Names::RouteEstimationStart_Name) {
      EstimationStartType::deserialize(valueType.second, accessor.chooseRouteEstimationStart(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemEstimationStartType_Names::OrbitEstimationStart_Name) {
      OrbitEstimationStartType::deserialize(valueType.second, accessor.chooseOrbitEstimationStart(), nodeName, nsPrefix);
    }
  }
}

std::string SystemEstimationStartType::serialize(const uci::type::SystemEstimationStartType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SystemEstimationStartType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SystemEstimationStartType_Names::Extern_Type_Name);
  }
  if (accessor.isStartTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getStartTime(), node, SystemEstimationStartType_Names::StartTime_Name);
  } else if (accessor.isRouteEstimationStart()) {
    EstimationStartType::serialize(accessor.getRouteEstimationStart(), node, SystemEstimationStartType_Names::RouteEstimationStart_Name);
  } else if (accessor.isOrbitEstimationStart()) {
    OrbitEstimationStartType::serialize(accessor.getOrbitEstimationStart(), node, SystemEstimationStartType_Names::OrbitEstimationStart_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SystemEstimationStartType& SystemEstimationStartType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SystemEstimationStartType>().release());
}

uci::type::SystemEstimationStartType& SystemEstimationStartType::create(const uci::type::SystemEstimationStartType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SystemEstimationStartType> newAccessor{boost::make_unique<asb_uci::type::SystemEstimationStartType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SystemEstimationStartType::destroy(uci::type::SystemEstimationStartType& accessor) {
  delete dynamic_cast<asb_uci::type::SystemEstimationStartType*>(&accessor);
}

} // namespace type

} // namespace uci

