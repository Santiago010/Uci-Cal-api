/** @file WeatherRadarCellType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/WeatherRadarCellType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/WeatherAreaDataType.h"
#include "../../../include/asb_uci/type/WeatherRadarCellLocationType.h"
#include "../../../include/asb_uci/type/WeatherWarningEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherAreaDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherRadarCellLocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherRadarCellType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeatherWarningEnum.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WeatherRadarCellType::WeatherRadarCellType()
  : cellLocation_Accessor{boost::make_unique<WeatherRadarCellLocationType>()} {
}

WeatherRadarCellType::~WeatherRadarCellType() = default;

void WeatherRadarCellType::copy(const uci::type::WeatherRadarCellType& accessor) {
  copyImpl(accessor, false);
}

void WeatherRadarCellType::copyImpl(const uci::type::WeatherRadarCellType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const WeatherRadarCellType&>(accessor);
    setCellLocation(*(accessorImpl.cellLocation_Accessor));
    setReflectivity(accessorImpl.reflectivity_Accessor);
    if (accessorImpl.weatherData_Accessor) {
      setWeatherData(*(accessorImpl.weatherData_Accessor));
    } else {
      weatherData_Accessor.reset();
    }
    if (accessorImpl.weatherWarning_Accessor) {
      setWeatherWarning(*(accessorImpl.weatherWarning_Accessor));
    } else {
      weatherWarning_Accessor.reset();
    }
  }
}

void WeatherRadarCellType::reset() noexcept {
  cellLocation_Accessor->reset();
  reflectivity_Accessor = 0.0;
  weatherData_Accessor.reset();
  weatherWarning_Accessor.reset();
}

const uci::type::WeatherRadarCellLocationType& WeatherRadarCellType::getCellLocation() const {
  return *cellLocation_Accessor;
}

uci::type::WeatherRadarCellLocationType& WeatherRadarCellType::getCellLocation() {
  return *cellLocation_Accessor;
}

uci::type::WeatherRadarCellType& WeatherRadarCellType::setCellLocation(const uci::type::WeatherRadarCellLocationType& accessor) {
  if (&accessor != cellLocation_Accessor.get()) {
    cellLocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Double WeatherRadarCellType::getReflectivity() const {
  return reflectivity_Accessor;
}

uci::type::WeatherRadarCellType& WeatherRadarCellType::setReflectivity(xs::Double value) {
  reflectivity_Accessor = value;
  return *this;
}


uci::type::WeatherAreaDataType& WeatherRadarCellType::getWeatherData_() const {
  if (weatherData_Accessor) {
    return *weatherData_Accessor;
  }
  throw uci::base::UCIException("Error in getWeatherData(): An attempt was made to get an optional field that was not enabled, call hasWeatherData() to determine if it is safe to call getWeatherData()");
}

const uci::type::WeatherAreaDataType& WeatherRadarCellType::getWeatherData() const {
  return getWeatherData_();
}

uci::type::WeatherAreaDataType& WeatherRadarCellType::getWeatherData() {
  return getWeatherData_();
}

uci::type::WeatherRadarCellType& WeatherRadarCellType::setWeatherData(const uci::type::WeatherAreaDataType& accessor) {
  enableWeatherData();
  if (&accessor != weatherData_Accessor.get()) {
    weatherData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeatherRadarCellType::hasWeatherData() const noexcept {
  return static_cast<bool>(weatherData_Accessor);
}

uci::type::WeatherAreaDataType& WeatherRadarCellType::enableWeatherData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherAreaDataType : type};
  if ((!weatherData_Accessor) || (weatherData_Accessor->getAccessorType() != requestedType)) {
    weatherData_Accessor = WeatherAreaDataType::create(requestedType);
    if (!weatherData_Accessor) {
      throw uci::base::UCIException("Error in enableWeatherData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weatherData_Accessor;
}

uci::type::WeatherRadarCellType& WeatherRadarCellType::clearWeatherData() noexcept {
  weatherData_Accessor.reset();
  return *this;
}

uci::type::WeatherWarningEnum& WeatherRadarCellType::getWeatherWarning_() const {
  if (weatherWarning_Accessor) {
    return *weatherWarning_Accessor;
  }
  throw uci::base::UCIException("Error in getWeatherWarning(): An attempt was made to get an optional field that was not enabled, call hasWeatherWarning() to determine if it is safe to call getWeatherWarning()");
}

const uci::type::WeatherWarningEnum& WeatherRadarCellType::getWeatherWarning() const {
  return getWeatherWarning_();
}

uci::type::WeatherWarningEnum& WeatherRadarCellType::getWeatherWarning() {
  return getWeatherWarning_();
}

uci::type::WeatherRadarCellType& WeatherRadarCellType::setWeatherWarning(const uci::type::WeatherWarningEnum& accessor) {
  enableWeatherWarning();
  if (&accessor != weatherWarning_Accessor.get()) {
    weatherWarning_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::WeatherRadarCellType& WeatherRadarCellType::setWeatherWarning(const uci::type::WeatherWarningEnum::EnumerationItem value) {
  enableWeatherWarning().setValue(value);
  return *this;
}

bool WeatherRadarCellType::hasWeatherWarning() const noexcept {
  return static_cast<bool>(weatherWarning_Accessor);
}

uci::type::WeatherWarningEnum& WeatherRadarCellType::enableWeatherWarning(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherWarningEnum : type};
  if ((!weatherWarning_Accessor) || (weatherWarning_Accessor->getAccessorType() != requestedType)) {
    weatherWarning_Accessor = WeatherWarningEnum::create(requestedType);
    if (!weatherWarning_Accessor) {
      throw uci::base::UCIException("Error in enableWeatherWarning(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weatherWarning_Accessor;
}

uci::type::WeatherRadarCellType& WeatherRadarCellType::clearWeatherWarning() noexcept {
  weatherWarning_Accessor.reset();
  return *this;
}

std::unique_ptr<WeatherRadarCellType> WeatherRadarCellType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherRadarCellType : type};
  return (requestedType == uci::type::accessorType::weatherRadarCellType) ? boost::make_unique<WeatherRadarCellType>() : nullptr;
}

/**  */
namespace WeatherRadarCellType_Names {

constexpr const char* Extern_Type_Name{"WeatherRadarCellType"};
constexpr const char* CellLocation_Name{"CellLocation"};
constexpr const char* Reflectivity_Name{"Reflectivity"};
constexpr const char* WeatherData_Name{"WeatherData"};
constexpr const char* WeatherWarning_Name{"WeatherWarning"};

} // namespace WeatherRadarCellType_Names

void WeatherRadarCellType::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherRadarCellType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeatherRadarCellType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WeatherRadarCellType_Names::CellLocation_Name) {
      WeatherRadarCellLocationType::deserialize(valueType.second, accessor.getCellLocation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarCellType_Names::Reflectivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReflectivity(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherRadarCellType_Names::WeatherData_Name) {
      WeatherAreaDataType::deserialize(valueType.second, accessor.enableWeatherData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherRadarCellType_Names::WeatherWarning_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableWeatherWarning().setValueFromName(*value);
      }
    }
  }
}

std::string WeatherRadarCellType::serialize(const uci::type::WeatherRadarCellType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WeatherRadarCellType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WeatherRadarCellType_Names::Extern_Type_Name);
  }
  WeatherRadarCellLocationType::serialize(accessor.getCellLocation(), node, WeatherRadarCellType_Names::CellLocation_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getReflectivity(), node, WeatherRadarCellType_Names::Reflectivity_Name);
  if (accessor.hasWeatherData()) {
    WeatherAreaDataType::serialize(accessor.getWeatherData(), node, WeatherRadarCellType_Names::WeatherData_Name);
  }
  if (accessor.hasWeatherWarning()) {
    WeatherWarningEnum::serialize(accessor.getWeatherWarning(), node, WeatherRadarCellType_Names::WeatherWarning_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WeatherRadarCellType& WeatherRadarCellType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WeatherRadarCellType>().release());
}

uci::type::WeatherRadarCellType& WeatherRadarCellType::create(const uci::type::WeatherRadarCellType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WeatherRadarCellType> newAccessor{boost::make_unique<asb_uci::type::WeatherRadarCellType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WeatherRadarCellType::destroy(uci::type::WeatherRadarCellType& accessor) {
  delete dynamic_cast<asb_uci::type::WeatherRadarCellType*>(&accessor);
}

} // namespace type

} // namespace uci

