/** @file DamageEstimateRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DamageEstimateRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DMPI_BlastPairingType.h"
#include "asb_uci/type/DMPI_DamageEstimateType.h"
#include "asb_uci/type/DamageCategoryEnum.h"
#include "asb_uci/type/DamageEstimateContentsEnum.h"
#include "asb_uci/type/DamageEstimateTargetType.h"
#include "asb_uci/type/Point3D_Type.h"
#include "asb_uci/type/ProductMetadataID_Type.h"
#include "asb_uci/type/RequestBaseType.h"
#include "asb_uci/type/TaskID_Type.h"
#include "asb_uci/type/VisibleString64Type.h"
#include "asb_uci/type/ZoneType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DMPI_BlastPairingType.h"
#include "uci/type/DMPI_DamageEstimateType.h"
#include "uci/type/DamageCategoryEnum.h"
#include "uci/type/DamageEstimateContentsEnum.h"
#include "uci/type/DamageEstimateRequestMDT.h"
#include "uci/type/DamageEstimateTargetType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/PercentType.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/ProductMetadataID_Type.h"
#include "uci/type/TaskID_Type.h"
#include "uci/type/VisibleString64Type.h"
#include "uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DamageEstimateRequestMDT::DamageEstimateRequestMDT()
  : estimateType_Accessor{boost::make_unique<DamageCategoryEnum>()},
    estimateContents_Accessor{boost::make_unique<DamageEstimateContentsEnum>()},
    targetData_Accessor{boost::make_unique<DamageEstimateTargetType>()},
    dMPI_Data_Accessor{boost::make_unique<DMPI_Data>(0, SIZE_MAX)},
    taskID_Accessor{boost::make_unique<TaskID_Type>()},
    productMetadataID_Accessor{boost::make_unique<ProductMetadataID>(0, SIZE_MAX)},
    dMPI_BlastPairing_Accessor{boost::make_unique<DMPI_BlastPairing>(0, SIZE_MAX)} {
}

DamageEstimateRequestMDT::~DamageEstimateRequestMDT() = default;

void DamageEstimateRequestMDT::copy(const uci::type::DamageEstimateRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void DamageEstimateRequestMDT::copyImpl(const uci::type::DamageEstimateRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const DamageEstimateRequestMDT&>(accessor);
    setEstimateType(*(accessorImpl.estimateType_Accessor));
    setEstimateContents(*(accessorImpl.estimateContents_Accessor));
    setReportingThreshold(accessorImpl.reportingThreshold_Accessor);
    setTargetData(*(accessorImpl.targetData_Accessor));
    if (accessorImpl.targetName_Accessor) {
      setTargetName(*(accessorImpl.targetName_Accessor));
    } else {
      targetName_Accessor.reset();
    }
    setDMPI_Data(*(accessorImpl.dMPI_Data_Accessor));
    setTaskID(*(accessorImpl.taskID_Accessor));
    if (accessorImpl.releasePoint_Accessor) {
      setReleasePoint(*(accessorImpl.releasePoint_Accessor));
    } else {
      releasePoint_Accessor.reset();
    }
    setProductMetadataID(*(accessorImpl.productMetadataID_Accessor));
    if (accessorImpl.hasRespondBy()) {
      setRespondBy(accessorImpl.getRespondBy());
    } else {
      clearRespondBy();
    }
    if (accessorImpl.estimateZone_Accessor) {
      setEstimateZone(*(accessorImpl.estimateZone_Accessor));
    } else {
      estimateZone_Accessor.reset();
    }
    setDMPI_BlastPairing(*(accessorImpl.dMPI_BlastPairing_Accessor));
  }
}

void DamageEstimateRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  estimateType_Accessor->reset();
  estimateContents_Accessor->reset();
  reportingThreshold_Accessor = 0.0;
  targetData_Accessor->reset();
  targetName_Accessor.reset();
  dMPI_Data_Accessor->reset();
  taskID_Accessor->reset();
  releasePoint_Accessor.reset();
  productMetadataID_Accessor->reset();
  clearRespondBy();
  estimateZone_Accessor.reset();
  dMPI_BlastPairing_Accessor->reset();
}

const uci::type::DamageCategoryEnum& DamageEstimateRequestMDT::getEstimateType() const {
  return *estimateType_Accessor;
}

uci::type::DamageCategoryEnum& DamageEstimateRequestMDT::getEstimateType() {
  return *estimateType_Accessor;
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setEstimateType(const uci::type::DamageCategoryEnum& accessor) {
  if (&accessor != estimateType_Accessor.get()) {
    estimateType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setEstimateType(uci::type::DamageCategoryEnum::EnumerationItem value) {
  estimateType_Accessor->setValue(value);
  return *this;
}


const uci::type::DamageEstimateContentsEnum& DamageEstimateRequestMDT::getEstimateContents() const {
  return *estimateContents_Accessor;
}

uci::type::DamageEstimateContentsEnum& DamageEstimateRequestMDT::getEstimateContents() {
  return *estimateContents_Accessor;
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setEstimateContents(const uci::type::DamageEstimateContentsEnum& accessor) {
  if (&accessor != estimateContents_Accessor.get()) {
    estimateContents_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setEstimateContents(uci::type::DamageEstimateContentsEnum::EnumerationItem value) {
  estimateContents_Accessor->setValue(value);
  return *this;
}


uci::type::PercentTypeValue DamageEstimateRequestMDT::getReportingThreshold() const {
  return reportingThreshold_Accessor;
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setReportingThreshold(uci::type::PercentTypeValue value) {
  reportingThreshold_Accessor = value;
  return *this;
}


const uci::type::DamageEstimateTargetType& DamageEstimateRequestMDT::getTargetData() const {
  return *targetData_Accessor;
}

uci::type::DamageEstimateTargetType& DamageEstimateRequestMDT::getTargetData() {
  return *targetData_Accessor;
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setTargetData(const uci::type::DamageEstimateTargetType& accessor) {
  if (&accessor != targetData_Accessor.get()) {
    targetData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VisibleString64Type& DamageEstimateRequestMDT::getTargetName_() const {
  if (targetName_Accessor) {
    return *targetName_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetName(): An attempt was made to get an optional field that was not enabled, call hasTargetName() to determine if it is safe to call getTargetName()");
}

const uci::type::VisibleString64Type& DamageEstimateRequestMDT::getTargetName() const {
  return getTargetName_();
}

uci::type::VisibleString64Type& DamageEstimateRequestMDT::getTargetName() {
  return getTargetName_();
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setTargetName(const uci::type::VisibleString64Type& value) {
  return setTargetName(value.c_str());
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setTargetName(const std::string& value) {
  return setTargetName(value.c_str());
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setTargetName(const char* value) {
  enableTargetName().setStringValue(value);
  return *this;
}

bool DamageEstimateRequestMDT::hasTargetName() const noexcept {
  return static_cast<bool>(targetName_Accessor);
}

uci::type::VisibleString64Type& DamageEstimateRequestMDT::enableTargetName(uci::base::accessorType::AccessorType type) {
  if (!targetName_Accessor) {
    targetName_Accessor = VisibleString64Type::create(type);
  }
  return *targetName_Accessor;
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::clearTargetName() noexcept {
  targetName_Accessor.reset();
  return *this;
}

const uci::type::DamageEstimateRequestMDT::DMPI_Data& DamageEstimateRequestMDT::getDMPI_Data() const {
  return *dMPI_Data_Accessor;
}

uci::type::DamageEstimateRequestMDT::DMPI_Data& DamageEstimateRequestMDT::getDMPI_Data() {
  return *dMPI_Data_Accessor;
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setDMPI_Data(const uci::type::DamageEstimateRequestMDT::DMPI_Data& accessor) {
  if (&accessor != dMPI_Data_Accessor.get()) {
    dMPI_Data_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::TaskID_Type& DamageEstimateRequestMDT::getTaskID() const {
  return *taskID_Accessor;
}

uci::type::TaskID_Type& DamageEstimateRequestMDT::getTaskID() {
  return *taskID_Accessor;
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setTaskID(const uci::type::TaskID_Type& accessor) {
  if (&accessor != taskID_Accessor.get()) {
    taskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::Point3D_Type& DamageEstimateRequestMDT::getReleasePoint_() const {
  if (releasePoint_Accessor) {
    return *releasePoint_Accessor;
  }
  throw uci::base::UCIException("Error in getReleasePoint(): An attempt was made to get an optional field that was not enabled, call hasReleasePoint() to determine if it is safe to call getReleasePoint()");
}

const uci::type::Point3D_Type& DamageEstimateRequestMDT::getReleasePoint() const {
  return getReleasePoint_();
}

uci::type::Point3D_Type& DamageEstimateRequestMDT::getReleasePoint() {
  return getReleasePoint_();
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setReleasePoint(const uci::type::Point3D_Type& accessor) {
  enableReleasePoint(accessor.getAccessorType());
  if (&accessor != releasePoint_Accessor.get()) {
    releasePoint_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DamageEstimateRequestMDT::hasReleasePoint() const noexcept {
  return static_cast<bool>(releasePoint_Accessor);
}

uci::type::Point3D_Type& DamageEstimateRequestMDT::enableReleasePoint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::point3D_Type : type};
  if ((!releasePoint_Accessor) || (releasePoint_Accessor->getAccessorType() != requestedType)) {
    releasePoint_Accessor = Point3D_Type::create(requestedType);
    if (!releasePoint_Accessor) {
      throw uci::base::UCIException("Error in enableReleasePoint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *releasePoint_Accessor;
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::clearReleasePoint() noexcept {
  releasePoint_Accessor.reset();
  return *this;
}

const uci::type::DamageEstimateRequestMDT::ProductMetadataID& DamageEstimateRequestMDT::getProductMetadataID() const {
  return *productMetadataID_Accessor;
}

uci::type::DamageEstimateRequestMDT::ProductMetadataID& DamageEstimateRequestMDT::getProductMetadataID() {
  return *productMetadataID_Accessor;
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setProductMetadataID(const uci::type::DamageEstimateRequestMDT::ProductMetadataID& accessor) {
  if (&accessor != productMetadataID_Accessor.get()) {
    productMetadataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue DamageEstimateRequestMDT::getRespondBy() const {
  if (respondBy_Accessor) {
    return *respondBy_Accessor;
  }
  throw uci::base::UCIException("Error in getRespondBy(): An attempt was made to get an optional field that was not enabled, call hasRespondBy() to determine if it is safe to call getRespondBy()");
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setRespondBy(uci::type::DateTimeTypeValue value) {
  respondBy_Accessor = value;
  return *this;
}

bool DamageEstimateRequestMDT::hasRespondBy() const noexcept {
  return respondBy_Accessor.has_value();
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::clearRespondBy() noexcept {
  respondBy_Accessor.reset();
  return *this;
}

uci::type::ZoneType& DamageEstimateRequestMDT::getEstimateZone_() const {
  if (estimateZone_Accessor) {
    return *estimateZone_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimateZone(): An attempt was made to get an optional field that was not enabled, call hasEstimateZone() to determine if it is safe to call getEstimateZone()");
}

const uci::type::ZoneType& DamageEstimateRequestMDT::getEstimateZone() const {
  return getEstimateZone_();
}

uci::type::ZoneType& DamageEstimateRequestMDT::getEstimateZone() {
  return getEstimateZone_();
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setEstimateZone(const uci::type::ZoneType& accessor) {
  enableEstimateZone(accessor.getAccessorType());
  if (&accessor != estimateZone_Accessor.get()) {
    estimateZone_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DamageEstimateRequestMDT::hasEstimateZone() const noexcept {
  return static_cast<bool>(estimateZone_Accessor);
}

uci::type::ZoneType& DamageEstimateRequestMDT::enableEstimateZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!estimateZone_Accessor) || (estimateZone_Accessor->getAccessorType() != requestedType)) {
    estimateZone_Accessor = ZoneType::create(requestedType);
    if (!estimateZone_Accessor) {
      throw uci::base::UCIException("Error in enableEstimateZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *estimateZone_Accessor;
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::clearEstimateZone() noexcept {
  estimateZone_Accessor.reset();
  return *this;
}

const uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing& DamageEstimateRequestMDT::getDMPI_BlastPairing() const {
  return *dMPI_BlastPairing_Accessor;
}

uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing& DamageEstimateRequestMDT::getDMPI_BlastPairing() {
  return *dMPI_BlastPairing_Accessor;
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::setDMPI_BlastPairing(const uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing& accessor) {
  if (&accessor != dMPI_BlastPairing_Accessor.get()) {
    dMPI_BlastPairing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<DamageEstimateRequestMDT> DamageEstimateRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::damageEstimateRequestMDT : type};
  return (requestedType == uci::type::accessorType::damageEstimateRequestMDT) ? boost::make_unique<DamageEstimateRequestMDT>() : nullptr;
}

/**  */
namespace DamageEstimateRequestMDT_Names {

constexpr const char* Extern_Type_Name{"DamageEstimateRequestMDT"};
constexpr const char* EstimateType_Name{"EstimateType"};
constexpr const char* EstimateContents_Name{"EstimateContents"};
constexpr const char* ReportingThreshold_Name{"ReportingThreshold"};
constexpr const char* TargetData_Name{"TargetData"};
constexpr const char* TargetName_Name{"TargetName"};
constexpr const char* DMPI_Data_Name{"DMPI_Data"};
constexpr const char* TaskID_Name{"TaskID"};
constexpr const char* ReleasePoint_Name{"ReleasePoint"};
constexpr const char* ProductMetadataID_Name{"ProductMetadataID"};
constexpr const char* RespondBy_Name{"RespondBy"};
constexpr const char* EstimateZone_Name{"EstimateZone"};
constexpr const char* DMPI_BlastPairing_Name{"DMPI_BlastPairing"};

} // namespace DamageEstimateRequestMDT_Names

void DamageEstimateRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageEstimateRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamageEstimateRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::EstimateType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEstimateType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::EstimateContents_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEstimateContents().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::ReportingThreshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReportingThreshold(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::TargetData_Name) {
      DamageEstimateTargetType::deserialize(valueType.second, accessor.getTargetData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::TargetName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetName(*value);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::DMPI_Data_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DamageEstimateRequestMDT::DMPI_Data& boundedList = accessor.getDMPI_Data();
        const uci::type::DamageEstimateRequestMDT::DMPI_Data::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DMPI_DamageEstimateType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.getTaskID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::ReleasePoint_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableReleasePoint(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::ProductMetadataID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DamageEstimateRequestMDT::ProductMetadataID& boundedList = accessor.getProductMetadataID();
        const uci::type::DamageEstimateRequestMDT::ProductMetadataID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::RespondBy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRespondBy(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::EstimateZone_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEstimateZone(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::DMPI_BlastPairing_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing& boundedList = accessor.getDMPI_BlastPairing();
        const uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DMPI_BlastPairingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string DamageEstimateRequestMDT::serialize(const uci::type::DamageEstimateRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DamageEstimateRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DamageEstimateRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  DamageCategoryEnum::serialize(accessor.getEstimateType(), node, DamageEstimateRequestMDT_Names::EstimateType_Name, false);
  DamageEstimateContentsEnum::serialize(accessor.getEstimateContents(), node, DamageEstimateRequestMDT_Names::EstimateContents_Name, false);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getReportingThreshold(), node, DamageEstimateRequestMDT_Names::ReportingThreshold_Name);
  DamageEstimateTargetType::serialize(accessor.getTargetData(), node, DamageEstimateRequestMDT_Names::TargetData_Name);
  if (accessor.hasTargetName()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getTargetName(), node, DamageEstimateRequestMDT_Names::TargetName_Name);
  }
  {
    const uci::type::DamageEstimateRequestMDT::DMPI_Data& boundedList = accessor.getDMPI_Data();
    for (uci::type::DamageEstimateRequestMDT::DMPI_Data::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DMPI_DamageEstimateType::serialize(boundedList.at(i), node, DamageEstimateRequestMDT_Names::DMPI_Data_Name);
    }
  }
  TaskID_Type::serialize(accessor.getTaskID(), node, DamageEstimateRequestMDT_Names::TaskID_Name);
  if (accessor.hasReleasePoint()) {
    Point3D_Type::serialize(accessor.getReleasePoint(), node, DamageEstimateRequestMDT_Names::ReleasePoint_Name);
  }
  {
    const uci::type::DamageEstimateRequestMDT::ProductMetadataID& boundedList = accessor.getProductMetadataID();
    for (uci::type::DamageEstimateRequestMDT::ProductMetadataID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProductMetadataID_Type::serialize(boundedList.at(i), node, DamageEstimateRequestMDT_Names::ProductMetadataID_Name);
    }
  }
  if (accessor.hasRespondBy()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getRespondBy(), node, DamageEstimateRequestMDT_Names::RespondBy_Name);
  }
  if (accessor.hasEstimateZone()) {
    ZoneType::serialize(accessor.getEstimateZone(), node, DamageEstimateRequestMDT_Names::EstimateZone_Name);
  }
  {
    const uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing& boundedList = accessor.getDMPI_BlastPairing();
    for (uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DMPI_BlastPairingType::serialize(boundedList.at(i), node, DamageEstimateRequestMDT_Names::DMPI_BlastPairing_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DamageEstimateRequestMDT>().release());
}

uci::type::DamageEstimateRequestMDT& DamageEstimateRequestMDT::create(const uci::type::DamageEstimateRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DamageEstimateRequestMDT> newAccessor{boost::make_unique<asb_uci::type::DamageEstimateRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DamageEstimateRequestMDT::destroy(uci::type::DamageEstimateRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::DamageEstimateRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

