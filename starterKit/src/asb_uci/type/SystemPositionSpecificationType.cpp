/** @file SystemPositionSpecificationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SystemPositionSpecificationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/InertialStateType.h"
#include "../../../include/asb_uci/type/SystemCapabilitySpecificationType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/InertialStateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemCapabilitySpecificationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemPositionSpecificationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SystemPositionSpecificationType::SystemPositionSpecificationType()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()} {
}

SystemPositionSpecificationType::~SystemPositionSpecificationType() = default;

void SystemPositionSpecificationType::copy(const uci::type::SystemPositionSpecificationType& accessor) {
  copyImpl(accessor, false);
}

void SystemPositionSpecificationType::copyImpl(const uci::type::SystemPositionSpecificationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SystemPositionSpecificationType&>(accessor);
    setSystemID(*(accessorImpl.systemID_Accessor));
    if (accessorImpl.positionConstraints_Accessor) {
      setPositionConstraints(*(accessorImpl.positionConstraints_Accessor));
    } else {
      positionConstraints_Accessor.reset();
    }
    if (accessorImpl.capabilityConstraints_Accessor) {
      setCapabilityConstraints(*(accessorImpl.capabilityConstraints_Accessor));
    } else {
      capabilityConstraints_Accessor.reset();
    }
  }
}

void SystemPositionSpecificationType::reset() noexcept {
  systemID_Accessor->reset();
  positionConstraints_Accessor.reset();
  capabilityConstraints_Accessor.reset();
}

const uci::type::SystemID_Type& SystemPositionSpecificationType::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& SystemPositionSpecificationType::getSystemID() {
  return *systemID_Accessor;
}

uci::type::SystemPositionSpecificationType& SystemPositionSpecificationType::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::InertialStateType& SystemPositionSpecificationType::getPositionConstraints_() const {
  if (positionConstraints_Accessor) {
    return *positionConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionConstraints(): An attempt was made to get an optional field that was not enabled, call hasPositionConstraints() to determine if it is safe to call getPositionConstraints()");
}

const uci::type::InertialStateType& SystemPositionSpecificationType::getPositionConstraints() const {
  return getPositionConstraints_();
}

uci::type::InertialStateType& SystemPositionSpecificationType::getPositionConstraints() {
  return getPositionConstraints_();
}

uci::type::SystemPositionSpecificationType& SystemPositionSpecificationType::setPositionConstraints(const uci::type::InertialStateType& accessor) {
  enablePositionConstraints();
  if (&accessor != positionConstraints_Accessor.get()) {
    positionConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SystemPositionSpecificationType::hasPositionConstraints() const noexcept {
  return static_cast<bool>(positionConstraints_Accessor);
}

uci::type::InertialStateType& SystemPositionSpecificationType::enablePositionConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::inertialStateType : type};
  if ((!positionConstraints_Accessor) || (positionConstraints_Accessor->getAccessorType() != requestedType)) {
    positionConstraints_Accessor = InertialStateType::create(requestedType);
    if (!positionConstraints_Accessor) {
      throw uci::base::UCIException("Error in enablePositionConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionConstraints_Accessor;
}

uci::type::SystemPositionSpecificationType& SystemPositionSpecificationType::clearPositionConstraints() noexcept {
  positionConstraints_Accessor.reset();
  return *this;
}

uci::type::SystemCapabilitySpecificationType& SystemPositionSpecificationType::getCapabilityConstraints_() const {
  if (capabilityConstraints_Accessor) {
    return *capabilityConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityConstraints(): An attempt was made to get an optional field that was not enabled, call hasCapabilityConstraints() to determine if it is safe to call getCapabilityConstraints()");
}

const uci::type::SystemCapabilitySpecificationType& SystemPositionSpecificationType::getCapabilityConstraints() const {
  return getCapabilityConstraints_();
}

uci::type::SystemCapabilitySpecificationType& SystemPositionSpecificationType::getCapabilityConstraints() {
  return getCapabilityConstraints_();
}

uci::type::SystemPositionSpecificationType& SystemPositionSpecificationType::setCapabilityConstraints(const uci::type::SystemCapabilitySpecificationType& accessor) {
  enableCapabilityConstraints();
  if (&accessor != capabilityConstraints_Accessor.get()) {
    capabilityConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SystemPositionSpecificationType::hasCapabilityConstraints() const noexcept {
  return static_cast<bool>(capabilityConstraints_Accessor);
}

uci::type::SystemCapabilitySpecificationType& SystemPositionSpecificationType::enableCapabilityConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemCapabilitySpecificationType : type};
  if ((!capabilityConstraints_Accessor) || (capabilityConstraints_Accessor->getAccessorType() != requestedType)) {
    capabilityConstraints_Accessor = SystemCapabilitySpecificationType::create(requestedType);
    if (!capabilityConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityConstraints_Accessor;
}

uci::type::SystemPositionSpecificationType& SystemPositionSpecificationType::clearCapabilityConstraints() noexcept {
  capabilityConstraints_Accessor.reset();
  return *this;
}

std::unique_ptr<SystemPositionSpecificationType> SystemPositionSpecificationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemPositionSpecificationType : type};
  return (requestedType == uci::type::accessorType::systemPositionSpecificationType) ? boost::make_unique<SystemPositionSpecificationType>() : nullptr;
}

/**  */
namespace SystemPositionSpecificationType_Names {

constexpr const char* Extern_Type_Name{"SystemPositionSpecificationType"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* PositionConstraints_Name{"PositionConstraints"};
constexpr const char* CapabilityConstraints_Name{"CapabilityConstraints"};

} // namespace SystemPositionSpecificationType_Names

void SystemPositionSpecificationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SystemPositionSpecificationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SystemPositionSpecificationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SystemPositionSpecificationType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemPositionSpecificationType_Names::PositionConstraints_Name) {
      InertialStateType::deserialize(valueType.second, accessor.enablePositionConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemPositionSpecificationType_Names::CapabilityConstraints_Name) {
      SystemCapabilitySpecificationType::deserialize(valueType.second, accessor.enableCapabilityConstraints(), nodeName, nsPrefix);
    }
  }
}

std::string SystemPositionSpecificationType::serialize(const uci::type::SystemPositionSpecificationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SystemPositionSpecificationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SystemPositionSpecificationType_Names::Extern_Type_Name);
  }
  SystemID_Type::serialize(accessor.getSystemID(), node, SystemPositionSpecificationType_Names::SystemID_Name);
  if (accessor.hasPositionConstraints()) {
    InertialStateType::serialize(accessor.getPositionConstraints(), node, SystemPositionSpecificationType_Names::PositionConstraints_Name);
  }
  if (accessor.hasCapabilityConstraints()) {
    SystemCapabilitySpecificationType::serialize(accessor.getCapabilityConstraints(), node, SystemPositionSpecificationType_Names::CapabilityConstraints_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SystemPositionSpecificationType& SystemPositionSpecificationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SystemPositionSpecificationType>().release());
}

uci::type::SystemPositionSpecificationType& SystemPositionSpecificationType::create(const uci::type::SystemPositionSpecificationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SystemPositionSpecificationType> newAccessor{boost::make_unique<asb_uci::type::SystemPositionSpecificationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SystemPositionSpecificationType::destroy(uci::type::SystemPositionSpecificationType& accessor) {
  delete dynamic_cast<asb_uci::type::SystemPositionSpecificationType*>(&accessor);
}

} // namespace type

} // namespace uci

