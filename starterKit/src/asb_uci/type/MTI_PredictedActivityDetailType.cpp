/** @file MTI_PredictedActivityDetailType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MTI_PredictedActivityDetailType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityStateEnum.h"
#include "../../../include/asb_uci/type/AreaChoiceType.h"
#include "../../../include/asb_uci/type/CannotComplyType.h"
#include "../../../include/asb_uci/type/EstimatedPerformanceType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityStateEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AreaChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CannotComplyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EstimatedPerformanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MTI_PredictedActivityDetailType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MTI_PredictedActivityDetailType::MTI_PredictedActivityDetailType()
  : estimatedPerformance_Accessor{boost::make_unique<EstimatedPerformance>(0, 5)} {
}

MTI_PredictedActivityDetailType::~MTI_PredictedActivityDetailType() = default;

void MTI_PredictedActivityDetailType::copy(const uci::type::MTI_PredictedActivityDetailType& accessor) {
  copyImpl(accessor, false);
}

void MTI_PredictedActivityDetailType::copyImpl(const uci::type::MTI_PredictedActivityDetailType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MTI_PredictedActivityDetailType&>(accessor);
    if (accessorImpl.activityState_Accessor) {
      setActivityState(*(accessorImpl.activityState_Accessor));
    } else {
      activityState_Accessor.reset();
    }
    if (accessorImpl.activityReason_Accessor) {
      setActivityReason(*(accessorImpl.activityReason_Accessor));
    } else {
      activityReason_Accessor.reset();
    }
    if (accessorImpl.hasEstimatedPercentageOccluded()) {
      setEstimatedPercentageOccluded(accessorImpl.getEstimatedPercentageOccluded());
    } else {
      clearEstimatedPercentageOccluded();
    }
    if (accessorImpl.hasRevisitIndex()) {
      setRevisitIndex(accessorImpl.getRevisitIndex());
    } else {
      clearRevisitIndex();
    }
    if (accessorImpl.hasEstimatedRevisitPeriod()) {
      setEstimatedRevisitPeriod(accessorImpl.getEstimatedRevisitPeriod());
    } else {
      clearEstimatedRevisitPeriod();
    }
    if (accessorImpl.hasEstimatedPercentageInFOR()) {
      setEstimatedPercentageInFOR(accessorImpl.getEstimatedPercentageInFOR());
    } else {
      clearEstimatedPercentageInFOR();
    }
    if (accessorImpl.hasEstimatedStartTime()) {
      setEstimatedStartTime(accessorImpl.getEstimatedStartTime());
    } else {
      clearEstimatedStartTime();
    }
    if (accessorImpl.hasEstimatedStopTime()) {
      setEstimatedStopTime(accessorImpl.getEstimatedStopTime());
    } else {
      clearEstimatedStopTime();
    }
    if (accessorImpl.hasEstimatedERP()) {
      setEstimatedERP(accessorImpl.getEstimatedERP());
    } else {
      clearEstimatedERP();
    }
    setEstimatedPerformance(*(accessorImpl.estimatedPerformance_Accessor));
    setConcurrentExecutionAssumed(accessorImpl.concurrentExecutionAssumed_Accessor);
    if (accessorImpl.hasEstimatedSweepTime()) {
      setEstimatedSweepTime(accessorImpl.getEstimatedSweepTime());
    } else {
      clearEstimatedSweepTime();
    }
    if (accessorImpl.estimatedTargetAreaScanned_Accessor) {
      setEstimatedTargetAreaScanned(*(accessorImpl.estimatedTargetAreaScanned_Accessor));
    } else {
      estimatedTargetAreaScanned_Accessor.reset();
    }
  }
}

void MTI_PredictedActivityDetailType::reset() noexcept {
  activityState_Accessor.reset();
  activityReason_Accessor.reset();
  clearEstimatedPercentageOccluded();
  clearRevisitIndex();
  clearEstimatedRevisitPeriod();
  clearEstimatedPercentageInFOR();
  clearEstimatedStartTime();
  clearEstimatedStopTime();
  clearEstimatedERP();
  estimatedPerformance_Accessor->reset();
  concurrentExecutionAssumed_Accessor = false;
  clearEstimatedSweepTime();
  estimatedTargetAreaScanned_Accessor.reset();
}

uci::type::ActivityStateEnum& MTI_PredictedActivityDetailType::getActivityState_() const {
  if (activityState_Accessor) {
    return *activityState_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityState(): An attempt was made to get an optional field that was not enabled, call hasActivityState() to determine if it is safe to call getActivityState()");
}

const uci::type::ActivityStateEnum& MTI_PredictedActivityDetailType::getActivityState() const {
  return getActivityState_();
}

uci::type::ActivityStateEnum& MTI_PredictedActivityDetailType::getActivityState() {
  return getActivityState_();
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setActivityState(const uci::type::ActivityStateEnum& accessor) {
  enableActivityState();
  if (&accessor != activityState_Accessor.get()) {
    activityState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setActivityState(const uci::type::ActivityStateEnum::EnumerationItem value) {
  enableActivityState().setValue(value);
  return *this;
}

bool MTI_PredictedActivityDetailType::hasActivityState() const noexcept {
  return static_cast<bool>(activityState_Accessor);
}

uci::type::ActivityStateEnum& MTI_PredictedActivityDetailType::enableActivityState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityStateEnum : type};
  if ((!activityState_Accessor) || (activityState_Accessor->getAccessorType() != requestedType)) {
    activityState_Accessor = ActivityStateEnum::create(requestedType);
    if (!activityState_Accessor) {
      throw uci::base::UCIException("Error in enableActivityState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityState_Accessor;
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::clearActivityState() noexcept {
  activityState_Accessor.reset();
  return *this;
}

uci::type::CannotComplyType& MTI_PredictedActivityDetailType::getActivityReason_() const {
  if (activityReason_Accessor) {
    return *activityReason_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityReason(): An attempt was made to get an optional field that was not enabled, call hasActivityReason() to determine if it is safe to call getActivityReason()");
}

const uci::type::CannotComplyType& MTI_PredictedActivityDetailType::getActivityReason() const {
  return getActivityReason_();
}

uci::type::CannotComplyType& MTI_PredictedActivityDetailType::getActivityReason() {
  return getActivityReason_();
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setActivityReason(const uci::type::CannotComplyType& accessor) {
  enableActivityReason(accessor.getAccessorType());
  if (&accessor != activityReason_Accessor.get()) {
    activityReason_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool MTI_PredictedActivityDetailType::hasActivityReason() const noexcept {
  return static_cast<bool>(activityReason_Accessor);
}

uci::type::CannotComplyType& MTI_PredictedActivityDetailType::enableActivityReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!activityReason_Accessor) || (activityReason_Accessor->getAccessorType() != requestedType)) {
    activityReason_Accessor = CannotComplyType::create(requestedType);
    if (!activityReason_Accessor) {
      throw uci::base::UCIException("Error in enableActivityReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityReason_Accessor;
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::clearActivityReason() noexcept {
  activityReason_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue MTI_PredictedActivityDetailType::getEstimatedPercentageOccluded() const {
  if (estimatedPercentageOccluded_Accessor) {
    return *estimatedPercentageOccluded_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedPercentageOccluded(): An attempt was made to get an optional field that was not enabled, call hasEstimatedPercentageOccluded() to determine if it is safe to call getEstimatedPercentageOccluded()");
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setEstimatedPercentageOccluded(uci::type::PercentTypeValue value) {
  estimatedPercentageOccluded_Accessor = value;
  return *this;
}

bool MTI_PredictedActivityDetailType::hasEstimatedPercentageOccluded() const noexcept {
  return estimatedPercentageOccluded_Accessor.has_value();
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::clearEstimatedPercentageOccluded() noexcept {
  estimatedPercentageOccluded_Accessor.reset();
  return *this;
}

xs::UnsignedInt MTI_PredictedActivityDetailType::getRevisitIndex() const {
  if (revisitIndex_Accessor) {
    return *revisitIndex_Accessor;
  }
  throw uci::base::UCIException("Error in getRevisitIndex(): An attempt was made to get an optional field that was not enabled, call hasRevisitIndex() to determine if it is safe to call getRevisitIndex()");
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setRevisitIndex(xs::UnsignedInt value) {
  revisitIndex_Accessor = value;
  return *this;
}

bool MTI_PredictedActivityDetailType::hasRevisitIndex() const noexcept {
  return revisitIndex_Accessor.has_value();
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::clearRevisitIndex() noexcept {
  revisitIndex_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue MTI_PredictedActivityDetailType::getEstimatedRevisitPeriod() const {
  if (estimatedRevisitPeriod_Accessor) {
    return *estimatedRevisitPeriod_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedRevisitPeriod(): An attempt was made to get an optional field that was not enabled, call hasEstimatedRevisitPeriod() to determine if it is safe to call getEstimatedRevisitPeriod()");
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setEstimatedRevisitPeriod(uci::type::DurationTypeValue value) {
  estimatedRevisitPeriod_Accessor = value;
  return *this;
}

bool MTI_PredictedActivityDetailType::hasEstimatedRevisitPeriod() const noexcept {
  return estimatedRevisitPeriod_Accessor.has_value();
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::clearEstimatedRevisitPeriod() noexcept {
  estimatedRevisitPeriod_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue MTI_PredictedActivityDetailType::getEstimatedPercentageInFOR() const {
  if (estimatedPercentageInFOR_Accessor) {
    return *estimatedPercentageInFOR_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedPercentageInFOR(): An attempt was made to get an optional field that was not enabled, call hasEstimatedPercentageInFOR() to determine if it is safe to call getEstimatedPercentageInFOR()");
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setEstimatedPercentageInFOR(uci::type::PercentTypeValue value) {
  estimatedPercentageInFOR_Accessor = value;
  return *this;
}

bool MTI_PredictedActivityDetailType::hasEstimatedPercentageInFOR() const noexcept {
  return estimatedPercentageInFOR_Accessor.has_value();
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::clearEstimatedPercentageInFOR() noexcept {
  estimatedPercentageInFOR_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue MTI_PredictedActivityDetailType::getEstimatedStartTime() const {
  if (estimatedStartTime_Accessor) {
    return *estimatedStartTime_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedStartTime(): An attempt was made to get an optional field that was not enabled, call hasEstimatedStartTime() to determine if it is safe to call getEstimatedStartTime()");
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setEstimatedStartTime(uci::type::DateTimeTypeValue value) {
  estimatedStartTime_Accessor = value;
  return *this;
}

bool MTI_PredictedActivityDetailType::hasEstimatedStartTime() const noexcept {
  return estimatedStartTime_Accessor.has_value();
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::clearEstimatedStartTime() noexcept {
  estimatedStartTime_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue MTI_PredictedActivityDetailType::getEstimatedStopTime() const {
  if (estimatedStopTime_Accessor) {
    return *estimatedStopTime_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedStopTime(): An attempt was made to get an optional field that was not enabled, call hasEstimatedStopTime() to determine if it is safe to call getEstimatedStopTime()");
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setEstimatedStopTime(uci::type::DateTimeTypeValue value) {
  estimatedStopTime_Accessor = value;
  return *this;
}

bool MTI_PredictedActivityDetailType::hasEstimatedStopTime() const noexcept {
  return estimatedStopTime_Accessor.has_value();
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::clearEstimatedStopTime() noexcept {
  estimatedStopTime_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue MTI_PredictedActivityDetailType::getEstimatedERP() const {
  if (estimatedERP_Accessor) {
    return *estimatedERP_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedERP(): An attempt was made to get an optional field that was not enabled, call hasEstimatedERP() to determine if it is safe to call getEstimatedERP()");
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setEstimatedERP(uci::type::DecibelTypeValue value) {
  estimatedERP_Accessor = value;
  return *this;
}

bool MTI_PredictedActivityDetailType::hasEstimatedERP() const noexcept {
  return estimatedERP_Accessor.has_value();
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::clearEstimatedERP() noexcept {
  estimatedERP_Accessor.reset();
  return *this;
}

const uci::type::MTI_PredictedActivityDetailType::EstimatedPerformance& MTI_PredictedActivityDetailType::getEstimatedPerformance() const {
  return *estimatedPerformance_Accessor;
}

uci::type::MTI_PredictedActivityDetailType::EstimatedPerformance& MTI_PredictedActivityDetailType::getEstimatedPerformance() {
  return *estimatedPerformance_Accessor;
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setEstimatedPerformance(const uci::type::MTI_PredictedActivityDetailType::EstimatedPerformance& accessor) {
  if (&accessor != estimatedPerformance_Accessor.get()) {
    estimatedPerformance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean MTI_PredictedActivityDetailType::getConcurrentExecutionAssumed() const {
  return concurrentExecutionAssumed_Accessor;
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setConcurrentExecutionAssumed(xs::Boolean value) {
  concurrentExecutionAssumed_Accessor = value;
  return *this;
}


uci::type::DurationTypeValue MTI_PredictedActivityDetailType::getEstimatedSweepTime() const {
  if (estimatedSweepTime_Accessor) {
    return *estimatedSweepTime_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedSweepTime(): An attempt was made to get an optional field that was not enabled, call hasEstimatedSweepTime() to determine if it is safe to call getEstimatedSweepTime()");
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setEstimatedSweepTime(uci::type::DurationTypeValue value) {
  estimatedSweepTime_Accessor = value;
  return *this;
}

bool MTI_PredictedActivityDetailType::hasEstimatedSweepTime() const noexcept {
  return estimatedSweepTime_Accessor.has_value();
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::clearEstimatedSweepTime() noexcept {
  estimatedSweepTime_Accessor.reset();
  return *this;
}

uci::type::AreaChoiceType& MTI_PredictedActivityDetailType::getEstimatedTargetAreaScanned_() const {
  if (estimatedTargetAreaScanned_Accessor) {
    return *estimatedTargetAreaScanned_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedTargetAreaScanned(): An attempt was made to get an optional field that was not enabled, call hasEstimatedTargetAreaScanned() to determine if it is safe to call getEstimatedTargetAreaScanned()");
}

const uci::type::AreaChoiceType& MTI_PredictedActivityDetailType::getEstimatedTargetAreaScanned() const {
  return getEstimatedTargetAreaScanned_();
}

uci::type::AreaChoiceType& MTI_PredictedActivityDetailType::getEstimatedTargetAreaScanned() {
  return getEstimatedTargetAreaScanned_();
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::setEstimatedTargetAreaScanned(const uci::type::AreaChoiceType& accessor) {
  enableEstimatedTargetAreaScanned();
  if (&accessor != estimatedTargetAreaScanned_Accessor.get()) {
    estimatedTargetAreaScanned_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MTI_PredictedActivityDetailType::hasEstimatedTargetAreaScanned() const noexcept {
  return static_cast<bool>(estimatedTargetAreaScanned_Accessor);
}

uci::type::AreaChoiceType& MTI_PredictedActivityDetailType::enableEstimatedTargetAreaScanned(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::areaChoiceType : type};
  if ((!estimatedTargetAreaScanned_Accessor) || (estimatedTargetAreaScanned_Accessor->getAccessorType() != requestedType)) {
    estimatedTargetAreaScanned_Accessor = AreaChoiceType::create(requestedType);
    if (!estimatedTargetAreaScanned_Accessor) {
      throw uci::base::UCIException("Error in enableEstimatedTargetAreaScanned(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *estimatedTargetAreaScanned_Accessor;
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::clearEstimatedTargetAreaScanned() noexcept {
  estimatedTargetAreaScanned_Accessor.reset();
  return *this;
}

std::unique_ptr<MTI_PredictedActivityDetailType> MTI_PredictedActivityDetailType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mTI_PredictedActivityDetailType : type};
  return (requestedType == uci::type::accessorType::mTI_PredictedActivityDetailType) ? boost::make_unique<MTI_PredictedActivityDetailType>() : nullptr;
}

/**  */
namespace MTI_PredictedActivityDetailType_Names {

constexpr const char* Extern_Type_Name{"MTI_PredictedActivityDetailType"};
constexpr const char* ActivityState_Name{"ActivityState"};
constexpr const char* ActivityReason_Name{"ActivityReason"};
constexpr const char* EstimatedPercentageOccluded_Name{"EstimatedPercentageOccluded"};
constexpr const char* RevisitIndex_Name{"RevisitIndex"};
constexpr const char* EstimatedRevisitPeriod_Name{"EstimatedRevisitPeriod"};
constexpr const char* EstimatedPercentageInFOR_Name{"EstimatedPercentageInFOR"};
constexpr const char* EstimatedStartTime_Name{"EstimatedStartTime"};
constexpr const char* EstimatedStopTime_Name{"EstimatedStopTime"};
constexpr const char* EstimatedERP_Name{"EstimatedERP"};
constexpr const char* EstimatedPerformance_Name{"EstimatedPerformance"};
constexpr const char* ConcurrentExecutionAssumed_Name{"ConcurrentExecutionAssumed"};
constexpr const char* EstimatedSweepTime_Name{"EstimatedSweepTime"};
constexpr const char* EstimatedTargetAreaScanned_Name{"EstimatedTargetAreaScanned"};

} // namespace MTI_PredictedActivityDetailType_Names

void MTI_PredictedActivityDetailType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MTI_PredictedActivityDetailType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MTI_PredictedActivityDetailType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MTI_PredictedActivityDetailType_Names::ActivityState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableActivityState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MTI_PredictedActivityDetailType_Names::ActivityReason_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableActivityReason(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MTI_PredictedActivityDetailType_Names::EstimatedPercentageOccluded_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedPercentageOccluded(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_PredictedActivityDetailType_Names::RevisitIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRevisitIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_PredictedActivityDetailType_Names::EstimatedRevisitPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedRevisitPeriod(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_PredictedActivityDetailType_Names::EstimatedPercentageInFOR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedPercentageInFOR(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_PredictedActivityDetailType_Names::EstimatedStartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedStartTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_PredictedActivityDetailType_Names::EstimatedStopTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedStopTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_PredictedActivityDetailType_Names::EstimatedERP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedERP(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_PredictedActivityDetailType_Names::EstimatedPerformance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MTI_PredictedActivityDetailType::EstimatedPerformance& boundedList = accessor.getEstimatedPerformance();
        const uci::type::MTI_PredictedActivityDetailType::EstimatedPerformance::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EstimatedPerformanceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MTI_PredictedActivityDetailType_Names::ConcurrentExecutionAssumed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConcurrentExecutionAssumed(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_PredictedActivityDetailType_Names::EstimatedSweepTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedSweepTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_PredictedActivityDetailType_Names::EstimatedTargetAreaScanned_Name) {
      AreaChoiceType::deserialize(valueType.second, accessor.enableEstimatedTargetAreaScanned(), nodeName, nsPrefix);
    }
  }
}

std::string MTI_PredictedActivityDetailType::serialize(const uci::type::MTI_PredictedActivityDetailType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MTI_PredictedActivityDetailType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MTI_PredictedActivityDetailType_Names::Extern_Type_Name);
  }
  if (accessor.hasActivityState()) {
    ActivityStateEnum::serialize(accessor.getActivityState(), node, MTI_PredictedActivityDetailType_Names::ActivityState_Name, false);
  }
  if (accessor.hasActivityReason()) {
    CannotComplyType::serialize(accessor.getActivityReason(), node, MTI_PredictedActivityDetailType_Names::ActivityReason_Name);
  }
  if (accessor.hasEstimatedPercentageOccluded()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedPercentageOccluded(), node, MTI_PredictedActivityDetailType_Names::EstimatedPercentageOccluded_Name);
  }
  if (accessor.hasRevisitIndex()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getRevisitIndex(), node, MTI_PredictedActivityDetailType_Names::RevisitIndex_Name);
  }
  if (accessor.hasEstimatedRevisitPeriod()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getEstimatedRevisitPeriod(), node, MTI_PredictedActivityDetailType_Names::EstimatedRevisitPeriod_Name);
  }
  if (accessor.hasEstimatedPercentageInFOR()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedPercentageInFOR(), node, MTI_PredictedActivityDetailType_Names::EstimatedPercentageInFOR_Name);
  }
  if (accessor.hasEstimatedStartTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEstimatedStartTime(), node, MTI_PredictedActivityDetailType_Names::EstimatedStartTime_Name);
  }
  if (accessor.hasEstimatedStopTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEstimatedStopTime(), node, MTI_PredictedActivityDetailType_Names::EstimatedStopTime_Name);
  }
  if (accessor.hasEstimatedERP()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedERP(), node, MTI_PredictedActivityDetailType_Names::EstimatedERP_Name);
  }
  {
    const uci::type::MTI_PredictedActivityDetailType::EstimatedPerformance& boundedList = accessor.getEstimatedPerformance();
    for (uci::type::MTI_PredictedActivityDetailType::EstimatedPerformance::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EstimatedPerformanceType::serialize(boundedList.at(i), node, MTI_PredictedActivityDetailType_Names::EstimatedPerformance_Name);
    }
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getConcurrentExecutionAssumed(), node, MTI_PredictedActivityDetailType_Names::ConcurrentExecutionAssumed_Name);
  if (accessor.hasEstimatedSweepTime()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getEstimatedSweepTime(), node, MTI_PredictedActivityDetailType_Names::EstimatedSweepTime_Name);
  }
  if (accessor.hasEstimatedTargetAreaScanned()) {
    AreaChoiceType::serialize(accessor.getEstimatedTargetAreaScanned(), node, MTI_PredictedActivityDetailType_Names::EstimatedTargetAreaScanned_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MTI_PredictedActivityDetailType>().release());
}

uci::type::MTI_PredictedActivityDetailType& MTI_PredictedActivityDetailType::create(const uci::type::MTI_PredictedActivityDetailType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MTI_PredictedActivityDetailType> newAccessor{boost::make_unique<asb_uci::type::MTI_PredictedActivityDetailType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MTI_PredictedActivityDetailType::destroy(uci::type::MTI_PredictedActivityDetailType& accessor) {
  delete dynamic_cast<asb_uci::type::MTI_PredictedActivityDetailType*>(&accessor);
}

} // namespace type

} // namespace uci

