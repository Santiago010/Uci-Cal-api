/** @file ThreatAssessmentMetricsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ThreatAssessmentMetricsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DetectionEnvelopeType.h"
#include "asb_uci/type/ThreatAssessmentProbabilityType.h"
#include "asb_uci/type/ThreatZoneType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DetectionEnvelopeType.h"
#include "uci/type/ThreatAssessmentMetricsType.h"
#include "uci/type/ThreatAssessmentProbabilityType.h"
#include "uci/type/ThreatZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ThreatAssessmentMetricsType::ThreatAssessmentMetricsType()
  : detectionEnvelope_Accessor{boost::make_unique<DetectionEnvelope>(0, SIZE_MAX)} {
}

ThreatAssessmentMetricsType::~ThreatAssessmentMetricsType() = default;

void ThreatAssessmentMetricsType::copy(const uci::type::ThreatAssessmentMetricsType& accessor) {
  copyImpl(accessor, false);
}

void ThreatAssessmentMetricsType::copyImpl(const uci::type::ThreatAssessmentMetricsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ThreatAssessmentMetricsType&>(accessor);
    if (accessorImpl.acquisition_Accessor) {
      setAcquisition(*(accessorImpl.acquisition_Accessor));
    } else {
      acquisition_Accessor.reset();
    }
    if (accessorImpl.track_Accessor) {
      setTrack(*(accessorImpl.track_Accessor));
    } else {
      track_Accessor.reset();
    }
    if (accessorImpl.launch_Accessor) {
      setLaunch(*(accessorImpl.launch_Accessor));
    } else {
      launch_Accessor.reset();
    }
    if (accessorImpl.intercept_Accessor) {
      setIntercept(*(accessorImpl.intercept_Accessor));
    } else {
      intercept_Accessor.reset();
    }
    if (accessorImpl.kill_Accessor) {
      setKill(*(accessorImpl.kill_Accessor));
    } else {
      kill_Accessor.reset();
    }
    setDetectionEnvelope(*(accessorImpl.detectionEnvelope_Accessor));
    if (accessorImpl.threatZone_Accessor) {
      setThreatZone(*(accessorImpl.threatZone_Accessor));
    } else {
      threatZone_Accessor.reset();
    }
  }
}

void ThreatAssessmentMetricsType::reset() noexcept {
  acquisition_Accessor.reset();
  track_Accessor.reset();
  launch_Accessor.reset();
  intercept_Accessor.reset();
  kill_Accessor.reset();
  detectionEnvelope_Accessor->reset();
  threatZone_Accessor.reset();
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getAcquisition_() const {
  if (acquisition_Accessor) {
    return *acquisition_Accessor;
  }
  throw uci::base::UCIException("Error in getAcquisition(): An attempt was made to get an optional field that was not enabled, call hasAcquisition() to determine if it is safe to call getAcquisition()");
}

const uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getAcquisition() const {
  return getAcquisition_();
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getAcquisition() {
  return getAcquisition_();
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::setAcquisition(const uci::type::ThreatAssessmentProbabilityType& accessor) {
  enableAcquisition();
  if (&accessor != acquisition_Accessor.get()) {
    acquisition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThreatAssessmentMetricsType::hasAcquisition() const noexcept {
  return static_cast<bool>(acquisition_Accessor);
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::enableAcquisition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatAssessmentProbabilityType : type};
  if ((!acquisition_Accessor) || (acquisition_Accessor->getAccessorType() != requestedType)) {
    acquisition_Accessor = ThreatAssessmentProbabilityType::create(requestedType);
    if (!acquisition_Accessor) {
      throw uci::base::UCIException("Error in enableAcquisition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *acquisition_Accessor;
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::clearAcquisition() noexcept {
  acquisition_Accessor.reset();
  return *this;
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getTrack_() const {
  if (track_Accessor) {
    return *track_Accessor;
  }
  throw uci::base::UCIException("Error in getTrack(): An attempt was made to get an optional field that was not enabled, call hasTrack() to determine if it is safe to call getTrack()");
}

const uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getTrack() const {
  return getTrack_();
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getTrack() {
  return getTrack_();
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::setTrack(const uci::type::ThreatAssessmentProbabilityType& accessor) {
  enableTrack();
  if (&accessor != track_Accessor.get()) {
    track_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThreatAssessmentMetricsType::hasTrack() const noexcept {
  return static_cast<bool>(track_Accessor);
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::enableTrack(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatAssessmentProbabilityType : type};
  if ((!track_Accessor) || (track_Accessor->getAccessorType() != requestedType)) {
    track_Accessor = ThreatAssessmentProbabilityType::create(requestedType);
    if (!track_Accessor) {
      throw uci::base::UCIException("Error in enableTrack(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *track_Accessor;
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::clearTrack() noexcept {
  track_Accessor.reset();
  return *this;
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getLaunch_() const {
  if (launch_Accessor) {
    return *launch_Accessor;
  }
  throw uci::base::UCIException("Error in getLaunch(): An attempt was made to get an optional field that was not enabled, call hasLaunch() to determine if it is safe to call getLaunch()");
}

const uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getLaunch() const {
  return getLaunch_();
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getLaunch() {
  return getLaunch_();
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::setLaunch(const uci::type::ThreatAssessmentProbabilityType& accessor) {
  enableLaunch();
  if (&accessor != launch_Accessor.get()) {
    launch_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThreatAssessmentMetricsType::hasLaunch() const noexcept {
  return static_cast<bool>(launch_Accessor);
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::enableLaunch(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatAssessmentProbabilityType : type};
  if ((!launch_Accessor) || (launch_Accessor->getAccessorType() != requestedType)) {
    launch_Accessor = ThreatAssessmentProbabilityType::create(requestedType);
    if (!launch_Accessor) {
      throw uci::base::UCIException("Error in enableLaunch(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *launch_Accessor;
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::clearLaunch() noexcept {
  launch_Accessor.reset();
  return *this;
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getIntercept_() const {
  if (intercept_Accessor) {
    return *intercept_Accessor;
  }
  throw uci::base::UCIException("Error in getIntercept(): An attempt was made to get an optional field that was not enabled, call hasIntercept() to determine if it is safe to call getIntercept()");
}

const uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getIntercept() const {
  return getIntercept_();
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getIntercept() {
  return getIntercept_();
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::setIntercept(const uci::type::ThreatAssessmentProbabilityType& accessor) {
  enableIntercept();
  if (&accessor != intercept_Accessor.get()) {
    intercept_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThreatAssessmentMetricsType::hasIntercept() const noexcept {
  return static_cast<bool>(intercept_Accessor);
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::enableIntercept(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatAssessmentProbabilityType : type};
  if ((!intercept_Accessor) || (intercept_Accessor->getAccessorType() != requestedType)) {
    intercept_Accessor = ThreatAssessmentProbabilityType::create(requestedType);
    if (!intercept_Accessor) {
      throw uci::base::UCIException("Error in enableIntercept(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *intercept_Accessor;
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::clearIntercept() noexcept {
  intercept_Accessor.reset();
  return *this;
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getKill_() const {
  if (kill_Accessor) {
    return *kill_Accessor;
  }
  throw uci::base::UCIException("Error in getKill(): An attempt was made to get an optional field that was not enabled, call hasKill() to determine if it is safe to call getKill()");
}

const uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getKill() const {
  return getKill_();
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::getKill() {
  return getKill_();
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::setKill(const uci::type::ThreatAssessmentProbabilityType& accessor) {
  enableKill();
  if (&accessor != kill_Accessor.get()) {
    kill_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThreatAssessmentMetricsType::hasKill() const noexcept {
  return static_cast<bool>(kill_Accessor);
}

uci::type::ThreatAssessmentProbabilityType& ThreatAssessmentMetricsType::enableKill(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatAssessmentProbabilityType : type};
  if ((!kill_Accessor) || (kill_Accessor->getAccessorType() != requestedType)) {
    kill_Accessor = ThreatAssessmentProbabilityType::create(requestedType);
    if (!kill_Accessor) {
      throw uci::base::UCIException("Error in enableKill(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *kill_Accessor;
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::clearKill() noexcept {
  kill_Accessor.reset();
  return *this;
}

const uci::type::ThreatAssessmentMetricsType::DetectionEnvelope& ThreatAssessmentMetricsType::getDetectionEnvelope() const {
  return *detectionEnvelope_Accessor;
}

uci::type::ThreatAssessmentMetricsType::DetectionEnvelope& ThreatAssessmentMetricsType::getDetectionEnvelope() {
  return *detectionEnvelope_Accessor;
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::setDetectionEnvelope(const uci::type::ThreatAssessmentMetricsType::DetectionEnvelope& accessor) {
  if (&accessor != detectionEnvelope_Accessor.get()) {
    detectionEnvelope_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ThreatZoneType& ThreatAssessmentMetricsType::getThreatZone_() const {
  if (threatZone_Accessor) {
    return *threatZone_Accessor;
  }
  throw uci::base::UCIException("Error in getThreatZone(): An attempt was made to get an optional field that was not enabled, call hasThreatZone() to determine if it is safe to call getThreatZone()");
}

const uci::type::ThreatZoneType& ThreatAssessmentMetricsType::getThreatZone() const {
  return getThreatZone_();
}

uci::type::ThreatZoneType& ThreatAssessmentMetricsType::getThreatZone() {
  return getThreatZone_();
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::setThreatZone(const uci::type::ThreatZoneType& accessor) {
  enableThreatZone();
  if (&accessor != threatZone_Accessor.get()) {
    threatZone_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThreatAssessmentMetricsType::hasThreatZone() const noexcept {
  return static_cast<bool>(threatZone_Accessor);
}

uci::type::ThreatZoneType& ThreatAssessmentMetricsType::enableThreatZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatZoneType : type};
  if ((!threatZone_Accessor) || (threatZone_Accessor->getAccessorType() != requestedType)) {
    threatZone_Accessor = ThreatZoneType::create(requestedType);
    if (!threatZone_Accessor) {
      throw uci::base::UCIException("Error in enableThreatZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *threatZone_Accessor;
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::clearThreatZone() noexcept {
  threatZone_Accessor.reset();
  return *this;
}

std::unique_ptr<ThreatAssessmentMetricsType> ThreatAssessmentMetricsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatAssessmentMetricsType : type};
  return (requestedType == uci::type::accessorType::threatAssessmentMetricsType) ? boost::make_unique<ThreatAssessmentMetricsType>() : nullptr;
}

/**  */
namespace ThreatAssessmentMetricsType_Names {

constexpr const char* Extern_Type_Name{"ThreatAssessmentMetricsType"};
constexpr const char* Acquisition_Name{"Acquisition"};
constexpr const char* Track_Name{"Track"};
constexpr const char* Launch_Name{"Launch"};
constexpr const char* Intercept_Name{"Intercept"};
constexpr const char* Kill_Name{"Kill"};
constexpr const char* DetectionEnvelope_Name{"DetectionEnvelope"};
constexpr const char* ThreatZone_Name{"ThreatZone"};

} // namespace ThreatAssessmentMetricsType_Names

void ThreatAssessmentMetricsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ThreatAssessmentMetricsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ThreatAssessmentMetricsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ThreatAssessmentMetricsType_Names::Acquisition_Name) {
      ThreatAssessmentProbabilityType::deserialize(valueType.second, accessor.enableAcquisition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreatAssessmentMetricsType_Names::Track_Name) {
      ThreatAssessmentProbabilityType::deserialize(valueType.second, accessor.enableTrack(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreatAssessmentMetricsType_Names::Launch_Name) {
      ThreatAssessmentProbabilityType::deserialize(valueType.second, accessor.enableLaunch(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreatAssessmentMetricsType_Names::Intercept_Name) {
      ThreatAssessmentProbabilityType::deserialize(valueType.second, accessor.enableIntercept(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreatAssessmentMetricsType_Names::Kill_Name) {
      ThreatAssessmentProbabilityType::deserialize(valueType.second, accessor.enableKill(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreatAssessmentMetricsType_Names::DetectionEnvelope_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ThreatAssessmentMetricsType::DetectionEnvelope& boundedList = accessor.getDetectionEnvelope();
        const uci::type::ThreatAssessmentMetricsType::DetectionEnvelope::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DetectionEnvelopeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ThreatAssessmentMetricsType_Names::ThreatZone_Name) {
      ThreatZoneType::deserialize(valueType.second, accessor.enableThreatZone(), nodeName, nsPrefix);
    }
  }
}

std::string ThreatAssessmentMetricsType::serialize(const uci::type::ThreatAssessmentMetricsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ThreatAssessmentMetricsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ThreatAssessmentMetricsType_Names::Extern_Type_Name);
  }
  if (accessor.hasAcquisition()) {
    ThreatAssessmentProbabilityType::serialize(accessor.getAcquisition(), node, ThreatAssessmentMetricsType_Names::Acquisition_Name);
  }
  if (accessor.hasTrack()) {
    ThreatAssessmentProbabilityType::serialize(accessor.getTrack(), node, ThreatAssessmentMetricsType_Names::Track_Name);
  }
  if (accessor.hasLaunch()) {
    ThreatAssessmentProbabilityType::serialize(accessor.getLaunch(), node, ThreatAssessmentMetricsType_Names::Launch_Name);
  }
  if (accessor.hasIntercept()) {
    ThreatAssessmentProbabilityType::serialize(accessor.getIntercept(), node, ThreatAssessmentMetricsType_Names::Intercept_Name);
  }
  if (accessor.hasKill()) {
    ThreatAssessmentProbabilityType::serialize(accessor.getKill(), node, ThreatAssessmentMetricsType_Names::Kill_Name);
  }
  {
    const uci::type::ThreatAssessmentMetricsType::DetectionEnvelope& boundedList = accessor.getDetectionEnvelope();
    for (uci::type::ThreatAssessmentMetricsType::DetectionEnvelope::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DetectionEnvelopeType::serialize(boundedList.at(i), node, ThreatAssessmentMetricsType_Names::DetectionEnvelope_Name);
    }
  }
  if (accessor.hasThreatZone()) {
    ThreatZoneType::serialize(accessor.getThreatZone(), node, ThreatAssessmentMetricsType_Names::ThreatZone_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ThreatAssessmentMetricsType>().release());
}

uci::type::ThreatAssessmentMetricsType& ThreatAssessmentMetricsType::create(const uci::type::ThreatAssessmentMetricsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ThreatAssessmentMetricsType> newAccessor{boost::make_unique<asb_uci::type::ThreatAssessmentMetricsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ThreatAssessmentMetricsType::destroy(uci::type::ThreatAssessmentMetricsType& accessor) {
  delete dynamic_cast<asb_uci::type::ThreatAssessmentMetricsType*>(&accessor);
}

} // namespace type

} // namespace uci

