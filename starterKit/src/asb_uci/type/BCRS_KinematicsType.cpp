/** @file BCRS_KinematicsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/BCRS_KinematicsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/BCRS_PositionType.h"
#include "../../../include/asb_uci/type/CovarianceMatrixType.h"
#include "../../../include/asb_uci/type/OrbitalKinematicsAccelerationType.h"
#include "../../../include/asb_uci/type/OrbitalKinematicsVelocityType.h"
#include "../../../include/asb_uci/type/QuaternionType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BCRS_KinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BCRS_PositionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CovarianceMatrixType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalKinematicsAccelerationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalKinematicsVelocityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QuaternionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

BCRS_KinematicsType::BCRS_KinematicsType()
  : position_Accessor{boost::make_unique<BCRS_PositionType>()},
    velocity_Accessor{boost::make_unique<OrbitalKinematicsVelocityType>()} {
}

BCRS_KinematicsType::~BCRS_KinematicsType() = default;

void BCRS_KinematicsType::copy(const uci::type::BCRS_KinematicsType& accessor) {
  copyImpl(accessor, false);
}

void BCRS_KinematicsType::copyImpl(const uci::type::BCRS_KinematicsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const BCRS_KinematicsType&>(accessor);
    setEpoch(accessorImpl.epoch_Accessor);
    setPosition(*(accessorImpl.position_Accessor));
    setVelocity(*(accessorImpl.velocity_Accessor));
    if (accessorImpl.acceleration_Accessor) {
      setAcceleration(*(accessorImpl.acceleration_Accessor));
    } else {
      acceleration_Accessor.reset();
    }
    if (accessorImpl.attitude_Accessor) {
      setAttitude(*(accessorImpl.attitude_Accessor));
    } else {
      attitude_Accessor.reset();
    }
    if (accessorImpl.covariance_Accessor) {
      setCovariance(*(accessorImpl.covariance_Accessor));
    } else {
      covariance_Accessor.reset();
    }
  }
}

void BCRS_KinematicsType::reset() noexcept {
  epoch_Accessor = 0;
  position_Accessor->reset();
  velocity_Accessor->reset();
  acceleration_Accessor.reset();
  attitude_Accessor.reset();
  covariance_Accessor.reset();
}

uci::type::DateTimeTypeValue BCRS_KinematicsType::getEpoch() const {
  return epoch_Accessor;
}

uci::type::BCRS_KinematicsType& BCRS_KinematicsType::setEpoch(uci::type::DateTimeTypeValue value) {
  epoch_Accessor = value;
  return *this;
}


const uci::type::BCRS_PositionType& BCRS_KinematicsType::getPosition() const {
  return *position_Accessor;
}

uci::type::BCRS_PositionType& BCRS_KinematicsType::getPosition() {
  return *position_Accessor;
}

uci::type::BCRS_KinematicsType& BCRS_KinematicsType::setPosition(const uci::type::BCRS_PositionType& accessor) {
  if (&accessor != position_Accessor.get()) {
    position_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitalKinematicsVelocityType& BCRS_KinematicsType::getVelocity() const {
  return *velocity_Accessor;
}

uci::type::OrbitalKinematicsVelocityType& BCRS_KinematicsType::getVelocity() {
  return *velocity_Accessor;
}

uci::type::BCRS_KinematicsType& BCRS_KinematicsType::setVelocity(const uci::type::OrbitalKinematicsVelocityType& accessor) {
  if (&accessor != velocity_Accessor.get()) {
    velocity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitalKinematicsAccelerationType& BCRS_KinematicsType::getAcceleration_() const {
  if (acceleration_Accessor) {
    return *acceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getAcceleration(): An attempt was made to get an optional field that was not enabled, call hasAcceleration() to determine if it is safe to call getAcceleration()");
}

const uci::type::OrbitalKinematicsAccelerationType& BCRS_KinematicsType::getAcceleration() const {
  return getAcceleration_();
}

uci::type::OrbitalKinematicsAccelerationType& BCRS_KinematicsType::getAcceleration() {
  return getAcceleration_();
}

uci::type::BCRS_KinematicsType& BCRS_KinematicsType::setAcceleration(const uci::type::OrbitalKinematicsAccelerationType& accessor) {
  enableAcceleration();
  if (&accessor != acceleration_Accessor.get()) {
    acceleration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool BCRS_KinematicsType::hasAcceleration() const noexcept {
  return static_cast<bool>(acceleration_Accessor);
}

uci::type::OrbitalKinematicsAccelerationType& BCRS_KinematicsType::enableAcceleration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalKinematicsAccelerationType : type};
  if ((!acceleration_Accessor) || (acceleration_Accessor->getAccessorType() != requestedType)) {
    acceleration_Accessor = OrbitalKinematicsAccelerationType::create(requestedType);
    if (!acceleration_Accessor) {
      throw uci::base::UCIException("Error in enableAcceleration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *acceleration_Accessor;
}

uci::type::BCRS_KinematicsType& BCRS_KinematicsType::clearAcceleration() noexcept {
  acceleration_Accessor.reset();
  return *this;
}

uci::type::QuaternionType& BCRS_KinematicsType::getAttitude_() const {
  if (attitude_Accessor) {
    return *attitude_Accessor;
  }
  throw uci::base::UCIException("Error in getAttitude(): An attempt was made to get an optional field that was not enabled, call hasAttitude() to determine if it is safe to call getAttitude()");
}

const uci::type::QuaternionType& BCRS_KinematicsType::getAttitude() const {
  return getAttitude_();
}

uci::type::QuaternionType& BCRS_KinematicsType::getAttitude() {
  return getAttitude_();
}

uci::type::BCRS_KinematicsType& BCRS_KinematicsType::setAttitude(const uci::type::QuaternionType& accessor) {
  enableAttitude();
  if (&accessor != attitude_Accessor.get()) {
    attitude_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool BCRS_KinematicsType::hasAttitude() const noexcept {
  return static_cast<bool>(attitude_Accessor);
}

uci::type::QuaternionType& BCRS_KinematicsType::enableAttitude(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::quaternionType : type};
  if ((!attitude_Accessor) || (attitude_Accessor->getAccessorType() != requestedType)) {
    attitude_Accessor = QuaternionType::create(requestedType);
    if (!attitude_Accessor) {
      throw uci::base::UCIException("Error in enableAttitude(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *attitude_Accessor;
}

uci::type::BCRS_KinematicsType& BCRS_KinematicsType::clearAttitude() noexcept {
  attitude_Accessor.reset();
  return *this;
}

uci::type::CovarianceMatrixType& BCRS_KinematicsType::getCovariance_() const {
  if (covariance_Accessor) {
    return *covariance_Accessor;
  }
  throw uci::base::UCIException("Error in getCovariance(): An attempt was made to get an optional field that was not enabled, call hasCovariance() to determine if it is safe to call getCovariance()");
}

const uci::type::CovarianceMatrixType& BCRS_KinematicsType::getCovariance() const {
  return getCovariance_();
}

uci::type::CovarianceMatrixType& BCRS_KinematicsType::getCovariance() {
  return getCovariance_();
}

uci::type::BCRS_KinematicsType& BCRS_KinematicsType::setCovariance(const uci::type::CovarianceMatrixType& accessor) {
  enableCovariance();
  if (&accessor != covariance_Accessor.get()) {
    covariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool BCRS_KinematicsType::hasCovariance() const noexcept {
  return static_cast<bool>(covariance_Accessor);
}

uci::type::CovarianceMatrixType& BCRS_KinematicsType::enableCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::covarianceMatrixType : type};
  if ((!covariance_Accessor) || (covariance_Accessor->getAccessorType() != requestedType)) {
    covariance_Accessor = CovarianceMatrixType::create(requestedType);
    if (!covariance_Accessor) {
      throw uci::base::UCIException("Error in enableCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *covariance_Accessor;
}

uci::type::BCRS_KinematicsType& BCRS_KinematicsType::clearCovariance() noexcept {
  covariance_Accessor.reset();
  return *this;
}

std::unique_ptr<BCRS_KinematicsType> BCRS_KinematicsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::bCRS_KinematicsType : type};
  return (requestedType == uci::type::accessorType::bCRS_KinematicsType) ? boost::make_unique<BCRS_KinematicsType>() : nullptr;
}

/**  */
namespace BCRS_KinematicsType_Names {

constexpr const char* Extern_Type_Name{"BCRS_KinematicsType"};
constexpr const char* Epoch_Name{"Epoch"};
constexpr const char* Position_Name{"Position"};
constexpr const char* Velocity_Name{"Velocity"};
constexpr const char* Acceleration_Name{"Acceleration"};
constexpr const char* Attitude_Name{"Attitude"};
constexpr const char* Covariance_Name{"Covariance"};

} // namespace BCRS_KinematicsType_Names

void BCRS_KinematicsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::BCRS_KinematicsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = BCRS_KinematicsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + BCRS_KinematicsType_Names::Epoch_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEpoch(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + BCRS_KinematicsType_Names::Position_Name) {
      BCRS_PositionType::deserialize(valueType.second, accessor.getPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BCRS_KinematicsType_Names::Velocity_Name) {
      OrbitalKinematicsVelocityType::deserialize(valueType.second, accessor.getVelocity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BCRS_KinematicsType_Names::Acceleration_Name) {
      OrbitalKinematicsAccelerationType::deserialize(valueType.second, accessor.enableAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BCRS_KinematicsType_Names::Attitude_Name) {
      QuaternionType::deserialize(valueType.second, accessor.enableAttitude(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BCRS_KinematicsType_Names::Covariance_Name) {
      CovarianceMatrixType::deserialize(valueType.second, accessor.enableCovariance(), nodeName, nsPrefix);
    }
  }
}

std::string BCRS_KinematicsType::serialize(const uci::type::BCRS_KinematicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? BCRS_KinematicsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, BCRS_KinematicsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEpoch(), node, BCRS_KinematicsType_Names::Epoch_Name);
  BCRS_PositionType::serialize(accessor.getPosition(), node, BCRS_KinematicsType_Names::Position_Name);
  OrbitalKinematicsVelocityType::serialize(accessor.getVelocity(), node, BCRS_KinematicsType_Names::Velocity_Name);
  if (accessor.hasAcceleration()) {
    OrbitalKinematicsAccelerationType::serialize(accessor.getAcceleration(), node, BCRS_KinematicsType_Names::Acceleration_Name);
  }
  if (accessor.hasAttitude()) {
    QuaternionType::serialize(accessor.getAttitude(), node, BCRS_KinematicsType_Names::Attitude_Name);
  }
  if (accessor.hasCovariance()) {
    CovarianceMatrixType::serialize(accessor.getCovariance(), node, BCRS_KinematicsType_Names::Covariance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::BCRS_KinematicsType& BCRS_KinematicsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::BCRS_KinematicsType>().release());
}

uci::type::BCRS_KinematicsType& BCRS_KinematicsType::create(const uci::type::BCRS_KinematicsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::BCRS_KinematicsType> newAccessor{boost::make_unique<asb_uci::type::BCRS_KinematicsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void BCRS_KinematicsType::destroy(uci::type::BCRS_KinematicsType& accessor) {
  delete dynamic_cast<asb_uci::type::BCRS_KinematicsType*>(&accessor);
}

} // namespace type

} // namespace uci

