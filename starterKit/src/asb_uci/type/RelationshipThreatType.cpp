/** @file RelationshipThreatType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RelationshipThreatType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EnduranceType.h"
#include "../../../include/asb_uci/type/ThreatEnum.h"
#include "../../../include/asb_uci/type/ThreatPostureEnum.h"
#include "../../../include/asb_uci/type/ThreatWeaponEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EnduranceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RelationshipThreatType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ThreatEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ThreatPostureEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ThreatWeaponEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RelationshipThreatType::RelationshipThreatType() = default;

RelationshipThreatType::~RelationshipThreatType() = default;

void RelationshipThreatType::copy(const uci::type::RelationshipThreatType& accessor) {
  copyImpl(accessor, false);
}

void RelationshipThreatType::copyImpl(const uci::type::RelationshipThreatType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RelationshipThreatType&>(accessor);
    if (accessorImpl.posture_Accessor) {
      setPosture(*(accessorImpl.posture_Accessor));
    } else {
      posture_Accessor.reset();
    }
    if (accessorImpl.weaponType_Accessor) {
      setWeaponType(*(accessorImpl.weaponType_Accessor));
    } else {
      weaponType_Accessor.reset();
    }
    if (accessorImpl.weaponSensor_Accessor) {
      setWeaponSensor(*(accessorImpl.weaponSensor_Accessor));
    } else {
      weaponSensor_Accessor.reset();
    }
    if (accessorImpl.endurance_Accessor) {
      setEndurance(*(accessorImpl.endurance_Accessor));
    } else {
      endurance_Accessor.reset();
    }
  }
}

void RelationshipThreatType::reset() noexcept {
  posture_Accessor.reset();
  weaponType_Accessor.reset();
  weaponSensor_Accessor.reset();
  endurance_Accessor.reset();
}

uci::type::ThreatPostureEnum& RelationshipThreatType::getPosture_() const {
  if (posture_Accessor) {
    return *posture_Accessor;
  }
  throw uci::base::UCIException("Error in getPosture(): An attempt was made to get an optional field that was not enabled, call hasPosture() to determine if it is safe to call getPosture()");
}

const uci::type::ThreatPostureEnum& RelationshipThreatType::getPosture() const {
  return getPosture_();
}

uci::type::ThreatPostureEnum& RelationshipThreatType::getPosture() {
  return getPosture_();
}

uci::type::RelationshipThreatType& RelationshipThreatType::setPosture(const uci::type::ThreatPostureEnum& accessor) {
  enablePosture();
  if (&accessor != posture_Accessor.get()) {
    posture_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RelationshipThreatType& RelationshipThreatType::setPosture(const uci::type::ThreatPostureEnum::EnumerationItem value) {
  enablePosture().setValue(value);
  return *this;
}

bool RelationshipThreatType::hasPosture() const noexcept {
  return static_cast<bool>(posture_Accessor);
}

uci::type::ThreatPostureEnum& RelationshipThreatType::enablePosture(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatPostureEnum : type};
  if ((!posture_Accessor) || (posture_Accessor->getAccessorType() != requestedType)) {
    posture_Accessor = ThreatPostureEnum::create(requestedType);
    if (!posture_Accessor) {
      throw uci::base::UCIException("Error in enablePosture(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *posture_Accessor;
}

uci::type::RelationshipThreatType& RelationshipThreatType::clearPosture() noexcept {
  posture_Accessor.reset();
  return *this;
}

uci::type::ThreatEnum& RelationshipThreatType::getWeaponType_() const {
  if (weaponType_Accessor) {
    return *weaponType_Accessor;
  }
  throw uci::base::UCIException("Error in getWeaponType(): An attempt was made to get an optional field that was not enabled, call hasWeaponType() to determine if it is safe to call getWeaponType()");
}

const uci::type::ThreatEnum& RelationshipThreatType::getWeaponType() const {
  return getWeaponType_();
}

uci::type::ThreatEnum& RelationshipThreatType::getWeaponType() {
  return getWeaponType_();
}

uci::type::RelationshipThreatType& RelationshipThreatType::setWeaponType(const uci::type::ThreatEnum& accessor) {
  enableWeaponType();
  if (&accessor != weaponType_Accessor.get()) {
    weaponType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RelationshipThreatType& RelationshipThreatType::setWeaponType(const uci::type::ThreatEnum::EnumerationItem value) {
  enableWeaponType().setValue(value);
  return *this;
}

bool RelationshipThreatType::hasWeaponType() const noexcept {
  return static_cast<bool>(weaponType_Accessor);
}

uci::type::ThreatEnum& RelationshipThreatType::enableWeaponType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatEnum : type};
  if ((!weaponType_Accessor) || (weaponType_Accessor->getAccessorType() != requestedType)) {
    weaponType_Accessor = ThreatEnum::create(requestedType);
    if (!weaponType_Accessor) {
      throw uci::base::UCIException("Error in enableWeaponType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weaponType_Accessor;
}

uci::type::RelationshipThreatType& RelationshipThreatType::clearWeaponType() noexcept {
  weaponType_Accessor.reset();
  return *this;
}

uci::type::ThreatWeaponEnum& RelationshipThreatType::getWeaponSensor_() const {
  if (weaponSensor_Accessor) {
    return *weaponSensor_Accessor;
  }
  throw uci::base::UCIException("Error in getWeaponSensor(): An attempt was made to get an optional field that was not enabled, call hasWeaponSensor() to determine if it is safe to call getWeaponSensor()");
}

const uci::type::ThreatWeaponEnum& RelationshipThreatType::getWeaponSensor() const {
  return getWeaponSensor_();
}

uci::type::ThreatWeaponEnum& RelationshipThreatType::getWeaponSensor() {
  return getWeaponSensor_();
}

uci::type::RelationshipThreatType& RelationshipThreatType::setWeaponSensor(const uci::type::ThreatWeaponEnum& accessor) {
  enableWeaponSensor();
  if (&accessor != weaponSensor_Accessor.get()) {
    weaponSensor_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RelationshipThreatType& RelationshipThreatType::setWeaponSensor(const uci::type::ThreatWeaponEnum::EnumerationItem value) {
  enableWeaponSensor().setValue(value);
  return *this;
}

bool RelationshipThreatType::hasWeaponSensor() const noexcept {
  return static_cast<bool>(weaponSensor_Accessor);
}

uci::type::ThreatWeaponEnum& RelationshipThreatType::enableWeaponSensor(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatWeaponEnum : type};
  if ((!weaponSensor_Accessor) || (weaponSensor_Accessor->getAccessorType() != requestedType)) {
    weaponSensor_Accessor = ThreatWeaponEnum::create(requestedType);
    if (!weaponSensor_Accessor) {
      throw uci::base::UCIException("Error in enableWeaponSensor(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weaponSensor_Accessor;
}

uci::type::RelationshipThreatType& RelationshipThreatType::clearWeaponSensor() noexcept {
  weaponSensor_Accessor.reset();
  return *this;
}

uci::type::EnduranceType& RelationshipThreatType::getEndurance_() const {
  if (endurance_Accessor) {
    return *endurance_Accessor;
  }
  throw uci::base::UCIException("Error in getEndurance(): An attempt was made to get an optional field that was not enabled, call hasEndurance() to determine if it is safe to call getEndurance()");
}

const uci::type::EnduranceType& RelationshipThreatType::getEndurance() const {
  return getEndurance_();
}

uci::type::EnduranceType& RelationshipThreatType::getEndurance() {
  return getEndurance_();
}

uci::type::RelationshipThreatType& RelationshipThreatType::setEndurance(const uci::type::EnduranceType& accessor) {
  enableEndurance();
  if (&accessor != endurance_Accessor.get()) {
    endurance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RelationshipThreatType::hasEndurance() const noexcept {
  return static_cast<bool>(endurance_Accessor);
}

uci::type::EnduranceType& RelationshipThreatType::enableEndurance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::enduranceType : type};
  if ((!endurance_Accessor) || (endurance_Accessor->getAccessorType() != requestedType)) {
    endurance_Accessor = EnduranceType::create(requestedType);
    if (!endurance_Accessor) {
      throw uci::base::UCIException("Error in enableEndurance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *endurance_Accessor;
}

uci::type::RelationshipThreatType& RelationshipThreatType::clearEndurance() noexcept {
  endurance_Accessor.reset();
  return *this;
}

std::unique_ptr<RelationshipThreatType> RelationshipThreatType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relationshipThreatType : type};
  return (requestedType == uci::type::accessorType::relationshipThreatType) ? boost::make_unique<RelationshipThreatType>() : nullptr;
}

/**  */
namespace RelationshipThreatType_Names {

constexpr const char* Extern_Type_Name{"RelationshipThreatType"};
constexpr const char* Posture_Name{"Posture"};
constexpr const char* WeaponType_Name{"WeaponType"};
constexpr const char* WeaponSensor_Name{"WeaponSensor"};
constexpr const char* Endurance_Name{"Endurance"};

} // namespace RelationshipThreatType_Names

void RelationshipThreatType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RelationshipThreatType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RelationshipThreatType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RelationshipThreatType_Names::Posture_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePosture().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RelationshipThreatType_Names::WeaponType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableWeaponType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RelationshipThreatType_Names::WeaponSensor_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableWeaponSensor().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RelationshipThreatType_Names::Endurance_Name) {
      EnduranceType::deserialize(valueType.second, accessor.enableEndurance(), nodeName, nsPrefix);
    }
  }
}

std::string RelationshipThreatType::serialize(const uci::type::RelationshipThreatType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RelationshipThreatType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RelationshipThreatType_Names::Extern_Type_Name);
  }
  if (accessor.hasPosture()) {
    ThreatPostureEnum::serialize(accessor.getPosture(), node, RelationshipThreatType_Names::Posture_Name, false);
  }
  if (accessor.hasWeaponType()) {
    ThreatEnum::serialize(accessor.getWeaponType(), node, RelationshipThreatType_Names::WeaponType_Name, false);
  }
  if (accessor.hasWeaponSensor()) {
    ThreatWeaponEnum::serialize(accessor.getWeaponSensor(), node, RelationshipThreatType_Names::WeaponSensor_Name, false);
  }
  if (accessor.hasEndurance()) {
    EnduranceType::serialize(accessor.getEndurance(), node, RelationshipThreatType_Names::Endurance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RelationshipThreatType& RelationshipThreatType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RelationshipThreatType>().release());
}

uci::type::RelationshipThreatType& RelationshipThreatType::create(const uci::type::RelationshipThreatType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RelationshipThreatType> newAccessor{boost::make_unique<asb_uci::type::RelationshipThreatType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RelationshipThreatType::destroy(uci::type::RelationshipThreatType& accessor) {
  delete dynamic_cast<asb_uci::type::RelationshipThreatType*>(&accessor);
}

} // namespace type

} // namespace uci

