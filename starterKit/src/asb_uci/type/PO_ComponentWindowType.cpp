/** @file PO_ComponentWindowType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentWindowType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PO_WindowID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentWindowType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_WindowID_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentWindowType::PO_ComponentWindowType()
  : pO_WindowID_Accessor{boost::make_unique<PO_WindowID_Type>()},
    colorDepth_Accessor{boost::make_unique<ColorDepth>(0, SIZE_MAX)} {
}

PO_ComponentWindowType::~PO_ComponentWindowType() = default;

void PO_ComponentWindowType::copy(const uci::type::PO_ComponentWindowType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentWindowType::copyImpl(const uci::type::PO_ComponentWindowType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentWindowType&>(accessor);
    setPO_WindowID(*(accessorImpl.pO_WindowID_Accessor));
    setWindowSizeX(accessorImpl.windowSizeX_Accessor);
    setWindowSizeY(accessorImpl.windowSizeY_Accessor);
    setLowerLeftX(accessorImpl.lowerLeftX_Accessor);
    setLowerLeftY(accessorImpl.lowerLeftY_Accessor);
    setColorDepth(*(accessorImpl.colorDepth_Accessor));
  }
}

void PO_ComponentWindowType::reset() noexcept {
  pO_WindowID_Accessor->reset();
  windowSizeX_Accessor = 0;
  windowSizeY_Accessor = 0;
  lowerLeftX_Accessor = 0;
  lowerLeftY_Accessor = 0;
  colorDepth_Accessor->reset();
}

const uci::type::PO_WindowID_Type& PO_ComponentWindowType::getPO_WindowID() const {
  return *pO_WindowID_Accessor;
}

uci::type::PO_WindowID_Type& PO_ComponentWindowType::getPO_WindowID() {
  return *pO_WindowID_Accessor;
}

uci::type::PO_ComponentWindowType& PO_ComponentWindowType::setPO_WindowID(const uci::type::PO_WindowID_Type& accessor) {
  if (&accessor != pO_WindowID_Accessor.get()) {
    pO_WindowID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt PO_ComponentWindowType::getWindowSizeX() const {
  return windowSizeX_Accessor;
}

uci::type::PO_ComponentWindowType& PO_ComponentWindowType::setWindowSizeX(xs::UnsignedInt value) {
  windowSizeX_Accessor = value;
  return *this;
}


xs::UnsignedInt PO_ComponentWindowType::getWindowSizeY() const {
  return windowSizeY_Accessor;
}

uci::type::PO_ComponentWindowType& PO_ComponentWindowType::setWindowSizeY(xs::UnsignedInt value) {
  windowSizeY_Accessor = value;
  return *this;
}


xs::UnsignedInt PO_ComponentWindowType::getLowerLeftX() const {
  return lowerLeftX_Accessor;
}

uci::type::PO_ComponentWindowType& PO_ComponentWindowType::setLowerLeftX(xs::UnsignedInt value) {
  lowerLeftX_Accessor = value;
  return *this;
}


xs::UnsignedInt PO_ComponentWindowType::getLowerLeftY() const {
  return lowerLeftY_Accessor;
}

uci::type::PO_ComponentWindowType& PO_ComponentWindowType::setLowerLeftY(xs::UnsignedInt value) {
  lowerLeftY_Accessor = value;
  return *this;
}


const uci::type::PO_ComponentWindowType::ColorDepth& PO_ComponentWindowType::getColorDepth() const {
  return *colorDepth_Accessor;
}

uci::type::PO_ComponentWindowType::ColorDepth& PO_ComponentWindowType::getColorDepth() {
  return *colorDepth_Accessor;
}

uci::type::PO_ComponentWindowType& PO_ComponentWindowType::setColorDepth(const uci::type::PO_ComponentWindowType::ColorDepth& accessor) {
  if (&accessor != colorDepth_Accessor.get()) {
    colorDepth_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PO_ComponentWindowType> PO_ComponentWindowType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentWindowType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentWindowType) ? boost::make_unique<PO_ComponentWindowType>() : nullptr;
}

/**  */
namespace PO_ComponentWindowType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentWindowType"};
constexpr const char* PO_WindowID_Name{"PO_WindowID"};
constexpr const char* WindowSizeX_Name{"WindowSizeX"};
constexpr const char* WindowSizeY_Name{"WindowSizeY"};
constexpr const char* LowerLeftX_Name{"LowerLeftX"};
constexpr const char* LowerLeftY_Name{"LowerLeftY"};
constexpr const char* ColorDepth_Name{"ColorDepth"};

} // namespace PO_ComponentWindowType_Names

void PO_ComponentWindowType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentWindowType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentWindowType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentWindowType_Names::PO_WindowID_Name) {
      PO_WindowID_Type::deserialize(valueType.second, accessor.getPO_WindowID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentWindowType_Names::WindowSizeX_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWindowSizeX(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentWindowType_Names::WindowSizeY_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWindowSizeY(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentWindowType_Names::LowerLeftX_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLowerLeftX(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentWindowType_Names::LowerLeftY_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLowerLeftY(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentWindowType_Names::ColorDepth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentWindowType::ColorDepth& boundedList = accessor.getColorDepth();
        const uci::type::PO_ComponentWindowType::ColorDepth::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedIntValue(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string PO_ComponentWindowType::serialize(const uci::type::PO_ComponentWindowType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentWindowType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentWindowType_Names::Extern_Type_Name);
  }
  PO_WindowID_Type::serialize(accessor.getPO_WindowID(), node, PO_ComponentWindowType_Names::PO_WindowID_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getWindowSizeX(), node, PO_ComponentWindowType_Names::WindowSizeX_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getWindowSizeY(), node, PO_ComponentWindowType_Names::WindowSizeY_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getLowerLeftX(), node, PO_ComponentWindowType_Names::LowerLeftX_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getLowerLeftY(), node, PO_ComponentWindowType_Names::LowerLeftY_Name);
  {
    const uci::type::PO_ComponentWindowType::ColorDepth& boundedList = accessor.getColorDepth();
    for (uci::type::PO_ComponentWindowType::ColorDepth::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(boundedList.at(i), node, PO_ComponentWindowType_Names::ColorDepth_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentWindowType& PO_ComponentWindowType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentWindowType>().release());
}

uci::type::PO_ComponentWindowType& PO_ComponentWindowType::create(const uci::type::PO_ComponentWindowType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentWindowType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentWindowType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentWindowType::destroy(uci::type::PO_ComponentWindowType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentWindowType*>(&accessor);
}

} // namespace type

} // namespace uci

