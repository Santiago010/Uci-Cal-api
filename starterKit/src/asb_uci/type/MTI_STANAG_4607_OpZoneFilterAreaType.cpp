/** @file MTI_STANAG_4607_OpZoneFilterAreaType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MTI_STANAG_4607_OpZoneFilterAreaType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/MTI_OpZoneFilterAreaType.h"
#include "asb_uci/type/STANAG_4607_MissionType.h"
#include "asb_uci/type/STANAG_4607_PlatformTypeEnum.h"
#include "asb_uci/type/STANAG_4607_TargetClassificationEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/MTI_STANAG_4607_OpZoneFilterAreaType.h"
#include "uci/type/STANAG_4607_MissionType.h"
#include "uci/type/STANAG_4607_PlatformTypeEnum.h"
#include "uci/type/STANAG_4607_TargetClassificationEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MTI_STANAG_4607_OpZoneFilterAreaType::MTI_STANAG_4607_OpZoneFilterAreaType()
  : targetClassification_Accessor{boost::make_unique<TargetClassification>(0, 32)},
    platformType_Accessor{boost::make_unique<PlatformType>(0, 41)} {
}

MTI_STANAG_4607_OpZoneFilterAreaType::~MTI_STANAG_4607_OpZoneFilterAreaType() = default;

void MTI_STANAG_4607_OpZoneFilterAreaType::copy(const uci::type::MTI_STANAG_4607_OpZoneFilterAreaType& accessor) {
  copyImpl(accessor, false);
}

void MTI_STANAG_4607_OpZoneFilterAreaType::copyImpl(const uci::type::MTI_STANAG_4607_OpZoneFilterAreaType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    MTI_OpZoneFilterAreaType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const MTI_STANAG_4607_OpZoneFilterAreaType&>(accessor);
    setTargetClassification(*(accessorImpl.targetClassification_Accessor));
    if (accessorImpl.sTANAG_4607_Mission_Accessor) {
      setSTANAG_4607_Mission(*(accessorImpl.sTANAG_4607_Mission_Accessor));
    } else {
      sTANAG_4607_Mission_Accessor.reset();
    }
    setPlatformType(*(accessorImpl.platformType_Accessor));
  }
}

void MTI_STANAG_4607_OpZoneFilterAreaType::reset() noexcept {
  MTI_OpZoneFilterAreaType::reset();
  targetClassification_Accessor->reset();
  sTANAG_4607_Mission_Accessor.reset();
  platformType_Accessor->reset();
}

const uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::TargetClassification& MTI_STANAG_4607_OpZoneFilterAreaType::getTargetClassification() const {
  return *targetClassification_Accessor;
}

uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::TargetClassification& MTI_STANAG_4607_OpZoneFilterAreaType::getTargetClassification() {
  return *targetClassification_Accessor;
}

uci::type::MTI_STANAG_4607_OpZoneFilterAreaType& MTI_STANAG_4607_OpZoneFilterAreaType::setTargetClassification(const uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::TargetClassification& accessor) {
  if (&accessor != targetClassification_Accessor.get()) {
    targetClassification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::STANAG_4607_MissionType& MTI_STANAG_4607_OpZoneFilterAreaType::getSTANAG_4607_Mission_() const {
  if (sTANAG_4607_Mission_Accessor) {
    return *sTANAG_4607_Mission_Accessor;
  }
  throw uci::base::UCIException("Error in getSTANAG_4607_Mission(): An attempt was made to get an optional field that was not enabled, call hasSTANAG_4607_Mission() to determine if it is safe to call getSTANAG_4607_Mission()");
}

const uci::type::STANAG_4607_MissionType& MTI_STANAG_4607_OpZoneFilterAreaType::getSTANAG_4607_Mission() const {
  return getSTANAG_4607_Mission_();
}

uci::type::STANAG_4607_MissionType& MTI_STANAG_4607_OpZoneFilterAreaType::getSTANAG_4607_Mission() {
  return getSTANAG_4607_Mission_();
}

uci::type::MTI_STANAG_4607_OpZoneFilterAreaType& MTI_STANAG_4607_OpZoneFilterAreaType::setSTANAG_4607_Mission(const uci::type::STANAG_4607_MissionType& accessor) {
  enableSTANAG_4607_Mission();
  if (&accessor != sTANAG_4607_Mission_Accessor.get()) {
    sTANAG_4607_Mission_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MTI_STANAG_4607_OpZoneFilterAreaType::hasSTANAG_4607_Mission() const noexcept {
  return static_cast<bool>(sTANAG_4607_Mission_Accessor);
}

uci::type::STANAG_4607_MissionType& MTI_STANAG_4607_OpZoneFilterAreaType::enableSTANAG_4607_Mission(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sTANAG_4607_MissionType : type};
  if ((!sTANAG_4607_Mission_Accessor) || (sTANAG_4607_Mission_Accessor->getAccessorType() != requestedType)) {
    sTANAG_4607_Mission_Accessor = STANAG_4607_MissionType::create(requestedType);
    if (!sTANAG_4607_Mission_Accessor) {
      throw uci::base::UCIException("Error in enableSTANAG_4607_Mission(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sTANAG_4607_Mission_Accessor;
}

uci::type::MTI_STANAG_4607_OpZoneFilterAreaType& MTI_STANAG_4607_OpZoneFilterAreaType::clearSTANAG_4607_Mission() noexcept {
  sTANAG_4607_Mission_Accessor.reset();
  return *this;
}

const uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::PlatformType& MTI_STANAG_4607_OpZoneFilterAreaType::getPlatformType() const {
  return *platformType_Accessor;
}

uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::PlatformType& MTI_STANAG_4607_OpZoneFilterAreaType::getPlatformType() {
  return *platformType_Accessor;
}

uci::type::MTI_STANAG_4607_OpZoneFilterAreaType& MTI_STANAG_4607_OpZoneFilterAreaType::setPlatformType(const uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::PlatformType& accessor) {
  if (&accessor != platformType_Accessor.get()) {
    platformType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<MTI_STANAG_4607_OpZoneFilterAreaType> MTI_STANAG_4607_OpZoneFilterAreaType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mTI_STANAG_4607_OpZoneFilterAreaType : type};
  return (requestedType == uci::type::accessorType::mTI_STANAG_4607_OpZoneFilterAreaType) ? boost::make_unique<MTI_STANAG_4607_OpZoneFilterAreaType>() : nullptr;
}

/**  */
namespace MTI_STANAG_4607_OpZoneFilterAreaType_Names {

constexpr const char* Extern_Type_Name{"MTI_STANAG_4607_OpZoneFilterAreaType"};
constexpr const char* TargetClassification_Name{"TargetClassification"};
constexpr const char* STANAG_4607_Mission_Name{"STANAG_4607_Mission"};
constexpr const char* PlatformType_Name{"PlatformType"};

} // namespace MTI_STANAG_4607_OpZoneFilterAreaType_Names

void MTI_STANAG_4607_OpZoneFilterAreaType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MTI_STANAG_4607_OpZoneFilterAreaType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MTI_STANAG_4607_OpZoneFilterAreaType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MTI_STANAG_4607_OpZoneFilterAreaType_Names::TargetClassification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::TargetClassification& boundedList = accessor.getTargetClassification();
        const uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::TargetClassification::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MTI_STANAG_4607_OpZoneFilterAreaType_Names::STANAG_4607_Mission_Name) {
      STANAG_4607_MissionType::deserialize(valueType.second, accessor.enableSTANAG_4607_Mission(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MTI_STANAG_4607_OpZoneFilterAreaType_Names::PlatformType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::PlatformType& boundedList = accessor.getPlatformType();
        const uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::PlatformType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    }
  }
  MTI_OpZoneFilterAreaType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string MTI_STANAG_4607_OpZoneFilterAreaType::serialize(const uci::type::MTI_STANAG_4607_OpZoneFilterAreaType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MTI_STANAG_4607_OpZoneFilterAreaType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MTI_STANAG_4607_OpZoneFilterAreaType_Names::Extern_Type_Name);
  }
  MTI_OpZoneFilterAreaType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::TargetClassification& boundedList = accessor.getTargetClassification();
    for (uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::TargetClassification::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      STANAG_4607_TargetClassificationEnum::serialize(boundedList.at(i), node, MTI_STANAG_4607_OpZoneFilterAreaType_Names::TargetClassification_Name, false);
    }
  }
  if (accessor.hasSTANAG_4607_Mission()) {
    STANAG_4607_MissionType::serialize(accessor.getSTANAG_4607_Mission(), node, MTI_STANAG_4607_OpZoneFilterAreaType_Names::STANAG_4607_Mission_Name);
  }
  {
    const uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::PlatformType& boundedList = accessor.getPlatformType();
    for (uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::PlatformType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      STANAG_4607_PlatformTypeEnum::serialize(boundedList.at(i), node, MTI_STANAG_4607_OpZoneFilterAreaType_Names::PlatformType_Name, false);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MTI_STANAG_4607_OpZoneFilterAreaType& MTI_STANAG_4607_OpZoneFilterAreaType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MTI_STANAG_4607_OpZoneFilterAreaType>().release());
}

uci::type::MTI_STANAG_4607_OpZoneFilterAreaType& MTI_STANAG_4607_OpZoneFilterAreaType::create(const uci::type::MTI_STANAG_4607_OpZoneFilterAreaType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MTI_STANAG_4607_OpZoneFilterAreaType> newAccessor{boost::make_unique<asb_uci::type::MTI_STANAG_4607_OpZoneFilterAreaType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MTI_STANAG_4607_OpZoneFilterAreaType::destroy(uci::type::MTI_STANAG_4607_OpZoneFilterAreaType& accessor) {
  delete dynamic_cast<asb_uci::type::MTI_STANAG_4607_OpZoneFilterAreaType*>(&accessor);
}

} // namespace type

} // namespace uci

