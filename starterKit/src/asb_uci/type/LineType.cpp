/** @file LineType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/LineType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AltitudeReferenceEnum.h"
#include "../../../include/asb_uci/type/LinePointChoiceType.h"
#include "../../../include/asb_uci/type/LineProjectionEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AltitudeReferenceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AltitudeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LinePointChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LineProjectionEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LineType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LineType::LineType()
  : pointChoice_Accessor{boost::make_unique<LinePointChoiceType>()},
    lineProjection_Accessor{boost::make_unique<LineProjectionEnum>()} {
}

LineType::~LineType() = default;

void LineType::copy(const uci::type::LineType& accessor) {
  copyImpl(accessor, false);
}

void LineType::copyImpl(const uci::type::LineType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::lineType)) {
      const auto& accessorImpl = dynamic_cast<const LineType&>(accessor);
      setPointChoice(*(accessorImpl.pointChoice_Accessor));
      setLineProjection(*(accessorImpl.lineProjection_Accessor));
      if (accessorImpl.hasLeftWidth()) {
        setLeftWidth(accessorImpl.getLeftWidth());
      } else {
        clearLeftWidth();
      }
      if (accessorImpl.hasRightWidth()) {
        setRightWidth(accessorImpl.getRightWidth());
      } else {
        clearRightWidth();
      }
      if (accessorImpl.hasMinAltitude()) {
        setMinAltitude(accessorImpl.getMinAltitude());
      } else {
        clearMinAltitude();
      }
      if (accessorImpl.hasMaxAltitude()) {
        setMaxAltitude(accessorImpl.getMaxAltitude());
      } else {
        clearMaxAltitude();
      }
      if (accessorImpl.altitudeReference_Accessor) {
        setAltitudeReference(*(accessorImpl.altitudeReference_Accessor));
      } else {
        altitudeReference_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void LineType::reset() noexcept {
  pointChoice_Accessor->reset();
  lineProjection_Accessor->reset();
  clearLeftWidth();
  clearRightWidth();
  clearMinAltitude();
  clearMaxAltitude();
  altitudeReference_Accessor.reset();
}

const uci::type::LinePointChoiceType& LineType::getPointChoice() const {
  return *pointChoice_Accessor;
}

uci::type::LinePointChoiceType& LineType::getPointChoice() {
  return *pointChoice_Accessor;
}

uci::type::LineType& LineType::setPointChoice(const uci::type::LinePointChoiceType& accessor) {
  if (&accessor != pointChoice_Accessor.get()) {
    pointChoice_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::LineProjectionEnum& LineType::getLineProjection() const {
  return *lineProjection_Accessor;
}

uci::type::LineProjectionEnum& LineType::getLineProjection() {
  return *lineProjection_Accessor;
}

uci::type::LineType& LineType::setLineProjection(const uci::type::LineProjectionEnum& accessor) {
  if (&accessor != lineProjection_Accessor.get()) {
    lineProjection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::LineType& LineType::setLineProjection(uci::type::LineProjectionEnum::EnumerationItem value) {
  lineProjection_Accessor->setValue(value);
  return *this;
}


uci::type::DistanceTypeValue LineType::getLeftWidth() const {
  if (leftWidth_Accessor) {
    return *leftWidth_Accessor;
  }
  throw uci::base::UCIException("Error in getLeftWidth(): An attempt was made to get an optional field that was not enabled, call hasLeftWidth() to determine if it is safe to call getLeftWidth()");
}

uci::type::LineType& LineType::setLeftWidth(uci::type::DistanceTypeValue value) {
  leftWidth_Accessor = value;
  return *this;
}

bool LineType::hasLeftWidth() const noexcept {
  return leftWidth_Accessor.has_value();
}

uci::type::LineType& LineType::clearLeftWidth() noexcept {
  leftWidth_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue LineType::getRightWidth() const {
  if (rightWidth_Accessor) {
    return *rightWidth_Accessor;
  }
  throw uci::base::UCIException("Error in getRightWidth(): An attempt was made to get an optional field that was not enabled, call hasRightWidth() to determine if it is safe to call getRightWidth()");
}

uci::type::LineType& LineType::setRightWidth(uci::type::DistanceTypeValue value) {
  rightWidth_Accessor = value;
  return *this;
}

bool LineType::hasRightWidth() const noexcept {
  return rightWidth_Accessor.has_value();
}

uci::type::LineType& LineType::clearRightWidth() noexcept {
  rightWidth_Accessor.reset();
  return *this;
}

uci::type::AltitudeTypeValue LineType::getMinAltitude() const {
  if (minAltitude_Accessor) {
    return *minAltitude_Accessor;
  }
  throw uci::base::UCIException("Error in getMinAltitude(): An attempt was made to get an optional field that was not enabled, call hasMinAltitude() to determine if it is safe to call getMinAltitude()");
}

uci::type::LineType& LineType::setMinAltitude(uci::type::AltitudeTypeValue value) {
  minAltitude_Accessor = value;
  return *this;
}

bool LineType::hasMinAltitude() const noexcept {
  return minAltitude_Accessor.has_value();
}

uci::type::LineType& LineType::clearMinAltitude() noexcept {
  minAltitude_Accessor.reset();
  return *this;
}

uci::type::AltitudeTypeValue LineType::getMaxAltitude() const {
  if (maxAltitude_Accessor) {
    return *maxAltitude_Accessor;
  }
  throw uci::base::UCIException("Error in getMaxAltitude(): An attempt was made to get an optional field that was not enabled, call hasMaxAltitude() to determine if it is safe to call getMaxAltitude()");
}

uci::type::LineType& LineType::setMaxAltitude(uci::type::AltitudeTypeValue value) {
  maxAltitude_Accessor = value;
  return *this;
}

bool LineType::hasMaxAltitude() const noexcept {
  return maxAltitude_Accessor.has_value();
}

uci::type::LineType& LineType::clearMaxAltitude() noexcept {
  maxAltitude_Accessor.reset();
  return *this;
}

uci::type::AltitudeReferenceEnum& LineType::getAltitudeReference_() const {
  if (altitudeReference_Accessor) {
    return *altitudeReference_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeReference(): An attempt was made to get an optional field that was not enabled, call hasAltitudeReference() to determine if it is safe to call getAltitudeReference()");
}

const uci::type::AltitudeReferenceEnum& LineType::getAltitudeReference() const {
  return getAltitudeReference_();
}

uci::type::AltitudeReferenceEnum& LineType::getAltitudeReference() {
  return getAltitudeReference_();
}

uci::type::LineType& LineType::setAltitudeReference(const uci::type::AltitudeReferenceEnum& accessor) {
  enableAltitudeReference();
  if (&accessor != altitudeReference_Accessor.get()) {
    altitudeReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::LineType& LineType::setAltitudeReference(const uci::type::AltitudeReferenceEnum::EnumerationItem value) {
  enableAltitudeReference().setValue(value);
  return *this;
}

bool LineType::hasAltitudeReference() const noexcept {
  return static_cast<bool>(altitudeReference_Accessor);
}

uci::type::AltitudeReferenceEnum& LineType::enableAltitudeReference(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::altitudeReferenceEnum : type};
  if ((!altitudeReference_Accessor) || (altitudeReference_Accessor->getAccessorType() != requestedType)) {
    altitudeReference_Accessor = AltitudeReferenceEnum::create(requestedType);
    if (!altitudeReference_Accessor) {
      throw uci::base::UCIException("Error in enableAltitudeReference(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *altitudeReference_Accessor;
}

uci::type::LineType& LineType::clearAltitudeReference() noexcept {
  altitudeReference_Accessor.reset();
  return *this;
}

std::unique_ptr<LineType> LineType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lineType : type};
  return std::unique_ptr<LineType>(dynamic_cast<LineType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace LineType_Names {

constexpr const char* Extern_Type_Name{"LineType"};
constexpr const char* PointChoice_Name{"PointChoice"};
constexpr const char* LineProjection_Name{"LineProjection"};
constexpr const char* LeftWidth_Name{"LeftWidth"};
constexpr const char* RightWidth_Name{"RightWidth"};
constexpr const char* MinAltitude_Name{"MinAltitude"};
constexpr const char* MaxAltitude_Name{"MaxAltitude"};
constexpr const char* AltitudeReference_Name{"AltitudeReference"};

} // namespace LineType_Names

void LineType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LineType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LineType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LineType_Names::PointChoice_Name) {
      LinePointChoiceType::deserialize(valueType.second, accessor.getPointChoice(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LineType_Names::LineProjection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getLineProjection().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + LineType_Names::LeftWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLeftWidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LineType_Names::RightWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRightWidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LineType_Names::MinAltitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinAltitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LineType_Names::MaxAltitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxAltitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LineType_Names::AltitudeReference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAltitudeReference().setValueFromName(*value);
      }
    }
  }
}

std::string LineType::serialize(const uci::type::LineType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LineType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::lineType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, LineType_Names::Extern_Type_Name);
    }
    LinePointChoiceType::serialize(accessor.getPointChoice(), node, LineType_Names::PointChoice_Name);
    LineProjectionEnum::serialize(accessor.getLineProjection(), node, LineType_Names::LineProjection_Name, false);
    if (accessor.hasLeftWidth()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLeftWidth(), node, LineType_Names::LeftWidth_Name);
    }
    if (accessor.hasRightWidth()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRightWidth(), node, LineType_Names::RightWidth_Name);
    }
    if (accessor.hasMinAltitude()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinAltitude(), node, LineType_Names::MinAltitude_Name);
    }
    if (accessor.hasMaxAltitude()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaxAltitude(), node, LineType_Names::MaxAltitude_Name);
    }
    if (accessor.hasAltitudeReference()) {
      AltitudeReferenceEnum::serialize(accessor.getAltitudeReference(), node, LineType_Names::AltitudeReference_Name, false);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LineType& LineType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LineType>().release());
}

uci::type::LineType& LineType::create(const uci::type::LineType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LineType> newAccessor{boost::make_unique<asb_uci::type::LineType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LineType::destroy(uci::type::LineType& accessor) {
  delete dynamic_cast<asb_uci::type::LineType*>(&accessor);
}

} // namespace type

} // namespace uci

