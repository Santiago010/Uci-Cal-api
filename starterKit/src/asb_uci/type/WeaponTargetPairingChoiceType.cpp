/** @file WeaponTargetPairingChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/WeaponTargetPairingChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DMPI_DesignationID_Type.h"
#include "asb_uci/type/DMPI_ID_Type.h"
#include "asb_uci/type/DMPI_PatternID_Type.h"
#include "asb_uci/type/WeaponeeringLocationType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DMPI_DesignationID_Type.h"
#include "uci/type/DMPI_ID_Type.h"
#include "uci/type/DMPI_PatternID_Type.h"
#include "uci/type/WeaponTargetPairingChoiceType.h"
#include "uci/type/WeaponeeringLocationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WeaponTargetPairingChoiceType::WeaponTargetPairingChoiceType() = default;

WeaponTargetPairingChoiceType::~WeaponTargetPairingChoiceType() = default;

void WeaponTargetPairingChoiceType::copy(const uci::type::WeaponTargetPairingChoiceType& accessor) {
  copyImpl(accessor, false);
}

void WeaponTargetPairingChoiceType::copyImpl(const uci::type::WeaponTargetPairingChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const WeaponTargetPairingChoiceType&>(accessor);
    if (accessorImpl.dMPI_DesignationID_Accessor) {
      setDMPI_DesignationID(*(accessorImpl.dMPI_DesignationID_Accessor));
    } else {
      dMPI_DesignationID_Accessor.reset();
    }
    if (accessorImpl.dMPI_PatternID_Accessor) {
      setDMPI_PatternID(*(accessorImpl.dMPI_PatternID_Accessor));
    } else {
      dMPI_PatternID_Accessor.reset();
    }
    if (accessorImpl.dMPI_ID_Accessor) {
      setDMPI_ID(*(accessorImpl.dMPI_ID_Accessor));
    } else {
      dMPI_ID_Accessor.reset();
    }
    if (accessorImpl.weaponeering_Accessor) {
      setWeaponeering(*(accessorImpl.weaponeering_Accessor));
    } else {
      weaponeering_Accessor.reset();
    }
  }
}

void WeaponTargetPairingChoiceType::reset() noexcept {
  dMPI_DesignationID_Accessor.reset();
  dMPI_PatternID_Accessor.reset();
  dMPI_ID_Accessor.reset();
  weaponeering_Accessor.reset();
}

uci::type::WeaponTargetPairingChoiceType::WeaponTargetPairingChoiceTypeChoice WeaponTargetPairingChoiceType::getWeaponTargetPairingChoiceTypeChoiceOrdinal() const noexcept {
  if (dMPI_DesignationID_Accessor) {
    return WEAPONTARGETPAIRINGCHOICETYPE_CHOICE_DMPI_DESIGNATIONID;
  }
  if (dMPI_PatternID_Accessor) {
    return WEAPONTARGETPAIRINGCHOICETYPE_CHOICE_DMPI_PATTERNID;
  }
  if (dMPI_ID_Accessor) {
    return WEAPONTARGETPAIRINGCHOICETYPE_CHOICE_DMPI_ID;
  }
  if (weaponeering_Accessor) {
    return WEAPONTARGETPAIRINGCHOICETYPE_CHOICE_WEAPONEERING;
  }
  return WEAPONTARGETPAIRINGCHOICETYPE_CHOICE_NONE;
}

uci::type::WeaponTargetPairingChoiceType& WeaponTargetPairingChoiceType::setWeaponTargetPairingChoiceTypeChoiceOrdinal(uci::type::WeaponTargetPairingChoiceType::WeaponTargetPairingChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case WEAPONTARGETPAIRINGCHOICETYPE_CHOICE_DMPI_DESIGNATIONID:
      chooseDMPI_DesignationID("setWeaponTargetPairingChoiceTypeChoiceOrdinal", type);
      break;
    case WEAPONTARGETPAIRINGCHOICETYPE_CHOICE_DMPI_PATTERNID:
      chooseDMPI_PatternID("setWeaponTargetPairingChoiceTypeChoiceOrdinal", type);
      break;
    case WEAPONTARGETPAIRINGCHOICETYPE_CHOICE_DMPI_ID:
      chooseDMPI_ID();
      break;
    case WEAPONTARGETPAIRINGCHOICETYPE_CHOICE_WEAPONEERING:
      chooseWeaponeering();
      break;
    default:
      throw uci::base::UCIException("Error in setWeaponTargetPairingChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::DMPI_DesignationID_Type& WeaponTargetPairingChoiceType::getDMPI_DesignationID_() const {
  if (dMPI_DesignationID_Accessor) {
    return *dMPI_DesignationID_Accessor;
  }
  throw uci::base::UCIException("Error in getDMPI_DesignationID(): Unable to get DMPI_DesignationID, field not selected");
}

const uci::type::DMPI_DesignationID_Type& WeaponTargetPairingChoiceType::getDMPI_DesignationID() const {
  return getDMPI_DesignationID_();
}

uci::type::DMPI_DesignationID_Type& WeaponTargetPairingChoiceType::getDMPI_DesignationID() {
  return getDMPI_DesignationID_();
}

uci::type::WeaponTargetPairingChoiceType& WeaponTargetPairingChoiceType::setDMPI_DesignationID(const uci::type::DMPI_DesignationID_Type& accessor) {
  chooseDMPI_DesignationID();
  if (&accessor != dMPI_DesignationID_Accessor.get()) {
    dMPI_DesignationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeaponTargetPairingChoiceType::isDMPI_DesignationID() const noexcept {
  return static_cast<bool>(dMPI_DesignationID_Accessor);
}

uci::type::DMPI_DesignationID_Type& WeaponTargetPairingChoiceType::chooseDMPI_DesignationID(const std::string& method, uci::base::accessorType::AccessorType type) {
  dMPI_PatternID_Accessor.reset();
  dMPI_ID_Accessor.reset();
  weaponeering_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_DesignationID_Type : type};
  if ((!dMPI_DesignationID_Accessor) || (dMPI_DesignationID_Accessor->getAccessorType() != requestedType)) {
    dMPI_DesignationID_Accessor = DMPI_DesignationID_Type::create(type);
    if (!dMPI_DesignationID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dMPI_DesignationID_Accessor;
}

uci::type::DMPI_DesignationID_Type& WeaponTargetPairingChoiceType::chooseDMPI_DesignationID(uci::base::accessorType::AccessorType type) {
  return chooseDMPI_DesignationID("chooseDMPI_DesignationID", type);
}

uci::type::DMPI_PatternID_Type& WeaponTargetPairingChoiceType::getDMPI_PatternID_() const {
  if (dMPI_PatternID_Accessor) {
    return *dMPI_PatternID_Accessor;
  }
  throw uci::base::UCIException("Error in getDMPI_PatternID(): Unable to get DMPI_PatternID, field not selected");
}

const uci::type::DMPI_PatternID_Type& WeaponTargetPairingChoiceType::getDMPI_PatternID() const {
  return getDMPI_PatternID_();
}

uci::type::DMPI_PatternID_Type& WeaponTargetPairingChoiceType::getDMPI_PatternID() {
  return getDMPI_PatternID_();
}

uci::type::WeaponTargetPairingChoiceType& WeaponTargetPairingChoiceType::setDMPI_PatternID(const uci::type::DMPI_PatternID_Type& accessor) {
  chooseDMPI_PatternID();
  if (&accessor != dMPI_PatternID_Accessor.get()) {
    dMPI_PatternID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeaponTargetPairingChoiceType::isDMPI_PatternID() const noexcept {
  return static_cast<bool>(dMPI_PatternID_Accessor);
}

uci::type::DMPI_PatternID_Type& WeaponTargetPairingChoiceType::chooseDMPI_PatternID(const std::string& method, uci::base::accessorType::AccessorType type) {
  dMPI_DesignationID_Accessor.reset();
  dMPI_ID_Accessor.reset();
  weaponeering_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_PatternID_Type : type};
  if ((!dMPI_PatternID_Accessor) || (dMPI_PatternID_Accessor->getAccessorType() != requestedType)) {
    dMPI_PatternID_Accessor = DMPI_PatternID_Type::create(type);
    if (!dMPI_PatternID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dMPI_PatternID_Accessor;
}

uci::type::DMPI_PatternID_Type& WeaponTargetPairingChoiceType::chooseDMPI_PatternID(uci::base::accessorType::AccessorType type) {
  return chooseDMPI_PatternID("chooseDMPI_PatternID", type);
}

uci::type::WeaponTargetPairingChoiceType::DMPI_ID& WeaponTargetPairingChoiceType::getDMPI_ID_() const {
  if (dMPI_ID_Accessor) {
    return *dMPI_ID_Accessor;
  }
  throw uci::base::UCIException("Error in getDMPI_ID(): Unable to get DMPI_ID, field not selected");
}

const uci::type::WeaponTargetPairingChoiceType::DMPI_ID& WeaponTargetPairingChoiceType::getDMPI_ID() const {
  return getDMPI_ID_();
}

uci::type::WeaponTargetPairingChoiceType::DMPI_ID& WeaponTargetPairingChoiceType::getDMPI_ID() {
  return getDMPI_ID_();
}

uci::type::WeaponTargetPairingChoiceType& WeaponTargetPairingChoiceType::setDMPI_ID(const uci::type::WeaponTargetPairingChoiceType::DMPI_ID& accessor) {
  chooseDMPI_ID();
  if (&accessor != dMPI_ID_Accessor.get()) {
    dMPI_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeaponTargetPairingChoiceType::isDMPI_ID() const noexcept {
  return static_cast<bool>(dMPI_ID_Accessor);
}

uci::type::WeaponTargetPairingChoiceType::DMPI_ID& WeaponTargetPairingChoiceType::chooseDMPI_ID() {
  dMPI_DesignationID_Accessor.reset();
  dMPI_PatternID_Accessor.reset();
  weaponeering_Accessor.reset();
  if (!dMPI_ID_Accessor) {
    dMPI_ID_Accessor = boost::make_unique<DMPI_ID>(1, SIZE_MAX);
  }
  return *dMPI_ID_Accessor;
}

uci::type::WeaponTargetPairingChoiceType::Weaponeering& WeaponTargetPairingChoiceType::getWeaponeering_() const {
  if (weaponeering_Accessor) {
    return *weaponeering_Accessor;
  }
  throw uci::base::UCIException("Error in getWeaponeering(): Unable to get Weaponeering, field not selected");
}

const uci::type::WeaponTargetPairingChoiceType::Weaponeering& WeaponTargetPairingChoiceType::getWeaponeering() const {
  return getWeaponeering_();
}

uci::type::WeaponTargetPairingChoiceType::Weaponeering& WeaponTargetPairingChoiceType::getWeaponeering() {
  return getWeaponeering_();
}

uci::type::WeaponTargetPairingChoiceType& WeaponTargetPairingChoiceType::setWeaponeering(const uci::type::WeaponTargetPairingChoiceType::Weaponeering& accessor) {
  chooseWeaponeering();
  if (&accessor != weaponeering_Accessor.get()) {
    weaponeering_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool WeaponTargetPairingChoiceType::isWeaponeering() const noexcept {
  return static_cast<bool>(weaponeering_Accessor);
}

uci::type::WeaponTargetPairingChoiceType::Weaponeering& WeaponTargetPairingChoiceType::chooseWeaponeering() {
  dMPI_DesignationID_Accessor.reset();
  dMPI_PatternID_Accessor.reset();
  dMPI_ID_Accessor.reset();
  if (!weaponeering_Accessor) {
    weaponeering_Accessor = boost::make_unique<Weaponeering>(1, SIZE_MAX);
  }
  return *weaponeering_Accessor;
}

std::unique_ptr<WeaponTargetPairingChoiceType> WeaponTargetPairingChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weaponTargetPairingChoiceType : type};
  return (requestedType == uci::type::accessorType::weaponTargetPairingChoiceType) ? boost::make_unique<WeaponTargetPairingChoiceType>() : nullptr;
}

/**  */
namespace WeaponTargetPairingChoiceType_Names {

constexpr const char* Extern_Type_Name{"WeaponTargetPairingChoiceType"};
constexpr const char* DMPI_DesignationID_Name{"DMPI_DesignationID"};
constexpr const char* DMPI_PatternID_Name{"DMPI_PatternID"};
constexpr const char* DMPI_ID_Name{"DMPI_ID"};
constexpr const char* Weaponeering_Name{"Weaponeering"};

} // namespace WeaponTargetPairingChoiceType_Names

void WeaponTargetPairingChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeaponTargetPairingChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeaponTargetPairingChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WeaponTargetPairingChoiceType_Names::DMPI_DesignationID_Name) {
      DMPI_DesignationID_Type::deserialize(valueType.second, accessor.chooseDMPI_DesignationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeaponTargetPairingChoiceType_Names::DMPI_PatternID_Name) {
      DMPI_PatternID_Type::deserialize(valueType.second, accessor.chooseDMPI_PatternID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeaponTargetPairingChoiceType_Names::DMPI_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WeaponTargetPairingChoiceType::DMPI_ID& boundedList = accessor.chooseDMPI_ID();
        const uci::type::WeaponTargetPairingChoiceType::DMPI_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DMPI_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + WeaponTargetPairingChoiceType_Names::Weaponeering_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WeaponTargetPairingChoiceType::Weaponeering& boundedList = accessor.chooseWeaponeering();
        const uci::type::WeaponTargetPairingChoiceType::Weaponeering::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::WeaponeeringLocationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string WeaponTargetPairingChoiceType::serialize(const uci::type::WeaponTargetPairingChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WeaponTargetPairingChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WeaponTargetPairingChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isDMPI_DesignationID()) {
    DMPI_DesignationID_Type::serialize(accessor.getDMPI_DesignationID(), node, WeaponTargetPairingChoiceType_Names::DMPI_DesignationID_Name);
  } else if (accessor.isDMPI_PatternID()) {
    DMPI_PatternID_Type::serialize(accessor.getDMPI_PatternID(), node, WeaponTargetPairingChoiceType_Names::DMPI_PatternID_Name);
  } else if (accessor.isDMPI_ID()) {
    {
      const uci::type::WeaponTargetPairingChoiceType::DMPI_ID& boundedList = accessor.getDMPI_ID();
      for (uci::type::WeaponTargetPairingChoiceType::DMPI_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::DMPI_ID_Type::serialize(boundedList.at(i), node, WeaponTargetPairingChoiceType_Names::DMPI_ID_Name);
      }
    }
  } else if (accessor.isWeaponeering()) {
    {
      const uci::type::WeaponTargetPairingChoiceType::Weaponeering& boundedList = accessor.getWeaponeering();
      for (uci::type::WeaponTargetPairingChoiceType::Weaponeering::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::WeaponeeringLocationType::serialize(boundedList.at(i), node, WeaponTargetPairingChoiceType_Names::Weaponeering_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WeaponTargetPairingChoiceType& WeaponTargetPairingChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WeaponTargetPairingChoiceType>().release());
}

uci::type::WeaponTargetPairingChoiceType& WeaponTargetPairingChoiceType::create(const uci::type::WeaponTargetPairingChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WeaponTargetPairingChoiceType> newAccessor{boost::make_unique<asb_uci::type::WeaponTargetPairingChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WeaponTargetPairingChoiceType::destroy(uci::type::WeaponTargetPairingChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::WeaponTargetPairingChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

