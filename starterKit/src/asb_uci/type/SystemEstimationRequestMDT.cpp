/** @file SystemEstimationRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SystemEstimationRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EstimationMessageEnum.h"
#include "asb_uci/type/RepeatEnum.h"
#include "asb_uci/type/RequestBaseType.h"
#include "asb_uci/type/SystemEstimationStartType.h"
#include "asb_uci/type/SystemEstimationStopType.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DurationType.h"
#include "uci/type/EstimationMessageEnum.h"
#include "uci/type/RepeatEnum.h"
#include "uci/type/SystemEstimationRequestMDT.h"
#include "uci/type/SystemEstimationStartType.h"
#include "uci/type/SystemEstimationStopType.h"
#include "uci/type/SystemID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SystemEstimationRequestMDT::SystemEstimationRequestMDT()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()},
    requestType_Accessor{boost::make_unique<RequestType>(1, 16)},
    requestFrequencyType_Accessor{boost::make_unique<RepeatEnum>()} {
}

SystemEstimationRequestMDT::~SystemEstimationRequestMDT() = default;

void SystemEstimationRequestMDT::copy(const uci::type::SystemEstimationRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void SystemEstimationRequestMDT::copyImpl(const uci::type::SystemEstimationRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const SystemEstimationRequestMDT&>(accessor);
    setSystemID(*(accessorImpl.systemID_Accessor));
    setRequestType(*(accessorImpl.requestType_Accessor));
    setRequestFrequencyType(*(accessorImpl.requestFrequencyType_Accessor));
    setResultsInNativeMessage(accessorImpl.resultsInNativeMessage_Accessor);
    if (accessorImpl.hasTimeStep()) {
      setTimeStep(accessorImpl.getTimeStep());
    } else {
      clearTimeStep();
    }
    if (accessorImpl.estimationStart_Accessor) {
      setEstimationStart(*(accessorImpl.estimationStart_Accessor));
    } else {
      estimationStart_Accessor.reset();
    }
    if (accessorImpl.estimationEnd_Accessor) {
      setEstimationEnd(*(accessorImpl.estimationEnd_Accessor));
    } else {
      estimationEnd_Accessor.reset();
    }
  }
}

void SystemEstimationRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  systemID_Accessor->reset();
  requestType_Accessor->reset();
  requestFrequencyType_Accessor->reset();
  resultsInNativeMessage_Accessor = false;
  clearTimeStep();
  estimationStart_Accessor.reset();
  estimationEnd_Accessor.reset();
}

const uci::type::SystemID_Type& SystemEstimationRequestMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& SystemEstimationRequestMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::SystemEstimationRequestMDT& SystemEstimationRequestMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SystemEstimationRequestMDT::RequestType& SystemEstimationRequestMDT::getRequestType() const {
  return *requestType_Accessor;
}

uci::type::SystemEstimationRequestMDT::RequestType& SystemEstimationRequestMDT::getRequestType() {
  return *requestType_Accessor;
}

uci::type::SystemEstimationRequestMDT& SystemEstimationRequestMDT::setRequestType(const uci::type::SystemEstimationRequestMDT::RequestType& accessor) {
  if (&accessor != requestType_Accessor.get()) {
    requestType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RepeatEnum& SystemEstimationRequestMDT::getRequestFrequencyType() const {
  return *requestFrequencyType_Accessor;
}

uci::type::RepeatEnum& SystemEstimationRequestMDT::getRequestFrequencyType() {
  return *requestFrequencyType_Accessor;
}

uci::type::SystemEstimationRequestMDT& SystemEstimationRequestMDT::setRequestFrequencyType(const uci::type::RepeatEnum& accessor) {
  if (&accessor != requestFrequencyType_Accessor.get()) {
    requestFrequencyType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemEstimationRequestMDT& SystemEstimationRequestMDT::setRequestFrequencyType(uci::type::RepeatEnum::EnumerationItem value) {
  requestFrequencyType_Accessor->setValue(value);
  return *this;
}


xs::Boolean SystemEstimationRequestMDT::getResultsInNativeMessage() const {
  return resultsInNativeMessage_Accessor;
}

uci::type::SystemEstimationRequestMDT& SystemEstimationRequestMDT::setResultsInNativeMessage(xs::Boolean value) {
  resultsInNativeMessage_Accessor = value;
  return *this;
}


uci::type::DurationTypeValue SystemEstimationRequestMDT::getTimeStep() const {
  if (timeStep_Accessor) {
    return *timeStep_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeStep(): An attempt was made to get an optional field that was not enabled, call hasTimeStep() to determine if it is safe to call getTimeStep()");
}

uci::type::SystemEstimationRequestMDT& SystemEstimationRequestMDT::setTimeStep(uci::type::DurationTypeValue value) {
  timeStep_Accessor = value;
  return *this;
}

bool SystemEstimationRequestMDT::hasTimeStep() const noexcept {
  return timeStep_Accessor.has_value();
}

uci::type::SystemEstimationRequestMDT& SystemEstimationRequestMDT::clearTimeStep() noexcept {
  timeStep_Accessor.reset();
  return *this;
}

uci::type::SystemEstimationStartType& SystemEstimationRequestMDT::getEstimationStart_() const {
  if (estimationStart_Accessor) {
    return *estimationStart_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimationStart(): An attempt was made to get an optional field that was not enabled, call hasEstimationStart() to determine if it is safe to call getEstimationStart()");
}

const uci::type::SystemEstimationStartType& SystemEstimationRequestMDT::getEstimationStart() const {
  return getEstimationStart_();
}

uci::type::SystemEstimationStartType& SystemEstimationRequestMDT::getEstimationStart() {
  return getEstimationStart_();
}

uci::type::SystemEstimationRequestMDT& SystemEstimationRequestMDT::setEstimationStart(const uci::type::SystemEstimationStartType& accessor) {
  enableEstimationStart();
  if (&accessor != estimationStart_Accessor.get()) {
    estimationStart_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SystemEstimationRequestMDT::hasEstimationStart() const noexcept {
  return static_cast<bool>(estimationStart_Accessor);
}

uci::type::SystemEstimationStartType& SystemEstimationRequestMDT::enableEstimationStart(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemEstimationStartType : type};
  if ((!estimationStart_Accessor) || (estimationStart_Accessor->getAccessorType() != requestedType)) {
    estimationStart_Accessor = SystemEstimationStartType::create(requestedType);
    if (!estimationStart_Accessor) {
      throw uci::base::UCIException("Error in enableEstimationStart(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *estimationStart_Accessor;
}

uci::type::SystemEstimationRequestMDT& SystemEstimationRequestMDT::clearEstimationStart() noexcept {
  estimationStart_Accessor.reset();
  return *this;
}

uci::type::SystemEstimationStopType& SystemEstimationRequestMDT::getEstimationEnd_() const {
  if (estimationEnd_Accessor) {
    return *estimationEnd_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimationEnd(): An attempt was made to get an optional field that was not enabled, call hasEstimationEnd() to determine if it is safe to call getEstimationEnd()");
}

const uci::type::SystemEstimationStopType& SystemEstimationRequestMDT::getEstimationEnd() const {
  return getEstimationEnd_();
}

uci::type::SystemEstimationStopType& SystemEstimationRequestMDT::getEstimationEnd() {
  return getEstimationEnd_();
}

uci::type::SystemEstimationRequestMDT& SystemEstimationRequestMDT::setEstimationEnd(const uci::type::SystemEstimationStopType& accessor) {
  enableEstimationEnd();
  if (&accessor != estimationEnd_Accessor.get()) {
    estimationEnd_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SystemEstimationRequestMDT::hasEstimationEnd() const noexcept {
  return static_cast<bool>(estimationEnd_Accessor);
}

uci::type::SystemEstimationStopType& SystemEstimationRequestMDT::enableEstimationEnd(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemEstimationStopType : type};
  if ((!estimationEnd_Accessor) || (estimationEnd_Accessor->getAccessorType() != requestedType)) {
    estimationEnd_Accessor = SystemEstimationStopType::create(requestedType);
    if (!estimationEnd_Accessor) {
      throw uci::base::UCIException("Error in enableEstimationEnd(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *estimationEnd_Accessor;
}

uci::type::SystemEstimationRequestMDT& SystemEstimationRequestMDT::clearEstimationEnd() noexcept {
  estimationEnd_Accessor.reset();
  return *this;
}

std::unique_ptr<SystemEstimationRequestMDT> SystemEstimationRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemEstimationRequestMDT : type};
  return (requestedType == uci::type::accessorType::systemEstimationRequestMDT) ? boost::make_unique<SystemEstimationRequestMDT>() : nullptr;
}

/**  */
namespace SystemEstimationRequestMDT_Names {

constexpr const char* Extern_Type_Name{"SystemEstimationRequestMDT"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* RequestType_Name{"RequestType"};
constexpr const char* RequestFrequencyType_Name{"RequestFrequencyType"};
constexpr const char* ResultsInNativeMessage_Name{"ResultsInNativeMessage"};
constexpr const char* TimeStep_Name{"TimeStep"};
constexpr const char* EstimationStart_Name{"EstimationStart"};
constexpr const char* EstimationEnd_Name{"EstimationEnd"};

} // namespace SystemEstimationRequestMDT_Names

void SystemEstimationRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::SystemEstimationRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SystemEstimationRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SystemEstimationRequestMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemEstimationRequestMDT_Names::RequestType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SystemEstimationRequestMDT::RequestType& boundedList = accessor.getRequestType();
        const uci::type::SystemEstimationRequestMDT::RequestType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SystemEstimationRequestMDT_Names::RequestFrequencyType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRequestFrequencyType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SystemEstimationRequestMDT_Names::ResultsInNativeMessage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResultsInNativeMessage(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SystemEstimationRequestMDT_Names::TimeStep_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeStep(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SystemEstimationRequestMDT_Names::EstimationStart_Name) {
      SystemEstimationStartType::deserialize(valueType.second, accessor.enableEstimationStart(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemEstimationRequestMDT_Names::EstimationEnd_Name) {
      SystemEstimationStopType::deserialize(valueType.second, accessor.enableEstimationEnd(), nodeName, nsPrefix);
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SystemEstimationRequestMDT::serialize(const uci::type::SystemEstimationRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SystemEstimationRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SystemEstimationRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  SystemID_Type::serialize(accessor.getSystemID(), node, SystemEstimationRequestMDT_Names::SystemID_Name);
  {
    const uci::type::SystemEstimationRequestMDT::RequestType& boundedList = accessor.getRequestType();
    for (uci::type::SystemEstimationRequestMDT::RequestType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      EstimationMessageEnum::serialize(boundedList.at(i), node, SystemEstimationRequestMDT_Names::RequestType_Name, false);
    }
  }
  RepeatEnum::serialize(accessor.getRequestFrequencyType(), node, SystemEstimationRequestMDT_Names::RequestFrequencyType_Name, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getResultsInNativeMessage(), node, SystemEstimationRequestMDT_Names::ResultsInNativeMessage_Name);
  if (accessor.hasTimeStep()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTimeStep(), node, SystemEstimationRequestMDT_Names::TimeStep_Name);
  }
  if (accessor.hasEstimationStart()) {
    SystemEstimationStartType::serialize(accessor.getEstimationStart(), node, SystemEstimationRequestMDT_Names::EstimationStart_Name);
  }
  if (accessor.hasEstimationEnd()) {
    SystemEstimationStopType::serialize(accessor.getEstimationEnd(), node, SystemEstimationRequestMDT_Names::EstimationEnd_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SystemEstimationRequestMDT& SystemEstimationRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SystemEstimationRequestMDT>().release());
}

uci::type::SystemEstimationRequestMDT& SystemEstimationRequestMDT::create(const uci::type::SystemEstimationRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SystemEstimationRequestMDT> newAccessor{boost::make_unique<asb_uci::type::SystemEstimationRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SystemEstimationRequestMDT::destroy(uci::type::SystemEstimationRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::SystemEstimationRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

