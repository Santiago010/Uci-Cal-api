/** @file EOB_IdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EOB_IdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EOB_EquipmentIdentityType.h"
#include "asb_uci/type/EOB_SiteIdentityType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EOB_EquipmentIdentityType.h"
#include "uci/type/EOB_IdentityType.h"
#include "uci/type/EOB_SiteIdentityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EOB_IdentityType::EOB_IdentityType() = default;

EOB_IdentityType::~EOB_IdentityType() = default;

void EOB_IdentityType::copy(const uci::type::EOB_IdentityType& accessor) {
  copyImpl(accessor, false);
}

void EOB_IdentityType::copyImpl(const uci::type::EOB_IdentityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EOB_IdentityType&>(accessor);
    if (accessorImpl.site_Accessor) {
      setSite(*(accessorImpl.site_Accessor));
    } else {
      site_Accessor.reset();
    }
    if (accessorImpl.equipment_Accessor) {
      setEquipment(*(accessorImpl.equipment_Accessor));
    } else {
      equipment_Accessor.reset();
    }
  }
}

void EOB_IdentityType::reset() noexcept {
  site_Accessor.reset();
  equipment_Accessor.reset();
}

uci::type::EOB_IdentityType::EOB_IdentityTypeChoice EOB_IdentityType::getEOB_IdentityTypeChoiceOrdinal() const noexcept {
  if (site_Accessor) {
    return EOB_IDENTITYTYPE_CHOICE_SITE;
  }
  if (equipment_Accessor) {
    return EOB_IDENTITYTYPE_CHOICE_EQUIPMENT;
  }
  return EOB_IDENTITYTYPE_CHOICE_NONE;
}

uci::type::EOB_IdentityType& EOB_IdentityType::setEOB_IdentityTypeChoiceOrdinal(uci::type::EOB_IdentityType::EOB_IdentityTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EOB_IDENTITYTYPE_CHOICE_SITE:
      chooseSite("setEOB_IdentityTypeChoiceOrdinal", type);
      break;
    case EOB_IDENTITYTYPE_CHOICE_EQUIPMENT:
      chooseEquipment("setEOB_IdentityTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEOB_IdentityTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EOB_SiteIdentityType& EOB_IdentityType::getSite_() const {
  if (site_Accessor) {
    return *site_Accessor;
  }
  throw uci::base::UCIException("Error in getSite(): Unable to get Site, field not selected");
}

const uci::type::EOB_SiteIdentityType& EOB_IdentityType::getSite() const {
  return getSite_();
}

uci::type::EOB_SiteIdentityType& EOB_IdentityType::getSite() {
  return getSite_();
}

uci::type::EOB_IdentityType& EOB_IdentityType::setSite(const uci::type::EOB_SiteIdentityType& accessor) {
  chooseSite();
  if (&accessor != site_Accessor.get()) {
    site_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EOB_IdentityType::isSite() const noexcept {
  return static_cast<bool>(site_Accessor);
}

uci::type::EOB_SiteIdentityType& EOB_IdentityType::chooseSite(const std::string& method, uci::base::accessorType::AccessorType type) {
  equipment_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_SiteIdentityType : type};
  if ((!site_Accessor) || (site_Accessor->getAccessorType() != requestedType)) {
    site_Accessor = EOB_SiteIdentityType::create(type);
    if (!site_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *site_Accessor;
}

uci::type::EOB_SiteIdentityType& EOB_IdentityType::chooseSite(uci::base::accessorType::AccessorType type) {
  return chooseSite("chooseSite", type);
}

uci::type::EOB_EquipmentIdentityType& EOB_IdentityType::getEquipment_() const {
  if (equipment_Accessor) {
    return *equipment_Accessor;
  }
  throw uci::base::UCIException("Error in getEquipment(): Unable to get Equipment, field not selected");
}

const uci::type::EOB_EquipmentIdentityType& EOB_IdentityType::getEquipment() const {
  return getEquipment_();
}

uci::type::EOB_EquipmentIdentityType& EOB_IdentityType::getEquipment() {
  return getEquipment_();
}

uci::type::EOB_IdentityType& EOB_IdentityType::setEquipment(const uci::type::EOB_EquipmentIdentityType& accessor) {
  chooseEquipment();
  if (&accessor != equipment_Accessor.get()) {
    equipment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EOB_IdentityType::isEquipment() const noexcept {
  return static_cast<bool>(equipment_Accessor);
}

uci::type::EOB_EquipmentIdentityType& EOB_IdentityType::chooseEquipment(const std::string& method, uci::base::accessorType::AccessorType type) {
  site_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_EquipmentIdentityType : type};
  if ((!equipment_Accessor) || (equipment_Accessor->getAccessorType() != requestedType)) {
    equipment_Accessor = EOB_EquipmentIdentityType::create(type);
    if (!equipment_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *equipment_Accessor;
}

uci::type::EOB_EquipmentIdentityType& EOB_IdentityType::chooseEquipment(uci::base::accessorType::AccessorType type) {
  return chooseEquipment("chooseEquipment", type);
}

std::unique_ptr<EOB_IdentityType> EOB_IdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_IdentityType : type};
  return (requestedType == uci::type::accessorType::eOB_IdentityType) ? boost::make_unique<EOB_IdentityType>() : nullptr;
}

/**  */
namespace EOB_IdentityType_Names {

constexpr const char* Extern_Type_Name{"EOB_IdentityType"};
constexpr const char* Site_Name{"Site"};
constexpr const char* Equipment_Name{"Equipment"};

} // namespace EOB_IdentityType_Names

void EOB_IdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EOB_IdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EOB_IdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EOB_IdentityType_Names::Site_Name) {
      EOB_SiteIdentityType::deserialize(valueType.second, accessor.chooseSite(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_IdentityType_Names::Equipment_Name) {
      EOB_EquipmentIdentityType::deserialize(valueType.second, accessor.chooseEquipment(), nodeName, nsPrefix);
    }
  }
}

std::string EOB_IdentityType::serialize(const uci::type::EOB_IdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EOB_IdentityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EOB_IdentityType_Names::Extern_Type_Name);
  }
  if (accessor.isSite()) {
    EOB_SiteIdentityType::serialize(accessor.getSite(), node, EOB_IdentityType_Names::Site_Name);
  } else if (accessor.isEquipment()) {
    EOB_EquipmentIdentityType::serialize(accessor.getEquipment(), node, EOB_IdentityType_Names::Equipment_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EOB_IdentityType& EOB_IdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EOB_IdentityType>().release());
}

uci::type::EOB_IdentityType& EOB_IdentityType::create(const uci::type::EOB_IdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EOB_IdentityType> newAccessor{boost::make_unique<asb_uci::type::EOB_IdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EOB_IdentityType::destroy(uci::type::EOB_IdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::EOB_IdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

