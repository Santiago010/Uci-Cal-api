/** @file CommUHF_SATCOM_CommWaveformCapabilityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommUHF_SATCOM_CommWaveformCapabilityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommRangeDelayChoiceType.h"
#include "../../../include/asb_uci/type/CommRangeModeTypeEnum.h"
#include "../../../include/asb_uci/type/CommSATCOM_ServiceTypeEnum.h"
#include "../../../include/asb_uci/type/CommWaveformCapabilityCommandPET.h"
#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommRangeDelayChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommRangeModeTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommSATCOM_ServiceTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommUHF_SATCOM_CommWaveformCapabilityCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommUHF_SATCOM_CommWaveformCapabilityCommandType::CommUHF_SATCOM_CommWaveformCapabilityCommandType()
  : rangeDelay_Accessor{boost::make_unique<CommRangeDelayChoiceType>()},
    guardSlotKey_Accessor{boost::make_unique<GuardSlotKey>(0, SIZE_MAX)} {
}

CommUHF_SATCOM_CommWaveformCapabilityCommandType::~CommUHF_SATCOM_CommWaveformCapabilityCommandType() = default;

void CommUHF_SATCOM_CommWaveformCapabilityCommandType::copy(const uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& accessor) {
  copyImpl(accessor, false);
}

void CommUHF_SATCOM_CommWaveformCapabilityCommandType::copyImpl(const uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CommWaveformCapabilityCommandPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CommUHF_SATCOM_CommWaveformCapabilityCommandType&>(accessor);
    setRangeDelay(*(accessorImpl.rangeDelay_Accessor));
    if (accessorImpl.rangeMode_Accessor) {
      setRangeMode(*(accessorImpl.rangeMode_Accessor));
    } else {
      rangeMode_Accessor.reset();
    }
    if (accessorImpl.serviceType_Accessor) {
      setServiceType(*(accessorImpl.serviceType_Accessor));
    } else {
      serviceType_Accessor.reset();
    }
    if (accessorImpl.configurationCode_Accessor) {
      setConfigurationCode(*(accessorImpl.configurationCode_Accessor));
    } else {
      configurationCode_Accessor.reset();
    }
    if (accessorImpl.hasOrderwireEncryption()) {
      setOrderwireEncryption(accessorImpl.getOrderwireEncryption());
    } else {
      clearOrderwireEncryption();
    }
    if (accessorImpl.satelliteKey_Accessor) {
      setSatelliteKey(*(accessorImpl.satelliteKey_Accessor));
    } else {
      satelliteKey_Accessor.reset();
    }
    setGuardSlotKey(*(accessorImpl.guardSlotKey_Accessor));
  }
}

void CommUHF_SATCOM_CommWaveformCapabilityCommandType::reset() noexcept {
  CommWaveformCapabilityCommandPET::reset();
  rangeDelay_Accessor->reset();
  rangeMode_Accessor.reset();
  serviceType_Accessor.reset();
  configurationCode_Accessor.reset();
  clearOrderwireEncryption();
  satelliteKey_Accessor.reset();
  guardSlotKey_Accessor->reset();
}

const uci::type::CommRangeDelayChoiceType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getRangeDelay() const {
  return *rangeDelay_Accessor;
}

uci::type::CommRangeDelayChoiceType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getRangeDelay() {
  return *rangeDelay_Accessor;
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::setRangeDelay(const uci::type::CommRangeDelayChoiceType& accessor) {
  if (&accessor != rangeDelay_Accessor.get()) {
    rangeDelay_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommRangeModeTypeEnum& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getRangeMode_() const {
  if (rangeMode_Accessor) {
    return *rangeMode_Accessor;
  }
  throw uci::base::UCIException("Error in getRangeMode(): An attempt was made to get an optional field that was not enabled, call hasRangeMode() to determine if it is safe to call getRangeMode()");
}

const uci::type::CommRangeModeTypeEnum& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getRangeMode() const {
  return getRangeMode_();
}

uci::type::CommRangeModeTypeEnum& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getRangeMode() {
  return getRangeMode_();
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::setRangeMode(const uci::type::CommRangeModeTypeEnum& accessor) {
  enableRangeMode();
  if (&accessor != rangeMode_Accessor.get()) {
    rangeMode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::setRangeMode(const uci::type::CommRangeModeTypeEnum::EnumerationItem value) {
  enableRangeMode().setValue(value);
  return *this;
}

bool CommUHF_SATCOM_CommWaveformCapabilityCommandType::hasRangeMode() const noexcept {
  return static_cast<bool>(rangeMode_Accessor);
}

uci::type::CommRangeModeTypeEnum& CommUHF_SATCOM_CommWaveformCapabilityCommandType::enableRangeMode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commRangeModeTypeEnum : type};
  if ((!rangeMode_Accessor) || (rangeMode_Accessor->getAccessorType() != requestedType)) {
    rangeMode_Accessor = CommRangeModeTypeEnum::create(requestedType);
    if (!rangeMode_Accessor) {
      throw uci::base::UCIException("Error in enableRangeMode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rangeMode_Accessor;
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::clearRangeMode() noexcept {
  rangeMode_Accessor.reset();
  return *this;
}

uci::type::CommSATCOM_ServiceTypeEnum& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getServiceType_() const {
  if (serviceType_Accessor) {
    return *serviceType_Accessor;
  }
  throw uci::base::UCIException("Error in getServiceType(): An attempt was made to get an optional field that was not enabled, call hasServiceType() to determine if it is safe to call getServiceType()");
}

const uci::type::CommSATCOM_ServiceTypeEnum& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getServiceType() const {
  return getServiceType_();
}

uci::type::CommSATCOM_ServiceTypeEnum& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getServiceType() {
  return getServiceType_();
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::setServiceType(const uci::type::CommSATCOM_ServiceTypeEnum& accessor) {
  enableServiceType();
  if (&accessor != serviceType_Accessor.get()) {
    serviceType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::setServiceType(const uci::type::CommSATCOM_ServiceTypeEnum::EnumerationItem value) {
  enableServiceType().setValue(value);
  return *this;
}

bool CommUHF_SATCOM_CommWaveformCapabilityCommandType::hasServiceType() const noexcept {
  return static_cast<bool>(serviceType_Accessor);
}

uci::type::CommSATCOM_ServiceTypeEnum& CommUHF_SATCOM_CommWaveformCapabilityCommandType::enableServiceType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commSATCOM_ServiceTypeEnum : type};
  if ((!serviceType_Accessor) || (serviceType_Accessor->getAccessorType() != requestedType)) {
    serviceType_Accessor = CommSATCOM_ServiceTypeEnum::create(requestedType);
    if (!serviceType_Accessor) {
      throw uci::base::UCIException("Error in enableServiceType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *serviceType_Accessor;
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::clearServiceType() noexcept {
  serviceType_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getConfigurationCode_() const {
  if (configurationCode_Accessor) {
    return *configurationCode_Accessor;
  }
  throw uci::base::UCIException("Error in getConfigurationCode(): An attempt was made to get an optional field that was not enabled, call hasConfigurationCode() to determine if it is safe to call getConfigurationCode()");
}

const uci::type::ForeignKeyType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getConfigurationCode() const {
  return getConfigurationCode_();
}

uci::type::ForeignKeyType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getConfigurationCode() {
  return getConfigurationCode_();
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::setConfigurationCode(const uci::type::ForeignKeyType& accessor) {
  enableConfigurationCode(accessor.getAccessorType());
  if (&accessor != configurationCode_Accessor.get()) {
    configurationCode_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CommUHF_SATCOM_CommWaveformCapabilityCommandType::hasConfigurationCode() const noexcept {
  return static_cast<bool>(configurationCode_Accessor);
}

uci::type::ForeignKeyType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::enableConfigurationCode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!configurationCode_Accessor) || (configurationCode_Accessor->getAccessorType() != requestedType)) {
    configurationCode_Accessor = ForeignKeyType::create(requestedType);
    if (!configurationCode_Accessor) {
      throw uci::base::UCIException("Error in enableConfigurationCode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *configurationCode_Accessor;
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::clearConfigurationCode() noexcept {
  configurationCode_Accessor.reset();
  return *this;
}

xs::Boolean CommUHF_SATCOM_CommWaveformCapabilityCommandType::getOrderwireEncryption() const {
  if (orderwireEncryption_Accessor) {
    return *orderwireEncryption_Accessor;
  }
  throw uci::base::UCIException("Error in getOrderwireEncryption(): An attempt was made to get an optional field that was not enabled, call hasOrderwireEncryption() to determine if it is safe to call getOrderwireEncryption()");
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::setOrderwireEncryption(xs::Boolean value) {
  orderwireEncryption_Accessor = value;
  return *this;
}

bool CommUHF_SATCOM_CommWaveformCapabilityCommandType::hasOrderwireEncryption() const noexcept {
  return orderwireEncryption_Accessor.has_value();
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::clearOrderwireEncryption() noexcept {
  orderwireEncryption_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getSatelliteKey_() const {
  if (satelliteKey_Accessor) {
    return *satelliteKey_Accessor;
  }
  throw uci::base::UCIException("Error in getSatelliteKey(): An attempt was made to get an optional field that was not enabled, call hasSatelliteKey() to determine if it is safe to call getSatelliteKey()");
}

const uci::type::ForeignKeyType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getSatelliteKey() const {
  return getSatelliteKey_();
}

uci::type::ForeignKeyType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getSatelliteKey() {
  return getSatelliteKey_();
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::setSatelliteKey(const uci::type::ForeignKeyType& accessor) {
  enableSatelliteKey(accessor.getAccessorType());
  if (&accessor != satelliteKey_Accessor.get()) {
    satelliteKey_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CommUHF_SATCOM_CommWaveformCapabilityCommandType::hasSatelliteKey() const noexcept {
  return static_cast<bool>(satelliteKey_Accessor);
}

uci::type::ForeignKeyType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::enableSatelliteKey(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!satelliteKey_Accessor) || (satelliteKey_Accessor->getAccessorType() != requestedType)) {
    satelliteKey_Accessor = ForeignKeyType::create(requestedType);
    if (!satelliteKey_Accessor) {
      throw uci::base::UCIException("Error in enableSatelliteKey(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *satelliteKey_Accessor;
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::clearSatelliteKey() noexcept {
  satelliteKey_Accessor.reset();
  return *this;
}

const uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType::GuardSlotKey& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getGuardSlotKey() const {
  return *guardSlotKey_Accessor;
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType::GuardSlotKey& CommUHF_SATCOM_CommWaveformCapabilityCommandType::getGuardSlotKey() {
  return *guardSlotKey_Accessor;
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::setGuardSlotKey(const uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType::GuardSlotKey& accessor) {
  if (&accessor != guardSlotKey_Accessor.get()) {
    guardSlotKey_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommUHF_SATCOM_CommWaveformCapabilityCommandType> CommUHF_SATCOM_CommWaveformCapabilityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commUHF_SATCOM_CommWaveformCapabilityCommandType : type};
  return (requestedType == uci::type::accessorType::commUHF_SATCOM_CommWaveformCapabilityCommandType) ? boost::make_unique<CommUHF_SATCOM_CommWaveformCapabilityCommandType>() : nullptr;
}

/**  */
namespace CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names {

constexpr const char* Extern_Type_Name{"CommUHF_SATCOM_CommWaveformCapabilityCommandType"};
constexpr const char* RangeDelay_Name{"RangeDelay"};
constexpr const char* RangeMode_Name{"RangeMode"};
constexpr const char* ServiceType_Name{"ServiceType"};
constexpr const char* ConfigurationCode_Name{"ConfigurationCode"};
constexpr const char* OrderwireEncryption_Name{"OrderwireEncryption"};
constexpr const char* SatelliteKey_Name{"SatelliteKey"};
constexpr const char* GuardSlotKey_Name{"GuardSlotKey"};

} // namespace CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names

void CommUHF_SATCOM_CommWaveformCapabilityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::RangeDelay_Name) {
      CommRangeDelayChoiceType::deserialize(valueType.second, accessor.getRangeDelay(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::RangeMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRangeMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::ServiceType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableServiceType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::ConfigurationCode_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableConfigurationCode(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::OrderwireEncryption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOrderwireEncryption(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::SatelliteKey_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSatelliteKey(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::GuardSlotKey_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType::GuardSlotKey& boundedList = accessor.getGuardSlotKey();
        const uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType::GuardSlotKey::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  CommWaveformCapabilityCommandPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CommUHF_SATCOM_CommWaveformCapabilityCommandType::serialize(const uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::Extern_Type_Name);
  }
  CommWaveformCapabilityCommandPET::serialize(accessor, node, "", false, false, false);
  CommRangeDelayChoiceType::serialize(accessor.getRangeDelay(), node, CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::RangeDelay_Name);
  if (accessor.hasRangeMode()) {
    CommRangeModeTypeEnum::serialize(accessor.getRangeMode(), node, CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::RangeMode_Name, false);
  }
  if (accessor.hasServiceType()) {
    CommSATCOM_ServiceTypeEnum::serialize(accessor.getServiceType(), node, CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::ServiceType_Name, false);
  }
  if (accessor.hasConfigurationCode()) {
    ForeignKeyType::serialize(accessor.getConfigurationCode(), node, CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::ConfigurationCode_Name);
  }
  if (accessor.hasOrderwireEncryption()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getOrderwireEncryption(), node, CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::OrderwireEncryption_Name);
  }
  if (accessor.hasSatelliteKey()) {
    ForeignKeyType::serialize(accessor.getSatelliteKey(), node, CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::SatelliteKey_Name);
  }
  {
    const uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType::GuardSlotKey& boundedList = accessor.getGuardSlotKey();
    for (uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType::GuardSlotKey::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, CommUHF_SATCOM_CommWaveformCapabilityCommandType_Names::GuardSlotKey_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType>().release());
}

uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& CommUHF_SATCOM_CommWaveformCapabilityCommandType::create(const uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType> newAccessor{boost::make_unique<asb_uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommUHF_SATCOM_CommWaveformCapabilityCommandType::destroy(uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

