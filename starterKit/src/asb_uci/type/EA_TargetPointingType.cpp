/** @file EA_TargetPointingType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EA_TargetPointingType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AirVolumeSensorReferencedType.h"
#include "../../../include/asb_uci/type/TargetType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AirVolumeSensorReferencedType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EA_TargetPointingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TargetType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EA_TargetPointingType::EA_TargetPointingType() = default;

EA_TargetPointingType::~EA_TargetPointingType() = default;

void EA_TargetPointingType::copy(const uci::type::EA_TargetPointingType& accessor) {
  copyImpl(accessor, false);
}

void EA_TargetPointingType::copyImpl(const uci::type::EA_TargetPointingType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EA_TargetPointingType&>(accessor);
    if (accessorImpl.locationData_Accessor) {
      setLocationData(*(accessorImpl.locationData_Accessor));
    } else {
      locationData_Accessor.reset();
    }
    if (accessorImpl.airVolume_Accessor) {
      setAirVolume(*(accessorImpl.airVolume_Accessor));
    } else {
      airVolume_Accessor.reset();
    }
  }
}

void EA_TargetPointingType::reset() noexcept {
  locationData_Accessor.reset();
  airVolume_Accessor.reset();
}

uci::type::EA_TargetPointingType::EA_TargetPointingTypeChoice EA_TargetPointingType::getEA_TargetPointingTypeChoiceOrdinal() const noexcept {
  if (locationData_Accessor) {
    return EA_TARGETPOINTINGTYPE_CHOICE_LOCATIONDATA;
  }
  if (airVolume_Accessor) {
    return EA_TARGETPOINTINGTYPE_CHOICE_AIRVOLUME;
  }
  return EA_TARGETPOINTINGTYPE_CHOICE_NONE;
}

uci::type::EA_TargetPointingType& EA_TargetPointingType::setEA_TargetPointingTypeChoiceOrdinal(uci::type::EA_TargetPointingType::EA_TargetPointingTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EA_TARGETPOINTINGTYPE_CHOICE_LOCATIONDATA:
      chooseLocationData("setEA_TargetPointingTypeChoiceOrdinal", type);
      break;
    case EA_TARGETPOINTINGTYPE_CHOICE_AIRVOLUME:
      chooseAirVolume("setEA_TargetPointingTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEA_TargetPointingTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::TargetType& EA_TargetPointingType::getLocationData_() const {
  if (locationData_Accessor) {
    return *locationData_Accessor;
  }
  throw uci::base::UCIException("Error in getLocationData(): Unable to get LocationData, field not selected");
}

const uci::type::TargetType& EA_TargetPointingType::getLocationData() const {
  return getLocationData_();
}

uci::type::TargetType& EA_TargetPointingType::getLocationData() {
  return getLocationData_();
}

uci::type::EA_TargetPointingType& EA_TargetPointingType::setLocationData(const uci::type::TargetType& accessor) {
  chooseLocationData(accessor.getAccessorType());
  if (&accessor != locationData_Accessor.get()) {
    locationData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_TargetPointingType::isLocationData() const noexcept {
  return static_cast<bool>(locationData_Accessor);
}

uci::type::TargetType& EA_TargetPointingType::chooseLocationData(const std::string& method, uci::base::accessorType::AccessorType type) {
  airVolume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::targetType : type};
  if ((!locationData_Accessor) || (locationData_Accessor->getAccessorType() != requestedType)) {
    locationData_Accessor = TargetType::create(type);
    if (!locationData_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *locationData_Accessor;
}

uci::type::TargetType& EA_TargetPointingType::chooseLocationData(uci::base::accessorType::AccessorType type) {
  return chooseLocationData("chooseLocationData", type);
}

uci::type::AirVolumeSensorReferencedType& EA_TargetPointingType::getAirVolume_() const {
  if (airVolume_Accessor) {
    return *airVolume_Accessor;
  }
  throw uci::base::UCIException("Error in getAirVolume(): Unable to get AirVolume, field not selected");
}

const uci::type::AirVolumeSensorReferencedType& EA_TargetPointingType::getAirVolume() const {
  return getAirVolume_();
}

uci::type::AirVolumeSensorReferencedType& EA_TargetPointingType::getAirVolume() {
  return getAirVolume_();
}

uci::type::EA_TargetPointingType& EA_TargetPointingType::setAirVolume(const uci::type::AirVolumeSensorReferencedType& accessor) {
  chooseAirVolume();
  if (&accessor != airVolume_Accessor.get()) {
    airVolume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_TargetPointingType::isAirVolume() const noexcept {
  return static_cast<bool>(airVolume_Accessor);
}

uci::type::AirVolumeSensorReferencedType& EA_TargetPointingType::chooseAirVolume(const std::string& method, uci::base::accessorType::AccessorType type) {
  locationData_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airVolumeSensorReferencedType : type};
  if ((!airVolume_Accessor) || (airVolume_Accessor->getAccessorType() != requestedType)) {
    airVolume_Accessor = AirVolumeSensorReferencedType::create(type);
    if (!airVolume_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *airVolume_Accessor;
}

uci::type::AirVolumeSensorReferencedType& EA_TargetPointingType::chooseAirVolume(uci::base::accessorType::AccessorType type) {
  return chooseAirVolume("chooseAirVolume", type);
}

std::unique_ptr<EA_TargetPointingType> EA_TargetPointingType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_TargetPointingType : type};
  return (requestedType == uci::type::accessorType::eA_TargetPointingType) ? boost::make_unique<EA_TargetPointingType>() : nullptr;
}

/**  */
namespace EA_TargetPointingType_Names {

constexpr const char* Extern_Type_Name{"EA_TargetPointingType"};
constexpr const char* LocationData_Name{"LocationData"};
constexpr const char* AirVolume_Name{"AirVolume"};

} // namespace EA_TargetPointingType_Names

void EA_TargetPointingType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_TargetPointingType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EA_TargetPointingType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EA_TargetPointingType_Names::LocationData_Name) {
      TargetType::deserialize(valueType.second, accessor.chooseLocationData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_TargetPointingType_Names::AirVolume_Name) {
      AirVolumeSensorReferencedType::deserialize(valueType.second, accessor.chooseAirVolume(), nodeName, nsPrefix);
    }
  }
}

std::string EA_TargetPointingType::serialize(const uci::type::EA_TargetPointingType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EA_TargetPointingType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EA_TargetPointingType_Names::Extern_Type_Name);
  }
  if (accessor.isLocationData()) {
    TargetType::serialize(accessor.getLocationData(), node, EA_TargetPointingType_Names::LocationData_Name);
  } else if (accessor.isAirVolume()) {
    AirVolumeSensorReferencedType::serialize(accessor.getAirVolume(), node, EA_TargetPointingType_Names::AirVolume_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EA_TargetPointingType& EA_TargetPointingType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EA_TargetPointingType>().release());
}

uci::type::EA_TargetPointingType& EA_TargetPointingType::create(const uci::type::EA_TargetPointingType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EA_TargetPointingType> newAccessor{boost::make_unique<asb_uci::type::EA_TargetPointingType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EA_TargetPointingType::destroy(uci::type::EA_TargetPointingType& accessor) {
  delete dynamic_cast<asb_uci::type::EA_TargetPointingType*>(&accessor);
}

} // namespace type

} // namespace uci

