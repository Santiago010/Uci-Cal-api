/** @file CryptoSlotGroupType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CryptoSlotGroupType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/CryptoLoadStatusType.h"
#include "asb_uci/type/CryptoRolloverMethodEnum.h"
#include "asb_uci/type/CryptoSlotGroupID_Type.h"
#include "asb_uci/type/CryptoSlotGroupStateEnum.h"
#include "asb_uci/type/CryptoSlotType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/CryptoLoadStatusType.h"
#include "uci/type/CryptoRolloverMethodEnum.h"
#include "uci/type/CryptoSlotGroupID_Type.h"
#include "uci/type/CryptoSlotGroupStateEnum.h"
#include "uci/type/CryptoSlotGroupType.h"
#include "uci/type/CryptoSlotIdentifierType.h"
#include "uci/type/CryptoSlotType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CryptoSlotGroupType::CryptoSlotGroupType()
  : cryptoSlotGroupID_Accessor{boost::make_unique<CryptoSlotGroupID_Type>()},
    capabilityID_Accessor{boost::make_unique<CapabilityID>(0, SIZE_MAX)},
    currentSlotIdentifier_Accessor{boost::make_unique<CryptoSlotIdentifierType>()},
    rolloverMethod_Accessor{boost::make_unique<RolloverMethod>(1, 5)},
    loadStatus_Accessor{boost::make_unique<LoadStatus>(0, SIZE_MAX)},
    slotInformation_Accessor{boost::make_unique<SlotInformation>(1, SIZE_MAX)} {
}

CryptoSlotGroupType::~CryptoSlotGroupType() = default;

void CryptoSlotGroupType::copy(const uci::type::CryptoSlotGroupType& accessor) {
  copyImpl(accessor, false);
}

void CryptoSlotGroupType::copyImpl(const uci::type::CryptoSlotGroupType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CryptoSlotGroupType&>(accessor);
    setCryptoSlotGroupID(*(accessorImpl.cryptoSlotGroupID_Accessor));
    setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    if (accessorImpl.cryptoSlotGroupState_Accessor) {
      setCryptoSlotGroupState(*(accessorImpl.cryptoSlotGroupState_Accessor));
    } else {
      cryptoSlotGroupState_Accessor.reset();
    }
    setCurrentSlotIdentifier(*(accessorImpl.currentSlotIdentifier_Accessor));
    setRolloverMethod(*(accessorImpl.rolloverMethod_Accessor));
    setLoadStatus(*(accessorImpl.loadStatus_Accessor));
    setSlotInformation(*(accessorImpl.slotInformation_Accessor));
  }
}

void CryptoSlotGroupType::reset() noexcept {
  cryptoSlotGroupID_Accessor->reset();
  capabilityID_Accessor->reset();
  cryptoSlotGroupState_Accessor.reset();
  currentSlotIdentifier_Accessor->reset();
  rolloverMethod_Accessor->reset();
  loadStatus_Accessor->reset();
  slotInformation_Accessor->reset();
}

const uci::type::CryptoSlotGroupID_Type& CryptoSlotGroupType::getCryptoSlotGroupID() const {
  return *cryptoSlotGroupID_Accessor;
}

uci::type::CryptoSlotGroupID_Type& CryptoSlotGroupType::getCryptoSlotGroupID() {
  return *cryptoSlotGroupID_Accessor;
}

uci::type::CryptoSlotGroupType& CryptoSlotGroupType::setCryptoSlotGroupID(const uci::type::CryptoSlotGroupID_Type& accessor) {
  if (&accessor != cryptoSlotGroupID_Accessor.get()) {
    cryptoSlotGroupID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CryptoSlotGroupType::CapabilityID& CryptoSlotGroupType::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::CryptoSlotGroupType::CapabilityID& CryptoSlotGroupType::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::CryptoSlotGroupType& CryptoSlotGroupType::setCapabilityID(const uci::type::CryptoSlotGroupType::CapabilityID& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CryptoSlotGroupStateEnum& CryptoSlotGroupType::getCryptoSlotGroupState_() const {
  if (cryptoSlotGroupState_Accessor) {
    return *cryptoSlotGroupState_Accessor;
  }
  throw uci::base::UCIException("Error in getCryptoSlotGroupState(): An attempt was made to get an optional field that was not enabled, call hasCryptoSlotGroupState() to determine if it is safe to call getCryptoSlotGroupState()");
}

const uci::type::CryptoSlotGroupStateEnum& CryptoSlotGroupType::getCryptoSlotGroupState() const {
  return getCryptoSlotGroupState_();
}

uci::type::CryptoSlotGroupStateEnum& CryptoSlotGroupType::getCryptoSlotGroupState() {
  return getCryptoSlotGroupState_();
}

uci::type::CryptoSlotGroupType& CryptoSlotGroupType::setCryptoSlotGroupState(const uci::type::CryptoSlotGroupStateEnum& accessor) {
  enableCryptoSlotGroupState();
  if (&accessor != cryptoSlotGroupState_Accessor.get()) {
    cryptoSlotGroupState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CryptoSlotGroupType& CryptoSlotGroupType::setCryptoSlotGroupState(const uci::type::CryptoSlotGroupStateEnum::EnumerationItem value) {
  enableCryptoSlotGroupState().setValue(value);
  return *this;
}

bool CryptoSlotGroupType::hasCryptoSlotGroupState() const noexcept {
  return static_cast<bool>(cryptoSlotGroupState_Accessor);
}

uci::type::CryptoSlotGroupStateEnum& CryptoSlotGroupType::enableCryptoSlotGroupState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cryptoSlotGroupStateEnum : type};
  if ((!cryptoSlotGroupState_Accessor) || (cryptoSlotGroupState_Accessor->getAccessorType() != requestedType)) {
    cryptoSlotGroupState_Accessor = CryptoSlotGroupStateEnum::create(requestedType);
    if (!cryptoSlotGroupState_Accessor) {
      throw uci::base::UCIException("Error in enableCryptoSlotGroupState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *cryptoSlotGroupState_Accessor;
}

uci::type::CryptoSlotGroupType& CryptoSlotGroupType::clearCryptoSlotGroupState() noexcept {
  cryptoSlotGroupState_Accessor.reset();
  return *this;
}

const uci::type::CryptoSlotIdentifierType& CryptoSlotGroupType::getCurrentSlotIdentifier() const noexcept {
  return *currentSlotIdentifier_Accessor;
}

uci::type::CryptoSlotIdentifierType& CryptoSlotGroupType::getCurrentSlotIdentifier() noexcept {
  return *currentSlotIdentifier_Accessor;
}

uci::type::CryptoSlotGroupType& CryptoSlotGroupType::setCurrentSlotIdentifier(const uci::type::CryptoSlotIdentifierType& value) {
  return setCurrentSlotIdentifier(value.c_str());
}

uci::type::CryptoSlotGroupType& CryptoSlotGroupType::setCurrentSlotIdentifier(const std::string& value) {
  return setCurrentSlotIdentifier(value.c_str());
}

uci::type::CryptoSlotGroupType& CryptoSlotGroupType::setCurrentSlotIdentifier(const char* value) {
  currentSlotIdentifier_Accessor->setStringValue(value);
  return *this;
}

const uci::type::CryptoSlotGroupType::RolloverMethod& CryptoSlotGroupType::getRolloverMethod() const {
  return *rolloverMethod_Accessor;
}

uci::type::CryptoSlotGroupType::RolloverMethod& CryptoSlotGroupType::getRolloverMethod() {
  return *rolloverMethod_Accessor;
}

uci::type::CryptoSlotGroupType& CryptoSlotGroupType::setRolloverMethod(const uci::type::CryptoSlotGroupType::RolloverMethod& accessor) {
  if (&accessor != rolloverMethod_Accessor.get()) {
    rolloverMethod_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CryptoSlotGroupType::LoadStatus& CryptoSlotGroupType::getLoadStatus() const {
  return *loadStatus_Accessor;
}

uci::type::CryptoSlotGroupType::LoadStatus& CryptoSlotGroupType::getLoadStatus() {
  return *loadStatus_Accessor;
}

uci::type::CryptoSlotGroupType& CryptoSlotGroupType::setLoadStatus(const uci::type::CryptoSlotGroupType::LoadStatus& accessor) {
  if (&accessor != loadStatus_Accessor.get()) {
    loadStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CryptoSlotGroupType::SlotInformation& CryptoSlotGroupType::getSlotInformation() const {
  return *slotInformation_Accessor;
}

uci::type::CryptoSlotGroupType::SlotInformation& CryptoSlotGroupType::getSlotInformation() {
  return *slotInformation_Accessor;
}

uci::type::CryptoSlotGroupType& CryptoSlotGroupType::setSlotInformation(const uci::type::CryptoSlotGroupType::SlotInformation& accessor) {
  if (&accessor != slotInformation_Accessor.get()) {
    slotInformation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CryptoSlotGroupType> CryptoSlotGroupType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cryptoSlotGroupType : type};
  return (requestedType == uci::type::accessorType::cryptoSlotGroupType) ? boost::make_unique<CryptoSlotGroupType>() : nullptr;
}

/**  */
namespace CryptoSlotGroupType_Names {

constexpr const char* Extern_Type_Name{"CryptoSlotGroupType"};
constexpr const char* CryptoSlotGroupID_Name{"CryptoSlotGroupID"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* CryptoSlotGroupState_Name{"CryptoSlotGroupState"};
constexpr const char* CurrentSlotIdentifier_Name{"CurrentSlotIdentifier"};
constexpr const char* RolloverMethod_Name{"RolloverMethod"};
constexpr const char* LoadStatus_Name{"LoadStatus"};
constexpr const char* SlotInformation_Name{"SlotInformation"};

} // namespace CryptoSlotGroupType_Names

void CryptoSlotGroupType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CryptoSlotGroupType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CryptoSlotGroupType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CryptoSlotGroupType_Names::CryptoSlotGroupID_Name) {
      CryptoSlotGroupID_Type::deserialize(valueType.second, accessor.getCryptoSlotGroupID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CryptoSlotGroupType_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CryptoSlotGroupType::CapabilityID& boundedList = accessor.getCapabilityID();
        const uci::type::CryptoSlotGroupType::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CryptoSlotGroupType_Names::CryptoSlotGroupState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCryptoSlotGroupState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CryptoSlotGroupType_Names::CurrentSlotIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCurrentSlotIdentifier(*value);
      }
    } else if (valueType.first == nsPrefix + CryptoSlotGroupType_Names::RolloverMethod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CryptoSlotGroupType::RolloverMethod& boundedList = accessor.getRolloverMethod();
        const uci::type::CryptoSlotGroupType::RolloverMethod::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CryptoSlotGroupType_Names::LoadStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CryptoSlotGroupType::LoadStatus& boundedList = accessor.getLoadStatus();
        const uci::type::CryptoSlotGroupType::LoadStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CryptoLoadStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CryptoSlotGroupType_Names::SlotInformation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CryptoSlotGroupType::SlotInformation& boundedList = accessor.getSlotInformation();
        const uci::type::CryptoSlotGroupType::SlotInformation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CryptoSlotType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CryptoSlotGroupType::serialize(const uci::type::CryptoSlotGroupType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CryptoSlotGroupType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CryptoSlotGroupType_Names::Extern_Type_Name);
  }
  CryptoSlotGroupID_Type::serialize(accessor.getCryptoSlotGroupID(), node, CryptoSlotGroupType_Names::CryptoSlotGroupID_Name);
  {
    const uci::type::CryptoSlotGroupType::CapabilityID& boundedList = accessor.getCapabilityID();
    for (uci::type::CryptoSlotGroupType::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityID_Type::serialize(boundedList.at(i), node, CryptoSlotGroupType_Names::CapabilityID_Name);
    }
  }
  if (accessor.hasCryptoSlotGroupState()) {
    CryptoSlotGroupStateEnum::serialize(accessor.getCryptoSlotGroupState(), node, CryptoSlotGroupType_Names::CryptoSlotGroupState_Name, false);
  }
  asb_uci::util::SerializationHelpers::serializeString(accessor.getCurrentSlotIdentifier(), node, CryptoSlotGroupType_Names::CurrentSlotIdentifier_Name);
  {
    const uci::type::CryptoSlotGroupType::RolloverMethod& boundedList = accessor.getRolloverMethod();
    for (uci::type::CryptoSlotGroupType::RolloverMethod::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CryptoRolloverMethodEnum::serialize(boundedList.at(i), node, CryptoSlotGroupType_Names::RolloverMethod_Name, false);
    }
  }
  {
    const uci::type::CryptoSlotGroupType::LoadStatus& boundedList = accessor.getLoadStatus();
    for (uci::type::CryptoSlotGroupType::LoadStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CryptoLoadStatusType::serialize(boundedList.at(i), node, CryptoSlotGroupType_Names::LoadStatus_Name);
    }
  }
  {
    const uci::type::CryptoSlotGroupType::SlotInformation& boundedList = accessor.getSlotInformation();
    for (uci::type::CryptoSlotGroupType::SlotInformation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CryptoSlotType::serialize(boundedList.at(i), node, CryptoSlotGroupType_Names::SlotInformation_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CryptoSlotGroupType& CryptoSlotGroupType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CryptoSlotGroupType>().release());
}

uci::type::CryptoSlotGroupType& CryptoSlotGroupType::create(const uci::type::CryptoSlotGroupType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CryptoSlotGroupType> newAccessor{boost::make_unique<asb_uci::type::CryptoSlotGroupType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CryptoSlotGroupType::destroy(uci::type::CryptoSlotGroupType& accessor) {
  delete dynamic_cast<asb_uci::type::CryptoSlotGroupType*>(&accessor);
}

} // namespace type

} // namespace uci

