/** @file PointingPlanWindowType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PointingPlanWindowType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommPointingType.h"
#include "asb_uci/type/CommScheduleAllocationID_Type.h"
#include "asb_uci/type/CommSystemID_Type.h"
#include "asb_uci/type/RoutePlanReferencesType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommPointingType.h"
#include "uci/type/CommScheduleAllocationID_Type.h"
#include "uci/type/CommSystemID_Type.h"
#include "uci/type/PointingPlanWindowType.h"
#include "uci/type/RoutePlanReferencesType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PointingPlanWindowType::PointingPlanWindowType()
  : routePlan_Accessor{boost::make_unique<RoutePlan>(1, SIZE_MAX)},
    commPointing_Accessor{boost::make_unique<CommPointing>(1, SIZE_MAX)} {
}

PointingPlanWindowType::~PointingPlanWindowType() = default;

void PointingPlanWindowType::copy(const uci::type::PointingPlanWindowType& accessor) {
  copyImpl(accessor, false);
}

void PointingPlanWindowType::copyImpl(const uci::type::PointingPlanWindowType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PointingPlanWindowType&>(accessor);
    if (accessorImpl.allocationID_Accessor) {
      setAllocationID(*(accessorImpl.allocationID_Accessor));
    } else {
      allocationID_Accessor.reset();
    }
    if (accessorImpl.commSystemID_Accessor) {
      setCommSystemID(*(accessorImpl.commSystemID_Accessor));
    } else {
      commSystemID_Accessor.reset();
    }
    setRoutePlan(*(accessorImpl.routePlan_Accessor));
    setCommPointing(*(accessorImpl.commPointing_Accessor));
  }
}

void PointingPlanWindowType::reset() noexcept {
  allocationID_Accessor.reset();
  commSystemID_Accessor.reset();
  routePlan_Accessor->reset();
  commPointing_Accessor->reset();
}

uci::type::CommScheduleAllocationID_Type& PointingPlanWindowType::getAllocationID_() const {
  if (allocationID_Accessor) {
    return *allocationID_Accessor;
  }
  throw uci::base::UCIException("Error in getAllocationID(): An attempt was made to get an optional field that was not enabled, call hasAllocationID() to determine if it is safe to call getAllocationID()");
}

const uci::type::CommScheduleAllocationID_Type& PointingPlanWindowType::getAllocationID() const {
  return getAllocationID_();
}

uci::type::CommScheduleAllocationID_Type& PointingPlanWindowType::getAllocationID() {
  return getAllocationID_();
}

uci::type::PointingPlanWindowType& PointingPlanWindowType::setAllocationID(const uci::type::CommScheduleAllocationID_Type& accessor) {
  enableAllocationID();
  if (&accessor != allocationID_Accessor.get()) {
    allocationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PointingPlanWindowType::hasAllocationID() const noexcept {
  return static_cast<bool>(allocationID_Accessor);
}

uci::type::CommScheduleAllocationID_Type& PointingPlanWindowType::enableAllocationID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commScheduleAllocationID_Type : type};
  if ((!allocationID_Accessor) || (allocationID_Accessor->getAccessorType() != requestedType)) {
    allocationID_Accessor = CommScheduleAllocationID_Type::create(requestedType);
    if (!allocationID_Accessor) {
      throw uci::base::UCIException("Error in enableAllocationID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *allocationID_Accessor;
}

uci::type::PointingPlanWindowType& PointingPlanWindowType::clearAllocationID() noexcept {
  allocationID_Accessor.reset();
  return *this;
}

uci::type::CommSystemID_Type& PointingPlanWindowType::getCommSystemID_() const {
  if (commSystemID_Accessor) {
    return *commSystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getCommSystemID(): An attempt was made to get an optional field that was not enabled, call hasCommSystemID() to determine if it is safe to call getCommSystemID()");
}

const uci::type::CommSystemID_Type& PointingPlanWindowType::getCommSystemID() const {
  return getCommSystemID_();
}

uci::type::CommSystemID_Type& PointingPlanWindowType::getCommSystemID() {
  return getCommSystemID_();
}

uci::type::PointingPlanWindowType& PointingPlanWindowType::setCommSystemID(const uci::type::CommSystemID_Type& accessor) {
  enableCommSystemID();
  if (&accessor != commSystemID_Accessor.get()) {
    commSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PointingPlanWindowType::hasCommSystemID() const noexcept {
  return static_cast<bool>(commSystemID_Accessor);
}

uci::type::CommSystemID_Type& PointingPlanWindowType::enableCommSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commSystemID_Type : type};
  if ((!commSystemID_Accessor) || (commSystemID_Accessor->getAccessorType() != requestedType)) {
    commSystemID_Accessor = CommSystemID_Type::create(requestedType);
    if (!commSystemID_Accessor) {
      throw uci::base::UCIException("Error in enableCommSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commSystemID_Accessor;
}

uci::type::PointingPlanWindowType& PointingPlanWindowType::clearCommSystemID() noexcept {
  commSystemID_Accessor.reset();
  return *this;
}

const uci::type::PointingPlanWindowType::RoutePlan& PointingPlanWindowType::getRoutePlan() const {
  return *routePlan_Accessor;
}

uci::type::PointingPlanWindowType::RoutePlan& PointingPlanWindowType::getRoutePlan() {
  return *routePlan_Accessor;
}

uci::type::PointingPlanWindowType& PointingPlanWindowType::setRoutePlan(const uci::type::PointingPlanWindowType::RoutePlan& accessor) {
  if (&accessor != routePlan_Accessor.get()) {
    routePlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PointingPlanWindowType::CommPointing& PointingPlanWindowType::getCommPointing() const {
  return *commPointing_Accessor;
}

uci::type::PointingPlanWindowType::CommPointing& PointingPlanWindowType::getCommPointing() {
  return *commPointing_Accessor;
}

uci::type::PointingPlanWindowType& PointingPlanWindowType::setCommPointing(const uci::type::PointingPlanWindowType::CommPointing& accessor) {
  if (&accessor != commPointing_Accessor.get()) {
    commPointing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PointingPlanWindowType> PointingPlanWindowType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pointingPlanWindowType : type};
  return (requestedType == uci::type::accessorType::pointingPlanWindowType) ? boost::make_unique<PointingPlanWindowType>() : nullptr;
}

/**  */
namespace PointingPlanWindowType_Names {

constexpr const char* Extern_Type_Name{"PointingPlanWindowType"};
constexpr const char* AllocationID_Name{"AllocationID"};
constexpr const char* CommSystemID_Name{"CommSystemID"};
constexpr const char* RoutePlan_Name{"RoutePlan"};
constexpr const char* CommPointing_Name{"CommPointing"};

} // namespace PointingPlanWindowType_Names

void PointingPlanWindowType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PointingPlanWindowType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PointingPlanWindowType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PointingPlanWindowType_Names::AllocationID_Name) {
      CommScheduleAllocationID_Type::deserialize(valueType.second, accessor.enableAllocationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PointingPlanWindowType_Names::CommSystemID_Name) {
      CommSystemID_Type::deserialize(valueType.second, accessor.enableCommSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PointingPlanWindowType_Names::RoutePlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PointingPlanWindowType::RoutePlan& boundedList = accessor.getRoutePlan();
        const uci::type::PointingPlanWindowType::RoutePlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RoutePlanReferencesType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PointingPlanWindowType_Names::CommPointing_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PointingPlanWindowType::CommPointing& boundedList = accessor.getCommPointing();
        const uci::type::PointingPlanWindowType::CommPointing::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommPointingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PointingPlanWindowType::serialize(const uci::type::PointingPlanWindowType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PointingPlanWindowType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PointingPlanWindowType_Names::Extern_Type_Name);
  }
  if (accessor.hasAllocationID()) {
    CommScheduleAllocationID_Type::serialize(accessor.getAllocationID(), node, PointingPlanWindowType_Names::AllocationID_Name);
  }
  if (accessor.hasCommSystemID()) {
    CommSystemID_Type::serialize(accessor.getCommSystemID(), node, PointingPlanWindowType_Names::CommSystemID_Name);
  }
  {
    const uci::type::PointingPlanWindowType::RoutePlan& boundedList = accessor.getRoutePlan();
    for (uci::type::PointingPlanWindowType::RoutePlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RoutePlanReferencesType::serialize(boundedList.at(i), node, PointingPlanWindowType_Names::RoutePlan_Name);
    }
  }
  {
    const uci::type::PointingPlanWindowType::CommPointing& boundedList = accessor.getCommPointing();
    for (uci::type::PointingPlanWindowType::CommPointing::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommPointingType::serialize(boundedList.at(i), node, PointingPlanWindowType_Names::CommPointing_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PointingPlanWindowType& PointingPlanWindowType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PointingPlanWindowType>().release());
}

uci::type::PointingPlanWindowType& PointingPlanWindowType::create(const uci::type::PointingPlanWindowType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PointingPlanWindowType> newAccessor{boost::make_unique<asb_uci::type::PointingPlanWindowType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PointingPlanWindowType::destroy(uci::type::PointingPlanWindowType& accessor) {
  delete dynamic_cast<asb_uci::type::PointingPlanWindowType*>(&accessor);
}

} // namespace type

} // namespace uci

