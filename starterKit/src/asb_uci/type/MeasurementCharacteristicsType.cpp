/** @file MeasurementCharacteristicsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MeasurementCharacteristicsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AltitudeReferenceUncertaintyType.h"
#include "../../../include/asb_uci/type/FOV_ExtentType.h"
#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/type/MeasurementDurationType.h"
#include "../../../include/asb_uci/type/NameValuePairType.h"
#include "../../../include/asb_uci/type/PassiveActiveEnum.h"
#include "../../../include/asb_uci/type/PathIdentificationEnum.h"
#include "../../../include/asb_uci/type/RCS_MedianType.h"
#include "../../../include/asb_uci/type/SourceCharacteristicsType.h"
#include "../../../include/asb_uci/type/SourceCoverageType.h"
#include "../../../include/asb_uci/type/SourceResolutionType.h"
#include "../../../include/asb_uci/type/SpaceObjectVisualDataType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AltitudeReferenceUncertaintyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FOV_ExtentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IrradianceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MeasurementCharacteristicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MeasurementDurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NameValuePairType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PassiveActiveEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PathIdentificationEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RCS_MedianType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SourceCharacteristicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SourceCoverageType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SourceResolutionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpaceObjectVisualDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MeasurementCharacteristicsType::MeasurementCharacteristicsType()
  : radarCrossSection_Accessor{boost::make_unique<RadarCrossSection>(0, 2)},
    customCharacteristics_Accessor{boost::make_unique<CustomCharacteristics>(0, SIZE_MAX)} {
}

MeasurementCharacteristicsType::~MeasurementCharacteristicsType() = default;

void MeasurementCharacteristicsType::copy(const uci::type::MeasurementCharacteristicsType& accessor) {
  copyImpl(accessor, false);
}

void MeasurementCharacteristicsType::copyImpl(const uci::type::MeasurementCharacteristicsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MeasurementCharacteristicsType&>(accessor);
    if (accessorImpl.passiveActiveIndicator_Accessor) {
      setPassiveActiveIndicator(*(accessorImpl.passiveActiveIndicator_Accessor));
    } else {
      passiveActiveIndicator_Accessor.reset();
    }
    if (accessorImpl.measurementDuration_Accessor) {
      setMeasurementDuration(*(accessorImpl.measurementDuration_Accessor));
    } else {
      measurementDuration_Accessor.reset();
    }
    if (accessorImpl.pathIdentification_Accessor) {
      setPathIdentification(*(accessorImpl.pathIdentification_Accessor));
    } else {
      pathIdentification_Accessor.reset();
    }
    if (accessorImpl.sourceCoverage_Accessor) {
      setSourceCoverage(*(accessorImpl.sourceCoverage_Accessor));
    } else {
      sourceCoverage_Accessor.reset();
    }
    if (accessorImpl.altitudeReported_Accessor) {
      setAltitudeReported(*(accessorImpl.altitudeReported_Accessor));
    } else {
      altitudeReported_Accessor.reset();
    }
    if (accessorImpl.sourceAngularExtent_Accessor) {
      setSourceAngularExtent(*(accessorImpl.sourceAngularExtent_Accessor));
    } else {
      sourceAngularExtent_Accessor.reset();
    }
    if (accessorImpl.sourceResolution_Accessor) {
      setSourceResolution(*(accessorImpl.sourceResolution_Accessor));
    } else {
      sourceResolution_Accessor.reset();
    }
    if (accessorImpl.hasCenterFrequency()) {
      setCenterFrequency(accessorImpl.getCenterFrequency());
    } else {
      clearCenterFrequency();
    }
    if (accessorImpl.bandwidth_Accessor) {
      setBandwidth(*(accessorImpl.bandwidth_Accessor));
    } else {
      bandwidth_Accessor.reset();
    }
    if (accessorImpl.sourceSpecifiedCharacteristics_Accessor) {
      setSourceSpecifiedCharacteristics(*(accessorImpl.sourceSpecifiedCharacteristics_Accessor));
    } else {
      sourceSpecifiedCharacteristics_Accessor.reset();
    }
    if (accessorImpl.hasTargetIrradiance()) {
      setTargetIrradiance(accessorImpl.getTargetIrradiance());
    } else {
      clearTargetIrradiance();
    }
    if (accessorImpl.hasProbabilityOfDetection()) {
      setProbabilityOfDetection(accessorImpl.getProbabilityOfDetection());
    } else {
      clearProbabilityOfDetection();
    }
    if (accessorImpl.hasProbabilityOfFalseAlarm()) {
      setProbabilityOfFalseAlarm(accessorImpl.getProbabilityOfFalseAlarm());
    } else {
      clearProbabilityOfFalseAlarm();
    }
    if (accessorImpl.hasSNR()) {
      setSNR(accessorImpl.getSNR());
    } else {
      clearSNR();
    }
    if (accessorImpl.hasSBR()) {
      setSBR(accessorImpl.getSBR());
    } else {
      clearSBR();
    }
    setRadarCrossSection(*(accessorImpl.radarCrossSection_Accessor));
    if (accessorImpl.spaceObjectVisualData_Accessor) {
      setSpaceObjectVisualData(*(accessorImpl.spaceObjectVisualData_Accessor));
    } else {
      spaceObjectVisualData_Accessor.reset();
    }
    setCustomCharacteristics(*(accessorImpl.customCharacteristics_Accessor));
  }
}

void MeasurementCharacteristicsType::reset() noexcept {
  passiveActiveIndicator_Accessor.reset();
  measurementDuration_Accessor.reset();
  pathIdentification_Accessor.reset();
  sourceCoverage_Accessor.reset();
  altitudeReported_Accessor.reset();
  sourceAngularExtent_Accessor.reset();
  sourceResolution_Accessor.reset();
  clearCenterFrequency();
  bandwidth_Accessor.reset();
  sourceSpecifiedCharacteristics_Accessor.reset();
  clearTargetIrradiance();
  clearProbabilityOfDetection();
  clearProbabilityOfFalseAlarm();
  clearSNR();
  clearSBR();
  radarCrossSection_Accessor->reset();
  spaceObjectVisualData_Accessor.reset();
  customCharacteristics_Accessor->reset();
}

uci::type::PassiveActiveEnum& MeasurementCharacteristicsType::getPassiveActiveIndicator_() const {
  if (passiveActiveIndicator_Accessor) {
    return *passiveActiveIndicator_Accessor;
  }
  throw uci::base::UCIException("Error in getPassiveActiveIndicator(): An attempt was made to get an optional field that was not enabled, call hasPassiveActiveIndicator() to determine if it is safe to call getPassiveActiveIndicator()");
}

const uci::type::PassiveActiveEnum& MeasurementCharacteristicsType::getPassiveActiveIndicator() const {
  return getPassiveActiveIndicator_();
}

uci::type::PassiveActiveEnum& MeasurementCharacteristicsType::getPassiveActiveIndicator() {
  return getPassiveActiveIndicator_();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setPassiveActiveIndicator(const uci::type::PassiveActiveEnum& accessor) {
  enablePassiveActiveIndicator();
  if (&accessor != passiveActiveIndicator_Accessor.get()) {
    passiveActiveIndicator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setPassiveActiveIndicator(const uci::type::PassiveActiveEnum::EnumerationItem value) {
  enablePassiveActiveIndicator().setValue(value);
  return *this;
}

bool MeasurementCharacteristicsType::hasPassiveActiveIndicator() const noexcept {
  return static_cast<bool>(passiveActiveIndicator_Accessor);
}

uci::type::PassiveActiveEnum& MeasurementCharacteristicsType::enablePassiveActiveIndicator(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::passiveActiveEnum : type};
  if ((!passiveActiveIndicator_Accessor) || (passiveActiveIndicator_Accessor->getAccessorType() != requestedType)) {
    passiveActiveIndicator_Accessor = PassiveActiveEnum::create(requestedType);
    if (!passiveActiveIndicator_Accessor) {
      throw uci::base::UCIException("Error in enablePassiveActiveIndicator(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *passiveActiveIndicator_Accessor;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearPassiveActiveIndicator() noexcept {
  passiveActiveIndicator_Accessor.reset();
  return *this;
}

uci::type::MeasurementDurationType& MeasurementCharacteristicsType::getMeasurementDuration_() const {
  if (measurementDuration_Accessor) {
    return *measurementDuration_Accessor;
  }
  throw uci::base::UCIException("Error in getMeasurementDuration(): An attempt was made to get an optional field that was not enabled, call hasMeasurementDuration() to determine if it is safe to call getMeasurementDuration()");
}

const uci::type::MeasurementDurationType& MeasurementCharacteristicsType::getMeasurementDuration() const {
  return getMeasurementDuration_();
}

uci::type::MeasurementDurationType& MeasurementCharacteristicsType::getMeasurementDuration() {
  return getMeasurementDuration_();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setMeasurementDuration(const uci::type::MeasurementDurationType& accessor) {
  enableMeasurementDuration();
  if (&accessor != measurementDuration_Accessor.get()) {
    measurementDuration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementCharacteristicsType::hasMeasurementDuration() const noexcept {
  return static_cast<bool>(measurementDuration_Accessor);
}

uci::type::MeasurementDurationType& MeasurementCharacteristicsType::enableMeasurementDuration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::measurementDurationType : type};
  if ((!measurementDuration_Accessor) || (measurementDuration_Accessor->getAccessorType() != requestedType)) {
    measurementDuration_Accessor = MeasurementDurationType::create(requestedType);
    if (!measurementDuration_Accessor) {
      throw uci::base::UCIException("Error in enableMeasurementDuration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *measurementDuration_Accessor;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearMeasurementDuration() noexcept {
  measurementDuration_Accessor.reset();
  return *this;
}

uci::type::PathIdentificationEnum& MeasurementCharacteristicsType::getPathIdentification_() const {
  if (pathIdentification_Accessor) {
    return *pathIdentification_Accessor;
  }
  throw uci::base::UCIException("Error in getPathIdentification(): An attempt was made to get an optional field that was not enabled, call hasPathIdentification() to determine if it is safe to call getPathIdentification()");
}

const uci::type::PathIdentificationEnum& MeasurementCharacteristicsType::getPathIdentification() const {
  return getPathIdentification_();
}

uci::type::PathIdentificationEnum& MeasurementCharacteristicsType::getPathIdentification() {
  return getPathIdentification_();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setPathIdentification(const uci::type::PathIdentificationEnum& accessor) {
  enablePathIdentification();
  if (&accessor != pathIdentification_Accessor.get()) {
    pathIdentification_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setPathIdentification(const uci::type::PathIdentificationEnum::EnumerationItem value) {
  enablePathIdentification().setValue(value);
  return *this;
}

bool MeasurementCharacteristicsType::hasPathIdentification() const noexcept {
  return static_cast<bool>(pathIdentification_Accessor);
}

uci::type::PathIdentificationEnum& MeasurementCharacteristicsType::enablePathIdentification(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pathIdentificationEnum : type};
  if ((!pathIdentification_Accessor) || (pathIdentification_Accessor->getAccessorType() != requestedType)) {
    pathIdentification_Accessor = PathIdentificationEnum::create(requestedType);
    if (!pathIdentification_Accessor) {
      throw uci::base::UCIException("Error in enablePathIdentification(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pathIdentification_Accessor;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearPathIdentification() noexcept {
  pathIdentification_Accessor.reset();
  return *this;
}

uci::type::SourceCoverageType& MeasurementCharacteristicsType::getSourceCoverage_() const {
  if (sourceCoverage_Accessor) {
    return *sourceCoverage_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceCoverage(): An attempt was made to get an optional field that was not enabled, call hasSourceCoverage() to determine if it is safe to call getSourceCoverage()");
}

const uci::type::SourceCoverageType& MeasurementCharacteristicsType::getSourceCoverage() const {
  return getSourceCoverage_();
}

uci::type::SourceCoverageType& MeasurementCharacteristicsType::getSourceCoverage() {
  return getSourceCoverage_();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setSourceCoverage(const uci::type::SourceCoverageType& accessor) {
  enableSourceCoverage();
  if (&accessor != sourceCoverage_Accessor.get()) {
    sourceCoverage_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementCharacteristicsType::hasSourceCoverage() const noexcept {
  return static_cast<bool>(sourceCoverage_Accessor);
}

uci::type::SourceCoverageType& MeasurementCharacteristicsType::enableSourceCoverage(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceCoverageType : type};
  if ((!sourceCoverage_Accessor) || (sourceCoverage_Accessor->getAccessorType() != requestedType)) {
    sourceCoverage_Accessor = SourceCoverageType::create(requestedType);
    if (!sourceCoverage_Accessor) {
      throw uci::base::UCIException("Error in enableSourceCoverage(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceCoverage_Accessor;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearSourceCoverage() noexcept {
  sourceCoverage_Accessor.reset();
  return *this;
}

uci::type::AltitudeReferenceUncertaintyType& MeasurementCharacteristicsType::getAltitudeReported_() const {
  if (altitudeReported_Accessor) {
    return *altitudeReported_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeReported(): An attempt was made to get an optional field that was not enabled, call hasAltitudeReported() to determine if it is safe to call getAltitudeReported()");
}

const uci::type::AltitudeReferenceUncertaintyType& MeasurementCharacteristicsType::getAltitudeReported() const {
  return getAltitudeReported_();
}

uci::type::AltitudeReferenceUncertaintyType& MeasurementCharacteristicsType::getAltitudeReported() {
  return getAltitudeReported_();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setAltitudeReported(const uci::type::AltitudeReferenceUncertaintyType& accessor) {
  enableAltitudeReported();
  if (&accessor != altitudeReported_Accessor.get()) {
    altitudeReported_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementCharacteristicsType::hasAltitudeReported() const noexcept {
  return static_cast<bool>(altitudeReported_Accessor);
}

uci::type::AltitudeReferenceUncertaintyType& MeasurementCharacteristicsType::enableAltitudeReported(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::altitudeReferenceUncertaintyType : type};
  if ((!altitudeReported_Accessor) || (altitudeReported_Accessor->getAccessorType() != requestedType)) {
    altitudeReported_Accessor = AltitudeReferenceUncertaintyType::create(requestedType);
    if (!altitudeReported_Accessor) {
      throw uci::base::UCIException("Error in enableAltitudeReported(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *altitudeReported_Accessor;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearAltitudeReported() noexcept {
  altitudeReported_Accessor.reset();
  return *this;
}

uci::type::FOV_ExtentType& MeasurementCharacteristicsType::getSourceAngularExtent_() const {
  if (sourceAngularExtent_Accessor) {
    return *sourceAngularExtent_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceAngularExtent(): An attempt was made to get an optional field that was not enabled, call hasSourceAngularExtent() to determine if it is safe to call getSourceAngularExtent()");
}

const uci::type::FOV_ExtentType& MeasurementCharacteristicsType::getSourceAngularExtent() const {
  return getSourceAngularExtent_();
}

uci::type::FOV_ExtentType& MeasurementCharacteristicsType::getSourceAngularExtent() {
  return getSourceAngularExtent_();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setSourceAngularExtent(const uci::type::FOV_ExtentType& accessor) {
  enableSourceAngularExtent();
  if (&accessor != sourceAngularExtent_Accessor.get()) {
    sourceAngularExtent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementCharacteristicsType::hasSourceAngularExtent() const noexcept {
  return static_cast<bool>(sourceAngularExtent_Accessor);
}

uci::type::FOV_ExtentType& MeasurementCharacteristicsType::enableSourceAngularExtent(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fOV_ExtentType : type};
  if ((!sourceAngularExtent_Accessor) || (sourceAngularExtent_Accessor->getAccessorType() != requestedType)) {
    sourceAngularExtent_Accessor = FOV_ExtentType::create(requestedType);
    if (!sourceAngularExtent_Accessor) {
      throw uci::base::UCIException("Error in enableSourceAngularExtent(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceAngularExtent_Accessor;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearSourceAngularExtent() noexcept {
  sourceAngularExtent_Accessor.reset();
  return *this;
}

uci::type::SourceResolutionType& MeasurementCharacteristicsType::getSourceResolution_() const {
  if (sourceResolution_Accessor) {
    return *sourceResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceResolution(): An attempt was made to get an optional field that was not enabled, call hasSourceResolution() to determine if it is safe to call getSourceResolution()");
}

const uci::type::SourceResolutionType& MeasurementCharacteristicsType::getSourceResolution() const {
  return getSourceResolution_();
}

uci::type::SourceResolutionType& MeasurementCharacteristicsType::getSourceResolution() {
  return getSourceResolution_();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setSourceResolution(const uci::type::SourceResolutionType& accessor) {
  enableSourceResolution();
  if (&accessor != sourceResolution_Accessor.get()) {
    sourceResolution_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementCharacteristicsType::hasSourceResolution() const noexcept {
  return static_cast<bool>(sourceResolution_Accessor);
}

uci::type::SourceResolutionType& MeasurementCharacteristicsType::enableSourceResolution(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceResolutionType : type};
  if ((!sourceResolution_Accessor) || (sourceResolution_Accessor->getAccessorType() != requestedType)) {
    sourceResolution_Accessor = SourceResolutionType::create(requestedType);
    if (!sourceResolution_Accessor) {
      throw uci::base::UCIException("Error in enableSourceResolution(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceResolution_Accessor;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearSourceResolution() noexcept {
  sourceResolution_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue MeasurementCharacteristicsType::getCenterFrequency() const {
  if (centerFrequency_Accessor) {
    return *centerFrequency_Accessor;
  }
  throw uci::base::UCIException("Error in getCenterFrequency(): An attempt was made to get an optional field that was not enabled, call hasCenterFrequency() to determine if it is safe to call getCenterFrequency()");
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setCenterFrequency(uci::type::FrequencyTypeValue value) {
  centerFrequency_Accessor = value;
  return *this;
}

bool MeasurementCharacteristicsType::hasCenterFrequency() const noexcept {
  return centerFrequency_Accessor.has_value();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearCenterFrequency() noexcept {
  centerFrequency_Accessor.reset();
  return *this;
}

uci::type::FrequencyRangeType& MeasurementCharacteristicsType::getBandwidth_() const {
  if (bandwidth_Accessor) {
    return *bandwidth_Accessor;
  }
  throw uci::base::UCIException("Error in getBandwidth(): An attempt was made to get an optional field that was not enabled, call hasBandwidth() to determine if it is safe to call getBandwidth()");
}

const uci::type::FrequencyRangeType& MeasurementCharacteristicsType::getBandwidth() const {
  return getBandwidth_();
}

uci::type::FrequencyRangeType& MeasurementCharacteristicsType::getBandwidth() {
  return getBandwidth_();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setBandwidth(const uci::type::FrequencyRangeType& accessor) {
  enableBandwidth();
  if (&accessor != bandwidth_Accessor.get()) {
    bandwidth_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementCharacteristicsType::hasBandwidth() const noexcept {
  return static_cast<bool>(bandwidth_Accessor);
}

uci::type::FrequencyRangeType& MeasurementCharacteristicsType::enableBandwidth(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyRangeType : type};
  if ((!bandwidth_Accessor) || (bandwidth_Accessor->getAccessorType() != requestedType)) {
    bandwidth_Accessor = FrequencyRangeType::create(requestedType);
    if (!bandwidth_Accessor) {
      throw uci::base::UCIException("Error in enableBandwidth(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *bandwidth_Accessor;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearBandwidth() noexcept {
  bandwidth_Accessor.reset();
  return *this;
}

uci::type::SourceCharacteristicsType& MeasurementCharacteristicsType::getSourceSpecifiedCharacteristics_() const {
  if (sourceSpecifiedCharacteristics_Accessor) {
    return *sourceSpecifiedCharacteristics_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceSpecifiedCharacteristics(): An attempt was made to get an optional field that was not enabled, call hasSourceSpecifiedCharacteristics() to determine if it is safe to call getSourceSpecifiedCharacteristics()");
}

const uci::type::SourceCharacteristicsType& MeasurementCharacteristicsType::getSourceSpecifiedCharacteristics() const {
  return getSourceSpecifiedCharacteristics_();
}

uci::type::SourceCharacteristicsType& MeasurementCharacteristicsType::getSourceSpecifiedCharacteristics() {
  return getSourceSpecifiedCharacteristics_();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setSourceSpecifiedCharacteristics(const uci::type::SourceCharacteristicsType& accessor) {
  enableSourceSpecifiedCharacteristics();
  if (&accessor != sourceSpecifiedCharacteristics_Accessor.get()) {
    sourceSpecifiedCharacteristics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementCharacteristicsType::hasSourceSpecifiedCharacteristics() const noexcept {
  return static_cast<bool>(sourceSpecifiedCharacteristics_Accessor);
}

uci::type::SourceCharacteristicsType& MeasurementCharacteristicsType::enableSourceSpecifiedCharacteristics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceCharacteristicsType : type};
  if ((!sourceSpecifiedCharacteristics_Accessor) || (sourceSpecifiedCharacteristics_Accessor->getAccessorType() != requestedType)) {
    sourceSpecifiedCharacteristics_Accessor = SourceCharacteristicsType::create(requestedType);
    if (!sourceSpecifiedCharacteristics_Accessor) {
      throw uci::base::UCIException("Error in enableSourceSpecifiedCharacteristics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceSpecifiedCharacteristics_Accessor;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearSourceSpecifiedCharacteristics() noexcept {
  sourceSpecifiedCharacteristics_Accessor.reset();
  return *this;
}

uci::type::IrradianceTypeValue MeasurementCharacteristicsType::getTargetIrradiance() const {
  if (targetIrradiance_Accessor) {
    return *targetIrradiance_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetIrradiance(): An attempt was made to get an optional field that was not enabled, call hasTargetIrradiance() to determine if it is safe to call getTargetIrradiance()");
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setTargetIrradiance(uci::type::IrradianceTypeValue value) {
  targetIrradiance_Accessor = value;
  return *this;
}

bool MeasurementCharacteristicsType::hasTargetIrradiance() const noexcept {
  return targetIrradiance_Accessor.has_value();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearTargetIrradiance() noexcept {
  targetIrradiance_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue MeasurementCharacteristicsType::getProbabilityOfDetection() const {
  if (probabilityOfDetection_Accessor) {
    return *probabilityOfDetection_Accessor;
  }
  throw uci::base::UCIException("Error in getProbabilityOfDetection(): An attempt was made to get an optional field that was not enabled, call hasProbabilityOfDetection() to determine if it is safe to call getProbabilityOfDetection()");
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setProbabilityOfDetection(uci::type::PercentTypeValue value) {
  probabilityOfDetection_Accessor = value;
  return *this;
}

bool MeasurementCharacteristicsType::hasProbabilityOfDetection() const noexcept {
  return probabilityOfDetection_Accessor.has_value();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearProbabilityOfDetection() noexcept {
  probabilityOfDetection_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue MeasurementCharacteristicsType::getProbabilityOfFalseAlarm() const {
  if (probabilityOfFalseAlarm_Accessor) {
    return *probabilityOfFalseAlarm_Accessor;
  }
  throw uci::base::UCIException("Error in getProbabilityOfFalseAlarm(): An attempt was made to get an optional field that was not enabled, call hasProbabilityOfFalseAlarm() to determine if it is safe to call getProbabilityOfFalseAlarm()");
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setProbabilityOfFalseAlarm(uci::type::PercentTypeValue value) {
  probabilityOfFalseAlarm_Accessor = value;
  return *this;
}

bool MeasurementCharacteristicsType::hasProbabilityOfFalseAlarm() const noexcept {
  return probabilityOfFalseAlarm_Accessor.has_value();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearProbabilityOfFalseAlarm() noexcept {
  probabilityOfFalseAlarm_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue MeasurementCharacteristicsType::getSNR() const {
  if (sNR_Accessor) {
    return *sNR_Accessor;
  }
  throw uci::base::UCIException("Error in getSNR(): An attempt was made to get an optional field that was not enabled, call hasSNR() to determine if it is safe to call getSNR()");
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setSNR(uci::type::DecibelTypeValue value) {
  sNR_Accessor = value;
  return *this;
}

bool MeasurementCharacteristicsType::hasSNR() const noexcept {
  return sNR_Accessor.has_value();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearSNR() noexcept {
  sNR_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue MeasurementCharacteristicsType::getSBR() const {
  if (sBR_Accessor) {
    return *sBR_Accessor;
  }
  throw uci::base::UCIException("Error in getSBR(): An attempt was made to get an optional field that was not enabled, call hasSBR() to determine if it is safe to call getSBR()");
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setSBR(uci::type::DecibelTypeValue value) {
  sBR_Accessor = value;
  return *this;
}

bool MeasurementCharacteristicsType::hasSBR() const noexcept {
  return sBR_Accessor.has_value();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearSBR() noexcept {
  sBR_Accessor.reset();
  return *this;
}

const uci::type::MeasurementCharacteristicsType::RadarCrossSection& MeasurementCharacteristicsType::getRadarCrossSection() const {
  return *radarCrossSection_Accessor;
}

uci::type::MeasurementCharacteristicsType::RadarCrossSection& MeasurementCharacteristicsType::getRadarCrossSection() {
  return *radarCrossSection_Accessor;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setRadarCrossSection(const uci::type::MeasurementCharacteristicsType::RadarCrossSection& accessor) {
  if (&accessor != radarCrossSection_Accessor.get()) {
    radarCrossSection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SpaceObjectVisualDataType& MeasurementCharacteristicsType::getSpaceObjectVisualData_() const {
  if (spaceObjectVisualData_Accessor) {
    return *spaceObjectVisualData_Accessor;
  }
  throw uci::base::UCIException("Error in getSpaceObjectVisualData(): An attempt was made to get an optional field that was not enabled, call hasSpaceObjectVisualData() to determine if it is safe to call getSpaceObjectVisualData()");
}

const uci::type::SpaceObjectVisualDataType& MeasurementCharacteristicsType::getSpaceObjectVisualData() const {
  return getSpaceObjectVisualData_();
}

uci::type::SpaceObjectVisualDataType& MeasurementCharacteristicsType::getSpaceObjectVisualData() {
  return getSpaceObjectVisualData_();
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setSpaceObjectVisualData(const uci::type::SpaceObjectVisualDataType& accessor) {
  enableSpaceObjectVisualData();
  if (&accessor != spaceObjectVisualData_Accessor.get()) {
    spaceObjectVisualData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MeasurementCharacteristicsType::hasSpaceObjectVisualData() const noexcept {
  return static_cast<bool>(spaceObjectVisualData_Accessor);
}

uci::type::SpaceObjectVisualDataType& MeasurementCharacteristicsType::enableSpaceObjectVisualData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::spaceObjectVisualDataType : type};
  if ((!spaceObjectVisualData_Accessor) || (spaceObjectVisualData_Accessor->getAccessorType() != requestedType)) {
    spaceObjectVisualData_Accessor = SpaceObjectVisualDataType::create(requestedType);
    if (!spaceObjectVisualData_Accessor) {
      throw uci::base::UCIException("Error in enableSpaceObjectVisualData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *spaceObjectVisualData_Accessor;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::clearSpaceObjectVisualData() noexcept {
  spaceObjectVisualData_Accessor.reset();
  return *this;
}

const uci::type::MeasurementCharacteristicsType::CustomCharacteristics& MeasurementCharacteristicsType::getCustomCharacteristics() const {
  return *customCharacteristics_Accessor;
}

uci::type::MeasurementCharacteristicsType::CustomCharacteristics& MeasurementCharacteristicsType::getCustomCharacteristics() {
  return *customCharacteristics_Accessor;
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::setCustomCharacteristics(const uci::type::MeasurementCharacteristicsType::CustomCharacteristics& accessor) {
  if (&accessor != customCharacteristics_Accessor.get()) {
    customCharacteristics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<MeasurementCharacteristicsType> MeasurementCharacteristicsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::measurementCharacteristicsType : type};
  return (requestedType == uci::type::accessorType::measurementCharacteristicsType) ? boost::make_unique<MeasurementCharacteristicsType>() : nullptr;
}

/**  */
namespace MeasurementCharacteristicsType_Names {

constexpr const char* Extern_Type_Name{"MeasurementCharacteristicsType"};
constexpr const char* PassiveActiveIndicator_Name{"PassiveActiveIndicator"};
constexpr const char* MeasurementDuration_Name{"MeasurementDuration"};
constexpr const char* PathIdentification_Name{"PathIdentification"};
constexpr const char* SourceCoverage_Name{"SourceCoverage"};
constexpr const char* AltitudeReported_Name{"AltitudeReported"};
constexpr const char* SourceAngularExtent_Name{"SourceAngularExtent"};
constexpr const char* SourceResolution_Name{"SourceResolution"};
constexpr const char* CenterFrequency_Name{"CenterFrequency"};
constexpr const char* Bandwidth_Name{"Bandwidth"};
constexpr const char* SourceSpecifiedCharacteristics_Name{"SourceSpecifiedCharacteristics"};
constexpr const char* TargetIrradiance_Name{"TargetIrradiance"};
constexpr const char* ProbabilityOfDetection_Name{"ProbabilityOfDetection"};
constexpr const char* ProbabilityOfFalseAlarm_Name{"ProbabilityOfFalseAlarm"};
constexpr const char* SNR_Name{"SNR"};
constexpr const char* SBR_Name{"SBR"};
constexpr const char* RadarCrossSection_Name{"RadarCrossSection"};
constexpr const char* SpaceObjectVisualData_Name{"SpaceObjectVisualData"};
constexpr const char* CustomCharacteristics_Name{"CustomCharacteristics"};

} // namespace MeasurementCharacteristicsType_Names

void MeasurementCharacteristicsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MeasurementCharacteristicsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MeasurementCharacteristicsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::PassiveActiveIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePassiveActiveIndicator().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::MeasurementDuration_Name) {
      MeasurementDurationType::deserialize(valueType.second, accessor.enableMeasurementDuration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::PathIdentification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePathIdentification().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SourceCoverage_Name) {
      SourceCoverageType::deserialize(valueType.second, accessor.enableSourceCoverage(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::AltitudeReported_Name) {
      AltitudeReferenceUncertaintyType::deserialize(valueType.second, accessor.enableAltitudeReported(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SourceAngularExtent_Name) {
      FOV_ExtentType::deserialize(valueType.second, accessor.enableSourceAngularExtent(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SourceResolution_Name) {
      SourceResolutionType::deserialize(valueType.second, accessor.enableSourceResolution(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::CenterFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCenterFrequency(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::Bandwidth_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableBandwidth(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SourceSpecifiedCharacteristics_Name) {
      SourceCharacteristicsType::deserialize(valueType.second, accessor.enableSourceSpecifiedCharacteristics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::TargetIrradiance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetIrradiance(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::ProbabilityOfDetection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProbabilityOfDetection(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::ProbabilityOfFalseAlarm_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProbabilityOfFalseAlarm(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SNR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSNR(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SBR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSBR(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::RadarCrossSection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MeasurementCharacteristicsType::RadarCrossSection& boundedList = accessor.getRadarCrossSection();
        const uci::type::MeasurementCharacteristicsType::RadarCrossSection::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RCS_MedianType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SpaceObjectVisualData_Name) {
      SpaceObjectVisualDataType::deserialize(valueType.second, accessor.enableSpaceObjectVisualData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::CustomCharacteristics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MeasurementCharacteristicsType::CustomCharacteristics& boundedList = accessor.getCustomCharacteristics();
        const uci::type::MeasurementCharacteristicsType::CustomCharacteristics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string MeasurementCharacteristicsType::serialize(const uci::type::MeasurementCharacteristicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MeasurementCharacteristicsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MeasurementCharacteristicsType_Names::Extern_Type_Name);
  }
  if (accessor.hasPassiveActiveIndicator()) {
    PassiveActiveEnum::serialize(accessor.getPassiveActiveIndicator(), node, MeasurementCharacteristicsType_Names::PassiveActiveIndicator_Name, false);
  }
  if (accessor.hasMeasurementDuration()) {
    MeasurementDurationType::serialize(accessor.getMeasurementDuration(), node, MeasurementCharacteristicsType_Names::MeasurementDuration_Name);
  }
  if (accessor.hasPathIdentification()) {
    PathIdentificationEnum::serialize(accessor.getPathIdentification(), node, MeasurementCharacteristicsType_Names::PathIdentification_Name, false);
  }
  if (accessor.hasSourceCoverage()) {
    SourceCoverageType::serialize(accessor.getSourceCoverage(), node, MeasurementCharacteristicsType_Names::SourceCoverage_Name);
  }
  if (accessor.hasAltitudeReported()) {
    AltitudeReferenceUncertaintyType::serialize(accessor.getAltitudeReported(), node, MeasurementCharacteristicsType_Names::AltitudeReported_Name);
  }
  if (accessor.hasSourceAngularExtent()) {
    FOV_ExtentType::serialize(accessor.getSourceAngularExtent(), node, MeasurementCharacteristicsType_Names::SourceAngularExtent_Name);
  }
  if (accessor.hasSourceResolution()) {
    SourceResolutionType::serialize(accessor.getSourceResolution(), node, MeasurementCharacteristicsType_Names::SourceResolution_Name);
  }
  if (accessor.hasCenterFrequency()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCenterFrequency(), node, MeasurementCharacteristicsType_Names::CenterFrequency_Name);
  }
  if (accessor.hasBandwidth()) {
    FrequencyRangeType::serialize(accessor.getBandwidth(), node, MeasurementCharacteristicsType_Names::Bandwidth_Name);
  }
  if (accessor.hasSourceSpecifiedCharacteristics()) {
    SourceCharacteristicsType::serialize(accessor.getSourceSpecifiedCharacteristics(), node, MeasurementCharacteristicsType_Names::SourceSpecifiedCharacteristics_Name);
  }
  if (accessor.hasTargetIrradiance()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTargetIrradiance(), node, MeasurementCharacteristicsType_Names::TargetIrradiance_Name);
  }
  if (accessor.hasProbabilityOfDetection()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getProbabilityOfDetection(), node, MeasurementCharacteristicsType_Names::ProbabilityOfDetection_Name);
  }
  if (accessor.hasProbabilityOfFalseAlarm()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getProbabilityOfFalseAlarm(), node, MeasurementCharacteristicsType_Names::ProbabilityOfFalseAlarm_Name);
  }
  if (accessor.hasSNR()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSNR(), node, MeasurementCharacteristicsType_Names::SNR_Name);
  }
  if (accessor.hasSBR()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSBR(), node, MeasurementCharacteristicsType_Names::SBR_Name);
  }
  {
    const uci::type::MeasurementCharacteristicsType::RadarCrossSection& boundedList = accessor.getRadarCrossSection();
    for (uci::type::MeasurementCharacteristicsType::RadarCrossSection::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RCS_MedianType::serialize(boundedList.at(i), node, MeasurementCharacteristicsType_Names::RadarCrossSection_Name);
    }
  }
  if (accessor.hasSpaceObjectVisualData()) {
    SpaceObjectVisualDataType::serialize(accessor.getSpaceObjectVisualData(), node, MeasurementCharacteristicsType_Names::SpaceObjectVisualData_Name);
  }
  {
    const uci::type::MeasurementCharacteristicsType::CustomCharacteristics& boundedList = accessor.getCustomCharacteristics();
    for (uci::type::MeasurementCharacteristicsType::CustomCharacteristics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::NameValuePairType::serialize(boundedList.at(i), node, MeasurementCharacteristicsType_Names::CustomCharacteristics_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MeasurementCharacteristicsType>().release());
}

uci::type::MeasurementCharacteristicsType& MeasurementCharacteristicsType::create(const uci::type::MeasurementCharacteristicsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MeasurementCharacteristicsType> newAccessor{boost::make_unique<asb_uci::type::MeasurementCharacteristicsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MeasurementCharacteristicsType::destroy(uci::type::MeasurementCharacteristicsType& accessor) {
  delete dynamic_cast<asb_uci::type::MeasurementCharacteristicsType*>(&accessor);
}

} // namespace type

} // namespace uci

