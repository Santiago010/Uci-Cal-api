/** @file ImpactConditionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ImpactConditionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AzElReferenceType.h"
#include "../../../include/asb_uci/type/FuzeType.h"
#include "../../../include/asb_uci/type/ImpactPointType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AzElReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FuzeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ImpactConditionsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ImpactPointType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SpeedType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ImpactConditionsType::ImpactConditionsType()
  : fuze_Accessor{boost::make_unique<Fuze>(0, SIZE_MAX)} {
}

ImpactConditionsType::~ImpactConditionsType() = default;

void ImpactConditionsType::copy(const uci::type::ImpactConditionsType& accessor) {
  copyImpl(accessor, false);
}

void ImpactConditionsType::copyImpl(const uci::type::ImpactConditionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ImpactConditionsType&>(accessor);
    setFuze(*(accessorImpl.fuze_Accessor));
    if (accessorImpl.hasImpactSpeed()) {
      setImpactSpeed(accessorImpl.getImpactSpeed());
    } else {
      clearImpactSpeed();
    }
    if (accessorImpl.impactPoint_Accessor) {
      setImpactPoint(*(accessorImpl.impactPoint_Accessor));
    } else {
      impactPoint_Accessor.reset();
    }
    if (accessorImpl.impactAngle_Accessor) {
      setImpactAngle(*(accessorImpl.impactAngle_Accessor));
    } else {
      impactAngle_Accessor.reset();
    }
    if (accessorImpl.hasSpinRate()) {
      setSpinRate(accessorImpl.getSpinRate());
    } else {
      clearSpinRate();
    }
  }
}

void ImpactConditionsType::reset() noexcept {
  fuze_Accessor->reset();
  clearImpactSpeed();
  impactPoint_Accessor.reset();
  impactAngle_Accessor.reset();
  clearSpinRate();
}

const uci::type::ImpactConditionsType::Fuze& ImpactConditionsType::getFuze() const {
  return *fuze_Accessor;
}

uci::type::ImpactConditionsType::Fuze& ImpactConditionsType::getFuze() {
  return *fuze_Accessor;
}

uci::type::ImpactConditionsType& ImpactConditionsType::setFuze(const uci::type::ImpactConditionsType::Fuze& accessor) {
  if (&accessor != fuze_Accessor.get()) {
    fuze_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SpeedTypeValue ImpactConditionsType::getImpactSpeed() const {
  if (impactSpeed_Accessor) {
    return *impactSpeed_Accessor;
  }
  throw uci::base::UCIException("Error in getImpactSpeed(): An attempt was made to get an optional field that was not enabled, call hasImpactSpeed() to determine if it is safe to call getImpactSpeed()");
}

uci::type::ImpactConditionsType& ImpactConditionsType::setImpactSpeed(uci::type::SpeedTypeValue value) {
  impactSpeed_Accessor = value;
  return *this;
}

bool ImpactConditionsType::hasImpactSpeed() const noexcept {
  return impactSpeed_Accessor.has_value();
}

uci::type::ImpactConditionsType& ImpactConditionsType::clearImpactSpeed() noexcept {
  impactSpeed_Accessor.reset();
  return *this;
}

uci::type::ImpactPointType& ImpactConditionsType::getImpactPoint_() const {
  if (impactPoint_Accessor) {
    return *impactPoint_Accessor;
  }
  throw uci::base::UCIException("Error in getImpactPoint(): An attempt was made to get an optional field that was not enabled, call hasImpactPoint() to determine if it is safe to call getImpactPoint()");
}

const uci::type::ImpactPointType& ImpactConditionsType::getImpactPoint() const {
  return getImpactPoint_();
}

uci::type::ImpactPointType& ImpactConditionsType::getImpactPoint() {
  return getImpactPoint_();
}

uci::type::ImpactConditionsType& ImpactConditionsType::setImpactPoint(const uci::type::ImpactPointType& accessor) {
  enableImpactPoint();
  if (&accessor != impactPoint_Accessor.get()) {
    impactPoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ImpactConditionsType::hasImpactPoint() const noexcept {
  return static_cast<bool>(impactPoint_Accessor);
}

uci::type::ImpactPointType& ImpactConditionsType::enableImpactPoint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::impactPointType : type};
  if ((!impactPoint_Accessor) || (impactPoint_Accessor->getAccessorType() != requestedType)) {
    impactPoint_Accessor = ImpactPointType::create(requestedType);
    if (!impactPoint_Accessor) {
      throw uci::base::UCIException("Error in enableImpactPoint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *impactPoint_Accessor;
}

uci::type::ImpactConditionsType& ImpactConditionsType::clearImpactPoint() noexcept {
  impactPoint_Accessor.reset();
  return *this;
}

uci::type::AzElReferenceType& ImpactConditionsType::getImpactAngle_() const {
  if (impactAngle_Accessor) {
    return *impactAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getImpactAngle(): An attempt was made to get an optional field that was not enabled, call hasImpactAngle() to determine if it is safe to call getImpactAngle()");
}

const uci::type::AzElReferenceType& ImpactConditionsType::getImpactAngle() const {
  return getImpactAngle_();
}

uci::type::AzElReferenceType& ImpactConditionsType::getImpactAngle() {
  return getImpactAngle_();
}

uci::type::ImpactConditionsType& ImpactConditionsType::setImpactAngle(const uci::type::AzElReferenceType& accessor) {
  enableImpactAngle();
  if (&accessor != impactAngle_Accessor.get()) {
    impactAngle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ImpactConditionsType::hasImpactAngle() const noexcept {
  return static_cast<bool>(impactAngle_Accessor);
}

uci::type::AzElReferenceType& ImpactConditionsType::enableImpactAngle(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::azElReferenceType : type};
  if ((!impactAngle_Accessor) || (impactAngle_Accessor->getAccessorType() != requestedType)) {
    impactAngle_Accessor = AzElReferenceType::create(requestedType);
    if (!impactAngle_Accessor) {
      throw uci::base::UCIException("Error in enableImpactAngle(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *impactAngle_Accessor;
}

uci::type::ImpactConditionsType& ImpactConditionsType::clearImpactAngle() noexcept {
  impactAngle_Accessor.reset();
  return *this;
}

xs::UnsignedInt ImpactConditionsType::getSpinRate() const {
  if (spinRate_Accessor) {
    return *spinRate_Accessor;
  }
  throw uci::base::UCIException("Error in getSpinRate(): An attempt was made to get an optional field that was not enabled, call hasSpinRate() to determine if it is safe to call getSpinRate()");
}

uci::type::ImpactConditionsType& ImpactConditionsType::setSpinRate(xs::UnsignedInt value) {
  spinRate_Accessor = value;
  return *this;
}

bool ImpactConditionsType::hasSpinRate() const noexcept {
  return spinRate_Accessor.has_value();
}

uci::type::ImpactConditionsType& ImpactConditionsType::clearSpinRate() noexcept {
  spinRate_Accessor.reset();
  return *this;
}

std::unique_ptr<ImpactConditionsType> ImpactConditionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::impactConditionsType : type};
  return (requestedType == uci::type::accessorType::impactConditionsType) ? boost::make_unique<ImpactConditionsType>() : nullptr;
}

/**  */
namespace ImpactConditionsType_Names {

constexpr const char* Extern_Type_Name{"ImpactConditionsType"};
constexpr const char* Fuze_Name{"Fuze"};
constexpr const char* ImpactSpeed_Name{"ImpactSpeed"};
constexpr const char* ImpactPoint_Name{"ImpactPoint"};
constexpr const char* ImpactAngle_Name{"ImpactAngle"};
constexpr const char* SpinRate_Name{"SpinRate"};

} // namespace ImpactConditionsType_Names

void ImpactConditionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ImpactConditionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ImpactConditionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ImpactConditionsType_Names::Fuze_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ImpactConditionsType::Fuze& boundedList = accessor.getFuze();
        const uci::type::ImpactConditionsType::Fuze::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FuzeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ImpactConditionsType_Names::ImpactSpeed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setImpactSpeed(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ImpactConditionsType_Names::ImpactPoint_Name) {
      ImpactPointType::deserialize(valueType.second, accessor.enableImpactPoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ImpactConditionsType_Names::ImpactAngle_Name) {
      AzElReferenceType::deserialize(valueType.second, accessor.enableImpactAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ImpactConditionsType_Names::SpinRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpinRate(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string ImpactConditionsType::serialize(const uci::type::ImpactConditionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ImpactConditionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ImpactConditionsType_Names::Extern_Type_Name);
  }
  {
    const uci::type::ImpactConditionsType::Fuze& boundedList = accessor.getFuze();
    for (uci::type::ImpactConditionsType::Fuze::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FuzeType::serialize(boundedList.at(i), node, ImpactConditionsType_Names::Fuze_Name);
    }
  }
  if (accessor.hasImpactSpeed()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getImpactSpeed(), node, ImpactConditionsType_Names::ImpactSpeed_Name);
  }
  if (accessor.hasImpactPoint()) {
    ImpactPointType::serialize(accessor.getImpactPoint(), node, ImpactConditionsType_Names::ImpactPoint_Name);
  }
  if (accessor.hasImpactAngle()) {
    AzElReferenceType::serialize(accessor.getImpactAngle(), node, ImpactConditionsType_Names::ImpactAngle_Name);
  }
  if (accessor.hasSpinRate()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getSpinRate(), node, ImpactConditionsType_Names::SpinRate_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ImpactConditionsType& ImpactConditionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ImpactConditionsType>().release());
}

uci::type::ImpactConditionsType& ImpactConditionsType::create(const uci::type::ImpactConditionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ImpactConditionsType> newAccessor{boost::make_unique<asb_uci::type::ImpactConditionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ImpactConditionsType::destroy(uci::type::ImpactConditionsType& accessor) {
  delete dynamic_cast<asb_uci::type::ImpactConditionsType*>(&accessor);
}

} // namespace type

} // namespace uci

