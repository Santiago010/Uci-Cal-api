/** @file LobeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/LobeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LobeType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LobeType::LobeType() = default;

LobeType::~LobeType() = default;

void LobeType::copy(const uci::type::LobeType& accessor) {
  copyImpl(accessor, false);
}

void LobeType::copyImpl(const uci::type::LobeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LobeType&>(accessor);
    if (accessorImpl.hasPeakAmplitude()) {
      setPeakAmplitude(accessorImpl.getPeakAmplitude());
    } else {
      clearPeakAmplitude();
    }
    if (accessorImpl.hasPeakTime()) {
      setPeakTime(accessorImpl.getPeakTime());
    } else {
      clearPeakTime();
    }
    if (accessorImpl.hasTimeInMainBeam()) {
      setTimeInMainBeam(accessorImpl.getTimeInMainBeam());
    } else {
      clearTimeInMainBeam();
    }
    if (accessorImpl.hasGreatDepth()) {
      setGreatDepth(accessorImpl.getGreatDepth());
    } else {
      clearGreatDepth();
    }
  }
}

void LobeType::reset() noexcept {
  clearPeakAmplitude();
  clearPeakTime();
  clearTimeInMainBeam();
  clearGreatDepth();
}

uci::type::DecibelTypeValue LobeType::getPeakAmplitude() const {
  if (peakAmplitude_Accessor) {
    return *peakAmplitude_Accessor;
  }
  throw uci::base::UCIException("Error in getPeakAmplitude(): An attempt was made to get an optional field that was not enabled, call hasPeakAmplitude() to determine if it is safe to call getPeakAmplitude()");
}

uci::type::LobeType& LobeType::setPeakAmplitude(uci::type::DecibelTypeValue value) {
  peakAmplitude_Accessor = value;
  return *this;
}

bool LobeType::hasPeakAmplitude() const noexcept {
  return peakAmplitude_Accessor.has_value();
}

uci::type::LobeType& LobeType::clearPeakAmplitude() noexcept {
  peakAmplitude_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue LobeType::getPeakTime() const {
  if (peakTime_Accessor) {
    return *peakTime_Accessor;
  }
  throw uci::base::UCIException("Error in getPeakTime(): An attempt was made to get an optional field that was not enabled, call hasPeakTime() to determine if it is safe to call getPeakTime()");
}

uci::type::LobeType& LobeType::setPeakTime(uci::type::DateTimeTypeValue value) {
  peakTime_Accessor = value;
  return *this;
}

bool LobeType::hasPeakTime() const noexcept {
  return peakTime_Accessor.has_value();
}

uci::type::LobeType& LobeType::clearPeakTime() noexcept {
  peakTime_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue LobeType::getTimeInMainBeam() const {
  if (timeInMainBeam_Accessor) {
    return *timeInMainBeam_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeInMainBeam(): An attempt was made to get an optional field that was not enabled, call hasTimeInMainBeam() to determine if it is safe to call getTimeInMainBeam()");
}

uci::type::LobeType& LobeType::setTimeInMainBeam(uci::type::DurationTypeValue value) {
  timeInMainBeam_Accessor = value;
  return *this;
}

bool LobeType::hasTimeInMainBeam() const noexcept {
  return timeInMainBeam_Accessor.has_value();
}

uci::type::LobeType& LobeType::clearTimeInMainBeam() noexcept {
  timeInMainBeam_Accessor.reset();
  return *this;
}

xs::Boolean LobeType::getGreatDepth() const {
  if (greatDepth_Accessor) {
    return *greatDepth_Accessor;
  }
  throw uci::base::UCIException("Error in getGreatDepth(): An attempt was made to get an optional field that was not enabled, call hasGreatDepth() to determine if it is safe to call getGreatDepth()");
}

uci::type::LobeType& LobeType::setGreatDepth(xs::Boolean value) {
  greatDepth_Accessor = value;
  return *this;
}

bool LobeType::hasGreatDepth() const noexcept {
  return greatDepth_Accessor.has_value();
}

uci::type::LobeType& LobeType::clearGreatDepth() noexcept {
  greatDepth_Accessor.reset();
  return *this;
}

std::unique_ptr<LobeType> LobeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lobeType : type};
  return (requestedType == uci::type::accessorType::lobeType) ? boost::make_unique<LobeType>() : nullptr;
}

/**  */
namespace LobeType_Names {

constexpr const char* Extern_Type_Name{"LobeType"};
constexpr const char* PeakAmplitude_Name{"PeakAmplitude"};
constexpr const char* PeakTime_Name{"PeakTime"};
constexpr const char* TimeInMainBeam_Name{"TimeInMainBeam"};
constexpr const char* GreatDepth_Name{"GreatDepth"};

} // namespace LobeType_Names

void LobeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LobeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LobeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LobeType_Names::PeakAmplitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeakAmplitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LobeType_Names::PeakTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeakTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + LobeType_Names::TimeInMainBeam_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeInMainBeam(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + LobeType_Names::GreatDepth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGreatDepth(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string LobeType::serialize(const uci::type::LobeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LobeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LobeType_Names::Extern_Type_Name);
  }
  if (accessor.hasPeakAmplitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPeakAmplitude(), node, LobeType_Names::PeakAmplitude_Name);
  }
  if (accessor.hasPeakTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getPeakTime(), node, LobeType_Names::PeakTime_Name);
  }
  if (accessor.hasTimeInMainBeam()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTimeInMainBeam(), node, LobeType_Names::TimeInMainBeam_Name);
  }
  if (accessor.hasGreatDepth()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getGreatDepth(), node, LobeType_Names::GreatDepth_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LobeType& LobeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LobeType>().release());
}

uci::type::LobeType& LobeType::create(const uci::type::LobeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LobeType> newAccessor{boost::make_unique<asb_uci::type::LobeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LobeType::destroy(uci::type::LobeType& accessor) {
  delete dynamic_cast<asb_uci::type::LobeType*>(&accessor);
}

} // namespace type

} // namespace uci

