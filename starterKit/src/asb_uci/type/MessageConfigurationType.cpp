/** @file MessageConfigurationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MessageConfigurationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommConfigurationStateEnum.h"
#include "asb_uci/type/CommDataDirectionFiltrationEnum.h"
#include "asb_uci/type/ComparableRankingType.h"
#include "asb_uci/type/DataLinkNativeFilterPET.h"
#include "asb_uci/type/FilterID_Type.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/InclusionEnum.h"
#include "asb_uci/type/MessageConfigurationID_Type.h"
#include "asb_uci/type/QueryMessageType.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommConfigurationStateEnum.h"
#include "uci/type/CommDataDirectionFiltrationEnum.h"
#include "uci/type/ComparableRankingType.h"
#include "uci/type/DataLinkNativeFilterPET.h"
#include "uci/type/DurationType.h"
#include "uci/type/FilterID_Type.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/InclusionEnum.h"
#include "uci/type/MessageConfigurationID_Type.h"
#include "uci/type/MessageConfigurationType.h"
#include "uci/type/QueryMessageType.h"
#include "uci/type/SystemID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MessageConfigurationType::MessageConfigurationType()
  : filterID_Accessor{boost::make_unique<FilterID_Type>()},
    filter_Accessor{boost::make_unique<QueryMessageType>()},
    filterDirection_Accessor{boost::make_unique<CommDataDirectionFiltrationEnum>()},
    filterInclusionType_Accessor{boost::make_unique<InclusionEnum>()},
    connectionKey_Accessor{boost::make_unique<ConnectionKey>(0, SIZE_MAX)},
    remoteSystemID_Accessor{boost::make_unique<RemoteSystemID>(0, SIZE_MAX)} {
}

MessageConfigurationType::~MessageConfigurationType() = default;

void MessageConfigurationType::copy(const uci::type::MessageConfigurationType& accessor) {
  copyImpl(accessor, false);
}

void MessageConfigurationType::copyImpl(const uci::type::MessageConfigurationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MessageConfigurationType&>(accessor);
    if (accessorImpl.messageConfigurationID_Accessor) {
      setMessageConfigurationID(*(accessorImpl.messageConfigurationID_Accessor));
    } else {
      messageConfigurationID_Accessor.reset();
    }
    setFilterID(*(accessorImpl.filterID_Accessor));
    setFilter(*(accessorImpl.filter_Accessor));
    setFilterStatus(accessorImpl.filterStatus_Accessor);
    setFilterDirection(*(accessorImpl.filterDirection_Accessor));
    setFilterInclusionType(*(accessorImpl.filterInclusionType_Accessor));
    setConnectionKey(*(accessorImpl.connectionKey_Accessor));
    setRemoteSystemID(*(accessorImpl.remoteSystemID_Accessor));
    if (accessorImpl.hasTransmitPeriodicity()) {
      setTransmitPeriodicity(accessorImpl.getTransmitPeriodicity());
    } else {
      clearTransmitPeriodicity();
    }
    if (accessorImpl.dataLinkNativeFilter_Accessor) {
      setDataLinkNativeFilter(*(accessorImpl.dataLinkNativeFilter_Accessor));
    } else {
      dataLinkNativeFilter_Accessor.reset();
    }
    if (accessorImpl.rank_Accessor) {
      setRank(*(accessorImpl.rank_Accessor));
    } else {
      rank_Accessor.reset();
    }
    if (accessorImpl.configurationState_Accessor) {
      setConfigurationState(*(accessorImpl.configurationState_Accessor));
    } else {
      configurationState_Accessor.reset();
    }
  }
}

void MessageConfigurationType::reset() noexcept {
  messageConfigurationID_Accessor.reset();
  filterID_Accessor->reset();
  filter_Accessor->reset();
  filterStatus_Accessor = false;
  filterDirection_Accessor->reset();
  filterInclusionType_Accessor->reset();
  connectionKey_Accessor->reset();
  remoteSystemID_Accessor->reset();
  clearTransmitPeriodicity();
  dataLinkNativeFilter_Accessor.reset();
  rank_Accessor.reset();
  configurationState_Accessor.reset();
}

uci::type::MessageConfigurationID_Type& MessageConfigurationType::getMessageConfigurationID_() const {
  if (messageConfigurationID_Accessor) {
    return *messageConfigurationID_Accessor;
  }
  throw uci::base::UCIException("Error in getMessageConfigurationID(): An attempt was made to get an optional field that was not enabled, call hasMessageConfigurationID() to determine if it is safe to call getMessageConfigurationID()");
}

const uci::type::MessageConfigurationID_Type& MessageConfigurationType::getMessageConfigurationID() const {
  return getMessageConfigurationID_();
}

uci::type::MessageConfigurationID_Type& MessageConfigurationType::getMessageConfigurationID() {
  return getMessageConfigurationID_();
}

uci::type::MessageConfigurationType& MessageConfigurationType::setMessageConfigurationID(const uci::type::MessageConfigurationID_Type& accessor) {
  enableMessageConfigurationID();
  if (&accessor != messageConfigurationID_Accessor.get()) {
    messageConfigurationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MessageConfigurationType::hasMessageConfigurationID() const noexcept {
  return static_cast<bool>(messageConfigurationID_Accessor);
}

uci::type::MessageConfigurationID_Type& MessageConfigurationType::enableMessageConfigurationID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::messageConfigurationID_Type : type};
  if ((!messageConfigurationID_Accessor) || (messageConfigurationID_Accessor->getAccessorType() != requestedType)) {
    messageConfigurationID_Accessor = MessageConfigurationID_Type::create(requestedType);
    if (!messageConfigurationID_Accessor) {
      throw uci::base::UCIException("Error in enableMessageConfigurationID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *messageConfigurationID_Accessor;
}

uci::type::MessageConfigurationType& MessageConfigurationType::clearMessageConfigurationID() noexcept {
  messageConfigurationID_Accessor.reset();
  return *this;
}

const uci::type::FilterID_Type& MessageConfigurationType::getFilterID() const {
  return *filterID_Accessor;
}

uci::type::FilterID_Type& MessageConfigurationType::getFilterID() {
  return *filterID_Accessor;
}

uci::type::MessageConfigurationType& MessageConfigurationType::setFilterID(const uci::type::FilterID_Type& accessor) {
  if (&accessor != filterID_Accessor.get()) {
    filterID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::QueryMessageType& MessageConfigurationType::getFilter() const {
  return *filter_Accessor;
}

uci::type::QueryMessageType& MessageConfigurationType::getFilter() {
  return *filter_Accessor;
}

uci::type::MessageConfigurationType& MessageConfigurationType::setFilter(const uci::type::QueryMessageType& accessor) {
  if (&accessor != filter_Accessor.get()) {
    filter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean MessageConfigurationType::getFilterStatus() const {
  return filterStatus_Accessor;
}

uci::type::MessageConfigurationType& MessageConfigurationType::setFilterStatus(xs::Boolean value) {
  filterStatus_Accessor = value;
  return *this;
}


const uci::type::CommDataDirectionFiltrationEnum& MessageConfigurationType::getFilterDirection() const {
  return *filterDirection_Accessor;
}

uci::type::CommDataDirectionFiltrationEnum& MessageConfigurationType::getFilterDirection() {
  return *filterDirection_Accessor;
}

uci::type::MessageConfigurationType& MessageConfigurationType::setFilterDirection(const uci::type::CommDataDirectionFiltrationEnum& accessor) {
  if (&accessor != filterDirection_Accessor.get()) {
    filterDirection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MessageConfigurationType& MessageConfigurationType::setFilterDirection(uci::type::CommDataDirectionFiltrationEnum::EnumerationItem value) {
  filterDirection_Accessor->setValue(value);
  return *this;
}


const uci::type::InclusionEnum& MessageConfigurationType::getFilterInclusionType() const {
  return *filterInclusionType_Accessor;
}

uci::type::InclusionEnum& MessageConfigurationType::getFilterInclusionType() {
  return *filterInclusionType_Accessor;
}

uci::type::MessageConfigurationType& MessageConfigurationType::setFilterInclusionType(const uci::type::InclusionEnum& accessor) {
  if (&accessor != filterInclusionType_Accessor.get()) {
    filterInclusionType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MessageConfigurationType& MessageConfigurationType::setFilterInclusionType(uci::type::InclusionEnum::EnumerationItem value) {
  filterInclusionType_Accessor->setValue(value);
  return *this;
}


const uci::type::MessageConfigurationType::ConnectionKey& MessageConfigurationType::getConnectionKey() const {
  return *connectionKey_Accessor;
}

uci::type::MessageConfigurationType::ConnectionKey& MessageConfigurationType::getConnectionKey() {
  return *connectionKey_Accessor;
}

uci::type::MessageConfigurationType& MessageConfigurationType::setConnectionKey(const uci::type::MessageConfigurationType::ConnectionKey& accessor) {
  if (&accessor != connectionKey_Accessor.get()) {
    connectionKey_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MessageConfigurationType::RemoteSystemID& MessageConfigurationType::getRemoteSystemID() const {
  return *remoteSystemID_Accessor;
}

uci::type::MessageConfigurationType::RemoteSystemID& MessageConfigurationType::getRemoteSystemID() {
  return *remoteSystemID_Accessor;
}

uci::type::MessageConfigurationType& MessageConfigurationType::setRemoteSystemID(const uci::type::MessageConfigurationType::RemoteSystemID& accessor) {
  if (&accessor != remoteSystemID_Accessor.get()) {
    remoteSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DurationTypeValue MessageConfigurationType::getTransmitPeriodicity() const {
  if (transmitPeriodicity_Accessor) {
    return *transmitPeriodicity_Accessor;
  }
  throw uci::base::UCIException("Error in getTransmitPeriodicity(): An attempt was made to get an optional field that was not enabled, call hasTransmitPeriodicity() to determine if it is safe to call getTransmitPeriodicity()");
}

uci::type::MessageConfigurationType& MessageConfigurationType::setTransmitPeriodicity(uci::type::DurationTypeValue value) {
  transmitPeriodicity_Accessor = value;
  return *this;
}

bool MessageConfigurationType::hasTransmitPeriodicity() const noexcept {
  return transmitPeriodicity_Accessor.has_value();
}

uci::type::MessageConfigurationType& MessageConfigurationType::clearTransmitPeriodicity() noexcept {
  transmitPeriodicity_Accessor.reset();
  return *this;
}

uci::type::DataLinkNativeFilterPET& MessageConfigurationType::getDataLinkNativeFilter_() const {
  if (dataLinkNativeFilter_Accessor) {
    return *dataLinkNativeFilter_Accessor;
  }
  throw uci::base::UCIException("Error in getDataLinkNativeFilter(): An attempt was made to get an optional field that was not enabled, call hasDataLinkNativeFilter() to determine if it is safe to call getDataLinkNativeFilter()");
}

const uci::type::DataLinkNativeFilterPET& MessageConfigurationType::getDataLinkNativeFilter() const {
  return getDataLinkNativeFilter_();
}

uci::type::DataLinkNativeFilterPET& MessageConfigurationType::getDataLinkNativeFilter() {
  return getDataLinkNativeFilter_();
}

uci::type::MessageConfigurationType& MessageConfigurationType::setDataLinkNativeFilter(const uci::type::DataLinkNativeFilterPET& accessor) {
  enableDataLinkNativeFilter(accessor.getAccessorType());
  if (&accessor != dataLinkNativeFilter_Accessor.get()) {
    dataLinkNativeFilter_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool MessageConfigurationType::hasDataLinkNativeFilter() const noexcept {
  return static_cast<bool>(dataLinkNativeFilter_Accessor);
}

uci::type::DataLinkNativeFilterPET& MessageConfigurationType::enableDataLinkNativeFilter(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataLinkNativeFilterPET : type};
  if ((!dataLinkNativeFilter_Accessor) || (dataLinkNativeFilter_Accessor->getAccessorType() != requestedType)) {
    dataLinkNativeFilter_Accessor = DataLinkNativeFilterPET::create(requestedType);
    if (!dataLinkNativeFilter_Accessor) {
      throw uci::base::UCIException("Error in enableDataLinkNativeFilter(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dataLinkNativeFilter_Accessor;
}

uci::type::MessageConfigurationType& MessageConfigurationType::clearDataLinkNativeFilter() noexcept {
  dataLinkNativeFilter_Accessor.reset();
  return *this;
}

uci::type::ComparableRankingType& MessageConfigurationType::getRank_() const {
  if (rank_Accessor) {
    return *rank_Accessor;
  }
  throw uci::base::UCIException("Error in getRank(): An attempt was made to get an optional field that was not enabled, call hasRank() to determine if it is safe to call getRank()");
}

const uci::type::ComparableRankingType& MessageConfigurationType::getRank() const {
  return getRank_();
}

uci::type::ComparableRankingType& MessageConfigurationType::getRank() {
  return getRank_();
}

uci::type::MessageConfigurationType& MessageConfigurationType::setRank(const uci::type::ComparableRankingType& accessor) {
  enableRank();
  if (&accessor != rank_Accessor.get()) {
    rank_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool MessageConfigurationType::hasRank() const noexcept {
  return static_cast<bool>(rank_Accessor);
}

uci::type::ComparableRankingType& MessageConfigurationType::enableRank(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::comparableRankingType : type};
  if ((!rank_Accessor) || (rank_Accessor->getAccessorType() != requestedType)) {
    rank_Accessor = ComparableRankingType::create(requestedType);
    if (!rank_Accessor) {
      throw uci::base::UCIException("Error in enableRank(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rank_Accessor;
}

uci::type::MessageConfigurationType& MessageConfigurationType::clearRank() noexcept {
  rank_Accessor.reset();
  return *this;
}

uci::type::CommConfigurationStateEnum& MessageConfigurationType::getConfigurationState_() const {
  if (configurationState_Accessor) {
    return *configurationState_Accessor;
  }
  throw uci::base::UCIException("Error in getConfigurationState(): An attempt was made to get an optional field that was not enabled, call hasConfigurationState() to determine if it is safe to call getConfigurationState()");
}

const uci::type::CommConfigurationStateEnum& MessageConfigurationType::getConfigurationState() const {
  return getConfigurationState_();
}

uci::type::CommConfigurationStateEnum& MessageConfigurationType::getConfigurationState() {
  return getConfigurationState_();
}

uci::type::MessageConfigurationType& MessageConfigurationType::setConfigurationState(const uci::type::CommConfigurationStateEnum& accessor) {
  enableConfigurationState();
  if (&accessor != configurationState_Accessor.get()) {
    configurationState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MessageConfigurationType& MessageConfigurationType::setConfigurationState(const uci::type::CommConfigurationStateEnum::EnumerationItem value) {
  enableConfigurationState().setValue(value);
  return *this;
}

bool MessageConfigurationType::hasConfigurationState() const noexcept {
  return static_cast<bool>(configurationState_Accessor);
}

uci::type::CommConfigurationStateEnum& MessageConfigurationType::enableConfigurationState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commConfigurationStateEnum : type};
  if ((!configurationState_Accessor) || (configurationState_Accessor->getAccessorType() != requestedType)) {
    configurationState_Accessor = CommConfigurationStateEnum::create(requestedType);
    if (!configurationState_Accessor) {
      throw uci::base::UCIException("Error in enableConfigurationState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *configurationState_Accessor;
}

uci::type::MessageConfigurationType& MessageConfigurationType::clearConfigurationState() noexcept {
  configurationState_Accessor.reset();
  return *this;
}

std::unique_ptr<MessageConfigurationType> MessageConfigurationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::messageConfigurationType : type};
  return (requestedType == uci::type::accessorType::messageConfigurationType) ? boost::make_unique<MessageConfigurationType>() : nullptr;
}

/**  */
namespace MessageConfigurationType_Names {

constexpr const char* Extern_Type_Name{"MessageConfigurationType"};
constexpr const char* MessageConfigurationID_Name{"MessageConfigurationID"};
constexpr const char* FilterID_Name{"FilterID"};
constexpr const char* Filter_Name{"Filter"};
constexpr const char* FilterStatus_Name{"FilterStatus"};
constexpr const char* FilterDirection_Name{"FilterDirection"};
constexpr const char* FilterInclusionType_Name{"FilterInclusionType"};
constexpr const char* ConnectionKey_Name{"ConnectionKey"};
constexpr const char* RemoteSystemID_Name{"RemoteSystemID"};
constexpr const char* TransmitPeriodicity_Name{"TransmitPeriodicity"};
constexpr const char* DataLinkNativeFilter_Name{"DataLinkNativeFilter"};
constexpr const char* Rank_Name{"Rank"};
constexpr const char* ConfigurationState_Name{"ConfigurationState"};

} // namespace MessageConfigurationType_Names

void MessageConfigurationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MessageConfigurationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MessageConfigurationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MessageConfigurationType_Names::MessageConfigurationID_Name) {
      MessageConfigurationID_Type::deserialize(valueType.second, accessor.enableMessageConfigurationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MessageConfigurationType_Names::FilterID_Name) {
      FilterID_Type::deserialize(valueType.second, accessor.getFilterID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MessageConfigurationType_Names::Filter_Name) {
      QueryMessageType::deserialize(valueType.second, accessor.getFilter(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MessageConfigurationType_Names::FilterStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFilterStatus(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + MessageConfigurationType_Names::FilterDirection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getFilterDirection().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MessageConfigurationType_Names::FilterInclusionType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getFilterInclusionType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MessageConfigurationType_Names::ConnectionKey_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MessageConfigurationType::ConnectionKey& boundedList = accessor.getConnectionKey();
        const uci::type::MessageConfigurationType::ConnectionKey::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MessageConfigurationType_Names::RemoteSystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MessageConfigurationType::RemoteSystemID& boundedList = accessor.getRemoteSystemID();
        const uci::type::MessageConfigurationType::RemoteSystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MessageConfigurationType_Names::TransmitPeriodicity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTransmitPeriodicity(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + MessageConfigurationType_Names::DataLinkNativeFilter_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDataLinkNativeFilter(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MessageConfigurationType_Names::Rank_Name) {
      ComparableRankingType::deserialize(valueType.second, accessor.enableRank(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MessageConfigurationType_Names::ConfigurationState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableConfigurationState().setValueFromName(*value);
      }
    }
  }
}

std::string MessageConfigurationType::serialize(const uci::type::MessageConfigurationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MessageConfigurationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MessageConfigurationType_Names::Extern_Type_Name);
  }
  if (accessor.hasMessageConfigurationID()) {
    MessageConfigurationID_Type::serialize(accessor.getMessageConfigurationID(), node, MessageConfigurationType_Names::MessageConfigurationID_Name);
  }
  FilterID_Type::serialize(accessor.getFilterID(), node, MessageConfigurationType_Names::FilterID_Name);
  QueryMessageType::serialize(accessor.getFilter(), node, MessageConfigurationType_Names::Filter_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getFilterStatus(), node, MessageConfigurationType_Names::FilterStatus_Name);
  CommDataDirectionFiltrationEnum::serialize(accessor.getFilterDirection(), node, MessageConfigurationType_Names::FilterDirection_Name, false);
  InclusionEnum::serialize(accessor.getFilterInclusionType(), node, MessageConfigurationType_Names::FilterInclusionType_Name, false);
  {
    const uci::type::MessageConfigurationType::ConnectionKey& boundedList = accessor.getConnectionKey();
    for (uci::type::MessageConfigurationType::ConnectionKey::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, MessageConfigurationType_Names::ConnectionKey_Name);
    }
  }
  {
    const uci::type::MessageConfigurationType::RemoteSystemID& boundedList = accessor.getRemoteSystemID();
    for (uci::type::MessageConfigurationType::RemoteSystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SystemID_Type::serialize(boundedList.at(i), node, MessageConfigurationType_Names::RemoteSystemID_Name);
    }
  }
  if (accessor.hasTransmitPeriodicity()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTransmitPeriodicity(), node, MessageConfigurationType_Names::TransmitPeriodicity_Name);
  }
  if (accessor.hasDataLinkNativeFilter()) {
    DataLinkNativeFilterPET::serialize(accessor.getDataLinkNativeFilter(), node, MessageConfigurationType_Names::DataLinkNativeFilter_Name);
  }
  if (accessor.hasRank()) {
    ComparableRankingType::serialize(accessor.getRank(), node, MessageConfigurationType_Names::Rank_Name);
  }
  if (accessor.hasConfigurationState()) {
    CommConfigurationStateEnum::serialize(accessor.getConfigurationState(), node, MessageConfigurationType_Names::ConfigurationState_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MessageConfigurationType& MessageConfigurationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MessageConfigurationType>().release());
}

uci::type::MessageConfigurationType& MessageConfigurationType::create(const uci::type::MessageConfigurationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MessageConfigurationType> newAccessor{boost::make_unique<asb_uci::type::MessageConfigurationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MessageConfigurationType::destroy(uci::type::MessageConfigurationType& accessor) {
  delete dynamic_cast<asb_uci::type::MessageConfigurationType*>(&accessor);
}

} // namespace type

} // namespace uci

