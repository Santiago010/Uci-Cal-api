/** @file OrbitMetricsRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitMetricsRequestMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityPlanPartsEnum.h"
#include "asb_uci/type/OrbitActivityPlanID_Type.h"
#include "asb_uci/type/OrbitPlanID_Type.h"
#include "asb_uci/type/OrbitPlanPartsEnum.h"
#include "asb_uci/type/RequestBaseType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityPlanPartsEnum.h"
#include "uci/type/OrbitActivityPlanID_Type.h"
#include "uci/type/OrbitMetricsRequestMDT.h"
#include "uci/type/OrbitPlanID_Type.h"
#include "uci/type/OrbitPlanPartsEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitMetricsRequestMDT::OrbitMetricsRequestMDT()
  : orbitPlanID_Accessor{boost::make_unique<OrbitPlanID_Type>()},
    orbitParts_Accessor{boost::make_unique<OrbitParts>(0, 6)},
    orbitActivityPlanID_Accessor{boost::make_unique<OrbitActivityPlanID>(0, SIZE_MAX)},
    activityPlanParts_Accessor{boost::make_unique<ActivityPlanParts>(0, 9)} {
}

OrbitMetricsRequestMDT::~OrbitMetricsRequestMDT() = default;

void OrbitMetricsRequestMDT::copy(const uci::type::OrbitMetricsRequestMDT& accessor) {
  copyImpl(accessor, false);
}

void OrbitMetricsRequestMDT::copyImpl(const uci::type::OrbitMetricsRequestMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const OrbitMetricsRequestMDT&>(accessor);
    setOrbitPlanID(*(accessorImpl.orbitPlanID_Accessor));
    setOrbitParts(*(accessorImpl.orbitParts_Accessor));
    setOrbitActivityPlanID(*(accessorImpl.orbitActivityPlanID_Accessor));
    setActivityPlanParts(*(accessorImpl.activityPlanParts_Accessor));
  }
}

void OrbitMetricsRequestMDT::reset() noexcept {
  RequestBaseType::reset();
  orbitPlanID_Accessor->reset();
  orbitParts_Accessor->reset();
  orbitActivityPlanID_Accessor->reset();
  activityPlanParts_Accessor->reset();
}

const uci::type::OrbitPlanID_Type& OrbitMetricsRequestMDT::getOrbitPlanID() const {
  return *orbitPlanID_Accessor;
}

uci::type::OrbitPlanID_Type& OrbitMetricsRequestMDT::getOrbitPlanID() {
  return *orbitPlanID_Accessor;
}

uci::type::OrbitMetricsRequestMDT& OrbitMetricsRequestMDT::setOrbitPlanID(const uci::type::OrbitPlanID_Type& accessor) {
  if (&accessor != orbitPlanID_Accessor.get()) {
    orbitPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitMetricsRequestMDT::OrbitParts& OrbitMetricsRequestMDT::getOrbitParts() const {
  return *orbitParts_Accessor;
}

uci::type::OrbitMetricsRequestMDT::OrbitParts& OrbitMetricsRequestMDT::getOrbitParts() {
  return *orbitParts_Accessor;
}

uci::type::OrbitMetricsRequestMDT& OrbitMetricsRequestMDT::setOrbitParts(const uci::type::OrbitMetricsRequestMDT::OrbitParts& accessor) {
  if (&accessor != orbitParts_Accessor.get()) {
    orbitParts_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitMetricsRequestMDT::OrbitActivityPlanID& OrbitMetricsRequestMDT::getOrbitActivityPlanID() const {
  return *orbitActivityPlanID_Accessor;
}

uci::type::OrbitMetricsRequestMDT::OrbitActivityPlanID& OrbitMetricsRequestMDT::getOrbitActivityPlanID() {
  return *orbitActivityPlanID_Accessor;
}

uci::type::OrbitMetricsRequestMDT& OrbitMetricsRequestMDT::setOrbitActivityPlanID(const uci::type::OrbitMetricsRequestMDT::OrbitActivityPlanID& accessor) {
  if (&accessor != orbitActivityPlanID_Accessor.get()) {
    orbitActivityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitMetricsRequestMDT::ActivityPlanParts& OrbitMetricsRequestMDT::getActivityPlanParts() const {
  return *activityPlanParts_Accessor;
}

uci::type::OrbitMetricsRequestMDT::ActivityPlanParts& OrbitMetricsRequestMDT::getActivityPlanParts() {
  return *activityPlanParts_Accessor;
}

uci::type::OrbitMetricsRequestMDT& OrbitMetricsRequestMDT::setActivityPlanParts(const uci::type::OrbitMetricsRequestMDT::ActivityPlanParts& accessor) {
  if (&accessor != activityPlanParts_Accessor.get()) {
    activityPlanParts_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<OrbitMetricsRequestMDT> OrbitMetricsRequestMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitMetricsRequestMDT : type};
  return (requestedType == uci::type::accessorType::orbitMetricsRequestMDT) ? boost::make_unique<OrbitMetricsRequestMDT>() : nullptr;
}

/**  */
namespace OrbitMetricsRequestMDT_Names {

constexpr const char* Extern_Type_Name{"OrbitMetricsRequestMDT"};
constexpr const char* OrbitPlanID_Name{"OrbitPlanID"};
constexpr const char* OrbitParts_Name{"OrbitParts"};
constexpr const char* OrbitActivityPlanID_Name{"OrbitActivityPlanID"};
constexpr const char* ActivityPlanParts_Name{"ActivityPlanParts"};

} // namespace OrbitMetricsRequestMDT_Names

void OrbitMetricsRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitMetricsRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitMetricsRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitMetricsRequestMDT_Names::OrbitPlanID_Name) {
      OrbitPlanID_Type::deserialize(valueType.second, accessor.getOrbitPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitMetricsRequestMDT_Names::OrbitParts_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitMetricsRequestMDT::OrbitParts& boundedList = accessor.getOrbitParts();
        const uci::type::OrbitMetricsRequestMDT::OrbitParts::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OrbitMetricsRequestMDT_Names::OrbitActivityPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitMetricsRequestMDT::OrbitActivityPlanID& boundedList = accessor.getOrbitActivityPlanID();
        const uci::type::OrbitMetricsRequestMDT::OrbitActivityPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitActivityPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitMetricsRequestMDT_Names::ActivityPlanParts_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitMetricsRequestMDT::ActivityPlanParts& boundedList = accessor.getActivityPlanParts();
        const uci::type::OrbitMetricsRequestMDT::ActivityPlanParts::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string OrbitMetricsRequestMDT::serialize(const uci::type::OrbitMetricsRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitMetricsRequestMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitMetricsRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  OrbitPlanID_Type::serialize(accessor.getOrbitPlanID(), node, OrbitMetricsRequestMDT_Names::OrbitPlanID_Name);
  {
    const uci::type::OrbitMetricsRequestMDT::OrbitParts& boundedList = accessor.getOrbitParts();
    for (uci::type::OrbitMetricsRequestMDT::OrbitParts::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitPlanPartsEnum::serialize(boundedList.at(i), node, OrbitMetricsRequestMDT_Names::OrbitParts_Name, false);
    }
  }
  {
    const uci::type::OrbitMetricsRequestMDT::OrbitActivityPlanID& boundedList = accessor.getOrbitActivityPlanID();
    for (uci::type::OrbitMetricsRequestMDT::OrbitActivityPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitActivityPlanID_Type::serialize(boundedList.at(i), node, OrbitMetricsRequestMDT_Names::OrbitActivityPlanID_Name);
    }
  }
  {
    const uci::type::OrbitMetricsRequestMDT::ActivityPlanParts& boundedList = accessor.getActivityPlanParts();
    for (uci::type::OrbitMetricsRequestMDT::ActivityPlanParts::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ActivityPlanPartsEnum::serialize(boundedList.at(i), node, OrbitMetricsRequestMDT_Names::ActivityPlanParts_Name, false);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitMetricsRequestMDT& OrbitMetricsRequestMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitMetricsRequestMDT>().release());
}

uci::type::OrbitMetricsRequestMDT& OrbitMetricsRequestMDT::create(const uci::type::OrbitMetricsRequestMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitMetricsRequestMDT> newAccessor{boost::make_unique<asb_uci::type::OrbitMetricsRequestMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitMetricsRequestMDT::destroy(uci::type::OrbitMetricsRequestMDT& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitMetricsRequestMDT*>(&accessor);
}

} // namespace type

} // namespace uci

