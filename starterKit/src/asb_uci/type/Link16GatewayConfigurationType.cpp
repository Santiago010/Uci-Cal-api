/** @file Link16GatewayConfigurationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/Link16GatewayConfigurationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/GatewayConfigurationPET.h"
#include "../../../include/asb_uci/type/Link16DataStoreManagementType.h"
#include "../../../include/asb_uci/type/Link16TrackNumberType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16DataStoreManagementType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16GatewayConfigurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16TrackNumberType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

Link16GatewayConfigurationType::Link16GatewayConfigurationType()
  : cDO_AutoAccept_Accessor{boost::make_unique<CDO_AutoAccept>(0, SIZE_MAX)},
    friendlyTargetsOfInterest_Accessor{boost::make_unique<FriendlyTargetsOfInterest>(0, SIZE_MAX)} {
}

Link16GatewayConfigurationType::~Link16GatewayConfigurationType() = default;

void Link16GatewayConfigurationType::copy(const uci::type::Link16GatewayConfigurationType& accessor) {
  copyImpl(accessor, false);
}

void Link16GatewayConfigurationType::copyImpl(const uci::type::Link16GatewayConfigurationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    GatewayConfigurationPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const Link16GatewayConfigurationType&>(accessor);
    setCDO_AutoAccept(*(accessorImpl.cDO_AutoAccept_Accessor));
    setFriendlyTargetsOfInterest(*(accessorImpl.friendlyTargetsOfInterest_Accessor));
    if (accessorImpl.dataStoreManagement_Accessor) {
      setDataStoreManagement(*(accessorImpl.dataStoreManagement_Accessor));
    } else {
      dataStoreManagement_Accessor.reset();
    }
  }
}

void Link16GatewayConfigurationType::reset() noexcept {
  GatewayConfigurationPET::reset();
  cDO_AutoAccept_Accessor->reset();
  friendlyTargetsOfInterest_Accessor->reset();
  dataStoreManagement_Accessor.reset();
}

const uci::type::Link16GatewayConfigurationType::CDO_AutoAccept& Link16GatewayConfigurationType::getCDO_AutoAccept() const {
  return *cDO_AutoAccept_Accessor;
}

uci::type::Link16GatewayConfigurationType::CDO_AutoAccept& Link16GatewayConfigurationType::getCDO_AutoAccept() {
  return *cDO_AutoAccept_Accessor;
}

uci::type::Link16GatewayConfigurationType& Link16GatewayConfigurationType::setCDO_AutoAccept(const uci::type::Link16GatewayConfigurationType::CDO_AutoAccept& accessor) {
  if (&accessor != cDO_AutoAccept_Accessor.get()) {
    cDO_AutoAccept_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::Link16GatewayConfigurationType::FriendlyTargetsOfInterest& Link16GatewayConfigurationType::getFriendlyTargetsOfInterest() const {
  return *friendlyTargetsOfInterest_Accessor;
}

uci::type::Link16GatewayConfigurationType::FriendlyTargetsOfInterest& Link16GatewayConfigurationType::getFriendlyTargetsOfInterest() {
  return *friendlyTargetsOfInterest_Accessor;
}

uci::type::Link16GatewayConfigurationType& Link16GatewayConfigurationType::setFriendlyTargetsOfInterest(const uci::type::Link16GatewayConfigurationType::FriendlyTargetsOfInterest& accessor) {
  if (&accessor != friendlyTargetsOfInterest_Accessor.get()) {
    friendlyTargetsOfInterest_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::Link16DataStoreManagementType& Link16GatewayConfigurationType::getDataStoreManagement_() const {
  if (dataStoreManagement_Accessor) {
    return *dataStoreManagement_Accessor;
  }
  throw uci::base::UCIException("Error in getDataStoreManagement(): An attempt was made to get an optional field that was not enabled, call hasDataStoreManagement() to determine if it is safe to call getDataStoreManagement()");
}

const uci::type::Link16DataStoreManagementType& Link16GatewayConfigurationType::getDataStoreManagement() const {
  return getDataStoreManagement_();
}

uci::type::Link16DataStoreManagementType& Link16GatewayConfigurationType::getDataStoreManagement() {
  return getDataStoreManagement_();
}

uci::type::Link16GatewayConfigurationType& Link16GatewayConfigurationType::setDataStoreManagement(const uci::type::Link16DataStoreManagementType& accessor) {
  enableDataStoreManagement();
  if (&accessor != dataStoreManagement_Accessor.get()) {
    dataStoreManagement_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool Link16GatewayConfigurationType::hasDataStoreManagement() const noexcept {
  return static_cast<bool>(dataStoreManagement_Accessor);
}

uci::type::Link16DataStoreManagementType& Link16GatewayConfigurationType::enableDataStoreManagement(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::link16DataStoreManagementType : type};
  if ((!dataStoreManagement_Accessor) || (dataStoreManagement_Accessor->getAccessorType() != requestedType)) {
    dataStoreManagement_Accessor = Link16DataStoreManagementType::create(requestedType);
    if (!dataStoreManagement_Accessor) {
      throw uci::base::UCIException("Error in enableDataStoreManagement(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dataStoreManagement_Accessor;
}

uci::type::Link16GatewayConfigurationType& Link16GatewayConfigurationType::clearDataStoreManagement() noexcept {
  dataStoreManagement_Accessor.reset();
  return *this;
}

std::unique_ptr<Link16GatewayConfigurationType> Link16GatewayConfigurationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::link16GatewayConfigurationType : type};
  return (requestedType == uci::type::accessorType::link16GatewayConfigurationType) ? boost::make_unique<Link16GatewayConfigurationType>() : nullptr;
}

/**  */
namespace Link16GatewayConfigurationType_Names {

constexpr const char* Extern_Type_Name{"Link16GatewayConfigurationType"};
constexpr const char* CDO_AutoAccept_Name{"CDO_AutoAccept"};
constexpr const char* FriendlyTargetsOfInterest_Name{"FriendlyTargetsOfInterest"};
constexpr const char* DataStoreManagement_Name{"DataStoreManagement"};

} // namespace Link16GatewayConfigurationType_Names

void Link16GatewayConfigurationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::Link16GatewayConfigurationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = Link16GatewayConfigurationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + Link16GatewayConfigurationType_Names::CDO_AutoAccept_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::Link16GatewayConfigurationType::CDO_AutoAccept& boundedList = accessor.getCDO_AutoAccept();
        const uci::type::Link16GatewayConfigurationType::CDO_AutoAccept::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + Link16GatewayConfigurationType_Names::FriendlyTargetsOfInterest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::Link16GatewayConfigurationType::FriendlyTargetsOfInterest& boundedList = accessor.getFriendlyTargetsOfInterest();
        const uci::type::Link16GatewayConfigurationType::FriendlyTargetsOfInterest::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + Link16GatewayConfigurationType_Names::DataStoreManagement_Name) {
      Link16DataStoreManagementType::deserialize(valueType.second, accessor.enableDataStoreManagement(), nodeName, nsPrefix);
    }
  }
  GatewayConfigurationPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string Link16GatewayConfigurationType::serialize(const uci::type::Link16GatewayConfigurationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? Link16GatewayConfigurationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, Link16GatewayConfigurationType_Names::Extern_Type_Name);
  }
  GatewayConfigurationPET::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::Link16GatewayConfigurationType::CDO_AutoAccept& boundedList = accessor.getCDO_AutoAccept();
    for (uci::type::Link16GatewayConfigurationType::CDO_AutoAccept::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, Link16GatewayConfigurationType_Names::CDO_AutoAccept_Name);
    }
  }
  {
    const uci::type::Link16GatewayConfigurationType::FriendlyTargetsOfInterest& boundedList = accessor.getFriendlyTargetsOfInterest();
    for (uci::type::Link16GatewayConfigurationType::FriendlyTargetsOfInterest::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, Link16GatewayConfigurationType_Names::FriendlyTargetsOfInterest_Name);
    }
  }
  if (accessor.hasDataStoreManagement()) {
    Link16DataStoreManagementType::serialize(accessor.getDataStoreManagement(), node, Link16GatewayConfigurationType_Names::DataStoreManagement_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::Link16GatewayConfigurationType& Link16GatewayConfigurationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::Link16GatewayConfigurationType>().release());
}

uci::type::Link16GatewayConfigurationType& Link16GatewayConfigurationType::create(const uci::type::Link16GatewayConfigurationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::Link16GatewayConfigurationType> newAccessor{boost::make_unique<asb_uci::type::Link16GatewayConfigurationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void Link16GatewayConfigurationType::destroy(uci::type::Link16GatewayConfigurationType& accessor) {
  delete dynamic_cast<asb_uci::type::Link16GatewayConfigurationType*>(&accessor);
}

} // namespace type

} // namespace uci

