/** @file RequirementPlanningResultBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RequirementPlanningResultBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PlanReferenceType.h"
#include "../../../include/asb_uci/type/PlanningResultEnum.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/type/UnallocatedReasonType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanReferenceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanningResultEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementPlanningResultBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/UnallocatedReasonType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementPlanningResultBaseType::RequirementPlanningResultBaseType()
  : planningResult_Accessor{boost::make_unique<PlanningResultEnum>()},
    systemID_Accessor{boost::make_unique<SystemID_Type>()},
    notAllocatedReason_Accessor{boost::make_unique<NotAllocatedReason>(0, SIZE_MAX)} {
}

RequirementPlanningResultBaseType::~RequirementPlanningResultBaseType() = default;

void RequirementPlanningResultBaseType::copy(const uci::type::RequirementPlanningResultBaseType& accessor) {
  copyImpl(accessor, false);
}

void RequirementPlanningResultBaseType::copyImpl(const uci::type::RequirementPlanningResultBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::requirementPlanningResultBaseType)) {
      const auto& accessorImpl = dynamic_cast<const RequirementPlanningResultBaseType&>(accessor);
      setPlanningResult(*(accessorImpl.planningResult_Accessor));
      setSystemID(*(accessorImpl.systemID_Accessor));
      if (accessorImpl.associatedPlans_Accessor) {
        setAssociatedPlans(*(accessorImpl.associatedPlans_Accessor));
      } else {
        associatedPlans_Accessor.reset();
      }
      setNotAllocatedReason(*(accessorImpl.notAllocatedReason_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void RequirementPlanningResultBaseType::reset() noexcept {
  planningResult_Accessor->reset();
  systemID_Accessor->reset();
  associatedPlans_Accessor.reset();
  notAllocatedReason_Accessor->reset();
}

const uci::type::PlanningResultEnum& RequirementPlanningResultBaseType::getPlanningResult() const {
  return *planningResult_Accessor;
}

uci::type::PlanningResultEnum& RequirementPlanningResultBaseType::getPlanningResult() {
  return *planningResult_Accessor;
}

uci::type::RequirementPlanningResultBaseType& RequirementPlanningResultBaseType::setPlanningResult(const uci::type::PlanningResultEnum& accessor) {
  if (&accessor != planningResult_Accessor.get()) {
    planningResult_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementPlanningResultBaseType& RequirementPlanningResultBaseType::setPlanningResult(uci::type::PlanningResultEnum::EnumerationItem value) {
  planningResult_Accessor->setValue(value);
  return *this;
}


const uci::type::SystemID_Type& RequirementPlanningResultBaseType::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& RequirementPlanningResultBaseType::getSystemID() {
  return *systemID_Accessor;
}

uci::type::RequirementPlanningResultBaseType& RequirementPlanningResultBaseType::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanReferenceType& RequirementPlanningResultBaseType::getAssociatedPlans_() const {
  if (associatedPlans_Accessor) {
    return *associatedPlans_Accessor;
  }
  throw uci::base::UCIException("Error in getAssociatedPlans(): An attempt was made to get an optional field that was not enabled, call hasAssociatedPlans() to determine if it is safe to call getAssociatedPlans()");
}

const uci::type::PlanReferenceType& RequirementPlanningResultBaseType::getAssociatedPlans() const {
  return getAssociatedPlans_();
}

uci::type::PlanReferenceType& RequirementPlanningResultBaseType::getAssociatedPlans() {
  return getAssociatedPlans_();
}

uci::type::RequirementPlanningResultBaseType& RequirementPlanningResultBaseType::setAssociatedPlans(const uci::type::PlanReferenceType& accessor) {
  enableAssociatedPlans();
  if (&accessor != associatedPlans_Accessor.get()) {
    associatedPlans_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementPlanningResultBaseType::hasAssociatedPlans() const noexcept {
  return static_cast<bool>(associatedPlans_Accessor);
}

uci::type::PlanReferenceType& RequirementPlanningResultBaseType::enableAssociatedPlans(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planReferenceType : type};
  if ((!associatedPlans_Accessor) || (associatedPlans_Accessor->getAccessorType() != requestedType)) {
    associatedPlans_Accessor = PlanReferenceType::create(requestedType);
    if (!associatedPlans_Accessor) {
      throw uci::base::UCIException("Error in enableAssociatedPlans(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *associatedPlans_Accessor;
}

uci::type::RequirementPlanningResultBaseType& RequirementPlanningResultBaseType::clearAssociatedPlans() noexcept {
  associatedPlans_Accessor.reset();
  return *this;
}

const uci::type::RequirementPlanningResultBaseType::NotAllocatedReason& RequirementPlanningResultBaseType::getNotAllocatedReason() const {
  return *notAllocatedReason_Accessor;
}

uci::type::RequirementPlanningResultBaseType::NotAllocatedReason& RequirementPlanningResultBaseType::getNotAllocatedReason() {
  return *notAllocatedReason_Accessor;
}

uci::type::RequirementPlanningResultBaseType& RequirementPlanningResultBaseType::setNotAllocatedReason(const uci::type::RequirementPlanningResultBaseType::NotAllocatedReason& accessor) {
  if (&accessor != notAllocatedReason_Accessor.get()) {
    notAllocatedReason_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RequirementPlanningResultBaseType> RequirementPlanningResultBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementPlanningResultBaseType : type};
  return std::unique_ptr<RequirementPlanningResultBaseType>(dynamic_cast<RequirementPlanningResultBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace RequirementPlanningResultBaseType_Names {

constexpr const char* Extern_Type_Name{"RequirementPlanningResultBaseType"};
constexpr const char* PlanningResult_Name{"PlanningResult"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* AssociatedPlans_Name{"AssociatedPlans"};
constexpr const char* NotAllocatedReason_Name{"NotAllocatedReason"};

} // namespace RequirementPlanningResultBaseType_Names

void RequirementPlanningResultBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementPlanningResultBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementPlanningResultBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementPlanningResultBaseType_Names::PlanningResult_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPlanningResult().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementPlanningResultBaseType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementPlanningResultBaseType_Names::AssociatedPlans_Name) {
      PlanReferenceType::deserialize(valueType.second, accessor.enableAssociatedPlans(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementPlanningResultBaseType_Names::NotAllocatedReason_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementPlanningResultBaseType::NotAllocatedReason& boundedList = accessor.getNotAllocatedReason();
        const uci::type::RequirementPlanningResultBaseType::NotAllocatedReason::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::UnallocatedReasonType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string RequirementPlanningResultBaseType::serialize(const uci::type::RequirementPlanningResultBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementPlanningResultBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::requirementPlanningResultBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementPlanningResultBaseType_Names::Extern_Type_Name);
    }
    PlanningResultEnum::serialize(accessor.getPlanningResult(), node, RequirementPlanningResultBaseType_Names::PlanningResult_Name, false);
    SystemID_Type::serialize(accessor.getSystemID(), node, RequirementPlanningResultBaseType_Names::SystemID_Name);
    if (accessor.hasAssociatedPlans()) {
      PlanReferenceType::serialize(accessor.getAssociatedPlans(), node, RequirementPlanningResultBaseType_Names::AssociatedPlans_Name);
    }
    {
      const uci::type::RequirementPlanningResultBaseType::NotAllocatedReason& boundedList = accessor.getNotAllocatedReason();
      for (uci::type::RequirementPlanningResultBaseType::NotAllocatedReason::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::UnallocatedReasonType::serialize(boundedList.at(i), node, RequirementPlanningResultBaseType_Names::NotAllocatedReason_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementPlanningResultBaseType& RequirementPlanningResultBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementPlanningResultBaseType>().release());
}

uci::type::RequirementPlanningResultBaseType& RequirementPlanningResultBaseType::create(const uci::type::RequirementPlanningResultBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementPlanningResultBaseType> newAccessor{boost::make_unique<asb_uci::type::RequirementPlanningResultBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementPlanningResultBaseType::destroy(uci::type::RequirementPlanningResultBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementPlanningResultBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

