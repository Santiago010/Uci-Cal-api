/** @file CryptoKeySourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CryptoKeySourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CryptoDS101_Enum.h"
#include "asb_uci/type/CryptoOTAM_Enum.h"
#include "asb_uci/type/FileLocationID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CryptoDS101_Enum.h"
#include "uci/type/CryptoKeySourceType.h"
#include "uci/type/CryptoOTAM_Enum.h"
#include "uci/type/FileLocationID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CryptoKeySourceType::CryptoKeySourceType() = default;

CryptoKeySourceType::~CryptoKeySourceType() = default;

void CryptoKeySourceType::copy(const uci::type::CryptoKeySourceType& accessor) {
  copyImpl(accessor, false);
}

void CryptoKeySourceType::copyImpl(const uci::type::CryptoKeySourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CryptoKeySourceType&>(accessor);
    if (accessorImpl.keyFileID_Accessor) {
      setKeyFileID(*(accessorImpl.keyFileID_Accessor));
    } else {
      keyFileID_Accessor.reset();
    }
    if (accessorImpl.dS101_Accessor) {
      setDS101(*(accessorImpl.dS101_Accessor));
    } else {
      dS101_Accessor.reset();
    }
    if (accessorImpl.oTAM_Accessor) {
      setOTAM(*(accessorImpl.oTAM_Accessor));
    } else {
      oTAM_Accessor.reset();
    }
  }
}

void CryptoKeySourceType::reset() noexcept {
  keyFileID_Accessor.reset();
  dS101_Accessor.reset();
  oTAM_Accessor.reset();
}

uci::type::CryptoKeySourceType::CryptoKeySourceTypeChoice CryptoKeySourceType::getCryptoKeySourceTypeChoiceOrdinal() const noexcept {
  if (keyFileID_Accessor) {
    return CRYPTOKEYSOURCETYPE_CHOICE_KEYFILEID;
  }
  if (dS101_Accessor) {
    return CRYPTOKEYSOURCETYPE_CHOICE_DS101;
  }
  if (oTAM_Accessor) {
    return CRYPTOKEYSOURCETYPE_CHOICE_OTAM;
  }
  return CRYPTOKEYSOURCETYPE_CHOICE_NONE;
}

uci::type::CryptoKeySourceType& CryptoKeySourceType::setCryptoKeySourceTypeChoiceOrdinal(uci::type::CryptoKeySourceType::CryptoKeySourceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case CRYPTOKEYSOURCETYPE_CHOICE_KEYFILEID:
      chooseKeyFileID("setCryptoKeySourceTypeChoiceOrdinal", type);
      break;
    case CRYPTOKEYSOURCETYPE_CHOICE_DS101:
      chooseDS101("setCryptoKeySourceTypeChoiceOrdinal", type);
      break;
    case CRYPTOKEYSOURCETYPE_CHOICE_OTAM:
      chooseOTAM("setCryptoKeySourceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setCryptoKeySourceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::FileLocationID_Type& CryptoKeySourceType::getKeyFileID_() const {
  if (keyFileID_Accessor) {
    return *keyFileID_Accessor;
  }
  throw uci::base::UCIException("Error in getKeyFileID(): Unable to get KeyFileID, field not selected");
}

const uci::type::FileLocationID_Type& CryptoKeySourceType::getKeyFileID() const {
  return getKeyFileID_();
}

uci::type::FileLocationID_Type& CryptoKeySourceType::getKeyFileID() {
  return getKeyFileID_();
}

uci::type::CryptoKeySourceType& CryptoKeySourceType::setKeyFileID(const uci::type::FileLocationID_Type& accessor) {
  chooseKeyFileID();
  if (&accessor != keyFileID_Accessor.get()) {
    keyFileID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CryptoKeySourceType::isKeyFileID() const noexcept {
  return static_cast<bool>(keyFileID_Accessor);
}

uci::type::FileLocationID_Type& CryptoKeySourceType::chooseKeyFileID(const std::string& method, uci::base::accessorType::AccessorType type) {
  dS101_Accessor.reset();
  oTAM_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileLocationID_Type : type};
  if ((!keyFileID_Accessor) || (keyFileID_Accessor->getAccessorType() != requestedType)) {
    keyFileID_Accessor = FileLocationID_Type::create(type);
    if (!keyFileID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *keyFileID_Accessor;
}

uci::type::FileLocationID_Type& CryptoKeySourceType::chooseKeyFileID(uci::base::accessorType::AccessorType type) {
  return chooseKeyFileID("chooseKeyFileID", type);
}

uci::type::CryptoDS101_Enum& CryptoKeySourceType::getDS101_() const {
  if (dS101_Accessor) {
    return *dS101_Accessor;
  }
  throw uci::base::UCIException("Error in getDS101(): Unable to get DS101, field not selected");
}

const uci::type::CryptoDS101_Enum& CryptoKeySourceType::getDS101() const {
  return getDS101_();
}

uci::type::CryptoDS101_Enum& CryptoKeySourceType::getDS101() {
  return getDS101_();
}

uci::type::CryptoKeySourceType& CryptoKeySourceType::setDS101(const uci::type::CryptoDS101_Enum& accessor) {
  chooseDS101();
  if (&accessor != dS101_Accessor.get()) {
    dS101_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CryptoKeySourceType& CryptoKeySourceType::setDS101(uci::type::CryptoDS101_Enum::EnumerationItem value) {
  chooseDS101().setValue(value);
  return *this;
}

bool CryptoKeySourceType::isDS101() const noexcept {
  return static_cast<bool>(dS101_Accessor);
}

uci::type::CryptoDS101_Enum& CryptoKeySourceType::chooseDS101(const std::string& method, uci::base::accessorType::AccessorType type) {
  keyFileID_Accessor.reset();
  oTAM_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cryptoDS101_Enum : type};
  if ((!dS101_Accessor) || (dS101_Accessor->getAccessorType() != requestedType)) {
    dS101_Accessor = CryptoDS101_Enum::create(type);
    if (!dS101_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dS101_Accessor;
}

uci::type::CryptoDS101_Enum& CryptoKeySourceType::chooseDS101(uci::base::accessorType::AccessorType type) {
  return chooseDS101("chooseDS101", type);
}

uci::type::CryptoOTAM_Enum& CryptoKeySourceType::getOTAM_() const {
  if (oTAM_Accessor) {
    return *oTAM_Accessor;
  }
  throw uci::base::UCIException("Error in getOTAM(): Unable to get OTAM, field not selected");
}

const uci::type::CryptoOTAM_Enum& CryptoKeySourceType::getOTAM() const {
  return getOTAM_();
}

uci::type::CryptoOTAM_Enum& CryptoKeySourceType::getOTAM() {
  return getOTAM_();
}

uci::type::CryptoKeySourceType& CryptoKeySourceType::setOTAM(const uci::type::CryptoOTAM_Enum& accessor) {
  chooseOTAM();
  if (&accessor != oTAM_Accessor.get()) {
    oTAM_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CryptoKeySourceType& CryptoKeySourceType::setOTAM(uci::type::CryptoOTAM_Enum::EnumerationItem value) {
  chooseOTAM().setValue(value);
  return *this;
}

bool CryptoKeySourceType::isOTAM() const noexcept {
  return static_cast<bool>(oTAM_Accessor);
}

uci::type::CryptoOTAM_Enum& CryptoKeySourceType::chooseOTAM(const std::string& method, uci::base::accessorType::AccessorType type) {
  keyFileID_Accessor.reset();
  dS101_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cryptoOTAM_Enum : type};
  if ((!oTAM_Accessor) || (oTAM_Accessor->getAccessorType() != requestedType)) {
    oTAM_Accessor = CryptoOTAM_Enum::create(type);
    if (!oTAM_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *oTAM_Accessor;
}

uci::type::CryptoOTAM_Enum& CryptoKeySourceType::chooseOTAM(uci::base::accessorType::AccessorType type) {
  return chooseOTAM("chooseOTAM", type);
}

std::unique_ptr<CryptoKeySourceType> CryptoKeySourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cryptoKeySourceType : type};
  return (requestedType == uci::type::accessorType::cryptoKeySourceType) ? boost::make_unique<CryptoKeySourceType>() : nullptr;
}

/**  */
namespace CryptoKeySourceType_Names {

constexpr const char* Extern_Type_Name{"CryptoKeySourceType"};
constexpr const char* KeyFileID_Name{"KeyFileID"};
constexpr const char* DS101_Name{"DS101"};
constexpr const char* OTAM_Name{"OTAM"};

} // namespace CryptoKeySourceType_Names

void CryptoKeySourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CryptoKeySourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CryptoKeySourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CryptoKeySourceType_Names::KeyFileID_Name) {
      FileLocationID_Type::deserialize(valueType.second, accessor.chooseKeyFileID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CryptoKeySourceType_Names::DS101_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseDS101().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CryptoKeySourceType_Names::OTAM_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseOTAM().setValueFromName(*value);
      }
    }
  }
}

std::string CryptoKeySourceType::serialize(const uci::type::CryptoKeySourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CryptoKeySourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CryptoKeySourceType_Names::Extern_Type_Name);
  }
  if (accessor.isKeyFileID()) {
    FileLocationID_Type::serialize(accessor.getKeyFileID(), node, CryptoKeySourceType_Names::KeyFileID_Name);
  } else if (accessor.isDS101()) {
    CryptoDS101_Enum::serialize(accessor.getDS101(), node, CryptoKeySourceType_Names::DS101_Name, false);
  } else if (accessor.isOTAM()) {
    CryptoOTAM_Enum::serialize(accessor.getOTAM(), node, CryptoKeySourceType_Names::OTAM_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CryptoKeySourceType& CryptoKeySourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CryptoKeySourceType>().release());
}

uci::type::CryptoKeySourceType& CryptoKeySourceType::create(const uci::type::CryptoKeySourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CryptoKeySourceType> newAccessor{boost::make_unique<asb_uci::type::CryptoKeySourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CryptoKeySourceType::destroy(uci::type::CryptoKeySourceType& accessor) {
  delete dynamic_cast<asb_uci::type::CryptoKeySourceType*>(&accessor);
}

} // namespace type

} // namespace uci

