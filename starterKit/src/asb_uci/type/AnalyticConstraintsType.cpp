/** @file AnalyticConstraintsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AnalyticConstraintsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AccessAssessmentFilterType.h"
#include "asb_uci/type/OpConstraintWeightingType.h"
#include "asb_uci/type/RF_TaskPerformanceType.h"
#include "asb_uci/type/SurvivabilityRiskSettingType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AccessAssessmentFilterType.h"
#include "uci/type/AnalyticConstraintsType.h"
#include "uci/type/OpConstraintWeightingType.h"
#include "uci/type/RF_TaskPerformanceType.h"
#include "uci/type/SurvivabilityRiskSettingType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AnalyticConstraintsType::AnalyticConstraintsType()
  : opConstraint_Accessor{boost::make_unique<OpConstraint>(0, 15)},
    riskSetting_Accessor{boost::make_unique<RiskSetting>(0, 4)} {
}

AnalyticConstraintsType::~AnalyticConstraintsType() = default;

void AnalyticConstraintsType::copy(const uci::type::AnalyticConstraintsType& accessor) {
  copyImpl(accessor, false);
}

void AnalyticConstraintsType::copyImpl(const uci::type::AnalyticConstraintsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AnalyticConstraintsType&>(accessor);
    setOpConstraint(*(accessorImpl.opConstraint_Accessor));
    setRiskSetting(*(accessorImpl.riskSetting_Accessor));
    if (accessorImpl.accessAssessmentThreshold_Accessor) {
      setAccessAssessmentThreshold(*(accessorImpl.accessAssessmentThreshold_Accessor));
    } else {
      accessAssessmentThreshold_Accessor.reset();
    }
    if (accessorImpl.rF_TaskPerformance_Accessor) {
      setRF_TaskPerformance(*(accessorImpl.rF_TaskPerformance_Accessor));
    } else {
      rF_TaskPerformance_Accessor.reset();
    }
  }
}

void AnalyticConstraintsType::reset() noexcept {
  opConstraint_Accessor->reset();
  riskSetting_Accessor->reset();
  accessAssessmentThreshold_Accessor.reset();
  rF_TaskPerformance_Accessor.reset();
}

const uci::type::AnalyticConstraintsType::OpConstraint& AnalyticConstraintsType::getOpConstraint() const {
  return *opConstraint_Accessor;
}

uci::type::AnalyticConstraintsType::OpConstraint& AnalyticConstraintsType::getOpConstraint() {
  return *opConstraint_Accessor;
}

uci::type::AnalyticConstraintsType& AnalyticConstraintsType::setOpConstraint(const uci::type::AnalyticConstraintsType::OpConstraint& accessor) {
  if (&accessor != opConstraint_Accessor.get()) {
    opConstraint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AnalyticConstraintsType::RiskSetting& AnalyticConstraintsType::getRiskSetting() const {
  return *riskSetting_Accessor;
}

uci::type::AnalyticConstraintsType::RiskSetting& AnalyticConstraintsType::getRiskSetting() {
  return *riskSetting_Accessor;
}

uci::type::AnalyticConstraintsType& AnalyticConstraintsType::setRiskSetting(const uci::type::AnalyticConstraintsType::RiskSetting& accessor) {
  if (&accessor != riskSetting_Accessor.get()) {
    riskSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AccessAssessmentFilterType& AnalyticConstraintsType::getAccessAssessmentThreshold_() const {
  if (accessAssessmentThreshold_Accessor) {
    return *accessAssessmentThreshold_Accessor;
  }
  throw uci::base::UCIException("Error in getAccessAssessmentThreshold(): An attempt was made to get an optional field that was not enabled, call hasAccessAssessmentThreshold() to determine if it is safe to call getAccessAssessmentThreshold()");
}

const uci::type::AccessAssessmentFilterType& AnalyticConstraintsType::getAccessAssessmentThreshold() const {
  return getAccessAssessmentThreshold_();
}

uci::type::AccessAssessmentFilterType& AnalyticConstraintsType::getAccessAssessmentThreshold() {
  return getAccessAssessmentThreshold_();
}

uci::type::AnalyticConstraintsType& AnalyticConstraintsType::setAccessAssessmentThreshold(const uci::type::AccessAssessmentFilterType& accessor) {
  enableAccessAssessmentThreshold();
  if (&accessor != accessAssessmentThreshold_Accessor.get()) {
    accessAssessmentThreshold_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AnalyticConstraintsType::hasAccessAssessmentThreshold() const noexcept {
  return static_cast<bool>(accessAssessmentThreshold_Accessor);
}

uci::type::AccessAssessmentFilterType& AnalyticConstraintsType::enableAccessAssessmentThreshold(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::accessAssessmentFilterType : type};
  if ((!accessAssessmentThreshold_Accessor) || (accessAssessmentThreshold_Accessor->getAccessorType() != requestedType)) {
    accessAssessmentThreshold_Accessor = AccessAssessmentFilterType::create(requestedType);
    if (!accessAssessmentThreshold_Accessor) {
      throw uci::base::UCIException("Error in enableAccessAssessmentThreshold(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *accessAssessmentThreshold_Accessor;
}

uci::type::AnalyticConstraintsType& AnalyticConstraintsType::clearAccessAssessmentThreshold() noexcept {
  accessAssessmentThreshold_Accessor.reset();
  return *this;
}

uci::type::RF_TaskPerformanceType& AnalyticConstraintsType::getRF_TaskPerformance_() const {
  if (rF_TaskPerformance_Accessor) {
    return *rF_TaskPerformance_Accessor;
  }
  throw uci::base::UCIException("Error in getRF_TaskPerformance(): An attempt was made to get an optional field that was not enabled, call hasRF_TaskPerformance() to determine if it is safe to call getRF_TaskPerformance()");
}

const uci::type::RF_TaskPerformanceType& AnalyticConstraintsType::getRF_TaskPerformance() const {
  return getRF_TaskPerformance_();
}

uci::type::RF_TaskPerformanceType& AnalyticConstraintsType::getRF_TaskPerformance() {
  return getRF_TaskPerformance_();
}

uci::type::AnalyticConstraintsType& AnalyticConstraintsType::setRF_TaskPerformance(const uci::type::RF_TaskPerformanceType& accessor) {
  enableRF_TaskPerformance();
  if (&accessor != rF_TaskPerformance_Accessor.get()) {
    rF_TaskPerformance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AnalyticConstraintsType::hasRF_TaskPerformance() const noexcept {
  return static_cast<bool>(rF_TaskPerformance_Accessor);
}

uci::type::RF_TaskPerformanceType& AnalyticConstraintsType::enableRF_TaskPerformance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_TaskPerformanceType : type};
  if ((!rF_TaskPerformance_Accessor) || (rF_TaskPerformance_Accessor->getAccessorType() != requestedType)) {
    rF_TaskPerformance_Accessor = RF_TaskPerformanceType::create(requestedType);
    if (!rF_TaskPerformance_Accessor) {
      throw uci::base::UCIException("Error in enableRF_TaskPerformance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *rF_TaskPerformance_Accessor;
}

uci::type::AnalyticConstraintsType& AnalyticConstraintsType::clearRF_TaskPerformance() noexcept {
  rF_TaskPerformance_Accessor.reset();
  return *this;
}

std::unique_ptr<AnalyticConstraintsType> AnalyticConstraintsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::analyticConstraintsType : type};
  return (requestedType == uci::type::accessorType::analyticConstraintsType) ? boost::make_unique<AnalyticConstraintsType>() : nullptr;
}

/**  */
namespace AnalyticConstraintsType_Names {

constexpr const char* Extern_Type_Name{"AnalyticConstraintsType"};
constexpr const char* OpConstraint_Name{"OpConstraint"};
constexpr const char* RiskSetting_Name{"RiskSetting"};
constexpr const char* AccessAssessmentThreshold_Name{"AccessAssessmentThreshold"};
constexpr const char* RF_TaskPerformance_Name{"RF_TaskPerformance"};

} // namespace AnalyticConstraintsType_Names

void AnalyticConstraintsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AnalyticConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AnalyticConstraintsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AnalyticConstraintsType_Names::OpConstraint_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AnalyticConstraintsType::OpConstraint& boundedList = accessor.getOpConstraint();
        const uci::type::AnalyticConstraintsType::OpConstraint::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OpConstraintWeightingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + AnalyticConstraintsType_Names::RiskSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AnalyticConstraintsType::RiskSetting& boundedList = accessor.getRiskSetting();
        const uci::type::AnalyticConstraintsType::RiskSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SurvivabilityRiskSettingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + AnalyticConstraintsType_Names::AccessAssessmentThreshold_Name) {
      AccessAssessmentFilterType::deserialize(valueType.second, accessor.enableAccessAssessmentThreshold(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AnalyticConstraintsType_Names::RF_TaskPerformance_Name) {
      RF_TaskPerformanceType::deserialize(valueType.second, accessor.enableRF_TaskPerformance(), nodeName, nsPrefix);
    }
  }
}

std::string AnalyticConstraintsType::serialize(const uci::type::AnalyticConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AnalyticConstraintsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AnalyticConstraintsType_Names::Extern_Type_Name);
  }
  {
    const uci::type::AnalyticConstraintsType::OpConstraint& boundedList = accessor.getOpConstraint();
    for (uci::type::AnalyticConstraintsType::OpConstraint::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OpConstraintWeightingType::serialize(boundedList.at(i), node, AnalyticConstraintsType_Names::OpConstraint_Name);
    }
  }
  {
    const uci::type::AnalyticConstraintsType::RiskSetting& boundedList = accessor.getRiskSetting();
    for (uci::type::AnalyticConstraintsType::RiskSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SurvivabilityRiskSettingType::serialize(boundedList.at(i), node, AnalyticConstraintsType_Names::RiskSetting_Name);
    }
  }
  if (accessor.hasAccessAssessmentThreshold()) {
    AccessAssessmentFilterType::serialize(accessor.getAccessAssessmentThreshold(), node, AnalyticConstraintsType_Names::AccessAssessmentThreshold_Name);
  }
  if (accessor.hasRF_TaskPerformance()) {
    RF_TaskPerformanceType::serialize(accessor.getRF_TaskPerformance(), node, AnalyticConstraintsType_Names::RF_TaskPerformance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AnalyticConstraintsType& AnalyticConstraintsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AnalyticConstraintsType>().release());
}

uci::type::AnalyticConstraintsType& AnalyticConstraintsType::create(const uci::type::AnalyticConstraintsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AnalyticConstraintsType> newAccessor{boost::make_unique<asb_uci::type::AnalyticConstraintsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AnalyticConstraintsType::destroy(uci::type::AnalyticConstraintsType& accessor) {
  delete dynamic_cast<asb_uci::type::AnalyticConstraintsType*>(&accessor);
}

} // namespace type

} // namespace uci

