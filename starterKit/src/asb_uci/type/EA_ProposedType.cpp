/** @file EA_ProposedType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EA_ProposedType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityID_Type.h"
#include "asb_uci/type/EA_EntityType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityID_Type.h"
#include "uci/type/EA_EntityType.h"
#include "uci/type/EA_ProposedType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EA_ProposedType::EA_ProposedType() = default;

EA_ProposedType::~EA_ProposedType() = default;

void EA_ProposedType::copy(const uci::type::EA_ProposedType& accessor) {
  copyImpl(accessor, false);
}

void EA_ProposedType::copyImpl(const uci::type::EA_ProposedType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EA_ProposedType&>(accessor);
    if (accessorImpl.activityID_Accessor) {
      setActivityID(*(accessorImpl.activityID_Accessor));
    } else {
      activityID_Accessor.reset();
    }
    if (accessorImpl.entity_Accessor) {
      setEntity(*(accessorImpl.entity_Accessor));
    } else {
      entity_Accessor.reset();
    }
  }
}

void EA_ProposedType::reset() noexcept {
  activityID_Accessor.reset();
  entity_Accessor.reset();
}

uci::type::EA_ProposedType::EA_ProposedTypeChoice EA_ProposedType::getEA_ProposedTypeChoiceOrdinal() const noexcept {
  if (activityID_Accessor) {
    return EA_PROPOSEDTYPE_CHOICE_ACTIVITYID;
  }
  if (entity_Accessor) {
    return EA_PROPOSEDTYPE_CHOICE_ENTITY;
  }
  return EA_PROPOSEDTYPE_CHOICE_NONE;
}

uci::type::EA_ProposedType& EA_ProposedType::setEA_ProposedTypeChoiceOrdinal(uci::type::EA_ProposedType::EA_ProposedTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EA_PROPOSEDTYPE_CHOICE_ACTIVITYID:
      chooseActivityID("setEA_ProposedTypeChoiceOrdinal", type);
      break;
    case EA_PROPOSEDTYPE_CHOICE_ENTITY:
      chooseEntity("setEA_ProposedTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEA_ProposedTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ActivityID_Type& EA_ProposedType::getActivityID_() const {
  if (activityID_Accessor) {
    return *activityID_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityID(): Unable to get ActivityID, field not selected");
}

const uci::type::ActivityID_Type& EA_ProposedType::getActivityID() const {
  return getActivityID_();
}

uci::type::ActivityID_Type& EA_ProposedType::getActivityID() {
  return getActivityID_();
}

uci::type::EA_ProposedType& EA_ProposedType::setActivityID(const uci::type::ActivityID_Type& accessor) {
  chooseActivityID();
  if (&accessor != activityID_Accessor.get()) {
    activityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_ProposedType::isActivityID() const noexcept {
  return static_cast<bool>(activityID_Accessor);
}

uci::type::ActivityID_Type& EA_ProposedType::chooseActivityID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityID_Type : type};
  if ((!activityID_Accessor) || (activityID_Accessor->getAccessorType() != requestedType)) {
    activityID_Accessor = ActivityID_Type::create(type);
    if (!activityID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityID_Accessor;
}

uci::type::ActivityID_Type& EA_ProposedType::chooseActivityID(uci::base::accessorType::AccessorType type) {
  return chooseActivityID("chooseActivityID", type);
}

uci::type::EA_EntityType& EA_ProposedType::getEntity_() const {
  if (entity_Accessor) {
    return *entity_Accessor;
  }
  throw uci::base::UCIException("Error in getEntity(): Unable to get Entity, field not selected");
}

const uci::type::EA_EntityType& EA_ProposedType::getEntity() const {
  return getEntity_();
}

uci::type::EA_EntityType& EA_ProposedType::getEntity() {
  return getEntity_();
}

uci::type::EA_ProposedType& EA_ProposedType::setEntity(const uci::type::EA_EntityType& accessor) {
  chooseEntity();
  if (&accessor != entity_Accessor.get()) {
    entity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_ProposedType::isEntity() const noexcept {
  return static_cast<bool>(entity_Accessor);
}

uci::type::EA_EntityType& EA_ProposedType::chooseEntity(const std::string& method, uci::base::accessorType::AccessorType type) {
  activityID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_EntityType : type};
  if ((!entity_Accessor) || (entity_Accessor->getAccessorType() != requestedType)) {
    entity_Accessor = EA_EntityType::create(type);
    if (!entity_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entity_Accessor;
}

uci::type::EA_EntityType& EA_ProposedType::chooseEntity(uci::base::accessorType::AccessorType type) {
  return chooseEntity("chooseEntity", type);
}

std::unique_ptr<EA_ProposedType> EA_ProposedType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_ProposedType : type};
  return (requestedType == uci::type::accessorType::eA_ProposedType) ? boost::make_unique<EA_ProposedType>() : nullptr;
}

/**  */
namespace EA_ProposedType_Names {

constexpr const char* Extern_Type_Name{"EA_ProposedType"};
constexpr const char* ActivityID_Name{"ActivityID"};
constexpr const char* Entity_Name{"Entity"};

} // namespace EA_ProposedType_Names

void EA_ProposedType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_ProposedType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EA_ProposedType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EA_ProposedType_Names::ActivityID_Name) {
      ActivityID_Type::deserialize(valueType.second, accessor.chooseActivityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_ProposedType_Names::Entity_Name) {
      EA_EntityType::deserialize(valueType.second, accessor.chooseEntity(), nodeName, nsPrefix);
    }
  }
}

std::string EA_ProposedType::serialize(const uci::type::EA_ProposedType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EA_ProposedType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EA_ProposedType_Names::Extern_Type_Name);
  }
  if (accessor.isActivityID()) {
    ActivityID_Type::serialize(accessor.getActivityID(), node, EA_ProposedType_Names::ActivityID_Name);
  } else if (accessor.isEntity()) {
    EA_EntityType::serialize(accessor.getEntity(), node, EA_ProposedType_Names::Entity_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EA_ProposedType& EA_ProposedType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EA_ProposedType>().release());
}

uci::type::EA_ProposedType& EA_ProposedType::create(const uci::type::EA_ProposedType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EA_ProposedType> newAccessor{boost::make_unique<asb_uci::type::EA_ProposedType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EA_ProposedType::destroy(uci::type::EA_ProposedType& accessor) {
  delete dynamic_cast<asb_uci::type::EA_ProposedType*>(&accessor);
}

} // namespace type

} // namespace uci

