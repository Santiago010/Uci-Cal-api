/** @file CS_FreeFormatType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CS_FreeFormatType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FileLocationID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CS_FreeFormatType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FileLocationID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CS_FreeFormatType::CS_FreeFormatType() = default;

CS_FreeFormatType::~CS_FreeFormatType() = default;

void CS_FreeFormatType::copy(const uci::type::CS_FreeFormatType& accessor) {
  copyImpl(accessor, false);
}

void CS_FreeFormatType::copyImpl(const uci::type::CS_FreeFormatType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CS_FreeFormatType&>(accessor);
    if (accessorImpl.threatsID_Accessor) {
      setThreatsID(*(accessorImpl.threatsID_Accessor));
    } else {
      threatsID_Accessor.reset();
    }
    if (accessorImpl.descriptionID_Accessor) {
      setDescriptionID(*(accessorImpl.descriptionID_Accessor));
    } else {
      descriptionID_Accessor.reset();
    }
    if (accessorImpl.performanceID_Accessor) {
      setPerformanceID(*(accessorImpl.performanceID_Accessor));
    } else {
      performanceID_Accessor.reset();
    }
    if (accessorImpl.commentsID_Accessor) {
      setCommentsID(*(accessorImpl.commentsID_Accessor));
    } else {
      commentsID_Accessor.reset();
    }
  }
}

void CS_FreeFormatType::reset() noexcept {
  threatsID_Accessor.reset();
  descriptionID_Accessor.reset();
  performanceID_Accessor.reset();
  commentsID_Accessor.reset();
}

uci::type::FileLocationID_Type& CS_FreeFormatType::getThreatsID_() const {
  if (threatsID_Accessor) {
    return *threatsID_Accessor;
  }
  throw uci::base::UCIException("Error in getThreatsID(): An attempt was made to get an optional field that was not enabled, call hasThreatsID() to determine if it is safe to call getThreatsID()");
}

const uci::type::FileLocationID_Type& CS_FreeFormatType::getThreatsID() const {
  return getThreatsID_();
}

uci::type::FileLocationID_Type& CS_FreeFormatType::getThreatsID() {
  return getThreatsID_();
}

uci::type::CS_FreeFormatType& CS_FreeFormatType::setThreatsID(const uci::type::FileLocationID_Type& accessor) {
  enableThreatsID();
  if (&accessor != threatsID_Accessor.get()) {
    threatsID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CS_FreeFormatType::hasThreatsID() const noexcept {
  return static_cast<bool>(threatsID_Accessor);
}

uci::type::FileLocationID_Type& CS_FreeFormatType::enableThreatsID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileLocationID_Type : type};
  if ((!threatsID_Accessor) || (threatsID_Accessor->getAccessorType() != requestedType)) {
    threatsID_Accessor = FileLocationID_Type::create(requestedType);
    if (!threatsID_Accessor) {
      throw uci::base::UCIException("Error in enableThreatsID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *threatsID_Accessor;
}

uci::type::CS_FreeFormatType& CS_FreeFormatType::clearThreatsID() noexcept {
  threatsID_Accessor.reset();
  return *this;
}

uci::type::FileLocationID_Type& CS_FreeFormatType::getDescriptionID_() const {
  if (descriptionID_Accessor) {
    return *descriptionID_Accessor;
  }
  throw uci::base::UCIException("Error in getDescriptionID(): An attempt was made to get an optional field that was not enabled, call hasDescriptionID() to determine if it is safe to call getDescriptionID()");
}

const uci::type::FileLocationID_Type& CS_FreeFormatType::getDescriptionID() const {
  return getDescriptionID_();
}

uci::type::FileLocationID_Type& CS_FreeFormatType::getDescriptionID() {
  return getDescriptionID_();
}

uci::type::CS_FreeFormatType& CS_FreeFormatType::setDescriptionID(const uci::type::FileLocationID_Type& accessor) {
  enableDescriptionID();
  if (&accessor != descriptionID_Accessor.get()) {
    descriptionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CS_FreeFormatType::hasDescriptionID() const noexcept {
  return static_cast<bool>(descriptionID_Accessor);
}

uci::type::FileLocationID_Type& CS_FreeFormatType::enableDescriptionID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileLocationID_Type : type};
  if ((!descriptionID_Accessor) || (descriptionID_Accessor->getAccessorType() != requestedType)) {
    descriptionID_Accessor = FileLocationID_Type::create(requestedType);
    if (!descriptionID_Accessor) {
      throw uci::base::UCIException("Error in enableDescriptionID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *descriptionID_Accessor;
}

uci::type::CS_FreeFormatType& CS_FreeFormatType::clearDescriptionID() noexcept {
  descriptionID_Accessor.reset();
  return *this;
}

uci::type::FileLocationID_Type& CS_FreeFormatType::getPerformanceID_() const {
  if (performanceID_Accessor) {
    return *performanceID_Accessor;
  }
  throw uci::base::UCIException("Error in getPerformanceID(): An attempt was made to get an optional field that was not enabled, call hasPerformanceID() to determine if it is safe to call getPerformanceID()");
}

const uci::type::FileLocationID_Type& CS_FreeFormatType::getPerformanceID() const {
  return getPerformanceID_();
}

uci::type::FileLocationID_Type& CS_FreeFormatType::getPerformanceID() {
  return getPerformanceID_();
}

uci::type::CS_FreeFormatType& CS_FreeFormatType::setPerformanceID(const uci::type::FileLocationID_Type& accessor) {
  enablePerformanceID();
  if (&accessor != performanceID_Accessor.get()) {
    performanceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CS_FreeFormatType::hasPerformanceID() const noexcept {
  return static_cast<bool>(performanceID_Accessor);
}

uci::type::FileLocationID_Type& CS_FreeFormatType::enablePerformanceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileLocationID_Type : type};
  if ((!performanceID_Accessor) || (performanceID_Accessor->getAccessorType() != requestedType)) {
    performanceID_Accessor = FileLocationID_Type::create(requestedType);
    if (!performanceID_Accessor) {
      throw uci::base::UCIException("Error in enablePerformanceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *performanceID_Accessor;
}

uci::type::CS_FreeFormatType& CS_FreeFormatType::clearPerformanceID() noexcept {
  performanceID_Accessor.reset();
  return *this;
}

uci::type::FileLocationID_Type& CS_FreeFormatType::getCommentsID_() const {
  if (commentsID_Accessor) {
    return *commentsID_Accessor;
  }
  throw uci::base::UCIException("Error in getCommentsID(): An attempt was made to get an optional field that was not enabled, call hasCommentsID() to determine if it is safe to call getCommentsID()");
}

const uci::type::FileLocationID_Type& CS_FreeFormatType::getCommentsID() const {
  return getCommentsID_();
}

uci::type::FileLocationID_Type& CS_FreeFormatType::getCommentsID() {
  return getCommentsID_();
}

uci::type::CS_FreeFormatType& CS_FreeFormatType::setCommentsID(const uci::type::FileLocationID_Type& accessor) {
  enableCommentsID();
  if (&accessor != commentsID_Accessor.get()) {
    commentsID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CS_FreeFormatType::hasCommentsID() const noexcept {
  return static_cast<bool>(commentsID_Accessor);
}

uci::type::FileLocationID_Type& CS_FreeFormatType::enableCommentsID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileLocationID_Type : type};
  if ((!commentsID_Accessor) || (commentsID_Accessor->getAccessorType() != requestedType)) {
    commentsID_Accessor = FileLocationID_Type::create(requestedType);
    if (!commentsID_Accessor) {
      throw uci::base::UCIException("Error in enableCommentsID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commentsID_Accessor;
}

uci::type::CS_FreeFormatType& CS_FreeFormatType::clearCommentsID() noexcept {
  commentsID_Accessor.reset();
  return *this;
}

std::unique_ptr<CS_FreeFormatType> CS_FreeFormatType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_FreeFormatType : type};
  return (requestedType == uci::type::accessorType::cS_FreeFormatType) ? boost::make_unique<CS_FreeFormatType>() : nullptr;
}

/**  */
namespace CS_FreeFormatType_Names {

constexpr const char* Extern_Type_Name{"CS_FreeFormatType"};
constexpr const char* ThreatsID_Name{"ThreatsID"};
constexpr const char* DescriptionID_Name{"DescriptionID"};
constexpr const char* PerformanceID_Name{"PerformanceID"};
constexpr const char* CommentsID_Name{"CommentsID"};

} // namespace CS_FreeFormatType_Names

void CS_FreeFormatType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_FreeFormatType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CS_FreeFormatType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CS_FreeFormatType_Names::ThreatsID_Name) {
      FileLocationID_Type::deserialize(valueType.second, accessor.enableThreatsID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_FreeFormatType_Names::DescriptionID_Name) {
      FileLocationID_Type::deserialize(valueType.second, accessor.enableDescriptionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_FreeFormatType_Names::PerformanceID_Name) {
      FileLocationID_Type::deserialize(valueType.second, accessor.enablePerformanceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_FreeFormatType_Names::CommentsID_Name) {
      FileLocationID_Type::deserialize(valueType.second, accessor.enableCommentsID(), nodeName, nsPrefix);
    }
  }
}

std::string CS_FreeFormatType::serialize(const uci::type::CS_FreeFormatType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CS_FreeFormatType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CS_FreeFormatType_Names::Extern_Type_Name);
  }
  if (accessor.hasThreatsID()) {
    FileLocationID_Type::serialize(accessor.getThreatsID(), node, CS_FreeFormatType_Names::ThreatsID_Name);
  }
  if (accessor.hasDescriptionID()) {
    FileLocationID_Type::serialize(accessor.getDescriptionID(), node, CS_FreeFormatType_Names::DescriptionID_Name);
  }
  if (accessor.hasPerformanceID()) {
    FileLocationID_Type::serialize(accessor.getPerformanceID(), node, CS_FreeFormatType_Names::PerformanceID_Name);
  }
  if (accessor.hasCommentsID()) {
    FileLocationID_Type::serialize(accessor.getCommentsID(), node, CS_FreeFormatType_Names::CommentsID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CS_FreeFormatType& CS_FreeFormatType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CS_FreeFormatType>().release());
}

uci::type::CS_FreeFormatType& CS_FreeFormatType::create(const uci::type::CS_FreeFormatType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CS_FreeFormatType> newAccessor{boost::make_unique<asb_uci::type::CS_FreeFormatType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CS_FreeFormatType::destroy(uci::type::CS_FreeFormatType& accessor) {
  delete dynamic_cast<asb_uci::type::CS_FreeFormatType*>(&accessor);
}

} // namespace type

} // namespace uci

