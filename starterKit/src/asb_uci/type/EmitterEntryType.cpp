/** @file EmitterEntryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EmitterEntryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EmitterIdentityType.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EmitterEntryType.h"
#include "uci/type/EmitterIdentityType.h"
#include "uci/type/ForeignKeyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EmitterEntryType::EmitterEntryType() = default;

EmitterEntryType::~EmitterEntryType() = default;

void EmitterEntryType::copy(const uci::type::EmitterEntryType& accessor) {
  copyImpl(accessor, false);
}

void EmitterEntryType::copyImpl(const uci::type::EmitterEntryType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EmitterEntryType&>(accessor);
    if (accessorImpl.emitter_Accessor) {
      setEmitter(*(accessorImpl.emitter_Accessor));
    } else {
      emitter_Accessor.reset();
    }
    if (accessorImpl.mDF_Entry_Accessor) {
      setMDF_Entry(*(accessorImpl.mDF_Entry_Accessor));
    } else {
      mDF_Entry_Accessor.reset();
    }
  }
}

void EmitterEntryType::reset() noexcept {
  emitter_Accessor.reset();
  mDF_Entry_Accessor.reset();
}

uci::type::EmitterEntryType::EmitterEntryTypeChoice EmitterEntryType::getEmitterEntryTypeChoiceOrdinal() const noexcept {
  if (emitter_Accessor) {
    return EMITTERENTRYTYPE_CHOICE_EMITTER;
  }
  if (mDF_Entry_Accessor) {
    return EMITTERENTRYTYPE_CHOICE_MDF_ENTRY;
  }
  return EMITTERENTRYTYPE_CHOICE_NONE;
}

uci::type::EmitterEntryType& EmitterEntryType::setEmitterEntryTypeChoiceOrdinal(uci::type::EmitterEntryType::EmitterEntryTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EMITTERENTRYTYPE_CHOICE_EMITTER:
      chooseEmitter("setEmitterEntryTypeChoiceOrdinal", type);
      break;
    case EMITTERENTRYTYPE_CHOICE_MDF_ENTRY:
      chooseMDF_Entry("setEmitterEntryTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEmitterEntryTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EmitterIdentityType& EmitterEntryType::getEmitter_() const {
  if (emitter_Accessor) {
    return *emitter_Accessor;
  }
  throw uci::base::UCIException("Error in getEmitter(): Unable to get Emitter, field not selected");
}

const uci::type::EmitterIdentityType& EmitterEntryType::getEmitter() const {
  return getEmitter_();
}

uci::type::EmitterIdentityType& EmitterEntryType::getEmitter() {
  return getEmitter_();
}

uci::type::EmitterEntryType& EmitterEntryType::setEmitter(const uci::type::EmitterIdentityType& accessor) {
  chooseEmitter();
  if (&accessor != emitter_Accessor.get()) {
    emitter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EmitterEntryType::isEmitter() const noexcept {
  return static_cast<bool>(emitter_Accessor);
}

uci::type::EmitterIdentityType& EmitterEntryType::chooseEmitter(const std::string& method, uci::base::accessorType::AccessorType type) {
  mDF_Entry_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emitterIdentityType : type};
  if ((!emitter_Accessor) || (emitter_Accessor->getAccessorType() != requestedType)) {
    emitter_Accessor = EmitterIdentityType::create(type);
    if (!emitter_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emitter_Accessor;
}

uci::type::EmitterIdentityType& EmitterEntryType::chooseEmitter(uci::base::accessorType::AccessorType type) {
  return chooseEmitter("chooseEmitter", type);
}

uci::type::ForeignKeyType& EmitterEntryType::getMDF_Entry_() const {
  if (mDF_Entry_Accessor) {
    return *mDF_Entry_Accessor;
  }
  throw uci::base::UCIException("Error in getMDF_Entry(): Unable to get MDF_Entry, field not selected");
}

const uci::type::ForeignKeyType& EmitterEntryType::getMDF_Entry() const {
  return getMDF_Entry_();
}

uci::type::ForeignKeyType& EmitterEntryType::getMDF_Entry() {
  return getMDF_Entry_();
}

uci::type::EmitterEntryType& EmitterEntryType::setMDF_Entry(const uci::type::ForeignKeyType& accessor) {
  chooseMDF_Entry("setMDF_Entry", accessor.getAccessorType());
  if (&accessor != mDF_Entry_Accessor.get()) {
    mDF_Entry_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EmitterEntryType::isMDF_Entry() const noexcept {
  return static_cast<bool>(mDF_Entry_Accessor);
}

uci::type::ForeignKeyType& EmitterEntryType::chooseMDF_Entry(const std::string& method, uci::base::accessorType::AccessorType type) {
  emitter_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!mDF_Entry_Accessor) || (mDF_Entry_Accessor->getAccessorType() != requestedType)) {
    mDF_Entry_Accessor = ForeignKeyType::create(type);
    if (!mDF_Entry_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mDF_Entry_Accessor;
}

uci::type::ForeignKeyType& EmitterEntryType::chooseMDF_Entry(uci::base::accessorType::AccessorType type) {
  return chooseMDF_Entry("chooseMDF_Entry", type);
}

std::unique_ptr<EmitterEntryType> EmitterEntryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emitterEntryType : type};
  return (requestedType == uci::type::accessorType::emitterEntryType) ? boost::make_unique<EmitterEntryType>() : nullptr;
}

/**  */
namespace EmitterEntryType_Names {

constexpr const char* Extern_Type_Name{"EmitterEntryType"};
constexpr const char* Emitter_Name{"Emitter"};
constexpr const char* MDF_Entry_Name{"MDF_Entry"};

} // namespace EmitterEntryType_Names

void EmitterEntryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EmitterEntryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EmitterEntryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EmitterEntryType_Names::Emitter_Name) {
      EmitterIdentityType::deserialize(valueType.second, accessor.chooseEmitter(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmitterEntryType_Names::MDF_Entry_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseMDF_Entry(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string EmitterEntryType::serialize(const uci::type::EmitterEntryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EmitterEntryType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EmitterEntryType_Names::Extern_Type_Name);
  }
  if (accessor.isEmitter()) {
    EmitterIdentityType::serialize(accessor.getEmitter(), node, EmitterEntryType_Names::Emitter_Name);
  } else if (accessor.isMDF_Entry()) {
    ForeignKeyType::serialize(accessor.getMDF_Entry(), node, EmitterEntryType_Names::MDF_Entry_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EmitterEntryType& EmitterEntryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EmitterEntryType>().release());
}

uci::type::EmitterEntryType& EmitterEntryType::create(const uci::type::EmitterEntryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EmitterEntryType> newAccessor{boost::make_unique<asb_uci::type::EmitterEntryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EmitterEntryType::destroy(uci::type::EmitterEntryType& accessor) {
  delete dynamic_cast<asb_uci::type::EmitterEntryType*>(&accessor);
}

} // namespace type

} // namespace uci

