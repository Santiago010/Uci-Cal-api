/** @file CompletionStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CompletionStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CompletionStatusType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/PercentType.h"
#include "uci/type/VisibleString1024Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CompletionStatusType::CompletionStatusType() = default;

CompletionStatusType::~CompletionStatusType() = default;

void CompletionStatusType::copy(const uci::type::CompletionStatusType& accessor) {
  copyImpl(accessor, false);
}

void CompletionStatusType::copyImpl(const uci::type::CompletionStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CompletionStatusType&>(accessor);
    if (accessorImpl.hasEstimatedTimeComplete()) {
      setEstimatedTimeComplete(accessorImpl.getEstimatedTimeComplete());
    } else {
      clearEstimatedTimeComplete();
    }
    if (accessorImpl.hasEstimatedPercentComplete()) {
      setEstimatedPercentComplete(accessorImpl.getEstimatedPercentComplete());
    } else {
      clearEstimatedPercentComplete();
    }
    if (accessorImpl.hasActualTimeStarted()) {
      setActualTimeStarted(accessorImpl.getActualTimeStarted());
    } else {
      clearActualTimeStarted();
    }
    if (accessorImpl.hasActualTimeComplete()) {
      setActualTimeComplete(accessorImpl.getActualTimeComplete());
    } else {
      clearActualTimeComplete();
    }
    if (accessorImpl.description_Accessor) {
      setDescription(*(accessorImpl.description_Accessor));
    } else {
      description_Accessor.reset();
    }
  }
}

void CompletionStatusType::reset() noexcept {
  clearEstimatedTimeComplete();
  clearEstimatedPercentComplete();
  clearActualTimeStarted();
  clearActualTimeComplete();
  description_Accessor.reset();
}

uci::type::DateTimeTypeValue CompletionStatusType::getEstimatedTimeComplete() const {
  if (estimatedTimeComplete_Accessor) {
    return *estimatedTimeComplete_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedTimeComplete(): An attempt was made to get an optional field that was not enabled, call hasEstimatedTimeComplete() to determine if it is safe to call getEstimatedTimeComplete()");
}

uci::type::CompletionStatusType& CompletionStatusType::setEstimatedTimeComplete(uci::type::DateTimeTypeValue value) {
  estimatedTimeComplete_Accessor = value;
  return *this;
}

bool CompletionStatusType::hasEstimatedTimeComplete() const noexcept {
  return estimatedTimeComplete_Accessor.has_value();
}

uci::type::CompletionStatusType& CompletionStatusType::clearEstimatedTimeComplete() noexcept {
  estimatedTimeComplete_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue CompletionStatusType::getEstimatedPercentComplete() const {
  if (estimatedPercentComplete_Accessor) {
    return *estimatedPercentComplete_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedPercentComplete(): An attempt was made to get an optional field that was not enabled, call hasEstimatedPercentComplete() to determine if it is safe to call getEstimatedPercentComplete()");
}

uci::type::CompletionStatusType& CompletionStatusType::setEstimatedPercentComplete(uci::type::PercentTypeValue value) {
  estimatedPercentComplete_Accessor = value;
  return *this;
}

bool CompletionStatusType::hasEstimatedPercentComplete() const noexcept {
  return estimatedPercentComplete_Accessor.has_value();
}

uci::type::CompletionStatusType& CompletionStatusType::clearEstimatedPercentComplete() noexcept {
  estimatedPercentComplete_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue CompletionStatusType::getActualTimeStarted() const {
  if (actualTimeStarted_Accessor) {
    return *actualTimeStarted_Accessor;
  }
  throw uci::base::UCIException("Error in getActualTimeStarted(): An attempt was made to get an optional field that was not enabled, call hasActualTimeStarted() to determine if it is safe to call getActualTimeStarted()");
}

uci::type::CompletionStatusType& CompletionStatusType::setActualTimeStarted(uci::type::DateTimeTypeValue value) {
  actualTimeStarted_Accessor = value;
  return *this;
}

bool CompletionStatusType::hasActualTimeStarted() const noexcept {
  return actualTimeStarted_Accessor.has_value();
}

uci::type::CompletionStatusType& CompletionStatusType::clearActualTimeStarted() noexcept {
  actualTimeStarted_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue CompletionStatusType::getActualTimeComplete() const {
  if (actualTimeComplete_Accessor) {
    return *actualTimeComplete_Accessor;
  }
  throw uci::base::UCIException("Error in getActualTimeComplete(): An attempt was made to get an optional field that was not enabled, call hasActualTimeComplete() to determine if it is safe to call getActualTimeComplete()");
}

uci::type::CompletionStatusType& CompletionStatusType::setActualTimeComplete(uci::type::DateTimeTypeValue value) {
  actualTimeComplete_Accessor = value;
  return *this;
}

bool CompletionStatusType::hasActualTimeComplete() const noexcept {
  return actualTimeComplete_Accessor.has_value();
}

uci::type::CompletionStatusType& CompletionStatusType::clearActualTimeComplete() noexcept {
  actualTimeComplete_Accessor.reset();
  return *this;
}

uci::type::VisibleString1024Type& CompletionStatusType::getDescription_() const {
  if (description_Accessor) {
    return *description_Accessor;
  }
  throw uci::base::UCIException("Error in getDescription(): An attempt was made to get an optional field that was not enabled, call hasDescription() to determine if it is safe to call getDescription()");
}

const uci::type::VisibleString1024Type& CompletionStatusType::getDescription() const {
  return getDescription_();
}

uci::type::VisibleString1024Type& CompletionStatusType::getDescription() {
  return getDescription_();
}

uci::type::CompletionStatusType& CompletionStatusType::setDescription(const uci::type::VisibleString1024Type& value) {
  return setDescription(value.c_str());
}

uci::type::CompletionStatusType& CompletionStatusType::setDescription(const std::string& value) {
  return setDescription(value.c_str());
}

uci::type::CompletionStatusType& CompletionStatusType::setDescription(const char* value) {
  enableDescription().setStringValue(value);
  return *this;
}

bool CompletionStatusType::hasDescription() const noexcept {
  return static_cast<bool>(description_Accessor);
}

uci::type::VisibleString1024Type& CompletionStatusType::enableDescription(uci::base::accessorType::AccessorType type) {
  if (!description_Accessor) {
    description_Accessor = VisibleString1024Type::create(type);
  }
  return *description_Accessor;
}

uci::type::CompletionStatusType& CompletionStatusType::clearDescription() noexcept {
  description_Accessor.reset();
  return *this;
}

std::unique_ptr<CompletionStatusType> CompletionStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::completionStatusType : type};
  return (requestedType == uci::type::accessorType::completionStatusType) ? boost::make_unique<CompletionStatusType>() : nullptr;
}

/**  */
namespace CompletionStatusType_Names {

constexpr const char* Extern_Type_Name{"CompletionStatusType"};
constexpr const char* EstimatedTimeComplete_Name{"EstimatedTimeComplete"};
constexpr const char* EstimatedPercentComplete_Name{"EstimatedPercentComplete"};
constexpr const char* ActualTimeStarted_Name{"ActualTimeStarted"};
constexpr const char* ActualTimeComplete_Name{"ActualTimeComplete"};
constexpr const char* Description_Name{"Description"};

} // namespace CompletionStatusType_Names

void CompletionStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CompletionStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CompletionStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CompletionStatusType_Names::EstimatedTimeComplete_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedTimeComplete(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + CompletionStatusType_Names::EstimatedPercentComplete_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedPercentComplete(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CompletionStatusType_Names::ActualTimeStarted_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualTimeStarted(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + CompletionStatusType_Names::ActualTimeComplete_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualTimeComplete(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + CompletionStatusType_Names::Description_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDescription(*value);
      }
    }
  }
}

std::string CompletionStatusType::serialize(const uci::type::CompletionStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CompletionStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CompletionStatusType_Names::Extern_Type_Name);
  }
  if (accessor.hasEstimatedTimeComplete()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEstimatedTimeComplete(), node, CompletionStatusType_Names::EstimatedTimeComplete_Name);
  }
  if (accessor.hasEstimatedPercentComplete()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedPercentComplete(), node, CompletionStatusType_Names::EstimatedPercentComplete_Name);
  }
  if (accessor.hasActualTimeStarted()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualTimeStarted(), node, CompletionStatusType_Names::ActualTimeStarted_Name);
  }
  if (accessor.hasActualTimeComplete()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualTimeComplete(), node, CompletionStatusType_Names::ActualTimeComplete_Name);
  }
  if (accessor.hasDescription()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDescription(), node, CompletionStatusType_Names::Description_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CompletionStatusType& CompletionStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CompletionStatusType>().release());
}

uci::type::CompletionStatusType& CompletionStatusType::create(const uci::type::CompletionStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CompletionStatusType> newAccessor{boost::make_unique<asb_uci::type::CompletionStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CompletionStatusType::destroy(uci::type::CompletionStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::CompletionStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

