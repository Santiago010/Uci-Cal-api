/** @file EarthOrientationParametersDataChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EarthOrientationParametersDataChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EarthOrientationParametersID_Type.h"
#include "asb_uci/type/TimeAndPolarDataType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EarthOrientationParametersDataChoiceType.h"
#include "uci/type/EarthOrientationParametersID_Type.h"
#include "uci/type/TimeAndPolarDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EarthOrientationParametersDataChoiceType::EarthOrientationParametersDataChoiceType() = default;

EarthOrientationParametersDataChoiceType::~EarthOrientationParametersDataChoiceType() = default;

void EarthOrientationParametersDataChoiceType::copy(const uci::type::EarthOrientationParametersDataChoiceType& accessor) {
  copyImpl(accessor, false);
}

void EarthOrientationParametersDataChoiceType::copyImpl(const uci::type::EarthOrientationParametersDataChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EarthOrientationParametersDataChoiceType&>(accessor);
    if (accessorImpl.earthOrientationParametersID_Accessor) {
      setEarthOrientationParametersID(*(accessorImpl.earthOrientationParametersID_Accessor));
    } else {
      earthOrientationParametersID_Accessor.reset();
    }
    if (accessorImpl.staticValues_Accessor) {
      setStaticValues(*(accessorImpl.staticValues_Accessor));
    } else {
      staticValues_Accessor.reset();
    }
  }
}

void EarthOrientationParametersDataChoiceType::reset() noexcept {
  earthOrientationParametersID_Accessor.reset();
  staticValues_Accessor.reset();
}

uci::type::EarthOrientationParametersDataChoiceType::EarthOrientationParametersDataChoiceTypeChoice EarthOrientationParametersDataChoiceType::getEarthOrientationParametersDataChoiceTypeChoiceOrdinal() const noexcept {
  if (earthOrientationParametersID_Accessor) {
    return EARTHORIENTATIONPARAMETERSDATACHOICETYPE_CHOICE_EARTHORIENTATIONPARAMETERSID;
  }
  if (staticValues_Accessor) {
    return EARTHORIENTATIONPARAMETERSDATACHOICETYPE_CHOICE_STATICVALUES;
  }
  return EARTHORIENTATIONPARAMETERSDATACHOICETYPE_CHOICE_NONE;
}

uci::type::EarthOrientationParametersDataChoiceType& EarthOrientationParametersDataChoiceType::setEarthOrientationParametersDataChoiceTypeChoiceOrdinal(uci::type::EarthOrientationParametersDataChoiceType::EarthOrientationParametersDataChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EARTHORIENTATIONPARAMETERSDATACHOICETYPE_CHOICE_EARTHORIENTATIONPARAMETERSID:
      chooseEarthOrientationParametersID("setEarthOrientationParametersDataChoiceTypeChoiceOrdinal", type);
      break;
    case EARTHORIENTATIONPARAMETERSDATACHOICETYPE_CHOICE_STATICVALUES:
      chooseStaticValues("setEarthOrientationParametersDataChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEarthOrientationParametersDataChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EarthOrientationParametersID_Type& EarthOrientationParametersDataChoiceType::getEarthOrientationParametersID_() const {
  if (earthOrientationParametersID_Accessor) {
    return *earthOrientationParametersID_Accessor;
  }
  throw uci::base::UCIException("Error in getEarthOrientationParametersID(): Unable to get EarthOrientationParametersID, field not selected");
}

const uci::type::EarthOrientationParametersID_Type& EarthOrientationParametersDataChoiceType::getEarthOrientationParametersID() const {
  return getEarthOrientationParametersID_();
}

uci::type::EarthOrientationParametersID_Type& EarthOrientationParametersDataChoiceType::getEarthOrientationParametersID() {
  return getEarthOrientationParametersID_();
}

uci::type::EarthOrientationParametersDataChoiceType& EarthOrientationParametersDataChoiceType::setEarthOrientationParametersID(const uci::type::EarthOrientationParametersID_Type& accessor) {
  chooseEarthOrientationParametersID();
  if (&accessor != earthOrientationParametersID_Accessor.get()) {
    earthOrientationParametersID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EarthOrientationParametersDataChoiceType::isEarthOrientationParametersID() const noexcept {
  return static_cast<bool>(earthOrientationParametersID_Accessor);
}

uci::type::EarthOrientationParametersID_Type& EarthOrientationParametersDataChoiceType::chooseEarthOrientationParametersID(const std::string& method, uci::base::accessorType::AccessorType type) {
  staticValues_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::earthOrientationParametersID_Type : type};
  if ((!earthOrientationParametersID_Accessor) || (earthOrientationParametersID_Accessor->getAccessorType() != requestedType)) {
    earthOrientationParametersID_Accessor = EarthOrientationParametersID_Type::create(type);
    if (!earthOrientationParametersID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *earthOrientationParametersID_Accessor;
}

uci::type::EarthOrientationParametersID_Type& EarthOrientationParametersDataChoiceType::chooseEarthOrientationParametersID(uci::base::accessorType::AccessorType type) {
  return chooseEarthOrientationParametersID("chooseEarthOrientationParametersID", type);
}

uci::type::TimeAndPolarDataType& EarthOrientationParametersDataChoiceType::getStaticValues_() const {
  if (staticValues_Accessor) {
    return *staticValues_Accessor;
  }
  throw uci::base::UCIException("Error in getStaticValues(): Unable to get StaticValues, field not selected");
}

const uci::type::TimeAndPolarDataType& EarthOrientationParametersDataChoiceType::getStaticValues() const {
  return getStaticValues_();
}

uci::type::TimeAndPolarDataType& EarthOrientationParametersDataChoiceType::getStaticValues() {
  return getStaticValues_();
}

uci::type::EarthOrientationParametersDataChoiceType& EarthOrientationParametersDataChoiceType::setStaticValues(const uci::type::TimeAndPolarDataType& accessor) {
  chooseStaticValues("setStaticValues", accessor.getAccessorType());
  if (&accessor != staticValues_Accessor.get()) {
    staticValues_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EarthOrientationParametersDataChoiceType::isStaticValues() const noexcept {
  return static_cast<bool>(staticValues_Accessor);
}

uci::type::TimeAndPolarDataType& EarthOrientationParametersDataChoiceType::chooseStaticValues(const std::string& method, uci::base::accessorType::AccessorType type) {
  earthOrientationParametersID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::timeAndPolarDataType : type};
  if ((!staticValues_Accessor) || (staticValues_Accessor->getAccessorType() != requestedType)) {
    staticValues_Accessor = TimeAndPolarDataType::create(type);
    if (!staticValues_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *staticValues_Accessor;
}

uci::type::TimeAndPolarDataType& EarthOrientationParametersDataChoiceType::chooseStaticValues(uci::base::accessorType::AccessorType type) {
  return chooseStaticValues("chooseStaticValues", type);
}

std::unique_ptr<EarthOrientationParametersDataChoiceType> EarthOrientationParametersDataChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::earthOrientationParametersDataChoiceType : type};
  return (requestedType == uci::type::accessorType::earthOrientationParametersDataChoiceType) ? boost::make_unique<EarthOrientationParametersDataChoiceType>() : nullptr;
}

/**  */
namespace EarthOrientationParametersDataChoiceType_Names {

constexpr const char* Extern_Type_Name{"EarthOrientationParametersDataChoiceType"};
constexpr const char* EarthOrientationParametersID_Name{"EarthOrientationParametersID"};
constexpr const char* StaticValues_Name{"StaticValues"};

} // namespace EarthOrientationParametersDataChoiceType_Names

void EarthOrientationParametersDataChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EarthOrientationParametersDataChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EarthOrientationParametersDataChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EarthOrientationParametersDataChoiceType_Names::EarthOrientationParametersID_Name) {
      EarthOrientationParametersID_Type::deserialize(valueType.second, accessor.chooseEarthOrientationParametersID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EarthOrientationParametersDataChoiceType_Names::StaticValues_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseStaticValues(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string EarthOrientationParametersDataChoiceType::serialize(const uci::type::EarthOrientationParametersDataChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EarthOrientationParametersDataChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EarthOrientationParametersDataChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isEarthOrientationParametersID()) {
    EarthOrientationParametersID_Type::serialize(accessor.getEarthOrientationParametersID(), node, EarthOrientationParametersDataChoiceType_Names::EarthOrientationParametersID_Name);
  } else if (accessor.isStaticValues()) {
    TimeAndPolarDataType::serialize(accessor.getStaticValues(), node, EarthOrientationParametersDataChoiceType_Names::StaticValues_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EarthOrientationParametersDataChoiceType& EarthOrientationParametersDataChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EarthOrientationParametersDataChoiceType>().release());
}

uci::type::EarthOrientationParametersDataChoiceType& EarthOrientationParametersDataChoiceType::create(const uci::type::EarthOrientationParametersDataChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EarthOrientationParametersDataChoiceType> newAccessor{boost::make_unique<asb_uci::type::EarthOrientationParametersDataChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EarthOrientationParametersDataChoiceType::destroy(uci::type::EarthOrientationParametersDataChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::EarthOrientationParametersDataChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

