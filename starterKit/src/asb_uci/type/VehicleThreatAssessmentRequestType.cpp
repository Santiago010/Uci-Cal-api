/** @file VehicleThreatAssessmentRequestType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/VehicleThreatAssessmentRequestType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AssessmentSuppressionEnum.h"
#include "../../../include/asb_uci/type/DetectionEnvelopeParametersType.h"
#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/SystemPositionSpecificationType.h"
#include "../../../include/asb_uci/type/ThreatCapabilityEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AssessmentSuppressionEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DetectionEnvelopeParametersType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemPositionSpecificationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ThreatCapabilityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VehicleThreatAssessmentRequestType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VehicleThreatAssessmentRequestType::VehicleThreatAssessmentRequestType()
  : assessmentSuppression_Accessor{boost::make_unique<AssessmentSuppressionEnum>()},
    threatCapability_Accessor{boost::make_unique<ThreatCapabilityEnum>()},
    systemToAssess_Accessor{boost::make_unique<SystemToAssess>(1, SIZE_MAX)},
    supportingSystem_Accessor{boost::make_unique<SupportingSystem>(0, SIZE_MAX)},
    entityID_Accessor{boost::make_unique<EntityID>(0, SIZE_MAX)} {
}

VehicleThreatAssessmentRequestType::~VehicleThreatAssessmentRequestType() = default;

void VehicleThreatAssessmentRequestType::copy(const uci::type::VehicleThreatAssessmentRequestType& accessor) {
  copyImpl(accessor, false);
}

void VehicleThreatAssessmentRequestType::copyImpl(const uci::type::VehicleThreatAssessmentRequestType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VehicleThreatAssessmentRequestType&>(accessor);
    setAssessmentSuppression(*(accessorImpl.assessmentSuppression_Accessor));
    setThreatCapability(*(accessorImpl.threatCapability_Accessor));
    setSystemToAssess(*(accessorImpl.systemToAssess_Accessor));
    setSupportingSystem(*(accessorImpl.supportingSystem_Accessor));
    setEntityID(*(accessorImpl.entityID_Accessor));
    if (accessorImpl.generateDetectionEnvelope_Accessor) {
      setGenerateDetectionEnvelope(*(accessorImpl.generateDetectionEnvelope_Accessor));
    } else {
      generateDetectionEnvelope_Accessor.reset();
    }
    if (accessorImpl.hasGenerateThreatZone()) {
      setGenerateThreatZone(accessorImpl.getGenerateThreatZone());
    } else {
      clearGenerateThreatZone();
    }
  }
}

void VehicleThreatAssessmentRequestType::reset() noexcept {
  assessmentSuppression_Accessor->reset();
  threatCapability_Accessor->reset();
  systemToAssess_Accessor->reset();
  supportingSystem_Accessor->reset();
  entityID_Accessor->reset();
  generateDetectionEnvelope_Accessor.reset();
  clearGenerateThreatZone();
}

const uci::type::AssessmentSuppressionEnum& VehicleThreatAssessmentRequestType::getAssessmentSuppression() const {
  return *assessmentSuppression_Accessor;
}

uci::type::AssessmentSuppressionEnum& VehicleThreatAssessmentRequestType::getAssessmentSuppression() {
  return *assessmentSuppression_Accessor;
}

uci::type::VehicleThreatAssessmentRequestType& VehicleThreatAssessmentRequestType::setAssessmentSuppression(const uci::type::AssessmentSuppressionEnum& accessor) {
  if (&accessor != assessmentSuppression_Accessor.get()) {
    assessmentSuppression_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VehicleThreatAssessmentRequestType& VehicleThreatAssessmentRequestType::setAssessmentSuppression(uci::type::AssessmentSuppressionEnum::EnumerationItem value) {
  assessmentSuppression_Accessor->setValue(value);
  return *this;
}


const uci::type::ThreatCapabilityEnum& VehicleThreatAssessmentRequestType::getThreatCapability() const {
  return *threatCapability_Accessor;
}

uci::type::ThreatCapabilityEnum& VehicleThreatAssessmentRequestType::getThreatCapability() {
  return *threatCapability_Accessor;
}

uci::type::VehicleThreatAssessmentRequestType& VehicleThreatAssessmentRequestType::setThreatCapability(const uci::type::ThreatCapabilityEnum& accessor) {
  if (&accessor != threatCapability_Accessor.get()) {
    threatCapability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VehicleThreatAssessmentRequestType& VehicleThreatAssessmentRequestType::setThreatCapability(uci::type::ThreatCapabilityEnum::EnumerationItem value) {
  threatCapability_Accessor->setValue(value);
  return *this;
}


const uci::type::VehicleThreatAssessmentRequestType::SystemToAssess& VehicleThreatAssessmentRequestType::getSystemToAssess() const {
  return *systemToAssess_Accessor;
}

uci::type::VehicleThreatAssessmentRequestType::SystemToAssess& VehicleThreatAssessmentRequestType::getSystemToAssess() {
  return *systemToAssess_Accessor;
}

uci::type::VehicleThreatAssessmentRequestType& VehicleThreatAssessmentRequestType::setSystemToAssess(const uci::type::VehicleThreatAssessmentRequestType::SystemToAssess& accessor) {
  if (&accessor != systemToAssess_Accessor.get()) {
    systemToAssess_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::VehicleThreatAssessmentRequestType::SupportingSystem& VehicleThreatAssessmentRequestType::getSupportingSystem() const {
  return *supportingSystem_Accessor;
}

uci::type::VehicleThreatAssessmentRequestType::SupportingSystem& VehicleThreatAssessmentRequestType::getSupportingSystem() {
  return *supportingSystem_Accessor;
}

uci::type::VehicleThreatAssessmentRequestType& VehicleThreatAssessmentRequestType::setSupportingSystem(const uci::type::VehicleThreatAssessmentRequestType::SupportingSystem& accessor) {
  if (&accessor != supportingSystem_Accessor.get()) {
    supportingSystem_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::VehicleThreatAssessmentRequestType::EntityID& VehicleThreatAssessmentRequestType::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::VehicleThreatAssessmentRequestType::EntityID& VehicleThreatAssessmentRequestType::getEntityID() {
  return *entityID_Accessor;
}

uci::type::VehicleThreatAssessmentRequestType& VehicleThreatAssessmentRequestType::setEntityID(const uci::type::VehicleThreatAssessmentRequestType::EntityID& accessor) {
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DetectionEnvelopeParametersType& VehicleThreatAssessmentRequestType::getGenerateDetectionEnvelope_() const {
  if (generateDetectionEnvelope_Accessor) {
    return *generateDetectionEnvelope_Accessor;
  }
  throw uci::base::UCIException("Error in getGenerateDetectionEnvelope(): An attempt was made to get an optional field that was not enabled, call hasGenerateDetectionEnvelope() to determine if it is safe to call getGenerateDetectionEnvelope()");
}

const uci::type::DetectionEnvelopeParametersType& VehicleThreatAssessmentRequestType::getGenerateDetectionEnvelope() const {
  return getGenerateDetectionEnvelope_();
}

uci::type::DetectionEnvelopeParametersType& VehicleThreatAssessmentRequestType::getGenerateDetectionEnvelope() {
  return getGenerateDetectionEnvelope_();
}

uci::type::VehicleThreatAssessmentRequestType& VehicleThreatAssessmentRequestType::setGenerateDetectionEnvelope(const uci::type::DetectionEnvelopeParametersType& accessor) {
  enableGenerateDetectionEnvelope();
  if (&accessor != generateDetectionEnvelope_Accessor.get()) {
    generateDetectionEnvelope_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool VehicleThreatAssessmentRequestType::hasGenerateDetectionEnvelope() const noexcept {
  return static_cast<bool>(generateDetectionEnvelope_Accessor);
}

uci::type::DetectionEnvelopeParametersType& VehicleThreatAssessmentRequestType::enableGenerateDetectionEnvelope(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::detectionEnvelopeParametersType : type};
  if ((!generateDetectionEnvelope_Accessor) || (generateDetectionEnvelope_Accessor->getAccessorType() != requestedType)) {
    generateDetectionEnvelope_Accessor = DetectionEnvelopeParametersType::create(requestedType);
    if (!generateDetectionEnvelope_Accessor) {
      throw uci::base::UCIException("Error in enableGenerateDetectionEnvelope(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *generateDetectionEnvelope_Accessor;
}

uci::type::VehicleThreatAssessmentRequestType& VehicleThreatAssessmentRequestType::clearGenerateDetectionEnvelope() noexcept {
  generateDetectionEnvelope_Accessor.reset();
  return *this;
}

xs::Boolean VehicleThreatAssessmentRequestType::getGenerateThreatZone() const {
  if (generateThreatZone_Accessor) {
    return *generateThreatZone_Accessor;
  }
  throw uci::base::UCIException("Error in getGenerateThreatZone(): An attempt was made to get an optional field that was not enabled, call hasGenerateThreatZone() to determine if it is safe to call getGenerateThreatZone()");
}

uci::type::VehicleThreatAssessmentRequestType& VehicleThreatAssessmentRequestType::setGenerateThreatZone(xs::Boolean value) {
  generateThreatZone_Accessor = value;
  return *this;
}

bool VehicleThreatAssessmentRequestType::hasGenerateThreatZone() const noexcept {
  return generateThreatZone_Accessor.has_value();
}

uci::type::VehicleThreatAssessmentRequestType& VehicleThreatAssessmentRequestType::clearGenerateThreatZone() noexcept {
  generateThreatZone_Accessor.reset();
  return *this;
}

std::unique_ptr<VehicleThreatAssessmentRequestType> VehicleThreatAssessmentRequestType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::vehicleThreatAssessmentRequestType : type};
  return (requestedType == uci::type::accessorType::vehicleThreatAssessmentRequestType) ? boost::make_unique<VehicleThreatAssessmentRequestType>() : nullptr;
}

/**  */
namespace VehicleThreatAssessmentRequestType_Names {

constexpr const char* Extern_Type_Name{"VehicleThreatAssessmentRequestType"};
constexpr const char* AssessmentSuppression_Name{"AssessmentSuppression"};
constexpr const char* ThreatCapability_Name{"ThreatCapability"};
constexpr const char* SystemToAssess_Name{"SystemToAssess"};
constexpr const char* SupportingSystem_Name{"SupportingSystem"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* GenerateDetectionEnvelope_Name{"GenerateDetectionEnvelope"};
constexpr const char* GenerateThreatZone_Name{"GenerateThreatZone"};

} // namespace VehicleThreatAssessmentRequestType_Names

void VehicleThreatAssessmentRequestType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VehicleThreatAssessmentRequestType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VehicleThreatAssessmentRequestType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VehicleThreatAssessmentRequestType_Names::AssessmentSuppression_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAssessmentSuppression().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + VehicleThreatAssessmentRequestType_Names::ThreatCapability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getThreatCapability().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + VehicleThreatAssessmentRequestType_Names::SystemToAssess_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::VehicleThreatAssessmentRequestType::SystemToAssess& boundedList = accessor.getSystemToAssess();
        const uci::type::VehicleThreatAssessmentRequestType::SystemToAssess::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemPositionSpecificationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + VehicleThreatAssessmentRequestType_Names::SupportingSystem_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::VehicleThreatAssessmentRequestType::SupportingSystem& boundedList = accessor.getSupportingSystem();
        const uci::type::VehicleThreatAssessmentRequestType::SupportingSystem::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemPositionSpecificationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + VehicleThreatAssessmentRequestType_Names::EntityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::VehicleThreatAssessmentRequestType::EntityID& boundedList = accessor.getEntityID();
        const uci::type::VehicleThreatAssessmentRequestType::EntityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + VehicleThreatAssessmentRequestType_Names::GenerateDetectionEnvelope_Name) {
      DetectionEnvelopeParametersType::deserialize(valueType.second, accessor.enableGenerateDetectionEnvelope(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VehicleThreatAssessmentRequestType_Names::GenerateThreatZone_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGenerateThreatZone(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string VehicleThreatAssessmentRequestType::serialize(const uci::type::VehicleThreatAssessmentRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VehicleThreatAssessmentRequestType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VehicleThreatAssessmentRequestType_Names::Extern_Type_Name);
  }
  AssessmentSuppressionEnum::serialize(accessor.getAssessmentSuppression(), node, VehicleThreatAssessmentRequestType_Names::AssessmentSuppression_Name, false);
  ThreatCapabilityEnum::serialize(accessor.getThreatCapability(), node, VehicleThreatAssessmentRequestType_Names::ThreatCapability_Name, false);
  {
    const uci::type::VehicleThreatAssessmentRequestType::SystemToAssess& boundedList = accessor.getSystemToAssess();
    for (uci::type::VehicleThreatAssessmentRequestType::SystemToAssess::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SystemPositionSpecificationType::serialize(boundedList.at(i), node, VehicleThreatAssessmentRequestType_Names::SystemToAssess_Name);
    }
  }
  {
    const uci::type::VehicleThreatAssessmentRequestType::SupportingSystem& boundedList = accessor.getSupportingSystem();
    for (uci::type::VehicleThreatAssessmentRequestType::SupportingSystem::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SystemPositionSpecificationType::serialize(boundedList.at(i), node, VehicleThreatAssessmentRequestType_Names::SupportingSystem_Name);
    }
  }
  {
    const uci::type::VehicleThreatAssessmentRequestType::EntityID& boundedList = accessor.getEntityID();
    for (uci::type::VehicleThreatAssessmentRequestType::EntityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EntityID_Type::serialize(boundedList.at(i), node, VehicleThreatAssessmentRequestType_Names::EntityID_Name);
    }
  }
  if (accessor.hasGenerateDetectionEnvelope()) {
    DetectionEnvelopeParametersType::serialize(accessor.getGenerateDetectionEnvelope(), node, VehicleThreatAssessmentRequestType_Names::GenerateDetectionEnvelope_Name);
  }
  if (accessor.hasGenerateThreatZone()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getGenerateThreatZone(), node, VehicleThreatAssessmentRequestType_Names::GenerateThreatZone_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VehicleThreatAssessmentRequestType& VehicleThreatAssessmentRequestType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VehicleThreatAssessmentRequestType>().release());
}

uci::type::VehicleThreatAssessmentRequestType& VehicleThreatAssessmentRequestType::create(const uci::type::VehicleThreatAssessmentRequestType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VehicleThreatAssessmentRequestType> newAccessor{boost::make_unique<asb_uci::type::VehicleThreatAssessmentRequestType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VehicleThreatAssessmentRequestType::destroy(uci::type::VehicleThreatAssessmentRequestType& accessor) {
  delete dynamic_cast<asb_uci::type::VehicleThreatAssessmentRequestType*>(&accessor);
}

} // namespace type

} // namespace uci

