/** @file EntityOrbitalVCM_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EntityOrbitalVCM_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/EntityOrbitalVCM_ID_Type.h"
#include "../../../include/asb_uci/type/OrbitalVCM_ParametersType.h"
#include "../../../include/asb_uci/type/OrbitalVCM_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityOrbitalVCM_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityOrbitalVCM_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalVCM_ParametersType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalVCM_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityOrbitalVCM_Type::EntityOrbitalVCM_Type()
  : vCM_ID_Accessor{boost::make_unique<EntityOrbitalVCM_ID_Type>()},
    entityID_Accessor{boost::make_unique<EntityID_Type>()},
    parameters_Accessor{boost::make_unique<OrbitalVCM_ParametersType>()},
    vCM_Accessor{boost::make_unique<OrbitalVCM_Type>()} {
}

EntityOrbitalVCM_Type::~EntityOrbitalVCM_Type() = default;

void EntityOrbitalVCM_Type::copy(const uci::type::EntityOrbitalVCM_Type& accessor) {
  copyImpl(accessor, false);
}

void EntityOrbitalVCM_Type::copyImpl(const uci::type::EntityOrbitalVCM_Type& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::entityOrbitalVCM_Type)) {
      const auto& accessorImpl = dynamic_cast<const EntityOrbitalVCM_Type&>(accessor);
      setVCM_ID(*(accessorImpl.vCM_ID_Accessor));
      setEntityID(*(accessorImpl.entityID_Accessor));
      setParameters(*(accessorImpl.parameters_Accessor));
      setVCM(*(accessorImpl.vCM_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void EntityOrbitalVCM_Type::reset() noexcept {
  vCM_ID_Accessor->reset();
  if (entityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    entityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    entityID_Accessor->reset();
  }
  parameters_Accessor->reset();
  vCM_Accessor->reset();
}

const uci::type::EntityOrbitalVCM_ID_Type& EntityOrbitalVCM_Type::getVCM_ID() const {
  return *vCM_ID_Accessor;
}

uci::type::EntityOrbitalVCM_ID_Type& EntityOrbitalVCM_Type::getVCM_ID() {
  return *vCM_ID_Accessor;
}

uci::type::EntityOrbitalVCM_Type& EntityOrbitalVCM_Type::setVCM_ID(const uci::type::EntityOrbitalVCM_ID_Type& accessor) {
  if (&accessor != vCM_ID_Accessor.get()) {
    vCM_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityID_Type& EntityOrbitalVCM_Type::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityID_Type& EntityOrbitalVCM_Type::getEntityID() {
  return *entityID_Accessor;
}

uci::type::EntityOrbitalVCM_Type& EntityOrbitalVCM_Type::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& EntityOrbitalVCM_Type::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

const uci::type::OrbitalVCM_ParametersType& EntityOrbitalVCM_Type::getParameters() const {
  return *parameters_Accessor;
}

uci::type::OrbitalVCM_ParametersType& EntityOrbitalVCM_Type::getParameters() {
  return *parameters_Accessor;
}

uci::type::EntityOrbitalVCM_Type& EntityOrbitalVCM_Type::setParameters(const uci::type::OrbitalVCM_ParametersType& accessor) {
  if (&accessor != parameters_Accessor.get()) {
    parameters_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrbitalVCM_Type& EntityOrbitalVCM_Type::getVCM() const {
  return *vCM_Accessor;
}

uci::type::OrbitalVCM_Type& EntityOrbitalVCM_Type::getVCM() {
  return *vCM_Accessor;
}

uci::type::EntityOrbitalVCM_Type& EntityOrbitalVCM_Type::setVCM(const uci::type::OrbitalVCM_Type& accessor) {
  if (&accessor != vCM_Accessor.get()) {
    vCM_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<EntityOrbitalVCM_Type> EntityOrbitalVCM_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityOrbitalVCM_Type : type};
  return std::unique_ptr<EntityOrbitalVCM_Type>(dynamic_cast<EntityOrbitalVCM_Type*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace EntityOrbitalVCM_Type_Names {

constexpr const char* Extern_Type_Name{"EntityOrbitalVCM_Type"};
constexpr const char* VCM_ID_Name{"VCM_ID"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* Parameters_Name{"Parameters"};
constexpr const char* VCM_Name{"VCM"};

} // namespace EntityOrbitalVCM_Type_Names

void EntityOrbitalVCM_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityOrbitalVCM_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityOrbitalVCM_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityOrbitalVCM_Type_Names::VCM_ID_Name) {
      EntityOrbitalVCM_ID_Type::deserialize(valueType.second, accessor.getVCM_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalVCM_Type_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalVCM_Type_Names::Parameters_Name) {
      OrbitalVCM_ParametersType::deserialize(valueType.second, accessor.getParameters(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalVCM_Type_Names::VCM_Name) {
      OrbitalVCM_Type::deserialize(valueType.second, accessor.getVCM(), nodeName, nsPrefix);
    }
  }
}

std::string EntityOrbitalVCM_Type::serialize(const uci::type::EntityOrbitalVCM_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityOrbitalVCM_Type_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::entityOrbitalVCM_Type)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityOrbitalVCM_Type_Names::Extern_Type_Name);
    }
    EntityOrbitalVCM_ID_Type::serialize(accessor.getVCM_ID(), node, EntityOrbitalVCM_Type_Names::VCM_ID_Name);
    EntityID_Type::serialize(accessor.getEntityID(), node, EntityOrbitalVCM_Type_Names::EntityID_Name);
    OrbitalVCM_ParametersType::serialize(accessor.getParameters(), node, EntityOrbitalVCM_Type_Names::Parameters_Name);
    OrbitalVCM_Type::serialize(accessor.getVCM(), node, EntityOrbitalVCM_Type_Names::VCM_Name);
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityOrbitalVCM_Type& EntityOrbitalVCM_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityOrbitalVCM_Type>().release());
}

uci::type::EntityOrbitalVCM_Type& EntityOrbitalVCM_Type::create(const uci::type::EntityOrbitalVCM_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityOrbitalVCM_Type> newAccessor{boost::make_unique<asb_uci::type::EntityOrbitalVCM_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityOrbitalVCM_Type::destroy(uci::type::EntityOrbitalVCM_Type& accessor) {
  delete dynamic_cast<asb_uci::type::EntityOrbitalVCM_Type*>(&accessor);
}

} // namespace type

} // namespace uci

