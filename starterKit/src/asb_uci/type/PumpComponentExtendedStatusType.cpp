/** @file PumpComponentExtendedStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PumpComponentExtendedStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentExtendedStatusPET.h"
#include "../../../include/asb_uci/type/ComponentPressureType.h"
#include "../../../include/asb_uci/type/ComponentTemperatureType.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/LineDataStatusType.h"
#include "../../../include/asb_uci/type/ValveDataStatusType.h"
#include "../../../include/asb_uci/type/VisibleString64Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentPressureType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentTemperatureType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LineDataStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PumpComponentExtendedStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ValveDataStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString64Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PumpComponentExtendedStatusType::PumpComponentExtendedStatusType()
  : lineData_Accessor{boost::make_unique<LineData>(0, SIZE_MAX)},
    valveData_Accessor{boost::make_unique<ValveData>(0, SIZE_MAX)} {
}

PumpComponentExtendedStatusType::~PumpComponentExtendedStatusType() = default;

void PumpComponentExtendedStatusType::copy(const uci::type::PumpComponentExtendedStatusType& accessor) {
  copyImpl(accessor, false);
}

void PumpComponentExtendedStatusType::copyImpl(const uci::type::PumpComponentExtendedStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ComponentExtendedStatusPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const PumpComponentExtendedStatusType&>(accessor);
    if (accessorImpl.pressure_Accessor) {
      setPressure(*(accessorImpl.pressure_Accessor));
    } else {
      pressure_Accessor.reset();
    }
    if (accessorImpl.temperature_Accessor) {
      setTemperature(*(accessorImpl.temperature_Accessor));
    } else {
      temperature_Accessor.reset();
    }
    if (accessorImpl.hasFlowRate()) {
      setFlowRate(accessorImpl.getFlowRate());
    } else {
      clearFlowRate();
    }
    if (accessorImpl.direction_Accessor) {
      setDirection(*(accessorImpl.direction_Accessor));
    } else {
      direction_Accessor.reset();
    }
    setLineData(*(accessorImpl.lineData_Accessor));
    setValveData(*(accessorImpl.valveData_Accessor));
    if (accessorImpl.recirculating_Accessor) {
      setRecirculating(*(accessorImpl.recirculating_Accessor));
    } else {
      recirculating_Accessor.reset();
    }
  }
}

void PumpComponentExtendedStatusType::reset() noexcept {
  ComponentExtendedStatusPET::reset();
  pressure_Accessor.reset();
  temperature_Accessor.reset();
  clearFlowRate();
  direction_Accessor.reset();
  lineData_Accessor->reset();
  valveData_Accessor->reset();
  recirculating_Accessor.reset();
}

uci::type::ComponentPressureType& PumpComponentExtendedStatusType::getPressure_() const {
  if (pressure_Accessor) {
    return *pressure_Accessor;
  }
  throw uci::base::UCIException("Error in getPressure(): An attempt was made to get an optional field that was not enabled, call hasPressure() to determine if it is safe to call getPressure()");
}

const uci::type::ComponentPressureType& PumpComponentExtendedStatusType::getPressure() const {
  return getPressure_();
}

uci::type::ComponentPressureType& PumpComponentExtendedStatusType::getPressure() {
  return getPressure_();
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::setPressure(const uci::type::ComponentPressureType& accessor) {
  enablePressure();
  if (&accessor != pressure_Accessor.get()) {
    pressure_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PumpComponentExtendedStatusType::hasPressure() const noexcept {
  return static_cast<bool>(pressure_Accessor);
}

uci::type::ComponentPressureType& PumpComponentExtendedStatusType::enablePressure(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentPressureType : type};
  if ((!pressure_Accessor) || (pressure_Accessor->getAccessorType() != requestedType)) {
    pressure_Accessor = ComponentPressureType::create(requestedType);
    if (!pressure_Accessor) {
      throw uci::base::UCIException("Error in enablePressure(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pressure_Accessor;
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::clearPressure() noexcept {
  pressure_Accessor.reset();
  return *this;
}

uci::type::ComponentTemperatureType& PumpComponentExtendedStatusType::getTemperature_() const {
  if (temperature_Accessor) {
    return *temperature_Accessor;
  }
  throw uci::base::UCIException("Error in getTemperature(): An attempt was made to get an optional field that was not enabled, call hasTemperature() to determine if it is safe to call getTemperature()");
}

const uci::type::ComponentTemperatureType& PumpComponentExtendedStatusType::getTemperature() const {
  return getTemperature_();
}

uci::type::ComponentTemperatureType& PumpComponentExtendedStatusType::getTemperature() {
  return getTemperature_();
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::setTemperature(const uci::type::ComponentTemperatureType& accessor) {
  enableTemperature();
  if (&accessor != temperature_Accessor.get()) {
    temperature_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PumpComponentExtendedStatusType::hasTemperature() const noexcept {
  return static_cast<bool>(temperature_Accessor);
}

uci::type::ComponentTemperatureType& PumpComponentExtendedStatusType::enableTemperature(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentTemperatureType : type};
  if ((!temperature_Accessor) || (temperature_Accessor->getAccessorType() != requestedType)) {
    temperature_Accessor = ComponentTemperatureType::create(requestedType);
    if (!temperature_Accessor) {
      throw uci::base::UCIException("Error in enableTemperature(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *temperature_Accessor;
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::clearTemperature() noexcept {
  temperature_Accessor.reset();
  return *this;
}

xs::Double PumpComponentExtendedStatusType::getFlowRate() const {
  if (flowRate_Accessor) {
    return *flowRate_Accessor;
  }
  throw uci::base::UCIException("Error in getFlowRate(): An attempt was made to get an optional field that was not enabled, call hasFlowRate() to determine if it is safe to call getFlowRate()");
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::setFlowRate(xs::Double value) {
  flowRate_Accessor = value;
  return *this;
}

bool PumpComponentExtendedStatusType::hasFlowRate() const noexcept {
  return flowRate_Accessor.has_value();
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::clearFlowRate() noexcept {
  flowRate_Accessor.reset();
  return *this;
}

uci::type::VisibleString64Type& PumpComponentExtendedStatusType::getDirection_() const {
  if (direction_Accessor) {
    return *direction_Accessor;
  }
  throw uci::base::UCIException("Error in getDirection(): An attempt was made to get an optional field that was not enabled, call hasDirection() to determine if it is safe to call getDirection()");
}

const uci::type::VisibleString64Type& PumpComponentExtendedStatusType::getDirection() const {
  return getDirection_();
}

uci::type::VisibleString64Type& PumpComponentExtendedStatusType::getDirection() {
  return getDirection_();
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::setDirection(const uci::type::VisibleString64Type& value) {
  return setDirection(value.c_str());
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::setDirection(const std::string& value) {
  return setDirection(value.c_str());
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::setDirection(const char* value) {
  enableDirection().setStringValue(value);
  return *this;
}

bool PumpComponentExtendedStatusType::hasDirection() const noexcept {
  return static_cast<bool>(direction_Accessor);
}

uci::type::VisibleString64Type& PumpComponentExtendedStatusType::enableDirection(uci::base::accessorType::AccessorType type) {
  if (!direction_Accessor) {
    direction_Accessor = VisibleString64Type::create(type);
  }
  return *direction_Accessor;
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::clearDirection() noexcept {
  direction_Accessor.reset();
  return *this;
}

const uci::type::PumpComponentExtendedStatusType::LineData& PumpComponentExtendedStatusType::getLineData() const {
  return *lineData_Accessor;
}

uci::type::PumpComponentExtendedStatusType::LineData& PumpComponentExtendedStatusType::getLineData() {
  return *lineData_Accessor;
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::setLineData(const uci::type::PumpComponentExtendedStatusType::LineData& accessor) {
  if (&accessor != lineData_Accessor.get()) {
    lineData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PumpComponentExtendedStatusType::ValveData& PumpComponentExtendedStatusType::getValveData() const {
  return *valveData_Accessor;
}

uci::type::PumpComponentExtendedStatusType::ValveData& PumpComponentExtendedStatusType::getValveData() {
  return *valveData_Accessor;
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::setValveData(const uci::type::PumpComponentExtendedStatusType::ValveData& accessor) {
  if (&accessor != valveData_Accessor.get()) {
    valveData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EmptyType& PumpComponentExtendedStatusType::getRecirculating_() const {
  if (recirculating_Accessor) {
    return *recirculating_Accessor;
  }
  throw uci::base::UCIException("Error in getRecirculating(): An attempt was made to get an optional field that was not enabled, call hasRecirculating() to determine if it is safe to call getRecirculating()");
}

const uci::type::EmptyType& PumpComponentExtendedStatusType::getRecirculating() const {
  return getRecirculating_();
}

uci::type::EmptyType& PumpComponentExtendedStatusType::getRecirculating() {
  return getRecirculating_();
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::setRecirculating(const uci::type::EmptyType& value) {
  return setRecirculating(value.c_str());
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::setRecirculating(const std::string& value) {
  return setRecirculating(value.c_str());
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::setRecirculating(const char* value) {
  enableRecirculating().setStringValue(value);
  return *this;
}

bool PumpComponentExtendedStatusType::hasRecirculating() const noexcept {
  return static_cast<bool>(recirculating_Accessor);
}

uci::type::EmptyType& PumpComponentExtendedStatusType::enableRecirculating(uci::base::accessorType::AccessorType type) {
  if (!recirculating_Accessor) {
    recirculating_Accessor = EmptyType::create(type);
  }
  return *recirculating_Accessor;
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::clearRecirculating() noexcept {
  recirculating_Accessor.reset();
  return *this;
}

std::unique_ptr<PumpComponentExtendedStatusType> PumpComponentExtendedStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pumpComponentExtendedStatusType : type};
  return (requestedType == uci::type::accessorType::pumpComponentExtendedStatusType) ? boost::make_unique<PumpComponentExtendedStatusType>() : nullptr;
}

/**  */
namespace PumpComponentExtendedStatusType_Names {

constexpr const char* Extern_Type_Name{"PumpComponentExtendedStatusType"};
constexpr const char* Pressure_Name{"Pressure"};
constexpr const char* Temperature_Name{"Temperature"};
constexpr const char* FlowRate_Name{"FlowRate"};
constexpr const char* Direction_Name{"Direction"};
constexpr const char* LineData_Name{"LineData"};
constexpr const char* ValveData_Name{"ValveData"};
constexpr const char* Recirculating_Name{"Recirculating"};

} // namespace PumpComponentExtendedStatusType_Names

void PumpComponentExtendedStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PumpComponentExtendedStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PumpComponentExtendedStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PumpComponentExtendedStatusType_Names::Pressure_Name) {
      ComponentPressureType::deserialize(valueType.second, accessor.enablePressure(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PumpComponentExtendedStatusType_Names::Temperature_Name) {
      ComponentTemperatureType::deserialize(valueType.second, accessor.enableTemperature(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PumpComponentExtendedStatusType_Names::FlowRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFlowRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PumpComponentExtendedStatusType_Names::Direction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDirection(*value);
      }
    } else if (valueType.first == nsPrefix + PumpComponentExtendedStatusType_Names::LineData_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PumpComponentExtendedStatusType::LineData& boundedList = accessor.getLineData();
        const uci::type::PumpComponentExtendedStatusType::LineData::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::LineDataStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PumpComponentExtendedStatusType_Names::ValveData_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PumpComponentExtendedStatusType::ValveData& boundedList = accessor.getValveData();
        const uci::type::PumpComponentExtendedStatusType::ValveData::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ValveDataStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PumpComponentExtendedStatusType_Names::Recirculating_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRecirculating(*value);
      }
    }
  }
  ComponentExtendedStatusPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string PumpComponentExtendedStatusType::serialize(const uci::type::PumpComponentExtendedStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PumpComponentExtendedStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PumpComponentExtendedStatusType_Names::Extern_Type_Name);
  }
  ComponentExtendedStatusPET::serialize(accessor, node, "", false, false, false);
  if (accessor.hasPressure()) {
    ComponentPressureType::serialize(accessor.getPressure(), node, PumpComponentExtendedStatusType_Names::Pressure_Name);
  }
  if (accessor.hasTemperature()) {
    ComponentTemperatureType::serialize(accessor.getTemperature(), node, PumpComponentExtendedStatusType_Names::Temperature_Name);
  }
  if (accessor.hasFlowRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFlowRate(), node, PumpComponentExtendedStatusType_Names::FlowRate_Name);
  }
  if (accessor.hasDirection()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDirection(), node, PumpComponentExtendedStatusType_Names::Direction_Name);
  }
  {
    const uci::type::PumpComponentExtendedStatusType::LineData& boundedList = accessor.getLineData();
    for (uci::type::PumpComponentExtendedStatusType::LineData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::LineDataStatusType::serialize(boundedList.at(i), node, PumpComponentExtendedStatusType_Names::LineData_Name);
    }
  }
  {
    const uci::type::PumpComponentExtendedStatusType::ValveData& boundedList = accessor.getValveData();
    for (uci::type::PumpComponentExtendedStatusType::ValveData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ValveDataStatusType::serialize(boundedList.at(i), node, PumpComponentExtendedStatusType_Names::ValveData_Name);
    }
  }
  if (accessor.hasRecirculating()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getRecirculating(), node, PumpComponentExtendedStatusType_Names::Recirculating_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PumpComponentExtendedStatusType>().release());
}

uci::type::PumpComponentExtendedStatusType& PumpComponentExtendedStatusType::create(const uci::type::PumpComponentExtendedStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PumpComponentExtendedStatusType> newAccessor{boost::make_unique<asb_uci::type::PumpComponentExtendedStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PumpComponentExtendedStatusType::destroy(uci::type::PumpComponentExtendedStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::PumpComponentExtendedStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

