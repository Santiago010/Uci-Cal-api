/** @file RefuelCapabilityDrogueCommonType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RefuelCapabilityDrogueCommonType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DrogueCommandEnum.h"
#include "../../../include/asb_uci/type/TailConeLightEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DrogueCommandEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MassType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RefuelCapabilityDrogueCommonType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TailConeLightEnum.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RefuelCapabilityDrogueCommonType::RefuelCapabilityDrogueCommonType() = default;

RefuelCapabilityDrogueCommonType::~RefuelCapabilityDrogueCommonType() = default;

void RefuelCapabilityDrogueCommonType::copy(const uci::type::RefuelCapabilityDrogueCommonType& accessor) {
  copyImpl(accessor, false);
}

void RefuelCapabilityDrogueCommonType::copyImpl(const uci::type::RefuelCapabilityDrogueCommonType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::refuelCapabilityDrogueCommonType)) {
      const auto& accessorImpl = dynamic_cast<const RefuelCapabilityDrogueCommonType&>(accessor);
      if (accessorImpl.hasPower()) {
        setPower(accessorImpl.getPower());
      } else {
        clearPower();
      }
      if (accessorImpl.hose_Accessor) {
        setHose(*(accessorImpl.hose_Accessor));
      } else {
        hose_Accessor.reset();
      }
      if (accessorImpl.hasSelectForJettison()) {
        setSelectForJettison(accessorImpl.getSelectForJettison());
      } else {
        clearSelectForJettison();
      }
      if (accessorImpl.hasScheduledFuelToBeDelivered()) {
        setScheduledFuelToBeDelivered(accessorImpl.getScheduledFuelToBeDelivered());
      } else {
        clearScheduledFuelToBeDelivered();
      }
      if (accessorImpl.tailConeLightsIntensity_Accessor) {
        setTailConeLightsIntensity(*(accessorImpl.tailConeLightsIntensity_Accessor));
      } else {
        tailConeLightsIntensity_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void RefuelCapabilityDrogueCommonType::reset() noexcept {
  clearPower();
  hose_Accessor.reset();
  clearSelectForJettison();
  clearScheduledFuelToBeDelivered();
  tailConeLightsIntensity_Accessor.reset();
}

xs::Boolean RefuelCapabilityDrogueCommonType::getPower() const {
  if (power_Accessor) {
    return *power_Accessor;
  }
  throw uci::base::UCIException("Error in getPower(): An attempt was made to get an optional field that was not enabled, call hasPower() to determine if it is safe to call getPower()");
}

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::setPower(xs::Boolean value) {
  power_Accessor = value;
  return *this;
}

bool RefuelCapabilityDrogueCommonType::hasPower() const noexcept {
  return power_Accessor.has_value();
}

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::clearPower() noexcept {
  power_Accessor.reset();
  return *this;
}

uci::type::DrogueCommandEnum& RefuelCapabilityDrogueCommonType::getHose_() const {
  if (hose_Accessor) {
    return *hose_Accessor;
  }
  throw uci::base::UCIException("Error in getHose(): An attempt was made to get an optional field that was not enabled, call hasHose() to determine if it is safe to call getHose()");
}

const uci::type::DrogueCommandEnum& RefuelCapabilityDrogueCommonType::getHose() const {
  return getHose_();
}

uci::type::DrogueCommandEnum& RefuelCapabilityDrogueCommonType::getHose() {
  return getHose_();
}

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::setHose(const uci::type::DrogueCommandEnum& accessor) {
  enableHose();
  if (&accessor != hose_Accessor.get()) {
    hose_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::setHose(const uci::type::DrogueCommandEnum::EnumerationItem value) {
  enableHose().setValue(value);
  return *this;
}

bool RefuelCapabilityDrogueCommonType::hasHose() const noexcept {
  return static_cast<bool>(hose_Accessor);
}

uci::type::DrogueCommandEnum& RefuelCapabilityDrogueCommonType::enableHose(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::drogueCommandEnum : type};
  if ((!hose_Accessor) || (hose_Accessor->getAccessorType() != requestedType)) {
    hose_Accessor = DrogueCommandEnum::create(requestedType);
    if (!hose_Accessor) {
      throw uci::base::UCIException("Error in enableHose(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *hose_Accessor;
}

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::clearHose() noexcept {
  hose_Accessor.reset();
  return *this;
}

xs::Boolean RefuelCapabilityDrogueCommonType::getSelectForJettison() const {
  if (selectForJettison_Accessor) {
    return *selectForJettison_Accessor;
  }
  throw uci::base::UCIException("Error in getSelectForJettison(): An attempt was made to get an optional field that was not enabled, call hasSelectForJettison() to determine if it is safe to call getSelectForJettison()");
}

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::setSelectForJettison(xs::Boolean value) {
  selectForJettison_Accessor = value;
  return *this;
}

bool RefuelCapabilityDrogueCommonType::hasSelectForJettison() const noexcept {
  return selectForJettison_Accessor.has_value();
}

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::clearSelectForJettison() noexcept {
  selectForJettison_Accessor.reset();
  return *this;
}

uci::type::MassTypeValue RefuelCapabilityDrogueCommonType::getScheduledFuelToBeDelivered() const {
  if (scheduledFuelToBeDelivered_Accessor) {
    return *scheduledFuelToBeDelivered_Accessor;
  }
  throw uci::base::UCIException("Error in getScheduledFuelToBeDelivered(): An attempt was made to get an optional field that was not enabled, call hasScheduledFuelToBeDelivered() to determine if it is safe to call getScheduledFuelToBeDelivered()");
}

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::setScheduledFuelToBeDelivered(uci::type::MassTypeValue value) {
  scheduledFuelToBeDelivered_Accessor = value;
  return *this;
}

bool RefuelCapabilityDrogueCommonType::hasScheduledFuelToBeDelivered() const noexcept {
  return scheduledFuelToBeDelivered_Accessor.has_value();
}

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::clearScheduledFuelToBeDelivered() noexcept {
  scheduledFuelToBeDelivered_Accessor.reset();
  return *this;
}

uci::type::TailConeLightEnum& RefuelCapabilityDrogueCommonType::getTailConeLightsIntensity_() const {
  if (tailConeLightsIntensity_Accessor) {
    return *tailConeLightsIntensity_Accessor;
  }
  throw uci::base::UCIException("Error in getTailConeLightsIntensity(): An attempt was made to get an optional field that was not enabled, call hasTailConeLightsIntensity() to determine if it is safe to call getTailConeLightsIntensity()");
}

const uci::type::TailConeLightEnum& RefuelCapabilityDrogueCommonType::getTailConeLightsIntensity() const {
  return getTailConeLightsIntensity_();
}

uci::type::TailConeLightEnum& RefuelCapabilityDrogueCommonType::getTailConeLightsIntensity() {
  return getTailConeLightsIntensity_();
}

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::setTailConeLightsIntensity(const uci::type::TailConeLightEnum& accessor) {
  enableTailConeLightsIntensity();
  if (&accessor != tailConeLightsIntensity_Accessor.get()) {
    tailConeLightsIntensity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::setTailConeLightsIntensity(const uci::type::TailConeLightEnum::EnumerationItem value) {
  enableTailConeLightsIntensity().setValue(value);
  return *this;
}

bool RefuelCapabilityDrogueCommonType::hasTailConeLightsIntensity() const noexcept {
  return static_cast<bool>(tailConeLightsIntensity_Accessor);
}

uci::type::TailConeLightEnum& RefuelCapabilityDrogueCommonType::enableTailConeLightsIntensity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::tailConeLightEnum : type};
  if ((!tailConeLightsIntensity_Accessor) || (tailConeLightsIntensity_Accessor->getAccessorType() != requestedType)) {
    tailConeLightsIntensity_Accessor = TailConeLightEnum::create(requestedType);
    if (!tailConeLightsIntensity_Accessor) {
      throw uci::base::UCIException("Error in enableTailConeLightsIntensity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *tailConeLightsIntensity_Accessor;
}

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::clearTailConeLightsIntensity() noexcept {
  tailConeLightsIntensity_Accessor.reset();
  return *this;
}

std::unique_ptr<RefuelCapabilityDrogueCommonType> RefuelCapabilityDrogueCommonType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelCapabilityDrogueCommonType : type};
  return std::unique_ptr<RefuelCapabilityDrogueCommonType>(dynamic_cast<RefuelCapabilityDrogueCommonType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace RefuelCapabilityDrogueCommonType_Names {

constexpr const char* Extern_Type_Name{"RefuelCapabilityDrogueCommonType"};
constexpr const char* Power_Name{"Power"};
constexpr const char* Hose_Name{"Hose"};
constexpr const char* SelectForJettison_Name{"SelectForJettison"};
constexpr const char* ScheduledFuelToBeDelivered_Name{"ScheduledFuelToBeDelivered"};
constexpr const char* TailConeLightsIntensity_Name{"TailConeLightsIntensity"};

} // namespace RefuelCapabilityDrogueCommonType_Names

void RefuelCapabilityDrogueCommonType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RefuelCapabilityDrogueCommonType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RefuelCapabilityDrogueCommonType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RefuelCapabilityDrogueCommonType_Names::Power_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPower(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RefuelCapabilityDrogueCommonType_Names::Hose_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableHose().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RefuelCapabilityDrogueCommonType_Names::SelectForJettison_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectForJettison(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RefuelCapabilityDrogueCommonType_Names::ScheduledFuelToBeDelivered_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setScheduledFuelToBeDelivered(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RefuelCapabilityDrogueCommonType_Names::TailConeLightsIntensity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTailConeLightsIntensity().setValueFromName(*value);
      }
    }
  }
}

std::string RefuelCapabilityDrogueCommonType::serialize(const uci::type::RefuelCapabilityDrogueCommonType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RefuelCapabilityDrogueCommonType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::refuelCapabilityDrogueCommonType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, RefuelCapabilityDrogueCommonType_Names::Extern_Type_Name);
    }
    if (accessor.hasPower()) {
      asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPower(), node, RefuelCapabilityDrogueCommonType_Names::Power_Name);
    }
    if (accessor.hasHose()) {
      DrogueCommandEnum::serialize(accessor.getHose(), node, RefuelCapabilityDrogueCommonType_Names::Hose_Name, false);
    }
    if (accessor.hasSelectForJettison()) {
      asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSelectForJettison(), node, RefuelCapabilityDrogueCommonType_Names::SelectForJettison_Name);
    }
    if (accessor.hasScheduledFuelToBeDelivered()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getScheduledFuelToBeDelivered(), node, RefuelCapabilityDrogueCommonType_Names::ScheduledFuelToBeDelivered_Name);
    }
    if (accessor.hasTailConeLightsIntensity()) {
      TailConeLightEnum::serialize(accessor.getTailConeLightsIntensity(), node, RefuelCapabilityDrogueCommonType_Names::TailConeLightsIntensity_Name, false);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RefuelCapabilityDrogueCommonType>().release());
}

uci::type::RefuelCapabilityDrogueCommonType& RefuelCapabilityDrogueCommonType::create(const uci::type::RefuelCapabilityDrogueCommonType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RefuelCapabilityDrogueCommonType> newAccessor{boost::make_unique<asb_uci::type::RefuelCapabilityDrogueCommonType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RefuelCapabilityDrogueCommonType::destroy(uci::type::RefuelCapabilityDrogueCommonType& accessor) {
  delete dynamic_cast<asb_uci::type::RefuelCapabilityDrogueCommonType*>(&accessor);
}

} // namespace type

} // namespace uci

