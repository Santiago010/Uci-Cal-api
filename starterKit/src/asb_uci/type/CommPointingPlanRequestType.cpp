/** @file CommPointingPlanRequestType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommPointingPlanRequestType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommCoverageUserDataType.h"
#include "asb_uci/type/CommPointingAssessmentEnum.h"
#include "asb_uci/type/CommScheduleAllocationID_Type.h"
#include "asb_uci/type/CommSchedulingRequirementID_Type.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/RoutePlanReferencesType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommCoverageUserDataType.h"
#include "uci/type/CommPointingAssessmentEnum.h"
#include "uci/type/CommPointingPlanRequestType.h"
#include "uci/type/CommScheduleAllocationID_Type.h"
#include "uci/type/CommSchedulingRequirementID_Type.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/RoutePlanReferencesType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommPointingPlanRequestType::CommPointingPlanRequestType()
  : routePlan_Accessor{boost::make_unique<RoutePlan>(1, SIZE_MAX)},
    assessmentConstraintLevel_Accessor{boost::make_unique<CommPointingAssessmentEnum>()},
    commScheduleAvailabilityConstraints_Accessor{boost::make_unique<CommScheduleAvailabilityConstraints>(0, SIZE_MAX)},
    commSchedulingRequirementConstraintsID_Accessor{boost::make_unique<CommSchedulingRequirementConstraintsID>(0, SIZE_MAX)},
    commScheduleAllocationConstraintsID_Accessor{boost::make_unique<CommScheduleAllocationConstraintsID>(0, SIZE_MAX)},
    assessmentResourceList_Accessor{boost::make_unique<AssessmentResourceList>(0, SIZE_MAX)} {
}

CommPointingPlanRequestType::~CommPointingPlanRequestType() = default;

void CommPointingPlanRequestType::copy(const uci::type::CommPointingPlanRequestType& accessor) {
  copyImpl(accessor, false);
}

void CommPointingPlanRequestType::copyImpl(const uci::type::CommPointingPlanRequestType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommPointingPlanRequestType&>(accessor);
    setRoutePlan(*(accessorImpl.routePlan_Accessor));
    setAssessmentConstraintLevel(*(accessorImpl.assessmentConstraintLevel_Accessor));
    setCommScheduleAvailabilityConstraints(*(accessorImpl.commScheduleAvailabilityConstraints_Accessor));
    setCommSchedulingRequirementConstraintsID(*(accessorImpl.commSchedulingRequirementConstraintsID_Accessor));
    setCommScheduleAllocationConstraintsID(*(accessorImpl.commScheduleAllocationConstraintsID_Accessor));
    setAssessmentResourceList(*(accessorImpl.assessmentResourceList_Accessor));
  }
}

void CommPointingPlanRequestType::reset() noexcept {
  routePlan_Accessor->reset();
  assessmentConstraintLevel_Accessor->reset();
  commScheduleAvailabilityConstraints_Accessor->reset();
  commSchedulingRequirementConstraintsID_Accessor->reset();
  commScheduleAllocationConstraintsID_Accessor->reset();
  assessmentResourceList_Accessor->reset();
}

const uci::type::CommPointingPlanRequestType::RoutePlan& CommPointingPlanRequestType::getRoutePlan() const {
  return *routePlan_Accessor;
}

uci::type::CommPointingPlanRequestType::RoutePlan& CommPointingPlanRequestType::getRoutePlan() {
  return *routePlan_Accessor;
}

uci::type::CommPointingPlanRequestType& CommPointingPlanRequestType::setRoutePlan(const uci::type::CommPointingPlanRequestType::RoutePlan& accessor) {
  if (&accessor != routePlan_Accessor.get()) {
    routePlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommPointingAssessmentEnum& CommPointingPlanRequestType::getAssessmentConstraintLevel() const {
  return *assessmentConstraintLevel_Accessor;
}

uci::type::CommPointingAssessmentEnum& CommPointingPlanRequestType::getAssessmentConstraintLevel() {
  return *assessmentConstraintLevel_Accessor;
}

uci::type::CommPointingPlanRequestType& CommPointingPlanRequestType::setAssessmentConstraintLevel(const uci::type::CommPointingAssessmentEnum& accessor) {
  if (&accessor != assessmentConstraintLevel_Accessor.get()) {
    assessmentConstraintLevel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommPointingPlanRequestType& CommPointingPlanRequestType::setAssessmentConstraintLevel(uci::type::CommPointingAssessmentEnum::EnumerationItem value) {
  assessmentConstraintLevel_Accessor->setValue(value);
  return *this;
}


const uci::type::CommPointingPlanRequestType::CommScheduleAvailabilityConstraints& CommPointingPlanRequestType::getCommScheduleAvailabilityConstraints() const {
  return *commScheduleAvailabilityConstraints_Accessor;
}

uci::type::CommPointingPlanRequestType::CommScheduleAvailabilityConstraints& CommPointingPlanRequestType::getCommScheduleAvailabilityConstraints() {
  return *commScheduleAvailabilityConstraints_Accessor;
}

uci::type::CommPointingPlanRequestType& CommPointingPlanRequestType::setCommScheduleAvailabilityConstraints(const uci::type::CommPointingPlanRequestType::CommScheduleAvailabilityConstraints& accessor) {
  if (&accessor != commScheduleAvailabilityConstraints_Accessor.get()) {
    commScheduleAvailabilityConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommPointingPlanRequestType::CommSchedulingRequirementConstraintsID& CommPointingPlanRequestType::getCommSchedulingRequirementConstraintsID() const {
  return *commSchedulingRequirementConstraintsID_Accessor;
}

uci::type::CommPointingPlanRequestType::CommSchedulingRequirementConstraintsID& CommPointingPlanRequestType::getCommSchedulingRequirementConstraintsID() {
  return *commSchedulingRequirementConstraintsID_Accessor;
}

uci::type::CommPointingPlanRequestType& CommPointingPlanRequestType::setCommSchedulingRequirementConstraintsID(const uci::type::CommPointingPlanRequestType::CommSchedulingRequirementConstraintsID& accessor) {
  if (&accessor != commSchedulingRequirementConstraintsID_Accessor.get()) {
    commSchedulingRequirementConstraintsID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommPointingPlanRequestType::CommScheduleAllocationConstraintsID& CommPointingPlanRequestType::getCommScheduleAllocationConstraintsID() const {
  return *commScheduleAllocationConstraintsID_Accessor;
}

uci::type::CommPointingPlanRequestType::CommScheduleAllocationConstraintsID& CommPointingPlanRequestType::getCommScheduleAllocationConstraintsID() {
  return *commScheduleAllocationConstraintsID_Accessor;
}

uci::type::CommPointingPlanRequestType& CommPointingPlanRequestType::setCommScheduleAllocationConstraintsID(const uci::type::CommPointingPlanRequestType::CommScheduleAllocationConstraintsID& accessor) {
  if (&accessor != commScheduleAllocationConstraintsID_Accessor.get()) {
    commScheduleAllocationConstraintsID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommPointingPlanRequestType::AssessmentResourceList& CommPointingPlanRequestType::getAssessmentResourceList() const {
  return *assessmentResourceList_Accessor;
}

uci::type::CommPointingPlanRequestType::AssessmentResourceList& CommPointingPlanRequestType::getAssessmentResourceList() {
  return *assessmentResourceList_Accessor;
}

uci::type::CommPointingPlanRequestType& CommPointingPlanRequestType::setAssessmentResourceList(const uci::type::CommPointingPlanRequestType::AssessmentResourceList& accessor) {
  if (&accessor != assessmentResourceList_Accessor.get()) {
    assessmentResourceList_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommPointingPlanRequestType> CommPointingPlanRequestType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commPointingPlanRequestType : type};
  return (requestedType == uci::type::accessorType::commPointingPlanRequestType) ? boost::make_unique<CommPointingPlanRequestType>() : nullptr;
}

/**  */
namespace CommPointingPlanRequestType_Names {

constexpr const char* Extern_Type_Name{"CommPointingPlanRequestType"};
constexpr const char* RoutePlan_Name{"RoutePlan"};
constexpr const char* AssessmentConstraintLevel_Name{"AssessmentConstraintLevel"};
constexpr const char* CommScheduleAvailabilityConstraints_Name{"CommScheduleAvailabilityConstraints"};
constexpr const char* CommSchedulingRequirementConstraintsID_Name{"CommSchedulingRequirementConstraintsID"};
constexpr const char* CommScheduleAllocationConstraintsID_Name{"CommScheduleAllocationConstraintsID"};
constexpr const char* AssessmentResourceList_Name{"AssessmentResourceList"};

} // namespace CommPointingPlanRequestType_Names

void CommPointingPlanRequestType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommPointingPlanRequestType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommPointingPlanRequestType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommPointingPlanRequestType_Names::RoutePlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommPointingPlanRequestType::RoutePlan& boundedList = accessor.getRoutePlan();
        const uci::type::CommPointingPlanRequestType::RoutePlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RoutePlanReferencesType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommPointingPlanRequestType_Names::AssessmentConstraintLevel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getAssessmentConstraintLevel().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommPointingPlanRequestType_Names::CommScheduleAvailabilityConstraints_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommPointingPlanRequestType::CommScheduleAvailabilityConstraints& boundedList = accessor.getCommScheduleAvailabilityConstraints();
        const uci::type::CommPointingPlanRequestType::CommScheduleAvailabilityConstraints::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommCoverageUserDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommPointingPlanRequestType_Names::CommSchedulingRequirementConstraintsID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommPointingPlanRequestType::CommSchedulingRequirementConstraintsID& boundedList = accessor.getCommSchedulingRequirementConstraintsID();
        const uci::type::CommPointingPlanRequestType::CommSchedulingRequirementConstraintsID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommSchedulingRequirementID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommPointingPlanRequestType_Names::CommScheduleAllocationConstraintsID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommPointingPlanRequestType::CommScheduleAllocationConstraintsID& boundedList = accessor.getCommScheduleAllocationConstraintsID();
        const uci::type::CommPointingPlanRequestType::CommScheduleAllocationConstraintsID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommScheduleAllocationID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommPointingPlanRequestType_Names::AssessmentResourceList_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommPointingPlanRequestType::AssessmentResourceList& boundedList = accessor.getAssessmentResourceList();
        const uci::type::CommPointingPlanRequestType::AssessmentResourceList::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CommPointingPlanRequestType::serialize(const uci::type::CommPointingPlanRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommPointingPlanRequestType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommPointingPlanRequestType_Names::Extern_Type_Name);
  }
  {
    const uci::type::CommPointingPlanRequestType::RoutePlan& boundedList = accessor.getRoutePlan();
    for (uci::type::CommPointingPlanRequestType::RoutePlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RoutePlanReferencesType::serialize(boundedList.at(i), node, CommPointingPlanRequestType_Names::RoutePlan_Name);
    }
  }
  CommPointingAssessmentEnum::serialize(accessor.getAssessmentConstraintLevel(), node, CommPointingPlanRequestType_Names::AssessmentConstraintLevel_Name, false);
  {
    const uci::type::CommPointingPlanRequestType::CommScheduleAvailabilityConstraints& boundedList = accessor.getCommScheduleAvailabilityConstraints();
    for (uci::type::CommPointingPlanRequestType::CommScheduleAvailabilityConstraints::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommCoverageUserDataType::serialize(boundedList.at(i), node, CommPointingPlanRequestType_Names::CommScheduleAvailabilityConstraints_Name);
    }
  }
  {
    const uci::type::CommPointingPlanRequestType::CommSchedulingRequirementConstraintsID& boundedList = accessor.getCommSchedulingRequirementConstraintsID();
    for (uci::type::CommPointingPlanRequestType::CommSchedulingRequirementConstraintsID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommSchedulingRequirementID_Type::serialize(boundedList.at(i), node, CommPointingPlanRequestType_Names::CommSchedulingRequirementConstraintsID_Name);
    }
  }
  {
    const uci::type::CommPointingPlanRequestType::CommScheduleAllocationConstraintsID& boundedList = accessor.getCommScheduleAllocationConstraintsID();
    for (uci::type::CommPointingPlanRequestType::CommScheduleAllocationConstraintsID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommScheduleAllocationID_Type::serialize(boundedList.at(i), node, CommPointingPlanRequestType_Names::CommScheduleAllocationConstraintsID_Name);
    }
  }
  {
    const uci::type::CommPointingPlanRequestType::AssessmentResourceList& boundedList = accessor.getAssessmentResourceList();
    for (uci::type::CommPointingPlanRequestType::AssessmentResourceList::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, CommPointingPlanRequestType_Names::AssessmentResourceList_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommPointingPlanRequestType& CommPointingPlanRequestType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommPointingPlanRequestType>().release());
}

uci::type::CommPointingPlanRequestType& CommPointingPlanRequestType::create(const uci::type::CommPointingPlanRequestType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommPointingPlanRequestType> newAccessor{boost::make_unique<asb_uci::type::CommPointingPlanRequestType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommPointingPlanRequestType::destroy(uci::type::CommPointingPlanRequestType& accessor) {
  delete dynamic_cast<asb_uci::type::CommPointingPlanRequestType*>(&accessor);
}

} // namespace type

} // namespace uci

