/** @file CapabilityTaxonomyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CapabilityTaxonomyType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AMTI_SpecificDataType.h"
#include "asb_uci/type/AO_CapabilityEnum.h"
#include "asb_uci/type/ActionTypeEnum.h"
#include "asb_uci/type/AirSampleCapabilityEnum.h"
#include "asb_uci/type/COMINT_SpecificDataType.h"
#include "asb_uci/type/CS_CapabilityEnum.h"
#include "asb_uci/type/CapabilityInitiationEnum.h"
#include "asb_uci/type/CargoDeliverySpecificDataType.h"
#include "asb_uci/type/CommCapabilityEnum.h"
#include "asb_uci/type/ESM_SpecificDataType.h"
#include "asb_uci/type/EffectTypeEnum.h"
#include "asb_uci/type/FlightCapabilityEnum.h"
#include "asb_uci/type/OrbitChangeCapabilityEnum.h"
#include "asb_uci/type/OrbitalSurveillanceSensorCapabilityEnum.h"
#include "asb_uci/type/OrbitalSurveillanceSpecificDataType.h"
#include "asb_uci/type/PO_CapabilityEnum.h"
#include "asb_uci/type/RefuelCapabilityEnum.h"
#include "asb_uci/type/ResponseTypeEnum.h"
#include "asb_uci/type/SAR_SpecificDataType.h"
#include "asb_uci/type/SMTI_SpecificDataType.h"
#include "asb_uci/type/StoreType.h"
#include "asb_uci/type/SystemDeploymentEnum.h"
#include "asb_uci/type/TacticalOrderCapabilityEnum.h"
#include "asb_uci/type/WeatherRadarCapabilityEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AMTI_SpecificDataType.h"
#include "uci/type/AO_CapabilityEnum.h"
#include "uci/type/ActionTypeEnum.h"
#include "uci/type/AirSampleCapabilityEnum.h"
#include "uci/type/COMINT_SpecificDataType.h"
#include "uci/type/CS_CapabilityEnum.h"
#include "uci/type/CapabilityInitiationEnum.h"
#include "uci/type/CapabilityTaxonomyType.h"
#include "uci/type/CargoDeliverySpecificDataType.h"
#include "uci/type/CommCapabilityEnum.h"
#include "uci/type/ESM_SpecificDataType.h"
#include "uci/type/EffectTypeEnum.h"
#include "uci/type/FlightCapabilityEnum.h"
#include "uci/type/OrbitChangeCapabilityEnum.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityEnum.h"
#include "uci/type/OrbitalSurveillanceSpecificDataType.h"
#include "uci/type/PO_CapabilityEnum.h"
#include "uci/type/RefuelCapabilityEnum.h"
#include "uci/type/ResponseTypeEnum.h"
#include "uci/type/SAR_SpecificDataType.h"
#include "uci/type/SMTI_SpecificDataType.h"
#include "uci/type/StoreType.h"
#include "uci/type/SystemDeploymentEnum.h"
#include "uci/type/TacticalOrderCapabilityEnum.h"
#include "uci/type/WeatherRadarCapabilityEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CapabilityTaxonomyType::CapabilityTaxonomyType()
  : action_Accessor{boost::make_unique<Action>(0, 84)},
    airSample_Accessor{boost::make_unique<AirSample>(0, 2)},
    aMTI_Accessor{boost::make_unique<AMTI>(0, SIZE_MAX)},
    aO_Accessor{boost::make_unique<AO>(0, 5)},
    cargoDelivery_Accessor{boost::make_unique<CargoDelivery>(0, SIZE_MAX)},
    cOMINT_Accessor{boost::make_unique<COMINT>(0, SIZE_MAX)},
    commRelay_Accessor{boost::make_unique<CommRelay>(0, 53)},
    eA_Accessor{boost::make_unique<EA>(0, 2)},
    effect_Accessor{boost::make_unique<Effect>(0, 47)},
    eSM_Accessor{boost::make_unique<ESM>(0, SIZE_MAX)},
    flight_Accessor{boost::make_unique<Flight>(0, 2)},
    orbitChange_Accessor{boost::make_unique<OrbitChange>(0, 9)},
    orbitalSurveillance_Accessor{boost::make_unique<OrbitalSurveillance>(0, SIZE_MAX)},
    orbitalSurveillanceSensor_Accessor{boost::make_unique<OrbitalSurveillanceSensor>(0, 2)},
    pO_Accessor{boost::make_unique<PO>(0, 19)},
    refuel_Accessor{boost::make_unique<Refuel>(0, 3)},
    response_Accessor{boost::make_unique<Response>(0, 4)},
    sAR_Accessor{boost::make_unique<SAR>(0, SIZE_MAX)},
    sMTI_Accessor{boost::make_unique<SMTI>(0, SIZE_MAX)},
    strike_Accessor{boost::make_unique<Strike>(0, SIZE_MAX)},
    systemDeployment_Accessor{boost::make_unique<SystemDeployment>(0, 6)},
    tacticalOrder_Accessor{boost::make_unique<TacticalOrder>(0, 11)} {
}

CapabilityTaxonomyType::~CapabilityTaxonomyType() = default;

void CapabilityTaxonomyType::copy(const uci::type::CapabilityTaxonomyType& accessor) {
  copyImpl(accessor, false);
}

void CapabilityTaxonomyType::copyImpl(const uci::type::CapabilityTaxonomyType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CapabilityTaxonomyType&>(accessor);
    setAction(*(accessorImpl.action_Accessor));
    setAirSample(*(accessorImpl.airSample_Accessor));
    setAMTI(*(accessorImpl.aMTI_Accessor));
    setAO(*(accessorImpl.aO_Accessor));
    setCargoDelivery(*(accessorImpl.cargoDelivery_Accessor));
    setCOMINT(*(accessorImpl.cOMINT_Accessor));
    setCommRelay(*(accessorImpl.commRelay_Accessor));
    if (accessorImpl.counterSpace_Accessor) {
      setCounterSpace(*(accessorImpl.counterSpace_Accessor));
    } else {
      counterSpace_Accessor.reset();
    }
    setEA(*(accessorImpl.eA_Accessor));
    setEffect(*(accessorImpl.effect_Accessor));
    setESM(*(accessorImpl.eSM_Accessor));
    setFlight(*(accessorImpl.flight_Accessor));
    setOrbitChange(*(accessorImpl.orbitChange_Accessor));
    setOrbitalSurveillance(*(accessorImpl.orbitalSurveillance_Accessor));
    setOrbitalSurveillanceSensor(*(accessorImpl.orbitalSurveillanceSensor_Accessor));
    setPO(*(accessorImpl.pO_Accessor));
    setRefuel(*(accessorImpl.refuel_Accessor));
    setResponse(*(accessorImpl.response_Accessor));
    setSAR(*(accessorImpl.sAR_Accessor));
    setSMTI(*(accessorImpl.sMTI_Accessor));
    setStrike(*(accessorImpl.strike_Accessor));
    setSystemDeployment(*(accessorImpl.systemDeployment_Accessor));
    setTacticalOrder(*(accessorImpl.tacticalOrder_Accessor));
    if (accessorImpl.weatherRadar_Accessor) {
      setWeatherRadar(*(accessorImpl.weatherRadar_Accessor));
    } else {
      weatherRadar_Accessor.reset();
    }
  }
}

void CapabilityTaxonomyType::reset() noexcept {
  action_Accessor->reset();
  airSample_Accessor->reset();
  aMTI_Accessor->reset();
  aO_Accessor->reset();
  cargoDelivery_Accessor->reset();
  cOMINT_Accessor->reset();
  commRelay_Accessor->reset();
  counterSpace_Accessor.reset();
  eA_Accessor->reset();
  effect_Accessor->reset();
  eSM_Accessor->reset();
  flight_Accessor->reset();
  orbitChange_Accessor->reset();
  orbitalSurveillance_Accessor->reset();
  orbitalSurveillanceSensor_Accessor->reset();
  pO_Accessor->reset();
  refuel_Accessor->reset();
  response_Accessor->reset();
  sAR_Accessor->reset();
  sMTI_Accessor->reset();
  strike_Accessor->reset();
  systemDeployment_Accessor->reset();
  tacticalOrder_Accessor->reset();
  weatherRadar_Accessor.reset();
}

const uci::type::CapabilityTaxonomyType::Action& CapabilityTaxonomyType::getAction() const {
  return *action_Accessor;
}

uci::type::CapabilityTaxonomyType::Action& CapabilityTaxonomyType::getAction() {
  return *action_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setAction(const uci::type::CapabilityTaxonomyType::Action& accessor) {
  if (&accessor != action_Accessor.get()) {
    action_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::AirSample& CapabilityTaxonomyType::getAirSample() const {
  return *airSample_Accessor;
}

uci::type::CapabilityTaxonomyType::AirSample& CapabilityTaxonomyType::getAirSample() {
  return *airSample_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setAirSample(const uci::type::CapabilityTaxonomyType::AirSample& accessor) {
  if (&accessor != airSample_Accessor.get()) {
    airSample_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::AMTI& CapabilityTaxonomyType::getAMTI() const {
  return *aMTI_Accessor;
}

uci::type::CapabilityTaxonomyType::AMTI& CapabilityTaxonomyType::getAMTI() {
  return *aMTI_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setAMTI(const uci::type::CapabilityTaxonomyType::AMTI& accessor) {
  if (&accessor != aMTI_Accessor.get()) {
    aMTI_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::AO& CapabilityTaxonomyType::getAO() const {
  return *aO_Accessor;
}

uci::type::CapabilityTaxonomyType::AO& CapabilityTaxonomyType::getAO() {
  return *aO_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setAO(const uci::type::CapabilityTaxonomyType::AO& accessor) {
  if (&accessor != aO_Accessor.get()) {
    aO_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::CargoDelivery& CapabilityTaxonomyType::getCargoDelivery() const {
  return *cargoDelivery_Accessor;
}

uci::type::CapabilityTaxonomyType::CargoDelivery& CapabilityTaxonomyType::getCargoDelivery() {
  return *cargoDelivery_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setCargoDelivery(const uci::type::CapabilityTaxonomyType::CargoDelivery& accessor) {
  if (&accessor != cargoDelivery_Accessor.get()) {
    cargoDelivery_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::COMINT& CapabilityTaxonomyType::getCOMINT() const {
  return *cOMINT_Accessor;
}

uci::type::CapabilityTaxonomyType::COMINT& CapabilityTaxonomyType::getCOMINT() {
  return *cOMINT_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setCOMINT(const uci::type::CapabilityTaxonomyType::COMINT& accessor) {
  if (&accessor != cOMINT_Accessor.get()) {
    cOMINT_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::CommRelay& CapabilityTaxonomyType::getCommRelay() const {
  return *commRelay_Accessor;
}

uci::type::CapabilityTaxonomyType::CommRelay& CapabilityTaxonomyType::getCommRelay() {
  return *commRelay_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setCommRelay(const uci::type::CapabilityTaxonomyType::CommRelay& accessor) {
  if (&accessor != commRelay_Accessor.get()) {
    commRelay_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CS_CapabilityEnum& CapabilityTaxonomyType::getCounterSpace_() const {
  if (counterSpace_Accessor) {
    return *counterSpace_Accessor;
  }
  throw uci::base::UCIException("Error in getCounterSpace(): An attempt was made to get an optional field that was not enabled, call hasCounterSpace() to determine if it is safe to call getCounterSpace()");
}

const uci::type::CS_CapabilityEnum& CapabilityTaxonomyType::getCounterSpace() const {
  return getCounterSpace_();
}

uci::type::CS_CapabilityEnum& CapabilityTaxonomyType::getCounterSpace() {
  return getCounterSpace_();
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setCounterSpace(const uci::type::CS_CapabilityEnum& accessor) {
  enableCounterSpace();
  if (&accessor != counterSpace_Accessor.get()) {
    counterSpace_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setCounterSpace(const uci::type::CS_CapabilityEnum::EnumerationItem value) {
  enableCounterSpace().setValue(value);
  return *this;
}

bool CapabilityTaxonomyType::hasCounterSpace() const noexcept {
  return static_cast<bool>(counterSpace_Accessor);
}

uci::type::CS_CapabilityEnum& CapabilityTaxonomyType::enableCounterSpace(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_CapabilityEnum : type};
  if ((!counterSpace_Accessor) || (counterSpace_Accessor->getAccessorType() != requestedType)) {
    counterSpace_Accessor = CS_CapabilityEnum::create(requestedType);
    if (!counterSpace_Accessor) {
      throw uci::base::UCIException("Error in enableCounterSpace(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *counterSpace_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::clearCounterSpace() noexcept {
  counterSpace_Accessor.reset();
  return *this;
}

const uci::type::CapabilityTaxonomyType::EA& CapabilityTaxonomyType::getEA() const {
  return *eA_Accessor;
}

uci::type::CapabilityTaxonomyType::EA& CapabilityTaxonomyType::getEA() {
  return *eA_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setEA(const uci::type::CapabilityTaxonomyType::EA& accessor) {
  if (&accessor != eA_Accessor.get()) {
    eA_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::Effect& CapabilityTaxonomyType::getEffect() const {
  return *effect_Accessor;
}

uci::type::CapabilityTaxonomyType::Effect& CapabilityTaxonomyType::getEffect() {
  return *effect_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setEffect(const uci::type::CapabilityTaxonomyType::Effect& accessor) {
  if (&accessor != effect_Accessor.get()) {
    effect_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::ESM& CapabilityTaxonomyType::getESM() const {
  return *eSM_Accessor;
}

uci::type::CapabilityTaxonomyType::ESM& CapabilityTaxonomyType::getESM() {
  return *eSM_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setESM(const uci::type::CapabilityTaxonomyType::ESM& accessor) {
  if (&accessor != eSM_Accessor.get()) {
    eSM_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::Flight& CapabilityTaxonomyType::getFlight() const {
  return *flight_Accessor;
}

uci::type::CapabilityTaxonomyType::Flight& CapabilityTaxonomyType::getFlight() {
  return *flight_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setFlight(const uci::type::CapabilityTaxonomyType::Flight& accessor) {
  if (&accessor != flight_Accessor.get()) {
    flight_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::OrbitChange& CapabilityTaxonomyType::getOrbitChange() const {
  return *orbitChange_Accessor;
}

uci::type::CapabilityTaxonomyType::OrbitChange& CapabilityTaxonomyType::getOrbitChange() {
  return *orbitChange_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setOrbitChange(const uci::type::CapabilityTaxonomyType::OrbitChange& accessor) {
  if (&accessor != orbitChange_Accessor.get()) {
    orbitChange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::OrbitalSurveillance& CapabilityTaxonomyType::getOrbitalSurveillance() const {
  return *orbitalSurveillance_Accessor;
}

uci::type::CapabilityTaxonomyType::OrbitalSurveillance& CapabilityTaxonomyType::getOrbitalSurveillance() {
  return *orbitalSurveillance_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setOrbitalSurveillance(const uci::type::CapabilityTaxonomyType::OrbitalSurveillance& accessor) {
  if (&accessor != orbitalSurveillance_Accessor.get()) {
    orbitalSurveillance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor& CapabilityTaxonomyType::getOrbitalSurveillanceSensor() const {
  return *orbitalSurveillanceSensor_Accessor;
}

uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor& CapabilityTaxonomyType::getOrbitalSurveillanceSensor() {
  return *orbitalSurveillanceSensor_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setOrbitalSurveillanceSensor(const uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor& accessor) {
  if (&accessor != orbitalSurveillanceSensor_Accessor.get()) {
    orbitalSurveillanceSensor_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::PO& CapabilityTaxonomyType::getPO() const {
  return *pO_Accessor;
}

uci::type::CapabilityTaxonomyType::PO& CapabilityTaxonomyType::getPO() {
  return *pO_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setPO(const uci::type::CapabilityTaxonomyType::PO& accessor) {
  if (&accessor != pO_Accessor.get()) {
    pO_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::Refuel& CapabilityTaxonomyType::getRefuel() const {
  return *refuel_Accessor;
}

uci::type::CapabilityTaxonomyType::Refuel& CapabilityTaxonomyType::getRefuel() {
  return *refuel_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setRefuel(const uci::type::CapabilityTaxonomyType::Refuel& accessor) {
  if (&accessor != refuel_Accessor.get()) {
    refuel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::Response& CapabilityTaxonomyType::getResponse() const {
  return *response_Accessor;
}

uci::type::CapabilityTaxonomyType::Response& CapabilityTaxonomyType::getResponse() {
  return *response_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setResponse(const uci::type::CapabilityTaxonomyType::Response& accessor) {
  if (&accessor != response_Accessor.get()) {
    response_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::SAR& CapabilityTaxonomyType::getSAR() const {
  return *sAR_Accessor;
}

uci::type::CapabilityTaxonomyType::SAR& CapabilityTaxonomyType::getSAR() {
  return *sAR_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setSAR(const uci::type::CapabilityTaxonomyType::SAR& accessor) {
  if (&accessor != sAR_Accessor.get()) {
    sAR_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::SMTI& CapabilityTaxonomyType::getSMTI() const {
  return *sMTI_Accessor;
}

uci::type::CapabilityTaxonomyType::SMTI& CapabilityTaxonomyType::getSMTI() {
  return *sMTI_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setSMTI(const uci::type::CapabilityTaxonomyType::SMTI& accessor) {
  if (&accessor != sMTI_Accessor.get()) {
    sMTI_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::Strike& CapabilityTaxonomyType::getStrike() const {
  return *strike_Accessor;
}

uci::type::CapabilityTaxonomyType::Strike& CapabilityTaxonomyType::getStrike() {
  return *strike_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setStrike(const uci::type::CapabilityTaxonomyType::Strike& accessor) {
  if (&accessor != strike_Accessor.get()) {
    strike_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::SystemDeployment& CapabilityTaxonomyType::getSystemDeployment() const {
  return *systemDeployment_Accessor;
}

uci::type::CapabilityTaxonomyType::SystemDeployment& CapabilityTaxonomyType::getSystemDeployment() {
  return *systemDeployment_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setSystemDeployment(const uci::type::CapabilityTaxonomyType::SystemDeployment& accessor) {
  if (&accessor != systemDeployment_Accessor.get()) {
    systemDeployment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyType::TacticalOrder& CapabilityTaxonomyType::getTacticalOrder() const {
  return *tacticalOrder_Accessor;
}

uci::type::CapabilityTaxonomyType::TacticalOrder& CapabilityTaxonomyType::getTacticalOrder() {
  return *tacticalOrder_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setTacticalOrder(const uci::type::CapabilityTaxonomyType::TacticalOrder& accessor) {
  if (&accessor != tacticalOrder_Accessor.get()) {
    tacticalOrder_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::WeatherRadarCapabilityEnum& CapabilityTaxonomyType::getWeatherRadar_() const {
  if (weatherRadar_Accessor) {
    return *weatherRadar_Accessor;
  }
  throw uci::base::UCIException("Error in getWeatherRadar(): An attempt was made to get an optional field that was not enabled, call hasWeatherRadar() to determine if it is safe to call getWeatherRadar()");
}

const uci::type::WeatherRadarCapabilityEnum& CapabilityTaxonomyType::getWeatherRadar() const {
  return getWeatherRadar_();
}

uci::type::WeatherRadarCapabilityEnum& CapabilityTaxonomyType::getWeatherRadar() {
  return getWeatherRadar_();
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setWeatherRadar(const uci::type::WeatherRadarCapabilityEnum& accessor) {
  enableWeatherRadar();
  if (&accessor != weatherRadar_Accessor.get()) {
    weatherRadar_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::setWeatherRadar(const uci::type::WeatherRadarCapabilityEnum::EnumerationItem value) {
  enableWeatherRadar().setValue(value);
  return *this;
}

bool CapabilityTaxonomyType::hasWeatherRadar() const noexcept {
  return static_cast<bool>(weatherRadar_Accessor);
}

uci::type::WeatherRadarCapabilityEnum& CapabilityTaxonomyType::enableWeatherRadar(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weatherRadarCapabilityEnum : type};
  if ((!weatherRadar_Accessor) || (weatherRadar_Accessor->getAccessorType() != requestedType)) {
    weatherRadar_Accessor = WeatherRadarCapabilityEnum::create(requestedType);
    if (!weatherRadar_Accessor) {
      throw uci::base::UCIException("Error in enableWeatherRadar(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weatherRadar_Accessor;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::clearWeatherRadar() noexcept {
  weatherRadar_Accessor.reset();
  return *this;
}

std::unique_ptr<CapabilityTaxonomyType> CapabilityTaxonomyType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityTaxonomyType : type};
  return (requestedType == uci::type::accessorType::capabilityTaxonomyType) ? boost::make_unique<CapabilityTaxonomyType>() : nullptr;
}

/**  */
namespace CapabilityTaxonomyType_Names {

constexpr const char* Extern_Type_Name{"CapabilityTaxonomyType"};
constexpr const char* Action_Name{"Action"};
constexpr const char* AirSample_Name{"AirSample"};
constexpr const char* AMTI_Name{"AMTI"};
constexpr const char* AO_Name{"AO"};
constexpr const char* CargoDelivery_Name{"CargoDelivery"};
constexpr const char* COMINT_Name{"COMINT"};
constexpr const char* CommRelay_Name{"CommRelay"};
constexpr const char* CounterSpace_Name{"CounterSpace"};
constexpr const char* EA_Name{"EA"};
constexpr const char* Effect_Name{"Effect"};
constexpr const char* ESM_Name{"ESM"};
constexpr const char* Flight_Name{"Flight"};
constexpr const char* OrbitChange_Name{"OrbitChange"};
constexpr const char* OrbitalSurveillance_Name{"OrbitalSurveillance"};
constexpr const char* OrbitalSurveillanceSensor_Name{"OrbitalSurveillanceSensor"};
constexpr const char* PO_Name{"PO"};
constexpr const char* Refuel_Name{"Refuel"};
constexpr const char* Response_Name{"Response"};
constexpr const char* SAR_Name{"SAR"};
constexpr const char* SMTI_Name{"SMTI"};
constexpr const char* Strike_Name{"Strike"};
constexpr const char* SystemDeployment_Name{"SystemDeployment"};
constexpr const char* TacticalOrder_Name{"TacticalOrder"};
constexpr const char* WeatherRadar_Name{"WeatherRadar"};

} // namespace CapabilityTaxonomyType_Names

void CapabilityTaxonomyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityTaxonomyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilityTaxonomyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::Action_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::Action& boundedList = accessor.getAction();
        const uci::type::CapabilityTaxonomyType::Action::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::AirSample_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::AirSample& boundedList = accessor.getAirSample();
        const uci::type::CapabilityTaxonomyType::AirSample::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::AMTI_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::AMTI& boundedList = accessor.getAMTI();
        const uci::type::CapabilityTaxonomyType::AMTI::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AMTI_SpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::AO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::AO& boundedList = accessor.getAO();
        const uci::type::CapabilityTaxonomyType::AO::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::CargoDelivery_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::CargoDelivery& boundedList = accessor.getCargoDelivery();
        const uci::type::CapabilityTaxonomyType::CargoDelivery::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CargoDeliverySpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::COMINT_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::COMINT& boundedList = accessor.getCOMINT();
        const uci::type::CapabilityTaxonomyType::COMINT::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::COMINT_SpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::CommRelay_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::CommRelay& boundedList = accessor.getCommRelay();
        const uci::type::CapabilityTaxonomyType::CommRelay::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::CounterSpace_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCounterSpace().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::EA_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::EA& boundedList = accessor.getEA();
        const uci::type::CapabilityTaxonomyType::EA::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::Effect_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::Effect& boundedList = accessor.getEffect();
        const uci::type::CapabilityTaxonomyType::Effect::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::ESM_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::ESM& boundedList = accessor.getESM();
        const uci::type::CapabilityTaxonomyType::ESM::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ESM_SpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::Flight_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::Flight& boundedList = accessor.getFlight();
        const uci::type::CapabilityTaxonomyType::Flight::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::OrbitChange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::OrbitChange& boundedList = accessor.getOrbitChange();
        const uci::type::CapabilityTaxonomyType::OrbitChange::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::OrbitalSurveillance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::OrbitalSurveillance& boundedList = accessor.getOrbitalSurveillance();
        const uci::type::CapabilityTaxonomyType::OrbitalSurveillance::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitalSurveillanceSpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::OrbitalSurveillanceSensor_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor& boundedList = accessor.getOrbitalSurveillanceSensor();
        const uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::PO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::PO& boundedList = accessor.getPO();
        const uci::type::CapabilityTaxonomyType::PO::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::Refuel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::Refuel& boundedList = accessor.getRefuel();
        const uci::type::CapabilityTaxonomyType::Refuel::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::Response_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::Response& boundedList = accessor.getResponse();
        const uci::type::CapabilityTaxonomyType::Response::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::SAR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::SAR& boundedList = accessor.getSAR();
        const uci::type::CapabilityTaxonomyType::SAR::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SAR_SpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::SMTI_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::SMTI& boundedList = accessor.getSMTI();
        const uci::type::CapabilityTaxonomyType::SMTI::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SMTI_SpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::Strike_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::Strike& boundedList = accessor.getStrike();
        const uci::type::CapabilityTaxonomyType::Strike::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::SystemDeployment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::SystemDeployment& boundedList = accessor.getSystemDeployment();
        const uci::type::CapabilityTaxonomyType::SystemDeployment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::TacticalOrder_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::TacticalOrder& boundedList = accessor.getTacticalOrder();
        const uci::type::CapabilityTaxonomyType::TacticalOrder::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::WeatherRadar_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableWeatherRadar().setValueFromName(*value);
      }
    }
  }
}

std::string CapabilityTaxonomyType::serialize(const uci::type::CapabilityTaxonomyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CapabilityTaxonomyType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilityTaxonomyType_Names::Extern_Type_Name);
  }
  {
    const uci::type::CapabilityTaxonomyType::Action& boundedList = accessor.getAction();
    for (uci::type::CapabilityTaxonomyType::Action::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ActionTypeEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::Action_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::AirSample& boundedList = accessor.getAirSample();
    for (uci::type::CapabilityTaxonomyType::AirSample::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      AirSampleCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::AirSample_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::AMTI& boundedList = accessor.getAMTI();
    for (uci::type::CapabilityTaxonomyType::AMTI::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AMTI_SpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::AMTI_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::AO& boundedList = accessor.getAO();
    for (uci::type::CapabilityTaxonomyType::AO::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      AO_CapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::AO_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::CargoDelivery& boundedList = accessor.getCargoDelivery();
    for (uci::type::CapabilityTaxonomyType::CargoDelivery::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CargoDeliverySpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::CargoDelivery_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::COMINT& boundedList = accessor.getCOMINT();
    for (uci::type::CapabilityTaxonomyType::COMINT::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::COMINT_SpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::COMINT_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::CommRelay& boundedList = accessor.getCommRelay();
    for (uci::type::CapabilityTaxonomyType::CommRelay::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::CommRelay_Name, false);
    }
  }
  if (accessor.hasCounterSpace()) {
    CS_CapabilityEnum::serialize(accessor.getCounterSpace(), node, CapabilityTaxonomyType_Names::CounterSpace_Name, false);
  }
  {
    const uci::type::CapabilityTaxonomyType::EA& boundedList = accessor.getEA();
    for (uci::type::CapabilityTaxonomyType::EA::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CapabilityInitiationEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::EA_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::Effect& boundedList = accessor.getEffect();
    for (uci::type::CapabilityTaxonomyType::Effect::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      EffectTypeEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::Effect_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::ESM& boundedList = accessor.getESM();
    for (uci::type::CapabilityTaxonomyType::ESM::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ESM_SpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::ESM_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::Flight& boundedList = accessor.getFlight();
    for (uci::type::CapabilityTaxonomyType::Flight::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FlightCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::Flight_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::OrbitChange& boundedList = accessor.getOrbitChange();
    for (uci::type::CapabilityTaxonomyType::OrbitChange::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitChangeCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::OrbitChange_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::OrbitalSurveillance& boundedList = accessor.getOrbitalSurveillance();
    for (uci::type::CapabilityTaxonomyType::OrbitalSurveillance::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitalSurveillanceSpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::OrbitalSurveillance_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor& boundedList = accessor.getOrbitalSurveillanceSensor();
    for (uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitalSurveillanceSensorCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::OrbitalSurveillanceSensor_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::PO& boundedList = accessor.getPO();
    for (uci::type::CapabilityTaxonomyType::PO::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_CapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::PO_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::Refuel& boundedList = accessor.getRefuel();
    for (uci::type::CapabilityTaxonomyType::Refuel::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      RefuelCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::Refuel_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::Response& boundedList = accessor.getResponse();
    for (uci::type::CapabilityTaxonomyType::Response::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ResponseTypeEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::Response_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::SAR& boundedList = accessor.getSAR();
    for (uci::type::CapabilityTaxonomyType::SAR::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SAR_SpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::SAR_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::SMTI& boundedList = accessor.getSMTI();
    for (uci::type::CapabilityTaxonomyType::SMTI::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SMTI_SpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::SMTI_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::Strike& boundedList = accessor.getStrike();
    for (uci::type::CapabilityTaxonomyType::Strike::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::StoreType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::Strike_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::SystemDeployment& boundedList = accessor.getSystemDeployment();
    for (uci::type::CapabilityTaxonomyType::SystemDeployment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SystemDeploymentEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::SystemDeployment_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::TacticalOrder& boundedList = accessor.getTacticalOrder();
    for (uci::type::CapabilityTaxonomyType::TacticalOrder::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      TacticalOrderCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::TacticalOrder_Name, false);
    }
  }
  if (accessor.hasWeatherRadar()) {
    WeatherRadarCapabilityEnum::serialize(accessor.getWeatherRadar(), node, CapabilityTaxonomyType_Names::WeatherRadar_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CapabilityTaxonomyType>().release());
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyType::create(const uci::type::CapabilityTaxonomyType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CapabilityTaxonomyType> newAccessor{boost::make_unique<asb_uci::type::CapabilityTaxonomyType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CapabilityTaxonomyType::destroy(uci::type::CapabilityTaxonomyType& accessor) {
  delete dynamic_cast<asb_uci::type::CapabilityTaxonomyType*>(&accessor);
}

} // namespace type

} // namespace uci

