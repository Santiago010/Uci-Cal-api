/** @file CommSchedulingRequestStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommSchedulingRequestStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CannotComplyType.h"
#include "asb_uci/type/CommCoverageUserDataType.h"
#include "asb_uci/type/CommSchedulingRequestApprovalStatusEnum.h"
#include "asb_uci/type/CommSchedulingRequirementID_Type.h"
#include "asb_uci/type/RequestStatusBaseType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CannotComplyType.h"
#include "uci/type/CommCoverageUserDataType.h"
#include "uci/type/CommSchedulingRequestApprovalStatusEnum.h"
#include "uci/type/CommSchedulingRequestStatusMDT.h"
#include "uci/type/CommSchedulingRequirementID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommSchedulingRequestStatusMDT::CommSchedulingRequestStatusMDT()
  : approvalStatus_Accessor{boost::make_unique<CommSchedulingRequestApprovalStatusEnum>()},
    commSchedulingRequirementID_Accessor{boost::make_unique<CommSchedulingRequirementID>(0, SIZE_MAX)},
    scheduledComm_Accessor{boost::make_unique<ScheduledComm>(0, SIZE_MAX)} {
}

CommSchedulingRequestStatusMDT::~CommSchedulingRequestStatusMDT() = default;

void CommSchedulingRequestStatusMDT::copy(const uci::type::CommSchedulingRequestStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void CommSchedulingRequestStatusMDT::copyImpl(const uci::type::CommSchedulingRequestStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RequestStatusBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CommSchedulingRequestStatusMDT&>(accessor);
    setApprovalStatus(*(accessorImpl.approvalStatus_Accessor));
    if (accessorImpl.approvalStatusReason_Accessor) {
      setApprovalStatusReason(*(accessorImpl.approvalStatusReason_Accessor));
    } else {
      approvalStatusReason_Accessor.reset();
    }
    setCommSchedulingRequirementID(*(accessorImpl.commSchedulingRequirementID_Accessor));
    setScheduledComm(*(accessorImpl.scheduledComm_Accessor));
  }
}

void CommSchedulingRequestStatusMDT::reset() noexcept {
  RequestStatusBaseType::reset();
  approvalStatus_Accessor->reset();
  approvalStatusReason_Accessor.reset();
  commSchedulingRequirementID_Accessor->reset();
  scheduledComm_Accessor->reset();
}

const uci::type::CommSchedulingRequestApprovalStatusEnum& CommSchedulingRequestStatusMDT::getApprovalStatus() const {
  return *approvalStatus_Accessor;
}

uci::type::CommSchedulingRequestApprovalStatusEnum& CommSchedulingRequestStatusMDT::getApprovalStatus() {
  return *approvalStatus_Accessor;
}

uci::type::CommSchedulingRequestStatusMDT& CommSchedulingRequestStatusMDT::setApprovalStatus(const uci::type::CommSchedulingRequestApprovalStatusEnum& accessor) {
  if (&accessor != approvalStatus_Accessor.get()) {
    approvalStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommSchedulingRequestStatusMDT& CommSchedulingRequestStatusMDT::setApprovalStatus(uci::type::CommSchedulingRequestApprovalStatusEnum::EnumerationItem value) {
  approvalStatus_Accessor->setValue(value);
  return *this;
}


uci::type::CannotComplyType& CommSchedulingRequestStatusMDT::getApprovalStatusReason_() const {
  if (approvalStatusReason_Accessor) {
    return *approvalStatusReason_Accessor;
  }
  throw uci::base::UCIException("Error in getApprovalStatusReason(): An attempt was made to get an optional field that was not enabled, call hasApprovalStatusReason() to determine if it is safe to call getApprovalStatusReason()");
}

const uci::type::CannotComplyType& CommSchedulingRequestStatusMDT::getApprovalStatusReason() const {
  return getApprovalStatusReason_();
}

uci::type::CannotComplyType& CommSchedulingRequestStatusMDT::getApprovalStatusReason() {
  return getApprovalStatusReason_();
}

uci::type::CommSchedulingRequestStatusMDT& CommSchedulingRequestStatusMDT::setApprovalStatusReason(const uci::type::CannotComplyType& accessor) {
  enableApprovalStatusReason(accessor.getAccessorType());
  if (&accessor != approvalStatusReason_Accessor.get()) {
    approvalStatusReason_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CommSchedulingRequestStatusMDT::hasApprovalStatusReason() const noexcept {
  return static_cast<bool>(approvalStatusReason_Accessor);
}

uci::type::CannotComplyType& CommSchedulingRequestStatusMDT::enableApprovalStatusReason(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cannotComplyType : type};
  if ((!approvalStatusReason_Accessor) || (approvalStatusReason_Accessor->getAccessorType() != requestedType)) {
    approvalStatusReason_Accessor = CannotComplyType::create(requestedType);
    if (!approvalStatusReason_Accessor) {
      throw uci::base::UCIException("Error in enableApprovalStatusReason(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *approvalStatusReason_Accessor;
}

uci::type::CommSchedulingRequestStatusMDT& CommSchedulingRequestStatusMDT::clearApprovalStatusReason() noexcept {
  approvalStatusReason_Accessor.reset();
  return *this;
}

const uci::type::CommSchedulingRequestStatusMDT::CommSchedulingRequirementID& CommSchedulingRequestStatusMDT::getCommSchedulingRequirementID() const {
  return *commSchedulingRequirementID_Accessor;
}

uci::type::CommSchedulingRequestStatusMDT::CommSchedulingRequirementID& CommSchedulingRequestStatusMDT::getCommSchedulingRequirementID() {
  return *commSchedulingRequirementID_Accessor;
}

uci::type::CommSchedulingRequestStatusMDT& CommSchedulingRequestStatusMDT::setCommSchedulingRequirementID(const uci::type::CommSchedulingRequestStatusMDT::CommSchedulingRequirementID& accessor) {
  if (&accessor != commSchedulingRequirementID_Accessor.get()) {
    commSchedulingRequirementID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommSchedulingRequestStatusMDT::ScheduledComm& CommSchedulingRequestStatusMDT::getScheduledComm() const {
  return *scheduledComm_Accessor;
}

uci::type::CommSchedulingRequestStatusMDT::ScheduledComm& CommSchedulingRequestStatusMDT::getScheduledComm() {
  return *scheduledComm_Accessor;
}

uci::type::CommSchedulingRequestStatusMDT& CommSchedulingRequestStatusMDT::setScheduledComm(const uci::type::CommSchedulingRequestStatusMDT::ScheduledComm& accessor) {
  if (&accessor != scheduledComm_Accessor.get()) {
    scheduledComm_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommSchedulingRequestStatusMDT> CommSchedulingRequestStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commSchedulingRequestStatusMDT : type};
  return (requestedType == uci::type::accessorType::commSchedulingRequestStatusMDT) ? boost::make_unique<CommSchedulingRequestStatusMDT>() : nullptr;
}

/**  */
namespace CommSchedulingRequestStatusMDT_Names {

constexpr const char* Extern_Type_Name{"CommSchedulingRequestStatusMDT"};
constexpr const char* ApprovalStatus_Name{"ApprovalStatus"};
constexpr const char* ApprovalStatusReason_Name{"ApprovalStatusReason"};
constexpr const char* CommSchedulingRequirementID_Name{"CommSchedulingRequirementID"};
constexpr const char* ScheduledComm_Name{"ScheduledComm"};

} // namespace CommSchedulingRequestStatusMDT_Names

void CommSchedulingRequestStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommSchedulingRequestStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommSchedulingRequestStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommSchedulingRequestStatusMDT_Names::ApprovalStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getApprovalStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommSchedulingRequestStatusMDT_Names::ApprovalStatusReason_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableApprovalStatusReason(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommSchedulingRequestStatusMDT_Names::CommSchedulingRequirementID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommSchedulingRequestStatusMDT::CommSchedulingRequirementID& boundedList = accessor.getCommSchedulingRequirementID();
        const uci::type::CommSchedulingRequestStatusMDT::CommSchedulingRequirementID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommSchedulingRequirementID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommSchedulingRequestStatusMDT_Names::ScheduledComm_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommSchedulingRequestStatusMDT::ScheduledComm& boundedList = accessor.getScheduledComm();
        const uci::type::CommSchedulingRequestStatusMDT::ScheduledComm::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommCoverageUserDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  RequestStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CommSchedulingRequestStatusMDT::serialize(const uci::type::CommSchedulingRequestStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommSchedulingRequestStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommSchedulingRequestStatusMDT_Names::Extern_Type_Name);
  }
  RequestStatusBaseType::serialize(accessor, node, "", false, false, false);
  CommSchedulingRequestApprovalStatusEnum::serialize(accessor.getApprovalStatus(), node, CommSchedulingRequestStatusMDT_Names::ApprovalStatus_Name, false);
  if (accessor.hasApprovalStatusReason()) {
    CannotComplyType::serialize(accessor.getApprovalStatusReason(), node, CommSchedulingRequestStatusMDT_Names::ApprovalStatusReason_Name);
  }
  {
    const uci::type::CommSchedulingRequestStatusMDT::CommSchedulingRequirementID& boundedList = accessor.getCommSchedulingRequirementID();
    for (uci::type::CommSchedulingRequestStatusMDT::CommSchedulingRequirementID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommSchedulingRequirementID_Type::serialize(boundedList.at(i), node, CommSchedulingRequestStatusMDT_Names::CommSchedulingRequirementID_Name);
    }
  }
  {
    const uci::type::CommSchedulingRequestStatusMDT::ScheduledComm& boundedList = accessor.getScheduledComm();
    for (uci::type::CommSchedulingRequestStatusMDT::ScheduledComm::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommCoverageUserDataType::serialize(boundedList.at(i), node, CommSchedulingRequestStatusMDT_Names::ScheduledComm_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommSchedulingRequestStatusMDT& CommSchedulingRequestStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommSchedulingRequestStatusMDT>().release());
}

uci::type::CommSchedulingRequestStatusMDT& CommSchedulingRequestStatusMDT::create(const uci::type::CommSchedulingRequestStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommSchedulingRequestStatusMDT> newAccessor{boost::make_unique<asb_uci::type::CommSchedulingRequestStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommSchedulingRequestStatusMDT::destroy(uci::type::CommSchedulingRequestStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::CommSchedulingRequestStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

