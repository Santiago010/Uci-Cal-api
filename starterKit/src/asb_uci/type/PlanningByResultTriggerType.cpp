/** @file PlanningByResultTriggerType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PlanningByResultTriggerType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PlanTypeEnum.h"
#include "../../../include/asb_uci/type/PlanVulnerabilityType.h"
#include "../../../include/asb_uci/type/RequirementTriggerType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanVulnerabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanningByResultTriggerType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementTriggerType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanningByResultTriggerType::PlanningByResultTriggerType() = default;

PlanningByResultTriggerType::~PlanningByResultTriggerType() = default;

void PlanningByResultTriggerType::copy(const uci::type::PlanningByResultTriggerType& accessor) {
  copyImpl(accessor, false);
}

void PlanningByResultTriggerType::copyImpl(const uci::type::PlanningByResultTriggerType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlanningByResultTriggerType&>(accessor);
    if (accessorImpl.replanRequired_Accessor) {
      setReplanRequired(*(accessorImpl.replanRequired_Accessor));
    } else {
      replanRequired_Accessor.reset();
    }
    if (accessorImpl.vulnerabilityChanged_Accessor) {
      setVulnerabilityChanged(*(accessorImpl.vulnerabilityChanged_Accessor));
    } else {
      vulnerabilityChanged_Accessor.reset();
    }
    if (accessorImpl.requirementUnallocated_Accessor) {
      setRequirementUnallocated(*(accessorImpl.requirementUnallocated_Accessor));
    } else {
      requirementUnallocated_Accessor.reset();
    }
  }
}

void PlanningByResultTriggerType::reset() noexcept {
  replanRequired_Accessor.reset();
  vulnerabilityChanged_Accessor.reset();
  requirementUnallocated_Accessor.reset();
}

uci::type::PlanningByResultTriggerType::PlanningByResultTriggerTypeChoice PlanningByResultTriggerType::getPlanningByResultTriggerTypeChoiceOrdinal() const noexcept {
  if (replanRequired_Accessor) {
    return PLANNINGBYRESULTTRIGGERTYPE_CHOICE_REPLANREQUIRED;
  }
  if (vulnerabilityChanged_Accessor) {
    return PLANNINGBYRESULTTRIGGERTYPE_CHOICE_VULNERABILITYCHANGED;
  }
  if (requirementUnallocated_Accessor) {
    return PLANNINGBYRESULTTRIGGERTYPE_CHOICE_REQUIREMENTUNALLOCATED;
  }
  return PLANNINGBYRESULTTRIGGERTYPE_CHOICE_NONE;
}

uci::type::PlanningByResultTriggerType& PlanningByResultTriggerType::setPlanningByResultTriggerTypeChoiceOrdinal(uci::type::PlanningByResultTriggerType::PlanningByResultTriggerTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PLANNINGBYRESULTTRIGGERTYPE_CHOICE_REPLANREQUIRED:
      chooseReplanRequired();
      break;
    case PLANNINGBYRESULTTRIGGERTYPE_CHOICE_VULNERABILITYCHANGED:
      chooseVulnerabilityChanged("setPlanningByResultTriggerTypeChoiceOrdinal", type);
      break;
    case PLANNINGBYRESULTTRIGGERTYPE_CHOICE_REQUIREMENTUNALLOCATED:
      chooseRequirementUnallocated("setPlanningByResultTriggerTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPlanningByResultTriggerTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PlanningByResultTriggerType::ReplanRequired& PlanningByResultTriggerType::getReplanRequired_() const {
  if (replanRequired_Accessor) {
    return *replanRequired_Accessor;
  }
  throw uci::base::UCIException("Error in getReplanRequired(): Unable to get ReplanRequired, field not selected");
}

const uci::type::PlanningByResultTriggerType::ReplanRequired& PlanningByResultTriggerType::getReplanRequired() const {
  return getReplanRequired_();
}

uci::type::PlanningByResultTriggerType::ReplanRequired& PlanningByResultTriggerType::getReplanRequired() {
  return getReplanRequired_();
}

uci::type::PlanningByResultTriggerType& PlanningByResultTriggerType::setReplanRequired(const uci::type::PlanningByResultTriggerType::ReplanRequired& accessor) {
  chooseReplanRequired();
  if (&accessor != replanRequired_Accessor.get()) {
    replanRequired_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningByResultTriggerType::isReplanRequired() const noexcept {
  return static_cast<bool>(replanRequired_Accessor);
}

uci::type::PlanningByResultTriggerType::ReplanRequired& PlanningByResultTriggerType::chooseReplanRequired() {
  vulnerabilityChanged_Accessor.reset();
  requirementUnallocated_Accessor.reset();
  if (!replanRequired_Accessor) {
    replanRequired_Accessor = boost::make_unique<ReplanRequired>(1, 11);
  }
  return *replanRequired_Accessor;
}

uci::type::PlanVulnerabilityType& PlanningByResultTriggerType::getVulnerabilityChanged_() const {
  if (vulnerabilityChanged_Accessor) {
    return *vulnerabilityChanged_Accessor;
  }
  throw uci::base::UCIException("Error in getVulnerabilityChanged(): Unable to get VulnerabilityChanged, field not selected");
}

const uci::type::PlanVulnerabilityType& PlanningByResultTriggerType::getVulnerabilityChanged() const {
  return getVulnerabilityChanged_();
}

uci::type::PlanVulnerabilityType& PlanningByResultTriggerType::getVulnerabilityChanged() {
  return getVulnerabilityChanged_();
}

uci::type::PlanningByResultTriggerType& PlanningByResultTriggerType::setVulnerabilityChanged(const uci::type::PlanVulnerabilityType& accessor) {
  chooseVulnerabilityChanged();
  if (&accessor != vulnerabilityChanged_Accessor.get()) {
    vulnerabilityChanged_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningByResultTriggerType::isVulnerabilityChanged() const noexcept {
  return static_cast<bool>(vulnerabilityChanged_Accessor);
}

uci::type::PlanVulnerabilityType& PlanningByResultTriggerType::chooseVulnerabilityChanged(const std::string& method, uci::base::accessorType::AccessorType type) {
  replanRequired_Accessor.reset();
  requirementUnallocated_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planVulnerabilityType : type};
  if ((!vulnerabilityChanged_Accessor) || (vulnerabilityChanged_Accessor->getAccessorType() != requestedType)) {
    vulnerabilityChanged_Accessor = PlanVulnerabilityType::create(type);
    if (!vulnerabilityChanged_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *vulnerabilityChanged_Accessor;
}

uci::type::PlanVulnerabilityType& PlanningByResultTriggerType::chooseVulnerabilityChanged(uci::base::accessorType::AccessorType type) {
  return chooseVulnerabilityChanged("chooseVulnerabilityChanged", type);
}

uci::type::RequirementTriggerType& PlanningByResultTriggerType::getRequirementUnallocated_() const {
  if (requirementUnallocated_Accessor) {
    return *requirementUnallocated_Accessor;
  }
  throw uci::base::UCIException("Error in getRequirementUnallocated(): Unable to get RequirementUnallocated, field not selected");
}

const uci::type::RequirementTriggerType& PlanningByResultTriggerType::getRequirementUnallocated() const {
  return getRequirementUnallocated_();
}

uci::type::RequirementTriggerType& PlanningByResultTriggerType::getRequirementUnallocated() {
  return getRequirementUnallocated_();
}

uci::type::PlanningByResultTriggerType& PlanningByResultTriggerType::setRequirementUnallocated(const uci::type::RequirementTriggerType& accessor) {
  chooseRequirementUnallocated("setRequirementUnallocated", accessor.getAccessorType());
  if (&accessor != requirementUnallocated_Accessor.get()) {
    requirementUnallocated_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool PlanningByResultTriggerType::isRequirementUnallocated() const noexcept {
  return static_cast<bool>(requirementUnallocated_Accessor);
}

uci::type::RequirementTriggerType& PlanningByResultTriggerType::chooseRequirementUnallocated(const std::string& method, uci::base::accessorType::AccessorType type) {
  replanRequired_Accessor.reset();
  vulnerabilityChanged_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementTriggerType : type};
  if ((!requirementUnallocated_Accessor) || (requirementUnallocated_Accessor->getAccessorType() != requestedType)) {
    requirementUnallocated_Accessor = RequirementTriggerType::create(type);
    if (!requirementUnallocated_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *requirementUnallocated_Accessor;
}

uci::type::RequirementTriggerType& PlanningByResultTriggerType::chooseRequirementUnallocated(uci::base::accessorType::AccessorType type) {
  return chooseRequirementUnallocated("chooseRequirementUnallocated", type);
}

std::unique_ptr<PlanningByResultTriggerType> PlanningByResultTriggerType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planningByResultTriggerType : type};
  return (requestedType == uci::type::accessorType::planningByResultTriggerType) ? boost::make_unique<PlanningByResultTriggerType>() : nullptr;
}

/**  */
namespace PlanningByResultTriggerType_Names {

constexpr const char* Extern_Type_Name{"PlanningByResultTriggerType"};
constexpr const char* ReplanRequired_Name{"ReplanRequired"};
constexpr const char* VulnerabilityChanged_Name{"VulnerabilityChanged"};
constexpr const char* RequirementUnallocated_Name{"RequirementUnallocated"};

} // namespace PlanningByResultTriggerType_Names

void PlanningByResultTriggerType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanningByResultTriggerType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanningByResultTriggerType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanningByResultTriggerType_Names::ReplanRequired_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanningByResultTriggerType::ReplanRequired& boundedList = accessor.chooseReplanRequired();
        const uci::type::PlanningByResultTriggerType::ReplanRequired::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlanningByResultTriggerType_Names::VulnerabilityChanged_Name) {
      PlanVulnerabilityType::deserialize(valueType.second, accessor.chooseVulnerabilityChanged(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningByResultTriggerType_Names::RequirementUnallocated_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseRequirementUnallocated(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string PlanningByResultTriggerType::serialize(const uci::type::PlanningByResultTriggerType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanningByResultTriggerType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanningByResultTriggerType_Names::Extern_Type_Name);
  }
  if (accessor.isReplanRequired()) {
    {
      const uci::type::PlanningByResultTriggerType::ReplanRequired& boundedList = accessor.getReplanRequired();
      for (uci::type::PlanningByResultTriggerType::ReplanRequired::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        PlanTypeEnum::serialize(boundedList.at(i), node, PlanningByResultTriggerType_Names::ReplanRequired_Name, false);
      }
    }
  } else if (accessor.isVulnerabilityChanged()) {
    PlanVulnerabilityType::serialize(accessor.getVulnerabilityChanged(), node, PlanningByResultTriggerType_Names::VulnerabilityChanged_Name);
  } else if (accessor.isRequirementUnallocated()) {
    RequirementTriggerType::serialize(accessor.getRequirementUnallocated(), node, PlanningByResultTriggerType_Names::RequirementUnallocated_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanningByResultTriggerType& PlanningByResultTriggerType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanningByResultTriggerType>().release());
}

uci::type::PlanningByResultTriggerType& PlanningByResultTriggerType::create(const uci::type::PlanningByResultTriggerType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanningByResultTriggerType> newAccessor{boost::make_unique<asb_uci::type::PlanningByResultTriggerType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanningByResultTriggerType::destroy(uci::type::PlanningByResultTriggerType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanningByResultTriggerType*>(&accessor);
}

} // namespace type

} // namespace uci

