/** @file VelocityVelocityCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/VelocityVelocityCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/VelocityVelocityCovarianceType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

VelocityVelocityCovarianceType::VelocityVelocityCovarianceType() = default;

VelocityVelocityCovarianceType::~VelocityVelocityCovarianceType() = default;

void VelocityVelocityCovarianceType::copy(const uci::type::VelocityVelocityCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void VelocityVelocityCovarianceType::copyImpl(const uci::type::VelocityVelocityCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const VelocityVelocityCovarianceType&>(accessor);
    setVnVn(accessorImpl.vnVn_Accessor);
    setVnVe(accessorImpl.vnVe_Accessor);
    if (accessorImpl.hasVnVd()) {
      setVnVd(accessorImpl.getVnVd());
    } else {
      clearVnVd();
    }
    setVeVe(accessorImpl.veVe_Accessor);
    if (accessorImpl.hasVeVd()) {
      setVeVd(accessorImpl.getVeVd());
    } else {
      clearVeVd();
    }
    if (accessorImpl.hasVdVd()) {
      setVdVd(accessorImpl.getVdVd());
    } else {
      clearVdVd();
    }
  }
}

void VelocityVelocityCovarianceType::reset() noexcept {
  vnVn_Accessor = 0.0;
  vnVe_Accessor = 0.0;
  clearVnVd();
  veVe_Accessor = 0.0;
  clearVeVd();
  clearVdVd();
}

xs::Double VelocityVelocityCovarianceType::getVnVn() const {
  return vnVn_Accessor;
}

uci::type::VelocityVelocityCovarianceType& VelocityVelocityCovarianceType::setVnVn(xs::Double value) {
  vnVn_Accessor = value;
  return *this;
}


xs::Double VelocityVelocityCovarianceType::getVnVe() const {
  return vnVe_Accessor;
}

uci::type::VelocityVelocityCovarianceType& VelocityVelocityCovarianceType::setVnVe(xs::Double value) {
  vnVe_Accessor = value;
  return *this;
}


xs::Double VelocityVelocityCovarianceType::getVnVd() const {
  if (vnVd_Accessor) {
    return *vnVd_Accessor;
  }
  throw uci::base::UCIException("Error in getVnVd(): An attempt was made to get an optional field that was not enabled, call hasVnVd() to determine if it is safe to call getVnVd()");
}

uci::type::VelocityVelocityCovarianceType& VelocityVelocityCovarianceType::setVnVd(xs::Double value) {
  vnVd_Accessor = value;
  return *this;
}

bool VelocityVelocityCovarianceType::hasVnVd() const noexcept {
  return vnVd_Accessor.has_value();
}

uci::type::VelocityVelocityCovarianceType& VelocityVelocityCovarianceType::clearVnVd() noexcept {
  vnVd_Accessor.reset();
  return *this;
}

xs::Double VelocityVelocityCovarianceType::getVeVe() const {
  return veVe_Accessor;
}

uci::type::VelocityVelocityCovarianceType& VelocityVelocityCovarianceType::setVeVe(xs::Double value) {
  veVe_Accessor = value;
  return *this;
}


xs::Double VelocityVelocityCovarianceType::getVeVd() const {
  if (veVd_Accessor) {
    return *veVd_Accessor;
  }
  throw uci::base::UCIException("Error in getVeVd(): An attempt was made to get an optional field that was not enabled, call hasVeVd() to determine if it is safe to call getVeVd()");
}

uci::type::VelocityVelocityCovarianceType& VelocityVelocityCovarianceType::setVeVd(xs::Double value) {
  veVd_Accessor = value;
  return *this;
}

bool VelocityVelocityCovarianceType::hasVeVd() const noexcept {
  return veVd_Accessor.has_value();
}

uci::type::VelocityVelocityCovarianceType& VelocityVelocityCovarianceType::clearVeVd() noexcept {
  veVd_Accessor.reset();
  return *this;
}

xs::Double VelocityVelocityCovarianceType::getVdVd() const {
  if (vdVd_Accessor) {
    return *vdVd_Accessor;
  }
  throw uci::base::UCIException("Error in getVdVd(): An attempt was made to get an optional field that was not enabled, call hasVdVd() to determine if it is safe to call getVdVd()");
}

uci::type::VelocityVelocityCovarianceType& VelocityVelocityCovarianceType::setVdVd(xs::Double value) {
  vdVd_Accessor = value;
  return *this;
}

bool VelocityVelocityCovarianceType::hasVdVd() const noexcept {
  return vdVd_Accessor.has_value();
}

uci::type::VelocityVelocityCovarianceType& VelocityVelocityCovarianceType::clearVdVd() noexcept {
  vdVd_Accessor.reset();
  return *this;
}

std::unique_ptr<VelocityVelocityCovarianceType> VelocityVelocityCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::velocityVelocityCovarianceType : type};
  return (requestedType == uci::type::accessorType::velocityVelocityCovarianceType) ? boost::make_unique<VelocityVelocityCovarianceType>() : nullptr;
}

/**  */
namespace VelocityVelocityCovarianceType_Names {

constexpr const char* Extern_Type_Name{"VelocityVelocityCovarianceType"};
constexpr const char* VnVn_Name{"VnVn"};
constexpr const char* VnVe_Name{"VnVe"};
constexpr const char* VnVd_Name{"VnVd"};
constexpr const char* VeVe_Name{"VeVe"};
constexpr const char* VeVd_Name{"VeVd"};
constexpr const char* VdVd_Name{"VdVd"};

} // namespace VelocityVelocityCovarianceType_Names

void VelocityVelocityCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VelocityVelocityCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VelocityVelocityCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VelocityVelocityCovarianceType_Names::VnVn_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVnVn(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityVelocityCovarianceType_Names::VnVe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVnVe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityVelocityCovarianceType_Names::VnVd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVnVd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityVelocityCovarianceType_Names::VeVe_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVeVe(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityVelocityCovarianceType_Names::VeVd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVeVd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VelocityVelocityCovarianceType_Names::VdVd_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVdVd(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string VelocityVelocityCovarianceType::serialize(const uci::type::VelocityVelocityCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? VelocityVelocityCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, VelocityVelocityCovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVnVn(), node, VelocityVelocityCovarianceType_Names::VnVn_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVnVe(), node, VelocityVelocityCovarianceType_Names::VnVe_Name);
  if (accessor.hasVnVd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVnVd(), node, VelocityVelocityCovarianceType_Names::VnVd_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVeVe(), node, VelocityVelocityCovarianceType_Names::VeVe_Name);
  if (accessor.hasVeVd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVeVd(), node, VelocityVelocityCovarianceType_Names::VeVd_Name);
  }
  if (accessor.hasVdVd()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVdVd(), node, VelocityVelocityCovarianceType_Names::VdVd_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::VelocityVelocityCovarianceType& VelocityVelocityCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::VelocityVelocityCovarianceType>().release());
}

uci::type::VelocityVelocityCovarianceType& VelocityVelocityCovarianceType::create(const uci::type::VelocityVelocityCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::VelocityVelocityCovarianceType> newAccessor{boost::make_unique<asb_uci::type::VelocityVelocityCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void VelocityVelocityCovarianceType::destroy(uci::type::VelocityVelocityCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::VelocityVelocityCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

