/** @file CS_EngagementDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CS_EngagementDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CS_DetailDataType.h"
#include "asb_uci/type/CS_SENO_Type.h"
#include "asb_uci/type/CS_SignalType.h"
#include "asb_uci/type/FileLocationID_Type.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/SatelliteIdentifierType.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CS_DetailDataType.h"
#include "uci/type/CS_EngagementDataType.h"
#include "uci/type/CS_SENO_Type.h"
#include "uci/type/CS_SignalType.h"
#include "uci/type/FileLocationID_Type.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/SatelliteIdentifierType.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CS_EngagementDataType::CS_EngagementDataType()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()},
    satellite_Accessor{boost::make_unique<SatelliteIdentifierType>()},
    transponder_Accessor{boost::make_unique<ForeignKeyType>()},
    tactic_Accessor{boost::make_unique<ForeignKeyType>()},
    detailData_Accessor{boost::make_unique<CS_DetailDataType>()},
    signals_Accessor{boost::make_unique<Signals>(0, SIZE_MAX)} {
}

CS_EngagementDataType::~CS_EngagementDataType() = default;

void CS_EngagementDataType::copy(const uci::type::CS_EngagementDataType& accessor) {
  copyImpl(accessor, false);
}

void CS_EngagementDataType::copyImpl(const uci::type::CS_EngagementDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CS_EngagementDataType&>(accessor);
    if (accessorImpl.sENO_Accessor) {
      setSENO(*(accessorImpl.sENO_Accessor));
    } else {
      sENO_Accessor.reset();
    }
    setSystemID(*(accessorImpl.systemID_Accessor));
    setSatellite(*(accessorImpl.satellite_Accessor));
    setTransponder(*(accessorImpl.transponder_Accessor));
    setTactic(*(accessorImpl.tactic_Accessor));
    if (accessorImpl.commentID_Accessor) {
      setCommentID(*(accessorImpl.commentID_Accessor));
    } else {
      commentID_Accessor.reset();
    }
    setDetailData(*(accessorImpl.detailData_Accessor));
    setSignals(*(accessorImpl.signals_Accessor));
  }
}

void CS_EngagementDataType::reset() noexcept {
  sENO_Accessor.reset();
  systemID_Accessor->reset();
  satellite_Accessor->reset();
  if (transponder_Accessor->getAccessorType() != uci::type::accessorType::foreignKeyType) {
    transponder_Accessor = boost::make_unique<ForeignKeyType>();
  } else {
    transponder_Accessor->reset();
  }
  if (tactic_Accessor->getAccessorType() != uci::type::accessorType::foreignKeyType) {
    tactic_Accessor = boost::make_unique<ForeignKeyType>();
  } else {
    tactic_Accessor->reset();
  }
  commentID_Accessor.reset();
  detailData_Accessor->reset();
  signals_Accessor->reset();
}

uci::type::CS_SENO_Type& CS_EngagementDataType::getSENO_() const {
  if (sENO_Accessor) {
    return *sENO_Accessor;
  }
  throw uci::base::UCIException("Error in getSENO(): An attempt was made to get an optional field that was not enabled, call hasSENO() to determine if it is safe to call getSENO()");
}

const uci::type::CS_SENO_Type& CS_EngagementDataType::getSENO() const {
  return getSENO_();
}

uci::type::CS_SENO_Type& CS_EngagementDataType::getSENO() {
  return getSENO_();
}

uci::type::CS_EngagementDataType& CS_EngagementDataType::setSENO(const uci::type::CS_SENO_Type& value) {
  return setSENO(value.c_str());
}

uci::type::CS_EngagementDataType& CS_EngagementDataType::setSENO(const std::string& value) {
  return setSENO(value.c_str());
}

uci::type::CS_EngagementDataType& CS_EngagementDataType::setSENO(const char* value) {
  enableSENO().setStringValue(value);
  return *this;
}

bool CS_EngagementDataType::hasSENO() const noexcept {
  return static_cast<bool>(sENO_Accessor);
}

uci::type::CS_SENO_Type& CS_EngagementDataType::enableSENO(uci::base::accessorType::AccessorType type) {
  if (!sENO_Accessor) {
    sENO_Accessor = CS_SENO_Type::create(type);
  }
  return *sENO_Accessor;
}

uci::type::CS_EngagementDataType& CS_EngagementDataType::clearSENO() noexcept {
  sENO_Accessor.reset();
  return *this;
}

const uci::type::SystemID_Type& CS_EngagementDataType::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& CS_EngagementDataType::getSystemID() {
  return *systemID_Accessor;
}

uci::type::CS_EngagementDataType& CS_EngagementDataType::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SatelliteIdentifierType& CS_EngagementDataType::getSatellite() const {
  return *satellite_Accessor;
}

uci::type::SatelliteIdentifierType& CS_EngagementDataType::getSatellite() {
  return *satellite_Accessor;
}

uci::type::CS_EngagementDataType& CS_EngagementDataType::setSatellite(const uci::type::SatelliteIdentifierType& accessor) {
  if (&accessor != satellite_Accessor.get()) {
    satellite_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ForeignKeyType& CS_EngagementDataType::getTransponder() const {
  return *transponder_Accessor;
}

uci::type::ForeignKeyType& CS_EngagementDataType::getTransponder() {
  return *transponder_Accessor;
}

uci::type::CS_EngagementDataType& CS_EngagementDataType::setTransponder(const uci::type::ForeignKeyType& accessor) {
  enableTransponder(accessor.getAccessorType());
  if (&accessor != transponder_Accessor.get()) {
    transponder_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ForeignKeyType& CS_EngagementDataType::enableTransponder(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!transponder_Accessor) || (transponder_Accessor->getAccessorType() != requestedType)) {
    transponder_Accessor = ForeignKeyType::create(requestedType);
    if (!transponder_Accessor) {
      throw uci::base::UCIException("Error in enableTransponder(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *transponder_Accessor;
}

const uci::type::ForeignKeyType& CS_EngagementDataType::getTactic() const {
  return *tactic_Accessor;
}

uci::type::ForeignKeyType& CS_EngagementDataType::getTactic() {
  return *tactic_Accessor;
}

uci::type::CS_EngagementDataType& CS_EngagementDataType::setTactic(const uci::type::ForeignKeyType& accessor) {
  enableTactic(accessor.getAccessorType());
  if (&accessor != tactic_Accessor.get()) {
    tactic_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::ForeignKeyType& CS_EngagementDataType::enableTactic(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!tactic_Accessor) || (tactic_Accessor->getAccessorType() != requestedType)) {
    tactic_Accessor = ForeignKeyType::create(requestedType);
    if (!tactic_Accessor) {
      throw uci::base::UCIException("Error in enableTactic(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *tactic_Accessor;
}

uci::type::FileLocationID_Type& CS_EngagementDataType::getCommentID_() const {
  if (commentID_Accessor) {
    return *commentID_Accessor;
  }
  throw uci::base::UCIException("Error in getCommentID(): An attempt was made to get an optional field that was not enabled, call hasCommentID() to determine if it is safe to call getCommentID()");
}

const uci::type::FileLocationID_Type& CS_EngagementDataType::getCommentID() const {
  return getCommentID_();
}

uci::type::FileLocationID_Type& CS_EngagementDataType::getCommentID() {
  return getCommentID_();
}

uci::type::CS_EngagementDataType& CS_EngagementDataType::setCommentID(const uci::type::FileLocationID_Type& accessor) {
  enableCommentID();
  if (&accessor != commentID_Accessor.get()) {
    commentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CS_EngagementDataType::hasCommentID() const noexcept {
  return static_cast<bool>(commentID_Accessor);
}

uci::type::FileLocationID_Type& CS_EngagementDataType::enableCommentID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileLocationID_Type : type};
  if ((!commentID_Accessor) || (commentID_Accessor->getAccessorType() != requestedType)) {
    commentID_Accessor = FileLocationID_Type::create(requestedType);
    if (!commentID_Accessor) {
      throw uci::base::UCIException("Error in enableCommentID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commentID_Accessor;
}

uci::type::CS_EngagementDataType& CS_EngagementDataType::clearCommentID() noexcept {
  commentID_Accessor.reset();
  return *this;
}

const uci::type::CS_DetailDataType& CS_EngagementDataType::getDetailData() const {
  return *detailData_Accessor;
}

uci::type::CS_DetailDataType& CS_EngagementDataType::getDetailData() {
  return *detailData_Accessor;
}

uci::type::CS_EngagementDataType& CS_EngagementDataType::setDetailData(const uci::type::CS_DetailDataType& accessor) {
  if (&accessor != detailData_Accessor.get()) {
    detailData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CS_EngagementDataType::Signals& CS_EngagementDataType::getSignals() const {
  return *signals_Accessor;
}

uci::type::CS_EngagementDataType::Signals& CS_EngagementDataType::getSignals() {
  return *signals_Accessor;
}

uci::type::CS_EngagementDataType& CS_EngagementDataType::setSignals(const uci::type::CS_EngagementDataType::Signals& accessor) {
  if (&accessor != signals_Accessor.get()) {
    signals_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CS_EngagementDataType> CS_EngagementDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_EngagementDataType : type};
  return (requestedType == uci::type::accessorType::cS_EngagementDataType) ? boost::make_unique<CS_EngagementDataType>() : nullptr;
}

/**  */
namespace CS_EngagementDataType_Names {

constexpr const char* Extern_Type_Name{"CS_EngagementDataType"};
constexpr const char* SENO_Name{"SENO"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* Satellite_Name{"Satellite"};
constexpr const char* Transponder_Name{"Transponder"};
constexpr const char* Tactic_Name{"Tactic"};
constexpr const char* CommentID_Name{"CommentID"};
constexpr const char* DetailData_Name{"DetailData"};
constexpr const char* Signals_Name{"Signals"};

} // namespace CS_EngagementDataType_Names

void CS_EngagementDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_EngagementDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CS_EngagementDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CS_EngagementDataType_Names::SENO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSENO(*value);
      }
    } else if (valueType.first == nsPrefix + CS_EngagementDataType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_EngagementDataType_Names::Satellite_Name) {
      SatelliteIdentifierType::deserialize(valueType.second, accessor.getSatellite(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_EngagementDataType_Names::Transponder_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableTransponder(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_EngagementDataType_Names::Tactic_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableTactic(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_EngagementDataType_Names::CommentID_Name) {
      FileLocationID_Type::deserialize(valueType.second, accessor.enableCommentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_EngagementDataType_Names::DetailData_Name) {
      CS_DetailDataType::deserialize(valueType.second, accessor.getDetailData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_EngagementDataType_Names::Signals_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CS_EngagementDataType::Signals& boundedList = accessor.getSignals();
        const uci::type::CS_EngagementDataType::Signals::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CS_SignalType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CS_EngagementDataType::serialize(const uci::type::CS_EngagementDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CS_EngagementDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CS_EngagementDataType_Names::Extern_Type_Name);
  }
  if (accessor.hasSENO()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSENO(), node, CS_EngagementDataType_Names::SENO_Name);
  }
  SystemID_Type::serialize(accessor.getSystemID(), node, CS_EngagementDataType_Names::SystemID_Name);
  SatelliteIdentifierType::serialize(accessor.getSatellite(), node, CS_EngagementDataType_Names::Satellite_Name);
  ForeignKeyType::serialize(accessor.getTransponder(), node, CS_EngagementDataType_Names::Transponder_Name);
  ForeignKeyType::serialize(accessor.getTactic(), node, CS_EngagementDataType_Names::Tactic_Name);
  if (accessor.hasCommentID()) {
    FileLocationID_Type::serialize(accessor.getCommentID(), node, CS_EngagementDataType_Names::CommentID_Name);
  }
  CS_DetailDataType::serialize(accessor.getDetailData(), node, CS_EngagementDataType_Names::DetailData_Name);
  {
    const uci::type::CS_EngagementDataType::Signals& boundedList = accessor.getSignals();
    for (uci::type::CS_EngagementDataType::Signals::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CS_SignalType::serialize(boundedList.at(i), node, CS_EngagementDataType_Names::Signals_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CS_EngagementDataType& CS_EngagementDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CS_EngagementDataType>().release());
}

uci::type::CS_EngagementDataType& CS_EngagementDataType::create(const uci::type::CS_EngagementDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CS_EngagementDataType> newAccessor{boost::make_unique<asb_uci::type::CS_EngagementDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CS_EngagementDataType::destroy(uci::type::CS_EngagementDataType& accessor) {
  delete dynamic_cast<asb_uci::type::CS_EngagementDataType*>(&accessor);
}

} // namespace type

} // namespace uci

