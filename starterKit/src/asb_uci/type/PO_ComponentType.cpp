/** @file PO_ComponentType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentID_Type.h"
#include "../../../include/asb_uci/type/PO_ComponentApertureType.h"
#include "../../../include/asb_uci/type/PO_ComponentFilterType.h"
#include "../../../include/asb_uci/type/PO_ComponentFocalPlaneArrayType.h"
#include "../../../include/asb_uci/type/PO_ComponentLensAssemblyType.h"
#include "../../../include/asb_uci/type/PO_ComponentProcessingStageType.h"
#include "../../../include/asb_uci/type/PO_ComponentProductGeneratorType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentApertureType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentFilterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentFocalPlaneArrayType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentLensAssemblyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentProcessingStageType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentProductGeneratorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentType::PO_ComponentType()
  : componentID_Accessor{boost::make_unique<ComponentID_Type>()},
    focalPlaneArray_Accessor{boost::make_unique<FocalPlaneArray>(0, SIZE_MAX)},
    lens_Accessor{boost::make_unique<Lens>(0, SIZE_MAX)},
    aperture_Accessor{boost::make_unique<Aperture>(0, SIZE_MAX)},
    filter_Accessor{boost::make_unique<Filter>(0, SIZE_MAX)},
    processingStage_Accessor{boost::make_unique<ProcessingStage>(0, SIZE_MAX)},
    productGenerator_Accessor{boost::make_unique<ProductGenerator>(0, SIZE_MAX)} {
}

PO_ComponentType::~PO_ComponentType() = default;

void PO_ComponentType::copy(const uci::type::PO_ComponentType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentType::copyImpl(const uci::type::PO_ComponentType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentType&>(accessor);
    setComponentID(*(accessorImpl.componentID_Accessor));
    setFocalPlaneArray(*(accessorImpl.focalPlaneArray_Accessor));
    setLens(*(accessorImpl.lens_Accessor));
    setAperture(*(accessorImpl.aperture_Accessor));
    setFilter(*(accessorImpl.filter_Accessor));
    setProcessingStage(*(accessorImpl.processingStage_Accessor));
    setProductGenerator(*(accessorImpl.productGenerator_Accessor));
  }
}

void PO_ComponentType::reset() noexcept {
  componentID_Accessor->reset();
  focalPlaneArray_Accessor->reset();
  lens_Accessor->reset();
  aperture_Accessor->reset();
  filter_Accessor->reset();
  processingStage_Accessor->reset();
  productGenerator_Accessor->reset();
}

const uci::type::ComponentID_Type& PO_ComponentType::getComponentID() const {
  return *componentID_Accessor;
}

uci::type::ComponentID_Type& PO_ComponentType::getComponentID() {
  return *componentID_Accessor;
}

uci::type::PO_ComponentType& PO_ComponentType::setComponentID(const uci::type::ComponentID_Type& accessor) {
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentType::FocalPlaneArray& PO_ComponentType::getFocalPlaneArray() const {
  return *focalPlaneArray_Accessor;
}

uci::type::PO_ComponentType::FocalPlaneArray& PO_ComponentType::getFocalPlaneArray() {
  return *focalPlaneArray_Accessor;
}

uci::type::PO_ComponentType& PO_ComponentType::setFocalPlaneArray(const uci::type::PO_ComponentType::FocalPlaneArray& accessor) {
  if (&accessor != focalPlaneArray_Accessor.get()) {
    focalPlaneArray_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentType::Lens& PO_ComponentType::getLens() const {
  return *lens_Accessor;
}

uci::type::PO_ComponentType::Lens& PO_ComponentType::getLens() {
  return *lens_Accessor;
}

uci::type::PO_ComponentType& PO_ComponentType::setLens(const uci::type::PO_ComponentType::Lens& accessor) {
  if (&accessor != lens_Accessor.get()) {
    lens_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentType::Aperture& PO_ComponentType::getAperture() const {
  return *aperture_Accessor;
}

uci::type::PO_ComponentType::Aperture& PO_ComponentType::getAperture() {
  return *aperture_Accessor;
}

uci::type::PO_ComponentType& PO_ComponentType::setAperture(const uci::type::PO_ComponentType::Aperture& accessor) {
  if (&accessor != aperture_Accessor.get()) {
    aperture_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentType::Filter& PO_ComponentType::getFilter() const {
  return *filter_Accessor;
}

uci::type::PO_ComponentType::Filter& PO_ComponentType::getFilter() {
  return *filter_Accessor;
}

uci::type::PO_ComponentType& PO_ComponentType::setFilter(const uci::type::PO_ComponentType::Filter& accessor) {
  if (&accessor != filter_Accessor.get()) {
    filter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentType::ProcessingStage& PO_ComponentType::getProcessingStage() const {
  return *processingStage_Accessor;
}

uci::type::PO_ComponentType::ProcessingStage& PO_ComponentType::getProcessingStage() {
  return *processingStage_Accessor;
}

uci::type::PO_ComponentType& PO_ComponentType::setProcessingStage(const uci::type::PO_ComponentType::ProcessingStage& accessor) {
  if (&accessor != processingStage_Accessor.get()) {
    processingStage_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentType::ProductGenerator& PO_ComponentType::getProductGenerator() const {
  return *productGenerator_Accessor;
}

uci::type::PO_ComponentType::ProductGenerator& PO_ComponentType::getProductGenerator() {
  return *productGenerator_Accessor;
}

uci::type::PO_ComponentType& PO_ComponentType::setProductGenerator(const uci::type::PO_ComponentType::ProductGenerator& accessor) {
  if (&accessor != productGenerator_Accessor.get()) {
    productGenerator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PO_ComponentType> PO_ComponentType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentType) ? boost::make_unique<PO_ComponentType>() : nullptr;
}

/**  */
namespace PO_ComponentType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentType"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* FocalPlaneArray_Name{"FocalPlaneArray"};
constexpr const char* Lens_Name{"Lens"};
constexpr const char* Aperture_Name{"Aperture"};
constexpr const char* Filter_Name{"Filter"};
constexpr const char* ProcessingStage_Name{"ProcessingStage"};
constexpr const char* ProductGenerator_Name{"ProductGenerator"};

} // namespace PO_ComponentType_Names

void PO_ComponentType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentType_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.getComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentType_Names::FocalPlaneArray_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentType::FocalPlaneArray& boundedList = accessor.getFocalPlaneArray();
        const uci::type::PO_ComponentType::FocalPlaneArray::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ComponentFocalPlaneArrayType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentType_Names::Lens_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentType::Lens& boundedList = accessor.getLens();
        const uci::type::PO_ComponentType::Lens::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ComponentLensAssemblyType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentType_Names::Aperture_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentType::Aperture& boundedList = accessor.getAperture();
        const uci::type::PO_ComponentType::Aperture::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ComponentApertureType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentType_Names::Filter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentType::Filter& boundedList = accessor.getFilter();
        const uci::type::PO_ComponentType::Filter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ComponentFilterType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentType_Names::ProcessingStage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentType::ProcessingStage& boundedList = accessor.getProcessingStage();
        const uci::type::PO_ComponentType::ProcessingStage::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ComponentProcessingStageType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentType_Names::ProductGenerator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentType::ProductGenerator& boundedList = accessor.getProductGenerator();
        const uci::type::PO_ComponentType::ProductGenerator::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ComponentProductGeneratorType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PO_ComponentType::serialize(const uci::type::PO_ComponentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentType_Names::Extern_Type_Name);
  }
  ComponentID_Type::serialize(accessor.getComponentID(), node, PO_ComponentType_Names::ComponentID_Name);
  {
    const uci::type::PO_ComponentType::FocalPlaneArray& boundedList = accessor.getFocalPlaneArray();
    for (uci::type::PO_ComponentType::FocalPlaneArray::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ComponentFocalPlaneArrayType::serialize(boundedList.at(i), node, PO_ComponentType_Names::FocalPlaneArray_Name);
    }
  }
  {
    const uci::type::PO_ComponentType::Lens& boundedList = accessor.getLens();
    for (uci::type::PO_ComponentType::Lens::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ComponentLensAssemblyType::serialize(boundedList.at(i), node, PO_ComponentType_Names::Lens_Name);
    }
  }
  {
    const uci::type::PO_ComponentType::Aperture& boundedList = accessor.getAperture();
    for (uci::type::PO_ComponentType::Aperture::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ComponentApertureType::serialize(boundedList.at(i), node, PO_ComponentType_Names::Aperture_Name);
    }
  }
  {
    const uci::type::PO_ComponentType::Filter& boundedList = accessor.getFilter();
    for (uci::type::PO_ComponentType::Filter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ComponentFilterType::serialize(boundedList.at(i), node, PO_ComponentType_Names::Filter_Name);
    }
  }
  {
    const uci::type::PO_ComponentType::ProcessingStage& boundedList = accessor.getProcessingStage();
    for (uci::type::PO_ComponentType::ProcessingStage::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ComponentProcessingStageType::serialize(boundedList.at(i), node, PO_ComponentType_Names::ProcessingStage_Name);
    }
  }
  {
    const uci::type::PO_ComponentType::ProductGenerator& boundedList = accessor.getProductGenerator();
    for (uci::type::PO_ComponentType::ProductGenerator::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ComponentProductGeneratorType::serialize(boundedList.at(i), node, PO_ComponentType_Names::ProductGenerator_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentType& PO_ComponentType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentType>().release());
}

uci::type::PO_ComponentType& PO_ComponentType::create(const uci::type::PO_ComponentType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentType::destroy(uci::type::PO_ComponentType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentType*>(&accessor);
}

} // namespace type

} // namespace uci

