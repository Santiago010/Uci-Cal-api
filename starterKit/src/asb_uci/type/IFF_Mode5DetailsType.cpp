/** @file IFF_Mode5DetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/IFF_Mode5DetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/InterrogationStatusEnum.h"
#include "asb_uci/type/Level2Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/IFF_Mode5DetailsType.h"
#include "uci/type/InterrogationStatusEnum.h"
#include "uci/type/Level2Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IFF_Mode5DetailsType::IFF_Mode5DetailsType()
  : level2_Accessor{boost::make_unique<Level2Type>()} {
}

IFF_Mode5DetailsType::~IFF_Mode5DetailsType() = default;

void IFF_Mode5DetailsType::copy(const uci::type::IFF_Mode5DetailsType& accessor) {
  copyImpl(accessor, false);
}

void IFF_Mode5DetailsType::copyImpl(const uci::type::IFF_Mode5DetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IFF_Mode5DetailsType&>(accessor);
    setNationalOrigin(accessorImpl.nationalOrigin_Accessor);
    setPIN(accessorImpl.pIN_Accessor);
    if (accessorImpl.mode5Indicator_Accessor) {
      setMode5Indicator(*(accessorImpl.mode5Indicator_Accessor));
    } else {
      mode5Indicator_Accessor.reset();
    }
    setLevel2(*(accessorImpl.level2_Accessor));
    setLevel2_B_Squitter(accessorImpl.level2_B_Squitter_Accessor);
    setInitiateEmergencyFeature(accessorImpl.initiateEmergencyFeature_Accessor);
  }
}

void IFF_Mode5DetailsType::reset() noexcept {
  nationalOrigin_Accessor = 0;
  pIN_Accessor = 0;
  mode5Indicator_Accessor.reset();
  level2_Accessor->reset();
  level2_B_Squitter_Accessor = false;
  initiateEmergencyFeature_Accessor = false;
}

xs::Int IFF_Mode5DetailsType::getNationalOrigin() const {
  return nationalOrigin_Accessor;
}

uci::type::IFF_Mode5DetailsType& IFF_Mode5DetailsType::setNationalOrigin(xs::Int value) {
  nationalOrigin_Accessor = value;
  return *this;
}


xs::Int IFF_Mode5DetailsType::getPIN() const {
  return pIN_Accessor;
}

uci::type::IFF_Mode5DetailsType& IFF_Mode5DetailsType::setPIN(xs::Int value) {
  pIN_Accessor = value;
  return *this;
}


uci::type::InterrogationStatusEnum& IFF_Mode5DetailsType::getMode5Indicator_() const {
  if (mode5Indicator_Accessor) {
    return *mode5Indicator_Accessor;
  }
  throw uci::base::UCIException("Error in getMode5Indicator(): An attempt was made to get an optional field that was not enabled, call hasMode5Indicator() to determine if it is safe to call getMode5Indicator()");
}

const uci::type::InterrogationStatusEnum& IFF_Mode5DetailsType::getMode5Indicator() const {
  return getMode5Indicator_();
}

uci::type::InterrogationStatusEnum& IFF_Mode5DetailsType::getMode5Indicator() {
  return getMode5Indicator_();
}

uci::type::IFF_Mode5DetailsType& IFF_Mode5DetailsType::setMode5Indicator(const uci::type::InterrogationStatusEnum& accessor) {
  enableMode5Indicator();
  if (&accessor != mode5Indicator_Accessor.get()) {
    mode5Indicator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IFF_Mode5DetailsType& IFF_Mode5DetailsType::setMode5Indicator(const uci::type::InterrogationStatusEnum::EnumerationItem value) {
  enableMode5Indicator().setValue(value);
  return *this;
}

bool IFF_Mode5DetailsType::hasMode5Indicator() const noexcept {
  return static_cast<bool>(mode5Indicator_Accessor);
}

uci::type::InterrogationStatusEnum& IFF_Mode5DetailsType::enableMode5Indicator(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::interrogationStatusEnum : type};
  if ((!mode5Indicator_Accessor) || (mode5Indicator_Accessor->getAccessorType() != requestedType)) {
    mode5Indicator_Accessor = InterrogationStatusEnum::create(requestedType);
    if (!mode5Indicator_Accessor) {
      throw uci::base::UCIException("Error in enableMode5Indicator(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mode5Indicator_Accessor;
}

uci::type::IFF_Mode5DetailsType& IFF_Mode5DetailsType::clearMode5Indicator() noexcept {
  mode5Indicator_Accessor.reset();
  return *this;
}

const uci::type::Level2Type& IFF_Mode5DetailsType::getLevel2() const {
  return *level2_Accessor;
}

uci::type::Level2Type& IFF_Mode5DetailsType::getLevel2() {
  return *level2_Accessor;
}

uci::type::IFF_Mode5DetailsType& IFF_Mode5DetailsType::setLevel2(const uci::type::Level2Type& accessor) {
  if (&accessor != level2_Accessor.get()) {
    level2_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean IFF_Mode5DetailsType::getLevel2_B_Squitter() const {
  return level2_B_Squitter_Accessor;
}

uci::type::IFF_Mode5DetailsType& IFF_Mode5DetailsType::setLevel2_B_Squitter(xs::Boolean value) {
  level2_B_Squitter_Accessor = value;
  return *this;
}


xs::Boolean IFF_Mode5DetailsType::getInitiateEmergencyFeature() const {
  return initiateEmergencyFeature_Accessor;
}

uci::type::IFF_Mode5DetailsType& IFF_Mode5DetailsType::setInitiateEmergencyFeature(xs::Boolean value) {
  initiateEmergencyFeature_Accessor = value;
  return *this;
}


std::unique_ptr<IFF_Mode5DetailsType> IFF_Mode5DetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_Mode5DetailsType : type};
  return (requestedType == uci::type::accessorType::iFF_Mode5DetailsType) ? boost::make_unique<IFF_Mode5DetailsType>() : nullptr;
}

/**  */
namespace IFF_Mode5DetailsType_Names {

constexpr const char* Extern_Type_Name{"IFF_Mode5DetailsType"};
constexpr const char* NationalOrigin_Name{"NationalOrigin"};
constexpr const char* PIN_Name{"PIN"};
constexpr const char* Mode5Indicator_Name{"Mode5Indicator"};
constexpr const char* Level2_Name{"Level2"};
constexpr const char* Level2_B_Squitter_Name{"Level2_B_Squitter"};
constexpr const char* InitiateEmergencyFeature_Name{"InitiateEmergencyFeature"};

} // namespace IFF_Mode5DetailsType_Names

void IFF_Mode5DetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IFF_Mode5DetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IFF_Mode5DetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IFF_Mode5DetailsType_Names::NationalOrigin_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNationalOrigin(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + IFF_Mode5DetailsType_Names::PIN_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPIN(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + IFF_Mode5DetailsType_Names::Mode5Indicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMode5Indicator().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_Mode5DetailsType_Names::Level2_Name) {
      Level2Type::deserialize(valueType.second, accessor.getLevel2(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IFF_Mode5DetailsType_Names::Level2_B_Squitter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLevel2_B_Squitter(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + IFF_Mode5DetailsType_Names::InitiateEmergencyFeature_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInitiateEmergencyFeature(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string IFF_Mode5DetailsType::serialize(const uci::type::IFF_Mode5DetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IFF_Mode5DetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IFF_Mode5DetailsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeInt(accessor.getNationalOrigin(), node, IFF_Mode5DetailsType_Names::NationalOrigin_Name);
  asb_uci::util::SerializationHelpers::serializeInt(accessor.getPIN(), node, IFF_Mode5DetailsType_Names::PIN_Name);
  if (accessor.hasMode5Indicator()) {
    InterrogationStatusEnum::serialize(accessor.getMode5Indicator(), node, IFF_Mode5DetailsType_Names::Mode5Indicator_Name, false);
  }
  Level2Type::serialize(accessor.getLevel2(), node, IFF_Mode5DetailsType_Names::Level2_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getLevel2_B_Squitter(), node, IFF_Mode5DetailsType_Names::Level2_B_Squitter_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInitiateEmergencyFeature(), node, IFF_Mode5DetailsType_Names::InitiateEmergencyFeature_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IFF_Mode5DetailsType& IFF_Mode5DetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IFF_Mode5DetailsType>().release());
}

uci::type::IFF_Mode5DetailsType& IFF_Mode5DetailsType::create(const uci::type::IFF_Mode5DetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IFF_Mode5DetailsType> newAccessor{boost::make_unique<asb_uci::type::IFF_Mode5DetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IFF_Mode5DetailsType::destroy(uci::type::IFF_Mode5DetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::IFF_Mode5DetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

