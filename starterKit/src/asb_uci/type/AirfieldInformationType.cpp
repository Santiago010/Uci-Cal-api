/** @file AirfieldInformationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AirfieldInformationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AirRaidStateEnum.h"
#include "asb_uci/type/AirfieldContaminationType.h"
#include "asb_uci/type/AirfieldID_ICAO_StringType.h"
#include "asb_uci/type/AirfieldRunwayType.h"
#include "asb_uci/type/CrashServiceEnum.h"
#include "asb_uci/type/EmptyType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AirRaidStateEnum.h"
#include "uci/type/AirfieldContaminationType.h"
#include "uci/type/AirfieldID_ICAO_StringType.h"
#include "uci/type/AirfieldInformationType.h"
#include "uci/type/AirfieldRunwayType.h"
#include "uci/type/CrashServiceEnum.h"
#include "uci/type/EmptyType.h"
#include "uci/type/PressureType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AirfieldInformationType::AirfieldInformationType()
  : runway_Accessor{boost::make_unique<Runway>(0, SIZE_MAX)} {
}

AirfieldInformationType::~AirfieldInformationType() = default;

void AirfieldInformationType::copy(const uci::type::AirfieldInformationType& accessor) {
  copyImpl(accessor, false);
}

void AirfieldInformationType::copyImpl(const uci::type::AirfieldInformationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AirfieldInformationType&>(accessor);
    if (accessorImpl.iCAO_Code_Accessor) {
      setICAO_Code(*(accessorImpl.iCAO_Code_Accessor));
    } else {
      iCAO_Code_Accessor.reset();
    }
    if (accessorImpl.operational_Accessor) {
      setOperational(*(accessorImpl.operational_Accessor));
    } else {
      operational_Accessor.reset();
    }
    if (accessorImpl.airRaidState_Accessor) {
      setAirRaidState(*(accessorImpl.airRaidState_Accessor));
    } else {
      airRaidState_Accessor.reset();
    }
    if (accessorImpl.contamination_Accessor) {
      setContamination(*(accessorImpl.contamination_Accessor));
    } else {
      contamination_Accessor.reset();
    }
    if (accessorImpl.crashService_Accessor) {
      setCrashService(*(accessorImpl.crashService_Accessor));
    } else {
      crashService_Accessor.reset();
    }
    if (accessorImpl.sHORADEZ_Active_Accessor) {
      setSHORADEZ_Active(*(accessorImpl.sHORADEZ_Active_Accessor));
    } else {
      sHORADEZ_Active_Accessor.reset();
    }
    setRunway(*(accessorImpl.runway_Accessor));
    if (accessorImpl.hasQNH_Setting()) {
      setQNH_Setting(accessorImpl.getQNH_Setting());
    } else {
      clearQNH_Setting();
    }
  }
}

void AirfieldInformationType::reset() noexcept {
  iCAO_Code_Accessor.reset();
  operational_Accessor.reset();
  airRaidState_Accessor.reset();
  contamination_Accessor.reset();
  crashService_Accessor.reset();
  sHORADEZ_Active_Accessor.reset();
  runway_Accessor->reset();
  clearQNH_Setting();
}

uci::type::AirfieldID_ICAO_StringType& AirfieldInformationType::getICAO_Code_() const {
  if (iCAO_Code_Accessor) {
    return *iCAO_Code_Accessor;
  }
  throw uci::base::UCIException("Error in getICAO_Code(): An attempt was made to get an optional field that was not enabled, call hasICAO_Code() to determine if it is safe to call getICAO_Code()");
}

const uci::type::AirfieldID_ICAO_StringType& AirfieldInformationType::getICAO_Code() const {
  return getICAO_Code_();
}

uci::type::AirfieldID_ICAO_StringType& AirfieldInformationType::getICAO_Code() {
  return getICAO_Code_();
}

uci::type::AirfieldInformationType& AirfieldInformationType::setICAO_Code(const uci::type::AirfieldID_ICAO_StringType& value) {
  return setICAO_Code(value.c_str());
}

uci::type::AirfieldInformationType& AirfieldInformationType::setICAO_Code(const std::string& value) {
  return setICAO_Code(value.c_str());
}

uci::type::AirfieldInformationType& AirfieldInformationType::setICAO_Code(const char* value) {
  enableICAO_Code().setStringValue(value);
  return *this;
}

bool AirfieldInformationType::hasICAO_Code() const noexcept {
  return static_cast<bool>(iCAO_Code_Accessor);
}

uci::type::AirfieldID_ICAO_StringType& AirfieldInformationType::enableICAO_Code(uci::base::accessorType::AccessorType type) {
  if (!iCAO_Code_Accessor) {
    iCAO_Code_Accessor = AirfieldID_ICAO_StringType::create(type);
  }
  return *iCAO_Code_Accessor;
}

uci::type::AirfieldInformationType& AirfieldInformationType::clearICAO_Code() noexcept {
  iCAO_Code_Accessor.reset();
  return *this;
}

uci::type::EmptyType& AirfieldInformationType::getOperational_() const {
  if (operational_Accessor) {
    return *operational_Accessor;
  }
  throw uci::base::UCIException("Error in getOperational(): An attempt was made to get an optional field that was not enabled, call hasOperational() to determine if it is safe to call getOperational()");
}

const uci::type::EmptyType& AirfieldInformationType::getOperational() const {
  return getOperational_();
}

uci::type::EmptyType& AirfieldInformationType::getOperational() {
  return getOperational_();
}

uci::type::AirfieldInformationType& AirfieldInformationType::setOperational(const uci::type::EmptyType& value) {
  return setOperational(value.c_str());
}

uci::type::AirfieldInformationType& AirfieldInformationType::setOperational(const std::string& value) {
  return setOperational(value.c_str());
}

uci::type::AirfieldInformationType& AirfieldInformationType::setOperational(const char* value) {
  enableOperational().setStringValue(value);
  return *this;
}

bool AirfieldInformationType::hasOperational() const noexcept {
  return static_cast<bool>(operational_Accessor);
}

uci::type::EmptyType& AirfieldInformationType::enableOperational(uci::base::accessorType::AccessorType type) {
  if (!operational_Accessor) {
    operational_Accessor = EmptyType::create(type);
  }
  return *operational_Accessor;
}

uci::type::AirfieldInformationType& AirfieldInformationType::clearOperational() noexcept {
  operational_Accessor.reset();
  return *this;
}

uci::type::AirRaidStateEnum& AirfieldInformationType::getAirRaidState_() const {
  if (airRaidState_Accessor) {
    return *airRaidState_Accessor;
  }
  throw uci::base::UCIException("Error in getAirRaidState(): An attempt was made to get an optional field that was not enabled, call hasAirRaidState() to determine if it is safe to call getAirRaidState()");
}

const uci::type::AirRaidStateEnum& AirfieldInformationType::getAirRaidState() const {
  return getAirRaidState_();
}

uci::type::AirRaidStateEnum& AirfieldInformationType::getAirRaidState() {
  return getAirRaidState_();
}

uci::type::AirfieldInformationType& AirfieldInformationType::setAirRaidState(const uci::type::AirRaidStateEnum& accessor) {
  enableAirRaidState();
  if (&accessor != airRaidState_Accessor.get()) {
    airRaidState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AirfieldInformationType& AirfieldInformationType::setAirRaidState(const uci::type::AirRaidStateEnum::EnumerationItem value) {
  enableAirRaidState().setValue(value);
  return *this;
}

bool AirfieldInformationType::hasAirRaidState() const noexcept {
  return static_cast<bool>(airRaidState_Accessor);
}

uci::type::AirRaidStateEnum& AirfieldInformationType::enableAirRaidState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airRaidStateEnum : type};
  if ((!airRaidState_Accessor) || (airRaidState_Accessor->getAccessorType() != requestedType)) {
    airRaidState_Accessor = AirRaidStateEnum::create(requestedType);
    if (!airRaidState_Accessor) {
      throw uci::base::UCIException("Error in enableAirRaidState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *airRaidState_Accessor;
}

uci::type::AirfieldInformationType& AirfieldInformationType::clearAirRaidState() noexcept {
  airRaidState_Accessor.reset();
  return *this;
}

uci::type::AirfieldContaminationType& AirfieldInformationType::getContamination_() const {
  if (contamination_Accessor) {
    return *contamination_Accessor;
  }
  throw uci::base::UCIException("Error in getContamination(): An attempt was made to get an optional field that was not enabled, call hasContamination() to determine if it is safe to call getContamination()");
}

const uci::type::AirfieldContaminationType& AirfieldInformationType::getContamination() const {
  return getContamination_();
}

uci::type::AirfieldContaminationType& AirfieldInformationType::getContamination() {
  return getContamination_();
}

uci::type::AirfieldInformationType& AirfieldInformationType::setContamination(const uci::type::AirfieldContaminationType& accessor) {
  enableContamination();
  if (&accessor != contamination_Accessor.get()) {
    contamination_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AirfieldInformationType::hasContamination() const noexcept {
  return static_cast<bool>(contamination_Accessor);
}

uci::type::AirfieldContaminationType& AirfieldInformationType::enableContamination(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airfieldContaminationType : type};
  if ((!contamination_Accessor) || (contamination_Accessor->getAccessorType() != requestedType)) {
    contamination_Accessor = AirfieldContaminationType::create(requestedType);
    if (!contamination_Accessor) {
      throw uci::base::UCIException("Error in enableContamination(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *contamination_Accessor;
}

uci::type::AirfieldInformationType& AirfieldInformationType::clearContamination() noexcept {
  contamination_Accessor.reset();
  return *this;
}

uci::type::CrashServiceEnum& AirfieldInformationType::getCrashService_() const {
  if (crashService_Accessor) {
    return *crashService_Accessor;
  }
  throw uci::base::UCIException("Error in getCrashService(): An attempt was made to get an optional field that was not enabled, call hasCrashService() to determine if it is safe to call getCrashService()");
}

const uci::type::CrashServiceEnum& AirfieldInformationType::getCrashService() const {
  return getCrashService_();
}

uci::type::CrashServiceEnum& AirfieldInformationType::getCrashService() {
  return getCrashService_();
}

uci::type::AirfieldInformationType& AirfieldInformationType::setCrashService(const uci::type::CrashServiceEnum& accessor) {
  enableCrashService();
  if (&accessor != crashService_Accessor.get()) {
    crashService_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AirfieldInformationType& AirfieldInformationType::setCrashService(const uci::type::CrashServiceEnum::EnumerationItem value) {
  enableCrashService().setValue(value);
  return *this;
}

bool AirfieldInformationType::hasCrashService() const noexcept {
  return static_cast<bool>(crashService_Accessor);
}

uci::type::CrashServiceEnum& AirfieldInformationType::enableCrashService(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::crashServiceEnum : type};
  if ((!crashService_Accessor) || (crashService_Accessor->getAccessorType() != requestedType)) {
    crashService_Accessor = CrashServiceEnum::create(requestedType);
    if (!crashService_Accessor) {
      throw uci::base::UCIException("Error in enableCrashService(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *crashService_Accessor;
}

uci::type::AirfieldInformationType& AirfieldInformationType::clearCrashService() noexcept {
  crashService_Accessor.reset();
  return *this;
}

uci::type::EmptyType& AirfieldInformationType::getSHORADEZ_Active_() const {
  if (sHORADEZ_Active_Accessor) {
    return *sHORADEZ_Active_Accessor;
  }
  throw uci::base::UCIException("Error in getSHORADEZ_Active(): An attempt was made to get an optional field that was not enabled, call hasSHORADEZ_Active() to determine if it is safe to call getSHORADEZ_Active()");
}

const uci::type::EmptyType& AirfieldInformationType::getSHORADEZ_Active() const {
  return getSHORADEZ_Active_();
}

uci::type::EmptyType& AirfieldInformationType::getSHORADEZ_Active() {
  return getSHORADEZ_Active_();
}

uci::type::AirfieldInformationType& AirfieldInformationType::setSHORADEZ_Active(const uci::type::EmptyType& value) {
  return setSHORADEZ_Active(value.c_str());
}

uci::type::AirfieldInformationType& AirfieldInformationType::setSHORADEZ_Active(const std::string& value) {
  return setSHORADEZ_Active(value.c_str());
}

uci::type::AirfieldInformationType& AirfieldInformationType::setSHORADEZ_Active(const char* value) {
  enableSHORADEZ_Active().setStringValue(value);
  return *this;
}

bool AirfieldInformationType::hasSHORADEZ_Active() const noexcept {
  return static_cast<bool>(sHORADEZ_Active_Accessor);
}

uci::type::EmptyType& AirfieldInformationType::enableSHORADEZ_Active(uci::base::accessorType::AccessorType type) {
  if (!sHORADEZ_Active_Accessor) {
    sHORADEZ_Active_Accessor = EmptyType::create(type);
  }
  return *sHORADEZ_Active_Accessor;
}

uci::type::AirfieldInformationType& AirfieldInformationType::clearSHORADEZ_Active() noexcept {
  sHORADEZ_Active_Accessor.reset();
  return *this;
}

const uci::type::AirfieldInformationType::Runway& AirfieldInformationType::getRunway() const {
  return *runway_Accessor;
}

uci::type::AirfieldInformationType::Runway& AirfieldInformationType::getRunway() {
  return *runway_Accessor;
}

uci::type::AirfieldInformationType& AirfieldInformationType::setRunway(const uci::type::AirfieldInformationType::Runway& accessor) {
  if (&accessor != runway_Accessor.get()) {
    runway_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PressureTypeValue AirfieldInformationType::getQNH_Setting() const {
  if (qNH_Setting_Accessor) {
    return *qNH_Setting_Accessor;
  }
  throw uci::base::UCIException("Error in getQNH_Setting(): An attempt was made to get an optional field that was not enabled, call hasQNH_Setting() to determine if it is safe to call getQNH_Setting()");
}

uci::type::AirfieldInformationType& AirfieldInformationType::setQNH_Setting(uci::type::PressureTypeValue value) {
  qNH_Setting_Accessor = value;
  return *this;
}

bool AirfieldInformationType::hasQNH_Setting() const noexcept {
  return qNH_Setting_Accessor.has_value();
}

uci::type::AirfieldInformationType& AirfieldInformationType::clearQNH_Setting() noexcept {
  qNH_Setting_Accessor.reset();
  return *this;
}

std::unique_ptr<AirfieldInformationType> AirfieldInformationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::airfieldInformationType : type};
  return (requestedType == uci::type::accessorType::airfieldInformationType) ? boost::make_unique<AirfieldInformationType>() : nullptr;
}

/**  */
namespace AirfieldInformationType_Names {

constexpr const char* Extern_Type_Name{"AirfieldInformationType"};
constexpr const char* ICAO_Code_Name{"ICAO_Code"};
constexpr const char* Operational_Name{"Operational"};
constexpr const char* AirRaidState_Name{"AirRaidState"};
constexpr const char* Contamination_Name{"Contamination"};
constexpr const char* CrashService_Name{"CrashService"};
constexpr const char* SHORADEZ_Active_Name{"SHORADEZ_Active"};
constexpr const char* Runway_Name{"Runway"};
constexpr const char* QNH_Setting_Name{"QNH_Setting"};

} // namespace AirfieldInformationType_Names

void AirfieldInformationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AirfieldInformationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AirfieldInformationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AirfieldInformationType_Names::ICAO_Code_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setICAO_Code(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldInformationType_Names::Operational_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOperational(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldInformationType_Names::AirRaidState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAirRaidState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldInformationType_Names::Contamination_Name) {
      AirfieldContaminationType::deserialize(valueType.second, accessor.enableContamination(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldInformationType_Names::CrashService_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCrashService().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldInformationType_Names::SHORADEZ_Active_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSHORADEZ_Active(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldInformationType_Names::Runway_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AirfieldInformationType::Runway& boundedList = accessor.getRunway();
        const uci::type::AirfieldInformationType::Runway::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AirfieldRunwayType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + AirfieldInformationType_Names::QNH_Setting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setQNH_Setting(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string AirfieldInformationType::serialize(const uci::type::AirfieldInformationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AirfieldInformationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AirfieldInformationType_Names::Extern_Type_Name);
  }
  if (accessor.hasICAO_Code()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getICAO_Code(), node, AirfieldInformationType_Names::ICAO_Code_Name);
  }
  if (accessor.hasOperational()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getOperational(), node, AirfieldInformationType_Names::Operational_Name);
  }
  if (accessor.hasAirRaidState()) {
    AirRaidStateEnum::serialize(accessor.getAirRaidState(), node, AirfieldInformationType_Names::AirRaidState_Name, false);
  }
  if (accessor.hasContamination()) {
    AirfieldContaminationType::serialize(accessor.getContamination(), node, AirfieldInformationType_Names::Contamination_Name);
  }
  if (accessor.hasCrashService()) {
    CrashServiceEnum::serialize(accessor.getCrashService(), node, AirfieldInformationType_Names::CrashService_Name, false);
  }
  if (accessor.hasSHORADEZ_Active()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSHORADEZ_Active(), node, AirfieldInformationType_Names::SHORADEZ_Active_Name);
  }
  {
    const uci::type::AirfieldInformationType::Runway& boundedList = accessor.getRunway();
    for (uci::type::AirfieldInformationType::Runway::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AirfieldRunwayType::serialize(boundedList.at(i), node, AirfieldInformationType_Names::Runway_Name);
    }
  }
  if (accessor.hasQNH_Setting()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getQNH_Setting(), node, AirfieldInformationType_Names::QNH_Setting_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AirfieldInformationType& AirfieldInformationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AirfieldInformationType>().release());
}

uci::type::AirfieldInformationType& AirfieldInformationType::create(const uci::type::AirfieldInformationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AirfieldInformationType> newAccessor{boost::make_unique<asb_uci::type::AirfieldInformationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AirfieldInformationType::destroy(uci::type::AirfieldInformationType& accessor) {
  delete dynamic_cast<asb_uci::type::AirfieldInformationType*>(&accessor);
}

} // namespace type

} // namespace uci

