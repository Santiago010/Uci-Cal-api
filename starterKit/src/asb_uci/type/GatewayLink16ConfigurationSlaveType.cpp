/** @file GatewayLink16ConfigurationSlaveType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/GatewayLink16ConfigurationSlaveType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/OpPointID_Type.h"
#include "asb_uci/type/OperatorLocationOfInterestID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/GatewayLink16ConfigurationSlaveType.h"
#include "uci/type/OpPointID_Type.h"
#include "uci/type/OperatorLocationOfInterestID_Type.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

GatewayLink16ConfigurationSlaveType::GatewayLink16ConfigurationSlaveType() = default;

GatewayLink16ConfigurationSlaveType::~GatewayLink16ConfigurationSlaveType() = default;

void GatewayLink16ConfigurationSlaveType::copy(const uci::type::GatewayLink16ConfigurationSlaveType& accessor) {
  copyImpl(accessor, false);
}

void GatewayLink16ConfigurationSlaveType::copyImpl(const uci::type::GatewayLink16ConfigurationSlaveType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const GatewayLink16ConfigurationSlaveType&>(accessor);
    if (accessorImpl.entityID_Accessor) {
      setEntityID(*(accessorImpl.entityID_Accessor));
    } else {
      entityID_Accessor.reset();
    }
    if (accessorImpl.operatorLocationOfInterestID_Accessor) {
      setOperatorLocationOfInterestID(*(accessorImpl.operatorLocationOfInterestID_Accessor));
    } else {
      operatorLocationOfInterestID_Accessor.reset();
    }
    if (accessorImpl.opPointID_Accessor) {
      setOpPointID(*(accessorImpl.opPointID_Accessor));
    } else {
      opPointID_Accessor.reset();
    }
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
  }
}

void GatewayLink16ConfigurationSlaveType::reset() noexcept {
  entityID_Accessor.reset();
  operatorLocationOfInterestID_Accessor.reset();
  opPointID_Accessor.reset();
  systemID_Accessor.reset();
}

uci::type::GatewayLink16ConfigurationSlaveType::GatewayLink16ConfigurationSlaveTypeChoice GatewayLink16ConfigurationSlaveType::getGatewayLink16ConfigurationSlaveTypeChoiceOrdinal() const noexcept {
  if (entityID_Accessor) {
    return GATEWAYLINK16CONFIGURATIONSLAVETYPE_CHOICE_ENTITYID;
  }
  if (operatorLocationOfInterestID_Accessor) {
    return GATEWAYLINK16CONFIGURATIONSLAVETYPE_CHOICE_OPERATORLOCATIONOFINTERESTID;
  }
  if (opPointID_Accessor) {
    return GATEWAYLINK16CONFIGURATIONSLAVETYPE_CHOICE_OPPOINTID;
  }
  if (systemID_Accessor) {
    return GATEWAYLINK16CONFIGURATIONSLAVETYPE_CHOICE_SYSTEMID;
  }
  return GATEWAYLINK16CONFIGURATIONSLAVETYPE_CHOICE_NONE;
}

uci::type::GatewayLink16ConfigurationSlaveType& GatewayLink16ConfigurationSlaveType::setGatewayLink16ConfigurationSlaveTypeChoiceOrdinal(uci::type::GatewayLink16ConfigurationSlaveType::GatewayLink16ConfigurationSlaveTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case GATEWAYLINK16CONFIGURATIONSLAVETYPE_CHOICE_ENTITYID:
      chooseEntityID("setGatewayLink16ConfigurationSlaveTypeChoiceOrdinal", type);
      break;
    case GATEWAYLINK16CONFIGURATIONSLAVETYPE_CHOICE_OPERATORLOCATIONOFINTERESTID:
      chooseOperatorLocationOfInterestID("setGatewayLink16ConfigurationSlaveTypeChoiceOrdinal", type);
      break;
    case GATEWAYLINK16CONFIGURATIONSLAVETYPE_CHOICE_OPPOINTID:
      chooseOpPointID("setGatewayLink16ConfigurationSlaveTypeChoiceOrdinal", type);
      break;
    case GATEWAYLINK16CONFIGURATIONSLAVETYPE_CHOICE_SYSTEMID:
      chooseSystemID("setGatewayLink16ConfigurationSlaveTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setGatewayLink16ConfigurationSlaveTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EntityID_Type& GatewayLink16ConfigurationSlaveType::getEntityID_() const {
  if (entityID_Accessor) {
    return *entityID_Accessor;
  }
  throw uci::base::UCIException("Error in getEntityID(): Unable to get EntityID, field not selected");
}

const uci::type::EntityID_Type& GatewayLink16ConfigurationSlaveType::getEntityID() const {
  return getEntityID_();
}

uci::type::EntityID_Type& GatewayLink16ConfigurationSlaveType::getEntityID() {
  return getEntityID_();
}

uci::type::GatewayLink16ConfigurationSlaveType& GatewayLink16ConfigurationSlaveType::setEntityID(const uci::type::EntityID_Type& accessor) {
  chooseEntityID("setEntityID", accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool GatewayLink16ConfigurationSlaveType::isEntityID() const noexcept {
  return static_cast<bool>(entityID_Accessor);
}

uci::type::EntityID_Type& GatewayLink16ConfigurationSlaveType::chooseEntityID(const std::string& method, uci::base::accessorType::AccessorType type) {
  operatorLocationOfInterestID_Accessor.reset();
  opPointID_Accessor.reset();
  systemID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(type);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::EntityID_Type& GatewayLink16ConfigurationSlaveType::chooseEntityID(uci::base::accessorType::AccessorType type) {
  return chooseEntityID("chooseEntityID", type);
}

uci::type::OperatorLocationOfInterestID_Type& GatewayLink16ConfigurationSlaveType::getOperatorLocationOfInterestID_() const {
  if (operatorLocationOfInterestID_Accessor) {
    return *operatorLocationOfInterestID_Accessor;
  }
  throw uci::base::UCIException("Error in getOperatorLocationOfInterestID(): Unable to get OperatorLocationOfInterestID, field not selected");
}

const uci::type::OperatorLocationOfInterestID_Type& GatewayLink16ConfigurationSlaveType::getOperatorLocationOfInterestID() const {
  return getOperatorLocationOfInterestID_();
}

uci::type::OperatorLocationOfInterestID_Type& GatewayLink16ConfigurationSlaveType::getOperatorLocationOfInterestID() {
  return getOperatorLocationOfInterestID_();
}

uci::type::GatewayLink16ConfigurationSlaveType& GatewayLink16ConfigurationSlaveType::setOperatorLocationOfInterestID(const uci::type::OperatorLocationOfInterestID_Type& accessor) {
  chooseOperatorLocationOfInterestID();
  if (&accessor != operatorLocationOfInterestID_Accessor.get()) {
    operatorLocationOfInterestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLink16ConfigurationSlaveType::isOperatorLocationOfInterestID() const noexcept {
  return static_cast<bool>(operatorLocationOfInterestID_Accessor);
}

uci::type::OperatorLocationOfInterestID_Type& GatewayLink16ConfigurationSlaveType::chooseOperatorLocationOfInterestID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  opPointID_Accessor.reset();
  systemID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorLocationOfInterestID_Type : type};
  if ((!operatorLocationOfInterestID_Accessor) || (operatorLocationOfInterestID_Accessor->getAccessorType() != requestedType)) {
    operatorLocationOfInterestID_Accessor = OperatorLocationOfInterestID_Type::create(type);
    if (!operatorLocationOfInterestID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *operatorLocationOfInterestID_Accessor;
}

uci::type::OperatorLocationOfInterestID_Type& GatewayLink16ConfigurationSlaveType::chooseOperatorLocationOfInterestID(uci::base::accessorType::AccessorType type) {
  return chooseOperatorLocationOfInterestID("chooseOperatorLocationOfInterestID", type);
}

uci::type::OpPointID_Type& GatewayLink16ConfigurationSlaveType::getOpPointID_() const {
  if (opPointID_Accessor) {
    return *opPointID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpPointID(): Unable to get OpPointID, field not selected");
}

const uci::type::OpPointID_Type& GatewayLink16ConfigurationSlaveType::getOpPointID() const {
  return getOpPointID_();
}

uci::type::OpPointID_Type& GatewayLink16ConfigurationSlaveType::getOpPointID() {
  return getOpPointID_();
}

uci::type::GatewayLink16ConfigurationSlaveType& GatewayLink16ConfigurationSlaveType::setOpPointID(const uci::type::OpPointID_Type& accessor) {
  chooseOpPointID();
  if (&accessor != opPointID_Accessor.get()) {
    opPointID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLink16ConfigurationSlaveType::isOpPointID() const noexcept {
  return static_cast<bool>(opPointID_Accessor);
}

uci::type::OpPointID_Type& GatewayLink16ConfigurationSlaveType::chooseOpPointID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  operatorLocationOfInterestID_Accessor.reset();
  systemID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointID_Type : type};
  if ((!opPointID_Accessor) || (opPointID_Accessor->getAccessorType() != requestedType)) {
    opPointID_Accessor = OpPointID_Type::create(type);
    if (!opPointID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opPointID_Accessor;
}

uci::type::OpPointID_Type& GatewayLink16ConfigurationSlaveType::chooseOpPointID(uci::base::accessorType::AccessorType type) {
  return chooseOpPointID("chooseOpPointID", type);
}

uci::type::SystemID_Type& GatewayLink16ConfigurationSlaveType::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): Unable to get SystemID, field not selected");
}

const uci::type::SystemID_Type& GatewayLink16ConfigurationSlaveType::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& GatewayLink16ConfigurationSlaveType::getSystemID() {
  return getSystemID_();
}

uci::type::GatewayLink16ConfigurationSlaveType& GatewayLink16ConfigurationSlaveType::setSystemID(const uci::type::SystemID_Type& accessor) {
  chooseSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GatewayLink16ConfigurationSlaveType::isSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& GatewayLink16ConfigurationSlaveType::chooseSystemID(const std::string& method, uci::base::accessorType::AccessorType type) {
  entityID_Accessor.reset();
  operatorLocationOfInterestID_Accessor.reset();
  opPointID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(type);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::SystemID_Type& GatewayLink16ConfigurationSlaveType::chooseSystemID(uci::base::accessorType::AccessorType type) {
  return chooseSystemID("chooseSystemID", type);
}

std::unique_ptr<GatewayLink16ConfigurationSlaveType> GatewayLink16ConfigurationSlaveType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationSlaveType : type};
  return (requestedType == uci::type::accessorType::gatewayLink16ConfigurationSlaveType) ? boost::make_unique<GatewayLink16ConfigurationSlaveType>() : nullptr;
}

/**  */
namespace GatewayLink16ConfigurationSlaveType_Names {

constexpr const char* Extern_Type_Name{"GatewayLink16ConfigurationSlaveType"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* OperatorLocationOfInterestID_Name{"OperatorLocationOfInterestID"};
constexpr const char* OpPointID_Name{"OpPointID"};
constexpr const char* SystemID_Name{"SystemID"};

} // namespace GatewayLink16ConfigurationSlaveType_Names

void GatewayLink16ConfigurationSlaveType::deserialize(const boost::property_tree::ptree& propTree, uci::type::GatewayLink16ConfigurationSlaveType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = GatewayLink16ConfigurationSlaveType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationSlaveType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationSlaveType_Names::OperatorLocationOfInterestID_Name) {
      OperatorLocationOfInterestID_Type::deserialize(valueType.second, accessor.chooseOperatorLocationOfInterestID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationSlaveType_Names::OpPointID_Name) {
      OpPointID_Type::deserialize(valueType.second, accessor.chooseOpPointID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationSlaveType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.chooseSystemID(), nodeName, nsPrefix);
    }
  }
}

std::string GatewayLink16ConfigurationSlaveType::serialize(const uci::type::GatewayLink16ConfigurationSlaveType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? GatewayLink16ConfigurationSlaveType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, GatewayLink16ConfigurationSlaveType_Names::Extern_Type_Name);
  }
  if (accessor.isEntityID()) {
    EntityID_Type::serialize(accessor.getEntityID(), node, GatewayLink16ConfigurationSlaveType_Names::EntityID_Name);
  } else if (accessor.isOperatorLocationOfInterestID()) {
    OperatorLocationOfInterestID_Type::serialize(accessor.getOperatorLocationOfInterestID(), node, GatewayLink16ConfigurationSlaveType_Names::OperatorLocationOfInterestID_Name);
  } else if (accessor.isOpPointID()) {
    OpPointID_Type::serialize(accessor.getOpPointID(), node, GatewayLink16ConfigurationSlaveType_Names::OpPointID_Name);
  } else if (accessor.isSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, GatewayLink16ConfigurationSlaveType_Names::SystemID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::GatewayLink16ConfigurationSlaveType& GatewayLink16ConfigurationSlaveType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::GatewayLink16ConfigurationSlaveType>().release());
}

uci::type::GatewayLink16ConfigurationSlaveType& GatewayLink16ConfigurationSlaveType::create(const uci::type::GatewayLink16ConfigurationSlaveType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::GatewayLink16ConfigurationSlaveType> newAccessor{boost::make_unique<asb_uci::type::GatewayLink16ConfigurationSlaveType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void GatewayLink16ConfigurationSlaveType::destroy(uci::type::GatewayLink16ConfigurationSlaveType& accessor) {
  delete dynamic_cast<asb_uci::type::GatewayLink16ConfigurationSlaveType*>(&accessor);
}

} // namespace type

} // namespace uci

