/** @file FrequencyDataBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/FrequencyDataBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FrequencyModulationVariationEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DoubleNonNegativeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyDataBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyModulationVariationEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FrequencyDataBaseType::FrequencyDataBaseType() = default;

FrequencyDataBaseType::~FrequencyDataBaseType() = default;

void FrequencyDataBaseType::copy(const uci::type::FrequencyDataBaseType& accessor) {
  copyImpl(accessor, false);
}

void FrequencyDataBaseType::copyImpl(const uci::type::FrequencyDataBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::frequencyDataBaseType)) {
      const auto& accessorImpl = dynamic_cast<const FrequencyDataBaseType&>(accessor);
      if (accessorImpl.hasFrequencyAverage()) {
        setFrequencyAverage(accessorImpl.getFrequencyAverage());
      } else {
        clearFrequencyAverage();
      }
      if (accessorImpl.hasFrequencyMin()) {
        setFrequencyMin(accessorImpl.getFrequencyMin());
      } else {
        clearFrequencyMin();
      }
      if (accessorImpl.hasFrequencyMax()) {
        setFrequencyMax(accessorImpl.getFrequencyMax());
      } else {
        clearFrequencyMax();
      }
      if (accessorImpl.hasFrequencyLast()) {
        setFrequencyLast(accessorImpl.getFrequencyLast());
      } else {
        clearFrequencyLast();
      }
      if (accessorImpl.hasFrequencyDeviation()) {
        setFrequencyDeviation(accessorImpl.getFrequencyDeviation());
      } else {
        clearFrequencyDeviation();
      }
      if (accessorImpl.frequencyModulationVariation_Accessor) {
        setFrequencyModulationVariation(*(accessorImpl.frequencyModulationVariation_Accessor));
      } else {
        frequencyModulationVariation_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void FrequencyDataBaseType::reset() noexcept {
  clearFrequencyAverage();
  clearFrequencyMin();
  clearFrequencyMax();
  clearFrequencyLast();
  clearFrequencyDeviation();
  frequencyModulationVariation_Accessor.reset();
}

uci::type::FrequencyTypeValue FrequencyDataBaseType::getFrequencyAverage() const {
  if (frequencyAverage_Accessor) {
    return *frequencyAverage_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequencyAverage(): An attempt was made to get an optional field that was not enabled, call hasFrequencyAverage() to determine if it is safe to call getFrequencyAverage()");
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::setFrequencyAverage(uci::type::FrequencyTypeValue value) {
  frequencyAverage_Accessor = value;
  return *this;
}

bool FrequencyDataBaseType::hasFrequencyAverage() const noexcept {
  return frequencyAverage_Accessor.has_value();
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::clearFrequencyAverage() noexcept {
  frequencyAverage_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue FrequencyDataBaseType::getFrequencyMin() const {
  if (frequencyMin_Accessor) {
    return *frequencyMin_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequencyMin(): An attempt was made to get an optional field that was not enabled, call hasFrequencyMin() to determine if it is safe to call getFrequencyMin()");
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::setFrequencyMin(uci::type::FrequencyTypeValue value) {
  frequencyMin_Accessor = value;
  return *this;
}

bool FrequencyDataBaseType::hasFrequencyMin() const noexcept {
  return frequencyMin_Accessor.has_value();
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::clearFrequencyMin() noexcept {
  frequencyMin_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue FrequencyDataBaseType::getFrequencyMax() const {
  if (frequencyMax_Accessor) {
    return *frequencyMax_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequencyMax(): An attempt was made to get an optional field that was not enabled, call hasFrequencyMax() to determine if it is safe to call getFrequencyMax()");
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::setFrequencyMax(uci::type::FrequencyTypeValue value) {
  frequencyMax_Accessor = value;
  return *this;
}

bool FrequencyDataBaseType::hasFrequencyMax() const noexcept {
  return frequencyMax_Accessor.has_value();
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::clearFrequencyMax() noexcept {
  frequencyMax_Accessor.reset();
  return *this;
}

uci::type::FrequencyTypeValue FrequencyDataBaseType::getFrequencyLast() const {
  if (frequencyLast_Accessor) {
    return *frequencyLast_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequencyLast(): An attempt was made to get an optional field that was not enabled, call hasFrequencyLast() to determine if it is safe to call getFrequencyLast()");
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::setFrequencyLast(uci::type::FrequencyTypeValue value) {
  frequencyLast_Accessor = value;
  return *this;
}

bool FrequencyDataBaseType::hasFrequencyLast() const noexcept {
  return frequencyLast_Accessor.has_value();
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::clearFrequencyLast() noexcept {
  frequencyLast_Accessor.reset();
  return *this;
}

uci::type::DoubleNonNegativeTypeValue FrequencyDataBaseType::getFrequencyDeviation() const {
  if (frequencyDeviation_Accessor) {
    return *frequencyDeviation_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequencyDeviation(): An attempt was made to get an optional field that was not enabled, call hasFrequencyDeviation() to determine if it is safe to call getFrequencyDeviation()");
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::setFrequencyDeviation(uci::type::DoubleNonNegativeTypeValue value) {
  frequencyDeviation_Accessor = value;
  return *this;
}

bool FrequencyDataBaseType::hasFrequencyDeviation() const noexcept {
  return frequencyDeviation_Accessor.has_value();
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::clearFrequencyDeviation() noexcept {
  frequencyDeviation_Accessor.reset();
  return *this;
}

uci::type::FrequencyModulationVariationEnum& FrequencyDataBaseType::getFrequencyModulationVariation_() const {
  if (frequencyModulationVariation_Accessor) {
    return *frequencyModulationVariation_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequencyModulationVariation(): An attempt was made to get an optional field that was not enabled, call hasFrequencyModulationVariation() to determine if it is safe to call getFrequencyModulationVariation()");
}

const uci::type::FrequencyModulationVariationEnum& FrequencyDataBaseType::getFrequencyModulationVariation() const {
  return getFrequencyModulationVariation_();
}

uci::type::FrequencyModulationVariationEnum& FrequencyDataBaseType::getFrequencyModulationVariation() {
  return getFrequencyModulationVariation_();
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::setFrequencyModulationVariation(const uci::type::FrequencyModulationVariationEnum& accessor) {
  enableFrequencyModulationVariation();
  if (&accessor != frequencyModulationVariation_Accessor.get()) {
    frequencyModulationVariation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::setFrequencyModulationVariation(const uci::type::FrequencyModulationVariationEnum::EnumerationItem value) {
  enableFrequencyModulationVariation().setValue(value);
  return *this;
}

bool FrequencyDataBaseType::hasFrequencyModulationVariation() const noexcept {
  return static_cast<bool>(frequencyModulationVariation_Accessor);
}

uci::type::FrequencyModulationVariationEnum& FrequencyDataBaseType::enableFrequencyModulationVariation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyModulationVariationEnum : type};
  if ((!frequencyModulationVariation_Accessor) || (frequencyModulationVariation_Accessor->getAccessorType() != requestedType)) {
    frequencyModulationVariation_Accessor = FrequencyModulationVariationEnum::create(requestedType);
    if (!frequencyModulationVariation_Accessor) {
      throw uci::base::UCIException("Error in enableFrequencyModulationVariation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *frequencyModulationVariation_Accessor;
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::clearFrequencyModulationVariation() noexcept {
  frequencyModulationVariation_Accessor.reset();
  return *this;
}

std::unique_ptr<FrequencyDataBaseType> FrequencyDataBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyDataBaseType : type};
  return std::unique_ptr<FrequencyDataBaseType>(dynamic_cast<FrequencyDataBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace FrequencyDataBaseType_Names {

constexpr const char* Extern_Type_Name{"FrequencyDataBaseType"};
constexpr const char* FrequencyAverage_Name{"FrequencyAverage"};
constexpr const char* FrequencyMin_Name{"FrequencyMin"};
constexpr const char* FrequencyMax_Name{"FrequencyMax"};
constexpr const char* FrequencyLast_Name{"FrequencyLast"};
constexpr const char* FrequencyDeviation_Name{"FrequencyDeviation"};
constexpr const char* FrequencyModulationVariation_Name{"FrequencyModulationVariation"};

} // namespace FrequencyDataBaseType_Names

void FrequencyDataBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FrequencyDataBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FrequencyDataBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FrequencyDataBaseType_Names::FrequencyAverage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyAverage(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + FrequencyDataBaseType_Names::FrequencyMin_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyMin(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + FrequencyDataBaseType_Names::FrequencyMax_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyMax(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + FrequencyDataBaseType_Names::FrequencyLast_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyLast(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + FrequencyDataBaseType_Names::FrequencyDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyDeviation(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + FrequencyDataBaseType_Names::FrequencyModulationVariation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFrequencyModulationVariation().setValueFromName(*value);
      }
    }
  }
}

std::string FrequencyDataBaseType::serialize(const uci::type::FrequencyDataBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FrequencyDataBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::frequencyDataBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, FrequencyDataBaseType_Names::Extern_Type_Name);
    }
    if (accessor.hasFrequencyAverage()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyAverage(), node, FrequencyDataBaseType_Names::FrequencyAverage_Name);
    }
    if (accessor.hasFrequencyMin()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyMin(), node, FrequencyDataBaseType_Names::FrequencyMin_Name);
    }
    if (accessor.hasFrequencyMax()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyMax(), node, FrequencyDataBaseType_Names::FrequencyMax_Name);
    }
    if (accessor.hasFrequencyLast()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyLast(), node, FrequencyDataBaseType_Names::FrequencyLast_Name);
    }
    if (accessor.hasFrequencyDeviation()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyDeviation(), node, FrequencyDataBaseType_Names::FrequencyDeviation_Name);
    }
    if (accessor.hasFrequencyModulationVariation()) {
      FrequencyModulationVariationEnum::serialize(accessor.getFrequencyModulationVariation(), node, FrequencyDataBaseType_Names::FrequencyModulationVariation_Name, false);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FrequencyDataBaseType>().release());
}

uci::type::FrequencyDataBaseType& FrequencyDataBaseType::create(const uci::type::FrequencyDataBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FrequencyDataBaseType> newAccessor{boost::make_unique<asb_uci::type::FrequencyDataBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FrequencyDataBaseType::destroy(uci::type::FrequencyDataBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::FrequencyDataBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

