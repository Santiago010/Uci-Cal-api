/** @file SubsystemFaultType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SubsystemFaultType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/ComponentID_Type.h"
#include "asb_uci/type/FaultDataType.h"
#include "asb_uci/type/FaultID_Type.h"
#include "asb_uci/type/FaultSeverityEnum.h"
#include "asb_uci/type/FaultStateEnum.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/SubsystemFaultAmbiguityGroupType.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/type/SupportCapabilityID_Type.h"
#include "asb_uci/type/VisibleString256Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/FaultDataType.h"
#include "uci/type/FaultID_Type.h"
#include "uci/type/FaultSeverityEnum.h"
#include "uci/type/FaultStateEnum.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SubsystemFaultAmbiguityGroupType.h"
#include "uci/type/SubsystemFaultType.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SupportCapabilityID_Type.h"
#include "uci/type/VisibleString256Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemFaultType::SubsystemFaultType()
  : faultID_Accessor{boost::make_unique<FaultID_Type>()},
    faultData_Accessor{boost::make_unique<FaultData>(0, SIZE_MAX)},
    faultCode_Accessor{boost::make_unique<VisibleString256Type>()},
    capabilityID_Accessor{boost::make_unique<CapabilityID>(0, SIZE_MAX)},
    supportCapabilityID_Accessor{boost::make_unique<SupportCapabilityID>(0, SIZE_MAX)},
    componentID_Accessor{boost::make_unique<ComponentID>(0, SIZE_MAX)},
    ambiguityGroup_Accessor{boost::make_unique<AmbiguityGroup>(0, SIZE_MAX)} {
}

SubsystemFaultType::~SubsystemFaultType() = default;

void SubsystemFaultType::copy(const uci::type::SubsystemFaultType& accessor) {
  copyImpl(accessor, false);
}

void SubsystemFaultType::copyImpl(const uci::type::SubsystemFaultType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SubsystemFaultType&>(accessor);
    setFaultID(*(accessorImpl.faultID_Accessor));
    if (accessorImpl.severity_Accessor) {
      setSeverity(*(accessorImpl.severity_Accessor));
    } else {
      severity_Accessor.reset();
    }
    if (accessorImpl.faultState_Accessor) {
      setFaultState(*(accessorImpl.faultState_Accessor));
    } else {
      faultState_Accessor.reset();
    }
    setFaultData(*(accessorImpl.faultData_Accessor));
    if (accessorImpl.hasDetectionTime()) {
      setDetectionTime(accessorImpl.getDetectionTime());
    } else {
      clearDetectionTime();
    }
    setFaultCode(*(accessorImpl.faultCode_Accessor));
    if (accessorImpl.hasFaultCodeCount()) {
      setFaultCodeCount(accessorImpl.getFaultCodeCount());
    } else {
      clearFaultCodeCount();
    }
    if (accessorImpl.faultDescription_Accessor) {
      setFaultDescription(*(accessorImpl.faultDescription_Accessor));
    } else {
      faultDescription_Accessor.reset();
    }
    if (accessorImpl.subsystemID_Accessor) {
      setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    } else {
      subsystemID_Accessor.reset();
    }
    if (accessorImpl.serviceID_Accessor) {
      setServiceID(*(accessorImpl.serviceID_Accessor));
    } else {
      serviceID_Accessor.reset();
    }
    setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    setSupportCapabilityID(*(accessorImpl.supportCapabilityID_Accessor));
    setComponentID(*(accessorImpl.componentID_Accessor));
    setAmbiguityGroup(*(accessorImpl.ambiguityGroup_Accessor));
  }
}

void SubsystemFaultType::reset() noexcept {
  faultID_Accessor->reset();
  severity_Accessor.reset();
  faultState_Accessor.reset();
  faultData_Accessor->reset();
  clearDetectionTime();
  faultCode_Accessor->reset();
  clearFaultCodeCount();
  faultDescription_Accessor.reset();
  subsystemID_Accessor.reset();
  serviceID_Accessor.reset();
  capabilityID_Accessor->reset();
  supportCapabilityID_Accessor->reset();
  componentID_Accessor->reset();
  ambiguityGroup_Accessor->reset();
}

const uci::type::FaultID_Type& SubsystemFaultType::getFaultID() const {
  return *faultID_Accessor;
}

uci::type::FaultID_Type& SubsystemFaultType::getFaultID() {
  return *faultID_Accessor;
}

uci::type::SubsystemFaultType& SubsystemFaultType::setFaultID(const uci::type::FaultID_Type& accessor) {
  if (&accessor != faultID_Accessor.get()) {
    faultID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FaultSeverityEnum& SubsystemFaultType::getSeverity_() const {
  if (severity_Accessor) {
    return *severity_Accessor;
  }
  throw uci::base::UCIException("Error in getSeverity(): An attempt was made to get an optional field that was not enabled, call hasSeverity() to determine if it is safe to call getSeverity()");
}

const uci::type::FaultSeverityEnum& SubsystemFaultType::getSeverity() const {
  return getSeverity_();
}

uci::type::FaultSeverityEnum& SubsystemFaultType::getSeverity() {
  return getSeverity_();
}

uci::type::SubsystemFaultType& SubsystemFaultType::setSeverity(const uci::type::FaultSeverityEnum& accessor) {
  enableSeverity();
  if (&accessor != severity_Accessor.get()) {
    severity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemFaultType& SubsystemFaultType::setSeverity(const uci::type::FaultSeverityEnum::EnumerationItem value) {
  enableSeverity().setValue(value);
  return *this;
}

bool SubsystemFaultType::hasSeverity() const noexcept {
  return static_cast<bool>(severity_Accessor);
}

uci::type::FaultSeverityEnum& SubsystemFaultType::enableSeverity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::faultSeverityEnum : type};
  if ((!severity_Accessor) || (severity_Accessor->getAccessorType() != requestedType)) {
    severity_Accessor = FaultSeverityEnum::create(requestedType);
    if (!severity_Accessor) {
      throw uci::base::UCIException("Error in enableSeverity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *severity_Accessor;
}

uci::type::SubsystemFaultType& SubsystemFaultType::clearSeverity() noexcept {
  severity_Accessor.reset();
  return *this;
}

uci::type::FaultStateEnum& SubsystemFaultType::getFaultState_() const {
  if (faultState_Accessor) {
    return *faultState_Accessor;
  }
  throw uci::base::UCIException("Error in getFaultState(): An attempt was made to get an optional field that was not enabled, call hasFaultState() to determine if it is safe to call getFaultState()");
}

const uci::type::FaultStateEnum& SubsystemFaultType::getFaultState() const {
  return getFaultState_();
}

uci::type::FaultStateEnum& SubsystemFaultType::getFaultState() {
  return getFaultState_();
}

uci::type::SubsystemFaultType& SubsystemFaultType::setFaultState(const uci::type::FaultStateEnum& accessor) {
  enableFaultState();
  if (&accessor != faultState_Accessor.get()) {
    faultState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemFaultType& SubsystemFaultType::setFaultState(const uci::type::FaultStateEnum::EnumerationItem value) {
  enableFaultState().setValue(value);
  return *this;
}

bool SubsystemFaultType::hasFaultState() const noexcept {
  return static_cast<bool>(faultState_Accessor);
}

uci::type::FaultStateEnum& SubsystemFaultType::enableFaultState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::faultStateEnum : type};
  if ((!faultState_Accessor) || (faultState_Accessor->getAccessorType() != requestedType)) {
    faultState_Accessor = FaultStateEnum::create(requestedType);
    if (!faultState_Accessor) {
      throw uci::base::UCIException("Error in enableFaultState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *faultState_Accessor;
}

uci::type::SubsystemFaultType& SubsystemFaultType::clearFaultState() noexcept {
  faultState_Accessor.reset();
  return *this;
}

const uci::type::SubsystemFaultType::FaultData& SubsystemFaultType::getFaultData() const {
  return *faultData_Accessor;
}

uci::type::SubsystemFaultType::FaultData& SubsystemFaultType::getFaultData() {
  return *faultData_Accessor;
}

uci::type::SubsystemFaultType& SubsystemFaultType::setFaultData(const uci::type::SubsystemFaultType::FaultData& accessor) {
  if (&accessor != faultData_Accessor.get()) {
    faultData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue SubsystemFaultType::getDetectionTime() const {
  if (detectionTime_Accessor) {
    return *detectionTime_Accessor;
  }
  throw uci::base::UCIException("Error in getDetectionTime(): An attempt was made to get an optional field that was not enabled, call hasDetectionTime() to determine if it is safe to call getDetectionTime()");
}

uci::type::SubsystemFaultType& SubsystemFaultType::setDetectionTime(uci::type::DateTimeTypeValue value) {
  detectionTime_Accessor = value;
  return *this;
}

bool SubsystemFaultType::hasDetectionTime() const noexcept {
  return detectionTime_Accessor.has_value();
}

uci::type::SubsystemFaultType& SubsystemFaultType::clearDetectionTime() noexcept {
  detectionTime_Accessor.reset();
  return *this;
}

const uci::type::VisibleString256Type& SubsystemFaultType::getFaultCode() const noexcept {
  return *faultCode_Accessor;
}

uci::type::VisibleString256Type& SubsystemFaultType::getFaultCode() noexcept {
  return *faultCode_Accessor;
}

uci::type::SubsystemFaultType& SubsystemFaultType::setFaultCode(const uci::type::VisibleString256Type& value) {
  return setFaultCode(value.c_str());
}

uci::type::SubsystemFaultType& SubsystemFaultType::setFaultCode(const std::string& value) {
  return setFaultCode(value.c_str());
}

uci::type::SubsystemFaultType& SubsystemFaultType::setFaultCode(const char* value) {
  faultCode_Accessor->setStringValue(value);
  return *this;
}

xs::Int SubsystemFaultType::getFaultCodeCount() const {
  if (faultCodeCount_Accessor) {
    return *faultCodeCount_Accessor;
  }
  throw uci::base::UCIException("Error in getFaultCodeCount(): An attempt was made to get an optional field that was not enabled, call hasFaultCodeCount() to determine if it is safe to call getFaultCodeCount()");
}

uci::type::SubsystemFaultType& SubsystemFaultType::setFaultCodeCount(xs::Int value) {
  faultCodeCount_Accessor = value;
  return *this;
}

bool SubsystemFaultType::hasFaultCodeCount() const noexcept {
  return faultCodeCount_Accessor.has_value();
}

uci::type::SubsystemFaultType& SubsystemFaultType::clearFaultCodeCount() noexcept {
  faultCodeCount_Accessor.reset();
  return *this;
}

uci::type::VisibleString256Type& SubsystemFaultType::getFaultDescription_() const {
  if (faultDescription_Accessor) {
    return *faultDescription_Accessor;
  }
  throw uci::base::UCIException("Error in getFaultDescription(): An attempt was made to get an optional field that was not enabled, call hasFaultDescription() to determine if it is safe to call getFaultDescription()");
}

const uci::type::VisibleString256Type& SubsystemFaultType::getFaultDescription() const {
  return getFaultDescription_();
}

uci::type::VisibleString256Type& SubsystemFaultType::getFaultDescription() {
  return getFaultDescription_();
}

uci::type::SubsystemFaultType& SubsystemFaultType::setFaultDescription(const uci::type::VisibleString256Type& value) {
  return setFaultDescription(value.c_str());
}

uci::type::SubsystemFaultType& SubsystemFaultType::setFaultDescription(const std::string& value) {
  return setFaultDescription(value.c_str());
}

uci::type::SubsystemFaultType& SubsystemFaultType::setFaultDescription(const char* value) {
  enableFaultDescription().setStringValue(value);
  return *this;
}

bool SubsystemFaultType::hasFaultDescription() const noexcept {
  return static_cast<bool>(faultDescription_Accessor);
}

uci::type::VisibleString256Type& SubsystemFaultType::enableFaultDescription(uci::base::accessorType::AccessorType type) {
  if (!faultDescription_Accessor) {
    faultDescription_Accessor = VisibleString256Type::create(type);
  }
  return *faultDescription_Accessor;
}

uci::type::SubsystemFaultType& SubsystemFaultType::clearFaultDescription() noexcept {
  faultDescription_Accessor.reset();
  return *this;
}

uci::type::SubsystemID_Type& SubsystemFaultType::getSubsystemID_() const {
  if (subsystemID_Accessor) {
    return *subsystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSubsystemID(): An attempt was made to get an optional field that was not enabled, call hasSubsystemID() to determine if it is safe to call getSubsystemID()");
}

const uci::type::SubsystemID_Type& SubsystemFaultType::getSubsystemID() const {
  return getSubsystemID_();
}

uci::type::SubsystemID_Type& SubsystemFaultType::getSubsystemID() {
  return getSubsystemID_();
}

uci::type::SubsystemFaultType& SubsystemFaultType::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  enableSubsystemID();
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubsystemFaultType::hasSubsystemID() const noexcept {
  return static_cast<bool>(subsystemID_Accessor);
}

uci::type::SubsystemID_Type& SubsystemFaultType::enableSubsystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemID_Type : type};
  if ((!subsystemID_Accessor) || (subsystemID_Accessor->getAccessorType() != requestedType)) {
    subsystemID_Accessor = SubsystemID_Type::create(requestedType);
    if (!subsystemID_Accessor) {
      throw uci::base::UCIException("Error in enableSubsystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subsystemID_Accessor;
}

uci::type::SubsystemFaultType& SubsystemFaultType::clearSubsystemID() noexcept {
  subsystemID_Accessor.reset();
  return *this;
}

uci::type::ServiceID_Type& SubsystemFaultType::getServiceID_() const {
  if (serviceID_Accessor) {
    return *serviceID_Accessor;
  }
  throw uci::base::UCIException("Error in getServiceID(): An attempt was made to get an optional field that was not enabled, call hasServiceID() to determine if it is safe to call getServiceID()");
}

const uci::type::ServiceID_Type& SubsystemFaultType::getServiceID() const {
  return getServiceID_();
}

uci::type::ServiceID_Type& SubsystemFaultType::getServiceID() {
  return getServiceID_();
}

uci::type::SubsystemFaultType& SubsystemFaultType::setServiceID(const uci::type::ServiceID_Type& accessor) {
  enableServiceID();
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubsystemFaultType::hasServiceID() const noexcept {
  return static_cast<bool>(serviceID_Accessor);
}

uci::type::ServiceID_Type& SubsystemFaultType::enableServiceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceID_Type : type};
  if ((!serviceID_Accessor) || (serviceID_Accessor->getAccessorType() != requestedType)) {
    serviceID_Accessor = ServiceID_Type::create(requestedType);
    if (!serviceID_Accessor) {
      throw uci::base::UCIException("Error in enableServiceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *serviceID_Accessor;
}

uci::type::SubsystemFaultType& SubsystemFaultType::clearServiceID() noexcept {
  serviceID_Accessor.reset();
  return *this;
}

const uci::type::SubsystemFaultType::CapabilityID& SubsystemFaultType::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::SubsystemFaultType::CapabilityID& SubsystemFaultType::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::SubsystemFaultType& SubsystemFaultType::setCapabilityID(const uci::type::SubsystemFaultType::CapabilityID& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemFaultType::SupportCapabilityID& SubsystemFaultType::getSupportCapabilityID() const {
  return *supportCapabilityID_Accessor;
}

uci::type::SubsystemFaultType::SupportCapabilityID& SubsystemFaultType::getSupportCapabilityID() {
  return *supportCapabilityID_Accessor;
}

uci::type::SubsystemFaultType& SubsystemFaultType::setSupportCapabilityID(const uci::type::SubsystemFaultType::SupportCapabilityID& accessor) {
  if (&accessor != supportCapabilityID_Accessor.get()) {
    supportCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemFaultType::ComponentID& SubsystemFaultType::getComponentID() const {
  return *componentID_Accessor;
}

uci::type::SubsystemFaultType::ComponentID& SubsystemFaultType::getComponentID() {
  return *componentID_Accessor;
}

uci::type::SubsystemFaultType& SubsystemFaultType::setComponentID(const uci::type::SubsystemFaultType::ComponentID& accessor) {
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemFaultType::AmbiguityGroup& SubsystemFaultType::getAmbiguityGroup() const {
  return *ambiguityGroup_Accessor;
}

uci::type::SubsystemFaultType::AmbiguityGroup& SubsystemFaultType::getAmbiguityGroup() {
  return *ambiguityGroup_Accessor;
}

uci::type::SubsystemFaultType& SubsystemFaultType::setAmbiguityGroup(const uci::type::SubsystemFaultType::AmbiguityGroup& accessor) {
  if (&accessor != ambiguityGroup_Accessor.get()) {
    ambiguityGroup_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<SubsystemFaultType> SubsystemFaultType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemFaultType : type};
  return (requestedType == uci::type::accessorType::subsystemFaultType) ? boost::make_unique<SubsystemFaultType>() : nullptr;
}

/**  */
namespace SubsystemFaultType_Names {

constexpr const char* Extern_Type_Name{"SubsystemFaultType"};
constexpr const char* FaultID_Name{"FaultID"};
constexpr const char* Severity_Name{"Severity"};
constexpr const char* FaultState_Name{"FaultState"};
constexpr const char* FaultData_Name{"FaultData"};
constexpr const char* DetectionTime_Name{"DetectionTime"};
constexpr const char* FaultCode_Name{"FaultCode"};
constexpr const char* FaultCodeCount_Name{"FaultCodeCount"};
constexpr const char* FaultDescription_Name{"FaultDescription"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* SupportCapabilityID_Name{"SupportCapabilityID"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* AmbiguityGroup_Name{"AmbiguityGroup"};

} // namespace SubsystemFaultType_Names

void SubsystemFaultType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemFaultType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemFaultType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::FaultID_Name) {
      FaultID_Type::deserialize(valueType.second, accessor.getFaultID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::Severity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSeverity().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::FaultState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFaultState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::FaultData_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemFaultType::FaultData& boundedList = accessor.getFaultData();
        const uci::type::SubsystemFaultType::FaultData::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FaultDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::DetectionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDetectionTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::FaultCode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFaultCode(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::FaultCodeCount_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFaultCodeCount(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::FaultDescription_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFaultDescription(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.enableSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.enableServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemFaultType::CapabilityID& boundedList = accessor.getCapabilityID();
        const uci::type::SubsystemFaultType::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::SupportCapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemFaultType::SupportCapabilityID& boundedList = accessor.getSupportCapabilityID();
        const uci::type::SubsystemFaultType::SupportCapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SupportCapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::ComponentID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemFaultType::ComponentID& boundedList = accessor.getComponentID();
        const uci::type::SubsystemFaultType::ComponentID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ComponentID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemFaultType_Names::AmbiguityGroup_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemFaultType::AmbiguityGroup& boundedList = accessor.getAmbiguityGroup();
        const uci::type::SubsystemFaultType::AmbiguityGroup::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SubsystemFaultAmbiguityGroupType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string SubsystemFaultType::serialize(const uci::type::SubsystemFaultType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemFaultType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemFaultType_Names::Extern_Type_Name);
  }
  FaultID_Type::serialize(accessor.getFaultID(), node, SubsystemFaultType_Names::FaultID_Name);
  if (accessor.hasSeverity()) {
    FaultSeverityEnum::serialize(accessor.getSeverity(), node, SubsystemFaultType_Names::Severity_Name, false);
  }
  if (accessor.hasFaultState()) {
    FaultStateEnum::serialize(accessor.getFaultState(), node, SubsystemFaultType_Names::FaultState_Name, false);
  }
  {
    const uci::type::SubsystemFaultType::FaultData& boundedList = accessor.getFaultData();
    for (uci::type::SubsystemFaultType::FaultData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FaultDataType::serialize(boundedList.at(i), node, SubsystemFaultType_Names::FaultData_Name);
    }
  }
  if (accessor.hasDetectionTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getDetectionTime(), node, SubsystemFaultType_Names::DetectionTime_Name);
  }
  asb_uci::util::SerializationHelpers::serializeString(accessor.getFaultCode(), node, SubsystemFaultType_Names::FaultCode_Name);
  if (accessor.hasFaultCodeCount()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getFaultCodeCount(), node, SubsystemFaultType_Names::FaultCodeCount_Name);
  }
  if (accessor.hasFaultDescription()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getFaultDescription(), node, SubsystemFaultType_Names::FaultDescription_Name);
  }
  if (accessor.hasSubsystemID()) {
    SubsystemID_Type::serialize(accessor.getSubsystemID(), node, SubsystemFaultType_Names::SubsystemID_Name);
  }
  if (accessor.hasServiceID()) {
    ServiceID_Type::serialize(accessor.getServiceID(), node, SubsystemFaultType_Names::ServiceID_Name);
  }
  {
    const uci::type::SubsystemFaultType::CapabilityID& boundedList = accessor.getCapabilityID();
    for (uci::type::SubsystemFaultType::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityID_Type::serialize(boundedList.at(i), node, SubsystemFaultType_Names::CapabilityID_Name);
    }
  }
  {
    const uci::type::SubsystemFaultType::SupportCapabilityID& boundedList = accessor.getSupportCapabilityID();
    for (uci::type::SubsystemFaultType::SupportCapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SupportCapabilityID_Type::serialize(boundedList.at(i), node, SubsystemFaultType_Names::SupportCapabilityID_Name);
    }
  }
  {
    const uci::type::SubsystemFaultType::ComponentID& boundedList = accessor.getComponentID();
    for (uci::type::SubsystemFaultType::ComponentID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ComponentID_Type::serialize(boundedList.at(i), node, SubsystemFaultType_Names::ComponentID_Name);
    }
  }
  {
    const uci::type::SubsystemFaultType::AmbiguityGroup& boundedList = accessor.getAmbiguityGroup();
    for (uci::type::SubsystemFaultType::AmbiguityGroup::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SubsystemFaultAmbiguityGroupType::serialize(boundedList.at(i), node, SubsystemFaultType_Names::AmbiguityGroup_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubsystemFaultType& SubsystemFaultType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubsystemFaultType>().release());
}

uci::type::SubsystemFaultType& SubsystemFaultType::create(const uci::type::SubsystemFaultType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubsystemFaultType> newAccessor{boost::make_unique<asb_uci::type::SubsystemFaultType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubsystemFaultType::destroy(uci::type::SubsystemFaultType& accessor) {
  delete dynamic_cast<asb_uci::type::SubsystemFaultType*>(&accessor);
}

} // namespace type

} // namespace uci

