/** @file AIS_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AIS_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString20OnlyType.h"
#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString20Type.h"
#include "asb_uci/type/IMO_NumberType.h"
#include "asb_uci/type/MMSI_NumberStringType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AIS_Type.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString20OnlyType.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString20Type.h"
#include "uci/type/IMO_NumberType.h"
#include "uci/type/MMSI_NumberStringType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AIS_Type::AIS_Type() = default;

AIS_Type::~AIS_Type() = default;

void AIS_Type::copy(const uci::type::AIS_Type& accessor) {
  copyImpl(accessor, false);
}

void AIS_Type::copyImpl(const uci::type::AIS_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AIS_Type&>(accessor);
    if (accessorImpl.mMSI_Number_Accessor) {
      setMMSI_Number(*(accessorImpl.mMSI_Number_Accessor));
    } else {
      mMSI_Number_Accessor.reset();
    }
    if (accessorImpl.iMO_Number_Accessor) {
      setIMO_Number(*(accessorImpl.iMO_Number_Accessor));
    } else {
      iMO_Number_Accessor.reset();
    }
    if (accessorImpl.vesselName_Accessor) {
      setVesselName(*(accessorImpl.vesselName_Accessor));
    } else {
      vesselName_Accessor.reset();
    }
    if (accessorImpl.callSign_Accessor) {
      setCallSign(*(accessorImpl.callSign_Accessor));
    } else {
      callSign_Accessor.reset();
    }
  }
}

void AIS_Type::reset() noexcept {
  mMSI_Number_Accessor.reset();
  iMO_Number_Accessor.reset();
  vesselName_Accessor.reset();
  callSign_Accessor.reset();
}

uci::type::MMSI_NumberStringType& AIS_Type::getMMSI_Number_() const {
  if (mMSI_Number_Accessor) {
    return *mMSI_Number_Accessor;
  }
  throw uci::base::UCIException("Error in getMMSI_Number(): An attempt was made to get an optional field that was not enabled, call hasMMSI_Number() to determine if it is safe to call getMMSI_Number()");
}

const uci::type::MMSI_NumberStringType& AIS_Type::getMMSI_Number() const {
  return getMMSI_Number_();
}

uci::type::MMSI_NumberStringType& AIS_Type::getMMSI_Number() {
  return getMMSI_Number_();
}

uci::type::AIS_Type& AIS_Type::setMMSI_Number(const uci::type::MMSI_NumberStringType& value) {
  return setMMSI_Number(value.c_str());
}

uci::type::AIS_Type& AIS_Type::setMMSI_Number(const std::string& value) {
  return setMMSI_Number(value.c_str());
}

uci::type::AIS_Type& AIS_Type::setMMSI_Number(const char* value) {
  enableMMSI_Number().setStringValue(value);
  return *this;
}

bool AIS_Type::hasMMSI_Number() const noexcept {
  return static_cast<bool>(mMSI_Number_Accessor);
}

uci::type::MMSI_NumberStringType& AIS_Type::enableMMSI_Number(uci::base::accessorType::AccessorType type) {
  if (!mMSI_Number_Accessor) {
    mMSI_Number_Accessor = MMSI_NumberStringType::create(type);
  }
  return *mMSI_Number_Accessor;
}

uci::type::AIS_Type& AIS_Type::clearMMSI_Number() noexcept {
  mMSI_Number_Accessor.reset();
  return *this;
}

uci::type::IMO_NumberType& AIS_Type::getIMO_Number_() const {
  if (iMO_Number_Accessor) {
    return *iMO_Number_Accessor;
  }
  throw uci::base::UCIException("Error in getIMO_Number(): An attempt was made to get an optional field that was not enabled, call hasIMO_Number() to determine if it is safe to call getIMO_Number()");
}

const uci::type::IMO_NumberType& AIS_Type::getIMO_Number() const {
  return getIMO_Number_();
}

uci::type::IMO_NumberType& AIS_Type::getIMO_Number() {
  return getIMO_Number_();
}

uci::type::AIS_Type& AIS_Type::setIMO_Number(const uci::type::IMO_NumberType& value) {
  return setIMO_Number(value.c_str());
}

uci::type::AIS_Type& AIS_Type::setIMO_Number(const std::string& value) {
  return setIMO_Number(value.c_str());
}

uci::type::AIS_Type& AIS_Type::setIMO_Number(const char* value) {
  enableIMO_Number().setStringValue(value);
  return *this;
}

bool AIS_Type::hasIMO_Number() const noexcept {
  return static_cast<bool>(iMO_Number_Accessor);
}

uci::type::IMO_NumberType& AIS_Type::enableIMO_Number(uci::base::accessorType::AccessorType type) {
  if (!iMO_Number_Accessor) {
    iMO_Number_Accessor = IMO_NumberType::create(type);
  }
  return *iMO_Number_Accessor;
}

uci::type::AIS_Type& AIS_Type::clearIMO_Number() noexcept {
  iMO_Number_Accessor.reset();
  return *this;
}

uci::type::AlphanumericDashSpaceUnderscoreString20OnlyType& AIS_Type::getVesselName_() const {
  if (vesselName_Accessor) {
    return *vesselName_Accessor;
  }
  throw uci::base::UCIException("Error in getVesselName(): An attempt was made to get an optional field that was not enabled, call hasVesselName() to determine if it is safe to call getVesselName()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString20OnlyType& AIS_Type::getVesselName() const {
  return getVesselName_();
}

uci::type::AlphanumericDashSpaceUnderscoreString20OnlyType& AIS_Type::getVesselName() {
  return getVesselName_();
}

uci::type::AIS_Type& AIS_Type::setVesselName(const uci::type::AlphanumericDashSpaceUnderscoreString20OnlyType& value) {
  return setVesselName(value.c_str());
}

uci::type::AIS_Type& AIS_Type::setVesselName(const std::string& value) {
  return setVesselName(value.c_str());
}

uci::type::AIS_Type& AIS_Type::setVesselName(const char* value) {
  enableVesselName().setStringValue(value);
  return *this;
}

bool AIS_Type::hasVesselName() const noexcept {
  return static_cast<bool>(vesselName_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString20OnlyType& AIS_Type::enableVesselName(uci::base::accessorType::AccessorType type) {
  if (!vesselName_Accessor) {
    vesselName_Accessor = AlphanumericDashSpaceUnderscoreString20OnlyType::create(type);
  }
  return *vesselName_Accessor;
}

uci::type::AIS_Type& AIS_Type::clearVesselName() noexcept {
  vesselName_Accessor.reset();
  return *this;
}

uci::type::AlphanumericDashSpaceUnderscoreString20Type& AIS_Type::getCallSign_() const {
  if (callSign_Accessor) {
    return *callSign_Accessor;
  }
  throw uci::base::UCIException("Error in getCallSign(): An attempt was made to get an optional field that was not enabled, call hasCallSign() to determine if it is safe to call getCallSign()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString20Type& AIS_Type::getCallSign() const {
  return getCallSign_();
}

uci::type::AlphanumericDashSpaceUnderscoreString20Type& AIS_Type::getCallSign() {
  return getCallSign_();
}

uci::type::AIS_Type& AIS_Type::setCallSign(const uci::type::AlphanumericDashSpaceUnderscoreString20Type& value) {
  return setCallSign(value.c_str());
}

uci::type::AIS_Type& AIS_Type::setCallSign(const std::string& value) {
  return setCallSign(value.c_str());
}

uci::type::AIS_Type& AIS_Type::setCallSign(const char* value) {
  enableCallSign().setStringValue(value);
  return *this;
}

bool AIS_Type::hasCallSign() const noexcept {
  return static_cast<bool>(callSign_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString20Type& AIS_Type::enableCallSign(uci::base::accessorType::AccessorType type) {
  if (!callSign_Accessor) {
    callSign_Accessor = AlphanumericDashSpaceUnderscoreString20Type::create(type);
  }
  return *callSign_Accessor;
}

uci::type::AIS_Type& AIS_Type::clearCallSign() noexcept {
  callSign_Accessor.reset();
  return *this;
}

std::unique_ptr<AIS_Type> AIS_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aIS_Type : type};
  return (requestedType == uci::type::accessorType::aIS_Type) ? boost::make_unique<AIS_Type>() : nullptr;
}

/**  */
namespace AIS_Type_Names {

constexpr const char* Extern_Type_Name{"AIS_Type"};
constexpr const char* MMSI_Number_Name{"MMSI_Number"};
constexpr const char* IMO_Number_Name{"IMO_Number"};
constexpr const char* VesselName_Name{"VesselName"};
constexpr const char* CallSign_Name{"CallSign"};

} // namespace AIS_Type_Names

void AIS_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::AIS_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AIS_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AIS_Type_Names::MMSI_Number_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMMSI_Number(*value);
      }
    } else if (valueType.first == nsPrefix + AIS_Type_Names::IMO_Number_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIMO_Number(*value);
      }
    } else if (valueType.first == nsPrefix + AIS_Type_Names::VesselName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVesselName(*value);
      }
    } else if (valueType.first == nsPrefix + AIS_Type_Names::CallSign_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCallSign(*value);
      }
    }
  }
}

std::string AIS_Type::serialize(const uci::type::AIS_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AIS_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AIS_Type_Names::Extern_Type_Name);
  }
  if (accessor.hasMMSI_Number()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMMSI_Number(), node, AIS_Type_Names::MMSI_Number_Name);
  }
  if (accessor.hasIMO_Number()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getIMO_Number(), node, AIS_Type_Names::IMO_Number_Name);
  }
  if (accessor.hasVesselName()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getVesselName(), node, AIS_Type_Names::VesselName_Name);
  }
  if (accessor.hasCallSign()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getCallSign(), node, AIS_Type_Names::CallSign_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AIS_Type& AIS_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AIS_Type>().release());
}

uci::type::AIS_Type& AIS_Type::create(const uci::type::AIS_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AIS_Type> newAccessor{boost::make_unique<asb_uci::type::AIS_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AIS_Type::destroy(uci::type::AIS_Type& accessor) {
  delete dynamic_cast<asb_uci::type::AIS_Type*>(&accessor);
}

} // namespace type

} // namespace uci

