/** @file PO_ComponentStatusFocalPlaneArrayChannelType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_ComponentStatusFocalPlaneArrayChannelType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ComponentControlsStatusType.h"
#include "asb_uci/type/PO_ComponentStatusFocalPlaneArrayCollectionTimeType.h"
#include "asb_uci/type/PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType.h"
#include "asb_uci/type/PO_ComponentStatusFocalPlaneArrayOpticalBandType.h"
#include "asb_uci/type/PO_ComponentStatusFocalPlaneArrayPixelAggregationType.h"
#include "asb_uci/type/PO_ComponentStatusFocalPlaneArrayPixelPolarityType.h"
#include "asb_uci/type/PO_ComponentStatusFocalPlaneArrayPixelScalingType.h"
#include "asb_uci/type/PO_ComponentStatusFocalPlaneArrayScanDirectionType.h"
#include "asb_uci/type/PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType.h"
#include "asb_uci/type/PO_FPA_ChannelID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ComponentControlsStatusType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayChannelType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayCollectionTimeType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayOpticalBandType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayPixelAggregationType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayPixelPolarityType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayPixelScalingType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayScanDirectionType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType.h"
#include "uci/type/PO_FPA_ChannelID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentStatusFocalPlaneArrayChannelType::PO_ComponentStatusFocalPlaneArrayChannelType()
  : channelID_Accessor{boost::make_unique<PO_FPA_ChannelID_Type>()},
    channelControlsStatus_Accessor{boost::make_unique<ComponentControlsStatusType>()},
    opticalBand_Accessor{boost::make_unique<PO_ComponentStatusFocalPlaneArrayOpticalBandType>()} {
}

PO_ComponentStatusFocalPlaneArrayChannelType::~PO_ComponentStatusFocalPlaneArrayChannelType() = default;

void PO_ComponentStatusFocalPlaneArrayChannelType::copy(const uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentStatusFocalPlaneArrayChannelType::copyImpl(const uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentStatusFocalPlaneArrayChannelType&>(accessor);
    setChannelID(*(accessorImpl.channelID_Accessor));
    setChannelControlsStatus(*(accessorImpl.channelControlsStatus_Accessor));
    setOpticalBand(*(accessorImpl.opticalBand_Accessor));
    if (accessorImpl.pixelAggregation_Accessor) {
      setPixelAggregation(*(accessorImpl.pixelAggregation_Accessor));
    } else {
      pixelAggregation_Accessor.reset();
    }
    if (accessorImpl.timeDelayIntegration_Accessor) {
      setTimeDelayIntegration(*(accessorImpl.timeDelayIntegration_Accessor));
    } else {
      timeDelayIntegration_Accessor.reset();
    }
    if (accessorImpl.pixelScaling_Accessor) {
      setPixelScaling(*(accessorImpl.pixelScaling_Accessor));
    } else {
      pixelScaling_Accessor.reset();
    }
    if (accessorImpl.pixelPolarity_Accessor) {
      setPixelPolarity(*(accessorImpl.pixelPolarity_Accessor));
    } else {
      pixelPolarity_Accessor.reset();
    }
    if (accessorImpl.collectionTime_Accessor) {
      setCollectionTime(*(accessorImpl.collectionTime_Accessor));
    } else {
      collectionTime_Accessor.reset();
    }
    if (accessorImpl.nonUniformityCorrection_Accessor) {
      setNonUniformityCorrection(*(accessorImpl.nonUniformityCorrection_Accessor));
    } else {
      nonUniformityCorrection_Accessor.reset();
    }
    if (accessorImpl.scanDirection_Accessor) {
      setScanDirection(*(accessorImpl.scanDirection_Accessor));
    } else {
      scanDirection_Accessor.reset();
    }
  }
}

void PO_ComponentStatusFocalPlaneArrayChannelType::reset() noexcept {
  channelID_Accessor->reset();
  channelControlsStatus_Accessor->reset();
  opticalBand_Accessor->reset();
  pixelAggregation_Accessor.reset();
  timeDelayIntegration_Accessor.reset();
  pixelScaling_Accessor.reset();
  pixelPolarity_Accessor.reset();
  collectionTime_Accessor.reset();
  nonUniformityCorrection_Accessor.reset();
  scanDirection_Accessor.reset();
}

const uci::type::PO_FPA_ChannelID_Type& PO_ComponentStatusFocalPlaneArrayChannelType::getChannelID() const {
  return *channelID_Accessor;
}

uci::type::PO_FPA_ChannelID_Type& PO_ComponentStatusFocalPlaneArrayChannelType::getChannelID() {
  return *channelID_Accessor;
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::setChannelID(const uci::type::PO_FPA_ChannelID_Type& accessor) {
  if (&accessor != channelID_Accessor.get()) {
    channelID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ComponentControlsStatusType& PO_ComponentStatusFocalPlaneArrayChannelType::getChannelControlsStatus() const {
  return *channelControlsStatus_Accessor;
}

uci::type::ComponentControlsStatusType& PO_ComponentStatusFocalPlaneArrayChannelType::getChannelControlsStatus() {
  return *channelControlsStatus_Accessor;
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::setChannelControlsStatus(const uci::type::ComponentControlsStatusType& accessor) {
  if (&accessor != channelControlsStatus_Accessor.get()) {
    channelControlsStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusFocalPlaneArrayOpticalBandType& PO_ComponentStatusFocalPlaneArrayChannelType::getOpticalBand() const {
  return *opticalBand_Accessor;
}

uci::type::PO_ComponentStatusFocalPlaneArrayOpticalBandType& PO_ComponentStatusFocalPlaneArrayChannelType::getOpticalBand() {
  return *opticalBand_Accessor;
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::setOpticalBand(const uci::type::PO_ComponentStatusFocalPlaneArrayOpticalBandType& accessor) {
  if (&accessor != opticalBand_Accessor.get()) {
    opticalBand_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& PO_ComponentStatusFocalPlaneArrayChannelType::getPixelAggregation_() const {
  if (pixelAggregation_Accessor) {
    return *pixelAggregation_Accessor;
  }
  throw uci::base::UCIException("Error in getPixelAggregation(): An attempt was made to get an optional field that was not enabled, call hasPixelAggregation() to determine if it is safe to call getPixelAggregation()");
}

const uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& PO_ComponentStatusFocalPlaneArrayChannelType::getPixelAggregation() const {
  return getPixelAggregation_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& PO_ComponentStatusFocalPlaneArrayChannelType::getPixelAggregation() {
  return getPixelAggregation_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::setPixelAggregation(const uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& accessor) {
  enablePixelAggregation();
  if (&accessor != pixelAggregation_Accessor.get()) {
    pixelAggregation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentStatusFocalPlaneArrayChannelType::hasPixelAggregation() const noexcept {
  return static_cast<bool>(pixelAggregation_Accessor);
}

uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& PO_ComponentStatusFocalPlaneArrayChannelType::enablePixelAggregation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayPixelAggregationType : type};
  if ((!pixelAggregation_Accessor) || (pixelAggregation_Accessor->getAccessorType() != requestedType)) {
    pixelAggregation_Accessor = PO_ComponentStatusFocalPlaneArrayPixelAggregationType::create(requestedType);
    if (!pixelAggregation_Accessor) {
      throw uci::base::UCIException("Error in enablePixelAggregation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pixelAggregation_Accessor;
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::clearPixelAggregation() noexcept {
  pixelAggregation_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& PO_ComponentStatusFocalPlaneArrayChannelType::getTimeDelayIntegration_() const {
  if (timeDelayIntegration_Accessor) {
    return *timeDelayIntegration_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeDelayIntegration(): An attempt was made to get an optional field that was not enabled, call hasTimeDelayIntegration() to determine if it is safe to call getTimeDelayIntegration()");
}

const uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& PO_ComponentStatusFocalPlaneArrayChannelType::getTimeDelayIntegration() const {
  return getTimeDelayIntegration_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& PO_ComponentStatusFocalPlaneArrayChannelType::getTimeDelayIntegration() {
  return getTimeDelayIntegration_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::setTimeDelayIntegration(const uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& accessor) {
  enableTimeDelayIntegration();
  if (&accessor != timeDelayIntegration_Accessor.get()) {
    timeDelayIntegration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentStatusFocalPlaneArrayChannelType::hasTimeDelayIntegration() const noexcept {
  return static_cast<bool>(timeDelayIntegration_Accessor);
}

uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& PO_ComponentStatusFocalPlaneArrayChannelType::enableTimeDelayIntegration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType : type};
  if ((!timeDelayIntegration_Accessor) || (timeDelayIntegration_Accessor->getAccessorType() != requestedType)) {
    timeDelayIntegration_Accessor = PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType::create(requestedType);
    if (!timeDelayIntegration_Accessor) {
      throw uci::base::UCIException("Error in enableTimeDelayIntegration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timeDelayIntegration_Accessor;
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::clearTimeDelayIntegration() noexcept {
  timeDelayIntegration_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& PO_ComponentStatusFocalPlaneArrayChannelType::getPixelScaling_() const {
  if (pixelScaling_Accessor) {
    return *pixelScaling_Accessor;
  }
  throw uci::base::UCIException("Error in getPixelScaling(): An attempt was made to get an optional field that was not enabled, call hasPixelScaling() to determine if it is safe to call getPixelScaling()");
}

const uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& PO_ComponentStatusFocalPlaneArrayChannelType::getPixelScaling() const {
  return getPixelScaling_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& PO_ComponentStatusFocalPlaneArrayChannelType::getPixelScaling() {
  return getPixelScaling_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::setPixelScaling(const uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& accessor) {
  enablePixelScaling();
  if (&accessor != pixelScaling_Accessor.get()) {
    pixelScaling_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentStatusFocalPlaneArrayChannelType::hasPixelScaling() const noexcept {
  return static_cast<bool>(pixelScaling_Accessor);
}

uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& PO_ComponentStatusFocalPlaneArrayChannelType::enablePixelScaling(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayPixelScalingType : type};
  if ((!pixelScaling_Accessor) || (pixelScaling_Accessor->getAccessorType() != requestedType)) {
    pixelScaling_Accessor = PO_ComponentStatusFocalPlaneArrayPixelScalingType::create(requestedType);
    if (!pixelScaling_Accessor) {
      throw uci::base::UCIException("Error in enablePixelScaling(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pixelScaling_Accessor;
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::clearPixelScaling() noexcept {
  pixelScaling_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& PO_ComponentStatusFocalPlaneArrayChannelType::getPixelPolarity_() const {
  if (pixelPolarity_Accessor) {
    return *pixelPolarity_Accessor;
  }
  throw uci::base::UCIException("Error in getPixelPolarity(): An attempt was made to get an optional field that was not enabled, call hasPixelPolarity() to determine if it is safe to call getPixelPolarity()");
}

const uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& PO_ComponentStatusFocalPlaneArrayChannelType::getPixelPolarity() const {
  return getPixelPolarity_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& PO_ComponentStatusFocalPlaneArrayChannelType::getPixelPolarity() {
  return getPixelPolarity_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::setPixelPolarity(const uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& accessor) {
  enablePixelPolarity();
  if (&accessor != pixelPolarity_Accessor.get()) {
    pixelPolarity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentStatusFocalPlaneArrayChannelType::hasPixelPolarity() const noexcept {
  return static_cast<bool>(pixelPolarity_Accessor);
}

uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& PO_ComponentStatusFocalPlaneArrayChannelType::enablePixelPolarity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayPixelPolarityType : type};
  if ((!pixelPolarity_Accessor) || (pixelPolarity_Accessor->getAccessorType() != requestedType)) {
    pixelPolarity_Accessor = PO_ComponentStatusFocalPlaneArrayPixelPolarityType::create(requestedType);
    if (!pixelPolarity_Accessor) {
      throw uci::base::UCIException("Error in enablePixelPolarity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pixelPolarity_Accessor;
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::clearPixelPolarity() noexcept {
  pixelPolarity_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& PO_ComponentStatusFocalPlaneArrayChannelType::getCollectionTime_() const {
  if (collectionTime_Accessor) {
    return *collectionTime_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionTime(): An attempt was made to get an optional field that was not enabled, call hasCollectionTime() to determine if it is safe to call getCollectionTime()");
}

const uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& PO_ComponentStatusFocalPlaneArrayChannelType::getCollectionTime() const {
  return getCollectionTime_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& PO_ComponentStatusFocalPlaneArrayChannelType::getCollectionTime() {
  return getCollectionTime_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::setCollectionTime(const uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& accessor) {
  enableCollectionTime();
  if (&accessor != collectionTime_Accessor.get()) {
    collectionTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentStatusFocalPlaneArrayChannelType::hasCollectionTime() const noexcept {
  return static_cast<bool>(collectionTime_Accessor);
}

uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& PO_ComponentStatusFocalPlaneArrayChannelType::enableCollectionTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayCollectionTimeType : type};
  if ((!collectionTime_Accessor) || (collectionTime_Accessor->getAccessorType() != requestedType)) {
    collectionTime_Accessor = PO_ComponentStatusFocalPlaneArrayCollectionTimeType::create(requestedType);
    if (!collectionTime_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionTime_Accessor;
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::clearCollectionTime() noexcept {
  collectionTime_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& PO_ComponentStatusFocalPlaneArrayChannelType::getNonUniformityCorrection_() const {
  if (nonUniformityCorrection_Accessor) {
    return *nonUniformityCorrection_Accessor;
  }
  throw uci::base::UCIException("Error in getNonUniformityCorrection(): An attempt was made to get an optional field that was not enabled, call hasNonUniformityCorrection() to determine if it is safe to call getNonUniformityCorrection()");
}

const uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& PO_ComponentStatusFocalPlaneArrayChannelType::getNonUniformityCorrection() const {
  return getNonUniformityCorrection_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& PO_ComponentStatusFocalPlaneArrayChannelType::getNonUniformityCorrection() {
  return getNonUniformityCorrection_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::setNonUniformityCorrection(const uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& accessor) {
  enableNonUniformityCorrection();
  if (&accessor != nonUniformityCorrection_Accessor.get()) {
    nonUniformityCorrection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentStatusFocalPlaneArrayChannelType::hasNonUniformityCorrection() const noexcept {
  return static_cast<bool>(nonUniformityCorrection_Accessor);
}

uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& PO_ComponentStatusFocalPlaneArrayChannelType::enableNonUniformityCorrection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType : type};
  if ((!nonUniformityCorrection_Accessor) || (nonUniformityCorrection_Accessor->getAccessorType() != requestedType)) {
    nonUniformityCorrection_Accessor = PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType::create(requestedType);
    if (!nonUniformityCorrection_Accessor) {
      throw uci::base::UCIException("Error in enableNonUniformityCorrection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nonUniformityCorrection_Accessor;
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::clearNonUniformityCorrection() noexcept {
  nonUniformityCorrection_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& PO_ComponentStatusFocalPlaneArrayChannelType::getScanDirection_() const {
  if (scanDirection_Accessor) {
    return *scanDirection_Accessor;
  }
  throw uci::base::UCIException("Error in getScanDirection(): An attempt was made to get an optional field that was not enabled, call hasScanDirection() to determine if it is safe to call getScanDirection()");
}

const uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& PO_ComponentStatusFocalPlaneArrayChannelType::getScanDirection() const {
  return getScanDirection_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& PO_ComponentStatusFocalPlaneArrayChannelType::getScanDirection() {
  return getScanDirection_();
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::setScanDirection(const uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& accessor) {
  enableScanDirection();
  if (&accessor != scanDirection_Accessor.get()) {
    scanDirection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentStatusFocalPlaneArrayChannelType::hasScanDirection() const noexcept {
  return static_cast<bool>(scanDirection_Accessor);
}

uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& PO_ComponentStatusFocalPlaneArrayChannelType::enableScanDirection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayScanDirectionType : type};
  if ((!scanDirection_Accessor) || (scanDirection_Accessor->getAccessorType() != requestedType)) {
    scanDirection_Accessor = PO_ComponentStatusFocalPlaneArrayScanDirectionType::create(requestedType);
    if (!scanDirection_Accessor) {
      throw uci::base::UCIException("Error in enableScanDirection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *scanDirection_Accessor;
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::clearScanDirection() noexcept {
  scanDirection_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ComponentStatusFocalPlaneArrayChannelType> PO_ComponentStatusFocalPlaneArrayChannelType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayChannelType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayChannelType) ? boost::make_unique<PO_ComponentStatusFocalPlaneArrayChannelType>() : nullptr;
}

/**  */
namespace PO_ComponentStatusFocalPlaneArrayChannelType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentStatusFocalPlaneArrayChannelType"};
constexpr const char* ChannelID_Name{"ChannelID"};
constexpr const char* ChannelControlsStatus_Name{"ChannelControlsStatus"};
constexpr const char* OpticalBand_Name{"OpticalBand"};
constexpr const char* PixelAggregation_Name{"PixelAggregation"};
constexpr const char* TimeDelayIntegration_Name{"TimeDelayIntegration"};
constexpr const char* PixelScaling_Name{"PixelScaling"};
constexpr const char* PixelPolarity_Name{"PixelPolarity"};
constexpr const char* CollectionTime_Name{"CollectionTime"};
constexpr const char* NonUniformityCorrection_Name{"NonUniformityCorrection"};
constexpr const char* ScanDirection_Name{"ScanDirection"};

} // namespace PO_ComponentStatusFocalPlaneArrayChannelType_Names

void PO_ComponentStatusFocalPlaneArrayChannelType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentStatusFocalPlaneArrayChannelType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocalPlaneArrayChannelType_Names::ChannelID_Name) {
      PO_FPA_ChannelID_Type::deserialize(valueType.second, accessor.getChannelID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocalPlaneArrayChannelType_Names::ChannelControlsStatus_Name) {
      ComponentControlsStatusType::deserialize(valueType.second, accessor.getChannelControlsStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocalPlaneArrayChannelType_Names::OpticalBand_Name) {
      PO_ComponentStatusFocalPlaneArrayOpticalBandType::deserialize(valueType.second, accessor.getOpticalBand(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocalPlaneArrayChannelType_Names::PixelAggregation_Name) {
      PO_ComponentStatusFocalPlaneArrayPixelAggregationType::deserialize(valueType.second, accessor.enablePixelAggregation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocalPlaneArrayChannelType_Names::TimeDelayIntegration_Name) {
      PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType::deserialize(valueType.second, accessor.enableTimeDelayIntegration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocalPlaneArrayChannelType_Names::PixelScaling_Name) {
      PO_ComponentStatusFocalPlaneArrayPixelScalingType::deserialize(valueType.second, accessor.enablePixelScaling(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocalPlaneArrayChannelType_Names::PixelPolarity_Name) {
      PO_ComponentStatusFocalPlaneArrayPixelPolarityType::deserialize(valueType.second, accessor.enablePixelPolarity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocalPlaneArrayChannelType_Names::CollectionTime_Name) {
      PO_ComponentStatusFocalPlaneArrayCollectionTimeType::deserialize(valueType.second, accessor.enableCollectionTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocalPlaneArrayChannelType_Names::NonUniformityCorrection_Name) {
      PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType::deserialize(valueType.second, accessor.enableNonUniformityCorrection(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocalPlaneArrayChannelType_Names::ScanDirection_Name) {
      PO_ComponentStatusFocalPlaneArrayScanDirectionType::deserialize(valueType.second, accessor.enableScanDirection(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentStatusFocalPlaneArrayChannelType::serialize(const uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentStatusFocalPlaneArrayChannelType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentStatusFocalPlaneArrayChannelType_Names::Extern_Type_Name);
  }
  PO_FPA_ChannelID_Type::serialize(accessor.getChannelID(), node, PO_ComponentStatusFocalPlaneArrayChannelType_Names::ChannelID_Name);
  ComponentControlsStatusType::serialize(accessor.getChannelControlsStatus(), node, PO_ComponentStatusFocalPlaneArrayChannelType_Names::ChannelControlsStatus_Name);
  PO_ComponentStatusFocalPlaneArrayOpticalBandType::serialize(accessor.getOpticalBand(), node, PO_ComponentStatusFocalPlaneArrayChannelType_Names::OpticalBand_Name);
  if (accessor.hasPixelAggregation()) {
    PO_ComponentStatusFocalPlaneArrayPixelAggregationType::serialize(accessor.getPixelAggregation(), node, PO_ComponentStatusFocalPlaneArrayChannelType_Names::PixelAggregation_Name);
  }
  if (accessor.hasTimeDelayIntegration()) {
    PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType::serialize(accessor.getTimeDelayIntegration(), node, PO_ComponentStatusFocalPlaneArrayChannelType_Names::TimeDelayIntegration_Name);
  }
  if (accessor.hasPixelScaling()) {
    PO_ComponentStatusFocalPlaneArrayPixelScalingType::serialize(accessor.getPixelScaling(), node, PO_ComponentStatusFocalPlaneArrayChannelType_Names::PixelScaling_Name);
  }
  if (accessor.hasPixelPolarity()) {
    PO_ComponentStatusFocalPlaneArrayPixelPolarityType::serialize(accessor.getPixelPolarity(), node, PO_ComponentStatusFocalPlaneArrayChannelType_Names::PixelPolarity_Name);
  }
  if (accessor.hasCollectionTime()) {
    PO_ComponentStatusFocalPlaneArrayCollectionTimeType::serialize(accessor.getCollectionTime(), node, PO_ComponentStatusFocalPlaneArrayChannelType_Names::CollectionTime_Name);
  }
  if (accessor.hasNonUniformityCorrection()) {
    PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType::serialize(accessor.getNonUniformityCorrection(), node, PO_ComponentStatusFocalPlaneArrayChannelType_Names::NonUniformityCorrection_Name);
  }
  if (accessor.hasScanDirection()) {
    PO_ComponentStatusFocalPlaneArrayScanDirectionType::serialize(accessor.getScanDirection(), node, PO_ComponentStatusFocalPlaneArrayChannelType_Names::ScanDirection_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentStatusFocalPlaneArrayChannelType>().release());
}

uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& PO_ComponentStatusFocalPlaneArrayChannelType::create(const uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentStatusFocalPlaneArrayChannelType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentStatusFocalPlaneArrayChannelType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentStatusFocalPlaneArrayChannelType::destroy(uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentStatusFocalPlaneArrayChannelType*>(&accessor);
}

} // namespace type

} // namespace uci

