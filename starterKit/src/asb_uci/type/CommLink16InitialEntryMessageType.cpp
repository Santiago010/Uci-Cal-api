/** @file CommLink16InitialEntryMessageType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommLink16InitialEntryMessageType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommLink16InitialEntryMessageType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommLink16InitialEntryMessageType::CommLink16InitialEntryMessageType() = default;

CommLink16InitialEntryMessageType::~CommLink16InitialEntryMessageType() = default;

void CommLink16InitialEntryMessageType::copy(const uci::type::CommLink16InitialEntryMessageType& accessor) {
  copyImpl(accessor, false);
}

void CommLink16InitialEntryMessageType::copyImpl(const uci::type::CommLink16InitialEntryMessageType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommLink16InitialEntryMessageType&>(accessor);
    if (accessorImpl.hasControlTimeSlotInhibit()) {
      setControlTimeSlotInhibit(accessorImpl.getControlTimeSlotInhibit());
    } else {
      clearControlTimeSlotInhibit();
    }
    if (accessorImpl.hasPPLIA_TimeSlotInhibit()) {
      setPPLIA_TimeSlotInhibit(accessorImpl.getPPLIA_TimeSlotInhibit());
    } else {
      clearPPLIA_TimeSlotInhibit();
    }
    if (accessorImpl.hasPPLIB_TimeSlotInhibit()) {
      setPPLIB_TimeSlotInhibit(accessorImpl.getPPLIB_TimeSlotInhibit());
    } else {
      clearPPLIB_TimeSlotInhibit();
    }
    if (accessorImpl.hasRTTB_TimeSlotInhibit()) {
      setRTTB_TimeSlotInhibit(accessorImpl.getRTTB_TimeSlotInhibit());
    } else {
      clearRTTB_TimeSlotInhibit();
    }
    if (accessorImpl.hasVoiceA_TimeSlotInhibit()) {
      setVoiceA_TimeSlotInhibit(accessorImpl.getVoiceA_TimeSlotInhibit());
    } else {
      clearVoiceA_TimeSlotInhibit();
    }
    if (accessorImpl.hasVoiceBTimeSlotInhibit()) {
      setVoiceBTimeSlotInhibit(accessorImpl.getVoiceBTimeSlotInhibit());
    } else {
      clearVoiceBTimeSlotInhibit();
    }
  }
}

void CommLink16InitialEntryMessageType::reset() noexcept {
  clearControlTimeSlotInhibit();
  clearPPLIA_TimeSlotInhibit();
  clearPPLIB_TimeSlotInhibit();
  clearRTTB_TimeSlotInhibit();
  clearVoiceA_TimeSlotInhibit();
  clearVoiceBTimeSlotInhibit();
}

xs::Boolean CommLink16InitialEntryMessageType::getControlTimeSlotInhibit() const {
  if (controlTimeSlotInhibit_Accessor) {
    return *controlTimeSlotInhibit_Accessor;
  }
  throw uci::base::UCIException("Error in getControlTimeSlotInhibit(): An attempt was made to get an optional field that was not enabled, call hasControlTimeSlotInhibit() to determine if it is safe to call getControlTimeSlotInhibit()");
}

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::setControlTimeSlotInhibit(xs::Boolean value) {
  controlTimeSlotInhibit_Accessor = value;
  return *this;
}

bool CommLink16InitialEntryMessageType::hasControlTimeSlotInhibit() const noexcept {
  return controlTimeSlotInhibit_Accessor.has_value();
}

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::clearControlTimeSlotInhibit() noexcept {
  controlTimeSlotInhibit_Accessor.reset();
  return *this;
}

xs::Boolean CommLink16InitialEntryMessageType::getPPLIA_TimeSlotInhibit() const {
  if (pPLIA_TimeSlotInhibit_Accessor) {
    return *pPLIA_TimeSlotInhibit_Accessor;
  }
  throw uci::base::UCIException("Error in getPPLIA_TimeSlotInhibit(): An attempt was made to get an optional field that was not enabled, call hasPPLIA_TimeSlotInhibit() to determine if it is safe to call getPPLIA_TimeSlotInhibit()");
}

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::setPPLIA_TimeSlotInhibit(xs::Boolean value) {
  pPLIA_TimeSlotInhibit_Accessor = value;
  return *this;
}

bool CommLink16InitialEntryMessageType::hasPPLIA_TimeSlotInhibit() const noexcept {
  return pPLIA_TimeSlotInhibit_Accessor.has_value();
}

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::clearPPLIA_TimeSlotInhibit() noexcept {
  pPLIA_TimeSlotInhibit_Accessor.reset();
  return *this;
}

xs::Boolean CommLink16InitialEntryMessageType::getPPLIB_TimeSlotInhibit() const {
  if (pPLIB_TimeSlotInhibit_Accessor) {
    return *pPLIB_TimeSlotInhibit_Accessor;
  }
  throw uci::base::UCIException("Error in getPPLIB_TimeSlotInhibit(): An attempt was made to get an optional field that was not enabled, call hasPPLIB_TimeSlotInhibit() to determine if it is safe to call getPPLIB_TimeSlotInhibit()");
}

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::setPPLIB_TimeSlotInhibit(xs::Boolean value) {
  pPLIB_TimeSlotInhibit_Accessor = value;
  return *this;
}

bool CommLink16InitialEntryMessageType::hasPPLIB_TimeSlotInhibit() const noexcept {
  return pPLIB_TimeSlotInhibit_Accessor.has_value();
}

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::clearPPLIB_TimeSlotInhibit() noexcept {
  pPLIB_TimeSlotInhibit_Accessor.reset();
  return *this;
}

xs::Boolean CommLink16InitialEntryMessageType::getRTTB_TimeSlotInhibit() const {
  if (rTTB_TimeSlotInhibit_Accessor) {
    return *rTTB_TimeSlotInhibit_Accessor;
  }
  throw uci::base::UCIException("Error in getRTTB_TimeSlotInhibit(): An attempt was made to get an optional field that was not enabled, call hasRTTB_TimeSlotInhibit() to determine if it is safe to call getRTTB_TimeSlotInhibit()");
}

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::setRTTB_TimeSlotInhibit(xs::Boolean value) {
  rTTB_TimeSlotInhibit_Accessor = value;
  return *this;
}

bool CommLink16InitialEntryMessageType::hasRTTB_TimeSlotInhibit() const noexcept {
  return rTTB_TimeSlotInhibit_Accessor.has_value();
}

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::clearRTTB_TimeSlotInhibit() noexcept {
  rTTB_TimeSlotInhibit_Accessor.reset();
  return *this;
}

xs::Boolean CommLink16InitialEntryMessageType::getVoiceA_TimeSlotInhibit() const {
  if (voiceA_TimeSlotInhibit_Accessor) {
    return *voiceA_TimeSlotInhibit_Accessor;
  }
  throw uci::base::UCIException("Error in getVoiceA_TimeSlotInhibit(): An attempt was made to get an optional field that was not enabled, call hasVoiceA_TimeSlotInhibit() to determine if it is safe to call getVoiceA_TimeSlotInhibit()");
}

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::setVoiceA_TimeSlotInhibit(xs::Boolean value) {
  voiceA_TimeSlotInhibit_Accessor = value;
  return *this;
}

bool CommLink16InitialEntryMessageType::hasVoiceA_TimeSlotInhibit() const noexcept {
  return voiceA_TimeSlotInhibit_Accessor.has_value();
}

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::clearVoiceA_TimeSlotInhibit() noexcept {
  voiceA_TimeSlotInhibit_Accessor.reset();
  return *this;
}

xs::Boolean CommLink16InitialEntryMessageType::getVoiceBTimeSlotInhibit() const {
  if (voiceBTimeSlotInhibit_Accessor) {
    return *voiceBTimeSlotInhibit_Accessor;
  }
  throw uci::base::UCIException("Error in getVoiceBTimeSlotInhibit(): An attempt was made to get an optional field that was not enabled, call hasVoiceBTimeSlotInhibit() to determine if it is safe to call getVoiceBTimeSlotInhibit()");
}

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::setVoiceBTimeSlotInhibit(xs::Boolean value) {
  voiceBTimeSlotInhibit_Accessor = value;
  return *this;
}

bool CommLink16InitialEntryMessageType::hasVoiceBTimeSlotInhibit() const noexcept {
  return voiceBTimeSlotInhibit_Accessor.has_value();
}

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::clearVoiceBTimeSlotInhibit() noexcept {
  voiceBTimeSlotInhibit_Accessor.reset();
  return *this;
}

std::unique_ptr<CommLink16InitialEntryMessageType> CommLink16InitialEntryMessageType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commLink16InitialEntryMessageType : type};
  return (requestedType == uci::type::accessorType::commLink16InitialEntryMessageType) ? boost::make_unique<CommLink16InitialEntryMessageType>() : nullptr;
}

/**  */
namespace CommLink16InitialEntryMessageType_Names {

constexpr const char* Extern_Type_Name{"CommLink16InitialEntryMessageType"};
constexpr const char* ControlTimeSlotInhibit_Name{"ControlTimeSlotInhibit"};
constexpr const char* PPLIA_TimeSlotInhibit_Name{"PPLIA_TimeSlotInhibit"};
constexpr const char* PPLIB_TimeSlotInhibit_Name{"PPLIB_TimeSlotInhibit"};
constexpr const char* RTTB_TimeSlotInhibit_Name{"RTTB_TimeSlotInhibit"};
constexpr const char* VoiceA_TimeSlotInhibit_Name{"VoiceA_TimeSlotInhibit"};
constexpr const char* VoiceBTimeSlotInhibit_Name{"VoiceBTimeSlotInhibit"};

} // namespace CommLink16InitialEntryMessageType_Names

void CommLink16InitialEntryMessageType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommLink16InitialEntryMessageType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommLink16InitialEntryMessageType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommLink16InitialEntryMessageType_Names::ControlTimeSlotInhibit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setControlTimeSlotInhibit(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16InitialEntryMessageType_Names::PPLIA_TimeSlotInhibit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPPLIA_TimeSlotInhibit(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16InitialEntryMessageType_Names::PPLIB_TimeSlotInhibit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPPLIB_TimeSlotInhibit(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16InitialEntryMessageType_Names::RTTB_TimeSlotInhibit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRTTB_TimeSlotInhibit(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16InitialEntryMessageType_Names::VoiceA_TimeSlotInhibit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceA_TimeSlotInhibit(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16InitialEntryMessageType_Names::VoiceBTimeSlotInhibit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceBTimeSlotInhibit(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string CommLink16InitialEntryMessageType::serialize(const uci::type::CommLink16InitialEntryMessageType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommLink16InitialEntryMessageType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommLink16InitialEntryMessageType_Names::Extern_Type_Name);
  }
  if (accessor.hasControlTimeSlotInhibit()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getControlTimeSlotInhibit(), node, CommLink16InitialEntryMessageType_Names::ControlTimeSlotInhibit_Name);
  }
  if (accessor.hasPPLIA_TimeSlotInhibit()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPPLIA_TimeSlotInhibit(), node, CommLink16InitialEntryMessageType_Names::PPLIA_TimeSlotInhibit_Name);
  }
  if (accessor.hasPPLIB_TimeSlotInhibit()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getPPLIB_TimeSlotInhibit(), node, CommLink16InitialEntryMessageType_Names::PPLIB_TimeSlotInhibit_Name);
  }
  if (accessor.hasRTTB_TimeSlotInhibit()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getRTTB_TimeSlotInhibit(), node, CommLink16InitialEntryMessageType_Names::RTTB_TimeSlotInhibit_Name);
  }
  if (accessor.hasVoiceA_TimeSlotInhibit()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getVoiceA_TimeSlotInhibit(), node, CommLink16InitialEntryMessageType_Names::VoiceA_TimeSlotInhibit_Name);
  }
  if (accessor.hasVoiceBTimeSlotInhibit()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getVoiceBTimeSlotInhibit(), node, CommLink16InitialEntryMessageType_Names::VoiceBTimeSlotInhibit_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommLink16InitialEntryMessageType>().release());
}

uci::type::CommLink16InitialEntryMessageType& CommLink16InitialEntryMessageType::create(const uci::type::CommLink16InitialEntryMessageType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommLink16InitialEntryMessageType> newAccessor{boost::make_unique<asb_uci::type::CommLink16InitialEntryMessageType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommLink16InitialEntryMessageType::destroy(uci::type::CommLink16InitialEntryMessageType& accessor) {
  delete dynamic_cast<asb_uci::type::CommLink16InitialEntryMessageType*>(&accessor);
}

} // namespace type

} // namespace uci

