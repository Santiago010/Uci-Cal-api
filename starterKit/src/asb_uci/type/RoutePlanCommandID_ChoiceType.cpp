/** @file RoutePlanCommandID_ChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RoutePlanCommandID_ChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommandID_Type.h"
#include "../../../include/asb_uci/type/MissionPlanCommandID_Type.h"
#include "../../../include/asb_uci/type/RoutePlanCommandID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommandID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanCommandID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RoutePlanCommandID_ChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RoutePlanCommandID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RoutePlanCommandID_ChoiceType::RoutePlanCommandID_ChoiceType() = default;

RoutePlanCommandID_ChoiceType::~RoutePlanCommandID_ChoiceType() = default;

void RoutePlanCommandID_ChoiceType::copy(const uci::type::RoutePlanCommandID_ChoiceType& accessor) {
  copyImpl(accessor, false);
}

void RoutePlanCommandID_ChoiceType::copyImpl(const uci::type::RoutePlanCommandID_ChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RoutePlanCommandID_ChoiceType&>(accessor);
    if (accessorImpl.routePlanCommandID_Accessor) {
      setRoutePlanCommandID(*(accessorImpl.routePlanCommandID_Accessor));
    } else {
      routePlanCommandID_Accessor.reset();
    }
    if (accessorImpl.routePlanValidationCommandID_Accessor) {
      setRoutePlanValidationCommandID(*(accessorImpl.routePlanValidationCommandID_Accessor));
    } else {
      routePlanValidationCommandID_Accessor.reset();
    }
    if (accessorImpl.missionPlanCommandID_Accessor) {
      setMissionPlanCommandID(*(accessorImpl.missionPlanCommandID_Accessor));
    } else {
      missionPlanCommandID_Accessor.reset();
    }
    if (accessorImpl.missionPlanValidationCommandID_Accessor) {
      setMissionPlanValidationCommandID(*(accessorImpl.missionPlanValidationCommandID_Accessor));
    } else {
      missionPlanValidationCommandID_Accessor.reset();
    }
  }
}

void RoutePlanCommandID_ChoiceType::reset() noexcept {
  routePlanCommandID_Accessor.reset();
  routePlanValidationCommandID_Accessor.reset();
  missionPlanCommandID_Accessor.reset();
  missionPlanValidationCommandID_Accessor.reset();
}

uci::type::RoutePlanCommandID_ChoiceType::RoutePlanCommandID_ChoiceTypeChoice RoutePlanCommandID_ChoiceType::getRoutePlanCommandID_ChoiceTypeChoiceOrdinal() const noexcept {
  if (routePlanCommandID_Accessor) {
    return ROUTEPLANCOMMANDID_CHOICETYPE_CHOICE_ROUTEPLANCOMMANDID;
  }
  if (routePlanValidationCommandID_Accessor) {
    return ROUTEPLANCOMMANDID_CHOICETYPE_CHOICE_ROUTEPLANVALIDATIONCOMMANDID;
  }
  if (missionPlanCommandID_Accessor) {
    return ROUTEPLANCOMMANDID_CHOICETYPE_CHOICE_MISSIONPLANCOMMANDID;
  }
  if (missionPlanValidationCommandID_Accessor) {
    return ROUTEPLANCOMMANDID_CHOICETYPE_CHOICE_MISSIONPLANVALIDATIONCOMMANDID;
  }
  return ROUTEPLANCOMMANDID_CHOICETYPE_CHOICE_NONE;
}

uci::type::RoutePlanCommandID_ChoiceType& RoutePlanCommandID_ChoiceType::setRoutePlanCommandID_ChoiceTypeChoiceOrdinal(uci::type::RoutePlanCommandID_ChoiceType::RoutePlanCommandID_ChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ROUTEPLANCOMMANDID_CHOICETYPE_CHOICE_ROUTEPLANCOMMANDID:
      chooseRoutePlanCommandID("setRoutePlanCommandID_ChoiceTypeChoiceOrdinal", type);
      break;
    case ROUTEPLANCOMMANDID_CHOICETYPE_CHOICE_ROUTEPLANVALIDATIONCOMMANDID:
      chooseRoutePlanValidationCommandID("setRoutePlanCommandID_ChoiceTypeChoiceOrdinal", type);
      break;
    case ROUTEPLANCOMMANDID_CHOICETYPE_CHOICE_MISSIONPLANCOMMANDID:
      chooseMissionPlanCommandID("setRoutePlanCommandID_ChoiceTypeChoiceOrdinal", type);
      break;
    case ROUTEPLANCOMMANDID_CHOICETYPE_CHOICE_MISSIONPLANVALIDATIONCOMMANDID:
      chooseMissionPlanValidationCommandID("setRoutePlanCommandID_ChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setRoutePlanCommandID_ChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::RoutePlanCommandID_Type& RoutePlanCommandID_ChoiceType::getRoutePlanCommandID_() const {
  if (routePlanCommandID_Accessor) {
    return *routePlanCommandID_Accessor;
  }
  throw uci::base::UCIException("Error in getRoutePlanCommandID(): Unable to get RoutePlanCommandID, field not selected");
}

const uci::type::RoutePlanCommandID_Type& RoutePlanCommandID_ChoiceType::getRoutePlanCommandID() const {
  return getRoutePlanCommandID_();
}

uci::type::RoutePlanCommandID_Type& RoutePlanCommandID_ChoiceType::getRoutePlanCommandID() {
  return getRoutePlanCommandID_();
}

uci::type::RoutePlanCommandID_ChoiceType& RoutePlanCommandID_ChoiceType::setRoutePlanCommandID(const uci::type::RoutePlanCommandID_Type& accessor) {
  chooseRoutePlanCommandID();
  if (&accessor != routePlanCommandID_Accessor.get()) {
    routePlanCommandID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RoutePlanCommandID_ChoiceType::isRoutePlanCommandID() const noexcept {
  return static_cast<bool>(routePlanCommandID_Accessor);
}

uci::type::RoutePlanCommandID_Type& RoutePlanCommandID_ChoiceType::chooseRoutePlanCommandID(const std::string& method, uci::base::accessorType::AccessorType type) {
  routePlanValidationCommandID_Accessor.reset();
  missionPlanCommandID_Accessor.reset();
  missionPlanValidationCommandID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePlanCommandID_Type : type};
  if ((!routePlanCommandID_Accessor) || (routePlanCommandID_Accessor->getAccessorType() != requestedType)) {
    routePlanCommandID_Accessor = RoutePlanCommandID_Type::create(type);
    if (!routePlanCommandID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routePlanCommandID_Accessor;
}

uci::type::RoutePlanCommandID_Type& RoutePlanCommandID_ChoiceType::chooseRoutePlanCommandID(uci::base::accessorType::AccessorType type) {
  return chooseRoutePlanCommandID("chooseRoutePlanCommandID", type);
}

uci::type::CommandID_Type& RoutePlanCommandID_ChoiceType::getRoutePlanValidationCommandID_() const {
  if (routePlanValidationCommandID_Accessor) {
    return *routePlanValidationCommandID_Accessor;
  }
  throw uci::base::UCIException("Error in getRoutePlanValidationCommandID(): Unable to get RoutePlanValidationCommandID, field not selected");
}

const uci::type::CommandID_Type& RoutePlanCommandID_ChoiceType::getRoutePlanValidationCommandID() const {
  return getRoutePlanValidationCommandID_();
}

uci::type::CommandID_Type& RoutePlanCommandID_ChoiceType::getRoutePlanValidationCommandID() {
  return getRoutePlanValidationCommandID_();
}

uci::type::RoutePlanCommandID_ChoiceType& RoutePlanCommandID_ChoiceType::setRoutePlanValidationCommandID(const uci::type::CommandID_Type& accessor) {
  chooseRoutePlanValidationCommandID();
  if (&accessor != routePlanValidationCommandID_Accessor.get()) {
    routePlanValidationCommandID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RoutePlanCommandID_ChoiceType::isRoutePlanValidationCommandID() const noexcept {
  return static_cast<bool>(routePlanValidationCommandID_Accessor);
}

uci::type::CommandID_Type& RoutePlanCommandID_ChoiceType::chooseRoutePlanValidationCommandID(const std::string& method, uci::base::accessorType::AccessorType type) {
  routePlanCommandID_Accessor.reset();
  missionPlanCommandID_Accessor.reset();
  missionPlanValidationCommandID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commandID_Type : type};
  if ((!routePlanValidationCommandID_Accessor) || (routePlanValidationCommandID_Accessor->getAccessorType() != requestedType)) {
    routePlanValidationCommandID_Accessor = CommandID_Type::create(type);
    if (!routePlanValidationCommandID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routePlanValidationCommandID_Accessor;
}

uci::type::CommandID_Type& RoutePlanCommandID_ChoiceType::chooseRoutePlanValidationCommandID(uci::base::accessorType::AccessorType type) {
  return chooseRoutePlanValidationCommandID("chooseRoutePlanValidationCommandID", type);
}

uci::type::MissionPlanCommandID_Type& RoutePlanCommandID_ChoiceType::getMissionPlanCommandID_() const {
  if (missionPlanCommandID_Accessor) {
    return *missionPlanCommandID_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionPlanCommandID(): Unable to get MissionPlanCommandID, field not selected");
}

const uci::type::MissionPlanCommandID_Type& RoutePlanCommandID_ChoiceType::getMissionPlanCommandID() const {
  return getMissionPlanCommandID_();
}

uci::type::MissionPlanCommandID_Type& RoutePlanCommandID_ChoiceType::getMissionPlanCommandID() {
  return getMissionPlanCommandID_();
}

uci::type::RoutePlanCommandID_ChoiceType& RoutePlanCommandID_ChoiceType::setMissionPlanCommandID(const uci::type::MissionPlanCommandID_Type& accessor) {
  chooseMissionPlanCommandID();
  if (&accessor != missionPlanCommandID_Accessor.get()) {
    missionPlanCommandID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RoutePlanCommandID_ChoiceType::isMissionPlanCommandID() const noexcept {
  return static_cast<bool>(missionPlanCommandID_Accessor);
}

uci::type::MissionPlanCommandID_Type& RoutePlanCommandID_ChoiceType::chooseMissionPlanCommandID(const std::string& method, uci::base::accessorType::AccessorType type) {
  routePlanCommandID_Accessor.reset();
  routePlanValidationCommandID_Accessor.reset();
  missionPlanValidationCommandID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanCommandID_Type : type};
  if ((!missionPlanCommandID_Accessor) || (missionPlanCommandID_Accessor->getAccessorType() != requestedType)) {
    missionPlanCommandID_Accessor = MissionPlanCommandID_Type::create(type);
    if (!missionPlanCommandID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionPlanCommandID_Accessor;
}

uci::type::MissionPlanCommandID_Type& RoutePlanCommandID_ChoiceType::chooseMissionPlanCommandID(uci::base::accessorType::AccessorType type) {
  return chooseMissionPlanCommandID("chooseMissionPlanCommandID", type);
}

uci::type::CommandID_Type& RoutePlanCommandID_ChoiceType::getMissionPlanValidationCommandID_() const {
  if (missionPlanValidationCommandID_Accessor) {
    return *missionPlanValidationCommandID_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionPlanValidationCommandID(): Unable to get MissionPlanValidationCommandID, field not selected");
}

const uci::type::CommandID_Type& RoutePlanCommandID_ChoiceType::getMissionPlanValidationCommandID() const {
  return getMissionPlanValidationCommandID_();
}

uci::type::CommandID_Type& RoutePlanCommandID_ChoiceType::getMissionPlanValidationCommandID() {
  return getMissionPlanValidationCommandID_();
}

uci::type::RoutePlanCommandID_ChoiceType& RoutePlanCommandID_ChoiceType::setMissionPlanValidationCommandID(const uci::type::CommandID_Type& accessor) {
  chooseMissionPlanValidationCommandID();
  if (&accessor != missionPlanValidationCommandID_Accessor.get()) {
    missionPlanValidationCommandID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RoutePlanCommandID_ChoiceType::isMissionPlanValidationCommandID() const noexcept {
  return static_cast<bool>(missionPlanValidationCommandID_Accessor);
}

uci::type::CommandID_Type& RoutePlanCommandID_ChoiceType::chooseMissionPlanValidationCommandID(const std::string& method, uci::base::accessorType::AccessorType type) {
  routePlanCommandID_Accessor.reset();
  routePlanValidationCommandID_Accessor.reset();
  missionPlanCommandID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commandID_Type : type};
  if ((!missionPlanValidationCommandID_Accessor) || (missionPlanValidationCommandID_Accessor->getAccessorType() != requestedType)) {
    missionPlanValidationCommandID_Accessor = CommandID_Type::create(type);
    if (!missionPlanValidationCommandID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionPlanValidationCommandID_Accessor;
}

uci::type::CommandID_Type& RoutePlanCommandID_ChoiceType::chooseMissionPlanValidationCommandID(uci::base::accessorType::AccessorType type) {
  return chooseMissionPlanValidationCommandID("chooseMissionPlanValidationCommandID", type);
}

std::unique_ptr<RoutePlanCommandID_ChoiceType> RoutePlanCommandID_ChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePlanCommandID_ChoiceType : type};
  return (requestedType == uci::type::accessorType::routePlanCommandID_ChoiceType) ? boost::make_unique<RoutePlanCommandID_ChoiceType>() : nullptr;
}

/**  */
namespace RoutePlanCommandID_ChoiceType_Names {

constexpr const char* Extern_Type_Name{"RoutePlanCommandID_ChoiceType"};
constexpr const char* RoutePlanCommandID_Name{"RoutePlanCommandID"};
constexpr const char* RoutePlanValidationCommandID_Name{"RoutePlanValidationCommandID"};
constexpr const char* MissionPlanCommandID_Name{"MissionPlanCommandID"};
constexpr const char* MissionPlanValidationCommandID_Name{"MissionPlanValidationCommandID"};

} // namespace RoutePlanCommandID_ChoiceType_Names

void RoutePlanCommandID_ChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RoutePlanCommandID_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RoutePlanCommandID_ChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RoutePlanCommandID_ChoiceType_Names::RoutePlanCommandID_Name) {
      RoutePlanCommandID_Type::deserialize(valueType.second, accessor.chooseRoutePlanCommandID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePlanCommandID_ChoiceType_Names::RoutePlanValidationCommandID_Name) {
      CommandID_Type::deserialize(valueType.second, accessor.chooseRoutePlanValidationCommandID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePlanCommandID_ChoiceType_Names::MissionPlanCommandID_Name) {
      MissionPlanCommandID_Type::deserialize(valueType.second, accessor.chooseMissionPlanCommandID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePlanCommandID_ChoiceType_Names::MissionPlanValidationCommandID_Name) {
      CommandID_Type::deserialize(valueType.second, accessor.chooseMissionPlanValidationCommandID(), nodeName, nsPrefix);
    }
  }
}

std::string RoutePlanCommandID_ChoiceType::serialize(const uci::type::RoutePlanCommandID_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RoutePlanCommandID_ChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RoutePlanCommandID_ChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isRoutePlanCommandID()) {
    RoutePlanCommandID_Type::serialize(accessor.getRoutePlanCommandID(), node, RoutePlanCommandID_ChoiceType_Names::RoutePlanCommandID_Name);
  } else if (accessor.isRoutePlanValidationCommandID()) {
    CommandID_Type::serialize(accessor.getRoutePlanValidationCommandID(), node, RoutePlanCommandID_ChoiceType_Names::RoutePlanValidationCommandID_Name);
  } else if (accessor.isMissionPlanCommandID()) {
    MissionPlanCommandID_Type::serialize(accessor.getMissionPlanCommandID(), node, RoutePlanCommandID_ChoiceType_Names::MissionPlanCommandID_Name);
  } else if (accessor.isMissionPlanValidationCommandID()) {
    CommandID_Type::serialize(accessor.getMissionPlanValidationCommandID(), node, RoutePlanCommandID_ChoiceType_Names::MissionPlanValidationCommandID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RoutePlanCommandID_ChoiceType& RoutePlanCommandID_ChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RoutePlanCommandID_ChoiceType>().release());
}

uci::type::RoutePlanCommandID_ChoiceType& RoutePlanCommandID_ChoiceType::create(const uci::type::RoutePlanCommandID_ChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RoutePlanCommandID_ChoiceType> newAccessor{boost::make_unique<asb_uci::type::RoutePlanCommandID_ChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RoutePlanCommandID_ChoiceType::destroy(uci::type::RoutePlanCommandID_ChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::RoutePlanCommandID_ChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

