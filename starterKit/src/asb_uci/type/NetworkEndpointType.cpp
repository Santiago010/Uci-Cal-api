/** @file NetworkEndpointType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/NetworkEndpointType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/IPv4_EndpointType.h"
#include "asb_uci/type/IPv6_EndpointType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/IPv4_EndpointType.h"
#include "uci/type/IPv6_EndpointType.h"
#include "uci/type/NetworkEndpointType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

NetworkEndpointType::NetworkEndpointType() = default;

NetworkEndpointType::~NetworkEndpointType() = default;

void NetworkEndpointType::copy(const uci::type::NetworkEndpointType& accessor) {
  copyImpl(accessor, false);
}

void NetworkEndpointType::copyImpl(const uci::type::NetworkEndpointType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const NetworkEndpointType&>(accessor);
    if (accessorImpl.iPv4_Endpoint_Accessor) {
      setIPv4_Endpoint(*(accessorImpl.iPv4_Endpoint_Accessor));
    } else {
      iPv4_Endpoint_Accessor.reset();
    }
    if (accessorImpl.iPv6_Endpoint_Accessor) {
      setIPv6_Endpoint(*(accessorImpl.iPv6_Endpoint_Accessor));
    } else {
      iPv6_Endpoint_Accessor.reset();
    }
  }
}

void NetworkEndpointType::reset() noexcept {
  iPv4_Endpoint_Accessor.reset();
  iPv6_Endpoint_Accessor.reset();
}

uci::type::NetworkEndpointType::NetworkEndpointTypeChoice NetworkEndpointType::getNetworkEndpointTypeChoiceOrdinal() const noexcept {
  if (iPv4_Endpoint_Accessor) {
    return NETWORKENDPOINTTYPE_CHOICE_IPV4_ENDPOINT;
  }
  if (iPv6_Endpoint_Accessor) {
    return NETWORKENDPOINTTYPE_CHOICE_IPV6_ENDPOINT;
  }
  return NETWORKENDPOINTTYPE_CHOICE_NONE;
}

uci::type::NetworkEndpointType& NetworkEndpointType::setNetworkEndpointTypeChoiceOrdinal(uci::type::NetworkEndpointType::NetworkEndpointTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case NETWORKENDPOINTTYPE_CHOICE_IPV4_ENDPOINT:
      chooseIPv4_Endpoint("setNetworkEndpointTypeChoiceOrdinal", type);
      break;
    case NETWORKENDPOINTTYPE_CHOICE_IPV6_ENDPOINT:
      chooseIPv6_Endpoint("setNetworkEndpointTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setNetworkEndpointTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::IPv4_EndpointType& NetworkEndpointType::getIPv4_Endpoint_() const {
  if (iPv4_Endpoint_Accessor) {
    return *iPv4_Endpoint_Accessor;
  }
  throw uci::base::UCIException("Error in getIPv4_Endpoint(): Unable to get IPv4_Endpoint, field not selected");
}

const uci::type::IPv4_EndpointType& NetworkEndpointType::getIPv4_Endpoint() const {
  return getIPv4_Endpoint_();
}

uci::type::IPv4_EndpointType& NetworkEndpointType::getIPv4_Endpoint() {
  return getIPv4_Endpoint_();
}

uci::type::NetworkEndpointType& NetworkEndpointType::setIPv4_Endpoint(const uci::type::IPv4_EndpointType& accessor) {
  chooseIPv4_Endpoint();
  if (&accessor != iPv4_Endpoint_Accessor.get()) {
    iPv4_Endpoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NetworkEndpointType::isIPv4_Endpoint() const noexcept {
  return static_cast<bool>(iPv4_Endpoint_Accessor);
}

uci::type::IPv4_EndpointType& NetworkEndpointType::chooseIPv4_Endpoint(const std::string& method, uci::base::accessorType::AccessorType type) {
  iPv6_Endpoint_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iPv4_EndpointType : type};
  if ((!iPv4_Endpoint_Accessor) || (iPv4_Endpoint_Accessor->getAccessorType() != requestedType)) {
    iPv4_Endpoint_Accessor = IPv4_EndpointType::create(type);
    if (!iPv4_Endpoint_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *iPv4_Endpoint_Accessor;
}

uci::type::IPv4_EndpointType& NetworkEndpointType::chooseIPv4_Endpoint(uci::base::accessorType::AccessorType type) {
  return chooseIPv4_Endpoint("chooseIPv4_Endpoint", type);
}

uci::type::IPv6_EndpointType& NetworkEndpointType::getIPv6_Endpoint_() const {
  if (iPv6_Endpoint_Accessor) {
    return *iPv6_Endpoint_Accessor;
  }
  throw uci::base::UCIException("Error in getIPv6_Endpoint(): Unable to get IPv6_Endpoint, field not selected");
}

const uci::type::IPv6_EndpointType& NetworkEndpointType::getIPv6_Endpoint() const {
  return getIPv6_Endpoint_();
}

uci::type::IPv6_EndpointType& NetworkEndpointType::getIPv6_Endpoint() {
  return getIPv6_Endpoint_();
}

uci::type::NetworkEndpointType& NetworkEndpointType::setIPv6_Endpoint(const uci::type::IPv6_EndpointType& accessor) {
  chooseIPv6_Endpoint();
  if (&accessor != iPv6_Endpoint_Accessor.get()) {
    iPv6_Endpoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool NetworkEndpointType::isIPv6_Endpoint() const noexcept {
  return static_cast<bool>(iPv6_Endpoint_Accessor);
}

uci::type::IPv6_EndpointType& NetworkEndpointType::chooseIPv6_Endpoint(const std::string& method, uci::base::accessorType::AccessorType type) {
  iPv4_Endpoint_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iPv6_EndpointType : type};
  if ((!iPv6_Endpoint_Accessor) || (iPv6_Endpoint_Accessor->getAccessorType() != requestedType)) {
    iPv6_Endpoint_Accessor = IPv6_EndpointType::create(type);
    if (!iPv6_Endpoint_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *iPv6_Endpoint_Accessor;
}

uci::type::IPv6_EndpointType& NetworkEndpointType::chooseIPv6_Endpoint(uci::base::accessorType::AccessorType type) {
  return chooseIPv6_Endpoint("chooseIPv6_Endpoint", type);
}

std::unique_ptr<NetworkEndpointType> NetworkEndpointType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::networkEndpointType : type};
  return (requestedType == uci::type::accessorType::networkEndpointType) ? boost::make_unique<NetworkEndpointType>() : nullptr;
}

/**  */
namespace NetworkEndpointType_Names {

constexpr const char* Extern_Type_Name{"NetworkEndpointType"};
constexpr const char* IPv4_Endpoint_Name{"IPv4_Endpoint"};
constexpr const char* IPv6_Endpoint_Name{"IPv6_Endpoint"};

} // namespace NetworkEndpointType_Names

void NetworkEndpointType::deserialize(const boost::property_tree::ptree& propTree, uci::type::NetworkEndpointType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = NetworkEndpointType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + NetworkEndpointType_Names::IPv4_Endpoint_Name) {
      IPv4_EndpointType::deserialize(valueType.second, accessor.chooseIPv4_Endpoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NetworkEndpointType_Names::IPv6_Endpoint_Name) {
      IPv6_EndpointType::deserialize(valueType.second, accessor.chooseIPv6_Endpoint(), nodeName, nsPrefix);
    }
  }
}

std::string NetworkEndpointType::serialize(const uci::type::NetworkEndpointType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? NetworkEndpointType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, NetworkEndpointType_Names::Extern_Type_Name);
  }
  if (accessor.isIPv4_Endpoint()) {
    IPv4_EndpointType::serialize(accessor.getIPv4_Endpoint(), node, NetworkEndpointType_Names::IPv4_Endpoint_Name);
  } else if (accessor.isIPv6_Endpoint()) {
    IPv6_EndpointType::serialize(accessor.getIPv6_Endpoint(), node, NetworkEndpointType_Names::IPv6_Endpoint_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::NetworkEndpointType& NetworkEndpointType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::NetworkEndpointType>().release());
}

uci::type::NetworkEndpointType& NetworkEndpointType::create(const uci::type::NetworkEndpointType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::NetworkEndpointType> newAccessor{boost::make_unique<asb_uci::type::NetworkEndpointType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void NetworkEndpointType::destroy(uci::type::NetworkEndpointType& accessor) {
  delete dynamic_cast<asb_uci::type::NetworkEndpointType*>(&accessor);
}

} // namespace type

} // namespace uci

