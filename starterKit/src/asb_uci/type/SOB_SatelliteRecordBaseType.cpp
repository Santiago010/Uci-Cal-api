/** @file SOB_SatelliteRecordBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SOB_SatelliteRecordBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EOB_RecordID_Type.h"
#include "asb_uci/type/FileMetadataID_Type.h"
#include "asb_uci/type/LaunchObservationID_Type.h"
#include "asb_uci/type/LaunchStaticDetailsType.h"
#include "asb_uci/type/OB_OperationalStatusEnum.h"
#include "asb_uci/type/OrbitKinematicsParametersType.h"
#include "asb_uci/type/OrbitRegimeType.h"
#include "asb_uci/type/OrderOfBattleEmitterType.h"
#include "asb_uci/type/OrderOfBattleTimestampsType.h"
#include "asb_uci/type/ProductMetadataID_Type.h"
#include "asb_uci/type/SOB_EquipmentType.h"
#include "asb_uci/type/SOB_SatelliteRecordID_Type.h"
#include "asb_uci/type/SOB_SatelliteRecordRemoveInfoType.h"
#include "asb_uci/type/SatelliteCharacteristicsOverrideType.h"
#include "asb_uci/type/SatelliteEnduranceType.h"
#include "asb_uci/type/SatelliteIdentityType.h"
#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_uci/type/VisibleString512Type.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/EOB_RecordID_Type.h"
#include "uci/type/FileMetadataID_Type.h"
#include "uci/type/LaunchObservationID_Type.h"
#include "uci/type/LaunchStaticDetailsType.h"
#include "uci/type/MassType.h"
#include "uci/type/OB_OperationalStatusEnum.h"
#include "uci/type/OrbitKinematicsParametersType.h"
#include "uci/type/OrbitRegimeType.h"
#include "uci/type/OrderOfBattleEmitterType.h"
#include "uci/type/OrderOfBattleTimestampsType.h"
#include "uci/type/ProductMetadataID_Type.h"
#include "uci/type/SOB_EquipmentType.h"
#include "uci/type/SOB_SatelliteRecordBaseType.h"
#include "uci/type/SOB_SatelliteRecordID_Type.h"
#include "uci/type/SOB_SatelliteRecordRemoveInfoType.h"
#include "uci/type/SatelliteCharacteristicsOverrideType.h"
#include "uci/type/SatelliteEnduranceType.h"
#include "uci/type/SatelliteIdentityType.h"
#include "uci/type/VisibleString1024Type.h"
#include "uci/type/VisibleString512Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SOB_SatelliteRecordBaseType::SOB_SatelliteRecordBaseType()
  : sOB_SatelliteRecordID_Accessor{boost::make_unique<SOB_SatelliteRecordID_Type>()},
    equipment_Accessor{boost::make_unique<Equipment>(0, SIZE_MAX)},
    operationalStatus_Accessor{boost::make_unique<OperationalStatus>(0, 24)},
    relatedSatelliteRecordID_Accessor{boost::make_unique<RelatedSatelliteRecordID>(0, SIZE_MAX)},
    productID_Accessor{boost::make_unique<ProductID>(0, SIZE_MAX)},
    fileID_Accessor{boost::make_unique<FileID>(0, SIZE_MAX)},
    emitter_Accessor{boost::make_unique<Emitter>(0, SIZE_MAX)} {
}

SOB_SatelliteRecordBaseType::~SOB_SatelliteRecordBaseType() = default;

void SOB_SatelliteRecordBaseType::copy(const uci::type::SOB_SatelliteRecordBaseType& accessor) {
  copyImpl(accessor, false);
}

void SOB_SatelliteRecordBaseType::copyImpl(const uci::type::SOB_SatelliteRecordBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::sOB_SatelliteRecordBaseType)) {
      const auto& accessorImpl = dynamic_cast<const SOB_SatelliteRecordBaseType&>(accessor);
      setSOB_SatelliteRecordID(*(accessorImpl.sOB_SatelliteRecordID_Accessor));
      if (accessorImpl.eOB_RecordID_Accessor) {
        setEOB_RecordID(*(accessorImpl.eOB_RecordID_Accessor));
      } else {
        eOB_RecordID_Accessor.reset();
      }
      if (accessorImpl.identity_Accessor) {
        setIdentity(*(accessorImpl.identity_Accessor));
      } else {
        identity_Accessor.reset();
      }
      setEquipment(*(accessorImpl.equipment_Accessor));
      if (accessorImpl.orbit_Accessor) {
        setOrbit(*(accessorImpl.orbit_Accessor));
      } else {
        orbit_Accessor.reset();
      }
      if (accessorImpl.timestamps_Accessor) {
        setTimestamps(*(accessorImpl.timestamps_Accessor));
      } else {
        timestamps_Accessor.reset();
      }
      if (accessorImpl.hasDecayDate()) {
        setDecayDate(accessorImpl.getDecayDate());
      } else {
        clearDecayDate();
      }
      if (accessorImpl.relatedLaunchObservationID_Accessor) {
        setRelatedLaunchObservationID(*(accessorImpl.relatedLaunchObservationID_Accessor));
      } else {
        relatedLaunchObservationID_Accessor.reset();
      }
      if (accessorImpl.historicalLaunchData_Accessor) {
        setHistoricalLaunchData(*(accessorImpl.historicalLaunchData_Accessor));
      } else {
        historicalLaunchData_Accessor.reset();
      }
      setOperationalStatus(*(accessorImpl.operationalStatus_Accessor));
      if (accessorImpl.kinematics_Accessor) {
        setKinematics(*(accessorImpl.kinematics_Accessor));
      } else {
        kinematics_Accessor.reset();
      }
      if (accessorImpl.hasMass()) {
        setMass(accessorImpl.getMass());
      } else {
        clearMass();
      }
      if (accessorImpl.endurance_Accessor) {
        setEndurance(*(accessorImpl.endurance_Accessor));
      } else {
        endurance_Accessor.reset();
      }
      setRelatedSatelliteRecordID(*(accessorImpl.relatedSatelliteRecordID_Accessor));
      if (accessorImpl.patternOfLife_Accessor) {
        setPatternOfLife(*(accessorImpl.patternOfLife_Accessor));
      } else {
        patternOfLife_Accessor.reset();
      }
      setProductID(*(accessorImpl.productID_Accessor));
      setFileID(*(accessorImpl.fileID_Accessor));
      if (accessorImpl.characteristics_Accessor) {
        setCharacteristics(*(accessorImpl.characteristics_Accessor));
      } else {
        characteristics_Accessor.reset();
      }
      if (accessorImpl.removeInfo_Accessor) {
        setRemoveInfo(*(accessorImpl.removeInfo_Accessor));
      } else {
        removeInfo_Accessor.reset();
      }
      setEmitter(*(accessorImpl.emitter_Accessor));
      if (accessorImpl.remarksText_Accessor) {
        setRemarksText(*(accessorImpl.remarksText_Accessor));
      } else {
        remarksText_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void SOB_SatelliteRecordBaseType::reset() noexcept {
  sOB_SatelliteRecordID_Accessor->reset();
  eOB_RecordID_Accessor.reset();
  identity_Accessor.reset();
  equipment_Accessor->reset();
  orbit_Accessor.reset();
  timestamps_Accessor.reset();
  clearDecayDate();
  relatedLaunchObservationID_Accessor.reset();
  historicalLaunchData_Accessor.reset();
  operationalStatus_Accessor->reset();
  kinematics_Accessor.reset();
  clearMass();
  endurance_Accessor.reset();
  relatedSatelliteRecordID_Accessor->reset();
  patternOfLife_Accessor.reset();
  productID_Accessor->reset();
  fileID_Accessor->reset();
  characteristics_Accessor.reset();
  removeInfo_Accessor.reset();
  emitter_Accessor->reset();
  remarksText_Accessor.reset();
}

const uci::type::SOB_SatelliteRecordID_Type& SOB_SatelliteRecordBaseType::getSOB_SatelliteRecordID() const {
  return *sOB_SatelliteRecordID_Accessor;
}

uci::type::SOB_SatelliteRecordID_Type& SOB_SatelliteRecordBaseType::getSOB_SatelliteRecordID() {
  return *sOB_SatelliteRecordID_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setSOB_SatelliteRecordID(const uci::type::SOB_SatelliteRecordID_Type& accessor) {
  if (&accessor != sOB_SatelliteRecordID_Accessor.get()) {
    sOB_SatelliteRecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EOB_RecordID_Type& SOB_SatelliteRecordBaseType::getEOB_RecordID_() const {
  if (eOB_RecordID_Accessor) {
    return *eOB_RecordID_Accessor;
  }
  throw uci::base::UCIException("Error in getEOB_RecordID(): An attempt was made to get an optional field that was not enabled, call hasEOB_RecordID() to determine if it is safe to call getEOB_RecordID()");
}

const uci::type::EOB_RecordID_Type& SOB_SatelliteRecordBaseType::getEOB_RecordID() const {
  return getEOB_RecordID_();
}

uci::type::EOB_RecordID_Type& SOB_SatelliteRecordBaseType::getEOB_RecordID() {
  return getEOB_RecordID_();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setEOB_RecordID(const uci::type::EOB_RecordID_Type& accessor) {
  enableEOB_RecordID();
  if (&accessor != eOB_RecordID_Accessor.get()) {
    eOB_RecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasEOB_RecordID() const noexcept {
  return static_cast<bool>(eOB_RecordID_Accessor);
}

uci::type::EOB_RecordID_Type& SOB_SatelliteRecordBaseType::enableEOB_RecordID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_RecordID_Type : type};
  if ((!eOB_RecordID_Accessor) || (eOB_RecordID_Accessor->getAccessorType() != requestedType)) {
    eOB_RecordID_Accessor = EOB_RecordID_Type::create(requestedType);
    if (!eOB_RecordID_Accessor) {
      throw uci::base::UCIException("Error in enableEOB_RecordID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eOB_RecordID_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearEOB_RecordID() noexcept {
  eOB_RecordID_Accessor.reset();
  return *this;
}

uci::type::SatelliteIdentityType& SOB_SatelliteRecordBaseType::getIdentity_() const {
  if (identity_Accessor) {
    return *identity_Accessor;
  }
  throw uci::base::UCIException("Error in getIdentity(): An attempt was made to get an optional field that was not enabled, call hasIdentity() to determine if it is safe to call getIdentity()");
}

const uci::type::SatelliteIdentityType& SOB_SatelliteRecordBaseType::getIdentity() const {
  return getIdentity_();
}

uci::type::SatelliteIdentityType& SOB_SatelliteRecordBaseType::getIdentity() {
  return getIdentity_();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setIdentity(const uci::type::SatelliteIdentityType& accessor) {
  enableIdentity();
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasIdentity() const noexcept {
  return static_cast<bool>(identity_Accessor);
}

uci::type::SatelliteIdentityType& SOB_SatelliteRecordBaseType::enableIdentity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteIdentityType : type};
  if ((!identity_Accessor) || (identity_Accessor->getAccessorType() != requestedType)) {
    identity_Accessor = SatelliteIdentityType::create(requestedType);
    if (!identity_Accessor) {
      throw uci::base::UCIException("Error in enableIdentity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *identity_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearIdentity() noexcept {
  identity_Accessor.reset();
  return *this;
}

const uci::type::SOB_SatelliteRecordBaseType::Equipment& SOB_SatelliteRecordBaseType::getEquipment() const {
  return *equipment_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType::Equipment& SOB_SatelliteRecordBaseType::getEquipment() {
  return *equipment_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setEquipment(const uci::type::SOB_SatelliteRecordBaseType::Equipment& accessor) {
  if (&accessor != equipment_Accessor.get()) {
    equipment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitRegimeType& SOB_SatelliteRecordBaseType::getOrbit_() const {
  if (orbit_Accessor) {
    return *orbit_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbit(): An attempt was made to get an optional field that was not enabled, call hasOrbit() to determine if it is safe to call getOrbit()");
}

const uci::type::OrbitRegimeType& SOB_SatelliteRecordBaseType::getOrbit() const {
  return getOrbit_();
}

uci::type::OrbitRegimeType& SOB_SatelliteRecordBaseType::getOrbit() {
  return getOrbit_();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setOrbit(const uci::type::OrbitRegimeType& accessor) {
  enableOrbit();
  if (&accessor != orbit_Accessor.get()) {
    orbit_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasOrbit() const noexcept {
  return static_cast<bool>(orbit_Accessor);
}

uci::type::OrbitRegimeType& SOB_SatelliteRecordBaseType::enableOrbit(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitRegimeType : type};
  if ((!orbit_Accessor) || (orbit_Accessor->getAccessorType() != requestedType)) {
    orbit_Accessor = OrbitRegimeType::create(requestedType);
    if (!orbit_Accessor) {
      throw uci::base::UCIException("Error in enableOrbit(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbit_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearOrbit() noexcept {
  orbit_Accessor.reset();
  return *this;
}

uci::type::OrderOfBattleTimestampsType& SOB_SatelliteRecordBaseType::getTimestamps_() const {
  if (timestamps_Accessor) {
    return *timestamps_Accessor;
  }
  throw uci::base::UCIException("Error in getTimestamps(): An attempt was made to get an optional field that was not enabled, call hasTimestamps() to determine if it is safe to call getTimestamps()");
}

const uci::type::OrderOfBattleTimestampsType& SOB_SatelliteRecordBaseType::getTimestamps() const {
  return getTimestamps_();
}

uci::type::OrderOfBattleTimestampsType& SOB_SatelliteRecordBaseType::getTimestamps() {
  return getTimestamps_();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setTimestamps(const uci::type::OrderOfBattleTimestampsType& accessor) {
  enableTimestamps();
  if (&accessor != timestamps_Accessor.get()) {
    timestamps_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasTimestamps() const noexcept {
  return static_cast<bool>(timestamps_Accessor);
}

uci::type::OrderOfBattleTimestampsType& SOB_SatelliteRecordBaseType::enableTimestamps(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orderOfBattleTimestampsType : type};
  if ((!timestamps_Accessor) || (timestamps_Accessor->getAccessorType() != requestedType)) {
    timestamps_Accessor = OrderOfBattleTimestampsType::create(requestedType);
    if (!timestamps_Accessor) {
      throw uci::base::UCIException("Error in enableTimestamps(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timestamps_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearTimestamps() noexcept {
  timestamps_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue SOB_SatelliteRecordBaseType::getDecayDate() const {
  if (decayDate_Accessor) {
    return *decayDate_Accessor;
  }
  throw uci::base::UCIException("Error in getDecayDate(): An attempt was made to get an optional field that was not enabled, call hasDecayDate() to determine if it is safe to call getDecayDate()");
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setDecayDate(uci::type::DateTimeTypeValue value) {
  decayDate_Accessor = value;
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasDecayDate() const noexcept {
  return decayDate_Accessor.has_value();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearDecayDate() noexcept {
  decayDate_Accessor.reset();
  return *this;
}

uci::type::LaunchObservationID_Type& SOB_SatelliteRecordBaseType::getRelatedLaunchObservationID_() const {
  if (relatedLaunchObservationID_Accessor) {
    return *relatedLaunchObservationID_Accessor;
  }
  throw uci::base::UCIException("Error in getRelatedLaunchObservationID(): An attempt was made to get an optional field that was not enabled, call hasRelatedLaunchObservationID() to determine if it is safe to call getRelatedLaunchObservationID()");
}

const uci::type::LaunchObservationID_Type& SOB_SatelliteRecordBaseType::getRelatedLaunchObservationID() const {
  return getRelatedLaunchObservationID_();
}

uci::type::LaunchObservationID_Type& SOB_SatelliteRecordBaseType::getRelatedLaunchObservationID() {
  return getRelatedLaunchObservationID_();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setRelatedLaunchObservationID(const uci::type::LaunchObservationID_Type& accessor) {
  enableRelatedLaunchObservationID();
  if (&accessor != relatedLaunchObservationID_Accessor.get()) {
    relatedLaunchObservationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasRelatedLaunchObservationID() const noexcept {
  return static_cast<bool>(relatedLaunchObservationID_Accessor);
}

uci::type::LaunchObservationID_Type& SOB_SatelliteRecordBaseType::enableRelatedLaunchObservationID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::launchObservationID_Type : type};
  if ((!relatedLaunchObservationID_Accessor) || (relatedLaunchObservationID_Accessor->getAccessorType() != requestedType)) {
    relatedLaunchObservationID_Accessor = LaunchObservationID_Type::create(requestedType);
    if (!relatedLaunchObservationID_Accessor) {
      throw uci::base::UCIException("Error in enableRelatedLaunchObservationID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relatedLaunchObservationID_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearRelatedLaunchObservationID() noexcept {
  relatedLaunchObservationID_Accessor.reset();
  return *this;
}

uci::type::LaunchStaticDetailsType& SOB_SatelliteRecordBaseType::getHistoricalLaunchData_() const {
  if (historicalLaunchData_Accessor) {
    return *historicalLaunchData_Accessor;
  }
  throw uci::base::UCIException("Error in getHistoricalLaunchData(): An attempt was made to get an optional field that was not enabled, call hasHistoricalLaunchData() to determine if it is safe to call getHistoricalLaunchData()");
}

const uci::type::LaunchStaticDetailsType& SOB_SatelliteRecordBaseType::getHistoricalLaunchData() const {
  return getHistoricalLaunchData_();
}

uci::type::LaunchStaticDetailsType& SOB_SatelliteRecordBaseType::getHistoricalLaunchData() {
  return getHistoricalLaunchData_();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setHistoricalLaunchData(const uci::type::LaunchStaticDetailsType& accessor) {
  enableHistoricalLaunchData();
  if (&accessor != historicalLaunchData_Accessor.get()) {
    historicalLaunchData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasHistoricalLaunchData() const noexcept {
  return static_cast<bool>(historicalLaunchData_Accessor);
}

uci::type::LaunchStaticDetailsType& SOB_SatelliteRecordBaseType::enableHistoricalLaunchData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::launchStaticDetailsType : type};
  if ((!historicalLaunchData_Accessor) || (historicalLaunchData_Accessor->getAccessorType() != requestedType)) {
    historicalLaunchData_Accessor = LaunchStaticDetailsType::create(requestedType);
    if (!historicalLaunchData_Accessor) {
      throw uci::base::UCIException("Error in enableHistoricalLaunchData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *historicalLaunchData_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearHistoricalLaunchData() noexcept {
  historicalLaunchData_Accessor.reset();
  return *this;
}

const uci::type::SOB_SatelliteRecordBaseType::OperationalStatus& SOB_SatelliteRecordBaseType::getOperationalStatus() const {
  return *operationalStatus_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType::OperationalStatus& SOB_SatelliteRecordBaseType::getOperationalStatus() {
  return *operationalStatus_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setOperationalStatus(const uci::type::SOB_SatelliteRecordBaseType::OperationalStatus& accessor) {
  if (&accessor != operationalStatus_Accessor.get()) {
    operationalStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitKinematicsParametersType& SOB_SatelliteRecordBaseType::getKinematics_() const {
  if (kinematics_Accessor) {
    return *kinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getKinematics(): An attempt was made to get an optional field that was not enabled, call hasKinematics() to determine if it is safe to call getKinematics()");
}

const uci::type::OrbitKinematicsParametersType& SOB_SatelliteRecordBaseType::getKinematics() const {
  return getKinematics_();
}

uci::type::OrbitKinematicsParametersType& SOB_SatelliteRecordBaseType::getKinematics() {
  return getKinematics_();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setKinematics(const uci::type::OrbitKinematicsParametersType& accessor) {
  enableKinematics();
  if (&accessor != kinematics_Accessor.get()) {
    kinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasKinematics() const noexcept {
  return static_cast<bool>(kinematics_Accessor);
}

uci::type::OrbitKinematicsParametersType& SOB_SatelliteRecordBaseType::enableKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsParametersType : type};
  if ((!kinematics_Accessor) || (kinematics_Accessor->getAccessorType() != requestedType)) {
    kinematics_Accessor = OrbitKinematicsParametersType::create(requestedType);
    if (!kinematics_Accessor) {
      throw uci::base::UCIException("Error in enableKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *kinematics_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearKinematics() noexcept {
  kinematics_Accessor.reset();
  return *this;
}

uci::type::MassTypeValue SOB_SatelliteRecordBaseType::getMass() const {
  if (mass_Accessor) {
    return *mass_Accessor;
  }
  throw uci::base::UCIException("Error in getMass(): An attempt was made to get an optional field that was not enabled, call hasMass() to determine if it is safe to call getMass()");
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setMass(uci::type::MassTypeValue value) {
  mass_Accessor = value;
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasMass() const noexcept {
  return mass_Accessor.has_value();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearMass() noexcept {
  mass_Accessor.reset();
  return *this;
}

uci::type::SatelliteEnduranceType& SOB_SatelliteRecordBaseType::getEndurance_() const {
  if (endurance_Accessor) {
    return *endurance_Accessor;
  }
  throw uci::base::UCIException("Error in getEndurance(): An attempt was made to get an optional field that was not enabled, call hasEndurance() to determine if it is safe to call getEndurance()");
}

const uci::type::SatelliteEnduranceType& SOB_SatelliteRecordBaseType::getEndurance() const {
  return getEndurance_();
}

uci::type::SatelliteEnduranceType& SOB_SatelliteRecordBaseType::getEndurance() {
  return getEndurance_();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setEndurance(const uci::type::SatelliteEnduranceType& accessor) {
  enableEndurance();
  if (&accessor != endurance_Accessor.get()) {
    endurance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasEndurance() const noexcept {
  return static_cast<bool>(endurance_Accessor);
}

uci::type::SatelliteEnduranceType& SOB_SatelliteRecordBaseType::enableEndurance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteEnduranceType : type};
  if ((!endurance_Accessor) || (endurance_Accessor->getAccessorType() != requestedType)) {
    endurance_Accessor = SatelliteEnduranceType::create(requestedType);
    if (!endurance_Accessor) {
      throw uci::base::UCIException("Error in enableEndurance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *endurance_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearEndurance() noexcept {
  endurance_Accessor.reset();
  return *this;
}

const uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID& SOB_SatelliteRecordBaseType::getRelatedSatelliteRecordID() const {
  return *relatedSatelliteRecordID_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID& SOB_SatelliteRecordBaseType::getRelatedSatelliteRecordID() {
  return *relatedSatelliteRecordID_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setRelatedSatelliteRecordID(const uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID& accessor) {
  if (&accessor != relatedSatelliteRecordID_Accessor.get()) {
    relatedSatelliteRecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VisibleString1024Type& SOB_SatelliteRecordBaseType::getPatternOfLife_() const {
  if (patternOfLife_Accessor) {
    return *patternOfLife_Accessor;
  }
  throw uci::base::UCIException("Error in getPatternOfLife(): An attempt was made to get an optional field that was not enabled, call hasPatternOfLife() to determine if it is safe to call getPatternOfLife()");
}

const uci::type::VisibleString1024Type& SOB_SatelliteRecordBaseType::getPatternOfLife() const {
  return getPatternOfLife_();
}

uci::type::VisibleString1024Type& SOB_SatelliteRecordBaseType::getPatternOfLife() {
  return getPatternOfLife_();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setPatternOfLife(const uci::type::VisibleString1024Type& value) {
  return setPatternOfLife(value.c_str());
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setPatternOfLife(const std::string& value) {
  return setPatternOfLife(value.c_str());
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setPatternOfLife(const char* value) {
  enablePatternOfLife().setStringValue(value);
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasPatternOfLife() const noexcept {
  return static_cast<bool>(patternOfLife_Accessor);
}

uci::type::VisibleString1024Type& SOB_SatelliteRecordBaseType::enablePatternOfLife(uci::base::accessorType::AccessorType type) {
  if (!patternOfLife_Accessor) {
    patternOfLife_Accessor = VisibleString1024Type::create(type);
  }
  return *patternOfLife_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearPatternOfLife() noexcept {
  patternOfLife_Accessor.reset();
  return *this;
}

const uci::type::SOB_SatelliteRecordBaseType::ProductID& SOB_SatelliteRecordBaseType::getProductID() const {
  return *productID_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType::ProductID& SOB_SatelliteRecordBaseType::getProductID() {
  return *productID_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setProductID(const uci::type::SOB_SatelliteRecordBaseType::ProductID& accessor) {
  if (&accessor != productID_Accessor.get()) {
    productID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SOB_SatelliteRecordBaseType::FileID& SOB_SatelliteRecordBaseType::getFileID() const {
  return *fileID_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType::FileID& SOB_SatelliteRecordBaseType::getFileID() {
  return *fileID_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setFileID(const uci::type::SOB_SatelliteRecordBaseType::FileID& accessor) {
  if (&accessor != fileID_Accessor.get()) {
    fileID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SatelliteCharacteristicsOverrideType& SOB_SatelliteRecordBaseType::getCharacteristics_() const {
  if (characteristics_Accessor) {
    return *characteristics_Accessor;
  }
  throw uci::base::UCIException("Error in getCharacteristics(): An attempt was made to get an optional field that was not enabled, call hasCharacteristics() to determine if it is safe to call getCharacteristics()");
}

const uci::type::SatelliteCharacteristicsOverrideType& SOB_SatelliteRecordBaseType::getCharacteristics() const {
  return getCharacteristics_();
}

uci::type::SatelliteCharacteristicsOverrideType& SOB_SatelliteRecordBaseType::getCharacteristics() {
  return getCharacteristics_();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setCharacteristics(const uci::type::SatelliteCharacteristicsOverrideType& accessor) {
  enableCharacteristics();
  if (&accessor != characteristics_Accessor.get()) {
    characteristics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasCharacteristics() const noexcept {
  return static_cast<bool>(characteristics_Accessor);
}

uci::type::SatelliteCharacteristicsOverrideType& SOB_SatelliteRecordBaseType::enableCharacteristics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::satelliteCharacteristicsOverrideType : type};
  if ((!characteristics_Accessor) || (characteristics_Accessor->getAccessorType() != requestedType)) {
    characteristics_Accessor = SatelliteCharacteristicsOverrideType::create(requestedType);
    if (!characteristics_Accessor) {
      throw uci::base::UCIException("Error in enableCharacteristics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *characteristics_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearCharacteristics() noexcept {
  characteristics_Accessor.reset();
  return *this;
}

uci::type::SOB_SatelliteRecordRemoveInfoType& SOB_SatelliteRecordBaseType::getRemoveInfo_() const {
  if (removeInfo_Accessor) {
    return *removeInfo_Accessor;
  }
  throw uci::base::UCIException("Error in getRemoveInfo(): An attempt was made to get an optional field that was not enabled, call hasRemoveInfo() to determine if it is safe to call getRemoveInfo()");
}

const uci::type::SOB_SatelliteRecordRemoveInfoType& SOB_SatelliteRecordBaseType::getRemoveInfo() const {
  return getRemoveInfo_();
}

uci::type::SOB_SatelliteRecordRemoveInfoType& SOB_SatelliteRecordBaseType::getRemoveInfo() {
  return getRemoveInfo_();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setRemoveInfo(const uci::type::SOB_SatelliteRecordRemoveInfoType& accessor) {
  enableRemoveInfo();
  if (&accessor != removeInfo_Accessor.get()) {
    removeInfo_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasRemoveInfo() const noexcept {
  return static_cast<bool>(removeInfo_Accessor);
}

uci::type::SOB_SatelliteRecordRemoveInfoType& SOB_SatelliteRecordBaseType::enableRemoveInfo(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_SatelliteRecordRemoveInfoType : type};
  if ((!removeInfo_Accessor) || (removeInfo_Accessor->getAccessorType() != requestedType)) {
    removeInfo_Accessor = SOB_SatelliteRecordRemoveInfoType::create(requestedType);
    if (!removeInfo_Accessor) {
      throw uci::base::UCIException("Error in enableRemoveInfo(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *removeInfo_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearRemoveInfo() noexcept {
  removeInfo_Accessor.reset();
  return *this;
}

const uci::type::SOB_SatelliteRecordBaseType::Emitter& SOB_SatelliteRecordBaseType::getEmitter() const {
  return *emitter_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType::Emitter& SOB_SatelliteRecordBaseType::getEmitter() {
  return *emitter_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setEmitter(const uci::type::SOB_SatelliteRecordBaseType::Emitter& accessor) {
  if (&accessor != emitter_Accessor.get()) {
    emitter_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::VisibleString512Type& SOB_SatelliteRecordBaseType::getRemarksText_() const {
  if (remarksText_Accessor) {
    return *remarksText_Accessor;
  }
  throw uci::base::UCIException("Error in getRemarksText(): An attempt was made to get an optional field that was not enabled, call hasRemarksText() to determine if it is safe to call getRemarksText()");
}

const uci::type::VisibleString512Type& SOB_SatelliteRecordBaseType::getRemarksText() const {
  return getRemarksText_();
}

uci::type::VisibleString512Type& SOB_SatelliteRecordBaseType::getRemarksText() {
  return getRemarksText_();
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setRemarksText(const uci::type::VisibleString512Type& value) {
  return setRemarksText(value.c_str());
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setRemarksText(const std::string& value) {
  return setRemarksText(value.c_str());
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::setRemarksText(const char* value) {
  enableRemarksText().setStringValue(value);
  return *this;
}

bool SOB_SatelliteRecordBaseType::hasRemarksText() const noexcept {
  return static_cast<bool>(remarksText_Accessor);
}

uci::type::VisibleString512Type& SOB_SatelliteRecordBaseType::enableRemarksText(uci::base::accessorType::AccessorType type) {
  if (!remarksText_Accessor) {
    remarksText_Accessor = VisibleString512Type::create(type);
  }
  return *remarksText_Accessor;
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::clearRemarksText() noexcept {
  remarksText_Accessor.reset();
  return *this;
}

std::unique_ptr<SOB_SatelliteRecordBaseType> SOB_SatelliteRecordBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_SatelliteRecordBaseType : type};
  return std::unique_ptr<SOB_SatelliteRecordBaseType>(dynamic_cast<SOB_SatelliteRecordBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace SOB_SatelliteRecordBaseType_Names {

constexpr const char* Extern_Type_Name{"SOB_SatelliteRecordBaseType"};
constexpr const char* SOB_SatelliteRecordID_Name{"SOB_SatelliteRecordID"};
constexpr const char* EOB_RecordID_Name{"EOB_RecordID"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* Equipment_Name{"Equipment"};
constexpr const char* Orbit_Name{"Orbit"};
constexpr const char* Timestamps_Name{"Timestamps"};
constexpr const char* DecayDate_Name{"DecayDate"};
constexpr const char* RelatedLaunchObservationID_Name{"RelatedLaunchObservationID"};
constexpr const char* HistoricalLaunchData_Name{"HistoricalLaunchData"};
constexpr const char* OperationalStatus_Name{"OperationalStatus"};
constexpr const char* Kinematics_Name{"Kinematics"};
constexpr const char* Mass_Name{"Mass"};
constexpr const char* Endurance_Name{"Endurance"};
constexpr const char* RelatedSatelliteRecordID_Name{"RelatedSatelliteRecordID"};
constexpr const char* PatternOfLife_Name{"PatternOfLife"};
constexpr const char* ProductID_Name{"ProductID"};
constexpr const char* FileID_Name{"FileID"};
constexpr const char* Characteristics_Name{"Characteristics"};
constexpr const char* RemoveInfo_Name{"RemoveInfo"};
constexpr const char* Emitter_Name{"Emitter"};
constexpr const char* RemarksText_Name{"RemarksText"};

} // namespace SOB_SatelliteRecordBaseType_Names

void SOB_SatelliteRecordBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SOB_SatelliteRecordBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SOB_SatelliteRecordBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::SOB_SatelliteRecordID_Name) {
      SOB_SatelliteRecordID_Type::deserialize(valueType.second, accessor.getSOB_SatelliteRecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::EOB_RecordID_Name) {
      EOB_RecordID_Type::deserialize(valueType.second, accessor.enableEOB_RecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Identity_Name) {
      SatelliteIdentityType::deserialize(valueType.second, accessor.enableIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Equipment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_SatelliteRecordBaseType::Equipment& boundedList = accessor.getEquipment();
        const uci::type::SOB_SatelliteRecordBaseType::Equipment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SOB_EquipmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Orbit_Name) {
      OrbitRegimeType::deserialize(valueType.second, accessor.enableOrbit(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Timestamps_Name) {
      OrderOfBattleTimestampsType::deserialize(valueType.second, accessor.enableTimestamps(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::DecayDate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDecayDate(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::RelatedLaunchObservationID_Name) {
      LaunchObservationID_Type::deserialize(valueType.second, accessor.enableRelatedLaunchObservationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::HistoricalLaunchData_Name) {
      LaunchStaticDetailsType::deserialize(valueType.second, accessor.enableHistoricalLaunchData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::OperationalStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_SatelliteRecordBaseType::OperationalStatus& boundedList = accessor.getOperationalStatus();
        const uci::type::SOB_SatelliteRecordBaseType::OperationalStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Kinematics_Name) {
      OrbitKinematicsParametersType::deserialize(valueType.second, accessor.enableKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Mass_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMass(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Endurance_Name) {
      SatelliteEnduranceType::deserialize(valueType.second, accessor.enableEndurance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::RelatedSatelliteRecordID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID& boundedList = accessor.getRelatedSatelliteRecordID();
        const uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SOB_SatelliteRecordID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::PatternOfLife_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPatternOfLife(*value);
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::ProductID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_SatelliteRecordBaseType::ProductID& boundedList = accessor.getProductID();
        const uci::type::SOB_SatelliteRecordBaseType::ProductID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::FileID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_SatelliteRecordBaseType::FileID& boundedList = accessor.getFileID();
        const uci::type::SOB_SatelliteRecordBaseType::FileID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Characteristics_Name) {
      SatelliteCharacteristicsOverrideType::deserialize(valueType.second, accessor.enableCharacteristics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::RemoveInfo_Name) {
      SOB_SatelliteRecordRemoveInfoType::deserialize(valueType.second, accessor.enableRemoveInfo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Emitter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_SatelliteRecordBaseType::Emitter& boundedList = accessor.getEmitter();
        const uci::type::SOB_SatelliteRecordBaseType::Emitter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::RemarksText_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRemarksText(*value);
      }
    }
  }
}

std::string SOB_SatelliteRecordBaseType::serialize(const uci::type::SOB_SatelliteRecordBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SOB_SatelliteRecordBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::sOB_SatelliteRecordBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, SOB_SatelliteRecordBaseType_Names::Extern_Type_Name);
    }
    SOB_SatelliteRecordID_Type::serialize(accessor.getSOB_SatelliteRecordID(), node, SOB_SatelliteRecordBaseType_Names::SOB_SatelliteRecordID_Name);
    if (accessor.hasEOB_RecordID()) {
      EOB_RecordID_Type::serialize(accessor.getEOB_RecordID(), node, SOB_SatelliteRecordBaseType_Names::EOB_RecordID_Name);
    }
    if (accessor.hasIdentity()) {
      SatelliteIdentityType::serialize(accessor.getIdentity(), node, SOB_SatelliteRecordBaseType_Names::Identity_Name);
    }
    {
      const uci::type::SOB_SatelliteRecordBaseType::Equipment& boundedList = accessor.getEquipment();
      for (uci::type::SOB_SatelliteRecordBaseType::Equipment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SOB_EquipmentType::serialize(boundedList.at(i), node, SOB_SatelliteRecordBaseType_Names::Equipment_Name);
      }
    }
    if (accessor.hasOrbit()) {
      OrbitRegimeType::serialize(accessor.getOrbit(), node, SOB_SatelliteRecordBaseType_Names::Orbit_Name);
    }
    if (accessor.hasTimestamps()) {
      OrderOfBattleTimestampsType::serialize(accessor.getTimestamps(), node, SOB_SatelliteRecordBaseType_Names::Timestamps_Name);
    }
    if (accessor.hasDecayDate()) {
      asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getDecayDate(), node, SOB_SatelliteRecordBaseType_Names::DecayDate_Name);
    }
    if (accessor.hasRelatedLaunchObservationID()) {
      LaunchObservationID_Type::serialize(accessor.getRelatedLaunchObservationID(), node, SOB_SatelliteRecordBaseType_Names::RelatedLaunchObservationID_Name);
    }
    if (accessor.hasHistoricalLaunchData()) {
      LaunchStaticDetailsType::serialize(accessor.getHistoricalLaunchData(), node, SOB_SatelliteRecordBaseType_Names::HistoricalLaunchData_Name);
    }
    {
      const uci::type::SOB_SatelliteRecordBaseType::OperationalStatus& boundedList = accessor.getOperationalStatus();
      for (uci::type::SOB_SatelliteRecordBaseType::OperationalStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        OB_OperationalStatusEnum::serialize(boundedList.at(i), node, SOB_SatelliteRecordBaseType_Names::OperationalStatus_Name, false);
      }
    }
    if (accessor.hasKinematics()) {
      OrbitKinematicsParametersType::serialize(accessor.getKinematics(), node, SOB_SatelliteRecordBaseType_Names::Kinematics_Name);
    }
    if (accessor.hasMass()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMass(), node, SOB_SatelliteRecordBaseType_Names::Mass_Name);
    }
    if (accessor.hasEndurance()) {
      SatelliteEnduranceType::serialize(accessor.getEndurance(), node, SOB_SatelliteRecordBaseType_Names::Endurance_Name);
    }
    {
      const uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID& boundedList = accessor.getRelatedSatelliteRecordID();
      for (uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SOB_SatelliteRecordID_Type::serialize(boundedList.at(i), node, SOB_SatelliteRecordBaseType_Names::RelatedSatelliteRecordID_Name);
      }
    }
    if (accessor.hasPatternOfLife()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getPatternOfLife(), node, SOB_SatelliteRecordBaseType_Names::PatternOfLife_Name);
    }
    {
      const uci::type::SOB_SatelliteRecordBaseType::ProductID& boundedList = accessor.getProductID();
      for (uci::type::SOB_SatelliteRecordBaseType::ProductID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ProductMetadataID_Type::serialize(boundedList.at(i), node, SOB_SatelliteRecordBaseType_Names::ProductID_Name);
      }
    }
    {
      const uci::type::SOB_SatelliteRecordBaseType::FileID& boundedList = accessor.getFileID();
      for (uci::type::SOB_SatelliteRecordBaseType::FileID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::FileMetadataID_Type::serialize(boundedList.at(i), node, SOB_SatelliteRecordBaseType_Names::FileID_Name);
      }
    }
    if (accessor.hasCharacteristics()) {
      SatelliteCharacteristicsOverrideType::serialize(accessor.getCharacteristics(), node, SOB_SatelliteRecordBaseType_Names::Characteristics_Name);
    }
    if (accessor.hasRemoveInfo()) {
      SOB_SatelliteRecordRemoveInfoType::serialize(accessor.getRemoveInfo(), node, SOB_SatelliteRecordBaseType_Names::RemoveInfo_Name);
    }
    {
      const uci::type::SOB_SatelliteRecordBaseType::Emitter& boundedList = accessor.getEmitter();
      for (uci::type::SOB_SatelliteRecordBaseType::Emitter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::OrderOfBattleEmitterType::serialize(boundedList.at(i), node, SOB_SatelliteRecordBaseType_Names::Emitter_Name);
      }
    }
    if (accessor.hasRemarksText()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getRemarksText(), node, SOB_SatelliteRecordBaseType_Names::RemarksText_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SOB_SatelliteRecordBaseType>().release());
}

uci::type::SOB_SatelliteRecordBaseType& SOB_SatelliteRecordBaseType::create(const uci::type::SOB_SatelliteRecordBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SOB_SatelliteRecordBaseType> newAccessor{boost::make_unique<asb_uci::type::SOB_SatelliteRecordBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SOB_SatelliteRecordBaseType::destroy(uci::type::SOB_SatelliteRecordBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::SOB_SatelliteRecordBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

