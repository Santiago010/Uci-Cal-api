/** @file RouteValidationErrorType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RouteValidationErrorType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/RouteValidationErrorEnum.h"
#include "asb_uci/type/VisibleString256Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/RouteValidationErrorEnum.h"
#include "uci/type/RouteValidationErrorType.h"
#include "uci/type/VisibleString256Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RouteValidationErrorType::RouteValidationErrorType()
  : invalidReason_Accessor{boost::make_unique<RouteValidationErrorEnum>()} {
}

RouteValidationErrorType::~RouteValidationErrorType() = default;

void RouteValidationErrorType::copy(const uci::type::RouteValidationErrorType& accessor) {
  copyImpl(accessor, false);
}

void RouteValidationErrorType::copyImpl(const uci::type::RouteValidationErrorType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RouteValidationErrorType&>(accessor);
    setInvalidReason(*(accessorImpl.invalidReason_Accessor));
    if (accessorImpl.hasSpecificReasonCode()) {
      setSpecificReasonCode(accessorImpl.getSpecificReasonCode());
    } else {
      clearSpecificReasonCode();
    }
    if (accessorImpl.description_Accessor) {
      setDescription(*(accessorImpl.description_Accessor));
    } else {
      description_Accessor.reset();
    }
  }
}

void RouteValidationErrorType::reset() noexcept {
  invalidReason_Accessor->reset();
  clearSpecificReasonCode();
  description_Accessor.reset();
}

const uci::type::RouteValidationErrorEnum& RouteValidationErrorType::getInvalidReason() const {
  return *invalidReason_Accessor;
}

uci::type::RouteValidationErrorEnum& RouteValidationErrorType::getInvalidReason() {
  return *invalidReason_Accessor;
}

uci::type::RouteValidationErrorType& RouteValidationErrorType::setInvalidReason(const uci::type::RouteValidationErrorEnum& accessor) {
  if (&accessor != invalidReason_Accessor.get()) {
    invalidReason_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RouteValidationErrorType& RouteValidationErrorType::setInvalidReason(uci::type::RouteValidationErrorEnum::EnumerationItem value) {
  invalidReason_Accessor->setValue(value);
  return *this;
}


xs::UnsignedInt RouteValidationErrorType::getSpecificReasonCode() const {
  if (specificReasonCode_Accessor) {
    return *specificReasonCode_Accessor;
  }
  throw uci::base::UCIException("Error in getSpecificReasonCode(): An attempt was made to get an optional field that was not enabled, call hasSpecificReasonCode() to determine if it is safe to call getSpecificReasonCode()");
}

uci::type::RouteValidationErrorType& RouteValidationErrorType::setSpecificReasonCode(xs::UnsignedInt value) {
  specificReasonCode_Accessor = value;
  return *this;
}

bool RouteValidationErrorType::hasSpecificReasonCode() const noexcept {
  return specificReasonCode_Accessor.has_value();
}

uci::type::RouteValidationErrorType& RouteValidationErrorType::clearSpecificReasonCode() noexcept {
  specificReasonCode_Accessor.reset();
  return *this;
}

uci::type::VisibleString256Type& RouteValidationErrorType::getDescription_() const {
  if (description_Accessor) {
    return *description_Accessor;
  }
  throw uci::base::UCIException("Error in getDescription(): An attempt was made to get an optional field that was not enabled, call hasDescription() to determine if it is safe to call getDescription()");
}

const uci::type::VisibleString256Type& RouteValidationErrorType::getDescription() const {
  return getDescription_();
}

uci::type::VisibleString256Type& RouteValidationErrorType::getDescription() {
  return getDescription_();
}

uci::type::RouteValidationErrorType& RouteValidationErrorType::setDescription(const uci::type::VisibleString256Type& value) {
  return setDescription(value.c_str());
}

uci::type::RouteValidationErrorType& RouteValidationErrorType::setDescription(const std::string& value) {
  return setDescription(value.c_str());
}

uci::type::RouteValidationErrorType& RouteValidationErrorType::setDescription(const char* value) {
  enableDescription().setStringValue(value);
  return *this;
}

bool RouteValidationErrorType::hasDescription() const noexcept {
  return static_cast<bool>(description_Accessor);
}

uci::type::VisibleString256Type& RouteValidationErrorType::enableDescription(uci::base::accessorType::AccessorType type) {
  if (!description_Accessor) {
    description_Accessor = VisibleString256Type::create(type);
  }
  return *description_Accessor;
}

uci::type::RouteValidationErrorType& RouteValidationErrorType::clearDescription() noexcept {
  description_Accessor.reset();
  return *this;
}

std::unique_ptr<RouteValidationErrorType> RouteValidationErrorType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeValidationErrorType : type};
  return (requestedType == uci::type::accessorType::routeValidationErrorType) ? boost::make_unique<RouteValidationErrorType>() : nullptr;
}

/**  */
namespace RouteValidationErrorType_Names {

constexpr const char* Extern_Type_Name{"RouteValidationErrorType"};
constexpr const char* InvalidReason_Name{"InvalidReason"};
constexpr const char* SpecificReasonCode_Name{"SpecificReasonCode"};
constexpr const char* Description_Name{"Description"};

} // namespace RouteValidationErrorType_Names

void RouteValidationErrorType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RouteValidationErrorType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RouteValidationErrorType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RouteValidationErrorType_Names::InvalidReason_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getInvalidReason().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RouteValidationErrorType_Names::SpecificReasonCode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpecificReasonCode(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + RouteValidationErrorType_Names::Description_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDescription(*value);
      }
    }
  }
}

std::string RouteValidationErrorType::serialize(const uci::type::RouteValidationErrorType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RouteValidationErrorType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RouteValidationErrorType_Names::Extern_Type_Name);
  }
  RouteValidationErrorEnum::serialize(accessor.getInvalidReason(), node, RouteValidationErrorType_Names::InvalidReason_Name, false);
  if (accessor.hasSpecificReasonCode()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getSpecificReasonCode(), node, RouteValidationErrorType_Names::SpecificReasonCode_Name);
  }
  if (accessor.hasDescription()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDescription(), node, RouteValidationErrorType_Names::Description_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RouteValidationErrorType& RouteValidationErrorType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RouteValidationErrorType>().release());
}

uci::type::RouteValidationErrorType& RouteValidationErrorType::create(const uci::type::RouteValidationErrorType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RouteValidationErrorType> newAccessor{boost::make_unique<asb_uci::type::RouteValidationErrorType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RouteValidationErrorType::destroy(uci::type::RouteValidationErrorType& accessor) {
  delete dynamic_cast<asb_uci::type::RouteValidationErrorType*>(&accessor);
}

} // namespace type

} // namespace uci

