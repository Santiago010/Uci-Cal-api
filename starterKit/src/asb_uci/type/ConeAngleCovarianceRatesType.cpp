/** @file ConeAngleCovarianceRatesType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ConeAngleCovarianceRatesType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ConeAngleCovarianceRatesType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ConeAngleCovarianceRatesType::ConeAngleCovarianceRatesType() = default;

ConeAngleCovarianceRatesType::~ConeAngleCovarianceRatesType() = default;

void ConeAngleCovarianceRatesType::copy(const uci::type::ConeAngleCovarianceRatesType& accessor) {
  copyImpl(accessor, false);
}

void ConeAngleCovarianceRatesType::copyImpl(const uci::type::ConeAngleCovarianceRatesType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ConeAngleCovarianceRatesType&>(accessor);
    if (accessorImpl.hasCosconeY_CosconeY_Rate()) {
      setCosconeY_CosconeY_Rate(accessorImpl.getCosconeY_CosconeY_Rate());
    } else {
      clearCosconeY_CosconeY_Rate();
    }
    if (accessorImpl.hasCosconeY_CosconeZ_Rate()) {
      setCosconeY_CosconeZ_Rate(accessorImpl.getCosconeY_CosconeZ_Rate());
    } else {
      clearCosconeY_CosconeZ_Rate();
    }
    if (accessorImpl.hasCosconeZ_CosconeY_Rate()) {
      setCosconeZ_CosconeY_Rate(accessorImpl.getCosconeZ_CosconeY_Rate());
    } else {
      clearCosconeZ_CosconeY_Rate();
    }
    if (accessorImpl.hasCosconeZ_CosconeZ_Rate()) {
      setCosconeZ_CosconeZ_Rate(accessorImpl.getCosconeZ_CosconeZ_Rate());
    } else {
      clearCosconeZ_CosconeZ_Rate();
    }
    if (accessorImpl.hasCosconeY_RateCosconeZ_Rate()) {
      setCosconeY_RateCosconeZ_Rate(accessorImpl.getCosconeY_RateCosconeZ_Rate());
    } else {
      clearCosconeY_RateCosconeZ_Rate();
    }
  }
}

void ConeAngleCovarianceRatesType::reset() noexcept {
  clearCosconeY_CosconeY_Rate();
  clearCosconeY_CosconeZ_Rate();
  clearCosconeZ_CosconeY_Rate();
  clearCosconeZ_CosconeZ_Rate();
  clearCosconeY_RateCosconeZ_Rate();
}

xs::Double ConeAngleCovarianceRatesType::getCosconeY_CosconeY_Rate() const {
  if (cosconeY_CosconeY_Rate_Accessor) {
    return *cosconeY_CosconeY_Rate_Accessor;
  }
  throw uci::base::UCIException("Error in getCosconeY_CosconeY_Rate(): An attempt was made to get an optional field that was not enabled, call hasCosconeY_CosconeY_Rate() to determine if it is safe to call getCosconeY_CosconeY_Rate()");
}

uci::type::ConeAngleCovarianceRatesType& ConeAngleCovarianceRatesType::setCosconeY_CosconeY_Rate(xs::Double value) {
  cosconeY_CosconeY_Rate_Accessor = value;
  return *this;
}

bool ConeAngleCovarianceRatesType::hasCosconeY_CosconeY_Rate() const noexcept {
  return cosconeY_CosconeY_Rate_Accessor.has_value();
}

uci::type::ConeAngleCovarianceRatesType& ConeAngleCovarianceRatesType::clearCosconeY_CosconeY_Rate() noexcept {
  cosconeY_CosconeY_Rate_Accessor.reset();
  return *this;
}

xs::Double ConeAngleCovarianceRatesType::getCosconeY_CosconeZ_Rate() const {
  if (cosconeY_CosconeZ_Rate_Accessor) {
    return *cosconeY_CosconeZ_Rate_Accessor;
  }
  throw uci::base::UCIException("Error in getCosconeY_CosconeZ_Rate(): An attempt was made to get an optional field that was not enabled, call hasCosconeY_CosconeZ_Rate() to determine if it is safe to call getCosconeY_CosconeZ_Rate()");
}

uci::type::ConeAngleCovarianceRatesType& ConeAngleCovarianceRatesType::setCosconeY_CosconeZ_Rate(xs::Double value) {
  cosconeY_CosconeZ_Rate_Accessor = value;
  return *this;
}

bool ConeAngleCovarianceRatesType::hasCosconeY_CosconeZ_Rate() const noexcept {
  return cosconeY_CosconeZ_Rate_Accessor.has_value();
}

uci::type::ConeAngleCovarianceRatesType& ConeAngleCovarianceRatesType::clearCosconeY_CosconeZ_Rate() noexcept {
  cosconeY_CosconeZ_Rate_Accessor.reset();
  return *this;
}

xs::Double ConeAngleCovarianceRatesType::getCosconeZ_CosconeY_Rate() const {
  if (cosconeZ_CosconeY_Rate_Accessor) {
    return *cosconeZ_CosconeY_Rate_Accessor;
  }
  throw uci::base::UCIException("Error in getCosconeZ_CosconeY_Rate(): An attempt was made to get an optional field that was not enabled, call hasCosconeZ_CosconeY_Rate() to determine if it is safe to call getCosconeZ_CosconeY_Rate()");
}

uci::type::ConeAngleCovarianceRatesType& ConeAngleCovarianceRatesType::setCosconeZ_CosconeY_Rate(xs::Double value) {
  cosconeZ_CosconeY_Rate_Accessor = value;
  return *this;
}

bool ConeAngleCovarianceRatesType::hasCosconeZ_CosconeY_Rate() const noexcept {
  return cosconeZ_CosconeY_Rate_Accessor.has_value();
}

uci::type::ConeAngleCovarianceRatesType& ConeAngleCovarianceRatesType::clearCosconeZ_CosconeY_Rate() noexcept {
  cosconeZ_CosconeY_Rate_Accessor.reset();
  return *this;
}

xs::Double ConeAngleCovarianceRatesType::getCosconeZ_CosconeZ_Rate() const {
  if (cosconeZ_CosconeZ_Rate_Accessor) {
    return *cosconeZ_CosconeZ_Rate_Accessor;
  }
  throw uci::base::UCIException("Error in getCosconeZ_CosconeZ_Rate(): An attempt was made to get an optional field that was not enabled, call hasCosconeZ_CosconeZ_Rate() to determine if it is safe to call getCosconeZ_CosconeZ_Rate()");
}

uci::type::ConeAngleCovarianceRatesType& ConeAngleCovarianceRatesType::setCosconeZ_CosconeZ_Rate(xs::Double value) {
  cosconeZ_CosconeZ_Rate_Accessor = value;
  return *this;
}

bool ConeAngleCovarianceRatesType::hasCosconeZ_CosconeZ_Rate() const noexcept {
  return cosconeZ_CosconeZ_Rate_Accessor.has_value();
}

uci::type::ConeAngleCovarianceRatesType& ConeAngleCovarianceRatesType::clearCosconeZ_CosconeZ_Rate() noexcept {
  cosconeZ_CosconeZ_Rate_Accessor.reset();
  return *this;
}

xs::Double ConeAngleCovarianceRatesType::getCosconeY_RateCosconeZ_Rate() const {
  if (cosconeY_RateCosconeZ_Rate_Accessor) {
    return *cosconeY_RateCosconeZ_Rate_Accessor;
  }
  throw uci::base::UCIException("Error in getCosconeY_RateCosconeZ_Rate(): An attempt was made to get an optional field that was not enabled, call hasCosconeY_RateCosconeZ_Rate() to determine if it is safe to call getCosconeY_RateCosconeZ_Rate()");
}

uci::type::ConeAngleCovarianceRatesType& ConeAngleCovarianceRatesType::setCosconeY_RateCosconeZ_Rate(xs::Double value) {
  cosconeY_RateCosconeZ_Rate_Accessor = value;
  return *this;
}

bool ConeAngleCovarianceRatesType::hasCosconeY_RateCosconeZ_Rate() const noexcept {
  return cosconeY_RateCosconeZ_Rate_Accessor.has_value();
}

uci::type::ConeAngleCovarianceRatesType& ConeAngleCovarianceRatesType::clearCosconeY_RateCosconeZ_Rate() noexcept {
  cosconeY_RateCosconeZ_Rate_Accessor.reset();
  return *this;
}

std::unique_ptr<ConeAngleCovarianceRatesType> ConeAngleCovarianceRatesType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::coneAngleCovarianceRatesType : type};
  return (requestedType == uci::type::accessorType::coneAngleCovarianceRatesType) ? boost::make_unique<ConeAngleCovarianceRatesType>() : nullptr;
}

/**  */
namespace ConeAngleCovarianceRatesType_Names {

constexpr const char* Extern_Type_Name{"ConeAngleCovarianceRatesType"};
constexpr const char* CosconeY_CosconeY_Rate_Name{"CosconeY_CosconeY_Rate"};
constexpr const char* CosconeY_CosconeZ_Rate_Name{"CosconeY_CosconeZ_Rate"};
constexpr const char* CosconeZ_CosconeY_Rate_Name{"CosconeZ_CosconeY_Rate"};
constexpr const char* CosconeZ_CosconeZ_Rate_Name{"CosconeZ_CosconeZ_Rate"};
constexpr const char* CosconeY_RateCosconeZ_Rate_Name{"CosconeY_RateCosconeZ_Rate"};

} // namespace ConeAngleCovarianceRatesType_Names

void ConeAngleCovarianceRatesType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ConeAngleCovarianceRatesType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ConeAngleCovarianceRatesType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ConeAngleCovarianceRatesType_Names::CosconeY_CosconeY_Rate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeY_CosconeY_Rate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ConeAngleCovarianceRatesType_Names::CosconeY_CosconeZ_Rate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeY_CosconeZ_Rate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ConeAngleCovarianceRatesType_Names::CosconeZ_CosconeY_Rate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeZ_CosconeY_Rate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ConeAngleCovarianceRatesType_Names::CosconeZ_CosconeZ_Rate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeZ_CosconeZ_Rate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ConeAngleCovarianceRatesType_Names::CosconeY_RateCosconeZ_Rate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeY_RateCosconeZ_Rate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string ConeAngleCovarianceRatesType::serialize(const uci::type::ConeAngleCovarianceRatesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ConeAngleCovarianceRatesType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ConeAngleCovarianceRatesType_Names::Extern_Type_Name);
  }
  if (accessor.hasCosconeY_CosconeY_Rate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeY_CosconeY_Rate(), node, ConeAngleCovarianceRatesType_Names::CosconeY_CosconeY_Rate_Name);
  }
  if (accessor.hasCosconeY_CosconeZ_Rate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeY_CosconeZ_Rate(), node, ConeAngleCovarianceRatesType_Names::CosconeY_CosconeZ_Rate_Name);
  }
  if (accessor.hasCosconeZ_CosconeY_Rate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeZ_CosconeY_Rate(), node, ConeAngleCovarianceRatesType_Names::CosconeZ_CosconeY_Rate_Name);
  }
  if (accessor.hasCosconeZ_CosconeZ_Rate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeZ_CosconeZ_Rate(), node, ConeAngleCovarianceRatesType_Names::CosconeZ_CosconeZ_Rate_Name);
  }
  if (accessor.hasCosconeY_RateCosconeZ_Rate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeY_RateCosconeZ_Rate(), node, ConeAngleCovarianceRatesType_Names::CosconeY_RateCosconeZ_Rate_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ConeAngleCovarianceRatesType& ConeAngleCovarianceRatesType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ConeAngleCovarianceRatesType>().release());
}

uci::type::ConeAngleCovarianceRatesType& ConeAngleCovarianceRatesType::create(const uci::type::ConeAngleCovarianceRatesType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ConeAngleCovarianceRatesType> newAccessor{boost::make_unique<asb_uci::type::ConeAngleCovarianceRatesType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ConeAngleCovarianceRatesType::destroy(uci::type::ConeAngleCovarianceRatesType& accessor) {
  delete dynamic_cast<asb_uci::type::ConeAngleCovarianceRatesType*>(&accessor);
}

} // namespace type

} // namespace uci

