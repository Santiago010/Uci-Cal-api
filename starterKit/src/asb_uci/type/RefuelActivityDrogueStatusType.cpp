/** @file RefuelActivityDrogueStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RefuelActivityDrogueStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FuelFlowModeEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FuelFlowModeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MassType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RefuelActivityDrogueStatusType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RefuelActivityDrogueStatusType::RefuelActivityDrogueStatusType() = default;

RefuelActivityDrogueStatusType::~RefuelActivityDrogueStatusType() = default;

void RefuelActivityDrogueStatusType::copy(const uci::type::RefuelActivityDrogueStatusType& accessor) {
  copyImpl(accessor, false);
}

void RefuelActivityDrogueStatusType::copyImpl(const uci::type::RefuelActivityDrogueStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RefuelActivityDrogueStatusType&>(accessor);
    if (accessorImpl.hasTransfer()) {
      setTransfer(accessorImpl.getTransfer());
    } else {
      clearTransfer();
    }
    if (accessorImpl.fuelTransfer_Accessor) {
      setFuelTransfer(*(accessorImpl.fuelTransfer_Accessor));
    } else {
      fuelTransfer_Accessor.reset();
    }
    if (accessorImpl.hasScheduledFuelToBeDelivered()) {
      setScheduledFuelToBeDelivered(accessorImpl.getScheduledFuelToBeDelivered());
    } else {
      clearScheduledFuelToBeDelivered();
    }
  }
}

void RefuelActivityDrogueStatusType::reset() noexcept {
  clearTransfer();
  fuelTransfer_Accessor.reset();
  clearScheduledFuelToBeDelivered();
}

xs::Boolean RefuelActivityDrogueStatusType::getTransfer() const {
  if (transfer_Accessor) {
    return *transfer_Accessor;
  }
  throw uci::base::UCIException("Error in getTransfer(): An attempt was made to get an optional field that was not enabled, call hasTransfer() to determine if it is safe to call getTransfer()");
}

uci::type::RefuelActivityDrogueStatusType& RefuelActivityDrogueStatusType::setTransfer(xs::Boolean value) {
  transfer_Accessor = value;
  return *this;
}

bool RefuelActivityDrogueStatusType::hasTransfer() const noexcept {
  return transfer_Accessor.has_value();
}

uci::type::RefuelActivityDrogueStatusType& RefuelActivityDrogueStatusType::clearTransfer() noexcept {
  transfer_Accessor.reset();
  return *this;
}

uci::type::FuelFlowModeEnum& RefuelActivityDrogueStatusType::getFuelTransfer_() const {
  if (fuelTransfer_Accessor) {
    return *fuelTransfer_Accessor;
  }
  throw uci::base::UCIException("Error in getFuelTransfer(): An attempt was made to get an optional field that was not enabled, call hasFuelTransfer() to determine if it is safe to call getFuelTransfer()");
}

const uci::type::FuelFlowModeEnum& RefuelActivityDrogueStatusType::getFuelTransfer() const {
  return getFuelTransfer_();
}

uci::type::FuelFlowModeEnum& RefuelActivityDrogueStatusType::getFuelTransfer() {
  return getFuelTransfer_();
}

uci::type::RefuelActivityDrogueStatusType& RefuelActivityDrogueStatusType::setFuelTransfer(const uci::type::FuelFlowModeEnum& accessor) {
  enableFuelTransfer();
  if (&accessor != fuelTransfer_Accessor.get()) {
    fuelTransfer_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RefuelActivityDrogueStatusType& RefuelActivityDrogueStatusType::setFuelTransfer(const uci::type::FuelFlowModeEnum::EnumerationItem value) {
  enableFuelTransfer().setValue(value);
  return *this;
}

bool RefuelActivityDrogueStatusType::hasFuelTransfer() const noexcept {
  return static_cast<bool>(fuelTransfer_Accessor);
}

uci::type::FuelFlowModeEnum& RefuelActivityDrogueStatusType::enableFuelTransfer(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fuelFlowModeEnum : type};
  if ((!fuelTransfer_Accessor) || (fuelTransfer_Accessor->getAccessorType() != requestedType)) {
    fuelTransfer_Accessor = FuelFlowModeEnum::create(requestedType);
    if (!fuelTransfer_Accessor) {
      throw uci::base::UCIException("Error in enableFuelTransfer(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fuelTransfer_Accessor;
}

uci::type::RefuelActivityDrogueStatusType& RefuelActivityDrogueStatusType::clearFuelTransfer() noexcept {
  fuelTransfer_Accessor.reset();
  return *this;
}

uci::type::MassTypeValue RefuelActivityDrogueStatusType::getScheduledFuelToBeDelivered() const {
  if (scheduledFuelToBeDelivered_Accessor) {
    return *scheduledFuelToBeDelivered_Accessor;
  }
  throw uci::base::UCIException("Error in getScheduledFuelToBeDelivered(): An attempt was made to get an optional field that was not enabled, call hasScheduledFuelToBeDelivered() to determine if it is safe to call getScheduledFuelToBeDelivered()");
}

uci::type::RefuelActivityDrogueStatusType& RefuelActivityDrogueStatusType::setScheduledFuelToBeDelivered(uci::type::MassTypeValue value) {
  scheduledFuelToBeDelivered_Accessor = value;
  return *this;
}

bool RefuelActivityDrogueStatusType::hasScheduledFuelToBeDelivered() const noexcept {
  return scheduledFuelToBeDelivered_Accessor.has_value();
}

uci::type::RefuelActivityDrogueStatusType& RefuelActivityDrogueStatusType::clearScheduledFuelToBeDelivered() noexcept {
  scheduledFuelToBeDelivered_Accessor.reset();
  return *this;
}

std::unique_ptr<RefuelActivityDrogueStatusType> RefuelActivityDrogueStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelActivityDrogueStatusType : type};
  return (requestedType == uci::type::accessorType::refuelActivityDrogueStatusType) ? boost::make_unique<RefuelActivityDrogueStatusType>() : nullptr;
}

/**  */
namespace RefuelActivityDrogueStatusType_Names {

constexpr const char* Extern_Type_Name{"RefuelActivityDrogueStatusType"};
constexpr const char* Transfer_Name{"Transfer"};
constexpr const char* FuelTransfer_Name{"FuelTransfer"};
constexpr const char* ScheduledFuelToBeDelivered_Name{"ScheduledFuelToBeDelivered"};

} // namespace RefuelActivityDrogueStatusType_Names

void RefuelActivityDrogueStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RefuelActivityDrogueStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RefuelActivityDrogueStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RefuelActivityDrogueStatusType_Names::Transfer_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTransfer(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RefuelActivityDrogueStatusType_Names::FuelTransfer_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFuelTransfer().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RefuelActivityDrogueStatusType_Names::ScheduledFuelToBeDelivered_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setScheduledFuelToBeDelivered(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string RefuelActivityDrogueStatusType::serialize(const uci::type::RefuelActivityDrogueStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RefuelActivityDrogueStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RefuelActivityDrogueStatusType_Names::Extern_Type_Name);
  }
  if (accessor.hasTransfer()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getTransfer(), node, RefuelActivityDrogueStatusType_Names::Transfer_Name);
  }
  if (accessor.hasFuelTransfer()) {
    FuelFlowModeEnum::serialize(accessor.getFuelTransfer(), node, RefuelActivityDrogueStatusType_Names::FuelTransfer_Name, false);
  }
  if (accessor.hasScheduledFuelToBeDelivered()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getScheduledFuelToBeDelivered(), node, RefuelActivityDrogueStatusType_Names::ScheduledFuelToBeDelivered_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RefuelActivityDrogueStatusType& RefuelActivityDrogueStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RefuelActivityDrogueStatusType>().release());
}

uci::type::RefuelActivityDrogueStatusType& RefuelActivityDrogueStatusType::create(const uci::type::RefuelActivityDrogueStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RefuelActivityDrogueStatusType> newAccessor{boost::make_unique<asb_uci::type::RefuelActivityDrogueStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RefuelActivityDrogueStatusType::destroy(uci::type::RefuelActivityDrogueStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::RefuelActivityDrogueStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

