/** @file CryptoPortStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CryptoPortStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CryptoPortID_Type.h"
#include "asb_uci/type/CryptoTypeEnum.h"
#include "asb_uci/type/DataPortType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CryptoPortID_Type.h"
#include "uci/type/CryptoPortStatusType.h"
#include "uci/type/CryptoTypeEnum.h"
#include "uci/type/DataPortType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CryptoPortStatusType::CryptoPortStatusType()
  : cryptoPortID_Accessor{boost::make_unique<CryptoPortID_Type>()},
    encryptedDataSink_Accessor{boost::make_unique<DataPortType>()},
    decryptedDataSink_Accessor{boost::make_unique<DataPortType>()},
    activeCryptoType_Accessor{boost::make_unique<CryptoTypeEnum>()},
    availableCryptoType_Accessor{boost::make_unique<AvailableCryptoType>(0, 14)} {
}

CryptoPortStatusType::~CryptoPortStatusType() = default;

void CryptoPortStatusType::copy(const uci::type::CryptoPortStatusType& accessor) {
  copyImpl(accessor, false);
}

void CryptoPortStatusType::copyImpl(const uci::type::CryptoPortStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CryptoPortStatusType&>(accessor);
    setCryptoPortID(*(accessorImpl.cryptoPortID_Accessor));
    setEncryptedDataSink(*(accessorImpl.encryptedDataSink_Accessor));
    setDecryptedDataSink(*(accessorImpl.decryptedDataSink_Accessor));
    setActiveCryptoType(*(accessorImpl.activeCryptoType_Accessor));
    setAvailableCryptoType(*(accessorImpl.availableCryptoType_Accessor));
  }
}

void CryptoPortStatusType::reset() noexcept {
  cryptoPortID_Accessor->reset();
  encryptedDataSink_Accessor->reset();
  decryptedDataSink_Accessor->reset();
  activeCryptoType_Accessor->reset();
  availableCryptoType_Accessor->reset();
}

const uci::type::CryptoPortID_Type& CryptoPortStatusType::getCryptoPortID() const {
  return *cryptoPortID_Accessor;
}

uci::type::CryptoPortID_Type& CryptoPortStatusType::getCryptoPortID() {
  return *cryptoPortID_Accessor;
}

uci::type::CryptoPortStatusType& CryptoPortStatusType::setCryptoPortID(const uci::type::CryptoPortID_Type& accessor) {
  if (&accessor != cryptoPortID_Accessor.get()) {
    cryptoPortID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DataPortType& CryptoPortStatusType::getEncryptedDataSink() const {
  return *encryptedDataSink_Accessor;
}

uci::type::DataPortType& CryptoPortStatusType::getEncryptedDataSink() {
  return *encryptedDataSink_Accessor;
}

uci::type::CryptoPortStatusType& CryptoPortStatusType::setEncryptedDataSink(const uci::type::DataPortType& accessor) {
  if (&accessor != encryptedDataSink_Accessor.get()) {
    encryptedDataSink_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DataPortType& CryptoPortStatusType::getDecryptedDataSink() const {
  return *decryptedDataSink_Accessor;
}

uci::type::DataPortType& CryptoPortStatusType::getDecryptedDataSink() {
  return *decryptedDataSink_Accessor;
}

uci::type::CryptoPortStatusType& CryptoPortStatusType::setDecryptedDataSink(const uci::type::DataPortType& accessor) {
  if (&accessor != decryptedDataSink_Accessor.get()) {
    decryptedDataSink_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CryptoTypeEnum& CryptoPortStatusType::getActiveCryptoType() const {
  return *activeCryptoType_Accessor;
}

uci::type::CryptoTypeEnum& CryptoPortStatusType::getActiveCryptoType() {
  return *activeCryptoType_Accessor;
}

uci::type::CryptoPortStatusType& CryptoPortStatusType::setActiveCryptoType(const uci::type::CryptoTypeEnum& accessor) {
  if (&accessor != activeCryptoType_Accessor.get()) {
    activeCryptoType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CryptoPortStatusType& CryptoPortStatusType::setActiveCryptoType(uci::type::CryptoTypeEnum::EnumerationItem value) {
  activeCryptoType_Accessor->setValue(value);
  return *this;
}


const uci::type::CryptoPortStatusType::AvailableCryptoType& CryptoPortStatusType::getAvailableCryptoType() const {
  return *availableCryptoType_Accessor;
}

uci::type::CryptoPortStatusType::AvailableCryptoType& CryptoPortStatusType::getAvailableCryptoType() {
  return *availableCryptoType_Accessor;
}

uci::type::CryptoPortStatusType& CryptoPortStatusType::setAvailableCryptoType(const uci::type::CryptoPortStatusType::AvailableCryptoType& accessor) {
  if (&accessor != availableCryptoType_Accessor.get()) {
    availableCryptoType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CryptoPortStatusType> CryptoPortStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cryptoPortStatusType : type};
  return (requestedType == uci::type::accessorType::cryptoPortStatusType) ? boost::make_unique<CryptoPortStatusType>() : nullptr;
}

/**  */
namespace CryptoPortStatusType_Names {

constexpr const char* Extern_Type_Name{"CryptoPortStatusType"};
constexpr const char* CryptoPortID_Name{"CryptoPortID"};
constexpr const char* EncryptedDataSink_Name{"EncryptedDataSink"};
constexpr const char* DecryptedDataSink_Name{"DecryptedDataSink"};
constexpr const char* ActiveCryptoType_Name{"ActiveCryptoType"};
constexpr const char* AvailableCryptoType_Name{"AvailableCryptoType"};

} // namespace CryptoPortStatusType_Names

void CryptoPortStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CryptoPortStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CryptoPortStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CryptoPortStatusType_Names::CryptoPortID_Name) {
      CryptoPortID_Type::deserialize(valueType.second, accessor.getCryptoPortID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CryptoPortStatusType_Names::EncryptedDataSink_Name) {
      DataPortType::deserialize(valueType.second, accessor.getEncryptedDataSink(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CryptoPortStatusType_Names::DecryptedDataSink_Name) {
      DataPortType::deserialize(valueType.second, accessor.getDecryptedDataSink(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CryptoPortStatusType_Names::ActiveCryptoType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getActiveCryptoType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CryptoPortStatusType_Names::AvailableCryptoType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CryptoPortStatusType::AvailableCryptoType& boundedList = accessor.getAvailableCryptoType();
        const uci::type::CryptoPortStatusType::AvailableCryptoType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    }
  }
}

std::string CryptoPortStatusType::serialize(const uci::type::CryptoPortStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CryptoPortStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CryptoPortStatusType_Names::Extern_Type_Name);
  }
  CryptoPortID_Type::serialize(accessor.getCryptoPortID(), node, CryptoPortStatusType_Names::CryptoPortID_Name);
  DataPortType::serialize(accessor.getEncryptedDataSink(), node, CryptoPortStatusType_Names::EncryptedDataSink_Name);
  DataPortType::serialize(accessor.getDecryptedDataSink(), node, CryptoPortStatusType_Names::DecryptedDataSink_Name);
  CryptoTypeEnum::serialize(accessor.getActiveCryptoType(), node, CryptoPortStatusType_Names::ActiveCryptoType_Name, false);
  {
    const uci::type::CryptoPortStatusType::AvailableCryptoType& boundedList = accessor.getAvailableCryptoType();
    for (uci::type::CryptoPortStatusType::AvailableCryptoType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CryptoTypeEnum::serialize(boundedList.at(i), node, CryptoPortStatusType_Names::AvailableCryptoType_Name, false);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CryptoPortStatusType& CryptoPortStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CryptoPortStatusType>().release());
}

uci::type::CryptoPortStatusType& CryptoPortStatusType::create(const uci::type::CryptoPortStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CryptoPortStatusType> newAccessor{boost::make_unique<asb_uci::type::CryptoPortStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CryptoPortStatusType::destroy(uci::type::CryptoPortStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::CryptoPortStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

