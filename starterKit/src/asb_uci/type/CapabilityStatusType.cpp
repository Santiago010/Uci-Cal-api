/** @file CapabilityStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CapabilityStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AvailabilityInfoType.h"
#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AvailabilityInfoType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/CapabilityStatusType.h"
#include "uci/type/ForeignKeyType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CapabilityStatusType::CapabilityStatusType()
  : capabilityID_Accessor{boost::make_unique<CapabilityID_Type>()},
    availabilityInfo_Accessor{boost::make_unique<AvailabilityInfoType>()} {
}

CapabilityStatusType::~CapabilityStatusType() = default;

void CapabilityStatusType::copy(const uci::type::CapabilityStatusType& accessor) {
  copyImpl(accessor, false);
}

void CapabilityStatusType::copyImpl(const uci::type::CapabilityStatusType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::capabilityStatusType)) {
      const auto& accessorImpl = dynamic_cast<const CapabilityStatusType&>(accessor);
      setCapabilityID(*(accessorImpl.capabilityID_Accessor));
      setAvailabilityInfo(*(accessorImpl.availabilityInfo_Accessor));
      if (accessorImpl.hasCapabilityPrecedence()) {
        setCapabilityPrecedence(accessorImpl.getCapabilityPrecedence());
      } else {
        clearCapabilityPrecedence();
      }
      if (accessorImpl.representationKey_Accessor) {
        setRepresentationKey(*(accessorImpl.representationKey_Accessor));
      } else {
        representationKey_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void CapabilityStatusType::reset() noexcept {
  capabilityID_Accessor->reset();
  availabilityInfo_Accessor->reset();
  clearCapabilityPrecedence();
  representationKey_Accessor.reset();
}

const uci::type::CapabilityID_Type& CapabilityStatusType::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::CapabilityID_Type& CapabilityStatusType::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::CapabilityStatusType& CapabilityStatusType::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AvailabilityInfoType& CapabilityStatusType::getAvailabilityInfo() const {
  return *availabilityInfo_Accessor;
}

uci::type::AvailabilityInfoType& CapabilityStatusType::getAvailabilityInfo() {
  return *availabilityInfo_Accessor;
}

uci::type::CapabilityStatusType& CapabilityStatusType::setAvailabilityInfo(const uci::type::AvailabilityInfoType& accessor) {
  if (&accessor != availabilityInfo_Accessor.get()) {
    availabilityInfo_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt CapabilityStatusType::getCapabilityPrecedence() const {
  if (capabilityPrecedence_Accessor) {
    return *capabilityPrecedence_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityPrecedence(): An attempt was made to get an optional field that was not enabled, call hasCapabilityPrecedence() to determine if it is safe to call getCapabilityPrecedence()");
}

uci::type::CapabilityStatusType& CapabilityStatusType::setCapabilityPrecedence(xs::UnsignedInt value) {
  capabilityPrecedence_Accessor = value;
  return *this;
}

bool CapabilityStatusType::hasCapabilityPrecedence() const noexcept {
  return capabilityPrecedence_Accessor.has_value();
}

uci::type::CapabilityStatusType& CapabilityStatusType::clearCapabilityPrecedence() noexcept {
  capabilityPrecedence_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& CapabilityStatusType::getRepresentationKey_() const {
  if (representationKey_Accessor) {
    return *representationKey_Accessor;
  }
  throw uci::base::UCIException("Error in getRepresentationKey(): An attempt was made to get an optional field that was not enabled, call hasRepresentationKey() to determine if it is safe to call getRepresentationKey()");
}

const uci::type::ForeignKeyType& CapabilityStatusType::getRepresentationKey() const {
  return getRepresentationKey_();
}

uci::type::ForeignKeyType& CapabilityStatusType::getRepresentationKey() {
  return getRepresentationKey_();
}

uci::type::CapabilityStatusType& CapabilityStatusType::setRepresentationKey(const uci::type::ForeignKeyType& accessor) {
  enableRepresentationKey(accessor.getAccessorType());
  if (&accessor != representationKey_Accessor.get()) {
    representationKey_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CapabilityStatusType::hasRepresentationKey() const noexcept {
  return static_cast<bool>(representationKey_Accessor);
}

uci::type::ForeignKeyType& CapabilityStatusType::enableRepresentationKey(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!representationKey_Accessor) || (representationKey_Accessor->getAccessorType() != requestedType)) {
    representationKey_Accessor = ForeignKeyType::create(requestedType);
    if (!representationKey_Accessor) {
      throw uci::base::UCIException("Error in enableRepresentationKey(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *representationKey_Accessor;
}

uci::type::CapabilityStatusType& CapabilityStatusType::clearRepresentationKey() noexcept {
  representationKey_Accessor.reset();
  return *this;
}

std::unique_ptr<CapabilityStatusType> CapabilityStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityStatusType : type};
  return std::unique_ptr<CapabilityStatusType>(dynamic_cast<CapabilityStatusType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace CapabilityStatusType_Names {

constexpr const char* Extern_Type_Name{"CapabilityStatusType"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* AvailabilityInfo_Name{"AvailabilityInfo"};
constexpr const char* CapabilityPrecedence_Name{"CapabilityPrecedence"};
constexpr const char* RepresentationKey_Name{"RepresentationKey"};

} // namespace CapabilityStatusType_Names

void CapabilityStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilityStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilityStatusType_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.getCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityStatusType_Names::AvailabilityInfo_Name) {
      AvailabilityInfoType::deserialize(valueType.second, accessor.getAvailabilityInfo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityStatusType_Names::CapabilityPrecedence_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCapabilityPrecedence(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CapabilityStatusType_Names::RepresentationKey_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableRepresentationKey(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string CapabilityStatusType::serialize(const uci::type::CapabilityStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CapabilityStatusType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::capabilityStatusType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilityStatusType_Names::Extern_Type_Name);
    }
    CapabilityID_Type::serialize(accessor.getCapabilityID(), node, CapabilityStatusType_Names::CapabilityID_Name);
    AvailabilityInfoType::serialize(accessor.getAvailabilityInfo(), node, CapabilityStatusType_Names::AvailabilityInfo_Name);
    if (accessor.hasCapabilityPrecedence()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getCapabilityPrecedence(), node, CapabilityStatusType_Names::CapabilityPrecedence_Name);
    }
    if (accessor.hasRepresentationKey()) {
      ForeignKeyType::serialize(accessor.getRepresentationKey(), node, CapabilityStatusType_Names::RepresentationKey_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CapabilityStatusType& CapabilityStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CapabilityStatusType>().release());
}

uci::type::CapabilityStatusType& CapabilityStatusType::create(const uci::type::CapabilityStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CapabilityStatusType> newAccessor{boost::make_unique<asb_uci::type::CapabilityStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CapabilityStatusType::destroy(uci::type::CapabilityStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::CapabilityStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

