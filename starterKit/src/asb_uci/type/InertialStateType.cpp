/** @file InertialStateType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/InertialStateType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/Acceleration3D_Type.h"
#include "../../../include/asb_uci/type/OrientationRateType.h"
#include "../../../include/asb_uci/type/OrientationType.h"
#include "../../../include/asb_uci/type/Point4D_Type.h"
#include "../../../include/asb_uci/type/UncertaintyType.h"
#include "../../../include/asb_uci/type/Velocity2D_Type.h"
#include "../../../include/asb_uci/type/Velocity3D_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Acceleration3D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/InertialStateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Link16_PositionQualityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrientationRateType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrientationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point4D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/UncertaintyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Velocity2D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Velocity3D_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

InertialStateType::InertialStateType()
  : position_Accessor{boost::make_unique<Point4D_Type>()} {
}

InertialStateType::~InertialStateType() = default;

void InertialStateType::copy(const uci::type::InertialStateType& accessor) {
  copyImpl(accessor, false);
}

void InertialStateType::copyImpl(const uci::type::InertialStateType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const InertialStateType&>(accessor);
    setPosition(*(accessorImpl.position_Accessor));
    if (accessorImpl.positionUncertainty_Accessor) {
      setPositionUncertainty(*(accessorImpl.positionUncertainty_Accessor));
    } else {
      positionUncertainty_Accessor.reset();
    }
    if (accessorImpl.domainVelocity_Accessor) {
      setDomainVelocity(*(accessorImpl.domainVelocity_Accessor));
    } else {
      domainVelocity_Accessor.reset();
    }
    if (accessorImpl.groundVelocity_Accessor) {
      setGroundVelocity(*(accessorImpl.groundVelocity_Accessor));
    } else {
      groundVelocity_Accessor.reset();
    }
    if (accessorImpl.domainAcceleration_Accessor) {
      setDomainAcceleration(*(accessorImpl.domainAcceleration_Accessor));
    } else {
      domainAcceleration_Accessor.reset();
    }
    if (accessorImpl.orientation_Accessor) {
      setOrientation(*(accessorImpl.orientation_Accessor));
    } else {
      orientation_Accessor.reset();
    }
    if (accessorImpl.orientationRate_Accessor) {
      setOrientationRate(*(accessorImpl.orientationRate_Accessor));
    } else {
      orientationRate_Accessor.reset();
    }
    if (accessorImpl.hasLink16PositionQuality()) {
      setLink16PositionQuality(accessorImpl.getLink16PositionQuality());
    } else {
      clearLink16PositionQuality();
    }
  }
}

void InertialStateType::reset() noexcept {
  position_Accessor->reset();
  positionUncertainty_Accessor.reset();
  domainVelocity_Accessor.reset();
  groundVelocity_Accessor.reset();
  domainAcceleration_Accessor.reset();
  orientation_Accessor.reset();
  orientationRate_Accessor.reset();
  clearLink16PositionQuality();
}

const uci::type::Point4D_Type& InertialStateType::getPosition() const {
  return *position_Accessor;
}

uci::type::Point4D_Type& InertialStateType::getPosition() {
  return *position_Accessor;
}

uci::type::InertialStateType& InertialStateType::setPosition(const uci::type::Point4D_Type& accessor) {
  if (&accessor != position_Accessor.get()) {
    position_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::UncertaintyType& InertialStateType::getPositionUncertainty_() const {
  if (positionUncertainty_Accessor) {
    return *positionUncertainty_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionUncertainty(): An attempt was made to get an optional field that was not enabled, call hasPositionUncertainty() to determine if it is safe to call getPositionUncertainty()");
}

const uci::type::UncertaintyType& InertialStateType::getPositionUncertainty() const {
  return getPositionUncertainty_();
}

uci::type::UncertaintyType& InertialStateType::getPositionUncertainty() {
  return getPositionUncertainty_();
}

uci::type::InertialStateType& InertialStateType::setPositionUncertainty(const uci::type::UncertaintyType& accessor) {
  enablePositionUncertainty();
  if (&accessor != positionUncertainty_Accessor.get()) {
    positionUncertainty_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool InertialStateType::hasPositionUncertainty() const noexcept {
  return static_cast<bool>(positionUncertainty_Accessor);
}

uci::type::UncertaintyType& InertialStateType::enablePositionUncertainty(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::uncertaintyType : type};
  if ((!positionUncertainty_Accessor) || (positionUncertainty_Accessor->getAccessorType() != requestedType)) {
    positionUncertainty_Accessor = UncertaintyType::create(requestedType);
    if (!positionUncertainty_Accessor) {
      throw uci::base::UCIException("Error in enablePositionUncertainty(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionUncertainty_Accessor;
}

uci::type::InertialStateType& InertialStateType::clearPositionUncertainty() noexcept {
  positionUncertainty_Accessor.reset();
  return *this;
}

uci::type::Velocity3D_Type& InertialStateType::getDomainVelocity_() const {
  if (domainVelocity_Accessor) {
    return *domainVelocity_Accessor;
  }
  throw uci::base::UCIException("Error in getDomainVelocity(): An attempt was made to get an optional field that was not enabled, call hasDomainVelocity() to determine if it is safe to call getDomainVelocity()");
}

const uci::type::Velocity3D_Type& InertialStateType::getDomainVelocity() const {
  return getDomainVelocity_();
}

uci::type::Velocity3D_Type& InertialStateType::getDomainVelocity() {
  return getDomainVelocity_();
}

uci::type::InertialStateType& InertialStateType::setDomainVelocity(const uci::type::Velocity3D_Type& accessor) {
  enableDomainVelocity();
  if (&accessor != domainVelocity_Accessor.get()) {
    domainVelocity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool InertialStateType::hasDomainVelocity() const noexcept {
  return static_cast<bool>(domainVelocity_Accessor);
}

uci::type::Velocity3D_Type& InertialStateType::enableDomainVelocity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::velocity3D_Type : type};
  if ((!domainVelocity_Accessor) || (domainVelocity_Accessor->getAccessorType() != requestedType)) {
    domainVelocity_Accessor = Velocity3D_Type::create(requestedType);
    if (!domainVelocity_Accessor) {
      throw uci::base::UCIException("Error in enableDomainVelocity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *domainVelocity_Accessor;
}

uci::type::InertialStateType& InertialStateType::clearDomainVelocity() noexcept {
  domainVelocity_Accessor.reset();
  return *this;
}

uci::type::Velocity2D_Type& InertialStateType::getGroundVelocity_() const {
  if (groundVelocity_Accessor) {
    return *groundVelocity_Accessor;
  }
  throw uci::base::UCIException("Error in getGroundVelocity(): An attempt was made to get an optional field that was not enabled, call hasGroundVelocity() to determine if it is safe to call getGroundVelocity()");
}

const uci::type::Velocity2D_Type& InertialStateType::getGroundVelocity() const {
  return getGroundVelocity_();
}

uci::type::Velocity2D_Type& InertialStateType::getGroundVelocity() {
  return getGroundVelocity_();
}

uci::type::InertialStateType& InertialStateType::setGroundVelocity(const uci::type::Velocity2D_Type& accessor) {
  enableGroundVelocity(accessor.getAccessorType());
  if (&accessor != groundVelocity_Accessor.get()) {
    groundVelocity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool InertialStateType::hasGroundVelocity() const noexcept {
  return static_cast<bool>(groundVelocity_Accessor);
}

uci::type::Velocity2D_Type& InertialStateType::enableGroundVelocity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::velocity2D_Type : type};
  if ((!groundVelocity_Accessor) || (groundVelocity_Accessor->getAccessorType() != requestedType)) {
    groundVelocity_Accessor = Velocity2D_Type::create(requestedType);
    if (!groundVelocity_Accessor) {
      throw uci::base::UCIException("Error in enableGroundVelocity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *groundVelocity_Accessor;
}

uci::type::InertialStateType& InertialStateType::clearGroundVelocity() noexcept {
  groundVelocity_Accessor.reset();
  return *this;
}

uci::type::Acceleration3D_Type& InertialStateType::getDomainAcceleration_() const {
  if (domainAcceleration_Accessor) {
    return *domainAcceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getDomainAcceleration(): An attempt was made to get an optional field that was not enabled, call hasDomainAcceleration() to determine if it is safe to call getDomainAcceleration()");
}

const uci::type::Acceleration3D_Type& InertialStateType::getDomainAcceleration() const {
  return getDomainAcceleration_();
}

uci::type::Acceleration3D_Type& InertialStateType::getDomainAcceleration() {
  return getDomainAcceleration_();
}

uci::type::InertialStateType& InertialStateType::setDomainAcceleration(const uci::type::Acceleration3D_Type& accessor) {
  enableDomainAcceleration();
  if (&accessor != domainAcceleration_Accessor.get()) {
    domainAcceleration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool InertialStateType::hasDomainAcceleration() const noexcept {
  return static_cast<bool>(domainAcceleration_Accessor);
}

uci::type::Acceleration3D_Type& InertialStateType::enableDomainAcceleration(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::acceleration3D_Type : type};
  if ((!domainAcceleration_Accessor) || (domainAcceleration_Accessor->getAccessorType() != requestedType)) {
    domainAcceleration_Accessor = Acceleration3D_Type::create(requestedType);
    if (!domainAcceleration_Accessor) {
      throw uci::base::UCIException("Error in enableDomainAcceleration(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *domainAcceleration_Accessor;
}

uci::type::InertialStateType& InertialStateType::clearDomainAcceleration() noexcept {
  domainAcceleration_Accessor.reset();
  return *this;
}

uci::type::OrientationType& InertialStateType::getOrientation_() const {
  if (orientation_Accessor) {
    return *orientation_Accessor;
  }
  throw uci::base::UCIException("Error in getOrientation(): An attempt was made to get an optional field that was not enabled, call hasOrientation() to determine if it is safe to call getOrientation()");
}

const uci::type::OrientationType& InertialStateType::getOrientation() const {
  return getOrientation_();
}

uci::type::OrientationType& InertialStateType::getOrientation() {
  return getOrientation_();
}

uci::type::InertialStateType& InertialStateType::setOrientation(const uci::type::OrientationType& accessor) {
  enableOrientation();
  if (&accessor != orientation_Accessor.get()) {
    orientation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool InertialStateType::hasOrientation() const noexcept {
  return static_cast<bool>(orientation_Accessor);
}

uci::type::OrientationType& InertialStateType::enableOrientation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orientationType : type};
  if ((!orientation_Accessor) || (orientation_Accessor->getAccessorType() != requestedType)) {
    orientation_Accessor = OrientationType::create(requestedType);
    if (!orientation_Accessor) {
      throw uci::base::UCIException("Error in enableOrientation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orientation_Accessor;
}

uci::type::InertialStateType& InertialStateType::clearOrientation() noexcept {
  orientation_Accessor.reset();
  return *this;
}

uci::type::OrientationRateType& InertialStateType::getOrientationRate_() const {
  if (orientationRate_Accessor) {
    return *orientationRate_Accessor;
  }
  throw uci::base::UCIException("Error in getOrientationRate(): An attempt was made to get an optional field that was not enabled, call hasOrientationRate() to determine if it is safe to call getOrientationRate()");
}

const uci::type::OrientationRateType& InertialStateType::getOrientationRate() const {
  return getOrientationRate_();
}

uci::type::OrientationRateType& InertialStateType::getOrientationRate() {
  return getOrientationRate_();
}

uci::type::InertialStateType& InertialStateType::setOrientationRate(const uci::type::OrientationRateType& accessor) {
  enableOrientationRate();
  if (&accessor != orientationRate_Accessor.get()) {
    orientationRate_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool InertialStateType::hasOrientationRate() const noexcept {
  return static_cast<bool>(orientationRate_Accessor);
}

uci::type::OrientationRateType& InertialStateType::enableOrientationRate(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orientationRateType : type};
  if ((!orientationRate_Accessor) || (orientationRate_Accessor->getAccessorType() != requestedType)) {
    orientationRate_Accessor = OrientationRateType::create(requestedType);
    if (!orientationRate_Accessor) {
      throw uci::base::UCIException("Error in enableOrientationRate(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orientationRate_Accessor;
}

uci::type::InertialStateType& InertialStateType::clearOrientationRate() noexcept {
  orientationRate_Accessor.reset();
  return *this;
}

uci::type::Link16_PositionQualityTypeValue InertialStateType::getLink16PositionQuality() const {
  if (link16PositionQuality_Accessor) {
    return *link16PositionQuality_Accessor;
  }
  throw uci::base::UCIException("Error in getLink16PositionQuality(): An attempt was made to get an optional field that was not enabled, call hasLink16PositionQuality() to determine if it is safe to call getLink16PositionQuality()");
}

uci::type::InertialStateType& InertialStateType::setLink16PositionQuality(uci::type::Link16_PositionQualityTypeValue value) {
  link16PositionQuality_Accessor = value;
  return *this;
}

bool InertialStateType::hasLink16PositionQuality() const noexcept {
  return link16PositionQuality_Accessor.has_value();
}

uci::type::InertialStateType& InertialStateType::clearLink16PositionQuality() noexcept {
  link16PositionQuality_Accessor.reset();
  return *this;
}

std::unique_ptr<InertialStateType> InertialStateType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::inertialStateType : type};
  return (requestedType == uci::type::accessorType::inertialStateType) ? boost::make_unique<InertialStateType>() : nullptr;
}

/**  */
namespace InertialStateType_Names {

constexpr const char* Extern_Type_Name{"InertialStateType"};
constexpr const char* Position_Name{"Position"};
constexpr const char* PositionUncertainty_Name{"PositionUncertainty"};
constexpr const char* DomainVelocity_Name{"DomainVelocity"};
constexpr const char* GroundVelocity_Name{"GroundVelocity"};
constexpr const char* DomainAcceleration_Name{"DomainAcceleration"};
constexpr const char* Orientation_Name{"Orientation"};
constexpr const char* OrientationRate_Name{"OrientationRate"};
constexpr const char* Link16PositionQuality_Name{"Link16PositionQuality"};

} // namespace InertialStateType_Names

void InertialStateType::deserialize(const boost::property_tree::ptree& propTree, uci::type::InertialStateType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = InertialStateType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + InertialStateType_Names::Position_Name) {
      Point4D_Type::deserialize(valueType.second, accessor.getPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateType_Names::PositionUncertainty_Name) {
      UncertaintyType::deserialize(valueType.second, accessor.enablePositionUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateType_Names::DomainVelocity_Name) {
      Velocity3D_Type::deserialize(valueType.second, accessor.enableDomainVelocity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateType_Names::GroundVelocity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableGroundVelocity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateType_Names::DomainAcceleration_Name) {
      Acceleration3D_Type::deserialize(valueType.second, accessor.enableDomainAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateType_Names::Orientation_Name) {
      OrientationType::deserialize(valueType.second, accessor.enableOrientation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateType_Names::OrientationRate_Name) {
      OrientationRateType::deserialize(valueType.second, accessor.enableOrientationRate(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateType_Names::Link16PositionQuality_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLink16PositionQuality(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    }
  }
}

std::string InertialStateType::serialize(const uci::type::InertialStateType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? InertialStateType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, InertialStateType_Names::Extern_Type_Name);
  }
  Point4D_Type::serialize(accessor.getPosition(), node, InertialStateType_Names::Position_Name);
  if (accessor.hasPositionUncertainty()) {
    UncertaintyType::serialize(accessor.getPositionUncertainty(), node, InertialStateType_Names::PositionUncertainty_Name);
  }
  if (accessor.hasDomainVelocity()) {
    Velocity3D_Type::serialize(accessor.getDomainVelocity(), node, InertialStateType_Names::DomainVelocity_Name);
  }
  if (accessor.hasGroundVelocity()) {
    Velocity2D_Type::serialize(accessor.getGroundVelocity(), node, InertialStateType_Names::GroundVelocity_Name);
  }
  if (accessor.hasDomainAcceleration()) {
    Acceleration3D_Type::serialize(accessor.getDomainAcceleration(), node, InertialStateType_Names::DomainAcceleration_Name);
  }
  if (accessor.hasOrientation()) {
    OrientationType::serialize(accessor.getOrientation(), node, InertialStateType_Names::Orientation_Name);
  }
  if (accessor.hasOrientationRate()) {
    OrientationRateType::serialize(accessor.getOrientationRate(), node, InertialStateType_Names::OrientationRate_Name);
  }
  if (accessor.hasLink16PositionQuality()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getLink16PositionQuality(), node, InertialStateType_Names::Link16PositionQuality_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::InertialStateType& InertialStateType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::InertialStateType>().release());
}

uci::type::InertialStateType& InertialStateType::create(const uci::type::InertialStateType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::InertialStateType> newAccessor{boost::make_unique<asb_uci::type::InertialStateType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void InertialStateType::destroy(uci::type::InertialStateType& accessor) {
  delete dynamic_cast<asb_uci::type::InertialStateType*>(&accessor);
}

} // namespace type

} // namespace uci

