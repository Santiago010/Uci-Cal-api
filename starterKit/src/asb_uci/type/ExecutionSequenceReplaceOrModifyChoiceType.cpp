/** @file ExecutionSequenceReplaceOrModifyChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ExecutionSequenceReplaceOrModifyChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ExecutionSequenceModificationDetailsType.h"
#include "asb_uci/type/ExecutionSequenceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ExecutionSequenceModificationDetailsType.h"
#include "uci/type/ExecutionSequenceReplaceOrModifyChoiceType.h"
#include "uci/type/ExecutionSequenceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ExecutionSequenceReplaceOrModifyChoiceType::ExecutionSequenceReplaceOrModifyChoiceType() = default;

ExecutionSequenceReplaceOrModifyChoiceType::~ExecutionSequenceReplaceOrModifyChoiceType() = default;

void ExecutionSequenceReplaceOrModifyChoiceType::copy(const uci::type::ExecutionSequenceReplaceOrModifyChoiceType& accessor) {
  copyImpl(accessor, false);
}

void ExecutionSequenceReplaceOrModifyChoiceType::copyImpl(const uci::type::ExecutionSequenceReplaceOrModifyChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ExecutionSequenceReplaceOrModifyChoiceType&>(accessor);
    if (accessorImpl.replaceExecutionSequence_Accessor) {
      setReplaceExecutionSequence(*(accessorImpl.replaceExecutionSequence_Accessor));
    } else {
      replaceExecutionSequence_Accessor.reset();
    }
    if (accessorImpl.modifyExecutionSequence_Accessor) {
      setModifyExecutionSequence(*(accessorImpl.modifyExecutionSequence_Accessor));
    } else {
      modifyExecutionSequence_Accessor.reset();
    }
  }
}

void ExecutionSequenceReplaceOrModifyChoiceType::reset() noexcept {
  replaceExecutionSequence_Accessor.reset();
  modifyExecutionSequence_Accessor.reset();
}

uci::type::ExecutionSequenceReplaceOrModifyChoiceType::ExecutionSequenceReplaceOrModifyChoiceTypeChoice ExecutionSequenceReplaceOrModifyChoiceType::getExecutionSequenceReplaceOrModifyChoiceTypeChoiceOrdinal() const noexcept {
  if (replaceExecutionSequence_Accessor) {
    return EXECUTIONSEQUENCEREPLACEORMODIFYCHOICETYPE_CHOICE_REPLACEEXECUTIONSEQUENCE;
  }
  if (modifyExecutionSequence_Accessor) {
    return EXECUTIONSEQUENCEREPLACEORMODIFYCHOICETYPE_CHOICE_MODIFYEXECUTIONSEQUENCE;
  }
  return EXECUTIONSEQUENCEREPLACEORMODIFYCHOICETYPE_CHOICE_NONE;
}

uci::type::ExecutionSequenceReplaceOrModifyChoiceType& ExecutionSequenceReplaceOrModifyChoiceType::setExecutionSequenceReplaceOrModifyChoiceTypeChoiceOrdinal(uci::type::ExecutionSequenceReplaceOrModifyChoiceType::ExecutionSequenceReplaceOrModifyChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EXECUTIONSEQUENCEREPLACEORMODIFYCHOICETYPE_CHOICE_REPLACEEXECUTIONSEQUENCE:
      chooseReplaceExecutionSequence("setExecutionSequenceReplaceOrModifyChoiceTypeChoiceOrdinal", type);
      break;
    case EXECUTIONSEQUENCEREPLACEORMODIFYCHOICETYPE_CHOICE_MODIFYEXECUTIONSEQUENCE:
      chooseModifyExecutionSequence("setExecutionSequenceReplaceOrModifyChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setExecutionSequenceReplaceOrModifyChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ExecutionSequenceType& ExecutionSequenceReplaceOrModifyChoiceType::getReplaceExecutionSequence_() const {
  if (replaceExecutionSequence_Accessor) {
    return *replaceExecutionSequence_Accessor;
  }
  throw uci::base::UCIException("Error in getReplaceExecutionSequence(): Unable to get ReplaceExecutionSequence, field not selected");
}

const uci::type::ExecutionSequenceType& ExecutionSequenceReplaceOrModifyChoiceType::getReplaceExecutionSequence() const {
  return getReplaceExecutionSequence_();
}

uci::type::ExecutionSequenceType& ExecutionSequenceReplaceOrModifyChoiceType::getReplaceExecutionSequence() {
  return getReplaceExecutionSequence_();
}

uci::type::ExecutionSequenceReplaceOrModifyChoiceType& ExecutionSequenceReplaceOrModifyChoiceType::setReplaceExecutionSequence(const uci::type::ExecutionSequenceType& accessor) {
  chooseReplaceExecutionSequence();
  if (&accessor != replaceExecutionSequence_Accessor.get()) {
    replaceExecutionSequence_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ExecutionSequenceReplaceOrModifyChoiceType::isReplaceExecutionSequence() const noexcept {
  return static_cast<bool>(replaceExecutionSequence_Accessor);
}

uci::type::ExecutionSequenceType& ExecutionSequenceReplaceOrModifyChoiceType::chooseReplaceExecutionSequence(const std::string& method, uci::base::accessorType::AccessorType type) {
  modifyExecutionSequence_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::executionSequenceType : type};
  if ((!replaceExecutionSequence_Accessor) || (replaceExecutionSequence_Accessor->getAccessorType() != requestedType)) {
    replaceExecutionSequence_Accessor = ExecutionSequenceType::create(type);
    if (!replaceExecutionSequence_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *replaceExecutionSequence_Accessor;
}

uci::type::ExecutionSequenceType& ExecutionSequenceReplaceOrModifyChoiceType::chooseReplaceExecutionSequence(uci::base::accessorType::AccessorType type) {
  return chooseReplaceExecutionSequence("chooseReplaceExecutionSequence", type);
}

uci::type::ExecutionSequenceModificationDetailsType& ExecutionSequenceReplaceOrModifyChoiceType::getModifyExecutionSequence_() const {
  if (modifyExecutionSequence_Accessor) {
    return *modifyExecutionSequence_Accessor;
  }
  throw uci::base::UCIException("Error in getModifyExecutionSequence(): Unable to get ModifyExecutionSequence, field not selected");
}

const uci::type::ExecutionSequenceModificationDetailsType& ExecutionSequenceReplaceOrModifyChoiceType::getModifyExecutionSequence() const {
  return getModifyExecutionSequence_();
}

uci::type::ExecutionSequenceModificationDetailsType& ExecutionSequenceReplaceOrModifyChoiceType::getModifyExecutionSequence() {
  return getModifyExecutionSequence_();
}

uci::type::ExecutionSequenceReplaceOrModifyChoiceType& ExecutionSequenceReplaceOrModifyChoiceType::setModifyExecutionSequence(const uci::type::ExecutionSequenceModificationDetailsType& accessor) {
  chooseModifyExecutionSequence();
  if (&accessor != modifyExecutionSequence_Accessor.get()) {
    modifyExecutionSequence_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ExecutionSequenceReplaceOrModifyChoiceType::isModifyExecutionSequence() const noexcept {
  return static_cast<bool>(modifyExecutionSequence_Accessor);
}

uci::type::ExecutionSequenceModificationDetailsType& ExecutionSequenceReplaceOrModifyChoiceType::chooseModifyExecutionSequence(const std::string& method, uci::base::accessorType::AccessorType type) {
  replaceExecutionSequence_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::executionSequenceModificationDetailsType : type};
  if ((!modifyExecutionSequence_Accessor) || (modifyExecutionSequence_Accessor->getAccessorType() != requestedType)) {
    modifyExecutionSequence_Accessor = ExecutionSequenceModificationDetailsType::create(type);
    if (!modifyExecutionSequence_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modifyExecutionSequence_Accessor;
}

uci::type::ExecutionSequenceModificationDetailsType& ExecutionSequenceReplaceOrModifyChoiceType::chooseModifyExecutionSequence(uci::base::accessorType::AccessorType type) {
  return chooseModifyExecutionSequence("chooseModifyExecutionSequence", type);
}

std::unique_ptr<ExecutionSequenceReplaceOrModifyChoiceType> ExecutionSequenceReplaceOrModifyChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::executionSequenceReplaceOrModifyChoiceType : type};
  return (requestedType == uci::type::accessorType::executionSequenceReplaceOrModifyChoiceType) ? boost::make_unique<ExecutionSequenceReplaceOrModifyChoiceType>() : nullptr;
}

/**  */
namespace ExecutionSequenceReplaceOrModifyChoiceType_Names {

constexpr const char* Extern_Type_Name{"ExecutionSequenceReplaceOrModifyChoiceType"};
constexpr const char* ReplaceExecutionSequence_Name{"ReplaceExecutionSequence"};
constexpr const char* ModifyExecutionSequence_Name{"ModifyExecutionSequence"};

} // namespace ExecutionSequenceReplaceOrModifyChoiceType_Names

void ExecutionSequenceReplaceOrModifyChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ExecutionSequenceReplaceOrModifyChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ExecutionSequenceReplaceOrModifyChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ExecutionSequenceReplaceOrModifyChoiceType_Names::ReplaceExecutionSequence_Name) {
      ExecutionSequenceType::deserialize(valueType.second, accessor.chooseReplaceExecutionSequence(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ExecutionSequenceReplaceOrModifyChoiceType_Names::ModifyExecutionSequence_Name) {
      ExecutionSequenceModificationDetailsType::deserialize(valueType.second, accessor.chooseModifyExecutionSequence(), nodeName, nsPrefix);
    }
  }
}

std::string ExecutionSequenceReplaceOrModifyChoiceType::serialize(const uci::type::ExecutionSequenceReplaceOrModifyChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ExecutionSequenceReplaceOrModifyChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ExecutionSequenceReplaceOrModifyChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isReplaceExecutionSequence()) {
    ExecutionSequenceType::serialize(accessor.getReplaceExecutionSequence(), node, ExecutionSequenceReplaceOrModifyChoiceType_Names::ReplaceExecutionSequence_Name);
  } else if (accessor.isModifyExecutionSequence()) {
    ExecutionSequenceModificationDetailsType::serialize(accessor.getModifyExecutionSequence(), node, ExecutionSequenceReplaceOrModifyChoiceType_Names::ModifyExecutionSequence_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ExecutionSequenceReplaceOrModifyChoiceType& ExecutionSequenceReplaceOrModifyChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ExecutionSequenceReplaceOrModifyChoiceType>().release());
}

uci::type::ExecutionSequenceReplaceOrModifyChoiceType& ExecutionSequenceReplaceOrModifyChoiceType::create(const uci::type::ExecutionSequenceReplaceOrModifyChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ExecutionSequenceReplaceOrModifyChoiceType> newAccessor{boost::make_unique<asb_uci::type::ExecutionSequenceReplaceOrModifyChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ExecutionSequenceReplaceOrModifyChoiceType::destroy(uci::type::ExecutionSequenceReplaceOrModifyChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::ExecutionSequenceReplaceOrModifyChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

