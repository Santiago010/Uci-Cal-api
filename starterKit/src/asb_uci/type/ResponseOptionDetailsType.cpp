/** @file ResponseOptionDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ResponseOptionDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/RequirementTaxonomyType.h"
#include "../../../include/asb_uci/type/ResponseOptionTriggerType.h"
#include "../../../include/asb_uci/type/RuleResponseType.h"
#include "../../../include/asb_uci/type/ScheduleType.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementTaxonomyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponseOptionDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponseOptionTriggerType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RuleResponseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ScheduleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResponseOptionDetailsType::ResponseOptionDetailsType()
  : trigger_Accessor{boost::make_unique<ResponseOptionTriggerType>()},
    response_Accessor{boost::make_unique<RuleResponseType>()} {
}

ResponseOptionDetailsType::~ResponseOptionDetailsType() = default;

void ResponseOptionDetailsType::copy(const uci::type::ResponseOptionDetailsType& accessor) {
  copyImpl(accessor, false);
}

void ResponseOptionDetailsType::copyImpl(const uci::type::ResponseOptionDetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResponseOptionDetailsType&>(accessor);
    setOptionIndex(accessorImpl.optionIndex_Accessor);
    if (accessorImpl.descriptiveLabel_Accessor) {
      setDescriptiveLabel(*(accessorImpl.descriptiveLabel_Accessor));
    } else {
      descriptiveLabel_Accessor.reset();
    }
    if (accessorImpl.objective_Accessor) {
      setObjective(*(accessorImpl.objective_Accessor));
    } else {
      objective_Accessor.reset();
    }
    setContinueEvaluation(accessorImpl.continueEvaluation_Accessor);
    setEnabled(accessorImpl.enabled_Accessor);
    setTrigger(*(accessorImpl.trigger_Accessor));
    setResponse(*(accessorImpl.response_Accessor));
    if (accessorImpl.schedule_Accessor) {
      setSchedule(*(accessorImpl.schedule_Accessor));
    } else {
      schedule_Accessor.reset();
    }
  }
}

void ResponseOptionDetailsType::reset() noexcept {
  optionIndex_Accessor = 0;
  descriptiveLabel_Accessor.reset();
  objective_Accessor.reset();
  continueEvaluation_Accessor = false;
  enabled_Accessor = false;
  trigger_Accessor->reset();
  response_Accessor->reset();
  schedule_Accessor.reset();
}

xs::UnsignedInt ResponseOptionDetailsType::getOptionIndex() const {
  return optionIndex_Accessor;
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::setOptionIndex(xs::UnsignedInt value) {
  optionIndex_Accessor = value;
  return *this;
}


asb_uci::type::VisibleString256Type& ResponseOptionDetailsType::getDescriptiveLabel_() const {
  if (descriptiveLabel_Accessor) {
    return *descriptiveLabel_Accessor;
  }
  throw uci::base::UCIException("Error in getDescriptiveLabel(): An attempt was made to get an optional field that was not enabled, call hasDescriptiveLabel() to determine if it is safe to call getDescriptiveLabel()");
}

const asb_uci::type::VisibleString256Type& ResponseOptionDetailsType::getDescriptiveLabel() const {
  return getDescriptiveLabel_();
}

asb_uci::type::VisibleString256Type& ResponseOptionDetailsType::getDescriptiveLabel() {
  return getDescriptiveLabel_();
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::setDescriptiveLabel(const asb_uci::type::VisibleString256Type& value) {
  return setDescriptiveLabel(value.c_str());
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::setDescriptiveLabel(const std::string& value) {
  return setDescriptiveLabel(value.c_str());
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::setDescriptiveLabel(const char* value) {
  enableDescriptiveLabel().setStringValue(value);
  return *this;
}

bool ResponseOptionDetailsType::hasDescriptiveLabel() const noexcept {
  return static_cast<bool>(descriptiveLabel_Accessor);
}

asb_uci::type::VisibleString256Type& ResponseOptionDetailsType::enableDescriptiveLabel(uci::base::accessorType::AccessorType type) {
  if (!descriptiveLabel_Accessor) {
    descriptiveLabel_Accessor =  asb_uci::type::VisibleString256Type::create(type);
  }
  return *descriptiveLabel_Accessor;
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::clearDescriptiveLabel() noexcept {
  descriptiveLabel_Accessor.reset();
  return *this;
}

uci::type::RequirementTaxonomyType& ResponseOptionDetailsType::getObjective_() const {
  if (objective_Accessor) {
    return *objective_Accessor;
  }
  throw uci::base::UCIException("Error in getObjective(): An attempt was made to get an optional field that was not enabled, call hasObjective() to determine if it is safe to call getObjective()");
}

const uci::type::RequirementTaxonomyType& ResponseOptionDetailsType::getObjective() const {
  return getObjective_();
}

uci::type::RequirementTaxonomyType& ResponseOptionDetailsType::getObjective() {
  return getObjective_();
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::setObjective(const uci::type::RequirementTaxonomyType& accessor) {
  enableObjective(accessor.getAccessorType());
  if (&accessor != objective_Accessor.get()) {
    objective_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ResponseOptionDetailsType::hasObjective() const noexcept {
  return static_cast<bool>(objective_Accessor);
}

uci::type::RequirementTaxonomyType& ResponseOptionDetailsType::enableObjective(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementTaxonomyType : type};
  if ((!objective_Accessor) || (objective_Accessor->getAccessorType() != requestedType)) {
    objective_Accessor = RequirementTaxonomyType::create(requestedType);
    if (!objective_Accessor) {
      throw uci::base::UCIException("Error in enableObjective(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *objective_Accessor;
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::clearObjective() noexcept {
  objective_Accessor.reset();
  return *this;
}

xs::Boolean ResponseOptionDetailsType::getContinueEvaluation() const {
  return continueEvaluation_Accessor;
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::setContinueEvaluation(xs::Boolean value) {
  continueEvaluation_Accessor = value;
  return *this;
}


xs::Boolean ResponseOptionDetailsType::getEnabled() const {
  return enabled_Accessor;
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::setEnabled(xs::Boolean value) {
  enabled_Accessor = value;
  return *this;
}


const uci::type::ResponseOptionTriggerType& ResponseOptionDetailsType::getTrigger() const {
  return *trigger_Accessor;
}

uci::type::ResponseOptionTriggerType& ResponseOptionDetailsType::getTrigger() {
  return *trigger_Accessor;
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::setTrigger(const uci::type::ResponseOptionTriggerType& accessor) {
  if (&accessor != trigger_Accessor.get()) {
    trigger_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RuleResponseType& ResponseOptionDetailsType::getResponse() const {
  return *response_Accessor;
}

uci::type::RuleResponseType& ResponseOptionDetailsType::getResponse() {
  return *response_Accessor;
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::setResponse(const uci::type::RuleResponseType& accessor) {
  if (&accessor != response_Accessor.get()) {
    response_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ScheduleType& ResponseOptionDetailsType::getSchedule_() const {
  if (schedule_Accessor) {
    return *schedule_Accessor;
  }
  throw uci::base::UCIException("Error in getSchedule(): An attempt was made to get an optional field that was not enabled, call hasSchedule() to determine if it is safe to call getSchedule()");
}

const uci::type::ScheduleType& ResponseOptionDetailsType::getSchedule() const {
  return getSchedule_();
}

uci::type::ScheduleType& ResponseOptionDetailsType::getSchedule() {
  return getSchedule_();
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::setSchedule(const uci::type::ScheduleType& accessor) {
  enableSchedule();
  if (&accessor != schedule_Accessor.get()) {
    schedule_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponseOptionDetailsType::hasSchedule() const noexcept {
  return static_cast<bool>(schedule_Accessor);
}

uci::type::ScheduleType& ResponseOptionDetailsType::enableSchedule(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::scheduleType : type};
  if ((!schedule_Accessor) || (schedule_Accessor->getAccessorType() != requestedType)) {
    schedule_Accessor = ScheduleType::create(requestedType);
    if (!schedule_Accessor) {
      throw uci::base::UCIException("Error in enableSchedule(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *schedule_Accessor;
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::clearSchedule() noexcept {
  schedule_Accessor.reset();
  return *this;
}

std::unique_ptr<ResponseOptionDetailsType> ResponseOptionDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responseOptionDetailsType : type};
  return (requestedType == uci::type::accessorType::responseOptionDetailsType) ? boost::make_unique<ResponseOptionDetailsType>() : nullptr;
}

/**  */
namespace ResponseOptionDetailsType_Names {

constexpr const char* Extern_Type_Name{"ResponseOptionDetailsType"};
constexpr const char* OptionIndex_Name{"OptionIndex"};
constexpr const char* DescriptiveLabel_Name{"DescriptiveLabel"};
constexpr const char* Objective_Name{"Objective"};
constexpr const char* ContinueEvaluation_Name{"ContinueEvaluation"};
constexpr const char* Enabled_Name{"Enabled"};
constexpr const char* Trigger_Name{"Trigger"};
constexpr const char* Response_Name{"Response"};
constexpr const char* Schedule_Name{"Schedule"};

} // namespace ResponseOptionDetailsType_Names

void ResponseOptionDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResponseOptionDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResponseOptionDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResponseOptionDetailsType_Names::OptionIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOptionIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResponseOptionDetailsType_Names::DescriptiveLabel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDescriptiveLabel(*value);
      }
    } else if (valueType.first == nsPrefix + ResponseOptionDetailsType_Names::Objective_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableObjective(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseOptionDetailsType_Names::ContinueEvaluation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setContinueEvaluation(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ResponseOptionDetailsType_Names::Enabled_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEnabled(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ResponseOptionDetailsType_Names::Trigger_Name) {
      ResponseOptionTriggerType::deserialize(valueType.second, accessor.getTrigger(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseOptionDetailsType_Names::Response_Name) {
      RuleResponseType::deserialize(valueType.second, accessor.getResponse(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseOptionDetailsType_Names::Schedule_Name) {
      ScheduleType::deserialize(valueType.second, accessor.enableSchedule(), nodeName, nsPrefix);
    }
  }
}

std::string ResponseOptionDetailsType::serialize(const uci::type::ResponseOptionDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResponseOptionDetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResponseOptionDetailsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getOptionIndex(), node, ResponseOptionDetailsType_Names::OptionIndex_Name);
  if (accessor.hasDescriptiveLabel()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDescriptiveLabel(), node, ResponseOptionDetailsType_Names::DescriptiveLabel_Name);
  }
  if (accessor.hasObjective()) {
    RequirementTaxonomyType::serialize(accessor.getObjective(), node, ResponseOptionDetailsType_Names::Objective_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getContinueEvaluation(), node, ResponseOptionDetailsType_Names::ContinueEvaluation_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getEnabled(), node, ResponseOptionDetailsType_Names::Enabled_Name);
  ResponseOptionTriggerType::serialize(accessor.getTrigger(), node, ResponseOptionDetailsType_Names::Trigger_Name);
  RuleResponseType::serialize(accessor.getResponse(), node, ResponseOptionDetailsType_Names::Response_Name);
  if (accessor.hasSchedule()) {
    ScheduleType::serialize(accessor.getSchedule(), node, ResponseOptionDetailsType_Names::Schedule_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResponseOptionDetailsType>().release());
}

uci::type::ResponseOptionDetailsType& ResponseOptionDetailsType::create(const uci::type::ResponseOptionDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResponseOptionDetailsType> newAccessor{boost::make_unique<asb_uci::type::ResponseOptionDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResponseOptionDetailsType::destroy(uci::type::ResponseOptionDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::ResponseOptionDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

