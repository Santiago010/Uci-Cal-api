/** @file EffectCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EffectCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityCommandBaseType.h"
#include "asb_uci/type/EffectCapabilityCommandType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityCommandBaseType.h"
#include "uci/type/EffectCapabilityCommandType.h"
#include "uci/type/EffectCommandType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EffectCommandType::EffectCommandType() = default;

EffectCommandType::~EffectCommandType() = default;

void EffectCommandType::copy(const uci::type::EffectCommandType& accessor) {
  copyImpl(accessor, false);
}

void EffectCommandType::copyImpl(const uci::type::EffectCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EffectCommandType&>(accessor);
    if (accessorImpl.capability_Accessor) {
      setCapability(*(accessorImpl.capability_Accessor));
    } else {
      capability_Accessor.reset();
    }
    if (accessorImpl.activity_Accessor) {
      setActivity(*(accessorImpl.activity_Accessor));
    } else {
      activity_Accessor.reset();
    }
  }
}

void EffectCommandType::reset() noexcept {
  capability_Accessor.reset();
  activity_Accessor.reset();
}

uci::type::EffectCommandType::EffectCommandTypeChoice EffectCommandType::getEffectCommandTypeChoiceOrdinal() const noexcept {
  if (capability_Accessor) {
    return EFFECTCOMMANDTYPE_CHOICE_CAPABILITY;
  }
  if (activity_Accessor) {
    return EFFECTCOMMANDTYPE_CHOICE_ACTIVITY;
  }
  return EFFECTCOMMANDTYPE_CHOICE_NONE;
}

uci::type::EffectCommandType& EffectCommandType::setEffectCommandTypeChoiceOrdinal(uci::type::EffectCommandType::EffectCommandTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EFFECTCOMMANDTYPE_CHOICE_CAPABILITY:
      chooseCapability("setEffectCommandTypeChoiceOrdinal", type);
      break;
    case EFFECTCOMMANDTYPE_CHOICE_ACTIVITY:
      chooseActivity("setEffectCommandTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEffectCommandTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EffectCapabilityCommandType& EffectCommandType::getCapability_() const {
  if (capability_Accessor) {
    return *capability_Accessor;
  }
  throw uci::base::UCIException("Error in getCapability(): Unable to get Capability, field not selected");
}

const uci::type::EffectCapabilityCommandType& EffectCommandType::getCapability() const {
  return getCapability_();
}

uci::type::EffectCapabilityCommandType& EffectCommandType::getCapability() {
  return getCapability_();
}

uci::type::EffectCommandType& EffectCommandType::setCapability(const uci::type::EffectCapabilityCommandType& accessor) {
  chooseCapability();
  if (&accessor != capability_Accessor.get()) {
    capability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EffectCommandType::isCapability() const noexcept {
  return static_cast<bool>(capability_Accessor);
}

uci::type::EffectCapabilityCommandType& EffectCommandType::chooseCapability(const std::string& method, uci::base::accessorType::AccessorType type) {
  activity_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectCapabilityCommandType : type};
  if ((!capability_Accessor) || (capability_Accessor->getAccessorType() != requestedType)) {
    capability_Accessor = EffectCapabilityCommandType::create(type);
    if (!capability_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capability_Accessor;
}

uci::type::EffectCapabilityCommandType& EffectCommandType::chooseCapability(uci::base::accessorType::AccessorType type) {
  return chooseCapability("chooseCapability", type);
}

uci::type::ActivityCommandBaseType& EffectCommandType::getActivity_() const {
  if (activity_Accessor) {
    return *activity_Accessor;
  }
  throw uci::base::UCIException("Error in getActivity(): Unable to get Activity, field not selected");
}

const uci::type::ActivityCommandBaseType& EffectCommandType::getActivity() const {
  return getActivity_();
}

uci::type::ActivityCommandBaseType& EffectCommandType::getActivity() {
  return getActivity_();
}

uci::type::EffectCommandType& EffectCommandType::setActivity(const uci::type::ActivityCommandBaseType& accessor) {
  chooseActivity("setActivity", accessor.getAccessorType());
  if (&accessor != activity_Accessor.get()) {
    activity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EffectCommandType::isActivity() const noexcept {
  return static_cast<bool>(activity_Accessor);
}

uci::type::ActivityCommandBaseType& EffectCommandType::chooseActivity(const std::string& method, uci::base::accessorType::AccessorType type) {
  capability_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityCommandBaseType : type};
  if ((!activity_Accessor) || (activity_Accessor->getAccessorType() != requestedType)) {
    activity_Accessor = ActivityCommandBaseType::create(type);
    if (!activity_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activity_Accessor;
}

uci::type::ActivityCommandBaseType& EffectCommandType::chooseActivity(uci::base::accessorType::AccessorType type) {
  return chooseActivity("chooseActivity", type);
}

std::unique_ptr<EffectCommandType> EffectCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectCommandType : type};
  return (requestedType == uci::type::accessorType::effectCommandType) ? boost::make_unique<EffectCommandType>() : nullptr;
}

/**  */
namespace EffectCommandType_Names {

constexpr const char* Extern_Type_Name{"EffectCommandType"};
constexpr const char* Capability_Name{"Capability"};
constexpr const char* Activity_Name{"Activity"};

} // namespace EffectCommandType_Names

void EffectCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EffectCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EffectCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EffectCommandType_Names::Capability_Name) {
      EffectCapabilityCommandType::deserialize(valueType.second, accessor.chooseCapability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EffectCommandType_Names::Activity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseActivity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string EffectCommandType::serialize(const uci::type::EffectCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EffectCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EffectCommandType_Names::Extern_Type_Name);
  }
  if (accessor.isCapability()) {
    EffectCapabilityCommandType::serialize(accessor.getCapability(), node, EffectCommandType_Names::Capability_Name);
  } else if (accessor.isActivity()) {
    ActivityCommandBaseType::serialize(accessor.getActivity(), node, EffectCommandType_Names::Activity_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EffectCommandType& EffectCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EffectCommandType>().release());
}

uci::type::EffectCommandType& EffectCommandType::create(const uci::type::EffectCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EffectCommandType> newAccessor{boost::make_unique<asb_uci::type::EffectCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EffectCommandType::destroy(uci::type::EffectCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::EffectCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

