/** @file CommIFDL_ControlType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommIFDL_ControlType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommIFDL_AcqControlEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommIFDL_AcqControlEnum.h"
#include "uci/type/CommIFDL_ControlType.h"
#include "uci/type/IFDL_FlightIdentifierType.h"
#include "uci/type/IFDL_FlightPositionType.h"
#include "uci/type/IFDL_NetNumberType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommIFDL_ControlType::CommIFDL_ControlType() = default;

CommIFDL_ControlType::~CommIFDL_ControlType() = default;

void CommIFDL_ControlType::copy(const uci::type::CommIFDL_ControlType& accessor) {
  copyImpl(accessor, false);
}

void CommIFDL_ControlType::copyImpl(const uci::type::CommIFDL_ControlType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommIFDL_ControlType&>(accessor);
    setFlightIdentifier(accessorImpl.flightIdentifier_Accessor);
    setFlightPosition(accessorImpl.flightPosition_Accessor);
    setNetNumber(accessorImpl.netNumber_Accessor);
    if (accessorImpl.hasWideNet1Enable()) {
      setWideNet1Enable(accessorImpl.getWideNet1Enable());
    } else {
      clearWideNet1Enable();
    }
    if (accessorImpl.hasWideNet2Enable()) {
      setWideNet2Enable(accessorImpl.getWideNet2Enable());
    } else {
      clearWideNet2Enable();
    }
    if (accessorImpl.hasWideNet3Enable()) {
      setWideNet3Enable(accessorImpl.getWideNet3Enable());
    } else {
      clearWideNet3Enable();
    }
    if (accessorImpl.acquisitionControl_Accessor) {
      setAcquisitionControl(*(accessorImpl.acquisitionControl_Accessor));
    } else {
      acquisitionControl_Accessor.reset();
    }
  }
}

void CommIFDL_ControlType::reset() noexcept {
  flightIdentifier_Accessor = 0;
  flightPosition_Accessor = 0;
  netNumber_Accessor = 0;
  clearWideNet1Enable();
  clearWideNet2Enable();
  clearWideNet3Enable();
  acquisitionControl_Accessor.reset();
}

uci::type::IFDL_FlightIdentifierTypeValue CommIFDL_ControlType::getFlightIdentifier() const {
  return flightIdentifier_Accessor;
}

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::setFlightIdentifier(uci::type::IFDL_FlightIdentifierTypeValue value) {
  flightIdentifier_Accessor = value;
  return *this;
}


uci::type::IFDL_FlightPositionTypeValue CommIFDL_ControlType::getFlightPosition() const {
  return flightPosition_Accessor;
}

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::setFlightPosition(uci::type::IFDL_FlightPositionTypeValue value) {
  flightPosition_Accessor = value;
  return *this;
}


uci::type::IFDL_NetNumberTypeValue CommIFDL_ControlType::getNetNumber() const {
  return netNumber_Accessor;
}

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::setNetNumber(uci::type::IFDL_NetNumberTypeValue value) {
  netNumber_Accessor = value;
  return *this;
}


xs::Boolean CommIFDL_ControlType::getWideNet1Enable() const {
  if (wideNet1Enable_Accessor) {
    return *wideNet1Enable_Accessor;
  }
  throw uci::base::UCIException("Error in getWideNet1Enable(): An attempt was made to get an optional field that was not enabled, call hasWideNet1Enable() to determine if it is safe to call getWideNet1Enable()");
}

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::setWideNet1Enable(xs::Boolean value) {
  wideNet1Enable_Accessor = value;
  return *this;
}

bool CommIFDL_ControlType::hasWideNet1Enable() const noexcept {
  return wideNet1Enable_Accessor.has_value();
}

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::clearWideNet1Enable() noexcept {
  wideNet1Enable_Accessor.reset();
  return *this;
}

xs::Boolean CommIFDL_ControlType::getWideNet2Enable() const {
  if (wideNet2Enable_Accessor) {
    return *wideNet2Enable_Accessor;
  }
  throw uci::base::UCIException("Error in getWideNet2Enable(): An attempt was made to get an optional field that was not enabled, call hasWideNet2Enable() to determine if it is safe to call getWideNet2Enable()");
}

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::setWideNet2Enable(xs::Boolean value) {
  wideNet2Enable_Accessor = value;
  return *this;
}

bool CommIFDL_ControlType::hasWideNet2Enable() const noexcept {
  return wideNet2Enable_Accessor.has_value();
}

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::clearWideNet2Enable() noexcept {
  wideNet2Enable_Accessor.reset();
  return *this;
}

xs::Boolean CommIFDL_ControlType::getWideNet3Enable() const {
  if (wideNet3Enable_Accessor) {
    return *wideNet3Enable_Accessor;
  }
  throw uci::base::UCIException("Error in getWideNet3Enable(): An attempt was made to get an optional field that was not enabled, call hasWideNet3Enable() to determine if it is safe to call getWideNet3Enable()");
}

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::setWideNet3Enable(xs::Boolean value) {
  wideNet3Enable_Accessor = value;
  return *this;
}

bool CommIFDL_ControlType::hasWideNet3Enable() const noexcept {
  return wideNet3Enable_Accessor.has_value();
}

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::clearWideNet3Enable() noexcept {
  wideNet3Enable_Accessor.reset();
  return *this;
}

uci::type::CommIFDL_AcqControlEnum& CommIFDL_ControlType::getAcquisitionControl_() const {
  if (acquisitionControl_Accessor) {
    return *acquisitionControl_Accessor;
  }
  throw uci::base::UCIException("Error in getAcquisitionControl(): An attempt was made to get an optional field that was not enabled, call hasAcquisitionControl() to determine if it is safe to call getAcquisitionControl()");
}

const uci::type::CommIFDL_AcqControlEnum& CommIFDL_ControlType::getAcquisitionControl() const {
  return getAcquisitionControl_();
}

uci::type::CommIFDL_AcqControlEnum& CommIFDL_ControlType::getAcquisitionControl() {
  return getAcquisitionControl_();
}

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::setAcquisitionControl(const uci::type::CommIFDL_AcqControlEnum& accessor) {
  enableAcquisitionControl();
  if (&accessor != acquisitionControl_Accessor.get()) {
    acquisitionControl_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::setAcquisitionControl(const uci::type::CommIFDL_AcqControlEnum::EnumerationItem value) {
  enableAcquisitionControl().setValue(value);
  return *this;
}

bool CommIFDL_ControlType::hasAcquisitionControl() const noexcept {
  return static_cast<bool>(acquisitionControl_Accessor);
}

uci::type::CommIFDL_AcqControlEnum& CommIFDL_ControlType::enableAcquisitionControl(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commIFDL_AcqControlEnum : type};
  if ((!acquisitionControl_Accessor) || (acquisitionControl_Accessor->getAccessorType() != requestedType)) {
    acquisitionControl_Accessor = CommIFDL_AcqControlEnum::create(requestedType);
    if (!acquisitionControl_Accessor) {
      throw uci::base::UCIException("Error in enableAcquisitionControl(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *acquisitionControl_Accessor;
}

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::clearAcquisitionControl() noexcept {
  acquisitionControl_Accessor.reset();
  return *this;
}

std::unique_ptr<CommIFDL_ControlType> CommIFDL_ControlType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commIFDL_ControlType : type};
  return (requestedType == uci::type::accessorType::commIFDL_ControlType) ? boost::make_unique<CommIFDL_ControlType>() : nullptr;
}

/**  */
namespace CommIFDL_ControlType_Names {

constexpr const char* Extern_Type_Name{"CommIFDL_ControlType"};
constexpr const char* FlightIdentifier_Name{"FlightIdentifier"};
constexpr const char* FlightPosition_Name{"FlightPosition"};
constexpr const char* NetNumber_Name{"NetNumber"};
constexpr const char* WideNet1Enable_Name{"WideNet1Enable"};
constexpr const char* WideNet2Enable_Name{"WideNet2Enable"};
constexpr const char* WideNet3Enable_Name{"WideNet3Enable"};
constexpr const char* AcquisitionControl_Name{"AcquisitionControl"};

} // namespace CommIFDL_ControlType_Names

void CommIFDL_ControlType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommIFDL_ControlType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommIFDL_ControlType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommIFDL_ControlType_Names::FlightIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFlightIdentifier(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommIFDL_ControlType_Names::FlightPosition_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFlightPosition(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommIFDL_ControlType_Names::NetNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNetNumber(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommIFDL_ControlType_Names::WideNet1Enable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWideNet1Enable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommIFDL_ControlType_Names::WideNet2Enable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWideNet2Enable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommIFDL_ControlType_Names::WideNet3Enable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWideNet3Enable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommIFDL_ControlType_Names::AcquisitionControl_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAcquisitionControl().setValueFromName(*value);
      }
    }
  }
}

std::string CommIFDL_ControlType::serialize(const uci::type::CommIFDL_ControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommIFDL_ControlType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommIFDL_ControlType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getFlightIdentifier(), node, CommIFDL_ControlType_Names::FlightIdentifier_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getFlightPosition(), node, CommIFDL_ControlType_Names::FlightPosition_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getNetNumber(), node, CommIFDL_ControlType_Names::NetNumber_Name);
  if (accessor.hasWideNet1Enable()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getWideNet1Enable(), node, CommIFDL_ControlType_Names::WideNet1Enable_Name);
  }
  if (accessor.hasWideNet2Enable()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getWideNet2Enable(), node, CommIFDL_ControlType_Names::WideNet2Enable_Name);
  }
  if (accessor.hasWideNet3Enable()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getWideNet3Enable(), node, CommIFDL_ControlType_Names::WideNet3Enable_Name);
  }
  if (accessor.hasAcquisitionControl()) {
    CommIFDL_AcqControlEnum::serialize(accessor.getAcquisitionControl(), node, CommIFDL_ControlType_Names::AcquisitionControl_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommIFDL_ControlType>().release());
}

uci::type::CommIFDL_ControlType& CommIFDL_ControlType::create(const uci::type::CommIFDL_ControlType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommIFDL_ControlType> newAccessor{boost::make_unique<asb_uci::type::CommIFDL_ControlType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommIFDL_ControlType::destroy(uci::type::CommIFDL_ControlType& accessor) {
  delete dynamic_cast<asb_uci::type::CommIFDL_ControlType*>(&accessor);
}

} // namespace type

} // namespace uci

