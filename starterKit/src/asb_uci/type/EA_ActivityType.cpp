/** @file EA_ActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EA_ActivityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ConsentEnum.h"
#include "../../../include/asb_uci/type/EA_DetailsType.h"
#include "../../../include/asb_uci/type/SharedRF_ApertureActivityBaseType.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ConsentEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EA_ActivityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EA_DetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EA_ActivityType::EA_ActivityType()
  : eA_Details_Accessor{boost::make_unique<EA_DetailsType>()},
    protectedEntityID_Accessor{boost::make_unique<ProtectedEntityID>(0, SIZE_MAX)} {
}

EA_ActivityType::~EA_ActivityType() = default;

void EA_ActivityType::copy(const uci::type::EA_ActivityType& accessor) {
  copyImpl(accessor, false);
}

void EA_ActivityType::copyImpl(const uci::type::EA_ActivityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SharedRF_ApertureActivityBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const EA_ActivityType&>(accessor);
    setEA_Details(*(accessorImpl.eA_Details_Accessor));
    setProtectedEntityID(*(accessorImpl.protectedEntityID_Accessor));
    if (accessorImpl.hasConsentRequired()) {
      setConsentRequired(accessorImpl.getConsentRequired());
    } else {
      clearConsentRequired();
    }
    if (accessorImpl.consentState_Accessor) {
      setConsentState(*(accessorImpl.consentState_Accessor));
    } else {
      consentState_Accessor.reset();
    }
  }
}

void EA_ActivityType::reset() noexcept {
  SharedRF_ApertureActivityBaseType::reset();
  eA_Details_Accessor->reset();
  protectedEntityID_Accessor->reset();
  clearConsentRequired();
  consentState_Accessor.reset();
}

const uci::type::EA_DetailsType& EA_ActivityType::getEA_Details() const {
  return *eA_Details_Accessor;
}

uci::type::EA_DetailsType& EA_ActivityType::getEA_Details() {
  return *eA_Details_Accessor;
}

uci::type::EA_ActivityType& EA_ActivityType::setEA_Details(const uci::type::EA_DetailsType& accessor) {
  if (&accessor != eA_Details_Accessor.get()) {
    eA_Details_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EA_ActivityType::ProtectedEntityID& EA_ActivityType::getProtectedEntityID() const {
  return *protectedEntityID_Accessor;
}

uci::type::EA_ActivityType::ProtectedEntityID& EA_ActivityType::getProtectedEntityID() {
  return *protectedEntityID_Accessor;
}

uci::type::EA_ActivityType& EA_ActivityType::setProtectedEntityID(const uci::type::EA_ActivityType::ProtectedEntityID& accessor) {
  if (&accessor != protectedEntityID_Accessor.get()) {
    protectedEntityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean EA_ActivityType::getConsentRequired() const {
  if (consentRequired_Accessor) {
    return *consentRequired_Accessor;
  }
  throw uci::base::UCIException("Error in getConsentRequired(): An attempt was made to get an optional field that was not enabled, call hasConsentRequired() to determine if it is safe to call getConsentRequired()");
}

uci::type::EA_ActivityType& EA_ActivityType::setConsentRequired(xs::Boolean value) {
  consentRequired_Accessor = value;
  return *this;
}

bool EA_ActivityType::hasConsentRequired() const noexcept {
  return consentRequired_Accessor.has_value();
}

uci::type::EA_ActivityType& EA_ActivityType::clearConsentRequired() noexcept {
  consentRequired_Accessor.reset();
  return *this;
}

uci::type::ConsentEnum& EA_ActivityType::getConsentState_() const {
  if (consentState_Accessor) {
    return *consentState_Accessor;
  }
  throw uci::base::UCIException("Error in getConsentState(): An attempt was made to get an optional field that was not enabled, call hasConsentState() to determine if it is safe to call getConsentState()");
}

const uci::type::ConsentEnum& EA_ActivityType::getConsentState() const {
  return getConsentState_();
}

uci::type::ConsentEnum& EA_ActivityType::getConsentState() {
  return getConsentState_();
}

uci::type::EA_ActivityType& EA_ActivityType::setConsentState(const uci::type::ConsentEnum& accessor) {
  enableConsentState();
  if (&accessor != consentState_Accessor.get()) {
    consentState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EA_ActivityType& EA_ActivityType::setConsentState(const uci::type::ConsentEnum::EnumerationItem value) {
  enableConsentState().setValue(value);
  return *this;
}

bool EA_ActivityType::hasConsentState() const noexcept {
  return static_cast<bool>(consentState_Accessor);
}

uci::type::ConsentEnum& EA_ActivityType::enableConsentState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::consentEnum : type};
  if ((!consentState_Accessor) || (consentState_Accessor->getAccessorType() != requestedType)) {
    consentState_Accessor = ConsentEnum::create(requestedType);
    if (!consentState_Accessor) {
      throw uci::base::UCIException("Error in enableConsentState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *consentState_Accessor;
}

uci::type::EA_ActivityType& EA_ActivityType::clearConsentState() noexcept {
  consentState_Accessor.reset();
  return *this;
}

std::unique_ptr<EA_ActivityType> EA_ActivityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_ActivityType : type};
  return (requestedType == uci::type::accessorType::eA_ActivityType) ? boost::make_unique<EA_ActivityType>() : nullptr;
}

/**  */
namespace EA_ActivityType_Names {

constexpr const char* Extern_Type_Name{"EA_ActivityType"};
constexpr const char* EA_Details_Name{"EA_Details"};
constexpr const char* ProtectedEntityID_Name{"ProtectedEntityID"};
constexpr const char* ConsentRequired_Name{"ConsentRequired"};
constexpr const char* ConsentState_Name{"ConsentState"};

} // namespace EA_ActivityType_Names

void EA_ActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_ActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EA_ActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EA_ActivityType_Names::EA_Details_Name) {
      EA_DetailsType::deserialize(valueType.second, accessor.getEA_Details(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_ActivityType_Names::ProtectedEntityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EA_ActivityType::ProtectedEntityID& boundedList = accessor.getProtectedEntityID();
        const uci::type::EA_ActivityType::ProtectedEntityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EA_ActivityType_Names::ConsentRequired_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConsentRequired(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + EA_ActivityType_Names::ConsentState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableConsentState().setValueFromName(*value);
      }
    }
  }
  SharedRF_ApertureActivityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string EA_ActivityType::serialize(const uci::type::EA_ActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EA_ActivityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EA_ActivityType_Names::Extern_Type_Name);
  }
  SharedRF_ApertureActivityBaseType::serialize(accessor, node, "", false, false, false);
  EA_DetailsType::serialize(accessor.getEA_Details(), node, EA_ActivityType_Names::EA_Details_Name);
  {
    const uci::type::EA_ActivityType::ProtectedEntityID& boundedList = accessor.getProtectedEntityID();
    for (uci::type::EA_ActivityType::ProtectedEntityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SystemID_Type::serialize(boundedList.at(i), node, EA_ActivityType_Names::ProtectedEntityID_Name);
    }
  }
  if (accessor.hasConsentRequired()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getConsentRequired(), node, EA_ActivityType_Names::ConsentRequired_Name);
  }
  if (accessor.hasConsentState()) {
    ConsentEnum::serialize(accessor.getConsentState(), node, EA_ActivityType_Names::ConsentState_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EA_ActivityType& EA_ActivityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EA_ActivityType>().release());
}

uci::type::EA_ActivityType& EA_ActivityType::create(const uci::type::EA_ActivityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EA_ActivityType> newAccessor{boost::make_unique<asb_uci::type::EA_ActivityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EA_ActivityType::destroy(uci::type::EA_ActivityType& accessor) {
  delete dynamic_cast<asb_uci::type::EA_ActivityType*>(&accessor);
}

} // namespace type

} // namespace uci

