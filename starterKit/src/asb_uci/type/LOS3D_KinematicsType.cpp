/** @file LOS3D_KinematicsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/LOS3D_KinematicsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/LOS3D_CovarianceType.h"
#include "../../../include/asb_uci/type/RelativeAnglesLOS3D_Type.h"
#include "../../../include/asb_uci/type/RelativeSlantRangeLOS3D_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LOS3D_CovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LOS3D_KinematicsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RelativeAnglesLOS3D_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RelativeSlantRangeLOS3D_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LOS3D_KinematicsType::LOS3D_KinematicsType()
  : relativeAnglesLOS3D_Accessor{boost::make_unique<RelativeAnglesLOS3D_Type>()} {
}

LOS3D_KinematicsType::~LOS3D_KinematicsType() = default;

void LOS3D_KinematicsType::copy(const uci::type::LOS3D_KinematicsType& accessor) {
  copyImpl(accessor, false);
}

void LOS3D_KinematicsType::copyImpl(const uci::type::LOS3D_KinematicsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LOS3D_KinematicsType&>(accessor);
    setRelativeAnglesLOS3D(*(accessorImpl.relativeAnglesLOS3D_Accessor));
    if (accessorImpl.relativeSlantRangeLOS3D_Accessor) {
      setRelativeSlantRangeLOS3D(*(accessorImpl.relativeSlantRangeLOS3D_Accessor));
    } else {
      relativeSlantRangeLOS3D_Accessor.reset();
    }
    if (accessorImpl.lOS3D_OrientationCovariance_Accessor) {
      setLOS3D_OrientationCovariance(*(accessorImpl.lOS3D_OrientationCovariance_Accessor));
    } else {
      lOS3D_OrientationCovariance_Accessor.reset();
    }
  }
}

void LOS3D_KinematicsType::reset() noexcept {
  relativeAnglesLOS3D_Accessor->reset();
  relativeSlantRangeLOS3D_Accessor.reset();
  lOS3D_OrientationCovariance_Accessor.reset();
}

const uci::type::RelativeAnglesLOS3D_Type& LOS3D_KinematicsType::getRelativeAnglesLOS3D() const {
  return *relativeAnglesLOS3D_Accessor;
}

uci::type::RelativeAnglesLOS3D_Type& LOS3D_KinematicsType::getRelativeAnglesLOS3D() {
  return *relativeAnglesLOS3D_Accessor;
}

uci::type::LOS3D_KinematicsType& LOS3D_KinematicsType::setRelativeAnglesLOS3D(const uci::type::RelativeAnglesLOS3D_Type& accessor) {
  if (&accessor != relativeAnglesLOS3D_Accessor.get()) {
    relativeAnglesLOS3D_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RelativeSlantRangeLOS3D_Type& LOS3D_KinematicsType::getRelativeSlantRangeLOS3D_() const {
  if (relativeSlantRangeLOS3D_Accessor) {
    return *relativeSlantRangeLOS3D_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeSlantRangeLOS3D(): An attempt was made to get an optional field that was not enabled, call hasRelativeSlantRangeLOS3D() to determine if it is safe to call getRelativeSlantRangeLOS3D()");
}

const uci::type::RelativeSlantRangeLOS3D_Type& LOS3D_KinematicsType::getRelativeSlantRangeLOS3D() const {
  return getRelativeSlantRangeLOS3D_();
}

uci::type::RelativeSlantRangeLOS3D_Type& LOS3D_KinematicsType::getRelativeSlantRangeLOS3D() {
  return getRelativeSlantRangeLOS3D_();
}

uci::type::LOS3D_KinematicsType& LOS3D_KinematicsType::setRelativeSlantRangeLOS3D(const uci::type::RelativeSlantRangeLOS3D_Type& accessor) {
  enableRelativeSlantRangeLOS3D();
  if (&accessor != relativeSlantRangeLOS3D_Accessor.get()) {
    relativeSlantRangeLOS3D_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS3D_KinematicsType::hasRelativeSlantRangeLOS3D() const noexcept {
  return static_cast<bool>(relativeSlantRangeLOS3D_Accessor);
}

uci::type::RelativeSlantRangeLOS3D_Type& LOS3D_KinematicsType::enableRelativeSlantRangeLOS3D(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relativeSlantRangeLOS3D_Type : type};
  if ((!relativeSlantRangeLOS3D_Accessor) || (relativeSlantRangeLOS3D_Accessor->getAccessorType() != requestedType)) {
    relativeSlantRangeLOS3D_Accessor = RelativeSlantRangeLOS3D_Type::create(requestedType);
    if (!relativeSlantRangeLOS3D_Accessor) {
      throw uci::base::UCIException("Error in enableRelativeSlantRangeLOS3D(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *relativeSlantRangeLOS3D_Accessor;
}

uci::type::LOS3D_KinematicsType& LOS3D_KinematicsType::clearRelativeSlantRangeLOS3D() noexcept {
  relativeSlantRangeLOS3D_Accessor.reset();
  return *this;
}

uci::type::LOS3D_CovarianceType& LOS3D_KinematicsType::getLOS3D_OrientationCovariance_() const {
  if (lOS3D_OrientationCovariance_Accessor) {
    return *lOS3D_OrientationCovariance_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS3D_OrientationCovariance(): An attempt was made to get an optional field that was not enabled, call hasLOS3D_OrientationCovariance() to determine if it is safe to call getLOS3D_OrientationCovariance()");
}

const uci::type::LOS3D_CovarianceType& LOS3D_KinematicsType::getLOS3D_OrientationCovariance() const {
  return getLOS3D_OrientationCovariance_();
}

uci::type::LOS3D_CovarianceType& LOS3D_KinematicsType::getLOS3D_OrientationCovariance() {
  return getLOS3D_OrientationCovariance_();
}

uci::type::LOS3D_KinematicsType& LOS3D_KinematicsType::setLOS3D_OrientationCovariance(const uci::type::LOS3D_CovarianceType& accessor) {
  enableLOS3D_OrientationCovariance();
  if (&accessor != lOS3D_OrientationCovariance_Accessor.get()) {
    lOS3D_OrientationCovariance_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool LOS3D_KinematicsType::hasLOS3D_OrientationCovariance() const noexcept {
  return static_cast<bool>(lOS3D_OrientationCovariance_Accessor);
}

uci::type::LOS3D_CovarianceType& LOS3D_KinematicsType::enableLOS3D_OrientationCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS3D_CovarianceType : type};
  if ((!lOS3D_OrientationCovariance_Accessor) || (lOS3D_OrientationCovariance_Accessor->getAccessorType() != requestedType)) {
    lOS3D_OrientationCovariance_Accessor = LOS3D_CovarianceType::create(requestedType);
    if (!lOS3D_OrientationCovariance_Accessor) {
      throw uci::base::UCIException("Error in enableLOS3D_OrientationCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lOS3D_OrientationCovariance_Accessor;
}

uci::type::LOS3D_KinematicsType& LOS3D_KinematicsType::clearLOS3D_OrientationCovariance() noexcept {
  lOS3D_OrientationCovariance_Accessor.reset();
  return *this;
}

std::unique_ptr<LOS3D_KinematicsType> LOS3D_KinematicsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS3D_KinematicsType : type};
  return (requestedType == uci::type::accessorType::lOS3D_KinematicsType) ? boost::make_unique<LOS3D_KinematicsType>() : nullptr;
}

/**  */
namespace LOS3D_KinematicsType_Names {

constexpr const char* Extern_Type_Name{"LOS3D_KinematicsType"};
constexpr const char* RelativeAnglesLOS3D_Name{"RelativeAnglesLOS3D"};
constexpr const char* RelativeSlantRangeLOS3D_Name{"RelativeSlantRangeLOS3D"};
constexpr const char* LOS3D_OrientationCovariance_Name{"LOS3D_OrientationCovariance"};

} // namespace LOS3D_KinematicsType_Names

void LOS3D_KinematicsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LOS3D_KinematicsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LOS3D_KinematicsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LOS3D_KinematicsType_Names::RelativeAnglesLOS3D_Name) {
      RelativeAnglesLOS3D_Type::deserialize(valueType.second, accessor.getRelativeAnglesLOS3D(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS3D_KinematicsType_Names::RelativeSlantRangeLOS3D_Name) {
      RelativeSlantRangeLOS3D_Type::deserialize(valueType.second, accessor.enableRelativeSlantRangeLOS3D(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS3D_KinematicsType_Names::LOS3D_OrientationCovariance_Name) {
      LOS3D_CovarianceType::deserialize(valueType.second, accessor.enableLOS3D_OrientationCovariance(), nodeName, nsPrefix);
    }
  }
}

std::string LOS3D_KinematicsType::serialize(const uci::type::LOS3D_KinematicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LOS3D_KinematicsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LOS3D_KinematicsType_Names::Extern_Type_Name);
  }
  RelativeAnglesLOS3D_Type::serialize(accessor.getRelativeAnglesLOS3D(), node, LOS3D_KinematicsType_Names::RelativeAnglesLOS3D_Name);
  if (accessor.hasRelativeSlantRangeLOS3D()) {
    RelativeSlantRangeLOS3D_Type::serialize(accessor.getRelativeSlantRangeLOS3D(), node, LOS3D_KinematicsType_Names::RelativeSlantRangeLOS3D_Name);
  }
  if (accessor.hasLOS3D_OrientationCovariance()) {
    LOS3D_CovarianceType::serialize(accessor.getLOS3D_OrientationCovariance(), node, LOS3D_KinematicsType_Names::LOS3D_OrientationCovariance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LOS3D_KinematicsType& LOS3D_KinematicsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LOS3D_KinematicsType>().release());
}

uci::type::LOS3D_KinematicsType& LOS3D_KinematicsType::create(const uci::type::LOS3D_KinematicsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LOS3D_KinematicsType> newAccessor{boost::make_unique<asb_uci::type::LOS3D_KinematicsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LOS3D_KinematicsType::destroy(uci::type::LOS3D_KinematicsType& accessor) {
  delete dynamic_cast<asb_uci::type::LOS3D_KinematicsType*>(&accessor);
}

} // namespace type

} // namespace uci

