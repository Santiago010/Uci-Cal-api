/** @file ResourceAllocatorAllocationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ResourceAllocatorAllocationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/RF_TypeEnum.h"
#include "../../../include/asb_uci/type/RequestID_Type.h"
#include "../../../include/asb_uci/type/UnsignedIntegerMinMaxType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_TypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequestID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceAllocatorAllocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/UnsignedIntegerMinMaxType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResourceAllocatorAllocationType::ResourceAllocatorAllocationType()
  : rF_Mode_Accessor{boost::make_unique<RF_TypeEnum>()},
    resourceAccessPriority_Accessor{boost::make_unique<UnsignedIntegerMinMaxType>()},
    resourceRequestID_Accessor{boost::make_unique<RequestID_Type>()},
    rF_ThreadInstanceIndex_Accessor{boost::make_unique<RF_ThreadInstanceIndex>(0, SIZE_MAX)},
    digitalThreadInstanceIndex_Accessor{boost::make_unique<DigitalThreadInstanceIndex>(0, SIZE_MAX)} {
}

ResourceAllocatorAllocationType::~ResourceAllocatorAllocationType() = default;

void ResourceAllocatorAllocationType::copy(const uci::type::ResourceAllocatorAllocationType& accessor) {
  copyImpl(accessor, false);
}

void ResourceAllocatorAllocationType::copyImpl(const uci::type::ResourceAllocatorAllocationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResourceAllocatorAllocationType&>(accessor);
    setResourceAllocationIndex(accessorImpl.resourceAllocationIndex_Accessor);
    if (accessorImpl.hasSystemThreadIndex()) {
      setSystemThreadIndex(accessorImpl.getSystemThreadIndex());
    } else {
      clearSystemThreadIndex();
    }
    setRF_Mode(*(accessorImpl.rF_Mode_Accessor));
    setResourceAccessPriority(*(accessorImpl.resourceAccessPriority_Accessor));
    setExpectedPercentAccess(accessorImpl.expectedPercentAccess_Accessor);
    setResourceRequestID(*(accessorImpl.resourceRequestID_Accessor));
    setRF_ThreadInstanceIndex(*(accessorImpl.rF_ThreadInstanceIndex_Accessor));
    setDigitalThreadInstanceIndex(*(accessorImpl.digitalThreadInstanceIndex_Accessor));
  }
}

void ResourceAllocatorAllocationType::reset() noexcept {
  resourceAllocationIndex_Accessor = 0;
  clearSystemThreadIndex();
  rF_Mode_Accessor->reset();
  if (resourceAccessPriority_Accessor->getAccessorType() != uci::type::accessorType::unsignedIntegerMinMaxType) {
    resourceAccessPriority_Accessor = boost::make_unique<UnsignedIntegerMinMaxType>();
  } else {
    resourceAccessPriority_Accessor->reset();
  }
  expectedPercentAccess_Accessor = 0.0;
  resourceRequestID_Accessor->reset();
  rF_ThreadInstanceIndex_Accessor->reset();
  digitalThreadInstanceIndex_Accessor->reset();
}

xs::UnsignedInt ResourceAllocatorAllocationType::getResourceAllocationIndex() const {
  return resourceAllocationIndex_Accessor;
}

uci::type::ResourceAllocatorAllocationType& ResourceAllocatorAllocationType::setResourceAllocationIndex(xs::UnsignedInt value) {
  resourceAllocationIndex_Accessor = value;
  return *this;
}


xs::UnsignedInt ResourceAllocatorAllocationType::getSystemThreadIndex() const {
  if (systemThreadIndex_Accessor) {
    return *systemThreadIndex_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemThreadIndex(): An attempt was made to get an optional field that was not enabled, call hasSystemThreadIndex() to determine if it is safe to call getSystemThreadIndex()");
}

uci::type::ResourceAllocatorAllocationType& ResourceAllocatorAllocationType::setSystemThreadIndex(xs::UnsignedInt value) {
  systemThreadIndex_Accessor = value;
  return *this;
}

bool ResourceAllocatorAllocationType::hasSystemThreadIndex() const noexcept {
  return systemThreadIndex_Accessor.has_value();
}

uci::type::ResourceAllocatorAllocationType& ResourceAllocatorAllocationType::clearSystemThreadIndex() noexcept {
  systemThreadIndex_Accessor.reset();
  return *this;
}

const uci::type::RF_TypeEnum& ResourceAllocatorAllocationType::getRF_Mode() const {
  return *rF_Mode_Accessor;
}

uci::type::RF_TypeEnum& ResourceAllocatorAllocationType::getRF_Mode() {
  return *rF_Mode_Accessor;
}

uci::type::ResourceAllocatorAllocationType& ResourceAllocatorAllocationType::setRF_Mode(const uci::type::RF_TypeEnum& accessor) {
  if (&accessor != rF_Mode_Accessor.get()) {
    rF_Mode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ResourceAllocatorAllocationType& ResourceAllocatorAllocationType::setRF_Mode(uci::type::RF_TypeEnum::EnumerationItem value) {
  rF_Mode_Accessor->setValue(value);
  return *this;
}


const uci::type::UnsignedIntegerMinMaxType& ResourceAllocatorAllocationType::getResourceAccessPriority() const {
  return *resourceAccessPriority_Accessor;
}

uci::type::UnsignedIntegerMinMaxType& ResourceAllocatorAllocationType::getResourceAccessPriority() {
  return *resourceAccessPriority_Accessor;
}

uci::type::ResourceAllocatorAllocationType& ResourceAllocatorAllocationType::setResourceAccessPriority(const uci::type::UnsignedIntegerMinMaxType& accessor) {
  enableResourceAccessPriority(accessor.getAccessorType());
  if (&accessor != resourceAccessPriority_Accessor.get()) {
    resourceAccessPriority_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::UnsignedIntegerMinMaxType& ResourceAllocatorAllocationType::enableResourceAccessPriority(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::unsignedIntegerMinMaxType : type};
  if ((!resourceAccessPriority_Accessor) || (resourceAccessPriority_Accessor->getAccessorType() != requestedType)) {
    resourceAccessPriority_Accessor = UnsignedIntegerMinMaxType::create(requestedType);
    if (!resourceAccessPriority_Accessor) {
      throw uci::base::UCIException("Error in enableResourceAccessPriority(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *resourceAccessPriority_Accessor;
}

uci::type::PercentTypeValue ResourceAllocatorAllocationType::getExpectedPercentAccess() const {
  return expectedPercentAccess_Accessor;
}

uci::type::ResourceAllocatorAllocationType& ResourceAllocatorAllocationType::setExpectedPercentAccess(uci::type::PercentTypeValue value) {
  expectedPercentAccess_Accessor = value;
  return *this;
}


const uci::type::RequestID_Type& ResourceAllocatorAllocationType::getResourceRequestID() const {
  return *resourceRequestID_Accessor;
}

uci::type::RequestID_Type& ResourceAllocatorAllocationType::getResourceRequestID() {
  return *resourceRequestID_Accessor;
}

uci::type::ResourceAllocatorAllocationType& ResourceAllocatorAllocationType::setResourceRequestID(const uci::type::RequestID_Type& accessor) {
  if (&accessor != resourceRequestID_Accessor.get()) {
    resourceRequestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ResourceAllocatorAllocationType::RF_ThreadInstanceIndex& ResourceAllocatorAllocationType::getRF_ThreadInstanceIndex() const {
  return *rF_ThreadInstanceIndex_Accessor;
}

uci::type::ResourceAllocatorAllocationType::RF_ThreadInstanceIndex& ResourceAllocatorAllocationType::getRF_ThreadInstanceIndex() {
  return *rF_ThreadInstanceIndex_Accessor;
}

uci::type::ResourceAllocatorAllocationType& ResourceAllocatorAllocationType::setRF_ThreadInstanceIndex(const uci::type::ResourceAllocatorAllocationType::RF_ThreadInstanceIndex& accessor) {
  if (&accessor != rF_ThreadInstanceIndex_Accessor.get()) {
    rF_ThreadInstanceIndex_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ResourceAllocatorAllocationType::DigitalThreadInstanceIndex& ResourceAllocatorAllocationType::getDigitalThreadInstanceIndex() const {
  return *digitalThreadInstanceIndex_Accessor;
}

uci::type::ResourceAllocatorAllocationType::DigitalThreadInstanceIndex& ResourceAllocatorAllocationType::getDigitalThreadInstanceIndex() {
  return *digitalThreadInstanceIndex_Accessor;
}

uci::type::ResourceAllocatorAllocationType& ResourceAllocatorAllocationType::setDigitalThreadInstanceIndex(const uci::type::ResourceAllocatorAllocationType::DigitalThreadInstanceIndex& accessor) {
  if (&accessor != digitalThreadInstanceIndex_Accessor.get()) {
    digitalThreadInstanceIndex_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ResourceAllocatorAllocationType> ResourceAllocatorAllocationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceAllocatorAllocationType : type};
  return (requestedType == uci::type::accessorType::resourceAllocatorAllocationType) ? boost::make_unique<ResourceAllocatorAllocationType>() : nullptr;
}

/**  */
namespace ResourceAllocatorAllocationType_Names {

constexpr const char* Extern_Type_Name{"ResourceAllocatorAllocationType"};
constexpr const char* ResourceAllocationIndex_Name{"ResourceAllocationIndex"};
constexpr const char* SystemThreadIndex_Name{"SystemThreadIndex"};
constexpr const char* RF_Mode_Name{"RF_Mode"};
constexpr const char* ResourceAccessPriority_Name{"ResourceAccessPriority"};
constexpr const char* ExpectedPercentAccess_Name{"ExpectedPercentAccess"};
constexpr const char* ResourceRequestID_Name{"ResourceRequestID"};
constexpr const char* RF_ThreadInstanceIndex_Name{"RF_ThreadInstanceIndex"};
constexpr const char* DigitalThreadInstanceIndex_Name{"DigitalThreadInstanceIndex"};

} // namespace ResourceAllocatorAllocationType_Names

void ResourceAllocatorAllocationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResourceAllocatorAllocationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResourceAllocatorAllocationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResourceAllocatorAllocationType_Names::ResourceAllocationIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResourceAllocationIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceAllocatorAllocationType_Names::SystemThreadIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSystemThreadIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceAllocatorAllocationType_Names::RF_Mode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRF_Mode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ResourceAllocatorAllocationType_Names::ResourceAccessPriority_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableResourceAccessPriority(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResourceAllocatorAllocationType_Names::ExpectedPercentAccess_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setExpectedPercentAccess(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceAllocatorAllocationType_Names::ResourceRequestID_Name) {
      RequestID_Type::deserialize(valueType.second, accessor.getResourceRequestID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResourceAllocatorAllocationType_Names::RF_ThreadInstanceIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResourceAllocatorAllocationType::RF_ThreadInstanceIndex& boundedList = accessor.getRF_ThreadInstanceIndex();
        const uci::type::ResourceAllocatorAllocationType::RF_ThreadInstanceIndex::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedIntValue(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceAllocatorAllocationType_Names::DigitalThreadInstanceIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResourceAllocatorAllocationType::DigitalThreadInstanceIndex& boundedList = accessor.getDigitalThreadInstanceIndex();
        const uci::type::ResourceAllocatorAllocationType::DigitalThreadInstanceIndex::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedIntValue(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string ResourceAllocatorAllocationType::serialize(const uci::type::ResourceAllocatorAllocationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResourceAllocatorAllocationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResourceAllocatorAllocationType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getResourceAllocationIndex(), node, ResourceAllocatorAllocationType_Names::ResourceAllocationIndex_Name);
  if (accessor.hasSystemThreadIndex()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getSystemThreadIndex(), node, ResourceAllocatorAllocationType_Names::SystemThreadIndex_Name);
  }
  RF_TypeEnum::serialize(accessor.getRF_Mode(), node, ResourceAllocatorAllocationType_Names::RF_Mode_Name, false);
  UnsignedIntegerMinMaxType::serialize(accessor.getResourceAccessPriority(), node, ResourceAllocatorAllocationType_Names::ResourceAccessPriority_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getExpectedPercentAccess(), node, ResourceAllocatorAllocationType_Names::ExpectedPercentAccess_Name);
  RequestID_Type::serialize(accessor.getResourceRequestID(), node, ResourceAllocatorAllocationType_Names::ResourceRequestID_Name);
  {
    const uci::type::ResourceAllocatorAllocationType::RF_ThreadInstanceIndex& boundedList = accessor.getRF_ThreadInstanceIndex();
    for (uci::type::ResourceAllocatorAllocationType::RF_ThreadInstanceIndex::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(boundedList.at(i), node, ResourceAllocatorAllocationType_Names::RF_ThreadInstanceIndex_Name);
    }
  }
  {
    const uci::type::ResourceAllocatorAllocationType::DigitalThreadInstanceIndex& boundedList = accessor.getDigitalThreadInstanceIndex();
    for (uci::type::ResourceAllocatorAllocationType::DigitalThreadInstanceIndex::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(boundedList.at(i), node, ResourceAllocatorAllocationType_Names::DigitalThreadInstanceIndex_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResourceAllocatorAllocationType& ResourceAllocatorAllocationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResourceAllocatorAllocationType>().release());
}

uci::type::ResourceAllocatorAllocationType& ResourceAllocatorAllocationType::create(const uci::type::ResourceAllocatorAllocationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResourceAllocatorAllocationType> newAccessor{boost::make_unique<asb_uci::type::ResourceAllocatorAllocationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResourceAllocatorAllocationType::destroy(uci::type::ResourceAllocatorAllocationType& accessor) {
  delete dynamic_cast<asb_uci::type::ResourceAllocatorAllocationType*>(&accessor);
}

} // namespace type

} // namespace uci

