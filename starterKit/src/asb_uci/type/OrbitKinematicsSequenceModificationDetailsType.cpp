/** @file OrbitKinematicsSequenceModificationDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitKinematicsSequenceModificationDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/OrbitKinematicsSequenceInsertionType.h"
#include "asb_uci/type/OrbitKinematicsSequenceTrimType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/OrbitKinematicsSequenceInsertionType.h"
#include "uci/type/OrbitKinematicsSequenceModificationDetailsType.h"
#include "uci/type/OrbitKinematicsSequenceTrimType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitKinematicsSequenceModificationDetailsType::OrbitKinematicsSequenceModificationDetailsType() = default;

OrbitKinematicsSequenceModificationDetailsType::~OrbitKinematicsSequenceModificationDetailsType() = default;

void OrbitKinematicsSequenceModificationDetailsType::copy(const uci::type::OrbitKinematicsSequenceModificationDetailsType& accessor) {
  copyImpl(accessor, false);
}

void OrbitKinematicsSequenceModificationDetailsType::copyImpl(const uci::type::OrbitKinematicsSequenceModificationDetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitKinematicsSequenceModificationDetailsType&>(accessor);
    if (accessorImpl.insertOrbitKinematicsSequence_Accessor) {
      setInsertOrbitKinematicsSequence(*(accessorImpl.insertOrbitKinematicsSequence_Accessor));
    } else {
      insertOrbitKinematicsSequence_Accessor.reset();
    }
    if (accessorImpl.trimOrbitKinematicsSequence_Accessor) {
      setTrimOrbitKinematicsSequence(*(accessorImpl.trimOrbitKinematicsSequence_Accessor));
    } else {
      trimOrbitKinematicsSequence_Accessor.reset();
    }
  }
}

void OrbitKinematicsSequenceModificationDetailsType::reset() noexcept {
  insertOrbitKinematicsSequence_Accessor.reset();
  trimOrbitKinematicsSequence_Accessor.reset();
}

uci::type::OrbitKinematicsSequenceInsertionType& OrbitKinematicsSequenceModificationDetailsType::getInsertOrbitKinematicsSequence_() const {
  if (insertOrbitKinematicsSequence_Accessor) {
    return *insertOrbitKinematicsSequence_Accessor;
  }
  throw uci::base::UCIException("Error in getInsertOrbitKinematicsSequence(): An attempt was made to get an optional field that was not enabled, call hasInsertOrbitKinematicsSequence() to determine if it is safe to call getInsertOrbitKinematicsSequence()");
}

const uci::type::OrbitKinematicsSequenceInsertionType& OrbitKinematicsSequenceModificationDetailsType::getInsertOrbitKinematicsSequence() const {
  return getInsertOrbitKinematicsSequence_();
}

uci::type::OrbitKinematicsSequenceInsertionType& OrbitKinematicsSequenceModificationDetailsType::getInsertOrbitKinematicsSequence() {
  return getInsertOrbitKinematicsSequence_();
}

uci::type::OrbitKinematicsSequenceModificationDetailsType& OrbitKinematicsSequenceModificationDetailsType::setInsertOrbitKinematicsSequence(const uci::type::OrbitKinematicsSequenceInsertionType& accessor) {
  enableInsertOrbitKinematicsSequence();
  if (&accessor != insertOrbitKinematicsSequence_Accessor.get()) {
    insertOrbitKinematicsSequence_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsSequenceModificationDetailsType::hasInsertOrbitKinematicsSequence() const noexcept {
  return static_cast<bool>(insertOrbitKinematicsSequence_Accessor);
}

uci::type::OrbitKinematicsSequenceInsertionType& OrbitKinematicsSequenceModificationDetailsType::enableInsertOrbitKinematicsSequence(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsSequenceInsertionType : type};
  if ((!insertOrbitKinematicsSequence_Accessor) || (insertOrbitKinematicsSequence_Accessor->getAccessorType() != requestedType)) {
    insertOrbitKinematicsSequence_Accessor = OrbitKinematicsSequenceInsertionType::create(requestedType);
    if (!insertOrbitKinematicsSequence_Accessor) {
      throw uci::base::UCIException("Error in enableInsertOrbitKinematicsSequence(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *insertOrbitKinematicsSequence_Accessor;
}

uci::type::OrbitKinematicsSequenceModificationDetailsType& OrbitKinematicsSequenceModificationDetailsType::clearInsertOrbitKinematicsSequence() noexcept {
  insertOrbitKinematicsSequence_Accessor.reset();
  return *this;
}

uci::type::OrbitKinematicsSequenceTrimType& OrbitKinematicsSequenceModificationDetailsType::getTrimOrbitKinematicsSequence_() const {
  if (trimOrbitKinematicsSequence_Accessor) {
    return *trimOrbitKinematicsSequence_Accessor;
  }
  throw uci::base::UCIException("Error in getTrimOrbitKinematicsSequence(): An attempt was made to get an optional field that was not enabled, call hasTrimOrbitKinematicsSequence() to determine if it is safe to call getTrimOrbitKinematicsSequence()");
}

const uci::type::OrbitKinematicsSequenceTrimType& OrbitKinematicsSequenceModificationDetailsType::getTrimOrbitKinematicsSequence() const {
  return getTrimOrbitKinematicsSequence_();
}

uci::type::OrbitKinematicsSequenceTrimType& OrbitKinematicsSequenceModificationDetailsType::getTrimOrbitKinematicsSequence() {
  return getTrimOrbitKinematicsSequence_();
}

uci::type::OrbitKinematicsSequenceModificationDetailsType& OrbitKinematicsSequenceModificationDetailsType::setTrimOrbitKinematicsSequence(const uci::type::OrbitKinematicsSequenceTrimType& accessor) {
  enableTrimOrbitKinematicsSequence();
  if (&accessor != trimOrbitKinematicsSequence_Accessor.get()) {
    trimOrbitKinematicsSequence_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitKinematicsSequenceModificationDetailsType::hasTrimOrbitKinematicsSequence() const noexcept {
  return static_cast<bool>(trimOrbitKinematicsSequence_Accessor);
}

uci::type::OrbitKinematicsSequenceTrimType& OrbitKinematicsSequenceModificationDetailsType::enableTrimOrbitKinematicsSequence(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsSequenceTrimType : type};
  if ((!trimOrbitKinematicsSequence_Accessor) || (trimOrbitKinematicsSequence_Accessor->getAccessorType() != requestedType)) {
    trimOrbitKinematicsSequence_Accessor = OrbitKinematicsSequenceTrimType::create(requestedType);
    if (!trimOrbitKinematicsSequence_Accessor) {
      throw uci::base::UCIException("Error in enableTrimOrbitKinematicsSequence(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *trimOrbitKinematicsSequence_Accessor;
}

uci::type::OrbitKinematicsSequenceModificationDetailsType& OrbitKinematicsSequenceModificationDetailsType::clearTrimOrbitKinematicsSequence() noexcept {
  trimOrbitKinematicsSequence_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitKinematicsSequenceModificationDetailsType> OrbitKinematicsSequenceModificationDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitKinematicsSequenceModificationDetailsType : type};
  return (requestedType == uci::type::accessorType::orbitKinematicsSequenceModificationDetailsType) ? boost::make_unique<OrbitKinematicsSequenceModificationDetailsType>() : nullptr;
}

/**  */
namespace OrbitKinematicsSequenceModificationDetailsType_Names {

constexpr const char* Extern_Type_Name{"OrbitKinematicsSequenceModificationDetailsType"};
constexpr const char* InsertOrbitKinematicsSequence_Name{"InsertOrbitKinematicsSequence"};
constexpr const char* TrimOrbitKinematicsSequence_Name{"TrimOrbitKinematicsSequence"};

} // namespace OrbitKinematicsSequenceModificationDetailsType_Names

void OrbitKinematicsSequenceModificationDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitKinematicsSequenceModificationDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitKinematicsSequenceModificationDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitKinematicsSequenceModificationDetailsType_Names::InsertOrbitKinematicsSequence_Name) {
      OrbitKinematicsSequenceInsertionType::deserialize(valueType.second, accessor.enableInsertOrbitKinematicsSequence(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitKinematicsSequenceModificationDetailsType_Names::TrimOrbitKinematicsSequence_Name) {
      OrbitKinematicsSequenceTrimType::deserialize(valueType.second, accessor.enableTrimOrbitKinematicsSequence(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitKinematicsSequenceModificationDetailsType::serialize(const uci::type::OrbitKinematicsSequenceModificationDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitKinematicsSequenceModificationDetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitKinematicsSequenceModificationDetailsType_Names::Extern_Type_Name);
  }
  if (accessor.hasInsertOrbitKinematicsSequence()) {
    OrbitKinematicsSequenceInsertionType::serialize(accessor.getInsertOrbitKinematicsSequence(), node, OrbitKinematicsSequenceModificationDetailsType_Names::InsertOrbitKinematicsSequence_Name);
  }
  if (accessor.hasTrimOrbitKinematicsSequence()) {
    OrbitKinematicsSequenceTrimType::serialize(accessor.getTrimOrbitKinematicsSequence(), node, OrbitKinematicsSequenceModificationDetailsType_Names::TrimOrbitKinematicsSequence_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitKinematicsSequenceModificationDetailsType& OrbitKinematicsSequenceModificationDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitKinematicsSequenceModificationDetailsType>().release());
}

uci::type::OrbitKinematicsSequenceModificationDetailsType& OrbitKinematicsSequenceModificationDetailsType::create(const uci::type::OrbitKinematicsSequenceModificationDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitKinematicsSequenceModificationDetailsType> newAccessor{boost::make_unique<asb_uci::type::OrbitKinematicsSequenceModificationDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitKinematicsSequenceModificationDetailsType::destroy(uci::type::OrbitKinematicsSequenceModificationDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitKinematicsSequenceModificationDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

