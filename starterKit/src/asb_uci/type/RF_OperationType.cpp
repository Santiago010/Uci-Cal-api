/** @file RF_OperationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RF_OperationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityID_Type.h"
#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/ConfigureInteroperabilityReportType.h"
#include "asb_uci/type/DateTimeRangeBeginType.h"
#include "asb_uci/type/DurationRangeType.h"
#include "asb_uci/type/FOV_VolumeType.h"
#include "asb_uci/type/ModulationEnum.h"
#include "asb_uci/type/PercentRangeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityID_Type.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/ConfigureInteroperabilityReportType.h"
#include "uci/type/DateTimeRangeBeginType.h"
#include "uci/type/DurationRangeType.h"
#include "uci/type/DurationType.h"
#include "uci/type/FOV_VolumeType.h"
#include "uci/type/ModulationEnum.h"
#include "uci/type/PercentRangeType.h"
#include "uci/type/RF_OperationType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RF_OperationType::RF_OperationType()
  : capabilityID_Accessor{boost::make_unique<CapabilityID_Type>()},
    activityID_Accessor{boost::make_unique<ActivityID>(0, SIZE_MAX)},
    time_Accessor{boost::make_unique<DateTimeRangeBeginType>()} {
}

RF_OperationType::~RF_OperationType() = default;

void RF_OperationType::copy(const uci::type::RF_OperationType& accessor) {
  copyImpl(accessor, false);
}

void RF_OperationType::copyImpl(const uci::type::RF_OperationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RF_OperationType&>(accessor);
    setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    setActivityID(*(accessorImpl.activityID_Accessor));
    setReceive(accessorImpl.receive_Accessor);
    setTransmit(accessorImpl.transmit_Accessor);
    if (accessorImpl.emissionLocation_Accessor) {
      setEmissionLocation(*(accessorImpl.emissionLocation_Accessor));
    } else {
      emissionLocation_Accessor.reset();
    }
    if (accessorImpl.modulation_Accessor) {
      setModulation(*(accessorImpl.modulation_Accessor));
    } else {
      modulation_Accessor.reset();
    }
    if (accessorImpl.pRI_Accessor) {
      setPRI(*(accessorImpl.pRI_Accessor));
    } else {
      pRI_Accessor.reset();
    }
    if (accessorImpl.hasPulseWidthMax()) {
      setPulseWidthMax(accessorImpl.getPulseWidthMax());
    } else {
      clearPulseWidthMax();
    }
    setTime(*(accessorImpl.time_Accessor));
    if (accessorImpl.dutyCycle_Accessor) {
      setDutyCycle(*(accessorImpl.dutyCycle_Accessor));
    } else {
      dutyCycle_Accessor.reset();
    }
    if (accessorImpl.configureInteroperabilityReport_Accessor) {
      setConfigureInteroperabilityReport(*(accessorImpl.configureInteroperabilityReport_Accessor));
    } else {
      configureInteroperabilityReport_Accessor.reset();
    }
  }
}

void RF_OperationType::reset() noexcept {
  capabilityID_Accessor->reset();
  activityID_Accessor->reset();
  receive_Accessor = false;
  transmit_Accessor = false;
  emissionLocation_Accessor.reset();
  modulation_Accessor.reset();
  pRI_Accessor.reset();
  clearPulseWidthMax();
  time_Accessor->reset();
  dutyCycle_Accessor.reset();
  configureInteroperabilityReport_Accessor.reset();
}

const uci::type::CapabilityID_Type& RF_OperationType::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::CapabilityID_Type& RF_OperationType::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::RF_OperationType& RF_OperationType::setCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RF_OperationType::ActivityID& RF_OperationType::getActivityID() const {
  return *activityID_Accessor;
}

uci::type::RF_OperationType::ActivityID& RF_OperationType::getActivityID() {
  return *activityID_Accessor;
}

uci::type::RF_OperationType& RF_OperationType::setActivityID(const uci::type::RF_OperationType::ActivityID& accessor) {
  if (&accessor != activityID_Accessor.get()) {
    activityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean RF_OperationType::getReceive() const {
  return receive_Accessor;
}

uci::type::RF_OperationType& RF_OperationType::setReceive(xs::Boolean value) {
  receive_Accessor = value;
  return *this;
}


xs::Boolean RF_OperationType::getTransmit() const {
  return transmit_Accessor;
}

uci::type::RF_OperationType& RF_OperationType::setTransmit(xs::Boolean value) {
  transmit_Accessor = value;
  return *this;
}


uci::type::FOV_VolumeType& RF_OperationType::getEmissionLocation_() const {
  if (emissionLocation_Accessor) {
    return *emissionLocation_Accessor;
  }
  throw uci::base::UCIException("Error in getEmissionLocation(): An attempt was made to get an optional field that was not enabled, call hasEmissionLocation() to determine if it is safe to call getEmissionLocation()");
}

const uci::type::FOV_VolumeType& RF_OperationType::getEmissionLocation() const {
  return getEmissionLocation_();
}

uci::type::FOV_VolumeType& RF_OperationType::getEmissionLocation() {
  return getEmissionLocation_();
}

uci::type::RF_OperationType& RF_OperationType::setEmissionLocation(const uci::type::FOV_VolumeType& accessor) {
  enableEmissionLocation();
  if (&accessor != emissionLocation_Accessor.get()) {
    emissionLocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RF_OperationType::hasEmissionLocation() const noexcept {
  return static_cast<bool>(emissionLocation_Accessor);
}

uci::type::FOV_VolumeType& RF_OperationType::enableEmissionLocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fOV_VolumeType : type};
  if ((!emissionLocation_Accessor) || (emissionLocation_Accessor->getAccessorType() != requestedType)) {
    emissionLocation_Accessor = FOV_VolumeType::create(requestedType);
    if (!emissionLocation_Accessor) {
      throw uci::base::UCIException("Error in enableEmissionLocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emissionLocation_Accessor;
}

uci::type::RF_OperationType& RF_OperationType::clearEmissionLocation() noexcept {
  emissionLocation_Accessor.reset();
  return *this;
}

uci::type::ModulationEnum& RF_OperationType::getModulation_() const {
  if (modulation_Accessor) {
    return *modulation_Accessor;
  }
  throw uci::base::UCIException("Error in getModulation(): An attempt was made to get an optional field that was not enabled, call hasModulation() to determine if it is safe to call getModulation()");
}

const uci::type::ModulationEnum& RF_OperationType::getModulation() const {
  return getModulation_();
}

uci::type::ModulationEnum& RF_OperationType::getModulation() {
  return getModulation_();
}

uci::type::RF_OperationType& RF_OperationType::setModulation(const uci::type::ModulationEnum& accessor) {
  enableModulation();
  if (&accessor != modulation_Accessor.get()) {
    modulation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RF_OperationType& RF_OperationType::setModulation(const uci::type::ModulationEnum::EnumerationItem value) {
  enableModulation().setValue(value);
  return *this;
}

bool RF_OperationType::hasModulation() const noexcept {
  return static_cast<bool>(modulation_Accessor);
}

uci::type::ModulationEnum& RF_OperationType::enableModulation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::modulationEnum : type};
  if ((!modulation_Accessor) || (modulation_Accessor->getAccessorType() != requestedType)) {
    modulation_Accessor = ModulationEnum::create(requestedType);
    if (!modulation_Accessor) {
      throw uci::base::UCIException("Error in enableModulation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modulation_Accessor;
}

uci::type::RF_OperationType& RF_OperationType::clearModulation() noexcept {
  modulation_Accessor.reset();
  return *this;
}

uci::type::DurationRangeType& RF_OperationType::getPRI_() const {
  if (pRI_Accessor) {
    return *pRI_Accessor;
  }
  throw uci::base::UCIException("Error in getPRI(): An attempt was made to get an optional field that was not enabled, call hasPRI() to determine if it is safe to call getPRI()");
}

const uci::type::DurationRangeType& RF_OperationType::getPRI() const {
  return getPRI_();
}

uci::type::DurationRangeType& RF_OperationType::getPRI() {
  return getPRI_();
}

uci::type::RF_OperationType& RF_OperationType::setPRI(const uci::type::DurationRangeType& accessor) {
  enablePRI();
  if (&accessor != pRI_Accessor.get()) {
    pRI_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RF_OperationType::hasPRI() const noexcept {
  return static_cast<bool>(pRI_Accessor);
}

uci::type::DurationRangeType& RF_OperationType::enablePRI(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::durationRangeType : type};
  if ((!pRI_Accessor) || (pRI_Accessor->getAccessorType() != requestedType)) {
    pRI_Accessor = DurationRangeType::create(requestedType);
    if (!pRI_Accessor) {
      throw uci::base::UCIException("Error in enablePRI(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pRI_Accessor;
}

uci::type::RF_OperationType& RF_OperationType::clearPRI() noexcept {
  pRI_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue RF_OperationType::getPulseWidthMax() const {
  if (pulseWidthMax_Accessor) {
    return *pulseWidthMax_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseWidthMax(): An attempt was made to get an optional field that was not enabled, call hasPulseWidthMax() to determine if it is safe to call getPulseWidthMax()");
}

uci::type::RF_OperationType& RF_OperationType::setPulseWidthMax(uci::type::DurationTypeValue value) {
  pulseWidthMax_Accessor = value;
  return *this;
}

bool RF_OperationType::hasPulseWidthMax() const noexcept {
  return pulseWidthMax_Accessor.has_value();
}

uci::type::RF_OperationType& RF_OperationType::clearPulseWidthMax() noexcept {
  pulseWidthMax_Accessor.reset();
  return *this;
}

const uci::type::DateTimeRangeBeginType& RF_OperationType::getTime() const {
  return *time_Accessor;
}

uci::type::DateTimeRangeBeginType& RF_OperationType::getTime() {
  return *time_Accessor;
}

uci::type::RF_OperationType& RF_OperationType::setTime(const uci::type::DateTimeRangeBeginType& accessor) {
  if (&accessor != time_Accessor.get()) {
    time_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PercentRangeType& RF_OperationType::getDutyCycle_() const {
  if (dutyCycle_Accessor) {
    return *dutyCycle_Accessor;
  }
  throw uci::base::UCIException("Error in getDutyCycle(): An attempt was made to get an optional field that was not enabled, call hasDutyCycle() to determine if it is safe to call getDutyCycle()");
}

const uci::type::PercentRangeType& RF_OperationType::getDutyCycle() const {
  return getDutyCycle_();
}

uci::type::PercentRangeType& RF_OperationType::getDutyCycle() {
  return getDutyCycle_();
}

uci::type::RF_OperationType& RF_OperationType::setDutyCycle(const uci::type::PercentRangeType& accessor) {
  enableDutyCycle();
  if (&accessor != dutyCycle_Accessor.get()) {
    dutyCycle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RF_OperationType::hasDutyCycle() const noexcept {
  return static_cast<bool>(dutyCycle_Accessor);
}

uci::type::PercentRangeType& RF_OperationType::enableDutyCycle(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::percentRangeType : type};
  if ((!dutyCycle_Accessor) || (dutyCycle_Accessor->getAccessorType() != requestedType)) {
    dutyCycle_Accessor = PercentRangeType::create(requestedType);
    if (!dutyCycle_Accessor) {
      throw uci::base::UCIException("Error in enableDutyCycle(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dutyCycle_Accessor;
}

uci::type::RF_OperationType& RF_OperationType::clearDutyCycle() noexcept {
  dutyCycle_Accessor.reset();
  return *this;
}

uci::type::ConfigureInteroperabilityReportType& RF_OperationType::getConfigureInteroperabilityReport_() const {
  if (configureInteroperabilityReport_Accessor) {
    return *configureInteroperabilityReport_Accessor;
  }
  throw uci::base::UCIException("Error in getConfigureInteroperabilityReport(): An attempt was made to get an optional field that was not enabled, call hasConfigureInteroperabilityReport() to determine if it is safe to call getConfigureInteroperabilityReport()");
}

const uci::type::ConfigureInteroperabilityReportType& RF_OperationType::getConfigureInteroperabilityReport() const {
  return getConfigureInteroperabilityReport_();
}

uci::type::ConfigureInteroperabilityReportType& RF_OperationType::getConfigureInteroperabilityReport() {
  return getConfigureInteroperabilityReport_();
}

uci::type::RF_OperationType& RF_OperationType::setConfigureInteroperabilityReport(const uci::type::ConfigureInteroperabilityReportType& accessor) {
  enableConfigureInteroperabilityReport();
  if (&accessor != configureInteroperabilityReport_Accessor.get()) {
    configureInteroperabilityReport_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RF_OperationType::hasConfigureInteroperabilityReport() const noexcept {
  return static_cast<bool>(configureInteroperabilityReport_Accessor);
}

uci::type::ConfigureInteroperabilityReportType& RF_OperationType::enableConfigureInteroperabilityReport(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::configureInteroperabilityReportType : type};
  if ((!configureInteroperabilityReport_Accessor) || (configureInteroperabilityReport_Accessor->getAccessorType() != requestedType)) {
    configureInteroperabilityReport_Accessor = ConfigureInteroperabilityReportType::create(requestedType);
    if (!configureInteroperabilityReport_Accessor) {
      throw uci::base::UCIException("Error in enableConfigureInteroperabilityReport(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *configureInteroperabilityReport_Accessor;
}

uci::type::RF_OperationType& RF_OperationType::clearConfigureInteroperabilityReport() noexcept {
  configureInteroperabilityReport_Accessor.reset();
  return *this;
}

std::unique_ptr<RF_OperationType> RF_OperationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_OperationType : type};
  return (requestedType == uci::type::accessorType::rF_OperationType) ? boost::make_unique<RF_OperationType>() : nullptr;
}

/**  */
namespace RF_OperationType_Names {

constexpr const char* Extern_Type_Name{"RF_OperationType"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* ActivityID_Name{"ActivityID"};
constexpr const char* Receive_Name{"Receive"};
constexpr const char* Transmit_Name{"Transmit"};
constexpr const char* EmissionLocation_Name{"EmissionLocation"};
constexpr const char* Modulation_Name{"Modulation"};
constexpr const char* PRI_Name{"PRI"};
constexpr const char* PulseWidthMax_Name{"PulseWidthMax"};
constexpr const char* Time_Name{"Time"};
constexpr const char* DutyCycle_Name{"DutyCycle"};
constexpr const char* ConfigureInteroperabilityReport_Name{"ConfigureInteroperabilityReport"};

} // namespace RF_OperationType_Names

void RF_OperationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_OperationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RF_OperationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.getCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::ActivityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_OperationType::ActivityID& boundedList = accessor.getActivityID();
        const uci::type::RF_OperationType::ActivityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ActivityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::Receive_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReceive(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::Transmit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTransmit(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::EmissionLocation_Name) {
      FOV_VolumeType::deserialize(valueType.second, accessor.enableEmissionLocation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::Modulation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableModulation().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::PRI_Name) {
      DurationRangeType::deserialize(valueType.second, accessor.enablePRI(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::PulseWidthMax_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthMax(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::Time_Name) {
      DateTimeRangeBeginType::deserialize(valueType.second, accessor.getTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::DutyCycle_Name) {
      PercentRangeType::deserialize(valueType.second, accessor.enableDutyCycle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::ConfigureInteroperabilityReport_Name) {
      ConfigureInteroperabilityReportType::deserialize(valueType.second, accessor.enableConfigureInteroperabilityReport(), nodeName, nsPrefix);
    }
  }
}

std::string RF_OperationType::serialize(const uci::type::RF_OperationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RF_OperationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RF_OperationType_Names::Extern_Type_Name);
  }
  CapabilityID_Type::serialize(accessor.getCapabilityID(), node, RF_OperationType_Names::CapabilityID_Name);
  {
    const uci::type::RF_OperationType::ActivityID& boundedList = accessor.getActivityID();
    for (uci::type::RF_OperationType::ActivityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ActivityID_Type::serialize(boundedList.at(i), node, RF_OperationType_Names::ActivityID_Name);
    }
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getReceive(), node, RF_OperationType_Names::Receive_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getTransmit(), node, RF_OperationType_Names::Transmit_Name);
  if (accessor.hasEmissionLocation()) {
    FOV_VolumeType::serialize(accessor.getEmissionLocation(), node, RF_OperationType_Names::EmissionLocation_Name);
  }
  if (accessor.hasModulation()) {
    ModulationEnum::serialize(accessor.getModulation(), node, RF_OperationType_Names::Modulation_Name, false);
  }
  if (accessor.hasPRI()) {
    DurationRangeType::serialize(accessor.getPRI(), node, RF_OperationType_Names::PRI_Name);
  }
  if (accessor.hasPulseWidthMax()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthMax(), node, RF_OperationType_Names::PulseWidthMax_Name);
  }
  DateTimeRangeBeginType::serialize(accessor.getTime(), node, RF_OperationType_Names::Time_Name);
  if (accessor.hasDutyCycle()) {
    PercentRangeType::serialize(accessor.getDutyCycle(), node, RF_OperationType_Names::DutyCycle_Name);
  }
  if (accessor.hasConfigureInteroperabilityReport()) {
    ConfigureInteroperabilityReportType::serialize(accessor.getConfigureInteroperabilityReport(), node, RF_OperationType_Names::ConfigureInteroperabilityReport_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RF_OperationType& RF_OperationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RF_OperationType>().release());
}

uci::type::RF_OperationType& RF_OperationType::create(const uci::type::RF_OperationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RF_OperationType> newAccessor{boost::make_unique<asb_uci::type::RF_OperationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RF_OperationType::destroy(uci::type::RF_OperationType& accessor) {
  delete dynamic_cast<asb_uci::type::RF_OperationType*>(&accessor);
}

} // namespace type

} // namespace uci

