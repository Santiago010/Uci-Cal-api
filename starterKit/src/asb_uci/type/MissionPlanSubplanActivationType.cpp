/** @file MissionPlanSubplanActivationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MissionPlanSubplanActivationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActionPlanActivationType.h"
#include "../../../include/asb_uci/type/ActivityPlanActivationType.h"
#include "../../../include/asb_uci/type/EffectPlanActivationType.h"
#include "../../../include/asb_uci/type/OrbitActivityPlanActivationType.h"
#include "../../../include/asb_uci/type/OrbitPlanActivationType.h"
#include "../../../include/asb_uci/type/ResponsePlanActivationType.h"
#include "../../../include/asb_uci/type/RouteActivityPlanActivationType.h"
#include "../../../include/asb_uci/type/RoutePlanActivationType.h"
#include "../../../include/asb_uci/type/TaskPlanActivationType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActionPlanActivationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityPlanActivationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EffectPlanActivationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanSubplanActivationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitActivityPlanActivationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitPlanActivationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponsePlanActivationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RouteActivityPlanActivationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RoutePlanActivationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TaskPlanActivationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MissionPlanSubplanActivationType::MissionPlanSubplanActivationType()
  : taskPlan_Accessor{boost::make_unique<TaskPlan>(0, SIZE_MAX)},
    routePlan_Accessor{boost::make_unique<RoutePlan>(0, SIZE_MAX)},
    routeActivityPlan_Accessor{boost::make_unique<RouteActivityPlan>(0, SIZE_MAX)},
    orbitPlan_Accessor{boost::make_unique<OrbitPlan>(0, SIZE_MAX)},
    orbitActivityPlan_Accessor{boost::make_unique<OrbitActivityPlan>(0, SIZE_MAX)},
    activityPlan_Accessor{boost::make_unique<ActivityPlan>(0, SIZE_MAX)},
    effectPlan_Accessor{boost::make_unique<EffectPlan>(0, SIZE_MAX)},
    actionPlan_Accessor{boost::make_unique<ActionPlan>(0, SIZE_MAX)},
    responsePlan_Accessor{boost::make_unique<ResponsePlan>(0, SIZE_MAX)} {
}

MissionPlanSubplanActivationType::~MissionPlanSubplanActivationType() = default;

void MissionPlanSubplanActivationType::copy(const uci::type::MissionPlanSubplanActivationType& accessor) {
  copyImpl(accessor, false);
}

void MissionPlanSubplanActivationType::copyImpl(const uci::type::MissionPlanSubplanActivationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MissionPlanSubplanActivationType&>(accessor);
    setTaskPlan(*(accessorImpl.taskPlan_Accessor));
    setRoutePlan(*(accessorImpl.routePlan_Accessor));
    setRouteActivityPlan(*(accessorImpl.routeActivityPlan_Accessor));
    setOrbitPlan(*(accessorImpl.orbitPlan_Accessor));
    setOrbitActivityPlan(*(accessorImpl.orbitActivityPlan_Accessor));
    setActivityPlan(*(accessorImpl.activityPlan_Accessor));
    setEffectPlan(*(accessorImpl.effectPlan_Accessor));
    setActionPlan(*(accessorImpl.actionPlan_Accessor));
    setResponsePlan(*(accessorImpl.responsePlan_Accessor));
  }
}

void MissionPlanSubplanActivationType::reset() noexcept {
  taskPlan_Accessor->reset();
  routePlan_Accessor->reset();
  routeActivityPlan_Accessor->reset();
  orbitPlan_Accessor->reset();
  orbitActivityPlan_Accessor->reset();
  activityPlan_Accessor->reset();
  effectPlan_Accessor->reset();
  actionPlan_Accessor->reset();
  responsePlan_Accessor->reset();
}

const uci::type::MissionPlanSubplanActivationType::TaskPlan& MissionPlanSubplanActivationType::getTaskPlan() const {
  return *taskPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType::TaskPlan& MissionPlanSubplanActivationType::getTaskPlan() {
  return *taskPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType& MissionPlanSubplanActivationType::setTaskPlan(const uci::type::MissionPlanSubplanActivationType::TaskPlan& accessor) {
  if (&accessor != taskPlan_Accessor.get()) {
    taskPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanSubplanActivationType::RoutePlan& MissionPlanSubplanActivationType::getRoutePlan() const {
  return *routePlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType::RoutePlan& MissionPlanSubplanActivationType::getRoutePlan() {
  return *routePlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType& MissionPlanSubplanActivationType::setRoutePlan(const uci::type::MissionPlanSubplanActivationType::RoutePlan& accessor) {
  if (&accessor != routePlan_Accessor.get()) {
    routePlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanSubplanActivationType::RouteActivityPlan& MissionPlanSubplanActivationType::getRouteActivityPlan() const {
  return *routeActivityPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType::RouteActivityPlan& MissionPlanSubplanActivationType::getRouteActivityPlan() {
  return *routeActivityPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType& MissionPlanSubplanActivationType::setRouteActivityPlan(const uci::type::MissionPlanSubplanActivationType::RouteActivityPlan& accessor) {
  if (&accessor != routeActivityPlan_Accessor.get()) {
    routeActivityPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanSubplanActivationType::OrbitPlan& MissionPlanSubplanActivationType::getOrbitPlan() const {
  return *orbitPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType::OrbitPlan& MissionPlanSubplanActivationType::getOrbitPlan() {
  return *orbitPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType& MissionPlanSubplanActivationType::setOrbitPlan(const uci::type::MissionPlanSubplanActivationType::OrbitPlan& accessor) {
  if (&accessor != orbitPlan_Accessor.get()) {
    orbitPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanSubplanActivationType::OrbitActivityPlan& MissionPlanSubplanActivationType::getOrbitActivityPlan() const {
  return *orbitActivityPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType::OrbitActivityPlan& MissionPlanSubplanActivationType::getOrbitActivityPlan() {
  return *orbitActivityPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType& MissionPlanSubplanActivationType::setOrbitActivityPlan(const uci::type::MissionPlanSubplanActivationType::OrbitActivityPlan& accessor) {
  if (&accessor != orbitActivityPlan_Accessor.get()) {
    orbitActivityPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanSubplanActivationType::ActivityPlan& MissionPlanSubplanActivationType::getActivityPlan() const {
  return *activityPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType::ActivityPlan& MissionPlanSubplanActivationType::getActivityPlan() {
  return *activityPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType& MissionPlanSubplanActivationType::setActivityPlan(const uci::type::MissionPlanSubplanActivationType::ActivityPlan& accessor) {
  if (&accessor != activityPlan_Accessor.get()) {
    activityPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanSubplanActivationType::EffectPlan& MissionPlanSubplanActivationType::getEffectPlan() const {
  return *effectPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType::EffectPlan& MissionPlanSubplanActivationType::getEffectPlan() {
  return *effectPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType& MissionPlanSubplanActivationType::setEffectPlan(const uci::type::MissionPlanSubplanActivationType::EffectPlan& accessor) {
  if (&accessor != effectPlan_Accessor.get()) {
    effectPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanSubplanActivationType::ActionPlan& MissionPlanSubplanActivationType::getActionPlan() const {
  return *actionPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType::ActionPlan& MissionPlanSubplanActivationType::getActionPlan() {
  return *actionPlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType& MissionPlanSubplanActivationType::setActionPlan(const uci::type::MissionPlanSubplanActivationType::ActionPlan& accessor) {
  if (&accessor != actionPlan_Accessor.get()) {
    actionPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::MissionPlanSubplanActivationType::ResponsePlan& MissionPlanSubplanActivationType::getResponsePlan() const {
  return *responsePlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType::ResponsePlan& MissionPlanSubplanActivationType::getResponsePlan() {
  return *responsePlan_Accessor;
}

uci::type::MissionPlanSubplanActivationType& MissionPlanSubplanActivationType::setResponsePlan(const uci::type::MissionPlanSubplanActivationType::ResponsePlan& accessor) {
  if (&accessor != responsePlan_Accessor.get()) {
    responsePlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<MissionPlanSubplanActivationType> MissionPlanSubplanActivationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanSubplanActivationType : type};
  return (requestedType == uci::type::accessorType::missionPlanSubplanActivationType) ? boost::make_unique<MissionPlanSubplanActivationType>() : nullptr;
}

/**  */
namespace MissionPlanSubplanActivationType_Names {

constexpr const char* Extern_Type_Name{"MissionPlanSubplanActivationType"};
constexpr const char* TaskPlan_Name{"TaskPlan"};
constexpr const char* RoutePlan_Name{"RoutePlan"};
constexpr const char* RouteActivityPlan_Name{"RouteActivityPlan"};
constexpr const char* OrbitPlan_Name{"OrbitPlan"};
constexpr const char* OrbitActivityPlan_Name{"OrbitActivityPlan"};
constexpr const char* ActivityPlan_Name{"ActivityPlan"};
constexpr const char* EffectPlan_Name{"EffectPlan"};
constexpr const char* ActionPlan_Name{"ActionPlan"};
constexpr const char* ResponsePlan_Name{"ResponsePlan"};

} // namespace MissionPlanSubplanActivationType_Names

void MissionPlanSubplanActivationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionPlanSubplanActivationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionPlanSubplanActivationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MissionPlanSubplanActivationType_Names::TaskPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanSubplanActivationType::TaskPlan& boundedList = accessor.getTaskPlan();
        const uci::type::MissionPlanSubplanActivationType::TaskPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::TaskPlanActivationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanSubplanActivationType_Names::RoutePlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanSubplanActivationType::RoutePlan& boundedList = accessor.getRoutePlan();
        const uci::type::MissionPlanSubplanActivationType::RoutePlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RoutePlanActivationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanSubplanActivationType_Names::RouteActivityPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanSubplanActivationType::RouteActivityPlan& boundedList = accessor.getRouteActivityPlan();
        const uci::type::MissionPlanSubplanActivationType::RouteActivityPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RouteActivityPlanActivationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanSubplanActivationType_Names::OrbitPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanSubplanActivationType::OrbitPlan& boundedList = accessor.getOrbitPlan();
        const uci::type::MissionPlanSubplanActivationType::OrbitPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitPlanActivationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanSubplanActivationType_Names::OrbitActivityPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanSubplanActivationType::OrbitActivityPlan& boundedList = accessor.getOrbitActivityPlan();
        const uci::type::MissionPlanSubplanActivationType::OrbitActivityPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitActivityPlanActivationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanSubplanActivationType_Names::ActivityPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanSubplanActivationType::ActivityPlan& boundedList = accessor.getActivityPlan();
        const uci::type::MissionPlanSubplanActivationType::ActivityPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ActivityPlanActivationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanSubplanActivationType_Names::EffectPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanSubplanActivationType::EffectPlan& boundedList = accessor.getEffectPlan();
        const uci::type::MissionPlanSubplanActivationType::EffectPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EffectPlanActivationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanSubplanActivationType_Names::ActionPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanSubplanActivationType::ActionPlan& boundedList = accessor.getActionPlan();
        const uci::type::MissionPlanSubplanActivationType::ActionPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ActionPlanActivationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionPlanSubplanActivationType_Names::ResponsePlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionPlanSubplanActivationType::ResponsePlan& boundedList = accessor.getResponsePlan();
        const uci::type::MissionPlanSubplanActivationType::ResponsePlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ResponsePlanActivationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string MissionPlanSubplanActivationType::serialize(const uci::type::MissionPlanSubplanActivationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MissionPlanSubplanActivationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MissionPlanSubplanActivationType_Names::Extern_Type_Name);
  }
  {
    const uci::type::MissionPlanSubplanActivationType::TaskPlan& boundedList = accessor.getTaskPlan();
    for (uci::type::MissionPlanSubplanActivationType::TaskPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::TaskPlanActivationType::serialize(boundedList.at(i), node, MissionPlanSubplanActivationType_Names::TaskPlan_Name);
    }
  }
  {
    const uci::type::MissionPlanSubplanActivationType::RoutePlan& boundedList = accessor.getRoutePlan();
    for (uci::type::MissionPlanSubplanActivationType::RoutePlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RoutePlanActivationType::serialize(boundedList.at(i), node, MissionPlanSubplanActivationType_Names::RoutePlan_Name);
    }
  }
  {
    const uci::type::MissionPlanSubplanActivationType::RouteActivityPlan& boundedList = accessor.getRouteActivityPlan();
    for (uci::type::MissionPlanSubplanActivationType::RouteActivityPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RouteActivityPlanActivationType::serialize(boundedList.at(i), node, MissionPlanSubplanActivationType_Names::RouteActivityPlan_Name);
    }
  }
  {
    const uci::type::MissionPlanSubplanActivationType::OrbitPlan& boundedList = accessor.getOrbitPlan();
    for (uci::type::MissionPlanSubplanActivationType::OrbitPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitPlanActivationType::serialize(boundedList.at(i), node, MissionPlanSubplanActivationType_Names::OrbitPlan_Name);
    }
  }
  {
    const uci::type::MissionPlanSubplanActivationType::OrbitActivityPlan& boundedList = accessor.getOrbitActivityPlan();
    for (uci::type::MissionPlanSubplanActivationType::OrbitActivityPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitActivityPlanActivationType::serialize(boundedList.at(i), node, MissionPlanSubplanActivationType_Names::OrbitActivityPlan_Name);
    }
  }
  {
    const uci::type::MissionPlanSubplanActivationType::ActivityPlan& boundedList = accessor.getActivityPlan();
    for (uci::type::MissionPlanSubplanActivationType::ActivityPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ActivityPlanActivationType::serialize(boundedList.at(i), node, MissionPlanSubplanActivationType_Names::ActivityPlan_Name);
    }
  }
  {
    const uci::type::MissionPlanSubplanActivationType::EffectPlan& boundedList = accessor.getEffectPlan();
    for (uci::type::MissionPlanSubplanActivationType::EffectPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EffectPlanActivationType::serialize(boundedList.at(i), node, MissionPlanSubplanActivationType_Names::EffectPlan_Name);
    }
  }
  {
    const uci::type::MissionPlanSubplanActivationType::ActionPlan& boundedList = accessor.getActionPlan();
    for (uci::type::MissionPlanSubplanActivationType::ActionPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ActionPlanActivationType::serialize(boundedList.at(i), node, MissionPlanSubplanActivationType_Names::ActionPlan_Name);
    }
  }
  {
    const uci::type::MissionPlanSubplanActivationType::ResponsePlan& boundedList = accessor.getResponsePlan();
    for (uci::type::MissionPlanSubplanActivationType::ResponsePlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ResponsePlanActivationType::serialize(boundedList.at(i), node, MissionPlanSubplanActivationType_Names::ResponsePlan_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MissionPlanSubplanActivationType& MissionPlanSubplanActivationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MissionPlanSubplanActivationType>().release());
}

uci::type::MissionPlanSubplanActivationType& MissionPlanSubplanActivationType::create(const uci::type::MissionPlanSubplanActivationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MissionPlanSubplanActivationType> newAccessor{boost::make_unique<asb_uci::type::MissionPlanSubplanActivationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MissionPlanSubplanActivationType::destroy(uci::type::MissionPlanSubplanActivationType& accessor) {
  delete dynamic_cast<asb_uci::type::MissionPlanSubplanActivationType*>(&accessor);
}

} // namespace type

} // namespace uci

