/** @file ObservationReportMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ObservationReportMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityAgainstType.h"
#include "asb_uci/type/ActivityByType.h"
#include "asb_uci/type/AmplifyingInformationType.h"
#include "asb_uci/type/EmptyType.h"
#include "asb_uci/type/EntityIdentityType.h"
#include "asb_uci/type/GeoLocatedObjectType.h"
#include "asb_uci/type/ObservationReportID_Type.h"
#include "asb_uci/type/RelationshipThreatType.h"
#include "asb_uci/type/SystemMessageIdentifierType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityAgainstType.h"
#include "uci/type/ActivityByType.h"
#include "uci/type/AmplifyingInformationType.h"
#include "uci/type/EmptyType.h"
#include "uci/type/EntityIdentityType.h"
#include "uci/type/GeoLocatedObjectType.h"
#include "uci/type/ObservationReportID_Type.h"
#include "uci/type/ObservationReportMDT.h"
#include "uci/type/RelationshipThreatType.h"
#include "uci/type/SystemMessageIdentifierType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ObservationReportMDT::ObservationReportMDT()
  : observationReportID_Accessor{boost::make_unique<ObservationReportID_Type>()},
    reference_Accessor{boost::make_unique<GeoLocatedObjectType>()},
    activityAgainst_Accessor{boost::make_unique<ActivityAgainst>(0, SIZE_MAX)} {
}

ObservationReportMDT::~ObservationReportMDT() = default;

void ObservationReportMDT::copy(const uci::type::ObservationReportMDT& accessor) {
  copyImpl(accessor, false);
}

void ObservationReportMDT::copyImpl(const uci::type::ObservationReportMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ObservationReportMDT&>(accessor);
    setObservationReportID(*(accessorImpl.observationReportID_Accessor));
    setReference(*(accessorImpl.reference_Accessor));
    if (accessorImpl.originator_Accessor) {
      setOriginator(*(accessorImpl.originator_Accessor));
    } else {
      originator_Accessor.reset();
    }
    if (accessorImpl.identity_Accessor) {
      setIdentity(*(accessorImpl.identity_Accessor));
    } else {
      identity_Accessor.reset();
    }
    setActivityAgainst(*(accessorImpl.activityAgainst_Accessor));
    if (accessorImpl.activityBy_Accessor) {
      setActivityBy(*(accessorImpl.activityBy_Accessor));
    } else {
      activityBy_Accessor.reset();
    }
    if (accessorImpl.threatData_Accessor) {
      setThreatData(*(accessorImpl.threatData_Accessor));
    } else {
      threatData_Accessor.reset();
    }
    if (accessorImpl.amplifyingInfo_Accessor) {
      setAmplifyingInfo(*(accessorImpl.amplifyingInfo_Accessor));
    } else {
      amplifyingInfo_Accessor.reset();
    }
    if (accessorImpl.locallyModified_Accessor) {
      setLocallyModified(*(accessorImpl.locallyModified_Accessor));
    } else {
      locallyModified_Accessor.reset();
    }
  }
}

void ObservationReportMDT::reset() noexcept {
  observationReportID_Accessor->reset();
  reference_Accessor->reset();
  originator_Accessor.reset();
  identity_Accessor.reset();
  activityAgainst_Accessor->reset();
  activityBy_Accessor.reset();
  threatData_Accessor.reset();
  amplifyingInfo_Accessor.reset();
  locallyModified_Accessor.reset();
}

const uci::type::ObservationReportID_Type& ObservationReportMDT::getObservationReportID() const {
  return *observationReportID_Accessor;
}

uci::type::ObservationReportID_Type& ObservationReportMDT::getObservationReportID() {
  return *observationReportID_Accessor;
}

uci::type::ObservationReportMDT& ObservationReportMDT::setObservationReportID(const uci::type::ObservationReportID_Type& accessor) {
  if (&accessor != observationReportID_Accessor.get()) {
    observationReportID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::GeoLocatedObjectType& ObservationReportMDT::getReference() const {
  return *reference_Accessor;
}

uci::type::GeoLocatedObjectType& ObservationReportMDT::getReference() {
  return *reference_Accessor;
}

uci::type::ObservationReportMDT& ObservationReportMDT::setReference(const uci::type::GeoLocatedObjectType& accessor) {
  if (&accessor != reference_Accessor.get()) {
    reference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemMessageIdentifierType& ObservationReportMDT::getOriginator_() const {
  if (originator_Accessor) {
    return *originator_Accessor;
  }
  throw uci::base::UCIException("Error in getOriginator(): An attempt was made to get an optional field that was not enabled, call hasOriginator() to determine if it is safe to call getOriginator()");
}

const uci::type::SystemMessageIdentifierType& ObservationReportMDT::getOriginator() const {
  return getOriginator_();
}

uci::type::SystemMessageIdentifierType& ObservationReportMDT::getOriginator() {
  return getOriginator_();
}

uci::type::ObservationReportMDT& ObservationReportMDT::setOriginator(const uci::type::SystemMessageIdentifierType& accessor) {
  enableOriginator();
  if (&accessor != originator_Accessor.get()) {
    originator_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ObservationReportMDT::hasOriginator() const noexcept {
  return static_cast<bool>(originator_Accessor);
}

uci::type::SystemMessageIdentifierType& ObservationReportMDT::enableOriginator(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemMessageIdentifierType : type};
  if ((!originator_Accessor) || (originator_Accessor->getAccessorType() != requestedType)) {
    originator_Accessor = SystemMessageIdentifierType::create(requestedType);
    if (!originator_Accessor) {
      throw uci::base::UCIException("Error in enableOriginator(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *originator_Accessor;
}

uci::type::ObservationReportMDT& ObservationReportMDT::clearOriginator() noexcept {
  originator_Accessor.reset();
  return *this;
}

uci::type::EntityIdentityType& ObservationReportMDT::getIdentity_() const {
  if (identity_Accessor) {
    return *identity_Accessor;
  }
  throw uci::base::UCIException("Error in getIdentity(): An attempt was made to get an optional field that was not enabled, call hasIdentity() to determine if it is safe to call getIdentity()");
}

const uci::type::EntityIdentityType& ObservationReportMDT::getIdentity() const {
  return getIdentity_();
}

uci::type::EntityIdentityType& ObservationReportMDT::getIdentity() {
  return getIdentity_();
}

uci::type::ObservationReportMDT& ObservationReportMDT::setIdentity(const uci::type::EntityIdentityType& accessor) {
  enableIdentity();
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ObservationReportMDT::hasIdentity() const noexcept {
  return static_cast<bool>(identity_Accessor);
}

uci::type::EntityIdentityType& ObservationReportMDT::enableIdentity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityIdentityType : type};
  if ((!identity_Accessor) || (identity_Accessor->getAccessorType() != requestedType)) {
    identity_Accessor = EntityIdentityType::create(requestedType);
    if (!identity_Accessor) {
      throw uci::base::UCIException("Error in enableIdentity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *identity_Accessor;
}

uci::type::ObservationReportMDT& ObservationReportMDT::clearIdentity() noexcept {
  identity_Accessor.reset();
  return *this;
}

const uci::type::ObservationReportMDT::ActivityAgainst& ObservationReportMDT::getActivityAgainst() const {
  return *activityAgainst_Accessor;
}

uci::type::ObservationReportMDT::ActivityAgainst& ObservationReportMDT::getActivityAgainst() {
  return *activityAgainst_Accessor;
}

uci::type::ObservationReportMDT& ObservationReportMDT::setActivityAgainst(const uci::type::ObservationReportMDT::ActivityAgainst& accessor) {
  if (&accessor != activityAgainst_Accessor.get()) {
    activityAgainst_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ActivityByType& ObservationReportMDT::getActivityBy_() const {
  if (activityBy_Accessor) {
    return *activityBy_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityBy(): An attempt was made to get an optional field that was not enabled, call hasActivityBy() to determine if it is safe to call getActivityBy()");
}

const uci::type::ActivityByType& ObservationReportMDT::getActivityBy() const {
  return getActivityBy_();
}

uci::type::ActivityByType& ObservationReportMDT::getActivityBy() {
  return getActivityBy_();
}

uci::type::ObservationReportMDT& ObservationReportMDT::setActivityBy(const uci::type::ActivityByType& accessor) {
  enableActivityBy();
  if (&accessor != activityBy_Accessor.get()) {
    activityBy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ObservationReportMDT::hasActivityBy() const noexcept {
  return static_cast<bool>(activityBy_Accessor);
}

uci::type::ActivityByType& ObservationReportMDT::enableActivityBy(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityByType : type};
  if ((!activityBy_Accessor) || (activityBy_Accessor->getAccessorType() != requestedType)) {
    activityBy_Accessor = ActivityByType::create(requestedType);
    if (!activityBy_Accessor) {
      throw uci::base::UCIException("Error in enableActivityBy(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityBy_Accessor;
}

uci::type::ObservationReportMDT& ObservationReportMDT::clearActivityBy() noexcept {
  activityBy_Accessor.reset();
  return *this;
}

uci::type::RelationshipThreatType& ObservationReportMDT::getThreatData_() const {
  if (threatData_Accessor) {
    return *threatData_Accessor;
  }
  throw uci::base::UCIException("Error in getThreatData(): An attempt was made to get an optional field that was not enabled, call hasThreatData() to determine if it is safe to call getThreatData()");
}

const uci::type::RelationshipThreatType& ObservationReportMDT::getThreatData() const {
  return getThreatData_();
}

uci::type::RelationshipThreatType& ObservationReportMDT::getThreatData() {
  return getThreatData_();
}

uci::type::ObservationReportMDT& ObservationReportMDT::setThreatData(const uci::type::RelationshipThreatType& accessor) {
  enableThreatData();
  if (&accessor != threatData_Accessor.get()) {
    threatData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ObservationReportMDT::hasThreatData() const noexcept {
  return static_cast<bool>(threatData_Accessor);
}

uci::type::RelationshipThreatType& ObservationReportMDT::enableThreatData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::relationshipThreatType : type};
  if ((!threatData_Accessor) || (threatData_Accessor->getAccessorType() != requestedType)) {
    threatData_Accessor = RelationshipThreatType::create(requestedType);
    if (!threatData_Accessor) {
      throw uci::base::UCIException("Error in enableThreatData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *threatData_Accessor;
}

uci::type::ObservationReportMDT& ObservationReportMDT::clearThreatData() noexcept {
  threatData_Accessor.reset();
  return *this;
}

uci::type::AmplifyingInformationType& ObservationReportMDT::getAmplifyingInfo_() const {
  if (amplifyingInfo_Accessor) {
    return *amplifyingInfo_Accessor;
  }
  throw uci::base::UCIException("Error in getAmplifyingInfo(): An attempt was made to get an optional field that was not enabled, call hasAmplifyingInfo() to determine if it is safe to call getAmplifyingInfo()");
}

const uci::type::AmplifyingInformationType& ObservationReportMDT::getAmplifyingInfo() const {
  return getAmplifyingInfo_();
}

uci::type::AmplifyingInformationType& ObservationReportMDT::getAmplifyingInfo() {
  return getAmplifyingInfo_();
}

uci::type::ObservationReportMDT& ObservationReportMDT::setAmplifyingInfo(const uci::type::AmplifyingInformationType& accessor) {
  enableAmplifyingInfo();
  if (&accessor != amplifyingInfo_Accessor.get()) {
    amplifyingInfo_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ObservationReportMDT::hasAmplifyingInfo() const noexcept {
  return static_cast<bool>(amplifyingInfo_Accessor);
}

uci::type::AmplifyingInformationType& ObservationReportMDT::enableAmplifyingInfo(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::amplifyingInformationType : type};
  if ((!amplifyingInfo_Accessor) || (amplifyingInfo_Accessor->getAccessorType() != requestedType)) {
    amplifyingInfo_Accessor = AmplifyingInformationType::create(requestedType);
    if (!amplifyingInfo_Accessor) {
      throw uci::base::UCIException("Error in enableAmplifyingInfo(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *amplifyingInfo_Accessor;
}

uci::type::ObservationReportMDT& ObservationReportMDT::clearAmplifyingInfo() noexcept {
  amplifyingInfo_Accessor.reset();
  return *this;
}

uci::type::EmptyType& ObservationReportMDT::getLocallyModified_() const {
  if (locallyModified_Accessor) {
    return *locallyModified_Accessor;
  }
  throw uci::base::UCIException("Error in getLocallyModified(): An attempt was made to get an optional field that was not enabled, call hasLocallyModified() to determine if it is safe to call getLocallyModified()");
}

const uci::type::EmptyType& ObservationReportMDT::getLocallyModified() const {
  return getLocallyModified_();
}

uci::type::EmptyType& ObservationReportMDT::getLocallyModified() {
  return getLocallyModified_();
}

uci::type::ObservationReportMDT& ObservationReportMDT::setLocallyModified(const uci::type::EmptyType& value) {
  return setLocallyModified(value.c_str());
}

uci::type::ObservationReportMDT& ObservationReportMDT::setLocallyModified(const std::string& value) {
  return setLocallyModified(value.c_str());
}

uci::type::ObservationReportMDT& ObservationReportMDT::setLocallyModified(const char* value) {
  enableLocallyModified().setStringValue(value);
  return *this;
}

bool ObservationReportMDT::hasLocallyModified() const noexcept {
  return static_cast<bool>(locallyModified_Accessor);
}

uci::type::EmptyType& ObservationReportMDT::enableLocallyModified(uci::base::accessorType::AccessorType type) {
  if (!locallyModified_Accessor) {
    locallyModified_Accessor = EmptyType::create(type);
  }
  return *locallyModified_Accessor;
}

uci::type::ObservationReportMDT& ObservationReportMDT::clearLocallyModified() noexcept {
  locallyModified_Accessor.reset();
  return *this;
}

std::unique_ptr<ObservationReportMDT> ObservationReportMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::observationReportMDT : type};
  return (requestedType == uci::type::accessorType::observationReportMDT) ? boost::make_unique<ObservationReportMDT>() : nullptr;
}

/**  */
namespace ObservationReportMDT_Names {

constexpr const char* Extern_Type_Name{"ObservationReportMDT"};
constexpr const char* ObservationReportID_Name{"ObservationReportID"};
constexpr const char* Reference_Name{"Reference"};
constexpr const char* Originator_Name{"Originator"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* ActivityAgainst_Name{"ActivityAgainst"};
constexpr const char* ActivityBy_Name{"ActivityBy"};
constexpr const char* ThreatData_Name{"ThreatData"};
constexpr const char* AmplifyingInfo_Name{"AmplifyingInfo"};
constexpr const char* LocallyModified_Name{"LocallyModified"};

} // namespace ObservationReportMDT_Names

void ObservationReportMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ObservationReportMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ObservationReportMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ObservationReportMDT_Names::ObservationReportID_Name) {
      ObservationReportID_Type::deserialize(valueType.second, accessor.getObservationReportID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationReportMDT_Names::Reference_Name) {
      GeoLocatedObjectType::deserialize(valueType.second, accessor.getReference(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationReportMDT_Names::Originator_Name) {
      SystemMessageIdentifierType::deserialize(valueType.second, accessor.enableOriginator(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationReportMDT_Names::Identity_Name) {
      EntityIdentityType::deserialize(valueType.second, accessor.enableIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationReportMDT_Names::ActivityAgainst_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ObservationReportMDT::ActivityAgainst& boundedList = accessor.getActivityAgainst();
        const uci::type::ObservationReportMDT::ActivityAgainst::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ActivityAgainstType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ObservationReportMDT_Names::ActivityBy_Name) {
      ActivityByType::deserialize(valueType.second, accessor.enableActivityBy(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationReportMDT_Names::ThreatData_Name) {
      RelationshipThreatType::deserialize(valueType.second, accessor.enableThreatData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationReportMDT_Names::AmplifyingInfo_Name) {
      AmplifyingInformationType::deserialize(valueType.second, accessor.enableAmplifyingInfo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationReportMDT_Names::LocallyModified_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLocallyModified(*value);
      }
    }
  }
}

std::string ObservationReportMDT::serialize(const uci::type::ObservationReportMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ObservationReportMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ObservationReportMDT_Names::Extern_Type_Name);
  }
  ObservationReportID_Type::serialize(accessor.getObservationReportID(), node, ObservationReportMDT_Names::ObservationReportID_Name);
  GeoLocatedObjectType::serialize(accessor.getReference(), node, ObservationReportMDT_Names::Reference_Name);
  if (accessor.hasOriginator()) {
    SystemMessageIdentifierType::serialize(accessor.getOriginator(), node, ObservationReportMDT_Names::Originator_Name);
  }
  if (accessor.hasIdentity()) {
    EntityIdentityType::serialize(accessor.getIdentity(), node, ObservationReportMDT_Names::Identity_Name);
  }
  {
    const uci::type::ObservationReportMDT::ActivityAgainst& boundedList = accessor.getActivityAgainst();
    for (uci::type::ObservationReportMDT::ActivityAgainst::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ActivityAgainstType::serialize(boundedList.at(i), node, ObservationReportMDT_Names::ActivityAgainst_Name);
    }
  }
  if (accessor.hasActivityBy()) {
    ActivityByType::serialize(accessor.getActivityBy(), node, ObservationReportMDT_Names::ActivityBy_Name);
  }
  if (accessor.hasThreatData()) {
    RelationshipThreatType::serialize(accessor.getThreatData(), node, ObservationReportMDT_Names::ThreatData_Name);
  }
  if (accessor.hasAmplifyingInfo()) {
    AmplifyingInformationType::serialize(accessor.getAmplifyingInfo(), node, ObservationReportMDT_Names::AmplifyingInfo_Name);
  }
  if (accessor.hasLocallyModified()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getLocallyModified(), node, ObservationReportMDT_Names::LocallyModified_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ObservationReportMDT& ObservationReportMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ObservationReportMDT>().release());
}

uci::type::ObservationReportMDT& ObservationReportMDT::create(const uci::type::ObservationReportMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ObservationReportMDT> newAccessor{boost::make_unique<asb_uci::type::ObservationReportMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ObservationReportMDT::destroy(uci::type::ObservationReportMDT& accessor) {
  delete dynamic_cast<asb_uci::type::ObservationReportMDT*>(&accessor);
}

} // namespace type

} // namespace uci

