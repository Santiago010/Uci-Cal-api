/** @file ConfigurationParameterValueRestrictionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ConfigurationParameterValueRestrictionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ConfigurationParameterRangeType.h"
#include "asb_uci/type/VisibleString32Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ConfigurationParameterRangeType.h"
#include "uci/type/ConfigurationParameterValueRestrictionsType.h"
#include "uci/type/VisibleString32Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ConfigurationParameterValueRestrictionsType::ConfigurationParameterValueRestrictionsType() = default;

ConfigurationParameterValueRestrictionsType::~ConfigurationParameterValueRestrictionsType() = default;

void ConfigurationParameterValueRestrictionsType::copy(const uci::type::ConfigurationParameterValueRestrictionsType& accessor) {
  copyImpl(accessor, false);
}

void ConfigurationParameterValueRestrictionsType::copyImpl(const uci::type::ConfigurationParameterValueRestrictionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ConfigurationParameterValueRestrictionsType&>(accessor);
    if (accessorImpl.enumeration_Accessor) {
      setEnumeration(*(accessorImpl.enumeration_Accessor));
    } else {
      enumeration_Accessor.reset();
    }
    if (accessorImpl.range_Accessor) {
      setRange(*(accessorImpl.range_Accessor));
    } else {
      range_Accessor.reset();
    }
  }
}

void ConfigurationParameterValueRestrictionsType::reset() noexcept {
  enumeration_Accessor.reset();
  range_Accessor.reset();
}

uci::type::ConfigurationParameterValueRestrictionsType::ConfigurationParameterValueRestrictionsTypeChoice ConfigurationParameterValueRestrictionsType::getConfigurationParameterValueRestrictionsTypeChoiceOrdinal() const noexcept {
  if (enumeration_Accessor) {
    return CONFIGURATIONPARAMETERVALUERESTRICTIONSTYPE_CHOICE_ENUMERATION;
  }
  if (range_Accessor) {
    return CONFIGURATIONPARAMETERVALUERESTRICTIONSTYPE_CHOICE_RANGE;
  }
  return CONFIGURATIONPARAMETERVALUERESTRICTIONSTYPE_CHOICE_NONE;
}

uci::type::ConfigurationParameterValueRestrictionsType& ConfigurationParameterValueRestrictionsType::setConfigurationParameterValueRestrictionsTypeChoiceOrdinal(uci::type::ConfigurationParameterValueRestrictionsType::ConfigurationParameterValueRestrictionsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case CONFIGURATIONPARAMETERVALUERESTRICTIONSTYPE_CHOICE_ENUMERATION:
      chooseEnumeration();
      break;
    case CONFIGURATIONPARAMETERVALUERESTRICTIONSTYPE_CHOICE_RANGE:
      chooseRange("setConfigurationParameterValueRestrictionsTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setConfigurationParameterValueRestrictionsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ConfigurationParameterValueRestrictionsType::Enumeration& ConfigurationParameterValueRestrictionsType::getEnumeration_() const {
  if (enumeration_Accessor) {
    return *enumeration_Accessor;
  }
  throw uci::base::UCIException("Error in getEnumeration(): Unable to get Enumeration, field not selected");
}

const uci::type::ConfigurationParameterValueRestrictionsType::Enumeration& ConfigurationParameterValueRestrictionsType::getEnumeration() const {
  return getEnumeration_();
}

uci::type::ConfigurationParameterValueRestrictionsType::Enumeration& ConfigurationParameterValueRestrictionsType::getEnumeration() {
  return getEnumeration_();
}

uci::type::ConfigurationParameterValueRestrictionsType& ConfigurationParameterValueRestrictionsType::setEnumeration(const uci::type::ConfigurationParameterValueRestrictionsType::Enumeration& accessor) {
  chooseEnumeration();
  if (&accessor != enumeration_Accessor.get()) {
    enumeration_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ConfigurationParameterValueRestrictionsType::isEnumeration() const noexcept {
  return static_cast<bool>(enumeration_Accessor);
}

uci::type::ConfigurationParameterValueRestrictionsType::Enumeration& ConfigurationParameterValueRestrictionsType::chooseEnumeration() {
  range_Accessor.reset();
  if (!enumeration_Accessor) {
    enumeration_Accessor = boost::make_unique<Enumeration>(1, SIZE_MAX);
  }
  return *enumeration_Accessor;
}

uci::type::ConfigurationParameterRangeType& ConfigurationParameterValueRestrictionsType::getRange_() const {
  if (range_Accessor) {
    return *range_Accessor;
  }
  throw uci::base::UCIException("Error in getRange(): Unable to get Range, field not selected");
}

const uci::type::ConfigurationParameterRangeType& ConfigurationParameterValueRestrictionsType::getRange() const {
  return getRange_();
}

uci::type::ConfigurationParameterRangeType& ConfigurationParameterValueRestrictionsType::getRange() {
  return getRange_();
}

uci::type::ConfigurationParameterValueRestrictionsType& ConfigurationParameterValueRestrictionsType::setRange(const uci::type::ConfigurationParameterRangeType& accessor) {
  chooseRange();
  if (&accessor != range_Accessor.get()) {
    range_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ConfigurationParameterValueRestrictionsType::isRange() const noexcept {
  return static_cast<bool>(range_Accessor);
}

uci::type::ConfigurationParameterRangeType& ConfigurationParameterValueRestrictionsType::chooseRange(const std::string& method, uci::base::accessorType::AccessorType type) {
  enumeration_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::configurationParameterRangeType : type};
  if ((!range_Accessor) || (range_Accessor->getAccessorType() != requestedType)) {
    range_Accessor = ConfigurationParameterRangeType::create(type);
    if (!range_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *range_Accessor;
}

uci::type::ConfigurationParameterRangeType& ConfigurationParameterValueRestrictionsType::chooseRange(uci::base::accessorType::AccessorType type) {
  return chooseRange("chooseRange", type);
}

std::unique_ptr<ConfigurationParameterValueRestrictionsType> ConfigurationParameterValueRestrictionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::configurationParameterValueRestrictionsType : type};
  return (requestedType == uci::type::accessorType::configurationParameterValueRestrictionsType) ? boost::make_unique<ConfigurationParameterValueRestrictionsType>() : nullptr;
}

/**  */
namespace ConfigurationParameterValueRestrictionsType_Names {

constexpr const char* Extern_Type_Name{"ConfigurationParameterValueRestrictionsType"};
constexpr const char* Enumeration_Name{"Enumeration"};
constexpr const char* Range_Name{"Range"};

} // namespace ConfigurationParameterValueRestrictionsType_Names

void ConfigurationParameterValueRestrictionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ConfigurationParameterValueRestrictionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ConfigurationParameterValueRestrictionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ConfigurationParameterValueRestrictionsType_Names::Enumeration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ConfigurationParameterValueRestrictionsType::Enumeration& boundedList = accessor.chooseEnumeration();
        const uci::type::ConfigurationParameterValueRestrictionsType::Enumeration::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + ConfigurationParameterValueRestrictionsType_Names::Range_Name) {
      ConfigurationParameterRangeType::deserialize(valueType.second, accessor.chooseRange(), nodeName, nsPrefix);
    }
  }
}

std::string ConfigurationParameterValueRestrictionsType::serialize(const uci::type::ConfigurationParameterValueRestrictionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ConfigurationParameterValueRestrictionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ConfigurationParameterValueRestrictionsType_Names::Extern_Type_Name);
  }
  if (accessor.isEnumeration()) {
    {
      const uci::type::ConfigurationParameterValueRestrictionsType::Enumeration& boundedList = accessor.getEnumeration();
      for (uci::type::ConfigurationParameterValueRestrictionsType::Enumeration::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, ConfigurationParameterValueRestrictionsType_Names::Enumeration_Name);
      }
    }
  } else if (accessor.isRange()) {
    ConfigurationParameterRangeType::serialize(accessor.getRange(), node, ConfigurationParameterValueRestrictionsType_Names::Range_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ConfigurationParameterValueRestrictionsType& ConfigurationParameterValueRestrictionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ConfigurationParameterValueRestrictionsType>().release());
}

uci::type::ConfigurationParameterValueRestrictionsType& ConfigurationParameterValueRestrictionsType::create(const uci::type::ConfigurationParameterValueRestrictionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ConfigurationParameterValueRestrictionsType> newAccessor{boost::make_unique<asb_uci::type::ConfigurationParameterValueRestrictionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ConfigurationParameterValueRestrictionsType::destroy(uci::type::ConfigurationParameterValueRestrictionsType& accessor) {
  delete dynamic_cast<asb_uci::type::ConfigurationParameterValueRestrictionsType*>(&accessor);
}

} // namespace type

} // namespace uci

