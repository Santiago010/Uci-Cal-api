/** @file EntitySourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EntitySourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntitySourceEnum.h"
#include "asb_uci/type/EntitySourceIdentifierType.h"
#include "asb_uci/type/EntitySourceSpecificDataType.h"
#include "asb_uci/type/Link16SensorTypeEnum.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EntitySourceEnum.h"
#include "uci/type/EntitySourceIdentifierType.h"
#include "uci/type/EntitySourceSpecificDataType.h"
#include "uci/type/EntitySourceType.h"
#include "uci/type/Link16SensorTypeEnum.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntitySourceType::EntitySourceType()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()},
    sourceType_Accessor{boost::make_unique<EntitySourceEnum>()} {
}

EntitySourceType::~EntitySourceType() = default;

void EntitySourceType::copy(const uci::type::EntitySourceType& accessor) {
  copyImpl(accessor, false);
}

void EntitySourceType::copyImpl(const uci::type::EntitySourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntitySourceType&>(accessor);
    setSystemID(*(accessorImpl.systemID_Accessor));
    if (accessorImpl.serviceID_Accessor) {
      setServiceID(*(accessorImpl.serviceID_Accessor));
    } else {
      serviceID_Accessor.reset();
    }
    if (accessorImpl.sourceSpecificData_Accessor) {
      setSourceSpecificData(*(accessorImpl.sourceSpecificData_Accessor));
    } else {
      sourceSpecificData_Accessor.reset();
    }
    setSourceType(*(accessorImpl.sourceType_Accessor));
    if (accessorImpl.sourceTypeIdentifier_Accessor) {
      setSourceTypeIdentifier(*(accessorImpl.sourceTypeIdentifier_Accessor));
    } else {
      sourceTypeIdentifier_Accessor.reset();
    }
    if (accessorImpl.sensorType_Accessor) {
      setSensorType(*(accessorImpl.sensorType_Accessor));
    } else {
      sensorType_Accessor.reset();
    }
  }
}

void EntitySourceType::reset() noexcept {
  systemID_Accessor->reset();
  serviceID_Accessor.reset();
  sourceSpecificData_Accessor.reset();
  sourceType_Accessor->reset();
  sourceTypeIdentifier_Accessor.reset();
  sensorType_Accessor.reset();
}

const uci::type::SystemID_Type& EntitySourceType::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& EntitySourceType::getSystemID() {
  return *systemID_Accessor;
}

uci::type::EntitySourceType& EntitySourceType::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ServiceID_Type& EntitySourceType::getServiceID_() const {
  if (serviceID_Accessor) {
    return *serviceID_Accessor;
  }
  throw uci::base::UCIException("Error in getServiceID(): An attempt was made to get an optional field that was not enabled, call hasServiceID() to determine if it is safe to call getServiceID()");
}

const uci::type::ServiceID_Type& EntitySourceType::getServiceID() const {
  return getServiceID_();
}

uci::type::ServiceID_Type& EntitySourceType::getServiceID() {
  return getServiceID_();
}

uci::type::EntitySourceType& EntitySourceType::setServiceID(const uci::type::ServiceID_Type& accessor) {
  enableServiceID();
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntitySourceType::hasServiceID() const noexcept {
  return static_cast<bool>(serviceID_Accessor);
}

uci::type::ServiceID_Type& EntitySourceType::enableServiceID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::serviceID_Type : type};
  if ((!serviceID_Accessor) || (serviceID_Accessor->getAccessorType() != requestedType)) {
    serviceID_Accessor = ServiceID_Type::create(requestedType);
    if (!serviceID_Accessor) {
      throw uci::base::UCIException("Error in enableServiceID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *serviceID_Accessor;
}

uci::type::EntitySourceType& EntitySourceType::clearServiceID() noexcept {
  serviceID_Accessor.reset();
  return *this;
}

uci::type::EntitySourceSpecificDataType& EntitySourceType::getSourceSpecificData_() const {
  if (sourceSpecificData_Accessor) {
    return *sourceSpecificData_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceSpecificData(): An attempt was made to get an optional field that was not enabled, call hasSourceSpecificData() to determine if it is safe to call getSourceSpecificData()");
}

const uci::type::EntitySourceSpecificDataType& EntitySourceType::getSourceSpecificData() const {
  return getSourceSpecificData_();
}

uci::type::EntitySourceSpecificDataType& EntitySourceType::getSourceSpecificData() {
  return getSourceSpecificData_();
}

uci::type::EntitySourceType& EntitySourceType::setSourceSpecificData(const uci::type::EntitySourceSpecificDataType& accessor) {
  enableSourceSpecificData();
  if (&accessor != sourceSpecificData_Accessor.get()) {
    sourceSpecificData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntitySourceType::hasSourceSpecificData() const noexcept {
  return static_cast<bool>(sourceSpecificData_Accessor);
}

uci::type::EntitySourceSpecificDataType& EntitySourceType::enableSourceSpecificData(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entitySourceSpecificDataType : type};
  if ((!sourceSpecificData_Accessor) || (sourceSpecificData_Accessor->getAccessorType() != requestedType)) {
    sourceSpecificData_Accessor = EntitySourceSpecificDataType::create(requestedType);
    if (!sourceSpecificData_Accessor) {
      throw uci::base::UCIException("Error in enableSourceSpecificData(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceSpecificData_Accessor;
}

uci::type::EntitySourceType& EntitySourceType::clearSourceSpecificData() noexcept {
  sourceSpecificData_Accessor.reset();
  return *this;
}

const uci::type::EntitySourceEnum& EntitySourceType::getSourceType() const {
  return *sourceType_Accessor;
}

uci::type::EntitySourceEnum& EntitySourceType::getSourceType() {
  return *sourceType_Accessor;
}

uci::type::EntitySourceType& EntitySourceType::setSourceType(const uci::type::EntitySourceEnum& accessor) {
  if (&accessor != sourceType_Accessor.get()) {
    sourceType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntitySourceType& EntitySourceType::setSourceType(uci::type::EntitySourceEnum::EnumerationItem value) {
  sourceType_Accessor->setValue(value);
  return *this;
}


uci::type::EntitySourceIdentifierType& EntitySourceType::getSourceTypeIdentifier_() const {
  if (sourceTypeIdentifier_Accessor) {
    return *sourceTypeIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceTypeIdentifier(): An attempt was made to get an optional field that was not enabled, call hasSourceTypeIdentifier() to determine if it is safe to call getSourceTypeIdentifier()");
}

const uci::type::EntitySourceIdentifierType& EntitySourceType::getSourceTypeIdentifier() const {
  return getSourceTypeIdentifier_();
}

uci::type::EntitySourceIdentifierType& EntitySourceType::getSourceTypeIdentifier() {
  return getSourceTypeIdentifier_();
}

uci::type::EntitySourceType& EntitySourceType::setSourceTypeIdentifier(const uci::type::EntitySourceIdentifierType& accessor) {
  enableSourceTypeIdentifier();
  if (&accessor != sourceTypeIdentifier_Accessor.get()) {
    sourceTypeIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntitySourceType::hasSourceTypeIdentifier() const noexcept {
  return static_cast<bool>(sourceTypeIdentifier_Accessor);
}

uci::type::EntitySourceIdentifierType& EntitySourceType::enableSourceTypeIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entitySourceIdentifierType : type};
  if ((!sourceTypeIdentifier_Accessor) || (sourceTypeIdentifier_Accessor->getAccessorType() != requestedType)) {
    sourceTypeIdentifier_Accessor = EntitySourceIdentifierType::create(requestedType);
    if (!sourceTypeIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enableSourceTypeIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceTypeIdentifier_Accessor;
}

uci::type::EntitySourceType& EntitySourceType::clearSourceTypeIdentifier() noexcept {
  sourceTypeIdentifier_Accessor.reset();
  return *this;
}

uci::type::Link16SensorTypeEnum& EntitySourceType::getSensorType_() const {
  if (sensorType_Accessor) {
    return *sensorType_Accessor;
  }
  throw uci::base::UCIException("Error in getSensorType(): An attempt was made to get an optional field that was not enabled, call hasSensorType() to determine if it is safe to call getSensorType()");
}

const uci::type::Link16SensorTypeEnum& EntitySourceType::getSensorType() const {
  return getSensorType_();
}

uci::type::Link16SensorTypeEnum& EntitySourceType::getSensorType() {
  return getSensorType_();
}

uci::type::EntitySourceType& EntitySourceType::setSensorType(const uci::type::Link16SensorTypeEnum& accessor) {
  enableSensorType();
  if (&accessor != sensorType_Accessor.get()) {
    sensorType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntitySourceType& EntitySourceType::setSensorType(const uci::type::Link16SensorTypeEnum::EnumerationItem value) {
  enableSensorType().setValue(value);
  return *this;
}

bool EntitySourceType::hasSensorType() const noexcept {
  return static_cast<bool>(sensorType_Accessor);
}

uci::type::Link16SensorTypeEnum& EntitySourceType::enableSensorType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::link16SensorTypeEnum : type};
  if ((!sensorType_Accessor) || (sensorType_Accessor->getAccessorType() != requestedType)) {
    sensorType_Accessor = Link16SensorTypeEnum::create(requestedType);
    if (!sensorType_Accessor) {
      throw uci::base::UCIException("Error in enableSensorType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sensorType_Accessor;
}

uci::type::EntitySourceType& EntitySourceType::clearSensorType() noexcept {
  sensorType_Accessor.reset();
  return *this;
}

std::unique_ptr<EntitySourceType> EntitySourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entitySourceType : type};
  return (requestedType == uci::type::accessorType::entitySourceType) ? boost::make_unique<EntitySourceType>() : nullptr;
}

/**  */
namespace EntitySourceType_Names {

constexpr const char* Extern_Type_Name{"EntitySourceType"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* SourceSpecificData_Name{"SourceSpecificData"};
constexpr const char* SourceType_Name{"SourceType"};
constexpr const char* SourceTypeIdentifier_Name{"SourceTypeIdentifier"};
constexpr const char* SensorType_Name{"SensorType"};

} // namespace EntitySourceType_Names

void EntitySourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntitySourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntitySourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntitySourceType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntitySourceType_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.enableServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntitySourceType_Names::SourceSpecificData_Name) {
      EntitySourceSpecificDataType::deserialize(valueType.second, accessor.enableSourceSpecificData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntitySourceType_Names::SourceType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSourceType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntitySourceType_Names::SourceTypeIdentifier_Name) {
      EntitySourceIdentifierType::deserialize(valueType.second, accessor.enableSourceTypeIdentifier(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntitySourceType_Names::SensorType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSensorType().setValueFromName(*value);
      }
    }
  }
}

std::string EntitySourceType::serialize(const uci::type::EntitySourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntitySourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntitySourceType_Names::Extern_Type_Name);
  }
  SystemID_Type::serialize(accessor.getSystemID(), node, EntitySourceType_Names::SystemID_Name);
  if (accessor.hasServiceID()) {
    ServiceID_Type::serialize(accessor.getServiceID(), node, EntitySourceType_Names::ServiceID_Name);
  }
  if (accessor.hasSourceSpecificData()) {
    EntitySourceSpecificDataType::serialize(accessor.getSourceSpecificData(), node, EntitySourceType_Names::SourceSpecificData_Name);
  }
  EntitySourceEnum::serialize(accessor.getSourceType(), node, EntitySourceType_Names::SourceType_Name, false);
  if (accessor.hasSourceTypeIdentifier()) {
    EntitySourceIdentifierType::serialize(accessor.getSourceTypeIdentifier(), node, EntitySourceType_Names::SourceTypeIdentifier_Name);
  }
  if (accessor.hasSensorType()) {
    Link16SensorTypeEnum::serialize(accessor.getSensorType(), node, EntitySourceType_Names::SensorType_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntitySourceType& EntitySourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntitySourceType>().release());
}

uci::type::EntitySourceType& EntitySourceType::create(const uci::type::EntitySourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntitySourceType> newAccessor{boost::make_unique<asb_uci::type::EntitySourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntitySourceType::destroy(uci::type::EntitySourceType& accessor) {
  delete dynamic_cast<asb_uci::type::EntitySourceType*>(&accessor);
}

} // namespace type

} // namespace uci

