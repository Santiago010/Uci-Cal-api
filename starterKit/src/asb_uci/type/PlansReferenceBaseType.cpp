/** @file PlansReferenceBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlansReferenceBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActionPlanID_Type.h"
#include "asb_uci/type/ActivityPlanID_Type.h"
#include "asb_uci/type/EffectPlanID_Type.h"
#include "asb_uci/type/OrbitActivityPlanID_Type.h"
#include "asb_uci/type/OrbitPlanID_Type.h"
#include "asb_uci/type/ResponsePlanID_Type.h"
#include "asb_uci/type/RouteActivityPlanID_Type.h"
#include "asb_uci/type/RoutePlanID_Type.h"
#include "asb_uci/type/TaskPlanID_Type.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActionPlanID_Type.h"
#include "uci/type/ActivityPlanID_Type.h"
#include "uci/type/EffectPlanID_Type.h"
#include "uci/type/OrbitActivityPlanID_Type.h"
#include "uci/type/OrbitPlanID_Type.h"
#include "uci/type/PlansReferenceBaseType.h"
#include "uci/type/ResponsePlanID_Type.h"
#include "uci/type/RouteActivityPlanID_Type.h"
#include "uci/type/RoutePlanID_Type.h"
#include "uci/type/TaskPlanID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlansReferenceBaseType::PlansReferenceBaseType()
  : taskPlanID_Accessor{boost::make_unique<TaskPlanID>(0, SIZE_MAX)},
    orbitPlanID_Accessor{boost::make_unique<OrbitPlanID>(0, SIZE_MAX)},
    orbitActivityPlanID_Accessor{boost::make_unique<OrbitActivityPlanID>(0, SIZE_MAX)},
    routePlanID_Accessor{boost::make_unique<RoutePlanID>(0, SIZE_MAX)},
    routeActivityPlanID_Accessor{boost::make_unique<RouteActivityPlanID>(0, SIZE_MAX)},
    activityPlanID_Accessor{boost::make_unique<ActivityPlanID>(0, SIZE_MAX)},
    effectPlanID_Accessor{boost::make_unique<EffectPlanID>(0, SIZE_MAX)},
    actionPlanID_Accessor{boost::make_unique<ActionPlanID>(0, SIZE_MAX)},
    responsePlanID_Accessor{boost::make_unique<ResponsePlanID>(0, SIZE_MAX)} {
}

PlansReferenceBaseType::~PlansReferenceBaseType() = default;

void PlansReferenceBaseType::copy(const uci::type::PlansReferenceBaseType& accessor) {
  copyImpl(accessor, false);
}

void PlansReferenceBaseType::copyImpl(const uci::type::PlansReferenceBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::plansReferenceBaseType)) {
      const auto& accessorImpl = dynamic_cast<const PlansReferenceBaseType&>(accessor);
      setTaskPlanID(*(accessorImpl.taskPlanID_Accessor));
      setOrbitPlanID(*(accessorImpl.orbitPlanID_Accessor));
      setOrbitActivityPlanID(*(accessorImpl.orbitActivityPlanID_Accessor));
      setRoutePlanID(*(accessorImpl.routePlanID_Accessor));
      setRouteActivityPlanID(*(accessorImpl.routeActivityPlanID_Accessor));
      setActivityPlanID(*(accessorImpl.activityPlanID_Accessor));
      setEffectPlanID(*(accessorImpl.effectPlanID_Accessor));
      setActionPlanID(*(accessorImpl.actionPlanID_Accessor));
      setResponsePlanID(*(accessorImpl.responsePlanID_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void PlansReferenceBaseType::reset() noexcept {
  taskPlanID_Accessor->reset();
  orbitPlanID_Accessor->reset();
  orbitActivityPlanID_Accessor->reset();
  routePlanID_Accessor->reset();
  routeActivityPlanID_Accessor->reset();
  activityPlanID_Accessor->reset();
  effectPlanID_Accessor->reset();
  actionPlanID_Accessor->reset();
  responsePlanID_Accessor->reset();
}

const uci::type::PlansReferenceBaseType::TaskPlanID& PlansReferenceBaseType::getTaskPlanID() const {
  return *taskPlanID_Accessor;
}

uci::type::PlansReferenceBaseType::TaskPlanID& PlansReferenceBaseType::getTaskPlanID() {
  return *taskPlanID_Accessor;
}

uci::type::PlansReferenceBaseType& PlansReferenceBaseType::setTaskPlanID(const uci::type::PlansReferenceBaseType::TaskPlanID& accessor) {
  if (&accessor != taskPlanID_Accessor.get()) {
    taskPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlansReferenceBaseType::OrbitPlanID& PlansReferenceBaseType::getOrbitPlanID() const {
  return *orbitPlanID_Accessor;
}

uci::type::PlansReferenceBaseType::OrbitPlanID& PlansReferenceBaseType::getOrbitPlanID() {
  return *orbitPlanID_Accessor;
}

uci::type::PlansReferenceBaseType& PlansReferenceBaseType::setOrbitPlanID(const uci::type::PlansReferenceBaseType::OrbitPlanID& accessor) {
  if (&accessor != orbitPlanID_Accessor.get()) {
    orbitPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlansReferenceBaseType::OrbitActivityPlanID& PlansReferenceBaseType::getOrbitActivityPlanID() const {
  return *orbitActivityPlanID_Accessor;
}

uci::type::PlansReferenceBaseType::OrbitActivityPlanID& PlansReferenceBaseType::getOrbitActivityPlanID() {
  return *orbitActivityPlanID_Accessor;
}

uci::type::PlansReferenceBaseType& PlansReferenceBaseType::setOrbitActivityPlanID(const uci::type::PlansReferenceBaseType::OrbitActivityPlanID& accessor) {
  if (&accessor != orbitActivityPlanID_Accessor.get()) {
    orbitActivityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlansReferenceBaseType::RoutePlanID& PlansReferenceBaseType::getRoutePlanID() const {
  return *routePlanID_Accessor;
}

uci::type::PlansReferenceBaseType::RoutePlanID& PlansReferenceBaseType::getRoutePlanID() {
  return *routePlanID_Accessor;
}

uci::type::PlansReferenceBaseType& PlansReferenceBaseType::setRoutePlanID(const uci::type::PlansReferenceBaseType::RoutePlanID& accessor) {
  if (&accessor != routePlanID_Accessor.get()) {
    routePlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlansReferenceBaseType::RouteActivityPlanID& PlansReferenceBaseType::getRouteActivityPlanID() const {
  return *routeActivityPlanID_Accessor;
}

uci::type::PlansReferenceBaseType::RouteActivityPlanID& PlansReferenceBaseType::getRouteActivityPlanID() {
  return *routeActivityPlanID_Accessor;
}

uci::type::PlansReferenceBaseType& PlansReferenceBaseType::setRouteActivityPlanID(const uci::type::PlansReferenceBaseType::RouteActivityPlanID& accessor) {
  if (&accessor != routeActivityPlanID_Accessor.get()) {
    routeActivityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlansReferenceBaseType::ActivityPlanID& PlansReferenceBaseType::getActivityPlanID() const {
  return *activityPlanID_Accessor;
}

uci::type::PlansReferenceBaseType::ActivityPlanID& PlansReferenceBaseType::getActivityPlanID() {
  return *activityPlanID_Accessor;
}

uci::type::PlansReferenceBaseType& PlansReferenceBaseType::setActivityPlanID(const uci::type::PlansReferenceBaseType::ActivityPlanID& accessor) {
  if (&accessor != activityPlanID_Accessor.get()) {
    activityPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlansReferenceBaseType::EffectPlanID& PlansReferenceBaseType::getEffectPlanID() const {
  return *effectPlanID_Accessor;
}

uci::type::PlansReferenceBaseType::EffectPlanID& PlansReferenceBaseType::getEffectPlanID() {
  return *effectPlanID_Accessor;
}

uci::type::PlansReferenceBaseType& PlansReferenceBaseType::setEffectPlanID(const uci::type::PlansReferenceBaseType::EffectPlanID& accessor) {
  if (&accessor != effectPlanID_Accessor.get()) {
    effectPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlansReferenceBaseType::ActionPlanID& PlansReferenceBaseType::getActionPlanID() const {
  return *actionPlanID_Accessor;
}

uci::type::PlansReferenceBaseType::ActionPlanID& PlansReferenceBaseType::getActionPlanID() {
  return *actionPlanID_Accessor;
}

uci::type::PlansReferenceBaseType& PlansReferenceBaseType::setActionPlanID(const uci::type::PlansReferenceBaseType::ActionPlanID& accessor) {
  if (&accessor != actionPlanID_Accessor.get()) {
    actionPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PlansReferenceBaseType::ResponsePlanID& PlansReferenceBaseType::getResponsePlanID() const {
  return *responsePlanID_Accessor;
}

uci::type::PlansReferenceBaseType::ResponsePlanID& PlansReferenceBaseType::getResponsePlanID() {
  return *responsePlanID_Accessor;
}

uci::type::PlansReferenceBaseType& PlansReferenceBaseType::setResponsePlanID(const uci::type::PlansReferenceBaseType::ResponsePlanID& accessor) {
  if (&accessor != responsePlanID_Accessor.get()) {
    responsePlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PlansReferenceBaseType> PlansReferenceBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::plansReferenceBaseType : type};
  return std::unique_ptr<PlansReferenceBaseType>(dynamic_cast<PlansReferenceBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace PlansReferenceBaseType_Names {

constexpr const char* Extern_Type_Name{"PlansReferenceBaseType"};
constexpr const char* TaskPlanID_Name{"TaskPlanID"};
constexpr const char* OrbitPlanID_Name{"OrbitPlanID"};
constexpr const char* OrbitActivityPlanID_Name{"OrbitActivityPlanID"};
constexpr const char* RoutePlanID_Name{"RoutePlanID"};
constexpr const char* RouteActivityPlanID_Name{"RouteActivityPlanID"};
constexpr const char* ActivityPlanID_Name{"ActivityPlanID"};
constexpr const char* EffectPlanID_Name{"EffectPlanID"};
constexpr const char* ActionPlanID_Name{"ActionPlanID"};
constexpr const char* ResponsePlanID_Name{"ResponsePlanID"};

} // namespace PlansReferenceBaseType_Names

void PlansReferenceBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlansReferenceBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlansReferenceBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::TaskPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::TaskPlanID& boundedList = accessor.getTaskPlanID();
        const uci::type::PlansReferenceBaseType::TaskPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::TaskPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::OrbitPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::OrbitPlanID& boundedList = accessor.getOrbitPlanID();
        const uci::type::PlansReferenceBaseType::OrbitPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::OrbitActivityPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::OrbitActivityPlanID& boundedList = accessor.getOrbitActivityPlanID();
        const uci::type::PlansReferenceBaseType::OrbitActivityPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitActivityPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::RoutePlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::RoutePlanID& boundedList = accessor.getRoutePlanID();
        const uci::type::PlansReferenceBaseType::RoutePlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RoutePlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::RouteActivityPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::RouteActivityPlanID& boundedList = accessor.getRouteActivityPlanID();
        const uci::type::PlansReferenceBaseType::RouteActivityPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RouteActivityPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::ActivityPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::ActivityPlanID& boundedList = accessor.getActivityPlanID();
        const uci::type::PlansReferenceBaseType::ActivityPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ActivityPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::EffectPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::EffectPlanID& boundedList = accessor.getEffectPlanID();
        const uci::type::PlansReferenceBaseType::EffectPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EffectPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::ActionPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::ActionPlanID& boundedList = accessor.getActionPlanID();
        const uci::type::PlansReferenceBaseType::ActionPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ActionPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::ResponsePlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::ResponsePlanID& boundedList = accessor.getResponsePlanID();
        const uci::type::PlansReferenceBaseType::ResponsePlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ResponsePlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string PlansReferenceBaseType::serialize(const uci::type::PlansReferenceBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlansReferenceBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::plansReferenceBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlansReferenceBaseType_Names::Extern_Type_Name);
    }
    {
      const uci::type::PlansReferenceBaseType::TaskPlanID& boundedList = accessor.getTaskPlanID();
      for (uci::type::PlansReferenceBaseType::TaskPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::TaskPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::TaskPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::OrbitPlanID& boundedList = accessor.getOrbitPlanID();
      for (uci::type::PlansReferenceBaseType::OrbitPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::OrbitPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::OrbitPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::OrbitActivityPlanID& boundedList = accessor.getOrbitActivityPlanID();
      for (uci::type::PlansReferenceBaseType::OrbitActivityPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::OrbitActivityPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::OrbitActivityPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::RoutePlanID& boundedList = accessor.getRoutePlanID();
      for (uci::type::PlansReferenceBaseType::RoutePlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::RoutePlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::RoutePlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::RouteActivityPlanID& boundedList = accessor.getRouteActivityPlanID();
      for (uci::type::PlansReferenceBaseType::RouteActivityPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::RouteActivityPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::RouteActivityPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::ActivityPlanID& boundedList = accessor.getActivityPlanID();
      for (uci::type::PlansReferenceBaseType::ActivityPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ActivityPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::ActivityPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::EffectPlanID& boundedList = accessor.getEffectPlanID();
      for (uci::type::PlansReferenceBaseType::EffectPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::EffectPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::EffectPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::ActionPlanID& boundedList = accessor.getActionPlanID();
      for (uci::type::PlansReferenceBaseType::ActionPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ActionPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::ActionPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::ResponsePlanID& boundedList = accessor.getResponsePlanID();
      for (uci::type::PlansReferenceBaseType::ResponsePlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ResponsePlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::ResponsePlanID_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlansReferenceBaseType& PlansReferenceBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlansReferenceBaseType>().release());
}

uci::type::PlansReferenceBaseType& PlansReferenceBaseType::create(const uci::type::PlansReferenceBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlansReferenceBaseType> newAccessor{boost::make_unique<asb_uci::type::PlansReferenceBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlansReferenceBaseType::destroy(uci::type::PlansReferenceBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::PlansReferenceBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

