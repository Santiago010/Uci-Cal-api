/** @file PO_ComponentLensAssemblyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_ComponentLensAssemblyType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ComponentControllabilityB_Type.h"
#include "asb_uci/type/PO_ComponentLensAssemblyFieldOfViewType.h"
#include "asb_uci/type/PO_ComponentLensAssemblyFocusType.h"
#include "asb_uci/type/PO_ComponentSettingsFocusSweepSettingsType.h"
#include "asb_uci/type/PO_FPA_ID_Type.h"
#include "asb_uci/type/PO_LensID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ComponentControllabilityB_Type.h"
#include "uci/type/PO_ComponentLensAssemblyFieldOfViewType.h"
#include "uci/type/PO_ComponentLensAssemblyFocusType.h"
#include "uci/type/PO_ComponentLensAssemblyType.h"
#include "uci/type/PO_ComponentSettingsFocusSweepSettingsType.h"
#include "uci/type/PO_FPA_ID_Type.h"
#include "uci/type/PO_LensID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentLensAssemblyType::PO_ComponentLensAssemblyType()
  : lensID_Accessor{boost::make_unique<PO_LensID_Type>()},
    fPA_ID_Accessor{boost::make_unique<FPA_ID>(1, SIZE_MAX)},
    fOV_Accessor{boost::make_unique<PO_ComponentLensAssemblyFieldOfViewType>()} {
}

PO_ComponentLensAssemblyType::~PO_ComponentLensAssemblyType() = default;

void PO_ComponentLensAssemblyType::copy(const uci::type::PO_ComponentLensAssemblyType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentLensAssemblyType::copyImpl(const uci::type::PO_ComponentLensAssemblyType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentLensAssemblyType&>(accessor);
    setLensID(*(accessorImpl.lensID_Accessor));
    setFPA_ID(*(accessorImpl.fPA_ID_Accessor));
    setFOV(*(accessorImpl.fOV_Accessor));
    if (accessorImpl.focus_Accessor) {
      setFocus(*(accessorImpl.focus_Accessor));
    } else {
      focus_Accessor.reset();
    }
    if (accessorImpl.focusSweepSettings_Accessor) {
      setFocusSweepSettings(*(accessorImpl.focusSweepSettings_Accessor));
    } else {
      focusSweepSettings_Accessor.reset();
    }
    if (accessorImpl.controllability_Accessor) {
      setControllability(*(accessorImpl.controllability_Accessor));
    } else {
      controllability_Accessor.reset();
    }
  }
}

void PO_ComponentLensAssemblyType::reset() noexcept {
  lensID_Accessor->reset();
  fPA_ID_Accessor->reset();
  fOV_Accessor->reset();
  focus_Accessor.reset();
  focusSweepSettings_Accessor.reset();
  controllability_Accessor.reset();
}

const uci::type::PO_LensID_Type& PO_ComponentLensAssemblyType::getLensID() const {
  return *lensID_Accessor;
}

uci::type::PO_LensID_Type& PO_ComponentLensAssemblyType::getLensID() {
  return *lensID_Accessor;
}

uci::type::PO_ComponentLensAssemblyType& PO_ComponentLensAssemblyType::setLensID(const uci::type::PO_LensID_Type& accessor) {
  if (&accessor != lensID_Accessor.get()) {
    lensID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentLensAssemblyType::FPA_ID& PO_ComponentLensAssemblyType::getFPA_ID() const {
  return *fPA_ID_Accessor;
}

uci::type::PO_ComponentLensAssemblyType::FPA_ID& PO_ComponentLensAssemblyType::getFPA_ID() {
  return *fPA_ID_Accessor;
}

uci::type::PO_ComponentLensAssemblyType& PO_ComponentLensAssemblyType::setFPA_ID(const uci::type::PO_ComponentLensAssemblyType::FPA_ID& accessor) {
  if (&accessor != fPA_ID_Accessor.get()) {
    fPA_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentLensAssemblyFieldOfViewType& PO_ComponentLensAssemblyType::getFOV() const {
  return *fOV_Accessor;
}

uci::type::PO_ComponentLensAssemblyFieldOfViewType& PO_ComponentLensAssemblyType::getFOV() {
  return *fOV_Accessor;
}

uci::type::PO_ComponentLensAssemblyType& PO_ComponentLensAssemblyType::setFOV(const uci::type::PO_ComponentLensAssemblyFieldOfViewType& accessor) {
  if (&accessor != fOV_Accessor.get()) {
    fOV_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_ComponentLensAssemblyFocusType& PO_ComponentLensAssemblyType::getFocus_() const {
  if (focus_Accessor) {
    return *focus_Accessor;
  }
  throw uci::base::UCIException("Error in getFocus(): An attempt was made to get an optional field that was not enabled, call hasFocus() to determine if it is safe to call getFocus()");
}

const uci::type::PO_ComponentLensAssemblyFocusType& PO_ComponentLensAssemblyType::getFocus() const {
  return getFocus_();
}

uci::type::PO_ComponentLensAssemblyFocusType& PO_ComponentLensAssemblyType::getFocus() {
  return getFocus_();
}

uci::type::PO_ComponentLensAssemblyType& PO_ComponentLensAssemblyType::setFocus(const uci::type::PO_ComponentLensAssemblyFocusType& accessor) {
  enableFocus();
  if (&accessor != focus_Accessor.get()) {
    focus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentLensAssemblyType::hasFocus() const noexcept {
  return static_cast<bool>(focus_Accessor);
}

uci::type::PO_ComponentLensAssemblyFocusType& PO_ComponentLensAssemblyType::enableFocus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentLensAssemblyFocusType : type};
  if ((!focus_Accessor) || (focus_Accessor->getAccessorType() != requestedType)) {
    focus_Accessor = PO_ComponentLensAssemblyFocusType::create(requestedType);
    if (!focus_Accessor) {
      throw uci::base::UCIException("Error in enableFocus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *focus_Accessor;
}

uci::type::PO_ComponentLensAssemblyType& PO_ComponentLensAssemblyType::clearFocus() noexcept {
  focus_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentSettingsFocusSweepSettingsType& PO_ComponentLensAssemblyType::getFocusSweepSettings_() const {
  if (focusSweepSettings_Accessor) {
    return *focusSweepSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getFocusSweepSettings(): An attempt was made to get an optional field that was not enabled, call hasFocusSweepSettings() to determine if it is safe to call getFocusSweepSettings()");
}

const uci::type::PO_ComponentSettingsFocusSweepSettingsType& PO_ComponentLensAssemblyType::getFocusSweepSettings() const {
  return getFocusSweepSettings_();
}

uci::type::PO_ComponentSettingsFocusSweepSettingsType& PO_ComponentLensAssemblyType::getFocusSweepSettings() {
  return getFocusSweepSettings_();
}

uci::type::PO_ComponentLensAssemblyType& PO_ComponentLensAssemblyType::setFocusSweepSettings(const uci::type::PO_ComponentSettingsFocusSweepSettingsType& accessor) {
  enableFocusSweepSettings();
  if (&accessor != focusSweepSettings_Accessor.get()) {
    focusSweepSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentLensAssemblyType::hasFocusSweepSettings() const noexcept {
  return static_cast<bool>(focusSweepSettings_Accessor);
}

uci::type::PO_ComponentSettingsFocusSweepSettingsType& PO_ComponentLensAssemblyType::enableFocusSweepSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocusSweepSettingsType : type};
  if ((!focusSweepSettings_Accessor) || (focusSweepSettings_Accessor->getAccessorType() != requestedType)) {
    focusSweepSettings_Accessor = PO_ComponentSettingsFocusSweepSettingsType::create(requestedType);
    if (!focusSweepSettings_Accessor) {
      throw uci::base::UCIException("Error in enableFocusSweepSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *focusSweepSettings_Accessor;
}

uci::type::PO_ComponentLensAssemblyType& PO_ComponentLensAssemblyType::clearFocusSweepSettings() noexcept {
  focusSweepSettings_Accessor.reset();
  return *this;
}

uci::type::ComponentControllabilityB_Type& PO_ComponentLensAssemblyType::getControllability_() const {
  if (controllability_Accessor) {
    return *controllability_Accessor;
  }
  throw uci::base::UCIException("Error in getControllability(): An attempt was made to get an optional field that was not enabled, call hasControllability() to determine if it is safe to call getControllability()");
}

const uci::type::ComponentControllabilityB_Type& PO_ComponentLensAssemblyType::getControllability() const {
  return getControllability_();
}

uci::type::ComponentControllabilityB_Type& PO_ComponentLensAssemblyType::getControllability() {
  return getControllability_();
}

uci::type::PO_ComponentLensAssemblyType& PO_ComponentLensAssemblyType::setControllability(const uci::type::ComponentControllabilityB_Type& accessor) {
  enableControllability();
  if (&accessor != controllability_Accessor.get()) {
    controllability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentLensAssemblyType::hasControllability() const noexcept {
  return static_cast<bool>(controllability_Accessor);
}

uci::type::ComponentControllabilityB_Type& PO_ComponentLensAssemblyType::enableControllability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControllabilityB_Type : type};
  if ((!controllability_Accessor) || (controllability_Accessor->getAccessorType() != requestedType)) {
    controllability_Accessor = ComponentControllabilityB_Type::create(requestedType);
    if (!controllability_Accessor) {
      throw uci::base::UCIException("Error in enableControllability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *controllability_Accessor;
}

uci::type::PO_ComponentLensAssemblyType& PO_ComponentLensAssemblyType::clearControllability() noexcept {
  controllability_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ComponentLensAssemblyType> PO_ComponentLensAssemblyType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentLensAssemblyType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentLensAssemblyType) ? boost::make_unique<PO_ComponentLensAssemblyType>() : nullptr;
}

/**  */
namespace PO_ComponentLensAssemblyType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentLensAssemblyType"};
constexpr const char* LensID_Name{"LensID"};
constexpr const char* FPA_ID_Name{"FPA_ID"};
constexpr const char* FOV_Name{"FOV"};
constexpr const char* Focus_Name{"Focus"};
constexpr const char* FocusSweepSettings_Name{"FocusSweepSettings"};
constexpr const char* Controllability_Name{"Controllability"};

} // namespace PO_ComponentLensAssemblyType_Names

void PO_ComponentLensAssemblyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentLensAssemblyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentLensAssemblyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentLensAssemblyType_Names::LensID_Name) {
      PO_LensID_Type::deserialize(valueType.second, accessor.getLensID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentLensAssemblyType_Names::FPA_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentLensAssemblyType::FPA_ID& boundedList = accessor.getFPA_ID();
        const uci::type::PO_ComponentLensAssemblyType::FPA_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_FPA_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentLensAssemblyType_Names::FOV_Name) {
      PO_ComponentLensAssemblyFieldOfViewType::deserialize(valueType.second, accessor.getFOV(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentLensAssemblyType_Names::Focus_Name) {
      PO_ComponentLensAssemblyFocusType::deserialize(valueType.second, accessor.enableFocus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentLensAssemblyType_Names::FocusSweepSettings_Name) {
      PO_ComponentSettingsFocusSweepSettingsType::deserialize(valueType.second, accessor.enableFocusSweepSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentLensAssemblyType_Names::Controllability_Name) {
      ComponentControllabilityB_Type::deserialize(valueType.second, accessor.enableControllability(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentLensAssemblyType::serialize(const uci::type::PO_ComponentLensAssemblyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentLensAssemblyType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentLensAssemblyType_Names::Extern_Type_Name);
  }
  PO_LensID_Type::serialize(accessor.getLensID(), node, PO_ComponentLensAssemblyType_Names::LensID_Name);
  {
    const uci::type::PO_ComponentLensAssemblyType::FPA_ID& boundedList = accessor.getFPA_ID();
    for (uci::type::PO_ComponentLensAssemblyType::FPA_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_FPA_ID_Type::serialize(boundedList.at(i), node, PO_ComponentLensAssemblyType_Names::FPA_ID_Name);
    }
  }
  PO_ComponentLensAssemblyFieldOfViewType::serialize(accessor.getFOV(), node, PO_ComponentLensAssemblyType_Names::FOV_Name);
  if (accessor.hasFocus()) {
    PO_ComponentLensAssemblyFocusType::serialize(accessor.getFocus(), node, PO_ComponentLensAssemblyType_Names::Focus_Name);
  }
  if (accessor.hasFocusSweepSettings()) {
    PO_ComponentSettingsFocusSweepSettingsType::serialize(accessor.getFocusSweepSettings(), node, PO_ComponentLensAssemblyType_Names::FocusSweepSettings_Name);
  }
  if (accessor.hasControllability()) {
    ComponentControllabilityB_Type::serialize(accessor.getControllability(), node, PO_ComponentLensAssemblyType_Names::Controllability_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentLensAssemblyType& PO_ComponentLensAssemblyType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentLensAssemblyType>().release());
}

uci::type::PO_ComponentLensAssemblyType& PO_ComponentLensAssemblyType::create(const uci::type::PO_ComponentLensAssemblyType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentLensAssemblyType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentLensAssemblyType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentLensAssemblyType::destroy(uci::type::PO_ComponentLensAssemblyType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentLensAssemblyType*>(&accessor);
}

} // namespace type

} // namespace uci

