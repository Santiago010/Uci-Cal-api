/** @file RoutePlanExecutionStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RoutePlanExecutionStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/RoutePlanExecutionStateType.h"
#include "asb_uci/type/SegmentCompletedType.h"
#include "asb_uci/type/SegmentEstimateType.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/type/SystemSourceEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/RoutePlanExecutionStateType.h"
#include "uci/type/RoutePlanExecutionStatusMDT.h"
#include "uci/type/SegmentCompletedType.h"
#include "uci/type/SegmentEstimateType.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/SystemSourceEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RoutePlanExecutionStatusMDT::RoutePlanExecutionStatusMDT()
  : systemID_Accessor{boost::make_unique<SystemID_Type>()},
    source_Accessor{boost::make_unique<SystemSourceEnum>()},
    planExecutionStatus_Accessor{boost::make_unique<PlanExecutionStatus>(0, SIZE_MAX)},
    currentSegment_Accessor{boost::make_unique<SegmentEstimateType>()} {
}

RoutePlanExecutionStatusMDT::~RoutePlanExecutionStatusMDT() = default;

void RoutePlanExecutionStatusMDT::copy(const uci::type::RoutePlanExecutionStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void RoutePlanExecutionStatusMDT::copyImpl(const uci::type::RoutePlanExecutionStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RoutePlanExecutionStatusMDT&>(accessor);
    setSystemID(*(accessorImpl.systemID_Accessor));
    setSource(*(accessorImpl.source_Accessor));
    setPlanExecutionStatus(*(accessorImpl.planExecutionStatus_Accessor));
    if (accessorImpl.previousSegment_Accessor) {
      setPreviousSegment(*(accessorImpl.previousSegment_Accessor));
    } else {
      previousSegment_Accessor.reset();
    }
    setCurrentSegment(*(accessorImpl.currentSegment_Accessor));
    if (accessorImpl.nextSegment_Accessor) {
      setNextSegment(*(accessorImpl.nextSegment_Accessor));
    } else {
      nextSegment_Accessor.reset();
    }
  }
}

void RoutePlanExecutionStatusMDT::reset() noexcept {
  systemID_Accessor->reset();
  source_Accessor->reset();
  planExecutionStatus_Accessor->reset();
  previousSegment_Accessor.reset();
  if (currentSegment_Accessor->getAccessorType() != uci::type::accessorType::segmentEstimateType) {
    currentSegment_Accessor = boost::make_unique<SegmentEstimateType>();
  } else {
    currentSegment_Accessor->reset();
  }
  nextSegment_Accessor.reset();
}

const uci::type::SystemID_Type& RoutePlanExecutionStatusMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& RoutePlanExecutionStatusMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::RoutePlanExecutionStatusMDT& RoutePlanExecutionStatusMDT::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SystemSourceEnum& RoutePlanExecutionStatusMDT::getSource() const {
  return *source_Accessor;
}

uci::type::SystemSourceEnum& RoutePlanExecutionStatusMDT::getSource() {
  return *source_Accessor;
}

uci::type::RoutePlanExecutionStatusMDT& RoutePlanExecutionStatusMDT::setSource(const uci::type::SystemSourceEnum& accessor) {
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RoutePlanExecutionStatusMDT& RoutePlanExecutionStatusMDT::setSource(uci::type::SystemSourceEnum::EnumerationItem value) {
  source_Accessor->setValue(value);
  return *this;
}


const uci::type::RoutePlanExecutionStatusMDT::PlanExecutionStatus& RoutePlanExecutionStatusMDT::getPlanExecutionStatus() const {
  return *planExecutionStatus_Accessor;
}

uci::type::RoutePlanExecutionStatusMDT::PlanExecutionStatus& RoutePlanExecutionStatusMDT::getPlanExecutionStatus() {
  return *planExecutionStatus_Accessor;
}

uci::type::RoutePlanExecutionStatusMDT& RoutePlanExecutionStatusMDT::setPlanExecutionStatus(const uci::type::RoutePlanExecutionStatusMDT::PlanExecutionStatus& accessor) {
  if (&accessor != planExecutionStatus_Accessor.get()) {
    planExecutionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SegmentCompletedType& RoutePlanExecutionStatusMDT::getPreviousSegment_() const {
  if (previousSegment_Accessor) {
    return *previousSegment_Accessor;
  }
  throw uci::base::UCIException("Error in getPreviousSegment(): An attempt was made to get an optional field that was not enabled, call hasPreviousSegment() to determine if it is safe to call getPreviousSegment()");
}

const uci::type::SegmentCompletedType& RoutePlanExecutionStatusMDT::getPreviousSegment() const {
  return getPreviousSegment_();
}

uci::type::SegmentCompletedType& RoutePlanExecutionStatusMDT::getPreviousSegment() {
  return getPreviousSegment_();
}

uci::type::RoutePlanExecutionStatusMDT& RoutePlanExecutionStatusMDT::setPreviousSegment(const uci::type::SegmentCompletedType& accessor) {
  enablePreviousSegment();
  if (&accessor != previousSegment_Accessor.get()) {
    previousSegment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RoutePlanExecutionStatusMDT::hasPreviousSegment() const noexcept {
  return static_cast<bool>(previousSegment_Accessor);
}

uci::type::SegmentCompletedType& RoutePlanExecutionStatusMDT::enablePreviousSegment(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::segmentCompletedType : type};
  if ((!previousSegment_Accessor) || (previousSegment_Accessor->getAccessorType() != requestedType)) {
    previousSegment_Accessor = SegmentCompletedType::create(requestedType);
    if (!previousSegment_Accessor) {
      throw uci::base::UCIException("Error in enablePreviousSegment(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *previousSegment_Accessor;
}

uci::type::RoutePlanExecutionStatusMDT& RoutePlanExecutionStatusMDT::clearPreviousSegment() noexcept {
  previousSegment_Accessor.reset();
  return *this;
}

const uci::type::SegmentEstimateType& RoutePlanExecutionStatusMDT::getCurrentSegment() const {
  return *currentSegment_Accessor;
}

uci::type::SegmentEstimateType& RoutePlanExecutionStatusMDT::getCurrentSegment() {
  return *currentSegment_Accessor;
}

uci::type::RoutePlanExecutionStatusMDT& RoutePlanExecutionStatusMDT::setCurrentSegment(const uci::type::SegmentEstimateType& accessor) {
  enableCurrentSegment(accessor.getAccessorType());
  if (&accessor != currentSegment_Accessor.get()) {
    currentSegment_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::SegmentEstimateType& RoutePlanExecutionStatusMDT::enableCurrentSegment(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::segmentEstimateType : type};
  if ((!currentSegment_Accessor) || (currentSegment_Accessor->getAccessorType() != requestedType)) {
    currentSegment_Accessor = SegmentEstimateType::create(requestedType);
    if (!currentSegment_Accessor) {
      throw uci::base::UCIException("Error in enableCurrentSegment(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *currentSegment_Accessor;
}

uci::type::SegmentEstimateType& RoutePlanExecutionStatusMDT::getNextSegment_() const {
  if (nextSegment_Accessor) {
    return *nextSegment_Accessor;
  }
  throw uci::base::UCIException("Error in getNextSegment(): An attempt was made to get an optional field that was not enabled, call hasNextSegment() to determine if it is safe to call getNextSegment()");
}

const uci::type::SegmentEstimateType& RoutePlanExecutionStatusMDT::getNextSegment() const {
  return getNextSegment_();
}

uci::type::SegmentEstimateType& RoutePlanExecutionStatusMDT::getNextSegment() {
  return getNextSegment_();
}

uci::type::RoutePlanExecutionStatusMDT& RoutePlanExecutionStatusMDT::setNextSegment(const uci::type::SegmentEstimateType& accessor) {
  enableNextSegment(accessor.getAccessorType());
  if (&accessor != nextSegment_Accessor.get()) {
    nextSegment_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RoutePlanExecutionStatusMDT::hasNextSegment() const noexcept {
  return static_cast<bool>(nextSegment_Accessor);
}

uci::type::SegmentEstimateType& RoutePlanExecutionStatusMDT::enableNextSegment(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::segmentEstimateType : type};
  if ((!nextSegment_Accessor) || (nextSegment_Accessor->getAccessorType() != requestedType)) {
    nextSegment_Accessor = SegmentEstimateType::create(requestedType);
    if (!nextSegment_Accessor) {
      throw uci::base::UCIException("Error in enableNextSegment(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nextSegment_Accessor;
}

uci::type::RoutePlanExecutionStatusMDT& RoutePlanExecutionStatusMDT::clearNextSegment() noexcept {
  nextSegment_Accessor.reset();
  return *this;
}

std::unique_ptr<RoutePlanExecutionStatusMDT> RoutePlanExecutionStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePlanExecutionStatusMDT : type};
  return (requestedType == uci::type::accessorType::routePlanExecutionStatusMDT) ? boost::make_unique<RoutePlanExecutionStatusMDT>() : nullptr;
}

/**  */
namespace RoutePlanExecutionStatusMDT_Names {

constexpr const char* Extern_Type_Name{"RoutePlanExecutionStatusMDT"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* Source_Name{"Source"};
constexpr const char* PlanExecutionStatus_Name{"PlanExecutionStatus"};
constexpr const char* PreviousSegment_Name{"PreviousSegment"};
constexpr const char* CurrentSegment_Name{"CurrentSegment"};
constexpr const char* NextSegment_Name{"NextSegment"};

} // namespace RoutePlanExecutionStatusMDT_Names

void RoutePlanExecutionStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::RoutePlanExecutionStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RoutePlanExecutionStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RoutePlanExecutionStatusMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePlanExecutionStatusMDT_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RoutePlanExecutionStatusMDT_Names::PlanExecutionStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RoutePlanExecutionStatusMDT::PlanExecutionStatus& boundedList = accessor.getPlanExecutionStatus();
        const uci::type::RoutePlanExecutionStatusMDT::PlanExecutionStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RoutePlanExecutionStateType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RoutePlanExecutionStatusMDT_Names::PreviousSegment_Name) {
      SegmentCompletedType::deserialize(valueType.second, accessor.enablePreviousSegment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePlanExecutionStatusMDT_Names::CurrentSegment_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableCurrentSegment(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RoutePlanExecutionStatusMDT_Names::NextSegment_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableNextSegment(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string RoutePlanExecutionStatusMDT::serialize(const uci::type::RoutePlanExecutionStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RoutePlanExecutionStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RoutePlanExecutionStatusMDT_Names::Extern_Type_Name);
  }
  SystemID_Type::serialize(accessor.getSystemID(), node, RoutePlanExecutionStatusMDT_Names::SystemID_Name);
  SystemSourceEnum::serialize(accessor.getSource(), node, RoutePlanExecutionStatusMDT_Names::Source_Name, false);
  {
    const uci::type::RoutePlanExecutionStatusMDT::PlanExecutionStatus& boundedList = accessor.getPlanExecutionStatus();
    for (uci::type::RoutePlanExecutionStatusMDT::PlanExecutionStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RoutePlanExecutionStateType::serialize(boundedList.at(i), node, RoutePlanExecutionStatusMDT_Names::PlanExecutionStatus_Name);
    }
  }
  if (accessor.hasPreviousSegment()) {
    SegmentCompletedType::serialize(accessor.getPreviousSegment(), node, RoutePlanExecutionStatusMDT_Names::PreviousSegment_Name);
  }
  SegmentEstimateType::serialize(accessor.getCurrentSegment(), node, RoutePlanExecutionStatusMDT_Names::CurrentSegment_Name);
  if (accessor.hasNextSegment()) {
    SegmentEstimateType::serialize(accessor.getNextSegment(), node, RoutePlanExecutionStatusMDT_Names::NextSegment_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RoutePlanExecutionStatusMDT& RoutePlanExecutionStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RoutePlanExecutionStatusMDT>().release());
}

uci::type::RoutePlanExecutionStatusMDT& RoutePlanExecutionStatusMDT::create(const uci::type::RoutePlanExecutionStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RoutePlanExecutionStatusMDT> newAccessor{boost::make_unique<asb_uci::type::RoutePlanExecutionStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RoutePlanExecutionStatusMDT::destroy(uci::type::RoutePlanExecutionStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::RoutePlanExecutionStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

