/** @file ResourceAllocationPeriodRF_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ResourceAllocationPeriodRF_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/RF_TypeEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_TypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceAllocationPeriodRF_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResourceAllocationPeriodRF_Type::ResourceAllocationPeriodRF_Type() = default;

ResourceAllocationPeriodRF_Type::~ResourceAllocationPeriodRF_Type() = default;

void ResourceAllocationPeriodRF_Type::copy(const uci::type::ResourceAllocationPeriodRF_Type& accessor) {
  copyImpl(accessor, false);
}

void ResourceAllocationPeriodRF_Type::copyImpl(const uci::type::ResourceAllocationPeriodRF_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResourceAllocationPeriodRF_Type&>(accessor);
    setAccessPeriodIndex(accessorImpl.accessPeriodIndex_Accessor);
    setPercentAccessLimit(accessorImpl.percentAccessLimit_Accessor);
    if (accessorImpl.accessPeriodRF_Mode_Accessor) {
      setAccessPeriodRF_Mode(*(accessorImpl.accessPeriodRF_Mode_Accessor));
    } else {
      accessPeriodRF_Mode_Accessor.reset();
    }
    if (accessorImpl.hasPeriodPercentAccessExpected()) {
      setPeriodPercentAccessExpected(accessorImpl.getPeriodPercentAccessExpected());
    } else {
      clearPeriodPercentAccessExpected();
    }
    if (accessorImpl.hasPeriodMaxAccessDuration()) {
      setPeriodMaxAccessDuration(accessorImpl.getPeriodMaxAccessDuration());
    } else {
      clearPeriodMaxAccessDuration();
    }
  }
}

void ResourceAllocationPeriodRF_Type::reset() noexcept {
  accessPeriodIndex_Accessor = 0;
  percentAccessLimit_Accessor = 0.0;
  accessPeriodRF_Mode_Accessor.reset();
  clearPeriodPercentAccessExpected();
  clearPeriodMaxAccessDuration();
}

xs::UnsignedInt ResourceAllocationPeriodRF_Type::getAccessPeriodIndex() const {
  return accessPeriodIndex_Accessor;
}

uci::type::ResourceAllocationPeriodRF_Type& ResourceAllocationPeriodRF_Type::setAccessPeriodIndex(xs::UnsignedInt value) {
  accessPeriodIndex_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue ResourceAllocationPeriodRF_Type::getPercentAccessLimit() const {
  return percentAccessLimit_Accessor;
}

uci::type::ResourceAllocationPeriodRF_Type& ResourceAllocationPeriodRF_Type::setPercentAccessLimit(uci::type::PercentTypeValue value) {
  percentAccessLimit_Accessor = value;
  return *this;
}


uci::type::RF_TypeEnum& ResourceAllocationPeriodRF_Type::getAccessPeriodRF_Mode_() const {
  if (accessPeriodRF_Mode_Accessor) {
    return *accessPeriodRF_Mode_Accessor;
  }
  throw uci::base::UCIException("Error in getAccessPeriodRF_Mode(): An attempt was made to get an optional field that was not enabled, call hasAccessPeriodRF_Mode() to determine if it is safe to call getAccessPeriodRF_Mode()");
}

const uci::type::RF_TypeEnum& ResourceAllocationPeriodRF_Type::getAccessPeriodRF_Mode() const {
  return getAccessPeriodRF_Mode_();
}

uci::type::RF_TypeEnum& ResourceAllocationPeriodRF_Type::getAccessPeriodRF_Mode() {
  return getAccessPeriodRF_Mode_();
}

uci::type::ResourceAllocationPeriodRF_Type& ResourceAllocationPeriodRF_Type::setAccessPeriodRF_Mode(const uci::type::RF_TypeEnum& accessor) {
  enableAccessPeriodRF_Mode();
  if (&accessor != accessPeriodRF_Mode_Accessor.get()) {
    accessPeriodRF_Mode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ResourceAllocationPeriodRF_Type& ResourceAllocationPeriodRF_Type::setAccessPeriodRF_Mode(const uci::type::RF_TypeEnum::EnumerationItem value) {
  enableAccessPeriodRF_Mode().setValue(value);
  return *this;
}

bool ResourceAllocationPeriodRF_Type::hasAccessPeriodRF_Mode() const noexcept {
  return static_cast<bool>(accessPeriodRF_Mode_Accessor);
}

uci::type::RF_TypeEnum& ResourceAllocationPeriodRF_Type::enableAccessPeriodRF_Mode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_TypeEnum : type};
  if ((!accessPeriodRF_Mode_Accessor) || (accessPeriodRF_Mode_Accessor->getAccessorType() != requestedType)) {
    accessPeriodRF_Mode_Accessor = RF_TypeEnum::create(requestedType);
    if (!accessPeriodRF_Mode_Accessor) {
      throw uci::base::UCIException("Error in enableAccessPeriodRF_Mode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *accessPeriodRF_Mode_Accessor;
}

uci::type::ResourceAllocationPeriodRF_Type& ResourceAllocationPeriodRF_Type::clearAccessPeriodRF_Mode() noexcept {
  accessPeriodRF_Mode_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue ResourceAllocationPeriodRF_Type::getPeriodPercentAccessExpected() const {
  if (periodPercentAccessExpected_Accessor) {
    return *periodPercentAccessExpected_Accessor;
  }
  throw uci::base::UCIException("Error in getPeriodPercentAccessExpected(): An attempt was made to get an optional field that was not enabled, call hasPeriodPercentAccessExpected() to determine if it is safe to call getPeriodPercentAccessExpected()");
}

uci::type::ResourceAllocationPeriodRF_Type& ResourceAllocationPeriodRF_Type::setPeriodPercentAccessExpected(uci::type::PercentTypeValue value) {
  periodPercentAccessExpected_Accessor = value;
  return *this;
}

bool ResourceAllocationPeriodRF_Type::hasPeriodPercentAccessExpected() const noexcept {
  return periodPercentAccessExpected_Accessor.has_value();
}

uci::type::ResourceAllocationPeriodRF_Type& ResourceAllocationPeriodRF_Type::clearPeriodPercentAccessExpected() noexcept {
  periodPercentAccessExpected_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue ResourceAllocationPeriodRF_Type::getPeriodMaxAccessDuration() const {
  if (periodMaxAccessDuration_Accessor) {
    return *periodMaxAccessDuration_Accessor;
  }
  throw uci::base::UCIException("Error in getPeriodMaxAccessDuration(): An attempt was made to get an optional field that was not enabled, call hasPeriodMaxAccessDuration() to determine if it is safe to call getPeriodMaxAccessDuration()");
}

uci::type::ResourceAllocationPeriodRF_Type& ResourceAllocationPeriodRF_Type::setPeriodMaxAccessDuration(uci::type::DurationTypeValue value) {
  periodMaxAccessDuration_Accessor = value;
  return *this;
}

bool ResourceAllocationPeriodRF_Type::hasPeriodMaxAccessDuration() const noexcept {
  return periodMaxAccessDuration_Accessor.has_value();
}

uci::type::ResourceAllocationPeriodRF_Type& ResourceAllocationPeriodRF_Type::clearPeriodMaxAccessDuration() noexcept {
  periodMaxAccessDuration_Accessor.reset();
  return *this;
}

std::unique_ptr<ResourceAllocationPeriodRF_Type> ResourceAllocationPeriodRF_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceAllocationPeriodRF_Type : type};
  return (requestedType == uci::type::accessorType::resourceAllocationPeriodRF_Type) ? boost::make_unique<ResourceAllocationPeriodRF_Type>() : nullptr;
}

/**  */
namespace ResourceAllocationPeriodRF_Type_Names {

constexpr const char* Extern_Type_Name{"ResourceAllocationPeriodRF_Type"};
constexpr const char* AccessPeriodIndex_Name{"AccessPeriodIndex"};
constexpr const char* PercentAccessLimit_Name{"PercentAccessLimit"};
constexpr const char* AccessPeriodRF_Mode_Name{"AccessPeriodRF_Mode"};
constexpr const char* PeriodPercentAccessExpected_Name{"PeriodPercentAccessExpected"};
constexpr const char* PeriodMaxAccessDuration_Name{"PeriodMaxAccessDuration"};

} // namespace ResourceAllocationPeriodRF_Type_Names

void ResourceAllocationPeriodRF_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResourceAllocationPeriodRF_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResourceAllocationPeriodRF_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResourceAllocationPeriodRF_Type_Names::AccessPeriodIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAccessPeriodIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceAllocationPeriodRF_Type_Names::PercentAccessLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentAccessLimit(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceAllocationPeriodRF_Type_Names::AccessPeriodRF_Mode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAccessPeriodRF_Mode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ResourceAllocationPeriodRF_Type_Names::PeriodPercentAccessExpected_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeriodPercentAccessExpected(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceAllocationPeriodRF_Type_Names::PeriodMaxAccessDuration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeriodMaxAccessDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string ResourceAllocationPeriodRF_Type::serialize(const uci::type::ResourceAllocationPeriodRF_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResourceAllocationPeriodRF_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResourceAllocationPeriodRF_Type_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAccessPeriodIndex(), node, ResourceAllocationPeriodRF_Type_Names::AccessPeriodIndex_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentAccessLimit(), node, ResourceAllocationPeriodRF_Type_Names::PercentAccessLimit_Name);
  if (accessor.hasAccessPeriodRF_Mode()) {
    RF_TypeEnum::serialize(accessor.getAccessPeriodRF_Mode(), node, ResourceAllocationPeriodRF_Type_Names::AccessPeriodRF_Mode_Name, false);
  }
  if (accessor.hasPeriodPercentAccessExpected()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPeriodPercentAccessExpected(), node, ResourceAllocationPeriodRF_Type_Names::PeriodPercentAccessExpected_Name);
  }
  if (accessor.hasPeriodMaxAccessDuration()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getPeriodMaxAccessDuration(), node, ResourceAllocationPeriodRF_Type_Names::PeriodMaxAccessDuration_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResourceAllocationPeriodRF_Type& ResourceAllocationPeriodRF_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResourceAllocationPeriodRF_Type>().release());
}

uci::type::ResourceAllocationPeriodRF_Type& ResourceAllocationPeriodRF_Type::create(const uci::type::ResourceAllocationPeriodRF_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResourceAllocationPeriodRF_Type> newAccessor{boost::make_unique<asb_uci::type::ResourceAllocationPeriodRF_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResourceAllocationPeriodRF_Type::destroy(uci::type::ResourceAllocationPeriodRF_Type& accessor) {
  delete dynamic_cast<asb_uci::type::ResourceAllocationPeriodRF_Type*>(&accessor);
}

} // namespace type

} // namespace uci

