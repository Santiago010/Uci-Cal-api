/** @file FuelTankComponentExtendedStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/FuelTankComponentExtendedStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentExtendedStatusPET.h"
#include "../../../include/asb_uci/type/PumpComponentExtendedStatusType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FuelTankComponentExtendedStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MassType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PumpComponentExtendedStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TemperatureType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FuelTankComponentExtendedStatusType::FuelTankComponentExtendedStatusType()
  : pumpData_Accessor{boost::make_unique<PumpData>(0, SIZE_MAX)} {
}

FuelTankComponentExtendedStatusType::~FuelTankComponentExtendedStatusType() = default;

void FuelTankComponentExtendedStatusType::copy(const uci::type::FuelTankComponentExtendedStatusType& accessor) {
  copyImpl(accessor, false);
}

void FuelTankComponentExtendedStatusType::copyImpl(const uci::type::FuelTankComponentExtendedStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ComponentExtendedStatusPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const FuelTankComponentExtendedStatusType&>(accessor);
    setFuelQuantity(accessorImpl.fuelQuantity_Accessor);
    if (accessorImpl.hasFuelPercent()) {
      setFuelPercent(accessorImpl.getFuelPercent());
    } else {
      clearFuelPercent();
    }
    if (accessorImpl.hasTemperature()) {
      setTemperature(accessorImpl.getTemperature());
    } else {
      clearTemperature();
    }
    setPumpData(*(accessorImpl.pumpData_Accessor));
  }
}

void FuelTankComponentExtendedStatusType::reset() noexcept {
  ComponentExtendedStatusPET::reset();
  fuelQuantity_Accessor = 0.0;
  clearFuelPercent();
  clearTemperature();
  pumpData_Accessor->reset();
}

uci::type::MassTypeValue FuelTankComponentExtendedStatusType::getFuelQuantity() const {
  return fuelQuantity_Accessor;
}

uci::type::FuelTankComponentExtendedStatusType& FuelTankComponentExtendedStatusType::setFuelQuantity(uci::type::MassTypeValue value) {
  fuelQuantity_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue FuelTankComponentExtendedStatusType::getFuelPercent() const {
  if (fuelPercent_Accessor) {
    return *fuelPercent_Accessor;
  }
  throw uci::base::UCIException("Error in getFuelPercent(): An attempt was made to get an optional field that was not enabled, call hasFuelPercent() to determine if it is safe to call getFuelPercent()");
}

uci::type::FuelTankComponentExtendedStatusType& FuelTankComponentExtendedStatusType::setFuelPercent(uci::type::PercentTypeValue value) {
  fuelPercent_Accessor = value;
  return *this;
}

bool FuelTankComponentExtendedStatusType::hasFuelPercent() const noexcept {
  return fuelPercent_Accessor.has_value();
}

uci::type::FuelTankComponentExtendedStatusType& FuelTankComponentExtendedStatusType::clearFuelPercent() noexcept {
  fuelPercent_Accessor.reset();
  return *this;
}

uci::type::TemperatureTypeValue FuelTankComponentExtendedStatusType::getTemperature() const {
  if (temperature_Accessor) {
    return *temperature_Accessor;
  }
  throw uci::base::UCIException("Error in getTemperature(): An attempt was made to get an optional field that was not enabled, call hasTemperature() to determine if it is safe to call getTemperature()");
}

uci::type::FuelTankComponentExtendedStatusType& FuelTankComponentExtendedStatusType::setTemperature(uci::type::TemperatureTypeValue value) {
  temperature_Accessor = value;
  return *this;
}

bool FuelTankComponentExtendedStatusType::hasTemperature() const noexcept {
  return temperature_Accessor.has_value();
}

uci::type::FuelTankComponentExtendedStatusType& FuelTankComponentExtendedStatusType::clearTemperature() noexcept {
  temperature_Accessor.reset();
  return *this;
}

const uci::type::FuelTankComponentExtendedStatusType::PumpData& FuelTankComponentExtendedStatusType::getPumpData() const {
  return *pumpData_Accessor;
}

uci::type::FuelTankComponentExtendedStatusType::PumpData& FuelTankComponentExtendedStatusType::getPumpData() {
  return *pumpData_Accessor;
}

uci::type::FuelTankComponentExtendedStatusType& FuelTankComponentExtendedStatusType::setPumpData(const uci::type::FuelTankComponentExtendedStatusType::PumpData& accessor) {
  if (&accessor != pumpData_Accessor.get()) {
    pumpData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<FuelTankComponentExtendedStatusType> FuelTankComponentExtendedStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fuelTankComponentExtendedStatusType : type};
  return (requestedType == uci::type::accessorType::fuelTankComponentExtendedStatusType) ? boost::make_unique<FuelTankComponentExtendedStatusType>() : nullptr;
}

/**  */
namespace FuelTankComponentExtendedStatusType_Names {

constexpr const char* Extern_Type_Name{"FuelTankComponentExtendedStatusType"};
constexpr const char* FuelQuantity_Name{"FuelQuantity"};
constexpr const char* FuelPercent_Name{"FuelPercent"};
constexpr const char* Temperature_Name{"Temperature"};
constexpr const char* PumpData_Name{"PumpData"};

} // namespace FuelTankComponentExtendedStatusType_Names

void FuelTankComponentExtendedStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FuelTankComponentExtendedStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FuelTankComponentExtendedStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FuelTankComponentExtendedStatusType_Names::FuelQuantity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFuelQuantity(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + FuelTankComponentExtendedStatusType_Names::FuelPercent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFuelPercent(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + FuelTankComponentExtendedStatusType_Names::Temperature_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTemperature(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + FuelTankComponentExtendedStatusType_Names::PumpData_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::FuelTankComponentExtendedStatusType::PumpData& boundedList = accessor.getPumpData();
        const uci::type::FuelTankComponentExtendedStatusType::PumpData::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PumpComponentExtendedStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  ComponentExtendedStatusPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string FuelTankComponentExtendedStatusType::serialize(const uci::type::FuelTankComponentExtendedStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FuelTankComponentExtendedStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FuelTankComponentExtendedStatusType_Names::Extern_Type_Name);
  }
  ComponentExtendedStatusPET::serialize(accessor, node, "", false, false, false);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFuelQuantity(), node, FuelTankComponentExtendedStatusType_Names::FuelQuantity_Name);
  if (accessor.hasFuelPercent()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFuelPercent(), node, FuelTankComponentExtendedStatusType_Names::FuelPercent_Name);
  }
  if (accessor.hasTemperature()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTemperature(), node, FuelTankComponentExtendedStatusType_Names::Temperature_Name);
  }
  {
    const uci::type::FuelTankComponentExtendedStatusType::PumpData& boundedList = accessor.getPumpData();
    for (uci::type::FuelTankComponentExtendedStatusType::PumpData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PumpComponentExtendedStatusType::serialize(boundedList.at(i), node, FuelTankComponentExtendedStatusType_Names::PumpData_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FuelTankComponentExtendedStatusType& FuelTankComponentExtendedStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FuelTankComponentExtendedStatusType>().release());
}

uci::type::FuelTankComponentExtendedStatusType& FuelTankComponentExtendedStatusType::create(const uci::type::FuelTankComponentExtendedStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FuelTankComponentExtendedStatusType> newAccessor{boost::make_unique<asb_uci::type::FuelTankComponentExtendedStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FuelTankComponentExtendedStatusType::destroy(uci::type::FuelTankComponentExtendedStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::FuelTankComponentExtendedStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

