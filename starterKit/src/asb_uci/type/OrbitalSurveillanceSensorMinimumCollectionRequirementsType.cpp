/** @file OrbitalSurveillanceSensorMinimumCollectionRequirementsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitalSurveillanceSensorMinimumCollectionRequirementsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceSensorMinimumCollectionRequirementsType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalSurveillanceSensorMinimumCollectionRequirementsType::OrbitalSurveillanceSensorMinimumCollectionRequirementsType() = default;

OrbitalSurveillanceSensorMinimumCollectionRequirementsType::~OrbitalSurveillanceSensorMinimumCollectionRequirementsType() = default;

void OrbitalSurveillanceSensorMinimumCollectionRequirementsType::copy(const uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalSurveillanceSensorMinimumCollectionRequirementsType::copyImpl(const uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalSurveillanceSensorMinimumCollectionRequirementsType&>(accessor);
    targetRotationalPeriods_Accessor = (accessorImpl.targetRotationalPeriods_Accessor ? accessorImpl.targetRotationalPeriods_Accessor : boost::none);
    time_Accessor = (accessorImpl.time_Accessor ? accessorImpl.time_Accessor : boost::none);
  }
}

void OrbitalSurveillanceSensorMinimumCollectionRequirementsType::reset() noexcept {
  targetRotationalPeriods_Accessor.reset();
  time_Accessor.reset();
}

uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType::OrbitalSurveillanceSensorMinimumCollectionRequirementsTypeChoice OrbitalSurveillanceSensorMinimumCollectionRequirementsType::getOrbitalSurveillanceSensorMinimumCollectionRequirementsTypeChoiceOrdinal() const noexcept {
  if (targetRotationalPeriods_Accessor) {
    return ORBITALSURVEILLANCESENSORMINIMUMCOLLECTIONREQUIREMENTSTYPE_CHOICE_TARGETROTATIONALPERIODS;
  }
  if (time_Accessor) {
    return ORBITALSURVEILLANCESENSORMINIMUMCOLLECTIONREQUIREMENTSTYPE_CHOICE_TIME;
  }
  return ORBITALSURVEILLANCESENSORMINIMUMCOLLECTIONREQUIREMENTSTYPE_CHOICE_NONE;
}

uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& OrbitalSurveillanceSensorMinimumCollectionRequirementsType::setOrbitalSurveillanceSensorMinimumCollectionRequirementsTypeChoiceOrdinal(uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType::OrbitalSurveillanceSensorMinimumCollectionRequirementsTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case ORBITALSURVEILLANCESENSORMINIMUMCOLLECTIONREQUIREMENTSTYPE_CHOICE_TARGETROTATIONALPERIODS:
      chooseTargetRotationalPeriods();
      break;
    case ORBITALSURVEILLANCESENSORMINIMUMCOLLECTIONREQUIREMENTSTYPE_CHOICE_TIME:
      chooseTime();
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitalSurveillanceSensorMinimumCollectionRequirementsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

xs::Int OrbitalSurveillanceSensorMinimumCollectionRequirementsType::getTargetRotationalPeriods() const {
  if (targetRotationalPeriods_Accessor) {
    return *targetRotationalPeriods_Accessor;
  }
  throw uci::base::UCIException("Error in getTargetRotationalPeriods(): Unable to get TargetRotationalPeriods, field not selected");
}

uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& OrbitalSurveillanceSensorMinimumCollectionRequirementsType::setTargetRotationalPeriods(xs::Int value) {
  chooseTargetRotationalPeriods();
  targetRotationalPeriods_Accessor = value;
  return *this;
}

bool OrbitalSurveillanceSensorMinimumCollectionRequirementsType::isTargetRotationalPeriods() const noexcept {
  return static_cast<bool>(targetRotationalPeriods_Accessor);
}

void OrbitalSurveillanceSensorMinimumCollectionRequirementsType::chooseTargetRotationalPeriods() {
  time_Accessor.reset();
  if (!targetRotationalPeriods_Accessor) {
    targetRotationalPeriods_Accessor = boost::optional<asb_xs::Int>();
  }
}

uci::type::DurationTypeValue OrbitalSurveillanceSensorMinimumCollectionRequirementsType::getTime() const {
  if (time_Accessor) {
    return *time_Accessor;
  }
  throw uci::base::UCIException("Error in getTime(): Unable to get Time, field not selected");
}

uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& OrbitalSurveillanceSensorMinimumCollectionRequirementsType::setTime(uci::type::DurationTypeValue value) {
  chooseTime();
  time_Accessor = value;
  return *this;
}

bool OrbitalSurveillanceSensorMinimumCollectionRequirementsType::isTime() const noexcept {
  return static_cast<bool>(time_Accessor);
}

void OrbitalSurveillanceSensorMinimumCollectionRequirementsType::chooseTime() {
  targetRotationalPeriods_Accessor.reset();
  if (!time_Accessor) {
    time_Accessor = boost::optional<asb_xs::Duration>();
  }
}

std::unique_ptr<OrbitalSurveillanceSensorMinimumCollectionRequirementsType> OrbitalSurveillanceSensorMinimumCollectionRequirementsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceSensorMinimumCollectionRequirementsType : type};
  return (requestedType == uci::type::accessorType::orbitalSurveillanceSensorMinimumCollectionRequirementsType) ? boost::make_unique<OrbitalSurveillanceSensorMinimumCollectionRequirementsType>() : nullptr;
}

/**  */
namespace OrbitalSurveillanceSensorMinimumCollectionRequirementsType_Names {

constexpr const char* Extern_Type_Name{"OrbitalSurveillanceSensorMinimumCollectionRequirementsType"};
constexpr const char* TargetRotationalPeriods_Name{"TargetRotationalPeriods"};
constexpr const char* Time_Name{"Time"};

} // namespace OrbitalSurveillanceSensorMinimumCollectionRequirementsType_Names

void OrbitalSurveillanceSensorMinimumCollectionRequirementsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalSurveillanceSensorMinimumCollectionRequirementsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceSensorMinimumCollectionRequirementsType_Names::TargetRotationalPeriods_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetRotationalPeriods(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalSurveillanceSensorMinimumCollectionRequirementsType_Names::Time_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string OrbitalSurveillanceSensorMinimumCollectionRequirementsType::serialize(const uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalSurveillanceSensorMinimumCollectionRequirementsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalSurveillanceSensorMinimumCollectionRequirementsType_Names::Extern_Type_Name);
  }
  if (accessor.isTargetRotationalPeriods()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getTargetRotationalPeriods(), node, OrbitalSurveillanceSensorMinimumCollectionRequirementsType_Names::TargetRotationalPeriods_Name);
  } else if (accessor.isTime()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getTime(), node, OrbitalSurveillanceSensorMinimumCollectionRequirementsType_Names::Time_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& OrbitalSurveillanceSensorMinimumCollectionRequirementsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType>().release());
}

uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& OrbitalSurveillanceSensorMinimumCollectionRequirementsType::create(const uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType> newAccessor{boost::make_unique<asb_uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalSurveillanceSensorMinimumCollectionRequirementsType::destroy(uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType*>(&accessor);
}

} // namespace type

} // namespace uci

