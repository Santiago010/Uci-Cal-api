/** @file EventWindowChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EventWindowChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AnglePositiveType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/DurationType.h"
#include "uci/type/EventWindowChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EventWindowChoiceType::EventWindowChoiceType() = default;

EventWindowChoiceType::~EventWindowChoiceType() = default;

void EventWindowChoiceType::copy(const uci::type::EventWindowChoiceType& accessor) {
  copyImpl(accessor, false);
}

void EventWindowChoiceType::copyImpl(const uci::type::EventWindowChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EventWindowChoiceType&>(accessor);
    windowAngle_Accessor = (accessorImpl.windowAngle_Accessor ? accessorImpl.windowAngle_Accessor : boost::none);
    windowDuration_Accessor = (accessorImpl.windowDuration_Accessor ? accessorImpl.windowDuration_Accessor : boost::none);
    windowRadius_Accessor = (accessorImpl.windowRadius_Accessor ? accessorImpl.windowRadius_Accessor : boost::none);
  }
}

void EventWindowChoiceType::reset() noexcept {
  windowAngle_Accessor.reset();
  windowDuration_Accessor.reset();
  windowRadius_Accessor.reset();
}

uci::type::EventWindowChoiceType::EventWindowChoiceTypeChoice EventWindowChoiceType::getEventWindowChoiceTypeChoiceOrdinal() const noexcept {
  if (windowAngle_Accessor) {
    return EVENTWINDOWCHOICETYPE_CHOICE_WINDOWANGLE;
  }
  if (windowDuration_Accessor) {
    return EVENTWINDOWCHOICETYPE_CHOICE_WINDOWDURATION;
  }
  if (windowRadius_Accessor) {
    return EVENTWINDOWCHOICETYPE_CHOICE_WINDOWRADIUS;
  }
  return EVENTWINDOWCHOICETYPE_CHOICE_NONE;
}

uci::type::EventWindowChoiceType& EventWindowChoiceType::setEventWindowChoiceTypeChoiceOrdinal(uci::type::EventWindowChoiceType::EventWindowChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case EVENTWINDOWCHOICETYPE_CHOICE_WINDOWANGLE:
      chooseWindowAngle();
      break;
    case EVENTWINDOWCHOICETYPE_CHOICE_WINDOWDURATION:
      chooseWindowDuration();
      break;
    case EVENTWINDOWCHOICETYPE_CHOICE_WINDOWRADIUS:
      chooseWindowRadius();
      break;
    default:
      throw uci::base::UCIException("Error in setEventWindowChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AnglePositiveTypeValue EventWindowChoiceType::getWindowAngle() const {
  if (windowAngle_Accessor) {
    return *windowAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getWindowAngle(): Unable to get WindowAngle, field not selected");
}

uci::type::EventWindowChoiceType& EventWindowChoiceType::setWindowAngle(uci::type::AnglePositiveTypeValue value) {
  chooseWindowAngle();
  windowAngle_Accessor = value;
  return *this;
}

bool EventWindowChoiceType::isWindowAngle() const noexcept {
  return static_cast<bool>(windowAngle_Accessor);
}

void EventWindowChoiceType::chooseWindowAngle() {
  windowDuration_Accessor.reset();
  windowRadius_Accessor.reset();
  if (!windowAngle_Accessor) {
    windowAngle_Accessor = boost::optional<asb_xs::Double>();
  }
}

uci::type::DurationTypeValue EventWindowChoiceType::getWindowDuration() const {
  if (windowDuration_Accessor) {
    return *windowDuration_Accessor;
  }
  throw uci::base::UCIException("Error in getWindowDuration(): Unable to get WindowDuration, field not selected");
}

uci::type::EventWindowChoiceType& EventWindowChoiceType::setWindowDuration(uci::type::DurationTypeValue value) {
  chooseWindowDuration();
  windowDuration_Accessor = value;
  return *this;
}

bool EventWindowChoiceType::isWindowDuration() const noexcept {
  return static_cast<bool>(windowDuration_Accessor);
}

void EventWindowChoiceType::chooseWindowDuration() {
  windowAngle_Accessor.reset();
  windowRadius_Accessor.reset();
  if (!windowDuration_Accessor) {
    windowDuration_Accessor = boost::optional<asb_xs::Duration>();
  }
}

uci::type::DistanceTypeValue EventWindowChoiceType::getWindowRadius() const {
  if (windowRadius_Accessor) {
    return *windowRadius_Accessor;
  }
  throw uci::base::UCIException("Error in getWindowRadius(): Unable to get WindowRadius, field not selected");
}

uci::type::EventWindowChoiceType& EventWindowChoiceType::setWindowRadius(uci::type::DistanceTypeValue value) {
  chooseWindowRadius();
  windowRadius_Accessor = value;
  return *this;
}

bool EventWindowChoiceType::isWindowRadius() const noexcept {
  return static_cast<bool>(windowRadius_Accessor);
}

void EventWindowChoiceType::chooseWindowRadius() {
  windowAngle_Accessor.reset();
  windowDuration_Accessor.reset();
  if (!windowRadius_Accessor) {
    windowRadius_Accessor = boost::optional<asb_xs::Double>();
  }
}

std::unique_ptr<EventWindowChoiceType> EventWindowChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eventWindowChoiceType : type};
  return (requestedType == uci::type::accessorType::eventWindowChoiceType) ? boost::make_unique<EventWindowChoiceType>() : nullptr;
}

/**  */
namespace EventWindowChoiceType_Names {

constexpr const char* Extern_Type_Name{"EventWindowChoiceType"};
constexpr const char* WindowAngle_Name{"WindowAngle"};
constexpr const char* WindowDuration_Name{"WindowDuration"};
constexpr const char* WindowRadius_Name{"WindowRadius"};

} // namespace EventWindowChoiceType_Names

void EventWindowChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EventWindowChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EventWindowChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EventWindowChoiceType_Names::WindowAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWindowAngle(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EventWindowChoiceType_Names::WindowDuration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWindowDuration(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + EventWindowChoiceType_Names::WindowRadius_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWindowRadius(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string EventWindowChoiceType::serialize(const uci::type::EventWindowChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EventWindowChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EventWindowChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isWindowAngle()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getWindowAngle(), node, EventWindowChoiceType_Names::WindowAngle_Name);
  } else if (accessor.isWindowDuration()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getWindowDuration(), node, EventWindowChoiceType_Names::WindowDuration_Name);
  } else if (accessor.isWindowRadius()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getWindowRadius(), node, EventWindowChoiceType_Names::WindowRadius_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EventWindowChoiceType& EventWindowChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EventWindowChoiceType>().release());
}

uci::type::EventWindowChoiceType& EventWindowChoiceType::create(const uci::type::EventWindowChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EventWindowChoiceType> newAccessor{boost::make_unique<asb_uci::type::EventWindowChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EventWindowChoiceType::destroy(uci::type::EventWindowChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::EventWindowChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

