/** @file CommTerminalPlanActivationStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommTerminalPlanActivationStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommTerminalPlanActivationStateEnum.h"
#include "asb_uci/type/CommTerminalPlanEffectivityStateType.h"
#include "asb_uci/type/CommTerminalPlanID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommTerminalPlanActivationStateEnum.h"
#include "uci/type/CommTerminalPlanActivationStatusMDT.h"
#include "uci/type/CommTerminalPlanEffectivityStateType.h"
#include "uci/type/CommTerminalPlanID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommTerminalPlanActivationStatusMDT::CommTerminalPlanActivationStatusMDT()
  : commTerminalPlanID_Accessor{boost::make_unique<CommTerminalPlanID_Type>()},
    planActivationState_Accessor{boost::make_unique<CommTerminalPlanActivationStateEnum>()},
    effectivityState_Accessor{boost::make_unique<EffectivityState>(0, SIZE_MAX)} {
}

CommTerminalPlanActivationStatusMDT::~CommTerminalPlanActivationStatusMDT() = default;

void CommTerminalPlanActivationStatusMDT::copy(const uci::type::CommTerminalPlanActivationStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void CommTerminalPlanActivationStatusMDT::copyImpl(const uci::type::CommTerminalPlanActivationStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommTerminalPlanActivationStatusMDT&>(accessor);
    setCommTerminalPlanID(*(accessorImpl.commTerminalPlanID_Accessor));
    setPlanActivationState(*(accessorImpl.planActivationState_Accessor));
    setEffectivityState(*(accessorImpl.effectivityState_Accessor));
  }
}

void CommTerminalPlanActivationStatusMDT::reset() noexcept {
  commTerminalPlanID_Accessor->reset();
  planActivationState_Accessor->reset();
  effectivityState_Accessor->reset();
}

const uci::type::CommTerminalPlanID_Type& CommTerminalPlanActivationStatusMDT::getCommTerminalPlanID() const {
  return *commTerminalPlanID_Accessor;
}

uci::type::CommTerminalPlanID_Type& CommTerminalPlanActivationStatusMDT::getCommTerminalPlanID() {
  return *commTerminalPlanID_Accessor;
}

uci::type::CommTerminalPlanActivationStatusMDT& CommTerminalPlanActivationStatusMDT::setCommTerminalPlanID(const uci::type::CommTerminalPlanID_Type& accessor) {
  if (&accessor != commTerminalPlanID_Accessor.get()) {
    commTerminalPlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommTerminalPlanActivationStateEnum& CommTerminalPlanActivationStatusMDT::getPlanActivationState() const {
  return *planActivationState_Accessor;
}

uci::type::CommTerminalPlanActivationStateEnum& CommTerminalPlanActivationStatusMDT::getPlanActivationState() {
  return *planActivationState_Accessor;
}

uci::type::CommTerminalPlanActivationStatusMDT& CommTerminalPlanActivationStatusMDT::setPlanActivationState(const uci::type::CommTerminalPlanActivationStateEnum& accessor) {
  if (&accessor != planActivationState_Accessor.get()) {
    planActivationState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommTerminalPlanActivationStatusMDT& CommTerminalPlanActivationStatusMDT::setPlanActivationState(uci::type::CommTerminalPlanActivationStateEnum::EnumerationItem value) {
  planActivationState_Accessor->setValue(value);
  return *this;
}


const uci::type::CommTerminalPlanActivationStatusMDT::EffectivityState& CommTerminalPlanActivationStatusMDT::getEffectivityState() const {
  return *effectivityState_Accessor;
}

uci::type::CommTerminalPlanActivationStatusMDT::EffectivityState& CommTerminalPlanActivationStatusMDT::getEffectivityState() {
  return *effectivityState_Accessor;
}

uci::type::CommTerminalPlanActivationStatusMDT& CommTerminalPlanActivationStatusMDT::setEffectivityState(const uci::type::CommTerminalPlanActivationStatusMDT::EffectivityState& accessor) {
  if (&accessor != effectivityState_Accessor.get()) {
    effectivityState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommTerminalPlanActivationStatusMDT> CommTerminalPlanActivationStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commTerminalPlanActivationStatusMDT : type};
  return (requestedType == uci::type::accessorType::commTerminalPlanActivationStatusMDT) ? boost::make_unique<CommTerminalPlanActivationStatusMDT>() : nullptr;
}

/**  */
namespace CommTerminalPlanActivationStatusMDT_Names {

constexpr const char* Extern_Type_Name{"CommTerminalPlanActivationStatusMDT"};
constexpr const char* CommTerminalPlanID_Name{"CommTerminalPlanID"};
constexpr const char* PlanActivationState_Name{"PlanActivationState"};
constexpr const char* EffectivityState_Name{"EffectivityState"};

} // namespace CommTerminalPlanActivationStatusMDT_Names

void CommTerminalPlanActivationStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommTerminalPlanActivationStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommTerminalPlanActivationStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommTerminalPlanActivationStatusMDT_Names::CommTerminalPlanID_Name) {
      CommTerminalPlanID_Type::deserialize(valueType.second, accessor.getCommTerminalPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalPlanActivationStatusMDT_Names::PlanActivationState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPlanActivationState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommTerminalPlanActivationStatusMDT_Names::EffectivityState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalPlanActivationStatusMDT::EffectivityState& boundedList = accessor.getEffectivityState();
        const uci::type::CommTerminalPlanActivationStatusMDT::EffectivityState::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommTerminalPlanEffectivityStateType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CommTerminalPlanActivationStatusMDT::serialize(const uci::type::CommTerminalPlanActivationStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommTerminalPlanActivationStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommTerminalPlanActivationStatusMDT_Names::Extern_Type_Name);
  }
  CommTerminalPlanID_Type::serialize(accessor.getCommTerminalPlanID(), node, CommTerminalPlanActivationStatusMDT_Names::CommTerminalPlanID_Name);
  CommTerminalPlanActivationStateEnum::serialize(accessor.getPlanActivationState(), node, CommTerminalPlanActivationStatusMDT_Names::PlanActivationState_Name, false);
  {
    const uci::type::CommTerminalPlanActivationStatusMDT::EffectivityState& boundedList = accessor.getEffectivityState();
    for (uci::type::CommTerminalPlanActivationStatusMDT::EffectivityState::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommTerminalPlanEffectivityStateType::serialize(boundedList.at(i), node, CommTerminalPlanActivationStatusMDT_Names::EffectivityState_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommTerminalPlanActivationStatusMDT& CommTerminalPlanActivationStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommTerminalPlanActivationStatusMDT>().release());
}

uci::type::CommTerminalPlanActivationStatusMDT& CommTerminalPlanActivationStatusMDT::create(const uci::type::CommTerminalPlanActivationStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommTerminalPlanActivationStatusMDT> newAccessor{boost::make_unique<asb_uci::type::CommTerminalPlanActivationStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommTerminalPlanActivationStatusMDT::destroy(uci::type::CommTerminalPlanActivationStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::CommTerminalPlanActivationStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

