/** @file ResponsePlanConstraintType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ResponsePlanConstraintType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/PlanChangeableConstraintsEnum.h"
#include "../../../include/asb_uci/type/ResponsePlanID_Type.h"
#include "../../../include/asb_uci/type/ResponseTypeEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanChangeableConstraintsEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponsePlanConstraintType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponsePlanID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponseTypeEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResponsePlanConstraintType::ResponsePlanConstraintType()
  : changeableAllocations_Accessor{boost::make_unique<PlanChangeableConstraintsEnum>()},
    responseType_Accessor{boost::make_unique<ResponseType>(0, 4)} {
}

ResponsePlanConstraintType::~ResponsePlanConstraintType() = default;

void ResponsePlanConstraintType::copy(const uci::type::ResponsePlanConstraintType& accessor) {
  copyImpl(accessor, false);
}

void ResponsePlanConstraintType::copyImpl(const uci::type::ResponsePlanConstraintType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResponsePlanConstraintType&>(accessor);
    if (accessorImpl.responsePlanID_Accessor) {
      setResponsePlanID(*(accessorImpl.responsePlanID_Accessor));
    } else {
      responsePlanID_Accessor.reset();
    }
    setChangeableAllocations(*(accessorImpl.changeableAllocations_Accessor));
    setResponseType(*(accessorImpl.responseType_Accessor));
  }
}

void ResponsePlanConstraintType::reset() noexcept {
  responsePlanID_Accessor.reset();
  changeableAllocations_Accessor->reset();
  responseType_Accessor->reset();
}

uci::type::ResponsePlanID_Type& ResponsePlanConstraintType::getResponsePlanID_() const {
  if (responsePlanID_Accessor) {
    return *responsePlanID_Accessor;
  }
  throw uci::base::UCIException("Error in getResponsePlanID(): An attempt was made to get an optional field that was not enabled, call hasResponsePlanID() to determine if it is safe to call getResponsePlanID()");
}

const uci::type::ResponsePlanID_Type& ResponsePlanConstraintType::getResponsePlanID() const {
  return getResponsePlanID_();
}

uci::type::ResponsePlanID_Type& ResponsePlanConstraintType::getResponsePlanID() {
  return getResponsePlanID_();
}

uci::type::ResponsePlanConstraintType& ResponsePlanConstraintType::setResponsePlanID(const uci::type::ResponsePlanID_Type& accessor) {
  enableResponsePlanID();
  if (&accessor != responsePlanID_Accessor.get()) {
    responsePlanID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ResponsePlanConstraintType::hasResponsePlanID() const noexcept {
  return static_cast<bool>(responsePlanID_Accessor);
}

uci::type::ResponsePlanID_Type& ResponsePlanConstraintType::enableResponsePlanID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responsePlanID_Type : type};
  if ((!responsePlanID_Accessor) || (responsePlanID_Accessor->getAccessorType() != requestedType)) {
    responsePlanID_Accessor = ResponsePlanID_Type::create(requestedType);
    if (!responsePlanID_Accessor) {
      throw uci::base::UCIException("Error in enableResponsePlanID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *responsePlanID_Accessor;
}

uci::type::ResponsePlanConstraintType& ResponsePlanConstraintType::clearResponsePlanID() noexcept {
  responsePlanID_Accessor.reset();
  return *this;
}

const uci::type::PlanChangeableConstraintsEnum& ResponsePlanConstraintType::getChangeableAllocations() const {
  return *changeableAllocations_Accessor;
}

uci::type::PlanChangeableConstraintsEnum& ResponsePlanConstraintType::getChangeableAllocations() {
  return *changeableAllocations_Accessor;
}

uci::type::ResponsePlanConstraintType& ResponsePlanConstraintType::setChangeableAllocations(const uci::type::PlanChangeableConstraintsEnum& accessor) {
  if (&accessor != changeableAllocations_Accessor.get()) {
    changeableAllocations_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ResponsePlanConstraintType& ResponsePlanConstraintType::setChangeableAllocations(uci::type::PlanChangeableConstraintsEnum::EnumerationItem value) {
  changeableAllocations_Accessor->setValue(value);
  return *this;
}


const uci::type::ResponsePlanConstraintType::ResponseType& ResponsePlanConstraintType::getResponseType() const {
  return *responseType_Accessor;
}

uci::type::ResponsePlanConstraintType::ResponseType& ResponsePlanConstraintType::getResponseType() {
  return *responseType_Accessor;
}

uci::type::ResponsePlanConstraintType& ResponsePlanConstraintType::setResponseType(const uci::type::ResponsePlanConstraintType::ResponseType& accessor) {
  if (&accessor != responseType_Accessor.get()) {
    responseType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ResponsePlanConstraintType> ResponsePlanConstraintType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responsePlanConstraintType : type};
  return (requestedType == uci::type::accessorType::responsePlanConstraintType) ? boost::make_unique<ResponsePlanConstraintType>() : nullptr;
}

/**  */
namespace ResponsePlanConstraintType_Names {

constexpr const char* Extern_Type_Name{"ResponsePlanConstraintType"};
constexpr const char* ResponsePlanID_Name{"ResponsePlanID"};
constexpr const char* ChangeableAllocations_Name{"ChangeableAllocations"};
constexpr const char* ResponseType_Name{"ResponseType"};

} // namespace ResponsePlanConstraintType_Names

void ResponsePlanConstraintType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResponsePlanConstraintType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResponsePlanConstraintType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResponsePlanConstraintType_Names::ResponsePlanID_Name) {
      ResponsePlanID_Type::deserialize(valueType.second, accessor.enableResponsePlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponsePlanConstraintType_Names::ChangeableAllocations_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getChangeableAllocations().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ResponsePlanConstraintType_Names::ResponseType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResponsePlanConstraintType::ResponseType& boundedList = accessor.getResponseType();
        const uci::type::ResponsePlanConstraintType::ResponseType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    }
  }
}

std::string ResponsePlanConstraintType::serialize(const uci::type::ResponsePlanConstraintType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResponsePlanConstraintType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResponsePlanConstraintType_Names::Extern_Type_Name);
  }
  if (accessor.hasResponsePlanID()) {
    ResponsePlanID_Type::serialize(accessor.getResponsePlanID(), node, ResponsePlanConstraintType_Names::ResponsePlanID_Name);
  }
  PlanChangeableConstraintsEnum::serialize(accessor.getChangeableAllocations(), node, ResponsePlanConstraintType_Names::ChangeableAllocations_Name, false);
  {
    const uci::type::ResponsePlanConstraintType::ResponseType& boundedList = accessor.getResponseType();
    for (uci::type::ResponsePlanConstraintType::ResponseType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ResponseTypeEnum::serialize(boundedList.at(i), node, ResponsePlanConstraintType_Names::ResponseType_Name, false);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResponsePlanConstraintType& ResponsePlanConstraintType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResponsePlanConstraintType>().release());
}

uci::type::ResponsePlanConstraintType& ResponsePlanConstraintType::create(const uci::type::ResponsePlanConstraintType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResponsePlanConstraintType> newAccessor{boost::make_unique<asb_uci::type::ResponsePlanConstraintType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResponsePlanConstraintType::destroy(uci::type::ResponsePlanConstraintType& accessor) {
  delete dynamic_cast<asb_uci::type::ResponsePlanConstraintType*>(&accessor);
}

} // namespace type

} // namespace uci

