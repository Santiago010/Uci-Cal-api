/** @file GatewayLink16ConfigurationEnvironmentType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/GatewayLink16ConfigurationEnvironmentType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/GatewayLink16ConfigurationEnvironmentType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

GatewayLink16ConfigurationEnvironmentType::GatewayLink16ConfigurationEnvironmentType() = default;

GatewayLink16ConfigurationEnvironmentType::~GatewayLink16ConfigurationEnvironmentType() = default;

void GatewayLink16ConfigurationEnvironmentType::copy(const uci::type::GatewayLink16ConfigurationEnvironmentType& accessor) {
  copyImpl(accessor, false);
}

void GatewayLink16ConfigurationEnvironmentType::copyImpl(const uci::type::GatewayLink16ConfigurationEnvironmentType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const GatewayLink16ConfigurationEnvironmentType&>(accessor);
    setUnknown(accessorImpl.unknown_Accessor);
    setSpace(accessorImpl.space_Accessor);
    setAir(accessorImpl.air_Accessor);
    setSurface(accessorImpl.surface_Accessor);
    setSubsurface(accessorImpl.subsurface_Accessor);
    setLand(accessorImpl.land_Accessor);
  }
}

void GatewayLink16ConfigurationEnvironmentType::reset() noexcept {
  unknown_Accessor = false;
  space_Accessor = false;
  air_Accessor = false;
  surface_Accessor = false;
  subsurface_Accessor = false;
  land_Accessor = false;
}

xs::Boolean GatewayLink16ConfigurationEnvironmentType::getUnknown() const {
  return unknown_Accessor;
}

uci::type::GatewayLink16ConfigurationEnvironmentType& GatewayLink16ConfigurationEnvironmentType::setUnknown(xs::Boolean value) {
  unknown_Accessor = value;
  return *this;
}


xs::Boolean GatewayLink16ConfigurationEnvironmentType::getSpace() const {
  return space_Accessor;
}

uci::type::GatewayLink16ConfigurationEnvironmentType& GatewayLink16ConfigurationEnvironmentType::setSpace(xs::Boolean value) {
  space_Accessor = value;
  return *this;
}


xs::Boolean GatewayLink16ConfigurationEnvironmentType::getAir() const {
  return air_Accessor;
}

uci::type::GatewayLink16ConfigurationEnvironmentType& GatewayLink16ConfigurationEnvironmentType::setAir(xs::Boolean value) {
  air_Accessor = value;
  return *this;
}


xs::Boolean GatewayLink16ConfigurationEnvironmentType::getSurface() const {
  return surface_Accessor;
}

uci::type::GatewayLink16ConfigurationEnvironmentType& GatewayLink16ConfigurationEnvironmentType::setSurface(xs::Boolean value) {
  surface_Accessor = value;
  return *this;
}


xs::Boolean GatewayLink16ConfigurationEnvironmentType::getSubsurface() const {
  return subsurface_Accessor;
}

uci::type::GatewayLink16ConfigurationEnvironmentType& GatewayLink16ConfigurationEnvironmentType::setSubsurface(xs::Boolean value) {
  subsurface_Accessor = value;
  return *this;
}


xs::Boolean GatewayLink16ConfigurationEnvironmentType::getLand() const {
  return land_Accessor;
}

uci::type::GatewayLink16ConfigurationEnvironmentType& GatewayLink16ConfigurationEnvironmentType::setLand(xs::Boolean value) {
  land_Accessor = value;
  return *this;
}


std::unique_ptr<GatewayLink16ConfigurationEnvironmentType> GatewayLink16ConfigurationEnvironmentType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::gatewayLink16ConfigurationEnvironmentType : type};
  return (requestedType == uci::type::accessorType::gatewayLink16ConfigurationEnvironmentType) ? boost::make_unique<GatewayLink16ConfigurationEnvironmentType>() : nullptr;
}

/**  */
namespace GatewayLink16ConfigurationEnvironmentType_Names {

constexpr const char* Extern_Type_Name{"GatewayLink16ConfigurationEnvironmentType"};
constexpr const char* Unknown_Name{"Unknown"};
constexpr const char* Space_Name{"Space"};
constexpr const char* Air_Name{"Air"};
constexpr const char* Surface_Name{"Surface"};
constexpr const char* Subsurface_Name{"Subsurface"};
constexpr const char* Land_Name{"Land"};

} // namespace GatewayLink16ConfigurationEnvironmentType_Names

void GatewayLink16ConfigurationEnvironmentType::deserialize(const boost::property_tree::ptree& propTree, uci::type::GatewayLink16ConfigurationEnvironmentType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = GatewayLink16ConfigurationEnvironmentType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationEnvironmentType_Names::Unknown_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnknown(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationEnvironmentType_Names::Space_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpace(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationEnvironmentType_Names::Air_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAir(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationEnvironmentType_Names::Surface_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSurface(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationEnvironmentType_Names::Subsurface_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSubsurface(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + GatewayLink16ConfigurationEnvironmentType_Names::Land_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLand(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string GatewayLink16ConfigurationEnvironmentType::serialize(const uci::type::GatewayLink16ConfigurationEnvironmentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? GatewayLink16ConfigurationEnvironmentType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, GatewayLink16ConfigurationEnvironmentType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getUnknown(), node, GatewayLink16ConfigurationEnvironmentType_Names::Unknown_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSpace(), node, GatewayLink16ConfigurationEnvironmentType_Names::Space_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getAir(), node, GatewayLink16ConfigurationEnvironmentType_Names::Air_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSurface(), node, GatewayLink16ConfigurationEnvironmentType_Names::Surface_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSubsurface(), node, GatewayLink16ConfigurationEnvironmentType_Names::Subsurface_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getLand(), node, GatewayLink16ConfigurationEnvironmentType_Names::Land_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::GatewayLink16ConfigurationEnvironmentType& GatewayLink16ConfigurationEnvironmentType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::GatewayLink16ConfigurationEnvironmentType>().release());
}

uci::type::GatewayLink16ConfigurationEnvironmentType& GatewayLink16ConfigurationEnvironmentType::create(const uci::type::GatewayLink16ConfigurationEnvironmentType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::GatewayLink16ConfigurationEnvironmentType> newAccessor{boost::make_unique<asb_uci::type::GatewayLink16ConfigurationEnvironmentType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void GatewayLink16ConfigurationEnvironmentType::destroy(uci::type::GatewayLink16ConfigurationEnvironmentType& accessor) {
  delete dynamic_cast<asb_uci::type::GatewayLink16ConfigurationEnvironmentType*>(&accessor);
}

} // namespace type

} // namespace uci

