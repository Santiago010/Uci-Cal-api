/** @file CapabilityAssessmentPointType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CapabilityAssessmentPointType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityAssessmentActionType.h"
#include "asb_uci/type/CapabilityAssessmentActivityDetailsType.h"
#include "asb_uci/type/InertialStateRelativeType.h"
#include "asb_uci/type/RoutePlanReferencesType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityAssessmentActionType.h"
#include "uci/type/CapabilityAssessmentActivityDetailsType.h"
#include "uci/type/CapabilityAssessmentPointType.h"
#include "uci/type/InertialStateRelativeType.h"
#include "uci/type/RoutePlanReferencesType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CapabilityAssessmentPointType::CapabilityAssessmentPointType()
  : inertialState_Accessor{boost::make_unique<InertialStateRelativeType>()},
    action_Accessor{boost::make_unique<Action>(0, SIZE_MAX)},
    activityDetails_Accessor{boost::make_unique<ActivityDetails>(0, SIZE_MAX)} {
}

CapabilityAssessmentPointType::~CapabilityAssessmentPointType() = default;

void CapabilityAssessmentPointType::copy(const uci::type::CapabilityAssessmentPointType& accessor) {
  copyImpl(accessor, false);
}

void CapabilityAssessmentPointType::copyImpl(const uci::type::CapabilityAssessmentPointType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CapabilityAssessmentPointType&>(accessor);
    setInertialState(*(accessorImpl.inertialState_Accessor));
    if (accessorImpl.routePlanReference_Accessor) {
      setRoutePlanReference(*(accessorImpl.routePlanReference_Accessor));
    } else {
      routePlanReference_Accessor.reset();
    }
    setAction(*(accessorImpl.action_Accessor));
    setActivityDetails(*(accessorImpl.activityDetails_Accessor));
  }
}

void CapabilityAssessmentPointType::reset() noexcept {
  if (inertialState_Accessor->getAccessorType() != uci::type::accessorType::inertialStateRelativeType) {
    inertialState_Accessor = boost::make_unique<InertialStateRelativeType>();
  } else {
    inertialState_Accessor->reset();
  }
  routePlanReference_Accessor.reset();
  action_Accessor->reset();
  activityDetails_Accessor->reset();
}

const uci::type::InertialStateRelativeType& CapabilityAssessmentPointType::getInertialState() const {
  return *inertialState_Accessor;
}

uci::type::InertialStateRelativeType& CapabilityAssessmentPointType::getInertialState() {
  return *inertialState_Accessor;
}

uci::type::CapabilityAssessmentPointType& CapabilityAssessmentPointType::setInertialState(const uci::type::InertialStateRelativeType& accessor) {
  enableInertialState(accessor.getAccessorType());
  if (&accessor != inertialState_Accessor.get()) {
    inertialState_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::InertialStateRelativeType& CapabilityAssessmentPointType::enableInertialState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::inertialStateRelativeType : type};
  if ((!inertialState_Accessor) || (inertialState_Accessor->getAccessorType() != requestedType)) {
    inertialState_Accessor = InertialStateRelativeType::create(requestedType);
    if (!inertialState_Accessor) {
      throw uci::base::UCIException("Error in enableInertialState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *inertialState_Accessor;
}

uci::type::RoutePlanReferencesType& CapabilityAssessmentPointType::getRoutePlanReference_() const {
  if (routePlanReference_Accessor) {
    return *routePlanReference_Accessor;
  }
  throw uci::base::UCIException("Error in getRoutePlanReference(): An attempt was made to get an optional field that was not enabled, call hasRoutePlanReference() to determine if it is safe to call getRoutePlanReference()");
}

const uci::type::RoutePlanReferencesType& CapabilityAssessmentPointType::getRoutePlanReference() const {
  return getRoutePlanReference_();
}

uci::type::RoutePlanReferencesType& CapabilityAssessmentPointType::getRoutePlanReference() {
  return getRoutePlanReference_();
}

uci::type::CapabilityAssessmentPointType& CapabilityAssessmentPointType::setRoutePlanReference(const uci::type::RoutePlanReferencesType& accessor) {
  enableRoutePlanReference();
  if (&accessor != routePlanReference_Accessor.get()) {
    routePlanReference_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CapabilityAssessmentPointType::hasRoutePlanReference() const noexcept {
  return static_cast<bool>(routePlanReference_Accessor);
}

uci::type::RoutePlanReferencesType& CapabilityAssessmentPointType::enableRoutePlanReference(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePlanReferencesType : type};
  if ((!routePlanReference_Accessor) || (routePlanReference_Accessor->getAccessorType() != requestedType)) {
    routePlanReference_Accessor = RoutePlanReferencesType::create(requestedType);
    if (!routePlanReference_Accessor) {
      throw uci::base::UCIException("Error in enableRoutePlanReference(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routePlanReference_Accessor;
}

uci::type::CapabilityAssessmentPointType& CapabilityAssessmentPointType::clearRoutePlanReference() noexcept {
  routePlanReference_Accessor.reset();
  return *this;
}

const uci::type::CapabilityAssessmentPointType::Action& CapabilityAssessmentPointType::getAction() const {
  return *action_Accessor;
}

uci::type::CapabilityAssessmentPointType::Action& CapabilityAssessmentPointType::getAction() {
  return *action_Accessor;
}

uci::type::CapabilityAssessmentPointType& CapabilityAssessmentPointType::setAction(const uci::type::CapabilityAssessmentPointType::Action& accessor) {
  if (&accessor != action_Accessor.get()) {
    action_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityAssessmentPointType::ActivityDetails& CapabilityAssessmentPointType::getActivityDetails() const {
  return *activityDetails_Accessor;
}

uci::type::CapabilityAssessmentPointType::ActivityDetails& CapabilityAssessmentPointType::getActivityDetails() {
  return *activityDetails_Accessor;
}

uci::type::CapabilityAssessmentPointType& CapabilityAssessmentPointType::setActivityDetails(const uci::type::CapabilityAssessmentPointType::ActivityDetails& accessor) {
  if (&accessor != activityDetails_Accessor.get()) {
    activityDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CapabilityAssessmentPointType> CapabilityAssessmentPointType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityAssessmentPointType : type};
  return (requestedType == uci::type::accessorType::capabilityAssessmentPointType) ? boost::make_unique<CapabilityAssessmentPointType>() : nullptr;
}

/**  */
namespace CapabilityAssessmentPointType_Names {

constexpr const char* Extern_Type_Name{"CapabilityAssessmentPointType"};
constexpr const char* InertialState_Name{"InertialState"};
constexpr const char* RoutePlanReference_Name{"RoutePlanReference"};
constexpr const char* Action_Name{"Action"};
constexpr const char* ActivityDetails_Name{"ActivityDetails"};

} // namespace CapabilityAssessmentPointType_Names

void CapabilityAssessmentPointType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityAssessmentPointType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilityAssessmentPointType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilityAssessmentPointType_Names::InertialState_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableInertialState(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityAssessmentPointType_Names::RoutePlanReference_Name) {
      RoutePlanReferencesType::deserialize(valueType.second, accessor.enableRoutePlanReference(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityAssessmentPointType_Names::Action_Name) {
      uci::type::CapabilityAssessmentPointType::Action& boundedList = accessor.getAction();
      const uci::type::CapabilityAssessmentPointType::Action::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::CapabilityAssessmentActionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityAssessmentPointType_Names::ActivityDetails_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityAssessmentPointType::ActivityDetails& boundedList = accessor.getActivityDetails();
        const uci::type::CapabilityAssessmentPointType::ActivityDetails::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityAssessmentActivityDetailsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CapabilityAssessmentPointType::serialize(const uci::type::CapabilityAssessmentPointType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CapabilityAssessmentPointType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilityAssessmentPointType_Names::Extern_Type_Name);
  }
  InertialStateRelativeType::serialize(accessor.getInertialState(), node, CapabilityAssessmentPointType_Names::InertialState_Name);
  if (accessor.hasRoutePlanReference()) {
    RoutePlanReferencesType::serialize(accessor.getRoutePlanReference(), node, CapabilityAssessmentPointType_Names::RoutePlanReference_Name);
  }
  {
    const uci::type::CapabilityAssessmentPointType::Action& boundedList = accessor.getAction();
    for (uci::type::CapabilityAssessmentPointType::Action::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityAssessmentActionType::serialize(boundedList.at(i), node, CapabilityAssessmentPointType_Names::Action_Name);
    }
  }
  {
    const uci::type::CapabilityAssessmentPointType::ActivityDetails& boundedList = accessor.getActivityDetails();
    for (uci::type::CapabilityAssessmentPointType::ActivityDetails::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityAssessmentActivityDetailsType::serialize(boundedList.at(i), node, CapabilityAssessmentPointType_Names::ActivityDetails_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CapabilityAssessmentPointType& CapabilityAssessmentPointType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CapabilityAssessmentPointType>().release());
}

uci::type::CapabilityAssessmentPointType& CapabilityAssessmentPointType::create(const uci::type::CapabilityAssessmentPointType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CapabilityAssessmentPointType> newAccessor{boost::make_unique<asb_uci::type::CapabilityAssessmentPointType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CapabilityAssessmentPointType::destroy(uci::type::CapabilityAssessmentPointType& accessor) {
  delete dynamic_cast<asb_uci::type::CapabilityAssessmentPointType*>(&accessor);
}

} // namespace type

} // namespace uci

