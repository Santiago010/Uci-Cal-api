/** @file EW_CoordinationDataLinkIdentifierType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EW_CoordinationDataLinkIdentifierType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DataLinkIdentifierPET.h"
#include "../../../include/asb_uci/type/NetworkLinkID_Type.h"
#include "../../../include/asb_uci/type/SystemID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EW_CoordinationDataLinkIdentifierType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/NetworkLinkID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SystemID_Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EW_CoordinationDataLinkIdentifierType::EW_CoordinationDataLinkIdentifierType() = default;

EW_CoordinationDataLinkIdentifierType::~EW_CoordinationDataLinkIdentifierType() = default;

void EW_CoordinationDataLinkIdentifierType::copy(const uci::type::EW_CoordinationDataLinkIdentifierType& accessor) {
  copyImpl(accessor, false);
}

void EW_CoordinationDataLinkIdentifierType::copyImpl(const uci::type::EW_CoordinationDataLinkIdentifierType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataLinkIdentifierPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const EW_CoordinationDataLinkIdentifierType&>(accessor);
    if (accessorImpl.hasRequestNumber()) {
      setRequestNumber(accessorImpl.getRequestNumber());
    } else {
      clearRequestNumber();
    }
    setResponse(accessorImpl.response_Accessor);
    if (accessorImpl.sourceSystemID_Accessor) {
      setSourceSystemID(*(accessorImpl.sourceSystemID_Accessor));
    } else {
      sourceSystemID_Accessor.reset();
    }
    if (accessorImpl.destinationSystemID_Accessor) {
      setDestinationSystemID(*(accessorImpl.destinationSystemID_Accessor));
    } else {
      destinationSystemID_Accessor.reset();
    }
    if (accessorImpl.networkLinkID_Accessor) {
      setNetworkLinkID(*(accessorImpl.networkLinkID_Accessor));
    } else {
      networkLinkID_Accessor.reset();
    }
  }
}

void EW_CoordinationDataLinkIdentifierType::reset() noexcept {
  DataLinkIdentifierPET::reset();
  clearRequestNumber();
  response_Accessor = false;
  sourceSystemID_Accessor.reset();
  destinationSystemID_Accessor.reset();
  networkLinkID_Accessor.reset();
}

xs::UnsignedInt EW_CoordinationDataLinkIdentifierType::getRequestNumber() const {
  if (requestNumber_Accessor) {
    return *requestNumber_Accessor;
  }
  throw uci::base::UCIException("Error in getRequestNumber(): An attempt was made to get an optional field that was not enabled, call hasRequestNumber() to determine if it is safe to call getRequestNumber()");
}

uci::type::EW_CoordinationDataLinkIdentifierType& EW_CoordinationDataLinkIdentifierType::setRequestNumber(xs::UnsignedInt value) {
  requestNumber_Accessor = value;
  return *this;
}

bool EW_CoordinationDataLinkIdentifierType::hasRequestNumber() const noexcept {
  return requestNumber_Accessor.has_value();
}

uci::type::EW_CoordinationDataLinkIdentifierType& EW_CoordinationDataLinkIdentifierType::clearRequestNumber() noexcept {
  requestNumber_Accessor.reset();
  return *this;
}

xs::Boolean EW_CoordinationDataLinkIdentifierType::getResponse() const {
  return response_Accessor;
}

uci::type::EW_CoordinationDataLinkIdentifierType& EW_CoordinationDataLinkIdentifierType::setResponse(xs::Boolean value) {
  response_Accessor = value;
  return *this;
}


uci::type::SystemID_Type& EW_CoordinationDataLinkIdentifierType::getSourceSystemID_() const {
  if (sourceSystemID_Accessor) {
    return *sourceSystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceSystemID(): An attempt was made to get an optional field that was not enabled, call hasSourceSystemID() to determine if it is safe to call getSourceSystemID()");
}

const uci::type::SystemID_Type& EW_CoordinationDataLinkIdentifierType::getSourceSystemID() const {
  return getSourceSystemID_();
}

uci::type::SystemID_Type& EW_CoordinationDataLinkIdentifierType::getSourceSystemID() {
  return getSourceSystemID_();
}

uci::type::EW_CoordinationDataLinkIdentifierType& EW_CoordinationDataLinkIdentifierType::setSourceSystemID(const uci::type::SystemID_Type& accessor) {
  enableSourceSystemID();
  if (&accessor != sourceSystemID_Accessor.get()) {
    sourceSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EW_CoordinationDataLinkIdentifierType::hasSourceSystemID() const noexcept {
  return static_cast<bool>(sourceSystemID_Accessor);
}

uci::type::SystemID_Type& EW_CoordinationDataLinkIdentifierType::enableSourceSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!sourceSystemID_Accessor) || (sourceSystemID_Accessor->getAccessorType() != requestedType)) {
    sourceSystemID_Accessor = SystemID_Type::create(requestedType);
    if (!sourceSystemID_Accessor) {
      throw uci::base::UCIException("Error in enableSourceSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceSystemID_Accessor;
}

uci::type::EW_CoordinationDataLinkIdentifierType& EW_CoordinationDataLinkIdentifierType::clearSourceSystemID() noexcept {
  sourceSystemID_Accessor.reset();
  return *this;
}

uci::type::SystemID_Type& EW_CoordinationDataLinkIdentifierType::getDestinationSystemID_() const {
  if (destinationSystemID_Accessor) {
    return *destinationSystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getDestinationSystemID(): An attempt was made to get an optional field that was not enabled, call hasDestinationSystemID() to determine if it is safe to call getDestinationSystemID()");
}

const uci::type::SystemID_Type& EW_CoordinationDataLinkIdentifierType::getDestinationSystemID() const {
  return getDestinationSystemID_();
}

uci::type::SystemID_Type& EW_CoordinationDataLinkIdentifierType::getDestinationSystemID() {
  return getDestinationSystemID_();
}

uci::type::EW_CoordinationDataLinkIdentifierType& EW_CoordinationDataLinkIdentifierType::setDestinationSystemID(const uci::type::SystemID_Type& accessor) {
  enableDestinationSystemID();
  if (&accessor != destinationSystemID_Accessor.get()) {
    destinationSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EW_CoordinationDataLinkIdentifierType::hasDestinationSystemID() const noexcept {
  return static_cast<bool>(destinationSystemID_Accessor);
}

uci::type::SystemID_Type& EW_CoordinationDataLinkIdentifierType::enableDestinationSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!destinationSystemID_Accessor) || (destinationSystemID_Accessor->getAccessorType() != requestedType)) {
    destinationSystemID_Accessor = SystemID_Type::create(requestedType);
    if (!destinationSystemID_Accessor) {
      throw uci::base::UCIException("Error in enableDestinationSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *destinationSystemID_Accessor;
}

uci::type::EW_CoordinationDataLinkIdentifierType& EW_CoordinationDataLinkIdentifierType::clearDestinationSystemID() noexcept {
  destinationSystemID_Accessor.reset();
  return *this;
}

uci::type::NetworkLinkID_Type& EW_CoordinationDataLinkIdentifierType::getNetworkLinkID_() const {
  if (networkLinkID_Accessor) {
    return *networkLinkID_Accessor;
  }
  throw uci::base::UCIException("Error in getNetworkLinkID(): An attempt was made to get an optional field that was not enabled, call hasNetworkLinkID() to determine if it is safe to call getNetworkLinkID()");
}

const uci::type::NetworkLinkID_Type& EW_CoordinationDataLinkIdentifierType::getNetworkLinkID() const {
  return getNetworkLinkID_();
}

uci::type::NetworkLinkID_Type& EW_CoordinationDataLinkIdentifierType::getNetworkLinkID() {
  return getNetworkLinkID_();
}

uci::type::EW_CoordinationDataLinkIdentifierType& EW_CoordinationDataLinkIdentifierType::setNetworkLinkID(const uci::type::NetworkLinkID_Type& accessor) {
  enableNetworkLinkID();
  if (&accessor != networkLinkID_Accessor.get()) {
    networkLinkID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EW_CoordinationDataLinkIdentifierType::hasNetworkLinkID() const noexcept {
  return static_cast<bool>(networkLinkID_Accessor);
}

uci::type::NetworkLinkID_Type& EW_CoordinationDataLinkIdentifierType::enableNetworkLinkID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::networkLinkID_Type : type};
  if ((!networkLinkID_Accessor) || (networkLinkID_Accessor->getAccessorType() != requestedType)) {
    networkLinkID_Accessor = NetworkLinkID_Type::create(requestedType);
    if (!networkLinkID_Accessor) {
      throw uci::base::UCIException("Error in enableNetworkLinkID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *networkLinkID_Accessor;
}

uci::type::EW_CoordinationDataLinkIdentifierType& EW_CoordinationDataLinkIdentifierType::clearNetworkLinkID() noexcept {
  networkLinkID_Accessor.reset();
  return *this;
}

std::unique_ptr<EW_CoordinationDataLinkIdentifierType> EW_CoordinationDataLinkIdentifierType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eW_CoordinationDataLinkIdentifierType : type};
  return (requestedType == uci::type::accessorType::eW_CoordinationDataLinkIdentifierType) ? boost::make_unique<EW_CoordinationDataLinkIdentifierType>() : nullptr;
}

/**  */
namespace EW_CoordinationDataLinkIdentifierType_Names {

constexpr const char* Extern_Type_Name{"EW_CoordinationDataLinkIdentifierType"};
constexpr const char* RequestNumber_Name{"RequestNumber"};
constexpr const char* Response_Name{"Response"};
constexpr const char* SourceSystemID_Name{"SourceSystemID"};
constexpr const char* DestinationSystemID_Name{"DestinationSystemID"};
constexpr const char* NetworkLinkID_Name{"NetworkLinkID"};

} // namespace EW_CoordinationDataLinkIdentifierType_Names

void EW_CoordinationDataLinkIdentifierType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EW_CoordinationDataLinkIdentifierType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EW_CoordinationDataLinkIdentifierType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EW_CoordinationDataLinkIdentifierType_Names::RequestNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRequestNumber(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + EW_CoordinationDataLinkIdentifierType_Names::Response_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResponse(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + EW_CoordinationDataLinkIdentifierType_Names::SourceSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSourceSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EW_CoordinationDataLinkIdentifierType_Names::DestinationSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableDestinationSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EW_CoordinationDataLinkIdentifierType_Names::NetworkLinkID_Name) {
      NetworkLinkID_Type::deserialize(valueType.second, accessor.enableNetworkLinkID(), nodeName, nsPrefix);
    }
  }
  DataLinkIdentifierPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string EW_CoordinationDataLinkIdentifierType::serialize(const uci::type::EW_CoordinationDataLinkIdentifierType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EW_CoordinationDataLinkIdentifierType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EW_CoordinationDataLinkIdentifierType_Names::Extern_Type_Name);
  }
  DataLinkIdentifierPET::serialize(accessor, node, "", false, false, false);
  if (accessor.hasRequestNumber()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getRequestNumber(), node, EW_CoordinationDataLinkIdentifierType_Names::RequestNumber_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getResponse(), node, EW_CoordinationDataLinkIdentifierType_Names::Response_Name);
  if (accessor.hasSourceSystemID()) {
    SystemID_Type::serialize(accessor.getSourceSystemID(), node, EW_CoordinationDataLinkIdentifierType_Names::SourceSystemID_Name);
  }
  if (accessor.hasDestinationSystemID()) {
    SystemID_Type::serialize(accessor.getDestinationSystemID(), node, EW_CoordinationDataLinkIdentifierType_Names::DestinationSystemID_Name);
  }
  if (accessor.hasNetworkLinkID()) {
    NetworkLinkID_Type::serialize(accessor.getNetworkLinkID(), node, EW_CoordinationDataLinkIdentifierType_Names::NetworkLinkID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EW_CoordinationDataLinkIdentifierType& EW_CoordinationDataLinkIdentifierType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EW_CoordinationDataLinkIdentifierType>().release());
}

uci::type::EW_CoordinationDataLinkIdentifierType& EW_CoordinationDataLinkIdentifierType::create(const uci::type::EW_CoordinationDataLinkIdentifierType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EW_CoordinationDataLinkIdentifierType> newAccessor{boost::make_unique<asb_uci::type::EW_CoordinationDataLinkIdentifierType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EW_CoordinationDataLinkIdentifierType::destroy(uci::type::EW_CoordinationDataLinkIdentifierType& accessor) {
  delete dynamic_cast<asb_uci::type::EW_CoordinationDataLinkIdentifierType*>(&accessor);
}

} // namespace type

} // namespace uci

