/** @file DigitalFunctionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DigitalFunctionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/SupportCapabilityID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/DigitalFunctionType.h"
#include "uci/type/SupportCapabilityID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DigitalFunctionType::DigitalFunctionType() = default;

DigitalFunctionType::~DigitalFunctionType() = default;

void DigitalFunctionType::copy(const uci::type::DigitalFunctionType& accessor) {
  copyImpl(accessor, false);
}

void DigitalFunctionType::copyImpl(const uci::type::DigitalFunctionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DigitalFunctionType&>(accessor);
    if (accessorImpl.digitalPayloadCapabilityID_Accessor) {
      setDigitalPayloadCapabilityID(*(accessorImpl.digitalPayloadCapabilityID_Accessor));
    } else {
      digitalPayloadCapabilityID_Accessor.reset();
    }
    if (accessorImpl.mFA_SupportCapabilityID_Accessor) {
      setMFA_SupportCapabilityID(*(accessorImpl.mFA_SupportCapabilityID_Accessor));
    } else {
      mFA_SupportCapabilityID_Accessor.reset();
    }
  }
}

void DigitalFunctionType::reset() noexcept {
  digitalPayloadCapabilityID_Accessor.reset();
  mFA_SupportCapabilityID_Accessor.reset();
}

uci::type::DigitalFunctionType::DigitalFunctionTypeChoice DigitalFunctionType::getDigitalFunctionTypeChoiceOrdinal() const noexcept {
  if (digitalPayloadCapabilityID_Accessor) {
    return DIGITALFUNCTIONTYPE_CHOICE_DIGITALPAYLOADCAPABILITYID;
  }
  if (mFA_SupportCapabilityID_Accessor) {
    return DIGITALFUNCTIONTYPE_CHOICE_MFA_SUPPORTCAPABILITYID;
  }
  return DIGITALFUNCTIONTYPE_CHOICE_NONE;
}

uci::type::DigitalFunctionType& DigitalFunctionType::setDigitalFunctionTypeChoiceOrdinal(uci::type::DigitalFunctionType::DigitalFunctionTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case DIGITALFUNCTIONTYPE_CHOICE_DIGITALPAYLOADCAPABILITYID:
      chooseDigitalPayloadCapabilityID("setDigitalFunctionTypeChoiceOrdinal", type);
      break;
    case DIGITALFUNCTIONTYPE_CHOICE_MFA_SUPPORTCAPABILITYID:
      chooseMFA_SupportCapabilityID("setDigitalFunctionTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setDigitalFunctionTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::CapabilityID_Type& DigitalFunctionType::getDigitalPayloadCapabilityID_() const {
  if (digitalPayloadCapabilityID_Accessor) {
    return *digitalPayloadCapabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getDigitalPayloadCapabilityID(): Unable to get DigitalPayloadCapabilityID, field not selected");
}

const uci::type::CapabilityID_Type& DigitalFunctionType::getDigitalPayloadCapabilityID() const {
  return getDigitalPayloadCapabilityID_();
}

uci::type::CapabilityID_Type& DigitalFunctionType::getDigitalPayloadCapabilityID() {
  return getDigitalPayloadCapabilityID_();
}

uci::type::DigitalFunctionType& DigitalFunctionType::setDigitalPayloadCapabilityID(const uci::type::CapabilityID_Type& accessor) {
  chooseDigitalPayloadCapabilityID();
  if (&accessor != digitalPayloadCapabilityID_Accessor.get()) {
    digitalPayloadCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DigitalFunctionType::isDigitalPayloadCapabilityID() const noexcept {
  return static_cast<bool>(digitalPayloadCapabilityID_Accessor);
}

uci::type::CapabilityID_Type& DigitalFunctionType::chooseDigitalPayloadCapabilityID(const std::string& method, uci::base::accessorType::AccessorType type) {
  mFA_SupportCapabilityID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityID_Type : type};
  if ((!digitalPayloadCapabilityID_Accessor) || (digitalPayloadCapabilityID_Accessor->getAccessorType() != requestedType)) {
    digitalPayloadCapabilityID_Accessor = CapabilityID_Type::create(type);
    if (!digitalPayloadCapabilityID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *digitalPayloadCapabilityID_Accessor;
}

uci::type::CapabilityID_Type& DigitalFunctionType::chooseDigitalPayloadCapabilityID(uci::base::accessorType::AccessorType type) {
  return chooseDigitalPayloadCapabilityID("chooseDigitalPayloadCapabilityID", type);
}

uci::type::SupportCapabilityID_Type& DigitalFunctionType::getMFA_SupportCapabilityID_() const {
  if (mFA_SupportCapabilityID_Accessor) {
    return *mFA_SupportCapabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getMFA_SupportCapabilityID(): Unable to get MFA_SupportCapabilityID, field not selected");
}

const uci::type::SupportCapabilityID_Type& DigitalFunctionType::getMFA_SupportCapabilityID() const {
  return getMFA_SupportCapabilityID_();
}

uci::type::SupportCapabilityID_Type& DigitalFunctionType::getMFA_SupportCapabilityID() {
  return getMFA_SupportCapabilityID_();
}

uci::type::DigitalFunctionType& DigitalFunctionType::setMFA_SupportCapabilityID(const uci::type::SupportCapabilityID_Type& accessor) {
  chooseMFA_SupportCapabilityID();
  if (&accessor != mFA_SupportCapabilityID_Accessor.get()) {
    mFA_SupportCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DigitalFunctionType::isMFA_SupportCapabilityID() const noexcept {
  return static_cast<bool>(mFA_SupportCapabilityID_Accessor);
}

uci::type::SupportCapabilityID_Type& DigitalFunctionType::chooseMFA_SupportCapabilityID(const std::string& method, uci::base::accessorType::AccessorType type) {
  digitalPayloadCapabilityID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::supportCapabilityID_Type : type};
  if ((!mFA_SupportCapabilityID_Accessor) || (mFA_SupportCapabilityID_Accessor->getAccessorType() != requestedType)) {
    mFA_SupportCapabilityID_Accessor = SupportCapabilityID_Type::create(type);
    if (!mFA_SupportCapabilityID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mFA_SupportCapabilityID_Accessor;
}

uci::type::SupportCapabilityID_Type& DigitalFunctionType::chooseMFA_SupportCapabilityID(uci::base::accessorType::AccessorType type) {
  return chooseMFA_SupportCapabilityID("chooseMFA_SupportCapabilityID", type);
}

std::unique_ptr<DigitalFunctionType> DigitalFunctionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::digitalFunctionType : type};
  return (requestedType == uci::type::accessorType::digitalFunctionType) ? boost::make_unique<DigitalFunctionType>() : nullptr;
}

/**  */
namespace DigitalFunctionType_Names {

constexpr const char* Extern_Type_Name{"DigitalFunctionType"};
constexpr const char* DigitalPayloadCapabilityID_Name{"DigitalPayloadCapabilityID"};
constexpr const char* MFA_SupportCapabilityID_Name{"MFA_SupportCapabilityID"};

} // namespace DigitalFunctionType_Names

void DigitalFunctionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DigitalFunctionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DigitalFunctionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DigitalFunctionType_Names::DigitalPayloadCapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.chooseDigitalPayloadCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DigitalFunctionType_Names::MFA_SupportCapabilityID_Name) {
      SupportCapabilityID_Type::deserialize(valueType.second, accessor.chooseMFA_SupportCapabilityID(), nodeName, nsPrefix);
    }
  }
}

std::string DigitalFunctionType::serialize(const uci::type::DigitalFunctionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DigitalFunctionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DigitalFunctionType_Names::Extern_Type_Name);
  }
  if (accessor.isDigitalPayloadCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getDigitalPayloadCapabilityID(), node, DigitalFunctionType_Names::DigitalPayloadCapabilityID_Name);
  } else if (accessor.isMFA_SupportCapabilityID()) {
    SupportCapabilityID_Type::serialize(accessor.getMFA_SupportCapabilityID(), node, DigitalFunctionType_Names::MFA_SupportCapabilityID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DigitalFunctionType& DigitalFunctionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DigitalFunctionType>().release());
}

uci::type::DigitalFunctionType& DigitalFunctionType::create(const uci::type::DigitalFunctionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DigitalFunctionType> newAccessor{boost::make_unique<asb_uci::type::DigitalFunctionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DigitalFunctionType::destroy(uci::type::DigitalFunctionType& accessor) {
  delete dynamic_cast<asb_uci::type::DigitalFunctionType*>(&accessor);
}

} // namespace type

} // namespace uci

