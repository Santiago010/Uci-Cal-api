/** @file DMPI_TraceabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DMPI_TraceabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ATO_TraceabilityType.h"
#include "asb_uci/type/BasicEncyclopediaNumberType.h"
#include "asb_uci/type/GeoLocatedObjectType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ATO_TraceabilityType.h"
#include "uci/type/BasicEncyclopediaNumberType.h"
#include "uci/type/DMPI_TraceabilityType.h"
#include "uci/type/GeoLocatedObjectType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DMPI_TraceabilityType::DMPI_TraceabilityType() = default;

DMPI_TraceabilityType::~DMPI_TraceabilityType() = default;

void DMPI_TraceabilityType::copy(const uci::type::DMPI_TraceabilityType& accessor) {
  copyImpl(accessor, false);
}

void DMPI_TraceabilityType::copyImpl(const uci::type::DMPI_TraceabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DMPI_TraceabilityType&>(accessor);
    if (accessorImpl.bE_Number_Accessor) {
      setBE_Number(*(accessorImpl.bE_Number_Accessor));
    } else {
      bE_Number_Accessor.reset();
    }
    if (accessorImpl.traceObject_Accessor) {
      setTraceObject(*(accessorImpl.traceObject_Accessor));
    } else {
      traceObject_Accessor.reset();
    }
    if (accessorImpl.aTO_Traceability_Accessor) {
      setATO_Traceability(*(accessorImpl.aTO_Traceability_Accessor));
    } else {
      aTO_Traceability_Accessor.reset();
    }
  }
}

void DMPI_TraceabilityType::reset() noexcept {
  bE_Number_Accessor.reset();
  traceObject_Accessor.reset();
  aTO_Traceability_Accessor.reset();
}

uci::type::BasicEncyclopediaNumberType& DMPI_TraceabilityType::getBE_Number_() const {
  if (bE_Number_Accessor) {
    return *bE_Number_Accessor;
  }
  throw uci::base::UCIException("Error in getBE_Number(): An attempt was made to get an optional field that was not enabled, call hasBE_Number() to determine if it is safe to call getBE_Number()");
}

const uci::type::BasicEncyclopediaNumberType& DMPI_TraceabilityType::getBE_Number() const {
  return getBE_Number_();
}

uci::type::BasicEncyclopediaNumberType& DMPI_TraceabilityType::getBE_Number() {
  return getBE_Number_();
}

uci::type::DMPI_TraceabilityType& DMPI_TraceabilityType::setBE_Number(const uci::type::BasicEncyclopediaNumberType& accessor) {
  enableBE_Number();
  if (&accessor != bE_Number_Accessor.get()) {
    bE_Number_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_TraceabilityType::hasBE_Number() const noexcept {
  return static_cast<bool>(bE_Number_Accessor);
}

uci::type::BasicEncyclopediaNumberType& DMPI_TraceabilityType::enableBE_Number(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::basicEncyclopediaNumberType : type};
  if ((!bE_Number_Accessor) || (bE_Number_Accessor->getAccessorType() != requestedType)) {
    bE_Number_Accessor = BasicEncyclopediaNumberType::create(requestedType);
    if (!bE_Number_Accessor) {
      throw uci::base::UCIException("Error in enableBE_Number(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *bE_Number_Accessor;
}

uci::type::DMPI_TraceabilityType& DMPI_TraceabilityType::clearBE_Number() noexcept {
  bE_Number_Accessor.reset();
  return *this;
}

uci::type::GeoLocatedObjectType& DMPI_TraceabilityType::getTraceObject_() const {
  if (traceObject_Accessor) {
    return *traceObject_Accessor;
  }
  throw uci::base::UCIException("Error in getTraceObject(): An attempt was made to get an optional field that was not enabled, call hasTraceObject() to determine if it is safe to call getTraceObject()");
}

const uci::type::GeoLocatedObjectType& DMPI_TraceabilityType::getTraceObject() const {
  return getTraceObject_();
}

uci::type::GeoLocatedObjectType& DMPI_TraceabilityType::getTraceObject() {
  return getTraceObject_();
}

uci::type::DMPI_TraceabilityType& DMPI_TraceabilityType::setTraceObject(const uci::type::GeoLocatedObjectType& accessor) {
  enableTraceObject();
  if (&accessor != traceObject_Accessor.get()) {
    traceObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_TraceabilityType::hasTraceObject() const noexcept {
  return static_cast<bool>(traceObject_Accessor);
}

uci::type::GeoLocatedObjectType& DMPI_TraceabilityType::enableTraceObject(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::geoLocatedObjectType : type};
  if ((!traceObject_Accessor) || (traceObject_Accessor->getAccessorType() != requestedType)) {
    traceObject_Accessor = GeoLocatedObjectType::create(requestedType);
    if (!traceObject_Accessor) {
      throw uci::base::UCIException("Error in enableTraceObject(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *traceObject_Accessor;
}

uci::type::DMPI_TraceabilityType& DMPI_TraceabilityType::clearTraceObject() noexcept {
  traceObject_Accessor.reset();
  return *this;
}

uci::type::ATO_TraceabilityType& DMPI_TraceabilityType::getATO_Traceability_() const {
  if (aTO_Traceability_Accessor) {
    return *aTO_Traceability_Accessor;
  }
  throw uci::base::UCIException("Error in getATO_Traceability(): An attempt was made to get an optional field that was not enabled, call hasATO_Traceability() to determine if it is safe to call getATO_Traceability()");
}

const uci::type::ATO_TraceabilityType& DMPI_TraceabilityType::getATO_Traceability() const {
  return getATO_Traceability_();
}

uci::type::ATO_TraceabilityType& DMPI_TraceabilityType::getATO_Traceability() {
  return getATO_Traceability_();
}

uci::type::DMPI_TraceabilityType& DMPI_TraceabilityType::setATO_Traceability(const uci::type::ATO_TraceabilityType& accessor) {
  enableATO_Traceability(accessor.getAccessorType());
  if (&accessor != aTO_Traceability_Accessor.get()) {
    aTO_Traceability_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DMPI_TraceabilityType::hasATO_Traceability() const noexcept {
  return static_cast<bool>(aTO_Traceability_Accessor);
}

uci::type::ATO_TraceabilityType& DMPI_TraceabilityType::enableATO_Traceability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aTO_TraceabilityType : type};
  if ((!aTO_Traceability_Accessor) || (aTO_Traceability_Accessor->getAccessorType() != requestedType)) {
    aTO_Traceability_Accessor = ATO_TraceabilityType::create(requestedType);
    if (!aTO_Traceability_Accessor) {
      throw uci::base::UCIException("Error in enableATO_Traceability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aTO_Traceability_Accessor;
}

uci::type::DMPI_TraceabilityType& DMPI_TraceabilityType::clearATO_Traceability() noexcept {
  aTO_Traceability_Accessor.reset();
  return *this;
}

std::unique_ptr<DMPI_TraceabilityType> DMPI_TraceabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_TraceabilityType : type};
  return (requestedType == uci::type::accessorType::dMPI_TraceabilityType) ? boost::make_unique<DMPI_TraceabilityType>() : nullptr;
}

/**  */
namespace DMPI_TraceabilityType_Names {

constexpr const char* Extern_Type_Name{"DMPI_TraceabilityType"};
constexpr const char* BE_Number_Name{"BE_Number"};
constexpr const char* TraceObject_Name{"TraceObject"};
constexpr const char* ATO_Traceability_Name{"ATO_Traceability"};

} // namespace DMPI_TraceabilityType_Names

void DMPI_TraceabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DMPI_TraceabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DMPI_TraceabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DMPI_TraceabilityType_Names::BE_Number_Name) {
      BasicEncyclopediaNumberType::deserialize(valueType.second, accessor.enableBE_Number(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_TraceabilityType_Names::TraceObject_Name) {
      GeoLocatedObjectType::deserialize(valueType.second, accessor.enableTraceObject(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_TraceabilityType_Names::ATO_Traceability_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableATO_Traceability(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string DMPI_TraceabilityType::serialize(const uci::type::DMPI_TraceabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DMPI_TraceabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DMPI_TraceabilityType_Names::Extern_Type_Name);
  }
  if (accessor.hasBE_Number()) {
    BasicEncyclopediaNumberType::serialize(accessor.getBE_Number(), node, DMPI_TraceabilityType_Names::BE_Number_Name);
  }
  if (accessor.hasTraceObject()) {
    GeoLocatedObjectType::serialize(accessor.getTraceObject(), node, DMPI_TraceabilityType_Names::TraceObject_Name);
  }
  if (accessor.hasATO_Traceability()) {
    ATO_TraceabilityType::serialize(accessor.getATO_Traceability(), node, DMPI_TraceabilityType_Names::ATO_Traceability_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DMPI_TraceabilityType& DMPI_TraceabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DMPI_TraceabilityType>().release());
}

uci::type::DMPI_TraceabilityType& DMPI_TraceabilityType::create(const uci::type::DMPI_TraceabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DMPI_TraceabilityType> newAccessor{boost::make_unique<asb_uci::type::DMPI_TraceabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DMPI_TraceabilityType::destroy(uci::type::DMPI_TraceabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::DMPI_TraceabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

