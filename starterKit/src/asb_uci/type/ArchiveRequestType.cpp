/** @file ArchiveRequestType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ArchiveRequestType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ArchiveRequestType.h"
#include "uci/type/DateTimeType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ArchiveRequestType::ArchiveRequestType() = default;

ArchiveRequestType::~ArchiveRequestType() = default;

void ArchiveRequestType::copy(const uci::type::ArchiveRequestType& accessor) {
  copyImpl(accessor, false);
}

void ArchiveRequestType::copyImpl(const uci::type::ArchiveRequestType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ArchiveRequestType&>(accessor);
    time_Accessor = (accessorImpl.time_Accessor ? accessorImpl.time_Accessor : boost::none);
    numberOfDays_Accessor = (accessorImpl.numberOfDays_Accessor ? accessorImpl.numberOfDays_Accessor : boost::none);
    spaceNeeded_Accessor = (accessorImpl.spaceNeeded_Accessor ? accessorImpl.spaceNeeded_Accessor : boost::none);
    manuallyDeleted_Accessor = (accessorImpl.manuallyDeleted_Accessor ? accessorImpl.manuallyDeleted_Accessor : boost::none);
    numberOfMissions_Accessor = (accessorImpl.numberOfMissions_Accessor ? accessorImpl.numberOfMissions_Accessor : boost::none);
  }
}

void ArchiveRequestType::reset() noexcept {
  time_Accessor.reset();
  numberOfDays_Accessor.reset();
  spaceNeeded_Accessor.reset();
  manuallyDeleted_Accessor.reset();
  numberOfMissions_Accessor.reset();
}

uci::type::ArchiveRequestType::ArchiveRequestTypeChoice ArchiveRequestType::getArchiveRequestTypeChoiceOrdinal() const noexcept {
  if (time_Accessor) {
    return ARCHIVEREQUESTTYPE_CHOICE_TIME;
  }
  if (numberOfDays_Accessor) {
    return ARCHIVEREQUESTTYPE_CHOICE_NUMBEROFDAYS;
  }
  if (spaceNeeded_Accessor) {
    return ARCHIVEREQUESTTYPE_CHOICE_SPACENEEDED;
  }
  if (manuallyDeleted_Accessor) {
    return ARCHIVEREQUESTTYPE_CHOICE_MANUALLYDELETED;
  }
  if (numberOfMissions_Accessor) {
    return ARCHIVEREQUESTTYPE_CHOICE_NUMBEROFMISSIONS;
  }
  return ARCHIVEREQUESTTYPE_CHOICE_NONE;
}

uci::type::ArchiveRequestType& ArchiveRequestType::setArchiveRequestTypeChoiceOrdinal(uci::type::ArchiveRequestType::ArchiveRequestTypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case ARCHIVEREQUESTTYPE_CHOICE_TIME:
      chooseTime();
      break;
    case ARCHIVEREQUESTTYPE_CHOICE_NUMBEROFDAYS:
      chooseNumberOfDays();
      break;
    case ARCHIVEREQUESTTYPE_CHOICE_SPACENEEDED:
      chooseSpaceNeeded();
      break;
    case ARCHIVEREQUESTTYPE_CHOICE_MANUALLYDELETED:
      chooseManuallyDeleted();
      break;
    case ARCHIVEREQUESTTYPE_CHOICE_NUMBEROFMISSIONS:
      chooseNumberOfMissions();
      break;
    default:
      throw uci::base::UCIException("Error in setArchiveRequestTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::DateTimeTypeValue ArchiveRequestType::getTime() const {
  if (time_Accessor) {
    return *time_Accessor;
  }
  throw uci::base::UCIException("Error in getTime(): Unable to get Time, field not selected");
}

uci::type::ArchiveRequestType& ArchiveRequestType::setTime(uci::type::DateTimeTypeValue value) {
  chooseTime();
  time_Accessor = value;
  return *this;
}

bool ArchiveRequestType::isTime() const noexcept {
  return static_cast<bool>(time_Accessor);
}

void ArchiveRequestType::chooseTime() {
  numberOfDays_Accessor.reset();
  spaceNeeded_Accessor.reset();
  manuallyDeleted_Accessor.reset();
  numberOfMissions_Accessor.reset();
  if (!time_Accessor) {
    time_Accessor = boost::optional<asb_xs::DateTime>();
  }
}

xs::UnsignedInt ArchiveRequestType::getNumberOfDays() const {
  if (numberOfDays_Accessor) {
    return *numberOfDays_Accessor;
  }
  throw uci::base::UCIException("Error in getNumberOfDays(): Unable to get NumberOfDays, field not selected");
}

uci::type::ArchiveRequestType& ArchiveRequestType::setNumberOfDays(xs::UnsignedInt value) {
  chooseNumberOfDays();
  numberOfDays_Accessor = value;
  return *this;
}

bool ArchiveRequestType::isNumberOfDays() const noexcept {
  return static_cast<bool>(numberOfDays_Accessor);
}

void ArchiveRequestType::chooseNumberOfDays() {
  time_Accessor.reset();
  spaceNeeded_Accessor.reset();
  manuallyDeleted_Accessor.reset();
  numberOfMissions_Accessor.reset();
  if (!numberOfDays_Accessor) {
    numberOfDays_Accessor = boost::optional<asb_xs::UnsignedInt>();
  }
}

xs::Boolean ArchiveRequestType::getSpaceNeeded() const {
  if (spaceNeeded_Accessor) {
    return *spaceNeeded_Accessor;
  }
  throw uci::base::UCIException("Error in getSpaceNeeded(): Unable to get SpaceNeeded, field not selected");
}

uci::type::ArchiveRequestType& ArchiveRequestType::setSpaceNeeded(xs::Boolean value) {
  chooseSpaceNeeded();
  spaceNeeded_Accessor = value;
  return *this;
}

bool ArchiveRequestType::isSpaceNeeded() const noexcept {
  return static_cast<bool>(spaceNeeded_Accessor);
}

void ArchiveRequestType::chooseSpaceNeeded() {
  time_Accessor.reset();
  numberOfDays_Accessor.reset();
  manuallyDeleted_Accessor.reset();
  numberOfMissions_Accessor.reset();
  if (!spaceNeeded_Accessor) {
    spaceNeeded_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

xs::Boolean ArchiveRequestType::getManuallyDeleted() const {
  if (manuallyDeleted_Accessor) {
    return *manuallyDeleted_Accessor;
  }
  throw uci::base::UCIException("Error in getManuallyDeleted(): Unable to get ManuallyDeleted, field not selected");
}

uci::type::ArchiveRequestType& ArchiveRequestType::setManuallyDeleted(xs::Boolean value) {
  chooseManuallyDeleted();
  manuallyDeleted_Accessor = value;
  return *this;
}

bool ArchiveRequestType::isManuallyDeleted() const noexcept {
  return static_cast<bool>(manuallyDeleted_Accessor);
}

void ArchiveRequestType::chooseManuallyDeleted() {
  time_Accessor.reset();
  numberOfDays_Accessor.reset();
  spaceNeeded_Accessor.reset();
  numberOfMissions_Accessor.reset();
  if (!manuallyDeleted_Accessor) {
    manuallyDeleted_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

xs::UnsignedInt ArchiveRequestType::getNumberOfMissions() const {
  if (numberOfMissions_Accessor) {
    return *numberOfMissions_Accessor;
  }
  throw uci::base::UCIException("Error in getNumberOfMissions(): Unable to get NumberOfMissions, field not selected");
}

uci::type::ArchiveRequestType& ArchiveRequestType::setNumberOfMissions(xs::UnsignedInt value) {
  chooseNumberOfMissions();
  numberOfMissions_Accessor = value;
  return *this;
}

bool ArchiveRequestType::isNumberOfMissions() const noexcept {
  return static_cast<bool>(numberOfMissions_Accessor);
}

void ArchiveRequestType::chooseNumberOfMissions() {
  time_Accessor.reset();
  numberOfDays_Accessor.reset();
  spaceNeeded_Accessor.reset();
  manuallyDeleted_Accessor.reset();
  if (!numberOfMissions_Accessor) {
    numberOfMissions_Accessor = boost::optional<asb_xs::UnsignedInt>();
  }
}

std::unique_ptr<ArchiveRequestType> ArchiveRequestType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::archiveRequestType : type};
  return (requestedType == uci::type::accessorType::archiveRequestType) ? boost::make_unique<ArchiveRequestType>() : nullptr;
}

/**  */
namespace ArchiveRequestType_Names {

constexpr const char* Extern_Type_Name{"ArchiveRequestType"};
constexpr const char* Time_Name{"Time"};
constexpr const char* NumberOfDays_Name{"NumberOfDays"};
constexpr const char* SpaceNeeded_Name{"SpaceNeeded"};
constexpr const char* ManuallyDeleted_Name{"ManuallyDeleted"};
constexpr const char* NumberOfMissions_Name{"NumberOfMissions"};

} // namespace ArchiveRequestType_Names

void ArchiveRequestType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ArchiveRequestType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ArchiveRequestType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ArchiveRequestType_Names::Time_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + ArchiveRequestType_Names::NumberOfDays_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfDays(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ArchiveRequestType_Names::SpaceNeeded_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpaceNeeded(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ArchiveRequestType_Names::ManuallyDeleted_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setManuallyDeleted(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ArchiveRequestType_Names::NumberOfMissions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfMissions(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string ArchiveRequestType::serialize(const uci::type::ArchiveRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ArchiveRequestType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ArchiveRequestType_Names::Extern_Type_Name);
  }
  if (accessor.isTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getTime(), node, ArchiveRequestType_Names::Time_Name);
  } else if (accessor.isNumberOfDays()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumberOfDays(), node, ArchiveRequestType_Names::NumberOfDays_Name);
  } else if (accessor.isSpaceNeeded()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSpaceNeeded(), node, ArchiveRequestType_Names::SpaceNeeded_Name);
  } else if (accessor.isManuallyDeleted()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getManuallyDeleted(), node, ArchiveRequestType_Names::ManuallyDeleted_Name);
  } else if (accessor.isNumberOfMissions()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumberOfMissions(), node, ArchiveRequestType_Names::NumberOfMissions_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ArchiveRequestType& ArchiveRequestType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ArchiveRequestType>().release());
}

uci::type::ArchiveRequestType& ArchiveRequestType::create(const uci::type::ArchiveRequestType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ArchiveRequestType> newAccessor{boost::make_unique<asb_uci::type::ArchiveRequestType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ArchiveRequestType::destroy(uci::type::ArchiveRequestType& accessor) {
  delete dynamic_cast<asb_uci::type::ArchiveRequestType*>(&accessor);
}

} // namespace type

} // namespace uci

