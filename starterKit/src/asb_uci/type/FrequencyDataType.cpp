/** @file FrequencyDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/FrequencyDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EmptyType.h"
#include "asb_uci/type/FrequencyAgilityPatternEnum.h"
#include "asb_uci/type/FrequencyDataBaseType.h"
#include "asb_uci/type/FrequencyPatternPeriodicityEnum.h"
#include "asb_uci/type/FrequencySwitchingEnum.h"
#include "asb_uci/type/FrequencySwitchingPatternEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DurationType.h"
#include "uci/type/EmptyType.h"
#include "uci/type/FrequencyAgilityPatternEnum.h"
#include "uci/type/FrequencyDataType.h"
#include "uci/type/FrequencyPatternPeriodicityEnum.h"
#include "uci/type/FrequencySwitchingEnum.h"
#include "uci/type/FrequencySwitchingPatternEnum.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FrequencyDataType::FrequencyDataType() = default;

FrequencyDataType::~FrequencyDataType() = default;

void FrequencyDataType::copy(const uci::type::FrequencyDataType& accessor) {
  copyImpl(accessor, false);
}

void FrequencyDataType::copyImpl(const uci::type::FrequencyDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    FrequencyDataBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const FrequencyDataType&>(accessor);
    if (accessorImpl.agilityPattern_Accessor) {
      setAgilityPattern(*(accessorImpl.agilityPattern_Accessor));
    } else {
      agilityPattern_Accessor.reset();
    }
    if (accessorImpl.agilityValues_Accessor) {
      setAgilityValues(*(accessorImpl.agilityValues_Accessor));
    } else {
      agilityValues_Accessor.reset();
    }
    if (accessorImpl.agilityPeriodicity_Accessor) {
      setAgilityPeriodicity(*(accessorImpl.agilityPeriodicity_Accessor));
    } else {
      agilityPeriodicity_Accessor.reset();
    }
    if (accessorImpl.agileEmitter_Accessor) {
      setAgileEmitter(*(accessorImpl.agileEmitter_Accessor));
    } else {
      agileEmitter_Accessor.reset();
    }
    if (accessorImpl.switchingValues_Accessor) {
      setSwitchingValues(*(accessorImpl.switchingValues_Accessor));
    } else {
      switchingValues_Accessor.reset();
    }
    if (accessorImpl.hasModulationPatternPeriod()) {
      setModulationPatternPeriod(accessorImpl.getModulationPatternPeriod());
    } else {
      clearModulationPatternPeriod();
    }
    if (accessorImpl.hasFrequencyBins()) {
      setFrequencyBins(accessorImpl.getFrequencyBins());
    } else {
      clearFrequencyBins();
    }
  }
}

void FrequencyDataType::reset() noexcept {
  FrequencyDataBaseType::reset();
  agilityPattern_Accessor.reset();
  agilityValues_Accessor.reset();
  agilityPeriodicity_Accessor.reset();
  agileEmitter_Accessor.reset();
  switchingValues_Accessor.reset();
  clearModulationPatternPeriod();
  clearFrequencyBins();
}

uci::type::FrequencyAgilityPatternEnum& FrequencyDataType::getAgilityPattern_() const {
  if (agilityPattern_Accessor) {
    return *agilityPattern_Accessor;
  }
  throw uci::base::UCIException("Error in getAgilityPattern(): An attempt was made to get an optional field that was not enabled, call hasAgilityPattern() to determine if it is safe to call getAgilityPattern()");
}

const uci::type::FrequencyAgilityPatternEnum& FrequencyDataType::getAgilityPattern() const {
  return getAgilityPattern_();
}

uci::type::FrequencyAgilityPatternEnum& FrequencyDataType::getAgilityPattern() {
  return getAgilityPattern_();
}

uci::type::FrequencyDataType& FrequencyDataType::setAgilityPattern(const uci::type::FrequencyAgilityPatternEnum& accessor) {
  enableAgilityPattern();
  if (&accessor != agilityPattern_Accessor.get()) {
    agilityPattern_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FrequencyDataType& FrequencyDataType::setAgilityPattern(const uci::type::FrequencyAgilityPatternEnum::EnumerationItem value) {
  enableAgilityPattern().setValue(value);
  return *this;
}

bool FrequencyDataType::hasAgilityPattern() const noexcept {
  return static_cast<bool>(agilityPattern_Accessor);
}

uci::type::FrequencyAgilityPatternEnum& FrequencyDataType::enableAgilityPattern(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyAgilityPatternEnum : type};
  if ((!agilityPattern_Accessor) || (agilityPattern_Accessor->getAccessorType() != requestedType)) {
    agilityPattern_Accessor = FrequencyAgilityPatternEnum::create(requestedType);
    if (!agilityPattern_Accessor) {
      throw uci::base::UCIException("Error in enableAgilityPattern(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *agilityPattern_Accessor;
}

uci::type::FrequencyDataType& FrequencyDataType::clearAgilityPattern() noexcept {
  agilityPattern_Accessor.reset();
  return *this;
}

uci::type::FrequencySwitchingEnum& FrequencyDataType::getAgilityValues_() const {
  if (agilityValues_Accessor) {
    return *agilityValues_Accessor;
  }
  throw uci::base::UCIException("Error in getAgilityValues(): An attempt was made to get an optional field that was not enabled, call hasAgilityValues() to determine if it is safe to call getAgilityValues()");
}

const uci::type::FrequencySwitchingEnum& FrequencyDataType::getAgilityValues() const {
  return getAgilityValues_();
}

uci::type::FrequencySwitchingEnum& FrequencyDataType::getAgilityValues() {
  return getAgilityValues_();
}

uci::type::FrequencyDataType& FrequencyDataType::setAgilityValues(const uci::type::FrequencySwitchingEnum& accessor) {
  enableAgilityValues();
  if (&accessor != agilityValues_Accessor.get()) {
    agilityValues_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FrequencyDataType& FrequencyDataType::setAgilityValues(const uci::type::FrequencySwitchingEnum::EnumerationItem value) {
  enableAgilityValues().setValue(value);
  return *this;
}

bool FrequencyDataType::hasAgilityValues() const noexcept {
  return static_cast<bool>(agilityValues_Accessor);
}

uci::type::FrequencySwitchingEnum& FrequencyDataType::enableAgilityValues(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencySwitchingEnum : type};
  if ((!agilityValues_Accessor) || (agilityValues_Accessor->getAccessorType() != requestedType)) {
    agilityValues_Accessor = FrequencySwitchingEnum::create(requestedType);
    if (!agilityValues_Accessor) {
      throw uci::base::UCIException("Error in enableAgilityValues(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *agilityValues_Accessor;
}

uci::type::FrequencyDataType& FrequencyDataType::clearAgilityValues() noexcept {
  agilityValues_Accessor.reset();
  return *this;
}

uci::type::FrequencyPatternPeriodicityEnum& FrequencyDataType::getAgilityPeriodicity_() const {
  if (agilityPeriodicity_Accessor) {
    return *agilityPeriodicity_Accessor;
  }
  throw uci::base::UCIException("Error in getAgilityPeriodicity(): An attempt was made to get an optional field that was not enabled, call hasAgilityPeriodicity() to determine if it is safe to call getAgilityPeriodicity()");
}

const uci::type::FrequencyPatternPeriodicityEnum& FrequencyDataType::getAgilityPeriodicity() const {
  return getAgilityPeriodicity_();
}

uci::type::FrequencyPatternPeriodicityEnum& FrequencyDataType::getAgilityPeriodicity() {
  return getAgilityPeriodicity_();
}

uci::type::FrequencyDataType& FrequencyDataType::setAgilityPeriodicity(const uci::type::FrequencyPatternPeriodicityEnum& accessor) {
  enableAgilityPeriodicity();
  if (&accessor != agilityPeriodicity_Accessor.get()) {
    agilityPeriodicity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FrequencyDataType& FrequencyDataType::setAgilityPeriodicity(const uci::type::FrequencyPatternPeriodicityEnum::EnumerationItem value) {
  enableAgilityPeriodicity().setValue(value);
  return *this;
}

bool FrequencyDataType::hasAgilityPeriodicity() const noexcept {
  return static_cast<bool>(agilityPeriodicity_Accessor);
}

uci::type::FrequencyPatternPeriodicityEnum& FrequencyDataType::enableAgilityPeriodicity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyPatternPeriodicityEnum : type};
  if ((!agilityPeriodicity_Accessor) || (agilityPeriodicity_Accessor->getAccessorType() != requestedType)) {
    agilityPeriodicity_Accessor = FrequencyPatternPeriodicityEnum::create(requestedType);
    if (!agilityPeriodicity_Accessor) {
      throw uci::base::UCIException("Error in enableAgilityPeriodicity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *agilityPeriodicity_Accessor;
}

uci::type::FrequencyDataType& FrequencyDataType::clearAgilityPeriodicity() noexcept {
  agilityPeriodicity_Accessor.reset();
  return *this;
}

uci::type::EmptyType& FrequencyDataType::getAgileEmitter_() const {
  if (agileEmitter_Accessor) {
    return *agileEmitter_Accessor;
  }
  throw uci::base::UCIException("Error in getAgileEmitter(): An attempt was made to get an optional field that was not enabled, call hasAgileEmitter() to determine if it is safe to call getAgileEmitter()");
}

const uci::type::EmptyType& FrequencyDataType::getAgileEmitter() const {
  return getAgileEmitter_();
}

uci::type::EmptyType& FrequencyDataType::getAgileEmitter() {
  return getAgileEmitter_();
}

uci::type::FrequencyDataType& FrequencyDataType::setAgileEmitter(const uci::type::EmptyType& value) {
  return setAgileEmitter(value.c_str());
}

uci::type::FrequencyDataType& FrequencyDataType::setAgileEmitter(const std::string& value) {
  return setAgileEmitter(value.c_str());
}

uci::type::FrequencyDataType& FrequencyDataType::setAgileEmitter(const char* value) {
  enableAgileEmitter().setStringValue(value);
  return *this;
}

bool FrequencyDataType::hasAgileEmitter() const noexcept {
  return static_cast<bool>(agileEmitter_Accessor);
}

uci::type::EmptyType& FrequencyDataType::enableAgileEmitter(uci::base::accessorType::AccessorType type) {
  if (!agileEmitter_Accessor) {
    agileEmitter_Accessor = EmptyType::create(type);
  }
  return *agileEmitter_Accessor;
}

uci::type::FrequencyDataType& FrequencyDataType::clearAgileEmitter() noexcept {
  agileEmitter_Accessor.reset();
  return *this;
}

uci::type::FrequencySwitchingPatternEnum& FrequencyDataType::getSwitchingValues_() const {
  if (switchingValues_Accessor) {
    return *switchingValues_Accessor;
  }
  throw uci::base::UCIException("Error in getSwitchingValues(): An attempt was made to get an optional field that was not enabled, call hasSwitchingValues() to determine if it is safe to call getSwitchingValues()");
}

const uci::type::FrequencySwitchingPatternEnum& FrequencyDataType::getSwitchingValues() const {
  return getSwitchingValues_();
}

uci::type::FrequencySwitchingPatternEnum& FrequencyDataType::getSwitchingValues() {
  return getSwitchingValues_();
}

uci::type::FrequencyDataType& FrequencyDataType::setSwitchingValues(const uci::type::FrequencySwitchingPatternEnum& accessor) {
  enableSwitchingValues();
  if (&accessor != switchingValues_Accessor.get()) {
    switchingValues_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FrequencyDataType& FrequencyDataType::setSwitchingValues(const uci::type::FrequencySwitchingPatternEnum::EnumerationItem value) {
  enableSwitchingValues().setValue(value);
  return *this;
}

bool FrequencyDataType::hasSwitchingValues() const noexcept {
  return static_cast<bool>(switchingValues_Accessor);
}

uci::type::FrequencySwitchingPatternEnum& FrequencyDataType::enableSwitchingValues(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencySwitchingPatternEnum : type};
  if ((!switchingValues_Accessor) || (switchingValues_Accessor->getAccessorType() != requestedType)) {
    switchingValues_Accessor = FrequencySwitchingPatternEnum::create(requestedType);
    if (!switchingValues_Accessor) {
      throw uci::base::UCIException("Error in enableSwitchingValues(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *switchingValues_Accessor;
}

uci::type::FrequencyDataType& FrequencyDataType::clearSwitchingValues() noexcept {
  switchingValues_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue FrequencyDataType::getModulationPatternPeriod() const {
  if (modulationPatternPeriod_Accessor) {
    return *modulationPatternPeriod_Accessor;
  }
  throw uci::base::UCIException("Error in getModulationPatternPeriod(): An attempt was made to get an optional field that was not enabled, call hasModulationPatternPeriod() to determine if it is safe to call getModulationPatternPeriod()");
}

uci::type::FrequencyDataType& FrequencyDataType::setModulationPatternPeriod(uci::type::DurationTypeValue value) {
  modulationPatternPeriod_Accessor = value;
  return *this;
}

bool FrequencyDataType::hasModulationPatternPeriod() const noexcept {
  return modulationPatternPeriod_Accessor.has_value();
}

uci::type::FrequencyDataType& FrequencyDataType::clearModulationPatternPeriod() noexcept {
  modulationPatternPeriod_Accessor.reset();
  return *this;
}

xs::UnsignedInt FrequencyDataType::getFrequencyBins() const {
  if (frequencyBins_Accessor) {
    return *frequencyBins_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequencyBins(): An attempt was made to get an optional field that was not enabled, call hasFrequencyBins() to determine if it is safe to call getFrequencyBins()");
}

uci::type::FrequencyDataType& FrequencyDataType::setFrequencyBins(xs::UnsignedInt value) {
  frequencyBins_Accessor = value;
  return *this;
}

bool FrequencyDataType::hasFrequencyBins() const noexcept {
  return frequencyBins_Accessor.has_value();
}

uci::type::FrequencyDataType& FrequencyDataType::clearFrequencyBins() noexcept {
  frequencyBins_Accessor.reset();
  return *this;
}

std::unique_ptr<FrequencyDataType> FrequencyDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyDataType : type};
  return (requestedType == uci::type::accessorType::frequencyDataType) ? boost::make_unique<FrequencyDataType>() : nullptr;
}

/**  */
namespace FrequencyDataType_Names {

constexpr const char* Extern_Type_Name{"FrequencyDataType"};
constexpr const char* AgilityPattern_Name{"AgilityPattern"};
constexpr const char* AgilityValues_Name{"AgilityValues"};
constexpr const char* AgilityPeriodicity_Name{"AgilityPeriodicity"};
constexpr const char* AgileEmitter_Name{"AgileEmitter"};
constexpr const char* SwitchingValues_Name{"SwitchingValues"};
constexpr const char* ModulationPatternPeriod_Name{"ModulationPatternPeriod"};
constexpr const char* FrequencyBins_Name{"FrequencyBins"};

} // namespace FrequencyDataType_Names

void FrequencyDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FrequencyDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FrequencyDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::AgilityPattern_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAgilityPattern().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::AgilityValues_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAgilityValues().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::AgilityPeriodicity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAgilityPeriodicity().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::AgileEmitter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAgileEmitter(*value);
      }
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::SwitchingValues_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSwitchingValues().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::ModulationPatternPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setModulationPatternPeriod(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::FrequencyBins_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyBins(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
  FrequencyDataBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string FrequencyDataType::serialize(const uci::type::FrequencyDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FrequencyDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FrequencyDataType_Names::Extern_Type_Name);
  }
  FrequencyDataBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasAgilityPattern()) {
    FrequencyAgilityPatternEnum::serialize(accessor.getAgilityPattern(), node, FrequencyDataType_Names::AgilityPattern_Name, false);
  }
  if (accessor.hasAgilityValues()) {
    FrequencySwitchingEnum::serialize(accessor.getAgilityValues(), node, FrequencyDataType_Names::AgilityValues_Name, false);
  }
  if (accessor.hasAgilityPeriodicity()) {
    FrequencyPatternPeriodicityEnum::serialize(accessor.getAgilityPeriodicity(), node, FrequencyDataType_Names::AgilityPeriodicity_Name, false);
  }
  if (accessor.hasAgileEmitter()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getAgileEmitter(), node, FrequencyDataType_Names::AgileEmitter_Name);
  }
  if (accessor.hasSwitchingValues()) {
    FrequencySwitchingPatternEnum::serialize(accessor.getSwitchingValues(), node, FrequencyDataType_Names::SwitchingValues_Name, false);
  }
  if (accessor.hasModulationPatternPeriod()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getModulationPatternPeriod(), node, FrequencyDataType_Names::ModulationPatternPeriod_Name);
  }
  if (accessor.hasFrequencyBins()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getFrequencyBins(), node, FrequencyDataType_Names::FrequencyBins_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FrequencyDataType& FrequencyDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FrequencyDataType>().release());
}

uci::type::FrequencyDataType& FrequencyDataType::create(const uci::type::FrequencyDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FrequencyDataType> newAccessor{boost::make_unique<asb_uci::type::FrequencyDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FrequencyDataType::destroy(uci::type::FrequencyDataType& accessor) {
  delete dynamic_cast<asb_uci::type::FrequencyDataType*>(&accessor);
}

} // namespace type

} // namespace uci

