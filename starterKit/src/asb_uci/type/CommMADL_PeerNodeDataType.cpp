/** @file CommMADL_PeerNodeDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommMADL_PeerNodeDataType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommMADL_AircraftTypeEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_AircraftTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_PeerNodeDataType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MADL_NodeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ShortPositiveType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommMADL_PeerNodeDataType::CommMADL_PeerNodeDataType()
  : peerAircraftType_Accessor{boost::make_unique<CommMADL_AircraftTypeEnum>()} {
}

CommMADL_PeerNodeDataType::~CommMADL_PeerNodeDataType() = default;

void CommMADL_PeerNodeDataType::copy(const uci::type::CommMADL_PeerNodeDataType& accessor) {
  copyImpl(accessor, false);
}

void CommMADL_PeerNodeDataType::copyImpl(const uci::type::CommMADL_PeerNodeDataType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommMADL_PeerNodeDataType&>(accessor);
    setPeerNodeIdentifier(accessorImpl.peerNodeIdentifier_Accessor);
    setPeerMADL_UniqueIdentifier(accessorImpl.peerMADL_UniqueIdentifier_Accessor);
    setPeerAircraftType(*(accessorImpl.peerAircraftType_Accessor));
    setDataCapable(accessorImpl.dataCapable_Accessor);
    setVoiceCapable(accessorImpl.voiceCapable_Accessor);
  }
}

void CommMADL_PeerNodeDataType::reset() noexcept {
  peerNodeIdentifier_Accessor = 0;
  peerMADL_UniqueIdentifier_Accessor = 0;
  peerAircraftType_Accessor->reset();
  dataCapable_Accessor = false;
  voiceCapable_Accessor = false;
}

uci::type::MADL_NodeRangeTypeValue CommMADL_PeerNodeDataType::getPeerNodeIdentifier() const {
  return peerNodeIdentifier_Accessor;
}

uci::type::CommMADL_PeerNodeDataType& CommMADL_PeerNodeDataType::setPeerNodeIdentifier(uci::type::MADL_NodeRangeTypeValue value) {
  peerNodeIdentifier_Accessor = value;
  return *this;
}


uci::type::ShortPositiveTypeValue CommMADL_PeerNodeDataType::getPeerMADL_UniqueIdentifier() const {
  return peerMADL_UniqueIdentifier_Accessor;
}

uci::type::CommMADL_PeerNodeDataType& CommMADL_PeerNodeDataType::setPeerMADL_UniqueIdentifier(uci::type::ShortPositiveTypeValue value) {
  peerMADL_UniqueIdentifier_Accessor = value;
  return *this;
}


const uci::type::CommMADL_AircraftTypeEnum& CommMADL_PeerNodeDataType::getPeerAircraftType() const {
  return *peerAircraftType_Accessor;
}

uci::type::CommMADL_AircraftTypeEnum& CommMADL_PeerNodeDataType::getPeerAircraftType() {
  return *peerAircraftType_Accessor;
}

uci::type::CommMADL_PeerNodeDataType& CommMADL_PeerNodeDataType::setPeerAircraftType(const uci::type::CommMADL_AircraftTypeEnum& accessor) {
  if (&accessor != peerAircraftType_Accessor.get()) {
    peerAircraftType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommMADL_PeerNodeDataType& CommMADL_PeerNodeDataType::setPeerAircraftType(uci::type::CommMADL_AircraftTypeEnum::EnumerationItem value) {
  peerAircraftType_Accessor->setValue(value);
  return *this;
}


xs::Boolean CommMADL_PeerNodeDataType::getDataCapable() const {
  return dataCapable_Accessor;
}

uci::type::CommMADL_PeerNodeDataType& CommMADL_PeerNodeDataType::setDataCapable(xs::Boolean value) {
  dataCapable_Accessor = value;
  return *this;
}


xs::Boolean CommMADL_PeerNodeDataType::getVoiceCapable() const {
  return voiceCapable_Accessor;
}

uci::type::CommMADL_PeerNodeDataType& CommMADL_PeerNodeDataType::setVoiceCapable(xs::Boolean value) {
  voiceCapable_Accessor = value;
  return *this;
}


std::unique_ptr<CommMADL_PeerNodeDataType> CommMADL_PeerNodeDataType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commMADL_PeerNodeDataType : type};
  return (requestedType == uci::type::accessorType::commMADL_PeerNodeDataType) ? boost::make_unique<CommMADL_PeerNodeDataType>() : nullptr;
}

/**  */
namespace CommMADL_PeerNodeDataType_Names {

constexpr const char* Extern_Type_Name{"CommMADL_PeerNodeDataType"};
constexpr const char* PeerNodeIdentifier_Name{"PeerNodeIdentifier"};
constexpr const char* PeerMADL_UniqueIdentifier_Name{"PeerMADL_UniqueIdentifier"};
constexpr const char* PeerAircraftType_Name{"PeerAircraftType"};
constexpr const char* DataCapable_Name{"DataCapable"};
constexpr const char* VoiceCapable_Name{"VoiceCapable"};

} // namespace CommMADL_PeerNodeDataType_Names

void CommMADL_PeerNodeDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommMADL_PeerNodeDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommMADL_PeerNodeDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommMADL_PeerNodeDataType_Names::PeerNodeIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeerNodeIdentifier(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_PeerNodeDataType_Names::PeerMADL_UniqueIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPeerMADL_UniqueIdentifier(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_PeerNodeDataType_Names::PeerAircraftType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPeerAircraftType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_PeerNodeDataType_Names::DataCapable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDataCapable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_PeerNodeDataType_Names::VoiceCapable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceCapable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string CommMADL_PeerNodeDataType::serialize(const uci::type::CommMADL_PeerNodeDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommMADL_PeerNodeDataType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommMADL_PeerNodeDataType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getPeerNodeIdentifier(), node, CommMADL_PeerNodeDataType_Names::PeerNodeIdentifier_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getPeerMADL_UniqueIdentifier(), node, CommMADL_PeerNodeDataType_Names::PeerMADL_UniqueIdentifier_Name);
  CommMADL_AircraftTypeEnum::serialize(accessor.getPeerAircraftType(), node, CommMADL_PeerNodeDataType_Names::PeerAircraftType_Name, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getDataCapable(), node, CommMADL_PeerNodeDataType_Names::DataCapable_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getVoiceCapable(), node, CommMADL_PeerNodeDataType_Names::VoiceCapable_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommMADL_PeerNodeDataType& CommMADL_PeerNodeDataType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommMADL_PeerNodeDataType>().release());
}

uci::type::CommMADL_PeerNodeDataType& CommMADL_PeerNodeDataType::create(const uci::type::CommMADL_PeerNodeDataType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommMADL_PeerNodeDataType> newAccessor{boost::make_unique<asb_uci::type::CommMADL_PeerNodeDataType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommMADL_PeerNodeDataType::destroy(uci::type::CommMADL_PeerNodeDataType& accessor) {
  delete dynamic_cast<asb_uci::type::CommMADL_PeerNodeDataType*>(&accessor);
}

} // namespace type

} // namespace uci

