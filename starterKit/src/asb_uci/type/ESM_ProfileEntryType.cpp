/** @file ESM_ProfileEntryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ESM_ProfileEntryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ESM_ActivationEnum.h"
#include "../../../include/asb_uci/type/EmitterEntryType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_ActivationEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_ProfileEntryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmitterEntryType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ESM_ProfileEntryType::ESM_ProfileEntryType()
  : emitterEntry_Accessor{boost::make_unique<EmitterEntry>(1, SIZE_MAX)} {
}

ESM_ProfileEntryType::~ESM_ProfileEntryType() = default;

void ESM_ProfileEntryType::copy(const uci::type::ESM_ProfileEntryType& accessor) {
  copyImpl(accessor, false);
}

void ESM_ProfileEntryType::copyImpl(const uci::type::ESM_ProfileEntryType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ESM_ProfileEntryType&>(accessor);
    setEmitterEntry(*(accessorImpl.emitterEntry_Accessor));
    if (accessorImpl.hasEmitterPriorityBin()) {
      setEmitterPriorityBin(accessorImpl.getEmitterPriorityBin());
    } else {
      clearEmitterPriorityBin();
    }
    if (accessorImpl.activation_Accessor) {
      setActivation(*(accessorImpl.activation_Accessor));
    } else {
      activation_Accessor.reset();
    }
  }
}

void ESM_ProfileEntryType::reset() noexcept {
  emitterEntry_Accessor->reset();
  clearEmitterPriorityBin();
  activation_Accessor.reset();
}

const uci::type::ESM_ProfileEntryType::EmitterEntry& ESM_ProfileEntryType::getEmitterEntry() const {
  return *emitterEntry_Accessor;
}

uci::type::ESM_ProfileEntryType::EmitterEntry& ESM_ProfileEntryType::getEmitterEntry() {
  return *emitterEntry_Accessor;
}

uci::type::ESM_ProfileEntryType& ESM_ProfileEntryType::setEmitterEntry(const uci::type::ESM_ProfileEntryType::EmitterEntry& accessor) {
  if (&accessor != emitterEntry_Accessor.get()) {
    emitterEntry_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt ESM_ProfileEntryType::getEmitterPriorityBin() const {
  if (emitterPriorityBin_Accessor) {
    return *emitterPriorityBin_Accessor;
  }
  throw uci::base::UCIException("Error in getEmitterPriorityBin(): An attempt was made to get an optional field that was not enabled, call hasEmitterPriorityBin() to determine if it is safe to call getEmitterPriorityBin()");
}

uci::type::ESM_ProfileEntryType& ESM_ProfileEntryType::setEmitterPriorityBin(xs::UnsignedInt value) {
  emitterPriorityBin_Accessor = value;
  return *this;
}

bool ESM_ProfileEntryType::hasEmitterPriorityBin() const noexcept {
  return emitterPriorityBin_Accessor.has_value();
}

uci::type::ESM_ProfileEntryType& ESM_ProfileEntryType::clearEmitterPriorityBin() noexcept {
  emitterPriorityBin_Accessor.reset();
  return *this;
}

uci::type::ESM_ActivationEnum& ESM_ProfileEntryType::getActivation_() const {
  if (activation_Accessor) {
    return *activation_Accessor;
  }
  throw uci::base::UCIException("Error in getActivation(): An attempt was made to get an optional field that was not enabled, call hasActivation() to determine if it is safe to call getActivation()");
}

const uci::type::ESM_ActivationEnum& ESM_ProfileEntryType::getActivation() const {
  return getActivation_();
}

uci::type::ESM_ActivationEnum& ESM_ProfileEntryType::getActivation() {
  return getActivation_();
}

uci::type::ESM_ProfileEntryType& ESM_ProfileEntryType::setActivation(const uci::type::ESM_ActivationEnum& accessor) {
  enableActivation();
  if (&accessor != activation_Accessor.get()) {
    activation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ESM_ProfileEntryType& ESM_ProfileEntryType::setActivation(const uci::type::ESM_ActivationEnum::EnumerationItem value) {
  enableActivation().setValue(value);
  return *this;
}

bool ESM_ProfileEntryType::hasActivation() const noexcept {
  return static_cast<bool>(activation_Accessor);
}

uci::type::ESM_ActivationEnum& ESM_ProfileEntryType::enableActivation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_ActivationEnum : type};
  if ((!activation_Accessor) || (activation_Accessor->getAccessorType() != requestedType)) {
    activation_Accessor = ESM_ActivationEnum::create(requestedType);
    if (!activation_Accessor) {
      throw uci::base::UCIException("Error in enableActivation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activation_Accessor;
}

uci::type::ESM_ProfileEntryType& ESM_ProfileEntryType::clearActivation() noexcept {
  activation_Accessor.reset();
  return *this;
}

std::unique_ptr<ESM_ProfileEntryType> ESM_ProfileEntryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_ProfileEntryType : type};
  return (requestedType == uci::type::accessorType::eSM_ProfileEntryType) ? boost::make_unique<ESM_ProfileEntryType>() : nullptr;
}

/**  */
namespace ESM_ProfileEntryType_Names {

constexpr const char* Extern_Type_Name{"ESM_ProfileEntryType"};
constexpr const char* EmitterEntry_Name{"EmitterEntry"};
constexpr const char* EmitterPriorityBin_Name{"EmitterPriorityBin"};
constexpr const char* Activation_Name{"Activation"};

} // namespace ESM_ProfileEntryType_Names

void ESM_ProfileEntryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ESM_ProfileEntryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ESM_ProfileEntryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ESM_ProfileEntryType_Names::EmitterEntry_Name) {
      uci::type::ESM_ProfileEntryType::EmitterEntry& boundedList = accessor.getEmitterEntry();
      const uci::type::ESM_ProfileEntryType::EmitterEntry::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::EmitterEntryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ESM_ProfileEntryType_Names::EmitterPriorityBin_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEmitterPriorityBin(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ESM_ProfileEntryType_Names::Activation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableActivation().setValueFromName(*value);
      }
    }
  }
}

std::string ESM_ProfileEntryType::serialize(const uci::type::ESM_ProfileEntryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ESM_ProfileEntryType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ESM_ProfileEntryType_Names::Extern_Type_Name);
  }
  {
    const uci::type::ESM_ProfileEntryType::EmitterEntry& boundedList = accessor.getEmitterEntry();
    for (uci::type::ESM_ProfileEntryType::EmitterEntry::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EmitterEntryType::serialize(boundedList.at(i), node, ESM_ProfileEntryType_Names::EmitterEntry_Name);
    }
  }
  if (accessor.hasEmitterPriorityBin()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getEmitterPriorityBin(), node, ESM_ProfileEntryType_Names::EmitterPriorityBin_Name);
  }
  if (accessor.hasActivation()) {
    ESM_ActivationEnum::serialize(accessor.getActivation(), node, ESM_ProfileEntryType_Names::Activation_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ESM_ProfileEntryType& ESM_ProfileEntryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ESM_ProfileEntryType>().release());
}

uci::type::ESM_ProfileEntryType& ESM_ProfileEntryType::create(const uci::type::ESM_ProfileEntryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ESM_ProfileEntryType> newAccessor{boost::make_unique<asb_uci::type::ESM_ProfileEntryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ESM_ProfileEntryType::destroy(uci::type::ESM_ProfileEntryType& accessor) {
  delete dynamic_cast<asb_uci::type::ESM_ProfileEntryType*>(&accessor);
}

} // namespace type

} // namespace uci

