/** @file EmconERP_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EmconERP_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmconERP_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MilliwattPowerRatioType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EmconERP_Type::EmconERP_Type() = default;

EmconERP_Type::~EmconERP_Type() = default;

void EmconERP_Type::copy(const uci::type::EmconERP_Type& accessor) {
  copyImpl(accessor, false);
}

void EmconERP_Type::copyImpl(const uci::type::EmconERP_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EmconERP_Type&>(accessor);
    maximumRadiatedERP_Accessor = (accessorImpl.maximumRadiatedERP_Accessor ? accessorImpl.maximumRadiatedERP_Accessor : boost::none);
    radiateFullPower_Accessor = (accessorImpl.radiateFullPower_Accessor ? accessorImpl.radiateFullPower_Accessor : boost::none);
  }
}

void EmconERP_Type::reset() noexcept {
  maximumRadiatedERP_Accessor.reset();
  radiateFullPower_Accessor.reset();
}

uci::type::EmconERP_Type::EmconERP_TypeChoice EmconERP_Type::getEmconERP_TypeChoiceOrdinal() const noexcept {
  if (maximumRadiatedERP_Accessor) {
    return EMCONERP_TYPE_CHOICE_MAXIMUMRADIATEDERP;
  }
  if (radiateFullPower_Accessor) {
    return EMCONERP_TYPE_CHOICE_RADIATEFULLPOWER;
  }
  return EMCONERP_TYPE_CHOICE_NONE;
}

uci::type::EmconERP_Type& EmconERP_Type::setEmconERP_TypeChoiceOrdinal(uci::type::EmconERP_Type::EmconERP_TypeChoice ordinal, uci::base::accessorType::AccessorType /*type*/) {
  switch (ordinal) {
    case EMCONERP_TYPE_CHOICE_MAXIMUMRADIATEDERP:
      chooseMaximumRadiatedERP();
      break;
    case EMCONERP_TYPE_CHOICE_RADIATEFULLPOWER:
      chooseRadiateFullPower();
      break;
    default:
      throw uci::base::UCIException("Error in setEmconERP_TypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::MilliwattPowerRatioTypeValue EmconERP_Type::getMaximumRadiatedERP() const {
  if (maximumRadiatedERP_Accessor) {
    return *maximumRadiatedERP_Accessor;
  }
  throw uci::base::UCIException("Error in getMaximumRadiatedERP(): Unable to get MaximumRadiatedERP, field not selected");
}

uci::type::EmconERP_Type& EmconERP_Type::setMaximumRadiatedERP(uci::type::MilliwattPowerRatioTypeValue value) {
  chooseMaximumRadiatedERP();
  maximumRadiatedERP_Accessor = value;
  return *this;
}

bool EmconERP_Type::isMaximumRadiatedERP() const noexcept {
  return static_cast<bool>(maximumRadiatedERP_Accessor);
}

void EmconERP_Type::chooseMaximumRadiatedERP() {
  radiateFullPower_Accessor.reset();
  if (!maximumRadiatedERP_Accessor) {
    maximumRadiatedERP_Accessor = boost::optional<asb_xs::Double>();
  }
}

xs::Boolean EmconERP_Type::getRadiateFullPower() const {
  if (radiateFullPower_Accessor) {
    return *radiateFullPower_Accessor;
  }
  throw uci::base::UCIException("Error in getRadiateFullPower(): Unable to get RadiateFullPower, field not selected");
}

uci::type::EmconERP_Type& EmconERP_Type::setRadiateFullPower(xs::Boolean value) {
  chooseRadiateFullPower();
  radiateFullPower_Accessor = value;
  return *this;
}

bool EmconERP_Type::isRadiateFullPower() const noexcept {
  return static_cast<bool>(radiateFullPower_Accessor);
}

void EmconERP_Type::chooseRadiateFullPower() {
  maximumRadiatedERP_Accessor.reset();
  if (!radiateFullPower_Accessor) {
    radiateFullPower_Accessor = boost::optional<asb_xs::Boolean>();
  }
}

std::unique_ptr<EmconERP_Type> EmconERP_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emconERP_Type : type};
  return (requestedType == uci::type::accessorType::emconERP_Type) ? boost::make_unique<EmconERP_Type>() : nullptr;
}

/**  */
namespace EmconERP_Type_Names {

constexpr const char* Extern_Type_Name{"EmconERP_Type"};
constexpr const char* MaximumRadiatedERP_Name{"MaximumRadiatedERP"};
constexpr const char* RadiateFullPower_Name{"RadiateFullPower"};

} // namespace EmconERP_Type_Names

void EmconERP_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::EmconERP_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EmconERP_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EmconERP_Type_Names::MaximumRadiatedERP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumRadiatedERP(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EmconERP_Type_Names::RadiateFullPower_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRadiateFullPower(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string EmconERP_Type::serialize(const uci::type::EmconERP_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EmconERP_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EmconERP_Type_Names::Extern_Type_Name);
  }
  if (accessor.isMaximumRadiatedERP()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaximumRadiatedERP(), node, EmconERP_Type_Names::MaximumRadiatedERP_Name);
  } else if (accessor.isRadiateFullPower()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getRadiateFullPower(), node, EmconERP_Type_Names::RadiateFullPower_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EmconERP_Type& EmconERP_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EmconERP_Type>().release());
}

uci::type::EmconERP_Type& EmconERP_Type::create(const uci::type::EmconERP_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EmconERP_Type> newAccessor{boost::make_unique<asb_uci::type::EmconERP_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EmconERP_Type::destroy(uci::type::EmconERP_Type& accessor) {
  delete dynamic_cast<asb_uci::type::EmconERP_Type*>(&accessor);
}

} // namespace type

} // namespace uci

