/** @file SlantRangeRatesAndAccelerationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SlantRangeRatesAndAccelerationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AccelerationType.h"
#include "uci/type/SlantRangeRatesAndAccelerationType.h"
#include "uci/type/SpeedType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SlantRangeRatesAndAccelerationType::SlantRangeRatesAndAccelerationType() = default;

SlantRangeRatesAndAccelerationType::~SlantRangeRatesAndAccelerationType() = default;

void SlantRangeRatesAndAccelerationType::copy(const uci::type::SlantRangeRatesAndAccelerationType& accessor) {
  copyImpl(accessor, false);
}

void SlantRangeRatesAndAccelerationType::copyImpl(const uci::type::SlantRangeRatesAndAccelerationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SlantRangeRatesAndAccelerationType&>(accessor);
    if (accessorImpl.hasSlantRangeRate()) {
      setSlantRangeRate(accessorImpl.getSlantRangeRate());
    } else {
      clearSlantRangeRate();
    }
    if (accessorImpl.hasDeltaSlantRangeRate()) {
      setDeltaSlantRangeRate(accessorImpl.getDeltaSlantRangeRate());
    } else {
      clearDeltaSlantRangeRate();
    }
    if (accessorImpl.hasSlantRangeAcceleration()) {
      setSlantRangeAcceleration(accessorImpl.getSlantRangeAcceleration());
    } else {
      clearSlantRangeAcceleration();
    }
  }
}

void SlantRangeRatesAndAccelerationType::reset() noexcept {
  clearSlantRangeRate();
  clearDeltaSlantRangeRate();
  clearSlantRangeAcceleration();
}

uci::type::SpeedTypeValue SlantRangeRatesAndAccelerationType::getSlantRangeRate() const {
  if (slantRangeRate_Accessor) {
    return *slantRangeRate_Accessor;
  }
  throw uci::base::UCIException("Error in getSlantRangeRate(): An attempt was made to get an optional field that was not enabled, call hasSlantRangeRate() to determine if it is safe to call getSlantRangeRate()");
}

uci::type::SlantRangeRatesAndAccelerationType& SlantRangeRatesAndAccelerationType::setSlantRangeRate(uci::type::SpeedTypeValue value) {
  slantRangeRate_Accessor = value;
  return *this;
}

bool SlantRangeRatesAndAccelerationType::hasSlantRangeRate() const noexcept {
  return slantRangeRate_Accessor.has_value();
}

uci::type::SlantRangeRatesAndAccelerationType& SlantRangeRatesAndAccelerationType::clearSlantRangeRate() noexcept {
  slantRangeRate_Accessor.reset();
  return *this;
}

uci::type::SpeedTypeValue SlantRangeRatesAndAccelerationType::getDeltaSlantRangeRate() const {
  if (deltaSlantRangeRate_Accessor) {
    return *deltaSlantRangeRate_Accessor;
  }
  throw uci::base::UCIException("Error in getDeltaSlantRangeRate(): An attempt was made to get an optional field that was not enabled, call hasDeltaSlantRangeRate() to determine if it is safe to call getDeltaSlantRangeRate()");
}

uci::type::SlantRangeRatesAndAccelerationType& SlantRangeRatesAndAccelerationType::setDeltaSlantRangeRate(uci::type::SpeedTypeValue value) {
  deltaSlantRangeRate_Accessor = value;
  return *this;
}

bool SlantRangeRatesAndAccelerationType::hasDeltaSlantRangeRate() const noexcept {
  return deltaSlantRangeRate_Accessor.has_value();
}

uci::type::SlantRangeRatesAndAccelerationType& SlantRangeRatesAndAccelerationType::clearDeltaSlantRangeRate() noexcept {
  deltaSlantRangeRate_Accessor.reset();
  return *this;
}

uci::type::AccelerationTypeValue SlantRangeRatesAndAccelerationType::getSlantRangeAcceleration() const {
  if (slantRangeAcceleration_Accessor) {
    return *slantRangeAcceleration_Accessor;
  }
  throw uci::base::UCIException("Error in getSlantRangeAcceleration(): An attempt was made to get an optional field that was not enabled, call hasSlantRangeAcceleration() to determine if it is safe to call getSlantRangeAcceleration()");
}

uci::type::SlantRangeRatesAndAccelerationType& SlantRangeRatesAndAccelerationType::setSlantRangeAcceleration(uci::type::AccelerationTypeValue value) {
  slantRangeAcceleration_Accessor = value;
  return *this;
}

bool SlantRangeRatesAndAccelerationType::hasSlantRangeAcceleration() const noexcept {
  return slantRangeAcceleration_Accessor.has_value();
}

uci::type::SlantRangeRatesAndAccelerationType& SlantRangeRatesAndAccelerationType::clearSlantRangeAcceleration() noexcept {
  slantRangeAcceleration_Accessor.reset();
  return *this;
}

std::unique_ptr<SlantRangeRatesAndAccelerationType> SlantRangeRatesAndAccelerationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::slantRangeRatesAndAccelerationType : type};
  return (requestedType == uci::type::accessorType::slantRangeRatesAndAccelerationType) ? boost::make_unique<SlantRangeRatesAndAccelerationType>() : nullptr;
}

/**  */
namespace SlantRangeRatesAndAccelerationType_Names {

constexpr const char* Extern_Type_Name{"SlantRangeRatesAndAccelerationType"};
constexpr const char* SlantRangeRate_Name{"SlantRangeRate"};
constexpr const char* DeltaSlantRangeRate_Name{"DeltaSlantRangeRate"};
constexpr const char* SlantRangeAcceleration_Name{"SlantRangeAcceleration"};

} // namespace SlantRangeRatesAndAccelerationType_Names

void SlantRangeRatesAndAccelerationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SlantRangeRatesAndAccelerationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SlantRangeRatesAndAccelerationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SlantRangeRatesAndAccelerationType_Names::SlantRangeRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSlantRangeRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SlantRangeRatesAndAccelerationType_Names::DeltaSlantRangeRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDeltaSlantRangeRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SlantRangeRatesAndAccelerationType_Names::SlantRangeAcceleration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSlantRangeAcceleration(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string SlantRangeRatesAndAccelerationType::serialize(const uci::type::SlantRangeRatesAndAccelerationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SlantRangeRatesAndAccelerationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SlantRangeRatesAndAccelerationType_Names::Extern_Type_Name);
  }
  if (accessor.hasSlantRangeRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSlantRangeRate(), node, SlantRangeRatesAndAccelerationType_Names::SlantRangeRate_Name);
  }
  if (accessor.hasDeltaSlantRangeRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDeltaSlantRangeRate(), node, SlantRangeRatesAndAccelerationType_Names::DeltaSlantRangeRate_Name);
  }
  if (accessor.hasSlantRangeAcceleration()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSlantRangeAcceleration(), node, SlantRangeRatesAndAccelerationType_Names::SlantRangeAcceleration_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SlantRangeRatesAndAccelerationType& SlantRangeRatesAndAccelerationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SlantRangeRatesAndAccelerationType>().release());
}

uci::type::SlantRangeRatesAndAccelerationType& SlantRangeRatesAndAccelerationType::create(const uci::type::SlantRangeRatesAndAccelerationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SlantRangeRatesAndAccelerationType> newAccessor{boost::make_unique<asb_uci::type::SlantRangeRatesAndAccelerationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SlantRangeRatesAndAccelerationType::destroy(uci::type::SlantRangeRatesAndAccelerationType& accessor) {
  delete dynamic_cast<asb_uci::type::SlantRangeRatesAndAccelerationType*>(&accessor);
}

} // namespace type

} // namespace uci

