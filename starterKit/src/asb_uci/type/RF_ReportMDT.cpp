/** @file RF_ReportMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RF_ReportMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/RF_OperationType.h"
#include "../../../include/asb_uci/type/RF_ProfileType.h"
#include "../../../include/asb_uci/type/RF_ReportID_Type.h"
#include "../../../include/asb_uci/type/RF_ReportStateEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_OperationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_ProfileType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_ReportID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_ReportMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_ReportStateEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RF_ReportMDT::RF_ReportMDT()
  : rF_ReportID_Accessor{boost::make_unique<RF_ReportID_Type>()},
    rF_ReportState_Accessor{boost::make_unique<RF_ReportStateEnum>()},
    rF_Operation_Accessor{boost::make_unique<RF_Operation>(0, SIZE_MAX)},
    activeProfile_Accessor{boost::make_unique<ActiveProfile>(0, SIZE_MAX)} {
}

RF_ReportMDT::~RF_ReportMDT() = default;

void RF_ReportMDT::copy(const uci::type::RF_ReportMDT& accessor) {
  copyImpl(accessor, false);
}

void RF_ReportMDT::copyImpl(const uci::type::RF_ReportMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RF_ReportMDT&>(accessor);
    setRF_ReportID(*(accessorImpl.rF_ReportID_Accessor));
    setRF_ReportState(*(accessorImpl.rF_ReportState_Accessor));
    setRF_Operation(*(accessorImpl.rF_Operation_Accessor));
    setActiveProfile(*(accessorImpl.activeProfile_Accessor));
  }
}

void RF_ReportMDT::reset() noexcept {
  rF_ReportID_Accessor->reset();
  rF_ReportState_Accessor->reset();
  rF_Operation_Accessor->reset();
  activeProfile_Accessor->reset();
}

const uci::type::RF_ReportID_Type& RF_ReportMDT::getRF_ReportID() const {
  return *rF_ReportID_Accessor;
}

uci::type::RF_ReportID_Type& RF_ReportMDT::getRF_ReportID() {
  return *rF_ReportID_Accessor;
}

uci::type::RF_ReportMDT& RF_ReportMDT::setRF_ReportID(const uci::type::RF_ReportID_Type& accessor) {
  if (&accessor != rF_ReportID_Accessor.get()) {
    rF_ReportID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RF_ReportStateEnum& RF_ReportMDT::getRF_ReportState() const {
  return *rF_ReportState_Accessor;
}

uci::type::RF_ReportStateEnum& RF_ReportMDT::getRF_ReportState() {
  return *rF_ReportState_Accessor;
}

uci::type::RF_ReportMDT& RF_ReportMDT::setRF_ReportState(const uci::type::RF_ReportStateEnum& accessor) {
  if (&accessor != rF_ReportState_Accessor.get()) {
    rF_ReportState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RF_ReportMDT& RF_ReportMDT::setRF_ReportState(uci::type::RF_ReportStateEnum::EnumerationItem value) {
  rF_ReportState_Accessor->setValue(value);
  return *this;
}


const uci::type::RF_ReportMDT::RF_Operation& RF_ReportMDT::getRF_Operation() const {
  return *rF_Operation_Accessor;
}

uci::type::RF_ReportMDT::RF_Operation& RF_ReportMDT::getRF_Operation() {
  return *rF_Operation_Accessor;
}

uci::type::RF_ReportMDT& RF_ReportMDT::setRF_Operation(const uci::type::RF_ReportMDT::RF_Operation& accessor) {
  if (&accessor != rF_Operation_Accessor.get()) {
    rF_Operation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RF_ReportMDT::ActiveProfile& RF_ReportMDT::getActiveProfile() const {
  return *activeProfile_Accessor;
}

uci::type::RF_ReportMDT::ActiveProfile& RF_ReportMDT::getActiveProfile() {
  return *activeProfile_Accessor;
}

uci::type::RF_ReportMDT& RF_ReportMDT::setActiveProfile(const uci::type::RF_ReportMDT::ActiveProfile& accessor) {
  if (&accessor != activeProfile_Accessor.get()) {
    activeProfile_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<RF_ReportMDT> RF_ReportMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_ReportMDT : type};
  return (requestedType == uci::type::accessorType::rF_ReportMDT) ? boost::make_unique<RF_ReportMDT>() : nullptr;
}

/**  */
namespace RF_ReportMDT_Names {

constexpr const char* Extern_Type_Name{"RF_ReportMDT"};
constexpr const char* RF_ReportID_Name{"RF_ReportID"};
constexpr const char* RF_ReportState_Name{"RF_ReportState"};
constexpr const char* RF_Operation_Name{"RF_Operation"};
constexpr const char* ActiveProfile_Name{"ActiveProfile"};

} // namespace RF_ReportMDT_Names

void RF_ReportMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_ReportMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RF_ReportMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RF_ReportMDT_Names::RF_ReportID_Name) {
      RF_ReportID_Type::deserialize(valueType.second, accessor.getRF_ReportID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_ReportMDT_Names::RF_ReportState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRF_ReportState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RF_ReportMDT_Names::RF_Operation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_ReportMDT::RF_Operation& boundedList = accessor.getRF_Operation();
        const uci::type::RF_ReportMDT::RF_Operation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RF_OperationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RF_ReportMDT_Names::ActiveProfile_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_ReportMDT::ActiveProfile& boundedList = accessor.getActiveProfile();
        const uci::type::RF_ReportMDT::ActiveProfile::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::RF_ProfileType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string RF_ReportMDT::serialize(const uci::type::RF_ReportMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RF_ReportMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RF_ReportMDT_Names::Extern_Type_Name);
  }
  RF_ReportID_Type::serialize(accessor.getRF_ReportID(), node, RF_ReportMDT_Names::RF_ReportID_Name);
  RF_ReportStateEnum::serialize(accessor.getRF_ReportState(), node, RF_ReportMDT_Names::RF_ReportState_Name, false);
  {
    const uci::type::RF_ReportMDT::RF_Operation& boundedList = accessor.getRF_Operation();
    for (uci::type::RF_ReportMDT::RF_Operation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RF_OperationType::serialize(boundedList.at(i), node, RF_ReportMDT_Names::RF_Operation_Name);
    }
  }
  {
    const uci::type::RF_ReportMDT::ActiveProfile& boundedList = accessor.getActiveProfile();
    for (uci::type::RF_ReportMDT::ActiveProfile::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RF_ProfileType::serialize(boundedList.at(i), node, RF_ReportMDT_Names::ActiveProfile_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RF_ReportMDT& RF_ReportMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RF_ReportMDT>().release());
}

uci::type::RF_ReportMDT& RF_ReportMDT::create(const uci::type::RF_ReportMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RF_ReportMDT> newAccessor{boost::make_unique<asb_uci::type::RF_ReportMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RF_ReportMDT::destroy(uci::type::RF_ReportMDT& accessor) {
  delete dynamic_cast<asb_uci::type::RF_ReportMDT*>(&accessor);
}

} // namespace type

} // namespace uci

