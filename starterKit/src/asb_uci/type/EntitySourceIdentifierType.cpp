/** @file EntitySourceIdentifierType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EntitySourceIdentifierType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EOB_RecordID_Type.h"
#include "../../../include/asb_uci/type/EntityCapabilitySourceType.h"
#include "../../../include/asb_uci/type/EntityExternalType.h"
#include "../../../include/asb_uci/type/EntityFusionSourceType.h"
#include "../../../include/asb_uci/type/ID_Type.h"
#include "../../../include/asb_uci/type/OperatorID_Type.h"
#include "../../../include/asb_uci/type/ProductMetadataID_Type.h"
#include "../../../include/asb_uci/type/SOB_C2_RecordID_Type.h"
#include "../../../include/asb_uci/type/SOB_SatelliteRecordID_Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EOB_RecordID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityCapabilitySourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityExternalType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityFusionSourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntitySourceIdentifierType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OperatorID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductMetadataID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SOB_C2_RecordID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SOB_SatelliteRecordID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntitySourceIdentifierType::EntitySourceIdentifierType() = default;

EntitySourceIdentifierType::~EntitySourceIdentifierType() = default;

void EntitySourceIdentifierType::copy(const uci::type::EntitySourceIdentifierType& accessor) {
  copyImpl(accessor, false);
}

void EntitySourceIdentifierType::copyImpl(const uci::type::EntitySourceIdentifierType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntitySourceIdentifierType&>(accessor);
    if (accessorImpl.eOB_RecordID_Accessor) {
      setEOB_RecordID(*(accessorImpl.eOB_RecordID_Accessor));
    } else {
      eOB_RecordID_Accessor.reset();
    }
    if (accessorImpl.externalIdentifier_Accessor) {
      setExternalIdentifier(*(accessorImpl.externalIdentifier_Accessor));
    } else {
      externalIdentifier_Accessor.reset();
    }
    if (accessorImpl.fusion_Accessor) {
      setFusion(*(accessorImpl.fusion_Accessor));
    } else {
      fusion_Accessor.reset();
    }
    if (accessorImpl.internallyDerivedID_Accessor) {
      setInternallyDerivedID(*(accessorImpl.internallyDerivedID_Accessor));
    } else {
      internallyDerivedID_Accessor.reset();
    }
    if (accessorImpl.capability_Accessor) {
      setCapability(*(accessorImpl.capability_Accessor));
    } else {
      capability_Accessor.reset();
    }
    if (accessorImpl.productMetadataID_Accessor) {
      setProductMetadataID(*(accessorImpl.productMetadataID_Accessor));
    } else {
      productMetadataID_Accessor.reset();
    }
    if (accessorImpl.operatorID_Accessor) {
      setOperatorID(*(accessorImpl.operatorID_Accessor));
    } else {
      operatorID_Accessor.reset();
    }
    if (accessorImpl.sOB_SatelliteRecordID_Accessor) {
      setSOB_SatelliteRecordID(*(accessorImpl.sOB_SatelliteRecordID_Accessor));
    } else {
      sOB_SatelliteRecordID_Accessor.reset();
    }
    if (accessorImpl.sOB_C2_RecordID_Accessor) {
      setSOB_C2_RecordID(*(accessorImpl.sOB_C2_RecordID_Accessor));
    } else {
      sOB_C2_RecordID_Accessor.reset();
    }
  }
}

void EntitySourceIdentifierType::reset() noexcept {
  eOB_RecordID_Accessor.reset();
  externalIdentifier_Accessor.reset();
  fusion_Accessor.reset();
  internallyDerivedID_Accessor.reset();
  capability_Accessor.reset();
  productMetadataID_Accessor.reset();
  operatorID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
}

uci::type::EntitySourceIdentifierType::EntitySourceIdentifierTypeChoice EntitySourceIdentifierType::getEntitySourceIdentifierTypeChoiceOrdinal() const noexcept {
  if (eOB_RecordID_Accessor) {
    return ENTITYSOURCEIDENTIFIERTYPE_CHOICE_EOB_RECORDID;
  }
  if (externalIdentifier_Accessor) {
    return ENTITYSOURCEIDENTIFIERTYPE_CHOICE_EXTERNALIDENTIFIER;
  }
  if (fusion_Accessor) {
    return ENTITYSOURCEIDENTIFIERTYPE_CHOICE_FUSION;
  }
  if (internallyDerivedID_Accessor) {
    return ENTITYSOURCEIDENTIFIERTYPE_CHOICE_INTERNALLYDERIVEDID;
  }
  if (capability_Accessor) {
    return ENTITYSOURCEIDENTIFIERTYPE_CHOICE_CAPABILITY;
  }
  if (productMetadataID_Accessor) {
    return ENTITYSOURCEIDENTIFIERTYPE_CHOICE_PRODUCTMETADATAID;
  }
  if (operatorID_Accessor) {
    return ENTITYSOURCEIDENTIFIERTYPE_CHOICE_OPERATORID;
  }
  if (sOB_SatelliteRecordID_Accessor) {
    return ENTITYSOURCEIDENTIFIERTYPE_CHOICE_SOB_SATELLITERECORDID;
  }
  if (sOB_C2_RecordID_Accessor) {
    return ENTITYSOURCEIDENTIFIERTYPE_CHOICE_SOB_C2_RECORDID;
  }
  return ENTITYSOURCEIDENTIFIERTYPE_CHOICE_NONE;
}

uci::type::EntitySourceIdentifierType& EntitySourceIdentifierType::setEntitySourceIdentifierTypeChoiceOrdinal(uci::type::EntitySourceIdentifierType::EntitySourceIdentifierTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ENTITYSOURCEIDENTIFIERTYPE_CHOICE_EOB_RECORDID:
      chooseEOB_RecordID("setEntitySourceIdentifierTypeChoiceOrdinal", type);
      break;
    case ENTITYSOURCEIDENTIFIERTYPE_CHOICE_EXTERNALIDENTIFIER:
      chooseExternalIdentifier("setEntitySourceIdentifierTypeChoiceOrdinal", type);
      break;
    case ENTITYSOURCEIDENTIFIERTYPE_CHOICE_FUSION:
      chooseFusion();
      break;
    case ENTITYSOURCEIDENTIFIERTYPE_CHOICE_INTERNALLYDERIVEDID:
      chooseInternallyDerivedID("setEntitySourceIdentifierTypeChoiceOrdinal", type);
      break;
    case ENTITYSOURCEIDENTIFIERTYPE_CHOICE_CAPABILITY:
      chooseCapability("setEntitySourceIdentifierTypeChoiceOrdinal", type);
      break;
    case ENTITYSOURCEIDENTIFIERTYPE_CHOICE_PRODUCTMETADATAID:
      chooseProductMetadataID();
      break;
    case ENTITYSOURCEIDENTIFIERTYPE_CHOICE_OPERATORID:
      chooseOperatorID("setEntitySourceIdentifierTypeChoiceOrdinal", type);
      break;
    case ENTITYSOURCEIDENTIFIERTYPE_CHOICE_SOB_SATELLITERECORDID:
      chooseSOB_SatelliteRecordID("setEntitySourceIdentifierTypeChoiceOrdinal", type);
      break;
    case ENTITYSOURCEIDENTIFIERTYPE_CHOICE_SOB_C2_RECORDID:
      chooseSOB_C2_RecordID("setEntitySourceIdentifierTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEntitySourceIdentifierTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EOB_RecordID_Type& EntitySourceIdentifierType::getEOB_RecordID_() const {
  if (eOB_RecordID_Accessor) {
    return *eOB_RecordID_Accessor;
  }
  throw uci::base::UCIException("Error in getEOB_RecordID(): Unable to get EOB_RecordID, field not selected");
}

const uci::type::EOB_RecordID_Type& EntitySourceIdentifierType::getEOB_RecordID() const {
  return getEOB_RecordID_();
}

uci::type::EOB_RecordID_Type& EntitySourceIdentifierType::getEOB_RecordID() {
  return getEOB_RecordID_();
}

uci::type::EntitySourceIdentifierType& EntitySourceIdentifierType::setEOB_RecordID(const uci::type::EOB_RecordID_Type& accessor) {
  chooseEOB_RecordID();
  if (&accessor != eOB_RecordID_Accessor.get()) {
    eOB_RecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntitySourceIdentifierType::isEOB_RecordID() const noexcept {
  return static_cast<bool>(eOB_RecordID_Accessor);
}

uci::type::EOB_RecordID_Type& EntitySourceIdentifierType::chooseEOB_RecordID(const std::string& method, uci::base::accessorType::AccessorType type) {
  externalIdentifier_Accessor.reset();
  fusion_Accessor.reset();
  internallyDerivedID_Accessor.reset();
  capability_Accessor.reset();
  productMetadataID_Accessor.reset();
  operatorID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_RecordID_Type : type};
  if ((!eOB_RecordID_Accessor) || (eOB_RecordID_Accessor->getAccessorType() != requestedType)) {
    eOB_RecordID_Accessor = EOB_RecordID_Type::create(type);
    if (!eOB_RecordID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eOB_RecordID_Accessor;
}

uci::type::EOB_RecordID_Type& EntitySourceIdentifierType::chooseEOB_RecordID(uci::base::accessorType::AccessorType type) {
  return chooseEOB_RecordID("chooseEOB_RecordID", type);
}

uci::type::EntityExternalType& EntitySourceIdentifierType::getExternalIdentifier_() const {
  if (externalIdentifier_Accessor) {
    return *externalIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getExternalIdentifier(): Unable to get ExternalIdentifier, field not selected");
}

const uci::type::EntityExternalType& EntitySourceIdentifierType::getExternalIdentifier() const {
  return getExternalIdentifier_();
}

uci::type::EntityExternalType& EntitySourceIdentifierType::getExternalIdentifier() {
  return getExternalIdentifier_();
}

uci::type::EntitySourceIdentifierType& EntitySourceIdentifierType::setExternalIdentifier(const uci::type::EntityExternalType& accessor) {
  chooseExternalIdentifier();
  if (&accessor != externalIdentifier_Accessor.get()) {
    externalIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntitySourceIdentifierType::isExternalIdentifier() const noexcept {
  return static_cast<bool>(externalIdentifier_Accessor);
}

uci::type::EntityExternalType& EntitySourceIdentifierType::chooseExternalIdentifier(const std::string& method, uci::base::accessorType::AccessorType type) {
  eOB_RecordID_Accessor.reset();
  fusion_Accessor.reset();
  internallyDerivedID_Accessor.reset();
  capability_Accessor.reset();
  productMetadataID_Accessor.reset();
  operatorID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityExternalType : type};
  if ((!externalIdentifier_Accessor) || (externalIdentifier_Accessor->getAccessorType() != requestedType)) {
    externalIdentifier_Accessor = EntityExternalType::create(type);
    if (!externalIdentifier_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *externalIdentifier_Accessor;
}

uci::type::EntityExternalType& EntitySourceIdentifierType::chooseExternalIdentifier(uci::base::accessorType::AccessorType type) {
  return chooseExternalIdentifier("chooseExternalIdentifier", type);
}

uci::type::EntitySourceIdentifierType::Fusion& EntitySourceIdentifierType::getFusion_() const {
  if (fusion_Accessor) {
    return *fusion_Accessor;
  }
  throw uci::base::UCIException("Error in getFusion(): Unable to get Fusion, field not selected");
}

const uci::type::EntitySourceIdentifierType::Fusion& EntitySourceIdentifierType::getFusion() const {
  return getFusion_();
}

uci::type::EntitySourceIdentifierType::Fusion& EntitySourceIdentifierType::getFusion() {
  return getFusion_();
}

uci::type::EntitySourceIdentifierType& EntitySourceIdentifierType::setFusion(const uci::type::EntitySourceIdentifierType::Fusion& accessor) {
  chooseFusion();
  if (&accessor != fusion_Accessor.get()) {
    fusion_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntitySourceIdentifierType::isFusion() const noexcept {
  return static_cast<bool>(fusion_Accessor);
}

uci::type::EntitySourceIdentifierType::Fusion& EntitySourceIdentifierType::chooseFusion() {
  eOB_RecordID_Accessor.reset();
  externalIdentifier_Accessor.reset();
  internallyDerivedID_Accessor.reset();
  capability_Accessor.reset();
  productMetadataID_Accessor.reset();
  operatorID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  if (!fusion_Accessor) {
    fusion_Accessor = boost::make_unique<Fusion>(1, SIZE_MAX);
  }
  return *fusion_Accessor;
}

uci::type::ID_Type& EntitySourceIdentifierType::getInternallyDerivedID_() const {
  if (internallyDerivedID_Accessor) {
    return *internallyDerivedID_Accessor;
  }
  throw uci::base::UCIException("Error in getInternallyDerivedID(): Unable to get InternallyDerivedID, field not selected");
}

const uci::type::ID_Type& EntitySourceIdentifierType::getInternallyDerivedID() const {
  return getInternallyDerivedID_();
}

uci::type::ID_Type& EntitySourceIdentifierType::getInternallyDerivedID() {
  return getInternallyDerivedID_();
}

uci::type::EntitySourceIdentifierType& EntitySourceIdentifierType::setInternallyDerivedID(const uci::type::ID_Type& accessor) {
  chooseInternallyDerivedID("setInternallyDerivedID", accessor.getAccessorType());
  if (&accessor != internallyDerivedID_Accessor.get()) {
    internallyDerivedID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EntitySourceIdentifierType::isInternallyDerivedID() const noexcept {
  return static_cast<bool>(internallyDerivedID_Accessor);
}

uci::type::ID_Type& EntitySourceIdentifierType::chooseInternallyDerivedID(const std::string& method, uci::base::accessorType::AccessorType type) {
  eOB_RecordID_Accessor.reset();
  externalIdentifier_Accessor.reset();
  fusion_Accessor.reset();
  capability_Accessor.reset();
  productMetadataID_Accessor.reset();
  operatorID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iD_Type : type};
  if ((!internallyDerivedID_Accessor) || (internallyDerivedID_Accessor->getAccessorType() != requestedType)) {
    internallyDerivedID_Accessor = ID_Type::create(type);
    if (!internallyDerivedID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *internallyDerivedID_Accessor;
}

uci::type::ID_Type& EntitySourceIdentifierType::chooseInternallyDerivedID(uci::base::accessorType::AccessorType type) {
  return chooseInternallyDerivedID("chooseInternallyDerivedID", type);
}

uci::type::EntityCapabilitySourceType& EntitySourceIdentifierType::getCapability_() const {
  if (capability_Accessor) {
    return *capability_Accessor;
  }
  throw uci::base::UCIException("Error in getCapability(): Unable to get Capability, field not selected");
}

const uci::type::EntityCapabilitySourceType& EntitySourceIdentifierType::getCapability() const {
  return getCapability_();
}

uci::type::EntityCapabilitySourceType& EntitySourceIdentifierType::getCapability() {
  return getCapability_();
}

uci::type::EntitySourceIdentifierType& EntitySourceIdentifierType::setCapability(const uci::type::EntityCapabilitySourceType& accessor) {
  chooseCapability();
  if (&accessor != capability_Accessor.get()) {
    capability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntitySourceIdentifierType::isCapability() const noexcept {
  return static_cast<bool>(capability_Accessor);
}

uci::type::EntityCapabilitySourceType& EntitySourceIdentifierType::chooseCapability(const std::string& method, uci::base::accessorType::AccessorType type) {
  eOB_RecordID_Accessor.reset();
  externalIdentifier_Accessor.reset();
  fusion_Accessor.reset();
  internallyDerivedID_Accessor.reset();
  productMetadataID_Accessor.reset();
  operatorID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityCapabilitySourceType : type};
  if ((!capability_Accessor) || (capability_Accessor->getAccessorType() != requestedType)) {
    capability_Accessor = EntityCapabilitySourceType::create(type);
    if (!capability_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capability_Accessor;
}

uci::type::EntityCapabilitySourceType& EntitySourceIdentifierType::chooseCapability(uci::base::accessorType::AccessorType type) {
  return chooseCapability("chooseCapability", type);
}

uci::type::EntitySourceIdentifierType::ProductMetadataID& EntitySourceIdentifierType::getProductMetadataID_() const {
  if (productMetadataID_Accessor) {
    return *productMetadataID_Accessor;
  }
  throw uci::base::UCIException("Error in getProductMetadataID(): Unable to get ProductMetadataID, field not selected");
}

const uci::type::EntitySourceIdentifierType::ProductMetadataID& EntitySourceIdentifierType::getProductMetadataID() const {
  return getProductMetadataID_();
}

uci::type::EntitySourceIdentifierType::ProductMetadataID& EntitySourceIdentifierType::getProductMetadataID() {
  return getProductMetadataID_();
}

uci::type::EntitySourceIdentifierType& EntitySourceIdentifierType::setProductMetadataID(const uci::type::EntitySourceIdentifierType::ProductMetadataID& accessor) {
  chooseProductMetadataID();
  if (&accessor != productMetadataID_Accessor.get()) {
    productMetadataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntitySourceIdentifierType::isProductMetadataID() const noexcept {
  return static_cast<bool>(productMetadataID_Accessor);
}

uci::type::EntitySourceIdentifierType::ProductMetadataID& EntitySourceIdentifierType::chooseProductMetadataID() {
  eOB_RecordID_Accessor.reset();
  externalIdentifier_Accessor.reset();
  fusion_Accessor.reset();
  internallyDerivedID_Accessor.reset();
  capability_Accessor.reset();
  operatorID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  if (!productMetadataID_Accessor) {
    productMetadataID_Accessor = boost::make_unique<ProductMetadataID>(1, SIZE_MAX);
  }
  return *productMetadataID_Accessor;
}

uci::type::OperatorID_Type& EntitySourceIdentifierType::getOperatorID_() const {
  if (operatorID_Accessor) {
    return *operatorID_Accessor;
  }
  throw uci::base::UCIException("Error in getOperatorID(): Unable to get OperatorID, field not selected");
}

const uci::type::OperatorID_Type& EntitySourceIdentifierType::getOperatorID() const {
  return getOperatorID_();
}

uci::type::OperatorID_Type& EntitySourceIdentifierType::getOperatorID() {
  return getOperatorID_();
}

uci::type::EntitySourceIdentifierType& EntitySourceIdentifierType::setOperatorID(const uci::type::OperatorID_Type& accessor) {
  chooseOperatorID();
  if (&accessor != operatorID_Accessor.get()) {
    operatorID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntitySourceIdentifierType::isOperatorID() const noexcept {
  return static_cast<bool>(operatorID_Accessor);
}

uci::type::OperatorID_Type& EntitySourceIdentifierType::chooseOperatorID(const std::string& method, uci::base::accessorType::AccessorType type) {
  eOB_RecordID_Accessor.reset();
  externalIdentifier_Accessor.reset();
  fusion_Accessor.reset();
  internallyDerivedID_Accessor.reset();
  capability_Accessor.reset();
  productMetadataID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::operatorID_Type : type};
  if ((!operatorID_Accessor) || (operatorID_Accessor->getAccessorType() != requestedType)) {
    operatorID_Accessor = OperatorID_Type::create(type);
    if (!operatorID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *operatorID_Accessor;
}

uci::type::OperatorID_Type& EntitySourceIdentifierType::chooseOperatorID(uci::base::accessorType::AccessorType type) {
  return chooseOperatorID("chooseOperatorID", type);
}

uci::type::SOB_SatelliteRecordID_Type& EntitySourceIdentifierType::getSOB_SatelliteRecordID_() const {
  if (sOB_SatelliteRecordID_Accessor) {
    return *sOB_SatelliteRecordID_Accessor;
  }
  throw uci::base::UCIException("Error in getSOB_SatelliteRecordID(): Unable to get SOB_SatelliteRecordID, field not selected");
}

const uci::type::SOB_SatelliteRecordID_Type& EntitySourceIdentifierType::getSOB_SatelliteRecordID() const {
  return getSOB_SatelliteRecordID_();
}

uci::type::SOB_SatelliteRecordID_Type& EntitySourceIdentifierType::getSOB_SatelliteRecordID() {
  return getSOB_SatelliteRecordID_();
}

uci::type::EntitySourceIdentifierType& EntitySourceIdentifierType::setSOB_SatelliteRecordID(const uci::type::SOB_SatelliteRecordID_Type& accessor) {
  chooseSOB_SatelliteRecordID();
  if (&accessor != sOB_SatelliteRecordID_Accessor.get()) {
    sOB_SatelliteRecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntitySourceIdentifierType::isSOB_SatelliteRecordID() const noexcept {
  return static_cast<bool>(sOB_SatelliteRecordID_Accessor);
}

uci::type::SOB_SatelliteRecordID_Type& EntitySourceIdentifierType::chooseSOB_SatelliteRecordID(const std::string& method, uci::base::accessorType::AccessorType type) {
  eOB_RecordID_Accessor.reset();
  externalIdentifier_Accessor.reset();
  fusion_Accessor.reset();
  internallyDerivedID_Accessor.reset();
  capability_Accessor.reset();
  productMetadataID_Accessor.reset();
  operatorID_Accessor.reset();
  sOB_C2_RecordID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_SatelliteRecordID_Type : type};
  if ((!sOB_SatelliteRecordID_Accessor) || (sOB_SatelliteRecordID_Accessor->getAccessorType() != requestedType)) {
    sOB_SatelliteRecordID_Accessor = SOB_SatelliteRecordID_Type::create(type);
    if (!sOB_SatelliteRecordID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sOB_SatelliteRecordID_Accessor;
}

uci::type::SOB_SatelliteRecordID_Type& EntitySourceIdentifierType::chooseSOB_SatelliteRecordID(uci::base::accessorType::AccessorType type) {
  return chooseSOB_SatelliteRecordID("chooseSOB_SatelliteRecordID", type);
}

uci::type::SOB_C2_RecordID_Type& EntitySourceIdentifierType::getSOB_C2_RecordID_() const {
  if (sOB_C2_RecordID_Accessor) {
    return *sOB_C2_RecordID_Accessor;
  }
  throw uci::base::UCIException("Error in getSOB_C2_RecordID(): Unable to get SOB_C2_RecordID, field not selected");
}

const uci::type::SOB_C2_RecordID_Type& EntitySourceIdentifierType::getSOB_C2_RecordID() const {
  return getSOB_C2_RecordID_();
}

uci::type::SOB_C2_RecordID_Type& EntitySourceIdentifierType::getSOB_C2_RecordID() {
  return getSOB_C2_RecordID_();
}

uci::type::EntitySourceIdentifierType& EntitySourceIdentifierType::setSOB_C2_RecordID(const uci::type::SOB_C2_RecordID_Type& accessor) {
  chooseSOB_C2_RecordID();
  if (&accessor != sOB_C2_RecordID_Accessor.get()) {
    sOB_C2_RecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EntitySourceIdentifierType::isSOB_C2_RecordID() const noexcept {
  return static_cast<bool>(sOB_C2_RecordID_Accessor);
}

uci::type::SOB_C2_RecordID_Type& EntitySourceIdentifierType::chooseSOB_C2_RecordID(const std::string& method, uci::base::accessorType::AccessorType type) {
  eOB_RecordID_Accessor.reset();
  externalIdentifier_Accessor.reset();
  fusion_Accessor.reset();
  internallyDerivedID_Accessor.reset();
  capability_Accessor.reset();
  productMetadataID_Accessor.reset();
  operatorID_Accessor.reset();
  sOB_SatelliteRecordID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sOB_C2_RecordID_Type : type};
  if ((!sOB_C2_RecordID_Accessor) || (sOB_C2_RecordID_Accessor->getAccessorType() != requestedType)) {
    sOB_C2_RecordID_Accessor = SOB_C2_RecordID_Type::create(type);
    if (!sOB_C2_RecordID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sOB_C2_RecordID_Accessor;
}

uci::type::SOB_C2_RecordID_Type& EntitySourceIdentifierType::chooseSOB_C2_RecordID(uci::base::accessorType::AccessorType type) {
  return chooseSOB_C2_RecordID("chooseSOB_C2_RecordID", type);
}

std::unique_ptr<EntitySourceIdentifierType> EntitySourceIdentifierType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entitySourceIdentifierType : type};
  return (requestedType == uci::type::accessorType::entitySourceIdentifierType) ? boost::make_unique<EntitySourceIdentifierType>() : nullptr;
}

/**  */
namespace EntitySourceIdentifierType_Names {

constexpr const char* Extern_Type_Name{"EntitySourceIdentifierType"};
constexpr const char* EOB_RecordID_Name{"EOB_RecordID"};
constexpr const char* ExternalIdentifier_Name{"ExternalIdentifier"};
constexpr const char* Fusion_Name{"Fusion"};
constexpr const char* InternallyDerivedID_Name{"InternallyDerivedID"};
constexpr const char* Capability_Name{"Capability"};
constexpr const char* ProductMetadataID_Name{"ProductMetadataID"};
constexpr const char* OperatorID_Name{"OperatorID"};
constexpr const char* SOB_SatelliteRecordID_Name{"SOB_SatelliteRecordID"};
constexpr const char* SOB_C2_RecordID_Name{"SOB_C2_RecordID"};

} // namespace EntitySourceIdentifierType_Names

void EntitySourceIdentifierType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntitySourceIdentifierType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntitySourceIdentifierType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntitySourceIdentifierType_Names::EOB_RecordID_Name) {
      EOB_RecordID_Type::deserialize(valueType.second, accessor.chooseEOB_RecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntitySourceIdentifierType_Names::ExternalIdentifier_Name) {
      EntityExternalType::deserialize(valueType.second, accessor.chooseExternalIdentifier(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntitySourceIdentifierType_Names::Fusion_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntitySourceIdentifierType::Fusion& boundedList = accessor.chooseFusion();
        const uci::type::EntitySourceIdentifierType::Fusion::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EntityFusionSourceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntitySourceIdentifierType_Names::InternallyDerivedID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseInternallyDerivedID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntitySourceIdentifierType_Names::Capability_Name) {
      EntityCapabilitySourceType::deserialize(valueType.second, accessor.chooseCapability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntitySourceIdentifierType_Names::ProductMetadataID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntitySourceIdentifierType::ProductMetadataID& boundedList = accessor.chooseProductMetadataID();
        const uci::type::EntitySourceIdentifierType::ProductMetadataID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntitySourceIdentifierType_Names::OperatorID_Name) {
      OperatorID_Type::deserialize(valueType.second, accessor.chooseOperatorID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntitySourceIdentifierType_Names::SOB_SatelliteRecordID_Name) {
      SOB_SatelliteRecordID_Type::deserialize(valueType.second, accessor.chooseSOB_SatelliteRecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntitySourceIdentifierType_Names::SOB_C2_RecordID_Name) {
      SOB_C2_RecordID_Type::deserialize(valueType.second, accessor.chooseSOB_C2_RecordID(), nodeName, nsPrefix);
    }
  }
}

std::string EntitySourceIdentifierType::serialize(const uci::type::EntitySourceIdentifierType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntitySourceIdentifierType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntitySourceIdentifierType_Names::Extern_Type_Name);
  }
  if (accessor.isEOB_RecordID()) {
    EOB_RecordID_Type::serialize(accessor.getEOB_RecordID(), node, EntitySourceIdentifierType_Names::EOB_RecordID_Name);
  } else if (accessor.isExternalIdentifier()) {
    EntityExternalType::serialize(accessor.getExternalIdentifier(), node, EntitySourceIdentifierType_Names::ExternalIdentifier_Name);
  } else if (accessor.isFusion()) {
    {
      const uci::type::EntitySourceIdentifierType::Fusion& boundedList = accessor.getFusion();
      for (uci::type::EntitySourceIdentifierType::Fusion::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::EntityFusionSourceType::serialize(boundedList.at(i), node, EntitySourceIdentifierType_Names::Fusion_Name);
      }
    }
  } else if (accessor.isInternallyDerivedID()) {
    ID_Type::serialize(accessor.getInternallyDerivedID(), node, EntitySourceIdentifierType_Names::InternallyDerivedID_Name);
  } else if (accessor.isCapability()) {
    EntityCapabilitySourceType::serialize(accessor.getCapability(), node, EntitySourceIdentifierType_Names::Capability_Name);
  } else if (accessor.isProductMetadataID()) {
    {
      const uci::type::EntitySourceIdentifierType::ProductMetadataID& boundedList = accessor.getProductMetadataID();
      for (uci::type::EntitySourceIdentifierType::ProductMetadataID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ProductMetadataID_Type::serialize(boundedList.at(i), node, EntitySourceIdentifierType_Names::ProductMetadataID_Name);
      }
    }
  } else if (accessor.isOperatorID()) {
    OperatorID_Type::serialize(accessor.getOperatorID(), node, EntitySourceIdentifierType_Names::OperatorID_Name);
  } else if (accessor.isSOB_SatelliteRecordID()) {
    SOB_SatelliteRecordID_Type::serialize(accessor.getSOB_SatelliteRecordID(), node, EntitySourceIdentifierType_Names::SOB_SatelliteRecordID_Name);
  } else if (accessor.isSOB_C2_RecordID()) {
    SOB_C2_RecordID_Type::serialize(accessor.getSOB_C2_RecordID(), node, EntitySourceIdentifierType_Names::SOB_C2_RecordID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntitySourceIdentifierType& EntitySourceIdentifierType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntitySourceIdentifierType>().release());
}

uci::type::EntitySourceIdentifierType& EntitySourceIdentifierType::create(const uci::type::EntitySourceIdentifierType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntitySourceIdentifierType> newAccessor{boost::make_unique<asb_uci::type::EntitySourceIdentifierType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntitySourceIdentifierType::destroy(uci::type::EntitySourceIdentifierType& accessor) {
  delete dynamic_cast<asb_uci::type::EntitySourceIdentifierType*>(&accessor);
}

} // namespace type

} // namespace uci

