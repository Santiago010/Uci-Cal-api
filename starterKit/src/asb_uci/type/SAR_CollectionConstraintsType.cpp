/** @file SAR_CollectionConstraintsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SAR_CollectionConstraintsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AltitudeRangeType.h"
#include "../../../include/asb_uci/type/CollectionConstraintsType.h"
#include "../../../include/asb_uci/type/EmconConstraintType.h"
#include "../../../include/asb_uci/type/PositionLocationUncertaintyType.h"
#include "../../../include/asb_uci/type/SAR_CollectionConstraintsQualityType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AltitudeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AnglePositiveType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleQuarterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AngleType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DecibelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DistanceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmconConstraintType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PositionLocationUncertaintyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SAR_CollectionConstraintsQualityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SAR_CollectionConstraintsType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SAR_CollectionConstraintsType::SAR_CollectionConstraintsType() = default;

SAR_CollectionConstraintsType::~SAR_CollectionConstraintsType() = default;

void SAR_CollectionConstraintsType::copy(const uci::type::SAR_CollectionConstraintsType& accessor) {
  copyImpl(accessor, false);
}

void SAR_CollectionConstraintsType::copyImpl(const uci::type::SAR_CollectionConstraintsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CollectionConstraintsType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const SAR_CollectionConstraintsType&>(accessor);
    if (accessorImpl.quality_Accessor) {
      setQuality(*(accessorImpl.quality_Accessor));
    } else {
      quality_Accessor.reset();
    }
    if (accessorImpl.hasContinuousSpotAngle()) {
      setContinuousSpotAngle(accessorImpl.getContinuousSpotAngle());
    } else {
      clearContinuousSpotAngle();
    }
    if (accessorImpl.altitudeConstraints_Accessor) {
      setAltitudeConstraints(*(accessorImpl.altitudeConstraints_Accessor));
    } else {
      altitudeConstraints_Accessor.reset();
    }
    if (accessorImpl.hasMaximumMappingTime()) {
      setMaximumMappingTime(accessorImpl.getMaximumMappingTime());
    } else {
      clearMaximumMappingTime();
    }
    if (accessorImpl.hasAzSubsetFraction()) {
      setAzSubsetFraction(accessorImpl.getAzSubsetFraction());
    } else {
      clearAzSubsetFraction();
    }
    if (accessorImpl.hasLOS_BufferAngle()) {
      setLOS_BufferAngle(accessorImpl.getLOS_BufferAngle());
    } else {
      clearLOS_BufferAngle();
    }
    if (accessorImpl.hasNumImagesAzimuth()) {
      setNumImagesAzimuth(accessorImpl.getNumImagesAzimuth());
    } else {
      clearNumImagesAzimuth();
    }
    if (accessorImpl.hasNumImagesRange()) {
      setNumImagesRange(accessorImpl.getNumImagesRange());
    } else {
      clearNumImagesRange();
    }
    if (accessorImpl.hasPercentAzimuthCollection()) {
      setPercentAzimuthCollection(accessorImpl.getPercentAzimuthCollection());
    } else {
      clearPercentAzimuthCollection();
    }
    if (accessorImpl.hasHeadingDeviationTolerance()) {
      setHeadingDeviationTolerance(accessorImpl.getHeadingDeviationTolerance());
    } else {
      clearHeadingDeviationTolerance();
    }
    if (accessorImpl.hasCrossTrackDeviationTolerance()) {
      setCrossTrackDeviationTolerance(accessorImpl.getCrossTrackDeviationTolerance());
    } else {
      clearCrossTrackDeviationTolerance();
    }
    if (accessorImpl.emcon_Accessor) {
      setEmcon(*(accessorImpl.emcon_Accessor));
    } else {
      emcon_Accessor.reset();
    }
    if (accessorImpl.hasMapGainAdjustment()) {
      setMapGainAdjustment(accessorImpl.getMapGainAdjustment());
    } else {
      clearMapGainAdjustment();
    }
    if (accessorImpl.ownshipLocationConstraint_Accessor) {
      setOwnshipLocationConstraint(*(accessorImpl.ownshipLocationConstraint_Accessor));
    } else {
      ownshipLocationConstraint_Accessor.reset();
    }
  }
}

void SAR_CollectionConstraintsType::reset() noexcept {
  CollectionConstraintsType::reset();
  quality_Accessor.reset();
  clearContinuousSpotAngle();
  altitudeConstraints_Accessor.reset();
  clearMaximumMappingTime();
  clearAzSubsetFraction();
  clearLOS_BufferAngle();
  clearNumImagesAzimuth();
  clearNumImagesRange();
  clearPercentAzimuthCollection();
  clearHeadingDeviationTolerance();
  clearCrossTrackDeviationTolerance();
  emcon_Accessor.reset();
  clearMapGainAdjustment();
  ownshipLocationConstraint_Accessor.reset();
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsType::getQuality_() const {
  if (quality_Accessor) {
    return *quality_Accessor;
  }
  throw uci::base::UCIException("Error in getQuality(): An attempt was made to get an optional field that was not enabled, call hasQuality() to determine if it is safe to call getQuality()");
}

const uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsType::getQuality() const {
  return getQuality_();
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsType::getQuality() {
  return getQuality_();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setQuality(const uci::type::SAR_CollectionConstraintsQualityType& accessor) {
  enableQuality();
  if (&accessor != quality_Accessor.get()) {
    quality_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CollectionConstraintsType::hasQuality() const noexcept {
  return static_cast<bool>(quality_Accessor);
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsType::enableQuality(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_CollectionConstraintsQualityType : type};
  if ((!quality_Accessor) || (quality_Accessor->getAccessorType() != requestedType)) {
    quality_Accessor = SAR_CollectionConstraintsQualityType::create(requestedType);
    if (!quality_Accessor) {
      throw uci::base::UCIException("Error in enableQuality(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *quality_Accessor;
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearQuality() noexcept {
  quality_Accessor.reset();
  return *this;
}

uci::type::AngleQuarterTypeValue SAR_CollectionConstraintsType::getContinuousSpotAngle() const {
  if (continuousSpotAngle_Accessor) {
    return *continuousSpotAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getContinuousSpotAngle(): An attempt was made to get an optional field that was not enabled, call hasContinuousSpotAngle() to determine if it is safe to call getContinuousSpotAngle()");
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setContinuousSpotAngle(uci::type::AngleQuarterTypeValue value) {
  continuousSpotAngle_Accessor = value;
  return *this;
}

bool SAR_CollectionConstraintsType::hasContinuousSpotAngle() const noexcept {
  return continuousSpotAngle_Accessor.has_value();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearContinuousSpotAngle() noexcept {
  continuousSpotAngle_Accessor.reset();
  return *this;
}

uci::type::AltitudeRangeType& SAR_CollectionConstraintsType::getAltitudeConstraints_() const {
  if (altitudeConstraints_Accessor) {
    return *altitudeConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getAltitudeConstraints(): An attempt was made to get an optional field that was not enabled, call hasAltitudeConstraints() to determine if it is safe to call getAltitudeConstraints()");
}

const uci::type::AltitudeRangeType& SAR_CollectionConstraintsType::getAltitudeConstraints() const {
  return getAltitudeConstraints_();
}

uci::type::AltitudeRangeType& SAR_CollectionConstraintsType::getAltitudeConstraints() {
  return getAltitudeConstraints_();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setAltitudeConstraints(const uci::type::AltitudeRangeType& accessor) {
  enableAltitudeConstraints();
  if (&accessor != altitudeConstraints_Accessor.get()) {
    altitudeConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CollectionConstraintsType::hasAltitudeConstraints() const noexcept {
  return static_cast<bool>(altitudeConstraints_Accessor);
}

uci::type::AltitudeRangeType& SAR_CollectionConstraintsType::enableAltitudeConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::altitudeRangeType : type};
  if ((!altitudeConstraints_Accessor) || (altitudeConstraints_Accessor->getAccessorType() != requestedType)) {
    altitudeConstraints_Accessor = AltitudeRangeType::create(requestedType);
    if (!altitudeConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableAltitudeConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *altitudeConstraints_Accessor;
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearAltitudeConstraints() noexcept {
  altitudeConstraints_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue SAR_CollectionConstraintsType::getMaximumMappingTime() const {
  if (maximumMappingTime_Accessor) {
    return *maximumMappingTime_Accessor;
  }
  throw uci::base::UCIException("Error in getMaximumMappingTime(): An attempt was made to get an optional field that was not enabled, call hasMaximumMappingTime() to determine if it is safe to call getMaximumMappingTime()");
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setMaximumMappingTime(uci::type::DurationTypeValue value) {
  maximumMappingTime_Accessor = value;
  return *this;
}

bool SAR_CollectionConstraintsType::hasMaximumMappingTime() const noexcept {
  return maximumMappingTime_Accessor.has_value();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearMaximumMappingTime() noexcept {
  maximumMappingTime_Accessor.reset();
  return *this;
}

uci::type::AngleTypeValue SAR_CollectionConstraintsType::getAzSubsetFraction() const {
  if (azSubsetFraction_Accessor) {
    return *azSubsetFraction_Accessor;
  }
  throw uci::base::UCIException("Error in getAzSubsetFraction(): An attempt was made to get an optional field that was not enabled, call hasAzSubsetFraction() to determine if it is safe to call getAzSubsetFraction()");
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setAzSubsetFraction(uci::type::AngleTypeValue value) {
  azSubsetFraction_Accessor = value;
  return *this;
}

bool SAR_CollectionConstraintsType::hasAzSubsetFraction() const noexcept {
  return azSubsetFraction_Accessor.has_value();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearAzSubsetFraction() noexcept {
  azSubsetFraction_Accessor.reset();
  return *this;
}

uci::type::AnglePositiveTypeValue SAR_CollectionConstraintsType::getLOS_BufferAngle() const {
  if (lOS_BufferAngle_Accessor) {
    return *lOS_BufferAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getLOS_BufferAngle(): An attempt was made to get an optional field that was not enabled, call hasLOS_BufferAngle() to determine if it is safe to call getLOS_BufferAngle()");
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setLOS_BufferAngle(uci::type::AnglePositiveTypeValue value) {
  lOS_BufferAngle_Accessor = value;
  return *this;
}

bool SAR_CollectionConstraintsType::hasLOS_BufferAngle() const noexcept {
  return lOS_BufferAngle_Accessor.has_value();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearLOS_BufferAngle() noexcept {
  lOS_BufferAngle_Accessor.reset();
  return *this;
}

xs::UnsignedInt SAR_CollectionConstraintsType::getNumImagesAzimuth() const {
  if (numImagesAzimuth_Accessor) {
    return *numImagesAzimuth_Accessor;
  }
  throw uci::base::UCIException("Error in getNumImagesAzimuth(): An attempt was made to get an optional field that was not enabled, call hasNumImagesAzimuth() to determine if it is safe to call getNumImagesAzimuth()");
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setNumImagesAzimuth(xs::UnsignedInt value) {
  numImagesAzimuth_Accessor = value;
  return *this;
}

bool SAR_CollectionConstraintsType::hasNumImagesAzimuth() const noexcept {
  return numImagesAzimuth_Accessor.has_value();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearNumImagesAzimuth() noexcept {
  numImagesAzimuth_Accessor.reset();
  return *this;
}

xs::UnsignedInt SAR_CollectionConstraintsType::getNumImagesRange() const {
  if (numImagesRange_Accessor) {
    return *numImagesRange_Accessor;
  }
  throw uci::base::UCIException("Error in getNumImagesRange(): An attempt was made to get an optional field that was not enabled, call hasNumImagesRange() to determine if it is safe to call getNumImagesRange()");
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setNumImagesRange(xs::UnsignedInt value) {
  numImagesRange_Accessor = value;
  return *this;
}

bool SAR_CollectionConstraintsType::hasNumImagesRange() const noexcept {
  return numImagesRange_Accessor.has_value();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearNumImagesRange() noexcept {
  numImagesRange_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue SAR_CollectionConstraintsType::getPercentAzimuthCollection() const {
  if (percentAzimuthCollection_Accessor) {
    return *percentAzimuthCollection_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentAzimuthCollection(): An attempt was made to get an optional field that was not enabled, call hasPercentAzimuthCollection() to determine if it is safe to call getPercentAzimuthCollection()");
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setPercentAzimuthCollection(uci::type::PercentTypeValue value) {
  percentAzimuthCollection_Accessor = value;
  return *this;
}

bool SAR_CollectionConstraintsType::hasPercentAzimuthCollection() const noexcept {
  return percentAzimuthCollection_Accessor.has_value();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearPercentAzimuthCollection() noexcept {
  percentAzimuthCollection_Accessor.reset();
  return *this;
}

uci::type::AnglePositiveTypeValue SAR_CollectionConstraintsType::getHeadingDeviationTolerance() const {
  if (headingDeviationTolerance_Accessor) {
    return *headingDeviationTolerance_Accessor;
  }
  throw uci::base::UCIException("Error in getHeadingDeviationTolerance(): An attempt was made to get an optional field that was not enabled, call hasHeadingDeviationTolerance() to determine if it is safe to call getHeadingDeviationTolerance()");
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setHeadingDeviationTolerance(uci::type::AnglePositiveTypeValue value) {
  headingDeviationTolerance_Accessor = value;
  return *this;
}

bool SAR_CollectionConstraintsType::hasHeadingDeviationTolerance() const noexcept {
  return headingDeviationTolerance_Accessor.has_value();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearHeadingDeviationTolerance() noexcept {
  headingDeviationTolerance_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue SAR_CollectionConstraintsType::getCrossTrackDeviationTolerance() const {
  if (crossTrackDeviationTolerance_Accessor) {
    return *crossTrackDeviationTolerance_Accessor;
  }
  throw uci::base::UCIException("Error in getCrossTrackDeviationTolerance(): An attempt was made to get an optional field that was not enabled, call hasCrossTrackDeviationTolerance() to determine if it is safe to call getCrossTrackDeviationTolerance()");
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setCrossTrackDeviationTolerance(uci::type::DistanceTypeValue value) {
  crossTrackDeviationTolerance_Accessor = value;
  return *this;
}

bool SAR_CollectionConstraintsType::hasCrossTrackDeviationTolerance() const noexcept {
  return crossTrackDeviationTolerance_Accessor.has_value();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearCrossTrackDeviationTolerance() noexcept {
  crossTrackDeviationTolerance_Accessor.reset();
  return *this;
}

uci::type::EmconConstraintType& SAR_CollectionConstraintsType::getEmcon_() const {
  if (emcon_Accessor) {
    return *emcon_Accessor;
  }
  throw uci::base::UCIException("Error in getEmcon(): An attempt was made to get an optional field that was not enabled, call hasEmcon() to determine if it is safe to call getEmcon()");
}

const uci::type::EmconConstraintType& SAR_CollectionConstraintsType::getEmcon() const {
  return getEmcon_();
}

uci::type::EmconConstraintType& SAR_CollectionConstraintsType::getEmcon() {
  return getEmcon_();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setEmcon(const uci::type::EmconConstraintType& accessor) {
  enableEmcon();
  if (&accessor != emcon_Accessor.get()) {
    emcon_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CollectionConstraintsType::hasEmcon() const noexcept {
  return static_cast<bool>(emcon_Accessor);
}

uci::type::EmconConstraintType& SAR_CollectionConstraintsType::enableEmcon(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emconConstraintType : type};
  if ((!emcon_Accessor) || (emcon_Accessor->getAccessorType() != requestedType)) {
    emcon_Accessor = EmconConstraintType::create(requestedType);
    if (!emcon_Accessor) {
      throw uci::base::UCIException("Error in enableEmcon(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emcon_Accessor;
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearEmcon() noexcept {
  emcon_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue SAR_CollectionConstraintsType::getMapGainAdjustment() const {
  if (mapGainAdjustment_Accessor) {
    return *mapGainAdjustment_Accessor;
  }
  throw uci::base::UCIException("Error in getMapGainAdjustment(): An attempt was made to get an optional field that was not enabled, call hasMapGainAdjustment() to determine if it is safe to call getMapGainAdjustment()");
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setMapGainAdjustment(uci::type::DecibelTypeValue value) {
  mapGainAdjustment_Accessor = value;
  return *this;
}

bool SAR_CollectionConstraintsType::hasMapGainAdjustment() const noexcept {
  return mapGainAdjustment_Accessor.has_value();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearMapGainAdjustment() noexcept {
  mapGainAdjustment_Accessor.reset();
  return *this;
}

uci::type::PositionLocationUncertaintyType& SAR_CollectionConstraintsType::getOwnshipLocationConstraint_() const {
  if (ownshipLocationConstraint_Accessor) {
    return *ownshipLocationConstraint_Accessor;
  }
  throw uci::base::UCIException("Error in getOwnshipLocationConstraint(): An attempt was made to get an optional field that was not enabled, call hasOwnshipLocationConstraint() to determine if it is safe to call getOwnshipLocationConstraint()");
}

const uci::type::PositionLocationUncertaintyType& SAR_CollectionConstraintsType::getOwnshipLocationConstraint() const {
  return getOwnshipLocationConstraint_();
}

uci::type::PositionLocationUncertaintyType& SAR_CollectionConstraintsType::getOwnshipLocationConstraint() {
  return getOwnshipLocationConstraint_();
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::setOwnshipLocationConstraint(const uci::type::PositionLocationUncertaintyType& accessor) {
  enableOwnshipLocationConstraint();
  if (&accessor != ownshipLocationConstraint_Accessor.get()) {
    ownshipLocationConstraint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SAR_CollectionConstraintsType::hasOwnshipLocationConstraint() const noexcept {
  return static_cast<bool>(ownshipLocationConstraint_Accessor);
}

uci::type::PositionLocationUncertaintyType& SAR_CollectionConstraintsType::enableOwnshipLocationConstraint(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionLocationUncertaintyType : type};
  if ((!ownshipLocationConstraint_Accessor) || (ownshipLocationConstraint_Accessor->getAccessorType() != requestedType)) {
    ownshipLocationConstraint_Accessor = PositionLocationUncertaintyType::create(requestedType);
    if (!ownshipLocationConstraint_Accessor) {
      throw uci::base::UCIException("Error in enableOwnshipLocationConstraint(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ownshipLocationConstraint_Accessor;
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::clearOwnshipLocationConstraint() noexcept {
  ownshipLocationConstraint_Accessor.reset();
  return *this;
}

std::unique_ptr<SAR_CollectionConstraintsType> SAR_CollectionConstraintsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_CollectionConstraintsType : type};
  return (requestedType == uci::type::accessorType::sAR_CollectionConstraintsType) ? boost::make_unique<SAR_CollectionConstraintsType>() : nullptr;
}

/**  */
namespace SAR_CollectionConstraintsType_Names {

constexpr const char* Extern_Type_Name{"SAR_CollectionConstraintsType"};
constexpr const char* Quality_Name{"Quality"};
constexpr const char* ContinuousSpotAngle_Name{"ContinuousSpotAngle"};
constexpr const char* AltitudeConstraints_Name{"AltitudeConstraints"};
constexpr const char* MaximumMappingTime_Name{"MaximumMappingTime"};
constexpr const char* AzSubsetFraction_Name{"AzSubsetFraction"};
constexpr const char* LOS_BufferAngle_Name{"LOS_BufferAngle"};
constexpr const char* NumImagesAzimuth_Name{"NumImagesAzimuth"};
constexpr const char* NumImagesRange_Name{"NumImagesRange"};
constexpr const char* PercentAzimuthCollection_Name{"PercentAzimuthCollection"};
constexpr const char* HeadingDeviationTolerance_Name{"HeadingDeviationTolerance"};
constexpr const char* CrossTrackDeviationTolerance_Name{"CrossTrackDeviationTolerance"};
constexpr const char* Emcon_Name{"Emcon"};
constexpr const char* MapGainAdjustment_Name{"MapGainAdjustment"};
constexpr const char* OwnshipLocationConstraint_Name{"OwnshipLocationConstraint"};

} // namespace SAR_CollectionConstraintsType_Names

void SAR_CollectionConstraintsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_CollectionConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SAR_CollectionConstraintsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::Quality_Name) {
      SAR_CollectionConstraintsQualityType::deserialize(valueType.second, accessor.enableQuality(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::ContinuousSpotAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setContinuousSpotAngle(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::AltitudeConstraints_Name) {
      AltitudeRangeType::deserialize(valueType.second, accessor.enableAltitudeConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::MaximumMappingTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumMappingTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::AzSubsetFraction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzSubsetFraction(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::LOS_BufferAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLOS_BufferAngle(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::NumImagesAzimuth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumImagesAzimuth(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::NumImagesRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumImagesRange(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::PercentAzimuthCollection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentAzimuthCollection(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::HeadingDeviationTolerance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHeadingDeviationTolerance(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::CrossTrackDeviationTolerance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCrossTrackDeviationTolerance(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::Emcon_Name) {
      EmconConstraintType::deserialize(valueType.second, accessor.enableEmcon(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::MapGainAdjustment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMapGainAdjustment(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::OwnshipLocationConstraint_Name) {
      PositionLocationUncertaintyType::deserialize(valueType.second, accessor.enableOwnshipLocationConstraint(), nodeName, nsPrefix);
    }
  }
  CollectionConstraintsType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SAR_CollectionConstraintsType::serialize(const uci::type::SAR_CollectionConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SAR_CollectionConstraintsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SAR_CollectionConstraintsType_Names::Extern_Type_Name);
  }
  CollectionConstraintsType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasQuality()) {
    SAR_CollectionConstraintsQualityType::serialize(accessor.getQuality(), node, SAR_CollectionConstraintsType_Names::Quality_Name);
  }
  if (accessor.hasContinuousSpotAngle()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getContinuousSpotAngle(), node, SAR_CollectionConstraintsType_Names::ContinuousSpotAngle_Name);
  }
  if (accessor.hasAltitudeConstraints()) {
    AltitudeRangeType::serialize(accessor.getAltitudeConstraints(), node, SAR_CollectionConstraintsType_Names::AltitudeConstraints_Name);
  }
  if (accessor.hasMaximumMappingTime()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getMaximumMappingTime(), node, SAR_CollectionConstraintsType_Names::MaximumMappingTime_Name);
  }
  if (accessor.hasAzSubsetFraction()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAzSubsetFraction(), node, SAR_CollectionConstraintsType_Names::AzSubsetFraction_Name);
  }
  if (accessor.hasLOS_BufferAngle()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getLOS_BufferAngle(), node, SAR_CollectionConstraintsType_Names::LOS_BufferAngle_Name);
  }
  if (accessor.hasNumImagesAzimuth()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumImagesAzimuth(), node, SAR_CollectionConstraintsType_Names::NumImagesAzimuth_Name);
  }
  if (accessor.hasNumImagesRange()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumImagesRange(), node, SAR_CollectionConstraintsType_Names::NumImagesRange_Name);
  }
  if (accessor.hasPercentAzimuthCollection()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentAzimuthCollection(), node, SAR_CollectionConstraintsType_Names::PercentAzimuthCollection_Name);
  }
  if (accessor.hasHeadingDeviationTolerance()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getHeadingDeviationTolerance(), node, SAR_CollectionConstraintsType_Names::HeadingDeviationTolerance_Name);
  }
  if (accessor.hasCrossTrackDeviationTolerance()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getCrossTrackDeviationTolerance(), node, SAR_CollectionConstraintsType_Names::CrossTrackDeviationTolerance_Name);
  }
  if (accessor.hasEmcon()) {
    EmconConstraintType::serialize(accessor.getEmcon(), node, SAR_CollectionConstraintsType_Names::Emcon_Name);
  }
  if (accessor.hasMapGainAdjustment()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMapGainAdjustment(), node, SAR_CollectionConstraintsType_Names::MapGainAdjustment_Name);
  }
  if (accessor.hasOwnshipLocationConstraint()) {
    PositionLocationUncertaintyType::serialize(accessor.getOwnshipLocationConstraint(), node, SAR_CollectionConstraintsType_Names::OwnshipLocationConstraint_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SAR_CollectionConstraintsType>().release());
}

uci::type::SAR_CollectionConstraintsType& SAR_CollectionConstraintsType::create(const uci::type::SAR_CollectionConstraintsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SAR_CollectionConstraintsType> newAccessor{boost::make_unique<asb_uci::type::SAR_CollectionConstraintsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SAR_CollectionConstraintsType::destroy(uci::type::SAR_CollectionConstraintsType& accessor) {
  delete dynamic_cast<asb_uci::type::SAR_CollectionConstraintsType*>(&accessor);
}

} // namespace type

} // namespace uci

