/** @file CommConnectionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommConnectionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommModulationTypeEnum.h"
#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommConnectionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommModulationTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommConnectionType::CommConnectionType()
  : transmitChannel_Accessor{boost::make_unique<TransmitChannel>(0, SIZE_MAX)},
    transmitFrequency_Accessor{boost::make_unique<TransmitFrequency>(0, SIZE_MAX)},
    receiveChannel_Accessor{boost::make_unique<ReceiveChannel>(0, SIZE_MAX)},
    receiveFrequency_Accessor{boost::make_unique<ReceiveFrequency>(0, SIZE_MAX)},
    networkKey_Accessor{boost::make_unique<NetworkKey>(0, SIZE_MAX)} {
}

CommConnectionType::~CommConnectionType() = default;

void CommConnectionType::copy(const uci::type::CommConnectionType& accessor) {
  copyImpl(accessor, false);
}

void CommConnectionType::copyImpl(const uci::type::CommConnectionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommConnectionType&>(accessor);
    setTransmitChannel(*(accessorImpl.transmitChannel_Accessor));
    setTransmitFrequency(*(accessorImpl.transmitFrequency_Accessor));
    if (accessorImpl.hasInstantaneousTransmitBandwidth()) {
      setInstantaneousTransmitBandwidth(accessorImpl.getInstantaneousTransmitBandwidth());
    } else {
      clearInstantaneousTransmitBandwidth();
    }
    setReceiveChannel(*(accessorImpl.receiveChannel_Accessor));
    setReceiveFrequency(*(accessorImpl.receiveFrequency_Accessor));
    if (accessorImpl.hasInstantaneousReceiveBandwidth()) {
      setInstantaneousReceiveBandwidth(accessorImpl.getInstantaneousReceiveBandwidth());
    } else {
      clearInstantaneousReceiveBandwidth();
    }
    if (accessorImpl.modulation_Accessor) {
      setModulation(*(accessorImpl.modulation_Accessor));
    } else {
      modulation_Accessor.reset();
    }
    setNetworkKey(*(accessorImpl.networkKey_Accessor));
    if (accessorImpl.hasNetworkTimeRef()) {
      setNetworkTimeRef(accessorImpl.getNetworkTimeRef());
    } else {
      clearNetworkTimeRef();
    }
    if (accessorImpl.hasExternalTimeRef()) {
      setExternalTimeRef(accessorImpl.getExternalTimeRef());
    } else {
      clearExternalTimeRef();
    }
    if (accessorImpl.hasNetworkTime()) {
      setNetworkTime(accessorImpl.getNetworkTime());
    } else {
      clearNetworkTime();
    }
    if (accessorImpl.hasNetworkTimeUncertaintyRange()) {
      setNetworkTimeUncertaintyRange(accessorImpl.getNetworkTimeUncertaintyRange());
    } else {
      clearNetworkTimeUncertaintyRange();
    }
    if (accessorImpl.hasNetworkTimeOffset()) {
      setNetworkTimeOffset(accessorImpl.getNetworkTimeOffset());
    } else {
      clearNetworkTimeOffset();
    }
  }
}

void CommConnectionType::reset() noexcept {
  transmitChannel_Accessor->reset();
  transmitFrequency_Accessor->reset();
  clearInstantaneousTransmitBandwidth();
  receiveChannel_Accessor->reset();
  receiveFrequency_Accessor->reset();
  clearInstantaneousReceiveBandwidth();
  modulation_Accessor.reset();
  networkKey_Accessor->reset();
  clearNetworkTimeRef();
  clearExternalTimeRef();
  clearNetworkTime();
  clearNetworkTimeUncertaintyRange();
  clearNetworkTimeOffset();
}

const uci::type::CommConnectionType::TransmitChannel& CommConnectionType::getTransmitChannel() const {
  return *transmitChannel_Accessor;
}

uci::type::CommConnectionType::TransmitChannel& CommConnectionType::getTransmitChannel() {
  return *transmitChannel_Accessor;
}

uci::type::CommConnectionType& CommConnectionType::setTransmitChannel(const uci::type::CommConnectionType::TransmitChannel& accessor) {
  if (&accessor != transmitChannel_Accessor.get()) {
    transmitChannel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommConnectionType::TransmitFrequency& CommConnectionType::getTransmitFrequency() const {
  return *transmitFrequency_Accessor;
}

uci::type::CommConnectionType::TransmitFrequency& CommConnectionType::getTransmitFrequency() {
  return *transmitFrequency_Accessor;
}

uci::type::CommConnectionType& CommConnectionType::setTransmitFrequency(const uci::type::CommConnectionType::TransmitFrequency& accessor) {
  if (&accessor != transmitFrequency_Accessor.get()) {
    transmitFrequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FrequencyTypeValue CommConnectionType::getInstantaneousTransmitBandwidth() const {
  if (instantaneousTransmitBandwidth_Accessor) {
    return *instantaneousTransmitBandwidth_Accessor;
  }
  throw uci::base::UCIException("Error in getInstantaneousTransmitBandwidth(): An attempt was made to get an optional field that was not enabled, call hasInstantaneousTransmitBandwidth() to determine if it is safe to call getInstantaneousTransmitBandwidth()");
}

uci::type::CommConnectionType& CommConnectionType::setInstantaneousTransmitBandwidth(uci::type::FrequencyTypeValue value) {
  instantaneousTransmitBandwidth_Accessor = value;
  return *this;
}

bool CommConnectionType::hasInstantaneousTransmitBandwidth() const noexcept {
  return instantaneousTransmitBandwidth_Accessor.has_value();
}

uci::type::CommConnectionType& CommConnectionType::clearInstantaneousTransmitBandwidth() noexcept {
  instantaneousTransmitBandwidth_Accessor.reset();
  return *this;
}

const uci::type::CommConnectionType::ReceiveChannel& CommConnectionType::getReceiveChannel() const {
  return *receiveChannel_Accessor;
}

uci::type::CommConnectionType::ReceiveChannel& CommConnectionType::getReceiveChannel() {
  return *receiveChannel_Accessor;
}

uci::type::CommConnectionType& CommConnectionType::setReceiveChannel(const uci::type::CommConnectionType::ReceiveChannel& accessor) {
  if (&accessor != receiveChannel_Accessor.get()) {
    receiveChannel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommConnectionType::ReceiveFrequency& CommConnectionType::getReceiveFrequency() const {
  return *receiveFrequency_Accessor;
}

uci::type::CommConnectionType::ReceiveFrequency& CommConnectionType::getReceiveFrequency() {
  return *receiveFrequency_Accessor;
}

uci::type::CommConnectionType& CommConnectionType::setReceiveFrequency(const uci::type::CommConnectionType::ReceiveFrequency& accessor) {
  if (&accessor != receiveFrequency_Accessor.get()) {
    receiveFrequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FrequencyTypeValue CommConnectionType::getInstantaneousReceiveBandwidth() const {
  if (instantaneousReceiveBandwidth_Accessor) {
    return *instantaneousReceiveBandwidth_Accessor;
  }
  throw uci::base::UCIException("Error in getInstantaneousReceiveBandwidth(): An attempt was made to get an optional field that was not enabled, call hasInstantaneousReceiveBandwidth() to determine if it is safe to call getInstantaneousReceiveBandwidth()");
}

uci::type::CommConnectionType& CommConnectionType::setInstantaneousReceiveBandwidth(uci::type::FrequencyTypeValue value) {
  instantaneousReceiveBandwidth_Accessor = value;
  return *this;
}

bool CommConnectionType::hasInstantaneousReceiveBandwidth() const noexcept {
  return instantaneousReceiveBandwidth_Accessor.has_value();
}

uci::type::CommConnectionType& CommConnectionType::clearInstantaneousReceiveBandwidth() noexcept {
  instantaneousReceiveBandwidth_Accessor.reset();
  return *this;
}

uci::type::CommModulationTypeEnum& CommConnectionType::getModulation_() const {
  if (modulation_Accessor) {
    return *modulation_Accessor;
  }
  throw uci::base::UCIException("Error in getModulation(): An attempt was made to get an optional field that was not enabled, call hasModulation() to determine if it is safe to call getModulation()");
}

const uci::type::CommModulationTypeEnum& CommConnectionType::getModulation() const {
  return getModulation_();
}

uci::type::CommModulationTypeEnum& CommConnectionType::getModulation() {
  return getModulation_();
}

uci::type::CommConnectionType& CommConnectionType::setModulation(const uci::type::CommModulationTypeEnum& accessor) {
  enableModulation();
  if (&accessor != modulation_Accessor.get()) {
    modulation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommConnectionType& CommConnectionType::setModulation(const uci::type::CommModulationTypeEnum::EnumerationItem value) {
  enableModulation().setValue(value);
  return *this;
}

bool CommConnectionType::hasModulation() const noexcept {
  return static_cast<bool>(modulation_Accessor);
}

uci::type::CommModulationTypeEnum& CommConnectionType::enableModulation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commModulationTypeEnum : type};
  if ((!modulation_Accessor) || (modulation_Accessor->getAccessorType() != requestedType)) {
    modulation_Accessor = CommModulationTypeEnum::create(requestedType);
    if (!modulation_Accessor) {
      throw uci::base::UCIException("Error in enableModulation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modulation_Accessor;
}

uci::type::CommConnectionType& CommConnectionType::clearModulation() noexcept {
  modulation_Accessor.reset();
  return *this;
}

const uci::type::CommConnectionType::NetworkKey& CommConnectionType::getNetworkKey() const {
  return *networkKey_Accessor;
}

uci::type::CommConnectionType::NetworkKey& CommConnectionType::getNetworkKey() {
  return *networkKey_Accessor;
}

uci::type::CommConnectionType& CommConnectionType::setNetworkKey(const uci::type::CommConnectionType::NetworkKey& accessor) {
  if (&accessor != networkKey_Accessor.get()) {
    networkKey_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean CommConnectionType::getNetworkTimeRef() const {
  if (networkTimeRef_Accessor) {
    return *networkTimeRef_Accessor;
  }
  throw uci::base::UCIException("Error in getNetworkTimeRef(): An attempt was made to get an optional field that was not enabled, call hasNetworkTimeRef() to determine if it is safe to call getNetworkTimeRef()");
}

uci::type::CommConnectionType& CommConnectionType::setNetworkTimeRef(xs::Boolean value) {
  networkTimeRef_Accessor = value;
  return *this;
}

bool CommConnectionType::hasNetworkTimeRef() const noexcept {
  return networkTimeRef_Accessor.has_value();
}

uci::type::CommConnectionType& CommConnectionType::clearNetworkTimeRef() noexcept {
  networkTimeRef_Accessor.reset();
  return *this;
}

xs::Boolean CommConnectionType::getExternalTimeRef() const {
  if (externalTimeRef_Accessor) {
    return *externalTimeRef_Accessor;
  }
  throw uci::base::UCIException("Error in getExternalTimeRef(): An attempt was made to get an optional field that was not enabled, call hasExternalTimeRef() to determine if it is safe to call getExternalTimeRef()");
}

uci::type::CommConnectionType& CommConnectionType::setExternalTimeRef(xs::Boolean value) {
  externalTimeRef_Accessor = value;
  return *this;
}

bool CommConnectionType::hasExternalTimeRef() const noexcept {
  return externalTimeRef_Accessor.has_value();
}

uci::type::CommConnectionType& CommConnectionType::clearExternalTimeRef() noexcept {
  externalTimeRef_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue CommConnectionType::getNetworkTime() const {
  if (networkTime_Accessor) {
    return *networkTime_Accessor;
  }
  throw uci::base::UCIException("Error in getNetworkTime(): An attempt was made to get an optional field that was not enabled, call hasNetworkTime() to determine if it is safe to call getNetworkTime()");
}

uci::type::CommConnectionType& CommConnectionType::setNetworkTime(uci::type::DateTimeTypeValue value) {
  networkTime_Accessor = value;
  return *this;
}

bool CommConnectionType::hasNetworkTime() const noexcept {
  return networkTime_Accessor.has_value();
}

uci::type::CommConnectionType& CommConnectionType::clearNetworkTime() noexcept {
  networkTime_Accessor.reset();
  return *this;
}

xs::Float CommConnectionType::getNetworkTimeUncertaintyRange() const {
  if (networkTimeUncertaintyRange_Accessor) {
    return *networkTimeUncertaintyRange_Accessor;
  }
  throw uci::base::UCIException("Error in getNetworkTimeUncertaintyRange(): An attempt was made to get an optional field that was not enabled, call hasNetworkTimeUncertaintyRange() to determine if it is safe to call getNetworkTimeUncertaintyRange()");
}

uci::type::CommConnectionType& CommConnectionType::setNetworkTimeUncertaintyRange(xs::Float value) {
  networkTimeUncertaintyRange_Accessor = value;
  return *this;
}

bool CommConnectionType::hasNetworkTimeUncertaintyRange() const noexcept {
  return networkTimeUncertaintyRange_Accessor.has_value();
}

uci::type::CommConnectionType& CommConnectionType::clearNetworkTimeUncertaintyRange() noexcept {
  networkTimeUncertaintyRange_Accessor.reset();
  return *this;
}

uci::type::DurationTypeValue CommConnectionType::getNetworkTimeOffset() const {
  if (networkTimeOffset_Accessor) {
    return *networkTimeOffset_Accessor;
  }
  throw uci::base::UCIException("Error in getNetworkTimeOffset(): An attempt was made to get an optional field that was not enabled, call hasNetworkTimeOffset() to determine if it is safe to call getNetworkTimeOffset()");
}

uci::type::CommConnectionType& CommConnectionType::setNetworkTimeOffset(uci::type::DurationTypeValue value) {
  networkTimeOffset_Accessor = value;
  return *this;
}

bool CommConnectionType::hasNetworkTimeOffset() const noexcept {
  return networkTimeOffset_Accessor.has_value();
}

uci::type::CommConnectionType& CommConnectionType::clearNetworkTimeOffset() noexcept {
  networkTimeOffset_Accessor.reset();
  return *this;
}

std::unique_ptr<CommConnectionType> CommConnectionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commConnectionType : type};
  return (requestedType == uci::type::accessorType::commConnectionType) ? boost::make_unique<CommConnectionType>() : nullptr;
}

/**  */
namespace CommConnectionType_Names {

constexpr const char* Extern_Type_Name{"CommConnectionType"};
constexpr const char* TransmitChannel_Name{"TransmitChannel"};
constexpr const char* TransmitFrequency_Name{"TransmitFrequency"};
constexpr const char* InstantaneousTransmitBandwidth_Name{"InstantaneousTransmitBandwidth"};
constexpr const char* ReceiveChannel_Name{"ReceiveChannel"};
constexpr const char* ReceiveFrequency_Name{"ReceiveFrequency"};
constexpr const char* InstantaneousReceiveBandwidth_Name{"InstantaneousReceiveBandwidth"};
constexpr const char* Modulation_Name{"Modulation"};
constexpr const char* NetworkKey_Name{"NetworkKey"};
constexpr const char* NetworkTimeRef_Name{"NetworkTimeRef"};
constexpr const char* ExternalTimeRef_Name{"ExternalTimeRef"};
constexpr const char* NetworkTime_Name{"NetworkTime"};
constexpr const char* NetworkTimeUncertaintyRange_Name{"NetworkTimeUncertaintyRange"};
constexpr const char* NetworkTimeOffset_Name{"NetworkTimeOffset"};

} // namespace CommConnectionType_Names

void CommConnectionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommConnectionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommConnectionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommConnectionType_Names::TransmitChannel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommConnectionType::TransmitChannel& boundedList = accessor.getTransmitChannel();
        const uci::type::CommConnectionType::TransmitChannel::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommConnectionType_Names::TransmitFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommConnectionType::TransmitFrequency& boundedList = accessor.getTransmitFrequency();
        const uci::type::CommConnectionType::TransmitFrequency::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setDoubleValue(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommConnectionType_Names::InstantaneousTransmitBandwidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInstantaneousTransmitBandwidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommConnectionType_Names::ReceiveChannel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommConnectionType::ReceiveChannel& boundedList = accessor.getReceiveChannel();
        const uci::type::CommConnectionType::ReceiveChannel::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommConnectionType_Names::ReceiveFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommConnectionType::ReceiveFrequency& boundedList = accessor.getReceiveFrequency();
        const uci::type::CommConnectionType::ReceiveFrequency::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setDoubleValue(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommConnectionType_Names::InstantaneousReceiveBandwidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInstantaneousReceiveBandwidth(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommConnectionType_Names::Modulation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableModulation().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommConnectionType_Names::NetworkKey_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommConnectionType::NetworkKey& boundedList = accessor.getNetworkKey();
        const uci::type::CommConnectionType::NetworkKey::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommConnectionType_Names::NetworkTimeRef_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNetworkTimeRef(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommConnectionType_Names::ExternalTimeRef_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setExternalTimeRef(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommConnectionType_Names::NetworkTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNetworkTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + CommConnectionType_Names::NetworkTimeUncertaintyRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNetworkTimeUncertaintyRange(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + CommConnectionType_Names::NetworkTimeOffset_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNetworkTimeOffset(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
}

std::string CommConnectionType::serialize(const uci::type::CommConnectionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommConnectionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommConnectionType_Names::Extern_Type_Name);
  }
  {
    const uci::type::CommConnectionType::TransmitChannel& boundedList = accessor.getTransmitChannel();
    for (uci::type::CommConnectionType::TransmitChannel::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, CommConnectionType_Names::TransmitChannel_Name);
    }
  }
  {
    const uci::type::CommConnectionType::TransmitFrequency& boundedList = accessor.getTransmitFrequency();
    for (uci::type::CommConnectionType::TransmitFrequency::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeDouble(boundedList.at(i), node, CommConnectionType_Names::TransmitFrequency_Name);
    }
  }
  if (accessor.hasInstantaneousTransmitBandwidth()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getInstantaneousTransmitBandwidth(), node, CommConnectionType_Names::InstantaneousTransmitBandwidth_Name);
  }
  {
    const uci::type::CommConnectionType::ReceiveChannel& boundedList = accessor.getReceiveChannel();
    for (uci::type::CommConnectionType::ReceiveChannel::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, CommConnectionType_Names::ReceiveChannel_Name);
    }
  }
  {
    const uci::type::CommConnectionType::ReceiveFrequency& boundedList = accessor.getReceiveFrequency();
    for (uci::type::CommConnectionType::ReceiveFrequency::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeDouble(boundedList.at(i), node, CommConnectionType_Names::ReceiveFrequency_Name);
    }
  }
  if (accessor.hasInstantaneousReceiveBandwidth()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getInstantaneousReceiveBandwidth(), node, CommConnectionType_Names::InstantaneousReceiveBandwidth_Name);
  }
  if (accessor.hasModulation()) {
    CommModulationTypeEnum::serialize(accessor.getModulation(), node, CommConnectionType_Names::Modulation_Name, false);
  }
  {
    const uci::type::CommConnectionType::NetworkKey& boundedList = accessor.getNetworkKey();
    for (uci::type::CommConnectionType::NetworkKey::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ForeignKeyType::serialize(boundedList.at(i), node, CommConnectionType_Names::NetworkKey_Name);
    }
  }
  if (accessor.hasNetworkTimeRef()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getNetworkTimeRef(), node, CommConnectionType_Names::NetworkTimeRef_Name);
  }
  if (accessor.hasExternalTimeRef()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getExternalTimeRef(), node, CommConnectionType_Names::ExternalTimeRef_Name);
  }
  if (accessor.hasNetworkTime()) {
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getNetworkTime(), node, CommConnectionType_Names::NetworkTime_Name);
  }
  if (accessor.hasNetworkTimeUncertaintyRange()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getNetworkTimeUncertaintyRange(), node, CommConnectionType_Names::NetworkTimeUncertaintyRange_Name);
  }
  if (accessor.hasNetworkTimeOffset()) {
    asb_uci::util::SerializationHelpers::serializeDuration(accessor.getNetworkTimeOffset(), node, CommConnectionType_Names::NetworkTimeOffset_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommConnectionType& CommConnectionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommConnectionType>().release());
}

uci::type::CommConnectionType& CommConnectionType::create(const uci::type::CommConnectionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommConnectionType> newAccessor{boost::make_unique<asb_uci::type::CommConnectionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommConnectionType::destroy(uci::type::CommConnectionType& accessor) {
  delete dynamic_cast<asb_uci::type::CommConnectionType*>(&accessor);
}

} // namespace type

} // namespace uci

