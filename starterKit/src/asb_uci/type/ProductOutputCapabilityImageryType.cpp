/** @file ProductOutputCapabilityImageryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ProductOutputCapabilityImageryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentControllabilityA_Type.h"
#include "../../../include/asb_uci/type/CompressionRatioSettingsType.h"
#include "../../../include/asb_uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "../../../include/asb_uci/type/ProductOutputType.h"
#include "../../../include/asb_uci/type/ProductRateSettingsType.h"
#include "../../../include/asb_uci/type/ProductResolutionSettingsType.h"
#include "../../../include/asb_uci/type/ProductSizeSettingsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentControllabilityA_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CompressionRatioSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductOutputCapabilityImageryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductRateSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductResolutionSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ProductSizeSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductOutputCapabilityImageryType::ProductOutputCapabilityImageryType()
  : generatorOutputID_Accessor{boost::make_unique<PO_ProductGeneratorOutputID_Type>()} {
}

ProductOutputCapabilityImageryType::~ProductOutputCapabilityImageryType() = default;

void ProductOutputCapabilityImageryType::copy(const uci::type::ProductOutputCapabilityImageryType& accessor) {
  copyImpl(accessor, false);
}

void ProductOutputCapabilityImageryType::copyImpl(const uci::type::ProductOutputCapabilityImageryType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    ProductOutputType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const ProductOutputCapabilityImageryType&>(accessor);
    setGeneratorOutputID(*(accessorImpl.generatorOutputID_Accessor));
    if (accessorImpl.compressionRatioSettings_Accessor) {
      setCompressionRatioSettings(*(accessorImpl.compressionRatioSettings_Accessor));
    } else {
      compressionRatioSettings_Accessor.reset();
    }
    if (accessorImpl.productRateSettings_Accessor) {
      setProductRateSettings(*(accessorImpl.productRateSettings_Accessor));
    } else {
      productRateSettings_Accessor.reset();
    }
    if (accessorImpl.hasInterlaceability()) {
      setInterlaceability(accessorImpl.getInterlaceability());
    } else {
      clearInterlaceability();
    }
    if (accessorImpl.productSizeSettings_Accessor) {
      setProductSizeSettings(*(accessorImpl.productSizeSettings_Accessor));
    } else {
      productSizeSettings_Accessor.reset();
    }
    if (accessorImpl.productResolutionSettings_Accessor) {
      setProductResolutionSettings(*(accessorImpl.productResolutionSettings_Accessor));
    } else {
      productResolutionSettings_Accessor.reset();
    }
    if (accessorImpl.controllability_Accessor) {
      setControllability(*(accessorImpl.controllability_Accessor));
    } else {
      controllability_Accessor.reset();
    }
  }
}

void ProductOutputCapabilityImageryType::reset() noexcept {
  ProductOutputType::reset();
  generatorOutputID_Accessor->reset();
  compressionRatioSettings_Accessor.reset();
  productRateSettings_Accessor.reset();
  clearInterlaceability();
  productSizeSettings_Accessor.reset();
  productResolutionSettings_Accessor.reset();
  controllability_Accessor.reset();
}

const uci::type::PO_ProductGeneratorOutputID_Type& ProductOutputCapabilityImageryType::getGeneratorOutputID() const {
  return *generatorOutputID_Accessor;
}

uci::type::PO_ProductGeneratorOutputID_Type& ProductOutputCapabilityImageryType::getGeneratorOutputID() {
  return *generatorOutputID_Accessor;
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::setGeneratorOutputID(const uci::type::PO_ProductGeneratorOutputID_Type& accessor) {
  if (&accessor != generatorOutputID_Accessor.get()) {
    generatorOutputID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CompressionRatioSettingsType& ProductOutputCapabilityImageryType::getCompressionRatioSettings_() const {
  if (compressionRatioSettings_Accessor) {
    return *compressionRatioSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getCompressionRatioSettings(): An attempt was made to get an optional field that was not enabled, call hasCompressionRatioSettings() to determine if it is safe to call getCompressionRatioSettings()");
}

const uci::type::CompressionRatioSettingsType& ProductOutputCapabilityImageryType::getCompressionRatioSettings() const {
  return getCompressionRatioSettings_();
}

uci::type::CompressionRatioSettingsType& ProductOutputCapabilityImageryType::getCompressionRatioSettings() {
  return getCompressionRatioSettings_();
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::setCompressionRatioSettings(const uci::type::CompressionRatioSettingsType& accessor) {
  enableCompressionRatioSettings();
  if (&accessor != compressionRatioSettings_Accessor.get()) {
    compressionRatioSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductOutputCapabilityImageryType::hasCompressionRatioSettings() const noexcept {
  return static_cast<bool>(compressionRatioSettings_Accessor);
}

uci::type::CompressionRatioSettingsType& ProductOutputCapabilityImageryType::enableCompressionRatioSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::compressionRatioSettingsType : type};
  if ((!compressionRatioSettings_Accessor) || (compressionRatioSettings_Accessor->getAccessorType() != requestedType)) {
    compressionRatioSettings_Accessor = CompressionRatioSettingsType::create(requestedType);
    if (!compressionRatioSettings_Accessor) {
      throw uci::base::UCIException("Error in enableCompressionRatioSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *compressionRatioSettings_Accessor;
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::clearCompressionRatioSettings() noexcept {
  compressionRatioSettings_Accessor.reset();
  return *this;
}

uci::type::ProductRateSettingsType& ProductOutputCapabilityImageryType::getProductRateSettings_() const {
  if (productRateSettings_Accessor) {
    return *productRateSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getProductRateSettings(): An attempt was made to get an optional field that was not enabled, call hasProductRateSettings() to determine if it is safe to call getProductRateSettings()");
}

const uci::type::ProductRateSettingsType& ProductOutputCapabilityImageryType::getProductRateSettings() const {
  return getProductRateSettings_();
}

uci::type::ProductRateSettingsType& ProductOutputCapabilityImageryType::getProductRateSettings() {
  return getProductRateSettings_();
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::setProductRateSettings(const uci::type::ProductRateSettingsType& accessor) {
  enableProductRateSettings();
  if (&accessor != productRateSettings_Accessor.get()) {
    productRateSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductOutputCapabilityImageryType::hasProductRateSettings() const noexcept {
  return static_cast<bool>(productRateSettings_Accessor);
}

uci::type::ProductRateSettingsType& ProductOutputCapabilityImageryType::enableProductRateSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productRateSettingsType : type};
  if ((!productRateSettings_Accessor) || (productRateSettings_Accessor->getAccessorType() != requestedType)) {
    productRateSettings_Accessor = ProductRateSettingsType::create(requestedType);
    if (!productRateSettings_Accessor) {
      throw uci::base::UCIException("Error in enableProductRateSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productRateSettings_Accessor;
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::clearProductRateSettings() noexcept {
  productRateSettings_Accessor.reset();
  return *this;
}

xs::Boolean ProductOutputCapabilityImageryType::getInterlaceability() const {
  if (interlaceability_Accessor) {
    return *interlaceability_Accessor;
  }
  throw uci::base::UCIException("Error in getInterlaceability(): An attempt was made to get an optional field that was not enabled, call hasInterlaceability() to determine if it is safe to call getInterlaceability()");
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::setInterlaceability(xs::Boolean value) {
  interlaceability_Accessor = value;
  return *this;
}

bool ProductOutputCapabilityImageryType::hasInterlaceability() const noexcept {
  return interlaceability_Accessor.has_value();
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::clearInterlaceability() noexcept {
  interlaceability_Accessor.reset();
  return *this;
}

uci::type::ProductSizeSettingsType& ProductOutputCapabilityImageryType::getProductSizeSettings_() const {
  if (productSizeSettings_Accessor) {
    return *productSizeSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getProductSizeSettings(): An attempt was made to get an optional field that was not enabled, call hasProductSizeSettings() to determine if it is safe to call getProductSizeSettings()");
}

const uci::type::ProductSizeSettingsType& ProductOutputCapabilityImageryType::getProductSizeSettings() const {
  return getProductSizeSettings_();
}

uci::type::ProductSizeSettingsType& ProductOutputCapabilityImageryType::getProductSizeSettings() {
  return getProductSizeSettings_();
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::setProductSizeSettings(const uci::type::ProductSizeSettingsType& accessor) {
  enableProductSizeSettings();
  if (&accessor != productSizeSettings_Accessor.get()) {
    productSizeSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductOutputCapabilityImageryType::hasProductSizeSettings() const noexcept {
  return static_cast<bool>(productSizeSettings_Accessor);
}

uci::type::ProductSizeSettingsType& ProductOutputCapabilityImageryType::enableProductSizeSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productSizeSettingsType : type};
  if ((!productSizeSettings_Accessor) || (productSizeSettings_Accessor->getAccessorType() != requestedType)) {
    productSizeSettings_Accessor = ProductSizeSettingsType::create(requestedType);
    if (!productSizeSettings_Accessor) {
      throw uci::base::UCIException("Error in enableProductSizeSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productSizeSettings_Accessor;
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::clearProductSizeSettings() noexcept {
  productSizeSettings_Accessor.reset();
  return *this;
}

uci::type::ProductResolutionSettingsType& ProductOutputCapabilityImageryType::getProductResolutionSettings_() const {
  if (productResolutionSettings_Accessor) {
    return *productResolutionSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getProductResolutionSettings(): An attempt was made to get an optional field that was not enabled, call hasProductResolutionSettings() to determine if it is safe to call getProductResolutionSettings()");
}

const uci::type::ProductResolutionSettingsType& ProductOutputCapabilityImageryType::getProductResolutionSettings() const {
  return getProductResolutionSettings_();
}

uci::type::ProductResolutionSettingsType& ProductOutputCapabilityImageryType::getProductResolutionSettings() {
  return getProductResolutionSettings_();
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::setProductResolutionSettings(const uci::type::ProductResolutionSettingsType& accessor) {
  enableProductResolutionSettings();
  if (&accessor != productResolutionSettings_Accessor.get()) {
    productResolutionSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductOutputCapabilityImageryType::hasProductResolutionSettings() const noexcept {
  return static_cast<bool>(productResolutionSettings_Accessor);
}

uci::type::ProductResolutionSettingsType& ProductOutputCapabilityImageryType::enableProductResolutionSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productResolutionSettingsType : type};
  if ((!productResolutionSettings_Accessor) || (productResolutionSettings_Accessor->getAccessorType() != requestedType)) {
    productResolutionSettings_Accessor = ProductResolutionSettingsType::create(requestedType);
    if (!productResolutionSettings_Accessor) {
      throw uci::base::UCIException("Error in enableProductResolutionSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productResolutionSettings_Accessor;
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::clearProductResolutionSettings() noexcept {
  productResolutionSettings_Accessor.reset();
  return *this;
}

uci::type::ComponentControllabilityA_Type& ProductOutputCapabilityImageryType::getControllability_() const {
  if (controllability_Accessor) {
    return *controllability_Accessor;
  }
  throw uci::base::UCIException("Error in getControllability(): An attempt was made to get an optional field that was not enabled, call hasControllability() to determine if it is safe to call getControllability()");
}

const uci::type::ComponentControllabilityA_Type& ProductOutputCapabilityImageryType::getControllability() const {
  return getControllability_();
}

uci::type::ComponentControllabilityA_Type& ProductOutputCapabilityImageryType::getControllability() {
  return getControllability_();
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::setControllability(const uci::type::ComponentControllabilityA_Type& accessor) {
  enableControllability();
  if (&accessor != controllability_Accessor.get()) {
    controllability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductOutputCapabilityImageryType::hasControllability() const noexcept {
  return static_cast<bool>(controllability_Accessor);
}

uci::type::ComponentControllabilityA_Type& ProductOutputCapabilityImageryType::enableControllability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControllabilityA_Type : type};
  if ((!controllability_Accessor) || (controllability_Accessor->getAccessorType() != requestedType)) {
    controllability_Accessor = ComponentControllabilityA_Type::create(requestedType);
    if (!controllability_Accessor) {
      throw uci::base::UCIException("Error in enableControllability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *controllability_Accessor;
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::clearControllability() noexcept {
  controllability_Accessor.reset();
  return *this;
}

std::unique_ptr<ProductOutputCapabilityImageryType> ProductOutputCapabilityImageryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productOutputCapabilityImageryType : type};
  return (requestedType == uci::type::accessorType::productOutputCapabilityImageryType) ? boost::make_unique<ProductOutputCapabilityImageryType>() : nullptr;
}

/**  */
namespace ProductOutputCapabilityImageryType_Names {

constexpr const char* Extern_Type_Name{"ProductOutputCapabilityImageryType"};
constexpr const char* GeneratorOutputID_Name{"GeneratorOutputID"};
constexpr const char* CompressionRatioSettings_Name{"CompressionRatioSettings"};
constexpr const char* ProductRateSettings_Name{"ProductRateSettings"};
constexpr const char* Interlaceability_Name{"Interlaceability"};
constexpr const char* ProductSizeSettings_Name{"ProductSizeSettings"};
constexpr const char* ProductResolutionSettings_Name{"ProductResolutionSettings"};
constexpr const char* Controllability_Name{"Controllability"};

} // namespace ProductOutputCapabilityImageryType_Names

void ProductOutputCapabilityImageryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductOutputCapabilityImageryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductOutputCapabilityImageryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityImageryType_Names::GeneratorOutputID_Name) {
      PO_ProductGeneratorOutputID_Type::deserialize(valueType.second, accessor.getGeneratorOutputID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityImageryType_Names::CompressionRatioSettings_Name) {
      CompressionRatioSettingsType::deserialize(valueType.second, accessor.enableCompressionRatioSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityImageryType_Names::ProductRateSettings_Name) {
      ProductRateSettingsType::deserialize(valueType.second, accessor.enableProductRateSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityImageryType_Names::Interlaceability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInterlaceability(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityImageryType_Names::ProductSizeSettings_Name) {
      ProductSizeSettingsType::deserialize(valueType.second, accessor.enableProductSizeSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityImageryType_Names::ProductResolutionSettings_Name) {
      ProductResolutionSettingsType::deserialize(valueType.second, accessor.enableProductResolutionSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityImageryType_Names::Controllability_Name) {
      ComponentControllabilityA_Type::deserialize(valueType.second, accessor.enableControllability(), nodeName, nsPrefix);
    }
  }
  ProductOutputType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string ProductOutputCapabilityImageryType::serialize(const uci::type::ProductOutputCapabilityImageryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductOutputCapabilityImageryType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductOutputCapabilityImageryType_Names::Extern_Type_Name);
  }
  ProductOutputType::serialize(accessor, node, "", false, false, false);
  PO_ProductGeneratorOutputID_Type::serialize(accessor.getGeneratorOutputID(), node, ProductOutputCapabilityImageryType_Names::GeneratorOutputID_Name);
  if (accessor.hasCompressionRatioSettings()) {
    CompressionRatioSettingsType::serialize(accessor.getCompressionRatioSettings(), node, ProductOutputCapabilityImageryType_Names::CompressionRatioSettings_Name);
  }
  if (accessor.hasProductRateSettings()) {
    ProductRateSettingsType::serialize(accessor.getProductRateSettings(), node, ProductOutputCapabilityImageryType_Names::ProductRateSettings_Name);
  }
  if (accessor.hasInterlaceability()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInterlaceability(), node, ProductOutputCapabilityImageryType_Names::Interlaceability_Name);
  }
  if (accessor.hasProductSizeSettings()) {
    ProductSizeSettingsType::serialize(accessor.getProductSizeSettings(), node, ProductOutputCapabilityImageryType_Names::ProductSizeSettings_Name);
  }
  if (accessor.hasProductResolutionSettings()) {
    ProductResolutionSettingsType::serialize(accessor.getProductResolutionSettings(), node, ProductOutputCapabilityImageryType_Names::ProductResolutionSettings_Name);
  }
  if (accessor.hasControllability()) {
    ComponentControllabilityA_Type::serialize(accessor.getControllability(), node, ProductOutputCapabilityImageryType_Names::Controllability_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductOutputCapabilityImageryType>().release());
}

uci::type::ProductOutputCapabilityImageryType& ProductOutputCapabilityImageryType::create(const uci::type::ProductOutputCapabilityImageryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductOutputCapabilityImageryType> newAccessor{boost::make_unique<asb_uci::type::ProductOutputCapabilityImageryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductOutputCapabilityImageryType::destroy(uci::type::ProductOutputCapabilityImageryType& accessor) {
  delete dynamic_cast<asb_uci::type::ProductOutputCapabilityImageryType*>(&accessor);
}

} // namespace type

} // namespace uci

