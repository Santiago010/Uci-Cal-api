/** @file ComponentDetailedStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ComponentDetailedStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ComponentDetailedStatusInfoType.h"
#include "asb_uci/type/ComponentElementID_Type.h"
#include "asb_uci/type/ComponentElementIdentifierChoiceType.h"
#include "asb_uci/type/ComponentElementStateType.h"
#include "asb_uci/type/VisibleString256Type.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ComponentDetailedStatusInfoType.h"
#include "uci/type/ComponentDetailedStatusType.h"
#include "uci/type/ComponentElementID_Type.h"
#include "uci/type/ComponentElementIdentifierChoiceType.h"
#include "uci/type/ComponentElementStateType.h"
#include "uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ComponentDetailedStatusType::ComponentDetailedStatusType()
  : componentElement_ID_Accessor{boost::make_unique<ComponentElementID_Type>()},
    componentDetailedStatusInfo_Accessor{boost::make_unique<ComponentDetailedStatusInfo>(0, SIZE_MAX)} {
}

ComponentDetailedStatusType::~ComponentDetailedStatusType() = default;

void ComponentDetailedStatusType::copy(const uci::type::ComponentDetailedStatusType& accessor) {
  copyImpl(accessor, false);
}

void ComponentDetailedStatusType::copyImpl(const uci::type::ComponentDetailedStatusType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::componentDetailedStatusType)) {
      const auto& accessorImpl = dynamic_cast<const ComponentDetailedStatusType&>(accessor);
      setComponentElement_ID(*(accessorImpl.componentElement_ID_Accessor));
      if (accessorImpl.componentElementIdentifier_Accessor) {
        setComponentElementIdentifier(*(accessorImpl.componentElementIdentifier_Accessor));
      } else {
        componentElementIdentifier_Accessor.reset();
      }
      if (accessorImpl.componentElementDescription_Accessor) {
        setComponentElementDescription(*(accessorImpl.componentElementDescription_Accessor));
      } else {
        componentElementDescription_Accessor.reset();
      }
      if (accessorImpl.componentElementState_Accessor) {
        setComponentElementState(*(accessorImpl.componentElementState_Accessor));
      } else {
        componentElementState_Accessor.reset();
      }
      setComponentDetailedStatusInfo(*(accessorImpl.componentDetailedStatusInfo_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void ComponentDetailedStatusType::reset() noexcept {
  componentElement_ID_Accessor->reset();
  componentElementIdentifier_Accessor.reset();
  componentElementDescription_Accessor.reset();
  componentElementState_Accessor.reset();
  componentDetailedStatusInfo_Accessor->reset();
}

const uci::type::ComponentElementID_Type& ComponentDetailedStatusType::getComponentElement_ID() const {
  return *componentElement_ID_Accessor;
}

uci::type::ComponentElementID_Type& ComponentDetailedStatusType::getComponentElement_ID() {
  return *componentElement_ID_Accessor;
}

uci::type::ComponentDetailedStatusType& ComponentDetailedStatusType::setComponentElement_ID(const uci::type::ComponentElementID_Type& accessor) {
  if (&accessor != componentElement_ID_Accessor.get()) {
    componentElement_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ComponentElementIdentifierChoiceType& ComponentDetailedStatusType::getComponentElementIdentifier_() const {
  if (componentElementIdentifier_Accessor) {
    return *componentElementIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getComponentElementIdentifier(): An attempt was made to get an optional field that was not enabled, call hasComponentElementIdentifier() to determine if it is safe to call getComponentElementIdentifier()");
}

const uci::type::ComponentElementIdentifierChoiceType& ComponentDetailedStatusType::getComponentElementIdentifier() const {
  return getComponentElementIdentifier_();
}

uci::type::ComponentElementIdentifierChoiceType& ComponentDetailedStatusType::getComponentElementIdentifier() {
  return getComponentElementIdentifier_();
}

uci::type::ComponentDetailedStatusType& ComponentDetailedStatusType::setComponentElementIdentifier(const uci::type::ComponentElementIdentifierChoiceType& accessor) {
  enableComponentElementIdentifier();
  if (&accessor != componentElementIdentifier_Accessor.get()) {
    componentElementIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ComponentDetailedStatusType::hasComponentElementIdentifier() const noexcept {
  return static_cast<bool>(componentElementIdentifier_Accessor);
}

uci::type::ComponentElementIdentifierChoiceType& ComponentDetailedStatusType::enableComponentElementIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentElementIdentifierChoiceType : type};
  if ((!componentElementIdentifier_Accessor) || (componentElementIdentifier_Accessor->getAccessorType() != requestedType)) {
    componentElementIdentifier_Accessor = ComponentElementIdentifierChoiceType::create(requestedType);
    if (!componentElementIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enableComponentElementIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *componentElementIdentifier_Accessor;
}

uci::type::ComponentDetailedStatusType& ComponentDetailedStatusType::clearComponentElementIdentifier() noexcept {
  componentElementIdentifier_Accessor.reset();
  return *this;
}

uci::type::VisibleString256Type& ComponentDetailedStatusType::getComponentElementDescription_() const {
  if (componentElementDescription_Accessor) {
    return *componentElementDescription_Accessor;
  }
  throw uci::base::UCIException("Error in getComponentElementDescription(): An attempt was made to get an optional field that was not enabled, call hasComponentElementDescription() to determine if it is safe to call getComponentElementDescription()");
}

const uci::type::VisibleString256Type& ComponentDetailedStatusType::getComponentElementDescription() const {
  return getComponentElementDescription_();
}

uci::type::VisibleString256Type& ComponentDetailedStatusType::getComponentElementDescription() {
  return getComponentElementDescription_();
}

uci::type::ComponentDetailedStatusType& ComponentDetailedStatusType::setComponentElementDescription(const uci::type::VisibleString256Type& value) {
  return setComponentElementDescription(value.c_str());
}

uci::type::ComponentDetailedStatusType& ComponentDetailedStatusType::setComponentElementDescription(const std::string& value) {
  return setComponentElementDescription(value.c_str());
}

uci::type::ComponentDetailedStatusType& ComponentDetailedStatusType::setComponentElementDescription(const char* value) {
  enableComponentElementDescription().setStringValue(value);
  return *this;
}

bool ComponentDetailedStatusType::hasComponentElementDescription() const noexcept {
  return static_cast<bool>(componentElementDescription_Accessor);
}

uci::type::VisibleString256Type& ComponentDetailedStatusType::enableComponentElementDescription(uci::base::accessorType::AccessorType type) {
  if (!componentElementDescription_Accessor) {
    componentElementDescription_Accessor = VisibleString256Type::create(type);
  }
  return *componentElementDescription_Accessor;
}

uci::type::ComponentDetailedStatusType& ComponentDetailedStatusType::clearComponentElementDescription() noexcept {
  componentElementDescription_Accessor.reset();
  return *this;
}

uci::type::ComponentElementStateType& ComponentDetailedStatusType::getComponentElementState_() const {
  if (componentElementState_Accessor) {
    return *componentElementState_Accessor;
  }
  throw uci::base::UCIException("Error in getComponentElementState(): An attempt was made to get an optional field that was not enabled, call hasComponentElementState() to determine if it is safe to call getComponentElementState()");
}

const uci::type::ComponentElementStateType& ComponentDetailedStatusType::getComponentElementState() const {
  return getComponentElementState_();
}

uci::type::ComponentElementStateType& ComponentDetailedStatusType::getComponentElementState() {
  return getComponentElementState_();
}

uci::type::ComponentDetailedStatusType& ComponentDetailedStatusType::setComponentElementState(const uci::type::ComponentElementStateType& accessor) {
  enableComponentElementState();
  if (&accessor != componentElementState_Accessor.get()) {
    componentElementState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ComponentDetailedStatusType::hasComponentElementState() const noexcept {
  return static_cast<bool>(componentElementState_Accessor);
}

uci::type::ComponentElementStateType& ComponentDetailedStatusType::enableComponentElementState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentElementStateType : type};
  if ((!componentElementState_Accessor) || (componentElementState_Accessor->getAccessorType() != requestedType)) {
    componentElementState_Accessor = ComponentElementStateType::create(requestedType);
    if (!componentElementState_Accessor) {
      throw uci::base::UCIException("Error in enableComponentElementState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *componentElementState_Accessor;
}

uci::type::ComponentDetailedStatusType& ComponentDetailedStatusType::clearComponentElementState() noexcept {
  componentElementState_Accessor.reset();
  return *this;
}

const uci::type::ComponentDetailedStatusType::ComponentDetailedStatusInfo& ComponentDetailedStatusType::getComponentDetailedStatusInfo() const {
  return *componentDetailedStatusInfo_Accessor;
}

uci::type::ComponentDetailedStatusType::ComponentDetailedStatusInfo& ComponentDetailedStatusType::getComponentDetailedStatusInfo() {
  return *componentDetailedStatusInfo_Accessor;
}

uci::type::ComponentDetailedStatusType& ComponentDetailedStatusType::setComponentDetailedStatusInfo(const uci::type::ComponentDetailedStatusType::ComponentDetailedStatusInfo& accessor) {
  if (&accessor != componentDetailedStatusInfo_Accessor.get()) {
    componentDetailedStatusInfo_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ComponentDetailedStatusType> ComponentDetailedStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentDetailedStatusType : type};
  return std::unique_ptr<ComponentDetailedStatusType>(dynamic_cast<ComponentDetailedStatusType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace ComponentDetailedStatusType_Names {

constexpr const char* Extern_Type_Name{"ComponentDetailedStatusType"};
constexpr const char* ComponentElement_ID_Name{"ComponentElement_ID"};
constexpr const char* ComponentElementIdentifier_Name{"ComponentElementIdentifier"};
constexpr const char* ComponentElementDescription_Name{"ComponentElementDescription"};
constexpr const char* ComponentElementState_Name{"ComponentElementState"};
constexpr const char* ComponentDetailedStatusInfo_Name{"ComponentDetailedStatusInfo"};

} // namespace ComponentDetailedStatusType_Names

void ComponentDetailedStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ComponentDetailedStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ComponentDetailedStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ComponentDetailedStatusType_Names::ComponentElement_ID_Name) {
      ComponentElementID_Type::deserialize(valueType.second, accessor.getComponentElement_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentDetailedStatusType_Names::ComponentElementIdentifier_Name) {
      ComponentElementIdentifierChoiceType::deserialize(valueType.second, accessor.enableComponentElementIdentifier(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentDetailedStatusType_Names::ComponentElementDescription_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setComponentElementDescription(*value);
      }
    } else if (valueType.first == nsPrefix + ComponentDetailedStatusType_Names::ComponentElementState_Name) {
      ComponentElementStateType::deserialize(valueType.second, accessor.enableComponentElementState(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentDetailedStatusType_Names::ComponentDetailedStatusInfo_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ComponentDetailedStatusType::ComponentDetailedStatusInfo& boundedList = accessor.getComponentDetailedStatusInfo();
        const uci::type::ComponentDetailedStatusType::ComponentDetailedStatusInfo::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ComponentDetailedStatusInfoType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ComponentDetailedStatusType::serialize(const uci::type::ComponentDetailedStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ComponentDetailedStatusType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::componentDetailedStatusType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, ComponentDetailedStatusType_Names::Extern_Type_Name);
    }
    ComponentElementID_Type::serialize(accessor.getComponentElement_ID(), node, ComponentDetailedStatusType_Names::ComponentElement_ID_Name);
    if (accessor.hasComponentElementIdentifier()) {
      ComponentElementIdentifierChoiceType::serialize(accessor.getComponentElementIdentifier(), node, ComponentDetailedStatusType_Names::ComponentElementIdentifier_Name);
    }
    if (accessor.hasComponentElementDescription()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getComponentElementDescription(), node, ComponentDetailedStatusType_Names::ComponentElementDescription_Name);
    }
    if (accessor.hasComponentElementState()) {
      ComponentElementStateType::serialize(accessor.getComponentElementState(), node, ComponentDetailedStatusType_Names::ComponentElementState_Name);
    }
    {
      const uci::type::ComponentDetailedStatusType::ComponentDetailedStatusInfo& boundedList = accessor.getComponentDetailedStatusInfo();
      for (uci::type::ComponentDetailedStatusType::ComponentDetailedStatusInfo::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ComponentDetailedStatusInfoType::serialize(boundedList.at(i), node, ComponentDetailedStatusType_Names::ComponentDetailedStatusInfo_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ComponentDetailedStatusType& ComponentDetailedStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ComponentDetailedStatusType>().release());
}

uci::type::ComponentDetailedStatusType& ComponentDetailedStatusType::create(const uci::type::ComponentDetailedStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ComponentDetailedStatusType> newAccessor{boost::make_unique<asb_uci::type::ComponentDetailedStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ComponentDetailedStatusType::destroy(uci::type::ComponentDetailedStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::ComponentDetailedStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

