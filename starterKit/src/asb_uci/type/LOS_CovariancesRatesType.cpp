/** @file LOS_CovariancesRatesType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/LOS_CovariancesRatesType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/LOS_CovariancesRatesType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

LOS_CovariancesRatesType::LOS_CovariancesRatesType() = default;

LOS_CovariancesRatesType::~LOS_CovariancesRatesType() = default;

void LOS_CovariancesRatesType::copy(const uci::type::LOS_CovariancesRatesType& accessor) {
  copyImpl(accessor, false);
}

void LOS_CovariancesRatesType::copyImpl(const uci::type::LOS_CovariancesRatesType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const LOS_CovariancesRatesType&>(accessor);
    if (accessorImpl.hasAzimuthAzimuthRate()) {
      setAzimuthAzimuthRate(accessorImpl.getAzimuthAzimuthRate());
    } else {
      clearAzimuthAzimuthRate();
    }
    if (accessorImpl.hasElevationElevationRate()) {
      setElevationElevationRate(accessorImpl.getElevationElevationRate());
    } else {
      clearElevationElevationRate();
    }
    if (accessorImpl.hasAzimuthElevationRate()) {
      setAzimuthElevationRate(accessorImpl.getAzimuthElevationRate());
    } else {
      clearAzimuthElevationRate();
    }
    if (accessorImpl.hasElevationAzimuthRate()) {
      setElevationAzimuthRate(accessorImpl.getElevationAzimuthRate());
    } else {
      clearElevationAzimuthRate();
    }
    if (accessorImpl.hasAzimuthRateElevationRate()) {
      setAzimuthRateElevationRate(accessorImpl.getAzimuthRateElevationRate());
    } else {
      clearAzimuthRateElevationRate();
    }
  }
}

void LOS_CovariancesRatesType::reset() noexcept {
  clearAzimuthAzimuthRate();
  clearElevationElevationRate();
  clearAzimuthElevationRate();
  clearElevationAzimuthRate();
  clearAzimuthRateElevationRate();
}

xs::Double LOS_CovariancesRatesType::getAzimuthAzimuthRate() const {
  if (azimuthAzimuthRate_Accessor) {
    return *azimuthAzimuthRate_Accessor;
  }
  throw uci::base::UCIException("Error in getAzimuthAzimuthRate(): An attempt was made to get an optional field that was not enabled, call hasAzimuthAzimuthRate() to determine if it is safe to call getAzimuthAzimuthRate()");
}

uci::type::LOS_CovariancesRatesType& LOS_CovariancesRatesType::setAzimuthAzimuthRate(xs::Double value) {
  azimuthAzimuthRate_Accessor = value;
  return *this;
}

bool LOS_CovariancesRatesType::hasAzimuthAzimuthRate() const noexcept {
  return azimuthAzimuthRate_Accessor.has_value();
}

uci::type::LOS_CovariancesRatesType& LOS_CovariancesRatesType::clearAzimuthAzimuthRate() noexcept {
  azimuthAzimuthRate_Accessor.reset();
  return *this;
}

xs::Double LOS_CovariancesRatesType::getElevationElevationRate() const {
  if (elevationElevationRate_Accessor) {
    return *elevationElevationRate_Accessor;
  }
  throw uci::base::UCIException("Error in getElevationElevationRate(): An attempt was made to get an optional field that was not enabled, call hasElevationElevationRate() to determine if it is safe to call getElevationElevationRate()");
}

uci::type::LOS_CovariancesRatesType& LOS_CovariancesRatesType::setElevationElevationRate(xs::Double value) {
  elevationElevationRate_Accessor = value;
  return *this;
}

bool LOS_CovariancesRatesType::hasElevationElevationRate() const noexcept {
  return elevationElevationRate_Accessor.has_value();
}

uci::type::LOS_CovariancesRatesType& LOS_CovariancesRatesType::clearElevationElevationRate() noexcept {
  elevationElevationRate_Accessor.reset();
  return *this;
}

xs::Double LOS_CovariancesRatesType::getAzimuthElevationRate() const {
  if (azimuthElevationRate_Accessor) {
    return *azimuthElevationRate_Accessor;
  }
  throw uci::base::UCIException("Error in getAzimuthElevationRate(): An attempt was made to get an optional field that was not enabled, call hasAzimuthElevationRate() to determine if it is safe to call getAzimuthElevationRate()");
}

uci::type::LOS_CovariancesRatesType& LOS_CovariancesRatesType::setAzimuthElevationRate(xs::Double value) {
  azimuthElevationRate_Accessor = value;
  return *this;
}

bool LOS_CovariancesRatesType::hasAzimuthElevationRate() const noexcept {
  return azimuthElevationRate_Accessor.has_value();
}

uci::type::LOS_CovariancesRatesType& LOS_CovariancesRatesType::clearAzimuthElevationRate() noexcept {
  azimuthElevationRate_Accessor.reset();
  return *this;
}

xs::Double LOS_CovariancesRatesType::getElevationAzimuthRate() const {
  if (elevationAzimuthRate_Accessor) {
    return *elevationAzimuthRate_Accessor;
  }
  throw uci::base::UCIException("Error in getElevationAzimuthRate(): An attempt was made to get an optional field that was not enabled, call hasElevationAzimuthRate() to determine if it is safe to call getElevationAzimuthRate()");
}

uci::type::LOS_CovariancesRatesType& LOS_CovariancesRatesType::setElevationAzimuthRate(xs::Double value) {
  elevationAzimuthRate_Accessor = value;
  return *this;
}

bool LOS_CovariancesRatesType::hasElevationAzimuthRate() const noexcept {
  return elevationAzimuthRate_Accessor.has_value();
}

uci::type::LOS_CovariancesRatesType& LOS_CovariancesRatesType::clearElevationAzimuthRate() noexcept {
  elevationAzimuthRate_Accessor.reset();
  return *this;
}

xs::Double LOS_CovariancesRatesType::getAzimuthRateElevationRate() const {
  if (azimuthRateElevationRate_Accessor) {
    return *azimuthRateElevationRate_Accessor;
  }
  throw uci::base::UCIException("Error in getAzimuthRateElevationRate(): An attempt was made to get an optional field that was not enabled, call hasAzimuthRateElevationRate() to determine if it is safe to call getAzimuthRateElevationRate()");
}

uci::type::LOS_CovariancesRatesType& LOS_CovariancesRatesType::setAzimuthRateElevationRate(xs::Double value) {
  azimuthRateElevationRate_Accessor = value;
  return *this;
}

bool LOS_CovariancesRatesType::hasAzimuthRateElevationRate() const noexcept {
  return azimuthRateElevationRate_Accessor.has_value();
}

uci::type::LOS_CovariancesRatesType& LOS_CovariancesRatesType::clearAzimuthRateElevationRate() noexcept {
  azimuthRateElevationRate_Accessor.reset();
  return *this;
}

std::unique_ptr<LOS_CovariancesRatesType> LOS_CovariancesRatesType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::lOS_CovariancesRatesType : type};
  return (requestedType == uci::type::accessorType::lOS_CovariancesRatesType) ? boost::make_unique<LOS_CovariancesRatesType>() : nullptr;
}

/**  */
namespace LOS_CovariancesRatesType_Names {

constexpr const char* Extern_Type_Name{"LOS_CovariancesRatesType"};
constexpr const char* AzimuthAzimuthRate_Name{"AzimuthAzimuthRate"};
constexpr const char* ElevationElevationRate_Name{"ElevationElevationRate"};
constexpr const char* AzimuthElevationRate_Name{"AzimuthElevationRate"};
constexpr const char* ElevationAzimuthRate_Name{"ElevationAzimuthRate"};
constexpr const char* AzimuthRateElevationRate_Name{"AzimuthRateElevationRate"};

} // namespace LOS_CovariancesRatesType_Names

void LOS_CovariancesRatesType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LOS_CovariancesRatesType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LOS_CovariancesRatesType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LOS_CovariancesRatesType_Names::AzimuthAzimuthRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzimuthAzimuthRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LOS_CovariancesRatesType_Names::ElevationElevationRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setElevationElevationRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LOS_CovariancesRatesType_Names::AzimuthElevationRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzimuthElevationRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LOS_CovariancesRatesType_Names::ElevationAzimuthRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setElevationAzimuthRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LOS_CovariancesRatesType_Names::AzimuthRateElevationRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzimuthRateElevationRate(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string LOS_CovariancesRatesType::serialize(const uci::type::LOS_CovariancesRatesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? LOS_CovariancesRatesType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, LOS_CovariancesRatesType_Names::Extern_Type_Name);
  }
  if (accessor.hasAzimuthAzimuthRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAzimuthAzimuthRate(), node, LOS_CovariancesRatesType_Names::AzimuthAzimuthRate_Name);
  }
  if (accessor.hasElevationElevationRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getElevationElevationRate(), node, LOS_CovariancesRatesType_Names::ElevationElevationRate_Name);
  }
  if (accessor.hasAzimuthElevationRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAzimuthElevationRate(), node, LOS_CovariancesRatesType_Names::AzimuthElevationRate_Name);
  }
  if (accessor.hasElevationAzimuthRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getElevationAzimuthRate(), node, LOS_CovariancesRatesType_Names::ElevationAzimuthRate_Name);
  }
  if (accessor.hasAzimuthRateElevationRate()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAzimuthRateElevationRate(), node, LOS_CovariancesRatesType_Names::AzimuthRateElevationRate_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::LOS_CovariancesRatesType& LOS_CovariancesRatesType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::LOS_CovariancesRatesType>().release());
}

uci::type::LOS_CovariancesRatesType& LOS_CovariancesRatesType::create(const uci::type::LOS_CovariancesRatesType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::LOS_CovariancesRatesType> newAccessor{boost::make_unique<asb_uci::type::LOS_CovariancesRatesType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void LOS_CovariancesRatesType::destroy(uci::type::LOS_CovariancesRatesType& accessor) {
  delete dynamic_cast<asb_uci::type::LOS_CovariancesRatesType*>(&accessor);
}

} // namespace type

} // namespace uci

