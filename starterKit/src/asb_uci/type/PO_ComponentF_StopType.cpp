/** @file PO_ComponentF_StopType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_ComponentF_StopType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PO_ComponentF_StopVariableType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PO_ComponentF_StopType.h"
#include "uci/type/PO_ComponentF_StopVariableType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentF_StopType::PO_ComponentF_StopType() = default;

PO_ComponentF_StopType::~PO_ComponentF_StopType() = default;

void PO_ComponentF_StopType::copy(const uci::type::PO_ComponentF_StopType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentF_StopType::copyImpl(const uci::type::PO_ComponentF_StopType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentF_StopType&>(accessor);
    fixedAperture_Accessor = (accessorImpl.fixedAperture_Accessor ? accessorImpl.fixedAperture_Accessor : boost::none);
    if (accessorImpl.variableAperture_Accessor) {
      setVariableAperture(*(accessorImpl.variableAperture_Accessor));
    } else {
      variableAperture_Accessor.reset();
    }
  }
}

void PO_ComponentF_StopType::reset() noexcept {
  fixedAperture_Accessor.reset();
  variableAperture_Accessor.reset();
}

uci::type::PO_ComponentF_StopType::PO_ComponentF_StopTypeChoice PO_ComponentF_StopType::getPO_ComponentF_StopTypeChoiceOrdinal() const noexcept {
  if (fixedAperture_Accessor) {
    return PO_COMPONENTF_STOPTYPE_CHOICE_FIXEDAPERTURE;
  }
  if (variableAperture_Accessor) {
    return PO_COMPONENTF_STOPTYPE_CHOICE_VARIABLEAPERTURE;
  }
  return PO_COMPONENTF_STOPTYPE_CHOICE_NONE;
}

uci::type::PO_ComponentF_StopType& PO_ComponentF_StopType::setPO_ComponentF_StopTypeChoiceOrdinal(uci::type::PO_ComponentF_StopType::PO_ComponentF_StopTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PO_COMPONENTF_STOPTYPE_CHOICE_FIXEDAPERTURE:
      chooseFixedAperture();
      break;
    case PO_COMPONENTF_STOPTYPE_CHOICE_VARIABLEAPERTURE:
      chooseVariableAperture("setPO_ComponentF_StopTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPO_ComponentF_StopTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

xs::Float PO_ComponentF_StopType::getFixedAperture() const {
  if (fixedAperture_Accessor) {
    return *fixedAperture_Accessor;
  }
  throw uci::base::UCIException("Error in getFixedAperture(): Unable to get FixedAperture, field not selected");
}

uci::type::PO_ComponentF_StopType& PO_ComponentF_StopType::setFixedAperture(xs::Float value) {
  chooseFixedAperture();
  fixedAperture_Accessor = value;
  return *this;
}

bool PO_ComponentF_StopType::isFixedAperture() const noexcept {
  return static_cast<bool>(fixedAperture_Accessor);
}

void PO_ComponentF_StopType::chooseFixedAperture() {
  variableAperture_Accessor.reset();
  if (!fixedAperture_Accessor) {
    fixedAperture_Accessor = boost::optional<asb_xs::Float>();
  }
}

uci::type::PO_ComponentF_StopVariableType& PO_ComponentF_StopType::getVariableAperture_() const {
  if (variableAperture_Accessor) {
    return *variableAperture_Accessor;
  }
  throw uci::base::UCIException("Error in getVariableAperture(): Unable to get VariableAperture, field not selected");
}

const uci::type::PO_ComponentF_StopVariableType& PO_ComponentF_StopType::getVariableAperture() const {
  return getVariableAperture_();
}

uci::type::PO_ComponentF_StopVariableType& PO_ComponentF_StopType::getVariableAperture() {
  return getVariableAperture_();
}

uci::type::PO_ComponentF_StopType& PO_ComponentF_StopType::setVariableAperture(const uci::type::PO_ComponentF_StopVariableType& accessor) {
  chooseVariableAperture();
  if (&accessor != variableAperture_Accessor.get()) {
    variableAperture_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentF_StopType::isVariableAperture() const noexcept {
  return static_cast<bool>(variableAperture_Accessor);
}

uci::type::PO_ComponentF_StopVariableType& PO_ComponentF_StopType::chooseVariableAperture(const std::string& method, uci::base::accessorType::AccessorType type) {
  fixedAperture_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentF_StopVariableType : type};
  if ((!variableAperture_Accessor) || (variableAperture_Accessor->getAccessorType() != requestedType)) {
    variableAperture_Accessor = PO_ComponentF_StopVariableType::create(type);
    if (!variableAperture_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *variableAperture_Accessor;
}

uci::type::PO_ComponentF_StopVariableType& PO_ComponentF_StopType::chooseVariableAperture(uci::base::accessorType::AccessorType type) {
  return chooseVariableAperture("chooseVariableAperture", type);
}

std::unique_ptr<PO_ComponentF_StopType> PO_ComponentF_StopType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentF_StopType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentF_StopType) ? boost::make_unique<PO_ComponentF_StopType>() : nullptr;
}

/**  */
namespace PO_ComponentF_StopType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentF_StopType"};
constexpr const char* FixedAperture_Name{"FixedAperture"};
constexpr const char* VariableAperture_Name{"VariableAperture"};

} // namespace PO_ComponentF_StopType_Names

void PO_ComponentF_StopType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentF_StopType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentF_StopType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentF_StopType_Names::FixedAperture_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFixedAperture(asb_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentF_StopType_Names::VariableAperture_Name) {
      PO_ComponentF_StopVariableType::deserialize(valueType.second, accessor.chooseVariableAperture(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentF_StopType::serialize(const uci::type::PO_ComponentF_StopType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentF_StopType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentF_StopType_Names::Extern_Type_Name);
  }
  if (accessor.isFixedAperture()) {
    asb_uci::util::SerializationHelpers::serializeFloat(accessor.getFixedAperture(), node, PO_ComponentF_StopType_Names::FixedAperture_Name);
  } else if (accessor.isVariableAperture()) {
    PO_ComponentF_StopVariableType::serialize(accessor.getVariableAperture(), node, PO_ComponentF_StopType_Names::VariableAperture_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentF_StopType& PO_ComponentF_StopType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentF_StopType>().release());
}

uci::type::PO_ComponentF_StopType& PO_ComponentF_StopType::create(const uci::type::PO_ComponentF_StopType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentF_StopType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentF_StopType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentF_StopType::destroy(uci::type::PO_ComponentF_StopType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentF_StopType*>(&accessor);
}

} // namespace type

} // namespace uci

