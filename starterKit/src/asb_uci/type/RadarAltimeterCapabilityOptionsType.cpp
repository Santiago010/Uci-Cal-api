/** @file RadarAltimeterCapabilityOptionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RadarAltimeterCapabilityOptionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ElectronicProtectionOptionsSupportedType.h"
#include "asb_uci/type/FilteredUnfilteredEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ElectronicProtectionOptionsSupportedType.h"
#include "uci/type/FilteredUnfilteredEnum.h"
#include "uci/type/RadarAltimeterCapabilityOptionsType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RadarAltimeterCapabilityOptionsType::RadarAltimeterCapabilityOptionsType()
  : filteredUnfiltered_Accessor{boost::make_unique<FilteredUnfiltered>(1, 2)},
    electronicProtectionOptionsSupported_Accessor{boost::make_unique<ElectronicProtectionOptionsSupported>(0, SIZE_MAX)} {
}

RadarAltimeterCapabilityOptionsType::~RadarAltimeterCapabilityOptionsType() = default;

void RadarAltimeterCapabilityOptionsType::copy(const uci::type::RadarAltimeterCapabilityOptionsType& accessor) {
  copyImpl(accessor, false);
}

void RadarAltimeterCapabilityOptionsType::copyImpl(const uci::type::RadarAltimeterCapabilityOptionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RadarAltimeterCapabilityOptionsType&>(accessor);
    setInterruptOtherActivities(accessorImpl.interruptOtherActivities_Accessor);
    setCollectionPolicy(accessorImpl.collectionPolicy_Accessor);
    setConcurrentOperationSupported(accessorImpl.concurrentOperationSupported_Accessor);
    setFilteredUnfiltered(*(accessorImpl.filteredUnfiltered_Accessor));
    setElectronicProtectionOptionsSupported(*(accessorImpl.electronicProtectionOptionsSupported_Accessor));
    if (accessorImpl.hasFalseAlarmLevelUpperLimit()) {
      setFalseAlarmLevelUpperLimit(accessorImpl.getFalseAlarmLevelUpperLimit());
    } else {
      clearFalseAlarmLevelUpperLimit();
    }
  }
}

void RadarAltimeterCapabilityOptionsType::reset() noexcept {
  interruptOtherActivities_Accessor = false;
  collectionPolicy_Accessor = false;
  concurrentOperationSupported_Accessor = false;
  filteredUnfiltered_Accessor->reset();
  electronicProtectionOptionsSupported_Accessor->reset();
  clearFalseAlarmLevelUpperLimit();
}

xs::Boolean RadarAltimeterCapabilityOptionsType::getInterruptOtherActivities() const {
  return interruptOtherActivities_Accessor;
}

uci::type::RadarAltimeterCapabilityOptionsType& RadarAltimeterCapabilityOptionsType::setInterruptOtherActivities(xs::Boolean value) {
  interruptOtherActivities_Accessor = value;
  return *this;
}


xs::Boolean RadarAltimeterCapabilityOptionsType::getCollectionPolicy() const {
  return collectionPolicy_Accessor;
}

uci::type::RadarAltimeterCapabilityOptionsType& RadarAltimeterCapabilityOptionsType::setCollectionPolicy(xs::Boolean value) {
  collectionPolicy_Accessor = value;
  return *this;
}


xs::Boolean RadarAltimeterCapabilityOptionsType::getConcurrentOperationSupported() const {
  return concurrentOperationSupported_Accessor;
}

uci::type::RadarAltimeterCapabilityOptionsType& RadarAltimeterCapabilityOptionsType::setConcurrentOperationSupported(xs::Boolean value) {
  concurrentOperationSupported_Accessor = value;
  return *this;
}


const uci::type::RadarAltimeterCapabilityOptionsType::FilteredUnfiltered& RadarAltimeterCapabilityOptionsType::getFilteredUnfiltered() const {
  return *filteredUnfiltered_Accessor;
}

uci::type::RadarAltimeterCapabilityOptionsType::FilteredUnfiltered& RadarAltimeterCapabilityOptionsType::getFilteredUnfiltered() {
  return *filteredUnfiltered_Accessor;
}

uci::type::RadarAltimeterCapabilityOptionsType& RadarAltimeterCapabilityOptionsType::setFilteredUnfiltered(const uci::type::RadarAltimeterCapabilityOptionsType::FilteredUnfiltered& accessor) {
  if (&accessor != filteredUnfiltered_Accessor.get()) {
    filteredUnfiltered_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RadarAltimeterCapabilityOptionsType::ElectronicProtectionOptionsSupported& RadarAltimeterCapabilityOptionsType::getElectronicProtectionOptionsSupported() const {
  return *electronicProtectionOptionsSupported_Accessor;
}

uci::type::RadarAltimeterCapabilityOptionsType::ElectronicProtectionOptionsSupported& RadarAltimeterCapabilityOptionsType::getElectronicProtectionOptionsSupported() {
  return *electronicProtectionOptionsSupported_Accessor;
}

uci::type::RadarAltimeterCapabilityOptionsType& RadarAltimeterCapabilityOptionsType::setElectronicProtectionOptionsSupported(const uci::type::RadarAltimeterCapabilityOptionsType::ElectronicProtectionOptionsSupported& accessor) {
  if (&accessor != electronicProtectionOptionsSupported_Accessor.get()) {
    electronicProtectionOptionsSupported_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedByte RadarAltimeterCapabilityOptionsType::getFalseAlarmLevelUpperLimit() const {
  if (falseAlarmLevelUpperLimit_Accessor) {
    return *falseAlarmLevelUpperLimit_Accessor;
  }
  throw uci::base::UCIException("Error in getFalseAlarmLevelUpperLimit(): An attempt was made to get an optional field that was not enabled, call hasFalseAlarmLevelUpperLimit() to determine if it is safe to call getFalseAlarmLevelUpperLimit()");
}

uci::type::RadarAltimeterCapabilityOptionsType& RadarAltimeterCapabilityOptionsType::setFalseAlarmLevelUpperLimit(xs::UnsignedByte value) {
  falseAlarmLevelUpperLimit_Accessor = value;
  return *this;
}

bool RadarAltimeterCapabilityOptionsType::hasFalseAlarmLevelUpperLimit() const noexcept {
  return falseAlarmLevelUpperLimit_Accessor.has_value();
}

uci::type::RadarAltimeterCapabilityOptionsType& RadarAltimeterCapabilityOptionsType::clearFalseAlarmLevelUpperLimit() noexcept {
  falseAlarmLevelUpperLimit_Accessor.reset();
  return *this;
}

std::unique_ptr<RadarAltimeterCapabilityOptionsType> RadarAltimeterCapabilityOptionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarAltimeterCapabilityOptionsType : type};
  return (requestedType == uci::type::accessorType::radarAltimeterCapabilityOptionsType) ? boost::make_unique<RadarAltimeterCapabilityOptionsType>() : nullptr;
}

/**  */
namespace RadarAltimeterCapabilityOptionsType_Names {

constexpr const char* Extern_Type_Name{"RadarAltimeterCapabilityOptionsType"};
constexpr const char* InterruptOtherActivities_Name{"InterruptOtherActivities"};
constexpr const char* CollectionPolicy_Name{"CollectionPolicy"};
constexpr const char* ConcurrentOperationSupported_Name{"ConcurrentOperationSupported"};
constexpr const char* FilteredUnfiltered_Name{"FilteredUnfiltered"};
constexpr const char* ElectronicProtectionOptionsSupported_Name{"ElectronicProtectionOptionsSupported"};
constexpr const char* FalseAlarmLevelUpperLimit_Name{"FalseAlarmLevelUpperLimit"};

} // namespace RadarAltimeterCapabilityOptionsType_Names

void RadarAltimeterCapabilityOptionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RadarAltimeterCapabilityOptionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RadarAltimeterCapabilityOptionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RadarAltimeterCapabilityOptionsType_Names::InterruptOtherActivities_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInterruptOtherActivities(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterCapabilityOptionsType_Names::CollectionPolicy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCollectionPolicy(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterCapabilityOptionsType_Names::ConcurrentOperationSupported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConcurrentOperationSupported(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterCapabilityOptionsType_Names::FilteredUnfiltered_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RadarAltimeterCapabilityOptionsType::FilteredUnfiltered& boundedList = accessor.getFilteredUnfiltered();
        const uci::type::RadarAltimeterCapabilityOptionsType::FilteredUnfiltered::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterCapabilityOptionsType_Names::ElectronicProtectionOptionsSupported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RadarAltimeterCapabilityOptionsType::ElectronicProtectionOptionsSupported& boundedList = accessor.getElectronicProtectionOptionsSupported();
        const uci::type::RadarAltimeterCapabilityOptionsType::ElectronicProtectionOptionsSupported::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ElectronicProtectionOptionsSupportedType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterCapabilityOptionsType_Names::FalseAlarmLevelUpperLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFalseAlarmLevelUpperLimit(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    }
  }
}

std::string RadarAltimeterCapabilityOptionsType::serialize(const uci::type::RadarAltimeterCapabilityOptionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RadarAltimeterCapabilityOptionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RadarAltimeterCapabilityOptionsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInterruptOtherActivities(), node, RadarAltimeterCapabilityOptionsType_Names::InterruptOtherActivities_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getCollectionPolicy(), node, RadarAltimeterCapabilityOptionsType_Names::CollectionPolicy_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getConcurrentOperationSupported(), node, RadarAltimeterCapabilityOptionsType_Names::ConcurrentOperationSupported_Name);
  {
    const uci::type::RadarAltimeterCapabilityOptionsType::FilteredUnfiltered& boundedList = accessor.getFilteredUnfiltered();
    for (uci::type::RadarAltimeterCapabilityOptionsType::FilteredUnfiltered::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FilteredUnfilteredEnum::serialize(boundedList.at(i), node, RadarAltimeterCapabilityOptionsType_Names::FilteredUnfiltered_Name, false);
    }
  }
  {
    const uci::type::RadarAltimeterCapabilityOptionsType::ElectronicProtectionOptionsSupported& boundedList = accessor.getElectronicProtectionOptionsSupported();
    for (uci::type::RadarAltimeterCapabilityOptionsType::ElectronicProtectionOptionsSupported::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ElectronicProtectionOptionsSupportedType::serialize(boundedList.at(i), node, RadarAltimeterCapabilityOptionsType_Names::ElectronicProtectionOptionsSupported_Name);
    }
  }
  if (accessor.hasFalseAlarmLevelUpperLimit()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getFalseAlarmLevelUpperLimit(), node, RadarAltimeterCapabilityOptionsType_Names::FalseAlarmLevelUpperLimit_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RadarAltimeterCapabilityOptionsType& RadarAltimeterCapabilityOptionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RadarAltimeterCapabilityOptionsType>().release());
}

uci::type::RadarAltimeterCapabilityOptionsType& RadarAltimeterCapabilityOptionsType::create(const uci::type::RadarAltimeterCapabilityOptionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RadarAltimeterCapabilityOptionsType> newAccessor{boost::make_unique<asb_uci::type::RadarAltimeterCapabilityOptionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RadarAltimeterCapabilityOptionsType::destroy(uci::type::RadarAltimeterCapabilityOptionsType& accessor) {
  delete dynamic_cast<asb_uci::type::RadarAltimeterCapabilityOptionsType*>(&accessor);
}

} // namespace type

} // namespace uci

