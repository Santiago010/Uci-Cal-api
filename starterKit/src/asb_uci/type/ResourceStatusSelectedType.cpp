/** @file ResourceStatusSelectedType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ResourceStatusSelectedType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PeriodPerformanceFeedbackType.h"
#include "asb_uci/type/RF_TypeEnum.h"
#include "asb_uci/type/SelectAntennaType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PeriodPerformanceFeedbackType.h"
#include "uci/type/RF_TypeEnum.h"
#include "uci/type/ResourceStatusSelectedType.h"
#include "uci/type/SelectAntennaType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResourceStatusSelectedType::ResourceStatusSelectedType()
  : selectedAntenna_Accessor{boost::make_unique<SelectedAntenna>(1, SIZE_MAX)},
    rF_Mode_Accessor{boost::make_unique<RF_TypeEnum>()},
    periodPerformanceFeedback_Accessor{boost::make_unique<PeriodPerformanceFeedback>(0, SIZE_MAX)} {
}

ResourceStatusSelectedType::~ResourceStatusSelectedType() = default;

void ResourceStatusSelectedType::copy(const uci::type::ResourceStatusSelectedType& accessor) {
  copyImpl(accessor, false);
}

void ResourceStatusSelectedType::copyImpl(const uci::type::ResourceStatusSelectedType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResourceStatusSelectedType&>(accessor);
    if (accessorImpl.hasSystemThreadIndex()) {
      setSystemThreadIndex(accessorImpl.getSystemThreadIndex());
    } else {
      clearSystemThreadIndex();
    }
    setSelectedAntenna(*(accessorImpl.selectedAntenna_Accessor));
    setRF_Mode(*(accessorImpl.rF_Mode_Accessor));
    setResourceAccessPriority(accessorImpl.resourceAccessPriority_Accessor);
    setPeriodPerformanceFeedback(*(accessorImpl.periodPerformanceFeedback_Accessor));
  }
}

void ResourceStatusSelectedType::reset() noexcept {
  clearSystemThreadIndex();
  selectedAntenna_Accessor->reset();
  rF_Mode_Accessor->reset();
  resourceAccessPriority_Accessor = 0;
  periodPerformanceFeedback_Accessor->reset();
}

xs::UnsignedInt ResourceStatusSelectedType::getSystemThreadIndex() const {
  if (systemThreadIndex_Accessor) {
    return *systemThreadIndex_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemThreadIndex(): An attempt was made to get an optional field that was not enabled, call hasSystemThreadIndex() to determine if it is safe to call getSystemThreadIndex()");
}

uci::type::ResourceStatusSelectedType& ResourceStatusSelectedType::setSystemThreadIndex(xs::UnsignedInt value) {
  systemThreadIndex_Accessor = value;
  return *this;
}

bool ResourceStatusSelectedType::hasSystemThreadIndex() const noexcept {
  return systemThreadIndex_Accessor.has_value();
}

uci::type::ResourceStatusSelectedType& ResourceStatusSelectedType::clearSystemThreadIndex() noexcept {
  systemThreadIndex_Accessor.reset();
  return *this;
}

const uci::type::ResourceStatusSelectedType::SelectedAntenna& ResourceStatusSelectedType::getSelectedAntenna() const {
  return *selectedAntenna_Accessor;
}

uci::type::ResourceStatusSelectedType::SelectedAntenna& ResourceStatusSelectedType::getSelectedAntenna() {
  return *selectedAntenna_Accessor;
}

uci::type::ResourceStatusSelectedType& ResourceStatusSelectedType::setSelectedAntenna(const uci::type::ResourceStatusSelectedType::SelectedAntenna& accessor) {
  if (&accessor != selectedAntenna_Accessor.get()) {
    selectedAntenna_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RF_TypeEnum& ResourceStatusSelectedType::getRF_Mode() const {
  return *rF_Mode_Accessor;
}

uci::type::RF_TypeEnum& ResourceStatusSelectedType::getRF_Mode() {
  return *rF_Mode_Accessor;
}

uci::type::ResourceStatusSelectedType& ResourceStatusSelectedType::setRF_Mode(const uci::type::RF_TypeEnum& accessor) {
  if (&accessor != rF_Mode_Accessor.get()) {
    rF_Mode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ResourceStatusSelectedType& ResourceStatusSelectedType::setRF_Mode(uci::type::RF_TypeEnum::EnumerationItem value) {
  rF_Mode_Accessor->setValue(value);
  return *this;
}


xs::UnsignedInt ResourceStatusSelectedType::getResourceAccessPriority() const {
  return resourceAccessPriority_Accessor;
}

uci::type::ResourceStatusSelectedType& ResourceStatusSelectedType::setResourceAccessPriority(xs::UnsignedInt value) {
  resourceAccessPriority_Accessor = value;
  return *this;
}


const uci::type::ResourceStatusSelectedType::PeriodPerformanceFeedback& ResourceStatusSelectedType::getPeriodPerformanceFeedback() const {
  return *periodPerformanceFeedback_Accessor;
}

uci::type::ResourceStatusSelectedType::PeriodPerformanceFeedback& ResourceStatusSelectedType::getPeriodPerformanceFeedback() {
  return *periodPerformanceFeedback_Accessor;
}

uci::type::ResourceStatusSelectedType& ResourceStatusSelectedType::setPeriodPerformanceFeedback(const uci::type::ResourceStatusSelectedType::PeriodPerformanceFeedback& accessor) {
  if (&accessor != periodPerformanceFeedback_Accessor.get()) {
    periodPerformanceFeedback_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ResourceStatusSelectedType> ResourceStatusSelectedType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceStatusSelectedType : type};
  return (requestedType == uci::type::accessorType::resourceStatusSelectedType) ? boost::make_unique<ResourceStatusSelectedType>() : nullptr;
}

/**  */
namespace ResourceStatusSelectedType_Names {

constexpr const char* Extern_Type_Name{"ResourceStatusSelectedType"};
constexpr const char* SystemThreadIndex_Name{"SystemThreadIndex"};
constexpr const char* SelectedAntenna_Name{"SelectedAntenna"};
constexpr const char* RF_Mode_Name{"RF_Mode"};
constexpr const char* ResourceAccessPriority_Name{"ResourceAccessPriority"};
constexpr const char* PeriodPerformanceFeedback_Name{"PeriodPerformanceFeedback"};

} // namespace ResourceStatusSelectedType_Names

void ResourceStatusSelectedType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResourceStatusSelectedType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResourceStatusSelectedType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResourceStatusSelectedType_Names::SystemThreadIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSystemThreadIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceStatusSelectedType_Names::SelectedAntenna_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResourceStatusSelectedType::SelectedAntenna& boundedList = accessor.getSelectedAntenna();
        const uci::type::ResourceStatusSelectedType::SelectedAntenna::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SelectAntennaType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ResourceStatusSelectedType_Names::RF_Mode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRF_Mode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ResourceStatusSelectedType_Names::ResourceAccessPriority_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResourceAccessPriority(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceStatusSelectedType_Names::PeriodPerformanceFeedback_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResourceStatusSelectedType::PeriodPerformanceFeedback& boundedList = accessor.getPeriodPerformanceFeedback();
        const uci::type::ResourceStatusSelectedType::PeriodPerformanceFeedback::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PeriodPerformanceFeedbackType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ResourceStatusSelectedType::serialize(const uci::type::ResourceStatusSelectedType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResourceStatusSelectedType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResourceStatusSelectedType_Names::Extern_Type_Name);
  }
  if (accessor.hasSystemThreadIndex()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getSystemThreadIndex(), node, ResourceStatusSelectedType_Names::SystemThreadIndex_Name);
  }
  {
    const uci::type::ResourceStatusSelectedType::SelectedAntenna& boundedList = accessor.getSelectedAntenna();
    for (uci::type::ResourceStatusSelectedType::SelectedAntenna::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SelectAntennaType::serialize(boundedList.at(i), node, ResourceStatusSelectedType_Names::SelectedAntenna_Name);
    }
  }
  RF_TypeEnum::serialize(accessor.getRF_Mode(), node, ResourceStatusSelectedType_Names::RF_Mode_Name, false);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getResourceAccessPriority(), node, ResourceStatusSelectedType_Names::ResourceAccessPriority_Name);
  {
    const uci::type::ResourceStatusSelectedType::PeriodPerformanceFeedback& boundedList = accessor.getPeriodPerformanceFeedback();
    for (uci::type::ResourceStatusSelectedType::PeriodPerformanceFeedback::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PeriodPerformanceFeedbackType::serialize(boundedList.at(i), node, ResourceStatusSelectedType_Names::PeriodPerformanceFeedback_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResourceStatusSelectedType& ResourceStatusSelectedType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResourceStatusSelectedType>().release());
}

uci::type::ResourceStatusSelectedType& ResourceStatusSelectedType::create(const uci::type::ResourceStatusSelectedType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResourceStatusSelectedType> newAccessor{boost::make_unique<asb_uci::type::ResourceStatusSelectedType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResourceStatusSelectedType::destroy(uci::type::ResourceStatusSelectedType& accessor) {
  delete dynamic_cast<asb_uci::type::ResourceStatusSelectedType*>(&accessor);
}

} // namespace type

} // namespace uci

