/** @file KinematicsOptionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/KinematicsOptionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AssetType.h"
#include "../../../include/asb_uci/type/KinematicsMultiStandardType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AssetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/KinematicsMultiStandardType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/KinematicsOptionsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

KinematicsOptionsType::KinematicsOptionsType() = default;

KinematicsOptionsType::~KinematicsOptionsType() = default;

void KinematicsOptionsType::copy(const uci::type::KinematicsOptionsType& accessor) {
  copyImpl(accessor, false);
}

void KinematicsOptionsType::copyImpl(const uci::type::KinematicsOptionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const KinematicsOptionsType&>(accessor);
    if (accessorImpl.referenceAsset_Accessor) {
      setReferenceAsset(*(accessorImpl.referenceAsset_Accessor));
    } else {
      referenceAsset_Accessor.reset();
    }
    if (accessorImpl.kinematicsOverride_Accessor) {
      setKinematicsOverride(*(accessorImpl.kinematicsOverride_Accessor));
    } else {
      kinematicsOverride_Accessor.reset();
    }
  }
}

void KinematicsOptionsType::reset() noexcept {
  referenceAsset_Accessor.reset();
  kinematicsOverride_Accessor.reset();
}

uci::type::KinematicsOptionsType::KinematicsOptionsTypeChoice KinematicsOptionsType::getKinematicsOptionsTypeChoiceOrdinal() const noexcept {
  if (referenceAsset_Accessor) {
    return KINEMATICSOPTIONSTYPE_CHOICE_REFERENCEASSET;
  }
  if (kinematicsOverride_Accessor) {
    return KINEMATICSOPTIONSTYPE_CHOICE_KINEMATICSOVERRIDE;
  }
  return KINEMATICSOPTIONSTYPE_CHOICE_NONE;
}

uci::type::KinematicsOptionsType& KinematicsOptionsType::setKinematicsOptionsTypeChoiceOrdinal(uci::type::KinematicsOptionsType::KinematicsOptionsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case KINEMATICSOPTIONSTYPE_CHOICE_REFERENCEASSET:
      chooseReferenceAsset("setKinematicsOptionsTypeChoiceOrdinal", type);
      break;
    case KINEMATICSOPTIONSTYPE_CHOICE_KINEMATICSOVERRIDE:
      chooseKinematicsOverride("setKinematicsOptionsTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setKinematicsOptionsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::AssetType& KinematicsOptionsType::getReferenceAsset_() const {
  if (referenceAsset_Accessor) {
    return *referenceAsset_Accessor;
  }
  throw uci::base::UCIException("Error in getReferenceAsset(): Unable to get ReferenceAsset, field not selected");
}

const uci::type::AssetType& KinematicsOptionsType::getReferenceAsset() const {
  return getReferenceAsset_();
}

uci::type::AssetType& KinematicsOptionsType::getReferenceAsset() {
  return getReferenceAsset_();
}

uci::type::KinematicsOptionsType& KinematicsOptionsType::setReferenceAsset(const uci::type::AssetType& accessor) {
  chooseReferenceAsset(accessor.getAccessorType());
  if (&accessor != referenceAsset_Accessor.get()) {
    referenceAsset_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool KinematicsOptionsType::isReferenceAsset() const noexcept {
  return static_cast<bool>(referenceAsset_Accessor);
}

uci::type::AssetType& KinematicsOptionsType::chooseReferenceAsset(const std::string& method, uci::base::accessorType::AccessorType type) {
  kinematicsOverride_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::assetType : type};
  if ((!referenceAsset_Accessor) || (referenceAsset_Accessor->getAccessorType() != requestedType)) {
    referenceAsset_Accessor = AssetType::create(type);
    if (!referenceAsset_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *referenceAsset_Accessor;
}

uci::type::AssetType& KinematicsOptionsType::chooseReferenceAsset(uci::base::accessorType::AccessorType type) {
  return chooseReferenceAsset("chooseReferenceAsset", type);
}

uci::type::KinematicsMultiStandardType& KinematicsOptionsType::getKinematicsOverride_() const {
  if (kinematicsOverride_Accessor) {
    return *kinematicsOverride_Accessor;
  }
  throw uci::base::UCIException("Error in getKinematicsOverride(): Unable to get KinematicsOverride, field not selected");
}

const uci::type::KinematicsMultiStandardType& KinematicsOptionsType::getKinematicsOverride() const {
  return getKinematicsOverride_();
}

uci::type::KinematicsMultiStandardType& KinematicsOptionsType::getKinematicsOverride() {
  return getKinematicsOverride_();
}

uci::type::KinematicsOptionsType& KinematicsOptionsType::setKinematicsOverride(const uci::type::KinematicsMultiStandardType& accessor) {
  chooseKinematicsOverride(accessor.getAccessorType());
  if (&accessor != kinematicsOverride_Accessor.get()) {
    kinematicsOverride_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool KinematicsOptionsType::isKinematicsOverride() const noexcept {
  return static_cast<bool>(kinematicsOverride_Accessor);
}

uci::type::KinematicsMultiStandardType& KinematicsOptionsType::chooseKinematicsOverride(const std::string& method, uci::base::accessorType::AccessorType type) {
  referenceAsset_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::kinematicsMultiStandardType : type};
  if ((!kinematicsOverride_Accessor) || (kinematicsOverride_Accessor->getAccessorType() != requestedType)) {
    kinematicsOverride_Accessor = KinematicsMultiStandardType::create(type);
    if (!kinematicsOverride_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *kinematicsOverride_Accessor;
}

uci::type::KinematicsMultiStandardType& KinematicsOptionsType::chooseKinematicsOverride(uci::base::accessorType::AccessorType type) {
  return chooseKinematicsOverride("chooseKinematicsOverride", type);
}

std::unique_ptr<KinematicsOptionsType> KinematicsOptionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::kinematicsOptionsType : type};
  return (requestedType == uci::type::accessorType::kinematicsOptionsType) ? boost::make_unique<KinematicsOptionsType>() : nullptr;
}

/**  */
namespace KinematicsOptionsType_Names {

constexpr const char* Extern_Type_Name{"KinematicsOptionsType"};
constexpr const char* ReferenceAsset_Name{"ReferenceAsset"};
constexpr const char* KinematicsOverride_Name{"KinematicsOverride"};

} // namespace KinematicsOptionsType_Names

void KinematicsOptionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::KinematicsOptionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = KinematicsOptionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + KinematicsOptionsType_Names::ReferenceAsset_Name) {
      AssetType::deserialize(valueType.second, accessor.chooseReferenceAsset(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + KinematicsOptionsType_Names::KinematicsOverride_Name) {
      KinematicsMultiStandardType::deserialize(valueType.second, accessor.chooseKinematicsOverride(), nodeName, nsPrefix);
    }
  }
}

std::string KinematicsOptionsType::serialize(const uci::type::KinematicsOptionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? KinematicsOptionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, KinematicsOptionsType_Names::Extern_Type_Name);
  }
  if (accessor.isReferenceAsset()) {
    AssetType::serialize(accessor.getReferenceAsset(), node, KinematicsOptionsType_Names::ReferenceAsset_Name);
  } else if (accessor.isKinematicsOverride()) {
    KinematicsMultiStandardType::serialize(accessor.getKinematicsOverride(), node, KinematicsOptionsType_Names::KinematicsOverride_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::KinematicsOptionsType& KinematicsOptionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::KinematicsOptionsType>().release());
}

uci::type::KinematicsOptionsType& KinematicsOptionsType::create(const uci::type::KinematicsOptionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::KinematicsOptionsType> newAccessor{boost::make_unique<asb_uci::type::KinematicsOptionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void KinematicsOptionsType::destroy(uci::type::KinematicsOptionsType& accessor) {
  delete dynamic_cast<asb_uci::type::KinematicsOptionsType*>(&accessor);
}

} // namespace type

} // namespace uci

