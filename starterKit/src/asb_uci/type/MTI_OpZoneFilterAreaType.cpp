/** @file MTI_OpZoneFilterAreaType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/MTI_OpZoneFilterAreaType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OpZoneFilterAreaPET.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MTI_OpZoneFilterAreaType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MTI_OpZoneFilterAreaType::MTI_OpZoneFilterAreaType()
  : job_Accessor{boost::make_unique<Job>(0, SIZE_MAX)} {
}

MTI_OpZoneFilterAreaType::~MTI_OpZoneFilterAreaType() = default;

void MTI_OpZoneFilterAreaType::copy(const uci::type::MTI_OpZoneFilterAreaType& accessor) {
  copyImpl(accessor, false);
}

void MTI_OpZoneFilterAreaType::copyImpl(const uci::type::MTI_OpZoneFilterAreaType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::mTI_OpZoneFilterAreaType)) {
      OpZoneFilterAreaPET::copyImpl(accessor, false);
      const auto& accessorImpl = dynamic_cast<const MTI_OpZoneFilterAreaType&>(accessor);
      if (accessorImpl.hasMinimumTargetCountInDwell()) {
        setMinimumTargetCountInDwell(accessorImpl.getMinimumTargetCountInDwell());
      } else {
        clearMinimumTargetCountInDwell();
      }
      if (accessorImpl.hasMaximumTargetCountInDwell()) {
        setMaximumTargetCountInDwell(accessorImpl.getMaximumTargetCountInDwell());
      } else {
        clearMaximumTargetCountInDwell();
      }
      if (accessorImpl.hasMinimumSNR()) {
        setMinimumSNR(accessorImpl.getMinimumSNR());
      } else {
        clearMinimumSNR();
      }
      if (accessorImpl.hasMaximumSNR()) {
        setMaximumSNR(accessorImpl.getMaximumSNR());
      } else {
        clearMaximumSNR();
      }
      if (accessorImpl.hasMinimumRCS()) {
        setMinimumRCS(accessorImpl.getMinimumRCS());
      } else {
        clearMinimumRCS();
      }
      if (accessorImpl.hasMaximumRCS()) {
        setMaximumRCS(accessorImpl.getMaximumRCS());
      } else {
        clearMaximumRCS();
      }
      if (accessorImpl.hasMinimumRadialVelocity()) {
        setMinimumRadialVelocity(accessorImpl.getMinimumRadialVelocity());
      } else {
        clearMinimumRadialVelocity();
      }
      if (accessorImpl.hasMaximumRadialVelocity()) {
        setMaximumRadialVelocity(accessorImpl.getMaximumRadialVelocity());
      } else {
        clearMaximumRadialVelocity();
      }
      setJob(*(accessorImpl.job_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void MTI_OpZoneFilterAreaType::reset() noexcept {
  OpZoneFilterAreaPET::reset();
  clearMinimumTargetCountInDwell();
  clearMaximumTargetCountInDwell();
  clearMinimumSNR();
  clearMaximumSNR();
  clearMinimumRCS();
  clearMaximumRCS();
  clearMinimumRadialVelocity();
  clearMaximumRadialVelocity();
  job_Accessor->reset();
}

xs::Int MTI_OpZoneFilterAreaType::getMinimumTargetCountInDwell() const {
  if (minimumTargetCountInDwell_Accessor) {
    return *minimumTargetCountInDwell_Accessor;
  }
  throw uci::base::UCIException("Error in getMinimumTargetCountInDwell(): An attempt was made to get an optional field that was not enabled, call hasMinimumTargetCountInDwell() to determine if it is safe to call getMinimumTargetCountInDwell()");
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::setMinimumTargetCountInDwell(xs::Int value) {
  minimumTargetCountInDwell_Accessor = value;
  return *this;
}

bool MTI_OpZoneFilterAreaType::hasMinimumTargetCountInDwell() const noexcept {
  return minimumTargetCountInDwell_Accessor.has_value();
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::clearMinimumTargetCountInDwell() noexcept {
  minimumTargetCountInDwell_Accessor.reset();
  return *this;
}

xs::Int MTI_OpZoneFilterAreaType::getMaximumTargetCountInDwell() const {
  if (maximumTargetCountInDwell_Accessor) {
    return *maximumTargetCountInDwell_Accessor;
  }
  throw uci::base::UCIException("Error in getMaximumTargetCountInDwell(): An attempt was made to get an optional field that was not enabled, call hasMaximumTargetCountInDwell() to determine if it is safe to call getMaximumTargetCountInDwell()");
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::setMaximumTargetCountInDwell(xs::Int value) {
  maximumTargetCountInDwell_Accessor = value;
  return *this;
}

bool MTI_OpZoneFilterAreaType::hasMaximumTargetCountInDwell() const noexcept {
  return maximumTargetCountInDwell_Accessor.has_value();
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::clearMaximumTargetCountInDwell() noexcept {
  maximumTargetCountInDwell_Accessor.reset();
  return *this;
}

xs::Double MTI_OpZoneFilterAreaType::getMinimumSNR() const {
  if (minimumSNR_Accessor) {
    return *minimumSNR_Accessor;
  }
  throw uci::base::UCIException("Error in getMinimumSNR(): An attempt was made to get an optional field that was not enabled, call hasMinimumSNR() to determine if it is safe to call getMinimumSNR()");
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::setMinimumSNR(xs::Double value) {
  minimumSNR_Accessor = value;
  return *this;
}

bool MTI_OpZoneFilterAreaType::hasMinimumSNR() const noexcept {
  return minimumSNR_Accessor.has_value();
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::clearMinimumSNR() noexcept {
  minimumSNR_Accessor.reset();
  return *this;
}

xs::Double MTI_OpZoneFilterAreaType::getMaximumSNR() const {
  if (maximumSNR_Accessor) {
    return *maximumSNR_Accessor;
  }
  throw uci::base::UCIException("Error in getMaximumSNR(): An attempt was made to get an optional field that was not enabled, call hasMaximumSNR() to determine if it is safe to call getMaximumSNR()");
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::setMaximumSNR(xs::Double value) {
  maximumSNR_Accessor = value;
  return *this;
}

bool MTI_OpZoneFilterAreaType::hasMaximumSNR() const noexcept {
  return maximumSNR_Accessor.has_value();
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::clearMaximumSNR() noexcept {
  maximumSNR_Accessor.reset();
  return *this;
}

xs::Double MTI_OpZoneFilterAreaType::getMinimumRCS() const {
  if (minimumRCS_Accessor) {
    return *minimumRCS_Accessor;
  }
  throw uci::base::UCIException("Error in getMinimumRCS(): An attempt was made to get an optional field that was not enabled, call hasMinimumRCS() to determine if it is safe to call getMinimumRCS()");
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::setMinimumRCS(xs::Double value) {
  minimumRCS_Accessor = value;
  return *this;
}

bool MTI_OpZoneFilterAreaType::hasMinimumRCS() const noexcept {
  return minimumRCS_Accessor.has_value();
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::clearMinimumRCS() noexcept {
  minimumRCS_Accessor.reset();
  return *this;
}

xs::Double MTI_OpZoneFilterAreaType::getMaximumRCS() const {
  if (maximumRCS_Accessor) {
    return *maximumRCS_Accessor;
  }
  throw uci::base::UCIException("Error in getMaximumRCS(): An attempt was made to get an optional field that was not enabled, call hasMaximumRCS() to determine if it is safe to call getMaximumRCS()");
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::setMaximumRCS(xs::Double value) {
  maximumRCS_Accessor = value;
  return *this;
}

bool MTI_OpZoneFilterAreaType::hasMaximumRCS() const noexcept {
  return maximumRCS_Accessor.has_value();
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::clearMaximumRCS() noexcept {
  maximumRCS_Accessor.reset();
  return *this;
}

xs::Double MTI_OpZoneFilterAreaType::getMinimumRadialVelocity() const {
  if (minimumRadialVelocity_Accessor) {
    return *minimumRadialVelocity_Accessor;
  }
  throw uci::base::UCIException("Error in getMinimumRadialVelocity(): An attempt was made to get an optional field that was not enabled, call hasMinimumRadialVelocity() to determine if it is safe to call getMinimumRadialVelocity()");
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::setMinimumRadialVelocity(xs::Double value) {
  minimumRadialVelocity_Accessor = value;
  return *this;
}

bool MTI_OpZoneFilterAreaType::hasMinimumRadialVelocity() const noexcept {
  return minimumRadialVelocity_Accessor.has_value();
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::clearMinimumRadialVelocity() noexcept {
  minimumRadialVelocity_Accessor.reset();
  return *this;
}

xs::Double MTI_OpZoneFilterAreaType::getMaximumRadialVelocity() const {
  if (maximumRadialVelocity_Accessor) {
    return *maximumRadialVelocity_Accessor;
  }
  throw uci::base::UCIException("Error in getMaximumRadialVelocity(): An attempt was made to get an optional field that was not enabled, call hasMaximumRadialVelocity() to determine if it is safe to call getMaximumRadialVelocity()");
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::setMaximumRadialVelocity(xs::Double value) {
  maximumRadialVelocity_Accessor = value;
  return *this;
}

bool MTI_OpZoneFilterAreaType::hasMaximumRadialVelocity() const noexcept {
  return maximumRadialVelocity_Accessor.has_value();
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::clearMaximumRadialVelocity() noexcept {
  maximumRadialVelocity_Accessor.reset();
  return *this;
}

const uci::type::MTI_OpZoneFilterAreaType::Job& MTI_OpZoneFilterAreaType::getJob() const {
  return *job_Accessor;
}

uci::type::MTI_OpZoneFilterAreaType::Job& MTI_OpZoneFilterAreaType::getJob() {
  return *job_Accessor;
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::setJob(const uci::type::MTI_OpZoneFilterAreaType::Job& accessor) {
  if (&accessor != job_Accessor.get()) {
    job_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<MTI_OpZoneFilterAreaType> MTI_OpZoneFilterAreaType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mTI_OpZoneFilterAreaType : type};
  return std::unique_ptr<MTI_OpZoneFilterAreaType>(dynamic_cast<MTI_OpZoneFilterAreaType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace MTI_OpZoneFilterAreaType_Names {

constexpr const char* Extern_Type_Name{"MTI_OpZoneFilterAreaType"};
constexpr const char* MinimumTargetCountInDwell_Name{"MinimumTargetCountInDwell"};
constexpr const char* MaximumTargetCountInDwell_Name{"MaximumTargetCountInDwell"};
constexpr const char* MinimumSNR_Name{"MinimumSNR"};
constexpr const char* MaximumSNR_Name{"MaximumSNR"};
constexpr const char* MinimumRCS_Name{"MinimumRCS"};
constexpr const char* MaximumRCS_Name{"MaximumRCS"};
constexpr const char* MinimumRadialVelocity_Name{"MinimumRadialVelocity"};
constexpr const char* MaximumRadialVelocity_Name{"MaximumRadialVelocity"};
constexpr const char* Job_Name{"Job"};

} // namespace MTI_OpZoneFilterAreaType_Names

void MTI_OpZoneFilterAreaType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MTI_OpZoneFilterAreaType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MTI_OpZoneFilterAreaType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MTI_OpZoneFilterAreaType_Names::MinimumTargetCountInDwell_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumTargetCountInDwell(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_OpZoneFilterAreaType_Names::MaximumTargetCountInDwell_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumTargetCountInDwell(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_OpZoneFilterAreaType_Names::MinimumSNR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumSNR(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_OpZoneFilterAreaType_Names::MaximumSNR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumSNR(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_OpZoneFilterAreaType_Names::MinimumRCS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumRCS(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_OpZoneFilterAreaType_Names::MaximumRCS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumRCS(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_OpZoneFilterAreaType_Names::MinimumRadialVelocity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumRadialVelocity(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_OpZoneFilterAreaType_Names::MaximumRadialVelocity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumRadialVelocity(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_OpZoneFilterAreaType_Names::Job_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MTI_OpZoneFilterAreaType::Job& boundedList = accessor.getJob();
        const uci::type::MTI_OpZoneFilterAreaType::Job::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setIntValue(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    }
  }
  OpZoneFilterAreaPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string MTI_OpZoneFilterAreaType::serialize(const uci::type::MTI_OpZoneFilterAreaType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MTI_OpZoneFilterAreaType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::mTI_OpZoneFilterAreaType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, MTI_OpZoneFilterAreaType_Names::Extern_Type_Name);
    }
    OpZoneFilterAreaPET::serialize(accessor, node, "", false, false, false);
    if (accessor.hasMinimumTargetCountInDwell()) {
      asb_uci::util::SerializationHelpers::serializeInt(accessor.getMinimumTargetCountInDwell(), node, MTI_OpZoneFilterAreaType_Names::MinimumTargetCountInDwell_Name);
    }
    if (accessor.hasMaximumTargetCountInDwell()) {
      asb_uci::util::SerializationHelpers::serializeInt(accessor.getMaximumTargetCountInDwell(), node, MTI_OpZoneFilterAreaType_Names::MaximumTargetCountInDwell_Name);
    }
    if (accessor.hasMinimumSNR()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinimumSNR(), node, MTI_OpZoneFilterAreaType_Names::MinimumSNR_Name);
    }
    if (accessor.hasMaximumSNR()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaximumSNR(), node, MTI_OpZoneFilterAreaType_Names::MaximumSNR_Name);
    }
    if (accessor.hasMinimumRCS()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinimumRCS(), node, MTI_OpZoneFilterAreaType_Names::MinimumRCS_Name);
    }
    if (accessor.hasMaximumRCS()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaximumRCS(), node, MTI_OpZoneFilterAreaType_Names::MaximumRCS_Name);
    }
    if (accessor.hasMinimumRadialVelocity()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinimumRadialVelocity(), node, MTI_OpZoneFilterAreaType_Names::MinimumRadialVelocity_Name);
    }
    if (accessor.hasMaximumRadialVelocity()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMaximumRadialVelocity(), node, MTI_OpZoneFilterAreaType_Names::MaximumRadialVelocity_Name);
    }
    {
      const uci::type::MTI_OpZoneFilterAreaType::Job& boundedList = accessor.getJob();
      for (uci::type::MTI_OpZoneFilterAreaType::Job::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::util::SerializationHelpers::serializeInt(boundedList.at(i), node, MTI_OpZoneFilterAreaType_Names::Job_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MTI_OpZoneFilterAreaType>().release());
}

uci::type::MTI_OpZoneFilterAreaType& MTI_OpZoneFilterAreaType::create(const uci::type::MTI_OpZoneFilterAreaType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MTI_OpZoneFilterAreaType> newAccessor{boost::make_unique<asb_uci::type::MTI_OpZoneFilterAreaType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MTI_OpZoneFilterAreaType::destroy(uci::type::MTI_OpZoneFilterAreaType& accessor) {
  delete dynamic_cast<asb_uci::type::MTI_OpZoneFilterAreaType*>(&accessor);
}

} // namespace type

} // namespace uci

