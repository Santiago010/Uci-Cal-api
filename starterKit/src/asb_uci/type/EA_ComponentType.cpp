/** @file EA_ComponentType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EA_ComponentType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentID_Type.h"
#include "../../../include/asb_uci/type/FieldOfRegardType.h"
#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EA_ComponentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FieldOfRegardType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PercentType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EA_ComponentType::EA_ComponentType()
  : componentID_Accessor{boost::make_unique<ComponentID_Type>()},
    fieldOfRegard_Accessor{boost::make_unique<FieldOfRegardType>()},
    band_Accessor{boost::make_unique<Band>(1, SIZE_MAX)} {
}

EA_ComponentType::~EA_ComponentType() = default;

void EA_ComponentType::copy(const uci::type::EA_ComponentType& accessor) {
  copyImpl(accessor, false);
}

void EA_ComponentType::copyImpl(const uci::type::EA_ComponentType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EA_ComponentType&>(accessor);
    setComponentID(*(accessorImpl.componentID_Accessor));
    setFieldOfRegard(*(accessorImpl.fieldOfRegard_Accessor));
    setFrequencyChangeTime(accessorImpl.frequencyChangeTime_Accessor);
    setDutyFactorLimit(accessorImpl.dutyFactorLimit_Accessor);
    setBeamLimit(accessorImpl.beamLimit_Accessor);
    setCommutationsLimit(accessorImpl.commutationsLimit_Accessor);
    setBand(*(accessorImpl.band_Accessor));
    if (accessorImpl.hasInstantaneousBand()) {
      setInstantaneousBand(accessorImpl.getInstantaneousBand());
    } else {
      clearInstantaneousBand();
    }
  }
}

void EA_ComponentType::reset() noexcept {
  componentID_Accessor->reset();
  fieldOfRegard_Accessor->reset();
  frequencyChangeTime_Accessor = 0;
  dutyFactorLimit_Accessor = 0.0;
  beamLimit_Accessor = 0;
  commutationsLimit_Accessor = 0;
  band_Accessor->reset();
  clearInstantaneousBand();
}

const uci::type::ComponentID_Type& EA_ComponentType::getComponentID() const {
  return *componentID_Accessor;
}

uci::type::ComponentID_Type& EA_ComponentType::getComponentID() {
  return *componentID_Accessor;
}

uci::type::EA_ComponentType& EA_ComponentType::setComponentID(const uci::type::ComponentID_Type& accessor) {
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::FieldOfRegardType& EA_ComponentType::getFieldOfRegard() const {
  return *fieldOfRegard_Accessor;
}

uci::type::FieldOfRegardType& EA_ComponentType::getFieldOfRegard() {
  return *fieldOfRegard_Accessor;
}

uci::type::EA_ComponentType& EA_ComponentType::setFieldOfRegard(const uci::type::FieldOfRegardType& accessor) {
  if (&accessor != fieldOfRegard_Accessor.get()) {
    fieldOfRegard_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DurationTypeValue EA_ComponentType::getFrequencyChangeTime() const {
  return frequencyChangeTime_Accessor;
}

uci::type::EA_ComponentType& EA_ComponentType::setFrequencyChangeTime(uci::type::DurationTypeValue value) {
  frequencyChangeTime_Accessor = value;
  return *this;
}


uci::type::PercentTypeValue EA_ComponentType::getDutyFactorLimit() const {
  return dutyFactorLimit_Accessor;
}

uci::type::EA_ComponentType& EA_ComponentType::setDutyFactorLimit(uci::type::PercentTypeValue value) {
  dutyFactorLimit_Accessor = value;
  return *this;
}


xs::UnsignedInt EA_ComponentType::getBeamLimit() const {
  return beamLimit_Accessor;
}

uci::type::EA_ComponentType& EA_ComponentType::setBeamLimit(xs::UnsignedInt value) {
  beamLimit_Accessor = value;
  return *this;
}


xs::UnsignedInt EA_ComponentType::getCommutationsLimit() const {
  return commutationsLimit_Accessor;
}

uci::type::EA_ComponentType& EA_ComponentType::setCommutationsLimit(xs::UnsignedInt value) {
  commutationsLimit_Accessor = value;
  return *this;
}


const uci::type::EA_ComponentType::Band& EA_ComponentType::getBand() const {
  return *band_Accessor;
}

uci::type::EA_ComponentType::Band& EA_ComponentType::getBand() {
  return *band_Accessor;
}

uci::type::EA_ComponentType& EA_ComponentType::setBand(const uci::type::EA_ComponentType::Band& accessor) {
  if (&accessor != band_Accessor.get()) {
    band_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FrequencyTypeValue EA_ComponentType::getInstantaneousBand() const {
  if (instantaneousBand_Accessor) {
    return *instantaneousBand_Accessor;
  }
  throw uci::base::UCIException("Error in getInstantaneousBand(): An attempt was made to get an optional field that was not enabled, call hasInstantaneousBand() to determine if it is safe to call getInstantaneousBand()");
}

uci::type::EA_ComponentType& EA_ComponentType::setInstantaneousBand(uci::type::FrequencyTypeValue value) {
  instantaneousBand_Accessor = value;
  return *this;
}

bool EA_ComponentType::hasInstantaneousBand() const noexcept {
  return instantaneousBand_Accessor.has_value();
}

uci::type::EA_ComponentType& EA_ComponentType::clearInstantaneousBand() noexcept {
  instantaneousBand_Accessor.reset();
  return *this;
}

std::unique_ptr<EA_ComponentType> EA_ComponentType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_ComponentType : type};
  return (requestedType == uci::type::accessorType::eA_ComponentType) ? boost::make_unique<EA_ComponentType>() : nullptr;
}

/**  */
namespace EA_ComponentType_Names {

constexpr const char* Extern_Type_Name{"EA_ComponentType"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* FieldOfRegard_Name{"FieldOfRegard"};
constexpr const char* FrequencyChangeTime_Name{"FrequencyChangeTime"};
constexpr const char* DutyFactorLimit_Name{"DutyFactorLimit"};
constexpr const char* BeamLimit_Name{"BeamLimit"};
constexpr const char* CommutationsLimit_Name{"CommutationsLimit"};
constexpr const char* Band_Name{"Band"};
constexpr const char* InstantaneousBand_Name{"InstantaneousBand"};

} // namespace EA_ComponentType_Names

void EA_ComponentType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_ComponentType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EA_ComponentType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EA_ComponentType_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.getComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_ComponentType_Names::FieldOfRegard_Name) {
      FieldOfRegardType::deserialize(valueType.second, accessor.getFieldOfRegard(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_ComponentType_Names::FrequencyChangeTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyChangeTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + EA_ComponentType_Names::DutyFactorLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDutyFactorLimit(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + EA_ComponentType_Names::BeamLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBeamLimit(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + EA_ComponentType_Names::CommutationsLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCommutationsLimit(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + EA_ComponentType_Names::Band_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EA_ComponentType::Band& boundedList = accessor.getBand();
        const uci::type::EA_ComponentType::Band::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EA_ComponentType_Names::InstantaneousBand_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInstantaneousBand(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string EA_ComponentType::serialize(const uci::type::EA_ComponentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EA_ComponentType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EA_ComponentType_Names::Extern_Type_Name);
  }
  ComponentID_Type::serialize(accessor.getComponentID(), node, EA_ComponentType_Names::ComponentID_Name);
  FieldOfRegardType::serialize(accessor.getFieldOfRegard(), node, EA_ComponentType_Names::FieldOfRegard_Name);
  asb_uci::util::SerializationHelpers::serializeDuration(accessor.getFrequencyChangeTime(), node, EA_ComponentType_Names::FrequencyChangeTime_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDutyFactorLimit(), node, EA_ComponentType_Names::DutyFactorLimit_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getBeamLimit(), node, EA_ComponentType_Names::BeamLimit_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getCommutationsLimit(), node, EA_ComponentType_Names::CommutationsLimit_Name);
  {
    const uci::type::EA_ComponentType::Band& boundedList = accessor.getBand();
    for (uci::type::EA_ComponentType::Band::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FrequencyRangeType::serialize(boundedList.at(i), node, EA_ComponentType_Names::Band_Name);
    }
  }
  if (accessor.hasInstantaneousBand()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getInstantaneousBand(), node, EA_ComponentType_Names::InstantaneousBand_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EA_ComponentType& EA_ComponentType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EA_ComponentType>().release());
}

uci::type::EA_ComponentType& EA_ComponentType::create(const uci::type::EA_ComponentType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EA_ComponentType> newAccessor{boost::make_unique<asb_uci::type::EA_ComponentType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EA_ComponentType::destroy(uci::type::EA_ComponentType& accessor) {
  delete dynamic_cast<asb_uci::type::EA_ComponentType*>(&accessor);
}

} // namespace type

} // namespace uci

